Search.setIndex({"alltitles": {"0.1.0": [[122, null], [163, "id6519"]], "0.1.1": [[123, null], [163, "id6351"]], "0.1.2": [[124, null], [163, "id6183"]], "0.1.3": [[125, null], [163, "id6014"]], "0.1.4": [[126, null], [163, "id5846"]], "0.10.0": [[127, null], [163, "id1539"]], "0.10.1": [[128, null], [163, "id1365"]], "0.10.1rc1": [[128, "rc1"], [163, "rc1"]], "0.10.2": [[129, null], [163, "id1193"]], "0.10.3": [[130, null], [163, "id1021"]], "0.10.4": [[131, null], [163, "id850"]], "0.11.0": [[132, null], [163, "id679"]], "0.11.1": [[133, null], [163, "id509"]], "0.12.0": [[134, null], [163, "id338"]], "0.12.1": [[135, null], [163, "id167"]], "0.13.0.dev": [[161, null], [163, "dev"]], "0.2.0": [[136, null], [163, "id5674"]], "0.2.1": [[137, null], [163, "v0-2-1"]], "0.2.2": [[138, null], [163, "id5500"]], "0.2.3": [[139, null], [163, "id5332"]], "0.2.4": [[140, null], [163, "id5163"]], "0.2.5": [[141, "id2"], [163, "id4994"]], "0.2.5.1": [[141, null], [163, "id4990"]], "0.2.6": [[142, null], [163, "id4820"]], "0.3.0": [[143, null], [163, "id4645"]], "0.3.0 beta": [[143, "beta"], [163, "id4649"]], "0.3.1": [[144, null], [163, "id4474"]], "0.4.0": [[145, null], [163, "id4302"]], "0.4.1": [[146, null], [163, "id4133"]], "0.4.2": [[147, null], [163, "id3964"]], "0.5.0": [[148, null], [163, "id3780"]], "0.5.0 alpha": [[148, "alpha"], [163, "alpha"]], "0.5.0 beta": [[148, "beta"], [163, "beta"]], "0.5.0 rc": [[148, "rc"], [163, "id3784"]], "0.5.1": [[149, null], [163, "id3609"]], "0.5.2": [[150, null], [163, "id3439"]], "0.6.0": [[151, null], [163, "id3254"]], "0.6.0a0": [[151, "a0"], [163, "a0"]], "0.6.0b0": [[151, "b0"], [163, "b0"]], "0.6.0rc": [[151, "rc"], [163, "rc"]], "0.6.1": [[152, null], [163, "id3084"]], "0.6.2": [[153, null], [163, "id2914"]], "0.7.0": [[154, null], [163, "id2742"]], "0.7.1": [[155, null], [163, "id2571"]], "0.8.0": [[156, null], [163, "id2399"]], "0.8.1": [[157, null], [163, "id2227"]], "0.9.0": [[158, null], [163, "id2055"]], "0.9.1": [[159, null], [163, "id1885"]], "0.9.2": [[160, null], [163, "id1711"]], "3D Plots of connectomes": [[495, "d-plots-of-connectomes"]], "3D Plots of markers": [[495, "d-plots-of-markers"]], "3D Plots of statistical maps or atlases on the cortical surface": [[495, "d-plots-of-statistical-maps-or-atlases-on-the-cortical-surface"]], "3D and 4D niimgs: handling and visualizing": [[2, null]], "3D visualization in a web browser": [[10, "d-visualization-in-a-web-browser"], [23, "d-visualization-in-a-web-browser"], [55, "d-visualization-in-a-web-browser"], [57, "d-visualization-in-a-web-browser"], [61, "d-visualization-in-a-web-browser"]], "A few definitions": [[171, "a-few-definitions"]], "A first contrast estimation and plotting": [[68, "a-first-contrast-estimation-and-plotting"]], "A first estimator": [[171, "a-first-estimator"]], "A first step: looking at our data": [[4, "a-first-step-looking-at-our-data"]], "A function to generate data": [[47, "a-function-to-generate-data"]], "A functional connectome: a graph of interactions": [[166, "a-functional-connectome-a-graph-of-interactions"]], "A functional connectome: extracting coordinates of regions": [[166, "a-functional-connectome-extracting-coordinates-of-regions"]], "A introduction tutorial to fMRI decoding": [[3, null]], "A primer on BOLD-fMRI data analysis": [[181, "a-primer-on-bold-fmri-data-analysis"]], "A short demo of the surface images & maskers": [[114, null]], "A simple function to plot slices": [[47, "a-simple-function-to-plot-slices"]], "AAL atlas": [[199, null]], "ABIDE PCP dataset": [[197, null]], "ADHD": [[480, "adhd"]], "ADHD dataset": [[200, null]], "ANOVA pipeline with Decoder object": [[31, "anova-pipeline-with-decoder-object"], [36, "anova-pipeline-with-decoder-object"]], "API References": [[484, null]], "API changes summary": [[136, "api-changes-summary"], [163, "api-changes-summary"]], "APIs of nilearn objects": [[179, "apis-of-nilearn-objects"]], "Access": [[197, "access"], [198, "access"], [199, "access"], [200, "access"], [201, "access"], [202, "access"], [204, "access"], [205, "access"], [206, "access"], [207, "access"], [208, "access"], [209, "access"], [210, "access"], [211, "access"], [212, "access"], [213, "access"], [214, "access"], [215, "access"], [217, "access"], [218, "access"], [219, "access"], [220, "access"], [221, "access"], [222, "access"], [223, "access"], [224, "access"], [225, "access"], [227, "access"], [228, "access"], [229, "access"], [230, "access"], [231, "access"], [232, "access"], [233, "access"], [234, "access"], [235, "access"], [236, "access"], [237, "access"]], "Accessing individual volumes in 4D images": [[191, "accessing-individual-volumes-in-4d-images"]], "Adding a time derivative to the design": [[68, "adding-a-time-derivative-to-the-design"]], "Adding atlases and datasets": [[179, "adding-atlases-and-datasets"]], "Adding overlays, edges, contours, contour fillings, markers, scale bar": [[495, "adding-overlays-edges-contours-contour-fillings-markers-scale-bar"]], "Additional cases": [[179, "additional-cases"]], "Adjust the sample locations": [[25, "adjust-the-sample-locations"]], "Advanced decoding using scikit learn": [[101, null]], "Advanced statistical analysis of brain images": [[100, null], [116, "advanced-statistical-analysis-of-brain-images"]], "Advanced usage: manual pipelines and scaling up": [[119, null]], "Advanced: Design philosophy of \u201cMaskers\u201d": [[192, null]], "Advanced: scikit-learn Pipelines": [[192, null]], "After mask computation: extracting time series": [[91, "after-mask-computation-extracting-time-series"]], "Aggregate beta maps from the LSA model based on condition": [[103, "aggregate-beta-maps-from-the-lsa-model-based-on-condition"]], "Allen 2011 atlas": [[201, null]], "An alternative to ICA: Dictionary learning": [[170, "an-alternative-to-ica-dictionary-learning"]], "An exercise to go further": [[47, "an-exercise-to-go-further"]], "An introduction to GLMs in fMRI statistical analysis": [[181, null]], "An introduction to decoding": [[171, null]], "Analysis of an fMRI dataset with a Finite Impule Response (FIR) model": [[67, null]], "Analyze data": [[77, "analyze-data"]], "Analyzing fMRI using GLMs": [[182, null]], "And now display the corresponding graph": [[55, "and-now-display-the-corresponding-graph"], [55, "id1"], [57, "and-now-display-the-corresponding-graph"]], "Annotate plots: annotate": [[16, "annotate-plots-annotate"]], "Answer questions": [[179, "answer-questions"]], "Applications of beta series": [[103, "applications-of-beta-series"]], "Apply CanICA on the data": [[51, "apply-canica-on-the-data"]], "Applying a mask": [[120, "applying-a-mask"]], "Applying a scikit-learn machine learning method": [[120, "applying-a-scikit-learn-machine-learning-method"]], "Applying clustering": [[168, "applying-clustering"]], "Applying the mask to extract the corresponding time series": [[27, "applying-the-mask-to-extract-the-corresponding-time-series"]], "Atlases": [[194, "atlases"]], "Automatically computing a mask": [[120, "automatically-computing-a-mask"]], "Available Colormaps": [[495, "available-colormaps"]], "Available documentation for Nilearn": [[499, null]], "Axes": [[489, "axes"]], "BASC multiscale atlas": [[202, null]], "BIDS dataset first and second level analysis": [[104, null]], "BIDS features": [[480, "bids-features"]], "BIDS language localizer": [[203, null]], "Bagging several models": [[172, "bagging-several-models"]], "Basic Atlas plotting": [[11, null]], "Basic nilearn example: manipulating and looking at data": [[4, null]], "Basic numerics and plotting with Python": [[5, null]], "Basic tutorials": [[1, null], [116, "basic-tutorials"]], "Benefits": [[26, null]], "Beta-Series Modeling for Task-Based Functional Connectivity and Decoding": [[103, null]], "Bootstrap Analysis of Stable Clusters": [[202, "bootstrap-analysis-of-stable-clusters"]], "Bounds on alpha": [[178, "bounds-on-alpha"]], "Brain mapping with mass univariate": [[45, "brain-mapping-with-mass-univariate"]], "Brain maps using Dictionary learning": [[169, "brain-maps-using-dictionary-learning"]], "Brain parcellations": [[166, "brain-parcellations"]], "Brain parcellations with Hierarchical KMeans Clustering": [[52, "brain-parcellations-with-hierarchical-kmeans-clustering"]], "Brain parcellations with KMeans Clustering": [[52, "brain-parcellations-with-kmeans-clustering"]], "Brain parcellations with ReNA Clustering": [[52, "brain-parcellations-with-rena-clustering"]], "Brain parcellations with Ward Clustering": [[52, "brain-parcellations-with-ward-clustering"]], "Brainomics Localizer": [[204, null]], "Breaking an atlas of labels in separated regions": [[88, null]], "Bug fixes": [[136, "bug-fixes"], [139, "bug-fixes"], [146, "bug-fixes"], [163, "bug-fixes"], [163, "id5333"], [163, "id5678"]], "Build a mask from this statistical map (Improving the quality of the mask)": [[96, "build-a-mask-from-this-statistical-map-improving-the-quality-of-the-mask"]], "Build a mesh (of a cylinder)": [[25, "build-a-mesh-of-a-cylinder"]], "Build a proper event structure for each run": [[35, "build-a-proper-event-structure-for-each-run"]], "Build a statistical test to find voxels of interest": [[96, "build-a-statistical-test-to-find-voxels-of-interest"]], "Build and deploy the documentation manually": [[188, "build-and-deploy-the-documentation-manually"]], "Build and display a correlation matrix": [[57, "build-and-display-a-correlation-matrix"]], "Build of stable docs": [[188, "build-of-stable-docs"]], "Build the decoders, using scikit-learn": [[37, "build-the-decoders-using-scikit-learn"]], "Build the decoding pipeline": [[35, "build-the-decoding-pipeline"]], "Build the distributions and upload them to Pypi": [[188, "build-the-distributions-and-upload-them-to-pypi"]], "Building documentation": [[179, "building-documentation"]], "Building the encoding models": [[43, "building-the-encoding-models"]], "Building your own neuroimaging machine-learning pipeline": [[120, null]], "CHANGES": [[151, "changes"], [163, "id3258"]], "CIRCLE_CI_TOKEN": [[164, null]], "Calculate and Plot F-test": [[71, "calculate-and-plot-f-test"]], "Calculate and plot contrast": [[71, "calculate-and-plot-contrast"]], "Calculating seed-based functional connectivity": [[24, "calculating-seed-based-functional-connectivity"]], "Changelog": [[122, "changelog"], [123, "changelog"], [124, "changelog"], [125, "changelog"], [136, "changelog"], [137, "changelog"], [139, "changelog"], [163, "changelog"], [163, "id5507"], [163, "id5675"], [163, "id6015"], [163, "id6184"], [163, "id6352"], [163, "id6520"], [179, "changelog"]], "Changes": [[127, "changes"], [128, "changes"], [128, "id4"], [129, "changes"], [130, "changes"], [131, "changes"], [132, "changes"], [134, "changes"], [135, "changes"], [138, "changes"], [140, "changes"], [141, "changes"], [142, "changes"], [143, "changes"], [143, "id2"], [144, "changes"], [145, "changes"], [146, "changes"], [147, "changes"], [148, "changes"], [148, "id3"], [148, "id6"], [148, "id10"], [149, "changes"], [151, "id3"], [151, "id7"], [151, "id11"], [153, "changes"], [154, "changes"], [156, "changes"], [157, "changes"], [158, "changes"], [159, "changes"], [160, "changes"], [161, "changes"], [163, "changes"], [163, "id171"], [163, "id342"], [163, "id683"], [163, "id854"], [163, "id1026"], [163, "id1198"], [163, "id1369"], [163, "id1372"], [163, "id1544"], [163, "id1718"], [163, "id1888"], [163, "id2060"], [163, "id2232"], [163, "id2404"], [163, "id2747"], [163, "id2917"], [163, "id3261"], [163, "id3266"], [163, "id3270"], [163, "id3611"], [163, "id3783"], [163, "id3787"], [163, "id3792"], [163, "id3796"], [163, "id3965"], [163, "id4135"], [163, "id4306"], [163, "id4476"], [163, "id4646"], [163, "id4651"], [163, "id4823"], [163, "id4991"], [163, "id5165"], [163, "id5504"]], "Changing the drift model": [[68, "changing-the-drift-model"]], "Changing the feature selection": [[101, "changing-the-feature-selection"]], "Changing the hemodynamic response model": [[68, "changing-the-hemodynamic-response-model"]], "Changing the prediction engine": [[101, "changing-the-prediction-engine"]], "Check installation": [[496, "check-installation"]], "Choice of the prediction accuracy measure": [[171, "choice-of-the-prediction-accuracy-measure"]], "Choosing a good cross-validation strategy": [[171, "choosing-a-good-cross-validation-strategy"]], "Choosing colormaps": [[13, "choosing-colormaps"]], "Choosing the right model for your analysis": [[103, null]], "Choosing the right predictive model for neuroimaging": [[172, null]], "Circle-CI workflows": [[164, "circle-ci-workflows"]], "Citing nilearn": [[0, "citing-nilearn"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Classes": [[193, "classes"], [195, "classes"], [196, "classes"], [482, "classes"], [482, "id1"], [482, "id3"], [486, "classes"], [489, "classes"], [491, "classes"], [492, "classes"], [494, "classes"]], "Classification of age groups using functional connectivity": [[54, null]], "Classification: two classes or multi-class": [[172, "classification-two-classes-or-multi-class"]], "Classifier": [[176, "classifier"]], "Closing policy": [[188, "closing-policy"]], "Clustering methods to learn a brain parcellation from fMRI": [[52, null]], "Clustering to parcellate the brain in regions": [[168, null]], "Code": [[173, null], [173, null], [191, null]], "Code examples": [[132, null], [163, null], [495, null]], "Code of Conduct": [[179, "code-of-conduct"]], "Coding Style": [[179, "coding-style"]], "Colormaps in Nilearn": [[13, null]], "Common data preparation steps: smoothing, filtering, resampling": [[192, "common-data-preparation-steps-smoothing-filtering-resampling"]], "Compare CanICA to dictionary learning": [[51, "compare-canica-to-dictionary-learning"]], "Compare Hierarchical Kmeans clusters with those from Kmeans": [[52, "compare-hierarchical-kmeans-clusters-with-those-from-kmeans"]], "Compare run-specific and fixed effects contrasts": [[73, "compare-run-specific-and-fixed-effects-contrasts"]], "Compare the results": [[41, "compare-the-results"]], "Compare the three modeling approaches": [[103, "compare-the-three-modeling-approaches"]], "Comparing connectomes on different reference atlases": [[50, null]], "Comparing images": [[489, "module-nilearn.plotting.img_comparison"]], "Comparing the different approaches on simulated data": [[165, "comparing-the-different-approaches-on-simulated-data"]], "Comparing the means of 2 images": [[87, null]], "Comparing to massively univariate analysis: F_score or SPM": [[176, "comparing-to-massively-univariate-analysis-f-score-or-spm"]], "Comparing transparent and opaque thresholding": [[26, "comparing-transparent-and-opaque-thresholding"]], "Compressed representation": [[168, "compressed-representation"]], "Compressed representation of ReNA clustering": [[52, "compressed-representation-of-rena-clustering"]], "Compressed representation of Ward clustering": [[52, "compressed-representation-of-ward-clustering"]], "Computation times": [[8, null], [29, null], [48, null], [62, null], [75, null], [84, null], [99, null], [115, null], [117, null], [497, null]], "Compute a range of contrasts across both runs": [[73, "compute-a-range-of-contrasts-across-both-runs"]], "Compute and display a correlation matrix": [[59, "compute-and-display-a-correlation-matrix"]], "Compute and resample a mask": [[91, "compute-and-resample-a-mask"]], "Compute correlation coefficients": [[53, "compute-correlation-coefficients"]], "Compute fixed effects statistics using preprocessed data of both runs": [[73, "compute-fixed-effects-statistics-using-preprocessed-data-of-both-runs"]], "Compute partial correlation matrix": [[61, "compute-partial-correlation-matrix"]], "Compute prediction scores with different values of screening percentile": [[36, "compute-prediction-scores-with-different-values-of-screening-percentile"]], "Compute statistics": [[112, "compute-statistics"]], "Compute the sparse inverse covariance": [[55, "compute-the-sparse-inverse-covariance"]], "Compute within spheres averaged time-series": [[61, "compute-within-spheres-averaged-time-series"]], "Computing a Region of Interest (ROI) mask manually": [[96, null]], "Computing a connectome with sparse inverse covariance": [[55, null]], "Computing a mask from raw EPI data": [[91, "computing-a-mask-from-raw-epi-data"]], "Computing a mask from the background": [[91, "computing-a-mask-from-the-background"]], "Computing and applying spatial masks": [[191, "computing-and-applying-spatial-masks"]], "Computing contrasts": [[180, "computing-contrasts"]], "Computing functional connectivity matrices": [[169, "computing-functional-connectivity-matrices"]], "Computing group-sparse precision matrices": [[56, "computing-group-sparse-precision-matrices"]], "Computing the mask from the MNI template": [[91, "computing-the-mask-from-the-mni-template"]], "Conclusion": [[68, "conclusion"], [111, "conclusion"]], "Connectivity structure estimation on simulated data": [[60, null]], "Connectivity with a surface atlas and SurfaceLabelsMasker": [[114, "connectivity-with-a-surface-atlas-and-surfacelabelsmasker"]], "Connectome extracted from Dosenbach\u2019s atlas": [[61, "connectome-extracted-from-dosenbach-s-atlas"]], "Connectome extraction: inverse covariance for direct connections": [[165, null]], "Content": [[197, "content"], [198, "content"], [199, "content"], [200, "content"], [201, "content"], [202, "content"], [204, "content"], [205, "content"], [206, "content"], [207, "content"], [208, "content"], [209, "content"], [210, "content"], [211, "content"], [212, "content"], [213, "content"], [214, "content"], [215, "content"], [216, null], [217, "content"], [218, "content"], [219, "content"], [220, "content"], [221, "content"], [222, "content"], [223, "content"], [224, "content"], [225, "content"], [226, "content"], [227, "content"], [228, "content"], [229, "content"], [230, "content"], [231, "content"], [232, "content"], [233, "content"], [234, "content"], [235, "content"], [236, "content"], [237, "content"]], "Continuous integration": [[164, null], [179, "continuous-integration"]], "Contour projections in both hemispheres": [[15, "contour-projections-in-both-hemispheres"]], "Contours and with fillings": [[15, "contours-and-with-fillings"]], "Contribute code": [[179, "contribute-code"]], "Contributing": [[179, null], [179, "id5"]], "Contribution Guidelines": [[179, "contribution-guidelines"]], "Contributors": [[136, "contributors"], [138, "contributors"], [141, "contributors"], [145, "contributors"], [148, "contributors"], [148, "id7"], [148, "id11"], [149, "contributors"], [150, "contributors"], [151, "contributors"], [151, "id9"], [151, "id13"], [152, "contributors"], [153, "contributors"], [163, "contributors"], [163, "id3087"], [163, "id3263"], [163, "id3268"], [163, "id3272"], [163, "id3442"], [163, "id3613"], [163, "id3788"], [163, "id3793"], [163, "id3797"], [163, "id4307"], [163, "id4996"], [163, "id5505"], [163, "id5679"]], "Control via commit message": [[164, null], [164, null], [164, null]], "Controlling how the mask is computed from the data": [[192, "controlling-how-the-mask-is-computed-from-the-data"]], "Controlling the contrast of the background when plotting": [[18, null]], "Convert the multi-class labels to binary labels": [[41, "convert-the-multi-class-labels-to-binary-labels"]], "Coordinates of Default Mode Network": [[61, "coordinates-of-default-mode-network"]], "Copying headers from input images with math_img": [[105, null]], "Core developers": [[0, "core-developers"]], "Correlation between regressors": [[66, "correlation-between-regressors"]], "Cortical surface-based searchlight decoding": [[39, null]], "Craddock 2012 atlas": [[205, null]], "Create a large fMRI image": [[111, "create-a-large-fmri-image"]], "Create a second level design matrix": [[80, "create-a-second-level-design-matrix"]], "Create a set of binary masks": [[111, "create-a-set-of-binary-masks"]], "Create a simple experimental paradigm": [[80, "create-a-simple-experimental-paradigm"]], "Create data": [[47, "create-data"]], "Create design matrices": [[66, "create-design-matrices"]], "Creating a surface image": [[7, "creating-a-surface-image"]], "Cross validation": [[176, "cross-validation"]], "Cross-validation": [[171, "cross-validation"]], "Cross-validation algorithm": [[178, "cross-validation-algorithm"]], "Cross-validation with scikit-learn": [[101, "cross-validation-with-scikit-learn"], [174, "cross-validation-with-scikit-learn"]], "Cross-validation with the decoder": [[3, "cross-validation-with-the-decoder"]], "Custom data loading: loading only the first 100 time points": [[192, "custom-data-loading-loading-only-the-first-100-time-points"]], "Data": [[7, "data"]], "Data Usage Agreement": [[228, null], [286, null]], "Data fetcher": [[23, "data-fetcher"]], "Data format": [[7, "data-format"]], "Data loading and preprocessing": [[120, "data-loading-and-preprocessing"]], "Data loading: movie-watching data": [[168, "data-loading-movie-watching-data"]], "Dataset caching": [[164, "dataset-caching"]], "Dataset formatting: data shape": [[190, null]], "Datasets descriptions": [[194, "datasets-descriptions"]], "Decode via the Decoder": [[41, "decode-via-the-decoder"]], "Decoding and MVPA: predicting from brain images": [[175, null]], "Decoding and predicting from brain images": [[30, null], [116, "decoding-and-predicting-from-brain-images"]], "Decoding made easy": [[171, "decoding-made-easy"]], "Decoding of a dataset after GLM fit for signal extraction": [[35, null]], "Decoding on simulated data": [[174, null]], "Decoding on the different masks": [[34, "decoding-on-the-different-masks"]], "Decoding performance increase on Haxby dataset": [[173, "decoding-performance-increase-on-haxby-dataset"]], "Decoding with ANOVA + SVM: face vs house in the Haxby dataset": [[31, null]], "Decoding with FREM: face vs house vs chair object recognition": [[33, null]], "Decoding with Support Vector Machine": [[3, "decoding-with-support-vector-machine"]], "Decoding with a scikit-learn Pipeline": [[114, "decoding-with-a-scikit-learn-pipeline"]], "Decoding without a mask: Anova-SVM": [[171, "decoding-without-a-mask-anova-svm"]], "Decoding without a mask: Anova-SVM in scikit-lean": [[101, "decoding-without-a-mask-anova-svm-in-scikit-lean"]], "Decoding without a mask: Anova-SVM using scikit-learn": [[174, "decoding-without-a-mask-anova-svm-using-scikit-learn"]], "Decreasing memory used when loading Nifti images": [[190, null]], "Default Mode Network extraction of ADHD dataset": [[64, null]], "Define parameters": [[66, "define-parameters"]], "Define stimulus parameters and response models": [[69, "define-stimulus-parameters-and-response-models"]], "Define the LSA model": [[103, "define-the-lsa-model"]], "Define the LSS models": [[103, "define-the-lss-models"]], "Define the standard model": [[103, "define-the-standard-model"]], "Demo glass brain plotting": [[15, "demo-glass-brain-plotting"]], "Dependencies": [[496, "dependencies"]], "Deriving a label-based mask": [[12, "deriving-a-label-based-mask"]], "Deriving a mask": [[12, "deriving-a-mask"]], "Deriving spatial maps from group fMRI data using ICA and Dictionary Learning": [[51, null]], "Description": [[178, "description"]], "Design matrix: event-based and time series-based": [[180, "design-matrix-event-based-and-time-series-based"]], "Destrieux atlas": [[206, null]], "Destrieux parcellation on inflated surface with different views": [[23, "destrieux-parcellation-on-inflated-surface-with-different-views"]], "Destrieux parcellation on pial surface": [[23, "destrieux-parcellation-on-pial-surface"]], "Destrieux parcellation with custom view: explicitly set angle": [[23, "destrieux-parcellation-with-custom-view-explicitly-set-angle"]], "Detecting voxels with significant effects": [[6, "detecting-voxels-with-significant-effects"]], "Deterministic atlases": [[194, "deterministic-atlases"]], "Development": [[496, "development"]], "Development version": [[496, "development-version"]], "DiFuMo atlas": [[208, null]], "Difference in meanings between different toolboxes": [[183, null]], "Different classifiers in decoding the Haxby dataset": [[32, null]], "Different connectivity modes": [[88, "different-connectivity-modes"]], "Different display modes": [[495, "different-display-modes"]], "Different linear models": [[172, "different-linear-models"]], "Different masking strategies": [[192, "different-masking-strategies"]], "Different plotting functions": [[495, "different-plotting-functions"]], "Different projections for the left and right hemispheres": [[15, "different-projections-for-the-left-and-right-hemispheres"]], "Dimension reduction with feature selection": [[171, "dimension-reduction-with-feature-selection"]], "Disclaimer": [[198, "disclaimer"]], "Display ROI on surface": [[24, "display-roi-on-surface"]], "Display connectome": [[61, "display-connectome"]], "Display connectome from surface parcellation": [[23, "display-connectome-from-surface-parcellation"]], "Display objects returned by plotting functions": [[16, "display-objects-returned-by-plotting-functions"]], "Display object\u2019s features": [[16, "display-object-s-features"]], "Display outlines of the regions of interest on top of a statistical map": [[10, "display-outlines-of-the-regions-of-interest-on-top-of-a-statistical-map"]], "Display spheres summary report": [[61, "display-spheres-summary-report"]], "Display subject t_maps": [[81, "display-subject-t-maps"]], "Display the connectome matrix": [[55, "display-the-connectome-matrix"]], "Display the sparse inverse covariance": [[55, "display-the-sparse-inverse-covariance"]], "Display time series": [[61, "display-time-series"]], "Displaying or saving to an image file": [[495, "displaying-or-saving-to-an-image-file"]], "Displaying results": [[56, "displaying-results"]], "Documentation": [[179, "documentation"]], "Documentation build and deploy": [[164, "documentation-build-and-deploy"]], "Documentation style": [[179, "documentation-style"]], "Dosenbach 2010 atlas": [[209, null]], "Download a brain development fMRI dataset and turn it to a data matrix": [[52, "download-a-brain-development-fmri-dataset-and-turn-it-to-a-data-matrix"]], "Downloading statistical maps from the Neurovault repository": [[121, null]], "Downloading the data": [[120, "downloading-the-data"]], "Downloading tutorial datasets from Internet": [[2, "downloading-tutorial-datasets-from-internet"]], "Drop-in Hours": [[496, "drop-in-hours"]], "Duality gap": [[178, "duality-gap"]], "Dummy estimator": [[101, "dummy-estimator"]], "ENHANCEMENTS": [[148, "enhancements"], [151, "enhancements"], [152, "enhancements"], [153, "enhancements"], [163, "id2915"], [163, "id3085"], [163, "id3257"], [163, "id3782"]], "Empirical comparisons": [[173, "empirical-comparisons"]], "Encoding models for visual stimuli from Miyawaki et al. 2008": [[43, null]], "Enhancements": [[127, "enhancements"], [128, "enhancements"], [128, "id3"], [129, "enhancements"], [130, "enhancements"], [131, "enhancements"], [132, "enhancements"], [133, "enhancements"], [134, "enhancements"], [135, "enhancements"], [136, "enhancements"], [138, "enhancements"], [142, "enhancements"], [143, "enhancements"], [143, "id4"], [144, "enhancements"], [145, "enhancements"], [146, "enhancements"], [148, "id2"], [148, "id5"], [148, "id9"], [155, "enhancements"], [156, "enhancements"], [157, "enhancements"], [158, "enhancements"], [159, "enhancements"], [160, "enhancements"], [161, "enhancements"], [163, "enhancements"], [163, "id170"], [163, "id341"], [163, "id512"], [163, "id682"], [163, "id853"], [163, "id1025"], [163, "id1197"], [163, "id1368"], [163, "id1371"], [163, "id1543"], [163, "id1717"], [163, "id1887"], [163, "id2059"], [163, "id2231"], [163, "id2403"], [163, "id2575"], [163, "id3786"], [163, "id3790"], [163, "id3795"], [163, "id4134"], [163, "id4304"], [163, "id4478"], [163, "id4648"], [163, "id4653"], [163, "id4822"], [163, "id5502"], [163, "id5677"]], "Estimate contrasts": [[64, "estimate-contrasts"], [70, "estimate-contrasts"]], "Estimate correlations": [[61, "estimate-correlations"]], "Estimate second level model": [[78, "estimate-second-level-model"], [79, "estimate-second-level-model"], [81, "estimate-second-level-model"]], "Estimate second level models": [[82, "estimate-second-level-models"]], "Estimated Attributes": [[179, "estimated-attributes"]], "Estimating receptive fields": [[43, "estimating-receptive-fields"]], "Event-based": [[180, "event-based"]], "Example": [[191, null]], "Example code": [[168, null], [176, null]], "Example of MRI response functions": [[69, null]], "Example of generic design in second-level models": [[79, null]], "Example of pattern recognition on simulated data": [[47, null]], "Example of second level design matrix": [[80, null]], "Example of surface-based first-level analysis": [[70, null]], "Example use of TV-L1 SpaceNet": [[42, "example-use-of-tv-l1-spacenet"]], "Examples": [[116, null], [191, null], [192, null], [192, null], [192, null], [192, null], [192, null], [192, null]], "Examples nifti masker reports": [[481, null]], "Examples of GLM reports": [[480, null]], "Examples of design matrices": [[66, null]], "Examples surface masker reports": [[481, "examples-surface-masker-reports"]], "Examples to better understand the NiftiMasker": [[192, null]], "Examples using Neurovault": [[121, "examples-using-neurovault"]], "Examples using nilearn.connectome.ConnectivityMeasure": [[239, "examples-using-nilearn-connectome-connectivitymeasure"]], "Examples using nilearn.connectome.GroupSparseCovarianceCV": [[241, "examples-using-nilearn-connectome-groupsparsecovariancecv"]], "Examples using nilearn.datasets.fetch_adhd": [[248, "examples-using-nilearn-datasets-fetch-adhd"]], "Examples using nilearn.datasets.fetch_atlas_allen_2011": [[250, "examples-using-nilearn-datasets-fetch-atlas-allen-2011"]], "Examples using nilearn.datasets.fetch_atlas_basc_multiscale_2015": [[251, "examples-using-nilearn-datasets-fetch-atlas-basc-multiscale-2015"]], "Examples using nilearn.datasets.fetch_atlas_destrieux_2009": [[253, "examples-using-nilearn-datasets-fetch-atlas-destrieux-2009"]], "Examples using nilearn.datasets.fetch_atlas_difumo": [[254, "examples-using-nilearn-datasets-fetch-atlas-difumo"]], "Examples using nilearn.datasets.fetch_atlas_harvard_oxford": [[255, "examples-using-nilearn-datasets-fetch-atlas-harvard-oxford"]], "Examples using nilearn.datasets.fetch_atlas_juelich": [[256, "examples-using-nilearn-datasets-fetch-atlas-juelich"]], "Examples using nilearn.datasets.fetch_atlas_msdl": [[257, "examples-using-nilearn-datasets-fetch-atlas-msdl"]], "Examples using nilearn.datasets.fetch_atlas_smith_2009": [[260, "examples-using-nilearn-datasets-fetch-atlas-smith-2009"]], "Examples using nilearn.datasets.fetch_atlas_surf_destrieux": [[261, "examples-using-nilearn-datasets-fetch-atlas-surf-destrieux"]], "Examples using nilearn.datasets.fetch_atlas_yeo_2011": [[263, "examples-using-nilearn-datasets-fetch-atlas-yeo-2011"]], "Examples using nilearn.datasets.fetch_coords_dosenbach_2010": [[265, "examples-using-nilearn-datasets-fetch-coords-dosenbach-2010"]], "Examples using nilearn.datasets.fetch_coords_power_2011": [[266, "examples-using-nilearn-datasets-fetch-coords-power-2011"]], "Examples using nilearn.datasets.fetch_development_fmri": [[268, "examples-using-nilearn-datasets-fetch-development-fmri"]], "Examples using nilearn.datasets.fetch_ds000030_urls": [[269, "examples-using-nilearn-datasets-fetch-ds000030-urls"]], "Examples using nilearn.datasets.fetch_fiac_first_level": [[270, "examples-using-nilearn-datasets-fetch-fiac-first-level"]], "Examples using nilearn.datasets.fetch_haxby": [[271, "examples-using-nilearn-datasets-fetch-haxby"]], "Examples using nilearn.datasets.fetch_icbm152_2009": [[272, "examples-using-nilearn-datasets-fetch-icbm152-2009"]], "Examples using nilearn.datasets.fetch_icbm152_brain_gm_mask": [[273, "examples-using-nilearn-datasets-fetch-icbm152-brain-gm-mask"]], "Examples using nilearn.datasets.fetch_language_localizer_demo_dataset": [[274, "examples-using-nilearn-datasets-fetch-language-localizer-demo-dataset"]], "Examples using nilearn.datasets.fetch_localizer_button_task": [[275, "examples-using-nilearn-datasets-fetch-localizer-button-task"]], "Examples using nilearn.datasets.fetch_localizer_calculation_task": [[276, "examples-using-nilearn-datasets-fetch-localizer-calculation-task"]], "Examples using nilearn.datasets.fetch_localizer_contrasts": [[277, "examples-using-nilearn-datasets-fetch-localizer-contrasts"]], "Examples using nilearn.datasets.fetch_localizer_first_level": [[278, "examples-using-nilearn-datasets-fetch-localizer-first-level"]], "Examples using nilearn.datasets.fetch_megatrawls_netmats": [[279, "examples-using-nilearn-datasets-fetch-megatrawls-netmats"]], "Examples using nilearn.datasets.fetch_mixed_gambles": [[280, "examples-using-nilearn-datasets-fetch-mixed-gambles"]], "Examples using nilearn.datasets.fetch_miyawaki2008": [[281, "examples-using-nilearn-datasets-fetch-miyawaki2008"]], "Examples using nilearn.datasets.fetch_neurovault": [[282, "examples-using-nilearn-datasets-fetch-neurovault"]], "Examples using nilearn.datasets.fetch_neurovault_auditory_computation_task": [[283, "examples-using-nilearn-datasets-fetch-neurovault-auditory-computation-task"]], "Examples using nilearn.datasets.fetch_neurovault_ids": [[284, "examples-using-nilearn-datasets-fetch-neurovault-ids"]], "Examples using nilearn.datasets.fetch_oasis_vbm": [[286, "examples-using-nilearn-datasets-fetch-oasis-vbm"]], "Examples using nilearn.datasets.fetch_openneuro_dataset": [[287, "examples-using-nilearn-datasets-fetch-openneuro-dataset"]], "Examples using nilearn.datasets.fetch_spm_auditory": [[288, "examples-using-nilearn-datasets-fetch-spm-auditory"]], "Examples using nilearn.datasets.fetch_spm_multimodal_fmri": [[289, "examples-using-nilearn-datasets-fetch-spm-multimodal-fmri"]], "Examples using nilearn.datasets.get_data_dirs": [[292, "examples-using-nilearn-datasets-get-data-dirs"]], "Examples using nilearn.datasets.load_fsaverage": [[293, "examples-using-nilearn-datasets-load-fsaverage"]], "Examples using nilearn.datasets.load_fsaverage_data": [[294, "examples-using-nilearn-datasets-load-fsaverage-data"]], "Examples using nilearn.datasets.load_mni152_brain_mask": [[295, "examples-using-nilearn-datasets-load-mni152-brain-mask"]], "Examples using nilearn.datasets.load_mni152_gm_mask": [[296, "examples-using-nilearn-datasets-load-mni152-gm-mask"]], "Examples using nilearn.datasets.load_mni152_template": [[298, "examples-using-nilearn-datasets-load-mni152-template"]], "Examples using nilearn.datasets.load_mni152_wm_mask": [[299, "examples-using-nilearn-datasets-load-mni152-wm-mask"]], "Examples using nilearn.datasets.load_nki": [[301, "examples-using-nilearn-datasets-load-nki"]], "Examples using nilearn.datasets.load_sample_motor_activation_image": [[302, "examples-using-nilearn-datasets-load-sample-motor-activation-image"]], "Examples using nilearn.datasets.select_from_index": [[304, "examples-using-nilearn-datasets-select-from-index"]], "Examples using nilearn.decoding.Decoder": [[305, "examples-using-nilearn-decoding-decoder"]], "Examples using nilearn.decoding.DecoderRegressor": [[306, "examples-using-nilearn-decoding-decoderregressor"]], "Examples using nilearn.decoding.FREMClassifier": [[307, "examples-using-nilearn-decoding-fremclassifier"]], "Examples using nilearn.decoding.FREMRegressor": [[308, "examples-using-nilearn-decoding-fremregressor"]], "Examples using nilearn.decoding.SearchLight": [[309, "examples-using-nilearn-decoding-searchlight"]], "Examples using nilearn.decoding.SpaceNetRegressor": [[311, "examples-using-nilearn-decoding-spacenetregressor"]], "Examples using nilearn.decomposition.CanICA": [[312, "examples-using-nilearn-decomposition-canica"]], "Examples using nilearn.decomposition.DictLearning": [[313, "examples-using-nilearn-decomposition-dictlearning"]], "Examples using nilearn.glm.cluster_level_inference": [[322, "examples-using-nilearn-glm-cluster-level-inference"]], "Examples using nilearn.glm.compute_fixed_effects": [[324, "examples-using-nilearn-glm-compute-fixed-effects"]], "Examples using nilearn.glm.first_level.FirstLevelModel": [[327, "examples-using-nilearn-glm-first-level-firstlevelmodel"]], "Examples using nilearn.glm.first_level.compute_regressor": [[329, "examples-using-nilearn-glm-first-level-compute-regressor"]], "Examples using nilearn.glm.first_level.first_level_from_bids": [[330, "examples-using-nilearn-glm-first-level-first-level-from-bids"]], "Examples using nilearn.glm.first_level.make_first_level_design_matrix": [[334, "examples-using-nilearn-glm-first-level-make-first-level-design-matrix"]], "Examples using nilearn.glm.second_level.SecondLevelModel": [[340, "examples-using-nilearn-glm-second-level-secondlevelmodel"]], "Examples using nilearn.glm.second_level.make_second_level_design_matrix": [[341, "examples-using-nilearn-glm-second-level-make-second-level-design-matrix"]], "Examples using nilearn.glm.second_level.non_parametric_inference": [[342, "examples-using-nilearn-glm-second-level-non-parametric-inference"]], "Examples using nilearn.glm.threshold_stats_img": [[343, "examples-using-nilearn-glm-threshold-stats-img"]], "Examples using nilearn.image.clean_img": [[345, "examples-using-nilearn-image-clean-img"]], "Examples using nilearn.image.concat_imgs": [[346, "examples-using-nilearn-image-concat-imgs"]], "Examples using nilearn.image.coord_transform": [[347, "examples-using-nilearn-image-coord-transform"]], "Examples using nilearn.image.get_data": [[350, "examples-using-nilearn-image-get-data"]], "Examples using nilearn.image.high_variance_confounds": [[351, "examples-using-nilearn-image-high-variance-confounds"]], "Examples using nilearn.image.index_img": [[352, "examples-using-nilearn-image-index-img"]], "Examples using nilearn.image.iter_img": [[353, "examples-using-nilearn-image-iter-img"]], "Examples using nilearn.image.load_img": [[355, "examples-using-nilearn-image-load-img"]], "Examples using nilearn.image.math_img": [[356, "examples-using-nilearn-image-math-img"]], "Examples using nilearn.image.mean_img": [[357, "examples-using-nilearn-image-mean-img"]], "Examples using nilearn.image.new_img_like": [[358, "examples-using-nilearn-image-new-img-like"]], "Examples using nilearn.image.resample_img": [[360, "examples-using-nilearn-image-resample-img"]], "Examples using nilearn.image.resample_to_img": [[361, "examples-using-nilearn-image-resample-to-img"]], "Examples using nilearn.image.smooth_img": [[362, "examples-using-nilearn-image-smooth-img"]], "Examples using nilearn.image.threshold_img": [[364, "examples-using-nilearn-image-threshold-img"]], "Examples using nilearn.interfaces.bids.save_glm_to_bids": [[367, "examples-using-nilearn-interfaces-bids-save-glm-to-bids"]], "Examples using nilearn.interfaces.fmriprep.load_confounds": [[368, "examples-using-nilearn-interfaces-fmriprep-load-confounds"]], "Examples using nilearn.interfaces.fmriprep.load_confounds_strategy": [[369, "examples-using-nilearn-interfaces-fmriprep-load-confounds-strategy"]], "Examples using nilearn.interfaces.fsl.get_design_from_fslmat": [[370, "examples-using-nilearn-interfaces-fsl-get-design-from-fslmat"]], "Examples using nilearn.maskers.BaseMasker": [[371, "examples-using-nilearn-maskers-basemasker"]], "Examples using nilearn.maskers.MultiNiftiLabelsMasker": [[372, "examples-using-nilearn-maskers-multiniftilabelsmasker"]], "Examples using nilearn.maskers.MultiNiftiMapsMasker": [[373, "examples-using-nilearn-maskers-multiniftimapsmasker"]], "Examples using nilearn.maskers.MultiNiftiMasker": [[374, "examples-using-nilearn-maskers-multiniftimasker"]], "Examples using nilearn.maskers.NiftiLabelsMasker": [[375, "examples-using-nilearn-maskers-niftilabelsmasker"]], "Examples using nilearn.maskers.NiftiMapsMasker": [[376, "examples-using-nilearn-maskers-niftimapsmasker"]], "Examples using nilearn.maskers.NiftiMasker": [[377, "examples-using-nilearn-maskers-niftimasker"]], "Examples using nilearn.maskers.NiftiSpheresMasker": [[378, "examples-using-nilearn-maskers-niftispheresmasker"]], "Examples using nilearn.maskers.SurfaceLabelsMasker": [[379, "examples-using-nilearn-maskers-surfacelabelsmasker"]], "Examples using nilearn.maskers.SurfaceMasker": [[381, "examples-using-nilearn-maskers-surfacemasker"]], "Examples using nilearn.masking.apply_mask": [[382, "examples-using-nilearn-masking-apply-mask"]], "Examples using nilearn.masking.compute_epi_mask": [[385, "examples-using-nilearn-masking-compute-epi-mask"]], "Examples using nilearn.masking.unmask": [[390, "examples-using-nilearn-masking-unmask"]], "Examples using nilearn.mass_univariate.permuted_ols": [[391, "examples-using-nilearn-mass-univariate-permuted-ols"]], "Examples using nilearn.plotting.displays.LProjector": [[396, "examples-using-nilearn-plotting-displays-lprojector"]], "Examples using nilearn.plotting.displays.LRProjector": [[397, "examples-using-nilearn-plotting-displays-lrprojector"]], "Examples using nilearn.plotting.displays.LYRProjector": [[398, "examples-using-nilearn-plotting-displays-lyrprojector"]], "Examples using nilearn.plotting.displays.LYRZProjector": [[399, "examples-using-nilearn-plotting-displays-lyrzprojector"]], "Examples using nilearn.plotting.displays.LZRProjector": [[400, "examples-using-nilearn-plotting-displays-lzrprojector"]], "Examples using nilearn.plotting.displays.LZRYProjector": [[401, "examples-using-nilearn-plotting-displays-lzryprojector"]], "Examples using nilearn.plotting.displays.MosaicSlicer": [[402, "examples-using-nilearn-plotting-displays-mosaicslicer"]], "Examples using nilearn.plotting.displays.OrthoProjector": [[403, "examples-using-nilearn-plotting-displays-orthoprojector"]], "Examples using nilearn.plotting.displays.OrthoSlicer": [[404, "examples-using-nilearn-plotting-displays-orthoslicer"]], "Examples using nilearn.plotting.displays.PlotlySurfaceFigure": [[405, "examples-using-nilearn-plotting-displays-plotlysurfacefigure"]], "Examples using nilearn.plotting.displays.RProjector": [[406, "examples-using-nilearn-plotting-displays-rprojector"]], "Examples using nilearn.plotting.displays.TiledSlicer": [[407, "examples-using-nilearn-plotting-displays-tiledslicer"]], "Examples using nilearn.plotting.displays.XProjector": [[408, "examples-using-nilearn-plotting-displays-xprojector"]], "Examples using nilearn.plotting.displays.XSlicer": [[409, "examples-using-nilearn-plotting-displays-xslicer"]], "Examples using nilearn.plotting.displays.XZProjector": [[410, "examples-using-nilearn-plotting-displays-xzprojector"]], "Examples using nilearn.plotting.displays.XZSlicer": [[411, "examples-using-nilearn-plotting-displays-xzslicer"]], "Examples using nilearn.plotting.displays.YProjector": [[412, "examples-using-nilearn-plotting-displays-yprojector"]], "Examples using nilearn.plotting.displays.YSlicer": [[413, "examples-using-nilearn-plotting-displays-yslicer"]], "Examples using nilearn.plotting.displays.YXProjector": [[414, "examples-using-nilearn-plotting-displays-yxprojector"]], "Examples using nilearn.plotting.displays.YXSlicer": [[415, "examples-using-nilearn-plotting-displays-yxslicer"]], "Examples using nilearn.plotting.displays.YZProjector": [[416, "examples-using-nilearn-plotting-displays-yzprojector"]], "Examples using nilearn.plotting.displays.YZSlicer": [[417, "examples-using-nilearn-plotting-displays-yzslicer"]], "Examples using nilearn.plotting.displays.ZProjector": [[418, "examples-using-nilearn-plotting-displays-zprojector"]], "Examples using nilearn.plotting.displays.ZSlicer": [[419, "examples-using-nilearn-plotting-displays-zslicer"]], "Examples using nilearn.plotting.find_parcellation_cut_coords": [[423, "examples-using-nilearn-plotting-find-parcellation-cut-coords"]], "Examples using nilearn.plotting.find_probabilistic_atlas_cut_coords": [[424, "examples-using-nilearn-plotting-find-probabilistic-atlas-cut-coords"]], "Examples using nilearn.plotting.find_xyz_cut_coords": [[425, "examples-using-nilearn-plotting-find-xyz-cut-coords"]], "Examples using nilearn.plotting.plot_anat": [[428, "examples-using-nilearn-plotting-plot-anat"]], "Examples using nilearn.plotting.plot_carpet": [[429, "examples-using-nilearn-plotting-plot-carpet"]], "Examples using nilearn.plotting.plot_connectome": [[430, "examples-using-nilearn-plotting-plot-connectome"]], "Examples using nilearn.plotting.plot_contrast_matrix": [[431, "examples-using-nilearn-plotting-plot-contrast-matrix"]], "Examples using nilearn.plotting.plot_design_matrix": [[432, "examples-using-nilearn-plotting-plot-design-matrix"]], "Examples using nilearn.plotting.plot_design_matrix_correlation": [[433, "examples-using-nilearn-plotting-plot-design-matrix-correlation"]], "Examples using nilearn.plotting.plot_epi": [[434, "examples-using-nilearn-plotting-plot-epi"]], "Examples using nilearn.plotting.plot_event": [[435, "examples-using-nilearn-plotting-plot-event"]], "Examples using nilearn.plotting.plot_glass_brain": [[436, "examples-using-nilearn-plotting-plot-glass-brain"]], "Examples using nilearn.plotting.plot_img": [[437, "examples-using-nilearn-plotting-plot-img"]], "Examples using nilearn.plotting.plot_img_on_surf": [[438, "examples-using-nilearn-plotting-plot-img-on-surf"]], "Examples using nilearn.plotting.plot_markers": [[439, "examples-using-nilearn-plotting-plot-markers"]], "Examples using nilearn.plotting.plot_matrix": [[440, "examples-using-nilearn-plotting-plot-matrix"]], "Examples using nilearn.plotting.plot_prob_atlas": [[441, "examples-using-nilearn-plotting-plot-prob-atlas"]], "Examples using nilearn.plotting.plot_roi": [[442, "examples-using-nilearn-plotting-plot-roi"]], "Examples using nilearn.plotting.plot_stat_map": [[443, "examples-using-nilearn-plotting-plot-stat-map"]], "Examples using nilearn.plotting.plot_surf": [[444, "examples-using-nilearn-plotting-plot-surf"]], "Examples using nilearn.plotting.plot_surf_contours": [[445, "examples-using-nilearn-plotting-plot-surf-contours"]], "Examples using nilearn.plotting.plot_surf_roi": [[446, "examples-using-nilearn-plotting-plot-surf-roi"]], "Examples using nilearn.plotting.plot_surf_stat_map": [[447, "examples-using-nilearn-plotting-plot-surf-stat-map"]], "Examples using nilearn.plotting.show": [[448, "examples-using-nilearn-plotting-show"]], "Examples using nilearn.plotting.view_connectome": [[449, "examples-using-nilearn-plotting-view-connectome"]], "Examples using nilearn.plotting.view_img": [[450, "examples-using-nilearn-plotting-view-img"]], "Examples using nilearn.plotting.view_img_on_surf": [[451, "examples-using-nilearn-plotting-view-img-on-surf"]], "Examples using nilearn.plotting.view_surf": [[453, "examples-using-nilearn-plotting-view-surf"]], "Examples using nilearn.regions.Parcellations": [[455, "examples-using-nilearn-regions-parcellations"]], "Examples using nilearn.regions.RegionExtractor": [[457, "examples-using-nilearn-regions-regionextractor"]], "Examples using nilearn.regions.connected_label_regions": [[458, "examples-using-nilearn-regions-connected-label-regions"]], "Examples using nilearn.regions.connected_regions": [[459, "examples-using-nilearn-regions-connected-regions"]], "Examples using nilearn.reporting.HTMLReport": [[465, "examples-using-nilearn-reporting-htmlreport"]], "Examples using nilearn.reporting.get_clusters_table": [[466, "examples-using-nilearn-reporting-get-clusters-table"]], "Examples using nilearn.surface.FileMesh": [[471, "examples-using-nilearn-surface-filemesh"]], "Examples using nilearn.surface.InMemoryMesh": [[472, "examples-using-nilearn-surface-inmemorymesh"]], "Examples using nilearn.surface.PolyData": [[473, "examples-using-nilearn-surface-polydata"]], "Examples using nilearn.surface.PolyMesh": [[474, "examples-using-nilearn-surface-polymesh"]], "Examples using nilearn.surface.SurfaceImage": [[475, "examples-using-nilearn-surface-surfaceimage"]], "Examples using nilearn.surface.SurfaceMesh": [[476, "examples-using-nilearn-surface-surfacemesh"]], "Examples using nilearn.surface.vol_to_surf": [[479, "examples-using-nilearn-surface-vol-to-surf"]], "Execution time": [[178, "execution-time"]], "Exercise": [[192, null]], "Exercise: computing connectivity in tangent space": [[165, null]], "Exercise: computing sparse inverse covariance": [[165, null]], "Exercise: computing the correlation matrix of rest fmri": [[165, null], [166, null]], "Exercise: correlation matrix of rest fMRI on probabilistic atlas": [[166, null]], "Extra mask parameters: opening, cutoff\u2026": [[192, "extra-mask-parameters-opening-cutoff"]], "Extract coordinates on Yeo atlas - parcellations": [[50, "extract-coordinates-on-yeo-atlas-parcellations"]], "Extract functional networks with Dictionary learning": [[53, "extract-functional-networks-with-dictionary-learning"]], "Extract regions from networks": [[53, "extract-regions-from-networks"]], "Extract signals and compute a connectivity matrix without confounds removal": [[59, "extract-signals-and-compute-a-connectivity-matrix-without-confounds-removal"]], "Extract signals on a parcellation defined by labels": [[59, "extract-signals-on-a-parcellation-defined-by-labels"]], "Extract signals on spheres and plot a connectome": [[61, null]], "Extract signals on spheres from an atlas": [[61, "extract-signals-on-spheres-from-an-atlas"]], "Extract subjects variabilities around a group connectivity": [[54, "extract-subjects-variabilities-around-a-group-connectivity"]], "Extract the largest clusters": [[71, "extract-the-largest-clusters"]], "Extract the seed region\u2019s time course": [[64, "extract-the-seed-region-s-time-course"]], "Extract the time series": [[57, "extract-the-time-series"]], "Extract time series": [[55, "extract-time-series"]], "Extracting a brain mask": [[27, "extracting-a-brain-mask"], [191, "extracting-a-brain-mask"]], "Extracting functional brain networks: ICA and related": [[170, null]], "Extracting predicted time series and residuals": [[180, "extracting-predicted-time-series-and-residuals"]], "Extracting region signals": [[56, "extracting-region-signals"]], "Extracting signals from a brain parcellation": [[59, null]], "Extracting signals from a probabilistic atlas": [[166, "extracting-signals-from-a-probabilistic-atlas"]], "Extracting signals from brain regions using the NiftiLabelsMasker": [[93, null]], "Extracting signals of a probabilistic atlas of functional regions": [[57, null]], "Extracting signals on a parcellation": [[166, "extracting-signals-on-a-parcellation"]], "Extracting the seed time series with masker": [[24, "extracting-the-seed-time-series-with-masker"]], "Extracting times series to build a functional connectome": [[166, null]], "Extraction of signals from regions for multiple subjects: MultiNiftiMasker, MultiNiftiLabelsMasker, MultiNiftiMapsMasker": [[192, "extraction-of-signals-from-regions-for-multiple-subjects-multiniftimasker-multiniftilabelsmasker-multiniftimapsmasker"]], "Extraction of signals from regions: NiftiLabelsMasker, NiftiMapsMasker": [[192, "extraction-of-signals-from-regions-niftilabelsmasker-niftimapsmasker"]], "Extraction of signals from seeds: NiftiSpheresMasker": [[192, "extraction-of-signals-from-seeds-niftispheresmasker"]], "Extraction of signals from surface images SurfaceMasker, SurfaceLabelsMasker, SurfaceMapsMasker": [[192, "extraction-of-signals-from-surface-images-surfacemasker-surfacelabelsmasker-surfacemapsmasker"]], "Extracts signal from sphere around DMN seeds": [[61, "extracts-signal-from-sphere-around-dmn-seeds"]], "F-scores computation": [[38, "f-scores-computation"]], "FIAC": [[480, "fiac"]], "FIXES": [[151, "fixes"], [163, "id3259"]], "FMRIB Software Library (FSL)": [[183, "fmrib-software-library-fsl"]], "FREM on Jimura et al \u201cmixed gambles\u201d dataset": [[42, null]], "FREM pipeline": [[173, "frem-pipeline"]], "FREM: fast ensembling of regularized models for robust decoding": [[173, null]], "Feature extraction: from fMRI volumes to a data matrix": [[3, "feature-extraction-from-fmri-volumes-to-a-data-matrix"]], "Feature selection": [[41, "feature-selection"]], "Featured examples": [[186, "featured-examples"]], "Fetch and inspect the data": [[72, "fetch-and-inspect-the-data"]], "Fetch brain development functional datasets": [[53, "fetch-brain-development-functional-datasets"]], "Fetch data": [[27, "fetch-data"]], "Fetch dataset": [[78, "fetch-dataset"], [81, "fetch-dataset"], [82, "fetch-dataset"]], "Fetch example BIDS dataset": [[104, "fetch-example-bids-dataset"], [113, "fetch-example-bids-dataset"]], "Fetch example Haxby dataset": [[35, "fetch-example-haxby-dataset"]], "Fetch images for \u201csuccessful stop minus go\u201d-like protocols.": [[112, "fetch-images-for-successful-stop-minus-go-like-protocols"]], "Fetch openneuro BIDS dataset": [[65, "fetch-openneuro-bids-dataset"]], "Fetching Probabilistic atlas - MSDL atlas": [[21, "fetching-probabilistic-atlas-msdl-atlas"]], "Fetching data from ADHD dataset": [[12, "fetching-data-from-adhd-dataset"]], "Fetching datasets": [[56, "fetching-datasets"]], "Fetching movie-watching based functional datasets": [[169, "fetching-movie-watching-based-functional-datasets"]], "Fetching open datasets from Internet": [[190, "fetching-open-datasets-from-internet"]], "Fetching the Megatrawls Network matrices": [[28, "fetching-the-megatrawls-network-matrices"]], "File name matching: \u201cglobbing\u201d and user path expansion": [[190, "file-name-matching-globbing-and-user-path-expansion"]], "File names and objects, 3D and 4D images": [[190, "file-names-and-objects-3d-and-4d-images"]], "Final script": [[171, null]], "Finding help": [[187, "finding-help"]], "First download the data": [[3, "first-download-the-data"], [101, "first-download-the-data"]], "First level analysis of a complete BIDS dataset from openneuro": [[65, null]], "First level model estimation": [[104, "first-level-model-estimation"]], "First level model estimation (one subject)": [[65, "first-level-model-estimation-one-subject"]], "First level models": [[180, null]], "First level report": [[480, "first-level-report"]], "First steps with nilearn": [[187, "first-steps-with-nilearn"]], "First we load the Miyawaki dataset": [[44, "first-we-load-the-miyawaki-dataset"]], "Fisher-z transformation and save nifti": [[58, "fisher-z-transformation-and-save-nifti"]], "Fit FREM": [[33, "fit-frem"], [42, "fit-frem"]], "Fit model": [[71, "fit-model"]], "Fit the Decoder and predict the responses": [[36, "fit-the-decoder-and-predict-the-responses"]], "Fit the SpaceNet and predict with it": [[46, "fit-the-spacenet-and-predict-with-it"]], "Fit the decoder and predict": [[31, "fit-the-decoder-and-predict"]], "Fit the model": [[72, "fit-the-model"]], "Fitting CanICA model with nilearn": [[170, "fitting-canica-model-with-nilearn"]], "Fitting a first level model": [[180, "fitting-a-first-level-model"]], "Fitting a second level model": [[184, "fitting-a-second-level-model"]], "Fixed effects analyses": [[183, null]], "Fixes": [[125, "fixes"], [127, "fixes"], [128, "fixes"], [128, "id2"], [129, "fixes"], [130, "fixes"], [131, "fixes"], [132, "fixes"], [133, "fixes"], [134, "fixes"], [135, "fixes"], [138, "fixes"], [141, "fixes"], [142, "fixes"], [143, "fixes"], [143, "id3"], [144, "fixes"], [145, "fixes"], [147, "fixes"], [148, "fixes"], [149, "fixes"], [150, "fixes"], [151, "id4"], [151, "id8"], [151, "id12"], [152, "fixes"], [153, "fixes"], [154, "fixes"], [155, "fixes"], [156, "fixes"], [157, "fixes"], [158, "fixes"], [159, "fixes"], [160, "fixes"], [161, "fixes"], [163, "fixes"], [163, "id169"], [163, "id340"], [163, "id511"], [163, "id681"], [163, "id852"], [163, "id1024"], [163, "id1196"], [163, "id1367"], [163, "id1370"], [163, "id1542"], [163, "id1716"], [163, "id1886"], [163, "id2058"], [163, "id2230"], [163, "id2402"], [163, "id2574"], [163, "id2746"], [163, "id2916"], [163, "id3086"], [163, "id3262"], [163, "id3267"], [163, "id3271"], [163, "id3441"], [163, "id3612"], [163, "id3791"], [163, "id3966"], [163, "id4305"], [163, "id4477"], [163, "id4647"], [163, "id4652"], [163, "id4821"], [163, "id4993"], [163, "id5503"], [163, "id6016"]], "Fixtures": [[179, "fixtures"]], "From neuroimaging volumes to data matrices: the masker objects": [[192, null]], "Full Example": [[165, null]], "Full code example": [[171, null]], "Full example": [[165, null], [165, null], [165, null], [166, null], [166, null]], "Functional connectivity": [[49, null], [116, "functional-connectivity"]], "Functional connectivity and resting state": [[167, null]], "Functional connectivity predicts age group": [[102, null]], "Functions": [[193, "functions"], [194, "functions"], [194, "id1"], [194, "id2"], [194, "id3"], [482, "functions"], [482, "id2"], [482, "id4"], [483, "functions"], [485, "functions"], [485, "id1"], [485, "id2"], [487, "functions"], [488, "functions"], [489, "functions"], [489, "id1"], [489, "id2"], [491, "functions"], [492, "functions"], [493, "functions"], [494, "functions"]], "Functions for data preparation and image transformation": [[191, "functions-for-data-preparation-and-image-transformation"]], "Funding": [[0, "funding"]], "Further Reading": [[176, null]], "Further reading": [[7, "further-reading"]], "GLM: First level analysis": [[63, null], [116, "glm-first-level-analysis"]], "GLM: Second level analysis": [[76, null], [116, "glm-second-level-analysis"]], "General bibliography": [[118, null]], "General functions": [[194, "general-functions"]], "General functions descriptions": [[194, "general-functions-descriptions"]], "Generate an events.tsv file for the NeuroSpin localizer task": [[74, null]], "Generate figures": [[107, "generate-figures"]], "Generating a report": [[35, "generating-a-report"], [64, "generating-a-report"], [73, "generating-a-report"]], "Generating new baseline figures for plotting tests": [[188, "generating-new-baseline-figures-for-plotting-tests"]], "Get image and term data": [[107, "get-image-and-term-data"]], "Get residuals": [[71, "get-residuals"]], "Get the locations from which vol_to_surf would draw its samples": [[25, "get-the-locations-from-which-vol-to-surf-would-draw-its-samples"]], "Getting the data": [[58, "getting-the-data"]], "GitHub Actions Specification": [[164, "github-actions-specification"]], "Github release": [[188, "github-release"]], "Glass brain plotting in nilearn": [[14, null]], "Glass brain plotting in nilearn (all options)": [[15, null]], "Glass brain plotting: Hemispheric sagittal cuts": [[14, "glass-brain-plotting-hemispheric-sagittal-cuts"]], "Glass brain plotting: black background": [[14, "glass-brain-plotting-black-background"]], "Glass brain plotting: whole brain sagittal cuts": [[14, "glass-brain-plotting-whole-brain-sagittal-cuts"]], "Globbing over multiple 3D volumes": [[4, "globbing-over-multiple-3d-volumes"]], "Glossary": [[185, null]], "Going further": [[120, "going-further"]], "Going further with scikit-learn": [[101, "going-further-with-scikit-learn"], [174, "going-further-with-scikit-learn"]], "Group Sparse inverse covariance for multi-subject connectome": [[56, null]], "Group level model": [[113, "group-level-model"]], "Group-sparse covariance estimation": [[178, null]], "Guidelines for HTML and CSS": [[179, "guidelines-for-html-and-css"]], "Guidelines for Private Functions": [[179, "guidelines-for-private-functions"]], "HIGHLIGHTS": [[127, "highlights"], [129, "highlights"], [130, "highlights"], [131, "highlights"], [132, "highlights"], [133, "highlights"], [134, "highlights"], [135, "highlights"], [151, "highlights"], [154, "highlights"], [155, "highlights"], [156, "highlights"], [157, "highlights"], [158, "highlights"], [160, "highlights"], [161, "highlights"], [163, "highlights"], [163, "id168"], [163, "id339"], [163, "id510"], [163, "id680"], [163, "id851"], [163, "id1022"], [163, "id1194"], [163, "id1540"], [163, "id1712"], [163, "id2056"], [163, "id2228"], [163, "id2400"], [163, "id2572"], [163, "id2743"], [163, "id3255"]], "HRF models": [[180, "hrf-models"]], "Harvard Oxford atlas": [[217, null]], "Haxby dataset": [[218, null]], "Here we run the prediction: the decoding itself": [[44, "here-we-run-the-prediction-the-decoding-itself"]], "Highlights": [[126, "highlights"], [143, "highlights"], [144, "highlights"], [145, "highlights"], [148, "highlights"], [148, "id4"], [148, "id8"], [163, "id3785"], [163, "id3789"], [163, "id3794"], [163, "id4303"], [163, "id4475"], [163, "id4650"], [163, "id5847"]], "How do we decide what code goes in?": [[179, "how-do-we-decide-what-code-goes-in"]], "How to contribute a dataset fetcher": [[179, "how-to-contribute-a-dataset-fetcher"]], "How to contribute an atlas": [[179, "how-to-contribute-an-atlas"]], "How to contribute to nilearn": [[179, "how-to-contribute-to-nilearn"]], "How to get help?": [[179, "how-to-get-help"]], "How to help the project?": [[179, "how-to-help-the-project"]], "How to make a release?": [[188, "how-to-make-a-release"]], "Hyperparameter optimization": [[41, "hyperparameter-optimization"]], "ICBM 152 template": [[219, null]], "Image affines": [[190, null]], "Image operations: creating a ROI mask manually": [[191, "image-operations-creating-a-roi-mask-manually"]], "Image thresholded at -2 when two_sided=False": [[98, "id1"]], "Image thresholded at 2 when two_sided=False": [[98, "image-thresholded-at-2-when-two-sided-false"]], "Image thresholded at 2 when two_sided=True": [[98, "image-thresholded-at-2-when-two-sided-true"]], "Image thresholding": [[98, null]], "Image without threshold": [[98, "image-without-threshold"]], "Impact of plot parameters on visualization": [[10, "impact-of-plot-parameters-on-visualization"]], "Implementing a KFold loop": [[3, "implementing-a-kfold-loop"]], "Import modules": [[71, "import-modules"]], "Important links": [[496, "important-links"]], "Inference with massively univariate model": [[45, "inference-with-massively-univariate-model"]], "Initial estimate value": [[178, "initial-estimate-value"]], "Initialize and run the GLM": [[73, "initialize-and-run-the-glm"]], "Input and output: neuroimaging data representation": [[190, null]], "Inputing data: file names or image objects": [[190, "inputing-data-file-names-or-image-objects"]], "Inspecting the dataset": [[6, "inspecting-the-dataset"]], "Inspecting the model weights": [[3, "inspecting-the-model-weights"]], "Install": [[496, "install"]], "Installing": [[179, "installing"]], "Instantiate and run FirstLevelModel": [[35, "instantiate-and-run-firstlevelmodel"]], "Interacting with figures": [[489, "module-nilearn.plotting.displays"]], "Interactive plots": [[495, "interactive-plots"]], "Interactive visualization of statistical map slices": [[495, "interactive-visualization-of-statistical-map-slices"]], "Interpreting such components": [[170, "interpreting-such-components"]], "Intro to GLM Analysis: a single-run, single-subject fMRI dataset": [[6, null]], "Introduction": [[187, null]], "Inverse transform: unmasking data": [[192, "inverse-transform-unmasking-data"]], "Issues": [[188, "issues"]], "Iterate over fetched atlases to extract coordinates - probabilistic": [[50, "iterate-over-fetched-atlases-to-extract-coordinates-probabilistic"]], "Iterative grid search": [[178, "iterative-grid-search"]], "Juelich atlas": [[220, null]], "Known Issues": [[149, "known-issues"], [163, "known-issues"]], "Labels": [[188, "labels"]], "Latest release": [[496, "latest-release"]], "Learning with examples": [[187, "learning-with-examples"]], "Learning with the API references": [[187, "learning-with-the-api-references"]], "Let us quantify our prediction error": [[44, "let-us-quantify-our-prediction-error"]], "License": [[197, "license"], [199, "license"], [200, "license"], [201, "license"], [202, "license"], [204, "license"], [205, "license"], [206, "license"], [207, "license"], [208, "license"], [209, "license"], [210, "license"], [211, "license"], [212, "license"], [213, "license"], [214, "license"], [215, "license"], [217, "license"], [218, "license"], [219, "license"], [220, "license"], [221, "license"], [222, "license"], [223, "license"], [224, "license"], [225, "license"], [226, "license"], [227, "license"], [228, "license"], [229, "license"], [230, "license"], [231, "license"], [232, "license"], [233, "license"], [234, "license"], [235, "license"], [236, "license"], [237, "license"]], "Linking total and direct interactions at the group level": [[165, "linking-total-and-direct-interactions-at-the-group-level"]], "Load Haxby dataset": [[19, "load-haxby-dataset"], [38, "load-haxby-dataset"], [39, "load-haxby-dataset"], [106, "load-haxby-dataset"]], "Load Oasis dataset": [[45, "load-oasis-dataset"], [77, "load-oasis-dataset"]], "Load and prepare the data": [[34, "load-and-prepare-the-data"]], "Load atlases": [[50, "load-atlases"]], "Load brain development fMRI dataset": [[51, "load-brain-development-fmri-dataset"]], "Load brain development fMRI dataset and MSDL atlas": [[54, "load-brain-development-fmri-dataset-and-msdl-atlas"], [102, "load-brain-development-fmri-dataset-and-msdl-atlas"]], "Load confounds from file using a flexible strategy with fmriprep interface": [[59, "load-confounds-from-file-using-a-flexible-strategy-with-fmriprep-interface"]], "Load data": [[14, "load-data"]], "Load functional data": [[50, "load-functional-data"]], "Load probabilistic atlases - extracting coordinates on brain maps": [[50, "load-probabilistic-atlases-extracting-coordinates-on-brain-maps"]], "Load the Haxby data dataset": [[37, "load-the-haxby-data-dataset"]], "Load the Haxby dataset": [[33, "load-the-haxby-dataset"], [36, "load-the-haxby-dataset"], [41, "load-the-haxby-dataset"]], "Load the Oasis VBM dataset": [[46, "load-the-oasis-vbm-dataset"]], "Load the behavioral data": [[31, "load-the-behavioral-data"], [35, "load-the-behavioral-data"]], "Load the behavioral labels": [[3, "load-the-behavioral-labels"]], "Load the data": [[15, "load-the-data"]], "Load the data from the Jimura mixed-gamble experiment": [[42, "load-the-data-from-the-jimura-mixed-gamble-experiment"]], "Load the surface image": [[7, "load-the-surface-image"]], "Loading and plotting of a cortical surface atlas": [[23, null]], "Loading and preparing the data": [[171, "loading-and-preparing-the-data"]], "Loading non image data: experiment description": [[120, "loading-non-image-data-experiment-description"]], "Loading the data": [[32, "loading-the-data"], [43, "loading-the-data"], [96, "loading-the-data"]], "Loading the data into nilearn": [[171, "loading-the-data-into-nilearn"]], "Look-up table format": [[11, null]], "Looping on all volumes in a 4D file": [[2, "looping-on-all-volumes-in-a-4d-file"]], "Looping through selected volumes in a 4D file": [[2, "looping-through-selected-volumes-in-a-4d-file"]], "MSDL atlas": [[225, null]], "Machine learning applications to Neuroimaging": [[187, "machine-learning-applications-to-neuroimaging"]], "Maintenance": [[179, "maintenance"], [188, null]], "Making a surface plot of a 3D statistical map": [[10, null]], "Making interactive visualizations: view_img": [[17, "making-interactive-visualizations-view-img"]], "Manipulating brain image volumes": [[85, null], [116, "manipulating-brain-image-volumes"]], "Manipulating images: resampling, smoothing, masking, ROIs\u2026": [[191, null]], "Manipulation brain volumes with nilearn": [[189, null]], "Manually leaving out data": [[3, "manually-leaving-out-data"]], "Mapping the encoding scores on the brain": [[43, "mapping-the-encoding-scores-on-the-brain"]], "Mask data": [[106, "mask-data"]], "Mask the fMRI image using NiftiMasker": [[111, "mask-the-fmri-image-using-niftimasker"]], "Masking": [[68, "masking"], [176, "masking"]], "Masking and plotting surface images": [[114, "masking-and-plotting-surface-images"]], "Masking data: from 4D Nifti images to 2D data arrays": [[191, "masking-data-from-4d-nifti-images-to-2d-data-arrays"]], "Masking the data": [[101, "masking-the-data"]], "Masking the data: from 4D image to 2D array": [[120, "masking-the-data-from-4d-image-to-2d-array"]], "Masking using numpy indexing": [[111, "masking-using-numpy-indexing"]], "Masking using numpy indexing in parallel with shared memory": [[111, "masking-using-numpy-indexing-in-parallel-with-shared-memory"]], "Massively univariate analysis of a calculation task from the Localizer dataset": [[110, null]], "Massively univariate analysis of a motor task from the Localizer dataset": [[109, null]], "Massively univariate analysis of face vs house recognition": [[106, null]], "Maximum number of iterations": [[178, "maximum-number-of-iterations"]], "Measuring prediction performance": [[171, "measuring-prediction-performance"]], "Measuring prediction scores using cross-validation": [[3, "measuring-prediction-scores-using-cross-validation"]], "Measuring the chance level": [[101, "measuring-the-chance-level"], [174, "measuring-the-chance-level"]], "MegaTrawls Network Matrices HCP": [[198, null]], "Mesh": [[7, "mesh"]], "Mixed gambles statistical maps": [[223, null]], "Miyawaki 2008 dataset": [[224, null]], "Modifying dimensions in the formula": [[105, "modifying-dimensions-in-the-formula"]], "Modifying the stopping criterion": [[178, "modifying-the-stopping-criterion"]], "More plotting tools from nilearn": [[16, null]], "MosaicSlicer: Three views along multiple rows and columns": [[16, "mosaicslicer-three-views-along-multiple-rows-and-columns"]], "Motion-based scrubbing": [[59, "motion-based-scrubbing"]], "Multi-subject ICA: CanICA": [[170, "multi-subject-ica-canica"]], "MultiNiftiLabelsMasker Usage": [[192, "multiniftilabelsmasker-usage"]], "MultiNiftiMapsMasker Usage": [[192, "multiniftimapsmasker-usage"]], "MultiNiftiMasker Usage": [[192, "multiniftimasker-usage"]], "Multiple Comparisons": [[181, "multiple-comparisons"]], "Multiple comparisons correction": [[184, "multiple-comparisons-correction"]], "Multivariate decompositions: Independent component analysis of fMRI": [[108, null]], "NEW": [[127, "new"], [128, "new"], [129, "new"], [130, "new"], [148, "new"], [149, "new"], [150, "new"], [151, "new"], [151, "id2"], [151, "id5"], [151, "id10"], [154, "new"], [155, "new"], [156, "new"], [157, "new"], [158, "new"], [160, "new"], [161, "new"], [163, "new"], [163, "id1023"], [163, "id1195"], [163, "id1366"], [163, "id1541"], [163, "id1714"], [163, "id2057"], [163, "id2229"], [163, "id2401"], [163, "id2573"], [163, "id2744"], [163, "id3256"], [163, "id3260"], [163, "id3264"], [163, "id3269"], [163, "id3440"], [163, "id3610"], [163, "id3781"]], "NKI enhanced surface dataset": [[227, null]], "Negating an image with math_img": [[92, null]], "Nested cross-validation": [[36, "nested-cross-validation"]], "NeuroImaging volumes visualization": [[27, null]], "NeuroVault cross-study ICA maps": [[107, null]], "NeuroVault meta-analysis of stop-go paradigm studies": [[112, null]], "Neurosynth annotations": [[121, "neurosynth-annotations"]], "Neurovault statistical maps": [[226, null]], "New": [[138, "new"], [140, "new"], [141, "new"], [141, "id3"], [163, "id4992"], [163, "id4995"], [163, "id5164"], [163, "id5501"]], "New features": [[136, "new-features"], [139, "new-features"], [163, "new-features"], [163, "id5676"]], "Nifti and Analyze data": [[190, "nifti-and-analyze-data"]], "Nifti labels masker": [[481, "nifti-labels-masker"]], "Nifti maps masker": [[481, "nifti-maps-masker"]], "Nifti masker": [[481, "nifti-masker"]], "Nifti sphere masker": [[481, "nifti-sphere-masker"]], "NiftiLabelsMasker Usage": [[192, "niftilabelsmasker-usage"]], "NiftiMapsMasker Usage": [[192, "niftimapsmasker-usage"]], "NiftiMasker: applying a mask to load time-series": [[192, "niftimasker-applying-a-mask-to-load-time-series"]], "Niimg-like objects": [[190, "niimg-like-objects"]], "Nilearn": [[186, null]], "Nilearn MNI template": [[219, null], [272, null], [273, null], [295, null], [296, null], [297, null], [298, null], [299, null], [300, null]], "Nilearn data for examples": [[170, null]], "Nilearn plotting functions": [[17, "nilearn-plotting-functions"]], "Notes": [[197, "notes"], [198, "notes"], [199, "notes"], [200, "notes"], [201, "notes"], [203, "notes"], [204, "notes"], [205, "notes"], [206, "notes"], [207, "notes"], [208, "notes"], [209, "notes"], [210, "notes"], [211, "notes"], [212, "notes"], [213, "notes"], [214, "notes"], [215, "notes"], [217, "notes"], [218, "notes"], [219, "notes"], [220, "notes"], [221, "notes"], [222, "notes"], [223, "notes"], [224, "notes"], [225, "notes"], [226, "notes"], [227, "notes"], [228, "notes"], [229, "notes"], [230, "notes"], [231, "notes"], [232, "notes"], [233, "notes"], [234, "notes"], [235, "notes"], [236, "notes"], [237, "notes"]], "Now we compute cross-validation scores": [[37, "now-we-compute-cross-validation-scores"]], "Numerical stability": [[178, "numerical-stability"]], "OASIS volume based morphometry maps": [[228, null]], "Objective": [[170, "objective"]], "Obtain FirstLevelModel objects automatically and fit arguments": [[65, "obtain-firstlevelmodel-objects-automatically-and-fit-arguments"]], "Obtain automatically FirstLevelModel objects and fit arguments": [[104, "obtain-automatically-firstlevelmodel-objects-and-fit-arguments"]], "Obtain prediction scores via cross validation": [[31, "obtain-prediction-scores-via-cross-validation"]], "OrthoSlicer: Three views \u2018sagittal\u2019, \u2018coronal\u2019 and \u2018axial\u2019 with coordinates": [[16, "orthoslicer-three-views-sagittal-coronal-and-axial-with-coordinates"]], "Other contributors": [[0, "other-contributors"]], "Other probabilistic atlases accessible with nilearn": [[22, "other-probabilistic-atlases-accessible-with-nilearn"]], "Output": [[121, "output"]], "Overlay anatomical image as edges: add_edges": [[16, "overlay-anatomical-image-as-edges-add-edges"]], "PR Structure": [[179, "pr-structure"]], "Page summary": [[165, null], [166, null], [169, null], [170, null], [180, null], [183, null], [184, null]], "Parameter min_size": [[88, "parameter-min-size"]], "Parameter selection": [[165, null]], "Parametric modulation": [[66, "parametric-modulation"], [74, "parametric-modulation"]], "Pauli 2007 atlas": [[229, null]], "Perform first level analysis": [[64, "perform-first-level-analysis"], [70, "perform-first-level-analysis"]], "Perform massively univariate analysis with permuted OLS": [[106, "perform-massively-univariate-analysis-with-permuted-ols"]], "Perform the second level analysis": [[83, "perform-the-second-level-analysis"]], "Performance monitoring": [[179, "performance-monitoring"]], "Performing a simple decoding analysis": [[171, "performing-a-simple-decoding-analysis"]], "Performing an F-test": [[6, "performing-an-f-test"]], "Performing decoding with scikit-learn": [[101, "performing-decoding-with-scikit-learn"], [174, "performing-decoding-with-scikit-learn"]], "Performing the GLM analysis": [[6, "performing-the-glm-analysis"]], "Performing the seed-to-voxel correlation analysis": [[58, "performing-the-seed-to-voxel-correlation-analysis"]], "Permutation test": [[101, "permutation-test"]], "Plot 3D image for comparison": [[10, "plot-3d-image-for-comparison"]], "Plot Haxby masks": [[19, null]], "Plot R-squared": [[71, "plot-r-squared"]], "Plot a confusion matrix": [[37, "plot-a-confusion-matrix"]], "Plot a directed connectome - asymmetric connectivity measure": [[50, "plot-a-directed-connectome-asymmetric-connectivity-measure"]], "Plot barplots of the prediction scores": [[37, "plot-barplots-of-the-prediction-scores"]], "Plot confusion matrix": [[33, "plot-confusion-matrix"]], "Plot connectivity matrix": [[114, "plot-connectivity-matrix"]], "Plot distribution of residuals": [[71, "plot-distribution-of-residuals"]], "Plot matplotlib color maps": [[13, "plot-matplotlib-color-maps"], [13, "id1"]], "Plot matrix, graph, and strength": [[61, "plot-matrix-graph-and-strength"]], "Plot multiple views of the 3D volume on a surface": [[10, "plot-multiple-views-of-the-3d-volume-on-a-surface"]], "Plot predicted and actual time series for 6 most significant clusters": [[71, "plot-predicted-and-actual-time-series-for-6-most-significant-clusters"]], "Plot regions extracted for only one specific network": [[53, "plot-regions-extracted-for-only-one-specific-network"]], "Plot resulting connectomes": [[53, "plot-resulting-connectomes"]], "Plot the combined z maps": [[112, "plot-the-combined-z-maps"]], "Plot the masks": [[19, "plot-the-masks"]], "Plot the mesh and the sample locations": [[25, "plot-the-mesh-and-the-sample-locations"]], "Plot the outline of a mask: add_contours": [[16, "plot-the-outline-of-a-mask-add-contours"]], "Plot the prediction scores using matplotlib": [[36, "plot-the-prediction-scores-using-matplotlib"]], "Plot the results": [[82, "plot-the-results"]], "Plot the surface image": [[10, "plot-the-surface-image"]], "Plot thresholded z scores map": [[6, "plot-thresholded-z-scores-map"]], "Plot with higher-resolution mesh": [[10, "plot-with-higher-resolution-mesh"]], "Plotting": [[489, "module-nilearn.plotting"]], "Plotting EPI image: plot_epi": [[17, "plotting-epi-image-plot-epi"]], "Plotting ROIs (here the mask): plot_roi": [[17, "plotting-rois-here-the-mask-plot-roi"]], "Plotting anatomical images: plot_anat": [[17, "plotting-anatomical-images-plot-anat"]], "Plotting brain images": [[495, null]], "Plotting images with transparent thresholding": [[26, null]], "Plotting seeds: add_markers": [[16, "plotting-seeds-add-markers"]], "Plotting statistical maps in a glass brain: plot_glass_brain": [[17, "plotting-statistical-maps-in-a-glass-brain-plot-glass-brain"]], "Plotting statistical maps: plot_stat_map": [[17, "plotting-statistical-maps-plot-stat-map"]], "Plotting the SVM weights": [[3, "plotting-the-svm-weights"]], "Plotting the seed-to-voxel correlation map": [[58, "plotting-the-seed-to-voxel-correlation-map"]], "Plotting the surface image": [[7, "plotting-the-surface-image"]], "Plotting threshold set to 1": [[17, "plotting-threshold-set-to-1"]], "Plotting threshold set to 1 with vmax=0": [[17, "plotting-threshold-set-to-1-with-vmax-0"]], "Plotting threshold set to 1 with vmin=0": [[17, "plotting-threshold-set-to-1-with-vmin-0"]], "Plotting tools in nilearn": [[17, null]], "Plotting with decrease of contrast in background image with dim=.5": [[18, "plotting-with-decrease-of-contrast-in-background-image-with-dim-5"]], "Plotting with enhancement of background image with dim=-.5": [[18, "plotting-with-enhancement-of-background-image-with-dim-5"]], "Plotting with more decrease in contrast with dim=1": [[18, "plotting-with-more-decrease-in-contrast-with-dim-1"]], "Plotting with no change of contrast in background image with dim=0": [[18, "plotting-with-no-change-of-contrast-in-background-image-with-dim-0"]], "Plotting without threshold": [[17, "plotting-without-threshold"]], "Post-release": [[188, "post-release"]], "Power 2011 atlas": [[230, null]], "Pre-commit": [[179, "pre-commit"]], "Predicted time series and residuals": [[71, null]], "Prediction accuracy at chance using simple strategies": [[171, "prediction-accuracy-at-chance-using-simple-strategies"]], "Predictions: regression, classification and multi-class": [[172, "predictions-regression-classification-and-multi-class"]], "Predictive modeling analysis: VBM bio-markers of aging?": [[45, "predictive-modeling-analysis-vbm-bio-markers-of-aging"]], "Prepare code for the release": [[188, "prepare-code-for-the-release"]], "Prepare data and analysis parameters": [[64, "prepare-data-and-analysis-parameters"], [70, "prepare-data-and-analysis-parameters"], [103, "prepare-data-and-analysis-parameters"]], "Prepare masks": [[38, "prepare-masks"]], "Prepare some images for a simple t test": [[83, "prepare-some-images-for-a-simple-t-test"]], "Prepare the documentation for the release": [[188, "prepare-the-documentation-for-the-release"]], "Prepare the fMRI data": [[37, "prepare-the-fmri-data"]], "Prepare the release": [[188, "prepare-the-release"]], "Preparing the data": [[176, "preparing-the-data"]], "Preprocess data": [[45, "preprocess-data"]], "Preprocessed datasets": [[194, "preprocessed-datasets"]], "Preprocessing": [[41, "preprocessing"], [202, "preprocessing"]], "Principle of cross-validation": [[178, "principle-of-cross-validation"]], "Principle of the Searchlight": [[176, "principle-of-the-searchlight"]], "Probabilistic atlases": [[166, "probabilistic-atlases"], [194, "probabilistic-atlases"]], "Producing single subject maps of seed-to-voxel correlation": [[58, null]], "Project Organization": [[188, "project-organization"]], "Project the fMRI image to the surface": [[70, "project-the-fmri-image-to-the-surface"]], "Projectors": [[489, "projectors"]], "Pull Requests": [[188, "pull-requests"]], "Putting it all together": [[171, null]], "Python globbing": [[190, null]], "Quick sanity check on fit arguments": [[104, "quick-sanity-check-on-fit-arguments"]], "Quickstart": [[496, null]], "ROI-based decoding analysis in Haxby et al. dataset": [[34, null]], "ROI-to-ROI correlations of children": [[54, "roi-to-roi-correlations-of-children"]], "Reading CSV with pandas": [[190, null]], "Recommendation": [[179, null], [179, null]], "Reconstruction of visual stimuli from Miyawaki et al. 2008": [[44, null]], "Reference": [[165, null], [165, null], [165, null], [165, null], [168, null]], "References": [[3, "references"], [23, "references"], [24, "references"], [26, "references"], [33, "references"], [34, "references"], [39, "references"], [40, "references"], [43, "references"], [44, "references"], [47, "references"], [51, "references"], [52, "references"], [54, "references"], [59, "references"], [61, "references"], [74, "references"], [78, "references"], [101, "references"], [102, "references"], [103, "references"], [106, "references"], [121, "references"], [165, null], [165, "references"], [166, null], [166, null], [166, "references"], [168, "references"], [169, null], [169, "references"], [170, null], [170, null], [170, "references"], [171, "references"], [172, "references"], [173, "references"], [176, "references"], [177, "references"], [178, "references"], [185, "references"], [187, "references"], [197, "references"], [198, "references"], [199, "references"], [200, "references"], [201, "references"], [202, "references"], [204, "references"], [205, "references"], [206, "references"], [207, "references"], [208, "references"], [209, "references"], [210, "references"], [211, "references"], [212, "references"], [213, "references"], [214, "references"], [215, "references"], [217, "references"], [218, "references"], [219, "references"], [220, "references"], [221, "references"], [222, "references"], [223, "references"], [224, "references"], [225, "references"], [226, "references"], [227, "references"], [228, "references"], [229, "references"], [230, "references"], [231, "references"], [232, "references"], [233, "references"], [234, "references"], [235, "references"], [236, "references"], [237, "references"]], "Region Extraction for better brain parcellations": [[169, null]], "Region Extraction using a t-statistical map (3D)": [[90, null]], "Region Extraction with Dictionary learning maps": [[169, "region-extraction-with-dictionary-learning-maps"]], "Region signals extraction": [[54, "region-signals-extraction"]], "Regions Extraction of Default Mode Networks using Smith Atlas": [[89, null]], "Regions definition": [[192, "regions-definition"]], "Regions extraction using dictionary learning and functional connectomes": [[53, null]], "Regression": [[172, "regression"]], "Relabeling the atlas into separated regions": [[88, "relabeling-the-atlas-into-separated-regions"]], "Related example": [[177, "related-example"]], "Removing confounds": [[68, "removing-confounds"]], "Report bugs or discuss enhancement ideas": [[179, "report-bugs-or-discuss-enhancement-ideas"]], "Resample an image to a template": [[95, null]], "Resampling images": [[191, "resampling-images"]], "Resampling one image to match another one": [[191, "resampling-one-image-to-match-another-one"]], "Resampling to a specific target affine, shape, or resolution": [[191, "resampling-to-a-specific-target-affine-shape-or-resolution"]], "Resampling: resizing and changing resolutions of images": [[192, "resampling-resizing-and-changing-resolutions-of-images"]], "Reshape and mask images": [[107, "reshape-and-mask-images"]], "Restrict the analysis to cats and faces": [[3, "restrict-the-analysis-to-cats-and-faces"]], "Restrict to faces and houses": [[38, "restrict-to-faces-and-houses"], [39, "restrict-to-faces-and-houses"], [106, "restrict-to-faces-and-houses"]], "Retrieve and load the fMRI data from the Haxby study": [[3, "retrieve-and-load-the-fmri-data-from-the-haxby-study"], [101, "retrieve-and-load-the-fmri-data-from-the-haxby-study"]], "Retrieve the atlas and the data": [[55, "retrieve-the-atlas-and-the-data"], [57, "retrieve-the-atlas-and-the-data"], [59, "retrieve-the-atlas-and-the-data"]], "Retrieve the brain development fMRI dataset": [[61, "retrieve-the-brain-development-fmri-dataset"]], "Retrieve the data: the localizer dataset with contrast maps": [[18, "retrieve-the-data-the-localizer-dataset-with-contrast-maps"]], "Retrieve the files of the Haxby dataset": [[31, "retrieve-the-files-of-the-haxby-dataset"]], "Retrieving multiscale group brain parcellations": [[20, "retrieving-multiscale-group-brain-parcellations"]], "Retrieving the atlas data": [[11, "retrieving-the-atlas-data"]], "Retrieving the data": [[6, "retrieving-the-data"], [24, "retrieving-the-data"], [68, "retrieving-the-data"]], "Review Pull Requests": [[179, "review-pull-requests"]], "Run ICA and map components to terms": [[107, "run-ica-and-map-components-to-terms"]], "Run different estimators": [[47, "run-different-estimators"]], "Run the GLM on data from each run": [[35, "run-the-glm-on-data-from-each-run"]], "Run the estimators": [[47, "run-the-estimators"]], "Running a basic model": [[68, "running-a-basic-model"]], "Running scikit-learn functions for more control on the analysis": [[174, null]], "SPM auditory dataset": [[234, null]], "SPM multimodal dataset": [[235, null]], "Sample and plot response functions": [[69, "sample-and-plot-response-functions"]], "Sample the 3D data around each node of the mesh": [[10, "sample-the-3d-data-around-each-node-of-the-mesh"]], "Save plots to a file: savefig": [[16, "save-plots-to-a-file-savefig"]], "Save the surface image": [[7, "save-the-surface-image"]], "Saving model outputs to disk": [[65, "saving-model-outputs-to-disk"], [77, "saving-model-outputs-to-disk"]], "Saving results to a file": [[4, "saving-results-to-a-file"]], "Schaefer 2018 atlas": [[231, null]], "Scope of the project": [[179, "scope-of-the-project"]], "Score function": [[176, "score-function"]], "Searchlight": [[176, "id6"]], "Searchlight : finding voxels containing information": [[176, null]], "Searchlight analysis of face vs house recognition": [[38, null]], "Searchlight computation": [[38, "searchlight-computation"], [39, "searchlight-computation"]], "Second level model estimation": [[104, "second-level-model-estimation"]], "Second level models": [[184, null]], "Second level report": [[480, "second-level-report"]], "Second-level fMRI model: one sample test": [[81, null]], "Second-level fMRI model: true positive proportion in clusters": [[78, null]], "Second-level fMRI model: two-sample test, unpaired and paired": [[82, null]], "See Also": [[211, "see-also"], [212, "see-also"], [213, "see-also"], [214, "see-also"], [215, "see-also"], [216, "see-also"], [219, "see-also"]], "Seed-based connectivity on the surface": [[24, null]], "Seeding": [[179, "seeding"]], "Seitzman 2018 atlas": [[232, null]], "Selection filters": [[121, "selection-filters"]], "Set up the GLM": [[73, "set-up-the-glm"]], "Setting a parameter by cross-validation": [[36, null]], "Setting estimator parameters": [[172, "setting-estimator-parameters"], [174, "setting-estimator-parameters"]], "Setting up the searchlight": [[176, "setting-up-the-searchlight"]], "Setting up your environment": [[179, "setting-up-your-environment"]], "Show stimuli of Haxby et al. dataset": [[40, null]], "Show the design matrices for the first few trials": [[103, "show-the-design-matrices-for-the-first-few-trials"]], "Simple example of NiftiMasker use": [[94, null]], "Simple example of two-runs fMRI model fitting": [[73, null]], "Simple image manipulation: smoothing": [[4, "simple-image-manipulation-smoothing"]], "Simple statistical report of thresholded contrast": [[65, "simple-statistical-report-of-thresholded-contrast"]], "Single-subject data (two runs) in native space": [[72, null]], "Slicers": [[489, "slicers"]], "Smith 2009 atlas": [[233, null]], "Smoothing": [[68, "smoothing"], [192, "smoothing"]], "Smoothing an image": [[97, null]], "SpaceNet: decoding with spatial structure for better maps": [[177, null]], "Sparse inverse covariance for functional connectomes": [[165, "sparse-inverse-covariance-for-functional-connectomes"]], "Sparse inverse covariance on multiple subjects": [[165, "sparse-inverse-covariance-on-multiple-subjects"]], "Spatial regularization of decoding maps on mixed gambles study": [[173, "spatial-regularization-of-decoding-maps-on-mixed-gambles-study"]], "Special case: resampling to a given voxel size": [[191, null]], "Specific images or collections": [[121, "specific-images-or-collections"]], "Specifying the experimental paradigm": [[6, "specifying-the-experimental-paradigm"]], "Sphere radius": [[176, "sphere-radius"]], "Statistical Parametric Mapping (SPM)": [[183, "statistical-parametric-mapping-spm"]], "Statistical maps/derivatives": [[194, "statistical-maps-derivatives"]], "Statistical maps/derivatives descriptions": [[194, "statistical-maps-derivatives-descriptions"]], "Statistical significance testing": [[6, "statistical-significance-testing"]], "Statistical testing of a second-level analysis": [[83, null]], "Stopping criteria": [[178, "stopping-criteria"]], "Stopping criterion": [[178, "stopping-criterion"]], "Studying partial correlations": [[54, "studying-partial-correlations"]], "Subject level models": [[113, "subject-level-models"]], "Surface API": [[132, "surface-api"], [163, "surface-api"]], "Surface BOLD response": [[39, "surface-bold-response"]], "Surface GLM": [[480, "surface-glm"], [480, "id1"]], "Surface GLM: empty": [[480, "surface-glm-empty"]], "Surface labels masker": [[481, "surface-labels-masker"]], "Surface maps masker": [[481, "surface-maps-masker"]], "Surface masker": [[481, "surface-masker"]], "Surface plotting": [[495, "surface-plotting"]], "Surface-based analysis": [[180, "surface-based-analysis"]], "Surface-based dataset first and second level analysis of a dataset": [[113, null]], "Synthetic dataset": [[178, "synthetic-dataset"]], "Table of contents": [[498, "table-of-contents"]], "Talairach atlas": [[236, null]], "Team": [[0, null]], "Technical details": [[198, null], [279, null]], "Technical point: Illustration of the volume to surface sampling schemes": [[25, null]], "Templates": [[194, "templates"]], "Templates descriptions": [[194, "templates-descriptions"]], "Temporal Filtering and confound removal": [[192, "temporal-filtering-and-confound-removal"]], "Terms and conditions": [[198, null], [279, null]], "Tests": [[179, "tests"]], "Text files: phenotype or behavior": [[190, "text-files-phenotype-or-behavior"]], "The Haxby 2001 experiment": [[171, "the-haxby-2001-experiment"]], "The SpaceNet decoder": [[177, "the-spacenet-decoder"]], "The concept of \u201cmasker\u201d objects": [[192, "the-concept-of-masker-objects"]], "The haxby dataset: different multi-class strategies": [[37, null]], "The impact of global signal removal": [[59, "the-impact-of-global-signal-removal"]], "The noise model: ar(1), ols, or higher order ar?": [[68, "the-noise-model-ar-1-ols-or-higher-order-ar"]], "The original Yeo atlas": [[88, "the-original-yeo-atlas"]], "Then we prepare and mask the data": [[44, "then-we-prepare-and-mask-the-data"]], "Thresholding plots": [[17, "thresholding-plots"]], "Thresholding statistical maps": [[184, "thresholding-statistical-maps"]], "TiledSlicer: Three views in 2x2 fashion": [[16, "tiledslicer-three-views-in-2x2-fashion"]], "Time series extraction": [[58, "time-series-extraction"]], "Time series-based": [[180, "time-series-based"]], "Time-series from a brain parcellation or \u201cMaxProb\u201d atlas": [[166, "time-series-from-a-brain-parcellation-or-maxprob-atlas"]], "Time-series from a probabilistic atlas": [[166, "time-series-from-a-probabilistic-atlas"]], "Train and cross-validate via an Scikit-Learn pipeline": [[41, "train-and-cross-validate-via-an-scikit-learn-pipeline"]], "Training the decoder": [[32, "training-the-decoder"]], "Transparent masking of part of the data": [[26, "transparent-masking-of-part-of-the-data"]], "Transparent thresholding and contours": [[26, "transparent-thresholding-and-contours"]], "Transparent thresholding on GLM results": [[26, "transparent-thresholding-on-glm-results"]], "Transparent thresholding with other functions": [[26, "transparent-thresholding-with-other-functions"]], "Tuning cross-validation parameters": [[101, "tuning-cross-validation-parameters"]], "Turning the weights into a nifti image": [[3, "turning-the-weights-into-a-nifti-image"]], "Understanding Decoder": [[41, null]], "Understanding NiftiMasker and mask computation": [[91, null]], "Understanding neuroimaging data": [[190, "understanding-neuroimaging-data"]], "Understanding parameters of the first-level model": [[68, null]], "Unmasking (inverse_transform)": [[120, "unmasking-inverse-transform"]], "Use an atlas and choose regions to outline": [[10, "use-an-atlas-and-choose-regions-to-outline"]], "Use clean_args instead!": [[372, null], [372, null], [373, null], [373, null], [374, null], [374, null], [375, null], [375, null], [376, null], [376, null], [377, null], [377, null], [378, null], [378, null], [457, null]], "User guide": [[498, null]], "Using and visualizing the resulting parcellation": [[168, "using-and-visualizing-the-resulting-parcellation"]], "Using any other model in the pipeline": [[174, "using-any-other-model-in-the-pipeline"]], "Using nilearn for the first time": [[187, "using-nilearn-for-the-first-time"]], "Using predefined strategies": [[59, "using-predefined-strategies"]], "Using scikit-learn estimators": [[174, "using-scikit-learn-estimators"]], "Using the decoder": [[114, "using-the-decoder"]], "Using tox": [[188, "using-tox"]], "VBM analysis of aging": [[77, "vbm-analysis-of-aging"]], "Validating results": [[169, "validating-results"]], "Variation of norm of estimate": [[178, "variation-of-norm-of-estimate"]], "View results": [[77, "view-results"]], "View the results": [[72, "view-the-results"]], "Viewing results": [[24, "viewing-results"]], "Visualization": [[23, "visualization"], [27, "visualization"], [28, "visualization"], [32, "visualization"], [38, "visualization"], [39, "visualization"], [45, "visualization"], [106, "visualization"], [176, "visualization"]], "Visualization of Dictionary learning maps": [[169, "visualization-of-dictionary-learning-maps"]], "Visualization of FREM weights": [[33, "visualization-of-frem-weights"]], "Visualization of Region Extraction results": [[169, "visualization-of-region-extraction-results"]], "Visualization of affine resamplings": [[86, null]], "Visualization of brain images": [[9, null], [116, "visualization-of-brain-images"]], "Visualization of functional connectivity matrices": [[169, "visualization-of-functional-connectivity-matrices"]], "Visualize FREM weights": [[42, "visualize-frem-weights"]], "Visualize results": [[65, "visualize-results"]], "Visualize the ANOVA + SVC\u2019s discriminating weights": [[101, "visualize-the-anova-svc-s-discriminating-weights"]], "Visualize the data": [[112, "visualize-the-data"]], "Visualize the decoding maps and quality of predictions": [[46, "visualize-the-decoding-maps-and-quality-of-predictions"]], "Visualize the quality of predictions": [[45, "visualize-the-quality-of-predictions"]], "Visualize the results": [[31, "visualize-the-results"], [83, "visualize-the-results"]], "Visualize: Brain parcellations (Hierarchical KMeans)": [[52, "visualize-brain-parcellations-hierarchical-kmeans"]], "Visualize: Brain parcellations (KMeans)": [[52, "visualize-brain-parcellations-kmeans"]], "Visualize: Brain parcellations (ReNA)": [[52, "visualize-brain-parcellations-rena"]], "Visualize: Brain parcellations (Ward)": [[52, "visualize-brain-parcellations-ward"]], "Visualizing 4D probabilistic atlas maps": [[22, null]], "Visualizing Megatrawls Network Matrices from Human Connectome Project": [[28, null]], "Visualizing a 3D file": [[2, "visualizing-a-3d-file"]], "Visualizing a probabilistic atlas with plot_prob_atlas": [[21, "visualizing-a-probabilistic-atlas-with-plot-prob-atlas"]], "Visualizing a probabilistic atlas with plot_stat_map and add_overlay object": [[21, "visualizing-a-probabilistic-atlas-with-plot-stat-map-and-add-overlay-object"]], "Visualizing a probabilistic atlas: the default mode in the MSDL atlas": [[21, null]], "Visualizing an atlas with its own colormap": [[11, "visualizing-an-atlas-with-its-own-colormap"]], "Visualizing brain parcellations": [[20, "visualizing-brain-parcellations"]], "Visualizing global patterns over time": [[12, "visualizing-global-patterns-over-time"]], "Visualizing global patterns with a carpet plot": [[12, null]], "Visualizing global patterns, separated by tissue type": [[12, "visualizing-global-patterns-separated-by-tissue-type"]], "Visualizing multiscale functional brain parcellations": [[20, null]], "Visualizing one volume in a 4D file": [[2, "visualizing-one-volume-in-a-4d-file"]], "Visualizing results": [[120, "visualizing-results"], [170, "visualizing-results"]], "Visualizing the Harvard-Oxford atlas": [[11, "visualizing-the-harvard-oxford-atlas"]], "Visualizing the Harvard-Oxford atlas with contours": [[11, "visualizing-the-harvard-oxford-atlas-with-contours"]], "Visualizing the Juelich atlas": [[11, "visualizing-the-juelich-atlas"]], "Visualizing the Juelich atlas with contours": [[11, "visualizing-the-juelich-atlas-with-contours"]], "Visualizing the computed mask": [[192, "visualizing-the-computed-mask"]], "Visualizing the decoder\u2019s weights": [[171, "visualizing-the-decoder-s-weights"]], "Visualizing the fMRI volume": [[3, "visualizing-the-fmri-volume"]], "Visualizing the face vs house map": [[32, "visualizing-the-face-vs-house-map"]], "Visualizing the parcellation": [[168, "visualizing-the-parcellation"]], "Visualizing the results": [[171, "visualizing-the-results"]], "Visualizing without a colorbar on the right side": [[17, "visualizing-without-a-colorbar-on-the-right-side"]], "Volume GLM": [[480, "volume-glm"]], "Volume censoring": [[68, "volume-censoring"]], "Voxel based morphometry": [[184, "voxel-based-morphometry"]], "Voxel-Based Morphometry on OASIS dataset": [[77, null]], "Voxel-Based Morphometry on Oasis dataset": [[45, null]], "Voxel-Based Morphometry on Oasis dataset with Space-Net prior": [[46, null]], "Warm restart": [[178, "warm-restart"]], "We define our prediction function": [[44, "we-define-our-prediction-function"]], "We make a simple bar plot to summarize the results": [[34, "we-make-a-simple-bar-plot-to-summarize-the-results"]], "What do we mean by a run?": [[181, null]], "What is a surface image?": [[7, "what-is-a-surface-image"]], "What is fMRI ?": [[181, "what-is-fmri"]], "What is nilearn?": [[187, "what-is-nilearn"]], "What is the chance level accuracy?": [[3, "what-is-the-chance-level-accuracy"]], "What kind of connectivity is most powerful for classification?": [[54, "what-kind-of-connectivity-is-most-powerful-for-classification"], [102, "what-kind-of-connectivity-is-most-powerful-for-classification"]], "What\u2019s new": [[163, null]], "Which clustering to use": [[168, null]], "Who makes decisions": [[179, "who-makes-decisions"]], "Working with Surface images": [[7, null]], "Working with long time series fMRI images": [[111, null]], "XSlicer: Single view \u2018sagittal\u2019 with only two slices": [[16, "xslicer-single-view-sagittal-with-only-two-slices"]], "XZSlicer: Two views \u2018sagittal\u2019 and \u2018axial\u2019 with given coordinates": [[16, "xzslicer-two-views-sagittal-and-axial-with-given-coordinates"]], "YSlicer: Single view \u2018coronal\u2019 with single cut": [[16, "yslicer-single-view-coronal-with-single-cut"]], "YXSlicer: Two views \u2018coronal\u2019 and \u2018sagittal\u2019 with coordinates": [[16, "yxslicer-two-views-coronal-and-sagittal-with-coordinates"]], "YZSlicer: Two views \u2018coronal\u2019 and \u2018axial\u2019 with coordinates": [[16, "yzslicer-two-views-coronal-and-axial-with-coordinates"]], "Yeo 2011 atlas": [[237, null]], "ZSlicer: Single view \u2018axial\u2019 with number of cuts=5": [[16, "zslicer-single-view-axial-with-number-of-cuts-5"]], "`dtype` argument": [[192, null]], "assign.yml": [[164, "assign-yml"]], "auto-comment.yml": [[164, "auto-comment-yml"]], "benchmark.yml": [[164, "benchmark-yml"]], "build-docs.yml": [[164, "build-docs-yml"]], "check_gha_workflow.yml": [[164, "check-gha-workflow-yml"]], "circle_artifacts.yml": [[164, "circle-artifacts-yml"]], "development fMRI dataset": [[207, null]], "fMRI data modeling": [[181, "fmri-data-modeling"]], "fMRI statistical analysis": [[181, "fmri-statistical-analysis"]], "fMRI: using beta maps of a first-level analysis": [[171, null]], "fiac first level dataset": [[210, null]], "fsaverage template": [[211, null]], "fsaverage3 template": [[212, null]], "fsaverage4 template": [[213, null]], "fsaverage5 template": [[214, null]], "fsaverage6 template": [[215, null]], "language localizer demo dataset": [[221, null]], "linkcheck.yml": [[164, "linkcheck-yml"]], "localizer first level dataset": [[222, null]], "nightly_dependencies.yml": [[164, "nightly-dependencies-yml"]], "nilearn": [[496, "nilearn"]], "nilearn.connectome.ConnectivityMeasure": [[239, null]], "nilearn.connectome.GroupSparseCovariance": [[240, null]], "nilearn.connectome.GroupSparseCovarianceCV": [[241, null]], "nilearn.connectome.cov_to_corr": [[242, null]], "nilearn.connectome.group_sparse_covariance": [[243, null]], "nilearn.connectome.prec_to_partial": [[244, null]], "nilearn.connectome.sym_matrix_to_vec": [[245, null]], "nilearn.connectome.vec_to_sym_matrix": [[246, null]], "nilearn.connectome: Functional Connectivity": [[193, null]], "nilearn.datasets.fetch_abide_pcp": [[247, null]], "nilearn.datasets.fetch_adhd": [[248, null]], "nilearn.datasets.fetch_atlas_aal": [[249, null]], "nilearn.datasets.fetch_atlas_allen_2011": [[250, null]], "nilearn.datasets.fetch_atlas_basc_multiscale_2015": [[251, null]], "nilearn.datasets.fetch_atlas_craddock_2012": [[252, null]], "nilearn.datasets.fetch_atlas_destrieux_2009": [[253, null]], "nilearn.datasets.fetch_atlas_difumo": [[254, null]], "nilearn.datasets.fetch_atlas_harvard_oxford": [[255, null]], "nilearn.datasets.fetch_atlas_juelich": [[256, null]], "nilearn.datasets.fetch_atlas_msdl": [[257, null]], "nilearn.datasets.fetch_atlas_pauli_2017": [[258, null]], "nilearn.datasets.fetch_atlas_schaefer_2018": [[259, null]], "nilearn.datasets.fetch_atlas_smith_2009": [[260, null]], "nilearn.datasets.fetch_atlas_surf_destrieux": [[261, null]], "nilearn.datasets.fetch_atlas_talairach": [[262, null]], "nilearn.datasets.fetch_atlas_yeo_2011": [[263, null]], "nilearn.datasets.fetch_bids_langloc_dataset": [[264, null]], "nilearn.datasets.fetch_coords_dosenbach_2010": [[265, null]], "nilearn.datasets.fetch_coords_power_2011": [[266, null]], "nilearn.datasets.fetch_coords_seitzman_2018": [[267, null]], "nilearn.datasets.fetch_development_fmri": [[268, null]], "nilearn.datasets.fetch_ds000030_urls": [[269, null]], "nilearn.datasets.fetch_fiac_first_level": [[270, null]], "nilearn.datasets.fetch_haxby": [[271, null]], "nilearn.datasets.fetch_icbm152_2009": [[272, null]], "nilearn.datasets.fetch_icbm152_brain_gm_mask": [[273, null]], "nilearn.datasets.fetch_language_localizer_demo_dataset": [[274, null]], "nilearn.datasets.fetch_localizer_button_task": [[275, null]], "nilearn.datasets.fetch_localizer_calculation_task": [[276, null]], "nilearn.datasets.fetch_localizer_contrasts": [[277, null]], "nilearn.datasets.fetch_localizer_first_level": [[278, null]], "nilearn.datasets.fetch_megatrawls_netmats": [[279, null]], "nilearn.datasets.fetch_mixed_gambles": [[280, null]], "nilearn.datasets.fetch_miyawaki2008": [[281, null]], "nilearn.datasets.fetch_neurovault": [[282, null]], "nilearn.datasets.fetch_neurovault_auditory_computation_task": [[283, null]], "nilearn.datasets.fetch_neurovault_ids": [[284, null]], "nilearn.datasets.fetch_neurovault_motor_task": [[285, null]], "nilearn.datasets.fetch_oasis_vbm": [[286, null]], "nilearn.datasets.fetch_openneuro_dataset": [[287, null]], "nilearn.datasets.fetch_spm_auditory": [[288, null]], "nilearn.datasets.fetch_spm_multimodal_fmri": [[289, null]], "nilearn.datasets.fetch_surf_fsaverage": [[290, null]], "nilearn.datasets.fetch_surf_nki_enhanced": [[291, null]], "nilearn.datasets.get_data_dirs": [[292, null]], "nilearn.datasets.load_fsaverage": [[293, null]], "nilearn.datasets.load_fsaverage_data": [[294, null]], "nilearn.datasets.load_mni152_brain_mask": [[295, null]], "nilearn.datasets.load_mni152_gm_mask": [[296, null]], "nilearn.datasets.load_mni152_gm_template": [[297, null]], "nilearn.datasets.load_mni152_template": [[298, null]], "nilearn.datasets.load_mni152_wm_mask": [[299, null]], "nilearn.datasets.load_mni152_wm_template": [[300, null]], "nilearn.datasets.load_nki": [[301, null]], "nilearn.datasets.load_sample_motor_activation_image": [[302, null]], "nilearn.datasets.patch_openneuro_dataset": [[303, null]], "nilearn.datasets.select_from_index": [[304, null]], "nilearn.datasets: Automatic Dataset Fetching": [[194, null]], "nilearn.decoding.Decoder": [[305, null]], "nilearn.decoding.DecoderRegressor": [[306, null]], "nilearn.decoding.FREMClassifier": [[307, null]], "nilearn.decoding.FREMRegressor": [[308, null]], "nilearn.decoding.SearchLight": [[309, null]], "nilearn.decoding.SpaceNetClassifier": [[310, null]], "nilearn.decoding.SpaceNetRegressor": [[311, null]], "nilearn.decoding: Decoding": [[195, null]], "nilearn.decomposition.CanICA": [[312, null]], "nilearn.decomposition.DictLearning": [[313, null]], "nilearn.decomposition: Multivariate Decompositions": [[196, null]], "nilearn.glm.ARModel": [[314, null]], "nilearn.glm.Contrast": [[315, null]], "nilearn.glm.FContrastResults": [[316, null]], "nilearn.glm.LikelihoodModelResults": [[317, null]], "nilearn.glm.OLSModel": [[318, null]], "nilearn.glm.RegressionResults": [[319, null]], "nilearn.glm.SimpleRegressionResults": [[320, null]], "nilearn.glm.TContrastResults": [[321, null]], "nilearn.glm.cluster_level_inference": [[322, null]], "nilearn.glm.compute_contrast": [[323, null]], "nilearn.glm.compute_fixed_effects": [[324, null]], "nilearn.glm.expression_to_contrast_vector": [[325, null]], "nilearn.glm.fdr_threshold": [[326, null]], "nilearn.glm.first_level": [[482, "module-nilearn.glm.first_level"]], "nilearn.glm.first_level.FirstLevelModel": [[327, null]], "nilearn.glm.first_level.check_design_matrix": [[328, null]], "nilearn.glm.first_level.compute_regressor": [[329, null]], "nilearn.glm.first_level.first_level_from_bids": [[330, null]], "nilearn.glm.first_level.glover_dispersion_derivative": [[331, null]], "nilearn.glm.first_level.glover_hrf": [[332, null]], "nilearn.glm.first_level.glover_time_derivative": [[333, null]], "nilearn.glm.first_level.make_first_level_design_matrix": [[334, null]], "nilearn.glm.first_level.mean_scaling": [[335, null]], "nilearn.glm.first_level.run_glm": [[336, null]], "nilearn.glm.first_level.spm_dispersion_derivative": [[337, null]], "nilearn.glm.first_level.spm_hrf": [[338, null]], "nilearn.glm.first_level.spm_time_derivative": [[339, null]], "nilearn.glm.second_level": [[482, "module-nilearn.glm.second_level"]], "nilearn.glm.second_level.SecondLevelModel": [[340, null]], "nilearn.glm.second_level.make_second_level_design_matrix": [[341, null]], "nilearn.glm.second_level.non_parametric_inference": [[342, null]], "nilearn.glm.threshold_stats_img": [[343, null]], "nilearn.glm: Generalized Linear Models": [[482, null]], "nilearn.image.binarize_img": [[344, null]], "nilearn.image.clean_img": [[345, null]], "nilearn.image.concat_imgs": [[346, null]], "nilearn.image.coord_transform": [[347, null]], "nilearn.image.copy_img": [[348, null]], "nilearn.image.crop_img": [[349, null]], "nilearn.image.get_data": [[350, null]], "nilearn.image.high_variance_confounds": [[351, null]], "nilearn.image.index_img": [[352, null]], "nilearn.image.iter_img": [[353, null]], "nilearn.image.largest_connected_component_img": [[354, null]], "nilearn.image.load_img": [[355, null]], "nilearn.image.math_img": [[356, null]], "nilearn.image.mean_img": [[357, null]], "nilearn.image.new_img_like": [[358, null]], "nilearn.image.reorder_img": [[359, null]], "nilearn.image.resample_img": [[360, null]], "nilearn.image.resample_to_img": [[361, null]], "nilearn.image.smooth_img": [[362, null]], "nilearn.image.swap_img_hemispheres": [[363, null]], "nilearn.image.threshold_img": [[364, null]], "nilearn.image: Image Processing and Resampling Utilities": [[483, null]], "nilearn.interfaces.bids": [[485, "module-nilearn.interfaces.bids"]], "nilearn.interfaces.bids.get_bids_files": [[365, null]], "nilearn.interfaces.bids.parse_bids_filename": [[366, null]], "nilearn.interfaces.bids.save_glm_to_bids": [[367, null]], "nilearn.interfaces.fmriprep": [[485, "module-nilearn.interfaces.fmriprep"]], "nilearn.interfaces.fmriprep.load_confounds": [[368, null]], "nilearn.interfaces.fmriprep.load_confounds_strategy": [[369, null]], "nilearn.interfaces.fsl": [[485, "module-nilearn.interfaces.fsl"]], "nilearn.interfaces.fsl.get_design_from_fslmat": [[370, null]], "nilearn.interfaces: Loading components from interfaces": [[485, null]], "nilearn.maskers.BaseMasker": [[371, null]], "nilearn.maskers.MultiNiftiLabelsMasker": [[372, null]], "nilearn.maskers.MultiNiftiMapsMasker": [[373, null]], "nilearn.maskers.MultiNiftiMasker": [[374, null]], "nilearn.maskers.NiftiLabelsMasker": [[375, null]], "nilearn.maskers.NiftiMapsMasker": [[376, null]], "nilearn.maskers.NiftiMasker": [[377, null]], "nilearn.maskers.NiftiSpheresMasker": [[378, null]], "nilearn.maskers.SurfaceLabelsMasker": [[379, null]], "nilearn.maskers.SurfaceMapsMasker": [[380, null]], "nilearn.maskers.SurfaceMasker": [[381, null]], "nilearn.maskers: Extracting Signals from Brain Images": [[486, null]], "nilearn.masking.apply_mask": [[382, null]], "nilearn.masking.compute_background_mask": [[383, null]], "nilearn.masking.compute_brain_mask": [[384, null]], "nilearn.masking.compute_epi_mask": [[385, null]], "nilearn.masking.compute_multi_background_mask": [[386, null]], "nilearn.masking.compute_multi_brain_mask": [[387, null]], "nilearn.masking.compute_multi_epi_mask": [[388, null]], "nilearn.masking.intersect_masks": [[389, null]], "nilearn.masking.unmask": [[390, null]], "nilearn.masking: Data Masking Utilities": [[487, null]], "nilearn.mass_univariate.permuted_ols": [[391, null]], "nilearn.mass_univariate: Mass-Univariate Analysis": [[488, null]], "nilearn.plotting.displays.BaseAxes": [[392, null]], "nilearn.plotting.displays.BaseSlicer": [[393, null]], "nilearn.plotting.displays.CutAxes": [[394, null]], "nilearn.plotting.displays.GlassBrainAxes": [[395, null]], "nilearn.plotting.displays.LProjector": [[396, null]], "nilearn.plotting.displays.LRProjector": [[397, null]], "nilearn.plotting.displays.LYRProjector": [[398, null]], "nilearn.plotting.displays.LYRZProjector": [[399, null]], "nilearn.plotting.displays.LZRProjector": [[400, null]], "nilearn.plotting.displays.LZRYProjector": [[401, null]], "nilearn.plotting.displays.MosaicSlicer": [[402, null]], "nilearn.plotting.displays.OrthoProjector": [[403, null]], "nilearn.plotting.displays.OrthoSlicer": [[404, null]], "nilearn.plotting.displays.PlotlySurfaceFigure": [[405, null]], "nilearn.plotting.displays.RProjector": [[406, null]], "nilearn.plotting.displays.TiledSlicer": [[407, null]], "nilearn.plotting.displays.XProjector": [[408, null]], "nilearn.plotting.displays.XSlicer": [[409, null]], "nilearn.plotting.displays.XZProjector": [[410, null]], "nilearn.plotting.displays.XZSlicer": [[411, null]], "nilearn.plotting.displays.YProjector": [[412, null]], "nilearn.plotting.displays.YSlicer": [[413, null]], "nilearn.plotting.displays.YXProjector": [[414, null]], "nilearn.plotting.displays.YXSlicer": [[415, null]], "nilearn.plotting.displays.YZProjector": [[416, null]], "nilearn.plotting.displays.YZSlicer": [[417, null]], "nilearn.plotting.displays.ZProjector": [[418, null]], "nilearn.plotting.displays.ZSlicer": [[419, null]], "nilearn.plotting.displays.get_projector": [[420, null]], "nilearn.plotting.displays.get_slicer": [[421, null]], "nilearn.plotting.find_cut_slices": [[422, null]], "nilearn.plotting.find_parcellation_cut_coords": [[423, null]], "nilearn.plotting.find_probabilistic_atlas_cut_coords": [[424, null]], "nilearn.plotting.find_xyz_cut_coords": [[425, null]], "nilearn.plotting.img_comparison.plot_bland_altman": [[426, null]], "nilearn.plotting.img_comparison.plot_img_comparison": [[427, null]], "nilearn.plotting.plot_anat": [[428, null]], "nilearn.plotting.plot_carpet": [[429, null]], "nilearn.plotting.plot_connectome": [[430, null]], "nilearn.plotting.plot_contrast_matrix": [[431, null]], "nilearn.plotting.plot_design_matrix": [[432, null]], "nilearn.plotting.plot_design_matrix_correlation": [[433, null]], "nilearn.plotting.plot_epi": [[434, null]], "nilearn.plotting.plot_event": [[435, null]], "nilearn.plotting.plot_glass_brain": [[436, null]], "nilearn.plotting.plot_img": [[437, null]], "nilearn.plotting.plot_img_on_surf": [[438, null]], "nilearn.plotting.plot_markers": [[439, null]], "nilearn.plotting.plot_matrix": [[440, null]], "nilearn.plotting.plot_prob_atlas": [[441, null]], "nilearn.plotting.plot_roi": [[442, null]], "nilearn.plotting.plot_stat_map": [[443, null]], "nilearn.plotting.plot_surf": [[444, null]], "nilearn.plotting.plot_surf_contours": [[445, null]], "nilearn.plotting.plot_surf_roi": [[446, null]], "nilearn.plotting.plot_surf_stat_map": [[447, null]], "nilearn.plotting.show": [[448, null]], "nilearn.plotting.view_connectome": [[449, null]], "nilearn.plotting.view_img": [[450, null]], "nilearn.plotting.view_img_on_surf": [[451, null]], "nilearn.plotting.view_markers": [[452, null]], "nilearn.plotting.view_surf": [[453, null]], "nilearn.plotting: Plotting Brain Data": [[489, null]], "nilearn.regions.HierarchicalKMeans": [[454, null]], "nilearn.regions.Parcellations": [[455, null]], "nilearn.regions.ReNA": [[456, null]], "nilearn.regions.RegionExtractor": [[457, null]], "nilearn.regions.connected_label_regions": [[458, null]], "nilearn.regions.connected_regions": [[459, null]], "nilearn.regions.img_to_signals_labels": [[460, null]], "nilearn.regions.img_to_signals_maps": [[461, null]], "nilearn.regions.recursive_neighbor_agglomeration": [[462, null]], "nilearn.regions.signals_to_img_labels": [[463, null]], "nilearn.regions.signals_to_img_maps": [[464, null]], "nilearn.regions: Operating on Regions": [[491, null]], "nilearn.reporting.HTMLReport": [[465, null]], "nilearn.reporting.get_clusters_table": [[466, null]], "nilearn.reporting.make_glm_report": [[467, null]], "nilearn.reporting: Reporting Functions": [[492, null]], "nilearn.signal.butterworth": [[468, null]], "nilearn.signal.clean": [[469, null]], "nilearn.signal.high_variance_confounds": [[470, null]], "nilearn.signal: Preprocessing Time Series": [[493, null]], "nilearn.surface.FileMesh": [[471, null]], "nilearn.surface.InMemoryMesh": [[472, null]], "nilearn.surface.PolyData": [[473, null]], "nilearn.surface.PolyMesh": [[474, null]], "nilearn.surface.SurfaceImage": [[475, null]], "nilearn.surface.SurfaceMesh": [[476, null]], "nilearn.surface.load_surf_data": [[477, null]], "nilearn.surface.load_surf_mesh": [[478, null]], "nilearn.surface.vol_to_surf": [[479, null]], "nilearn.surface: Manipulating Surface Data": [[494, null]], "nilearn_data: Where is the downloaded data stored?": [[190, null]], "plot_surf_stat_map: Surface plot using a surface map and a cortical mesh": [[495, "plot-surf-stat-map-surface-plot-using-a-surface-map-and-a-cortical-mesh"]], "scipy >= 0.14.0 compatibility": [[291, null]], "sourcery.yml": [[164, "sourcery-yml"]], "test_atlases.yml": [[164, "test-atlases-yml"]], "test_with_free_threaded_python.yml": [[164, "test-with-free-threaded-python-yml"]], "test_with_tox.yml": [[164, "test-with-tox-yml"]], "testing_install.yml": [[164, "testing-install-yml"]], "testing_minimum.yml": [[164, "testing-minimum-yml"]], "trigger_hosting_on_pr.yml": [[164, "trigger-hosting-on-pr-yml"]], "update_authors.yml": [[164, "update-authors-yml"]], "view_img_on_surf: Surface plot using a 3D statistical map": [[495, "view-img-on-surf-surface-plot-using-a-3d-statistical-map"]], "view_surf: Surface plot using a surface map and a cortical mesh": [[495, "view-surf-surface-plot-using-a-surface-map-and-a-cortical-mesh"]], "\u201cOpaque\u201d thresholding": [[26, "opaque-thresholding"]], "\u201cTransparent\u201d thresholding": [[26, "transparent-thresholding"]]}, "docnames": ["authors", "auto_examples/00_tutorials/index", "auto_examples/00_tutorials/plot_3d_and_4d_niimg", "auto_examples/00_tutorials/plot_decoding_tutorial", "auto_examples/00_tutorials/plot_nilearn_101", "auto_examples/00_tutorials/plot_python_101", "auto_examples/00_tutorials/plot_single_subject_single_run", "auto_examples/00_tutorials/plot_surface_101", "auto_examples/00_tutorials/sg_execution_times", "auto_examples/01_plotting/index", "auto_examples/01_plotting/plot_3d_map_to_surface_projection", "auto_examples/01_plotting/plot_atlas", "auto_examples/01_plotting/plot_carpet", "auto_examples/01_plotting/plot_colormaps", "auto_examples/01_plotting/plot_demo_glass_brain", "auto_examples/01_plotting/plot_demo_glass_brain_extensive", "auto_examples/01_plotting/plot_demo_more_plotting", "auto_examples/01_plotting/plot_demo_plotting", "auto_examples/01_plotting/plot_dim_plotting", "auto_examples/01_plotting/plot_haxby_masks", "auto_examples/01_plotting/plot_multiscale_parcellations", "auto_examples/01_plotting/plot_overlay", "auto_examples/01_plotting/plot_prob_atlas", "auto_examples/01_plotting/plot_surf_atlas", "auto_examples/01_plotting/plot_surf_stat_map", "auto_examples/01_plotting/plot_surface_projection_strategies", "auto_examples/01_plotting/plot_transparency", "auto_examples/01_plotting/plot_visualization", "auto_examples/01_plotting/plot_visualize_megatrawls_netmats", "auto_examples/01_plotting/sg_execution_times", "auto_examples/02_decoding/index", "auto_examples/02_decoding/plot_haxby_anova_svm", "auto_examples/02_decoding/plot_haxby_different_estimators", "auto_examples/02_decoding/plot_haxby_frem", "auto_examples/02_decoding/plot_haxby_full_analysis", "auto_examples/02_decoding/plot_haxby_glm_decoding", "auto_examples/02_decoding/plot_haxby_grid_search", "auto_examples/02_decoding/plot_haxby_multiclass", "auto_examples/02_decoding/plot_haxby_searchlight", "auto_examples/02_decoding/plot_haxby_searchlight_surface", "auto_examples/02_decoding/plot_haxby_stimuli", "auto_examples/02_decoding/plot_haxby_understand_decoder", "auto_examples/02_decoding/plot_mixed_gambles_frem", "auto_examples/02_decoding/plot_miyawaki_encoding", "auto_examples/02_decoding/plot_miyawaki_reconstruction", "auto_examples/02_decoding/plot_oasis_vbm", "auto_examples/02_decoding/plot_oasis_vbm_space_net", "auto_examples/02_decoding/plot_simulated_data", "auto_examples/02_decoding/sg_execution_times", "auto_examples/03_connectivity/index", "auto_examples/03_connectivity/plot_atlas_comparison", "auto_examples/03_connectivity/plot_compare_decomposition", "auto_examples/03_connectivity/plot_data_driven_parcellations", "auto_examples/03_connectivity/plot_extract_regions_dictlearning_maps", "auto_examples/03_connectivity/plot_group_level_connectivity", "auto_examples/03_connectivity/plot_inverse_covariance_connectome", "auto_examples/03_connectivity/plot_multi_subject_connectome", "auto_examples/03_connectivity/plot_probabilistic_atlas_extraction", "auto_examples/03_connectivity/plot_seed_to_voxel_correlation", "auto_examples/03_connectivity/plot_signal_extraction", "auto_examples/03_connectivity/plot_simulated_connectome", "auto_examples/03_connectivity/plot_sphere_based_connectome", "auto_examples/03_connectivity/sg_execution_times", "auto_examples/04_glm_first_level/index", "auto_examples/04_glm_first_level/plot_adhd_dmn", "auto_examples/04_glm_first_level/plot_bids_features", "auto_examples/04_glm_first_level/plot_design_matrix", "auto_examples/04_glm_first_level/plot_fir_model", "auto_examples/04_glm_first_level/plot_first_level_details", "auto_examples/04_glm_first_level/plot_hrf", "auto_examples/04_glm_first_level/plot_localizer_surface_analysis", "auto_examples/04_glm_first_level/plot_predictions_residuals", "auto_examples/04_glm_first_level/plot_spm_multimodal_faces", "auto_examples/04_glm_first_level/plot_two_runs_model", "auto_examples/04_glm_first_level/plot_write_events_file", "auto_examples/04_glm_first_level/sg_execution_times", "auto_examples/05_glm_second_level/index", "auto_examples/05_glm_second_level/plot_oasis", "auto_examples/05_glm_second_level/plot_proportion_activated_voxels", "auto_examples/05_glm_second_level/plot_second_level_association_test", "auto_examples/05_glm_second_level/plot_second_level_design_matrix", "auto_examples/05_glm_second_level/plot_second_level_one_sample_test", "auto_examples/05_glm_second_level/plot_second_level_two_sample_test", "auto_examples/05_glm_second_level/plot_thresholding", "auto_examples/05_glm_second_level/sg_execution_times", "auto_examples/06_manipulating_images/index", "auto_examples/06_manipulating_images/plot_affine_transformation", "auto_examples/06_manipulating_images/plot_compare_mean_image", "auto_examples/06_manipulating_images/plot_extract_regions_labels_image", "auto_examples/06_manipulating_images/plot_extract_rois_smith_atlas", "auto_examples/06_manipulating_images/plot_extract_rois_statistical_maps", "auto_examples/06_manipulating_images/plot_mask_computation", "auto_examples/06_manipulating_images/plot_negate_image", "auto_examples/06_manipulating_images/plot_nifti_labels_simple", "auto_examples/06_manipulating_images/plot_nifti_simple", "auto_examples/06_manipulating_images/plot_resample_to_template", "auto_examples/06_manipulating_images/plot_roi_extraction", "auto_examples/06_manipulating_images/plot_smooth_mean_image", "auto_examples/06_manipulating_images/plot_threshold_image", "auto_examples/06_manipulating_images/sg_execution_times", "auto_examples/07_advanced/index", "auto_examples/07_advanced/plot_advanced_decoding_scikit", "auto_examples/07_advanced/plot_age_group_prediction_cross_val", "auto_examples/07_advanced/plot_beta_series", "auto_examples/07_advanced/plot_bids_analysis", "auto_examples/07_advanced/plot_copy_headers_math_img", "auto_examples/07_advanced/plot_haxby_mass_univariate", "auto_examples/07_advanced/plot_ica_neurovault", "auto_examples/07_advanced/plot_ica_resting_state", "auto_examples/07_advanced/plot_localizer_mass_univariate_methods", "auto_examples/07_advanced/plot_localizer_simple_analysis", "auto_examples/07_advanced/plot_mask_large_fmri", "auto_examples/07_advanced/plot_neurovault_meta_analysis", "auto_examples/07_advanced/plot_surface_bids_analysis", "auto_examples/07_advanced/plot_surface_image_and_maskers", "auto_examples/07_advanced/sg_execution_times", "auto_examples/index", "auto_examples/sg_execution_times", "bibliography", "building_blocks/index", "building_blocks/manual_pipeline", "building_blocks/neurovault", "changes/0.1.0", "changes/0.1.1", "changes/0.1.2", "changes/0.1.3", "changes/0.1.4", "changes/0.10.0", "changes/0.10.1", "changes/0.10.2", "changes/0.10.3", "changes/0.10.4", "changes/0.11.0", "changes/0.11.1", "changes/0.12.0", "changes/0.12.1", "changes/0.2.0", "changes/0.2.1", "changes/0.2.2", "changes/0.2.3", "changes/0.2.4", "changes/0.2.5", "changes/0.2.6", "changes/0.3.0", "changes/0.3.1", "changes/0.4.0", "changes/0.4.1", "changes/0.4.2", "changes/0.5.0", "changes/0.5.1", "changes/0.5.2", "changes/0.6.0", "changes/0.6.1", "changes/0.6.2", "changes/0.7.0", "changes/0.7.1", "changes/0.8.0", "changes/0.8.1", "changes/0.9.0", "changes/0.9.1", "changes/0.9.2", "changes/latest", "changes/names", "changes/whats_new", "ci", "connectivity/connectome_extraction", "connectivity/functional_connectomes", "connectivity/index", "connectivity/parcellating", "connectivity/region_extraction", "connectivity/resting_state_networks", "decoding/decoding_intro", "decoding/estimator_choice", "decoding/frem", "decoding/going_further", "decoding/index", "decoding/searchlight", "decoding/space_net", "developers/group_sparse_covariance", "development", "glm/first_level_model", "glm/glm_intro", "glm/index", "glm/meaning_difference", "glm/second_level_model", "glossary", "index", "introduction", "maintenance", "manipulating_images/index", "manipulating_images/input_output", "manipulating_images/manipulating_images", "manipulating_images/masker_objects", "modules/connectome", "modules/datasets", "modules/decoding", "modules/decomposition", "modules/description/ABIDE_pcp", "modules/description/Megatrawls", "modules/description/aal", "modules/description/adhd", "modules/description/allen_rsn_2011", "modules/description/basc_multiscale_2015", "modules/description/bids_langloc", "modules/description/brainomics_localizer", "modules/description/craddock_2012", "modules/description/destrieux_surface", "modules/description/development_fmri", "modules/description/difumo_atlases", "modules/description/dosenbach_2010", "modules/description/fiac", "modules/description/fsaverage", "modules/description/fsaverage3", "modules/description/fsaverage4", "modules/description/fsaverage5", "modules/description/fsaverage6", "modules/description/fsaverage_content", "modules/description/harvard_oxford", "modules/description/haxby2001", "modules/description/icbm152_2009", "modules/description/juelich", "modules/description/language_localizer_demo", "modules/description/localizer_first_level", "modules/description/mixed_gambles", "modules/description/miyawaki2008", "modules/description/msdl_atlas", "modules/description/neurovault", "modules/description/nki_enhanced_surface", "modules/description/oasis1", "modules/description/pauli_2017", "modules/description/power_2011", "modules/description/schaefer_2018", "modules/description/seitzman_2018", "modules/description/smith_2009", "modules/description/spm_auditory", "modules/description/spm_multimodal", "modules/description/talairach_atlas", "modules/description/yeo_2011", "modules/deterministic_atlases", "modules/generated/nilearn.connectome.ConnectivityMeasure", "modules/generated/nilearn.connectome.GroupSparseCovariance", "modules/generated/nilearn.connectome.GroupSparseCovarianceCV", "modules/generated/nilearn.connectome.cov_to_corr", "modules/generated/nilearn.connectome.group_sparse_covariance", "modules/generated/nilearn.connectome.prec_to_partial", "modules/generated/nilearn.connectome.sym_matrix_to_vec", "modules/generated/nilearn.connectome.vec_to_sym_matrix", "modules/generated/nilearn.datasets.fetch_abide_pcp", "modules/generated/nilearn.datasets.fetch_adhd", "modules/generated/nilearn.datasets.fetch_atlas_aal", "modules/generated/nilearn.datasets.fetch_atlas_allen_2011", "modules/generated/nilearn.datasets.fetch_atlas_basc_multiscale_2015", "modules/generated/nilearn.datasets.fetch_atlas_craddock_2012", "modules/generated/nilearn.datasets.fetch_atlas_destrieux_2009", "modules/generated/nilearn.datasets.fetch_atlas_difumo", "modules/generated/nilearn.datasets.fetch_atlas_harvard_oxford", "modules/generated/nilearn.datasets.fetch_atlas_juelich", "modules/generated/nilearn.datasets.fetch_atlas_msdl", "modules/generated/nilearn.datasets.fetch_atlas_pauli_2017", "modules/generated/nilearn.datasets.fetch_atlas_schaefer_2018", "modules/generated/nilearn.datasets.fetch_atlas_smith_2009", "modules/generated/nilearn.datasets.fetch_atlas_surf_destrieux", "modules/generated/nilearn.datasets.fetch_atlas_talairach", "modules/generated/nilearn.datasets.fetch_atlas_yeo_2011", "modules/generated/nilearn.datasets.fetch_bids_langloc_dataset", "modules/generated/nilearn.datasets.fetch_coords_dosenbach_2010", "modules/generated/nilearn.datasets.fetch_coords_power_2011", "modules/generated/nilearn.datasets.fetch_coords_seitzman_2018", "modules/generated/nilearn.datasets.fetch_development_fmri", "modules/generated/nilearn.datasets.fetch_ds000030_urls", "modules/generated/nilearn.datasets.fetch_fiac_first_level", "modules/generated/nilearn.datasets.fetch_haxby", "modules/generated/nilearn.datasets.fetch_icbm152_2009", "modules/generated/nilearn.datasets.fetch_icbm152_brain_gm_mask", "modules/generated/nilearn.datasets.fetch_language_localizer_demo_dataset", "modules/generated/nilearn.datasets.fetch_localizer_button_task", "modules/generated/nilearn.datasets.fetch_localizer_calculation_task", "modules/generated/nilearn.datasets.fetch_localizer_contrasts", "modules/generated/nilearn.datasets.fetch_localizer_first_level", "modules/generated/nilearn.datasets.fetch_megatrawls_netmats", "modules/generated/nilearn.datasets.fetch_mixed_gambles", "modules/generated/nilearn.datasets.fetch_miyawaki2008", "modules/generated/nilearn.datasets.fetch_neurovault", "modules/generated/nilearn.datasets.fetch_neurovault_auditory_computation_task", "modules/generated/nilearn.datasets.fetch_neurovault_ids", "modules/generated/nilearn.datasets.fetch_neurovault_motor_task", "modules/generated/nilearn.datasets.fetch_oasis_vbm", "modules/generated/nilearn.datasets.fetch_openneuro_dataset", "modules/generated/nilearn.datasets.fetch_spm_auditory", "modules/generated/nilearn.datasets.fetch_spm_multimodal_fmri", "modules/generated/nilearn.datasets.fetch_surf_fsaverage", "modules/generated/nilearn.datasets.fetch_surf_nki_enhanced", "modules/generated/nilearn.datasets.get_data_dirs", "modules/generated/nilearn.datasets.load_fsaverage", "modules/generated/nilearn.datasets.load_fsaverage_data", "modules/generated/nilearn.datasets.load_mni152_brain_mask", "modules/generated/nilearn.datasets.load_mni152_gm_mask", "modules/generated/nilearn.datasets.load_mni152_gm_template", "modules/generated/nilearn.datasets.load_mni152_template", "modules/generated/nilearn.datasets.load_mni152_wm_mask", "modules/generated/nilearn.datasets.load_mni152_wm_template", "modules/generated/nilearn.datasets.load_nki", "modules/generated/nilearn.datasets.load_sample_motor_activation_image", "modules/generated/nilearn.datasets.patch_openneuro_dataset", "modules/generated/nilearn.datasets.select_from_index", "modules/generated/nilearn.decoding.Decoder", "modules/generated/nilearn.decoding.DecoderRegressor", "modules/generated/nilearn.decoding.FREMClassifier", "modules/generated/nilearn.decoding.FREMRegressor", "modules/generated/nilearn.decoding.SearchLight", "modules/generated/nilearn.decoding.SpaceNetClassifier", "modules/generated/nilearn.decoding.SpaceNetRegressor", "modules/generated/nilearn.decomposition.CanICA", "modules/generated/nilearn.decomposition.DictLearning", "modules/generated/nilearn.glm.ARModel", "modules/generated/nilearn.glm.Contrast", "modules/generated/nilearn.glm.FContrastResults", "modules/generated/nilearn.glm.LikelihoodModelResults", "modules/generated/nilearn.glm.OLSModel", "modules/generated/nilearn.glm.RegressionResults", "modules/generated/nilearn.glm.SimpleRegressionResults", "modules/generated/nilearn.glm.TContrastResults", "modules/generated/nilearn.glm.cluster_level_inference", "modules/generated/nilearn.glm.compute_contrast", "modules/generated/nilearn.glm.compute_fixed_effects", "modules/generated/nilearn.glm.expression_to_contrast_vector", "modules/generated/nilearn.glm.fdr_threshold", "modules/generated/nilearn.glm.first_level.FirstLevelModel", "modules/generated/nilearn.glm.first_level.check_design_matrix", "modules/generated/nilearn.glm.first_level.compute_regressor", "modules/generated/nilearn.glm.first_level.first_level_from_bids", "modules/generated/nilearn.glm.first_level.glover_dispersion_derivative", "modules/generated/nilearn.glm.first_level.glover_hrf", "modules/generated/nilearn.glm.first_level.glover_time_derivative", "modules/generated/nilearn.glm.first_level.make_first_level_design_matrix", "modules/generated/nilearn.glm.first_level.mean_scaling", "modules/generated/nilearn.glm.first_level.run_glm", "modules/generated/nilearn.glm.first_level.spm_dispersion_derivative", "modules/generated/nilearn.glm.first_level.spm_hrf", "modules/generated/nilearn.glm.first_level.spm_time_derivative", "modules/generated/nilearn.glm.second_level.SecondLevelModel", "modules/generated/nilearn.glm.second_level.make_second_level_design_matrix", "modules/generated/nilearn.glm.second_level.non_parametric_inference", "modules/generated/nilearn.glm.threshold_stats_img", "modules/generated/nilearn.image.binarize_img", "modules/generated/nilearn.image.clean_img", "modules/generated/nilearn.image.concat_imgs", "modules/generated/nilearn.image.coord_transform", "modules/generated/nilearn.image.copy_img", "modules/generated/nilearn.image.crop_img", "modules/generated/nilearn.image.get_data", "modules/generated/nilearn.image.high_variance_confounds", "modules/generated/nilearn.image.index_img", "modules/generated/nilearn.image.iter_img", "modules/generated/nilearn.image.largest_connected_component_img", "modules/generated/nilearn.image.load_img", "modules/generated/nilearn.image.math_img", "modules/generated/nilearn.image.mean_img", "modules/generated/nilearn.image.new_img_like", "modules/generated/nilearn.image.reorder_img", "modules/generated/nilearn.image.resample_img", "modules/generated/nilearn.image.resample_to_img", "modules/generated/nilearn.image.smooth_img", "modules/generated/nilearn.image.swap_img_hemispheres", "modules/generated/nilearn.image.threshold_img", "modules/generated/nilearn.interfaces.bids.get_bids_files", "modules/generated/nilearn.interfaces.bids.parse_bids_filename", "modules/generated/nilearn.interfaces.bids.save_glm_to_bids", "modules/generated/nilearn.interfaces.fmriprep.load_confounds", "modules/generated/nilearn.interfaces.fmriprep.load_confounds_strategy", "modules/generated/nilearn.interfaces.fsl.get_design_from_fslmat", "modules/generated/nilearn.maskers.BaseMasker", "modules/generated/nilearn.maskers.MultiNiftiLabelsMasker", "modules/generated/nilearn.maskers.MultiNiftiMapsMasker", "modules/generated/nilearn.maskers.MultiNiftiMasker", "modules/generated/nilearn.maskers.NiftiLabelsMasker", "modules/generated/nilearn.maskers.NiftiMapsMasker", "modules/generated/nilearn.maskers.NiftiMasker", "modules/generated/nilearn.maskers.NiftiSpheresMasker", "modules/generated/nilearn.maskers.SurfaceLabelsMasker", "modules/generated/nilearn.maskers.SurfaceMapsMasker", "modules/generated/nilearn.maskers.SurfaceMasker", "modules/generated/nilearn.masking.apply_mask", "modules/generated/nilearn.masking.compute_background_mask", "modules/generated/nilearn.masking.compute_brain_mask", "modules/generated/nilearn.masking.compute_epi_mask", "modules/generated/nilearn.masking.compute_multi_background_mask", "modules/generated/nilearn.masking.compute_multi_brain_mask", "modules/generated/nilearn.masking.compute_multi_epi_mask", "modules/generated/nilearn.masking.intersect_masks", "modules/generated/nilearn.masking.unmask", "modules/generated/nilearn.mass_univariate.permuted_ols", "modules/generated/nilearn.plotting.displays.BaseAxes", "modules/generated/nilearn.plotting.displays.BaseSlicer", "modules/generated/nilearn.plotting.displays.CutAxes", "modules/generated/nilearn.plotting.displays.GlassBrainAxes", "modules/generated/nilearn.plotting.displays.LProjector", "modules/generated/nilearn.plotting.displays.LRProjector", "modules/generated/nilearn.plotting.displays.LYRProjector", "modules/generated/nilearn.plotting.displays.LYRZProjector", "modules/generated/nilearn.plotting.displays.LZRProjector", "modules/generated/nilearn.plotting.displays.LZRYProjector", "modules/generated/nilearn.plotting.displays.MosaicSlicer", "modules/generated/nilearn.plotting.displays.OrthoProjector", "modules/generated/nilearn.plotting.displays.OrthoSlicer", "modules/generated/nilearn.plotting.displays.PlotlySurfaceFigure", "modules/generated/nilearn.plotting.displays.RProjector", "modules/generated/nilearn.plotting.displays.TiledSlicer", "modules/generated/nilearn.plotting.displays.XProjector", "modules/generated/nilearn.plotting.displays.XSlicer", "modules/generated/nilearn.plotting.displays.XZProjector", "modules/generated/nilearn.plotting.displays.XZSlicer", "modules/generated/nilearn.plotting.displays.YProjector", "modules/generated/nilearn.plotting.displays.YSlicer", "modules/generated/nilearn.plotting.displays.YXProjector", "modules/generated/nilearn.plotting.displays.YXSlicer", "modules/generated/nilearn.plotting.displays.YZProjector", "modules/generated/nilearn.plotting.displays.YZSlicer", "modules/generated/nilearn.plotting.displays.ZProjector", "modules/generated/nilearn.plotting.displays.ZSlicer", "modules/generated/nilearn.plotting.displays.get_projector", "modules/generated/nilearn.plotting.displays.get_slicer", "modules/generated/nilearn.plotting.find_cut_slices", "modules/generated/nilearn.plotting.find_parcellation_cut_coords", "modules/generated/nilearn.plotting.find_probabilistic_atlas_cut_coords", "modules/generated/nilearn.plotting.find_xyz_cut_coords", "modules/generated/nilearn.plotting.img_comparison.plot_bland_altman", "modules/generated/nilearn.plotting.img_comparison.plot_img_comparison", "modules/generated/nilearn.plotting.plot_anat", "modules/generated/nilearn.plotting.plot_carpet", "modules/generated/nilearn.plotting.plot_connectome", "modules/generated/nilearn.plotting.plot_contrast_matrix", "modules/generated/nilearn.plotting.plot_design_matrix", "modules/generated/nilearn.plotting.plot_design_matrix_correlation", "modules/generated/nilearn.plotting.plot_epi", "modules/generated/nilearn.plotting.plot_event", "modules/generated/nilearn.plotting.plot_glass_brain", "modules/generated/nilearn.plotting.plot_img", "modules/generated/nilearn.plotting.plot_img_on_surf", "modules/generated/nilearn.plotting.plot_markers", "modules/generated/nilearn.plotting.plot_matrix", "modules/generated/nilearn.plotting.plot_prob_atlas", "modules/generated/nilearn.plotting.plot_roi", "modules/generated/nilearn.plotting.plot_stat_map", "modules/generated/nilearn.plotting.plot_surf", "modules/generated/nilearn.plotting.plot_surf_contours", "modules/generated/nilearn.plotting.plot_surf_roi", "modules/generated/nilearn.plotting.plot_surf_stat_map", "modules/generated/nilearn.plotting.show", "modules/generated/nilearn.plotting.view_connectome", "modules/generated/nilearn.plotting.view_img", "modules/generated/nilearn.plotting.view_img_on_surf", "modules/generated/nilearn.plotting.view_markers", "modules/generated/nilearn.plotting.view_surf", "modules/generated/nilearn.regions.HierarchicalKMeans", "modules/generated/nilearn.regions.Parcellations", "modules/generated/nilearn.regions.ReNA", "modules/generated/nilearn.regions.RegionExtractor", "modules/generated/nilearn.regions.connected_label_regions", "modules/generated/nilearn.regions.connected_regions", "modules/generated/nilearn.regions.img_to_signals_labels", "modules/generated/nilearn.regions.img_to_signals_maps", "modules/generated/nilearn.regions.recursive_neighbor_agglomeration", "modules/generated/nilearn.regions.signals_to_img_labels", "modules/generated/nilearn.regions.signals_to_img_maps", "modules/generated/nilearn.reporting.HTMLReport", "modules/generated/nilearn.reporting.get_clusters_table", "modules/generated/nilearn.reporting.make_glm_report", "modules/generated/nilearn.signal.butterworth", "modules/generated/nilearn.signal.clean", "modules/generated/nilearn.signal.high_variance_confounds", "modules/generated/nilearn.surface.FileMesh", "modules/generated/nilearn.surface.InMemoryMesh", "modules/generated/nilearn.surface.PolyData", "modules/generated/nilearn.surface.PolyMesh", "modules/generated/nilearn.surface.SurfaceImage", "modules/generated/nilearn.surface.SurfaceMesh", "modules/generated/nilearn.surface.load_surf_data", "modules/generated/nilearn.surface.load_surf_mesh", "modules/generated/nilearn.surface.vol_to_surf", "modules/generated_reports/glm_reports_examples", "modules/generated_reports/masker_reports_examples", "modules/glm", "modules/image", "modules/index", "modules/interfaces", "modules/maskers", "modules/masking", "modules/mass_univariate", "modules/plotting", "modules/probabilistic_atlases", "modules/regions", "modules/reporting", "modules/signal", "modules/surface", "plotting/index", "quickstart", "sg_execution_times", "user_guide", "versions"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinxcontrib.bibtex": 9, "sphinxext.opengraph": 1}, "filenames": ["authors.rst", "auto_examples/00_tutorials/index.rst", "auto_examples/00_tutorials/plot_3d_and_4d_niimg.rst", "auto_examples/00_tutorials/plot_decoding_tutorial.rst", "auto_examples/00_tutorials/plot_nilearn_101.rst", "auto_examples/00_tutorials/plot_python_101.rst", "auto_examples/00_tutorials/plot_single_subject_single_run.rst", "auto_examples/00_tutorials/plot_surface_101.rst", "auto_examples/00_tutorials/sg_execution_times.rst", "auto_examples/01_plotting/index.rst", "auto_examples/01_plotting/plot_3d_map_to_surface_projection.rst", "auto_examples/01_plotting/plot_atlas.rst", "auto_examples/01_plotting/plot_carpet.rst", "auto_examples/01_plotting/plot_colormaps.rst", "auto_examples/01_plotting/plot_demo_glass_brain.rst", "auto_examples/01_plotting/plot_demo_glass_brain_extensive.rst", "auto_examples/01_plotting/plot_demo_more_plotting.rst", "auto_examples/01_plotting/plot_demo_plotting.rst", "auto_examples/01_plotting/plot_dim_plotting.rst", "auto_examples/01_plotting/plot_haxby_masks.rst", "auto_examples/01_plotting/plot_multiscale_parcellations.rst", "auto_examples/01_plotting/plot_overlay.rst", "auto_examples/01_plotting/plot_prob_atlas.rst", "auto_examples/01_plotting/plot_surf_atlas.rst", "auto_examples/01_plotting/plot_surf_stat_map.rst", "auto_examples/01_plotting/plot_surface_projection_strategies.rst", "auto_examples/01_plotting/plot_transparency.rst", "auto_examples/01_plotting/plot_visualization.rst", "auto_examples/01_plotting/plot_visualize_megatrawls_netmats.rst", "auto_examples/01_plotting/sg_execution_times.rst", "auto_examples/02_decoding/index.rst", "auto_examples/02_decoding/plot_haxby_anova_svm.rst", "auto_examples/02_decoding/plot_haxby_different_estimators.rst", "auto_examples/02_decoding/plot_haxby_frem.rst", "auto_examples/02_decoding/plot_haxby_full_analysis.rst", "auto_examples/02_decoding/plot_haxby_glm_decoding.rst", "auto_examples/02_decoding/plot_haxby_grid_search.rst", "auto_examples/02_decoding/plot_haxby_multiclass.rst", "auto_examples/02_decoding/plot_haxby_searchlight.rst", "auto_examples/02_decoding/plot_haxby_searchlight_surface.rst", "auto_examples/02_decoding/plot_haxby_stimuli.rst", "auto_examples/02_decoding/plot_haxby_understand_decoder.rst", "auto_examples/02_decoding/plot_mixed_gambles_frem.rst", "auto_examples/02_decoding/plot_miyawaki_encoding.rst", "auto_examples/02_decoding/plot_miyawaki_reconstruction.rst", "auto_examples/02_decoding/plot_oasis_vbm.rst", "auto_examples/02_decoding/plot_oasis_vbm_space_net.rst", "auto_examples/02_decoding/plot_simulated_data.rst", "auto_examples/02_decoding/sg_execution_times.rst", "auto_examples/03_connectivity/index.rst", "auto_examples/03_connectivity/plot_atlas_comparison.rst", "auto_examples/03_connectivity/plot_compare_decomposition.rst", "auto_examples/03_connectivity/plot_data_driven_parcellations.rst", "auto_examples/03_connectivity/plot_extract_regions_dictlearning_maps.rst", "auto_examples/03_connectivity/plot_group_level_connectivity.rst", "auto_examples/03_connectivity/plot_inverse_covariance_connectome.rst", "auto_examples/03_connectivity/plot_multi_subject_connectome.rst", "auto_examples/03_connectivity/plot_probabilistic_atlas_extraction.rst", "auto_examples/03_connectivity/plot_seed_to_voxel_correlation.rst", "auto_examples/03_connectivity/plot_signal_extraction.rst", "auto_examples/03_connectivity/plot_simulated_connectome.rst", "auto_examples/03_connectivity/plot_sphere_based_connectome.rst", "auto_examples/03_connectivity/sg_execution_times.rst", "auto_examples/04_glm_first_level/index.rst", "auto_examples/04_glm_first_level/plot_adhd_dmn.rst", "auto_examples/04_glm_first_level/plot_bids_features.rst", "auto_examples/04_glm_first_level/plot_design_matrix.rst", "auto_examples/04_glm_first_level/plot_fir_model.rst", "auto_examples/04_glm_first_level/plot_first_level_details.rst", "auto_examples/04_glm_first_level/plot_hrf.rst", "auto_examples/04_glm_first_level/plot_localizer_surface_analysis.rst", "auto_examples/04_glm_first_level/plot_predictions_residuals.rst", "auto_examples/04_glm_first_level/plot_spm_multimodal_faces.rst", "auto_examples/04_glm_first_level/plot_two_runs_model.rst", "auto_examples/04_glm_first_level/plot_write_events_file.rst", "auto_examples/04_glm_first_level/sg_execution_times.rst", "auto_examples/05_glm_second_level/index.rst", "auto_examples/05_glm_second_level/plot_oasis.rst", "auto_examples/05_glm_second_level/plot_proportion_activated_voxels.rst", "auto_examples/05_glm_second_level/plot_second_level_association_test.rst", "auto_examples/05_glm_second_level/plot_second_level_design_matrix.rst", "auto_examples/05_glm_second_level/plot_second_level_one_sample_test.rst", "auto_examples/05_glm_second_level/plot_second_level_two_sample_test.rst", "auto_examples/05_glm_second_level/plot_thresholding.rst", "auto_examples/05_glm_second_level/sg_execution_times.rst", "auto_examples/06_manipulating_images/index.rst", "auto_examples/06_manipulating_images/plot_affine_transformation.rst", "auto_examples/06_manipulating_images/plot_compare_mean_image.rst", "auto_examples/06_manipulating_images/plot_extract_regions_labels_image.rst", "auto_examples/06_manipulating_images/plot_extract_rois_smith_atlas.rst", "auto_examples/06_manipulating_images/plot_extract_rois_statistical_maps.rst", "auto_examples/06_manipulating_images/plot_mask_computation.rst", "auto_examples/06_manipulating_images/plot_negate_image.rst", "auto_examples/06_manipulating_images/plot_nifti_labels_simple.rst", "auto_examples/06_manipulating_images/plot_nifti_simple.rst", "auto_examples/06_manipulating_images/plot_resample_to_template.rst", "auto_examples/06_manipulating_images/plot_roi_extraction.rst", "auto_examples/06_manipulating_images/plot_smooth_mean_image.rst", "auto_examples/06_manipulating_images/plot_threshold_image.rst", "auto_examples/06_manipulating_images/sg_execution_times.rst", "auto_examples/07_advanced/index.rst", "auto_examples/07_advanced/plot_advanced_decoding_scikit.rst", "auto_examples/07_advanced/plot_age_group_prediction_cross_val.rst", "auto_examples/07_advanced/plot_beta_series.rst", "auto_examples/07_advanced/plot_bids_analysis.rst", "auto_examples/07_advanced/plot_copy_headers_math_img.rst", "auto_examples/07_advanced/plot_haxby_mass_univariate.rst", "auto_examples/07_advanced/plot_ica_neurovault.rst", "auto_examples/07_advanced/plot_ica_resting_state.rst", "auto_examples/07_advanced/plot_localizer_mass_univariate_methods.rst", "auto_examples/07_advanced/plot_localizer_simple_analysis.rst", "auto_examples/07_advanced/plot_mask_large_fmri.rst", "auto_examples/07_advanced/plot_neurovault_meta_analysis.rst", "auto_examples/07_advanced/plot_surface_bids_analysis.rst", "auto_examples/07_advanced/plot_surface_image_and_maskers.rst", "auto_examples/07_advanced/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/sg_execution_times.rst", "bibliography.rst", "building_blocks/index.rst", "building_blocks/manual_pipeline.rst", "building_blocks/neurovault.rst", "changes/0.1.0.rst", "changes/0.1.1.rst", "changes/0.1.2.rst", "changes/0.1.3.rst", "changes/0.1.4.rst", "changes/0.10.0.rst", "changes/0.10.1.rst", "changes/0.10.2.rst", "changes/0.10.3.rst", "changes/0.10.4.rst", "changes/0.11.0.rst", "changes/0.11.1.rst", "changes/0.12.0.rst", "changes/0.12.1.rst", "changes/0.2.0.rst", "changes/0.2.1.rst", "changes/0.2.2.rst", "changes/0.2.3.rst", "changes/0.2.4.rst", "changes/0.2.5.rst", "changes/0.2.6.rst", "changes/0.3.0.rst", "changes/0.3.1.rst", "changes/0.4.0.rst", "changes/0.4.1.rst", "changes/0.4.2.rst", "changes/0.5.0.rst", "changes/0.5.1.rst", "changes/0.5.2.rst", "changes/0.6.0.rst", "changes/0.6.1.rst", "changes/0.6.2.rst", "changes/0.7.0.rst", "changes/0.7.1.rst", "changes/0.8.0.rst", "changes/0.8.1.rst", "changes/0.9.0.rst", "changes/0.9.1.rst", "changes/0.9.2.rst", "changes/latest.rst", "changes/names.rst", "changes/whats_new.rst", "ci.rst", "connectivity/connectome_extraction.rst", "connectivity/functional_connectomes.rst", "connectivity/index.rst", "connectivity/parcellating.rst", "connectivity/region_extraction.rst", "connectivity/resting_state_networks.rst", "decoding/decoding_intro.rst", "decoding/estimator_choice.rst", "decoding/frem.rst", "decoding/going_further.rst", "decoding/index.rst", "decoding/searchlight.rst", "decoding/space_net.rst", "developers/group_sparse_covariance.rst", "development.rst", "glm/first_level_model.rst", "glm/glm_intro.rst", "glm/index.rst", "glm/meaning_difference.rst", "glm/second_level_model.rst", "glossary.rst", "index.rst", "introduction.rst", "maintenance.rst", "manipulating_images/index.rst", "manipulating_images/input_output.rst", "manipulating_images/manipulating_images.rst", "manipulating_images/masker_objects.rst", "modules/connectome.rst", "modules/datasets.rst", "modules/decoding.rst", "modules/decomposition.rst", "modules/description/ABIDE_pcp.rst", "modules/description/Megatrawls.rst", "modules/description/aal.rst", "modules/description/adhd.rst", "modules/description/allen_rsn_2011.rst", "modules/description/basc_multiscale_2015.rst", "modules/description/bids_langloc.rst", "modules/description/brainomics_localizer.rst", "modules/description/craddock_2012.rst", "modules/description/destrieux_surface.rst", "modules/description/development_fmri.rst", "modules/description/difumo_atlases.rst", "modules/description/dosenbach_2010.rst", "modules/description/fiac.rst", "modules/description/fsaverage.rst", "modules/description/fsaverage3.rst", "modules/description/fsaverage4.rst", "modules/description/fsaverage5.rst", "modules/description/fsaverage6.rst", "modules/description/fsaverage_content.rst", "modules/description/harvard_oxford.rst", "modules/description/haxby2001.rst", "modules/description/icbm152_2009.rst", "modules/description/juelich.rst", "modules/description/language_localizer_demo.rst", "modules/description/localizer_first_level.rst", "modules/description/mixed_gambles.rst", "modules/description/miyawaki2008.rst", "modules/description/msdl_atlas.rst", "modules/description/neurovault.rst", "modules/description/nki_enhanced_surface.rst", "modules/description/oasis1.rst", "modules/description/pauli_2017.rst", "modules/description/power_2011.rst", "modules/description/schaefer_2018.rst", "modules/description/seitzman_2018.rst", "modules/description/smith_2009.rst", "modules/description/spm_auditory.rst", "modules/description/spm_multimodal.rst", "modules/description/talairach_atlas.rst", "modules/description/yeo_2011.rst", "modules/deterministic_atlases.md", "modules/generated/nilearn.connectome.ConnectivityMeasure.rst", "modules/generated/nilearn.connectome.GroupSparseCovariance.rst", "modules/generated/nilearn.connectome.GroupSparseCovarianceCV.rst", "modules/generated/nilearn.connectome.cov_to_corr.rst", "modules/generated/nilearn.connectome.group_sparse_covariance.rst", "modules/generated/nilearn.connectome.prec_to_partial.rst", "modules/generated/nilearn.connectome.sym_matrix_to_vec.rst", "modules/generated/nilearn.connectome.vec_to_sym_matrix.rst", "modules/generated/nilearn.datasets.fetch_abide_pcp.rst", "modules/generated/nilearn.datasets.fetch_adhd.rst", "modules/generated/nilearn.datasets.fetch_atlas_aal.rst", "modules/generated/nilearn.datasets.fetch_atlas_allen_2011.rst", "modules/generated/nilearn.datasets.fetch_atlas_basc_multiscale_2015.rst", "modules/generated/nilearn.datasets.fetch_atlas_craddock_2012.rst", "modules/generated/nilearn.datasets.fetch_atlas_destrieux_2009.rst", "modules/generated/nilearn.datasets.fetch_atlas_difumo.rst", "modules/generated/nilearn.datasets.fetch_atlas_harvard_oxford.rst", "modules/generated/nilearn.datasets.fetch_atlas_juelich.rst", "modules/generated/nilearn.datasets.fetch_atlas_msdl.rst", "modules/generated/nilearn.datasets.fetch_atlas_pauli_2017.rst", "modules/generated/nilearn.datasets.fetch_atlas_schaefer_2018.rst", "modules/generated/nilearn.datasets.fetch_atlas_smith_2009.rst", "modules/generated/nilearn.datasets.fetch_atlas_surf_destrieux.rst", "modules/generated/nilearn.datasets.fetch_atlas_talairach.rst", "modules/generated/nilearn.datasets.fetch_atlas_yeo_2011.rst", "modules/generated/nilearn.datasets.fetch_bids_langloc_dataset.rst", "modules/generated/nilearn.datasets.fetch_coords_dosenbach_2010.rst", "modules/generated/nilearn.datasets.fetch_coords_power_2011.rst", "modules/generated/nilearn.datasets.fetch_coords_seitzman_2018.rst", "modules/generated/nilearn.datasets.fetch_development_fmri.rst", "modules/generated/nilearn.datasets.fetch_ds000030_urls.rst", "modules/generated/nilearn.datasets.fetch_fiac_first_level.rst", "modules/generated/nilearn.datasets.fetch_haxby.rst", "modules/generated/nilearn.datasets.fetch_icbm152_2009.rst", "modules/generated/nilearn.datasets.fetch_icbm152_brain_gm_mask.rst", "modules/generated/nilearn.datasets.fetch_language_localizer_demo_dataset.rst", "modules/generated/nilearn.datasets.fetch_localizer_button_task.rst", "modules/generated/nilearn.datasets.fetch_localizer_calculation_task.rst", "modules/generated/nilearn.datasets.fetch_localizer_contrasts.rst", "modules/generated/nilearn.datasets.fetch_localizer_first_level.rst", "modules/generated/nilearn.datasets.fetch_megatrawls_netmats.rst", "modules/generated/nilearn.datasets.fetch_mixed_gambles.rst", "modules/generated/nilearn.datasets.fetch_miyawaki2008.rst", "modules/generated/nilearn.datasets.fetch_neurovault.rst", "modules/generated/nilearn.datasets.fetch_neurovault_auditory_computation_task.rst", "modules/generated/nilearn.datasets.fetch_neurovault_ids.rst", "modules/generated/nilearn.datasets.fetch_neurovault_motor_task.rst", "modules/generated/nilearn.datasets.fetch_oasis_vbm.rst", "modules/generated/nilearn.datasets.fetch_openneuro_dataset.rst", "modules/generated/nilearn.datasets.fetch_spm_auditory.rst", "modules/generated/nilearn.datasets.fetch_spm_multimodal_fmri.rst", "modules/generated/nilearn.datasets.fetch_surf_fsaverage.rst", "modules/generated/nilearn.datasets.fetch_surf_nki_enhanced.rst", "modules/generated/nilearn.datasets.get_data_dirs.rst", "modules/generated/nilearn.datasets.load_fsaverage.rst", "modules/generated/nilearn.datasets.load_fsaverage_data.rst", "modules/generated/nilearn.datasets.load_mni152_brain_mask.rst", "modules/generated/nilearn.datasets.load_mni152_gm_mask.rst", "modules/generated/nilearn.datasets.load_mni152_gm_template.rst", "modules/generated/nilearn.datasets.load_mni152_template.rst", "modules/generated/nilearn.datasets.load_mni152_wm_mask.rst", "modules/generated/nilearn.datasets.load_mni152_wm_template.rst", "modules/generated/nilearn.datasets.load_nki.rst", "modules/generated/nilearn.datasets.load_sample_motor_activation_image.rst", "modules/generated/nilearn.datasets.patch_openneuro_dataset.rst", "modules/generated/nilearn.datasets.select_from_index.rst", "modules/generated/nilearn.decoding.Decoder.rst", "modules/generated/nilearn.decoding.DecoderRegressor.rst", "modules/generated/nilearn.decoding.FREMClassifier.rst", "modules/generated/nilearn.decoding.FREMRegressor.rst", "modules/generated/nilearn.decoding.SearchLight.rst", "modules/generated/nilearn.decoding.SpaceNetClassifier.rst", "modules/generated/nilearn.decoding.SpaceNetRegressor.rst", "modules/generated/nilearn.decomposition.CanICA.rst", "modules/generated/nilearn.decomposition.DictLearning.rst", "modules/generated/nilearn.glm.ARModel.rst", "modules/generated/nilearn.glm.Contrast.rst", "modules/generated/nilearn.glm.FContrastResults.rst", "modules/generated/nilearn.glm.LikelihoodModelResults.rst", "modules/generated/nilearn.glm.OLSModel.rst", "modules/generated/nilearn.glm.RegressionResults.rst", "modules/generated/nilearn.glm.SimpleRegressionResults.rst", "modules/generated/nilearn.glm.TContrastResults.rst", "modules/generated/nilearn.glm.cluster_level_inference.rst", "modules/generated/nilearn.glm.compute_contrast.rst", "modules/generated/nilearn.glm.compute_fixed_effects.rst", "modules/generated/nilearn.glm.expression_to_contrast_vector.rst", "modules/generated/nilearn.glm.fdr_threshold.rst", "modules/generated/nilearn.glm.first_level.FirstLevelModel.rst", "modules/generated/nilearn.glm.first_level.check_design_matrix.rst", "modules/generated/nilearn.glm.first_level.compute_regressor.rst", "modules/generated/nilearn.glm.first_level.first_level_from_bids.rst", "modules/generated/nilearn.glm.first_level.glover_dispersion_derivative.rst", "modules/generated/nilearn.glm.first_level.glover_hrf.rst", "modules/generated/nilearn.glm.first_level.glover_time_derivative.rst", "modules/generated/nilearn.glm.first_level.make_first_level_design_matrix.rst", "modules/generated/nilearn.glm.first_level.mean_scaling.rst", "modules/generated/nilearn.glm.first_level.run_glm.rst", "modules/generated/nilearn.glm.first_level.spm_dispersion_derivative.rst", "modules/generated/nilearn.glm.first_level.spm_hrf.rst", "modules/generated/nilearn.glm.first_level.spm_time_derivative.rst", "modules/generated/nilearn.glm.second_level.SecondLevelModel.rst", "modules/generated/nilearn.glm.second_level.make_second_level_design_matrix.rst", "modules/generated/nilearn.glm.second_level.non_parametric_inference.rst", "modules/generated/nilearn.glm.threshold_stats_img.rst", "modules/generated/nilearn.image.binarize_img.rst", "modules/generated/nilearn.image.clean_img.rst", "modules/generated/nilearn.image.concat_imgs.rst", "modules/generated/nilearn.image.coord_transform.rst", "modules/generated/nilearn.image.copy_img.rst", "modules/generated/nilearn.image.crop_img.rst", "modules/generated/nilearn.image.get_data.rst", "modules/generated/nilearn.image.high_variance_confounds.rst", "modules/generated/nilearn.image.index_img.rst", "modules/generated/nilearn.image.iter_img.rst", "modules/generated/nilearn.image.largest_connected_component_img.rst", "modules/generated/nilearn.image.load_img.rst", "modules/generated/nilearn.image.math_img.rst", "modules/generated/nilearn.image.mean_img.rst", "modules/generated/nilearn.image.new_img_like.rst", "modules/generated/nilearn.image.reorder_img.rst", "modules/generated/nilearn.image.resample_img.rst", "modules/generated/nilearn.image.resample_to_img.rst", "modules/generated/nilearn.image.smooth_img.rst", "modules/generated/nilearn.image.swap_img_hemispheres.rst", "modules/generated/nilearn.image.threshold_img.rst", "modules/generated/nilearn.interfaces.bids.get_bids_files.rst", "modules/generated/nilearn.interfaces.bids.parse_bids_filename.rst", "modules/generated/nilearn.interfaces.bids.save_glm_to_bids.rst", "modules/generated/nilearn.interfaces.fmriprep.load_confounds.rst", "modules/generated/nilearn.interfaces.fmriprep.load_confounds_strategy.rst", "modules/generated/nilearn.interfaces.fsl.get_design_from_fslmat.rst", "modules/generated/nilearn.maskers.BaseMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiLabelsMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiMapsMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiMasker.rst", "modules/generated/nilearn.maskers.NiftiLabelsMasker.rst", "modules/generated/nilearn.maskers.NiftiMapsMasker.rst", "modules/generated/nilearn.maskers.NiftiMasker.rst", "modules/generated/nilearn.maskers.NiftiSpheresMasker.rst", "modules/generated/nilearn.maskers.SurfaceLabelsMasker.rst", "modules/generated/nilearn.maskers.SurfaceMapsMasker.rst", "modules/generated/nilearn.maskers.SurfaceMasker.rst", "modules/generated/nilearn.masking.apply_mask.rst", "modules/generated/nilearn.masking.compute_background_mask.rst", "modules/generated/nilearn.masking.compute_brain_mask.rst", "modules/generated/nilearn.masking.compute_epi_mask.rst", "modules/generated/nilearn.masking.compute_multi_background_mask.rst", "modules/generated/nilearn.masking.compute_multi_brain_mask.rst", "modules/generated/nilearn.masking.compute_multi_epi_mask.rst", "modules/generated/nilearn.masking.intersect_masks.rst", "modules/generated/nilearn.masking.unmask.rst", "modules/generated/nilearn.mass_univariate.permuted_ols.rst", "modules/generated/nilearn.plotting.displays.BaseAxes.rst", "modules/generated/nilearn.plotting.displays.BaseSlicer.rst", "modules/generated/nilearn.plotting.displays.CutAxes.rst", "modules/generated/nilearn.plotting.displays.GlassBrainAxes.rst", "modules/generated/nilearn.plotting.displays.LProjector.rst", "modules/generated/nilearn.plotting.displays.LRProjector.rst", "modules/generated/nilearn.plotting.displays.LYRProjector.rst", "modules/generated/nilearn.plotting.displays.LYRZProjector.rst", "modules/generated/nilearn.plotting.displays.LZRProjector.rst", "modules/generated/nilearn.plotting.displays.LZRYProjector.rst", "modules/generated/nilearn.plotting.displays.MosaicSlicer.rst", "modules/generated/nilearn.plotting.displays.OrthoProjector.rst", "modules/generated/nilearn.plotting.displays.OrthoSlicer.rst", "modules/generated/nilearn.plotting.displays.PlotlySurfaceFigure.rst", "modules/generated/nilearn.plotting.displays.RProjector.rst", "modules/generated/nilearn.plotting.displays.TiledSlicer.rst", "modules/generated/nilearn.plotting.displays.XProjector.rst", "modules/generated/nilearn.plotting.displays.XSlicer.rst", "modules/generated/nilearn.plotting.displays.XZProjector.rst", "modules/generated/nilearn.plotting.displays.XZSlicer.rst", "modules/generated/nilearn.plotting.displays.YProjector.rst", "modules/generated/nilearn.plotting.displays.YSlicer.rst", "modules/generated/nilearn.plotting.displays.YXProjector.rst", "modules/generated/nilearn.plotting.displays.YXSlicer.rst", "modules/generated/nilearn.plotting.displays.YZProjector.rst", "modules/generated/nilearn.plotting.displays.YZSlicer.rst", "modules/generated/nilearn.plotting.displays.ZProjector.rst", "modules/generated/nilearn.plotting.displays.ZSlicer.rst", "modules/generated/nilearn.plotting.displays.get_projector.rst", "modules/generated/nilearn.plotting.displays.get_slicer.rst", "modules/generated/nilearn.plotting.find_cut_slices.rst", "modules/generated/nilearn.plotting.find_parcellation_cut_coords.rst", "modules/generated/nilearn.plotting.find_probabilistic_atlas_cut_coords.rst", "modules/generated/nilearn.plotting.find_xyz_cut_coords.rst", "modules/generated/nilearn.plotting.img_comparison.plot_bland_altman.rst", "modules/generated/nilearn.plotting.img_comparison.plot_img_comparison.rst", "modules/generated/nilearn.plotting.plot_anat.rst", "modules/generated/nilearn.plotting.plot_carpet.rst", "modules/generated/nilearn.plotting.plot_connectome.rst", "modules/generated/nilearn.plotting.plot_contrast_matrix.rst", "modules/generated/nilearn.plotting.plot_design_matrix.rst", "modules/generated/nilearn.plotting.plot_design_matrix_correlation.rst", "modules/generated/nilearn.plotting.plot_epi.rst", "modules/generated/nilearn.plotting.plot_event.rst", "modules/generated/nilearn.plotting.plot_glass_brain.rst", "modules/generated/nilearn.plotting.plot_img.rst", "modules/generated/nilearn.plotting.plot_img_on_surf.rst", "modules/generated/nilearn.plotting.plot_markers.rst", "modules/generated/nilearn.plotting.plot_matrix.rst", "modules/generated/nilearn.plotting.plot_prob_atlas.rst", "modules/generated/nilearn.plotting.plot_roi.rst", "modules/generated/nilearn.plotting.plot_stat_map.rst", "modules/generated/nilearn.plotting.plot_surf.rst", "modules/generated/nilearn.plotting.plot_surf_contours.rst", "modules/generated/nilearn.plotting.plot_surf_roi.rst", "modules/generated/nilearn.plotting.plot_surf_stat_map.rst", "modules/generated/nilearn.plotting.show.rst", "modules/generated/nilearn.plotting.view_connectome.rst", "modules/generated/nilearn.plotting.view_img.rst", "modules/generated/nilearn.plotting.view_img_on_surf.rst", "modules/generated/nilearn.plotting.view_markers.rst", "modules/generated/nilearn.plotting.view_surf.rst", "modules/generated/nilearn.regions.HierarchicalKMeans.rst", "modules/generated/nilearn.regions.Parcellations.rst", "modules/generated/nilearn.regions.ReNA.rst", "modules/generated/nilearn.regions.RegionExtractor.rst", "modules/generated/nilearn.regions.connected_label_regions.rst", "modules/generated/nilearn.regions.connected_regions.rst", "modules/generated/nilearn.regions.img_to_signals_labels.rst", "modules/generated/nilearn.regions.img_to_signals_maps.rst", "modules/generated/nilearn.regions.recursive_neighbor_agglomeration.rst", "modules/generated/nilearn.regions.signals_to_img_labels.rst", "modules/generated/nilearn.regions.signals_to_img_maps.rst", "modules/generated/nilearn.reporting.HTMLReport.rst", "modules/generated/nilearn.reporting.get_clusters_table.rst", "modules/generated/nilearn.reporting.make_glm_report.rst", "modules/generated/nilearn.signal.butterworth.rst", "modules/generated/nilearn.signal.clean.rst", "modules/generated/nilearn.signal.high_variance_confounds.rst", "modules/generated/nilearn.surface.FileMesh.rst", "modules/generated/nilearn.surface.InMemoryMesh.rst", "modules/generated/nilearn.surface.PolyData.rst", "modules/generated/nilearn.surface.PolyMesh.rst", "modules/generated/nilearn.surface.SurfaceImage.rst", "modules/generated/nilearn.surface.SurfaceMesh.rst", "modules/generated/nilearn.surface.load_surf_data.rst", "modules/generated/nilearn.surface.load_surf_mesh.rst", "modules/generated/nilearn.surface.vol_to_surf.rst", "modules/generated_reports/glm_reports_examples.rst", "modules/generated_reports/masker_reports_examples.rst", "modules/glm.rst", "modules/image.rst", "modules/index.rst", "modules/interfaces.rst", "modules/maskers.rst", "modules/masking.rst", "modules/mass_univariate.rst", "modules/plotting.rst", "modules/probabilistic_atlases.md", "modules/regions.rst", "modules/reporting.rst", "modules/signal.rst", "modules/surface.rst", "plotting/index.rst", "quickstart.md", "sg_execution_times.rst", "user_guide.rst", "versions.rst"], "indexentries": {"__init__() (nilearn.connectome.connectivitymeasure method)": [[239, "nilearn.connectome.ConnectivityMeasure.__init__", false]], "__init__() (nilearn.connectome.groupsparsecovariance method)": [[240, "nilearn.connectome.GroupSparseCovariance.__init__", false]], "__init__() (nilearn.connectome.groupsparsecovariancecv method)": [[241, "nilearn.connectome.GroupSparseCovarianceCV.__init__", false]], "__init__() (nilearn.decoding.decoder method)": [[305, "nilearn.decoding.Decoder.__init__", false]], "__init__() (nilearn.decoding.decoderregressor method)": [[306, "nilearn.decoding.DecoderRegressor.__init__", false]], "__init__() (nilearn.decoding.fremclassifier method)": [[307, "nilearn.decoding.FREMClassifier.__init__", false]], "__init__() (nilearn.decoding.fremregressor method)": [[308, "nilearn.decoding.FREMRegressor.__init__", false]], "__init__() (nilearn.decoding.searchlight method)": [[309, "nilearn.decoding.SearchLight.__init__", false]], "__init__() (nilearn.decoding.spacenetclassifier method)": [[310, "nilearn.decoding.SpaceNetClassifier.__init__", false]], "__init__() (nilearn.decoding.spacenetregressor method)": [[311, "nilearn.decoding.SpaceNetRegressor.__init__", false]], "__init__() (nilearn.decomposition.canica method)": [[312, "nilearn.decomposition.CanICA.__init__", false]], "__init__() (nilearn.decomposition.dictlearning method)": [[313, "nilearn.decomposition.DictLearning.__init__", false]], "__init__() (nilearn.glm.armodel method)": [[314, "nilearn.glm.ARModel.__init__", false]], "__init__() (nilearn.glm.contrast method)": [[315, "nilearn.glm.Contrast.__init__", false]], "__init__() (nilearn.glm.fcontrastresults method)": [[316, "nilearn.glm.FContrastResults.__init__", false]], "__init__() (nilearn.glm.first_level.firstlevelmodel method)": [[327, "nilearn.glm.first_level.FirstLevelModel.__init__", false]], "__init__() (nilearn.glm.likelihoodmodelresults method)": [[317, "nilearn.glm.LikelihoodModelResults.__init__", false]], "__init__() (nilearn.glm.olsmodel method)": [[318, "nilearn.glm.OLSModel.__init__", false]], "__init__() (nilearn.glm.regressionresults method)": [[319, "nilearn.glm.RegressionResults.__init__", false]], "__init__() (nilearn.glm.second_level.secondlevelmodel method)": [[340, "nilearn.glm.second_level.SecondLevelModel.__init__", false]], "__init__() (nilearn.glm.simpleregressionresults method)": [[320, "nilearn.glm.SimpleRegressionResults.__init__", false]], "__init__() (nilearn.glm.tcontrastresults method)": [[321, "nilearn.glm.TContrastResults.__init__", false]], "__init__() (nilearn.maskers.multiniftilabelsmasker method)": [[372, "nilearn.maskers.MultiNiftiLabelsMasker.__init__", false]], "__init__() (nilearn.maskers.multiniftimapsmasker method)": [[373, "nilearn.maskers.MultiNiftiMapsMasker.__init__", false]], "__init__() (nilearn.maskers.multiniftimasker method)": [[374, "nilearn.maskers.MultiNiftiMasker.__init__", false]], "__init__() (nilearn.maskers.niftilabelsmasker method)": [[375, "nilearn.maskers.NiftiLabelsMasker.__init__", false]], "__init__() (nilearn.maskers.niftimapsmasker method)": [[376, "nilearn.maskers.NiftiMapsMasker.__init__", false]], "__init__() (nilearn.maskers.niftimasker method)": [[377, "nilearn.maskers.NiftiMasker.__init__", false]], "__init__() (nilearn.maskers.niftispheresmasker method)": [[378, "nilearn.maskers.NiftiSpheresMasker.__init__", false]], "__init__() (nilearn.maskers.surfacelabelsmasker method)": [[379, "nilearn.maskers.SurfaceLabelsMasker.__init__", false]], "__init__() (nilearn.maskers.surfacemapsmasker method)": [[380, "nilearn.maskers.SurfaceMapsMasker.__init__", false]], "__init__() (nilearn.maskers.surfacemasker method)": [[381, "nilearn.maskers.SurfaceMasker.__init__", false]], "__init__() (nilearn.plotting.displays.baseaxes method)": [[392, "nilearn.plotting.displays.BaseAxes.__init__", false]], "__init__() (nilearn.plotting.displays.baseslicer method)": [[393, "nilearn.plotting.displays.BaseSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.cutaxes method)": [[394, "nilearn.plotting.displays.CutAxes.__init__", false]], "__init__() (nilearn.plotting.displays.glassbrainaxes method)": [[395, "nilearn.plotting.displays.GlassBrainAxes.__init__", false]], "__init__() (nilearn.plotting.displays.lprojector method)": [[396, "nilearn.plotting.displays.LProjector.__init__", false]], "__init__() (nilearn.plotting.displays.lrprojector method)": [[397, "nilearn.plotting.displays.LRProjector.__init__", false]], "__init__() (nilearn.plotting.displays.lyrprojector method)": [[398, "nilearn.plotting.displays.LYRProjector.__init__", false]], "__init__() (nilearn.plotting.displays.lyrzprojector method)": [[399, "nilearn.plotting.displays.LYRZProjector.__init__", false]], "__init__() (nilearn.plotting.displays.lzrprojector method)": [[400, "nilearn.plotting.displays.LZRProjector.__init__", false]], "__init__() (nilearn.plotting.displays.lzryprojector method)": [[401, "nilearn.plotting.displays.LZRYProjector.__init__", false]], "__init__() (nilearn.plotting.displays.mosaicslicer method)": [[402, "nilearn.plotting.displays.MosaicSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.orthoprojector method)": [[403, "nilearn.plotting.displays.OrthoProjector.__init__", false]], "__init__() (nilearn.plotting.displays.orthoslicer method)": [[404, "nilearn.plotting.displays.OrthoSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.plotlysurfacefigure method)": [[405, "nilearn.plotting.displays.PlotlySurfaceFigure.__init__", false]], "__init__() (nilearn.plotting.displays.rprojector method)": [[406, "nilearn.plotting.displays.RProjector.__init__", false]], "__init__() (nilearn.plotting.displays.tiledslicer method)": [[407, "nilearn.plotting.displays.TiledSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.xprojector method)": [[408, "nilearn.plotting.displays.XProjector.__init__", false]], "__init__() (nilearn.plotting.displays.xslicer method)": [[409, "nilearn.plotting.displays.XSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.xzprojector method)": [[410, "nilearn.plotting.displays.XZProjector.__init__", false]], "__init__() (nilearn.plotting.displays.xzslicer method)": [[411, "nilearn.plotting.displays.XZSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.yprojector method)": [[412, "nilearn.plotting.displays.YProjector.__init__", false]], "__init__() (nilearn.plotting.displays.yslicer method)": [[413, "nilearn.plotting.displays.YSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.yxprojector method)": [[414, "nilearn.plotting.displays.YXProjector.__init__", false]], "__init__() (nilearn.plotting.displays.yxslicer method)": [[415, "nilearn.plotting.displays.YXSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.yzprojector method)": [[416, "nilearn.plotting.displays.YZProjector.__init__", false]], "__init__() (nilearn.plotting.displays.yzslicer method)": [[417, "nilearn.plotting.displays.YZSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.zprojector method)": [[418, "nilearn.plotting.displays.ZProjector.__init__", false]], "__init__() (nilearn.plotting.displays.zslicer method)": [[419, "nilearn.plotting.displays.ZSlicer.__init__", false]], "__init__() (nilearn.regions.hierarchicalkmeans method)": [[454, "nilearn.regions.HierarchicalKMeans.__init__", false]], "__init__() (nilearn.regions.parcellations method)": [[455, "nilearn.regions.Parcellations.__init__", false]], "__init__() (nilearn.regions.regionextractor method)": [[457, "nilearn.regions.RegionExtractor.__init__", false]], "__init__() (nilearn.regions.rena method)": [[456, "nilearn.regions.ReNA.__init__", false]], "__init__() (nilearn.reporting.htmlreport method)": [[465, "nilearn.reporting.HTMLReport.__init__", false]], "__init__() (nilearn.surface.filemesh method)": [[471, "nilearn.surface.FileMesh.__init__", false]], "__init__() (nilearn.surface.inmemorymesh method)": [[472, "nilearn.surface.InMemoryMesh.__init__", false]], "__init__() (nilearn.surface.polydata method)": [[473, "nilearn.surface.PolyData.__init__", false]], "__init__() (nilearn.surface.polymesh method)": [[474, "nilearn.surface.PolyMesh.__init__", false]], "__init__() (nilearn.surface.surfaceimage method)": [[475, "nilearn.surface.SurfaceImage.__init__", false]], "add_contours() (nilearn.plotting.displays.baseslicer method)": [[393, "nilearn.plotting.displays.BaseSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.lprojector method)": [[396, "nilearn.plotting.displays.LProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.lrprojector method)": [[397, "nilearn.plotting.displays.LRProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.lyrprojector method)": [[398, "nilearn.plotting.displays.LYRProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.lyrzprojector method)": [[399, "nilearn.plotting.displays.LYRZProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.lzrprojector method)": [[400, "nilearn.plotting.displays.LZRProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.lzryprojector method)": [[401, "nilearn.plotting.displays.LZRYProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.mosaicslicer method)": [[402, "nilearn.plotting.displays.MosaicSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.orthoprojector method)": [[403, "nilearn.plotting.displays.OrthoProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.orthoslicer method)": [[404, "nilearn.plotting.displays.OrthoSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.plotlysurfacefigure method)": [[405, "nilearn.plotting.displays.PlotlySurfaceFigure.add_contours", false]], "add_contours() (nilearn.plotting.displays.rprojector method)": [[406, "nilearn.plotting.displays.RProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.tiledslicer method)": [[407, "nilearn.plotting.displays.TiledSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.xprojector method)": [[408, "nilearn.plotting.displays.XProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.xslicer method)": [[409, "nilearn.plotting.displays.XSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.xzprojector method)": [[410, "nilearn.plotting.displays.XZProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.xzslicer method)": [[411, "nilearn.plotting.displays.XZSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.yprojector method)": [[412, "nilearn.plotting.displays.YProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.yslicer method)": [[413, "nilearn.plotting.displays.YSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.yxprojector method)": [[414, "nilearn.plotting.displays.YXProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.yxslicer method)": [[415, "nilearn.plotting.displays.YXSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.yzprojector method)": [[416, "nilearn.plotting.displays.YZProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.yzslicer method)": [[417, "nilearn.plotting.displays.YZSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.zprojector method)": [[418, "nilearn.plotting.displays.ZProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.zslicer method)": [[419, "nilearn.plotting.displays.ZSlicer.add_contours", false]], "add_edges() (nilearn.plotting.displays.baseslicer method)": [[393, "nilearn.plotting.displays.BaseSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.lprojector method)": [[396, "nilearn.plotting.displays.LProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.lrprojector method)": [[397, "nilearn.plotting.displays.LRProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.lyrprojector method)": [[398, "nilearn.plotting.displays.LYRProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.lyrzprojector method)": [[399, "nilearn.plotting.displays.LYRZProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.lzrprojector method)": [[400, "nilearn.plotting.displays.LZRProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.lzryprojector method)": [[401, "nilearn.plotting.displays.LZRYProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.mosaicslicer method)": [[402, "nilearn.plotting.displays.MosaicSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.orthoprojector method)": [[403, "nilearn.plotting.displays.OrthoProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.orthoslicer method)": [[404, "nilearn.plotting.displays.OrthoSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.rprojector method)": [[406, "nilearn.plotting.displays.RProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.tiledslicer method)": [[407, "nilearn.plotting.displays.TiledSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.xprojector method)": [[408, "nilearn.plotting.displays.XProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.xslicer method)": [[409, "nilearn.plotting.displays.XSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.xzprojector method)": [[410, "nilearn.plotting.displays.XZProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.xzslicer method)": [[411, "nilearn.plotting.displays.XZSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.yprojector method)": [[412, "nilearn.plotting.displays.YProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.yslicer method)": [[413, "nilearn.plotting.displays.YSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.yxprojector method)": [[414, "nilearn.plotting.displays.YXProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.yxslicer method)": [[415, "nilearn.plotting.displays.YXSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.yzprojector method)": [[416, "nilearn.plotting.displays.YZProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.yzslicer method)": [[417, "nilearn.plotting.displays.YZSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.zprojector method)": [[418, "nilearn.plotting.displays.ZProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.zslicer method)": [[419, "nilearn.plotting.displays.ZSlicer.add_edges", false]], "add_graph() (nilearn.plotting.displays.lprojector method)": [[396, "nilearn.plotting.displays.LProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.lrprojector method)": [[397, "nilearn.plotting.displays.LRProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.lyrprojector method)": [[398, "nilearn.plotting.displays.LYRProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.lyrzprojector method)": [[399, "nilearn.plotting.displays.LYRZProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.lzrprojector method)": [[400, "nilearn.plotting.displays.LZRProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.lzryprojector method)": [[401, "nilearn.plotting.displays.LZRYProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.orthoprojector method)": [[403, "nilearn.plotting.displays.OrthoProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.rprojector method)": [[406, "nilearn.plotting.displays.RProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.xprojector method)": [[408, "nilearn.plotting.displays.XProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.xzprojector method)": [[410, "nilearn.plotting.displays.XZProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.yprojector method)": [[412, "nilearn.plotting.displays.YProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.yxprojector method)": [[414, "nilearn.plotting.displays.YXProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.yzprojector method)": [[416, "nilearn.plotting.displays.YZProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.zprojector method)": [[418, "nilearn.plotting.displays.ZProjector.add_graph", false]], "add_markers() (nilearn.plotting.displays.baseslicer method)": [[393, "nilearn.plotting.displays.BaseSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.lprojector method)": [[396, "nilearn.plotting.displays.LProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.lrprojector method)": [[397, "nilearn.plotting.displays.LRProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.lyrprojector method)": [[398, "nilearn.plotting.displays.LYRProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.lyrzprojector method)": [[399, "nilearn.plotting.displays.LYRZProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.lzrprojector method)": [[400, "nilearn.plotting.displays.LZRProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.lzryprojector method)": [[401, "nilearn.plotting.displays.LZRYProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.mosaicslicer method)": [[402, "nilearn.plotting.displays.MosaicSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.orthoprojector method)": [[403, "nilearn.plotting.displays.OrthoProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.orthoslicer method)": [[404, "nilearn.plotting.displays.OrthoSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.rprojector method)": [[406, "nilearn.plotting.displays.RProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.tiledslicer method)": [[407, "nilearn.plotting.displays.TiledSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.xprojector method)": [[408, "nilearn.plotting.displays.XProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.xslicer method)": [[409, "nilearn.plotting.displays.XSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.xzprojector method)": [[410, "nilearn.plotting.displays.XZProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.xzslicer method)": [[411, "nilearn.plotting.displays.XZSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.yprojector method)": [[412, "nilearn.plotting.displays.YProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.yslicer method)": [[413, "nilearn.plotting.displays.YSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.yxprojector method)": [[414, "nilearn.plotting.displays.YXProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.yxslicer method)": [[415, "nilearn.plotting.displays.YXSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.yzprojector method)": [[416, "nilearn.plotting.displays.YZProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.yzslicer method)": [[417, "nilearn.plotting.displays.YZSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.zprojector method)": [[418, "nilearn.plotting.displays.ZProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.zslicer method)": [[419, "nilearn.plotting.displays.ZSlicer.add_markers", false]], "add_object_bounds() (nilearn.plotting.displays.baseaxes method)": [[392, "nilearn.plotting.displays.BaseAxes.add_object_bounds", false]], "add_object_bounds() (nilearn.plotting.displays.cutaxes method)": [[394, "nilearn.plotting.displays.CutAxes.add_object_bounds", false]], "add_object_bounds() (nilearn.plotting.displays.glassbrainaxes method)": [[395, "nilearn.plotting.displays.GlassBrainAxes.add_object_bounds", false]], "add_overlay() (nilearn.plotting.displays.baseslicer method)": [[393, "nilearn.plotting.displays.BaseSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.lprojector method)": [[396, "nilearn.plotting.displays.LProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.lrprojector method)": [[397, "nilearn.plotting.displays.LRProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.lyrprojector method)": [[398, "nilearn.plotting.displays.LYRProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.lyrzprojector method)": [[399, "nilearn.plotting.displays.LYRZProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.lzrprojector method)": [[400, "nilearn.plotting.displays.LZRProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.lzryprojector method)": [[401, "nilearn.plotting.displays.LZRYProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.mosaicslicer method)": [[402, "nilearn.plotting.displays.MosaicSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.orthoprojector method)": [[403, "nilearn.plotting.displays.OrthoProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.orthoslicer method)": [[404, "nilearn.plotting.displays.OrthoSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.rprojector method)": [[406, "nilearn.plotting.displays.RProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.tiledslicer method)": [[407, "nilearn.plotting.displays.TiledSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.xprojector method)": [[408, "nilearn.plotting.displays.XProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.xslicer method)": [[409, "nilearn.plotting.displays.XSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.xzprojector method)": [[410, "nilearn.plotting.displays.XZProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.xzslicer method)": [[411, "nilearn.plotting.displays.XZSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.yprojector method)": [[412, "nilearn.plotting.displays.YProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.yslicer method)": [[413, "nilearn.plotting.displays.YSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.yxprojector method)": [[414, "nilearn.plotting.displays.YXProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.yxslicer method)": [[415, "nilearn.plotting.displays.YXSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.yzprojector method)": [[416, "nilearn.plotting.displays.YZProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.yzslicer method)": [[417, "nilearn.plotting.displays.YZSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.zprojector method)": [[418, "nilearn.plotting.displays.ZProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.zslicer method)": [[419, "nilearn.plotting.displays.ZSlicer.add_overlay", false]], "annotate() (nilearn.plotting.displays.baseslicer method)": [[393, "nilearn.plotting.displays.BaseSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.lprojector method)": [[396, "nilearn.plotting.displays.LProjector.annotate", false]], "annotate() (nilearn.plotting.displays.lrprojector method)": [[397, "nilearn.plotting.displays.LRProjector.annotate", false]], "annotate() (nilearn.plotting.displays.lyrprojector method)": [[398, "nilearn.plotting.displays.LYRProjector.annotate", false]], "annotate() (nilearn.plotting.displays.lyrzprojector method)": [[399, "nilearn.plotting.displays.LYRZProjector.annotate", false]], "annotate() (nilearn.plotting.displays.lzrprojector method)": [[400, "nilearn.plotting.displays.LZRProjector.annotate", false]], "annotate() (nilearn.plotting.displays.lzryprojector method)": [[401, "nilearn.plotting.displays.LZRYProjector.annotate", false]], "annotate() (nilearn.plotting.displays.mosaicslicer method)": [[402, "nilearn.plotting.displays.MosaicSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.orthoprojector method)": [[403, "nilearn.plotting.displays.OrthoProjector.annotate", false]], "annotate() (nilearn.plotting.displays.orthoslicer method)": [[404, "nilearn.plotting.displays.OrthoSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.rprojector method)": [[406, "nilearn.plotting.displays.RProjector.annotate", false]], "annotate() (nilearn.plotting.displays.tiledslicer method)": [[407, "nilearn.plotting.displays.TiledSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.xprojector method)": [[408, "nilearn.plotting.displays.XProjector.annotate", false]], "annotate() (nilearn.plotting.displays.xslicer method)": [[409, "nilearn.plotting.displays.XSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.xzprojector method)": [[410, "nilearn.plotting.displays.XZProjector.annotate", false]], "annotate() (nilearn.plotting.displays.xzslicer method)": [[411, "nilearn.plotting.displays.XZSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.yprojector method)": [[412, "nilearn.plotting.displays.YProjector.annotate", false]], "annotate() (nilearn.plotting.displays.yslicer method)": [[413, "nilearn.plotting.displays.YSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.yxprojector method)": [[414, "nilearn.plotting.displays.YXProjector.annotate", false]], "annotate() (nilearn.plotting.displays.yxslicer method)": [[415, "nilearn.plotting.displays.YXSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.yzprojector method)": [[416, "nilearn.plotting.displays.YZProjector.annotate", false]], "annotate() (nilearn.plotting.displays.yzslicer method)": [[417, "nilearn.plotting.displays.YZSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.zprojector method)": [[418, "nilearn.plotting.displays.ZProjector.annotate", false]], "annotate() (nilearn.plotting.displays.zslicer method)": [[419, "nilearn.plotting.displays.ZSlicer.annotate", false]], "anova": [[185, "term-ANOVA", true]], "apply_mask() (in module nilearn.masking)": [[382, "nilearn.masking.apply_mask", false]], "armodel (class in nilearn.glm)": [[314, "nilearn.glm.ARModel", false]], "auc": [[185, "term-AUC", true]], "baseaxes (class in nilearn.plotting.displays)": [[392, "nilearn.plotting.displays.BaseAxes", false]], "basemasker (class in nilearn.maskers)": [[371, "nilearn.maskers.BaseMasker", false]], "baseslicer (class in nilearn.plotting.displays)": [[393, "nilearn.plotting.displays.BaseSlicer", false]], "beta": [[185, "term-Beta", true]], "bids": [[185, "term-BIDS", true]], "binarize_img() (in module nilearn.image)": [[344, "nilearn.image.binarize_img", false]], "black_bg (nilearn.plotting.displays.baseslicer property)": [[393, "nilearn.plotting.displays.BaseSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.lprojector property)": [[396, "nilearn.plotting.displays.LProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.lrprojector property)": [[397, "nilearn.plotting.displays.LRProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.lyrprojector property)": [[398, "nilearn.plotting.displays.LYRProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.lyrzprojector property)": [[399, "nilearn.plotting.displays.LYRZProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.lzrprojector property)": [[400, "nilearn.plotting.displays.LZRProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.lzryprojector property)": [[401, "nilearn.plotting.displays.LZRYProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.mosaicslicer property)": [[402, "nilearn.plotting.displays.MosaicSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.orthoprojector property)": [[403, "nilearn.plotting.displays.OrthoProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.orthoslicer property)": [[404, "nilearn.plotting.displays.OrthoSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.rprojector property)": [[406, "nilearn.plotting.displays.RProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.tiledslicer property)": [[407, "nilearn.plotting.displays.TiledSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.xprojector property)": [[408, "nilearn.plotting.displays.XProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.xslicer property)": [[409, "nilearn.plotting.displays.XSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.xzprojector property)": [[410, "nilearn.plotting.displays.XZProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.xzslicer property)": [[411, "nilearn.plotting.displays.XZSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.yprojector property)": [[412, "nilearn.plotting.displays.YProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.yslicer property)": [[413, "nilearn.plotting.displays.YSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.yxprojector property)": [[414, "nilearn.plotting.displays.YXProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.yxslicer property)": [[415, "nilearn.plotting.displays.YXSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.yzprojector property)": [[416, "nilearn.plotting.displays.YZProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.yzslicer property)": [[417, "nilearn.plotting.displays.YZSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.zprojector property)": [[418, "nilearn.plotting.displays.ZProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.zslicer property)": [[419, "nilearn.plotting.displays.ZSlicer.black_bg", false]], "bold": [[185, "term-BOLD", true]], "brain_color (nilearn.plotting.displays.baseslicer property)": [[393, "nilearn.plotting.displays.BaseSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.lprojector property)": [[396, "nilearn.plotting.displays.LProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.lrprojector property)": [[397, "nilearn.plotting.displays.LRProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.lyrprojector property)": [[398, "nilearn.plotting.displays.LYRProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.lyrzprojector property)": [[399, "nilearn.plotting.displays.LYRZProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.lzrprojector property)": [[400, "nilearn.plotting.displays.LZRProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.lzryprojector property)": [[401, "nilearn.plotting.displays.LZRYProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.mosaicslicer property)": [[402, "nilearn.plotting.displays.MosaicSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.orthoprojector property)": [[403, "nilearn.plotting.displays.OrthoProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.orthoslicer property)": [[404, "nilearn.plotting.displays.OrthoSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.rprojector property)": [[406, "nilearn.plotting.displays.RProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.tiledslicer property)": [[407, "nilearn.plotting.displays.TiledSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.xprojector property)": [[408, "nilearn.plotting.displays.XProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.xslicer property)": [[409, "nilearn.plotting.displays.XSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.xzprojector property)": [[410, "nilearn.plotting.displays.XZProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.xzslicer property)": [[411, "nilearn.plotting.displays.XZSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.yprojector property)": [[412, "nilearn.plotting.displays.YProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.yslicer property)": [[413, "nilearn.plotting.displays.YSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.yxprojector property)": [[414, "nilearn.plotting.displays.YXProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.yxslicer property)": [[415, "nilearn.plotting.displays.YXSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.yzprojector property)": [[416, "nilearn.plotting.displays.YZProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.yzslicer property)": [[417, "nilearn.plotting.displays.YZSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.zprojector property)": [[418, "nilearn.plotting.displays.ZProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.zslicer property)": [[419, "nilearn.plotting.displays.ZSlicer.brain_color", false]], "butterworth() (in module nilearn.signal)": [[468, "nilearn.signal.butterworth", false]], "canica": [[185, "term-CanICA", true]], "canica (class in nilearn.decomposition)": [[312, "nilearn.decomposition.CanICA", false]], "check_design_matrix() (in module nilearn.glm.first_level)": [[328, "nilearn.glm.first_level.check_design_matrix", false]], "classification": [[185, "term-classification", true]], "clean() (in module nilearn.signal)": [[469, "nilearn.signal.clean", false]], "clean_img() (in module nilearn.image)": [[345, "nilearn.image.clean_img", false]], "close() (nilearn.plotting.displays.baseslicer method)": [[393, "nilearn.plotting.displays.BaseSlicer.close", false]], "close() (nilearn.plotting.displays.lprojector method)": [[396, "nilearn.plotting.displays.LProjector.close", false]], "close() (nilearn.plotting.displays.lrprojector method)": [[397, "nilearn.plotting.displays.LRProjector.close", false]], "close() (nilearn.plotting.displays.lyrprojector method)": [[398, "nilearn.plotting.displays.LYRProjector.close", false]], "close() (nilearn.plotting.displays.lyrzprojector method)": [[399, "nilearn.plotting.displays.LYRZProjector.close", false]], "close() (nilearn.plotting.displays.lzrprojector method)": [[400, "nilearn.plotting.displays.LZRProjector.close", false]], "close() (nilearn.plotting.displays.lzryprojector method)": [[401, "nilearn.plotting.displays.LZRYProjector.close", false]], "close() (nilearn.plotting.displays.mosaicslicer method)": [[402, "nilearn.plotting.displays.MosaicSlicer.close", false]], "close() (nilearn.plotting.displays.orthoprojector method)": [[403, "nilearn.plotting.displays.OrthoProjector.close", false]], "close() (nilearn.plotting.displays.orthoslicer method)": [[404, "nilearn.plotting.displays.OrthoSlicer.close", false]], "close() (nilearn.plotting.displays.rprojector method)": [[406, "nilearn.plotting.displays.RProjector.close", false]], "close() (nilearn.plotting.displays.tiledslicer method)": [[407, "nilearn.plotting.displays.TiledSlicer.close", false]], "close() (nilearn.plotting.displays.xprojector method)": [[408, "nilearn.plotting.displays.XProjector.close", false]], "close() (nilearn.plotting.displays.xslicer method)": [[409, "nilearn.plotting.displays.XSlicer.close", false]], "close() (nilearn.plotting.displays.xzprojector method)": [[410, "nilearn.plotting.displays.XZProjector.close", false]], "close() (nilearn.plotting.displays.xzslicer method)": [[411, "nilearn.plotting.displays.XZSlicer.close", false]], "close() (nilearn.plotting.displays.yprojector method)": [[412, "nilearn.plotting.displays.YProjector.close", false]], "close() (nilearn.plotting.displays.yslicer method)": [[413, "nilearn.plotting.displays.YSlicer.close", false]], "close() (nilearn.plotting.displays.yxprojector method)": [[414, "nilearn.plotting.displays.YXProjector.close", false]], "close() (nilearn.plotting.displays.yxslicer method)": [[415, "nilearn.plotting.displays.YXSlicer.close", false]], "close() (nilearn.plotting.displays.yzprojector method)": [[416, "nilearn.plotting.displays.YZProjector.close", false]], "close() (nilearn.plotting.displays.yzslicer method)": [[417, "nilearn.plotting.displays.YZSlicer.close", false]], "close() (nilearn.plotting.displays.zprojector method)": [[418, "nilearn.plotting.displays.ZProjector.close", false]], "close() (nilearn.plotting.displays.zslicer method)": [[419, "nilearn.plotting.displays.ZSlicer.close", false]], "closing": [[185, "term-Closing", true]], "cluster_level_inference() (in module nilearn.glm)": [[322, "nilearn.glm.cluster_level_inference", false]], "compute_background_mask() (in module nilearn.masking)": [[383, "nilearn.masking.compute_background_mask", false]], "compute_brain_mask() (in module nilearn.masking)": [[384, "nilearn.masking.compute_brain_mask", false]], "compute_contrast() (in module nilearn.glm)": [[323, "nilearn.glm.compute_contrast", false]], "compute_contrast() (nilearn.glm.first_level.firstlevelmodel method)": [[327, "nilearn.glm.first_level.FirstLevelModel.compute_contrast", false]], "compute_contrast() (nilearn.glm.second_level.secondlevelmodel method)": [[340, "nilearn.glm.second_level.SecondLevelModel.compute_contrast", false]], "compute_epi_mask() (in module nilearn.masking)": [[385, "nilearn.masking.compute_epi_mask", false]], "compute_fixed_effects() (in module nilearn.glm)": [[324, "nilearn.glm.compute_fixed_effects", false]], "compute_multi_background_mask() (in module nilearn.masking)": [[386, "nilearn.masking.compute_multi_background_mask", false]], "compute_multi_brain_mask() (in module nilearn.masking)": [[387, "nilearn.masking.compute_multi_brain_mask", false]], "compute_multi_epi_mask() (in module nilearn.masking)": [[388, "nilearn.masking.compute_multi_epi_mask", false]], "compute_regressor() (in module nilearn.glm.first_level)": [[329, "nilearn.glm.first_level.compute_regressor", false]], "concat_imgs() (in module nilearn.image)": [[346, "nilearn.image.concat_imgs", false]], "conf_int() (nilearn.glm.likelihoodmodelresults method)": [[317, "nilearn.glm.LikelihoodModelResults.conf_int", false]], "conf_int() (nilearn.glm.regressionresults method)": [[319, "nilearn.glm.RegressionResults.conf_int", false]], "conf_int() (nilearn.glm.simpleregressionresults method)": [[320, "nilearn.glm.SimpleRegressionResults.conf_int", false]], "connected_label_regions() (in module nilearn.regions)": [[458, "nilearn.regions.connected_label_regions", false]], "connected_regions() (in module nilearn.regions)": [[459, "nilearn.regions.connected_regions", false]], "connectivitymeasure (class in nilearn.connectome)": [[239, "nilearn.connectome.ConnectivityMeasure", false]], "contrast": [[185, "term-contrast", true]], "contrast (class in nilearn.glm)": [[315, "nilearn.glm.Contrast", false]], "contrast_type (nilearn.glm.contrast property)": [[315, "nilearn.glm.Contrast.contrast_type", false]], "coord_transform() (in module nilearn.image)": [[347, "nilearn.image.coord_transform", false]], "coordinates (nilearn.surface.filemesh property)": [[471, "nilearn.surface.FileMesh.coordinates", false]], "coordinates (nilearn.surface.inmemorymesh attribute)": [[472, "nilearn.surface.InMemoryMesh.coordinates", false]], "coordinates (nilearn.surface.surfacemesh attribute)": [[476, "nilearn.surface.SurfaceMesh.coordinates", false]], "copy_img() (in module nilearn.image)": [[348, "nilearn.image.copy_img", false]], "cov_to_corr() (in module nilearn.connectome)": [[242, "nilearn.connectome.cov_to_corr", false]], "crop_img() (in module nilearn.image)": [[349, "nilearn.image.crop_img", false]], "cutaxes (class in nilearn.plotting.displays)": [[394, "nilearn.plotting.displays.CutAxes", false]], "decision_function() (nilearn.decoding.decoder method)": [[305, "nilearn.decoding.Decoder.decision_function", false]], "decision_function() (nilearn.decoding.fremclassifier method)": [[307, "nilearn.decoding.FREMClassifier.decision_function", false]], "decision_function() (nilearn.decoding.spacenetclassifier method)": [[310, "nilearn.decoding.SpaceNetClassifier.decision_function", false]], "decoder (class in nilearn.decoding)": [[305, "nilearn.decoding.Decoder", false]], "decoderregressor (class in nilearn.decoding)": [[306, "nilearn.decoding.DecoderRegressor", false]], "decoding": [[185, "term-Decoding", true]], "deterministic atlas": [[185, "term-Deterministic-atlas", true]], "dictionary learning": [[185, "term-Dictionary-learning", true]], "dictlearning (class in nilearn.decomposition)": [[313, "nilearn.decomposition.DictLearning", false]], "dilation": [[185, "term-Dilation", true]], "draw_2d() (nilearn.plotting.displays.baseaxes method)": [[392, "nilearn.plotting.displays.BaseAxes.draw_2d", false]], "draw_2d() (nilearn.plotting.displays.cutaxes method)": [[394, "nilearn.plotting.displays.CutAxes.draw_2d", false]], "draw_2d() (nilearn.plotting.displays.glassbrainaxes method)": [[395, "nilearn.plotting.displays.GlassBrainAxes.draw_2d", false]], "draw_cross() (nilearn.plotting.displays.lprojector method)": [[396, "nilearn.plotting.displays.LProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.lrprojector method)": [[397, "nilearn.plotting.displays.LRProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.lyrprojector method)": [[398, "nilearn.plotting.displays.LYRProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.lyrzprojector method)": [[399, "nilearn.plotting.displays.LYRZProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.lzrprojector method)": [[400, "nilearn.plotting.displays.LZRProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.lzryprojector method)": [[401, "nilearn.plotting.displays.LZRYProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.mosaicslicer method)": [[402, "nilearn.plotting.displays.MosaicSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.orthoprojector method)": [[403, "nilearn.plotting.displays.OrthoProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.orthoslicer method)": [[404, "nilearn.plotting.displays.OrthoSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.rprojector method)": [[406, "nilearn.plotting.displays.RProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.tiledslicer method)": [[407, "nilearn.plotting.displays.TiledSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.xprojector method)": [[408, "nilearn.plotting.displays.XProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.xslicer method)": [[409, "nilearn.plotting.displays.XSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.xzprojector method)": [[410, "nilearn.plotting.displays.XZProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.xzslicer method)": [[411, "nilearn.plotting.displays.XZSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.yprojector method)": [[412, "nilearn.plotting.displays.YProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.yslicer method)": [[413, "nilearn.plotting.displays.YSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.yxprojector method)": [[414, "nilearn.plotting.displays.YXProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.yxslicer method)": [[415, "nilearn.plotting.displays.YXSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.yzprojector method)": [[416, "nilearn.plotting.displays.YZProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.yzslicer method)": [[417, "nilearn.plotting.displays.YZSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.zprojector method)": [[418, "nilearn.plotting.displays.ZProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.zslicer method)": [[419, "nilearn.plotting.displays.ZSlicer.draw_cross", false]], "draw_left_right() (nilearn.plotting.displays.baseaxes method)": [[392, "nilearn.plotting.displays.BaseAxes.draw_left_right", false]], "draw_left_right() (nilearn.plotting.displays.cutaxes method)": [[394, "nilearn.plotting.displays.CutAxes.draw_left_right", false]], "draw_left_right() (nilearn.plotting.displays.glassbrainaxes method)": [[395, "nilearn.plotting.displays.GlassBrainAxes.draw_left_right", false]], "draw_position() (nilearn.plotting.displays.baseaxes method)": [[392, "nilearn.plotting.displays.BaseAxes.draw_position", false]], "draw_position() (nilearn.plotting.displays.cutaxes method)": [[394, "nilearn.plotting.displays.CutAxes.draw_position", false]], "draw_position() (nilearn.plotting.displays.glassbrainaxes method)": [[395, "nilearn.plotting.displays.GlassBrainAxes.draw_position", false]], "draw_scale_bar() (nilearn.plotting.displays.baseaxes method)": [[392, "nilearn.plotting.displays.BaseAxes.draw_scale_bar", false]], "draw_scale_bar() (nilearn.plotting.displays.cutaxes method)": [[394, "nilearn.plotting.displays.CutAxes.draw_scale_bar", false]], "draw_scale_bar() (nilearn.plotting.displays.glassbrainaxes method)": [[395, "nilearn.plotting.displays.GlassBrainAxes.draw_scale_bar", false]], "eeg": [[185, "term-EEG", true]], "effect_size() (nilearn.glm.contrast method)": [[315, "nilearn.glm.Contrast.effect_size", false]], "effect_variance() (nilearn.glm.contrast method)": [[315, "nilearn.glm.Contrast.effect_variance", false]], "epi": [[185, "term-EPI", true]], "erosion": [[185, "term-Erosion", true]], "expression_to_contrast_vector() (in module nilearn.glm)": [[325, "nilearn.glm.expression_to_contrast_vector", false]], "faces": [[185, "term-faces", true]], "faces (nilearn.surface.filemesh property)": [[471, "nilearn.surface.FileMesh.faces", false]], "faces (nilearn.surface.inmemorymesh attribute)": [[472, "nilearn.surface.InMemoryMesh.faces", false]], "faces (nilearn.surface.surfacemesh attribute)": [[476, "nilearn.surface.SurfaceMesh.faces", false]], "fcontrast() (nilearn.glm.likelihoodmodelresults method)": [[317, "nilearn.glm.LikelihoodModelResults.Fcontrast", false]], "fcontrast() (nilearn.glm.regressionresults method)": [[319, "nilearn.glm.RegressionResults.Fcontrast", false]], "fcontrast() (nilearn.glm.simpleregressionresults method)": [[320, "nilearn.glm.SimpleRegressionResults.Fcontrast", false]], "fcontrastresults (class in nilearn.glm)": [[316, "nilearn.glm.FContrastResults", false]], "fdr correction": [[185, "term-FDR-correction", true]], "fdr_threshold() (in module nilearn.glm)": [[326, "nilearn.glm.fdr_threshold", false]], "fetch_abide_pcp() (in module nilearn.datasets)": [[247, "nilearn.datasets.fetch_abide_pcp", false]], "fetch_adhd() (in module nilearn.datasets)": [[248, "nilearn.datasets.fetch_adhd", false]], "fetch_atlas_aal() (in module nilearn.datasets)": [[249, "nilearn.datasets.fetch_atlas_aal", false]], "fetch_atlas_allen_2011() (in module nilearn.datasets)": [[250, "nilearn.datasets.fetch_atlas_allen_2011", false]], "fetch_atlas_basc_multiscale_2015() (in module nilearn.datasets)": [[251, "nilearn.datasets.fetch_atlas_basc_multiscale_2015", false]], "fetch_atlas_craddock_2012() (in module nilearn.datasets)": [[252, "nilearn.datasets.fetch_atlas_craddock_2012", false]], "fetch_atlas_destrieux_2009() (in module nilearn.datasets)": [[253, "nilearn.datasets.fetch_atlas_destrieux_2009", false]], "fetch_atlas_difumo() (in module nilearn.datasets)": [[254, "nilearn.datasets.fetch_atlas_difumo", false]], "fetch_atlas_harvard_oxford() (in module nilearn.datasets)": [[255, "nilearn.datasets.fetch_atlas_harvard_oxford", false]], "fetch_atlas_juelich() (in module nilearn.datasets)": [[256, "nilearn.datasets.fetch_atlas_juelich", false]], "fetch_atlas_msdl() (in module nilearn.datasets)": [[257, "nilearn.datasets.fetch_atlas_msdl", false]], "fetch_atlas_pauli_2017() (in module nilearn.datasets)": [[258, "nilearn.datasets.fetch_atlas_pauli_2017", false]], "fetch_atlas_schaefer_2018() (in module nilearn.datasets)": [[259, "nilearn.datasets.fetch_atlas_schaefer_2018", false]], "fetch_atlas_smith_2009() (in module nilearn.datasets)": [[260, "nilearn.datasets.fetch_atlas_smith_2009", false]], "fetch_atlas_surf_destrieux() (in module nilearn.datasets)": [[261, "nilearn.datasets.fetch_atlas_surf_destrieux", false]], "fetch_atlas_talairach() (in module nilearn.datasets)": [[262, "nilearn.datasets.fetch_atlas_talairach", false]], "fetch_atlas_yeo_2011() (in module nilearn.datasets)": [[263, "nilearn.datasets.fetch_atlas_yeo_2011", false]], "fetch_bids_langloc_dataset() (in module nilearn.datasets)": [[264, "nilearn.datasets.fetch_bids_langloc_dataset", false]], "fetch_coords_dosenbach_2010() (in module nilearn.datasets)": [[265, "nilearn.datasets.fetch_coords_dosenbach_2010", false]], "fetch_coords_power_2011() (in module nilearn.datasets)": [[266, "nilearn.datasets.fetch_coords_power_2011", false]], "fetch_coords_seitzman_2018() (in module nilearn.datasets)": [[267, "nilearn.datasets.fetch_coords_seitzman_2018", false]], "fetch_development_fmri() (in module nilearn.datasets)": [[268, "nilearn.datasets.fetch_development_fmri", false]], "fetch_ds000030_urls() (in module nilearn.datasets)": [[269, "nilearn.datasets.fetch_ds000030_urls", false]], "fetch_fiac_first_level() (in module nilearn.datasets)": [[270, "nilearn.datasets.fetch_fiac_first_level", false]], "fetch_haxby() (in module nilearn.datasets)": [[271, "nilearn.datasets.fetch_haxby", false]], "fetch_icbm152_2009() (in module nilearn.datasets)": [[272, "nilearn.datasets.fetch_icbm152_2009", false]], "fetch_icbm152_brain_gm_mask() (in module nilearn.datasets)": [[273, "nilearn.datasets.fetch_icbm152_brain_gm_mask", false]], "fetch_language_localizer_demo_dataset() (in module nilearn.datasets)": [[274, "nilearn.datasets.fetch_language_localizer_demo_dataset", false]], "fetch_localizer_button_task() (in module nilearn.datasets)": [[275, "nilearn.datasets.fetch_localizer_button_task", false]], "fetch_localizer_calculation_task() (in module nilearn.datasets)": [[276, "nilearn.datasets.fetch_localizer_calculation_task", false]], "fetch_localizer_contrasts() (in module nilearn.datasets)": [[277, "nilearn.datasets.fetch_localizer_contrasts", false]], "fetch_localizer_first_level() (in module nilearn.datasets)": [[278, "nilearn.datasets.fetch_localizer_first_level", false]], "fetch_megatrawls_netmats() (in module nilearn.datasets)": [[279, "nilearn.datasets.fetch_megatrawls_netmats", false]], "fetch_mixed_gambles() (in module nilearn.datasets)": [[280, "nilearn.datasets.fetch_mixed_gambles", false]], "fetch_miyawaki2008() (in module nilearn.datasets)": [[281, "nilearn.datasets.fetch_miyawaki2008", false]], "fetch_neurovault() (in module nilearn.datasets)": [[282, "nilearn.datasets.fetch_neurovault", false]], "fetch_neurovault_auditory_computation_task() (in module nilearn.datasets)": [[283, "nilearn.datasets.fetch_neurovault_auditory_computation_task", false]], "fetch_neurovault_ids() (in module nilearn.datasets)": [[284, "nilearn.datasets.fetch_neurovault_ids", false]], "fetch_neurovault_motor_task() (in module nilearn.datasets)": [[285, "nilearn.datasets.fetch_neurovault_motor_task", false]], "fetch_oasis_vbm() (in module nilearn.datasets)": [[286, "nilearn.datasets.fetch_oasis_vbm", false]], "fetch_openneuro_dataset() (in module nilearn.datasets)": [[287, "nilearn.datasets.fetch_openneuro_dataset", false]], "fetch_spm_auditory() (in module nilearn.datasets)": [[288, "nilearn.datasets.fetch_spm_auditory", false]], "fetch_spm_multimodal_fmri() (in module nilearn.datasets)": [[289, "nilearn.datasets.fetch_spm_multimodal_fmri", false]], "fetch_surf_fsaverage() (in module nilearn.datasets)": [[290, "nilearn.datasets.fetch_surf_fsaverage", false]], "fetch_surf_nki_enhanced() (in module nilearn.datasets)": [[291, "nilearn.datasets.fetch_surf_nki_enhanced", false]], "file_path (nilearn.surface.filemesh attribute)": [[471, "nilearn.surface.FileMesh.file_path", false]], "filemesh (class in nilearn.surface)": [[471, "nilearn.surface.FileMesh", false]], "find_cut_coords() (nilearn.plotting.displays.baseslicer static method)": [[393, "nilearn.plotting.displays.BaseSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.lprojector class method)": [[396, "nilearn.plotting.displays.LProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.lrprojector class method)": [[397, "nilearn.plotting.displays.LRProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.lyrprojector class method)": [[398, "nilearn.plotting.displays.LYRProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.lyrzprojector class method)": [[399, "nilearn.plotting.displays.LYRZProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.lzrprojector class method)": [[400, "nilearn.plotting.displays.LZRProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.lzryprojector class method)": [[401, "nilearn.plotting.displays.LZRYProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.mosaicslicer class method)": [[402, "nilearn.plotting.displays.MosaicSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.orthoprojector class method)": [[403, "nilearn.plotting.displays.OrthoProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.orthoslicer class method)": [[404, "nilearn.plotting.displays.OrthoSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.rprojector class method)": [[406, "nilearn.plotting.displays.RProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.tiledslicer class method)": [[407, "nilearn.plotting.displays.TiledSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.xprojector class method)": [[408, "nilearn.plotting.displays.XProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.xslicer class method)": [[409, "nilearn.plotting.displays.XSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.xzprojector class method)": [[410, "nilearn.plotting.displays.XZProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.xzslicer class method)": [[411, "nilearn.plotting.displays.XZSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.yprojector class method)": [[412, "nilearn.plotting.displays.YProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.yslicer class method)": [[413, "nilearn.plotting.displays.YSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.yxprojector class method)": [[414, "nilearn.plotting.displays.YXProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.yxslicer class method)": [[415, "nilearn.plotting.displays.YXSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.yzprojector class method)": [[416, "nilearn.plotting.displays.YZProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.yzslicer class method)": [[417, "nilearn.plotting.displays.YZSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.zprojector class method)": [[418, "nilearn.plotting.displays.ZProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.zslicer class method)": [[419, "nilearn.plotting.displays.ZSlicer.find_cut_coords", false]], "find_cut_slices() (in module nilearn.plotting)": [[422, "nilearn.plotting.find_cut_slices", false]], "find_parcellation_cut_coords() (in module nilearn.plotting)": [[423, "nilearn.plotting.find_parcellation_cut_coords", false]], "find_probabilistic_atlas_cut_coords() (in module nilearn.plotting)": [[424, "nilearn.plotting.find_probabilistic_atlas_cut_coords", false]], "find_xyz_cut_coords() (in module nilearn.plotting)": [[425, "nilearn.plotting.find_xyz_cut_coords", false]], "fir": [[185, "term-FIR", true]], "first_level_from_bids() (in module nilearn.glm.first_level)": [[330, "nilearn.glm.first_level.first_level_from_bids", false]], "firstlevelmodel (class in nilearn.glm.first_level)": [[327, "nilearn.glm.first_level.FirstLevelModel", false]], "fit() (nilearn.connectome.connectivitymeasure method)": [[239, "nilearn.connectome.ConnectivityMeasure.fit", false]], "fit() (nilearn.connectome.groupsparsecovariance method)": [[240, "nilearn.connectome.GroupSparseCovariance.fit", false]], "fit() (nilearn.connectome.groupsparsecovariancecv method)": [[241, "nilearn.connectome.GroupSparseCovarianceCV.fit", false]], "fit() (nilearn.decoding.decoder method)": [[305, "nilearn.decoding.Decoder.fit", false]], "fit() (nilearn.decoding.decoderregressor method)": [[306, "nilearn.decoding.DecoderRegressor.fit", false]], "fit() (nilearn.decoding.fremclassifier method)": [[307, "nilearn.decoding.FREMClassifier.fit", false]], "fit() (nilearn.decoding.fremregressor method)": [[308, "nilearn.decoding.FREMRegressor.fit", false]], "fit() (nilearn.decoding.searchlight method)": [[309, "nilearn.decoding.SearchLight.fit", false]], "fit() (nilearn.decoding.spacenetclassifier method)": [[310, "nilearn.decoding.SpaceNetClassifier.fit", false]], "fit() (nilearn.decoding.spacenetregressor method)": [[311, "nilearn.decoding.SpaceNetRegressor.fit", false]], "fit() (nilearn.decomposition.canica method)": [[312, "nilearn.decomposition.CanICA.fit", false]], "fit() (nilearn.decomposition.dictlearning method)": [[313, "nilearn.decomposition.DictLearning.fit", false]], "fit() (nilearn.glm.armodel method)": [[314, "nilearn.glm.ARModel.fit", false]], "fit() (nilearn.glm.first_level.firstlevelmodel method)": [[327, "nilearn.glm.first_level.FirstLevelModel.fit", false]], "fit() (nilearn.glm.olsmodel method)": [[318, "nilearn.glm.OLSModel.fit", false]], "fit() (nilearn.glm.second_level.secondlevelmodel method)": [[340, "nilearn.glm.second_level.SecondLevelModel.fit", false]], "fit() (nilearn.maskers.basemasker method)": [[371, "nilearn.maskers.BaseMasker.fit", false]], "fit() (nilearn.maskers.multiniftilabelsmasker method)": [[372, "nilearn.maskers.MultiNiftiLabelsMasker.fit", false]], "fit() (nilearn.maskers.multiniftimapsmasker method)": [[373, "nilearn.maskers.MultiNiftiMapsMasker.fit", false]], "fit() (nilearn.maskers.multiniftimasker method)": [[374, "nilearn.maskers.MultiNiftiMasker.fit", false]], "fit() (nilearn.maskers.niftilabelsmasker method)": [[375, "nilearn.maskers.NiftiLabelsMasker.fit", false]], "fit() (nilearn.maskers.niftimapsmasker method)": [[376, "nilearn.maskers.NiftiMapsMasker.fit", false]], "fit() (nilearn.maskers.niftimasker method)": [[377, "nilearn.maskers.NiftiMasker.fit", false]], "fit() (nilearn.maskers.niftispheresmasker method)": [[378, "nilearn.maskers.NiftiSpheresMasker.fit", false]], "fit() (nilearn.maskers.surfacelabelsmasker method)": [[379, "nilearn.maskers.SurfaceLabelsMasker.fit", false]], "fit() (nilearn.maskers.surfacemapsmasker method)": [[380, "nilearn.maskers.SurfaceMapsMasker.fit", false]], "fit() (nilearn.maskers.surfacemasker method)": [[381, "nilearn.maskers.SurfaceMasker.fit", false]], "fit() (nilearn.regions.hierarchicalkmeans method)": [[454, "nilearn.regions.HierarchicalKMeans.fit", false]], "fit() (nilearn.regions.parcellations method)": [[455, "nilearn.regions.Parcellations.fit", false]], "fit() (nilearn.regions.regionextractor method)": [[457, "nilearn.regions.RegionExtractor.fit", false]], "fit() (nilearn.regions.rena method)": [[456, "nilearn.regions.ReNA.fit", false]], "fit_predict() (nilearn.regions.hierarchicalkmeans method)": [[454, "nilearn.regions.HierarchicalKMeans.fit_predict", false]], "fit_predict() (nilearn.regions.rena method)": [[456, "nilearn.regions.ReNA.fit_predict", false]], "fit_transform() (nilearn.connectome.connectivitymeasure method)": [[239, "nilearn.connectome.ConnectivityMeasure.fit_transform", false]], "fit_transform() (nilearn.decoding.searchlight method)": [[309, "nilearn.decoding.SearchLight.fit_transform", false]], "fit_transform() (nilearn.decomposition.canica method)": [[312, "nilearn.decomposition.CanICA.fit_transform", false]], "fit_transform() (nilearn.decomposition.dictlearning method)": [[313, "nilearn.decomposition.DictLearning.fit_transform", false]], "fit_transform() (nilearn.maskers.basemasker method)": [[371, "nilearn.maskers.BaseMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.multiniftilabelsmasker method)": [[372, "nilearn.maskers.MultiNiftiLabelsMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.multiniftimapsmasker method)": [[373, "nilearn.maskers.MultiNiftiMapsMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.multiniftimasker method)": [[374, "nilearn.maskers.MultiNiftiMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.niftilabelsmasker method)": [[375, "nilearn.maskers.NiftiLabelsMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.niftimapsmasker method)": [[376, "nilearn.maskers.NiftiMapsMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.niftimasker method)": [[377, "nilearn.maskers.NiftiMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.niftispheresmasker method)": [[378, "nilearn.maskers.NiftiSpheresMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.surfacelabelsmasker method)": [[379, "nilearn.maskers.SurfaceLabelsMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.surfacemapsmasker method)": [[380, "nilearn.maskers.SurfaceMapsMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.surfacemasker method)": [[381, "nilearn.maskers.SurfaceMasker.fit_transform", false]], "fit_transform() (nilearn.regions.hierarchicalkmeans method)": [[454, "nilearn.regions.HierarchicalKMeans.fit_transform", false]], "fit_transform() (nilearn.regions.parcellations method)": [[455, "nilearn.regions.Parcellations.fit_transform", false]], "fit_transform() (nilearn.regions.regionextractor method)": [[457, "nilearn.regions.RegionExtractor.fit_transform", false]], "fit_transform() (nilearn.regions.rena method)": [[456, "nilearn.regions.ReNA.fit_transform", false]], "fmri": [[185, "term-fMRI", true]], "fmriprep": [[185, "term-fMRIPrep", true]], "fpr correction": [[185, "term-FPR-correction", true]], "frem": [[185, "term-FREM", true]], "fremclassifier (class in nilearn.decoding)": [[307, "nilearn.decoding.FREMClassifier", false]], "fremregressor (class in nilearn.decoding)": [[308, "nilearn.decoding.FREMRegressor", false]], "from_volume() (nilearn.surface.surfaceimage class method)": [[475, "nilearn.surface.SurfaceImage.from_volume", false]], "functional connectivity": [[185, "term-functional-connectivity", true]], "functional connectome": [[185, "term-functional-connectome", true]], "fwer correction": [[185, "term-FWER-correction", true]], "fwhm": [[185, "term-FWHM", true]], "generate_report() (nilearn.glm.first_level.firstlevelmodel method)": [[327, "nilearn.glm.first_level.FirstLevelModel.generate_report", false]], "generate_report() (nilearn.glm.second_level.secondlevelmodel method)": [[340, "nilearn.glm.second_level.SecondLevelModel.generate_report", false]], "generate_report() (nilearn.maskers.multiniftilabelsmasker method)": [[372, "nilearn.maskers.MultiNiftiLabelsMasker.generate_report", false]], "generate_report() (nilearn.maskers.multiniftimapsmasker method)": [[373, "nilearn.maskers.MultiNiftiMapsMasker.generate_report", false]], "generate_report() (nilearn.maskers.multiniftimasker method)": [[374, "nilearn.maskers.MultiNiftiMasker.generate_report", false]], "generate_report() (nilearn.maskers.niftilabelsmasker method)": [[375, "nilearn.maskers.NiftiLabelsMasker.generate_report", false]], "generate_report() (nilearn.maskers.niftimapsmasker method)": [[376, "nilearn.maskers.NiftiMapsMasker.generate_report", false]], "generate_report() (nilearn.maskers.niftimasker method)": [[377, "nilearn.maskers.NiftiMasker.generate_report", false]], "generate_report() (nilearn.maskers.niftispheresmasker method)": [[378, "nilearn.maskers.NiftiSpheresMasker.generate_report", false]], "generate_report() (nilearn.maskers.surfacelabelsmasker method)": [[379, "nilearn.maskers.SurfaceLabelsMasker.generate_report", false]], "generate_report() (nilearn.maskers.surfacemapsmasker method)": [[380, "nilearn.maskers.SurfaceMapsMasker.generate_report", false]], "generate_report() (nilearn.maskers.surfacemasker method)": [[381, "nilearn.maskers.SurfaceMasker.generate_report", false]], "generate_report() (nilearn.regions.regionextractor method)": [[457, "nilearn.regions.RegionExtractor.generate_report", false]], "get_bids_files() (in module nilearn.interfaces.bids)": [[365, "nilearn.interfaces.bids.get_bids_files", false]], "get_clusters_table() (in module nilearn.reporting)": [[466, "nilearn.reporting.get_clusters_table", false]], "get_data() (in module nilearn.image)": [[350, "nilearn.image.get_data", false]], "get_data_dirs() (in module nilearn.datasets)": [[292, "nilearn.datasets.get_data_dirs", false]], "get_design_from_fslmat() (in module nilearn.interfaces.fsl)": [[370, "nilearn.interfaces.fsl.get_design_from_fslmat", false]], "get_iframe() (nilearn.reporting.htmlreport method)": [[465, "nilearn.reporting.HTMLReport.get_iframe", false]], "get_metadata_routing() (nilearn.connectome.connectivitymeasure method)": [[239, "nilearn.connectome.ConnectivityMeasure.get_metadata_routing", false]], "get_metadata_routing() (nilearn.connectome.groupsparsecovariance method)": [[240, "nilearn.connectome.GroupSparseCovariance.get_metadata_routing", false]], "get_metadata_routing() (nilearn.connectome.groupsparsecovariancecv method)": [[241, "nilearn.connectome.GroupSparseCovarianceCV.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.decoder method)": [[305, "nilearn.decoding.Decoder.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.decoderregressor method)": [[306, "nilearn.decoding.DecoderRegressor.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.fremclassifier method)": [[307, "nilearn.decoding.FREMClassifier.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.fremregressor method)": [[308, "nilearn.decoding.FREMRegressor.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.searchlight method)": [[309, "nilearn.decoding.SearchLight.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.spacenetclassifier method)": [[310, "nilearn.decoding.SpaceNetClassifier.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.spacenetregressor method)": [[311, "nilearn.decoding.SpaceNetRegressor.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decomposition.canica method)": [[312, "nilearn.decomposition.CanICA.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decomposition.dictlearning method)": [[313, "nilearn.decomposition.DictLearning.get_metadata_routing", false]], "get_metadata_routing() (nilearn.glm.first_level.firstlevelmodel method)": [[327, "nilearn.glm.first_level.FirstLevelModel.get_metadata_routing", false]], "get_metadata_routing() (nilearn.glm.second_level.secondlevelmodel method)": [[340, "nilearn.glm.second_level.SecondLevelModel.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.basemasker method)": [[371, "nilearn.maskers.BaseMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.multiniftilabelsmasker method)": [[372, "nilearn.maskers.MultiNiftiLabelsMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.multiniftimapsmasker method)": [[373, "nilearn.maskers.MultiNiftiMapsMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.multiniftimasker method)": [[374, "nilearn.maskers.MultiNiftiMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.niftilabelsmasker method)": [[375, "nilearn.maskers.NiftiLabelsMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.niftimapsmasker method)": [[376, "nilearn.maskers.NiftiMapsMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.niftimasker method)": [[377, "nilearn.maskers.NiftiMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.niftispheresmasker method)": [[378, "nilearn.maskers.NiftiSpheresMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.surfacelabelsmasker method)": [[379, "nilearn.maskers.SurfaceLabelsMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.surfacemapsmasker method)": [[380, "nilearn.maskers.SurfaceMapsMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.surfacemasker method)": [[381, "nilearn.maskers.SurfaceMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.regions.hierarchicalkmeans method)": [[454, "nilearn.regions.HierarchicalKMeans.get_metadata_routing", false]], "get_metadata_routing() (nilearn.regions.parcellations method)": [[455, "nilearn.regions.Parcellations.get_metadata_routing", false]], "get_metadata_routing() (nilearn.regions.regionextractor method)": [[457, "nilearn.regions.RegionExtractor.get_metadata_routing", false]], "get_metadata_routing() (nilearn.regions.rena method)": [[456, "nilearn.regions.ReNA.get_metadata_routing", false]], "get_object_bounds() (nilearn.plotting.displays.baseaxes method)": [[392, "nilearn.plotting.displays.BaseAxes.get_object_bounds", false]], "get_object_bounds() (nilearn.plotting.displays.cutaxes method)": [[394, "nilearn.plotting.displays.CutAxes.get_object_bounds", false]], "get_object_bounds() (nilearn.plotting.displays.glassbrainaxes method)": [[395, "nilearn.plotting.displays.GlassBrainAxes.get_object_bounds", false]], "get_params() (nilearn.connectome.connectivitymeasure method)": [[239, "nilearn.connectome.ConnectivityMeasure.get_params", false]], "get_params() (nilearn.connectome.groupsparsecovariance method)": [[240, "nilearn.connectome.GroupSparseCovariance.get_params", false]], "get_params() (nilearn.connectome.groupsparsecovariancecv method)": [[241, "nilearn.connectome.GroupSparseCovarianceCV.get_params", false]], "get_params() (nilearn.decoding.decoder method)": [[305, "nilearn.decoding.Decoder.get_params", false]], "get_params() (nilearn.decoding.decoderregressor method)": [[306, "nilearn.decoding.DecoderRegressor.get_params", false]], "get_params() (nilearn.decoding.fremclassifier method)": [[307, "nilearn.decoding.FREMClassifier.get_params", false]], "get_params() (nilearn.decoding.fremregressor method)": [[308, "nilearn.decoding.FREMRegressor.get_params", false]], "get_params() (nilearn.decoding.searchlight method)": [[309, "nilearn.decoding.SearchLight.get_params", false]], "get_params() (nilearn.decoding.spacenetclassifier method)": [[310, "nilearn.decoding.SpaceNetClassifier.get_params", false]], "get_params() (nilearn.decoding.spacenetregressor method)": [[311, "nilearn.decoding.SpaceNetRegressor.get_params", false]], "get_params() (nilearn.decomposition.canica method)": [[312, "nilearn.decomposition.CanICA.get_params", false]], "get_params() (nilearn.decomposition.dictlearning method)": [[313, "nilearn.decomposition.DictLearning.get_params", false]], "get_params() (nilearn.glm.first_level.firstlevelmodel method)": [[327, "nilearn.glm.first_level.FirstLevelModel.get_params", false]], "get_params() (nilearn.glm.second_level.secondlevelmodel method)": [[340, "nilearn.glm.second_level.SecondLevelModel.get_params", false]], "get_params() (nilearn.maskers.basemasker method)": [[371, "nilearn.maskers.BaseMasker.get_params", false]], "get_params() (nilearn.maskers.multiniftilabelsmasker method)": [[372, "nilearn.maskers.MultiNiftiLabelsMasker.get_params", false]], "get_params() (nilearn.maskers.multiniftimapsmasker method)": [[373, "nilearn.maskers.MultiNiftiMapsMasker.get_params", false]], "get_params() (nilearn.maskers.multiniftimasker method)": [[374, "nilearn.maskers.MultiNiftiMasker.get_params", false]], "get_params() (nilearn.maskers.niftilabelsmasker method)": [[375, "nilearn.maskers.NiftiLabelsMasker.get_params", false]], "get_params() (nilearn.maskers.niftimapsmasker method)": [[376, "nilearn.maskers.NiftiMapsMasker.get_params", false]], "get_params() (nilearn.maskers.niftimasker method)": [[377, "nilearn.maskers.NiftiMasker.get_params", false]], "get_params() (nilearn.maskers.niftispheresmasker method)": [[378, "nilearn.maskers.NiftiSpheresMasker.get_params", false]], "get_params() (nilearn.maskers.surfacelabelsmasker method)": [[379, "nilearn.maskers.SurfaceLabelsMasker.get_params", false]], "get_params() (nilearn.maskers.surfacemapsmasker method)": [[380, "nilearn.maskers.SurfaceMapsMasker.get_params", false]], "get_params() (nilearn.maskers.surfacemasker method)": [[381, "nilearn.maskers.SurfaceMasker.get_params", false]], "get_params() (nilearn.regions.hierarchicalkmeans method)": [[454, "nilearn.regions.HierarchicalKMeans.get_params", false]], "get_params() (nilearn.regions.parcellations method)": [[455, "nilearn.regions.Parcellations.get_params", false]], "get_params() (nilearn.regions.regionextractor method)": [[457, "nilearn.regions.RegionExtractor.get_params", false]], "get_params() (nilearn.regions.rena method)": [[456, "nilearn.regions.ReNA.get_params", false]], "get_projector() (in module nilearn.plotting.displays)": [[420, "nilearn.plotting.displays.get_projector", false]], "get_slicer() (in module nilearn.plotting.displays)": [[421, "nilearn.plotting.displays.get_slicer", false]], "get_standalone() (nilearn.reporting.htmlreport method)": [[465, "nilearn.reporting.HTMLReport.get_standalone", false]], "glassbrainaxes (class in nilearn.plotting.displays)": [[395, "nilearn.plotting.displays.GlassBrainAxes", false]], "glm": [[185, "term-GLM", true]], "glover_dispersion_derivative() (in module nilearn.glm.first_level)": [[331, "nilearn.glm.first_level.glover_dispersion_derivative", false]], "glover_hrf() (in module nilearn.glm.first_level)": [[332, "nilearn.glm.first_level.glover_hrf", false]], "glover_time_derivative() (in module nilearn.glm.first_level)": [[333, "nilearn.glm.first_level.glover_time_derivative", false]], "group_sparse_covariance() (in module nilearn.connectome)": [[243, "nilearn.connectome.group_sparse_covariance", false]], "groupsparsecovariance (class in nilearn.connectome)": [[240, "nilearn.connectome.GroupSparseCovariance", false]], "groupsparsecovariancecv (class in nilearn.connectome)": [[241, "nilearn.connectome.GroupSparseCovarianceCV", false]], "height (nilearn.reporting.htmlreport property)": [[465, "nilearn.reporting.HTMLReport.height", false]], "hierarchicalkmeans (class in nilearn.regions)": [[454, "nilearn.regions.HierarchicalKMeans", false]], "high_variance_confounds() (in module nilearn.image)": [[351, "nilearn.image.high_variance_confounds", false]], "high_variance_confounds() (in module nilearn.signal)": [[470, "nilearn.signal.high_variance_confounds", false]], "hrf": [[185, "term-HRF", true]], "htmlreport (class in nilearn.reporting)": [[465, "nilearn.reporting.HTMLReport", false]], "ica": [[185, "term-ICA", true]], "img_to_signals_labels() (in module nilearn.regions)": [[460, "nilearn.regions.img_to_signals_labels", false]], "img_to_signals_maps() (in module nilearn.regions)": [[461, "nilearn.regions.img_to_signals_maps", false]], "index_img() (in module nilearn.image)": [[352, "nilearn.image.index_img", false]], "init_with_figure() (nilearn.plotting.displays.baseslicer class method)": [[393, "nilearn.plotting.displays.BaseSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.lprojector class method)": [[396, "nilearn.plotting.displays.LProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.lrprojector class method)": [[397, "nilearn.plotting.displays.LRProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.lyrprojector class method)": [[398, "nilearn.plotting.displays.LYRProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.lyrzprojector class method)": [[399, "nilearn.plotting.displays.LYRZProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.lzrprojector class method)": [[400, "nilearn.plotting.displays.LZRProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.lzryprojector class method)": [[401, "nilearn.plotting.displays.LZRYProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.mosaicslicer class method)": [[402, "nilearn.plotting.displays.MosaicSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.orthoprojector class method)": [[403, "nilearn.plotting.displays.OrthoProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.orthoslicer class method)": [[404, "nilearn.plotting.displays.OrthoSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.rprojector class method)": [[406, "nilearn.plotting.displays.RProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.tiledslicer class method)": [[407, "nilearn.plotting.displays.TiledSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.xprojector class method)": [[408, "nilearn.plotting.displays.XProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.xslicer class method)": [[409, "nilearn.plotting.displays.XSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.xzprojector class method)": [[410, "nilearn.plotting.displays.XZProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.xzslicer class method)": [[411, "nilearn.plotting.displays.XZSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.yprojector class method)": [[412, "nilearn.plotting.displays.YProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.yslicer class method)": [[413, "nilearn.plotting.displays.YSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.yxprojector class method)": [[414, "nilearn.plotting.displays.YXProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.yxslicer class method)": [[415, "nilearn.plotting.displays.YXSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.yzprojector class method)": [[416, "nilearn.plotting.displays.YZProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.yzslicer class method)": [[417, "nilearn.plotting.displays.YZSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.zprojector class method)": [[418, "nilearn.plotting.displays.ZProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.zslicer class method)": [[419, "nilearn.plotting.displays.ZSlicer.init_with_figure", false]], "initialize() (nilearn.glm.armodel method)": [[314, "nilearn.glm.ARModel.initialize", false]], "initialize() (nilearn.glm.olsmodel method)": [[318, "nilearn.glm.OLSModel.initialize", false]], "inmemorymesh (class in nilearn.surface)": [[472, "nilearn.surface.InMemoryMesh", false]], "intersect_masks() (in module nilearn.masking)": [[389, "nilearn.masking.intersect_masks", false]], "inverse_transform() (nilearn.connectome.connectivitymeasure method)": [[239, "nilearn.connectome.ConnectivityMeasure.inverse_transform", false]], "inverse_transform() (nilearn.decomposition.canica method)": [[312, "nilearn.decomposition.CanICA.inverse_transform", false]], "inverse_transform() (nilearn.decomposition.dictlearning method)": [[313, "nilearn.decomposition.DictLearning.inverse_transform", false]], "inverse_transform() (nilearn.maskers.basemasker method)": [[371, "nilearn.maskers.BaseMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.multiniftilabelsmasker method)": [[372, "nilearn.maskers.MultiNiftiLabelsMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.multiniftimapsmasker method)": [[373, "nilearn.maskers.MultiNiftiMapsMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.multiniftimasker method)": [[374, "nilearn.maskers.MultiNiftiMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.niftilabelsmasker method)": [[375, "nilearn.maskers.NiftiLabelsMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.niftimapsmasker method)": [[376, "nilearn.maskers.NiftiMapsMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.niftimasker method)": [[377, "nilearn.maskers.NiftiMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.niftispheresmasker method)": [[378, "nilearn.maskers.NiftiSpheresMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.surfacelabelsmasker method)": [[379, "nilearn.maskers.SurfaceLabelsMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.surfacemapsmasker method)": [[380, "nilearn.maskers.SurfaceMapsMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.surfacemasker method)": [[381, "nilearn.maskers.SurfaceMasker.inverse_transform", false]], "inverse_transform() (nilearn.regions.hierarchicalkmeans method)": [[454, "nilearn.regions.HierarchicalKMeans.inverse_transform", false]], "inverse_transform() (nilearn.regions.parcellations method)": [[455, "nilearn.regions.Parcellations.inverse_transform", false]], "inverse_transform() (nilearn.regions.regionextractor method)": [[457, "nilearn.regions.RegionExtractor.inverse_transform", false]], "inverse_transform() (nilearn.regions.rena method)": [[456, "nilearn.regions.ReNA.inverse_transform", false]], "iter_img() (in module nilearn.image)": [[353, "nilearn.image.iter_img", false]], "labels_ (nilearn.maskers.multiniftilabelsmasker property)": [[372, "nilearn.maskers.MultiNiftiLabelsMasker.labels_", false]], "labels_ (nilearn.maskers.niftilabelsmasker property)": [[375, "nilearn.maskers.NiftiLabelsMasker.labels_", false]], "labels_ (nilearn.maskers.surfacelabelsmasker property)": [[379, "nilearn.maskers.SurfaceLabelsMasker.labels_", false]], "largest_connected_component_img() (in module nilearn.image)": [[354, "nilearn.image.largest_connected_component_img", false]], "likelihoodmodelresults (class in nilearn.glm)": [[317, "nilearn.glm.LikelihoodModelResults", false]], "load_confounds() (in module nilearn.interfaces.fmriprep)": [[368, "nilearn.interfaces.fmriprep.load_confounds", false]], "load_confounds_strategy() (in module nilearn.interfaces.fmriprep)": [[369, "nilearn.interfaces.fmriprep.load_confounds_strategy", false]], "load_fsaverage() (in module nilearn.datasets)": [[293, "nilearn.datasets.load_fsaverage", false]], "load_fsaverage_data() (in module nilearn.datasets)": [[294, "nilearn.datasets.load_fsaverage_data", false]], "load_img() (in module nilearn.image)": [[355, "nilearn.image.load_img", false]], "load_mni152_brain_mask() (in module nilearn.datasets)": [[295, "nilearn.datasets.load_mni152_brain_mask", false]], "load_mni152_gm_mask() (in module nilearn.datasets)": [[296, "nilearn.datasets.load_mni152_gm_mask", false]], "load_mni152_gm_template() (in module nilearn.datasets)": [[297, "nilearn.datasets.load_mni152_gm_template", false]], "load_mni152_template() (in module nilearn.datasets)": [[298, "nilearn.datasets.load_mni152_template", false]], "load_mni152_wm_mask() (in module nilearn.datasets)": [[299, "nilearn.datasets.load_mni152_wm_mask", false]], "load_mni152_wm_template() (in module nilearn.datasets)": [[300, "nilearn.datasets.load_mni152_wm_template", false]], "load_nki() (in module nilearn.datasets)": [[301, "nilearn.datasets.load_nki", false]], "load_sample_motor_activation_image() (in module nilearn.datasets)": [[302, "nilearn.datasets.load_sample_motor_activation_image", false]], "load_surf_data() (in module nilearn.surface)": [[477, "nilearn.surface.load_surf_data", false]], "load_surf_mesh() (in module nilearn.surface)": [[478, "nilearn.surface.load_surf_mesh", false]], "loaded() (nilearn.surface.filemesh method)": [[471, "nilearn.surface.FileMesh.loaded", false]], "logl() (nilearn.glm.armodel method)": [[314, "nilearn.glm.ARModel.logL", false]], "logl() (nilearn.glm.likelihoodmodelresults method)": [[317, "nilearn.glm.LikelihoodModelResults.logL", false]], "logl() (nilearn.glm.olsmodel method)": [[318, "nilearn.glm.OLSModel.logL", false]], "logl() (nilearn.glm.regressionresults method)": [[319, "nilearn.glm.RegressionResults.logL", false]], "logl() (nilearn.glm.simpleregressionresults method)": [[320, "nilearn.glm.SimpleRegressionResults.logL", false]], "lprojector (class in nilearn.plotting.displays)": [[396, "nilearn.plotting.displays.LProjector", false]], "lrprojector (class in nilearn.plotting.displays)": [[397, "nilearn.plotting.displays.LRProjector", false]], "lyrprojector (class in nilearn.plotting.displays)": [[398, "nilearn.plotting.displays.LYRProjector", false]], "lyrzprojector (class in nilearn.plotting.displays)": [[399, "nilearn.plotting.displays.LYRZProjector", false]], "lzrprojector (class in nilearn.plotting.displays)": [[400, "nilearn.plotting.displays.LZRProjector", false]], "lzryprojector (class in nilearn.plotting.displays)": [[401, "nilearn.plotting.displays.LZRYProjector", false]], "make_first_level_design_matrix() (in module nilearn.glm.first_level)": [[334, "nilearn.glm.first_level.make_first_level_design_matrix", false]], "make_glm_report() (in module nilearn.reporting)": [[467, "nilearn.reporting.make_glm_report", false]], "make_second_level_design_matrix() (in module nilearn.glm.second_level)": [[341, "nilearn.glm.second_level.make_second_level_design_matrix", false]], "math_img() (in module nilearn.image)": [[356, "nilearn.image.math_img", false]], "mean_img() (in module nilearn.image)": [[357, "nilearn.image.mean_img", false]], "mean_scaling() (in module nilearn.glm.first_level)": [[335, "nilearn.glm.first_level.mean_scaling", false]], "meg": [[185, "term-MEG", true]], "mesh": [[185, "term-mesh", true]], "mni": [[185, "term-MNI", true]], "module": [[193, "module-nilearn.connectome", false], [194, "module-nilearn.datasets", false], [195, "module-nilearn.decoding", false], [196, "module-nilearn.decomposition", false], [482, "module-nilearn.glm", false], [482, "module-nilearn.glm.first_level", false], [482, "module-nilearn.glm.second_level", false], [483, "module-nilearn.image", false], [485, "module-nilearn.interfaces", false], [485, "module-nilearn.interfaces.bids", false], [485, "module-nilearn.interfaces.fmriprep", false], [485, "module-nilearn.interfaces.fsl", false], [486, "module-nilearn.maskers", false], [487, "module-nilearn.masking", false], [488, "module-nilearn.mass_univariate", false], [489, "module-nilearn.plotting", false], [489, "module-nilearn.plotting.displays", false], [489, "module-nilearn.plotting.img_comparison", false], [491, "module-nilearn.regions", false], [492, "module-nilearn.reporting", false], [493, "module-nilearn.signal", false], [494, "module-nilearn.surface", false]], "mosaicslicer (class in nilearn.plotting.displays)": [[402, "nilearn.plotting.displays.MosaicSlicer", false]], "mse() (nilearn.glm.regressionresults method)": [[319, "nilearn.glm.RegressionResults.MSE", false]], "multiniftilabelsmasker (class in nilearn.maskers)": [[372, "nilearn.maskers.MultiNiftiLabelsMasker", false]], "multiniftimapsmasker (class in nilearn.maskers)": [[373, "nilearn.maskers.MultiNiftiMapsMasker", false]], "multiniftimasker (class in nilearn.maskers)": [[374, "nilearn.maskers.MultiNiftiMasker", false]], "mvpa": [[185, "term-MVPA", true]], "n_elements_ (nilearn.maskers.multiniftilabelsmasker property)": [[372, "nilearn.maskers.MultiNiftiLabelsMasker.n_elements_", false]], "n_elements_ (nilearn.maskers.niftilabelsmasker property)": [[375, "nilearn.maskers.NiftiLabelsMasker.n_elements_", false]], "n_elements_ (nilearn.maskers.surfacelabelsmasker property)": [[379, "nilearn.maskers.SurfaceLabelsMasker.n_elements_", false]], "n_vertices (nilearn.surface.filemesh attribute)": [[471, "nilearn.surface.FileMesh.n_vertices", false]], "n_vertices (nilearn.surface.inmemorymesh attribute)": [[472, "nilearn.surface.InMemoryMesh.n_vertices", false]], "n_vertices (nilearn.surface.polymesh attribute)": [[474, "nilearn.surface.PolyMesh.n_vertices", false]], "n_vertices (nilearn.surface.surfacemesh attribute)": [[476, "nilearn.surface.SurfaceMesh.n_vertices", false]], "neurovault": [[185, "term-Neurovault", true]], "new_img_like() (in module nilearn.image)": [[358, "nilearn.image.new_img_like", false]], "nifti_maps_masker_ (nilearn.decomposition.canica property)": [[312, "nilearn.decomposition.CanICA.nifti_maps_masker_", false]], "nifti_maps_masker_ (nilearn.decomposition.dictlearning property)": [[313, "nilearn.decomposition.DictLearning.nifti_maps_masker_", false]], "nifti_maps_masker_ (nilearn.regions.parcellations property)": [[455, "nilearn.regions.Parcellations.nifti_maps_masker_", false]], "niftilabelsmasker (class in nilearn.maskers)": [[375, "nilearn.maskers.NiftiLabelsMasker", false]], "niftimapsmasker (class in nilearn.maskers)": [[376, "nilearn.maskers.NiftiMapsMasker", false]], "niftimasker (class in nilearn.maskers)": [[377, "nilearn.maskers.NiftiMasker", false]], "niftispheresmasker (class in nilearn.maskers)": [[378, "nilearn.maskers.NiftiSpheresMasker", false]], "nilearn.connectome": [[193, "module-nilearn.connectome", false]], "nilearn.datasets": [[194, "module-nilearn.datasets", false]], "nilearn.decoding": [[195, "module-nilearn.decoding", false]], "nilearn.decomposition": [[196, "module-nilearn.decomposition", false]], "nilearn.glm": [[482, "module-nilearn.glm", false]], "nilearn.glm.first_level": [[482, "module-nilearn.glm.first_level", false]], "nilearn.glm.second_level": [[482, "module-nilearn.glm.second_level", false]], "nilearn.image": [[483, "module-nilearn.image", false]], "nilearn.interfaces": [[485, "module-nilearn.interfaces", false]], "nilearn.interfaces.bids": [[485, "module-nilearn.interfaces.bids", false]], "nilearn.interfaces.fmriprep": [[485, "module-nilearn.interfaces.fmriprep", false]], "nilearn.interfaces.fsl": [[485, "module-nilearn.interfaces.fsl", false]], "nilearn.maskers": [[486, "module-nilearn.maskers", false]], "nilearn.masking": [[487, "module-nilearn.masking", false]], "nilearn.mass_univariate": [[488, "module-nilearn.mass_univariate", false]], "nilearn.plotting": [[489, "module-nilearn.plotting", false]], "nilearn.plotting.displays": [[489, "module-nilearn.plotting.displays", false]], "nilearn.plotting.img_comparison": [[489, "module-nilearn.plotting.img_comparison", false]], "nilearn.regions": [[491, "module-nilearn.regions", false]], "nilearn.reporting": [[492, "module-nilearn.reporting", false]], "nilearn.signal": [[493, "module-nilearn.signal", false]], "nilearn.surface": [[494, "module-nilearn.surface", false]], "non_parametric_inference() (in module nilearn.glm.second_level)": [[342, "nilearn.glm.second_level.non_parametric_inference", false]], "normalized_residuals() (nilearn.glm.regressionresults method)": [[319, "nilearn.glm.RegressionResults.normalized_residuals", false]], "normalized_residuals() (nilearn.glm.simpleregressionresults method)": [[320, "nilearn.glm.SimpleRegressionResults.normalized_residuals", false]], "olsmodel (class in nilearn.glm)": [[318, "nilearn.glm.OLSModel", false]], "one_minus_pvalue() (nilearn.glm.contrast method)": [[315, "nilearn.glm.Contrast.one_minus_pvalue", false]], "open_in_browser() (nilearn.reporting.htmlreport method)": [[465, "nilearn.reporting.HTMLReport.open_in_browser", false]], "opening": [[185, "term-Opening", true]], "orthoprojector (class in nilearn.plotting.displays)": [[403, "nilearn.plotting.displays.OrthoProjector", false]], "orthoslicer (class in nilearn.plotting.displays)": [[404, "nilearn.plotting.displays.OrthoSlicer", false]], "p_value() (nilearn.glm.contrast method)": [[315, "nilearn.glm.Contrast.p_value", false]], "parameter estimate": [[185, "term-Parameter-estimate", true]], "parcellation": [[185, "term-parcellation", true]], "parcellations (class in nilearn.regions)": [[455, "nilearn.regions.Parcellations", false]], "parse_bids_filename() (in module nilearn.interfaces.bids)": [[366, "nilearn.interfaces.bids.parse_bids_filename", false]], "patch_openneuro_dataset() (in module nilearn.datasets)": [[303, "nilearn.datasets.patch_openneuro_dataset", false]], "permuted_ols() (in module nilearn.mass_univariate)": [[391, "nilearn.mass_univariate.permuted_ols", false]], "plot_anat() (in module nilearn.plotting)": [[428, "nilearn.plotting.plot_anat", false]], "plot_bland_altman() (in module nilearn.plotting.img_comparison)": [[426, "nilearn.plotting.img_comparison.plot_bland_altman", false]], "plot_carpet() (in module nilearn.plotting)": [[429, "nilearn.plotting.plot_carpet", false]], "plot_connectome() (in module nilearn.plotting)": [[430, "nilearn.plotting.plot_connectome", false]], "plot_contrast_matrix() (in module nilearn.plotting)": [[431, "nilearn.plotting.plot_contrast_matrix", false]], "plot_design_matrix() (in module nilearn.plotting)": [[432, "nilearn.plotting.plot_design_matrix", false]], "plot_design_matrix_correlation() (in module nilearn.plotting)": [[433, "nilearn.plotting.plot_design_matrix_correlation", false]], "plot_epi() (in module nilearn.plotting)": [[434, "nilearn.plotting.plot_epi", false]], "plot_event() (in module nilearn.plotting)": [[435, "nilearn.plotting.plot_event", false]], "plot_glass_brain() (in module nilearn.plotting)": [[436, "nilearn.plotting.plot_glass_brain", false]], "plot_img() (in module nilearn.plotting)": [[437, "nilearn.plotting.plot_img", false]], "plot_img_comparison() (in module nilearn.plotting.img_comparison)": [[427, "nilearn.plotting.img_comparison.plot_img_comparison", false]], "plot_img_on_surf() (in module nilearn.plotting)": [[438, "nilearn.plotting.plot_img_on_surf", false]], "plot_markers() (in module nilearn.plotting)": [[439, "nilearn.plotting.plot_markers", false]], "plot_matrix() (in module nilearn.plotting)": [[440, "nilearn.plotting.plot_matrix", false]], "plot_prob_atlas() (in module nilearn.plotting)": [[441, "nilearn.plotting.plot_prob_atlas", false]], "plot_roi() (in module nilearn.plotting)": [[442, "nilearn.plotting.plot_roi", false]], "plot_stat_map() (in module nilearn.plotting)": [[443, "nilearn.plotting.plot_stat_map", false]], "plot_surf() (in module nilearn.plotting)": [[444, "nilearn.plotting.plot_surf", false]], "plot_surf_contours() (in module nilearn.plotting)": [[445, "nilearn.plotting.plot_surf_contours", false]], "plot_surf_roi() (in module nilearn.plotting)": [[446, "nilearn.plotting.plot_surf_roi", false]], "plot_surf_stat_map() (in module nilearn.plotting)": [[447, "nilearn.plotting.plot_surf_stat_map", false]], "plotlysurfacefigure (class in nilearn.plotting.displays)": [[405, "nilearn.plotting.displays.PlotlySurfaceFigure", false]], "polydata (class in nilearn.surface)": [[473, "nilearn.surface.PolyData", false]], "polymesh (class in nilearn.surface)": [[474, "nilearn.surface.PolyMesh", false]], "prec_to_partial() (in module nilearn.connectome)": [[244, "nilearn.connectome.prec_to_partial", false]], "predict() (nilearn.decoding.decoder method)": [[305, "nilearn.decoding.Decoder.predict", false]], "predict() (nilearn.decoding.decoderregressor method)": [[306, "nilearn.decoding.DecoderRegressor.predict", false]], "predict() (nilearn.decoding.fremclassifier method)": [[307, "nilearn.decoding.FREMClassifier.predict", false]], "predict() (nilearn.decoding.fremregressor method)": [[308, "nilearn.decoding.FREMRegressor.predict", false]], "predict() (nilearn.decoding.spacenetclassifier method)": [[310, "nilearn.decoding.SpaceNetClassifier.predict", false]], "predict() (nilearn.decoding.spacenetregressor method)": [[311, "nilearn.decoding.SpaceNetRegressor.predict", false]], "predicted() (nilearn.glm.first_level.firstlevelmodel method)": [[327, "nilearn.glm.first_level.FirstLevelModel.predicted", false]], "predicted() (nilearn.glm.regressionresults method)": [[319, "nilearn.glm.RegressionResults.predicted", false]], "predicted() (nilearn.glm.second_level.secondlevelmodel method)": [[340, "nilearn.glm.second_level.SecondLevelModel.predicted", false]], "predicted() (nilearn.glm.simpleregressionresults method)": [[320, "nilearn.glm.SimpleRegressionResults.predicted", false]], "predictive modeling": [[185, "term-predictive-modeling", true]], "probabilistic atlas": [[185, "term-Probabilistic-atlas", true]], "r_square() (nilearn.glm.first_level.firstlevelmodel method)": [[327, "nilearn.glm.first_level.FirstLevelModel.r_square", false]], "r_square() (nilearn.glm.regressionresults method)": [[319, "nilearn.glm.RegressionResults.r_square", false]], "r_square() (nilearn.glm.second_level.secondlevelmodel method)": [[340, "nilearn.glm.second_level.SecondLevelModel.r_square", false]], "recursive_neighbor_agglomeration() (in module nilearn.regions)": [[462, "nilearn.regions.recursive_neighbor_agglomeration", false]], "region_ids_ (nilearn.maskers.multiniftilabelsmasker property)": [[372, "nilearn.maskers.MultiNiftiLabelsMasker.region_ids_", false]], "region_ids_ (nilearn.maskers.niftilabelsmasker property)": [[375, "nilearn.maskers.NiftiLabelsMasker.region_ids_", false]], "region_ids_ (nilearn.maskers.surfacelabelsmasker property)": [[379, "nilearn.maskers.SurfaceLabelsMasker.region_ids_", false]], "region_names_ (nilearn.maskers.multiniftilabelsmasker property)": [[372, "nilearn.maskers.MultiNiftiLabelsMasker.region_names_", false]], "region_names_ (nilearn.maskers.niftilabelsmasker property)": [[375, "nilearn.maskers.NiftiLabelsMasker.region_names_", false]], "region_names_ (nilearn.maskers.surfacelabelsmasker property)": [[379, "nilearn.maskers.SurfaceLabelsMasker.region_names_", false]], "regionextractor (class in nilearn.regions)": [[457, "nilearn.regions.RegionExtractor", false]], "regression": [[185, "term-regression", true]], "regressionresults (class in nilearn.glm)": [[319, "nilearn.glm.RegressionResults", false]], "rena": [[185, "term-ReNA", true]], "rena (class in nilearn.regions)": [[456, "nilearn.regions.ReNA", false]], "reorder_img() (in module nilearn.image)": [[359, "nilearn.image.reorder_img", false]], "resample_img() (in module nilearn.image)": [[360, "nilearn.image.resample_img", false]], "resample_to_img() (in module nilearn.image)": [[361, "nilearn.image.resample_to_img", false]], "residuals() (nilearn.glm.first_level.firstlevelmodel method)": [[327, "nilearn.glm.first_level.FirstLevelModel.residuals", false]], "residuals() (nilearn.glm.regressionresults method)": [[319, "nilearn.glm.RegressionResults.residuals", false]], "residuals() (nilearn.glm.second_level.secondlevelmodel method)": [[340, "nilearn.glm.second_level.SecondLevelModel.residuals", false]], "residuals() (nilearn.glm.simpleregressionresults method)": [[320, "nilearn.glm.SimpleRegressionResults.residuals", false]], "resize() (nilearn.reporting.htmlreport method)": [[465, "nilearn.reporting.HTMLReport.resize", false]], "resting-state": [[185, "term-resting-state", true]], "roc": [[185, "term-ROC", true]], "rprojector (class in nilearn.plotting.displays)": [[406, "nilearn.plotting.displays.RProjector", false]], "run_glm() (in module nilearn.glm.first_level)": [[336, "nilearn.glm.first_level.run_glm", false]], "save_as_html() (nilearn.reporting.htmlreport method)": [[465, "nilearn.reporting.HTMLReport.save_as_html", false]], "save_glm_to_bids() (in module nilearn.interfaces.bids)": [[367, "nilearn.interfaces.bids.save_glm_to_bids", false]], "savefig() (nilearn.plotting.displays.baseslicer method)": [[393, "nilearn.plotting.displays.BaseSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.lprojector method)": [[396, "nilearn.plotting.displays.LProjector.savefig", false]], "savefig() (nilearn.plotting.displays.lrprojector method)": [[397, "nilearn.plotting.displays.LRProjector.savefig", false]], "savefig() (nilearn.plotting.displays.lyrprojector method)": [[398, "nilearn.plotting.displays.LYRProjector.savefig", false]], "savefig() (nilearn.plotting.displays.lyrzprojector method)": [[399, "nilearn.plotting.displays.LYRZProjector.savefig", false]], "savefig() (nilearn.plotting.displays.lzrprojector method)": [[400, "nilearn.plotting.displays.LZRProjector.savefig", false]], "savefig() (nilearn.plotting.displays.lzryprojector method)": [[401, "nilearn.plotting.displays.LZRYProjector.savefig", false]], "savefig() (nilearn.plotting.displays.mosaicslicer method)": [[402, "nilearn.plotting.displays.MosaicSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.orthoprojector method)": [[403, "nilearn.plotting.displays.OrthoProjector.savefig", false]], "savefig() (nilearn.plotting.displays.orthoslicer method)": [[404, "nilearn.plotting.displays.OrthoSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.plotlysurfacefigure method)": [[405, "nilearn.plotting.displays.PlotlySurfaceFigure.savefig", false]], "savefig() (nilearn.plotting.displays.rprojector method)": [[406, "nilearn.plotting.displays.RProjector.savefig", false]], "savefig() (nilearn.plotting.displays.tiledslicer method)": [[407, "nilearn.plotting.displays.TiledSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.xprojector method)": [[408, "nilearn.plotting.displays.XProjector.savefig", false]], "savefig() (nilearn.plotting.displays.xslicer method)": [[409, "nilearn.plotting.displays.XSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.xzprojector method)": [[410, "nilearn.plotting.displays.XZProjector.savefig", false]], "savefig() (nilearn.plotting.displays.xzslicer method)": [[411, "nilearn.plotting.displays.XZSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.yprojector method)": [[412, "nilearn.plotting.displays.YProjector.savefig", false]], "savefig() (nilearn.plotting.displays.yslicer method)": [[413, "nilearn.plotting.displays.YSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.yxprojector method)": [[414, "nilearn.plotting.displays.YXProjector.savefig", false]], "savefig() (nilearn.plotting.displays.yxslicer method)": [[415, "nilearn.plotting.displays.YXSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.yzprojector method)": [[416, "nilearn.plotting.displays.YZProjector.savefig", false]], "savefig() (nilearn.plotting.displays.yzslicer method)": [[417, "nilearn.plotting.displays.YZSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.zprojector method)": [[418, "nilearn.plotting.displays.ZProjector.savefig", false]], "savefig() (nilearn.plotting.displays.zslicer method)": [[419, "nilearn.plotting.displays.ZSlicer.savefig", false]], "score() (nilearn.decoding.decoder method)": [[305, "nilearn.decoding.Decoder.score", false]], "score() (nilearn.decoding.decoderregressor method)": [[306, "nilearn.decoding.DecoderRegressor.score", false]], "score() (nilearn.decoding.fremclassifier method)": [[307, "nilearn.decoding.FREMClassifier.score", false]], "score() (nilearn.decoding.fremregressor method)": [[308, "nilearn.decoding.FREMRegressor.score", false]], "score() (nilearn.decoding.spacenetclassifier method)": [[310, "nilearn.decoding.SpaceNetClassifier.score", false]], "score() (nilearn.decoding.spacenetregressor method)": [[311, "nilearn.decoding.SpaceNetRegressor.score", false]], "score() (nilearn.decomposition.canica method)": [[312, "nilearn.decomposition.CanICA.score", false]], "score() (nilearn.decomposition.dictlearning method)": [[313, "nilearn.decomposition.DictLearning.score", false]], "score() (nilearn.regions.parcellations method)": [[455, "nilearn.regions.Parcellations.score", false]], "scores_img_ (nilearn.decoding.searchlight property)": [[309, "nilearn.decoding.SearchLight.scores_img_", false]], "searchlight": [[185, "term-Searchlight", true]], "searchlight (class in nilearn.decoding)": [[309, "nilearn.decoding.SearchLight", false]], "secondlevelmodel (class in nilearn.glm.second_level)": [[340, "nilearn.glm.second_level.SecondLevelModel", false]], "select_from_index() (in module nilearn.datasets)": [[304, "nilearn.datasets.select_from_index", false]], "set_fit_request() (nilearn.connectome.groupsparsecovariance method)": [[240, "nilearn.connectome.GroupSparseCovariance.set_fit_request", false]], "set_fit_request() (nilearn.connectome.groupsparsecovariancecv method)": [[241, "nilearn.connectome.GroupSparseCovarianceCV.set_fit_request", false]], "set_fit_request() (nilearn.decoding.decoder method)": [[305, "nilearn.decoding.Decoder.set_fit_request", false]], "set_fit_request() (nilearn.decoding.decoderregressor method)": [[306, "nilearn.decoding.DecoderRegressor.set_fit_request", false]], "set_fit_request() (nilearn.decoding.fremclassifier method)": [[307, "nilearn.decoding.FREMClassifier.set_fit_request", false]], "set_fit_request() (nilearn.decoding.fremregressor method)": [[308, "nilearn.decoding.FREMRegressor.set_fit_request", false]], "set_fit_request() (nilearn.decoding.searchlight method)": [[309, "nilearn.decoding.SearchLight.set_fit_request", false]], "set_fit_request() (nilearn.decoding.spacenetclassifier method)": [[310, "nilearn.decoding.SpaceNetClassifier.set_fit_request", false]], "set_fit_request() (nilearn.decoding.spacenetregressor method)": [[311, "nilearn.decoding.SpaceNetRegressor.set_fit_request", false]], "set_fit_request() (nilearn.decomposition.canica method)": [[312, "nilearn.decomposition.CanICA.set_fit_request", false]], "set_fit_request() (nilearn.decomposition.dictlearning method)": [[313, "nilearn.decomposition.DictLearning.set_fit_request", false]], "set_fit_request() (nilearn.glm.first_level.firstlevelmodel method)": [[327, "nilearn.glm.first_level.FirstLevelModel.set_fit_request", false]], "set_fit_request() (nilearn.glm.second_level.secondlevelmodel method)": [[340, "nilearn.glm.second_level.SecondLevelModel.set_fit_request", false]], "set_fit_request() (nilearn.maskers.basemasker method)": [[371, "nilearn.maskers.BaseMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.multiniftilabelsmasker method)": [[372, "nilearn.maskers.MultiNiftiLabelsMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.multiniftimapsmasker method)": [[373, "nilearn.maskers.MultiNiftiMapsMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.multiniftimasker method)": [[374, "nilearn.maskers.MultiNiftiMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.niftilabelsmasker method)": [[375, "nilearn.maskers.NiftiLabelsMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.niftimapsmasker method)": [[376, "nilearn.maskers.NiftiMapsMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.niftimasker method)": [[377, "nilearn.maskers.NiftiMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.niftispheresmasker method)": [[378, "nilearn.maskers.NiftiSpheresMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.surfacelabelsmasker method)": [[379, "nilearn.maskers.SurfaceLabelsMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.surfacemapsmasker method)": [[380, "nilearn.maskers.SurfaceMapsMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.surfacemasker method)": [[381, "nilearn.maskers.SurfaceMasker.set_fit_request", false]], "set_fit_request() (nilearn.regions.parcellations method)": [[455, "nilearn.regions.Parcellations.set_fit_request", false]], "set_fit_request() (nilearn.regions.regionextractor method)": [[457, "nilearn.regions.RegionExtractor.set_fit_request", false]], "set_inverse_transform_request() (nilearn.connectome.connectivitymeasure method)": [[239, "nilearn.connectome.ConnectivityMeasure.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.decomposition.canica method)": [[312, "nilearn.decomposition.CanICA.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.decomposition.dictlearning method)": [[313, "nilearn.decomposition.DictLearning.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.multiniftilabelsmasker method)": [[372, "nilearn.maskers.MultiNiftiLabelsMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.multiniftimapsmasker method)": [[373, "nilearn.maskers.MultiNiftiMapsMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.niftilabelsmasker method)": [[375, "nilearn.maskers.NiftiLabelsMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.niftimapsmasker method)": [[376, "nilearn.maskers.NiftiMapsMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.niftispheresmasker method)": [[378, "nilearn.maskers.NiftiSpheresMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.surfacelabelsmasker method)": [[379, "nilearn.maskers.SurfaceLabelsMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.surfacemapsmasker method)": [[380, "nilearn.maskers.SurfaceMapsMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.surfacemasker method)": [[381, "nilearn.maskers.SurfaceMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.regions.hierarchicalkmeans method)": [[454, "nilearn.regions.HierarchicalKMeans.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.regions.parcellations method)": [[455, "nilearn.regions.Parcellations.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.regions.regionextractor method)": [[457, "nilearn.regions.RegionExtractor.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.regions.rena method)": [[456, "nilearn.regions.ReNA.set_inverse_transform_request", false]], "set_params() (nilearn.connectome.connectivitymeasure method)": [[239, "nilearn.connectome.ConnectivityMeasure.set_params", false]], "set_params() (nilearn.connectome.groupsparsecovariance method)": [[240, "nilearn.connectome.GroupSparseCovariance.set_params", false]], "set_params() (nilearn.connectome.groupsparsecovariancecv method)": [[241, "nilearn.connectome.GroupSparseCovarianceCV.set_params", false]], "set_params() (nilearn.decoding.decoder method)": [[305, "nilearn.decoding.Decoder.set_params", false]], "set_params() (nilearn.decoding.decoderregressor method)": [[306, "nilearn.decoding.DecoderRegressor.set_params", false]], "set_params() (nilearn.decoding.fremclassifier method)": [[307, "nilearn.decoding.FREMClassifier.set_params", false]], "set_params() (nilearn.decoding.fremregressor method)": [[308, "nilearn.decoding.FREMRegressor.set_params", false]], "set_params() (nilearn.decoding.searchlight method)": [[309, "nilearn.decoding.SearchLight.set_params", false]], "set_params() (nilearn.decoding.spacenetclassifier method)": [[310, "nilearn.decoding.SpaceNetClassifier.set_params", false]], "set_params() (nilearn.decoding.spacenetregressor method)": [[311, "nilearn.decoding.SpaceNetRegressor.set_params", false]], "set_params() (nilearn.decomposition.canica method)": [[312, "nilearn.decomposition.CanICA.set_params", false]], "set_params() (nilearn.decomposition.dictlearning method)": [[313, "nilearn.decomposition.DictLearning.set_params", false]], "set_params() (nilearn.glm.first_level.firstlevelmodel method)": [[327, "nilearn.glm.first_level.FirstLevelModel.set_params", false]], "set_params() (nilearn.glm.second_level.secondlevelmodel method)": [[340, "nilearn.glm.second_level.SecondLevelModel.set_params", false]], "set_params() (nilearn.maskers.basemasker method)": [[371, "nilearn.maskers.BaseMasker.set_params", false]], "set_params() (nilearn.maskers.multiniftilabelsmasker method)": [[372, "nilearn.maskers.MultiNiftiLabelsMasker.set_params", false]], "set_params() (nilearn.maskers.multiniftimapsmasker method)": [[373, "nilearn.maskers.MultiNiftiMapsMasker.set_params", false]], "set_params() (nilearn.maskers.multiniftimasker method)": [[374, "nilearn.maskers.MultiNiftiMasker.set_params", false]], "set_params() (nilearn.maskers.niftilabelsmasker method)": [[375, "nilearn.maskers.NiftiLabelsMasker.set_params", false]], "set_params() (nilearn.maskers.niftimapsmasker method)": [[376, "nilearn.maskers.NiftiMapsMasker.set_params", false]], "set_params() (nilearn.maskers.niftimasker method)": [[377, "nilearn.maskers.NiftiMasker.set_params", false]], "set_params() (nilearn.maskers.niftispheresmasker method)": [[378, "nilearn.maskers.NiftiSpheresMasker.set_params", false]], "set_params() (nilearn.maskers.surfacelabelsmasker method)": [[379, "nilearn.maskers.SurfaceLabelsMasker.set_params", false]], "set_params() (nilearn.maskers.surfacemapsmasker method)": [[380, "nilearn.maskers.SurfaceMapsMasker.set_params", false]], "set_params() (nilearn.maskers.surfacemasker method)": [[381, "nilearn.maskers.SurfaceMasker.set_params", false]], "set_params() (nilearn.regions.hierarchicalkmeans method)": [[454, "nilearn.regions.HierarchicalKMeans.set_params", false]], "set_params() (nilearn.regions.parcellations method)": [[455, "nilearn.regions.Parcellations.set_params", false]], "set_params() (nilearn.regions.regionextractor method)": [[457, "nilearn.regions.RegionExtractor.set_params", false]], "set_params() (nilearn.regions.rena method)": [[456, "nilearn.regions.ReNA.set_params", false]], "set_score_request() (nilearn.decoding.spacenetclassifier method)": [[310, "nilearn.decoding.SpaceNetClassifier.set_score_request", false]], "set_score_request() (nilearn.decoding.spacenetregressor method)": [[311, "nilearn.decoding.SpaceNetRegressor.set_score_request", false]], "set_score_request() (nilearn.decomposition.canica method)": [[312, "nilearn.decomposition.CanICA.set_score_request", false]], "set_score_request() (nilearn.decomposition.dictlearning method)": [[313, "nilearn.decomposition.DictLearning.set_score_request", false]], "set_score_request() (nilearn.regions.parcellations method)": [[455, "nilearn.regions.Parcellations.set_score_request", false]], "set_transform_request() (nilearn.connectome.connectivitymeasure method)": [[239, "nilearn.connectome.ConnectivityMeasure.set_transform_request", false]], "set_transform_request() (nilearn.decoding.searchlight method)": [[309, "nilearn.decoding.SearchLight.set_transform_request", false]], "set_transform_request() (nilearn.decomposition.canica method)": [[312, "nilearn.decomposition.CanICA.set_transform_request", false]], "set_transform_request() (nilearn.decomposition.dictlearning method)": [[313, "nilearn.decomposition.DictLearning.set_transform_request", false]], "set_transform_request() (nilearn.maskers.basemasker method)": [[371, "nilearn.maskers.BaseMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.multiniftilabelsmasker method)": [[372, "nilearn.maskers.MultiNiftiLabelsMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.multiniftimapsmasker method)": [[373, "nilearn.maskers.MultiNiftiMapsMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.multiniftimasker method)": [[374, "nilearn.maskers.MultiNiftiMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.niftilabelsmasker method)": [[375, "nilearn.maskers.NiftiLabelsMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.niftimapsmasker method)": [[376, "nilearn.maskers.NiftiMapsMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.niftimasker method)": [[377, "nilearn.maskers.NiftiMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.niftispheresmasker method)": [[378, "nilearn.maskers.NiftiSpheresMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.surfacelabelsmasker method)": [[379, "nilearn.maskers.SurfaceLabelsMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.surfacemapsmasker method)": [[380, "nilearn.maskers.SurfaceMapsMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.surfacemasker method)": [[381, "nilearn.maskers.SurfaceMasker.set_transform_request", false]], "set_transform_request() (nilearn.regions.parcellations method)": [[455, "nilearn.regions.Parcellations.set_transform_request", false]], "set_transform_request() (nilearn.regions.regionextractor method)": [[457, "nilearn.regions.RegionExtractor.set_transform_request", false]], "shape (nilearn.surface.polydata property)": [[473, "nilearn.surface.PolyData.shape", false]], "shape (nilearn.surface.surfaceimage property)": [[475, "nilearn.surface.SurfaceImage.shape", false]], "show() (in module nilearn.plotting)": [[448, "nilearn.plotting.show", false]], "show() (nilearn.plotting.displays.plotlysurfacefigure method)": [[405, "nilearn.plotting.displays.PlotlySurfaceFigure.show", false]], "signals_to_img_labels() (in module nilearn.regions)": [[463, "nilearn.regions.signals_to_img_labels", false]], "signals_to_img_maps() (in module nilearn.regions)": [[464, "nilearn.regions.signals_to_img_maps", false]], "simpleregressionresults (class in nilearn.glm)": [[320, "nilearn.glm.SimpleRegressionResults", false]], "smooth_img() (in module nilearn.image)": [[362, "nilearn.image.smooth_img", false]], "snr": [[185, "term-SNR", true]], "spacenet": [[185, "term-SpaceNet", true]], "spacenetclassifier (class in nilearn.decoding)": [[310, "nilearn.decoding.SpaceNetClassifier", false]], "spacenetregressor (class in nilearn.decoding)": [[311, "nilearn.decoding.SpaceNetRegressor", false]], "spm": [[185, "term-SPM", true]], "spm_dispersion_derivative() (in module nilearn.glm.first_level)": [[337, "nilearn.glm.first_level.spm_dispersion_derivative", false]], "spm_hrf() (in module nilearn.glm.first_level)": [[338, "nilearn.glm.first_level.spm_hrf", false]], "spm_time_derivative() (in module nilearn.glm.first_level)": [[339, "nilearn.glm.first_level.spm_time_derivative", false]], "sse() (nilearn.glm.regressionresults method)": [[319, "nilearn.glm.RegressionResults.SSE", false]], "stat() (nilearn.glm.contrast method)": [[315, "nilearn.glm.Contrast.stat", false]], "supervised learning": [[185, "term-supervised-learning", true]], "supported_losses (nilearn.decoding.spacenetclassifier attribute)": [[310, "nilearn.decoding.SpaceNetClassifier.SUPPORTED_LOSSES", false]], "supported_penalties (nilearn.decoding.spacenetclassifier attribute)": [[310, "nilearn.decoding.SpaceNetClassifier.SUPPORTED_PENALTIES", false]], "supported_penalties (nilearn.decoding.spacenetregressor attribute)": [[311, "nilearn.decoding.SpaceNetRegressor.SUPPORTED_PENALTIES", false]], "surfaceimage (class in nilearn.surface)": [[475, "nilearn.surface.SurfaceImage", false]], "surfacelabelsmasker (class in nilearn.maskers)": [[379, "nilearn.maskers.SurfaceLabelsMasker", false]], "surfacemapsmasker (class in nilearn.maskers)": [[380, "nilearn.maskers.SurfaceMapsMasker", false]], "surfacemasker (class in nilearn.maskers)": [[381, "nilearn.maskers.SurfaceMasker", false]], "surfacemesh (class in nilearn.surface)": [[476, "nilearn.surface.SurfaceMesh", false]], "svm": [[185, "term-SVM", true]], "swap_img_hemispheres() (in module nilearn.image)": [[363, "nilearn.image.swap_img_hemispheres", false]], "sym_matrix_to_vec() (in module nilearn.connectome)": [[245, "nilearn.connectome.sym_matrix_to_vec", false]], "t() (nilearn.glm.likelihoodmodelresults method)": [[317, "nilearn.glm.LikelihoodModelResults.t", false]], "t() (nilearn.glm.regressionresults method)": [[319, "nilearn.glm.RegressionResults.t", false]], "t() (nilearn.glm.simpleregressionresults method)": [[320, "nilearn.glm.SimpleRegressionResults.t", false]], "tcontrast() (nilearn.glm.likelihoodmodelresults method)": [[317, "nilearn.glm.LikelihoodModelResults.Tcontrast", false]], "tcontrast() (nilearn.glm.regressionresults method)": [[319, "nilearn.glm.RegressionResults.Tcontrast", false]], "tcontrast() (nilearn.glm.simpleregressionresults method)": [[320, "nilearn.glm.SimpleRegressionResults.Tcontrast", false]], "tcontrastresults (class in nilearn.glm)": [[321, "nilearn.glm.TContrastResults", false]], "tfce": [[185, "term-TFCE", true]], "threshold_img() (in module nilearn.image)": [[364, "nilearn.image.threshold_img", false]], "threshold_stats_img() (in module nilearn.glm)": [[343, "nilearn.glm.threshold_stats_img", false]], "tiledslicer (class in nilearn.plotting.displays)": [[407, "nilearn.plotting.displays.TiledSlicer", false]], "title() (nilearn.plotting.displays.baseslicer method)": [[393, "nilearn.plotting.displays.BaseSlicer.title", false]], "title() (nilearn.plotting.displays.lprojector method)": [[396, "nilearn.plotting.displays.LProjector.title", false]], "title() (nilearn.plotting.displays.lrprojector method)": [[397, "nilearn.plotting.displays.LRProjector.title", false]], "title() (nilearn.plotting.displays.lyrprojector method)": [[398, "nilearn.plotting.displays.LYRProjector.title", false]], "title() (nilearn.plotting.displays.lyrzprojector method)": [[399, "nilearn.plotting.displays.LYRZProjector.title", false]], "title() (nilearn.plotting.displays.lzrprojector method)": [[400, "nilearn.plotting.displays.LZRProjector.title", false]], "title() (nilearn.plotting.displays.lzryprojector method)": [[401, "nilearn.plotting.displays.LZRYProjector.title", false]], "title() (nilearn.plotting.displays.mosaicslicer method)": [[402, "nilearn.plotting.displays.MosaicSlicer.title", false]], "title() (nilearn.plotting.displays.orthoprojector method)": [[403, "nilearn.plotting.displays.OrthoProjector.title", false]], "title() (nilearn.plotting.displays.orthoslicer method)": [[404, "nilearn.plotting.displays.OrthoSlicer.title", false]], "title() (nilearn.plotting.displays.rprojector method)": [[406, "nilearn.plotting.displays.RProjector.title", false]], "title() (nilearn.plotting.displays.tiledslicer method)": [[407, "nilearn.plotting.displays.TiledSlicer.title", false]], "title() (nilearn.plotting.displays.xprojector method)": [[408, "nilearn.plotting.displays.XProjector.title", false]], "title() (nilearn.plotting.displays.xslicer method)": [[409, "nilearn.plotting.displays.XSlicer.title", false]], "title() (nilearn.plotting.displays.xzprojector method)": [[410, "nilearn.plotting.displays.XZProjector.title", false]], "title() (nilearn.plotting.displays.xzslicer method)": [[411, "nilearn.plotting.displays.XZSlicer.title", false]], "title() (nilearn.plotting.displays.yprojector method)": [[412, "nilearn.plotting.displays.YProjector.title", false]], "title() (nilearn.plotting.displays.yslicer method)": [[413, "nilearn.plotting.displays.YSlicer.title", false]], "title() (nilearn.plotting.displays.yxprojector method)": [[414, "nilearn.plotting.displays.YXProjector.title", false]], "title() (nilearn.plotting.displays.yxslicer method)": [[415, "nilearn.plotting.displays.YXSlicer.title", false]], "title() (nilearn.plotting.displays.yzprojector method)": [[416, "nilearn.plotting.displays.YZProjector.title", false]], "title() (nilearn.plotting.displays.yzslicer method)": [[417, "nilearn.plotting.displays.YZSlicer.title", false]], "title() (nilearn.plotting.displays.zprojector method)": [[418, "nilearn.plotting.displays.ZProjector.title", false]], "title() (nilearn.plotting.displays.zslicer method)": [[419, "nilearn.plotting.displays.ZSlicer.title", false]], "to_filename() (nilearn.surface.polydata method)": [[473, "nilearn.surface.PolyData.to_filename", false]], "to_filename() (nilearn.surface.polymesh method)": [[474, "nilearn.surface.PolyMesh.to_filename", false]], "to_gifti() (nilearn.surface.filemesh method)": [[471, "nilearn.surface.FileMesh.to_gifti", false]], "to_gifti() (nilearn.surface.inmemorymesh method)": [[472, "nilearn.surface.InMemoryMesh.to_gifti", false]], "to_gifti() (nilearn.surface.surfacemesh method)": [[476, "nilearn.surface.SurfaceMesh.to_gifti", false]], "tr": [[185, "term-TR", true]], "transform() (nilearn.connectome.connectivitymeasure method)": [[239, "nilearn.connectome.ConnectivityMeasure.transform", false]], "transform() (nilearn.decoding.searchlight method)": [[309, "nilearn.decoding.SearchLight.transform", false]], "transform() (nilearn.decomposition.canica method)": [[312, "nilearn.decomposition.CanICA.transform", false]], "transform() (nilearn.decomposition.dictlearning method)": [[313, "nilearn.decomposition.DictLearning.transform", false]], "transform() (nilearn.maskers.basemasker method)": [[371, "nilearn.maskers.BaseMasker.transform", false]], "transform() (nilearn.maskers.multiniftilabelsmasker method)": [[372, "nilearn.maskers.MultiNiftiLabelsMasker.transform", false]], "transform() (nilearn.maskers.multiniftimapsmasker method)": [[373, "nilearn.maskers.MultiNiftiMapsMasker.transform", false]], "transform() (nilearn.maskers.multiniftimasker method)": [[374, "nilearn.maskers.MultiNiftiMasker.transform", false]], "transform() (nilearn.maskers.niftilabelsmasker method)": [[375, "nilearn.maskers.NiftiLabelsMasker.transform", false]], "transform() (nilearn.maskers.niftimapsmasker method)": [[376, "nilearn.maskers.NiftiMapsMasker.transform", false]], "transform() (nilearn.maskers.niftimasker method)": [[377, "nilearn.maskers.NiftiMasker.transform", false]], "transform() (nilearn.maskers.niftispheresmasker method)": [[378, "nilearn.maskers.NiftiSpheresMasker.transform", false]], "transform() (nilearn.maskers.surfacelabelsmasker method)": [[379, "nilearn.maskers.SurfaceLabelsMasker.transform", false]], "transform() (nilearn.maskers.surfacemapsmasker method)": [[380, "nilearn.maskers.SurfaceMapsMasker.transform", false]], "transform() (nilearn.maskers.surfacemasker method)": [[381, "nilearn.maskers.SurfaceMasker.transform", false]], "transform() (nilearn.regions.hierarchicalkmeans method)": [[454, "nilearn.regions.HierarchicalKMeans.transform", false]], "transform() (nilearn.regions.parcellations method)": [[455, "nilearn.regions.Parcellations.transform", false]], "transform() (nilearn.regions.regionextractor method)": [[457, "nilearn.regions.RegionExtractor.transform", false]], "transform() (nilearn.regions.rena method)": [[456, "nilearn.regions.ReNA.transform", false]], "transform_imgs() (nilearn.maskers.multiniftilabelsmasker method)": [[372, "nilearn.maskers.MultiNiftiLabelsMasker.transform_imgs", false]], "transform_imgs() (nilearn.maskers.multiniftimapsmasker method)": [[373, "nilearn.maskers.MultiNiftiMapsMasker.transform_imgs", false]], "transform_imgs() (nilearn.maskers.multiniftimasker method)": [[374, "nilearn.maskers.MultiNiftiMasker.transform_imgs", false]], "transform_single_imgs() (nilearn.maskers.basemasker method)": [[371, "nilearn.maskers.BaseMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.multiniftilabelsmasker method)": [[372, "nilearn.maskers.MultiNiftiLabelsMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.multiniftimapsmasker method)": [[373, "nilearn.maskers.MultiNiftiMapsMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.multiniftimasker method)": [[374, "nilearn.maskers.MultiNiftiMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.niftilabelsmasker method)": [[375, "nilearn.maskers.NiftiLabelsMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.niftimapsmasker method)": [[376, "nilearn.maskers.NiftiMapsMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.niftimasker method)": [[377, "nilearn.maskers.NiftiMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.niftispheresmasker method)": [[378, "nilearn.maskers.NiftiSpheresMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.surfacelabelsmasker method)": [[379, "nilearn.maskers.SurfaceLabelsMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.surfacemapsmasker method)": [[380, "nilearn.maskers.SurfaceMapsMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.surfacemasker method)": [[381, "nilearn.maskers.SurfaceMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.regions.regionextractor method)": [[457, "nilearn.regions.RegionExtractor.transform_single_imgs", false]], "transform_to_2d() (nilearn.plotting.displays.baseaxes method)": [[392, "nilearn.plotting.displays.BaseAxes.transform_to_2d", false]], "transform_to_2d() (nilearn.plotting.displays.cutaxes method)": [[394, "nilearn.plotting.displays.CutAxes.transform_to_2d", false]], "transform_to_2d() (nilearn.plotting.displays.glassbrainaxes method)": [[395, "nilearn.plotting.displays.GlassBrainAxes.transform_to_2d", false]], "unmask() (in module nilearn.masking)": [[390, "nilearn.masking.unmask", false]], "unsupervised learning": [[185, "term-Unsupervised-learning", true]], "valid_methods (nilearn.regions.parcellations attribute)": [[455, "nilearn.regions.Parcellations.VALID_METHODS", false]], "vbm": [[185, "term-VBM", true]], "vcov() (nilearn.glm.likelihoodmodelresults method)": [[317, "nilearn.glm.LikelihoodModelResults.vcov", false]], "vcov() (nilearn.glm.regressionresults method)": [[319, "nilearn.glm.RegressionResults.vcov", false]], "vcov() (nilearn.glm.simpleregressionresults method)": [[320, "nilearn.glm.SimpleRegressionResults.vcov", false]], "vec_to_sym_matrix() (in module nilearn.connectome)": [[246, "nilearn.connectome.vec_to_sym_matrix", false]], "vertex": [[185, "term-vertex", true]], "view_connectome() (in module nilearn.plotting)": [[449, "nilearn.plotting.view_connectome", false]], "view_img() (in module nilearn.plotting)": [[450, "nilearn.plotting.view_img", false]], "view_img_on_surf() (in module nilearn.plotting)": [[451, "nilearn.plotting.view_img_on_surf", false]], "view_markers() (in module nilearn.plotting)": [[452, "nilearn.plotting.view_markers", false]], "view_surf() (in module nilearn.plotting)": [[453, "nilearn.plotting.view_surf", false]], "vol_to_surf() (in module nilearn.surface)": [[479, "nilearn.surface.vol_to_surf", false]], "voxel": [[185, "term-voxel", true]], "ward clustering": [[185, "term-Ward-clustering", true]], "whiten() (nilearn.glm.armodel method)": [[314, "nilearn.glm.ARModel.whiten", false]], "whiten() (nilearn.glm.olsmodel method)": [[318, "nilearn.glm.OLSModel.whiten", false]], "width (nilearn.reporting.htmlreport property)": [[465, "nilearn.reporting.HTMLReport.width", false]], "xprojector (class in nilearn.plotting.displays)": [[408, "nilearn.plotting.displays.XProjector", false]], "xslicer (class in nilearn.plotting.displays)": [[409, "nilearn.plotting.displays.XSlicer", false]], "xzprojector (class in nilearn.plotting.displays)": [[410, "nilearn.plotting.displays.XZProjector", false]], "xzslicer (class in nilearn.plotting.displays)": [[411, "nilearn.plotting.displays.XZSlicer", false]], "yprojector (class in nilearn.plotting.displays)": [[412, "nilearn.plotting.displays.YProjector", false]], "yslicer (class in nilearn.plotting.displays)": [[413, "nilearn.plotting.displays.YSlicer", false]], "yxprojector (class in nilearn.plotting.displays)": [[414, "nilearn.plotting.displays.YXProjector", false]], "yxslicer (class in nilearn.plotting.displays)": [[415, "nilearn.plotting.displays.YXSlicer", false]], "yzprojector (class in nilearn.plotting.displays)": [[416, "nilearn.plotting.displays.YZProjector", false]], "yzslicer (class in nilearn.plotting.displays)": [[417, "nilearn.plotting.displays.YZSlicer", false]], "z_score() (nilearn.glm.contrast method)": [[315, "nilearn.glm.Contrast.z_score", false]], "zprojector (class in nilearn.plotting.displays)": [[418, "nilearn.plotting.displays.ZProjector", false]], "zslicer (class in nilearn.plotting.displays)": [[419, "nilearn.plotting.displays.ZSlicer", false]]}, "objects": {"nilearn": [[193, 0, 0, "-", "connectome"], [194, 0, 0, "-", "datasets"], [195, 0, 0, "-", "decoding"], [196, 0, 0, "-", "decomposition"], [482, 0, 0, "-", "glm"], [483, 0, 0, "-", "image"], [485, 0, 0, "-", "interfaces"], [486, 0, 0, "-", "maskers"], [487, 0, 0, "-", "masking"], [488, 0, 0, "-", "mass_univariate"], [489, 0, 0, "-", "plotting"], [491, 0, 0, "-", "regions"], [492, 0, 0, "-", "reporting"], [493, 0, 0, "-", "signal"], [494, 0, 0, "-", "surface"]], "nilearn.connectome": [[239, 1, 1, "", "ConnectivityMeasure"], [240, 1, 1, "", "GroupSparseCovariance"], [241, 1, 1, "", "GroupSparseCovarianceCV"], [242, 3, 1, "", "cov_to_corr"], [243, 3, 1, "", "group_sparse_covariance"], [244, 3, 1, "", "prec_to_partial"], [245, 3, 1, "", "sym_matrix_to_vec"], [246, 3, 1, "", "vec_to_sym_matrix"]], "nilearn.connectome.ConnectivityMeasure": [[239, 2, 1, "", "__init__"], [239, 2, 1, "", "fit"], [239, 2, 1, "", "fit_transform"], [239, 2, 1, "", "get_metadata_routing"], [239, 2, 1, "", "get_params"], [239, 2, 1, "", "inverse_transform"], [239, 2, 1, "", "set_inverse_transform_request"], [239, 2, 1, "", "set_params"], [239, 2, 1, "", "set_transform_request"], [239, 2, 1, "", "transform"]], "nilearn.connectome.GroupSparseCovariance": [[240, 2, 1, "", "__init__"], [240, 2, 1, "", "fit"], [240, 2, 1, "", "get_metadata_routing"], [240, 2, 1, "", "get_params"], [240, 2, 1, "", "set_fit_request"], [240, 2, 1, "", "set_params"]], "nilearn.connectome.GroupSparseCovarianceCV": [[241, 2, 1, "", "__init__"], [241, 2, 1, "", "fit"], [241, 2, 1, "", "get_metadata_routing"], [241, 2, 1, "", "get_params"], [241, 2, 1, "", "set_fit_request"], [241, 2, 1, "", "set_params"]], "nilearn.datasets": [[247, 3, 1, "", "fetch_abide_pcp"], [248, 3, 1, "", "fetch_adhd"], [249, 3, 1, "", "fetch_atlas_aal"], [250, 3, 1, "", "fetch_atlas_allen_2011"], [251, 3, 1, "", "fetch_atlas_basc_multiscale_2015"], [252, 3, 1, "", "fetch_atlas_craddock_2012"], [253, 3, 1, "", "fetch_atlas_destrieux_2009"], [254, 3, 1, "", "fetch_atlas_difumo"], [255, 3, 1, "", "fetch_atlas_harvard_oxford"], [256, 3, 1, "", "fetch_atlas_juelich"], [257, 3, 1, "", "fetch_atlas_msdl"], [258, 3, 1, "", "fetch_atlas_pauli_2017"], [259, 3, 1, "", "fetch_atlas_schaefer_2018"], [260, 3, 1, "", "fetch_atlas_smith_2009"], [261, 3, 1, "", "fetch_atlas_surf_destrieux"], [262, 3, 1, "", "fetch_atlas_talairach"], [263, 3, 1, "", "fetch_atlas_yeo_2011"], [264, 3, 1, "", "fetch_bids_langloc_dataset"], [265, 3, 1, "", "fetch_coords_dosenbach_2010"], [266, 3, 1, "", "fetch_coords_power_2011"], [267, 3, 1, "", "fetch_coords_seitzman_2018"], [268, 3, 1, "", "fetch_development_fmri"], [269, 3, 1, "", "fetch_ds000030_urls"], [270, 3, 1, "", "fetch_fiac_first_level"], [271, 3, 1, "", "fetch_haxby"], [272, 3, 1, "", "fetch_icbm152_2009"], [273, 3, 1, "", "fetch_icbm152_brain_gm_mask"], [274, 3, 1, "", "fetch_language_localizer_demo_dataset"], [275, 3, 1, "", "fetch_localizer_button_task"], [276, 3, 1, "", "fetch_localizer_calculation_task"], [277, 3, 1, "", "fetch_localizer_contrasts"], [278, 3, 1, "", "fetch_localizer_first_level"], [279, 3, 1, "", "fetch_megatrawls_netmats"], [280, 3, 1, "", "fetch_mixed_gambles"], [281, 3, 1, "", "fetch_miyawaki2008"], [282, 3, 1, "", "fetch_neurovault"], [283, 3, 1, "", "fetch_neurovault_auditory_computation_task"], [284, 3, 1, "", "fetch_neurovault_ids"], [285, 3, 1, "", "fetch_neurovault_motor_task"], [286, 3, 1, "", "fetch_oasis_vbm"], [287, 3, 1, "", "fetch_openneuro_dataset"], [288, 3, 1, "", "fetch_spm_auditory"], [289, 3, 1, "", "fetch_spm_multimodal_fmri"], [290, 3, 1, "", "fetch_surf_fsaverage"], [291, 3, 1, "", "fetch_surf_nki_enhanced"], [292, 3, 1, "", "get_data_dirs"], [293, 3, 1, "", "load_fsaverage"], [294, 3, 1, "", "load_fsaverage_data"], [295, 3, 1, "", "load_mni152_brain_mask"], [296, 3, 1, "", "load_mni152_gm_mask"], [297, 3, 1, "", "load_mni152_gm_template"], [298, 3, 1, "", "load_mni152_template"], [299, 3, 1, "", "load_mni152_wm_mask"], [300, 3, 1, "", "load_mni152_wm_template"], [301, 3, 1, "", "load_nki"], [302, 3, 1, "", "load_sample_motor_activation_image"], [303, 3, 1, "", "patch_openneuro_dataset"], [304, 3, 1, "", "select_from_index"]], "nilearn.decoding": [[305, 1, 1, "", "Decoder"], [306, 1, 1, "", "DecoderRegressor"], [307, 1, 1, "", "FREMClassifier"], [308, 1, 1, "", "FREMRegressor"], [309, 1, 1, "", "SearchLight"], [310, 1, 1, "", "SpaceNetClassifier"], [311, 1, 1, "", "SpaceNetRegressor"]], "nilearn.decoding.Decoder": [[305, 2, 1, "", "__init__"], [305, 2, 1, "", "decision_function"], [305, 2, 1, "", "fit"], [305, 2, 1, "", "get_metadata_routing"], [305, 2, 1, "", "get_params"], [305, 2, 1, "", "predict"], [305, 2, 1, "", "score"], [305, 2, 1, "", "set_fit_request"], [305, 2, 1, "", "set_params"]], "nilearn.decoding.DecoderRegressor": [[306, 2, 1, "", "__init__"], [306, 2, 1, "", "fit"], [306, 2, 1, "", "get_metadata_routing"], [306, 2, 1, "", "get_params"], [306, 2, 1, "", "predict"], [306, 2, 1, "", "score"], [306, 2, 1, "", "set_fit_request"], [306, 2, 1, "", "set_params"]], "nilearn.decoding.FREMClassifier": [[307, 2, 1, "", "__init__"], [307, 2, 1, "", "decision_function"], [307, 2, 1, "", "fit"], [307, 2, 1, "", "get_metadata_routing"], [307, 2, 1, "", "get_params"], [307, 2, 1, "", "predict"], [307, 2, 1, "", "score"], [307, 2, 1, "", "set_fit_request"], [307, 2, 1, "", "set_params"]], "nilearn.decoding.FREMRegressor": [[308, 2, 1, "", "__init__"], [308, 2, 1, "", "fit"], [308, 2, 1, "", "get_metadata_routing"], [308, 2, 1, "", "get_params"], [308, 2, 1, "", "predict"], [308, 2, 1, "", "score"], [308, 2, 1, "", "set_fit_request"], [308, 2, 1, "", "set_params"]], "nilearn.decoding.SearchLight": [[309, 2, 1, "", "__init__"], [309, 2, 1, "", "fit"], [309, 2, 1, "", "fit_transform"], [309, 2, 1, "", "get_metadata_routing"], [309, 2, 1, "", "get_params"], [309, 4, 1, "", "scores_img_"], [309, 2, 1, "", "set_fit_request"], [309, 2, 1, "", "set_params"], [309, 2, 1, "", "set_transform_request"], [309, 2, 1, "", "transform"]], "nilearn.decoding.SpaceNetClassifier": [[310, 5, 1, "", "SUPPORTED_LOSSES"], [310, 5, 1, "", "SUPPORTED_PENALTIES"], [310, 2, 1, "", "__init__"], [310, 2, 1, "", "decision_function"], [310, 2, 1, "", "fit"], [310, 2, 1, "", "get_metadata_routing"], [310, 2, 1, "", "get_params"], [310, 2, 1, "", "predict"], [310, 2, 1, "", "score"], [310, 2, 1, "", "set_fit_request"], [310, 2, 1, "", "set_params"], [310, 2, 1, "", "set_score_request"]], "nilearn.decoding.SpaceNetRegressor": [[311, 5, 1, "", "SUPPORTED_PENALTIES"], [311, 2, 1, "", "__init__"], [311, 2, 1, "", "fit"], [311, 2, 1, "", "get_metadata_routing"], [311, 2, 1, "", "get_params"], [311, 2, 1, "", "predict"], [311, 2, 1, "", "score"], [311, 2, 1, "", "set_fit_request"], [311, 2, 1, "", "set_params"], [311, 2, 1, "", "set_score_request"]], "nilearn.decomposition": [[312, 1, 1, "", "CanICA"], [313, 1, 1, "", "DictLearning"]], "nilearn.decomposition.CanICA": [[312, 2, 1, "", "__init__"], [312, 2, 1, "", "fit"], [312, 2, 1, "", "fit_transform"], [312, 2, 1, "", "get_metadata_routing"], [312, 2, 1, "", "get_params"], [312, 2, 1, "", "inverse_transform"], [312, 4, 1, "", "nifti_maps_masker_"], [312, 2, 1, "", "score"], [312, 2, 1, "", "set_fit_request"], [312, 2, 1, "", "set_inverse_transform_request"], [312, 2, 1, "", "set_params"], [312, 2, 1, "", "set_score_request"], [312, 2, 1, "", "set_transform_request"], [312, 2, 1, "", "transform"]], "nilearn.decomposition.DictLearning": [[313, 2, 1, "", "__init__"], [313, 2, 1, "", "fit"], [313, 2, 1, "", "fit_transform"], [313, 2, 1, "", "get_metadata_routing"], [313, 2, 1, "", "get_params"], [313, 2, 1, "", "inverse_transform"], [313, 4, 1, "", "nifti_maps_masker_"], [313, 2, 1, "", "score"], [313, 2, 1, "", "set_fit_request"], [313, 2, 1, "", "set_inverse_transform_request"], [313, 2, 1, "", "set_params"], [313, 2, 1, "", "set_score_request"], [313, 2, 1, "", "set_transform_request"], [313, 2, 1, "", "transform"]], "nilearn.glm": [[314, 1, 1, "", "ARModel"], [315, 1, 1, "", "Contrast"], [316, 1, 1, "", "FContrastResults"], [317, 1, 1, "", "LikelihoodModelResults"], [318, 1, 1, "", "OLSModel"], [319, 1, 1, "", "RegressionResults"], [320, 1, 1, "", "SimpleRegressionResults"], [321, 1, 1, "", "TContrastResults"], [322, 3, 1, "", "cluster_level_inference"], [323, 3, 1, "", "compute_contrast"], [324, 3, 1, "", "compute_fixed_effects"], [325, 3, 1, "", "expression_to_contrast_vector"], [326, 3, 1, "", "fdr_threshold"], [482, 0, 0, "-", "first_level"], [482, 0, 0, "-", "second_level"], [343, 3, 1, "", "threshold_stats_img"]], "nilearn.glm.ARModel": [[314, 2, 1, "", "__init__"], [314, 2, 1, "", "fit"], [314, 2, 1, "", "initialize"], [314, 2, 1, "", "logL"], [314, 2, 1, "", "whiten"]], "nilearn.glm.Contrast": [[315, 2, 1, "", "__init__"], [315, 4, 1, "", "contrast_type"], [315, 2, 1, "", "effect_size"], [315, 2, 1, "", "effect_variance"], [315, 2, 1, "", "one_minus_pvalue"], [315, 2, 1, "", "p_value"], [315, 2, 1, "", "stat"], [315, 2, 1, "", "z_score"]], "nilearn.glm.FContrastResults": [[316, 2, 1, "", "__init__"]], "nilearn.glm.LikelihoodModelResults": [[317, 2, 1, "", "Fcontrast"], [317, 2, 1, "", "Tcontrast"], [317, 2, 1, "", "__init__"], [317, 2, 1, "", "conf_int"], [317, 2, 1, "", "logL"], [317, 2, 1, "", "t"], [317, 2, 1, "", "vcov"]], "nilearn.glm.OLSModel": [[318, 2, 1, "", "__init__"], [318, 2, 1, "", "fit"], [318, 2, 1, "", "initialize"], [318, 2, 1, "", "logL"], [318, 2, 1, "", "whiten"]], "nilearn.glm.RegressionResults": [[319, 2, 1, "", "Fcontrast"], [319, 2, 1, "", "MSE"], [319, 2, 1, "", "SSE"], [319, 2, 1, "", "Tcontrast"], [319, 2, 1, "", "__init__"], [319, 2, 1, "", "conf_int"], [319, 2, 1, "", "logL"], [319, 2, 1, "", "normalized_residuals"], [319, 2, 1, "", "predicted"], [319, 2, 1, "", "r_square"], [319, 2, 1, "", "residuals"], [319, 2, 1, "", "t"], [319, 2, 1, "", "vcov"]], "nilearn.glm.SimpleRegressionResults": [[320, 2, 1, "", "Fcontrast"], [320, 2, 1, "", "Tcontrast"], [320, 2, 1, "", "__init__"], [320, 2, 1, "", "conf_int"], [320, 2, 1, "", "logL"], [320, 2, 1, "", "normalized_residuals"], [320, 2, 1, "", "predicted"], [320, 2, 1, "", "residuals"], [320, 2, 1, "", "t"], [320, 2, 1, "", "vcov"]], "nilearn.glm.TContrastResults": [[321, 2, 1, "", "__init__"]], "nilearn.glm.first_level": [[327, 1, 1, "", "FirstLevelModel"], [328, 3, 1, "", "check_design_matrix"], [329, 3, 1, "", "compute_regressor"], [330, 3, 1, "", "first_level_from_bids"], [331, 3, 1, "", "glover_dispersion_derivative"], [332, 3, 1, "", "glover_hrf"], [333, 3, 1, "", "glover_time_derivative"], [334, 3, 1, "", "make_first_level_design_matrix"], [335, 3, 1, "", "mean_scaling"], [336, 3, 1, "", "run_glm"], [337, 3, 1, "", "spm_dispersion_derivative"], [338, 3, 1, "", "spm_hrf"], [339, 3, 1, "", "spm_time_derivative"]], "nilearn.glm.first_level.FirstLevelModel": [[327, 2, 1, "", "__init__"], [327, 2, 1, "", "compute_contrast"], [327, 2, 1, "", "fit"], [327, 2, 1, "", "generate_report"], [327, 2, 1, "", "get_metadata_routing"], [327, 2, 1, "", "get_params"], [327, 2, 1, "", "predicted"], [327, 2, 1, "", "r_square"], [327, 2, 1, "", "residuals"], [327, 2, 1, "", "set_fit_request"], [327, 2, 1, "", "set_params"]], "nilearn.glm.second_level": [[340, 1, 1, "", "SecondLevelModel"], [341, 3, 1, "", "make_second_level_design_matrix"], [342, 3, 1, "", "non_parametric_inference"]], "nilearn.glm.second_level.SecondLevelModel": [[340, 2, 1, "", "__init__"], [340, 2, 1, "", "compute_contrast"], [340, 2, 1, "", "fit"], [340, 2, 1, "", "generate_report"], [340, 2, 1, "", "get_metadata_routing"], [340, 2, 1, "", "get_params"], [340, 2, 1, "", "predicted"], [340, 2, 1, "", "r_square"], [340, 2, 1, "", "residuals"], [340, 2, 1, "", "set_fit_request"], [340, 2, 1, "", "set_params"]], "nilearn.image": [[344, 3, 1, "", "binarize_img"], [345, 3, 1, "", "clean_img"], [346, 3, 1, "", "concat_imgs"], [347, 3, 1, "", "coord_transform"], [348, 3, 1, "", "copy_img"], [349, 3, 1, "", "crop_img"], [350, 3, 1, "", "get_data"], [351, 3, 1, "", "high_variance_confounds"], [352, 3, 1, "", "index_img"], [353, 3, 1, "", "iter_img"], [354, 3, 1, "", "largest_connected_component_img"], [355, 3, 1, "", "load_img"], [356, 3, 1, "", "math_img"], [357, 3, 1, "", "mean_img"], [358, 3, 1, "", "new_img_like"], [359, 3, 1, "", "reorder_img"], [360, 3, 1, "", "resample_img"], [361, 3, 1, "", "resample_to_img"], [362, 3, 1, "", "smooth_img"], [363, 3, 1, "", "swap_img_hemispheres"], [364, 3, 1, "", "threshold_img"]], "nilearn.interfaces": [[485, 0, 0, "-", "bids"], [485, 0, 0, "-", "fmriprep"], [485, 0, 0, "-", "fsl"]], "nilearn.interfaces.bids": [[365, 3, 1, "", "get_bids_files"], [366, 3, 1, "", "parse_bids_filename"], [367, 3, 1, "", "save_glm_to_bids"]], "nilearn.interfaces.fmriprep": [[368, 3, 1, "", "load_confounds"], [369, 3, 1, "", "load_confounds_strategy"]], "nilearn.interfaces.fsl": [[370, 3, 1, "", "get_design_from_fslmat"]], "nilearn.maskers": [[371, 1, 1, "", "BaseMasker"], [372, 1, 1, "", "MultiNiftiLabelsMasker"], [373, 1, 1, "", "MultiNiftiMapsMasker"], [374, 1, 1, "", "MultiNiftiMasker"], [375, 1, 1, "", "NiftiLabelsMasker"], [376, 1, 1, "", "NiftiMapsMasker"], [377, 1, 1, "", "NiftiMasker"], [378, 1, 1, "", "NiftiSpheresMasker"], [379, 1, 1, "", "SurfaceLabelsMasker"], [380, 1, 1, "", "SurfaceMapsMasker"], [381, 1, 1, "", "SurfaceMasker"]], "nilearn.maskers.BaseMasker": [[371, 2, 1, "", "fit"], [371, 2, 1, "", "fit_transform"], [371, 2, 1, "", "get_metadata_routing"], [371, 2, 1, "", "get_params"], [371, 2, 1, "", "inverse_transform"], [371, 2, 1, "", "set_fit_request"], [371, 2, 1, "", "set_params"], [371, 2, 1, "", "set_transform_request"], [371, 2, 1, "", "transform"], [371, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiLabelsMasker": [[372, 2, 1, "", "__init__"], [372, 2, 1, "", "fit"], [372, 2, 1, "", "fit_transform"], [372, 2, 1, "", "generate_report"], [372, 2, 1, "", "get_metadata_routing"], [372, 2, 1, "", "get_params"], [372, 2, 1, "", "inverse_transform"], [372, 4, 1, "", "labels_"], [372, 4, 1, "", "n_elements_"], [372, 4, 1, "", "region_ids_"], [372, 4, 1, "", "region_names_"], [372, 2, 1, "", "set_fit_request"], [372, 2, 1, "", "set_inverse_transform_request"], [372, 2, 1, "", "set_params"], [372, 2, 1, "", "set_transform_request"], [372, 2, 1, "", "transform"], [372, 2, 1, "", "transform_imgs"], [372, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiMapsMasker": [[373, 2, 1, "", "__init__"], [373, 2, 1, "", "fit"], [373, 2, 1, "", "fit_transform"], [373, 2, 1, "", "generate_report"], [373, 2, 1, "", "get_metadata_routing"], [373, 2, 1, "", "get_params"], [373, 2, 1, "", "inverse_transform"], [373, 2, 1, "", "set_fit_request"], [373, 2, 1, "", "set_inverse_transform_request"], [373, 2, 1, "", "set_params"], [373, 2, 1, "", "set_transform_request"], [373, 2, 1, "", "transform"], [373, 2, 1, "", "transform_imgs"], [373, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiMasker": [[374, 2, 1, "", "__init__"], [374, 2, 1, "", "fit"], [374, 2, 1, "", "fit_transform"], [374, 2, 1, "", "generate_report"], [374, 2, 1, "", "get_metadata_routing"], [374, 2, 1, "", "get_params"], [374, 2, 1, "", "inverse_transform"], [374, 2, 1, "", "set_fit_request"], [374, 2, 1, "", "set_params"], [374, 2, 1, "", "set_transform_request"], [374, 2, 1, "", "transform"], [374, 2, 1, "", "transform_imgs"], [374, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiLabelsMasker": [[375, 2, 1, "", "__init__"], [375, 2, 1, "", "fit"], [375, 2, 1, "", "fit_transform"], [375, 2, 1, "", "generate_report"], [375, 2, 1, "", "get_metadata_routing"], [375, 2, 1, "", "get_params"], [375, 2, 1, "", "inverse_transform"], [375, 4, 1, "", "labels_"], [375, 4, 1, "", "n_elements_"], [375, 4, 1, "", "region_ids_"], [375, 4, 1, "", "region_names_"], [375, 2, 1, "", "set_fit_request"], [375, 2, 1, "", "set_inverse_transform_request"], [375, 2, 1, "", "set_params"], [375, 2, 1, "", "set_transform_request"], [375, 2, 1, "", "transform"], [375, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiMapsMasker": [[376, 2, 1, "", "__init__"], [376, 2, 1, "", "fit"], [376, 2, 1, "", "fit_transform"], [376, 2, 1, "", "generate_report"], [376, 2, 1, "", "get_metadata_routing"], [376, 2, 1, "", "get_params"], [376, 2, 1, "", "inverse_transform"], [376, 2, 1, "", "set_fit_request"], [376, 2, 1, "", "set_inverse_transform_request"], [376, 2, 1, "", "set_params"], [376, 2, 1, "", "set_transform_request"], [376, 2, 1, "", "transform"], [376, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiMasker": [[377, 2, 1, "", "__init__"], [377, 2, 1, "", "fit"], [377, 2, 1, "", "fit_transform"], [377, 2, 1, "", "generate_report"], [377, 2, 1, "", "get_metadata_routing"], [377, 2, 1, "", "get_params"], [377, 2, 1, "", "inverse_transform"], [377, 2, 1, "", "set_fit_request"], [377, 2, 1, "", "set_params"], [377, 2, 1, "", "set_transform_request"], [377, 2, 1, "", "transform"], [377, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiSpheresMasker": [[378, 2, 1, "", "__init__"], [378, 2, 1, "", "fit"], [378, 2, 1, "", "fit_transform"], [378, 2, 1, "", "generate_report"], [378, 2, 1, "", "get_metadata_routing"], [378, 2, 1, "", "get_params"], [378, 2, 1, "", "inverse_transform"], [378, 2, 1, "", "set_fit_request"], [378, 2, 1, "", "set_inverse_transform_request"], [378, 2, 1, "", "set_params"], [378, 2, 1, "", "set_transform_request"], [378, 2, 1, "", "transform"], [378, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.SurfaceLabelsMasker": [[379, 2, 1, "", "__init__"], [379, 2, 1, "", "fit"], [379, 2, 1, "", "fit_transform"], [379, 2, 1, "", "generate_report"], [379, 2, 1, "", "get_metadata_routing"], [379, 2, 1, "", "get_params"], [379, 2, 1, "", "inverse_transform"], [379, 4, 1, "", "labels_"], [379, 4, 1, "", "n_elements_"], [379, 4, 1, "", "region_ids_"], [379, 4, 1, "", "region_names_"], [379, 2, 1, "", "set_fit_request"], [379, 2, 1, "", "set_inverse_transform_request"], [379, 2, 1, "", "set_params"], [379, 2, 1, "", "set_transform_request"], [379, 2, 1, "", "transform"], [379, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.SurfaceMapsMasker": [[380, 2, 1, "", "__init__"], [380, 2, 1, "", "fit"], [380, 2, 1, "", "fit_transform"], [380, 2, 1, "", "generate_report"], [380, 2, 1, "", "get_metadata_routing"], [380, 2, 1, "", "get_params"], [380, 2, 1, "", "inverse_transform"], [380, 2, 1, "", "set_fit_request"], [380, 2, 1, "", "set_inverse_transform_request"], [380, 2, 1, "", "set_params"], [380, 2, 1, "", "set_transform_request"], [380, 2, 1, "", "transform"], [380, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.SurfaceMasker": [[381, 2, 1, "", "__init__"], [381, 2, 1, "", "fit"], [381, 2, 1, "", "fit_transform"], [381, 2, 1, "", "generate_report"], [381, 2, 1, "", "get_metadata_routing"], [381, 2, 1, "", "get_params"], [381, 2, 1, "", "inverse_transform"], [381, 2, 1, "", "set_fit_request"], [381, 2, 1, "", "set_inverse_transform_request"], [381, 2, 1, "", "set_params"], [381, 2, 1, "", "set_transform_request"], [381, 2, 1, "", "transform"], [381, 2, 1, "", "transform_single_imgs"]], "nilearn.masking": [[382, 3, 1, "", "apply_mask"], [383, 3, 1, "", "compute_background_mask"], [384, 3, 1, "", "compute_brain_mask"], [385, 3, 1, "", "compute_epi_mask"], [386, 3, 1, "", "compute_multi_background_mask"], [387, 3, 1, "", "compute_multi_brain_mask"], [388, 3, 1, "", "compute_multi_epi_mask"], [389, 3, 1, "", "intersect_masks"], [390, 3, 1, "", "unmask"]], "nilearn.mass_univariate": [[391, 3, 1, "", "permuted_ols"]], "nilearn.plotting": [[489, 0, 0, "-", "displays"], [422, 3, 1, "", "find_cut_slices"], [423, 3, 1, "", "find_parcellation_cut_coords"], [424, 3, 1, "", "find_probabilistic_atlas_cut_coords"], [425, 3, 1, "", "find_xyz_cut_coords"], [489, 0, 0, "-", "img_comparison"], [428, 3, 1, "", "plot_anat"], [429, 3, 1, "", "plot_carpet"], [430, 3, 1, "", "plot_connectome"], [431, 3, 1, "", "plot_contrast_matrix"], [432, 3, 1, "", "plot_design_matrix"], [433, 3, 1, "", "plot_design_matrix_correlation"], [434, 3, 1, "", "plot_epi"], [435, 3, 1, "", "plot_event"], [436, 3, 1, "", "plot_glass_brain"], [437, 3, 1, "", "plot_img"], [438, 3, 1, "", "plot_img_on_surf"], [439, 3, 1, "", "plot_markers"], [440, 3, 1, "", "plot_matrix"], [441, 3, 1, "", "plot_prob_atlas"], [442, 3, 1, "", "plot_roi"], [443, 3, 1, "", "plot_stat_map"], [444, 3, 1, "", "plot_surf"], [445, 3, 1, "", "plot_surf_contours"], [446, 3, 1, "", "plot_surf_roi"], [447, 3, 1, "", "plot_surf_stat_map"], [448, 3, 1, "", "show"], [449, 3, 1, "", "view_connectome"], [450, 3, 1, "", "view_img"], [451, 3, 1, "", "view_img_on_surf"], [452, 3, 1, "", "view_markers"], [453, 3, 1, "", "view_surf"]], "nilearn.plotting.displays": [[392, 1, 1, "", "BaseAxes"], [393, 1, 1, "", "BaseSlicer"], [394, 1, 1, "", "CutAxes"], [395, 1, 1, "", "GlassBrainAxes"], [396, 1, 1, "", "LProjector"], [397, 1, 1, "", "LRProjector"], [398, 1, 1, "", "LYRProjector"], [399, 1, 1, "", "LYRZProjector"], [400, 1, 1, "", "LZRProjector"], [401, 1, 1, "", "LZRYProjector"], [402, 1, 1, "", "MosaicSlicer"], [403, 1, 1, "", "OrthoProjector"], [404, 1, 1, "", "OrthoSlicer"], [405, 1, 1, "", "PlotlySurfaceFigure"], [406, 1, 1, "", "RProjector"], [407, 1, 1, "", "TiledSlicer"], [408, 1, 1, "", "XProjector"], [409, 1, 1, "", "XSlicer"], [410, 1, 1, "", "XZProjector"], [411, 1, 1, "", "XZSlicer"], [412, 1, 1, "", "YProjector"], [413, 1, 1, "", "YSlicer"], [414, 1, 1, "", "YXProjector"], [415, 1, 1, "", "YXSlicer"], [416, 1, 1, "", "YZProjector"], [417, 1, 1, "", "YZSlicer"], [418, 1, 1, "", "ZProjector"], [419, 1, 1, "", "ZSlicer"], [420, 3, 1, "", "get_projector"], [421, 3, 1, "", "get_slicer"]], "nilearn.plotting.displays.BaseAxes": [[392, 2, 1, "", "__init__"], [392, 2, 1, "", "add_object_bounds"], [392, 2, 1, "", "draw_2d"], [392, 2, 1, "", "draw_left_right"], [392, 2, 1, "", "draw_position"], [392, 2, 1, "", "draw_scale_bar"], [392, 2, 1, "", "get_object_bounds"], [392, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.BaseSlicer": [[393, 2, 1, "", "__init__"], [393, 2, 1, "", "add_contours"], [393, 2, 1, "", "add_edges"], [393, 2, 1, "", "add_markers"], [393, 2, 1, "", "add_overlay"], [393, 2, 1, "", "annotate"], [393, 4, 1, "", "black_bg"], [393, 4, 1, "", "brain_color"], [393, 2, 1, "", "close"], [393, 2, 1, "", "find_cut_coords"], [393, 2, 1, "", "init_with_figure"], [393, 2, 1, "", "savefig"], [393, 2, 1, "", "title"]], "nilearn.plotting.displays.CutAxes": [[394, 2, 1, "", "__init__"], [394, 2, 1, "", "add_object_bounds"], [394, 2, 1, "", "draw_2d"], [394, 2, 1, "", "draw_left_right"], [394, 2, 1, "", "draw_position"], [394, 2, 1, "", "draw_scale_bar"], [394, 2, 1, "", "get_object_bounds"], [394, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.GlassBrainAxes": [[395, 2, 1, "", "__init__"], [395, 2, 1, "", "add_object_bounds"], [395, 2, 1, "", "draw_2d"], [395, 2, 1, "", "draw_left_right"], [395, 2, 1, "", "draw_position"], [395, 2, 1, "", "draw_scale_bar"], [395, 2, 1, "", "get_object_bounds"], [395, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.LProjector": [[396, 2, 1, "", "__init__"], [396, 2, 1, "", "add_contours"], [396, 2, 1, "", "add_edges"], [396, 2, 1, "", "add_graph"], [396, 2, 1, "", "add_markers"], [396, 2, 1, "", "add_overlay"], [396, 2, 1, "", "annotate"], [396, 4, 1, "", "black_bg"], [396, 4, 1, "", "brain_color"], [396, 2, 1, "", "close"], [396, 2, 1, "", "draw_cross"], [396, 2, 1, "", "find_cut_coords"], [396, 2, 1, "", "init_with_figure"], [396, 2, 1, "", "savefig"], [396, 2, 1, "", "title"]], "nilearn.plotting.displays.LRProjector": [[397, 2, 1, "", "__init__"], [397, 2, 1, "", "add_contours"], [397, 2, 1, "", "add_edges"], [397, 2, 1, "", "add_graph"], [397, 2, 1, "", "add_markers"], [397, 2, 1, "", "add_overlay"], [397, 2, 1, "", "annotate"], [397, 4, 1, "", "black_bg"], [397, 4, 1, "", "brain_color"], [397, 2, 1, "", "close"], [397, 2, 1, "", "draw_cross"], [397, 2, 1, "", "find_cut_coords"], [397, 2, 1, "", "init_with_figure"], [397, 2, 1, "", "savefig"], [397, 2, 1, "", "title"]], "nilearn.plotting.displays.LYRProjector": [[398, 2, 1, "", "__init__"], [398, 2, 1, "", "add_contours"], [398, 2, 1, "", "add_edges"], [398, 2, 1, "", "add_graph"], [398, 2, 1, "", "add_markers"], [398, 2, 1, "", "add_overlay"], [398, 2, 1, "", "annotate"], [398, 4, 1, "", "black_bg"], [398, 4, 1, "", "brain_color"], [398, 2, 1, "", "close"], [398, 2, 1, "", "draw_cross"], [398, 2, 1, "", "find_cut_coords"], [398, 2, 1, "", "init_with_figure"], [398, 2, 1, "", "savefig"], [398, 2, 1, "", "title"]], "nilearn.plotting.displays.LYRZProjector": [[399, 2, 1, "", "__init__"], [399, 2, 1, "", "add_contours"], [399, 2, 1, "", "add_edges"], [399, 2, 1, "", "add_graph"], [399, 2, 1, "", "add_markers"], [399, 2, 1, "", "add_overlay"], [399, 2, 1, "", "annotate"], [399, 4, 1, "", "black_bg"], [399, 4, 1, "", "brain_color"], [399, 2, 1, "", "close"], [399, 2, 1, "", "draw_cross"], [399, 2, 1, "", "find_cut_coords"], [399, 2, 1, "", "init_with_figure"], [399, 2, 1, "", "savefig"], [399, 2, 1, "", "title"]], "nilearn.plotting.displays.LZRProjector": [[400, 2, 1, "", "__init__"], [400, 2, 1, "", "add_contours"], [400, 2, 1, "", "add_edges"], [400, 2, 1, "", "add_graph"], [400, 2, 1, "", "add_markers"], [400, 2, 1, "", "add_overlay"], [400, 2, 1, "", "annotate"], [400, 4, 1, "", "black_bg"], [400, 4, 1, "", "brain_color"], [400, 2, 1, "", "close"], [400, 2, 1, "", "draw_cross"], [400, 2, 1, "", "find_cut_coords"], [400, 2, 1, "", "init_with_figure"], [400, 2, 1, "", "savefig"], [400, 2, 1, "", "title"]], "nilearn.plotting.displays.LZRYProjector": [[401, 2, 1, "", "__init__"], [401, 2, 1, "", "add_contours"], [401, 2, 1, "", "add_edges"], [401, 2, 1, "", "add_graph"], [401, 2, 1, "", "add_markers"], [401, 2, 1, "", "add_overlay"], [401, 2, 1, "", "annotate"], [401, 4, 1, "", "black_bg"], [401, 4, 1, "", "brain_color"], [401, 2, 1, "", "close"], [401, 2, 1, "", "draw_cross"], [401, 2, 1, "", "find_cut_coords"], [401, 2, 1, "", "init_with_figure"], [401, 2, 1, "", "savefig"], [401, 2, 1, "", "title"]], "nilearn.plotting.displays.MosaicSlicer": [[402, 2, 1, "", "__init__"], [402, 2, 1, "", "add_contours"], [402, 2, 1, "", "add_edges"], [402, 2, 1, "", "add_markers"], [402, 2, 1, "", "add_overlay"], [402, 2, 1, "", "annotate"], [402, 4, 1, "", "black_bg"], [402, 4, 1, "", "brain_color"], [402, 2, 1, "", "close"], [402, 2, 1, "", "draw_cross"], [402, 2, 1, "", "find_cut_coords"], [402, 2, 1, "", "init_with_figure"], [402, 2, 1, "", "savefig"], [402, 2, 1, "", "title"]], "nilearn.plotting.displays.OrthoProjector": [[403, 2, 1, "", "__init__"], [403, 2, 1, "", "add_contours"], [403, 2, 1, "", "add_edges"], [403, 2, 1, "", "add_graph"], [403, 2, 1, "", "add_markers"], [403, 2, 1, "", "add_overlay"], [403, 2, 1, "", "annotate"], [403, 4, 1, "", "black_bg"], [403, 4, 1, "", "brain_color"], [403, 2, 1, "", "close"], [403, 2, 1, "", "draw_cross"], [403, 2, 1, "", "find_cut_coords"], [403, 2, 1, "", "init_with_figure"], [403, 2, 1, "", "savefig"], [403, 2, 1, "", "title"]], "nilearn.plotting.displays.OrthoSlicer": [[404, 2, 1, "", "__init__"], [404, 2, 1, "", "add_contours"], [404, 2, 1, "", "add_edges"], [404, 2, 1, "", "add_markers"], [404, 2, 1, "", "add_overlay"], [404, 2, 1, "", "annotate"], [404, 4, 1, "", "black_bg"], [404, 4, 1, "", "brain_color"], [404, 2, 1, "", "close"], [404, 2, 1, "", "draw_cross"], [404, 2, 1, "", "find_cut_coords"], [404, 2, 1, "", "init_with_figure"], [404, 2, 1, "", "savefig"], [404, 2, 1, "", "title"]], "nilearn.plotting.displays.PlotlySurfaceFigure": [[405, 2, 1, "", "__init__"], [405, 2, 1, "", "add_contours"], [405, 2, 1, "", "savefig"], [405, 2, 1, "", "show"]], "nilearn.plotting.displays.RProjector": [[406, 2, 1, "", "__init__"], [406, 2, 1, "", "add_contours"], [406, 2, 1, "", "add_edges"], [406, 2, 1, "", "add_graph"], [406, 2, 1, "", "add_markers"], [406, 2, 1, "", "add_overlay"], [406, 2, 1, "", "annotate"], [406, 4, 1, "", "black_bg"], [406, 4, 1, "", "brain_color"], [406, 2, 1, "", "close"], [406, 2, 1, "", "draw_cross"], [406, 2, 1, "", "find_cut_coords"], [406, 2, 1, "", "init_with_figure"], [406, 2, 1, "", "savefig"], [406, 2, 1, "", "title"]], "nilearn.plotting.displays.TiledSlicer": [[407, 2, 1, "", "__init__"], [407, 2, 1, "", "add_contours"], [407, 2, 1, "", "add_edges"], [407, 2, 1, "", "add_markers"], [407, 2, 1, "", "add_overlay"], [407, 2, 1, "", "annotate"], [407, 4, 1, "", "black_bg"], [407, 4, 1, "", "brain_color"], [407, 2, 1, "", "close"], [407, 2, 1, "", "draw_cross"], [407, 2, 1, "", "find_cut_coords"], [407, 2, 1, "", "init_with_figure"], [407, 2, 1, "", "savefig"], [407, 2, 1, "", "title"]], "nilearn.plotting.displays.XProjector": [[408, 2, 1, "", "__init__"], [408, 2, 1, "", "add_contours"], [408, 2, 1, "", "add_edges"], [408, 2, 1, "", "add_graph"], [408, 2, 1, "", "add_markers"], [408, 2, 1, "", "add_overlay"], [408, 2, 1, "", "annotate"], [408, 4, 1, "", "black_bg"], [408, 4, 1, "", "brain_color"], [408, 2, 1, "", "close"], [408, 2, 1, "", "draw_cross"], [408, 2, 1, "", "find_cut_coords"], [408, 2, 1, "", "init_with_figure"], [408, 2, 1, "", "savefig"], [408, 2, 1, "", "title"]], "nilearn.plotting.displays.XSlicer": [[409, 2, 1, "", "__init__"], [409, 2, 1, "", "add_contours"], [409, 2, 1, "", "add_edges"], [409, 2, 1, "", "add_markers"], [409, 2, 1, "", "add_overlay"], [409, 2, 1, "", "annotate"], [409, 4, 1, "", "black_bg"], [409, 4, 1, "", "brain_color"], [409, 2, 1, "", "close"], [409, 2, 1, "", "draw_cross"], [409, 2, 1, "", "find_cut_coords"], [409, 2, 1, "", "init_with_figure"], [409, 2, 1, "", "savefig"], [409, 2, 1, "", "title"]], "nilearn.plotting.displays.XZProjector": [[410, 2, 1, "", "__init__"], [410, 2, 1, "", "add_contours"], [410, 2, 1, "", "add_edges"], [410, 2, 1, "", "add_graph"], [410, 2, 1, "", "add_markers"], [410, 2, 1, "", "add_overlay"], [410, 2, 1, "", "annotate"], [410, 4, 1, "", "black_bg"], [410, 4, 1, "", "brain_color"], [410, 2, 1, "", "close"], [410, 2, 1, "", "draw_cross"], [410, 2, 1, "", "find_cut_coords"], [410, 2, 1, "", "init_with_figure"], [410, 2, 1, "", "savefig"], [410, 2, 1, "", "title"]], "nilearn.plotting.displays.XZSlicer": [[411, 2, 1, "", "__init__"], [411, 2, 1, "", "add_contours"], [411, 2, 1, "", "add_edges"], [411, 2, 1, "", "add_markers"], [411, 2, 1, "", "add_overlay"], [411, 2, 1, "", "annotate"], [411, 4, 1, "", "black_bg"], [411, 4, 1, "", "brain_color"], [411, 2, 1, "", "close"], [411, 2, 1, "", "draw_cross"], [411, 2, 1, "", "find_cut_coords"], [411, 2, 1, "", "init_with_figure"], [411, 2, 1, "", "savefig"], [411, 2, 1, "", "title"]], "nilearn.plotting.displays.YProjector": [[412, 2, 1, "", "__init__"], [412, 2, 1, "", "add_contours"], [412, 2, 1, "", "add_edges"], [412, 2, 1, "", "add_graph"], [412, 2, 1, "", "add_markers"], [412, 2, 1, "", "add_overlay"], [412, 2, 1, "", "annotate"], [412, 4, 1, "", "black_bg"], [412, 4, 1, "", "brain_color"], [412, 2, 1, "", "close"], [412, 2, 1, "", "draw_cross"], [412, 2, 1, "", "find_cut_coords"], [412, 2, 1, "", "init_with_figure"], [412, 2, 1, "", "savefig"], [412, 2, 1, "", "title"]], "nilearn.plotting.displays.YSlicer": [[413, 2, 1, "", "__init__"], [413, 2, 1, "", "add_contours"], [413, 2, 1, "", "add_edges"], [413, 2, 1, "", "add_markers"], [413, 2, 1, "", "add_overlay"], [413, 2, 1, "", "annotate"], [413, 4, 1, "", "black_bg"], [413, 4, 1, "", "brain_color"], [413, 2, 1, "", "close"], [413, 2, 1, "", "draw_cross"], [413, 2, 1, "", "find_cut_coords"], [413, 2, 1, "", "init_with_figure"], [413, 2, 1, "", "savefig"], [413, 2, 1, "", "title"]], "nilearn.plotting.displays.YXProjector": [[414, 2, 1, "", "__init__"], [414, 2, 1, "", "add_contours"], [414, 2, 1, "", "add_edges"], [414, 2, 1, "", "add_graph"], [414, 2, 1, "", "add_markers"], [414, 2, 1, "", "add_overlay"], [414, 2, 1, "", "annotate"], [414, 4, 1, "", "black_bg"], [414, 4, 1, "", "brain_color"], [414, 2, 1, "", "close"], [414, 2, 1, "", "draw_cross"], [414, 2, 1, "", "find_cut_coords"], [414, 2, 1, "", "init_with_figure"], [414, 2, 1, "", "savefig"], [414, 2, 1, "", "title"]], "nilearn.plotting.displays.YXSlicer": [[415, 2, 1, "", "__init__"], [415, 2, 1, "", "add_contours"], [415, 2, 1, "", "add_edges"], [415, 2, 1, "", "add_markers"], [415, 2, 1, "", "add_overlay"], [415, 2, 1, "", "annotate"], [415, 4, 1, "", "black_bg"], [415, 4, 1, "", "brain_color"], [415, 2, 1, "", "close"], [415, 2, 1, "", "draw_cross"], [415, 2, 1, "", "find_cut_coords"], [415, 2, 1, "", "init_with_figure"], [415, 2, 1, "", "savefig"], [415, 2, 1, "", "title"]], "nilearn.plotting.displays.YZProjector": [[416, 2, 1, "", "__init__"], [416, 2, 1, "", "add_contours"], [416, 2, 1, "", "add_edges"], [416, 2, 1, "", "add_graph"], [416, 2, 1, "", "add_markers"], [416, 2, 1, "", "add_overlay"], [416, 2, 1, "", "annotate"], [416, 4, 1, "", "black_bg"], [416, 4, 1, "", "brain_color"], [416, 2, 1, "", "close"], [416, 2, 1, "", "draw_cross"], [416, 2, 1, "", "find_cut_coords"], [416, 2, 1, "", "init_with_figure"], [416, 2, 1, "", "savefig"], [416, 2, 1, "", "title"]], "nilearn.plotting.displays.YZSlicer": [[417, 2, 1, "", "__init__"], [417, 2, 1, "", "add_contours"], [417, 2, 1, "", "add_edges"], [417, 2, 1, "", "add_markers"], [417, 2, 1, "", "add_overlay"], [417, 2, 1, "", "annotate"], [417, 4, 1, "", "black_bg"], [417, 4, 1, "", "brain_color"], [417, 2, 1, "", "close"], [417, 2, 1, "", "draw_cross"], [417, 2, 1, "", "find_cut_coords"], [417, 2, 1, "", "init_with_figure"], [417, 2, 1, "", "savefig"], [417, 2, 1, "", "title"]], "nilearn.plotting.displays.ZProjector": [[418, 2, 1, "", "__init__"], [418, 2, 1, "", "add_contours"], [418, 2, 1, "", "add_edges"], [418, 2, 1, "", "add_graph"], [418, 2, 1, "", "add_markers"], [418, 2, 1, "", "add_overlay"], [418, 2, 1, "", "annotate"], [418, 4, 1, "", "black_bg"], [418, 4, 1, "", "brain_color"], [418, 2, 1, "", "close"], [418, 2, 1, "", "draw_cross"], [418, 2, 1, "", "find_cut_coords"], [418, 2, 1, "", "init_with_figure"], [418, 2, 1, "", "savefig"], [418, 2, 1, "", "title"]], "nilearn.plotting.displays.ZSlicer": [[419, 2, 1, "", "__init__"], [419, 2, 1, "", "add_contours"], [419, 2, 1, "", "add_edges"], [419, 2, 1, "", "add_markers"], [419, 2, 1, "", "add_overlay"], [419, 2, 1, "", "annotate"], [419, 4, 1, "", "black_bg"], [419, 4, 1, "", "brain_color"], [419, 2, 1, "", "close"], [419, 2, 1, "", "draw_cross"], [419, 2, 1, "", "find_cut_coords"], [419, 2, 1, "", "init_with_figure"], [419, 2, 1, "", "savefig"], [419, 2, 1, "", "title"]], "nilearn.plotting.img_comparison": [[426, 3, 1, "", "plot_bland_altman"], [427, 3, 1, "", "plot_img_comparison"]], "nilearn.regions": [[454, 1, 1, "", "HierarchicalKMeans"], [455, 1, 1, "", "Parcellations"], [456, 1, 1, "", "ReNA"], [457, 1, 1, "", "RegionExtractor"], [458, 3, 1, "", "connected_label_regions"], [459, 3, 1, "", "connected_regions"], [460, 3, 1, "", "img_to_signals_labels"], [461, 3, 1, "", "img_to_signals_maps"], [462, 3, 1, "", "recursive_neighbor_agglomeration"], [463, 3, 1, "", "signals_to_img_labels"], [464, 3, 1, "", "signals_to_img_maps"]], "nilearn.regions.HierarchicalKMeans": [[454, 2, 1, "", "__init__"], [454, 2, 1, "", "fit"], [454, 2, 1, "", "fit_predict"], [454, 2, 1, "", "fit_transform"], [454, 2, 1, "", "get_metadata_routing"], [454, 2, 1, "", "get_params"], [454, 2, 1, "", "inverse_transform"], [454, 2, 1, "", "set_inverse_transform_request"], [454, 2, 1, "", "set_params"], [454, 2, 1, "", "transform"]], "nilearn.regions.Parcellations": [[455, 5, 1, "", "VALID_METHODS"], [455, 2, 1, "", "__init__"], [455, 2, 1, "", "fit"], [455, 2, 1, "", "fit_transform"], [455, 2, 1, "", "get_metadata_routing"], [455, 2, 1, "", "get_params"], [455, 2, 1, "", "inverse_transform"], [455, 4, 1, "", "nifti_maps_masker_"], [455, 2, 1, "", "score"], [455, 2, 1, "", "set_fit_request"], [455, 2, 1, "", "set_inverse_transform_request"], [455, 2, 1, "", "set_params"], [455, 2, 1, "", "set_score_request"], [455, 2, 1, "", "set_transform_request"], [455, 2, 1, "", "transform"]], "nilearn.regions.ReNA": [[456, 2, 1, "", "__init__"], [456, 2, 1, "", "fit"], [456, 2, 1, "", "fit_predict"], [456, 2, 1, "", "fit_transform"], [456, 2, 1, "", "get_metadata_routing"], [456, 2, 1, "", "get_params"], [456, 2, 1, "", "inverse_transform"], [456, 2, 1, "", "set_inverse_transform_request"], [456, 2, 1, "", "set_params"], [456, 2, 1, "", "transform"]], "nilearn.regions.RegionExtractor": [[457, 2, 1, "", "__init__"], [457, 2, 1, "", "fit"], [457, 2, 1, "", "fit_transform"], [457, 2, 1, "", "generate_report"], [457, 2, 1, "", "get_metadata_routing"], [457, 2, 1, "", "get_params"], [457, 2, 1, "", "inverse_transform"], [457, 2, 1, "", "set_fit_request"], [457, 2, 1, "", "set_inverse_transform_request"], [457, 2, 1, "", "set_params"], [457, 2, 1, "", "set_transform_request"], [457, 2, 1, "", "transform"], [457, 2, 1, "", "transform_single_imgs"]], "nilearn.reporting": [[465, 1, 1, "", "HTMLReport"], [466, 3, 1, "", "get_clusters_table"], [467, 3, 1, "", "make_glm_report"]], "nilearn.reporting.HTMLReport": [[465, 2, 1, "", "__init__"], [465, 2, 1, "", "get_iframe"], [465, 2, 1, "", "get_standalone"], [465, 4, 1, "", "height"], [465, 2, 1, "", "open_in_browser"], [465, 2, 1, "", "resize"], [465, 2, 1, "", "save_as_html"], [465, 4, 1, "", "width"]], "nilearn.signal": [[468, 3, 1, "", "butterworth"], [469, 3, 1, "", "clean"], [470, 3, 1, "", "high_variance_confounds"]], "nilearn.surface": [[471, 1, 1, "", "FileMesh"], [472, 1, 1, "", "InMemoryMesh"], [473, 1, 1, "", "PolyData"], [474, 1, 1, "", "PolyMesh"], [475, 1, 1, "", "SurfaceImage"], [476, 1, 1, "", "SurfaceMesh"], [477, 3, 1, "", "load_surf_data"], [478, 3, 1, "", "load_surf_mesh"], [479, 3, 1, "", "vol_to_surf"]], "nilearn.surface.FileMesh": [[471, 2, 1, "", "__init__"], [471, 4, 1, "", "coordinates"], [471, 4, 1, "", "faces"], [471, 5, 1, "", "file_path"], [471, 2, 1, "", "loaded"], [471, 5, 1, "", "n_vertices"], [471, 2, 1, "", "to_gifti"]], "nilearn.surface.InMemoryMesh": [[472, 2, 1, "", "__init__"], [472, 5, 1, "", "coordinates"], [472, 5, 1, "", "faces"], [472, 5, 1, "", "n_vertices"], [472, 2, 1, "", "to_gifti"]], "nilearn.surface.PolyData": [[473, 2, 1, "", "__init__"], [473, 4, 1, "", "shape"], [473, 2, 1, "", "to_filename"]], "nilearn.surface.PolyMesh": [[474, 2, 1, "", "__init__"], [474, 5, 1, "", "n_vertices"], [474, 2, 1, "", "to_filename"]], "nilearn.surface.SurfaceImage": [[475, 2, 1, "", "__init__"], [475, 2, 1, "", "from_volume"], [475, 4, 1, "", "shape"]], "nilearn.surface.SurfaceMesh": [[476, 5, 1, "", "coordinates"], [476, 5, 1, "", "faces"], [476, 5, 1, "", "n_vertices"], [476, 2, 1, "", "to_gifti"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "property", "Python property"], "5": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:property", "5": "py:attribute"}, "terms": {"": [0, 2, 3, 4, 6, 7, 10, 11, 13, 17, 24, 26, 31, 32, 36, 41, 43, 44, 46, 47, 50, 51, 52, 53, 58, 59, 65, 66, 67, 68, 69, 70, 72, 73, 74, 77, 79, 80, 81, 82, 88, 93, 95, 96, 103, 105, 106, 107, 111, 113, 114, 118, 121, 130, 131, 135, 141, 148, 158, 159, 164, 165, 168, 172, 175, 176, 178, 179, 181, 182, 183, 184, 185, 187, 188, 190, 191, 192, 197, 198, 199, 200, 201, 202, 204, 205, 208, 209, 217, 220, 224, 225, 226, 228, 230, 232, 233, 236, 237, 239, 240, 241, 249, 251, 252, 260, 262, 263, 265, 266, 277, 282, 284, 305, 306, 307, 308, 309, 310, 311, 312, 313, 317, 319, 320, 327, 340, 344, 345, 354, 356, 360, 361, 362, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 429, 430, 438, 439, 444, 445, 446, 447, 449, 451, 453, 454, 455, 456, 457, 467, 469, 495], "0": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 120, 165, 166, 169, 171, 177, 178, 179, 180, 181, 190, 191, 192, 199, 202, 203, 207, 210, 211, 212, 213, 214, 215, 228, 229, 236, 239, 240, 241, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 322, 323, 324, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 349, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 428, 429, 430, 433, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 495, 496, 497, 499], "00": [8, 29, 32, 34, 35, 47, 48, 56, 62, 64, 73, 75, 84, 91, 99, 113, 115, 117, 480, 497], "000": [36, 45, 81, 96, 117, 176], "0000": 179, "000000": [11, 65, 68, 481], "00002": [118, 201, 250], "00008": [118, 121, 226, 282, 284], "000082": 11, "0001": [310, 311], "00013945e": 3, "0002": 179, "00058141e": 3, "000797": 52, "000828": 59, "000948": 51, "001": [6, 26, 35, 37, 44, 47, 48, 64, 65, 73, 78, 81, 82, 83, 94, 104, 113, 118, 135, 163, 181, 240, 241, 243, 310, 311, 327, 340, 343, 467, 480, 497], "0010042": 12, "0010042_rest_tshift_rpi_voreg_mni": 12, "00105989e": 3, "001213": 51, "00152": [118, 227], "00156": [106, 118, 391], "00167": [52, 118, 168], "001838": 52, "002": 44, "00231310e": 3, "00275954e": 3, "0029482": [118, 187], "003": 44, "003026": 51, "003096": 52, "00338": [118, 231, 237, 259, 263], "004": [43, 44, 118, 202, 224, 281], "004306": 52, "004826": 52, "005": [44, 118, 173, 307, 308], "005065": 6, "00512451": [118, 165, 240], "00563468": [47, 118, 177], "005777885591323e": 71, "005922": 52, "00599": [118, 197, 247], "006": [44, 52, 61, 118, 230, 266], "00645": 53, "00654873e": 3, "00662734e": 3, "007": [44, 59, 118, 165, 166, 223, 225, 257], "007294": 59, "00743128949229107": 77, "007541": 59, "00760e": 11, "00767647e": 3, "008": [35, 44], "00839984": [118, 177], "00847": 51, "009": [44, 118, 429], "009333": 52, "00991743": [118, 177], "00_tutori": [3, 4, 6, 7, 8, 186, 497], "00e": 480, "01": [3, 4, 6, 8, 13, 26, 29, 32, 34, 35, 40, 45, 48, 51, 54, 56, 58, 61, 62, 64, 70, 72, 73, 75, 84, 99, 102, 103, 104, 106, 108, 113, 114, 115, 118, 202, 206, 225, 241, 253, 257, 327, 330, 334, 365, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 480, 481, 497], "010": [23, 44, 51, 118, 170, 206, 261, 312], "010751": 52, "01093944": [118, 169, 457], "011": 44, "01147731": [118, 177], "012": 44, "013": 44, "014": 44, "01422": [26, 118], "014412": 51, "01499899481932693": 71, "015": 44, "015035": 51, "015679": 56, "016": [44, 68], "01696495e": 3, "017": 44, "01771803e": 3, "018": [44, 118, 202, 368, 369], "01872180e": 3, "018869405610297586": 71, "019": 44, "019085": 59, "0193": [118, 211, 212, 213, 214, 215, 236, 262, 290], "019374": 59, "01_plot": [10, 16, 23, 24, 26, 29, 186, 451, 497], "01_task": [6, 103, 104, 113], "01d": 3, "01hz": [68, 247], "02": [3, 32, 35, 48, 51, 54, 56, 62, 64, 65, 73, 75, 80, 84, 93, 102, 113, 115, 118, 170, 176, 202, 251, 312, 368, 369, 480, 497], "020": [44, 59, 107, 118, 217, 368, 369], "021": [44, 107], "02136584e": 3, "022": [44, 98, 99, 497], "022169": 59, "022416": 59, "022868": 56, "023": [44, 87, 99, 497], "023900": 59, "024": [26, 44, 118], "024188": 59, "024363": 35, "025": 44, "02587": 56, "026": 44, "026078": 59, "026206": 35, "026366": 59, "027": 44, "027587": 59, "027876": 59, "028": 44, "02837287e": 3, "028668": 65, "029": 44, "02904869": [118, 208, 254], "02912934e": 3, "029500": 59, "029747": 59, "02_decod": [31, 32, 35, 38, 42, 43, 44, 46, 48, 186, 497], "02_task": 113, "02d": 82, "02g": 73, "03": [3, 32, 34, 35, 44, 47, 53, 56, 59, 73, 75, 84, 93, 99, 113, 115, 118, 176, 185, 342, 368, 369, 391, 480, 481, 497], "030": 44, "03003189e": 3, "031": 44, "032": 44, "03259834e": 3, "03299257e": 3, "033": [44, 118, 202, 219], "033396": 59, "033577": 35, "033685": 59, "034": 44, "034236": 59, "034474": 53, "034483": 59, "034967": 6, "035": [39, 44, 118], "036": 44, "03624522e": 3, "03667567e": 3, "037": [44, 118], "038": [44, 54, 62, 497], "03858530e": 3, "03890133e": 3, "039": 44, "03926760e": 3, "0395": [118, 206], "0396": [118, 206], "03_connect": [50, 51, 52, 58, 60, 62, 151, 163, 186, 497], "03_task": 113, "03cm": 46, "03d": [44, 103], "03g": 77, "04": [3, 29, 32, 34, 35, 48, 52, 53, 56, 59, 62, 64, 73, 75, 93, 99, 113, 118, 165, 166, 178, 225, 257, 368, 369, 470, 480, 481, 497], "040": [44, 67, 75, 97, 99, 497], "04052969e": 3, "04068862e": 3, "041": [44, 118, 176], "042": [44, 118, 368, 369, 470], "042248": 59, "042495": 59, "04260847e": 3, "043": 44, "04385454e": 3, "044": 44, "044073": 56, "045": [44, 94, 99, 497], "04575602612203437": 71, "046": 44, "04617551e": 3, "047": 44, "0471754951": [118, 319, 320], "048": [44, 118, 368], "04804624e": 3, "04857316e": 3, "048779": 56, "049": 44, "049211": 59, "049458": 59, "04955626049962088": 71, "04965653e": 3, "04_glm_first_level": [64, 65, 66, 70, 72, 73, 74, 75, 179, 497], "04_task": 113, "04t21": [35, 480], "04t22": [64, 70, 73, 104], "04t23": 113, "05": [6, 26, 29, 32, 34, 35, 47, 48, 51, 53, 54, 56, 73, 77, 78, 79, 81, 83, 93, 102, 113, 115, 118, 181, 199, 200, 201, 205, 225, 228, 229, 231, 234, 235, 236, 237, 248, 249, 252, 257, 258, 259, 262, 263, 288, 317, 319, 320, 322, 480, 481, 497], "050": [44, 99], "0504136102": [118, 369], "051": 44, "052": [44, 118, 204, 277], "05201": [118, 171], "052775": 59, "05279819e": 3, "052952": 59, "053": 44, "053022": 59, "05306834e": 3, "053241": 59, "054": [44, 118, 176], "054759": 59, "054901960784313725": 111, "055": 44, "055006": 59, "055884": 65, "056": 44, "05616125e": 3, "057": 44, "05702274e": 3, "057023": 56, "058": 44, "059": 44, "05_advanc": [151, 163], "05_glm_second_level": [77, 79, 80, 81, 84, 497], "05_task": 113, "06": [23, 29, 34, 35, 47, 48, 64, 73, 77, 84, 93, 113, 118, 178, 202, 206, 251, 261, 309, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 443, 450, 480, 481, 497], "060": [44, 78, 106, 118, 322, 391], "0600244103": [118, 176, 187], "061": [44, 118, 185, 342, 391], "06153171e": 3, "062": [44, 54, 102, 118, 177], "062316": 56, "062676": 6, "063": [44, 118, 165], "064": [44, 118, 368, 369], "064266": 59, "06448072e": 3, "064554": 59, "064585": 59, "064873": 59, "065": 44, "065223": 56, "06522462e": 3, "066": 44, "066189": [118, 314, 318], "066584": 65, "06665184e": 3, "067": 44, "068": 44, "06831745e": 3, "068998": 59, "069": 44, "069287": 59, "06_manipulating_imag": [88, 93, 96, 99, 497], "06_task": 113, "06mm": [33, 35, 42, 46], "07": [29, 32, 34, 35, 39, 48, 52, 64, 73, 78, 93, 99, 113, 118, 172, 202, 219, 231, 259, 322, 456, 462, 480, 481, 497], "070": 44, "07013797e": 3, "071": 44, "072": 44, "07247275e": 3, "07299936e": 3, "073": [44, 59, 118, 172, 369], "07350015": [118, 391], "07354025e": 3, "074": 44, "075": 44, "07544061e": 3, "075540": 59, "075787": 59, "076": 44, "07603254e": 3, "077": [44, 65, 75, 497], "07737": 35, "077517": 59, "077764": 59, "078": 44, "079": 44, "079066": 65, "07_advanc": [103, 104, 111, 113, 114, 115, 497], "07_task": 113, "08": [32, 34, 35, 52, 64, 73, 75, 113, 114, 118, 165, 198, 202, 349, 368, 429, 480, 481], "080": [44, 118], "08007283e": 3, "081": 44, "0811879106": [118, 198], "081260": 6, "081441": 51, "081559": 59, "081847": 59, "082": [44, 118, 202, 251], "083": 44, "084": [44, 81, 84, 497], "085": 44, "08510387e": 3, "086": 44, "087": 44, "087084": 56, "088": 44, "08857380e": 3, "08861030e": 3, "089": 44, "089762": 56, "08_task": 113, "09": [32, 34, 35, 61, 62, 64, 65, 70, 73, 77, 99, 104, 113, 115, 118, 204, 206, 219, 228, 230, 253, 266, 277, 327, 340, 467, 480, 481, 497], "090": 44, "09015741e": 3, "09023": [135, 163], "090232306167813": [65, 104], "09026998e": 3, "0905267106": [118, 233, 260], "0908073106": [118, 202], "090935": 6, "091": 44, "091516": 65, "09183121e": 3, "092": 44, "093": [6, 8, 44, 497], "093286": 65, "094": 44, "09406322e": 3, "09408195e": 3, "09422464e": 3, "095": 44, "095605": 35, "096": 44, "096305": 65, "097": 44, "09703266e": 3, "0978": [118, 199, 249], "098": 44, "09866796e": 3, "098969": 53, "099": 44, "09930759e": 3, "09934956e": 3, "09_task": 113, "0a0": 148, "0c30ff": 11, "0min": [35, 51, 52, 53, 55, 56, 59, 61], "0mm": [86, 187], "0rc1": [160, 163], "0x7f969332dea0": 17, "0x7f969336c0d0": 65, "0x7f9693aa4d30": 101, "0x7f96a8334070": 42, "0x7f96a83340d0": 42, "0x7f96a8334100": 42, "0x7f96a8334160": 42, "0x7f96a83342b0": 42, "0x7f96a83343d0": 42, "0x7f96a8334520": 42, "0x7f96a8334820": 42, "0x7f96a8334850": 42, "0x7f96a83348e0": 42, "0x7f96a8334a00": 42, "0x7f96a8334af0": 42, "0x7f96a8334bb0": 42, "0x7f96a8334cd0": 42, "0x7f96a8334f40": 42, "0x7f96a8335060": 42, "0x7f96a8335210": 42, "0x7f96a8335420": 42, "0x7f96a8335570": 42, "0x7f96a8335690": 42, "0x7f96a83356f0": 42, "0x7f96a83358d0": 42, "0x7f96a8335900": 42, "0x7f96a8335930": 42, "0x7f96a8335960": 42, "0x7f96a8335ab0": 42, "0x7f96a8335c00": 42, "0x7f96a8335cc0": 42, "0x7f96a8335e40": 42, "0x7f96a8335f30": 42, "0x7f96a8335f60": 42, "0x7f96a8336170": 42, "0x7f96a8336200": 42, "0x7f96a8336230": 42, "0x7f96a8336290": 42, "0x7f96a8336380": 42, "0x7f96a83363b0": 42, "0x7f96a8336410": 42, "0x7f96a8336470": 42, "0x7f96a83364a0": 42, "0x7f96a8336560": 42, "0x7f96a83367a0": 42, "0x7f96a83367d0": 42, "0x7f96a8336860": 42, "0x7f96a8336980": 42, "0x7f96a8336a10": 42, "0x7f96a8336ad0": 42, "0x7f96a8336b00": 42, "0x7f96a8336b30": 42, "0x7f96a8336c50": 42, "0x7f96a8336da0": 42, "0x7f96a8336e00": 42, "0x7f96a8336f20": 42, "0x7f96a8337010": 42, "0x7f96a83373a0": 42, "0x7f96a83374f0": 42, "0x7f96a8337550": 42, "0x7f96a83375e0": 42, "0x7f96a8337640": 42, "0x7f96a8337700": 42, "0x7f96a83378e0": 42, "0x7f96a8337af0": 42, "0x7f96a8337b20": 42, "0x7f96a8337c10": 42, "0x7f96a8337c40": 42, "0x7f96a8337f10": 42, "0x7f96a8337fd0": 42, "0x7f96a96b0130": 59, "0x7f96aac2d150": 52, "0x7f96aac2eaa0": 52, "0x7f96aac2f5e0": 52, "0x7f96bc284190": 52, "0x7f96bc285420": 52, "0x7f96bc2875e0": 52, "0x7f96ca141c90": 65, "0x7f96ca1ad6c0": 54, "0x7f96ca1e0100": 52, "0x7f96ca1e1090": 52, "0x7f96ca1e2f20": 52, "0x7f96ca1ef5b0": 17, "0x7f96ce979d50": 16, "0x7f96d1028f40": 35, "0x7f96d2776830": 16, "0x7f96d2777c10": 16, "0x7f96d2825d50": 57, "0x7f96d2838310": 96, "0x7f96d2a4f610": 17, "0x7f96d2a68ee0": 17, "0x7f96d2e2dba0": 35, "0x7f96d2e442b0": [53, 94], "0x7f96d2e84580": 54, "0x7f96d2f3ad10": 17, "0x7f96d2fdb460": 65, "0x7f96d301ba30": 96, "0x7f96d303c0d0": 42, "0x7f96d303c130": 42, "0x7f96d303c1c0": 42, "0x7f96d303c1f0": 42, "0x7f96d303c3a0": 42, "0x7f96d303c3d0": 42, "0x7f96d303c730": 42, "0x7f96d303c940": 42, "0x7f96d303c9a0": 42, "0x7f96d303ca90": 42, "0x7f96d303cb20": 42, "0x7f96d303cc10": 42, "0x7f96d303cd30": 42, "0x7f96d303ce50": 42, "0x7f96d303cee0": 42, "0x7f96d303cfa0": 42, "0x7f96d303cfd0": 42, "0x7f96d303d120": 42, "0x7f96d303d3f0": 42, "0x7f96d303d420": 42, "0x7f96d303d4e0": 42, "0x7f96d303d5d0": 42, "0x7f96d303d6f0": 42, "0x7f96d303d7b0": 42, "0x7f96d303d8a0": 42, "0x7f96d303d900": 42, "0x7f96d303d930": 42, "0x7f96d303dba0": 42, "0x7f96d303dc60": 42, "0x7f96d303dea0": 42, "0x7f96d303ded0": 42, "0x7f96d303df90": 42, "0x7f96d303dfc0": 42, "0x7f96d303e080": 42, "0x7f96d303e3e0": 42, "0x7f96d303e410": 42, "0x7f96d303e4a0": 42, "0x7f96d303e530": 42, "0x7f96d303e5f0": 42, "0x7f96d303e6b0": 42, "0x7f96d303e710": 42, "0x7f96d303e740": 42, "0x7f96d303e770": 42, "0x7f96d303e7a0": 42, "0x7f96d303e860": 42, "0x7f96d303eaa0": 42, "0x7f96d303eb60": 42, "0x7f96d303ecb0": 42, "0x7f96d303eda0": 42, "0x7f96d303eec0": 42, "0x7f96d303efe0": 42, "0x7f96d303f0d0": 42, "0x7f96d303f1c0": 42, "0x7f96d303f220": 42, "0x7f96d303f310": 42, "0x7f96d303f340": 42, "0x7f96d303f430": 42, "0x7f96d303f640": 42, "0x7f96d303f6d0": 42, "0x7f96d303f790": 42, "0x7f96d303f970": 42, "0x7f96d303fa60": 42, "0x7f96d303faf0": 42, "0x7f96d303fc70": 42, "0x7f96d303fd90": 42, "0x7f96d303fe20": 42, "0x7f96d303ff40": 42, "0x7f96d3061d80": 61, "0x7f96d33275b0": 52, "0x7f96d33a85e0": 52, "0x7f96d591d870": 35, "0x7f96d591db70": 35, "0x7f96d591f3a0": 35, "0x7f96d591fd00": 35, "0x7f96d5b85c00": 98, "0x7f96d6aa59c0": 61, "0x7f96d6aa6500": 98, "0x7f96d6ab75b0": 27, "0x7f96d6ae49a0": 77, "0x7f96d6ae7a30": 83, "0x7f96d6b203a0": 42, "0x7f96d6b217b0": 96, "0x7f96d6b21ba0": 42, "0x7f96d6b22410": 42, "0x7f96d6b23c40": 42, "0x7f96d6b44d60": 46, "0x7f96d6b93df0": 4, "0x7f96d6b9c190": 42, "0x7f96d6b9e350": 42, "0x7f96d6bccb20": 56, "0x7f96d6bcf9d0": 56, "0x7f96d6bd00d0": 42, "0x7f96d6bd0130": 42, "0x7f96d6bd0190": 42, "0x7f96d6bd0490": 42, "0x7f96d6bd0520": 42, "0x7f96d6bd0610": 42, "0x7f96d6bd07f0": 42, "0x7f96d6bd0880": 42, "0x7f96d6bd0b80": 42, "0x7f96d6bd0be0": 42, "0x7f96d6bd0cd0": 42, "0x7f96d6bd0d60": 42, "0x7f96d6bd0eb0": 17, "0x7f96d6bd1150": 42, "0x7f96d6bd11b0": 42, "0x7f96d6bd11e0": 42, "0x7f96d6bd12a0": 42, "0x7f96d6bd1300": 42, "0x7f96d6bd13c0": 42, "0x7f96d6bd1420": 42, "0x7f96d6bd14b0": 42, "0x7f96d6bd1570": 42, "0x7f96d6bd18a0": 42, "0x7f96d6bd1b70": 42, "0x7f96d6bd1c30": 42, "0x7f96d6bd1d50": 42, "0x7f96d6bd1e40": 42, "0x7f96d6bd1f00": 42, "0x7f96d6bd2110": 42, "0x7f96d6bd2320": 42, "0x7f96d6bd2560": 42, "0x7f96d6bd27d0": 42, "0x7f96d6bd2800": 42, "0x7f96d6bd2a10": 42, "0x7f96d6bd2b60": 42, "0x7f96d6bd2bf0": 42, "0x7f96d6bd2c80": 42, "0x7f96d6bd2d40": 42, "0x7f96d6bd2e00": 42, "0x7f96d6bd2e90": 42, "0x7f96d6bd2ec0": 42, "0x7f96d6bd2f50": 42, "0x7f96d6bd2fb0": 42, "0x7f96d6bd30d0": 42, "0x7f96d6bd3160": 42, "0x7f96d6bd3220": 15, "0x7f96d6bd3310": 42, "0x7f96d6bd3400": 42, "0x7f96d6bd34c0": 42, "0x7f96d6bd3520": 42, "0x7f96d6bd3640": 42, "0x7f96d6bd3730": 42, "0x7f96d6bd3790": 42, "0x7f96d6bd39a0": 42, "0x7f96d6bd3b80": 42, "0x7f96d6bd3d30": 42, "0x7f96d6bd3dc0": 42, "0x7f96d6bd3f70": 42, "0x7f96d6bd3fa0": 42, "0x7f96d6c25f90": 4, "0x7f96d6c26d10": 46, "0x7f96d6c384c0": 2, "0x7f96d6c384f0": 18, "0x7f96d6c82380": 5, "0x7f96d6c85d20": 11, "0x7f96d6c87700": 15, "0x7f96d6cb89d0": 56, "0x7f96d6cb9450": 16, "0x7f96d6d1c8b0": 15, "0x7f96d6d94d00": 42, "0x7f96d6d94d30": 42, "0x7f96d6d95c30": 42, "0x7f96d6d969e0": [55, 59], "0x7f96d6d96ad0": 42, "0x7f96d6d97130": 42, "0x7f96d6d97bb0": 42, "0x7f96d6d97d00": 42, "0x7f96d6d97d60": 42, "0x7f96d6da70a0": 4, "0x7f96d6e356c0": 2, "0x7f96d6e37850": 38, "0x7f96d6e541f0": 42, "0x7f96d6e54220": 42, "0x7f96d6e54370": 59, "0x7f96d6e7c880": 42, "0x7f96d6e7cbb0": 42, "0x7f96d6e7cc40": 42, "0x7f96d6e7ccd0": 42, "0x7f96d6e7cdc0": 42, "0x7f96d6e7cf40": 42, "0x7f96d6e7d000": 42, "0x7f96d6e7d060": 42, "0x7f96d6e7d5a0": 42, "0x7f96d6e7d630": 42, "0x7f96d6e7d690": 42, "0x7f96d6e7de40": 42, "0x7f96d6e7dea0": 42, "0x7f96d6e7e440": 42, "0x7f96d6e7e500": 42, "0x7f96d6e7edd0": 42, "0x7f96d6e7ef20": 42, "0x7f96d6e7f010": 42, "0x7f96d6e7f340": 42, "0x7f96d6e7fb50": 42, "0x7f96d6ee2dd0": 77, "0x7f96d6ee2e90": 4, "0x7f96d6f30700": 42, "0x7f96d6f67940": 15, "0x7f96d6f9a380": 38, "0x7f96d6fc51b0": 17, "0x7f96d6fd80d0": 42, "0x7f96d6fd81f0": 42, "0x7f96d6fd8460": 42, "0x7f96d6fd8490": 42, "0x7f96d6fd8d00": 42, "0x7f96d6fd9660": 42, "0x7f96d6fd9930": 42, "0x7f96d6fd9ba0": 42, "0x7f96d6fda320": 42, "0x7f96d6fdb130": 42, "0x7f96d6fdb730": 42, "0x7f96d6fdb7c0": 42, "0x7f96d6fdb850": 42, "0x7f96d6fe0040": 35, "0x7f96d6fe0400": 35, "0x7f96d6fe0550": 15, "0x7f96d6ff1b40": 42, "0x7f96d6ff2dd0": 42, "0x7f96d70171c0": 91, "0x7f96d7017970": 59, "0x7f96d70e2e30": 18, "0x7f96d7125450": 42, "0x7f96d7126f50": 59, "0x7f96d7127880": [2, 42], "0x7f96d7198160": 15, "0x7f96d71983d0": 42, "0x7f96d71986a0": 42, "0x7f96d71997e0": 42, "0x7f96d7199f00": 42, "0x7f96d719a470": 42, "0x7f96d719a5f0": 42, "0x7f96d719af50": 42, "0x7f96d721d5d0": 56, "0x7f96d7220af0": 42, "0x7f96d7221930": 42, "0x7f96d7221e10": 42, "0x7f96d7221f90": 42, "0x7f96d7222020": [42, 65], "0x7f96d7223e50": 42, "0x7f96d72ad570": 77, "0x7f96d72e21a0": 42, "0x7f96d72e2680": 42, "0x7f96d72e28c0": 42, "0x7f96deffdc60": 91, "0x7f96ee7bfa90": 98, "0x7f96eea1dc90": 52, "0x7f96eea1fa00": 91, "0x7f96eea67b20": 55, "0x7f96eec9c160": 55, "0x7f96eec9cac0": 83, "0x7f96ef054a00": 52, "0x7f96ef214cd0": 35, "0x7f96ef215630": 61, "0x7f96ef216860": 35, "0x7f96ef217e50": 35, "0x7f96f0450070": 42, "0x7f96f04500a0": 42, "0x7f96f0450100": 42, "0x7f96f04501c0": 42, "0x7f96f04502b0": 42, "0x7f96f0450460": 42, "0x7f96f04505b0": 42, "0x7f96f04505e0": 42, "0x7f96f0450730": 42, "0x7f96f0450820": 42, "0x7f96f0450850": 42, "0x7f96f04508e0": 42, "0x7f96f0450b50": 42, "0x7f96f0450c70": 42, "0x7f96f0450df0": 42, "0x7f96f0450f10": 42, "0x7f96f0450fa0": 42, "0x7f96f0451030": 42, "0x7f96f0451240": 42, "0x7f96f04512d0": 42, "0x7f96f0451450": 42, "0x7f96f04515a0": 42, "0x7f96f0451600": 42, "0x7f96f04516f0": 42, "0x7f96f0451720": 42, "0x7f96f0451780": 42, "0x7f96f04518a0": 42, "0x7f96f0451b70": 42, "0x7f96f0451f00": 42, "0x7f96f0451ff0": 42, "0x7f96f0452020": 42, "0x7f96f04520e0": 42, "0x7f96f0452140": 42, "0x7f96f04521d0": 42, "0x7f96f0452290": 42, "0x7f96f04522f0": 42, "0x7f96f0452500": 42, "0x7f96f04526b0": 42, "0x7f96f04526e0": 42, "0x7f96f0452860": 42, "0x7f96f0452890": 42, "0x7f96f0452b60": 42, "0x7f96f0452bf0": 42, "0x7f96f0452c50": 42, "0x7f96f0452d70": 42, "0x7f96f0452e00": 42, "0x7f96f0452fb0": 42, "0x7f96f0453220": 42, "0x7f96f04532b0": 42, "0x7f96f0453400": 42, "0x7f96f0453490": 42, "0x7f96f04534f0": 42, "0x7f96f0453520": 42, "0x7f96f04536d0": 42, "0x7f96f0453880": 42, "0x7f96f0453a90": 42, "0x7f96f0453b50": 42, "0x7f96f0453b80": 42, "0x7f96f0453d30": 42, "0x7f96f0453d90": 42, "0x7f96f0453f40": 42, "0x7f96f0453fa0": 42, "0x7f96f0453fd0": 42, "0x7f96f04a2920": 51, "0x7f96f04a3250": 16, "0x7f96f04ec070": 42, "0x7f96f04ec100": 42, "0x7f96f04ec130": 42, "0x7f96f04ec3a0": 42, "0x7f96f04ec5e0": 42, "0x7f96f04ec670": 33, "0x7f96f04ec820": 42, "0x7f96f04ec850": 42, "0x7f96f04ec940": 42, "0x7f96f04eca60": 42, "0x7f96f04ecbb0": [42, 65], "0x7f96f04ecc70": 42, "0x7f96f04eccd0": 42, "0x7f96f04ecd00": 42, "0x7f96f04ed180": 42, "0x7f96f04ed1e0": 42, "0x7f96f04ed300": 42, "0x7f96f04ed360": 42, "0x7f96f04ed480": 42, "0x7f96f04ed690": 42, "0x7f96f04ed9f0": 42, "0x7f96f04edab0": 42, "0x7f96f04edae0": 42, "0x7f96f04edb10": 42, "0x7f96f04edba0": 42, "0x7f96f04ee140": 42, "0x7f96f04ee200": 42, "0x7f96f04ee290": 42, "0x7f96f04ee2f0": 42, "0x7f96f04ee3b0": 42, "0x7f96f04ee4a0": 42, "0x7f96f04ee6e0": 42, "0x7f96f04ee740": 42, "0x7f96f04ee7a0": 42, "0x7f96f04ee890": 42, "0x7f96f04eea10": 42, "0x7f96f04eec20": 42, "0x7f96f04eed40": 42, "0x7f96f04eef80": 42, "0x7f96f04ef280": 42, "0x7f96f04ef2e0": 42, "0x7f96f04ef400": 42, "0x7f96f04ef490": 42, "0x7f96f04ef4c0": 42, "0x7f96f04ef5b0": 42, "0x7f96f04ef610": 42, "0x7f96f04efaf0": 42, "0x7f96f04efcd0": 33, "0x7f96f04efd00": 42, "0x7f96f04efd60": 15, "0x7f96f04efe20": 42, "0x7f96f04efee0": 42, "0x7f96f0530ac0": 55, "0x7f96f07bc0a0": 42, "0x7f96f07bc1c0": 42, "0x7f96f07bc340": 42, "0x7f96f07bc550": 42, "0x7f96f07bc5b0": 42, "0x7f96f07bc640": 42, "0x7f96f07bc6d0": 42, "0x7f96f07bc730": 42, "0x7f96f07bc7f0": 42, "0x7f96f07bc880": 42, "0x7f96f07bc9a0": 42, "0x7f96f07bca00": 42, "0x7f96f07bca90": 42, "0x7f96f07bcac0": 42, "0x7f96f07bcaf0": 42, "0x7f96f07bcc70": 42, "0x7f96f07bcd60": 42, "0x7f96f07bceb0": 42, "0x7f96f07bcee0": 42, "0x7f96f07bd060": 42, "0x7f96f07bd150": 42, "0x7f96f07bd210": 42, "0x7f96f07bd360": 42, "0x7f96f07bd3f0": 42, "0x7f96f07bd840": 42, "0x7f96f07bd900": 42, "0x7f96f07bdba0": 96, "0x7f96f07bdc60": 42, "0x7f96f07bddb0": 42, "0x7f96f07be020": 42, "0x7f96f07be140": 42, "0x7f96f07be260": 42, "0x7f96f07be2c0": 42, "0x7f96f07be3b0": 42, "0x7f96f07be4a0": 42, "0x7f96f07be560": 42, "0x7f96f07be6e0": 42, "0x7f96f07be8c0": 42, "0x7f96f07be950": 42, "0x7f96f07beb00": 42, "0x7f96f07beb30": 42, "0x7f96f07bece0": 42, "0x7f96f07bed40": 42, "0x7f96f07bed70": 42, "0x7f96f07bee00": 42, "0x7f96f07bee60": 42, "0x7f96f07beec0": 42, "0x7f96f07bf160": 42, "0x7f96f07bf280": 42, "0x7f96f07bf310": 42, "0x7f96f07bf370": 42, "0x7f96f07bf4c0": 42, "0x7f96f07bf550": 42, "0x7f96f07bf670": 42, "0x7f96f07bf7f0": 42, "0x7f96f07bf880": 42, "0x7f96f07bfa00": 42, "0x7f96f07bfdf0": 42, "0x7f96f07bff40": 42, "0x7f96f07d3700": 65, "0x7f96f0915ed0": 83, "0x7f96f094d8d0": 52, "0x7f96f0ac41c0": 42, "0x7f96f0ac7e80": 17, "0x7f96f0ba8880": 61, "0x7f96f0d84ac0": 42, "0x7f96f0d84b50": 42, "0x7f96f0d85150": 42, "0x7f96f0d85870": 42, "0x7f96f0d86020": 42, "0x7f96f0d86a40": 42, "0x7f96f0d87040": 42, "0x7f96f0d87370": 42, "0x7f96f0d87fa0": 42, "0x7f96f0d8c5b0": 52, "0x7f96f0d8f3d0": 16, "0x7f96f0d97f40": 61, "0x7f96f0e1c100": 42, "0x7f96f0e1c1f0": 42, "0x7f96f0e1c430": 42, "0x7f96f0e1c5b0": 42, "0x7f96f0e1c6d0": 42, "0x7f96f0e1c700": 42, "0x7f96f0e1c790": 42, "0x7f96f0e1c7f0": 42, "0x7f96f0e1c850": 42, "0x7f96f0e1c880": 42, "0x7f96f0e1c910": 42, "0x7f96f0e1caf0": 42, "0x7f96f0e1cb50": 42, "0x7f96f0e1cdc0": 42, "0x7f96f0e1d090": 42, "0x7f96f0e1d120": 42, "0x7f96f0e1d180": 42, "0x7f96f0e1d1b0": 42, "0x7f96f0e1d450": 42, "0x7f96f0e1d480": 42, "0x7f96f0e1d570": 42, "0x7f96f0e1d660": 42, "0x7f96f0e1d690": 42, "0x7f96f0e1d870": 42, "0x7f96f0e1d900": 42, "0x7f96f0e1da20": 42, "0x7f96f0e1db70": 42, "0x7f96f0e1dba0": 42, "0x7f96f0e1dbd0": 42, "0x7f96f0e1dc00": 42, "0x7f96f0e1dc30": 42, "0x7f96f0e1dfc0": 42, "0x7f96f0e1dff0": 42, "0x7f96f0e1e320": 42, "0x7f96f0e1e440": 42, "0x7f96f0e1e770": 42, "0x7f96f0e1e890": 42, "0x7f96f0e1e8f0": 42, "0x7f96f0e1e920": 42, "0x7f96f0e1eb30": 42, "0x7f96f0e1ed70": 42, "0x7f96f0e1eda0": 42, "0x7f96f0e1ee30": 42, "0x7f96f0e1ee60": 42, "0x7f96f0e1f040": 42, "0x7f96f0e1f190": 42, "0x7f96f0e1f580": 42, "0x7f96f0e1f610": 42, "0x7f96f0e1f640": 42, "0x7f96f0e1f9a0": 42, "0x7f96f0e1fa00": 42, "0x7f96f0e1fa30": 42, "0x7f96f0e1fa90": 42, "0x7f96f0e1faf0": 42, "0x7f96f0e1fb20": 42, "0x7f96f0e1fd00": 42, "0x7f96f0e1fd60": 59, "0x7f96f0e1fdf0": 42, "0x7f96f0e1fe20": 42, "0x7f96f0e1fe80": 42, "0x7f96f0e1ff40": 42, "0x7f96f0e75720": 59, "0x7f96f0e77a90": 59, "0x7f96f0ed0100": 42, "0x7f96f0ed0190": 42, "0x7f96f0ed03a0": 42, "0x7f96f0ed0670": 42, "0x7f96f0ed06a0": 42, "0x7f96f0ed07c0": 42, "0x7f96f0ed0880": 42, "0x7f96f0ed08e0": 42, "0x7f96f0ed0a60": 42, "0x7f96f0ed0be0": 42, "0x7f96f0ed0e20": 42, "0x7f96f0ed0f40": 42, "0x7f96f0ed1030": 42, "0x7f96f0ed11b0": 42, "0x7f96f0ed13c0": 42, "0x7f96f0ed1630": 42, "0x7f96f0ed1660": 42, "0x7f96f0ed18a0": 42, "0x7f96f0ed1a20": 42, "0x7f96f0ed1a50": 42, "0x7f96f0ed1ae0": 42, "0x7f96f0ed1e10": 42, "0x7f96f0ed1e40": 42, "0x7f96f0ed2080": 42, "0x7f96f0ed21d0": 42, "0x7f96f0ed2290": 42, "0x7f96f0ed22c0": 42, "0x7f96f0ed2410": 42, "0x7f96f0ed2470": 42, "0x7f96f0ed2590": 42, "0x7f96f0ed25c0": 42, "0x7f96f0ed25f0": 42, "0x7f96f0ed26b0": 42, "0x7f96f0ed2770": 42, "0x7f96f0ed27d0": 42, "0x7f96f0ed2800": 42, "0x7f96f0ed2830": 42, "0x7f96f0ed2bc0": 42, "0x7f96f0ed2d10": 42, "0x7f96f0ed2d40": 42, "0x7f96f0ed2e90": 42, "0x7f96f0ed2ec0": 42, "0x7f96f0ed2ef0": 42, "0x7f96f0ed2f80": 42, "0x7f96f0ed2fb0": 42, "0x7f96f0ed3100": 42, "0x7f96f0ed3220": 42, "0x7f96f0ed3280": 42, "0x7f96f0ed35b0": 42, "0x7f96f0ed3610": 42, "0x7f96f0ed36a0": 42, "0x7f96f0ed36d0": 42, "0x7f96f0ed3700": 42, "0x7f96f0ed3730": 42, "0x7f96f0ed3760": 42, "0x7f96f0ed37c0": 42, "0x7f96f0ed38e0": 42, "0x7f96f0ed3a00": 42, "0x7f96f0ed3a60": 42, "0x7f96f0ed3af0": 42, "0x7f96f0ed3b80": 42, "0x7f96f0ed3bb0": 42, "0x7f96f0ed3d30": 42, "0x7f96f10c69e0": 77, "0x7f96f10c7400": 77, "0x7f96f1118310": 53, "0x7f96f1118550": 53, "0x7f96f1118880": 53, "0x7f96f1119090": 53, "0x7f96f1119510": 53, "0x7f96f1119720": 53, "0x7f96f1119c00": 53, "0x7f96f1119d20": 53, "0x7f96f111a020": 53, "0x7f96f111a200": 53, "0x7f96f111a260": 53, "0x7f96f111a950": 53, "0x7f96f111abf0": 53, "0x7f96f111b280": 53, "0x7f96f111b340": 53, "0x7f96f111b370": 53, "0x7f96f111b430": 53, "0x7f96f111bdf0": 53, "0x7f96f111be50": 53, "0x7f96f1148460": 59, "0x7f96f1181c30": 61, "0x7f96f1244ca0": 10, "0x7f96f132f610": 61, "0x7f96f13ac6a0": 35, "0x7f96f1438070": 42, "0x7f96f1438130": 42, "0x7f96f1438250": 42, "0x7f96f1438430": 42, "0x7f96f1438550": 42, "0x7f96f1438730": 42, "0x7f96f1438760": 42, "0x7f96f1438970": 42, "0x7f96f14389a0": 42, "0x7f96f1438a90": 42, "0x7f96f1438b20": 42, "0x7f96f1438b50": 42, "0x7f96f1438bb0": 42, "0x7f96f1438cd0": 42, "0x7f96f1438fa0": 42, "0x7f96f1439000": 42, "0x7f96f14392a0": 42, "0x7f96f1439300": 42, "0x7f96f1439360": 42, "0x7f96f14393c0": 42, "0x7f96f14393f0": 42, "0x7f96f1439420": 42, "0x7f96f1439450": 42, "0x7f96f14398a0": 42, "0x7f96f1439a20": 42, "0x7f96f1439ab0": 42, "0x7f96f1439b70": 42, "0x7f96f1439d50": 42, "0x7f96f1439db0": 42, "0x7f96f1439f00": 42, "0x7f96f1439f30": 42, "0x7f96f143a050": 15, "0x7f96f143a1d0": 42, "0x7f96f143a3e0": 42, "0x7f96f143a590": 42, "0x7f96f143a800": 42, "0x7f96f143a830": 42, "0x7f96f143a8c0": 42, "0x7f96f143a950": 42, "0x7f96f143a9b0": 42, "0x7f96f143a9e0": 42, "0x7f96f143aa10": 42, "0x7f96f143ae90": 42, "0x7f96f143aec0": 42, "0x7f96f143af20": 42, "0x7f96f143afe0": 42, "0x7f96f143b1f0": 42, "0x7f96f143b280": 42, "0x7f96f143b3d0": 42, "0x7f96f143b460": 42, "0x7f96f143b520": 42, "0x7f96f143b6a0": 42, "0x7f96f143b730": 16, "0x7f96f143b7c0": 42, "0x7f96f143b7f0": 42, "0x7f96f143b940": 42, "0x7f96f143b970": 42, "0x7f96f143bca0": 42, "0x7f96f143bd60": 42, "0x7f96f143be50": 42, "0x7f96f143be80": 42, "0x7f96f14f4d00": 15, "0x7f96f14f4ee0": 14, "0x7f96f14f78b0": 98, "0x7f96f152a8f0": 59, "0x7f96f15d99f0": 38, "0x7f96f4d84040": 42, "0x7f96f4d84100": 42, "0x7f96f4d841f0": 42, "0x7f96f4d842e0": 42, "0x7f96f4d84340": 42, "0x7f96f4d843d0": 42, "0x7f96f4d84400": 42, "0x7f96f4d84430": 42, "0x7f96f4d84550": 42, "0x7f96f4d84640": 42, "0x7f96f4d846d0": 42, "0x7f96f4d84790": 42, "0x7f96f4d849a0": [42, 52], "0x7f96f4d84a60": 16, "0x7f96f4d84c70": 42, "0x7f96f4d84ca0": 42, "0x7f96f4d84f70": 42, "0x7f96f4d852d0": 42, "0x7f96f4d86440": 42, "0x7f96f4d864d0": 42, "0x7f96f4d86680": 42, "0x7f96f4d86710": 42, "0x7f96f4d86800": 42, "0x7f96f4d86920": 42, "0x7f96f4d86980": 42, "0x7f96f4d869e0": 42, "0x7f96f4d86a10": 42, "0x7f96f4d86a40": 42, "0x7f96f4d86ad0": 42, "0x7f96f4d86b00": [42, 51], "0x7f96f4d86b30": 42, "0x7f96f4d86b90": 42, "0x7f96f4d86d40": 16, "0x7f96f4d86dd0": 18, "0x7f96f4d86fe0": 42, "0x7f96f4d87220": 42, "0x7f96f4e7bcd0": 42, "0x7f96f4e7be80": 42, "0x7f96fe1bbbe0": 52, "0x7f96fe22bb50": 27, "0x7f96fe245210": 77, "0x7f96fe245990": 59, "0x7f96fe3a67a0": 96, "0x7f96fe3c8ac0": 16, "0x7f96fe3c93f0": 17, "0x7f96fe410610": 16, "0x7f96fe410a90": 35, "0x7f96fe4422c0": 96, "0x7f96fe4484f0": 15, "0x7f96fe44b9d0": 14, "0x7f96fe470340": 45, "0x7f96fe4f0190": 17, "0x7f96fe4f3e50": 83, "0x7f96fe5c0100": 42, "0x7f96fe5c0160": 42, "0x7f96fe5c0280": 42, "0x7f96fe5c03a0": 42, "0x7f96fe5c03d0": 42, "0x7f96fe5c0400": 42, "0x7f96fe5c0490": 42, "0x7f96fe5c0580": 42, "0x7f96fe5c0730": 42, "0x7f96fe5c07c0": 42, "0x7f96fe5c07f0": 42, "0x7f96fe5c0880": 42, "0x7f96fe5c0a00": 42, "0x7f96fe5c0be0": 42, "0x7f96fe5c0c10": 42, "0x7f96fe5c0f40": 42, "0x7f96fe5c10c0": 42, "0x7f96fe5c11e0": 42, "0x7f96fe5c1210": 42, "0x7f96fe5c1270": 42, "0x7f96fe5c1480": 42, "0x7f96fe5c1630": 42, "0x7f96fe5c1660": 42, "0x7f96fe5c17b0": 42, "0x7f96fe5c18d0": 42, "0x7f96fe5c1930": 42, "0x7f96fe5c1960": 42, "0x7f96fe5c1a80": 42, "0x7f96fe5c1ae0": 42, "0x7f96fe5c1d80": 42, "0x7f96fe5c1db0": 42, "0x7f96fe5c1e70": 42, "0x7f96fe5c1ea0": 42, "0x7f96fe5c1ed0": 42, "0x7f96fe5c2020": 42, "0x7f96fe5c2110": 42, "0x7f96fe5c21a0": 24, "0x7f96fe5c22f0": 42, "0x7f96fe5c2320": 42, "0x7f96fe5c23b0": 42, "0x7f96fe5c2410": 42, "0x7f96fe5c2680": 43, "0x7f96fe5c2830": 42, "0x7f96fe5c2920": 42, "0x7f96fe5c2950": 42, "0x7f96fe5c2a40": 42, "0x7f96fe5c2aa0": 42, "0x7f96fe5c2b30": 42, "0x7f96fe5c2ce0": 42, "0x7f96fe5c2da0": 42, "0x7f96fe5c2dd0": 42, "0x7f96fe5c2f50": 42, "0x7f96fe5c2fe0": 42, "0x7f96fe5c3040": 42, "0x7f96fe5c3130": 42, "0x7f96fe5c32b0": 42, "0x7f96fe5c3370": 42, "0x7f96fe5c33a0": 42, "0x7f96fe5c3520": 42, "0x7f96fe5c3550": 42, "0x7f96fe5c36d0": 42, "0x7f96fe5c3820": 42, "0x7f96fe5c38b0": 42, "0x7f96fe5c3b80": 42, "0x7f96fe5c3bb0": 42, "0x7f96fe5c3be0": 42, "0x7f96fe5c3c40": 42, "0x7f96fe6216c0": 11, "0x7f96fe623f40": 71, "0x7f96fe730a90": 42, "0x7f96fe730b20": 42, "0x7f96fe730b50": 42, "0x7f96fe730b80": 42, "0x7f96fe730c10": 42, "0x7f96fe730c40": 42, "0x7f96fe730c70": 42, "0x7f96fe730d90": 42, "0x7f96fe730f10": 42, "0x7f96fe730fa0": 42, "0x7f96fe731030": 42, "0x7f96fe731090": 42, "0x7f96fe731270": 42, "0x7f96fe731360": 42, "0x7f96fe731420": 42, "0x7f96fe731450": 42, "0x7f96fe731480": 42, "0x7f96fe7314e0": 42, "0x7f96fe731660": 42, "0x7f96fe7317e0": 42, "0x7f96fe731b70": 42, "0x7f96fe731bd0": 42, "0x7f96fe731cf0": 42, "0x7f96fe731d80": 42, "0x7f96fe731de0": 42, "0x7f96fe731e40": 42, "0x7f96fe731f30": 42, "0x7f96fe7323b0": 42, "0x7f96fe732470": 42, "0x7f96fe732680": 42, "0x7f96fe7326e0": 42, "0x7f96fe7329b0": 42, "0x7f96fe732b30": 42, "0x7f96fe732bc0": 42, "0x7f96fe732d40": 42, "0x7f96fe733070": 42, "0x7f96fe733100": 42, "0x7f96fe733160": 42, "0x7f96fe733310": 42, "0x7f96fe733400": 42, "0x7f96fe7334f0": 42, "0x7f96fe733580": 42, "0x7f96fe7337f0": 42, "0x7f96fe733820": 42, "0x7f96fe733a00": 42, "0x7f96fe733df0": 42, "0x7f96fe739de0": 17, "1": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 16, 19, 20, 23, 24, 25, 26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 120, 121, 127, 129, 130, 131, 132, 136, 138, 142, 143, 145, 148, 150, 151, 158, 160, 165, 166, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 181, 185, 187, 188, 190, 192, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 295, 296, 297, 298, 299, 300, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 322, 327, 330, 334, 336, 340, 342, 344, 345, 349, 352, 354, 357, 360, 362, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 427, 429, 430, 431, 436, 437, 439, 440, 441, 442, 443, 444, 446, 447, 450, 451, 453, 454, 455, 456, 457, 462, 464, 466, 469, 470, 473, 475, 479, 480, 481, 495, 496, 497, 499], "10": [0, 2, 3, 4, 5, 6, 10, 11, 12, 15, 16, 17, 19, 21, 22, 23, 25, 26, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 64, 65, 66, 68, 70, 72, 73, 74, 78, 79, 81, 83, 89, 91, 93, 94, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 118, 121, 126, 135, 148, 158, 165, 166, 168, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 185, 187, 194, 197, 198, 199, 201, 202, 204, 205, 206, 208, 209, 211, 212, 213, 214, 215, 217, 218, 219, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 239, 240, 243, 247, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 271, 274, 277, 281, 282, 283, 284, 285, 287, 290, 291, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 322, 323, 330, 342, 344, 345, 356, 368, 369, 372, 373, 375, 376, 378, 380, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 429, 447, 454, 455, 456, 457, 460, 461, 462, 465, 466, 469, 470, 473, 479, 480, 481, 490, 495, 496, 497, 499], "100": [3, 16, 29, 32, 33, 35, 36, 41, 43, 44, 45, 47, 52, 58, 66, 70, 73, 77, 88, 91, 107, 109, 113, 121, 172, 181, 189, 194, 198, 202, 231, 238, 241, 247, 259, 279, 282, 305, 306, 307, 308, 310, 311, 324, 327, 335, 336, 344, 351, 364, 426, 470, 480, 481, 495, 497], "1000": [36, 52, 79, 96, 168, 181, 194, 197, 200, 202, 231, 238, 259, 342, 391, 454, 481], "10000": [45, 52, 58, 106, 109, 342, 391], "10000000000": 315, "1002": [118, 205, 211, 212, 213, 214, 215, 236, 252, 262, 290, 345, 469], "1003": [19, 29, 36, 48, 497], "1005": [48, 115, 497], "10052852e": 3, "1006": [29, 31, 39, 48, 101, 118, 199, 206, 249, 497], "100608": 481, "1007": [16, 26, 35, 38, 118], "100765": 481, "1008": [118, 165, 240], "100a": 73, "100m": 68, "100mm": 88, "101": [21, 35, 43, 44, 73, 118, 368, 369, 470, 480, 481], "1011": [75, 497], "1012": 64, "1015": [24, 29, 497], "10159": [65, 480], "10159_task": 65, "1016": [23, 26, 39, 43, 44, 51, 52, 54, 59, 61, 78, 102, 106, 118, 165, 166, 170, 172, 173, 176, 177, 185, 202, 204, 206, 208, 217, 219, 223, 224, 225, 230, 232, 251, 253, 254, 257, 261, 266, 267, 277, 281, 307, 308, 312, 322, 342, 368, 369, 391, 429, 470], "10176": 93, "101810176": 72, "102": [35, 43, 44, 64, 65, 73, 118, 227, 291, 301, 369, 480, 481], "10216181e": 3, "1023": [29, 497], "1024": [12, 155, 163, 194, 208, 254, 481, 490], "10241360e": 3, "10242": [23, 24, 290, 293, 294, 301, 438, 451, 481], "1026": [64, 72, 75, 497], "102714": 56, "102a": 73, "103": [35, 44, 73, 82, 84, 118, 176, 187, 309, 480, 481, 497], "1031": [8, 497], "1032": 3, "1033": 35, "10332545e": 3, "10332993e": 3, "10363983e": 3, "1038": [118, 229, 258, 269, 287], "104": [35, 44, 73, 254, 480, 481], "104073": 59, "1042": [103, 118], "10426": [285, 302], "104293434": 42, "1044": [62, 99, 497], "1045": [61, 94], "104535": 35, "1046": [160, 163], "10477568": 22, "105": [35, 44, 65, 73, 480, 481], "10509354": [118, 391], "1052": [29, 103, 118, 497], "1053": [10, 64], "105373": 59, "1054": 481, "105434": 59, "105651": 59, "1058": [118, 202], "105981": 59, "106": [35, 44, 73, 118, 198, 202, 231, 233, 237, 259, 260, 263, 480, 481], "1062": 481, "1063736": [3, 33, 34, 40, 101, 118, 218, 271], "1064": [118, 202], "106438": 59, "106460": 59, "1065": [48, 497], "106512384": 72, "1066": [29, 33, 497], "1067": 17, "106742": 59, "1068": [65, 75, 497], "106895": 59, "106a": 35, "106b": 35, "107": [35, 44, 73, 74, 480, 481], "107012": 59, "107145": 59, "107229": 59, "1073": [118, 176, 187, 198, 202, 233, 260, 369], "1074": [106, 115, 497], "10745001e": 3, "107488": 59, "107567": 59, "1078": 481, "108": [35, 44, 65, 73, 74, 480, 481], "1080": [73, 118, 391], "108038": 59, "108046": 6, "108058": 59, "108176": 59, "1082": [160, 163], "108211": 59, "108325": 59, "108401": 59, "108440": 59, "10844759e": 3, "108591": 59, "108632": 59, "108723": 59, "1088": 481, "10880": 93, "108875": 59, "108937": 59, "108990": 59, "109": [2, 35, 40, 44, 48, 59, 73, 93, 157, 163, 249, 260, 480, 481, 497], "1090": [51, 481], "109066": 59, "109090": 59, "109104": 59, "1093": [118, 165, 198, 206, 231, 253, 259], "109387": 59, "1095": 481, "109540": 59, "109616": 59, "109654": 59, "1097": [118, 211, 212, 213, 214, 215, 236, 262, 290], "109731": 59, "109769": 59, "1098": 481, "1099": [48, 497], "10_task": 113, "10a": [64, 65, 73, 480], "10b": [64, 65, 73], "10c": 65, "10k": 113, "10mm": 52, "10th": 43, "10x10": [43, 44], "11": [3, 4, 6, 8, 11, 35, 41, 43, 44, 45, 47, 52, 56, 64, 65, 67, 68, 72, 73, 74, 75, 84, 93, 98, 99, 101, 104, 107, 118, 122, 134, 136, 145, 148, 149, 150, 158, 198, 202, 205, 206, 217, 223, 224, 252, 253, 281, 293, 294, 301, 309, 331, 332, 333, 337, 338, 339, 344, 349, 357, 359, 360, 361, 364, 379, 380, 381, 426, 433, 445, 453, 457, 471, 472, 473, 474, 475, 476, 480, 481, 497, 499], "110": [35, 44, 73, 88, 118, 262, 269, 287, 480, 481], "1100": 44, "11008": 93, "1101": [118, 345, 469], "11020": 107, "11021": 107, "110301": 59, "110644": 59, "110657536": 72, "11072": 93, "1109": [47, 51, 52, 118, 170, 177, 199, 202, 251, 312, 313, 456, 462], "111": [35, 44, 56, 64, 73, 93, 480, 481], "1111": [106, 118, 391], "1112": 197, "1116": 480, "112": [35, 44, 73, 95, 114, 118, 368, 369, 480, 481], "11208": 93, "1122": 481, "1125": [48, 118, 231, 237, 259, 263, 497], "1126": [3, 33, 34, 40, 43, 61, 101, 118, 187, 202, 209, 218, 251, 265, 271], "112a": 35, "113": [29, 35, 44, 73, 114, 208, 480, 481, 497], "113616": 64, "1139": [118, 202, 251], "114": [13, 35, 44, 47, 73, 148, 163, 480, 481], "1143": 481, "11431593e": 3, "114745344": 72, "114769": 35, "115": [35, 44, 54, 73, 102, 118, 148, 163, 480, 481], "1152": [73, 118, 231, 237, 259, 263, 481], "1155": [156, 163], "1156": 481, "11599774e": 3, "116": [35, 44, 73, 74, 77, 199, 480, 481], "1161": [6, 481], "11617": 91, "1162": [118, 228, 233, 260], "116290": [118, 232, 267], "1164": [62, 497], "11648": 93, "1165": [56, 118, 231, 237, 259, 263], "117": [10, 35, 44, 73, 95, 157, 163, 194, 199, 238, 249, 480, 481], "1170": 481, "117126": [118, 208, 254], "1171599": [118, 187], "11752": 93, "11760": 93, "1177": [118, 312], "11776848e": 3, "11781759e": 3, "118": [35, 44, 73, 480, 481], "1180": [118, 312], "1181": 35, "1184": 104, "11872": 93, "1188": 480, "119": [35, 44, 73, 74, 79, 136, 163, 480, 481], "1190": 481, "11904": 93, "119242752": 72, "1194144": [61, 118, 209, 265], "11942": 10, "11968": 93, "119a": 35, "11a": [35, 64, 65, 73, 480], "11b": [35, 64, 65, 73, 480], "11c": [64, 65, 480], "12": [6, 11, 13, 27, 34, 35, 41, 43, 44, 46, 47, 51, 52, 56, 59, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 79, 80, 82, 93, 101, 104, 107, 112, 113, 114, 118, 122, 125, 127, 128, 136, 138, 154, 159, 160, 161, 177, 178, 191, 194, 199, 202, 207, 233, 238, 249, 251, 258, 260, 263, 268, 285, 289, 305, 306, 307, 308, 309, 310, 311, 327, 340, 342, 364, 366, 367, 368, 369, 372, 373, 374, 375, 376, 377, 378, 379, 380, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 436, 437, 443, 444, 457, 467, 473, 475, 479, 480, 481, 497, 499], "120": [35, 44, 73, 86, 102, 118, 236, 262, 480, 481], "120138": [26, 118], "1206": [118, 178, 187], "1207": [118, 178, 240, 243], "120742": 59, "12096": 11, "121": [35, 44, 68, 73, 480, 481], "12101333e": 3, "12133205e": 3, "1214": 481, "1215": [64, 480, 481], "12156862745098039": 111, "1216": 481, "122": [35, 44, 65, 68, 73, 74, 122, 163, 194, 202, 238, 251, 268, 480, 481], "12224": 93, "122246": 59, "12225437e": 3, "1224": [65, 480, 481], "12249177e": 3, "123": [35, 44, 73, 254, 480, 481], "1230": 481, "123008": 93, "123176": 93, "1233": [58, 62, 497], "12333e": 42, "12335147e": 3, "12340031e": 3, "1237": 36, "123789312": 72, "1238": [142, 163], "123e": 56, "124": [4, 35, 43, 44, 73, 480, 481], "1242": 179, "1246": 481, "125": [35, 43, 44, 73, 74, 103, 118, 480, 481], "1255": 481, "1256": [118, 217, 481], "1257": [107, 481], "126": [6, 35, 44, 59, 73, 93, 105, 157, 163, 480, 481], "1260": [115, 497], "12608466e": 3, "1261": [104, 481], "1265": [118, 217], "127": [35, 44, 73, 114, 145, 163, 480, 481], "1271": [118, 202], "1273": 481, "127426": 65, "12752": 93, "12757137e": 3, "127944": 56, "128": [35, 44, 66, 68, 70, 73, 86, 94, 108, 155, 163, 194, 208, 254, 480, 481, 490], "1280": 481, "128032768": 72, "12810730e": 3, "1282": [51, 118, 170, 313], "1285": [51, 118, 170, 313], "1285615": 251, "12880549e": 3, "1289": 481, "129": [35, 44, 73, 125, 163, 480, 481], "1290": [114, 115, 481, 497], "1294": [118, 202], "1296": 65, "12a": [64, 65, 73, 480], "12b": [64, 65], "12mm": 96, "12th": [118, 202], "13": [6, 11, 24, 29, 35, 38, 43, 48, 55, 56, 59, 61, 62, 64, 65, 72, 73, 79, 93, 98, 99, 103, 104, 107, 112, 115, 118, 122, 128, 130, 132, 134, 136, 176, 203, 207, 228, 239, 249, 251, 252, 258, 260, 263, 267, 285, 288, 289, 314, 318, 324, 344, 349, 357, 359, 360, 361, 364, 366, 368, 372, 373, 375, 376, 391, 429, 457, 460, 461, 479, 480, 481, 497], "130": [35, 44, 46, 73, 480, 481], "13033601e": 3, "13040": [118, 233, 260], "1304239304725877": 71, "13045": [118, 233, 260], "1307": 107, "13075593e": 3, "131": [35, 44, 73, 74, 118, 236, 262, 480, 481], "1314": 481, "13159": 111, "132": [35, 44, 64, 73, 480, 481], "132595712": 72, "1327": 481, "13275932e": 3, "1328": [47, 118, 177], "13284": 480, "133": [35, 44, 73, 480, 481], "1335": 481, "1336": [151, 163], "13385571e": 3, "1339": 481, "134": [35, 44, 54, 73, 95, 102, 118, 157, 163, 480, 481], "1340": [47, 118, 177], "13412525e": 3, "134263085": 72, "1344": 481, "13466958e": 3, "135": [35, 44, 72, 73, 74, 480, 481], "1350": [53, 169, 457, 459], "1350mm": [457, 459], "1355": 481, "1357": 481, "13574144": 6, "1358": [61, 118, 209, 265], "136": [35, 44, 73, 480, 481], "1361": [61, 118, 209, 265, 481], "13629725e": 3, "1366": [55, 62, 497], "13676264e": 3, "137": [35, 44, 73, 74, 480, 481], "1370": [146, 163], "1371": [118, 187], "137117696": 104, "1372": 481, "1375": 481, "1377": 481, "13782110e": 3, "138": [35, 44, 46, 65, 73, 480, 481], "1384": 481, "1388": [41, 48, 497], "1389": 481, "139": [35, 44, 73, 480, 481], "13936": 93, "1395": 481, "13951266": 18, "1396": 481, "1397": 481, "13a": [64, 480], "13b": 64, "13th": [51, 118, 170, 313], "14": [3, 4, 6, 11, 19, 27, 29, 32, 34, 35, 40, 51, 56, 64, 65, 71, 73, 77, 79, 84, 91, 93, 99, 104, 107, 115, 118, 123, 125, 132, 141, 143, 144, 145, 148, 151, 163, 176, 202, 206, 231, 253, 259, 446, 480, 481, 497], "140": [35, 43, 44, 56, 62, 73, 74, 113, 480, 481, 497], "14016": 93, "1402": 481, "1404": [64, 73], "1408": 481, "141": [35, 44, 73, 126, 163, 262, 480, 481], "1414": 53, "141e": 56, "142": [35, 44, 73, 91, 96, 99, 136, 163, 480, 481, 497], "1422": [62, 115, 497], "14224839e": 3, "1423": [54, 102], "14272": 93, "1429": [103, 118], "143": [35, 44, 73, 74, 480, 481], "14301448e": 3, "1431": 480, "1432": 118, "143288": 65, "14336": 93, "1434": [34, 48, 497], "1435": 481, "1438": [103, 118, 481], "144": [35, 44, 73, 84, 118, 204, 277, 480, 481], "14429579e": 3, "14448": 93, "1445": 118, "1447": [3, 101], "1448": [3, 32, 48, 101, 497], "1449": [3, 101], "145": [35, 44, 73, 118, 171, 480, 481], "1450": [3, 101], "1451": [3, 101], "1452": [3, 96, 101], "1458": [64, 481], "146": [29, 35, 44, 73, 74, 139, 163, 480, 481, 497], "1460": 481, "14630912": 72, "14637973e": 3, "14640": 93, "1466": 481, "1467": [53, 62, 106, 118, 391, 497], "147": [23, 35, 44, 73, 480, 481], "1472": 481, "1476": [35, 73], "147a": 35, "148": [35, 44, 73, 194, 238, 480, 481], "1483": 481, "149": [35, 44, 73, 74, 480, 481], "1491": 481, "149296": 35, "1497": 481, "14976": 93, "1498": [118, 228, 481], "14990710e": 3, "14a": [35, 64, 65], "14b": [64, 65], "14c": 64, "15": [6, 11, 13, 23, 25, 32, 34, 35, 51, 52, 54, 56, 64, 65, 68, 71, 72, 73, 74, 75, 79, 80, 82, 86, 89, 91, 93, 96, 97, 104, 107, 112, 118, 122, 126, 129, 130, 135, 144, 148, 158, 163, 199, 206, 239, 249, 261, 372, 373, 375, 376, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 429, 457, 460, 461, 480, 481, 497], "150": [27, 35, 44, 73, 118, 191, 429, 480, 481], "1500": 90, "15034189e": 3, "150482": 35, "1507": [118, 228], "15088": 93, "151": [10, 35, 44, 73, 74, 79, 84, 112, 480, 481, 497], "1512": 73, "151677": 56, "152": [35, 44, 71, 72, 73, 75, 118, 185, 194, 202, 227, 480, 481, 497], "1523": [118, 145, 163, 176], "1527": 481, "152a": 35, "153": [35, 44, 73, 74, 480, 481], "15344438e": 3, "15345027e": 3, "1536": [146, 163, 481], "1539": 481, "153mb": 281, "154": [35, 44, 59, 73, 118, 368, 369, 429, 480, 481], "15425090e": 3, "15464766e": 3, "155": [35, 44, 46, 73, 118, 217, 268, 480, 481], "1550": 481, "15536": 93, "155444": 56, "15583": 105, "155a": 35, "156": [3, 35, 44, 70, 73, 74, 480, 481], "15616": 93, "1565": [118, 198], "156604": 65, "1567": [118, 198], "15680": 93, "15692396e": 3, "157": [35, 44, 73, 480, 481], "1570": 481, "157605": 65, "1577": 481, "157832": 65, "158": [35, 44, 73, 118, 429, 480, 481], "1582": 481, "1583": [118, 187], "1585": [118, 187], "15886839e": 3, "158e": 56, "159": [35, 44, 73, 74, 480, 481], "1595": [146, 163], "15a": [64, 65, 73], "16": [6, 11, 27, 32, 34, 35, 36, 42, 47, 50, 51, 52, 56, 57, 61, 62, 64, 65, 66, 68, 69, 72, 73, 78, 79, 81, 82, 86, 91, 93, 94, 102, 104, 107, 109, 115, 149, 156, 163, 178, 191, 194, 197, 217, 234, 238, 258, 373, 376, 378, 380, 457, 480, 481, 495, 497], "160": [35, 44, 61, 73, 86, 118, 173, 209, 247, 265, 307, 308, 479, 480, 481], "1600": [327, 340, 467, 481], "160110": [118, 269, 287], "16032": 93, "1606": [118, 171], "161": [35, 44, 73, 480, 481], "1617": 481, "1619": 481, "162": [35, 44, 73, 74, 118, 217, 480, 481], "1620": 6, "1621": 481, "162682": 52, "1627": 481, "163": [27, 29, 35, 44, 59, 73, 81, 480, 481, 497], "1631": 481, "1637": 481, "1638": 481, "163842": [290, 293, 294, 301, 438, 451], "163e": 56, "164": [35, 44, 59, 73, 74, 480, 481], "1640": 481, "16426247e": 3, "1646": 481, "16466": 111, "16481341e": 3, "16494964e": 3, "165": [35, 44, 59, 73, 480, 481], "166": [10, 29, 35, 44, 59, 73, 118, 171, 480, 481, 497], "1664": 481, "166999999999994": 58, "167": [35, 44, 59, 73, 74, 194, 199, 238, 249, 480, 481], "1671": 481, "16720536e": 3, "1673": 481, "16785605e": 3, "168": [35, 44, 57, 58, 59, 61, 73, 91, 93, 169, 480, 481], "1684": [77, 84, 497], "168973": 51, "169": [35, 44, 73, 480, 481], "1691": 481, "1694": 481, "1699": 481, "16a": [64, 65, 73], "16b": 64, "16c": 64, "17": [6, 11, 26, 32, 35, 42, 48, 50, 56, 64, 65, 72, 73, 82, 93, 104, 107, 118, 132, 148, 163, 194, 198, 199, 231, 237, 238, 249, 259, 263, 480, 481], "170": [35, 44, 73, 74, 199, 480, 481], "1704": 481, "1705": [148, 163], "17097129e": 3, "170a": 35, "171": [33, 35, 44, 59, 73, 118, 199, 217, 369, 480, 481], "17135127e": 3, "1716": 481, "172": [35, 44, 73, 118, 173, 262, 307, 308, 480, 481], "17254901960784313": 111, "17267329e": 3, "1728": 481, "173": [35, 44, 73, 74, 480, 481], "1730": 481, "17300494e": 3, "17327": 107, "17328": 107, "17329": 107, "17330": 107, "17331": 107, "17332": 107, "17333": 107, "17334": 107, "17335": 107, "17336": 107, "17337": 107, "17338": 107, "17339": 107, "17340": 107, "17341": 107, "17342": 107, "17343": 107, "17344": 107, "17345": 107, "17346": 107, "17347": 107, "17348": 107, "17349": 107, "17350": 107, "17351": 107, "17352": 107, "17375232": 6, "174": [35, 44, 59, 73, 118, 368, 369, 480, 481], "17431364e": 3, "174325": 56, "175": [35, 44, 73, 480, 481], "17557925e": 3, "17561793e": 3, "1757": 481, "175896708170573": 46, "17593450e": 3, "176": [35, 44, 64, 73, 74, 105, 480, 481], "17600": 93, "17665568e": 3, "177": [26, 29, 35, 44, 73, 480, 481, 497], "17736": 105, "1775": 481, "17789394e": 3, "178": [35, 44, 73, 480, 481], "1780": 43, "1789": 481, "179": [35, 44, 73, 104, 115, 118, 171, 206, 480, 481, 497], "1790": [27, 29, 497], "1792": 481, "179269": 65, "1796": 481, "17987756e": 3, "179998": 35, "17a": [64, 480], "17b": 480, "17networks_1": 11, "17networks_10": 11, "17networks_11": 11, "17networks_12": 11, "17networks_13": 11, "17networks_14": 11, "17networks_15": 11, "17networks_16": 11, "17networks_17": 11, "17networks_2": 11, "17networks_3": 11, "17networks_4": 11, "17networks_5": 11, "17networks_6": 11, "17networks_7": 11, "17networks_8": 11, "17networks_9": 11, "18": [6, 26, 32, 35, 42, 56, 58, 59, 61, 62, 64, 65, 72, 73, 74, 82, 84, 93, 104, 107, 112, 118, 123, 141, 148, 158, 163, 192, 198, 202, 207, 217, 268, 444, 480, 481, 495, 497], "180": [32, 35, 44, 73, 86, 118, 148, 163, 173, 202, 307, 308, 444, 446, 447, 480, 481], "180063": [118, 229, 258], "1804": 481, "18072": 93, "1808": 481, "1809": 64, "181": [35, 44, 73, 78, 118, 322, 480, 481], "18105159e": 3, "18128859e": 3, "182": [35, 44, 73, 104, 113, 255, 256, 259, 480, 481], "1821": 35, "1822": 481, "18240": 93, "183": [35, 44, 73, 104, 480, 481], "1836": [73, 481], "184": [35, 44, 73, 480, 481], "1842": 481, "1845": 481, "18497928e": 3, "185": [35, 44, 73, 480, 481], "1851": 481, "18520106e": 3, "1856": 481, "186": [35, 44, 73, 480, 481], "1861819": 20, "1866": 481, "1869": 481, "18696406e": 3, "187": [35, 44, 59, 73, 118, 368, 369, 480, 481], "18719704e": 3, "18728": 93, "188": [35, 44, 73, 74, 77, 480, 481], "18825650e": 3, "1882989": [42, 46], "1888": [151, 163], "189": [35, 44, 73, 118, 345, 352, 469, 480, 481], "1898": 481, "18a": [64, 65], "18b": 64, "18c": 64, "19": [6, 18, 29, 33, 35, 44, 56, 61, 64, 65, 70, 72, 73, 75, 79, 93, 101, 104, 106, 107, 115, 118, 127, 130, 136, 138, 151, 163, 199, 200, 225, 228, 229, 231, 234, 235, 236, 237, 248, 249, 257, 258, 259, 262, 263, 288, 319, 320, 480, 481, 497], "190": [35, 44, 73, 480, 481], "1905": 481, "1906": 481, "1908": 73, "191": [35, 44, 73, 74, 480, 481], "191002": 480, "19114114": 22, "1914": [118, 205, 252], "1917": 481, "192": [35, 44, 54, 73, 86, 102, 118, 480, 481], "1920": [93, 481], "19272": 93, "1928": [118, 205, 252], "19296": 93, "193": [35, 44, 73, 258, 480, 481], "19328": 93, "1935": [43, 118], "19384205e": 3, "19386614e": 3, "19392": 93, "194": [3, 35, 44, 73, 118, 206, 480, 481], "1941": 481, "195": [35, 44, 73, 74, 118, 206, 480, 481], "195093": 65, "1951": [43, 151, 163], "1952": [121, 151, 163], "1953": [151, 163], "1955": 481, "196": [35, 44, 70, 73, 75, 480, 481, 497], "1964": [33, 35], "196909": 65, "196a": 35, "197": [20, 35, 44, 73, 194, 202, 238, 251, 352, 480, 481], "1971": 481, "1974": 481, "197878": 65, "19790662e": 3, "198": [35, 44, 73, 74, 258, 480, 481], "1983": [118, 391], "1984": 481, "1985": 481, "1987": 481, "199": [35, 44, 73, 480, 481], "1991": 481, "1993": 481, "19935746e": 3, "1994": [118, 345, 469], "19958446e": 3, "1997": [118, 151, 163, 202, 236, 262], "1998": [118, 199, 206, 249], "1999": [118, 132, 163, 206, 211, 212, 213, 214, 215, 219, 290, 481], "19a": [35, 64, 73], "19b": 35, "1a": [6, 35, 64, 65, 73, 104, 480], "1b": [6, 64, 65, 73, 480], "1c": [6, 64, 65, 73, 480], "1d": [54, 120, 134, 160, 163, 190, 192, 239, 309, 312, 313, 317, 319, 320, 323, 329, 345, 346, 367, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 402, 409, 413, 419, 422, 457, 458, 463, 468, 469, 477, 479], "1e": [32, 41, 42, 43, 52, 114, 228, 240, 241, 310, 311, 315, 349, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 443, 446, 450, 456, 462], "1e3": 79, "1e4": [41, 305, 306, 307, 308], "1f": [47, 444, 447], "1hz": 247, "1min": 56, "1mm": [11, 127, 157, 163, 255, 256, 259, 297, 298, 300, 384], "1st": 58, "1x2": 44, "2": [2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 93, 95, 96, 99, 101, 102, 103, 104, 105, 106, 107, 109, 112, 113, 115, 116, 118, 121, 123, 125, 126, 127, 132, 143, 145, 146, 148, 149, 156, 157, 158, 165, 166, 170, 171, 172, 176, 177, 178, 179, 181, 183, 187, 188, 191, 192, 198, 199, 201, 202, 204, 205, 206, 210, 211, 212, 213, 214, 215, 217, 219, 225, 226, 228, 229, 231, 233, 235, 236, 237, 239, 240, 241, 245, 246, 247, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 262, 263, 268, 269, 270, 271, 273, 277, 282, 284, 289, 290, 295, 296, 299, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 327, 329, 330, 334, 336, 340, 342, 343, 345, 351, 352, 355, 356, 357, 358, 361, 362, 364, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 390, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 427, 428, 430, 436, 437, 439, 440, 441, 442, 443, 444, 446, 447, 448, 450, 456, 457, 459, 460, 461, 463, 466, 469, 470, 479, 480, 481, 495, 496, 497, 499], "20": [3, 6, 11, 22, 25, 29, 32, 33, 35, 41, 42, 47, 51, 53, 55, 57, 60, 61, 64, 65, 68, 71, 72, 73, 74, 80, 83, 93, 96, 97, 103, 107, 110, 118, 125, 136, 141, 163, 165, 169, 171, 194, 197, 198, 202, 233, 238, 251, 260, 305, 306, 307, 308, 310, 311, 312, 313, 479, 480, 481, 490, 497], "200": [35, 44, 45, 46, 73, 96, 107, 118, 165, 194, 198, 202, 238, 239, 247, 251, 259, 279, 310, 311, 480, 481], "2000": [5, 45, 52, 94, 108, 118, 151, 154, 163, 168, 190, 236, 262], "200007": [118, 236, 262], "2001": [3, 33, 34, 40, 101, 106, 118, 120, 175, 186, 190, 199, 218, 249, 271, 391], "2002": [118, 199, 249], "2003": [118, 314, 318, 481], "2004": [103, 118, 206, 253, 319, 320], "2005": [118, 217, 369], "2006": [118, 176, 187, 202, 210, 217, 309, 319, 320], "2007": [68, 74, 118, 204, 217, 228, 277, 351, 368, 369, 470], "2008": [30, 48, 116, 118, 165, 185, 192, 194, 281, 342, 347, 364, 371, 374, 377, 391, 419, 443, 448, 481, 497], "2009": [2, 22, 118, 126, 154, 157, 163, 185, 187, 194, 198, 202, 206, 219, 238, 253, 260, 272, 273, 295, 296, 297, 298, 299, 300, 342, 391, 490], "2009a": 202, "201": [35, 40, 44, 58, 62, 73, 74, 480, 481, 497], "2010": [3, 4, 23, 39, 40, 51, 61, 118, 143, 163, 165, 170, 172, 202, 206, 219, 239, 240, 251, 261, 265, 312], "2011": [26, 39, 47, 52, 61, 118, 121, 126, 134, 143, 163, 165, 172, 176, 177, 194, 202, 219, 223, 225, 226, 231, 233, 238, 250, 257, 259, 260, 263, 266, 282, 284, 368, 369, 490], "2012": [26, 52, 103, 118, 160, 163, 166, 171, 177, 178, 187, 194, 202, 223, 227, 240, 243, 252, 368, 369, 481, 490], "20127744": 72, "2013": [59, 118, 151, 163, 165, 166, 176, 177, 197, 202, 208, 225, 247, 251, 257, 368], "2014": [52, 103, 106, 118, 168, 169, 176, 177, 198, 368, 391, 457], "2015": [118, 121, 122, 123, 124, 125, 126, 136, 137, 163, 177, 194, 198, 204, 225, 226, 238, 257, 277, 279, 282, 284, 368, 369], "20151361e": 3, "20153834": [51, 118, 170, 312], "2016": [51, 103, 118, 138, 139, 140, 141, 142, 163, 170, 269, 287, 313, 429], "2017": [59, 118, 143, 144, 145, 163, 171, 173, 194, 204, 229, 231, 238, 258, 259, 277, 307, 308, 368, 369, 429, 481], "20176701e": 3, "2018": [52, 59, 78, 118, 146, 147, 148, 163, 173, 194, 207, 208, 229, 238, 258, 259, 268, 307, 308, 322, 345, 369, 456, 462, 469], "2019": [52, 54, 102, 118, 149, 150, 151, 163, 232, 267, 426, 456, 462, 481], "202": [35, 44, 73, 480, 481], "2020": [118, 152, 153, 154, 163, 208, 232, 254, 267], "20200": 93, "20206": 114, "20207": 114, "20208": 114, "2021": [155, 156, 157, 163, 199, 200, 205, 225, 228, 229, 231, 234, 235, 236, 237, 248, 249, 252, 257, 258, 259, 262, 263, 288, 481], "2022": [26, 118, 158, 159, 160, 163], "20224": 93, "2023": [26, 118, 127, 128, 129, 163], "2024": [130, 131, 132, 133, 163], "2025": [35, 64, 70, 73, 104, 113, 134, 135, 151, 163, 480, 481], "2028": [151, 163], "2029": 481, "203": [35, 44, 73, 74, 109, 115, 480, 481, 497], "2031": 481, "2033": 481, "2037": 481, "204": [35, 44, 73, 480, 481], "2041": [52, 118], "2043": 481, "2047": 481, "2048": 481, "20480": [23, 24, 93], "20484": [23, 24, 70, 113, 114, 475, 480, 481], "204891": 35, "2049": [52, 118], "20499": [118, 202], "205": [35, 44, 50, 73, 480, 481], "20503": [118, 202], "2052": [73, 151, 163, 481], "2053": 481, "2054": 481, "205584": 35, "2057": [151, 163], "2058": 481, "20590908e": 3, "20592170e": 3, "206": [35, 44, 73, 115, 118, 232, 267, 480, 481, 497], "2063": [151, 163], "2064": 481, "20691790": [118, 172], "206928": 56, "207": [35, 44, 73, 74, 107, 118, 206, 480, 481], "2070": 481, "20736": 93, "2074": 481, "208": [35, 44, 73, 118, 165, 239, 480, 481], "2083": [151, 163], "2088": 93, "209": [35, 44, 73, 480, 481], "2090": [151, 163], "2093": 201, "2096": [118, 166], "20a": [35, 64, 73], "20b": [35, 73], "20c": [35, 73], "20mm": [97, 187], "21": [6, 26, 29, 31, 32, 35, 48, 57, 64, 65, 68, 72, 73, 79, 93, 98, 107, 130, 138, 156, 163, 194, 217, 238, 480, 481, 490, 497], "210": [6, 23, 35, 44, 65, 73, 74, 90, 99, 118, 219, 345, 469, 480, 481, 497], "2104": 481, "2106": [118, 166], "2107": [151, 163], "211": [35, 44, 46, 73, 114, 480, 481], "2110": 481, "2112": 481, "2113378": [47, 118, 177], "2118": [151, 163], "212": [35, 44, 46, 73, 74, 81, 258, 480, 481], "21211617e": 3, "2123": 42, "2123327": 42, "212705280": 4, "2128": 481, "213": [35, 44, 73, 480, 481], "2131": [43, 151, 163, 481], "21333": [118, 205, 252], "2136": 481, "2138": [151, 163], "21391345e": 3, "213951": 6, "214": [35, 44, 70, 73, 480, 481], "2142": [118, 202, 368, 369], "2144": 61, "21449": 481, "21463040": 6, "2148": 481, "215": [35, 44, 73, 74, 480, 481], "21506417e": 3, "2152": 481, "2153": 481, "2154": [118, 202, 368, 369, 481], "2155": 481, "2157": [151, 163], "216": [3, 32, 35, 44, 73, 480, 481], "2162": 481, "2163": [118, 481], "21653723": [118, 231, 237, 259, 263], "2166": [151, 163], "21663687e": 3, "2167": 481, "216765": 65, "2169": [151, 163], "217": [35, 44, 73, 480, 481], "21718024e": 3, "2172": [151, 163], "2175": 481, "2176": 481, "2177": [118, 151, 163, 481], "21781": 91, "218": [35, 44, 73, 74, 255, 256, 259, 480, 481], "2181": 481, "2186": 481, "219": [35, 44, 73, 480, 481], "2194": 481, "2195": [151, 163], "21951625e": 3, "2196": 73, "219713": 59, "21982443e": 3, "21a": [35, 64, 73], "21b": 64, "21c": 64, "22": [6, 13, 35, 41, 44, 46, 48, 58, 62, 64, 65, 73, 93, 104, 107, 112, 115, 118, 132, 138, 149, 158, 163, 206, 253, 347, 480, 481, 497], "220": [35, 44, 73, 480, 481], "22016": 481, "2202": 481, "22034595e": 3, "220446049250313e": 82, "220624": 53, "22069248": 10, "2207": 481, "2209": 118, "22091845e": 3, "221": [3, 35, 44, 73, 74, 118, 208, 254, 480, 481], "22103e": 46, "2212": [151, 163], "221217": 59, "221364224": 104, "2214": [151, 163], "221421568": 3, "22198710e": 3, "222": [35, 44, 73, 480, 481], "2221": [151, 163], "2224": 481, "2229": 118, "223": [35, 44, 73, 118, 219, 480, 481], "2231": [151, 163], "2234": 481, "22346660e": 3, "2235": [151, 163, 481], "2239": 481, "223948": 35, "22398714e": 3, "224": [35, 44, 70, 73, 74, 480, 481], "2240": [151, 163, 481], "2241": 64, "2242": 481, "2243": 481, "2245": 481, "2246": 481, "2248": [151, 163], "225": [35, 44, 73, 480, 481], "2251": 481, "2255": [151, 163], "226": [17, 29, 35, 44, 73, 480, 481, 497], "22604233e": 3, "22626812e": 3, "2264": 481, "22686968e": 3, "2269": 481, "227": [35, 44, 73, 74, 480, 481], "2272": [152, 163], "2274": 481, "2277": 481, "227700": 65, "2278": 481, "22781011e": 3, "22788": 65, "228": [35, 44, 73, 480, 481], "22802": 481, "2282": [158, 163], "228e": 56, "229": [35, 44, 73, 258, 480, 481], "2290": [152, 163], "2295": 64, "2299": [154, 163], "22a": [64, 65], "22b": 64, "23": [2, 6, 8, 17, 29, 35, 48, 64, 65, 72, 73, 74, 93, 103, 104, 107, 118, 202, 233, 251, 260, 311, 369, 480, 481, 497], "230": [32, 35, 44, 73, 74, 480, 481], "2300": [153, 163], "2302": [153, 163], "23026855e": 3, "2304": [154, 163, 481], "23066396e": 3, "2307": [154, 163], "2308": [153, 163], "2309": 481, "231": [35, 44, 73, 480, 481], "23104": 93, "2312": [153, 163, 481], "2313": 35, "2319": 481, "232": [35, 44, 61, 73, 480, 481], "2325": 481, "23258576e": 3, "23264": 93, "2327": [154, 163], "23292456e": 3, "232974": 65, "233": [35, 44, 73, 352, 480, 481], "23349085e": 3, "23390024e": 3, "234": [35, 44, 73, 74, 480, 481], "23416836e": 3, "23478573e": 3, "23478691e": 3, "23488": 481, "2349": [96, 99, 497], "235": [35, 44, 73, 480, 481], "23552": 93, "2358": 481, "236": [35, 44, 73, 74, 480, 481], "236279": 59, "23640": 104, "23650834e": 3, "2368": 481, "237": [35, 44, 73, 480, 481], "237783": 59, "2379": 481, "238": [35, 44, 73, 118, 236, 262, 480, 481], "2385": 481, "2388": 481, "239": [10, 35, 44, 73, 480, 481], "23921580e": 3, "2395": 481, "23a": [64, 73], "23b": 64, "24": [35, 47, 54, 61, 64, 65, 71, 73, 93, 107, 129, 156, 163, 327, 329, 330, 334, 368, 369, 480, 481], "240": [35, 44, 73, 480, 481], "24000": 93, "2401": 481, "2409": 481, "241": [35, 44, 73, 480, 481], "2410": 481, "2411": 481, "24184477e": 3, "242": [35, 44, 73, 118, 236, 262, 480, 481], "2425": [3, 33, 34, 40, 101, 118, 218, 271], "24256": [94, 481], "24256x24256": 52, "2429": [153, 163], "243": [26, 32, 35, 44, 48, 73, 480, 481, 497], "2430": [3, 33, 34, 40, 101, 118, 218, 271], "2432": 481, "24359": 105, "244": [35, 44, 73, 480, 481], "2440": 481, "24428": 91, "2446": 481, "2449": 481, "24495693e": 3, "245": [35, 44, 73, 480, 481], "2453": 481, "246": [3, 35, 44, 73, 74, 480, 481], "2462": 481, "2465": 481, "2466": 481, "2467": 481, "247": [2, 8, 35, 44, 73, 480, 481, 497], "2471": 481, "2478": 481, "2479": 481, "248": [35, 44, 73, 74, 480, 481], "24809": 91, "2482": 481, "2485": 481, "249": [35, 44, 73, 480, 481], "24914391e": 3, "2494": 481, "2496": 481, "24a": [35, 65], "24b": 35, "25": [16, 24, 32, 34, 35, 38, 43, 44, 48, 64, 65, 66, 72, 73, 79, 93, 96, 97, 101, 107, 109, 122, 163, 166, 198, 279, 317, 319, 320, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430, 441, 449, 451, 452, 453, 480, 481, 497], "250": [26, 35, 44, 68, 73, 118, 480, 481], "2506": 481, "2509": [154, 163], "251": [35, 44, 73, 74, 480, 481], "2511": 481, "25184": 93, "251e": 56, "252": [35, 44, 73, 108, 115, 480, 481, 497], "2520": 480, "253": [35, 44, 73, 480, 481], "2531": 481, "2532": [156, 163], "2539": 481, "254": [35, 44, 73, 74, 122, 163, 480, 481], "2543": 481, "2544": 481, "254408": 35, "25493504": 72, "255": [35, 44, 73, 157, 163, 480, 481], "2551": 481, "2553": [155, 163, 481], "25539421e": 3, "2555": 481, "256": [4, 13, 35, 44, 73, 86, 155, 163, 194, 208, 254, 263, 480, 481, 490], "2560": 481, "25603134e": 3, "2561": 481, "25611097e": 3, "2562": [290, 293, 294, 301, 451], "2565": 481, "2567": [155, 163], "25698304": 6, "257": [35, 44, 73, 74, 480, 481], "257976e": 51, "258": [35, 44, 480, 481], "2588": 481, "259": [35, 44, 480, 481], "25907959e": 3, "2593": 33, "2594": 481, "2598": 481, "25a": [64, 65, 73], "26": [26, 35, 64, 65, 70, 71, 72, 73, 74, 75, 77, 89, 93, 98, 99, 104, 107, 113, 141, 163, 458, 480, 481, 497], "260": [35, 44, 74, 480, 481], "2606": [155, 163], "2608": 481, "261": [35, 44, 118, 176, 480, 481], "2617": 481, "2619": [155, 163], "262": [28, 29, 35, 44, 118, 480, 481, 497], "2622": [155, 163], "2624": 481, "26240": 93, "263": [35, 44, 258, 480, 481], "2630": 481, "2635": 481, "2636": [103, 118, 171], "2637": 481, "263e": 56, "264": [35, 44, 61, 74, 230, 266, 480, 481], "2643": [103, 118, 155, 163, 171], "2645": 356, "2649": 481, "265": [35, 44, 480, 481], "2650": 481, "2655": [158, 163], "266": [35, 44, 74, 480, 481], "2663": 481, "2664": 73, "2669": [155, 163], "267": [35, 44, 118, 368, 369, 480, 481], "2674": [155, 163, 481], "2675": 112, "2676": 112, "2678": 481, "26795224e": 3, "268": [35, 44, 480, 481], "26816": 93, "2684": [155, 163], "2688": 481, "269": [35, 44, 74, 118, 176, 480, 481], "269133": 6, "2696": [155, 163], "2697": [155, 163], "26a": 65, "27": [6, 16, 17, 18, 23, 35, 45, 48, 64, 65, 72, 73, 88, 92, 93, 95, 99, 104, 107, 118, 202, 210, 369, 457, 459, 480, 481, 495, 497], "270": [35, 44, 444, 446, 447, 480, 481], "2702": [155, 163], "27048": 93, "270521": 65, "2707": [156, 163], "271": [35, 44, 73, 75, 480, 481, 497], "2712": [155, 163], "2714": [155, 163], "2715": [127, 160, 163], "2717": 481, "2719": [155, 163, 481], "272": [35, 44, 118, 211, 212, 213, 214, 215, 290, 480, 481], "2723": [157, 163], "2725": 481, "273": [35, 44, 55, 118, 199, 249, 480, 481], "2730": [156, 163], "2732": [156, 163], "27355975e": 3, "2736": 65, "2738": [157, 163], "274": [35, 44, 480, 481], "27423575e": 3, "2743": 481, "2745": [156, 163], "275": [35, 44, 74, 88, 99, 480, 481, 497], "2750": 481, "2752": 481, "2755": [157, 163, 481], "2757": 481, "276": [35, 44, 115, 480, 481], "2767": [156, 163], "27684": 73, "2769": 481, "27699262e": 3, "277": [35, 44, 92, 99, 118, 368, 369, 480, 481, 497], "2774": 481, "2775": 481, "2778": 36, "278": [35, 44, 74, 480, 481], "2783": 481, "2789": 481, "279": [8, 35, 44, 480, 481, 497], "2790": [156, 163], "27900": 65, "2792": [156, 163], "279282": 35, "2797": 481, "2798": [156, 163], "27a": [65, 73], "27b": 65, "27c": 65, "27mm": [457, 459], "28": [6, 8, 35, 42, 48, 54, 61, 62, 65, 73, 75, 91, 93, 104, 107, 115, 118, 122, 148, 163, 201, 231, 250, 259, 480, 481, 497], "280": [4, 35, 44, 480, 481], "28008": [73, 480], "28029008e": 3, "2804": [129, 163], "28049354e": 3, "2805": [156, 163], "2806": [156, 163, 481], "280625": 51, "2807": 481, "28087483e": 3, "28089702e": 3, "281": [35, 44, 480, 481], "2810": [156, 163], "28105584e": 3, "2815": [156, 163], "2815524": [52, 118, 456, 462], "2816": 481, "2818": 112, "282": [35, 44, 480, 481], "2821": [156, 158, 163], "2823": 481, "2826": [21, 51, 53, 156, 163, 481], "2827": 481, "2828": [118, 176], "2829": [158, 163], "283": [3, 35, 44, 57, 62, 480, 481, 497], "2831": [156, 163], "2833": [130, 163], "2834": 112, "2835": 481, "2836": 481, "284": [35, 44, 68, 74, 118, 211, 212, 213, 214, 215, 290, 480, 481], "285": [35, 44, 480, 481], "2858": [156, 163], "2859": [158, 163], "286": [35, 44, 480, 481], "2860": 43, "2867": [156, 163], "286718": 65, "2868": [42, 48, 156, 163, 497], "2869": [156, 163], "287": [35, 44, 481], "28702565e": 3, "28703870e": 3, "2875": [157, 163], "2876": [157, 163], "28796853e": 3, "288": [35, 44, 51, 68, 73, 74, 97, 99, 118, 170, 312, 480, 481, 497], "2880": [158, 163, 481], "2888": [48, 497], "2889": 37, "289": [35, 44, 118, 199, 249, 481], "2890": 481, "28a": [65, 73, 480], "28b": 73, "29": [6, 21, 32, 35, 38, 46, 48, 64, 65, 73, 74, 83, 93, 104, 107, 136, 163, 480, 481, 497], "290": [35, 44, 481], "2900": [157, 163], "2902": [158, 163], "2904": [157, 163, 481], "291": [35, 44, 68, 74, 481], "291168628": 3, "29132699e": 3, "2916": 73, "29173075e": 3, "2919": 481, "292": [35, 44, 118, 391, 481], "29244041e": 3, "2928": [157, 163, 481], "292987": 35, "293": [3, 33, 34, 35, 40, 44, 68, 72, 74, 75, 101, 118, 218, 271, 481, 497], "2934": 481, "2939": 481, "293e": 56, "294": [6, 35, 44, 481], "2941": [157, 163], "2942": [158, 163], "2944": [157, 163, 481], "2945": 481, "2946": [158, 163], "295": [35, 44, 481], "29515748e": 3, "2953": [159, 163], "296": [3, 8, 35, 44, 68, 74, 481, 497], "2962": 481, "2965": [158, 163], "297": [35, 38, 44, 48, 481, 497], "29727993e": 3, "297e": 56, "298": [35, 44, 118, 391, 481], "2986": 481, "299": [35, 44, 51, 70, 75, 118, 170, 312, 481, 497], "299562": 35, "29a": 35, "29b": 35, "2a": [6, 35, 64, 65, 73, 104, 480], "2a2e5a5707983d509d9319c692c867ab": 10, "2acca4": 11, "2b": [6, 35, 64, 65, 73, 104, 480], "2c": [35, 64, 65, 73, 480], "2d": [41, 54, 57, 86, 93, 94, 101, 107, 119, 160, 163, 171, 174, 189, 192, 240, 241, 242, 243, 244, 312, 313, 314, 323, 345, 346, 347, 351, 352, 353, 357, 367, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 392, 394, 395, 396, 397, 398, 399, 400, 401, 406, 408, 410, 412, 414, 416, 418, 426, 436, 454, 455, 456, 457, 463, 464, 473, 477, 479, 487], "2f": [32, 34, 44, 45, 46, 47, 52, 60, 91], "2g": [393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 434, 436, 437, 438, 442, 443, 444, 446, 447], "2min": 51, "2mm": [11, 22, 59, 93, 127, 157, 163, 166, 176, 254, 255, 256, 481], "2nd": [3, 27, 31, 32, 34, 35, 36, 37, 38, 39, 41, 271, 353, 357], "2t": 234, "2x1": 44, "2x2": [44, 149, 163, 402, 404, 407, 421, 428, 434, 437, 441, 442, 443, 495], "3": [2, 3, 4, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 26, 27, 29, 32, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 56, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 101, 102, 103, 104, 105, 107, 109, 110, 112, 114, 115, 118, 122, 126, 127, 131, 132, 135, 138, 141, 142, 145, 148, 149, 150, 151, 156, 157, 158, 159, 161, 165, 169, 171, 176, 177, 180, 181, 187, 191, 192, 194, 198, 199, 202, 205, 206, 207, 211, 212, 213, 214, 215, 217, 219, 225, 231, 236, 237, 238, 239, 240, 241, 245, 246, 247, 251, 252, 254, 257, 259, 261, 262, 263, 264, 268, 269, 274, 282, 284, 287, 290, 291, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 317, 319, 320, 322, 323, 327, 329, 330, 334, 340, 343, 344, 352, 354, 356, 357, 360, 362, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 385, 386, 388, 390, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 424, 428, 430, 434, 436, 437, 439, 441, 442, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 465, 467, 479, 480, 481, 483, 495, 496, 497, 499], "30": [3, 4, 6, 33, 35, 38, 43, 47, 51, 54, 56, 60, 62, 64, 65, 66, 69, 73, 90, 93, 96, 99, 102, 104, 107, 108, 112, 115, 118, 138, 148, 163, 177, 248, 307, 308, 317, 319, 320, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 465, 480, 481, 497], "300": [28, 35, 44, 58, 64, 71, 103, 194, 198, 232, 238, 259, 267, 279, 481], "3000": 52, "30015488": 6, "3003": [158, 163], "3008": [158, 163, 481], "3009": [158, 163], "301": [35, 44, 481], "3010": [158, 163, 481], "3013": [158, 163], "3015": [158, 163], "3016": [158, 163], "30176409": 6, "302": [35, 44, 122, 163, 481], "30216911e": 3, "3025": [158, 163], "3026": [158, 163], "303": [35, 44, 481], "3030": [160, 163], "3033": [158, 163], "3035": [158, 163], "3036": [158, 163], "3037": 481, "30382": 46, "3039": [158, 163], "304": [35, 44, 118, 177, 481], "3040": [91, 481], "3041": 112, "3042": [112, 158, 163], "3045": 481, "305": [35, 44, 481], "3054": 481, "30540059e": 3, "306": [35, 44, 481], "3061": [158, 163], "3063": [52, 62, 497], "3065": [158, 163, 481], "307": [35, 44, 481], "307052544": 104, "3071": [50, 62, 497], "3072": 481, "3073": [158, 163], "3077": [158, 163], "3078": [158, 163], "308": [35, 44, 109, 115, 481, 497], "308056": 65, "3081": [158, 163], "3082": [158, 163], "3084": 481, "3085": 481, "3086": 481, "3087": 481, "3089": 481, "308e": 56, "309": [35, 44, 118, 204, 277, 481], "3090": [158, 163], "3093": [158, 163, 481], "3095": [118, 231, 259, 481], "3096": 65, "3098": [159, 163], "31": [15, 16, 29, 35, 43, 44, 45, 51, 64, 65, 72, 73, 93, 104, 118, 177, 217, 233, 260, 480, 481, 497], "310": [3, 5, 8, 35, 44, 481, 497], "3102": [130, 163], "3105": [127, 163, 179], "3106": [158, 163], "3109": [158, 163, 481], "311": [35, 44, 481], "3111": [158, 163], "3113": 481, "3114": [118, 231, 259], "3115": 481, "31159007e": 3, "3118": 481, "312": [35, 44, 481], "3120": 481, "31219712": 72, "3125": [127, 160, 163, 481], "3126": [158, 163], "3127": [159, 163], "31274849e": 3, "313": [35, 44, 118, 202, 219, 481], "3132": [65, 481], "3133": [158, 163], "3134": 481, "3135": [158, 163, 481], "3136": 481, "3137": [158, 163], "314": [35, 44, 118, 204, 277, 481], "3141": [160, 163], "314803244": 4, "315": [35, 44, 481], "3152": [159, 163, 481], "315a": 35, "315b": 35, "316": [35, 44, 481], "3160": 481, "3165": [159, 163], "3169": 481, "317": [35, 44, 481], "3172": [129, 163], "31721159e": 3, "3173": [128, 163], "31737581e": 3, "3174": [159, 163], "31769c9cee5cd55f045e62633d651f3d": 105, "3178": [159, 163], "3179": [159, 163], "318": [35, 44, 481], "3181": [127, 160, 163], "3184": [159, 163], "3185": [160, 163], "3186": [64, 481], "3188": [159, 163], "3189": 481, "318e": 56, "319": [13, 29, 35, 44, 481, 497], "3191": [130, 163], "31921851e": 3, "3193": [160, 163], "31947491e": 3, "3196": [127, 160, 163], "31a": 65, "32": [18, 35, 36, 43, 53, 61, 62, 64, 65, 68, 73, 77, 86, 93, 104, 105, 192, 331, 332, 333, 337, 338, 339, 480, 481, 495, 497], "320": [10, 35, 44, 118, 368, 481], "3200": 481, "3201": [159, 163], "32015": 121, "32016": 121, "3203": [129, 163], "3204": [73, 481], "3207": [159, 163], "3209": [160, 163, 481], "321": [35, 44, 118, 177, 481], "32103": 64, "321565": 65, "3216": [160, 163], "32178405e": 3, "3219": 481, "322": [35, 44, 481], "3220": [160, 163, 481], "3222": [160, 163], "32232993e": 3, "3227": [160, 163], "3228": 481, "3229": [160, 163], "323": [35, 44, 481], "3233": [160, 163], "3235": [160, 163], "3237": [127, 163], "32372643e": 3, "3238": 481, "324": [35, 44, 73, 118, 187, 480, 481], "3241": [160, 163], "3249": [118, 178], "325": [35, 44, 64, 75, 194, 202, 238, 251, 481, 497], "3250": 481, "32504": 58, "3255": [160, 163], "3258": 481, "3259": [128, 163, 481], "326": [35, 44, 481], "3262": [160, 163], "32638621e": 3, "3264": 481, "32694885e": 3, "327": [35, 44, 118, 202, 219, 481], "3270": 481, "32712": 93, "3274": [160, 163], "328": [35, 44, 47, 481], "3281": [160, 163], "3283": [160, 163], "3284": [160, 163], "3285": [130, 163], "3286": [160, 163], "3289": 481, "329": [35, 44, 61, 118, 209, 265, 481], "3292": [160, 163], "3293": [160, 163], "3297": [160, 163], "32980": [107, 283], "33": [35, 37, 48, 64, 65, 73, 74, 93, 94, 99, 118, 205, 207, 252, 268, 480, 481, 497], "330": [35, 44, 481], "3300": [160, 163], "3302": [160, 163], "3306": [160, 163], "331": [35, 44, 481], "3311": [160, 163], "3312": [160, 163], "3317": [160, 163], "331865": 35, "332": [16, 35, 44, 60, 62, 481, 497], "3322": [160, 163], "33221617e": 3, "3324": 481, "3327": 481, "3328": 481, "333": [35, 44, 481], "3333": [160, 163], "3337": [160, 163], "334": [35, 44, 481], "3344": 481, "33452735e": 3, "3346": 481, "3347": [127, 163], "334a": 35, "335": [35, 44, 481], "3351": [128, 163], "3353": [128, 163], "3355": 481, "3356": 481, "336": [35, 44, 481], "33600": 93, "3362": [118, 128, 163, 426], "337": [35, 44, 481], "3371": 104, "337295": 65, "3374": [127, 163], "3375": [127, 163], "338": [35, 44, 481], "3380": [127, 163], "33810781e": 3, "3382": 481, "3384": [118, 426], "3385": [127, 163], "33880271e": 3, "3389": [52, 118, 121, 168, 197, 201, 226, 227, 247, 250, 282, 284], "339": [35, 44, 481], "3390": [127, 163], "3392": 481, "339a": 35, "33a": 35, "33cm": 42, "34": [3, 16, 26, 29, 33, 35, 36, 44, 48, 54, 65, 73, 93, 118, 176, 480, 481, 497], "340": [35, 44, 481], "34028335e": 3, "3403": [127, 163], "3404": [48, 497], "34041977e": 3, "3405": 46, "34092": 73, "341": [35, 44, 118, 368, 481], "3410": 481, "3412": [127, 163], "3414": [128, 163], "341729": 6, "342": [35, 44, 481], "342086": 65, "3422": [127, 163], "3424": [127, 163], "34242788": 10, "3426": [127, 163], "3427": [127, 163], "3429": [127, 163], "343": [35, 44, 481], "3430": [127, 163], "3433": [127, 163], "3436": [127, 163], "3437": 481, "34372": 481, "3439": [127, 163], "344": [35, 44, 481], "3440": [127, 163, 481], "3444": [128, 163], "3445": [35, 128, 163], "3446": [127, 163], "3449": [127, 163], "345": [35, 44, 47, 481], "3450": 481, "3452": [127, 163], "3453": [127, 163, 481], "3456": 481, "34560": 481, "34598815e": 3, "346": [16, 29, 35, 44, 481, 497], "3460": 481, "3462": [128, 163], "3465": [128, 163], "3468": 481, "347": [35, 44, 481], "3474": [128, 163], "3477": [128, 163], "3478": [128, 163], "34792": [208, 254], "347e": 56, "348": [35, 44, 59, 93, 105, 481], "3483": [128, 163], "3484": [128, 163], "3485": [128, 163], "3487": 481, "349": [35, 44, 81, 481], "34907044e": 3, "3491": [128, 163], "349184": 65, "3498": [128, 163], "34a": 65, "35": [21, 26, 35, 56, 64, 65, 73, 74, 93, 104, 109, 115, 122, 163, 199, 257, 282, 480, 481, 497], "350": [35, 44, 481], "351": [35, 44, 480, 481], "3511": [111, 115, 497], "35114293e": 3, "352": [3, 35, 44, 481], "3520": 481, "352245": 35, "3523": [128, 163], "3525": [128, 163], "3527": 481, "353": [35, 44, 481], "3531": [128, 163], "35332277e": 3, "3538": [129, 163], "354": [4, 8, 35, 44, 481, 497], "35442735e": 3, "3548": [128, 129, 163], "3549": [128, 163], "355": [35, 44, 481], "3550": [128, 163], "3551": [128, 163], "3552": [128, 163], "35522719e": 3, "3553": [128, 163], "3554": [128, 163], "3555": [128, 163], "3556": [129, 163], "3557": [128, 163, 481], "3558": [128, 163], "356": [35, 44, 481], "3563": [128, 163], "3566": [129, 163], "357": [35, 44, 164, 481], "35706901e": 3, "3572": 481, "358": [35, 44, 481], "3584": 481, "35865936e": 3, "359": [35, 44, 46, 48, 51, 62, 481, 497], "3593": 481, "3597": [129, 163], "35a": [65, 73, 480], "36": [6, 16, 17, 18, 22, 29, 35, 51, 61, 62, 64, 65, 72, 73, 92, 93, 95, 114, 145, 148, 163, 194, 199, 202, 233, 238, 251, 480, 481, 495, 497], "360": [35, 44, 65, 73, 118, 210, 480, 481], "3600": [128, 163], "36003556e": 3, "360060360811": 164, "3601": [129, 163], "3603": 481, "3605": [128, 163], "3609": [129, 163], "361": [35, 44, 481], "3614": [129, 163], "3615": [129, 163], "36175130e": 3, "362": [35, 481], "3622": 481, "3626": [128, 163], "3629": 481, "363": [35, 481], "3631": [128, 163], "3635": [128, 163], "364": [35, 104, 481], "3640": [129, 163], "3642": 481, "3644": [129, 163, 481], "3646": [129, 163], "3647": [129, 163], "3648": [129, 163, 481], "3649": 481, "365": [35, 481], "3650": [129, 163], "3651": [129, 163], "366": [35, 481], "3665": 481, "367": [35, 54, 481], "367151": 35, "36719363e": 3, "3673": 481, "3676": 481, "368": [35, 481], "3681": [129, 163], "369": [35, 118, 481], "3691": 481, "36991963e": 3, "37": [35, 64, 65, 73, 83, 93, 96, 114, 115, 118, 125, 163, 368, 369, 470, 480, 481, 497], "370": [35, 481], "3700": 481, "37011456": 72, "3702784": 72, "371": [35, 118, 210, 481], "3710": 481, "3712": 481, "3717": 481, "372": [35, 481], "3722": [129, 163], "3723": [129, 163], "372383": 35, "37294009e": 3, "373": [35, 481], "3730": 481, "3732": [129, 163, 481], "3733": [129, 163, 481], "3735": 481, "3736": [129, 163], "3737": 481, "374": [35, 481], "37415172e": 3, "37418608e": 3, "3742": [129, 163], "3743": [129, 163, 481], "375": [35, 481], "3751": 481, "3753": [129, 163], "376": [35, 75, 481, 497], "3761": [130, 163], "37627273e": 3, "3763": 481, "3764": 481, "3765": 481, "3766": 481, "3768": 481, "37688": 93, "377": [35, 47, 48, 67, 68, 75, 481, 497], "3774": [129, 163], "377495552": 104, "3776": 481, "3777": [129, 163], "37777432e": 3, "378": [6, 35, 481], "3781": [129, 163], "3783": [129, 163], "379": [35, 481], "3790": [129, 163], "379355": 65, "3794": [129, 163], "3795": [129, 163], "3797": [129, 163], "37a": 480, "37b": 480, "38": [35, 65, 73, 93, 114, 148, 163, 480, 481], "380": [35, 481], "38016": 93, "3802": [129, 163], "3803": [129, 163], "381": [35, 106, 118, 391, 481], "3810": [129, 163], "3811": [129, 163], "3816": [129, 163], "38164249e": 3, "3819": [129, 163], "382": [35, 481], "38236679e": 3, "3827": [129, 163], "38276819e": 3, "383": [35, 481], "3833": [129, 163], "3836": [129, 163], "3838": [129, 163], "384": [35, 481], "3840": 481, "3847": [129, 163], "385": [8, 35, 481], "3854": [129, 163], "3855": [129, 163], "3856": [129, 163], "3857": [129, 163], "386": [35, 481], "3860": [129, 163], "3863": [118, 176, 187, 309], "3868": [118, 176, 187, 309], "387": [35, 83, 84, 481, 497], "3873": [129, 163], "3879": [129, 163], "388": [35, 481], "38815135e": 3, "3883008": 6, "3888": 6, "38888888888888895": 3, "3889": 36, "389": [35, 481], "3897": [129, 163], "389e": 56, "39": [6, 16, 35, 46, 54, 57, 64, 65, 70, 73, 74, 75, 79, 84, 93, 104, 136, 138, 141, 163, 194, 207, 250, 257, 268, 480, 481, 490, 497], "390": [35, 72, 481], "3904": 481, "3905": 481, "3908": 481, "391": [35, 481], "3919": [129, 163], "392": [35, 481], "3921": [129, 163], "3927": [129, 163], "392956": 35, "393": [35, 481], "3934": [129, 163], "39346": 481, "3935": [130, 163], "39360": 481, "39361190e": 3, "394": [35, 481], "3942": [129, 163], "3943": [129, 163], "3945": [129, 163], "3949": [132, 163], "395": [35, 481], "39533986e": 3, "396": [35, 65, 73, 481], "396248e": 53, "39667244e": 3, "3968": 481, "397": [35, 106, 118, 391, 481], "397082": 65, "3971": [129, 163], "3973": [129, 163], "398": [35, 481], "3982": 481, "3987": [129, 163], "399": [7, 8, 35, 481, 497], "39912": 35, "3993": [130, 163], "3994": [129, 163], "3995": 481, "399994": 68, "39a": 35, "3a": [6, 35, 64, 65, 73, 480], "3b": [35, 64, 65, 73, 480], "3c": [64, 65, 73, 480], "3d": [1, 3, 7, 8, 9, 16, 17, 19, 20, 24, 25, 27, 29, 31, 32, 34, 36, 38, 39, 41, 45, 47, 50, 72, 77, 79, 85, 86, 96, 99, 103, 106, 108, 109, 114, 116, 118, 120, 125, 128, 132, 134, 138, 145, 147, 148, 149, 151, 155, 156, 160, 163, 181, 185, 186, 187, 189, 191, 192, 202, 231, 235, 236, 253, 255, 256, 259, 260, 261, 262, 263, 283, 293, 294, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 340, 342, 344, 346, 347, 350, 352, 353, 354, 355, 364, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 425, 426, 427, 429, 430, 436, 437, 438, 439, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 458, 459, 463, 475, 479, 497, 498], "3dj2a": 104, "3f": [3, 6, 36, 47, 51, 58, 101], "3f1468dc43a408bf84510b07cee95049": 28, "3g": 83, "3mm": 234, "3rd": [21, 114, 436, 437, 442, 443, 450], "3v2": [132, 163, 199, 249], "3vrct": [208, 254], "3x3": [86, 191, 305, 306, 307, 308, 310, 311, 312, 313, 327, 340, 357, 360, 374, 377, 383, 385, 386, 388, 455], "3x3x3": [191, 282, 284, 457, 459], "4": [0, 3, 6, 7, 10, 11, 14, 15, 16, 19, 21, 24, 25, 26, 29, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 44, 45, 47, 48, 51, 52, 53, 54, 56, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 83, 84, 86, 88, 91, 93, 94, 97, 99, 101, 102, 103, 104, 105, 107, 109, 111, 112, 114, 115, 118, 122, 132, 136, 141, 144, 148, 149, 150, 151, 156, 165, 166, 169, 171, 176, 177, 178, 179, 187, 198, 202, 206, 210, 211, 212, 213, 214, 215, 217, 221, 223, 228, 229, 230, 236, 241, 247, 262, 266, 269, 287, 290, 305, 306, 307, 308, 310, 311, 312, 313, 327, 340, 345, 356, 357, 360, 361, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 385, 386, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 428, 429, 430, 434, 436, 437, 439, 440, 441, 442, 443, 454, 455, 456, 457, 469, 479, 480, 481, 495, 497], "40": [21, 35, 41, 56, 65, 66, 72, 73, 75, 93, 96, 104, 118, 200, 202, 248, 257, 282, 426, 479, 480, 481, 497], "400": [35, 66, 75, 118, 172, 194, 238, 247, 259, 481, 497], "400000": 68, "4001": [130, 163], "40061741e": 3, "40064": 93, "4008": 107, "401": [35, 481], "40175": 77, "402": 35, "4022": [118, 233, 260], "40262469e": 3, "4028": [130, 163], "4029": [130, 163], "403": 35, "4032": 481, "4037": [118, 233, 260], "404": [35, 164], "4042": [130, 163], "405": [35, 59, 118, 165, 166, 225, 257], "4051": [130, 163], "4058": 481, "406": [29, 35], "40640": 93, "4067": [130, 163], "4069": 164, "407": 35, "4070": [130, 163], "4071": [130, 163], "40740740740740744": 3, "407676": [118, 345, 469], "4077": 64, "408": 35, "4081": 481, "40835934e": 3, "408391": 65, "4086": [130, 163], "4087": 481, "409": 35, "4094": [130, 163], "4096": 481, "40962": [290, 293, 294, 301, 451], "40976098e": 3, "4099": [130, 163], "40a": 35, "40x64x64": 41, "41": [32, 35, 48, 52, 65, 73, 74, 93, 104, 118, 456, 462, 480, 481, 497], "410": [35, 91, 99, 118, 172, 497], "4103": [130, 163, 481], "4108": 481, "411": 35, "4116": [130, 163], "412": 35, "4121": [130, 163], "4122": [130, 163], "4126": [132, 163, 481], "41274487e": 3, "413": [35, 112], "4131": [130, 163], "41324528e": 3, "4136": [130, 163], "4138": 481, "413969": 44, "414": 35, "4141": [130, 163], "41483103e": 3, "415": [35, 59, 118, 165, 166, 225, 257, 369], "4153": [130, 163], "41589977e": 3, "4159": [130, 163], "416": [35, 228, 286], "4160": [93, 481], "4161536": 72, "4166": [130, 163], "4167": [130, 163], "4168": [93, 130, 163], "417": 35, "41706723e": 3, "417132": 65, "4172": 481, "417917": 35, "418": 35, "4180": [130, 163], "4188": [130, 163, 481], "418909": 59, "419": 35, "4191": [130, 163], "4195": 481, "41965327e": 3, "42": [6, 10, 25, 26, 35, 46, 64, 65, 66, 73, 93, 94, 103, 108, 112, 118, 199, 234, 480, 481, 495], "420": 35, "4203": 481, "4204": [130, 163], "420413": 59, "42048": 93, "4205": [132, 163], "4208": [129, 163], "421": 35, "42112": 93, "4215": [130, 163], "4219": [130, 163], "422": 35, "42208": 93, "4224": 481, "4225": [130, 163], "423": [35, 112], "4232": [131, 163], "4233": [130, 163], "4236": 481, "424": 35, "42459454e": 3, "425": 35, "42528": 93, "42549417e": 3, "4255": [118, 131, 163, 178, 240, 243], "42561047e": 3, "4257": [131, 163], "4258": [131, 163], "426": [35, 481], "4263": 481, "4266": [131, 163], "4267": [131, 163], "4269": [131, 163], "427": 35, "4270": [131, 163], "4273": [132, 163], "4274": [131, 163], "4279": [131, 163], "428": 35, "42811392": 72, "4284": [73, 131, 163], "42848863e": 3, "4285": [131, 163], "4287": [133, 163], "429": 35, "4295": [131, 163], "4297": [131, 163], "42975377e": 3, "4298": [131, 163], "42cm": [33, 35], "43": [35, 65, 73, 93, 104, 106, 118, 136, 163, 194, 252, 391, 480, 481, 490], "430": 35, "4302": [131, 163], "43027292e": 3, "43033519e": 3, "4304": [131, 163], "4307": [132, 163, 481], "4308": [131, 163], "431": 35, "4310": [131, 163], "4318": [131, 163], "432": [35, 73, 118, 165, 480], "4320": [131, 163], "4325": [131, 163], "433": 35, "4334": [131, 163], "4337": [131, 163], "434": 35, "4343": [131, 163], "435": 35, "4352": 481, "43558622e": 3, "436": [35, 59, 118, 369], "4360": [132, 163], "4363": [45, 48, 497], "437": 35, "438": 35, "439": 35, "4391": 481, "4392": [132, 163], "4397": [132, 163], "4399": 481, "44": [35, 64, 65, 73, 74, 93, 104, 118, 125, 163, 185, 342, 391, 480, 481], "440": [35, 107], "4403": 481, "4407": [132, 163], "441": [35, 118, 165], "4411": [132, 163], "4412": [132, 163], "4413": [132, 163], "4414": [132, 163], "4416": [132, 163, 481], "442": 35, "443": [18, 29, 35, 497], "4434": 481, "4435": 481, "4436": [132, 163], "4437": [132, 163], "444": [20, 35, 194, 202, 238, 251], "4442": [134, 163], "4444": 36, "4446": [132, 163], "445": 35, "4452": [132, 163, 481], "445403": 65, "446": [35, 61, 62, 497], "4465": [132, 163], "4467": [132, 163], "4469": [132, 163], "447": 35, "4470": [132, 163], "4475": 481, "4476": [132, 163], "448": [35, 481], "4480": 481, "44800": 93, "4487": 481, "449": 35, "449202": 35, "4498": [132, 163], "44984": 93, "44a": 35, "44b": 35, "45": [6, 34, 35, 52, 58, 62, 64, 65, 72, 73, 93, 104, 110, 118, 480, 481, 497], "450": [21, 29, 35, 497], "4507": [132, 163], "45093940e": 3, "451": 35, "45132794e": 3, "4515": 481, "4518": 481, "452": 35, "453": 35, "454": [35, 481], "45402006e": 3, "4544": [132, 163, 481], "455": [35, 104], "4554": [132, 163], "4555": [132, 163], "4556": [132, 163], "4558": [132, 163], "456": 35, "4563": 64, "457": 35, "4570": [132, 163], "4571": [132, 163], "4574": [132, 163], "4577": [132, 163], "4579328": 18, "458": 35, "4582": [132, 163], "4585": [132, 163], "459": [35, 40, 48, 497], "4590": [64, 132, 163, 481], "4593": [132, 163], "45955": 35, "45a": [35, 73], "46": [35, 42, 61, 65, 73, 93, 95, 104, 112, 122, 163, 192, 250, 252, 480, 481, 495], "460": 35, "460020402": [118, 345, 469], "4607": [132, 163], "4608": 481, "461": [35, 198, 279], "46112002e": 3, "4612": [132, 163], "4618": [132, 163], "462": [6, 35], "4620": [132, 163], "462241792": 104, "463": [35, 118, 199, 249], "463430": 6, "4635": [132, 163], "4637": [132, 163], "464": [3, 35, 41, 101], "46410089e": 3, "4643": 481, "465": 35, "4652": [132, 163], "4656": [132, 163], "4657": 481, "465759": 65, "4659": [132, 163], "465973": 44, "466": [35, 113, 115, 497], "4660": [132, 163], "4666666666666667": 111, "466817": 53, "467": 35, "4672": 481, "468": [35, 65, 73, 79, 84, 118, 199, 249, 480, 497], "4682b4": 11, "46869955e": 3, "4688": [132, 163], "469": [20, 29, 35, 105, 497], "4692": [132, 163], "4693": [132, 163], "46a": 35, "46b": 35, "46c": 35, "47": [3, 8, 35, 65, 73, 93, 101, 113, 118, 206, 219, 247, 252, 253, 480, 481, 497], "470": 35, "47012389e": 3, "470x500": 23, "471": 35, "4714": [132, 163], "4715": [132, 163], "4719": [132, 163], "472": 35, "4720": 481, "4723": [132, 163], "4725": 481, "47265625": 111, "473": 35, "4734": 481, "4736": 481, "4737": 481, "474": 35, "47419349e": 3, "4743": 481, "475": 35, "47546261e": 3, "4756": [133, 163], "475669e": 53, "476": 35, "476023": 53, "4766": [118, 176], "47674970e": 3, "477": [35, 108, 115, 497], "4775": [118, 176], "477846": 65, "478": [35, 42, 48, 497], "479": [35, 481], "48": [6, 21, 35, 44, 56, 59, 64, 65, 73, 74, 80, 93, 104, 105, 118, 194, 202, 217, 238, 250, 255, 257, 280, 347, 480, 481, 490], "480": 35, "4806": [132, 163], "4807": [133, 134, 163], "4809": [134, 163], "481": [29, 35, 497], "482": [22, 35], "4820": [134, 163], "483": [35, 50, 122, 163], "4830": [133, 163], "4832": 93, "484": 35, "48430985e": 3, "4847132034632034": 114, "4849": [133, 163], "485": [35, 52], "4851": [134, 163], "486": [35, 64], "4860": [132, 163], "48627712": 72, "4864": 93, "487": 35, "48728196e": 3, "48756264e": 3, "488": 35, "4880": 93, "48881518e": 3, "489": 35, "48931156e": 3, "4896": 65, "49": [35, 65, 72, 73, 88, 93, 104, 113, 115, 118, 148, 163, 480, 481, 497], "490": 35, "4903": 481, "4906": [133, 163], "491": 35, "492": 35, "49254045e": 3, "4926": [133, 163], "4928": 481, "493": 35, "49353102e": 3, "4939": [133, 163], "49397765e": 3, "494": [35, 481], "4948": [133, 163], "495": 35, "4951": [134, 163], "4954": [133, 163], "49554": 480, "496": [35, 107], "496571": 51, "4967": [133, 163], "4968": [134, 163], "497": 35, "4975": [133, 163], "498": 35, "4980392156862745": 111, "499": [19, 29, 35, 497], "4991": [134, 163], "4991939095387371": 114, "4992": 481, "4998": 481, "4999": [134, 163], "49997733e": 3, "4a": [6, 64, 65, 73, 104, 480], "4a9b3c": 11, "4b": [64, 65, 73, 104], "4c": [64, 65, 73], "4d": [1, 3, 4, 8, 9, 12, 17, 19, 21, 27, 29, 31, 32, 33, 34, 36, 38, 41, 44, 50, 51, 52, 55, 56, 57, 59, 61, 73, 86, 87, 89, 91, 93, 94, 96, 97, 101, 103, 106, 108, 111, 116, 119, 127, 128, 129, 132, 138, 145, 148, 149, 154, 163, 166, 169, 170, 171, 174, 185, 187, 189, 192, 207, 222, 250, 252, 254, 255, 256, 260, 268, 272, 278, 302, 309, 312, 313, 340, 342, 344, 345, 346, 350, 351, 352, 353, 355, 357, 364, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 387, 388, 390, 423, 424, 429, 437, 441, 442, 443, 448, 450, 457, 459, 475, 479, 487, 491, 495, 497, 498], "4f": [35, 36, 101], "4mm": [96, 169, 176, 207, 268, 313], "4pm": [179, 496], "4th": [21, 96, 118, 177, 185, 191, 319, 320, 353, 357, 360, 441], "4x4": [86, 191, 305, 306, 307, 308, 310, 311, 312, 313, 327, 340, 347, 357, 358, 360, 374, 377, 383, 385, 386, 388, 394, 395, 455], "5": [2, 3, 4, 6, 8, 10, 11, 13, 19, 20, 21, 24, 25, 26, 27, 29, 31, 32, 35, 36, 37, 38, 39, 41, 43, 44, 45, 46, 47, 48, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 81, 82, 83, 90, 91, 93, 96, 97, 98, 99, 101, 102, 103, 104, 105, 107, 109, 110, 112, 113, 115, 118, 127, 130, 132, 138, 145, 151, 156, 157, 158, 159, 165, 169, 171, 176, 177, 178, 179, 181, 191, 192, 198, 199, 201, 202, 206, 210, 219, 222, 224, 229, 236, 249, 250, 252, 255, 256, 258, 259, 262, 267, 268, 271, 273, 277, 281, 295, 310, 311, 317, 319, 320, 345, 351, 352, 355, 368, 369, 384, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 441, 442, 444, 446, 447, 449, 451, 452, 453, 468, 469, 470, 473, 479, 480, 481, 495, 497], "50": [32, 33, 35, 52, 60, 61, 64, 65, 68, 73, 75, 81, 84, 93, 95, 101, 104, 115, 118, 121, 176, 178, 192, 198, 207, 217, 223, 241, 243, 279, 307, 308, 315, 329, 331, 332, 333, 334, 337, 338, 339, 347, 368, 369, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430, 455, 457, 459, 480, 481, 495, 497], "500": [26, 35, 37, 44, 52, 81, 101, 114, 194, 202, 238, 259], "5000": [36, 52, 58, 101], "50001": 247, "5004": [134, 163], "5006": [134, 163], "501": 35, "5013": [134, 163], "50180149e": 3, "502": [35, 101], "5021": 199, "502274": 65, "502379": 65, "503": 35, "5036": [134, 163], "504": [35, 65, 73, 480], "50400811e": 3, "50403960e": 3, "5041": [134, 163], "5048": 481, "505": 35, "50543448e": 3, "50555276e": 3, "5056": 481, "506": 35, "50607": 247, "507": 35, "5071": [118, 165, 240], "50760": 73, "5078": [134, 163], "507e": 56, "508": 35, "5082": [134, 163, 481], "5085": [134, 163], "5086": [134, 163], "5088": [134, 163], "509": 35, "50954774e": 3, "5097": [134, 163], "51": [6, 10, 35, 39, 51, 56, 64, 65, 73, 83, 84, 93, 104, 118, 170, 202, 251, 312, 480, 481, 497], "510": 35, "5109": [134, 163], "511": 35, "5112": [134, 163], "5115891053391053": 114, "51173": 35, "511866": 6, "512": [35, 86, 155, 163, 194, 208, 254, 490], "5120": [134, 163], "51200": 481, "51225016e": 3, "512372": [118, 319, 320], "513": 35, "5132": [134, 163], "5134": 481, "514": 35, "514003e": 53, "515": 35, "5151": [134, 163], "515125": 65, "516": [14, 29, 35, 497], "5160": [134, 163], "51633": 481, "51638072e": 3, "516815": 65, "5169": [134, 163], "517": 35, "5172": [134, 163], "517443": 65, "5176": 93, "5177": 481, "5179": [134, 163], "518": 35, "51824603e": 3, "5184": 481, "5188": 481, "519": 35, "5195": [134, 163], "52": [8, 35, 52, 58, 60, 61, 64, 65, 73, 93, 192, 251, 480, 481, 495], "520": 35, "5202": [134, 163], "521": 35, "52171678e": 3, "522": 35, "5222": [134, 163], "5224": [134, 163], "52294": [26, 118], "523": 35, "5234": [134, 163], "524": 35, "5240": [134, 163], "5248": 93, "525": 35, "5256": [134, 163], "526": 35, "5262": [134, 163], "5268": [134, 163], "527": 35, "52762293e": 3, "5277": [134, 163], "5279": [134, 163], "528": [35, 47], "5281": 0, "529": 35, "52a": 35, "53": [10, 23, 29, 34, 35, 48, 64, 65, 73, 93, 95, 104, 118, 206, 250, 251, 261, 480, 481, 497], "530": 35, "5301": [134, 163], "5309": [134, 163], "530991": 6, "530e": 56, "531": 35, "5312": 481, "53122811e": 3, "53197354e": 3, "532": 35, "5320": [134, 163], "53245116e": 3, "533": 35, "533043": 65, "5339": 481, "534": 35, "5342": [134, 163], "5346": [134, 163], "5347": [134, 163], "535": 35, "5357": [134, 163], "536": 35, "536042": 35, "536638": 65, "537": 35, "5371": [134, 163], "5377": [134, 163], "53771139e": 3, "5379": [134, 163], "538": 35, "5381": [134, 163], "5382": [134, 163], "539": [35, 197], "539273": 65, "53967094e": 3, "5398": [134, 163], "53995167e": 3, "54": [22, 35, 64, 65, 72, 73, 93, 103, 104, 118, 165, 202, 219, 251, 480, 481], "540": [6, 35, 65, 73, 480], "54080": 481, "540842": 59, "541": 35, "541399": 65, "542": 35, "542346": 59, "5425": [134, 163], "543": 35, "54345774e": 3, "5438": [43, 91, 481], "544": [35, 118, 223], "5440": 481, "54400": 93, "545": 35, "54542336": 72, "54573127e": 3, "54584": 481, "546": [6, 35], "546246": 6, "54629510e": 3, "54675908e": 3, "547": 35, "548": 35, "5481": [135, 163], "548e": 56, "549": [35, 118, 176, 480], "5490204": [118, 312], "5492": [135, 163], "5496": 93, "54a": 35, "54b": 35, "55": [21, 35, 65, 69, 73, 93, 99, 104, 141, 163, 194, 238, 480, 481], "550": 35, "550436864": 104, "55078125": 111, "5508": 480, "551": 35, "55124816e": 3, "55160": 93, "5519": [135, 163], "552": [35, 91, 118, 223], "553": 35, "5530": [135, 163], "55380249023438": 46, "5539": [3, 33, 34, 40, 101, 118, 218, 271], "554": 35, "555": 35, "5550": [135, 163], "55502240e": 3, "5557": [135, 163], "556": 35, "55619623e": 3, "5565": [135, 163], "5568": 481, "557": [35, 101, 115, 497], "5576": 481, "5578": [135, 163], "558": 35, "559": [35, 118, 176], "5594": [135, 163], "5595": [135, 163], "56": [24, 35, 39, 65, 73, 74, 75, 93, 118, 172, 252, 480, 481, 497], "560": 35, "5601": [135, 163], "561": 35, "5614": [135, 163], "5616": [135, 163], "562": [35, 118, 225, 257], "563": 35, "5632": 93, "5637": [135, 163], "564": 35, "564125": 65, "56425071e": 3, "56495905e": 3, "565": 35, "5652": 73, "566": 35, "56645287e": 3, "567": [35, 64, 480], "568": 35, "5680": 93, "56848172e": 3, "569": 35, "57": [6, 32, 35, 64, 65, 73, 93, 104, 111, 115, 118, 122, 125, 148, 163, 202, 251, 480, 481, 497], "570": [23, 29, 35, 497], "571": [35, 106, 115, 497], "57195": 35, "572": 35, "572388": 44, "573": [35, 118, 197, 225, 257], "574": 35, "57414654e": 3, "575": 35, "57536": 481, "575969": 65, "576": [35, 65, 73], "5760": [93, 481], "57631619e": 3, "577": 35, "5773": 481, "578": 35, "57882026e": 3, "579": 35, "57928143e": 3, "58": [32, 35, 65, 73, 93, 148, 163, 480, 481], "580": 35, "58043804e": 3, "581": 35, "5818": 481, "582": [35, 39, 118], "58286726e": 3, "583": 35, "5832": 480, "584": 35, "585": 35, "586": 35, "5861": 481, "58656706e": 3, "5868": 73, "587": 35, "587189": 35, "588": 35, "589": [35, 112, 115, 497], "58911": 481, "589401": 59, "59": [33, 35, 64, 65, 73, 74, 93, 103, 118, 122, 163, 171, 202, 250, 368, 369, 480, 481], "590": 35, "590403": 65, "590905": 59, "591": 35, "592": [35, 39, 118], "593": 35, "593056": 65, "5934": [118, 187], "594": [35, 64, 480], "59461114e": 3, "595": 35, "595170": 6, "5952": [93, 481], "59526645e": 3, "596": 35, "597": 35, "598": 35, "59875233e": 3, "599": [35, 118, 197, 247], "5992": 93, "5997": [61, 118, 209, 265], "59974": 35, "5a": [6, 35, 64, 65, 73, 104, 480], "5b": [6, 35, 64, 65, 73, 104], "5bdeprec": 369, "5c": [64, 65, 73, 104], "5c734f16e50cc772ef593cab9bb3137b": 11, "5c8ff37d4712b400183b7011": 54, "5c8ff37d4712b400193b5b54": 54, "5c8ff37e2286e80016c3c2cb": 54, "5c8ff3814712b4001a3b5561": 54, "5c8ff3822286e80018c3e37b": 54, "5c8ff382a743a90018606df8": 54, "5c8ff3832286e80016c3c2d1": 54, "5c8ff3832286e80019c3c10f": 54, "5c8ff3842286e80017c419e0": 54, "5c8ff3854712b4001a3b5568": 54, "5c8ff3872286e80017c419e9": 54, "5c8ff3872286e80017c419ea": 54, "5c8ff3884712b400183b7023": 54, "5c8ff3884712b400193b5b5c": 54, "5c8ff389a743a9001660a016": 54, "5c8ff38c2286e80016c3c2da": 54, "5c8ff38c4712b4001a3b5573": 54, "5c8ff38ca743a9001760809": 54, "5c8ff38ca743a90018606df": 54, "5c8ff38da743a900176080a2": 54, "5c8ff38f2286e80018c3e38d": 54, "5c8ff3912286e80018c3e393": 54, "5c8ff3914712b400173b5329": 54, "5c8ff3914712b4001a3b5579": 54, "5c8ff391a743a900176080a9": 54, "5c8ff3952286e80016c3c2e7": 102, "5c8ff3952286e80017c41a1b": 54, "5c8ff3954712b400193b5b79": 102, "5c8ff395a743a900176080af": 102, "5c8ff3964712b400193b5b7d": 102, "5c8ff3982286e80017c41a29": 102, "5c8ff399a743a9001660a031": 102, "5c8ff39aa743a900176080ba": 102, "5c8ff39aa743a900176080bf": 102, "5c8ff39aa743a90018606e21": 102, "5c8ff39ca743a90019606c50": 102, "5c8ff39d4712b400193b5b89": 102, "5c8ff39fa743a90018606e2f": 102, "5c8ff3a12286e80016c3c2fc": 102, "5c8ff3a12286e80017c41a48": 102, "5c8ff3a2a743a9001660a048": 102, "5c8ff3a34712b400193b5b92": 102, "5c8ff3a34712b4001a3b55a3": 102, "5c8ff3a72286e80017c41a54": 102, "5c8ff3a7a743a90018606e42": 102, "5c8ff3a84712b400183b7048": 102, "5c8ff3e14712b400183b7097": 54, "5c8ff3e32286e80018c3e42c": 54, "5c8ff3e4a743a9001760814f": 54, "5c8ff3e52286e80018c3e439": 54, "5c8ff3e54712b400183b70a5": 54, "5c8ff3e72286e80017c41b3d": 54, "5c8ff3e82286e80018c3e443": 54, "5c8ff3e9a743a90017608158": 54, "5c8ff3ea4712b400183b70b7": 54, "5c8ff3eb2286e80019c3c194": 54, "5c8ff3eb2286e80019c3c198": 102, "5c8ff3ed2286e80017c41b56": 102, "5c8ff3ee2286e80016c3c379": 102, "5c8ff3ee4712b400183b70c3": 102, "5c8ff3efa743a9001660a0d5": 102, "5c8ff3f12286e80016c3c37": 102, "5c8ff3f14712b4001a3b560": 102, "5c8ff3f1a743a90017608164": 102, "5c8ff3f34712b4001a3b5612": 102, "5c8ff3f64712b400183b70d8": 102, "5c8ff3f6a743a90017608171": 102, "5c8ff3f72286e80019c3c1af": 102, "5c8ff3f7a743a90019606cdf": 102, "5c8ff3f92286e80018c3e463": 102, "5cb46e0339926900160f6930": 102, "5cb46e0cf2be3c001801f757": 102, "5cb46e1c3992690018133a9": 102, "5cb46e35f2be3c00190305ff": 102, "5cb46e3f353c5800199ac787": 102, "5cb46e40f2be3c001801f77f": 102, "5cb46e43f2be3c0017056b8a": 54, "5cb46e4d353c58001b9cb325": 102, "5cb46e5af2be3c001801f799": 54, "5cb46e5c353c5800199ac79f": 54, "5cb46e63f2be3c0017056ba9": 102, "5cb46e6b353c58001b9cb34f": 54, "5cb46e6ba3bc970019f07152": 102, "5cb46e6f353c58001a9b3311": 102, "5cb46e793992690017108eb9": 102, "5cb46e7a353c58001a9b3324": 102, "5cb46e85a3bc97001aeff750": 102, "5cb46e8b353c58001c9abe98": 54, "5cb46e913992690018133b1c": 54, "5cb46e92a3bc970019f0717f": 54, "5cb46e9a353c58001c9abeac": 54, "5cb46e9b39926900190fad5c": 54, "5cb46eaa39926900160f69af": 54, "5cb4700af2be3c0017056f69": 102, "5cb470153992690018133d3b": 102, "5cb47016a3bc970017efe44f": 54, "5cb47016a3bc970018f1fc88": 102, "5cb4701c3992690018133d49": 102, "5cb4701e3992690018133d4f": 54, "5cb4701ff2be3c0017056fad": 102, "5cb47020f2be3c0019030968": 102, "5cb47023353c58001c9ac02b": 54, "5cb4702639926900190faf1d": 102, "5cb4702a353c58001b9cb5a": 54, "5cb4702b39926900171090e4": 102, "5cb4702f39926900171090ee": 54, "5cb4703039926900160f6b3e": 102, "5cb4703439926900160f6b43": 102, "5cb47038353c5800199ac9a2": 102, "5cb4703bf2be3c001801fa49": 54, "5cb470413992690018133d8c": 54, "5cb47045a3bc970019f073a0": 54, "5cb4704af2be3c001705703b": 102, "5cb47052f2be3c0017057069": 54, "5cb47056353c58001c9ac064": 54, "5cb47057f2be3c0019030a1f": 102, "5d": [130, 163, 369], "5d27037f45253a001c3d4563": 18, "5d275ede1c5b4a001aa00c26": 18, "5d27c2c41c5b4a001d9f4e7": 82, "5d27ca3d1c5b4a001b9eeddb": 81, "5d27cb281c5b4a001aa07e29": 81, "5d27cbbd45253a00193c9b70": 83, "5d27ccde1c5b4a001d9f5602": 82, "5d27d29145253a001c3e284f": 18, "5d27d3c3114a42001804500a": 82, "5d27d9c6114a420019045370": 82, "5d27da3a114a4200190453ab": 79, "5d27dbce45253a001a3c32fd": 83, "5d27ddc91c5b4a001b9ef9d0": 18, "5d27de38a26b340016099771": 82, "5d27e0221c5b4a001b9efb25": 83, "5d27e5fa1c5b4a001aa09681": 82, "5d27e787114a420016059c22": 81, "5d27eba2114a420016059fbf": 81, "5d27ebc3114a42001704a18d": 79, "5d27ed481c5b4a001aa09e83": 83, "5d27efab1c5b4a001aa0a0c2": 81, "5d27f18945253a00193cb2dd": 82, "5d27f1f0114a42001804603": 79, "5d27f296114a42001704a5d9": 81, "5d27fb651c5b4a001d9f7938": 82, "5d28000845253a001c3e507a": 83, "5d280057a26b340019089965": 82, "5d280608a26b3400180868d1": 81, "5d2808401c5b4a001d9f83b2": 82, "5d28092e45253a001c3e597f": 79, "5d28095545253a001c3e59a2": 81, "5d2811d0114a42001704b988": 81, "5d2811fba26b340017085492": 82, "5d28144c114a42001804739": 81, "5d2814d145253a001c3e6404": 82, "5d281a2a45253a001c3e684c": 83, "5d281a531c5b4a001c9ea662": 79, "5d281e3d114a42001605cb02": 81, "5d281f851c5b4a001b9f2315": 81, "5d28244745253a001b3c4afa": 82, "5d28295aa26b340018087ef4": 79, "5d282aa5114a42001605db5a": 83, "5d282b2345253a001c3e7d09": 82, "5d282d9045253a001c3e80a1": 81, "5d28309645253a001a3c6a8d": 82, "5d28318445253a00193ce6d7": 82, "5d28335545253a00193ce806": 83, "5d283473a26b34001609ed88": 79, "5d28375345253a001c3e90a2": 81, "5d283ee0a26b34001609f58": 81, "5d283f021c5b4a001aa100cb": 81, "5d284374114a42001605f4d2": 79, "5d28453a1c5b4a001c9eca": 83, "5d2848581c5b4a001aa10aac": 82, "5d284a3445253a001c3ea2d1": 82, "5d284daf1c5b4a001d9fc4e5": 83, "5d285263114a4200160602c6": 81, "5d2852caa26b340018089ae5": 81, "5d28545ca26b340018089ba7": 82, "5d28564b1c5b4a001d9fc9d6": 82, "5d28590d114a4200160607da": 79, "5d285a53114a4200160608b": 79, "5d285b6c1c5b4a001c9edada": 82, "5d285cd945253a001a3c8509": 82, "5d285d61114a42001904a343": 81, "5d28660b1c5b4a001aa122c7": 81, "5d2866c0a26b340017088827": 83, "5d2868f9114a42001704f6a5": 81, "5d286e49114a42001904ab90": 82, "5d286f35a26b34001908e5c1": 79, "5d28709e114a420016061aa1": 81, "5d28765645253a001b3c8106": 82, "5d28781945253a00193d1237": 83, "5d287b3a45253a00193d145": 81, "5d287eeb45253a001c3ed1ba": 82, "5d28847d114a42001904b87b": 81, "5d2888ce1c5b4a001b9f789c": 79, "5d2889a7a26b3400160a368f": 83, "5d288af11c5b4a001d9ff0cb": 82, "5d288fb11c5b4a001d9ff738": 83, "5d28966345253a00193d2e27": 81, "5d2896fb45253a001a3cabe0": 82, "5d289736114a4200170518d7": 81, "5d289b2945253a00193d32ac": 79, "5d289be945253a001c3ef5e2": 82, "5d28a00245253a001c3efac9": 79, "5d28a1c91c5b4a001da00bd9": 82, "5d28a431a26b340019090fa2": 81, "5d28a4c0114a420016064fa2": 83, "5d28af541c5b4a001da01caa": 82, "5d28b135a26b3400160a648": 81, "5d28b6171c5b4a001c9f2ebd": 83, "5d28b761a26b3400160a6ba8": 81, "5d28b9af45253a001a3ccb85": 82, "5d28bb90a26b3400190925d2": 82, "5d28bc0145253a00193d53ab": 79, "5d28c0a81c5b4a001b9fb89a": 81, "5d28cfd91c5b4a001c9f404d": 79, "5d28d2bb114a420017054715": 83, "5d28db3ba26b34001808f444": 79, "5d28e056a26b340019093c95": 83, "5d28e50945253a00193d6e09": 83, "5d28f0bc1c5b4a001b9fd7f3": 79, "5d28ff54114a42001705610c": 83, "5d28ffc245253a00193d7dac": 79, "5d2909cd1c5b4a001b9fe6c5": 79, "5d2919e2114a42001606b46c": 79, "5d2928bc45253a001b3cf010": 79, "5d293a50a26b34001909682a": 79, "5d29492fa26b34001709070f": 79, "5d295328114a42001606dd9a": 79, "5d2c37031c5b4a001ca0da2b": 79, "5d2c442e114a420017071134": 79, "5d2c5c431c5b4a001da257a5": 79, "5d2c6c2645253a001c42460f": 79, "5d2ec286251f0e001604a189": 79, "5d2ed2875d2cdc001702b4c5": 79, "5d2ef8925d2cdc001702e0a5": 79, "5d2f0851251f0e0018044fe4": 79, "5d2f26e4a667db0017f72ae9": 79, "5d2f358c251f0e001704a76a": 79, "5d2f41d2835aff001a52da0c": 79, "5d2f5acc835aff0018532004": 79, "5d2f692d835aff00175372e9": 79, "5d2f7456835aff0017537992": 79, "5d2f8881a667db0018f6b634": 79, "5d2f9552251f0e001605bb64": 79, "5d2faf785d2cdc0017039bb1": 79, "5d2fbffd835aff0018535ef5": 79, "5d2fc225a667db001af6222a": 79, "5d2fdd77835aff00195494d4": 79, "5d2fe5d5a667db0017f80f32": 79, "5d2ff3ea835aff0018538140": 79, "5d301049a667db0019f67ca0": 79, "5d3021b65d2cdc00190344d6": 79, "5d302afe5d2cdc0018030034": 79, "5d303ad4835aff001853bca4": 79, "5d304f845d2cdc001a032801": 79, "5d3058cd835aff001853d4c7": 79, "5d306f15a667db0018f78b4d": 79, "5d307f8b251f0e00190519ca": 79, "5d309cb5251f0e001606fe4b": 79, "5d30a667251f0e00190534dc": 79, "5d30bb07251f0e001705df42": 79, "5d30df37251f0e001705fd72": 79, "5d30e232a667db0018f7f2a9": 79, "5d30f7ec251f0e001805e3cd": 79, "5d3116dca667db0018f81c29": 79, "5d312688251f0e0016079f29": 79, "5d3134fe5d2cdc001705393d": 79, "5d3143f9835aff00195630c": 79, "5d315ac0835aff001754e139": 79, "5d3160bc835aff00195649cf": 79, "5d317bb2251f0e001608002": 79, "5d318a6c251f0e001905b6": 79, "5d31962da667db0017fa303d": 79, "5d31abe45d2cdc0019046202": 79, "5d31cdeea667db001af75ab9": 79, "5d31dc83835aff001956e6c5": 79, "5d31fefea667db0018f8ea9f": 79, "5d32072b5d2cdc0018043969": 79, "5d3219b4a667db0018f8ff1f": 79, "5d3234f3835aff00175590f0": 79, "5d323d06251f0e001706f0b": 79, "5d324e77251f0e001806e5e7": 79, "5d326b70835aff00195762f8": 79, "5d32731a5d2cdc001a0472bb": 79, "5d3286b7251f0e001906427f": 79, "5d3298815d2cdc001804700c": 79, "5d32ab6ea667db0017fb59e8": 79, "5d32bb275d2cdc001a049841": 79, "5d32d901a667db0018f9684f": 79, "5d32e9d3835aff001957cd79": 79, "5d32f34f835aff001755ee97": 79, "5d3306db5d2cdc001706c36f": 79, "5d332373251f0e001609acbd": 79, "5d332b7e835aff001957feec": 79, "5d341711a667db0017fc816f": 79, "5d34294d835aff001958add9": 79, "5d7b8948fcbf44001c44e695": 18, "5fd26f33e54da6efc0bc7eca321ad622": 20, "5hju4": [169, 207, 268], "5mm": [68, 97, 187, 221], "5pm": [179, 496], "5th": [21, 210], "5x1": 221, "5x4": 221, "6": [3, 4, 6, 8, 10, 11, 12, 13, 21, 25, 26, 29, 32, 33, 35, 36, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 52, 53, 54, 56, 57, 58, 61, 62, 64, 65, 66, 68, 72, 73, 74, 75, 78, 82, 91, 93, 96, 102, 103, 104, 106, 107, 110, 111, 112, 114, 115, 118, 122, 125, 127, 141, 143, 145, 148, 149, 150, 156, 157, 158, 165, 169, 176, 177, 178, 180, 191, 202, 209, 227, 233, 234, 247, 265, 268, 271, 312, 368, 369, 373, 376, 378, 380, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 443, 449, 457, 459, 480, 481, 496, 497], "60": [6, 16, 17, 35, 43, 44, 64, 65, 66, 72, 73, 102, 104, 105, 118, 166, 202, 224, 234, 281, 480, 481, 495], "600": [35, 52, 122, 163, 194, 201, 238, 259, 450], "60000": 52, "601": 35, "601855088049469": 37, "602": [15, 29, 35, 497], "602484": 35, "60263489e": 3, "603": 35, "60399851e": 3, "604": 35, "60401570e": 3, "605": 35, "6058": 481, "606": 35, "60604416": 72, "607": 35, "608": 35, "609": 35, "60954403e": 3, "61": [35, 38, 52, 65, 69, 73, 104, 105, 118, 217, 480, 481], "610": [24, 29, 35, 497], "611": [35, 99, 497], "6111111111111112": [3, 31], "612": [35, 65, 73, 89, 480], "61202283e": 3, "6127": [51, 62, 497], "613": 35, "613018e": 53, "613071": 65, "614": 35, "61421943e": 3, "615": 35, "616": 35, "61628694e": 3, "616334": 35, "617": 35, "618": 35, "619": 35, "62": [32, 35, 64, 65, 73, 74, 93, 103, 104, 112, 118, 145, 163, 194, 238, 256, 480, 481, 490], "620": 35, "621": 35, "622": 35, "62252472e": 3, "623": [35, 110, 115, 497], "623032": 65, "624": 35, "625": 35, "62546": [64, 480], "626": 35, "627": 35, "6274509803921569": 111, "628": 35, "629": 35, "63": [6, 35, 64, 65, 66, 73, 93, 95, 118, 229, 250, 258, 480, 481], "630": [35, 53, 62, 497], "6300": 480, "63033191e": 3, "63085987e": 3, "631": 35, "63144270e": 3, "631803": 6, "632": 35, "633": 35, "6330": 481, "63369": 481, "634": 35, "63472708e": 3, "634798080": 104, "635": 35, "635179": 65, "63538384e": 3, "636": [35, 115, 497], "637": [35, 93, 99, 103, 104, 497], "638": [35, 80, 84, 497], "63808": 481, "63812": 481, "63834070e": 3, "639": 35, "639460": 65, "64": [10, 20, 22, 35, 36, 38, 41, 43, 44, 46, 50, 64, 65, 68, 72, 73, 81, 86, 96, 104, 111, 155, 160, 163, 190, 194, 202, 208, 234, 238, 247, 250, 251, 254, 480, 481, 490], "640": 35, "641": 35, "64128": 481, "642": [35, 58, 290, 293, 294, 301, 451], "64225230e": 3, "64243685e": 3, "643": 35, "644": [35, 69, 75, 497], "6447": [118, 187], "645": 35, "645e": 56, "645m": 227, "646": 35, "64628602e": 3, "64685335e": 3, "646e": 56, "647": 35, "647343": 35, "648": [35, 64, 65, 73, 480], "648e": 56, "649": 35, "64908": 65, "64x64x64": 234, "65": [34, 35, 44, 64, 65, 73, 93, 136, 163, 480, 481], "650": 35, "65019973e": 3, "6506": 118, "65061117e": 3, "65069056": 104, "651": 35, "651576": 65, "652": 35, "652072": 65, "65214801e": 3, "65268435e": 3, "6528": 93, "653": 35, "65324457e": 3, "654": 35, "65408661e": 3, "65426": 107, "655": 35, "6552": 65, "656": 35, "657": 35, "65765750e": 3, "658": 35, "65860401e": 3, "659": 35, "66": [6, 17, 18, 35, 61, 64, 65, 72, 73, 92, 95, 104, 113, 208, 480, 481], "660": [35, 111, 115, 497], "660587": 35, "661": 35, "662": 35, "663": 35, "664": [35, 102, 115, 497], "664e": 56, "665": [35, 61, 118, 121, 226, 230, 266, 282, 284], "66514298e": 3, "6652": 104, "66533": 35, "66533469e": 3, "665675": 65, "666": [11, 29, 35, 51, 93, 99, 497], "6667": 36, "667": 35, "66796875": 111, "668": 35, "66897231e": 3, "669": [35, 52, 118, 456, 462], "66953216": 72, "67": [4, 25, 32, 35, 64, 65, 73, 125, 163, 250, 480, 481], "670": [35, 118, 121, 226, 282, 284], "671": 35, "67105837e": 3, "67107159e": 3, "6712058072321548": 37, "672": 35, "67257935e": 3, "67291653e": 3, "673": 35, "674": 35, "675": [6, 35, 64], "676": 35, "676518": 6, "676956": 35, "67697653e": 3, "677": [35, 105, 115, 497], "677519": 35, "678": [35, 61, 118, 230, 266], "6784": 93, "679": [35, 481], "67992140e": 3, "67b924beca01574bbea08fde49fbbbcd": 111, "68": [35, 43, 46, 61, 64, 65, 73, 93, 192, 480, 481, 495], "680": 35, "68078965e": 3, "681": [35, 52, 118, 456, 462], "68151": 481, "682": [35, 77, 84, 497], "6823529411764706": 111, "68292": 481, "683": 35, "68302879e": 3, "68352": 93, "684": [35, 73], "68456872e": 3, "6848": 481, "685": 35, "68523114e": 3, "6852766": 72, "68544": 481, "68584": 93, "686": 35, "687": 35, "68750363e": 3, "688": 35, "689": 35, "68e": 56, "69": [6, 35, 64, 65, 73, 74, 81, 104, 480, 481], "690": 35, "691": [35, 95, 99, 497], "69107818e": 3, "69167460e": 3, "692": 35, "69248": 481, "693": 35, "69390526e": 3, "694": 35, "695": 35, "696": 35, "697": 35, "698": [3, 35], "699": [35, 36, 48, 497], "6991": 36, "69997698e": 3, "6a": [6, 64, 65, 73, 480], "6b": [6, 64, 65, 480], "6c": [6, 65], "6mm": [312, 457], "6th": 21, "7": [3, 6, 11, 16, 23, 25, 26, 27, 29, 32, 35, 40, 41, 45, 46, 47, 48, 53, 55, 56, 57, 59, 60, 61, 64, 65, 66, 68, 71, 72, 73, 74, 84, 88, 91, 93, 96, 104, 107, 112, 115, 118, 121, 122, 125, 127, 136, 138, 143, 145, 148, 149, 151, 156, 158, 177, 187, 190, 191, 194, 197, 202, 206, 208, 217, 231, 234, 237, 238, 247, 251, 253, 254, 259, 263, 317, 319, 320, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 430, 436, 439, 441, 442, 444, 446, 447, 451, 453, 456, 473, 480, 481, 495, 497, 499], "70": [22, 32, 34, 35, 64, 65, 66, 72, 73, 118, 176, 194, 233, 260, 480, 481, 490], "700": [35, 46, 151, 163, 194, 238, 259], "700000": 68, "700012": 68, "70012": 481, "701": 35, "70159550e": 3, "702": [35, 480], "7020": 480, "70210106e": 3, "703": 35, "704": [35, 481], "705": 35, "7058823529411765": 111, "706": 35, "707": 35, "70784405e": 3, "708": 35, "70884": [118, 219], "709": 35, "70976": 481, "70a": 35, "71": [6, 34, 35, 64, 65, 73, 74, 104, 194, 238, 480, 481], "710": 35, "71051637e": 3, "710516736": 104, "711": 35, "712": 35, "712135": [118, 199], "71215701e": 3, "713": 35, "714": [35, 74, 75, 497], "71451984e": 3, "714833": 65, "715": [35, 44, 48, 497], "71506899e": 3, "71561": [118, 206, 253], "71598319e": 3, "716": 35, "716392": 65, "717": 35, "718": 35, "719": 35, "719380": 65, "72": [35, 52, 59, 61, 64, 65, 73, 93, 95, 105, 118, 157, 163, 177, 230, 266, 480, 481], "720": [35, 65, 73], "72052941e": 3, "7209": [64, 118, 198], "721": 35, "7214": [118, 198], "72172528e": 3, "7218": 481, "722": 35, "7221": 46, "7221031": 46, "7229": 42, "723": 35, "724": 35, "72429519e": 3, "725": 35, "72569775e": 3, "72589218e": 3, "726": 35, "727": 35, "728": 35, "729": 35, "73": [35, 64, 65, 73, 93, 104, 105, 480, 481], "730": 35, "731": 35, "73131440e": 3, "7319": 111, "732": 35, "733": 35, "734": [35, 50, 62, 497], "734506": 65, "735": 35, "735bf0f211246c83396b5f21f706c224": 10, "736": 35, "73611561e": 3, "7362": 42, "73681280e": 3, "73695232": 72, "736986": 65, "737": 35, "73787615e": 3, "738": 35, "738699": 6, "739": 35, "73a": 35, "74": [32, 35, 65, 73, 93, 103, 480, 481], "740": 35, "7402597402597403": 36, "740345": 65, "741": 35, "742": 35, "743": 35, "744": [3, 35], "74432": 481, "745": 35, "746": 35, "74667862e": 3, "747": 35, "748": [35, 59, 62, 497], "749": 35, "74911378e": 3, "7493501": [51, 118, 170, 313], "749503182": 104, "75": [24, 26, 34, 35, 43, 64, 65, 68, 72, 73, 74, 93, 104, 106, 109, 114, 118, 194, 201, 238, 250, 391, 480, 481, 490], "750": 35, "75008": 481, "751": 35, "752": [35, 103, 118], "752451": 65, "75294442e": 3, "753": 35, "754": 35, "75450748e": 3, "755": 35, "7552": 481, "75530850e": 3, "756": [35, 73, 103, 118, 480], "756994": 65, "757": 35, "758": [3, 17, 31, 35], "758346": 65, "75855356998246e": 77, "758570": 65, "75888987e": 3, "7589": 35, "759": 35, "76": [3, 34, 35, 52, 64, 65, 68, 73, 74, 93, 253, 261, 480, 481], "760": 35, "76047065e": 3, "761": 35, "7616": 93, "762": [35, 58], "763": [35, 103, 118], "763636": 6, "764": 35, "76474661e": 3, "765": 35, "76553842e": 3, "766": [35, 89, 99, 103, 118, 497], "76642456e": 3, "76694560e": 3, "767": [3, 35], "768": [35, 481], "7680": 93, "769": 35, "76993315e": 3, "76a": 73, "77": [35, 47, 65, 68, 73, 74, 480, 481], "770": 35, "77021904e": 3, "770578": 65, "771": [35, 71, 75, 497], "772": 35, "772909": 65, "772e": 56, "773": [8, 35, 62, 497], "77307863e": 3, "77394561e": 3, "774": [6, 35], "7744": 93, "774939": 45, "775": 35, "77511197e": 3, "776": 35, "777": [35, 105], "778": 35, "7783": 105, "7784": 111, "7785": 111, "7786": 111, "7787": 111, "778cb0": 11, "779": 35, "77915480e": 3, "779998": 35, "78": [35, 56, 64, 65, 68, 73, 74, 95, 118, 176, 480, 481], "780": 35, "78034673e": 3, "7803921568627451": 111, "7808": 93, "781": [35, 86, 99, 497], "781180": 481, "781181": 481, "781182": 481, "781183": 481, "781286": 11, "782": [35, 78, 84, 497], "78232": 93, "78272": 93, "783": [35, 480], "7835497835497837": 36, "784": [35, 136, 163], "785": [35, 59, 62, 497], "786": [35, 78, 118, 322], "7868": 3, "787": 35, "788": 35, "78897248e": 3, "789": 35, "78909502e": 3, "78946099e": 3, "789520": 65, "78976": 481, "79": [35, 64, 65, 68, 72, 73, 74, 93, 104, 107, 480, 481], "790": 35, "791": 35, "79167685e": 3, "79199020e": 3, "792": [35, 65, 480], "79274": 35, "793": [35, 118, 136, 163], "794": 35, "795": 35, "796": [35, 78, 118, 322], "796424": 65, "79688319e": 3, "797": 35, "798": 35, "79848": 481, "799": 35, "7a": [6, 35, 64, 65, 73, 480], "7a8732": 11, "7b": [6, 35, 64, 65, 73], "7c": [64, 65], "7e62e7e7fcc4d6e1428b6b2cb48f7a7c": 11, "7networks_lh_cont_cing_1": 481, "7networks_lh_cont_cing_2": 481, "7networks_lh_cont_ofc_1": 481, "7networks_lh_cont_par_1": 481, "7networks_lh_cont_par_2": 481, "7networks_lh_cont_par_3": 481, "7networks_lh_cont_par_4": 481, "7networks_lh_cont_par_5": 481, "7networks_lh_cont_par_6": 481, "7networks_lh_cont_pcun_1": 481, "7networks_lh_cont_pcun_2": 481, "7networks_lh_cont_pfcl_1": 481, "7networks_lh_cont_pfcl_2": 481, "7networks_lh_cont_pfcl_3": 481, "7networks_lh_cont_pfcl_4": 481, "7networks_lh_cont_pfcl_5": 481, "7networks_lh_cont_pfcl_6": 481, "7networks_lh_cont_pfcl_7": 481, "7networks_lh_cont_pfcl_8": 481, "7networks_lh_cont_pfcmp_1": 481, "7networks_lh_cont_pfcv_1": 481, "7networks_lh_cont_temp_1": 481, "7networks_lh_default_par_1": 481, "7networks_lh_default_par_2": 481, "7networks_lh_default_par_3": 481, "7networks_lh_default_par_4": 481, "7networks_lh_default_par_5": 481, "7networks_lh_default_par_6": 481, "7networks_lh_default_par_7": 481, "7networks_lh_default_pcunpcc_1": 481, "7networks_lh_default_pcunpcc_10": 481, "7networks_lh_default_pcunpcc_11": 481, "7networks_lh_default_pcunpcc_2": 481, "7networks_lh_default_pcunpcc_3": 481, "7networks_lh_default_pcunpcc_4": 481, "7networks_lh_default_pcunpcc_5": 481, "7networks_lh_default_pcunpcc_6": 481, "7networks_lh_default_pcunpcc_7": 481, "7networks_lh_default_pcunpcc_8": 481, "7networks_lh_default_pcunpcc_9": 481, "7networks_lh_default_pfc_1": 481, "7networks_lh_default_pfc_10": 481, "7networks_lh_default_pfc_11": 481, "7networks_lh_default_pfc_12": 481, "7networks_lh_default_pfc_13": 481, "7networks_lh_default_pfc_14": 481, "7networks_lh_default_pfc_15": 481, "7networks_lh_default_pfc_16": 481, "7networks_lh_default_pfc_17": 481, "7networks_lh_default_pfc_18": 481, "7networks_lh_default_pfc_19": 481, "7networks_lh_default_pfc_2": 481, "7networks_lh_default_pfc_20": 481, "7networks_lh_default_pfc_21": 481, "7networks_lh_default_pfc_22": 481, "7networks_lh_default_pfc_23": 481, "7networks_lh_default_pfc_24": 481, "7networks_lh_default_pfc_3": 481, "7networks_lh_default_pfc_4": 481, "7networks_lh_default_pfc_5": 481, "7networks_lh_default_pfc_6": 481, "7networks_lh_default_pfc_7": 481, "7networks_lh_default_pfc_8": 481, "7networks_lh_default_pfc_9": 481, "7networks_lh_default_temp_1": 481, "7networks_lh_default_temp_10": 481, "7networks_lh_default_temp_2": 481, "7networks_lh_default_temp_3": 481, "7networks_lh_default_temp_4": 481, "7networks_lh_default_temp_5": 481, "7networks_lh_default_temp_6": 481, "7networks_lh_default_temp_7": 481, "7networks_lh_default_temp_8": 481, "7networks_lh_default_temp_9": 481, "7networks_lh_dorsattn_fef_1": 481, "7networks_lh_dorsattn_fef_2": 481, "7networks_lh_dorsattn_fef_3": 481, "7networks_lh_dorsattn_fef_4": 481, "7networks_lh_dorsattn_post_1": 481, "7networks_lh_dorsattn_post_10": 481, "7networks_lh_dorsattn_post_11": 481, "7networks_lh_dorsattn_post_12": 481, "7networks_lh_dorsattn_post_13": 481, "7networks_lh_dorsattn_post_14": 481, "7networks_lh_dorsattn_post_15": 481, "7networks_lh_dorsattn_post_16": 481, "7networks_lh_dorsattn_post_17": 481, "7networks_lh_dorsattn_post_2": 481, "7networks_lh_dorsattn_post_3": 481, "7networks_lh_dorsattn_post_4": 481, "7networks_lh_dorsattn_post_5": 481, "7networks_lh_dorsattn_post_6": 481, "7networks_lh_dorsattn_post_7": 481, "7networks_lh_dorsattn_post_8": 481, "7networks_lh_dorsattn_post_9": 481, "7networks_lh_dorsattn_prcv_1": 481, "7networks_lh_dorsattn_prcv_2": 481, "7networks_lh_limbic_ofc_1": 481, "7networks_lh_limbic_ofc_2": 481, "7networks_lh_limbic_ofc_3": 481, "7networks_lh_limbic_ofc_4": 481, "7networks_lh_limbic_ofc_5": 481, "7networks_lh_limbic_temppole_1": 481, "7networks_lh_limbic_temppole_2": 481, "7networks_lh_limbic_temppole_3": 481, "7networks_lh_limbic_temppole_4": 481, "7networks_lh_limbic_temppole_5": 481, "7networks_lh_limbic_temppole_6": 481, "7networks_lh_limbic_temppole_7": 481, "7networks_lh_limbic_temppole_8": 481, "7networks_lh_salventattn_froperins_1": 481, "7networks_lh_salventattn_froperins_2": 481, "7networks_lh_salventattn_froperins_3": 481, "7networks_lh_salventattn_froperins_4": 481, "7networks_lh_salventattn_froperins_5": 481, "7networks_lh_salventattn_froperins_6": 481, "7networks_lh_salventattn_froperins_7": 481, "7networks_lh_salventattn_froperins_8": 481, "7networks_lh_salventattn_froperins_9": 481, "7networks_lh_salventattn_med_1": 481, "7networks_lh_salventattn_med_2": 481, "7networks_lh_salventattn_med_3": 481, "7networks_lh_salventattn_med_4": 481, "7networks_lh_salventattn_med_5": 481, "7networks_lh_salventattn_med_6": 481, "7networks_lh_salventattn_med_7": 481, "7networks_lh_salventattn_paroper_1": 481, "7networks_lh_salventattn_paroper_2": 481, "7networks_lh_salventattn_paroper_3": 481, "7networks_lh_salventattn_paroper_4": 481, "7networks_lh_salventattn_pfcl_1": 481, "7networks_lh_salventattn_tempocc_1": 481, "7networks_lh_sommot_1": 481, "7networks_lh_sommot_10": 481, "7networks_lh_sommot_11": 481, "7networks_lh_sommot_12": 481, "7networks_lh_sommot_13": 481, "7networks_lh_sommot_14": 481, "7networks_lh_sommot_15": 481, "7networks_lh_sommot_16": 481, "7networks_lh_sommot_17": 481, "7networks_lh_sommot_18": 481, "7networks_lh_sommot_19": 481, "7networks_lh_sommot_2": 481, "7networks_lh_sommot_20": 481, "7networks_lh_sommot_21": 481, "7networks_lh_sommot_22": 481, "7networks_lh_sommot_23": 481, "7networks_lh_sommot_24": 481, "7networks_lh_sommot_25": 481, "7networks_lh_sommot_26": 481, "7networks_lh_sommot_27": 481, "7networks_lh_sommot_28": 481, "7networks_lh_sommot_29": 481, "7networks_lh_sommot_3": 481, "7networks_lh_sommot_30": 481, "7networks_lh_sommot_31": 481, "7networks_lh_sommot_32": 481, "7networks_lh_sommot_33": 481, "7networks_lh_sommot_34": 481, "7networks_lh_sommot_35": 481, "7networks_lh_sommot_36": 481, "7networks_lh_sommot_37": 481, "7networks_lh_sommot_4": 481, "7networks_lh_sommot_5": 481, "7networks_lh_sommot_6": 481, "7networks_lh_sommot_7": 481, "7networks_lh_sommot_8": 481, "7networks_lh_sommot_9": 481, "7networks_lh_vis_1": 481, "7networks_lh_vis_10": 481, "7networks_lh_vis_11": 481, "7networks_lh_vis_12": 481, "7networks_lh_vis_13": 481, "7networks_lh_vis_14": 481, "7networks_lh_vis_15": 481, "7networks_lh_vis_16": 481, "7networks_lh_vis_17": 481, "7networks_lh_vis_18": 481, "7networks_lh_vis_19": 481, "7networks_lh_vis_2": 481, "7networks_lh_vis_20": 481, "7networks_lh_vis_21": 481, "7networks_lh_vis_22": 481, "7networks_lh_vis_23": 481, "7networks_lh_vis_24": 481, "7networks_lh_vis_25": 481, "7networks_lh_vis_26": 481, "7networks_lh_vis_27": 481, "7networks_lh_vis_28": 481, "7networks_lh_vis_29": 481, "7networks_lh_vis_3": 481, "7networks_lh_vis_30": 481, "7networks_lh_vis_31": 481, "7networks_lh_vis_4": 481, "7networks_lh_vis_5": 481, "7networks_lh_vis_6": 481, "7networks_lh_vis_7": 481, "7networks_lh_vis_8": 481, "7networks_lh_vis_9": 481, "7networks_rh_cont_cing_1": 481, "7networks_rh_cont_cing_2": 481, "7networks_rh_cont_par_1": 481, "7networks_rh_cont_par_2": 481, "7networks_rh_cont_par_3": 481, "7networks_rh_cont_par_4": 481, "7networks_rh_cont_par_5": 481, "7networks_rh_cont_par_6": 481, "7networks_rh_cont_pcun_1": 481, "7networks_rh_cont_pcun_2": 481, "7networks_rh_cont_pfcl_1": 481, "7networks_rh_cont_pfcl_10": 481, "7networks_rh_cont_pfcl_11": 481, "7networks_rh_cont_pfcl_12": 481, "7networks_rh_cont_pfcl_13": 481, "7networks_rh_cont_pfcl_14": 481, "7networks_rh_cont_pfcl_15": 481, "7networks_rh_cont_pfcl_2": 481, "7networks_rh_cont_pfcl_3": 481, "7networks_rh_cont_pfcl_4": 481, "7networks_rh_cont_pfcl_5": 481, "7networks_rh_cont_pfcl_6": 481, "7networks_rh_cont_pfcl_7": 481, "7networks_rh_cont_pfcl_8": 481, "7networks_rh_cont_pfcl_9": 481, "7networks_rh_cont_pfcmp_1": 481, "7networks_rh_cont_pfcmp_2": 481, "7networks_rh_cont_pfcv_1": 481, "7networks_rh_cont_temp_1": 481, "7networks_rh_cont_temp_2": 481, "7networks_rh_default_par_1": 481, "7networks_rh_default_par_2": 481, "7networks_rh_default_par_3": 481, "7networks_rh_default_par_4": 481, "7networks_rh_default_par_5": 481, "7networks_rh_default_pcunpcc_1": 481, "7networks_rh_default_pcunpcc_2": 481, "7networks_rh_default_pcunpcc_3": 481, "7networks_rh_default_pcunpcc_4": 481, "7networks_rh_default_pcunpcc_5": 481, "7networks_rh_default_pcunpcc_6": 481, "7networks_rh_default_pcunpcc_7": 481, "7networks_rh_default_pcunpcc_8": 481, "7networks_rh_default_pcunpcc_9": 481, "7networks_rh_default_pfcdpfcm_1": 481, "7networks_rh_default_pfcdpfcm_10": 481, "7networks_rh_default_pfcdpfcm_11": 481, "7networks_rh_default_pfcdpfcm_12": 481, "7networks_rh_default_pfcdpfcm_13": 481, "7networks_rh_default_pfcdpfcm_2": 481, "7networks_rh_default_pfcdpfcm_3": 481, "7networks_rh_default_pfcdpfcm_4": 481, "7networks_rh_default_pfcdpfcm_5": 481, "7networks_rh_default_pfcdpfcm_6": 481, "7networks_rh_default_pfcdpfcm_7": 481, "7networks_rh_default_pfcdpfcm_8": 481, "7networks_rh_default_pfcdpfcm_9": 481, "7networks_rh_default_pfcv_1": 481, "7networks_rh_default_pfcv_2": 481, "7networks_rh_default_pfcv_3": 481, "7networks_rh_default_pfcv_4": 481, "7networks_rh_default_temp_1": 481, "7networks_rh_default_temp_2": 481, "7networks_rh_default_temp_3": 481, "7networks_rh_default_temp_4": 481, "7networks_rh_default_temp_5": 481, "7networks_rh_default_temp_6": 481, "7networks_rh_default_temp_7": 481, "7networks_rh_default_temp_8": 481, "7networks_rh_dorsattn_fef_1": 481, "7networks_rh_dorsattn_fef_2": 481, "7networks_rh_dorsattn_fef_3": 481, "7networks_rh_dorsattn_post_1": 481, "7networks_rh_dorsattn_post_10": 481, "7networks_rh_dorsattn_post_11": 481, "7networks_rh_dorsattn_post_12": 481, "7networks_rh_dorsattn_post_13": 481, "7networks_rh_dorsattn_post_14": 481, "7networks_rh_dorsattn_post_15": 481, "7networks_rh_dorsattn_post_16": 481, "7networks_rh_dorsattn_post_17": 481, "7networks_rh_dorsattn_post_18": 481, "7networks_rh_dorsattn_post_19": 481, "7networks_rh_dorsattn_post_2": 481, "7networks_rh_dorsattn_post_3": 481, "7networks_rh_dorsattn_post_4": 481, "7networks_rh_dorsattn_post_5": 481, "7networks_rh_dorsattn_post_6": 481, "7networks_rh_dorsattn_post_7": 481, "7networks_rh_dorsattn_post_8": 481, "7networks_rh_dorsattn_post_9": 481, "7networks_rh_dorsattn_prcv_1": 481, "7networks_rh_limbic_ofc_1": 481, "7networks_rh_limbic_ofc_2": 481, "7networks_rh_limbic_ofc_3": 481, "7networks_rh_limbic_ofc_4": 481, "7networks_rh_limbic_ofc_5": 481, "7networks_rh_limbic_ofc_6": 481, "7networks_rh_limbic_temppole_1": 481, "7networks_rh_limbic_temppole_2": 481, "7networks_rh_limbic_temppole_3": 481, "7networks_rh_limbic_temppole_4": 481, "7networks_rh_limbic_temppole_5": 481, "7networks_rh_limbic_temppole_6": 481, "7networks_rh_limbic_temppole_7": 481, "7networks_rh_salventattn_froperins_1": 481, "7networks_rh_salventattn_froperins_2": 481, "7networks_rh_salventattn_froperins_3": 481, "7networks_rh_salventattn_froperins_4": 481, "7networks_rh_salventattn_froperins_5": 481, "7networks_rh_salventattn_froperins_6": 481, "7networks_rh_salventattn_froperins_7": 481, "7networks_rh_salventattn_froperins_8": 481, "7networks_rh_salventattn_med_1": 481, "7networks_rh_salventattn_med_2": 481, "7networks_rh_salventattn_med_3": 481, "7networks_rh_salventattn_med_4": 481, "7networks_rh_salventattn_med_5": 481, "7networks_rh_salventattn_med_6": 481, "7networks_rh_salventattn_med_7": 481, "7networks_rh_salventattn_med_8": 481, "7networks_rh_salventattn_pfcl_1": 481, "7networks_rh_salventattn_prc_1": 481, "7networks_rh_salventattn_tempoccpar_1": 481, "7networks_rh_salventattn_tempoccpar_2": 481, "7networks_rh_salventattn_tempoccpar_3": 481, "7networks_rh_salventattn_tempoccpar_4": 481, "7networks_rh_salventattn_tempoccpar_5": 481, "7networks_rh_salventattn_tempoccpar_6": 481, "7networks_rh_salventattn_tempoccpar_7": 481, "7networks_rh_sommot_1": 481, "7networks_rh_sommot_10": 481, "7networks_rh_sommot_11": 481, "7networks_rh_sommot_12": 481, "7networks_rh_sommot_13": 481, "7networks_rh_sommot_14": 481, "7networks_rh_sommot_15": 481, "7networks_rh_sommot_16": 481, "7networks_rh_sommot_17": 481, "7networks_rh_sommot_18": 481, "7networks_rh_sommot_19": 481, "7networks_rh_sommot_2": 481, "7networks_rh_sommot_20": 481, "7networks_rh_sommot_21": 481, "7networks_rh_sommot_22": 481, "7networks_rh_sommot_23": 481, "7networks_rh_sommot_24": 481, "7networks_rh_sommot_25": 481, "7networks_rh_sommot_26": 481, "7networks_rh_sommot_27": 481, "7networks_rh_sommot_28": 481, "7networks_rh_sommot_29": 481, "7networks_rh_sommot_3": 481, "7networks_rh_sommot_30": 481, "7networks_rh_sommot_31": 481, "7networks_rh_sommot_32": 481, "7networks_rh_sommot_33": 481, "7networks_rh_sommot_34": 481, "7networks_rh_sommot_35": 481, "7networks_rh_sommot_36": 481, "7networks_rh_sommot_37": 481, "7networks_rh_sommot_38": 481, "7networks_rh_sommot_39": 481, "7networks_rh_sommot_4": 481, "7networks_rh_sommot_40": 481, "7networks_rh_sommot_5": 481, "7networks_rh_sommot_6": 481, "7networks_rh_sommot_7": 481, "7networks_rh_sommot_8": 481, "7networks_rh_sommot_9": 481, "7networks_rh_vis_1": 481, "7networks_rh_vis_10": 481, "7networks_rh_vis_11": 481, "7networks_rh_vis_12": 481, "7networks_rh_vis_13": 481, "7networks_rh_vis_14": 481, "7networks_rh_vis_15": 481, "7networks_rh_vis_16": 481, "7networks_rh_vis_17": 481, "7networks_rh_vis_18": 481, "7networks_rh_vis_19": 481, "7networks_rh_vis_2": 481, "7networks_rh_vis_20": 481, "7networks_rh_vis_21": 481, "7networks_rh_vis_22": 481, "7networks_rh_vis_23": 481, "7networks_rh_vis_24": 481, "7networks_rh_vis_25": 481, "7networks_rh_vis_26": 481, "7networks_rh_vis_27": 481, "7networks_rh_vis_28": 481, "7networks_rh_vis_29": 481, "7networks_rh_vis_3": 481, "7networks_rh_vis_30": 481, "7networks_rh_vis_4": 481, "7networks_rh_vis_5": 481, "7networks_rh_vis_6": 481, "7networks_rh_vis_7": 481, "7networks_rh_vis_8": 481, "7networks_rh_vis_9": 481, "8": [3, 6, 10, 11, 15, 18, 22, 25, 26, 32, 35, 36, 37, 40, 41, 43, 46, 48, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 64, 65, 68, 72, 73, 74, 77, 78, 81, 82, 88, 91, 93, 94, 95, 98, 99, 103, 104, 106, 107, 108, 112, 114, 115, 118, 121, 125, 130, 132, 136, 141, 149, 151, 153, 159, 161, 169, 177, 199, 202, 205, 211, 212, 213, 214, 215, 217, 226, 236, 249, 252, 256, 262, 271, 273, 282, 284, 290, 295, 296, 297, 298, 299, 300, 305, 306, 307, 308, 310, 311, 312, 313, 327, 340, 344, 368, 371, 372, 373, 374, 375, 376, 377, 378, 384, 387, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 455, 457, 466, 467, 469, 480, 481, 496, 497, 499], "80": [35, 44, 50, 57, 59, 65, 67, 68, 73, 74, 86, 104, 107, 118, 165, 166, 179, 222, 225, 257, 344, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 425, 428, 436, 437, 438, 442, 443, 444, 446, 447, 479, 480, 481], "800": [35, 36, 89, 111, 194, 238, 259, 327, 340, 429, 467], "800631000800836": 77, "8009": 101, "801": [35, 101], "801208": 44, "802": 35, "80211262e": 3, "803": 35, "80300757e": 3, "8037": 28, "804": 35, "805": [35, 118], "80551936": 72, "806": 35, "806378e": 51, "807": 35, "8073593073593073": 36, "80743851e": 3, "80791775e": 3, "808": 35, "8081": 111, "809": 35, "80908497e": 3, "81": [35, 65, 73, 123, 163, 199, 480, 481], "810": [35, 62, 497], "81063183e": 3, "811": [35, 57], "8119": [118, 206, 219, 253], "812": 35, "813": 35, "81308": 35, "814": 35, "81420313e": 3, "815": 35, "816": 35, "81648314e": 3, "81662848e": 3, "817": 35, "81704619e": 3, "817e": 56, "818": 35, "819": 35, "81932257e": 3, "82": [32, 34, 35, 65, 72, 73, 91, 93, 104, 199, 480, 481], "820": [33, 35, 48, 497], "821": 35, "822": [35, 68, 75, 136, 163, 497], "82245477e": 3, "823": [35, 101], "824": 35, "825": 35, "825038": 6, "8256": 36, "825802": 51, "826": 35, "82604902e": 3, "82612920e": 3, "82637437e": 3, "827": 35, "82792507e": 3, "828": [35, 65, 73, 115, 497], "82887526e": 3, "829": [35, 105], "82972691e": 3, "82a": 35, "83": [34, 35, 64, 65, 73, 74, 93, 118, 122, 163, 185, 217, 342, 391, 480, 481], "830": 35, "831": 35, "832": [35, 481], "83202969e": 3, "833": 35, "8339": [157, 163], "834": 35, "835": 35, "836": [12, 29, 35, 497], "836576": 35, "837": [6, 35, 64], "838": 35, "83881949e": 3, "839": 35, "839058": 35, "839163": 65, "8397156": 0, "84": [35, 64, 73, 93, 103, 104, 118, 347, 368, 480, 481], "840": 35, "84045985e": 3, "841": 35, "841e": 56, "842": 35, "842804": 35, "842x": [106, 118, 391], "843": 35, "843388": 59, "843833": 65, "844": 35, "844892": 59, "844e": 56, "845": [35, 88, 99, 497], "846": 35, "84618006e": 3, "84699235e": 3, "847": 35, "848": 35, "84814620e": 3, "8493": 36, "85": [6, 35, 42, 46, 50, 65, 72, 73, 93, 136, 163, 385, 388, 480, 481], "850138": 6, "8518518518518519": 3, "85358101e": 3, "853608": 65, "854": [75, 497], "855": 73, "85517935e": 3, "856": [113, 115, 497], "85681333e": 3, "857585": 65, "8576": 93, "858": [101, 481], "85903553e": 3, "86": [34, 35, 72, 73, 93, 480, 481], "860": [11, 29, 497], "86328125": 111, "864": [6, 41, 65], "8648": 36, "86601133e": 3, "86829623e": 3, "86a": 35, "87": [32, 34, 35, 64, 65, 73, 74, 93, 118, 480, 481], "87113666e": 3, "87166606e": 3, "872": [34, 48, 497], "872285": 65, "87324a": 11, "874f": 58, "875": [118, 136, 163, 165], "8765432098765432": 3, "876886": 59, "8773632": 6, "878390": 59, "88": [35, 72, 73, 83, 91, 93, 106, 118, 391, 480, 481, 497], "881": [114, 115, 481, 497], "88146212e": 3, "881e": 56, "8824": 93, "88299e": [33, 35, 42, 46], "883419": 65, "885": 35, "886": 3, "88629248": 72, "88679990e": 3, "8870": 36, "88746520e": 3, "88767299e": 3, "887969": 65, "888": 481, "8881": 36, "88828983e": 3, "88973312": 42, "89": [32, 34, 35, 64, 73, 74, 79, 104, 109, 480, 481], "890": [39, 48, 497], "890005": 65, "89028788e": 3, "89090781e": 3, "891": [64, 118, 165, 480], "89178120e": 3, "89275285e": 3, "89305453e": 3, "893538": 65, "89375256e": 3, "895": 114, "8952": 93, "895898": 53, "895e": 56, "896": 481, "8960": 93, "8964": 73, "89711256e": 3, "897183": 65, "897215e": 51, "898": [107, 115, 497], "89844103e": 3, "899": [22, 29, 497], "8990": 179, "8a": [6, 35, 64, 65, 73, 480], "8b": [6, 64, 73, 480], "8c": [64, 480], "8min": 46, "8mm": 104, "9": [3, 6, 8, 11, 16, 26, 29, 35, 37, 38, 39, 41, 42, 43, 44, 45, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64, 65, 69, 71, 72, 73, 74, 88, 90, 91, 92, 93, 94, 96, 101, 102, 103, 104, 106, 107, 108, 109, 110, 115, 118, 120, 121, 122, 125, 131, 145, 154, 156, 161, 165, 185, 206, 207, 226, 228, 231, 259, 268, 269, 282, 284, 314, 318, 327, 336, 342, 358, 364, 367, 368, 369, 372, 373, 374, 375, 376, 377, 378, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 429, 444, 446, 447, 457, 463, 466, 480, 481, 495, 497, 499], "90": [10, 23, 32, 34, 35, 50, 53, 56, 59, 66, 73, 79, 81, 93, 105, 107, 118, 136, 149, 157, 163, 164, 169, 368, 369, 444, 446, 447, 450, 470, 480, 481, 495], "900": [41, 48, 65, 151, 163, 194, 238, 259, 481, 497], "90073724e": 3, "901255": 6, "90210325e": 3, "90249145e": 3, "907": 481, "9073798500881832": 41, "9098039215686274": 111, "91": [2, 32, 35, 59, 64, 73, 79, 93, 104, 157, 163, 249, 260, 480, 481], "911755": 35, "91200": 481, "91328": 481, "9136": 93, "91413078e": 3, "91435": 481, "915": [43, 44, 118, 224, 281], "91520": 481, "915996": 35, "9177489177489176": 36, "92": [32, 34, 35, 65, 72, 73, 79, 93, 106, 118, 391, 480, 481], "920": [52, 62, 497], "921": 107, "922085": 59, "923589": 59, "923981": 65, "924582": 65, "92527865e": 3, "92570189e": 3, "9259259259259259": 3, "92616950e": 3, "92748525e": 3, "92871680e": 3, "929": [43, 44, 118, 224, 281], "929461": 65, "93": [32, 34, 35, 65, 73, 79, 93, 253, 480, 481], "9306112": 72, "93192207e": 3, "932": 105, "933": [2, 8, 497], "93381912e": 3, "934": 75, "93483733e": 3, "935": [118, 217], "935719": 35, "936": [65, 73, 87, 99, 497], "93773049e": 3, "93848848e": 3, "94": [19, 32, 35, 64, 73, 79, 93, 104, 109, 110, 276, 277, 480, 481], "94178305e": 3, "942": [55, 62, 497], "94203988e": 3, "9444444444444444": 31, "945": [31, 48, 118, 217, 497], "945328": 6, "946": 481, "947": 481, "947193": 6, "94920704": 4, "95": [27, 32, 35, 72, 73, 93, 95, 157, 163, 191, 202, 317, 319, 320, 480, 481], "95125504": 72, "952826": 6, "953": [29, 103, 115, 118, 198, 497], "954": [26, 58, 497], "95405681e": 3, "95494566e": 3, "955": [35, 48, 497], "95649412e": 3, "956513": 53, "959472": 65, "959582": 35, "96": [32, 34, 35, 64, 72, 73, 74, 86, 93, 113, 234, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 436, 437, 443, 480, 481], "960": 481, "9600": 93, "96233932e": 3, "9629629629629629": 3, "96432067e": 3, "96442e": [33, 35], "965": [118, 198], "967": 481, "9673": [118, 369], "9678": [118, 369], "968": [118, 217], "9690082644628099": 36, "97": [32, 35, 47, 73, 90, 93, 480, 481], "970": 481, "972": [6, 64, 73], "9728": 93, "973": 481, "974": 480, "974948": 35, "9753086419753086": 3, "977336e": 51, "978": [118, 319, 320], "98": [32, 34, 35, 64, 72, 73, 77, 89, 93, 95, 104, 112, 118, 157, 163, 185, 342, 391, 480, 481], "980": [118, 217], "980278": 65, "98107": 0, "981215": 35, "9816": 93, "98227085e": 3, "983": [43, 48, 481, 497], "984": 35, "9841": 104, "985": 48, "98654852e": 3, "98671413e": 3, "98717382e": 3, "98727743e": 3, "98745456e": 3, "9876543209876543": 3, "988": 118, "98919823e": 3, "98951196e": 3, "99": [5, 6, 7, 8, 13, 14, 15, 18, 20, 25, 28, 29, 32, 34, 35, 48, 60, 61, 62, 64, 65, 66, 69, 73, 74, 75, 78, 80, 81, 82, 83, 84, 86, 90, 92, 95, 98, 99, 110, 112, 115, 157, 163, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 480, 481, 497], "99015629e": 3, "9902": 11, "99186325e": 3, "992": [25, 29, 45, 48, 118, 497], "99246080": 3, "994713": 35, "997198": 51, "9984": 93, "999": 481, "999189": 65, "999324": 59, "999999998": 46, "999999999": 42, "9a": [35, 64, 65, 73, 480], "9b76y": [208, 254], "9cabe068089e791ef0c5fe930fc20e30": 3, "A": [0, 1, 5, 6, 7, 8, 12, 16, 17, 22, 26, 31, 43, 45, 46, 50, 51, 52, 59, 61, 64, 66, 70, 73, 74, 77, 81, 82, 86, 88, 91, 100, 101, 103, 106, 109, 110, 111, 115, 116, 117, 118, 121, 128, 132, 143, 144, 148, 151, 157, 163, 165, 167, 168, 170, 172, 174, 175, 176, 178, 179, 180, 182, 185, 187, 188, 190, 191, 192, 198, 199, 201, 202, 204, 205, 206, 208, 209, 217, 223, 226, 229, 230, 231, 232, 233, 234, 236, 239, 240, 241, 250, 252, 253, 258, 260, 261, 262, 265, 266, 267, 269, 271, 282, 283, 284, 285, 287, 293, 294, 301, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 318, 319, 320, 323, 326, 327, 330, 336, 340, 345, 346, 352, 357, 358, 364, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 402, 403, 405, 407, 423, 424, 426, 429, 434, 438, 440, 442, 444, 445, 448, 450, 454, 455, 456, 457, 458, 459, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 495, 497, 498], "AND": [96, 121, 130, 163], "And": [7, 27, 44, 105, 165, 180, 188, 191], "As": [3, 6, 16, 36, 38, 41, 47, 52, 55, 57, 68, 81, 83, 94, 96, 97, 101, 104, 107, 111, 120, 127, 151, 163, 165, 166, 168, 170, 171, 172, 176, 178, 179, 181, 184, 190, 234, 330, 368, 369, 372, 373, 374], "At": [35, 58, 64, 66, 67, 70, 73, 79, 82, 93, 104, 113, 169, 187, 188, 340, 342, 480], "BY": [129, 163, 221], "Be": [171, 172, 179, 241, 314, 468], "But": [52, 77, 82, 101, 169, 178, 181, 192], "By": [3, 15, 16, 27, 31, 35, 37, 41, 61, 66, 71, 72, 105, 155, 163, 172, 179, 188, 192, 229, 240, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 301, 305, 306, 307, 308, 310, 311, 312, 313, 327, 340, 346, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 427, 428, 434, 437, 439, 441, 442, 443, 446, 450, 455, 456, 457, 460, 495], "For": [3, 4, 6, 7, 10, 15, 16, 20, 24, 25, 26, 31, 32, 34, 36, 37, 38, 39, 41, 43, 44, 45, 46, 51, 53, 54, 57, 66, 68, 70, 72, 74, 77, 81, 82, 88, 91, 93, 101, 103, 105, 107, 109, 111, 113, 120, 121, 134, 148, 158, 163, 164, 165, 166, 168, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 184, 185, 187, 188, 190, 191, 192, 197, 198, 199, 200, 201, 204, 205, 207, 208, 210, 217, 218, 219, 220, 224, 225, 226, 228, 232, 233, 236, 237, 239, 246, 249, 250, 251, 255, 256, 259, 260, 262, 263, 270, 272, 273, 279, 282, 284, 286, 289, 291, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 310, 311, 312, 313, 317, 318, 319, 320, 327, 334, 342, 356, 357, 365, 367, 368, 369, 372, 373, 375, 376, 378, 380, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 424, 428, 434, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 455, 457, 458, 459, 465, 466, 467, 468, 479, 481, 495, 496], "If": [0, 2, 10, 11, 15, 16, 25, 26, 36, 37, 38, 43, 44, 45, 46, 50, 51, 52, 54, 55, 56, 57, 58, 59, 61, 64, 65, 71, 72, 73, 77, 81, 86, 88, 91, 93, 94, 96, 101, 102, 103, 104, 106, 107, 108, 109, 110, 113, 116, 120, 121, 129, 148, 155, 156, 158, 163, 164, 165, 169, 171, 172, 174, 176, 178, 179, 181, 185, 187, 188, 190, 191, 192, 198, 219, 239, 240, 241, 243, 245, 246, 247, 248, 251, 252, 253, 255, 256, 258, 260, 263, 268, 272, 273, 276, 277, 280, 282, 284, 286, 287, 291, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 323, 324, 327, 330, 334, 336, 340, 341, 342, 343, 344, 345, 346, 350, 351, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 466, 467, 468, 469, 473, 474, 475, 479, 495, 496], "In": [0, 3, 4, 6, 10, 13, 15, 16, 17, 23, 24, 25, 26, 34, 35, 38, 40, 41, 42, 43, 45, 50, 51, 52, 53, 54, 55, 56, 57, 61, 67, 68, 69, 74, 81, 83, 88, 89, 91, 93, 96, 97, 98, 102, 103, 105, 111, 113, 114, 118, 119, 120, 121, 127, 128, 134, 143, 148, 158, 160, 163, 165, 166, 168, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 183, 185, 187, 188, 189, 190, 191, 192, 198, 199, 202, 219, 225, 228, 229, 239, 246, 249, 251, 255, 256, 257, 282, 284, 305, 306, 307, 308, 310, 312, 313, 314, 317, 319, 320, 327, 329, 334, 343, 360, 361, 362, 364, 385, 391, 429, 430, 441, 454, 463, 466, 479, 495, 496], "Ins": 54, "It": [2, 3, 6, 10, 15, 16, 17, 23, 36, 39, 41, 44, 45, 47, 51, 54, 64, 65, 67, 68, 72, 73, 77, 79, 83, 91, 96, 101, 103, 104, 111, 113, 119, 120, 121, 125, 134, 135, 138, 141, 142, 144, 155, 156, 157, 158, 163, 164, 165, 166, 171, 172, 174, 175, 176, 178, 179, 181, 185, 186, 187, 188, 190, 191, 192, 202, 203, 222, 225, 226, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 496], "Its": [165, 173, 178, 309, 320, 343, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 427, 467], "NOS": 247, "NOT": 121, "No": [17, 59, 65, 68, 77, 79, 93, 97, 109, 112, 178, 179, 361, 480], "Not": [3, 68, 73, 164, 255, 256, 364, 382, 395, 454, 456], "ON": 52, "ONE": [118, 187], "OR": 121, "Of": 70, "On": [3, 14, 38, 52, 55, 56, 59, 61, 65, 68, 70, 77, 79, 107, 118, 149, 163, 164, 166, 178, 187, 191, 192, 240, 243], "One": [3, 6, 15, 36, 37, 41, 51, 52, 59, 81, 156, 163, 165, 166, 171, 172, 176, 178, 180, 181, 183, 184, 188, 190, 192, 301, 327, 360, 369, 373, 376, 460], "Or": [31, 35, 64, 70, 73, 104, 113, 121, 171, 495], "Such": [96, 165, 365], "That": [37, 38, 43, 44, 45, 50, 54, 55, 56, 57, 58, 59, 61, 64, 71, 91, 93, 94, 96, 101, 102, 103, 106, 107, 108, 109, 110, 120, 155, 163, 185, 314, 318, 327, 329, 334], "The": [0, 2, 3, 6, 7, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 30, 31, 32, 34, 35, 36, 38, 41, 43, 44, 45, 46, 48, 50, 51, 52, 54, 55, 57, 58, 61, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 77, 78, 79, 81, 82, 83, 86, 87, 90, 91, 92, 93, 94, 95, 96, 98, 101, 102, 103, 104, 105, 106, 108, 110, 111, 113, 114, 116, 118, 120, 121, 123, 124, 125, 127, 128, 130, 132, 134, 135, 136, 138, 139, 140, 141, 142, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 178, 179, 180, 181, 184, 185, 187, 188, 189, 190, 191, 194, 196, 197, 198, 199, 201, 202, 204, 205, 207, 210, 217, 218, 219, 220, 221, 222, 227, 228, 229, 231, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 268, 269, 271, 272, 273, 275, 276, 277, 279, 280, 283, 284, 285, 286, 287, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 329, 330, 334, 335, 336, 340, 341, 342, 343, 344, 345, 346, 347, 351, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 479, 480, 481, 485, 486, 490, 491, 495, 496, 497, 498], "Their": 224, "Then": [2, 3, 15, 32, 43, 45, 50, 53, 54, 58, 65, 66, 96, 97, 114, 164, 169, 171, 173, 174, 179, 188, 191, 192, 239, 241, 273, 454], "There": [0, 4, 22, 68, 168, 171, 172, 173, 179, 185, 249, 257, 317, 319, 320, 341, 368, 464, 495], "These": [3, 4, 6, 16, 26, 41, 58, 61, 63, 74, 76, 79, 81, 83, 91, 96, 112, 116, 120, 134, 151, 154, 155, 158, 163, 164, 171, 174, 175, 177, 178, 179, 183, 184, 185, 188, 192, 198, 199, 208, 219, 220, 234, 254, 265, 267, 303, 312, 313, 489, 495, 496], "To": [0, 2, 3, 4, 6, 16, 22, 23, 24, 33, 35, 39, 42, 43, 45, 46, 51, 52, 53, 54, 55, 57, 58, 65, 68, 69, 71, 78, 79, 81, 82, 89, 91, 96, 101, 104, 105, 108, 111, 113, 120, 121, 132, 143, 148, 160, 163, 164, 165, 166, 168, 171, 172, 173, 174, 176, 179, 180, 181, 184, 188, 190, 191, 282, 317, 319, 320, 336, 344, 356, 368, 437, 441, 442, 443, 444, 446, 447, 450, 454, 466, 467, 495], "Will": [247, 282, 288, 289, 327, 334, 349, 360, 361, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430, 438, 447, 451], "With": [10, 15, 34, 59, 80, 91, 174, 178, 181, 240, 243, 323, 369, 469, 478, 496], "_": [32, 38, 47, 50, 52, 54, 60, 65, 73, 77, 79, 82, 96, 103, 106, 109, 110, 127, 156, 160, 163, 179, 188, 287, 330, 367], "__": [103, 239, 240, 241, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 454, 455, 456, 457], "______________________________________________________________________": 32, "________________________________________________________________________________": [35, 51, 52, 53, 55, 56, 59, 61], "__________________________________________________________run_glm": 35, "________________________________________________________ward_tre": 52, "____________________________________________________estimator_fit": 52, "_________________________________________________compute_load": [51, 53], "_______________________________________________filter_and_extract": [52, 55, 56, 59, 61], "______________________________________________explained_vari": 51, "_____________________________________________dict_learning_onlin": [51, 53], "__________________________________________high_variance_confound": 56, "_________________________________recursive_neighbor_agglomer": 52, "__all__": 179, "__class__": 47, "__init__": [179, 239, 240, 241, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 327, 340, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 454, 455, 456, 457, 465, 471, 472, 473, 474, 475], "__init___": 318, "__name__": 47, "__sklearn_tags__": [135, 163], "__version__": 179, "_adjust_screening_percentil": [143, 163], "_agglom": 52, "_apply_cluster_size_threshold": [159, 163], "_ax": 19, "_ball_sample_loc": 25, "_base": [36, 51], "_build": 179, "_cach": [50, 51], "_check_mask_shap": 179, "_check_mask_valu": 179, "_check_second_level_input": [160, 163], "_cmap_d": 13, "_col_filters_available_on_serv": 282, "_column": 181, "_compute_facecolors_matplotlib": [129, 163], "_compute_load": [51, 53], "_data": [21, 51, 53], "_default_time_out": [282, 284], "_design": 367, "_dict_learn": [51, 53], "_empty_filt": 282, "_estimator_fit": 52, "_explained_vari": 51, "_extractionfunctor": [52, 55, 56, 59, 61], "_fastica": [94, 108], "_full_brain_info": [129, 163], "_gamma_difference_hrf": [160, 163], "_get_clusters_t": [130, 163], "_get_mask_volum": [143, 163], "_get_vertexcolor": [129, 163], "_get_voxelwise_model_attribut": [156, 163], "_hemi": [7, 473, 474], "_label": 69, "_latest": 188, "_line_sample_loc": 25, "_method": 61, "_mix_colormap": [129, 163], "_neurosynth_fetch_words_url": [160, 163], "_neurovault_base_url": [160, 163], "_one_mesh_info": [129, 163], "_plot_surf_matplotlib": [129, 163], "_projector": [14, 15, 17, 54, 55, 61, 65, 132, 158, 163], "_r": 13, "_region_id_nam": [132, 163], "_safe_cach": [127, 163], "_safe_get_data": [143, 163], "_sample_locations_between_surfac": 25, "_scale": 202, "_scan": 181, "_set_output": 55, "_slicer": [2, 4, 10, 11, 16, 17, 18, 27, 38, 51, 71, 83, 91, 94, 96, 98, 101, 158, 163], "_space": 330, "_stat": 367, "_statmap": 367, "_tag": 366, "_task": 330, "_test": 179, "_univariate_select": 114, "_update_submatrix": 178, "_util": [25, 40, 43, 47, 52, 60, 69, 70, 80, 93, 109, 110, 114, 128, 130, 138, 157, 160, 163, 178, 179, 188], "_valid": 179, "_validate_shap": 179, "_version": 188, "_voxel": 181, "_vx": 188, "_z_map": 73, "a4c8868ab5c651b8594da6f3204": 42, "a_model001_task002_cope011_tstat1": 112, "a_nice_funct": 179, "aal": [132, 140, 163, 194, 238, 249], "aal3": 249, "ab": [32, 46, 47, 56, 61, 83, 86, 106, 107, 108, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 430, 436, 437, 443], "abadi": [0, 136, 138, 141, 148, 163], "abb4588": 118, "abbrevi": 190, "abdulrahman": [103, 118], "aben": [0, 151, 163], "aberr": 80, "abid": [6, 118, 142, 163, 179, 194, 247], "abl": [32, 34, 39, 132, 163, 179, 188, 365, 444, 446, 447, 495], "abnorm": [118, 217], "about": [0, 2, 3, 6, 15, 20, 25, 35, 36, 51, 52, 64, 65, 66, 70, 73, 78, 80, 81, 96, 103, 104, 105, 113, 120, 121, 127, 128, 129, 132, 135, 136, 151, 159, 163, 164, 168, 171, 172, 174, 176, 178, 179, 180, 181, 185, 186, 187, 190, 197, 198, 200, 202, 204, 207, 208, 218, 225, 226, 233, 236, 251, 260, 262, 271, 273, 279, 286, 295, 296, 297, 298, 299, 300, 327, 340, 369, 372, 373, 374, 426, 468, 479, 480], "abov": [2, 3, 4, 6, 15, 22, 26, 35, 41, 45, 50, 51, 52, 59, 68, 88, 96, 98, 103, 121, 130, 132, 133, 143, 161, 163, 165, 166, 168, 170, 171, 176, 178, 179, 180, 185, 188, 190, 191, 192, 218, 233, 249, 271, 273, 295, 296, 299, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 323, 327, 329, 331, 332, 333, 334, 337, 338, 339, 345, 360, 361, 368, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 396, 397, 398, 399, 400, 401, 403, 405, 406, 408, 410, 412, 414, 416, 418, 428, 429, 430, 434, 436, 437, 438, 441, 442, 443, 444, 446, 447, 449, 451, 453, 455, 457, 468, 469], "abraham": [0, 54, 102, 118, 122, 123, 125, 126, 136, 138, 141, 151, 163, 169, 202, 368, 369, 457], "abrupt": 192, "absenc": [181, 188, 460], "absent": [6, 72], "absolut": [45, 46, 54, 61, 114, 151, 163, 176, 178, 179, 221, 264, 274, 287, 344, 349, 364, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 425, 428, 430, 436, 437, 438, 441, 442, 443, 444, 446, 447, 450, 451, 453, 495], "absolute_path": 112, "abstract": [119, 371], "abstract_knowledge_regparam": 107, "ac": [2, 6, 22, 72, 118, 217, 219, 220, 233, 234, 235, 260, 288], "academi": [118, 176, 187, 198, 202, 233, 260, 309, 369], "acc": 21, "acceler": [118, 227], "accept": [2, 3, 50, 67, 127, 128, 132, 134, 142, 143, 145, 148, 149, 151, 154, 155, 156, 157, 158, 159, 160, 163, 179, 180, 190, 198, 258, 340, 342, 343, 365, 372, 373, 374, 382, 383, 384, 385, 386, 387, 388, 428, 438, 440, 441, 442, 443, 450, 452, 463, 464], "access": [6, 35, 38, 41, 51, 59, 64, 65, 68, 73, 111, 118, 120, 128, 135, 158, 163, 164, 166, 170, 178, 179, 180, 189, 190, 192, 216, 248, 249, 252, 257, 258, 259, 262, 263, 279, 288, 290, 315, 405, 485, 498], "accident": 188, "accommod": [130, 148, 163], "accord": [6, 11, 44, 47, 65, 103, 127, 143, 144, 145, 148, 154, 156, 160, 163, 169, 176, 179, 209, 227, 237, 240, 247, 249, 251, 253, 255, 256, 258, 259, 261, 262, 263, 303, 307, 310, 311, 314, 345, 365, 372, 375, 379, 391, 438, 439, 444, 446, 447, 451, 453, 456, 457, 466, 468, 469, 495], "accordingli": [16, 158, 163, 365], "account": [6, 35, 64, 68, 70, 73, 78, 96, 113, 135, 163, 164, 176, 179, 188, 192, 198, 220, 368, 372, 373, 375, 376, 378, 457, 480], "accumul": [113, 495], "accur": [26, 52, 61, 68, 70, 151, 159, 163, 176, 180, 181], "accuraci": [31, 32, 33, 34, 35, 37, 39, 44, 54, 101, 102, 155, 163, 175, 176, 185, 187, 305, 307, 309, 310], "accuracy_scor": [44, 54], "accuracy_to_print": 44, "acharya": 0, "achiev": [10, 16, 58, 72, 95, 171, 178, 187, 191, 192, 243], "acompcor_combin": 368, "acoustic_processing_regparam": 107, "acq": 330, "acquir": [3, 41, 68, 69, 120, 181, 185, 187, 221, 234, 235], "acquis": 192, "acquisit": [3, 6, 32, 34, 66, 68, 72, 104, 111, 118, 176, 181, 185, 202, 234, 277, 334, 429], "across": [3, 6, 16, 17, 35, 41, 50, 53, 54, 59, 67, 68, 72, 82, 96, 101, 102, 103, 107, 111, 113, 114, 118, 128, 133, 151, 157, 163, 164, 165, 166, 169, 170, 171, 172, 174, 176, 181, 183, 185, 197, 202, 210, 217, 225, 233, 239, 247, 257, 290, 305, 306, 307, 308, 310, 311, 312, 313, 363, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 429, 455, 457, 479, 480, 495], "act": [31, 36, 144, 163, 185, 245, 246, 249, 251, 253, 255, 256, 258, 259, 261, 262, 263, 372, 375, 379, 393], "action": [34, 36, 42, 51, 181, 188, 204, 277], "action_perception_regparam": 107, "action_regparam": 107, "activ": [6, 7, 13, 15, 16, 17, 26, 32, 34, 43, 44, 52, 65, 68, 70, 71, 72, 73, 78, 79, 81, 82, 83, 103, 113, 118, 120, 165, 166, 169, 170, 171, 175, 176, 178, 179, 180, 181, 184, 185, 187, 188, 192, 198, 199, 202, 204, 209, 223, 224, 225, 233, 241, 247, 249, 257, 260, 281, 302, 322, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 425, 457, 459, 496], "activation_level_regparam": 107, "activation_regparam": 107, "activation_threshold": 425, "active_maintenance_regparam": 107, "active_retrieval_regparam": 107, "actual": [3, 6, 45, 68, 69, 72, 79, 88, 109, 129, 163, 178, 179, 181, 185, 190, 228, 343, 467], "acuity_regparam": 107, "ad": [15, 16, 21, 22, 32, 43, 69, 70, 74, 86, 127, 128, 129, 132, 133, 134, 135, 144, 145, 155, 157, 158, 159, 160, 163, 164, 174, 178, 180, 188, 239, 240, 241, 245, 246, 251, 254, 256, 259, 261, 262, 263, 267, 268, 269, 273, 274, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 330, 336, 340, 342, 344, 345, 349, 354, 355, 356, 357, 359, 360, 361, 364, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 384, 387, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 429, 430, 433, 434, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 453, 454, 455, 456, 457, 459, 466, 467, 469, 471, 472, 473, 474, 475, 476, 479, 498], "adam": [103, 118], "adapt": [13, 52, 67, 98, 120, 132, 163, 164, 169, 172, 179, 327, 336, 368, 426, 480, 481], "adaptation_regparam": 107, "adaptive_control_regparam": 107, "add": [10, 15, 16, 21, 26, 33, 43, 44, 53, 59, 66, 70, 82, 106, 121, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 141, 143, 144, 146, 148, 151, 156, 160, 163, 169, 171, 174, 176, 179, 185, 188, 241, 282, 284, 303, 345, 364, 368, 374, 377, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 449, 451, 453, 468, 469, 495], "add_contour": [10, 15, 19, 26, 132, 144, 151, 163, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 495], "add_edg": [393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 495], "add_graph": [132, 163, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418], "add_mark": [43, 58, 64, 71, 103, 140, 146, 149, 163, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 495], "add_object_bound": [392, 394, 395], "add_overlai": [53, 125, 134, 163, 169, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 434, 436, 437, 441, 442, 443, 495], "add_patch": 43, "add_reg": [64, 66, 180, 334], "add_reg_nam": [64, 66, 334], "add_subplot": [64, 93], "addiction_regparam": 107, "addit": [0, 15, 41, 58, 66, 68, 71, 81, 88, 91, 104, 120, 121, 123, 128, 143, 148, 154, 163, 171, 174, 178, 180, 185, 187, 188, 199, 247, 249, 271, 281, 305, 306, 307, 308, 312, 313, 315, 334, 342, 365, 368, 369, 371, 374, 377, 454, 455, 456, 465, 495], "addition": [15, 16, 26, 61, 71, 157, 163, 179, 184, 188, 191, 192, 208, 218, 330, 391, 466], "address": [118, 181, 184, 185, 188, 342, 391], "adelsberg": [118, 227], "adelsheim": [118, 201, 250], "adelstein": 118, "adequ": [77, 205], "adhd": [63, 75, 105, 111, 116, 151, 160, 163, 165, 180, 194, 248, 327, 334, 371, 378, 404, 443, 465, 481, 492, 497], "adhd200": [200, 248], "adhd200_40sub_preprocess": [200, 248], "adhd40_0010064": 105, "adhd40_0010128": 111, "adhd40_0021019": 111, "adhd40_0023008": 111, "adhd40_0023012": 111, "adhd_dataset": [12, 64, 180], "adher": 179, "adjac": [39, 151, 163, 471], "adjacency_matrix": [23, 50, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430, 449], "adjust": [13, 68, 69, 127, 132, 146, 163, 369, 393, 404, 407], "admittedli": 168, "adolesc": [118, 187], "adopt": [176, 185], "adriana": [118, 227], "adult": [51, 54, 102, 118, 151, 163, 186, 202, 207, 228, 268], "adulthood": [118, 219], "advanc": [0, 58, 114, 115, 118, 165, 171, 173, 174, 179, 180, 187, 191, 240, 271, 305, 307, 308, 352, 371, 377, 429, 443, 497, 498], "advantag": [41, 45, 46, 70, 178, 192], "advertis": [131, 163], "advic": [171, 198], "advis": [108, 179, 190, 273, 385, 455], "aesthet": [132, 163], "affect": [66, 74, 105, 132, 157, 163, 164, 181, 185, 188], "affect_perception_regparam": 107, "affect_recognition_regparam": 107, "affili": 179, "affin": [26, 43, 50, 59, 72, 85, 91, 95, 96, 99, 105, 111, 116, 142, 157, 163, 185, 189, 192, 217, 305, 306, 307, 308, 310, 311, 312, 313, 327, 340, 345, 346, 347, 348, 350, 355, 356, 357, 358, 359, 360, 361, 363, 372, 373, 374, 375, 376, 377, 383, 384, 385, 386, 387, 388, 389, 392, 394, 395, 448, 455, 457, 460, 463, 464, 479, 483, 497], "affine_": [374, 377], "afni": [160, 163], "after": [24, 30, 36, 38, 41, 43, 48, 53, 59, 68, 79, 96, 101, 103, 109, 116, 130, 159, 163, 164, 168, 169, 171, 176, 178, 179, 181, 185, 188, 191, 192, 202, 243, 271, 305, 306, 307, 308, 312, 327, 335, 336, 345, 349, 352, 357, 368, 369, 373, 376, 377, 379, 457, 458, 460, 461, 465, 466, 467, 497], "afterward": [2, 178, 188], "ag": [46, 49, 62, 80, 100, 115, 116, 118, 151, 163, 165, 172, 173, 177, 184, 185, 186, 187, 200, 202, 207, 217, 219, 228, 239, 247, 257, 268, 279, 291, 305, 306, 307, 308, 310, 311, 371, 376, 430, 440, 448, 480, 497], "again": [16, 52, 73, 93, 105, 107, 111, 120, 179, 184, 187, 282, 284], "against": [65, 111, 171, 180, 185, 282, 342, 391, 426, 440], "age_at_scan": 247, "age_clust": 77, "age_design": 77, "age_group": 268, "age_pr": 45, "age_stat": 77, "age_test": [45, 46], "age_train": [45, 46], "ageeffectongm": 77, "ageeffectongm_contrast": 77, "ageeffectongm_corrdesign": 77, "ageeffectongm_design": 77, "ageeffectongm_mask": 77, "ageeffectongm_report": 77, "ageeffectongm_stat": 77, "ageeffectongm_statmap": 77, "agenc": 0, "agency_regparam": 107, "agencyenterpris": 0, "agent": 69, "agg": 448, "aggarw": [0, 131, 132, 133, 134, 163], "agglom": [52, 151, 163, 168, 455], "agglomer": [52, 118, 185, 186, 307, 308, 454, 455, 456, 462], "agglomerativeclust": [52, 455], "aggreg": [33, 42, 61, 154, 163, 173, 185, 201, 250, 307, 308], "aggres": 369, "aggress": 369, "agre": [45, 77, 179, 198, 228, 279, 286, 340, 342], "agreeableness_regparam": 107, "agreement": [45, 65, 77, 198, 232, 426], "ahern": [118, 217], "ahmad": [0, 127, 128, 129, 157, 158, 160, 163], "ai": 0, "aic": 317, "aid": [118, 211, 212, 213, 214, 215, 236, 262, 290], "aim": [31, 36, 41, 50, 138, 163, 171, 179, 185, 310, 311], "aina": [0, 136, 163], "air": 0, "aka": [6, 68, 168, 181, 322], "aki": [43, 44, 118, 148, 163, 224, 281], "akshai": [148, 163], "al": [3, 23, 26, 30, 33, 39, 41, 47, 48, 51, 52, 54, 59, 61, 68, 74, 78, 101, 102, 103, 106, 116, 121, 143, 148, 163, 165, 168, 171, 172, 173, 176, 177, 178, 187, 192, 197, 198, 199, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 239, 240, 243, 247, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 271, 277, 279, 280, 281, 282, 284, 290, 305, 308, 311, 312, 313, 319, 320, 322, 345, 347, 352, 364, 368, 369, 371, 374, 377, 391, 419, 426, 443, 448, 456, 457, 462, 469, 481, 497], "alan": [118, 202, 219, 251], "alberto": [118, 368, 369], "aldo": [78, 118, 322], "alecia": [61, 118, 209, 230, 265, 266], "alex": [0, 59, 118, 145, 148, 163, 166, 176, 219, 369], "alexa": [118, 207, 268], "alexand": [61, 118, 197, 209, 230, 231, 247, 259, 265, 266, 426], "alexandr": [0, 47, 52, 54, 102, 118, 122, 123, 125, 126, 129, 132, 136, 138, 141, 148, 150, 151, 163, 165, 169, 177, 187, 225, 240, 257, 457], "alexi": [0, 118, 127, 128, 148, 151, 156, 158, 160, 163, 227], "alff": 247, "algorithm": [51, 52, 91, 94, 96, 106, 108, 109, 120, 165, 168, 169, 170, 173, 174, 176, 179, 185, 192, 193, 195, 202, 228, 240, 243, 312, 313, 351, 386, 388, 454, 457, 459, 470], "alia": [239, 240, 241, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 454, 455, 456, 457, 495], "alias": [127, 163], "align": [54, 59, 93, 102, 130, 135, 163, 309, 361, 363, 436], "alik": [205, 229, 252], "alisha": [0, 129, 163], "aliz": 104, "all": [3, 4, 9, 13, 16, 20, 24, 26, 29, 32, 35, 37, 38, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 66, 68, 70, 71, 72, 73, 74, 78, 79, 81, 82, 89, 91, 93, 94, 96, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 118, 120, 121, 127, 128, 129, 130, 132, 133, 134, 135, 136, 141, 148, 151, 154, 156, 158, 159, 163, 164, 165, 166, 168, 169, 170, 172, 174, 176, 178, 179, 181, 183, 184, 187, 188, 190, 191, 192, 197, 198, 200, 201, 202, 208, 210, 220, 226, 232, 240, 241, 243, 247, 248, 250, 251, 252, 268, 276, 277, 280, 282, 286, 287, 291, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 322, 327, 330, 336, 340, 341, 342, 343, 345, 346, 351, 356, 357, 360, 361, 362, 364, 365, 366, 367, 368, 369, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 386, 388, 389, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 426, 428, 430, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 453, 455, 457, 460, 467, 469, 479, 493, 495, 496, 497], "all_categori": 32, "all_coef_": [310, 311], "allel": [118, 198], "allen": [22, 26, 118, 143, 163, 194, 250, 490], "allen2011": 22, "allen_rsn_2011": 22, "allevi": 96, "allow": [10, 21, 25, 26, 39, 43, 51, 54, 61, 66, 91, 102, 103, 104, 106, 113, 120, 128, 129, 130, 132, 133, 134, 142, 144, 149, 151, 155, 156, 159, 160, 163, 164, 165, 171, 178, 179, 180, 182, 185, 188, 192, 198, 239, 240, 241, 269, 277, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 330, 340, 342, 365, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 433, 440, 454, 455, 456, 457], "allow_overlap": [55, 56, 57, 61, 373, 376, 378, 380, 457, 481], "almli": [118, 202, 219], "almost": [25, 42, 52, 108, 178, 192], "alon": [179, 181, 495], "along": [25, 27, 50, 68, 86, 88, 103, 105, 113, 128, 151, 156, 163, 164, 170, 177, 179, 185, 191, 192, 310, 311, 327, 335, 353, 360, 362, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 392, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 406, 407, 408, 410, 412, 414, 416, 418, 421, 422, 426, 427, 428, 434, 437, 441, 442, 443, 457, 458, 469, 479, 495], "alongsid": 17, "alpha": [6, 16, 24, 25, 26, 39, 42, 43, 47, 51, 53, 60, 69, 77, 78, 79, 83, 113, 133, 160, 165, 170, 177, 181, 240, 241, 243, 310, 311, 313, 317, 319, 320, 322, 326, 327, 340, 343, 364, 367, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 430, 436, 437, 439, 441, 442, 443, 444, 446, 447, 467, 495], "alpha_": [60, 241], "alpha_cmap": [53, 169], "alpha_grids_": [310, 311], "alpha_i": [393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 436, 437, 443], "alpha_max": [310, 311], "alpha_min": [310, 311], "alphabet": [118, 151, 163, 188, 190], "alreadi": [22, 35, 36, 52, 73, 91, 96, 104, 107, 111, 112, 113, 121, 132, 133, 151, 158, 163, 169, 171, 172, 179, 187, 192, 282, 284, 340, 342, 361, 391, 457], "also": [0, 3, 4, 7, 12, 13, 15, 16, 17, 18, 23, 24, 26, 31, 33, 36, 41, 45, 46, 52, 53, 54, 58, 59, 65, 66, 68, 69, 71, 72, 74, 77, 79, 81, 88, 91, 93, 95, 96, 97, 101, 111, 113, 120, 121, 125, 127, 129, 130, 132, 134, 135, 136, 141, 142, 144, 148, 151, 154, 157, 158, 160, 163, 164, 165, 166, 169, 170, 172, 173, 174, 176, 178, 179, 180, 181, 183, 184, 185, 187, 188, 190, 191, 192, 193, 194, 205, 206, 210, 217, 225, 226, 234, 238, 241, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 301, 305, 306, 307, 308, 310, 311, 312, 313, 327, 329, 330, 334, 340, 352, 356, 357, 360, 365, 366, 368, 374, 377, 382, 383, 384, 385, 386, 387, 388, 428, 429, 434, 435, 437, 441, 442, 443, 444, 446, 447, 455, 458, 459, 463, 464, 467, 490, 495, 498], "alter": [16, 155, 163], "altern": [6, 7, 10, 17, 21, 23, 55, 57, 61, 68, 73, 167, 168, 176, 185, 192, 234, 317, 319, 320, 391, 498], "although": [35, 42, 52, 81, 172, 185, 188, 192], "altman": [134, 163, 426], "altruism_regparam": 107, "altruistic_motivation_regparam": 107, "alumit": [3, 33, 34, 40, 101, 118, 218, 271], "alveolar_regparam": 107, "alwai": [17, 103, 164, 171, 174, 178, 179, 181, 192, 249, 311, 317, 319, 320, 324, 368, 450, 451, 453, 460, 495], "alzheim": 228, "am": [0, 118, 206, 253], "amadeu": [0, 141, 163], "amag": 0, "amal": [118, 219], "amanda": [118, 229, 258], "amax": 109, "ambi": 247, "ambidextr": 247, "america": 309, "american": [118, 217], "ami": 118, "amodal_representation_regparam": 107, "among": [6, 81, 128, 163, 181, 185, 251, 305, 306, 307, 308], "amongst": [391, 495], "amount": [0, 25, 36, 38, 53, 68, 97, 111, 172, 174, 179, 186, 187, 188, 240, 282, 305, 306, 307, 308, 310, 311, 312, 313, 327, 340, 346, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 455, 456, 457], "amp": [480, 481], "amplifi": 178, "amplitud": [66, 69, 247, 329, 334, 449, 451, 453], "amsterdam": 0, "amunt": [118, 220], "amygdala": [232, 267], "an": [0, 2, 3, 4, 7, 12, 15, 16, 17, 21, 23, 26, 27, 31, 32, 33, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 57, 58, 59, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 75, 77, 81, 82, 85, 86, 90, 91, 93, 94, 96, 99, 103, 104, 105, 106, 107, 109, 111, 113, 116, 118, 120, 121, 127, 128, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 143, 144, 145, 146, 148, 151, 153, 154, 155, 156, 158, 160, 163, 164, 165, 166, 167, 169, 172, 173, 174, 175, 176, 177, 178, 180, 182, 183, 184, 185, 187, 188, 190, 191, 192, 194, 197, 198, 199, 204, 205, 217, 219, 225, 228, 235, 238, 239, 240, 241, 245, 249, 252, 253, 257, 263, 268, 277, 278, 280, 282, 284, 287, 294, 298, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 323, 327, 334, 336, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 465, 467, 469, 470, 473, 477, 478, 479, 483, 490, 497, 498], "ana": [0, 151, 155, 157, 163], "anaconda": [148, 163, 496], "anal": [52, 118, 456, 462], "analog": 96, "analogical_reasoning_regparam": 107, "analogy_regparam": 107, "analu": [145, 148, 163], "analys": [70, 103, 105, 118, 129, 163, 171, 176, 180, 181, 182, 184, 185, 186, 192, 209, 223, 496], "analysi": [1, 7, 8, 16, 30, 31, 33, 35, 36, 41, 48, 51, 52, 66, 68, 69, 72, 73, 74, 75, 79, 80, 81, 82, 84, 97, 101, 115, 118, 119, 121, 132, 134, 163, 165, 166, 170, 172, 175, 177, 182, 183, 184, 185, 186, 187, 191, 192, 206, 208, 209, 210, 217, 223, 230, 235, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 268, 269, 271, 274, 276, 277, 278, 284, 287, 288, 293, 294, 304, 305, 309, 312, 314, 318, 319, 320, 327, 330, 340, 342, 343, 350, 352, 355, 356, 357, 358, 364, 367, 368, 369, 370, 371, 377, 391, 404, 419, 426, 428, 431, 432, 436, 437, 443, 447, 448, 457, 465, 466, 475, 480, 484, 492, 496, 497, 498], "analyz": [3, 35, 41, 52, 63, 64, 70, 73, 76, 96, 104, 113, 116, 170, 179, 181, 183, 185, 187, 189, 202, 220, 391, 480, 482, 498], "anand": [0, 132, 163], "anat": [3, 4, 6, 16, 17, 18, 19, 27, 31, 32, 34, 45, 46, 96, 120, 171, 190, 192, 204, 218, 234, 235, 237, 263, 271, 275, 277, 288, 289, 365], "anat_combin": [368, 369], "anat_img": [145, 163, 428], "anat_separ": 368, "anatom": [3, 4, 6, 12, 18, 19, 23, 27, 32, 34, 38, 65, 96, 106, 118, 121, 144, 163, 169, 176, 185, 192, 199, 202, 206, 208, 218, 219, 229, 232, 237, 247, 249, 251, 253, 261, 268, 271, 272, 275, 277, 368, 428, 437, 441, 443, 450, 466, 495], "anatomi": [6, 45, 70, 77, 204, 232, 263], "anatomical_imag": [344, 356], "anats_all_subject": 4, "anats_all_subjects_smooth": 4, "anchor": 86, "anchoredoffsetbox": [392, 394, 395], "anchoredsizebar": [392, 394, 395], "anchoring_regparam": 107, "ander": [23, 118, 206, 211, 212, 213, 214, 215, 217, 253, 261, 290], "anderson": [106, 118, 197, 198, 247, 391], "andi": 7, "andr": [52, 118, 171, 187, 456, 462], "andrea": [51, 118, 165, 170, 239, 312], "andrew": [118, 166, 197, 201, 205, 219, 247, 250, 252], "andr\u00e9": [0, 118, 151, 163, 173, 187, 206, 253, 307, 308], "angel": 0, "angela": [118, 201, 233, 250, 260], "angl": [25, 86, 128, 163, 185, 313, 444, 446, 447], "angular": [93, 481], "anhedonia_regparam": 107, "ani": [4, 6, 26, 52, 59, 61, 72, 77, 83, 103, 107, 108, 120, 127, 152, 154, 160, 163, 164, 166, 168, 171, 172, 175, 176, 178, 179, 180, 181, 185, 188, 192, 247, 271, 282, 284, 347, 352, 356, 362, 365, 366, 367, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 436, 437, 438, 441, 443, 457, 461, 466, 469, 475, 479, 495, 496], "anim": [118, 202, 219], "animacy_decision_regparam": 107, "animacy_perception_regparam": 107, "anish": [118, 368], "anisotrop": 192, "anisotropi": 96, "ann": [0, 61, 118, 128, 163, 209, 230, 265, 266], "anna": [118, 227], "annot": [96, 119, 129, 132, 143, 154, 163, 206, 226, 231, 236, 259, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 430, 434, 436, 437, 439, 441, 442, 443, 444, 445, 446, 447, 450, 453, 477, 495, 498], "annual": [118, 198, 202], "annunzio": 0, "anoth": [6, 10, 42, 68, 70, 81, 91, 111, 140, 145, 163, 171, 178, 179, 181, 187, 188, 189, 190, 239, 310, 311, 346, 347, 366, 465, 495], "anova": [3, 30, 37, 41, 45, 48, 109, 110, 116, 143, 163, 175, 176, 177, 185, 192, 271, 305, 306, 307, 308, 310, 311, 352, 443, 448, 450, 497, 498], "anova_lda": 101, "anova_svc": 101, "answer": [3, 496], "ant": [54, 481], "anterior": [72, 93, 118, 145, 163, 199, 217, 265, 267, 359, 444, 446, 447], "antialias": 19, "anticorrel": [54, 118, 369], "antoinett": [74, 118, 204, 210, 277], "anton": [118, 210], "antonia": [118, 208, 254], "antonio": [118, 204, 277], "anupriya": [0, 132, 163], "anwar": [118, 227], "anylin": 0, "anymor": [127, 135, 160, 163, 188, 369], "anyon": [164, 496], "anyth": [7, 114, 121, 178, 179], "ap": 365, "apart": [88, 143, 163, 168, 169, 178], "apertur": [26, 118], "apertureneuro": [26, 118], "api": [10, 47, 107, 108, 112, 125, 126, 127, 128, 129, 130, 131, 134, 135, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 151, 153, 154, 155, 156, 157, 158, 159, 160, 164, 188, 437, 454, 456, 498], "apo": [118, 198], "app": [65, 164, 232, 330], "appear": [37, 57, 72, 73, 91, 164, 194, 238, 327, 340, 342, 431, 466, 490], "append": [35, 36, 41, 43, 44, 47, 53, 54, 56, 74, 103, 107, 111, 112, 113, 114, 164, 169, 473, 474], "appli": [3, 26, 31, 33, 34, 45, 47, 53, 59, 64, 68, 70, 81, 82, 91, 94, 96, 101, 103, 104, 105, 107, 108, 119, 121, 127, 129, 130, 131, 132, 139, 141, 145, 148, 151, 156, 157, 158, 163, 165, 166, 167, 170, 172, 173, 174, 176, 180, 184, 185, 189, 198, 202, 205, 217, 232, 239, 247, 282, 304, 305, 306, 307, 308, 309, 312, 313, 318, 327, 340, 342, 343, 344, 345, 356, 362, 364, 365, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 428, 436, 437, 438, 441, 442, 443, 444, 446, 447, 450, 451, 453, 454, 455, 456, 457, 459, 460, 461, 466, 467, 468, 469, 479, 481, 486, 498], "applic": [44, 118, 156, 163, 166, 172, 178, 186, 202, 364, 374, 391, 460, 461, 467, 495, 496, 498], "apply_along_axi": [444, 446, 447], "apply_mask": [27, 134, 163, 191, 374, 377], "appreci": [179, 190], "approach": [26, 35, 36, 41, 43, 44, 50, 51, 52, 68, 70, 113, 118, 148, 163, 167, 170, 171, 172, 176, 178, 179, 180, 181, 186, 309, 345, 368, 369, 469, 479, 480, 496, 498], "appropri": [23, 103, 111, 114, 118, 130, 131, 163, 179, 192, 202, 219, 249, 268, 327, 329, 334, 367, 426, 427, 437, 458], "approv": [179, 198], "approxim": [52, 72, 73, 118, 168, 202, 319, 320, 367, 456, 462], "apr": [118, 229, 258], "april": [118, 128, 131, 140, 143, 149, 150, 159, 163, 198, 217, 279], "ar": [0, 3, 4, 6, 7, 10, 11, 13, 15, 16, 17, 20, 21, 22, 23, 24, 25, 28, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 76, 79, 80, 81, 82, 83, 86, 88, 89, 91, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 118, 120, 121, 125, 127, 128, 129, 130, 131, 132, 134, 141, 143, 144, 146, 148, 149, 151, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 184, 185, 187, 188, 190, 191, 192, 198, 199, 200, 202, 204, 205, 207, 208, 219, 220, 222, 226, 228, 231, 234, 235, 236, 237, 239, 240, 241, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 301, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 323, 324, 327, 329, 330, 334, 336, 340, 342, 344, 345, 349, 351, 357, 359, 360, 361, 362, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 463, 464, 465, 466, 467, 469, 477, 478, 479, 481, 489, 495, 496], "ar1": [6, 26, 35, 64, 68, 70, 73, 113, 327, 330, 336, 480], "ar3": [68, 336], "arami": 0, "arang": [23, 32, 34, 35, 36, 41, 51, 54, 66, 68, 96], "arbitrari": [6, 23, 67, 78, 164, 181, 188, 309, 340, 342], "arbitrarili": [6, 234, 311], "archi": 74, "architectur": [118, 168, 233, 260], "archiv": 228, "arctanh": 58, "area": [0, 24, 34, 41, 82, 96, 118, 156, 163, 169, 171, 176, 180, 181, 185, 186, 187, 192, 210, 211, 212, 213, 214, 215, 216, 217, 224, 262, 272, 290, 349, 379, 380, 392, 394, 395, 404, 407, 444, 445, 446, 447, 453], "area_left": [211, 212, 213, 214, 215, 216, 290], "area_right": [211, 212, 213, 214, 215, 216, 290], "aren": [130, 163, 190], "arg": [16, 55, 81, 305, 306, 307, 308], "argmax": 12, "argsort": [37, 45, 46, 107], "arguabl": 68, "argument": [2, 6, 10, 11, 15, 16, 17, 18, 46, 50, 51, 58, 61, 69, 71, 82, 91, 96, 113, 121, 128, 129, 130, 132, 134, 140, 141, 143, 144, 145, 146, 148, 149, 151, 154, 155, 156, 157, 158, 160, 163, 171, 172, 174, 176, 178, 179, 180, 184, 188, 190, 243, 247, 255, 256, 282, 292, 305, 306, 307, 308, 309, 330, 340, 342, 345, 356, 359, 367, 369, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 445, 446, 447, 451, 454, 456, 457, 469, 475, 495], "ariel": [0, 136, 148, 163], "aris": [96, 118, 181, 202, 368, 369], "arithmet": [118, 187], "arm": [155, 163], "armi": 192, "armodel": 318, "aroma": [118, 166, 368, 369], "around": [15, 25, 26, 36, 86, 88, 147, 149, 163, 178, 179, 241, 342, 349, 360, 378, 392, 394, 395, 405, 473, 474, 479], "arr": [61, 362], "arrai": [3, 5, 7, 10, 21, 23, 28, 35, 36, 38, 41, 43, 44, 45, 46, 47, 51, 52, 53, 54, 56, 58, 59, 61, 64, 69, 73, 81, 86, 89, 91, 96, 101, 109, 111, 119, 131, 132, 133, 134, 143, 145, 151, 154, 157, 158, 160, 163, 165, 168, 169, 171, 174, 178, 189, 190, 192, 197, 239, 240, 241, 243, 245, 246, 254, 279, 280, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 345, 350, 352, 360, 361, 364, 367, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 386, 388, 390, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 428, 430, 434, 436, 439, 443, 444, 445, 446, 447, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 467, 469, 470, 471, 472, 473, 477, 478, 479, 487], "arrang": [118, 149, 163, 402, 404, 407, 421, 428, 434, 437, 441, 442, 443, 495], "array_lik": [327, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430, 439], "arriv": 170, "arrmean": 61, "arrow": [73, 480], "art": [154, 163, 172, 305, 306, 307, 308], "arthur": [0, 51, 118, 126, 136, 138, 141, 163, 170, 208, 254, 313], "articl": [44, 118, 164, 178, 187, 201, 210, 251], "articul": 171, "artifact": [59, 118, 164, 192, 345, 368, 369, 469], "artifici": [118, 202], "arvind": [118, 201, 250], "arxiv": [118, 165, 171, 178, 187, 240, 243], "asanyarrai": 61, "asarrai": [7, 25, 44, 54, 107, 316, 321, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 457], "ascend": [156, 163, 355], "ascertain": 180, "asd": 197, "ashbi": [103, 118, 171], "ask": [67, 121, 148, 151, 163, 179, 188, 226], "aspect": [13, 41, 43, 147, 163, 174, 178, 192, 327, 340, 368, 467], "asperg": 247, "assembl": [82, 119, 181], "assert": 32, "assess": [71, 80, 118, 171, 178, 179, 180, 200, 247, 309, 391, 426, 429], "assign": [16, 88, 96, 134, 163, 168, 169, 181, 209, 220, 255, 256, 265, 267, 457, 458, 462, 479], "assist": [118, 165, 239], "associ": [6, 15, 50, 74, 77, 79, 109, 113, 127, 132, 163, 171, 176, 179, 181, 184, 185, 249, 287, 309, 315, 342, 368, 369, 372, 375, 379, 391, 426, 466, 479], "assum": [65, 66, 68, 73, 74, 80, 81, 103, 104, 113, 176, 181, 188, 246, 287, 317, 318, 319, 320, 324, 327, 340, 342, 345, 360, 363, 390, 440, 468, 469], "assumpt": [81, 176, 181, 225], "assur": 65, "astyp": [12, 24, 38, 43, 44, 46, 47, 69, 77, 86, 96, 111], "asv": [164, 179], "asv_benchmark": 179, "aswin": [0, 129, 163], "asym": [202, 251], "asymmetr": [202, 219, 251, 272, 273, 295, 296, 297, 298, 299, 300], "asymmetri": [118, 202], "atla": [9, 12, 24, 29, 49, 51, 53, 62, 85, 93, 96, 99, 111, 116, 118, 121, 126, 128, 129, 130, 132, 134, 139, 140, 142, 143, 144, 145, 148, 151, 154, 155, 156, 157, 159, 160, 163, 167, 169, 178, 185, 191, 192, 194, 238, 239, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 266, 268, 272, 293, 294, 352, 364, 371, 372, 373, 375, 376, 379, 404, 423, 424, 425, 429, 430, 440, 441, 442, 443, 446, 448, 449, 450, 451, 453, 457, 458, 459, 460, 461, 465, 475, 479, 481, 490, 491, 495, 497, 498], "atlantiqu": 0, "atlas": [6, 10, 11, 23, 49, 61, 62, 65, 116, 118, 121, 130, 131, 134, 155, 156, 163, 164, 167, 170, 181, 185, 190, 191, 192, 202, 205, 208, 217, 219, 226, 238, 239, 254, 255, 256, 263, 268, 347, 350, 358, 371, 372, 373, 375, 376, 403, 405, 423, 424, 430, 437, 441, 442, 445, 446, 448, 449, 450, 452, 466, 479, 481, 490, 497, 498], "atlas_data": [12, 21], "atlas_filenam": [21, 55, 57, 59, 166], "atlas_ho_filenam": 11, "atlas_img": [12, 56, 111], "atlas_ju_filenam": 11, "atlas_nam": [255, 256], "atlas_network": 89, "atlas_path": 111, "atlas_region_coord": [56, 166], "atlas_typ": [22, 134, 163, 179, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "atlas_valu": 12, "atlas_yeo": 88, "atlas_yeo_2011": 88, "atlasread": [6, 65, 466], "atleast_2d": [104, 114], "atom": [179, 185], "atr": 224, "att": 54, "attempt": [151, 163, 164, 330], "attent": [77, 80, 334], "attila": [118, 219], "attribut": [38, 47, 51, 52, 53, 86, 91, 120, 121, 129, 130, 132, 134, 135, 146, 155, 156, 158, 159, 160, 163, 165, 168, 169, 170, 176, 190, 192, 202, 205, 229, 239, 240, 241, 248, 252, 254, 257, 268, 270, 271, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 293, 305, 306, 307, 308, 309, 310, 311, 312, 313, 317, 318, 319, 320, 327, 340, 347, 355, 368, 369, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 444, 445, 446, 447, 453, 454, 455, 456, 457, 472, 473, 474, 475, 476, 478, 479], "attributeerror": [147, 163], "au": 41, "auc": [32, 34, 41, 171, 185], "aud": 54, "audio": [67, 68, 70], "audio_comput": [67, 68, 70, 222, 480], "audio_left_hand_button_press": [67, 68, 70, 222, 480], "audio_right_hand_button_press": [67, 68, 70, 222, 480], "audiominusvisu": 70, "auditori": [6, 26, 68, 70, 74, 79, 109, 181, 194, 204, 267, 276, 277, 283, 288], "auditory_bold": 6, "auditory_calculation_vs_baselin": 283, "auditory_imag": 26, "audrei": [0, 127, 163], "august": [118, 141, 148, 160, 163], "aureli": [118, 210], "austin": 0, "australia": 0, "australian": [106, 118, 391], "austria": 0, "author": [0, 118, 164, 178, 179, 188], "autism": [118, 197, 247], "auto": [13, 35, 41, 64, 70, 73, 113, 141, 156, 163, 192, 312, 313, 355, 372, 373, 374, 375, 376, 377, 378, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 428, 430, 434, 436, 437, 438, 439, 441, 442, 443, 444, 446, 447, 449, 450, 452, 457, 479, 480], "auto_exampl": [8, 29, 48, 62, 75, 84, 99, 115, 117, 186, 188, 451], "auto_examples_jupyt": 116, "auto_examples_python": 116, "auto_fit": 440, "auto_resampl": [72, 346], "autocorrel": 3, "autoformatt": 179, "autogener": 467, "autom": [118, 121, 188, 199, 202, 217, 226, 236, 249, 262, 282, 284], "automat": [3, 16, 17, 20, 23, 26, 35, 36, 43, 57, 91, 94, 96, 105, 113, 118, 119, 125, 128, 141, 143, 155, 156, 157, 163, 164, 169, 176, 179, 188, 190, 191, 192, 206, 247, 253, 261, 305, 306, 307, 308, 310, 311, 312, 313, 327, 340, 342, 360, 367, 373, 376, 391, 402, 422, 428, 434, 437, 441, 442, 443, 450, 455, 457, 459, 467, 481, 484, 495], "autoregress": [68, 327, 336], "aux": 46, "aux_fil": [59, 105], "avail": [0, 3, 16, 24, 25, 33, 42, 45, 65, 70, 77, 82, 91, 96, 104, 110, 113, 121, 128, 151, 156, 163, 166, 169, 172, 174, 178, 179, 180, 184, 187, 188, 198, 202, 208, 220, 223, 228, 231, 234, 235, 237, 247, 251, 254, 260, 268, 277, 279, 281, 286, 310, 311, 330, 380, 440, 445, 479, 480, 496, 498], "avenir": 0, "averag": [6, 10, 25, 32, 39, 52, 54, 71, 96, 118, 134, 154, 157, 163, 168, 172, 173, 183, 184, 185, 202, 211, 212, 213, 214, 215, 219, 223, 247, 290, 305, 306, 357, 362, 368, 379, 440, 444, 446, 447, 455, 479, 481], "avg_method": [129, 131, 156, 163, 444, 446, 447], "aviv": 0, "avoi": 199, "avoid": [10, 24, 35, 55, 56, 57, 61, 64, 65, 72, 73, 77, 104, 132, 135, 146, 151, 160, 163, 164, 176, 178, 179, 181, 190, 291, 305, 306, 307, 308, 315, 340, 342, 349, 354, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 468, 495], "avram": [118, 231, 259], "awai": [71, 178, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419], "awar": [101, 241, 468], "awesom": [148, 163], "ax": [6, 12, 13, 19, 23, 25, 26, 33, 40, 41, 43, 52, 54, 60, 64, 66, 67, 68, 70, 71, 77, 80, 81, 82, 86, 93, 98, 103, 104, 109, 114, 132, 145, 155, 156, 163, 359, 360, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447], "ax1": [46, 66, 77, 80, 427], "ax2": [46, 66, 427], "ax3": 66, "ax_binari": 41, "ax_im": 43, "ax_multi": 41, "ax_pair": 82, "ax_row": 114, "ax_unpair": 82, "axelson": [118, 187], "axesimag": [55, 57, 59], "axhlin": [36, 402, 404, 407, 409, 411, 413, 415, 417, 419], "axi": [3, 12, 17, 23, 27, 31, 32, 33, 36, 40, 43, 44, 47, 50, 53, 61, 86, 87, 96, 105, 107, 108, 112, 114, 129, 158, 160, 163, 169, 191, 202, 251, 305, 306, 307, 308, 310, 311, 335, 360, 362, 392, 394, 395, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 422, 426, 428, 430, 431, 434, 436, 437, 439, 441, 442, 443], "axial": [6, 15, 96, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 428, 430, 434, 436, 437, 439, 441, 442, 443, 467], "axs1": 71, "axs2": 71, "axvlin": 54, "ayesha": [118, 227], "az1113": 164, "azim": [23, 444, 446, 447], "b": [15, 16, 26, 32, 43, 44, 59, 93, 105, 118, 179, 188, 198, 199, 206, 208, 211, 212, 213, 214, 215, 231, 233, 237, 249, 253, 259, 260, 263, 269, 287, 290, 318, 368, 369, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 495], "b2fd65a88d22090da62c3fb828be840": 4, "b_model001_task002_cope011_tstat1": 112, "ba": 262, "baar": [118, 219], "back": [7, 11, 38, 44, 45, 51, 58, 101, 103, 106, 108, 120, 136, 144, 145, 163, 164, 168, 176, 179, 192, 312, 313, 371, 374, 377, 379, 381, 390, 422, 454, 455, 456], "backend": [33, 35, 37, 38, 39, 42, 45, 46, 47, 51, 53, 56, 60, 61, 101, 106, 109, 128, 135, 138, 148, 153, 158, 163, 313, 448], "background": [3, 9, 10, 11, 15, 16, 17, 23, 24, 29, 32, 33, 43, 47, 52, 59, 70, 93, 94, 96, 108, 113, 114, 116, 120, 128, 131, 134, 139, 141, 143, 144, 145, 146, 148, 151, 154, 160, 163, 179, 185, 191, 192, 202, 237, 255, 256, 262, 263, 275, 281, 305, 306, 307, 308, 312, 313, 372, 374, 375, 377, 379, 383, 386, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 428, 430, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 453, 455, 458, 460, 461, 467, 481, 495, 497, 498], "background_img": [33, 46], "background_label": [52, 59, 93, 192, 372, 375, 379, 423, 460, 463, 481], "backslash": [130, 163], "backward": [145, 158, 163, 179, 255, 256, 465], "bad": [59, 109, 178, 179], "badg": [179, 188], "bag": [175, 310, 311, 498], "balanc": [3, 52, 158, 163, 168], "baldassarr": [118, 177, 202], "ball": [25, 126, 163, 176, 178, 185, 309, 479], "ball_radiu": 25, "ball_sample_point": 25, "baltimor": 0, "band": [54, 61, 160, 163, 247, 368, 468, 469], "band_pass_filt": 247, "bandettini": [26, 118, 176, 187, 309], "bandpass": 58, "bandwidth": 260, "bangalor": 0, "bangaru": [118, 227], "baptist": [51, 52, 74, 118, 121, 165, 168, 170, 204, 226, 240, 277, 282, 284, 312], "bar": [16, 45, 106, 109, 111, 130, 131, 134, 148, 163, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 498], "baratz": [0, 153, 163], "barbar": 0, "barbara": [118, 227], "barcelonabeta": 0, "barch": [61, 118, 198, 208, 209, 265], "barh": [32, 51, 54, 102], "barn": [61, 118, 202, 209, 230, 265, 266, 368, 369], "baronnet": [118, 165, 239], "bart": 65, "basal": [54, 232], "basalganglia": 267, "basc": [139, 163, 194, 238, 251], "basc_multiscale_2015": [20, 111], "base": [2, 7, 9, 21, 29, 30, 31, 36, 41, 47, 48, 50, 51, 52, 54, 57, 58, 63, 64, 68, 72, 75, 76, 83, 84, 90, 91, 93, 94, 100, 101, 102, 109, 115, 116, 118, 121, 127, 129, 130, 132, 134, 139, 143, 151, 154, 156, 159, 163, 165, 166, 167, 168, 170, 171, 174, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 192, 194, 200, 202, 204, 206, 207, 208, 217, 224, 225, 226, 240, 243, 247, 253, 259, 261, 268, 271, 272, 273, 274, 277, 278, 279, 282, 284, 286, 293, 294, 301, 305, 306, 307, 309, 311, 312, 313, 327, 330, 334, 340, 342, 343, 344, 345, 346, 350, 352, 356, 361, 364, 367, 368, 369, 371, 377, 378, 379, 385, 391, 392, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 428, 432, 436, 437, 438, 441, 442, 443, 444, 446, 447, 448, 450, 454, 455, 457, 458, 459, 465, 469, 470, 471, 473, 474, 475, 480, 481, 495, 496, 497, 498, 499], "base_mask": [46, 52, 55, 56, 59, 61], "base_url": 259, "baselin": [6, 32, 34, 118, 154, 155, 163, 172, 174, 201, 250, 315, 335], "basemask": [156, 163], "baseslic": [134, 163, 421], "bash": 188, "basi": [68, 70, 180, 202, 327, 329, 334, 368], "basic": [3, 7, 8, 9, 12, 16, 17, 19, 27, 29, 31, 32, 34, 36, 37, 38, 44, 45, 51, 52, 55, 56, 59, 61, 70, 77, 79, 91, 93, 94, 96, 97, 101, 103, 106, 108, 109, 110, 178, 180, 181, 185, 187, 188, 192, 255, 256, 263, 271, 292, 330, 340, 342, 362, 368, 369, 431, 437, 442, 448, 497], "basic_collection_term": 282, "basic_contrast": [70, 180], "basic_image_term": 282, "bassett": [59, 118, 368, 369], "bastien": [74, 118, 204, 277], "bat": 496, "batch": [107, 112, 313, 454], "batch_siz": [51, 53, 313, 454], "baum": [59, 118, 368, 369], "bayesian": [47, 181], "bayesian_ridg": 47, "bayesianridg": 47, "bazeil": [0, 151, 154, 157, 158, 163], "bazemont": 0, "bbox_to_anchor": 32, "bdg": [179, 188], "beaten": 119, "beauti": 46, "becaus": [3, 6, 12, 16, 19, 32, 33, 34, 38, 42, 45, 46, 47, 57, 68, 70, 71, 72, 81, 86, 104, 105, 106, 111, 113, 127, 151, 163, 164, 166, 171, 176, 178, 179, 181, 188, 282, 310, 311, 438, 444, 446, 447, 451, 453, 479], "beckmann": [118, 165, 198, 233, 260, 368, 369], "becom": [3, 68, 121, 130, 163, 172, 173, 174, 181, 366], "bedetti": [145, 148, 163], "been": [0, 6, 34, 38, 39, 42, 43, 44, 45, 55, 58, 64, 68, 74, 77, 81, 83, 87, 91, 93, 95, 96, 108, 113, 127, 128, 130, 132, 134, 135, 136, 138, 141, 142, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 163, 164, 170, 177, 178, 179, 180, 184, 185, 188, 192, 202, 205, 221, 228, 234, 235, 240, 251, 282, 340, 342, 351, 369, 383, 384, 385, 386, 387, 388, 391, 461, 470, 479, 480], "befor": [2, 16, 24, 52, 58, 59, 72, 73, 91, 96, 98, 101, 107, 111, 120, 127, 129, 131, 148, 151, 154, 156, 158, 160, 163, 164, 168, 169, 171, 172, 174, 179, 180, 181, 184, 187, 188, 190, 191, 192, 198, 243, 279, 282, 284, 327, 329, 334, 345, 349, 351, 368, 369, 372, 373, 375, 376, 378, 379, 380, 429, 444, 446, 447, 451, 453, 455, 460, 461, 469, 470, 481, 495], "beforehand": 188, "begin": [43, 65, 68, 72, 111, 154, 163, 179, 185, 198, 468], "beginn": [179, 187], "beh": 65, "behav": [106, 327, 329, 334], "behavior": [33, 36, 37, 41, 77, 79, 98, 101, 118, 120, 128, 129, 130, 134, 135, 136, 138, 145, 148, 155, 160, 163, 171, 172, 174, 175, 179, 185, 189, 192, 197, 198, 228, 233, 239, 251, 252, 260, 279, 367, 429], "behavioral_data": 41, "behavioral_target": 42, "behaviour": [47, 118, 177], "behind": 67, "behren": [118, 198], "behzadi": [118, 351, 368, 369, 470], "beij": 0, "being": [16, 72, 91, 96, 111, 127, 128, 129, 148, 151, 158, 163, 165, 178, 179, 181, 183, 185, 194, 238, 247, 312, 334, 367, 373, 376, 378, 380, 386, 388, 429, 444, 446, 447, 451, 453, 457, 490], "bellec": [0, 118, 148, 149, 163, 202, 251], "belong": [3, 32, 34, 158, 163, 171, 185, 192, 199], "below": [6, 10, 16, 17, 21, 23, 26, 42, 47, 50, 52, 55, 57, 61, 67, 71, 96, 98, 118, 143, 163, 168, 171, 172, 176, 178, 179, 180, 181, 183, 184, 188, 191, 192, 194, 197, 198, 238, 240, 241, 243, 247, 268, 305, 306, 307, 308, 310, 311, 312, 313, 345, 365, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 429, 434, 436, 437, 438, 441, 442, 443, 444, 446, 447, 450, 455, 457, 468, 469, 490, 495, 499], "ben": [0, 59, 118, 122, 123, 125, 136, 138, 163, 369], "benali": [118, 202, 251], "benchmark": [54, 59, 102, 118, 177, 179, 368, 369], "benedetto": 0, "benedict": [118, 227], "benefit": [45, 52, 59, 68, 151, 163, 179, 191], "benjamin": [103, 118, 171, 232, 267], "benjamini": [158, 163, 181, 326], "bennett": [118, 227], "bent": [118, 217], "berg": [118, 198], "berlin": [0, 118, 165, 219, 225, 239, 257], "bertrand": [0, 47, 51, 52, 54, 74, 102, 118, 122, 125, 129, 132, 136, 141, 145, 148, 149, 151, 158, 159, 163, 165, 168, 169, 170, 171, 173, 177, 187, 204, 208, 225, 239, 240, 254, 257, 277, 307, 308, 312, 313, 456, 457, 462], "besid": 187, "besnard": [0, 132, 156, 163], "best": [3, 36, 41, 45, 46, 47, 97, 154, 160, 163, 171, 172, 173, 176, 178, 179, 181, 191, 305, 306, 307, 308, 310, 311, 367, 404, 407, 454, 455], "best_alpha": [305, 306, 307, 308], "best_c": [36, 305, 306, 307, 308], "best_dual": 36, "best_model_params_": [310, 311], "best_penalti": 36, "beta": [6, 26, 28, 42, 45, 68, 100, 115, 116, 118, 130, 159, 180, 185, 198, 274, 279, 305, 306, 307, 308, 314, 317, 318, 319, 320, 327, 330, 346, 371, 377, 378, 404, 432, 443, 448, 497], "beta_map": 103, "betamap": 280, "better": [2, 3, 26, 32, 35, 45, 46, 52, 68, 96, 103, 107, 111, 118, 126, 128, 129, 134, 135, 139, 142, 148, 156, 163, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 178, 180, 191, 240, 441, 457, 479, 498], "between": [2, 7, 10, 17, 23, 24, 25, 26, 32, 43, 45, 52, 53, 54, 58, 65, 68, 70, 72, 74, 77, 79, 81, 82, 88, 98, 102, 103, 106, 109, 111, 113, 132, 136, 143, 148, 151, 154, 157, 163, 165, 166, 167, 169, 171, 172, 176, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 198, 202, 218, 234, 247, 259, 279, 298, 307, 308, 313, 327, 330, 342, 345, 385, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 426, 427, 428, 430, 433, 436, 437, 439, 441, 442, 443, 444, 446, 447, 450, 451, 453, 455, 466, 467, 469, 479, 481, 498], "bewar": [188, 190], "beyond": [73, 159, 163], "bg_color": [392, 394, 395], "bg_filenam": 45, "bg_img": [3, 6, 17, 18, 26, 31, 32, 35, 38, 43, 45, 70, 71, 72, 73, 77, 90, 95, 113, 120, 145, 151, 157, 163, 171, 192, 327, 340, 367, 437, 441, 442, 443, 450, 467], "bg_map": [10, 23, 24, 39, 70, 114, 438, 444, 446, 447, 451, 453, 495], "bg_on_data": [10, 23, 24, 114, 438, 444, 446, 447, 451, 453], "bgcolor": [393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419], "bharat": [118, 227], "bhg087": [118, 206, 253], "bhn256": 118, "bhp157": [118, 198], "bhx179": [118, 231, 259], "bi": 234, "bia": [172, 305, 306, 307, 308, 310, 311], "biap8": [151, 163], "bias": [26, 68, 118], "bib": 118, "bibtex": [128, 160, 163], "bic": [219, 317], "bicr": 224, "bid": [6, 7, 11, 63, 70, 74, 75, 77, 100, 103, 115, 116, 127, 129, 131, 134, 151, 154, 156, 158, 160, 163, 179, 180, 181, 185, 194, 234, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 269, 274, 287, 303, 304, 327, 330, 340, 368, 369, 370, 372, 375, 377, 379, 431, 436, 442, 446, 448, 465, 466, 492, 497], "bielefeld": 0, "big": [3, 35, 44, 52, 65, 148, 163, 168, 171, 179, 190, 192, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "big_fsaverage_mesh": 10, "big_fsaverage_sulc": 10, "big_img": 10, "bigger": [42, 46, 194, 238, 490], "bigler": [118, 197, 247], "bihan": [74, 118, 204, 277], "bilder": [118, 269, 287], "bilkent": 0, "bin": [35, 52, 179, 327, 336, 496], "bin_p_valu": 96, "bin_p_values_and_vt": 96, "bin_p_values_and_vt_img": 96, "binar": [44, 96, 157, 163, 247, 344, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 457], "binari": [43, 44, 68, 77, 127, 134, 160, 163, 185, 188, 192, 273, 305, 306, 307, 308, 310, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 426, 427, 442, 457, 466, 469], "binarize_img": [130, 132, 157, 163], "binary_clos": [273, 296, 299], "binary_dil": [96, 191, 383, 384, 385, 386, 387, 388], "binary_eros": [383, 384, 385, 386, 387, 388], "binary_plt": 41, "binaur": 234, "binder": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 153, 163], "bingen": [118, 177], "binh": [0, 151, 154, 156, 163], "binyam": [61, 118, 209, 265], "biolog": [114, 118, 217], "biologi": 498, "biomed": [51, 118, 170, 228, 312, 313], "biorxiv": [118, 345, 469], "biostatist": [0, 118, 165], "bipolar": [118, 217], "birmah": [118, 187], "birn": 228, "birth": [118, 219], "biswal": [118, 227], "bit": [38, 41, 43, 44, 67, 68, 77, 81, 106, 136, 149, 160, 163, 165, 177, 190, 191, 273], "bitpix": [59, 105], "black": [15, 26, 43, 108, 128, 129, 132, 163, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 430, 434, 436, 437, 439, 441, 442, 443, 450, 451, 453], "black_bg": [6, 14, 15, 26, 38, 72, 157, 163, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 430, 434, 436, 437, 439, 441, 442, 443, 450, 451, 453], "black_blu": 21, "black_green": 21, "black_pink": 21, "blacker": [118, 217], "bland": [134, 163, 426], "blend": [393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 436, 437, 443], "blob": [89, 96, 170, 191, 237, 259], "blobbi": 177, "block": [26, 35, 54, 59, 61, 66, 103, 104, 119, 129, 163, 171, 178, 191, 202, 210, 234, 440, 483], "blog": 7, "blood": [68, 181, 185], "bloomberg": 0, "bludau": 118, "blue": [16, 19, 43, 52, 71, 88, 131, 163], "blues_r": 98, "blueski": 179, "blur": 202, "bm": 164, "bm10": [233, 260], "bm20": [22, 233, 260], "bm70": [233, 260], "bmc": [68, 74, 118, 204, 277], "board": 179, "bodi": [66, 202, 465], "bogdan": [0, 127, 133, 163], "boil": 178, "bold": [3, 6, 17, 19, 27, 31, 32, 34, 36, 37, 38, 51, 65, 66, 67, 68, 70, 78, 81, 96, 103, 104, 106, 113, 118, 120, 121, 129, 130, 151, 155, 163, 170, 171, 180, 182, 185, 190, 208, 218, 224, 234, 254, 271, 281, 330, 365, 368, 369, 470, 498], "bonferroni": [6, 83, 106, 109, 110, 176, 181, 185, 343, 467, 480], "boo": [0, 145, 148, 151, 163], "book": [149, 163], "bool": [47, 96, 107, 111, 239, 240, 241, 243, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 263, 265, 267, 268, 271, 272, 273, 274, 277, 279, 280, 281, 282, 284, 286, 291, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 324, 327, 340, 342, 343, 344, 345, 346, 349, 351, 355, 357, 358, 359, 360, 361, 364, 365, 366, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 426, 427, 428, 429, 430, 431, 432, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 453, 454, 455, 456, 457, 458, 460, 461, 466, 467, 468, 469, 470], "boolean": [96, 121, 155, 160, 163, 309, 358, 463, 464, 469], "bootstrap": [118, 251], "border": [82, 349, 383, 386, 392, 394, 395], "border_s": [383, 386], "borderpad": [392, 394, 395], "bori": [118, 187], "boston": 0, "both": [3, 4, 6, 10, 16, 25, 39, 42, 50, 52, 54, 61, 66, 70, 81, 82, 87, 91, 96, 98, 103, 109, 111, 113, 114, 121, 129, 130, 132, 134, 151, 158, 163, 164, 165, 168, 170, 176, 177, 179, 180, 185, 190, 191, 192, 197, 198, 220, 229, 239, 246, 258, 268, 293, 327, 329, 334, 342, 343, 345, 364, 379, 380, 381, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430, 436, 438, 440, 443, 444, 445, 446, 447, 453, 457, 459, 469, 473, 474, 475, 479, 496], "both_hemispher": 10, "botteron": [118, 202, 219], "bottl": [32, 34, 35, 36, 41, 190], "bottleneck": 178, "bottom": [13, 16, 27, 41, 43, 69, 164, 191, 440], "bottomrul": 65, "bougacha": [0, 122, 125, 136, 138, 145, 148, 149, 163], "bound": [15, 86, 91, 134, 144, 151, 163, 191, 312, 360, 392, 394, 395, 428, 429, 434, 436, 437, 438, 439, 441, 442, 443, 444, 446, 447, 451, 453], "boundari": [166, 176, 191, 405, 441, 442, 444, 446, 447], "bounding_box": [392, 394, 395], "boundingboxerror": 360, "bowr": [118, 426], "box": [86, 101, 108, 144, 163, 172, 179, 191, 232, 360], "boxplot": [37, 96], "boyd": 118, "brad": [118, 177], "bradford": [118, 217], "bradlei": [61, 118, 198, 202, 209, 217, 230, 232, 265, 266, 267, 368, 369], "brain": [0, 2, 3, 4, 6, 7, 10, 16, 21, 22, 23, 24, 26, 29, 32, 33, 34, 35, 38, 39, 41, 42, 44, 46, 47, 49, 55, 57, 58, 62, 64, 68, 70, 71, 73, 78, 80, 81, 82, 87, 91, 94, 96, 99, 101, 103, 104, 108, 111, 112, 113, 118, 120, 121, 128, 134, 136, 139, 141, 142, 143, 145, 146, 148, 149, 151, 154, 156, 157, 163, 165, 167, 171, 172, 173, 174, 176, 177, 179, 180, 181, 185, 186, 187, 188, 190, 192, 194, 197, 198, 199, 202, 205, 207, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 224, 225, 226, 228, 229, 230, 232, 233, 234, 236, 238, 239, 240, 247, 249, 251, 252, 254, 255, 257, 258, 260, 262, 265, 266, 267, 268, 271, 272, 273, 279, 281, 282, 284, 290, 295, 298, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 322, 345, 347, 350, 352, 357, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 383, 384, 385, 386, 387, 388, 391, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 425, 426, 430, 434, 436, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 457, 458, 459, 460, 465, 469, 480, 481, 484, 487, 490, 496, 497, 498], "brain_color": [393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419], "brain_mask": [58, 103], "brain_parcel": [231, 259], "brain_parcellation_cambridge_basc_multiscale_": 202, "brain_time_seri": 58, "brainhack": [139, 144, 163], "brainlin": 281, "brainmap": [2, 22, 233, 260], "brainmask": 344, "brainom": [118, 148, 163, 194, 277], "brainomics_data": [79, 109], "brainomics_loc": [18, 78, 79, 81, 82, 83, 109, 110], "brainpedia": 121, "brainpedia_subset": 121, "brainsprit": [148, 149, 163, 495], "brammer": [118, 187], "branch": [160, 163, 164, 179, 188], "brandon": [118, 197, 247], "braver": [118, 176], "break": [2, 85, 99, 116, 143, 163, 168, 176, 179, 188, 263, 442, 448, 458, 497], "breakag": 315, "breath": [67, 68, 77], "breez": [118, 217], "brest": 0, "brian": [118, 177, 217, 227, 345, 469], "bridg": 101, "brief": [96, 179, 181], "briefli": 176, "brien": [118, 217], "brigham": 0, "bright": 91, "brighter": 120, "bring": [43, 51, 173, 179, 187, 390], "brisban": 0, "brito": [0, 129, 163], "broader": [184, 197], "brodmann": 262, "brok": [125, 163], "broke": [150, 163], "broken": [88, 141, 149, 163, 176], "brought": 192, "brown": [118, 227], "brows": [61, 121, 158, 163, 226, 481], "browsabl": 164, "browser": [2, 3, 4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 56, 58, 59, 60, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 148, 151, 153, 163, 192, 327, 340, 405, 449, 450, 451, 452, 453, 465, 467, 495], "bruce": [23, 118, 206, 211, 212, 213, 214, 215, 217, 231, 237, 253, 259, 261, 263, 290], "bruno": [118, 202], "brute": 178, "bryan": [118, 201, 250], "bsd": 0, "buck": [0, 128, 163], "bucket": 65, "buckner": [118, 202, 217, 228, 231, 237, 259, 263], "buf": 111, "buffer": 111, "bug": [125, 128, 129, 132, 133, 135, 141, 142, 143, 147, 160, 187, 188, 444, 446, 447, 480, 481], "bugfix": [124, 125, 137, 138, 141, 159, 163, 179], "build": [12, 19, 22, 44, 49, 52, 53, 54, 61, 103, 116, 119, 127, 128, 129, 130, 132, 143, 163, 167, 172, 174, 176, 181, 190, 192, 327, 455, 498], "build_doc": 164, "build_tool": [164, 188], "built": [16, 45, 51, 128, 131, 163, 164, 181, 188, 305, 306, 307, 308, 455, 480, 481], "builtin": [127, 163], "buitelaar": [118, 368, 369], "bullmor": [118, 166], "bump": [127, 130, 132, 148, 151, 156, 157, 158, 161, 163, 172, 174, 188], "bunch": [83, 120, 130, 143, 163, 179, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 293], "burden": 179, "burkhardt": [0, 132, 163], "burn": 179, "busa": [118, 206, 253], "bush": [103, 118], "busi": [118, 391], "bustillo": [118, 201, 250], "butterworth": [61, 127, 128, 156, 160, 163, 345, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 457, 469], "butterworth__": [345, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 457, 469], "butterworth__padtyp": 61, "butterwoth": [156, 163], "button": [61, 68, 70, 74, 78, 79, 81, 82, 109, 158, 163, 179, 181, 275, 277, 285, 302, 480, 481], "bwr": [20, 24, 39, 149, 163, 433], "bwr_r": 20, "byte": [3, 4, 6, 10, 18, 22, 42, 72, 104, 158, 163, 354, 360], "bzdok": [0, 122, 123, 125, 126, 136, 138, 163], "c": [3, 26, 36, 41, 43, 44, 45, 46, 47, 52, 59, 61, 71, 101, 102, 106, 114, 118, 121, 172, 176, 179, 198, 199, 202, 206, 209, 217, 219, 224, 226, 228, 230, 233, 236, 251, 253, 260, 262, 265, 266, 272, 273, 281, 282, 284, 295, 296, 297, 298, 299, 300, 319, 320, 345, 360, 361, 368, 369, 390, 391, 460, 463, 469], "c0": 66, "c1": 66, "c3": 66, "c43afa": 11, "c_ra": [160, 163], "ca": 219, "cach": [45, 46, 52, 106, 126, 136, 163, 168, 240, 305, 306, 307, 308, 310, 311, 312, 313, 327, 340, 346, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 455, 456, 457, 479], "caffo": [118, 345, 469], "caglar": [0, 160, 163], "caitlin": [118, 227], "cakan": [0, 160, 163], "cal_max": [59, 105], "cal_min": [59, 105], "calc_beta": 318, "calcul": [0, 3, 33, 41, 44, 50, 51, 61, 94, 100, 115, 116, 128, 134, 149, 163, 180, 204, 276, 277, 305, 306, 307, 308, 312, 313, 317, 319, 320, 335, 342, 350, 364, 368, 371, 374, 377, 384, 387, 391, 402, 419, 428, 434, 437, 441, 442, 443, 448, 450, 455, 467, 497], "calculu": 44, "calhoun": [26, 118, 201, 227, 250], "california": 0, "call": [2, 4, 6, 10, 15, 16, 17, 35, 51, 52, 53, 55, 56, 59, 61, 68, 70, 74, 78, 83, 89, 91, 93, 96, 101, 108, 120, 121, 130, 132, 151, 163, 164, 165, 166, 168, 169, 171, 172, 176, 178, 179, 180, 181, 184, 185, 188, 190, 192, 196, 202, 239, 241, 243, 251, 263, 282, 284, 287, 311, 313, 316, 321, 330, 345, 355, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 429, 430, 439, 455, 457, 469, 473, 495], "callabl": [121, 158, 163, 243, 282, 305, 306, 307, 308, 309], "caller": [275, 276], "calli": [312, 313], "cambridg": [0, 202], "camelcas": 179, "cameron": [59, 118, 165, 166, 205, 225, 227, 252, 257], "camil": [118, 121, 226, 282, 284, 426], "campagn": [118, 210], "can": [0, 2, 3, 4, 6, 7, 10, 11, 12, 15, 16, 21, 22, 23, 24, 25, 26, 27, 31, 32, 34, 35, 36, 38, 41, 42, 43, 45, 46, 47, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 88, 90, 91, 93, 94, 95, 96, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 118, 119, 120, 121, 127, 128, 130, 131, 132, 133, 134, 135, 136, 139, 141, 143, 148, 149, 151, 154, 155, 156, 157, 158, 160, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 190, 191, 192, 194, 198, 207, 208, 225, 226, 228, 229, 238, 240, 241, 243, 246, 247, 250, 253, 254, 255, 256, 257, 258, 259, 263, 277, 279, 282, 286, 305, 306, 307, 308, 309, 310, 311, 312, 313, 317, 319, 320, 327, 329, 330, 334, 340, 342, 345, 346, 347, 352, 355, 356, 357, 360, 361, 364, 365, 367, 368, 369, 374, 375, 377, 379, 380, 383, 384, 385, 386, 387, 388, 390, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 427, 428, 429, 430, 431, 434, 435, 436, 437, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 455, 457, 458, 459, 465, 466, 467, 468, 469, 479, 480, 481, 490, 495, 496, 498], "canada": 0, "canadian": 0, "cancel": 172, "candid": 102, "canica": [53, 127, 128, 134, 146, 157, 163, 167, 185, 313, 374, 481, 498], "canica_components_img": 51, "canica_resting_st": 51, "canni": 495, "cannon": [118, 269, 287], "cannot": [3, 38, 43, 44, 46, 54, 59, 65, 81, 88, 94, 103, 104, 106, 113, 121, 148, 160, 163, 164, 165, 171, 174, 179, 192, 330, 343, 364, 450, 451, 453, 467, 473, 474], "canon": [6, 35, 53, 68, 70, 86, 113, 141, 163, 185, 196, 312, 480], "cap": [79, 81], "capabl": [70, 131, 158, 163, 192], "capit": 224, "caprihan": [118, 201, 250], "captur": [24, 54, 61, 68, 107, 166, 167, 168, 171, 204, 239, 277], "care": [54, 102, 120, 171, 172, 174, 178, 188, 232, 314], "carefulli": 113, "carpet": [9, 29, 116, 131, 154, 163, 248, 272, 346, 358, 385, 429, 497], "carpet_plot": [160, 163], "carri": [181, 185], "carrier": [118, 198], "case": [13, 16, 24, 26, 36, 41, 43, 46, 50, 51, 52, 53, 57, 61, 65, 67, 68, 69, 74, 86, 91, 93, 94, 98, 103, 104, 105, 111, 113, 121, 135, 141, 151, 154, 163, 165, 166, 168, 171, 172, 176, 178, 187, 188, 190, 199, 246, 249, 253, 255, 256, 305, 306, 307, 308, 310, 311, 327, 329, 334, 340, 342, 343, 352, 360, 361, 362, 363, 366, 367, 373, 374, 375, 376, 377, 378, 385, 423, 428, 429, 430, 434, 436, 437, 438, 441, 442, 443, 450, 466, 467, 479, 481, 495], "cast": [132, 138, 151, 163, 192, 199, 249, 358], "castellano": [118, 227], "castillo": [26, 118], "cat": [32, 34, 35, 41, 101, 120, 171, 186, 190], "catarina": [118, 236, 262], "catch_warn": [34, 36, 42, 51, 72, 107], "categor": [172, 188], "categori": [32, 34, 35, 36, 42, 51, 101, 106, 120, 171, 173, 179, 190, 271], "caterina": [118, 232, 267], "caus": [46, 50, 51, 52, 86, 133, 136, 163, 188, 363], "caution": 363, "cautious": [145, 163], "caveat": [118, 171], "cavi": [118, 206, 217, 253], "cbar": 41, "cbar_tick_format": [6, 27, 155, 158, 163, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 434, 436, 437, 438, 442, 443, 444, 446, 447], "cbar_vmax": [393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 444], "cbar_vmin": [393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 444], "cbf": 121, "cbig": [231, 237, 259], "cbv": 121, "cc": 247, "cc0": 226, "cd": [51, 53, 179, 188, 313], "cd3e4e": 11, "ce": [327, 330, 340, 467], "cea": [0, 204], "cecil": [118, 187], "ceil": 104, "cell": [3, 10, 17, 23, 38, 52, 55, 56, 57, 61, 65, 77, 79, 181, 185], "censor": [130, 160, 163, 469], "center": [0, 13, 15, 38, 50, 53, 54, 58, 61, 64, 81, 102, 109, 110, 114, 149, 160, 163, 166, 169, 192, 199, 217, 221, 228, 239, 241, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 424, 425, 429, 433, 454, 455, 457, 466, 479], "cento": 202, "centr": 0, "central": [0, 93, 247, 426], "centroid": [405, 454], "cercor": [118, 198, 206, 231, 253, 259], "cereb": 54, "cerebellar": [232, 267], "cerebellum": [61, 118, 198, 209, 232, 265, 267], "cerebr": [118, 181, 198, 204, 206, 209, 217, 231, 237, 253, 259, 263, 265, 277], "cerebrospin": [12, 59, 219, 272, 368], "certain": [6, 17, 59, 98, 113, 148, 163, 171, 179, 181, 188, 198, 282, 360, 364, 441], "certif": 198, "cf": [118, 192, 198], "cff": [164, 179], "cfg": [159, 163], "chain": [96, 191, 239, 240], "chair": [30, 32, 34, 35, 41, 48, 116, 128, 163, 190, 271, 307, 352, 357, 440, 443, 448, 497], "challeng": 165, "chamma": [0, 127, 128, 129, 157, 158, 160, 163], "chan": 0, "chanc": [6, 35, 39, 54, 79, 81, 155, 163, 175, 176, 181], "chance_level": 35, "chandra": 0, "chang": [15, 16, 20, 41, 43, 45, 54, 65, 69, 70, 105, 106, 109, 111, 123, 164, 172, 174, 178, 179, 181, 188, 189, 239, 240, 241, 290, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 335, 340, 354, 358, 360, 363, 364, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 391, 438, 444, 446, 447, 451, 453, 454, 455, 456, 457, 460, 461, 463, 466, 469, 479, 496], "changelog": [127, 143, 188], "channel": [148, 163], "chaogan": [118, 227], "chapra": [0, 132, 163], "chapter": [191, 192], "charact": [160, 163, 336], "character": [67, 68, 118, 187, 219, 368], "characterist": [41, 80, 135, 163, 171, 185, 369], "chawla": [0, 148, 149, 150, 151, 152, 153, 154, 163], "cheap": 172, "check": [2, 3, 11, 13, 16, 22, 26, 66, 79, 95, 96, 105, 109, 120, 128, 131, 132, 138, 141, 163, 164, 166, 171, 174, 178, 179, 185, 187, 188, 190, 192, 239, 240, 241, 243, 273, 292, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 328, 340, 355, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 454, 455, 456, 457, 495], "check_ev": [129, 163], "check_look_up_t": 179, "check_mask_img": 179, "check_matplotlib": [25, 40, 43, 47, 52, 69, 80, 93, 109, 110, 114], "check_random_st": [46, 47], "checkerboard": [68, 74, 82, 277], "checklist": 164, "checkmk": 0, "checkout": [143, 163, 179, 188], "chee": [39, 118], "chen": [0, 26, 39, 118, 132, 160, 163, 198], "cheung": [118, 227], "chevali": [0, 148, 151, 163], "chiang": [145, 163], "chieti": 0, "child": [0, 54, 268], "child_adult": [54, 102], "childmind": 197, "children": [51, 102, 151, 163, 186, 207, 268], "china": 0, "chiu": [118, 217], "choic": [10, 20, 68, 69, 114, 138, 163, 165, 166, 172, 174, 175, 178, 179, 241, 252, 310, 311, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 457], "choos": [15, 16, 25, 35, 36, 47, 50, 89, 113, 174, 175, 181, 192, 305, 306, 307, 308, 369, 428, 430, 434, 436, 437, 439, 441, 442, 443, 454, 455, 467, 479, 498], "chose": 171, "chosen": [23, 36, 68, 103, 164, 178, 239, 444, 446, 447, 450, 451, 453, 479], "chri": [0, 122, 136, 151, 163], "christian": [0, 118, 128, 145, 148, 163, 165, 198, 233, 260, 368, 369], "christin": [52, 118, 227], "christina": [0, 61, 118, 130, 163, 209, 265], "christo": [59, 118, 368, 369], "christoph": [23, 118, 145, 148, 163, 206, 253, 261], "chun": [39, 118], "chunk": [3, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 101, 106], "church": [61, 118, 209, 230, 265, 266], "chyzhyk": [54, 102, 118], "ci": [179, 188, 317, 319, 320], "cibit": 0, "cidx": 81, "cing": 54, "cingul": [24, 58, 61, 64, 93, 180, 199], "cingulo": 61, "cinguloopercular": 267, "cionca": [0, 129, 163], "cipollini": [0, 122, 123, 125, 136, 138, 163], "circl": 86, "circleci": [138, 143, 163, 164], "circular": [78, 202], "ciric": [59, 118, 368, 369], "cisler": [103, 118], "citat": [0, 164, 179], "cite": [168, 204, 220, 225, 257, 268, 277], "cit\u00e9": 0, "ciuciu": [118, 210, 312], "civet": [118, 202], "clair": [118, 198], "clare": [118, 198, 227, 233, 260], "clarifi": [68, 156, 163], "clariti": 56, "clark": [0, 118, 127, 163, 176, 201, 250], "class": [3, 7, 10, 30, 45, 46, 48, 52, 54, 57, 59, 61, 93, 96, 101, 102, 105, 116, 126, 127, 128, 130, 132, 133, 134, 135, 136, 138, 144, 145, 146, 149, 151, 154, 156, 157, 158, 160, 163, 170, 171, 175, 178, 179, 180, 184, 192, 239, 240, 241, 271, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 327, 340, 346, 358, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 428, 430, 434, 436, 437, 439, 440, 441, 442, 443, 448, 454, 455, 456, 457, 458, 459, 465, 471, 472, 473, 474, 475, 476, 481, 484, 497, 498], "class_prior": [305, 306, 307, 308], "classes_": [41, 305, 306, 307, 308, 310], "classic": [31, 36, 96, 172, 190, 218], "classif": [3, 32, 33, 34, 35, 37, 41, 46, 49, 52, 62, 101, 103, 116, 118, 120, 130, 154, 163, 165, 170, 171, 175, 176, 177, 185, 186, 187, 197, 239, 247, 257, 268, 305, 306, 307, 308, 310, 311, 369, 371, 376, 430, 440, 448, 496, 497, 498], "classifi": [3, 30, 34, 35, 38, 41, 44, 48, 54, 101, 102, 116, 151, 154, 155, 163, 171, 172, 173, 174, 175, 185, 186, 187, 271, 305, 307, 308, 309, 310, 350, 352, 357, 443, 448, 497], "classification_accuraci": [35, 101], "classification_target": [32, 34], "classifier_nam": 32, "classifiermixin": [135, 163], "classifiers_data": 32, "classmethod": [393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 475], "claus": 0, "clean": [33, 35, 42, 43, 46, 52, 53, 55, 56, 59, 61, 65, 71, 77, 107, 118, 127, 128, 130, 132, 134, 141, 147, 148, 151, 155, 156, 158, 163, 188, 191, 192, 239, 312, 313, 327, 345, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 429, 455, 457], "clean__": [345, 372, 373, 374, 375, 376, 377, 378, 457], "clean__butterworth__": [345, 372, 373, 374, 375, 376, 377, 378, 457], "clean__sample_mask": [130, 163], "clean_arg": [52, 55, 56, 57, 59, 61, 91, 93, 94, 134, 163, 192, 379, 380, 381, 481], "clean_args_": [372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 457], "clean_img": [71, 130, 134, 141, 143, 148, 158, 163, 191, 469], "clean_kwarg": [52, 55, 56, 59, 61], "clean_kwargs_": [372, 373, 374, 375, 376, 377, 378, 457], "clean_map": [6, 26], "cleaned_sign": 469, "cleaner": [51, 68, 148, 163], "cleanup": 111, "clear": [41, 96, 121, 127, 132, 151, 160, 163, 179, 305, 306, 307, 308, 312, 313, 374, 377, 455], "clearer": [45, 179], "clearli": [129, 158, 163, 179, 194, 238, 490], "clever": [120, 178], "clf": [44, 145, 163], "cli": 183, "click": [26, 121, 164, 181, 192, 277, 495], "clikc": 164, "clinic": [0, 26, 54, 102, 118, 172, 187], "clip": [61, 86, 360, 361], "cllip": 361, "clock": 178, "clone": 179, "close": [16, 24, 39, 43, 52, 88, 111, 158, 163, 165, 172, 178, 179, 181, 185, 273, 305, 306, 307, 308, 310, 311, 383, 384, 385, 386, 387, 388, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 462, 495], "closer": [43, 52, 178, 466], "closest": [86, 360], "cluster": [6, 20, 26, 33, 35, 42, 49, 62, 64, 65, 70, 73, 76, 77, 81, 83, 84, 88, 93, 104, 113, 116, 118, 127, 128, 134, 151, 154, 158, 159, 160, 163, 167, 173, 174, 176, 181, 184, 185, 186, 187, 199, 205, 251, 252, 268, 277, 307, 308, 322, 327, 336, 340, 342, 343, 350, 352, 357, 364, 375, 391, 411, 434, 440, 442, 443, 448, 454, 455, 456, 460, 462, 463, 466, 467, 480, 481, 497, 498], "cluster_level_infer": [78, 135, 158, 163, 184], "cluster_percentil": [307, 308], "cluster_roi": [205, 252], "cluster_s": [159, 163], "cluster_threshold": [6, 26, 64, 65, 71, 83, 98, 158, 163, 327, 340, 343, 364, 367, 466, 467], "clustering_percentil": [135, 163, 307, 308], "cm": [13, 21, 41, 53, 61, 129, 148, 163, 169, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 495], "cma": 217, "cmap": [3, 6, 10, 11, 13, 15, 17, 20, 21, 23, 24, 26, 33, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 52, 53, 55, 56, 57, 59, 71, 72, 78, 79, 81, 82, 83, 88, 89, 91, 93, 94, 96, 98, 106, 109, 110, 114, 129, 149, 151, 160, 163, 169, 192, 204, 275, 276, 277, 372, 373, 374, 375, 376, 377, 379, 380, 381, 426, 428, 429, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 450, 451, 453, 457, 481, 495], "cmap_filenam": [83, 110], "cmap_label": [160, 163, 429], "cmaps_leftauditoryclick": [79, 109], "cmrmap_r": [52, 55, 56, 57, 59, 93, 372, 373, 375, 376, 457, 481], "cn2h9c": [118, 165, 239], "cnr": [0, 199, 249], "co": [5, 25, 86, 118, 180, 198, 211, 212, 213, 214, 215, 236, 262, 290], "coactiv": 170, "coalson": [61, 118, 209, 265], "coars": 39, "cobr": [129, 139, 143, 163], "code": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 118, 120, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 164, 165, 169, 170, 172, 174, 178, 180, 185, 192, 247, 309, 313, 327, 340, 373, 376, 378, 380, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 426, 439, 457, 465, 467, 480, 481, 489, 492, 496], "codebas": [129, 163, 164, 179], "codecov": [143, 163], "coef": [33, 47, 101, 327, 336], "coef_": [3, 43, 47, 101, 114, 120, 179, 305, 306, 307, 308, 310, 311], "coef_img": [3, 32, 46, 114, 120], "coef_img_": [3, 31, 32, 33, 42, 45, 46, 114, 171, 192, 305, 306, 307, 308, 310, 311], "coeffici": [3, 6, 24, 41, 42, 43, 47, 54, 101, 102, 134, 144, 160, 163, 165, 171, 172, 173, 177, 178, 179, 181, 185, 239, 241, 310, 311, 316, 318, 321, 327, 336, 467], "coerc": [12, 291], "coffe": [35, 65], "coffei": [118, 227], "cognit": [0, 41, 74, 103, 107, 118, 171, 181, 185, 192, 204, 223, 228, 233, 234, 260, 269, 277, 287], "cognitive_paradigm_cogatla": 112, "cohen": [61, 118, 209, 230, 265, 266], "coher": [185, 187], "cohort": [54, 102], "coil": 71, "coimbra": 0, "col": [41, 317, 319, 320], "colcomb": [118, 227], "cold_hot": [13, 26, 45, 46, 147, 163], "colin": [0, 151, 163], "colin27": 220, "colinear": 68, "collaps": 70, "collect": [61, 103, 107, 112, 118, 119, 164, 179, 185, 197, 201, 205, 224, 226, 282, 283, 284, 285, 368, 473, 474, 498], "collection_1257": 107, "collection_1952": 107, "collection_4008": 107, "collection_413": 112, "collection_42": 112, "collection_423": 112, "collection_79": 107, "collection_98": 112, "collection_filt": [121, 282], "collection_id": [107, 112, 121, 282, 284], "collection_metadata": [121, 282], "collection_term": [121, 282], "collections_meta": [121, 226, 282, 283, 284, 285], "colleg": [0, 185], "collin": [118, 199, 202, 219, 249], "collis": 46, "color": [10, 11, 15, 16, 19, 22, 25, 26, 32, 34, 36, 41, 52, 53, 54, 71, 88, 90, 111, 130, 131, 133, 134, 149, 151, 154, 156, 160, 163, 168, 169, 179, 181, 188, 237, 372, 373, 374, 375, 376, 377, 379, 380, 381, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 457, 481, 495], "color_map": 13, "color_map_nam": 13, "colorado": 0, "colorbar": [2, 10, 11, 15, 16, 21, 22, 24, 26, 27, 38, 41, 43, 51, 53, 60, 71, 81, 88, 89, 90, 96, 98, 104, 107, 114, 125, 127, 130, 131, 135, 140, 143, 148, 149, 151, 155, 156, 157, 158, 159, 163, 169, 191, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 427, 428, 429, 430, 431, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 453, 495], "colorbar_fonts": [449, 451, 453], "colorbar_height": [449, 451, 453], "colormap": [6, 9, 15, 20, 22, 24, 26, 29, 88, 116, 131, 134, 143, 146, 147, 148, 149, 151, 156, 163, 263, 302, 372, 373, 374, 375, 376, 377, 379, 380, 381, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 426, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 457, 497, 498], "colors_17": [237, 263], "colors_7": [237, 263], "column": [3, 6, 11, 41, 59, 65, 66, 67, 68, 70, 71, 72, 73, 74, 77, 78, 79, 81, 82, 83, 101, 103, 104, 113, 121, 129, 130, 134, 155, 163, 181, 240, 241, 243, 249, 251, 253, 255, 256, 258, 259, 261, 262, 263, 305, 306, 307, 308, 314, 317, 318, 319, 320, 325, 327, 334, 340, 341, 342, 345, 360, 367, 368, 369, 370, 372, 375, 379, 391, 402, 404, 407, 421, 428, 431, 432, 434, 435, 437, 440, 441, 442, 443, 446, 464, 466, 467, 468, 469, 470, 481], "column_nam": [65, 370], "com": [0, 20, 160, 163, 164, 179, 219, 227, 231, 232, 237, 251, 259, 369, 495, 496], "combin": [6, 7, 16, 43, 44, 73, 106, 108, 111, 118, 127, 130, 157, 163, 164, 171, 176, 181, 185, 192, 198, 202, 217, 220, 224, 232, 247, 281, 305, 306, 307, 308, 310, 312, 313, 327, 340, 342, 368, 410, 411, 414, 415, 416, 417, 431], "come": [2, 3, 11, 17, 45, 55, 57, 61, 77, 82, 96, 120, 128, 131, 163, 166, 171, 172, 178, 179, 187, 188, 191, 192, 268, 495], "comer": 187, "comfort": [120, 179], "comma": 190, "command": [179, 187, 188, 496], "comment": [179, 192], "commerci": [197, 200, 202, 204, 205, 207, 208, 225, 252], "commit": 188, "commit_sha": 188, "committe": 198, "commod": 178, "common": [12, 26, 52, 68, 69, 72, 96, 103, 143, 151, 157, 159, 163, 165, 171, 174, 176, 178, 179, 181, 184, 189, 191, 197, 202, 205, 235, 243, 252, 352, 360, 361, 365, 374, 386, 388], "commonli": [54, 168, 180, 185, 187, 192, 369], "commun": [0, 118, 179, 186, 188, 197, 207, 268, 496], "comp": [51, 201, 250], "compact": [2, 96, 191, 273], "compar": [3, 6, 11, 32, 33, 35, 37, 42, 44, 49, 54, 59, 61, 62, 66, 68, 79, 81, 82, 85, 88, 96, 99, 102, 105, 111, 116, 118, 121, 123, 134, 151, 163, 166, 167, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 183, 185, 192, 205, 225, 239, 241, 254, 257, 263, 268, 305, 306, 308, 310, 311, 347, 350, 356, 357, 358, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 403, 423, 424, 427, 430, 443, 448, 469, 481, 495, 497, 498], "compare_load": 179, "comparison": [45, 52, 54, 60, 65, 68, 83, 95, 102, 103, 106, 111, 118, 121, 134, 163, 165, 168, 175, 176, 177, 182, 185, 188, 201, 205, 250, 498], "compat": [10, 38, 43, 44, 70, 74, 81, 113, 128, 130, 135, 138, 158, 160, 163, 174, 179, 180, 239, 240, 241, 255, 256, 312, 313, 327, 340, 342, 352, 367, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 427, 431, 454, 455, 456, 457, 465, 469], "compcor": [59, 68, 118, 130, 158, 163, 166, 268, 351, 368, 369, 470], "complementari": [98, 118, 223], "complet": [26, 36, 63, 75, 96, 116, 120, 121, 151, 163, 164, 165, 171, 173, 180, 188, 191, 192, 269, 271, 287, 304, 327, 330, 367, 370, 377, 391, 428, 429, 430, 431, 434, 436, 437, 439, 440, 441, 442, 443, 448, 455, 466, 480, 497], "complex": [68, 79, 89, 118, 121, 171, 173, 176, 179, 184, 187, 192], "compli": [179, 198, 368, 371], "complianc": [129, 134, 163, 179], "compliant": [103, 128, 134, 163, 179, 192, 287, 303, 369, 442, 446], "complic": [178, 190, 317, 319, 320], "compon": [7, 51, 53, 57, 68, 94, 96, 100, 115, 116, 118, 136, 143, 144, 146, 154, 163, 166, 167, 168, 169, 181, 185, 190, 191, 201, 202, 239, 240, 241, 250, 260, 268, 279, 305, 306, 307, 308, 309, 310, 311, 312, 313, 317, 319, 320, 327, 340, 352, 354, 357, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 425, 443, 448, 454, 455, 456, 457, 458, 459, 470, 484, 497], "component_img": 108, "components_": [107, 146, 163, 312, 313], "components_img": [51, 53, 169], "components_img_": [51, 53, 146, 163, 169, 170, 312, 313], "components_init_": 313, "components_mask": [94, 108], "compos": [21, 101, 185, 191, 192, 197, 266, 305, 306, 307, 308], "composit": [36, 41], "comprehens": [118, 179, 187, 202, 204, 277, 303], "compress": [51, 118, 148, 163, 167, 170, 190, 313], "compressed_img_rena": 52, "compris": [66, 68, 88, 458, 466], "compromis": [181, 369], "comptat": 68, "comput": [0, 3, 6, 10, 16, 17, 23, 24, 26, 27, 31, 32, 33, 35, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 64, 65, 66, 67, 68, 69, 70, 72, 74, 77, 79, 81, 83, 85, 87, 92, 94, 97, 101, 102, 103, 104, 106, 107, 108, 111, 113, 114, 116, 118, 119, 121, 129, 132, 136, 148, 154, 155, 156, 158, 163, 167, 168, 170, 171, 172, 173, 174, 176, 177, 178, 181, 182, 183, 185, 186, 187, 189, 190, 193, 239, 241, 243, 257, 268, 271, 281, 290, 293, 294, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 317, 319, 320, 323, 324, 326, 327, 329, 334, 336, 340, 342, 343, 350, 351, 352, 355, 356, 357, 358, 362, 364, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 425, 430, 433, 434, 440, 441, 442, 443, 448, 449, 451, 454, 455, 456, 457, 465, 467, 468, 470, 479, 480, 487, 495, 498], "computation": [68, 172, 176], "computationminussent": 70, "computationnali": 172, "compute_alpha_max": 178, "compute_background_mask": [191, 305, 306, 307, 308, 312, 313, 374, 377, 455], "compute_brain_mask": [154, 157, 163, 191, 305, 306, 307, 308, 312, 313, 374, 377, 387, 455], "compute_contrast": [6, 26, 35, 64, 65, 67, 68, 70, 71, 72, 73, 77, 78, 79, 81, 82, 83, 103, 104, 113, 127, 130, 131, 132, 163, 180, 183, 327, 340, 342, 467], "compute_epi_mask": [12, 27, 71, 91, 191, 192, 305, 306, 307, 308, 312, 313, 374, 377, 455], "compute_fixed_effect": [73, 183], "compute_gray_matter_mask": [154, 158, 163], "compute_multi_background_mask": [132, 163, 191, 374], "compute_multi_brain_mask": [127, 157, 163, 374], "compute_multi_epi_mask": [127, 163, 191, 374], "compute_multi_gray_matter_mask": [127, 163], "compute_multi_grey_matter_mask": [157, 163], "compute_regressor": [69, 128, 158, 163, 180], "computed_regressor": 329, "con": [13, 323], "con_id": [69, 329], "con_val": 323, "concat_img": [2, 12, 72, 103, 111, 134, 142, 163, 191, 352], "concat_niimg": [130, 163], "concaten": [39, 41, 50, 52, 56, 60, 103, 111, 165, 191, 346, 352, 368, 457], "concentr": [46, 179, 181, 185], "concept": [68, 101, 151, 163, 171, 172, 179, 185, 189, 220, 498], "conceptu": 181, "concern": [179, 185], "concis": 282, "concordia": 0, "concret": [67, 111, 179, 181], "concurr": [33, 35, 37, 38, 39, 42, 45, 46, 47, 51, 53, 56, 60, 61, 101, 104, 106, 109], "cond": [96, 103, 329], "cond_": 65, "cond_id": [158, 163], "cond_map": 96, "conda": [179, 496], "condit": [3, 6, 26, 31, 32, 33, 35, 37, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 82, 96, 101, 104, 106, 113, 120, 132, 155, 158, 160, 163, 165, 171, 178, 183, 185, 188, 191, 208, 210, 218, 234, 235, 254, 327, 329, 334, 340, 342, 431, 480], "condition_": 35, "condition_count": 103, "condition_effect": 82, "condition_id": 74, "condition_mask": [3, 31, 32, 33, 36, 38, 39, 101, 106, 120], "condition_mask_test": 33, "condition_mask_train": 33, "condition_nam": [96, 103], "conditions_encod": 106, "conditions_label": 35, "conditions_per_run": 106, "conditions_run": 35, "conditions_test": 3, "conditions_to_modul": 74, "conditions_train": 3, "conduct": [34, 121, 131, 163, 181, 234], "conf": 164, "conf_int": [317, 319, 320], "confer": [147, 163], "confid": [305, 306, 307, 308, 310, 317, 319, 320], "confidence_interv": [317, 319, 320], "config": 164, "configur": [10, 16, 26, 128, 129, 163, 179, 188, 191, 192, 369], "confirm": [2, 31, 72, 129, 163, 179], "conform": [160, 163, 181], "confound": [50, 52, 53, 54, 55, 56, 57, 58, 61, 65, 79, 80, 102, 103, 104, 109, 113, 118, 120, 125, 128, 129, 130, 132, 133, 134, 138, 148, 154, 155, 156, 158, 160, 163, 166, 169, 170, 171, 178, 185, 189, 191, 200, 207, 239, 248, 268, 312, 313, 327, 330, 340, 341, 342, 345, 351, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 391, 455, 457, 469, 470, 485], "confound_fil": 54, "confound_filenam": [56, 58], "confounding_var": 391, "confounds_": [330, 340], "confounds_datafram": 166, "confounds_fd_threshold": 330, "confounds_filenam": 61, "confounds_minimal_no_gsr": 59, "confounds_mot": 330, "confounds_regressor": 65, "confounds_scrub": [59, 330], "confounds_simpl": 59, "confounds_std_dvars_threshold": 330, "confounds_strategi": 330, "confounds_wm_csf": 330, "conftest": 179, "confus": [128, 163, 172, 363], "confusion_matrix": [33, 37, 172], "congdon": [118, 269, 287], "congruent": 183, "conjunct": 96, "connect": [7, 9, 23, 28, 29, 52, 53, 61, 62, 90, 96, 100, 115, 118, 130, 131, 132, 136, 141, 143, 144, 151, 154, 159, 163, 166, 168, 170, 179, 180, 181, 185, 186, 187, 191, 197, 198, 202, 231, 233, 237, 239, 240, 241, 247, 251, 257, 259, 260, 261, 263, 268, 274, 279, 293, 294, 301, 327, 330, 343, 346, 354, 364, 368, 369, 371, 376, 377, 378, 379, 383, 384, 385, 386, 387, 388, 389, 404, 405, 425, 430, 432, 440, 443, 446, 447, 448, 449, 455, 458, 459, 471, 473, 474, 475, 484, 495, 496, 497, 498], "connect_diag": [88, 458], "connected_compon": [457, 459], "connected_label_region": [88, 143, 163, 168, 191, 457, 459], "connected_region": [90, 136, 149, 163, 169, 191, 457, 458], "connection": 187, "connectivity_": 455, "connectivity__kind": 102, "connectivity_measur": 61, "connectivitymatrix": 239, "connectivitymeasur": [50, 53, 54, 57, 59, 61, 102, 114, 129, 136, 138, 141, 144, 154, 163, 165, 166, 169], "connectom": [0, 9, 13, 29, 49, 51, 52, 54, 57, 59, 60, 62, 102, 114, 116, 118, 123, 136, 140, 141, 145, 148, 149, 151, 154, 156, 163, 167, 169, 170, 185, 186, 187, 192, 197, 198, 200, 202, 225, 247, 254, 257, 263, 265, 266, 268, 279, 312, 313, 347, 350, 352, 358, 369, 371, 372, 373, 375, 376, 378, 403, 404, 423, 424, 425, 428, 430, 439, 440, 441, 443, 448, 449, 450, 452, 457, 465, 481, 484, 497, 498], "connectome_measur": [50, 53, 114, 169], "connectomedb": 198, "connectomeview": [449, 452], "connor": [0, 160, 163], "conscious": 0, "consecut": [131, 163, 199, 249, 251, 253, 259, 262, 263, 454], "consensu": [170, 179, 202], "consequ": [3, 16, 88, 192, 369], "conserv": [6, 79, 81, 106, 176, 181, 202, 240, 245], "consid": [6, 26, 51, 56, 57, 58, 68, 69, 82, 94, 96, 106, 108, 111, 120, 138, 151, 158, 163, 176, 179, 198, 220, 237, 247, 263, 305, 306, 307, 308, 310, 311, 312, 313, 314, 318, 327, 329, 330, 334, 340, 342, 349, 355, 366, 373, 374, 375, 376, 377, 379, 380, 385, 388, 391, 395, 442, 455, 458, 460, 461, 481], "consider": [166, 172, 232, 247, 342, 391], "consist": [3, 7, 36, 43, 47, 68, 120, 128, 129, 135, 141, 147, 148, 149, 158, 163, 171, 172, 175, 176, 178, 179, 181, 185, 197, 202, 207, 234, 241, 251, 279, 311, 330, 372, 375, 379, 380, 454, 456, 459], "consolid": [96, 159, 163], "conson": [104, 221], "consortium": [269, 287], "constant": [68, 114, 178, 191, 305, 306, 307, 308, 310, 311, 342, 391, 433, 468, 495], "constant_features_idx": 114, "constitut": [21, 170], "constrain": [52, 53, 118, 168, 186, 205, 218, 225, 232, 233, 252, 257, 271, 455], "constrained_layout": [32, 34, 51, 54, 58, 61, 66, 70, 71, 80, 82, 102], "constraint": [52, 168, 178, 365], "construct": [10, 43, 55, 57, 101, 118, 134, 163, 167, 170, 176, 179, 180, 186, 187, 199, 314, 318, 341, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 457, 465], "constructor": [2, 121, 132, 163, 319, 320, 352], "consult": [104, 198], "consum": [149, 163, 174, 178, 188, 190, 378], "consumpt": [191, 327, 340, 373, 376, 468], "contact": 234, "contain": [2, 3, 4, 6, 23, 24, 38, 43, 44, 52, 55, 58, 65, 66, 70, 73, 74, 81, 86, 93, 96, 104, 105, 110, 112, 113, 120, 121, 128, 129, 130, 131, 133, 134, 138, 143, 148, 151, 160, 163, 164, 165, 171, 172, 175, 178, 179, 181, 185, 188, 190, 192, 198, 199, 200, 201, 202, 205, 207, 210, 217, 218, 220, 224, 226, 227, 228, 229, 235, 239, 240, 241, 243, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 271, 281, 282, 283, 284, 285, 286, 289, 291, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 319, 320, 321, 327, 330, 340, 341, 342, 345, 346, 354, 360, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 391, 438, 439, 442, 444, 445, 446, 447, 451, 453, 454, 455, 456, 457, 458, 460, 461, 465, 467, 469, 473, 474, 475, 477, 478, 479, 486, 498], "contast": 73, "content": [68, 70, 86, 129, 135, 163, 175, 179, 187, 327, 366, 435], "contest": 210, "context": [7, 96, 103, 118, 129, 130, 163, 179, 185], "contigu": [168, 178, 234, 391], "continu": [22, 24, 42, 46, 59, 135, 163, 166, 171, 172, 173, 177, 185, 192, 282, 355, 359, 360, 361, 372, 373, 374, 375, 376, 377, 378, 436, 437, 441, 442, 443, 450, 457, 458, 459], "contour": [10, 16, 19, 22, 89, 90, 129, 132, 143, 151, 154, 156, 160, 163, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 441, 442, 445, 498], "contour_fil": [393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419], "contourf": [16, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419], "contrari": [185, 366, 372, 373, 481], "contrarili": [57, 93, 375, 376, 481], "contrast": [6, 9, 15, 16, 26, 29, 35, 67, 69, 72, 77, 78, 79, 80, 81, 82, 83, 90, 92, 95, 104, 109, 110, 113, 116, 128, 129, 130, 132, 141, 145, 146, 155, 158, 163, 170, 176, 181, 182, 183, 184, 185, 199, 204, 224, 275, 276, 277, 283, 285, 302, 316, 317, 319, 320, 321, 323, 324, 325, 327, 340, 342, 367, 428, 431, 441, 442, 443, 448, 450, 454, 467, 480, 495, 497], "contrast_def": [6, 327, 431, 467], "contrast_definit": 112, "contrast_dim": 315, "contrast_fig": 70, "contrast_id": [67, 68, 70, 72, 73], "contrast_img": [73, 324], "contrast_map_filenam": [79, 109], "contrast_matrix": [67, 68, 70], "contrast_plot": 70, "contrast_typ": [65, 130, 163, 315, 323, 367], "contrast_v": [67, 68, 70, 73], "contribut": [127, 145, 148, 149, 150, 151, 152, 153, 157, 158, 160, 163, 172, 181, 188, 229, 496], "contributor": [122, 123, 125, 126, 179, 188], "control": [6, 9, 10, 12, 15, 16, 21, 24, 26, 29, 35, 40, 43, 51, 59, 64, 70, 73, 78, 81, 101, 104, 113, 116, 118, 128, 130, 132, 136, 144, 145, 149, 151, 155, 163, 165, 169, 170, 171, 172, 175, 176, 178, 179, 181, 185, 189, 197, 200, 202, 239, 247, 275, 313, 322, 326, 343, 364, 368, 369, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 429, 434, 436, 437, 438, 442, 443, 444, 446, 447, 448, 454, 467, 479, 480, 495, 497, 498], "controversi": 247, "convei": [179, 391], "conveni": [121, 191, 192, 207, 268], "convent": [23, 74, 127, 129, 160, 163, 179, 188, 303, 363, 365, 366, 428, 434, 436, 443, 454, 456], "converg": [36, 51, 94, 108, 178, 240, 243, 310, 311, 454], "convergencewarn": [36, 42, 51, 94, 108], "convers": [41, 192, 199, 372, 375, 379], "convert": [3, 6, 21, 38, 43, 44, 45, 51, 53, 68, 81, 96, 112, 120, 151, 156, 158, 160, 163, 169, 171, 176, 185, 191, 309, 325, 346, 347, 355, 372, 373, 374, 375, 376, 377, 378, 457], "convex": 178, "convolut": [69, 181, 329, 334], "convolv": [35, 70, 113, 180, 329, 480], "coord": [16, 43, 53, 55, 57, 61, 71, 89, 103, 149, 151, 163, 169, 392, 394, 395, 423, 424, 430, 444, 445, 446, 447, 453, 495], "coord_transform": [43, 50, 145, 163], "coordin": [7, 17, 20, 23, 39, 43, 52, 55, 57, 71, 96, 103, 118, 120, 126, 130, 140, 143, 145, 146, 148, 154, 158, 160, 163, 167, 169, 178, 180, 181, 185, 192, 199, 200, 206, 209, 211, 212, 213, 214, 215, 220, 230, 232, 233, 257, 265, 266, 267, 290, 313, 347, 356, 360, 378, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 424, 425, 428, 429, 430, 434, 436, 437, 439, 441, 442, 443, 444, 445, 446, 447, 449, 450, 452, 453, 466, 467, 471, 472, 476, 478, 479, 481, 495, 498], "coords_connectom": [53, 169], "copenhagen": 0, "copi": [3, 21, 38, 41, 43, 50, 51, 53, 56, 90, 98, 100, 103, 114, 115, 116, 120, 131, 132, 151, 163, 164, 178, 179, 190, 198, 228, 248, 287, 312, 313, 327, 340, 344, 348, 349, 350, 355, 356, 357, 358, 359, 360, 361, 364, 371, 374, 377, 468, 497], "copy_head": [3, 6, 16, 17, 19, 26, 27, 32, 33, 35, 38, 43, 52, 68, 71, 72, 73, 77, 83, 86, 90, 91, 94, 95, 96, 97, 98, 105, 106, 108, 111, 344, 349, 357, 358, 359, 360, 361, 364], "copy_header_from": [105, 132, 163, 356], "copy_img": [130, 136, 163], "copyto": 111, "corbetta": [118, 369], "core": [3, 17, 21, 31, 45, 46, 51, 53, 61, 178, 179, 188, 496], "coregist": [39, 70, 194, 202, 238, 490], "coregistr": [16, 140, 163, 185, 202], "corei": [118, 201, 250], "corner": [47, 141, 163, 179, 362], "coron": [15, 96, 392, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 428, 430, 434, 436, 437, 439, 441, 442, 443, 467], "corr": [23, 427], "corrcoef": 50, "correct": [6, 33, 35, 42, 45, 46, 50, 51, 59, 77, 79, 81, 83, 104, 106, 109, 110, 118, 127, 128, 151, 154, 160, 163, 165, 176, 179, 181, 182, 185, 188, 202, 287, 303, 305, 306, 308, 310, 311, 342, 343, 364, 368, 369, 391, 429, 444, 445, 446, 447, 470, 498], "correctli": [59, 68, 95, 130, 149, 151, 152, 160, 163, 174, 181, 188, 327, 368, 369, 496], "correl": [24, 28, 35, 45, 46, 49, 50, 55, 62, 64, 70, 73, 102, 103, 113, 114, 116, 118, 132, 163, 169, 171, 178, 181, 185, 187, 192, 198, 202, 218, 224, 239, 242, 244, 246, 268, 279, 312, 368, 369, 371, 377, 378, 404, 427, 433, 443, 480, 495, 497], "correlation_matric": [28, 50, 54, 198, 279], "correlation_matrix": [57, 59, 495], "correlation_measur": [54, 57, 59], "correspond": [2, 3, 6, 7, 15, 25, 31, 32, 35, 36, 38, 41, 42, 43, 47, 52, 58, 59, 66, 67, 68, 71, 74, 79, 80, 81, 82, 83, 88, 93, 94, 96, 104, 106, 113, 118, 129, 134, 153, 155, 163, 164, 166, 171, 172, 174, 176, 178, 179, 181, 185, 186, 188, 192, 199, 202, 204, 228, 233, 236, 239, 249, 254, 257, 260, 267, 273, 277, 284, 295, 296, 299, 305, 306, 307, 308, 309, 310, 311, 312, 313, 323, 324, 327, 329, 330, 334, 336, 340, 341, 342, 356, 357, 360, 365, 367, 372, 373, 374, 375, 376, 377, 379, 383, 384, 385, 386, 387, 388, 389, 391, 405, 420, 421, 426, 427, 428, 429, 434, 437, 439, 441, 442, 443, 444, 445, 446, 447, 455, 457, 458, 460, 461, 463, 466, 467, 479], "cort": [11, 22, 59, 93, 166, 255, 256], "cortex": [3, 7, 24, 33, 34, 35, 40, 41, 58, 59, 61, 64, 70, 72, 77, 81, 82, 93, 101, 107, 118, 169, 171, 176, 180, 181, 198, 199, 206, 209, 217, 218, 224, 231, 237, 253, 259, 263, 265, 271, 281], "cortexl": 267, "cortexmid": 267, "cortexr": 267, "cortic": [9, 10, 24, 25, 29, 30, 48, 58, 59, 70, 93, 116, 118, 132, 143, 145, 148, 154, 163, 166, 180, 186, 206, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 231, 232, 237, 253, 261, 263, 267, 271, 290, 293, 294, 352, 430, 446, 447, 448, 449, 450, 451, 452, 453, 475, 479, 497, 498], "corticalparcellation_yeo2011": [237, 263], "cortl": 255, "cosin": [6, 26, 35, 64, 68, 70, 71, 72, 73, 113, 127, 129, 156, 163, 202, 327, 330, 334, 368, 469, 480], "cosine00": 59, "cosine01": 59, "cosine02": 59, "cosine03": 59, "cosmo": [0, 129, 163], "cost": [33, 42, 56, 81, 111, 154, 163, 168, 172, 173, 177, 178, 179, 185, 192, 307, 308], "costli": [172, 176, 342, 391], "could": [4, 6, 26, 38, 52, 61, 68, 70, 71, 81, 87, 88, 95, 103, 105, 109, 111, 120, 121, 138, 154, 158, 159, 163, 164, 171, 174, 176, 178, 179, 181, 183, 187, 192, 315, 353, 442, 479], "couldn": 178, "counfound": 50, "count": [52, 72, 104, 129, 163, 282, 284], "counterpart": [132, 163, 172], "countvector": [282, 284], "coupl": [69, 165, 188], "cours": [70, 168, 181, 185, 373, 376, 380], "courtnei": [118, 227], "cov": [56, 317, 319, 320, 496], "cov_estim": 239, "cov_estimator_": 239, "cov_to_corr": [143, 163], "covari": [6, 45, 49, 60, 61, 62, 64, 70, 106, 116, 118, 144, 163, 166, 167, 169, 186, 198, 239, 240, 241, 242, 243, 257, 268, 314, 316, 317, 318, 319, 320, 371, 376, 391, 424, 430, 440, 448, 449, 497, 498], "covariance_": [55, 56, 61, 165], "covariance_estim": 61, "covariances_": [56, 165, 240, 241], "cover": [59, 179, 192, 209, 217, 265, 267, 422], "coverag": [132, 163, 164, 179, 496], "coveral": [143, 163], "covertli": 221, "cox": [26, 118, 227], "cpac": 247, "cpu": [3, 45, 106, 109, 164, 174, 241, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 336, 340, 342, 357, 372, 373, 374, 386, 388, 391, 455], "cr": [118, 219], "craddock": [59, 118, 160, 163, 165, 166, 194, 225, 227, 247, 252, 257, 490], "crash": [151, 163], "creat": [2, 3, 6, 10, 11, 12, 13, 18, 20, 21, 22, 23, 24, 26, 28, 35, 38, 39, 41, 42, 43, 44, 45, 50, 51, 52, 58, 68, 70, 72, 73, 74, 77, 81, 86, 90, 96, 101, 103, 104, 112, 114, 119, 120, 127, 132, 134, 140, 148, 160, 163, 164, 165, 166, 170, 171, 172, 174, 179, 180, 181, 183, 185, 186, 188, 189, 190, 192, 282, 284, 304, 312, 313, 327, 330, 340, 341, 352, 358, 367, 393, 402, 403, 404, 407, 426, 427, 428, 429, 430, 431, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 456, 463, 464, 466, 473, 475, 495, 496, 498], "create_fake_bids_dataset": [128, 163], "create_large_fmri": 111, "create_mask": 111, "create_simulation_data": 47, "creation": [77, 127, 151, 163, 312, 313, 467], "creativ": [202, 205, 252], "creativecommon": 252, "credit": 0, "criteo": 0, "criteria": [121, 179, 185, 232, 247, 282], "criterion": [202, 391, 456], "critic": [133, 163, 176, 178], "criugm": 0, "crivello": [118, 199, 249], "cron": 164, "crop": [191, 192, 349], "crop_img": 360, "croppabl": 349, "cross": [30, 34, 35, 38, 39, 43, 45, 47, 48, 54, 58, 100, 102, 115, 116, 118, 121, 128, 129, 134, 154, 163, 165, 172, 175, 228, 241, 271, 282, 286, 295, 305, 306, 307, 308, 309, 310, 311, 352, 362, 371, 377, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 428, 434, 437, 441, 442, 443, 448, 450, 495, 497], "cross_val_scor": [37, 101, 174], "cross_valid": [36, 101, 148, 163, 174, 305, 306, 307, 308], "crossbar": [402, 404, 407, 409, 411, 413, 415, 417, 419], "crowd": 229, "crucial": 176, "csernanski": [118, 228], "csf": [12, 22, 59, 219, 268, 272, 330, 368, 369], "css": [131, 163, 247], "csv": [3, 6, 31, 43, 50, 58, 120, 134, 138, 163, 164, 166, 171, 200, 208, 222, 225, 228, 247, 248, 278, 286, 312, 313, 327, 334, 340, 342, 345, 373, 376, 455, 457, 469], "csv_file": 166, "csv_to_arrai": [138, 163], "ctan": 188, "cube": [192, 466], "cubic": [127, 163, 192, 243, 469], "cubicsplin": [130, 163], "cue": [79, 109, 276, 277], "cumbersom": 181, "cumsum": 66, "cumul": [155, 163, 315], "cuneal": 93, "cur_img": [51, 89], "current": [55, 69, 73, 111, 160, 163, 164, 176, 178, 179, 185, 188, 228, 243, 251, 252, 258, 260, 287, 315, 365, 367, 373, 376, 378, 380, 444, 446, 447, 450, 457], "current_collect": 112, "current_default": [70, 77], "currentmodul": 188, "curs": [26, 96, 118], "curv": [41, 156, 163, 171, 172, 174, 178, 185, 444, 445, 446, 447, 453, 477], "curv_left": [211, 212, 213, 214, 215, 216, 290], "curv_right": [211, 212, 213, 214, 215, 216, 290], "curv_sign": 10, "curvatur": [10, 24, 113, 128, 132, 163, 211, 212, 213, 214, 215, 216, 290, 294], "custom": [10, 15, 16, 24, 41, 50, 59, 69, 128, 148, 156, 158, 163, 166, 176, 189, 305, 306, 327, 329, 334, 369, 405, 444, 446, 447, 465, 495], "custom_funct": [444, 446, 447], "customis": 369, "customiz": 369, "cut": [15, 52, 68, 96, 130, 131, 136, 146, 148, 149, 160, 163, 186, 202, 327, 384, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 428, 430, 434, 436, 437, 439, 441, 442, 443, 450, 467, 495], "cut_coord": [2, 6, 10, 16, 17, 18, 19, 21, 26, 32, 33, 38, 42, 43, 45, 46, 51, 52, 53, 58, 64, 67, 68, 71, 72, 73, 77, 79, 81, 83, 88, 89, 90, 92, 94, 95, 96, 98, 103, 106, 110, 112, 127, 136, 163, 169, 327, 340, 367, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 428, 434, 437, 441, 442, 443, 450, 467, 495], "cut_scor": 43, "cutax": [409, 411, 413, 415, 417, 419], "cutoff": [6, 68, 70, 72, 91, 156, 163, 189, 305, 306, 307, 308, 310, 311, 312, 313, 345, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 455, 457, 468, 469], "cv": [3, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 47, 54, 61, 101, 102, 114, 145, 163, 171, 176, 241, 305, 306, 307, 308, 309, 310, 311], "cv_": [305, 306, 307, 308, 310, 311], "cv_alphas_": 241, "cv_params_": [3, 36, 128, 129, 163, 305, 306, 307, 308], "cv_results_": 102, "cv_score": [36, 101], "cv_scores_": [3, 31, 32, 34, 35, 36, 41, 45, 114, 171, 241, 305, 306, 307, 308, 310, 311], "cv_scores_ova": 37, "cv_scores_ovo": 37, "cwd": [3, 4, 6, 7, 16, 24, 31, 35, 44, 51, 52, 58, 64, 65, 70, 73, 74, 77, 88, 96, 104, 111, 113], "cyan": 495, "cycl": [73, 128, 129, 163, 480], "cyclic": 13, "cytoarchitecton": 220, "cytoarchitectur": 118, "czarina": [0, 129, 163], "c\u00e9line": [0, 151, 163], "d": [0, 26, 28, 44, 54, 59, 61, 78, 103, 118, 121, 165, 178, 179, 187, 199, 202, 208, 209, 219, 226, 230, 233, 249, 260, 265, 266, 269, 282, 284, 287, 315, 322, 345, 368, 369, 429, 440, 469, 483], "d03f51": 481, "d03f52": 481, "d03f53": 481, "d03f54": 481, "d0404d": 481, "d_i": [319, 320], "daan": [118, 368, 369], "daddi": [0, 125, 136, 138, 141, 145, 146, 148, 151, 155, 163], "dadi": [54, 102, 118, 208, 254], "daejeon": 0, "dai": 188, "dale": [23, 118, 206, 211, 212, 213, 214, 215, 217, 253, 261, 290], "dalenberg": [0, 127, 128, 163], "damaraju": [118, 201, 250], "damien": [61, 118, 209, 265], "dan": [0, 118, 148, 151, 163, 236, 262], "danger": [179, 181], "danial": [118, 231, 237, 259, 263], "daniel": [0, 59, 118, 121, 148, 151, 157, 160, 163, 198, 226, 227, 228, 282, 284, 368, 369], "danilo": [0, 122, 123, 125, 126, 136, 138, 163], "danish": 0, "daphn": [118, 178], "dark": [7, 10, 23, 24, 39, 70, 114, 129, 163, 179, 188, 444, 446, 447, 451, 453], "dartel": [228, 286], "dartel_vers": [228, 286], "dartmouth": 0, "darya": [54, 102, 118], "data": [0, 1, 2, 8, 13, 16, 17, 19, 20, 21, 22, 25, 28, 30, 33, 36, 38, 39, 40, 41, 46, 48, 49, 53, 54, 56, 61, 62, 63, 65, 66, 67, 69, 71, 74, 75, 78, 79, 80, 81, 82, 83, 86, 92, 93, 94, 97, 98, 102, 104, 105, 108, 109, 110, 111, 113, 114, 116, 118, 119, 121, 127, 128, 129, 130, 132, 133, 134, 138, 141, 142, 143, 144, 145, 146, 148, 149, 151, 154, 155, 156, 158, 159, 160, 163, 164, 166, 167, 169, 172, 173, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 189, 194, 197, 198, 199, 200, 201, 202, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 224, 225, 226, 227, 229, 232, 233, 234, 235, 238, 239, 240, 241, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 327, 330, 334, 335, 336, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 426, 427, 428, 429, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 467, 469, 473, 475, 477, 479, 480, 481, 482, 483, 484, 485, 490, 495, 497, 498], "data_2d": [392, 394, 395], "data_bound": [392, 394, 395], "data_dir": [65, 103, 104, 113, 157, 163, 190, 221, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 301], "data_figure_run01": [44, 91], "data_fil": 33, "data_gen": [60, 128, 160, 163, 178], "data_img": [383, 386], "data_mask": [68, 108], "data_nam": [288, 289], "data_softwar": 232, "data_to_wrap": 55, "data_typ": [10, 23, 24, 39, 59, 70, 105, 113, 114, 294], "data_usage_agr": [228, 286], "databas": [74, 107, 118, 204, 233, 277, 282], "datad": 13, "datadb": [218, 271], "datafam": 268, "datafram": [11, 35, 65, 66, 68, 73, 74, 77, 78, 79, 80, 81, 82, 83, 103, 104, 113, 121, 129, 134, 154, 158, 159, 163, 239, 247, 248, 249, 251, 253, 254, 255, 256, 258, 259, 261, 262, 263, 265, 266, 267, 270, 279, 280, 286, 291, 312, 313, 327, 328, 330, 334, 340, 341, 342, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 431, 432, 433, 435, 442, 446, 455, 457, 466, 467, 469], "dataia": 0, "dataset": [1, 3, 4, 7, 8, 10, 11, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 43, 48, 50, 55, 57, 58, 59, 60, 63, 68, 70, 71, 72, 73, 75, 76, 79, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 103, 105, 107, 108, 111, 112, 114, 115, 116, 118, 120, 121, 128, 129, 130, 131, 132, 134, 138, 139, 143, 147, 148, 151, 152, 153, 154, 156, 157, 158, 159, 160, 163, 165, 166, 167, 170, 171, 172, 175, 177, 180, 184, 185, 186, 187, 188, 189, 192, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 211, 212, 213, 214, 215, 217, 219, 220, 223, 225, 228, 229, 230, 231, 232, 233, 236, 237, 305, 306, 307, 308, 311, 312, 327, 330, 334, 340, 343, 344, 347, 350, 352, 356, 357, 361, 365, 367, 368, 369, 370, 371, 377, 378, 391, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 431, 432, 436, 437, 438, 440, 443, 444, 445, 446, 447, 448, 450, 451, 458, 465, 466, 475, 479, 480, 481, 484, 495, 497, 498], "dataset_descript": [65, 77, 367], "dataset_fil": 46, "dataset_ho": 11, "dataset_ju": 11, "dataset_path": [103, 113, 330], "dataset_vers": 287, "dataset_yeo": 11, "datatyp": [59, 105], "date": [0, 35, 64, 70, 73, 104, 113, 157, 163, 250, 253, 272, 282, 284, 480], "davatziko": [59, 118, 368, 369], "david": [0, 59, 118, 121, 160, 163, 187, 198, 206, 217, 226, 227, 233, 253, 260, 282, 284, 368, 369, 391], "davidson": [118, 319, 320], "dawn": [118, 227], "db": [47, 198, 279], "db_name": [59, 105], "dc": [118, 198], "dcf8a4": 11, "ddof": [372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 469], "de": [0, 148, 151, 163, 198, 335], "deactiv": [6, 13, 73, 480], "dead": 164, "deal": [38, 43, 44, 69, 81, 120, 125, 154, 163, 181, 374, 481], "deanna": [61, 118, 198, 209, 232, 265, 267], "debat": 168, "debia": [310, 311], "debian": [126, 163], "debias": [310, 311], "deborah": [118, 217], "debug": [178, 179, 187, 241, 243], "decai": 468, "decemb": [118, 133, 136, 137, 151, 163, 202, 269, 287], "decent": 188, "decid": 181, "decim": [154, 163, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 437], "decis": [103, 118, 172, 176, 305, 306, 307, 308, 310, 311, 315], "decision_funct": [305, 307, 310], "declar": [6, 179, 181, 240, 243], "decod": [1, 8, 38, 42, 43, 45, 47, 48, 52, 100, 107, 115, 118, 120, 121, 128, 129, 130, 132, 134, 135, 143, 144, 148, 151, 154, 155, 156, 157, 158, 159, 163, 172, 176, 180, 185, 186, 187, 192, 224, 226, 271, 274, 281, 293, 294, 327, 330, 346, 350, 352, 357, 371, 377, 378, 404, 432, 434, 440, 442, 443, 447, 448, 450, 465, 475, 484, 496, 497, 498], "decoderifitteddecod": 3, "decoderregressor": [45, 132, 135, 151, 154, 155, 163, 172, 305, 308], "decompos": [53, 165, 169, 181, 457], "decomposit": [51, 53, 94, 100, 107, 115, 116, 118, 128, 136, 143, 146, 154, 160, 163, 169, 170, 186, 233, 268, 351, 352, 357, 371, 374, 377, 443, 448, 457, 470, 481, 484, 497], "decompositionestim": [312, 313, 455], "decompress": 190, "deconvolv": [103, 118, 171], "decor": [70, 129, 157, 163, 179], "decorrel": 178, "decreas": [26, 56, 68, 97, 118, 178, 179, 217, 428, 441, 442, 443, 450], "ded3a": 42, "dedic": [179, 228], "deem": [127, 163], "deep": [71, 77, 239, 240, 241, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 454, 455, 456, 457], "deephealth": 0, "def": [13, 43, 44, 47, 50, 56, 68, 69, 103, 111, 112, 179, 188, 444, 446, 447], "def_dofmax": 315, "def_tini": 315, "default": [3, 9, 10, 11, 13, 15, 16, 24, 26, 27, 29, 31, 32, 34, 35, 36, 37, 38, 39, 41, 45, 58, 59, 63, 65, 66, 68, 75, 81, 85, 91, 96, 99, 105, 106, 107, 114, 116, 121, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 141, 142, 147, 148, 149, 151, 154, 155, 156, 157, 158, 160, 163, 164, 171, 172, 176, 178, 179, 180, 188, 190, 191, 192, 194, 219, 238, 239, 240, 241, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 322, 323, 324, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 351, 352, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 479, 480, 481, 490, 495, 497], "default_rng": [7, 66, 179], "defaultmod": 267, "defin": [3, 6, 7, 10, 22, 31, 32, 34, 35, 38, 39, 41, 45, 50, 52, 57, 61, 64, 68, 70, 72, 73, 74, 78, 79, 82, 83, 93, 101, 104, 111, 118, 127, 128, 155, 156, 157, 158, 163, 164, 166, 168, 169, 170, 171, 176, 179, 180, 181, 184, 185, 188, 191, 192, 198, 199, 220, 224, 232, 247, 249, 253, 267, 281, 305, 306, 307, 308, 310, 311, 314, 318, 322, 327, 329, 330, 334, 360, 368, 372, 373, 375, 376, 379, 380, 405, 428, 429, 430, 434, 436, 437, 438, 439, 441, 442, 443, 457, 458, 459, 460, 461, 463, 464, 481, 488], "definit": [57, 65, 93, 96, 129, 163, 166, 174, 175, 178, 179, 180, 181, 185, 189, 208, 225, 229, 254, 367, 372, 373, 375, 376, 378, 379, 431, 460, 461, 463, 464, 481], "deg_of_freedom": 112, "degre": [59, 69, 103, 112, 181, 247, 315, 318, 324, 369, 426, 444, 446, 447], "degree_binar": 247, "degree_weight": 247, "dehaen": [74, 118, 187, 204, 210, 277], "del": [0, 47, 111], "delai": [69, 111, 131, 163, 188, 327, 329, 334], "delcroix": [118, 199, 249], "deleg": [160, 163], "delettr": [0, 151, 163], "delimit": [3, 43, 44, 101, 103, 120, 190], "delin": 22, "deliv": [181, 185], "delta": [66, 180, 334, 435], "demand": 228, "demean": [158, 163, 368, 369], "dement": [118, 228], "dementia": 228, "demian": [0, 118, 125, 148, 163, 208, 254], "demo": [39, 100, 103, 104, 113, 115, 116, 120, 132, 154, 158, 163, 179, 194, 203, 239, 261, 274, 293, 294, 301, 305, 364, 379, 381, 440, 444, 448, 475, 497], "demograph": [118, 198], "demonstr": [15, 16, 26, 41, 42, 43, 59, 65, 67, 96, 108, 111, 132, 159, 163, 170, 171, 232, 391, 495], "den": 330, "denghien": [118, 210], "deni": [74, 118, 171, 204, 210, 277], "denmark": 0, "denois": [113, 369], "denoise_strategi": [59, 130, 163, 369], "denot": [3, 6, 16, 148, 163, 181, 190, 191, 192, 224, 368, 369, 375, 379, 402, 424, 442, 457, 458, 459, 460], "dens": [55, 57, 165, 178, 310, 311, 385], "densiti": [45, 60, 77, 178, 184, 186, 219, 228, 247, 272, 286], "denver": 0, "deoxi": 181, "deoxyhaemoglobin": [181, 185], "depart": [0, 185, 234], "depend": [6, 15, 16, 41, 42, 65, 68, 73, 91, 97, 103, 105, 106, 109, 118, 127, 130, 138, 143, 148, 151, 163, 164, 172, 176, 178, 179, 181, 185, 188, 190, 247, 251, 252, 255, 256, 260, 263, 268, 279, 305, 306, 307, 308, 310, 311, 314, 318, 340, 342, 343, 350, 374, 377, 390, 391, 441, 455, 466, 467, 495], "depict": [58, 179, 191], "deploi": [127, 163], "deploy": 179, "deploy_doc": 188, "deploy_typ": 188, "deprec": [127, 128, 129, 130, 132, 134, 135, 138, 142, 143, 144, 145, 146, 148, 149, 151, 153, 154, 156, 158, 160, 163, 179, 188, 203, 239, 251, 252, 260, 264, 285, 289, 305, 306, 307, 308, 312, 313, 315, 323, 331, 332, 333, 337, 338, 339, 368, 369, 372, 373, 374, 375, 376, 377, 378, 391, 429, 455, 457, 460, 461, 465], "deprecated_cal": [132, 163], "deprecated_cmap": 13, "deprecationwarn": [132, 163, 249, 251, 252, 258, 260, 324], "dept": 0, "depth": [3, 23, 24, 25, 118, 154, 163, 206, 211, 212, 213, 214, 215, 216, 253, 290, 438, 444, 446, 447, 451, 453, 479], "der": [118, 206, 253], "derek": [0, 151, 163], "deriv": [6, 49, 62, 65, 69, 70, 72, 77, 103, 104, 108, 113, 116, 129, 155, 157, 158, 163, 170, 178, 180, 185, 186, 192, 202, 205, 217, 219, 221, 233, 235, 247, 268, 312, 313, 327, 329, 330, 331, 333, 334, 337, 339, 340, 342, 353, 365, 366, 367, 368, 369, 372, 375, 379, 392, 393, 420, 429, 441, 443, 444, 446, 447, 448, 455, 480, 497], "derivatives_fold": [65, 330], "derived_response_funct": 69, "desc": [103, 104, 113, 330, 368, 369], "descent": [178, 313], "describ": [0, 6, 19, 39, 41, 66, 68, 74, 111, 119, 120, 121, 130, 134, 163, 172, 178, 179, 181, 187, 188, 192, 204, 222, 232, 240, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 277, 278, 322, 325, 328, 330, 334, 342, 369, 391, 432], "descrip": [59, 105], "descript": [6, 24, 26, 28, 35, 42, 45, 46, 61, 64, 70, 72, 73, 77, 104, 113, 114, 119, 121, 127, 129, 130, 131, 154, 158, 163, 179, 188, 190, 191, 202, 210, 222, 231, 234, 238, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 270, 272, 273, 274, 278, 279, 280, 282, 283, 284, 285, 286, 288, 289, 291, 293, 295, 296, 297, 298, 299, 300, 301, 329, 342, 345, 349, 357, 362, 363, 369, 391, 426, 480, 490], "descriptor": [176, 328, 391], "deserv": [0, 192], "design": [6, 35, 44, 47, 63, 64, 65, 67, 70, 71, 72, 73, 75, 76, 77, 78, 81, 82, 83, 84, 104, 109, 113, 116, 118, 128, 132, 133, 154, 155, 156, 158, 163, 171, 174, 178, 179, 181, 182, 183, 184, 185, 187, 199, 210, 222, 270, 277, 314, 317, 318, 319, 320, 325, 327, 328, 334, 336, 340, 341, 342, 343, 350, 356, 367, 370, 431, 432, 433, 443, 448, 467, 480, 497, 498], "design_column": [65, 325], "design_matric": [64, 65, 73, 103, 180, 327], "design_matrices_": [6, 67, 68, 70, 103, 327], "design_matrix": [6, 44, 64, 65, 67, 68, 70, 77, 78, 79, 80, 81, 82, 83, 113, 328, 334, 340, 341, 342, 370, 431, 432, 433], "design_matrix1": [73, 210, 270], "design_matrix2": [73, 210, 270], "design_matrix_": 340, "desikan": [118, 217], "desir": [2, 65, 188, 192, 312, 313, 326, 327, 329, 334, 340, 342, 343, 365, 367, 420, 421, 455, 467], "despit": [3, 32, 187], "destin": [436, 437, 442, 443, 450], "destination_path": 467, "destri": 10, "destrieux": [10, 24, 114, 118, 126, 129, 143, 154, 163, 194, 238, 253, 261, 495], "destrieux2009": 10, "destrieux_2009": 10, "destrieux_atla": [10, 23, 24], "destrieux_surfac": [10, 23, 24, 114], "det": [151, 163, 258], "detail": [2, 3, 7, 9, 10, 15, 16, 17, 20, 23, 24, 28, 30, 31, 33, 35, 42, 49, 51, 53, 55, 57, 61, 63, 64, 65, 70, 73, 74, 76, 83, 85, 93, 97, 103, 104, 106, 107, 112, 113, 116, 120, 121, 123, 143, 148, 151, 160, 163, 164, 165, 168, 169, 171, 172, 173, 174, 176, 177, 178, 179, 182, 188, 189, 190, 192, 194, 210, 217, 220, 239, 247, 255, 256, 259, 268, 273, 277, 295, 296, 297, 298, 299, 300, 305, 306, 307, 308, 312, 313, 320, 327, 330, 340, 345, 349, 357, 362, 363, 367, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 391, 435, 451, 454, 455, 457, 459, 480, 481, 486, 487, 495, 496], "details": 51, "detect": [16, 26, 45, 46, 69, 79, 81, 91, 103, 106, 110, 118, 165, 176, 181, 185, 192, 239, 368, 369, 454, 495], "determin": [11, 64, 81, 96, 103, 104, 106, 112, 176, 178, 179, 205, 220, 241, 311, 330, 341, 365, 383, 384, 385, 386, 387, 388, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 428, 436, 437, 438, 442, 443, 444, 446, 447, 450, 454, 479], "determinist": [131, 134, 159, 163, 179, 185, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 454, 479], "detrend": [43, 44, 52, 54, 55, 56, 57, 58, 59, 61, 64, 91, 93, 94, 96, 102, 103, 111, 120, 125, 148, 156, 158, 163, 191, 192, 312, 313, 345, 351, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 429, 455, 457, 469, 470, 481], "detrended_data": 91, "detriment": [45, 369], "dev": [164, 179, 188, 218, 271, 499], "dev5": [35, 64, 70, 73, 104, 113, 480, 481], "develop": [50, 58, 59, 87, 91, 93, 94, 118, 130, 146, 151, 163, 164, 165, 166, 168, 170, 178, 179, 187, 188, 194, 217, 229, 236, 241, 262, 268, 429], "development_dataset": [54, 102], "development_fmri": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 87, 91, 93, 94, 97, 102, 108], "developmental_fmri": [152, 163], "deviat": [54, 165, 305, 306, 307, 308, 310, 311], "devis": 178, "df": [103, 112], "df_den": [316, 317, 319, 320, 321], "df_model": [314, 318], "df_num": [316, 317, 319, 320], "df_resid": [160, 163], "df_residu": 318, "dhrf": [331, 333, 337, 339], "di": 118, "diag": [66, 191, 433, 440], "diagnosi": [185, 187], "diagnost": [171, 175, 200], "diagon": [56, 57, 59, 61, 88, 141, 163, 178, 191, 239, 243, 245, 246, 359, 360, 422, 433, 440, 458], "diagram": [32, 181], "diamagnet": [181, 185], "diamet": 185, "diamond": 86, "dichotom": [26, 118], "dickerson": [118, 217], "dict": [45, 103, 106, 109, 121, 129, 132, 163, 199, 201, 239, 240, 241, 250, 251, 252, 260, 282, 283, 284, 285, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 318, 323, 327, 330, 336, 340, 342, 345, 358, 366, 367, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 429, 430, 438, 439, 446, 447, 451, 454, 455, 456, 457, 465, 467, 469, 473, 475], "dict_init": [51, 53, 313], "dict_kei": 61, "dict_learn": [51, 53, 169], "dict_learning_onlin": [51, 53], "dictionari": [7, 22, 35, 39, 49, 62, 68, 70, 104, 108, 111, 116, 118, 121, 134, 155, 163, 167, 171, 172, 185, 186, 192, 199, 208, 225, 226, 239, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 293, 305, 306, 307, 308, 312, 313, 327, 340, 342, 352, 353, 366, 367, 371, 372, 375, 376, 379, 391, 402, 404, 424, 425, 428, 429, 430, 438, 440, 441, 443, 448, 451, 457, 473, 474, 475, 497, 498], "dictionary_learning_resting_st": 51, "dictlearn": [51, 53, 128, 134, 136, 146, 163, 169, 170], "dictlearning_components_img": 51, "did": [59, 94, 108, 142, 158, 163, 181], "didact": [3, 141, 163, 172, 174, 179], "didn": 179, "diego": [0, 118, 198], "dieterich": [118, 217], "diff": [160, 163], "differ": [2, 7, 10, 16, 20, 21, 22, 24, 26, 30, 31, 41, 48, 49, 54, 55, 57, 58, 61, 62, 66, 68, 69, 70, 71, 72, 73, 74, 77, 81, 82, 83, 91, 93, 96, 101, 102, 103, 105, 106, 107, 111, 116, 118, 120, 127, 129, 130, 134, 149, 155, 157, 163, 164, 166, 167, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 189, 190, 198, 202, 208, 210, 218, 231, 239, 241, 254, 263, 268, 271, 295, 296, 297, 298, 299, 300, 305, 307, 308, 310, 311, 319, 320, 323, 327, 329, 330, 334, 336, 340, 346, 347, 350, 352, 356, 357, 358, 365, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 390, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 424, 426, 428, 430, 434, 436, 437, 440, 441, 442, 443, 448, 455, 457, 466, 467, 479, 480, 481, 497, 498], "differenti": [41, 68, 72], "difficult": [41, 88, 165, 172, 177, 192], "difficulti": 36, "diffus": [118, 171, 185], "difumo": [22, 50, 155, 163, 194, 254, 490], "difumo_atlas": [50, 481], "digicosm": 0, "digit": [118, 199], "dil_bin_p_values_and_vt": 96, "dil_bin_p_values_and_vt_img": 96, "dilat": [91, 96, 185, 191, 273, 296, 299, 383, 384, 385, 386, 387, 388], "dillon": [148, 163], "dim": [3, 22, 24, 31, 50, 59, 105, 139, 141, 145, 163, 171, 315, 317, 319, 320, 428, 441, 442, 443, 450], "dim_info": [59, 105], "dimartino": [118, 227], "dimens": [2, 16, 22, 31, 35, 36, 41, 43, 50, 52, 68, 89, 96, 120, 130, 156, 163, 175, 181, 185, 191, 192, 198, 228, 239, 245, 246, 254, 260, 279, 305, 306, 307, 308, 312, 313, 315, 317, 319, 320, 327, 342, 345, 346, 352, 353, 356, 357, 362, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 424, 426, 429, 440, 441, 455, 457, 469], "dimension": [6, 26, 28, 52, 72, 96, 118, 132, 138, 155, 160, 163, 178, 187, 200, 208, 245, 246, 254, 260, 279, 312, 313, 315, 346, 390, 454, 455, 456], "dimitri": [0, 118, 127, 136, 148, 163, 169, 178, 179, 204, 240, 243, 277, 457], "dimitripapadopoulo": 179, "diogo": [0, 160, 163], "dir": [70, 164, 330, 365], "dirac": [327, 329, 334], "direct": [16, 43, 54, 96, 101, 145, 154, 163, 166, 167, 179, 188, 192, 208, 210, 227, 234, 254, 305, 306, 362, 364, 365, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 408, 410, 411, 412, 414, 415, 416, 417, 418, 421, 422, 428, 430, 434, 436, 437, 439, 441, 442, 443, 458, 467, 495, 498], "directli": [3, 6, 34, 35, 41, 50, 51, 54, 65, 70, 73, 88, 91, 98, 111, 114, 132, 140, 144, 146, 148, 163, 168, 171, 174, 179, 181, 190, 192, 282, 330, 391, 405, 441], "directori": [3, 6, 65, 73, 96, 104, 113, 116, 168, 179, 190, 240, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 301, 304, 305, 306, 307, 308, 310, 311, 312, 313, 327, 330, 340, 346, 365, 367, 368, 369, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 427, 455, 456, 457], "disabl": [121, 129, 130, 149, 151, 155, 163, 178, 454], "disadvantag": 192, "disagr": 426, "discard": [6, 121, 181, 246, 282, 304, 330, 365, 385, 388, 469, 479], "discard_diagon": [239, 245], "discount": 68, "discourag": 179, "discov": [2, 179, 186], "discoveri": [6, 78, 79, 81, 83, 118, 181, 185, 187, 227, 322], "discrep": [68, 178], "discret": [68, 72, 127, 155, 156, 163, 202, 327, 336, 355, 368, 372, 373, 374, 375, 376, 377, 378, 457, 469], "discrete_atlas_img": 12, "discrete_vers": 12, "discrimin": [3, 31, 33, 54, 96, 102, 118, 120, 171, 186, 187], "discriminant_analysi": 101, "discuss": [52, 59, 148, 163, 168, 171, 174, 176, 181, 184, 188, 191, 369, 391, 496], "diseas": 228, "disk": [2, 3, 4, 6, 104, 107, 111, 112, 113, 120, 121, 127, 132, 134, 148, 154, 155, 160, 163, 171, 179, 190, 191, 192, 221, 264, 274, 282, 284, 287, 305, 306, 327, 340, 382, 444, 446, 447, 465, 467, 471, 472, 476], "disord": [118, 185, 187, 217], "dispers": [6, 68, 69, 180, 317, 319, 320, 327, 329, 331, 334, 337], "displac": [59, 202, 268, 368], "displai": [2, 3, 4, 6, 11, 12, 14, 15, 17, 18, 19, 21, 22, 26, 27, 28, 38, 42, 43, 45, 50, 51, 52, 53, 54, 58, 64, 65, 67, 68, 69, 70, 71, 72, 73, 77, 83, 86, 89, 91, 93, 94, 95, 96, 98, 101, 102, 103, 106, 109, 110, 127, 130, 131, 132, 134, 140, 145, 146, 148, 149, 151, 155, 156, 158, 160, 163, 164, 166, 169, 170, 176, 181, 186, 191, 327, 334, 340, 373, 376, 378, 380, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 457, 465, 467, 481, 489, 498], "display_mod": [2, 6, 10, 14, 15, 16, 17, 19, 26, 32, 33, 38, 42, 43, 45, 46, 51, 52, 56, 61, 65, 67, 68, 71, 72, 77, 78, 81, 89, 90, 94, 98, 104, 106, 109, 110, 112, 120, 141, 158, 163, 327, 340, 367, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 428, 430, 434, 436, 437, 439, 441, 442, 443, 467, 495], "displayed_map": [57, 373, 376, 380, 457], "displayed_spher": [61, 378], "disregard": 311, "dist": 188, "distanc": [35, 64, 73, 104, 310, 422, 426, 466, 467, 479, 480], "distinct": [82, 103, 118, 178, 198, 253], "distinguish": [13, 54, 96, 101, 102, 172, 176, 181, 186, 190], "distort": [160, 163, 368], "distribut": [3, 6, 15, 16, 23, 33, 34, 40, 51, 52, 58, 81, 96, 101, 118, 155, 159, 163, 171, 176, 178, 181, 185, 206, 211, 212, 213, 214, 215, 218, 226, 261, 271, 315, 342, 391, 426, 427], "dive": 187, "diverg": [13, 15, 26, 433], "divers": [134, 163], "divid": [58, 78, 79, 81, 141, 163, 172, 181, 185, 245, 455], "divis": [0, 93, 232], "dl": [118, 219], "dm_titl": 103, "dmn": [21, 54, 64, 480], "dmn_contrast": 64, "dmn_coord": [61, 192, 495], "dmn_network": 89, "dmn_node": 21, "dmn_z_map": 64, "dni": 224, "do": [0, 3, 6, 10, 23, 24, 25, 27, 32, 33, 35, 36, 39, 41, 43, 45, 52, 53, 54, 60, 64, 65, 67, 68, 69, 71, 77, 79, 81, 82, 96, 101, 103, 104, 105, 111, 113, 114, 120, 131, 133, 134, 135, 145, 149, 154, 158, 163, 164, 165, 169, 170, 171, 172, 174, 176, 178, 187, 188, 190, 191, 192, 194, 199, 238, 239, 241, 249, 273, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 336, 340, 342, 345, 357, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 386, 388, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 455, 457, 469, 479, 490, 495], "do_cca": 312, "doc": [3, 4, 15, 17, 19, 21, 31, 36, 46, 50, 51, 53, 55, 61, 70, 81, 94, 108, 114, 127, 128, 129, 130, 131, 132, 133, 134, 136, 141, 143, 144, 148, 151, 153, 154, 157, 158, 159, 160, 163, 179, 217, 220, 369], "dock": [0, 129, 130, 132, 141, 145, 147, 148, 149, 151, 152, 160, 163], "docstr": [127, 128, 132, 149, 154, 157, 160, 163, 179, 188, 317, 319, 320], "doctest": [129, 163], "doctre": 179, "document": [0, 2, 3, 4, 13, 20, 28, 46, 47, 52, 53, 55, 56, 59, 61, 101, 103, 107, 112, 119, 120, 123, 125, 128, 130, 131, 136, 138, 140, 141, 142, 143, 148, 151, 153, 158, 159, 163, 166, 168, 169, 170, 171, 172, 173, 174, 176, 177, 183, 186, 187, 190, 192, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 495, 496], "doe": [3, 6, 26, 31, 41, 52, 68, 69, 77, 106, 120, 121, 131, 138, 147, 151, 160, 163, 164, 171, 172, 176, 178, 179, 180, 181, 187, 192, 249, 271, 316, 318, 321, 330, 351, 363, 365, 367, 369, 395, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 442, 446, 454, 466, 470, 495], "doesn": [107, 179], "dof": [181, 315, 324], "dofmax": 315, "dohmatob": [0, 52, 118, 122, 125, 136, 138, 141, 163, 168, 169, 177, 457], "doi": [0, 3, 23, 26, 33, 34, 39, 40, 43, 44, 47, 51, 52, 54, 59, 61, 78, 101, 102, 106, 118, 121, 165, 166, 168, 170, 172, 173, 176, 177, 185, 187, 197, 198, 199, 201, 202, 204, 205, 206, 208, 209, 211, 212, 213, 214, 215, 217, 218, 219, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 239, 247, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 269, 271, 277, 281, 282, 284, 287, 290, 307, 308, 312, 313, 322, 342, 345, 368, 369, 391, 429, 456, 462, 469, 470], "domain": [41, 187, 313], "domin": [171, 291], "don": [10, 25, 26, 35, 68, 83, 111, 118, 121, 130, 163, 179, 187, 188, 282, 284, 438, 479, 495], "donald": 118, "donder": 0, "done": [2, 3, 4, 6, 7, 10, 11, 18, 20, 22, 28, 33, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 50, 51, 52, 53, 54, 56, 60, 61, 65, 68, 72, 73, 74, 77, 79, 81, 82, 83, 96, 101, 102, 104, 105, 106, 107, 109, 111, 120, 121, 134, 135, 158, 160, 163, 164, 165, 166, 168, 171, 172, 174, 176, 178, 181, 188, 191, 240, 241, 305, 306, 307, 308, 310, 311, 312, 313, 327, 340, 345, 346, 354, 364, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 455, 456, 457, 469], "dor": 54, "dorsal": [24, 114, 444, 446, 447, 481], "dorsalattent": 267, "dosenbach": [118, 139, 163, 232, 247, 265, 267], "dot": [44, 47, 58, 103, 107, 178, 317, 318, 319, 320, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419], "doubl": [179, 180, 255, 256], "dougla": [118, 319, 320], "down": [2, 71, 107, 168, 178, 179, 307], "downlo": 22, "download": [4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 118, 119, 138, 139, 141, 142, 144, 148, 151, 154, 155, 157, 163, 164, 165, 166, 168, 171, 179, 187, 194, 198, 207, 208, 210, 219, 221, 224, 225, 227, 228, 232, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 301, 304, 498], "download_new": [282, 284], "downloaded_fil": [221, 264, 274, 287], "downsampl": [113, 169, 191, 207, 268, 429], "downsid": [59, 68], "downsiz": 168, "downstream": [105, 129, 163], "dparsf": 247, "dpi": [393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419], "dr": [164, 228], "draft": 179, "drag": 188, "draw": [15, 16, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 432, 479], "draw_2d": [392, 394, 395], "draw_cross": [26, 53, 79, 98, 169, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 434, 437, 441, 442, 443, 450], "draw_left_right": [392, 394, 395], "draw_posit": [392, 394, 395], "draw_scale_bar": [392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419], "drawback": 68, "drawn": [25, 68, 96, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 434, 437, 441, 442, 443, 450, 467, 479], "drf": 69, "drift": [6, 35, 64, 70, 71, 72, 73, 103, 113, 202, 327, 334, 368, 433, 469, 480], "drift_model": [6, 26, 35, 64, 66, 68, 70, 71, 72, 73, 113, 180, 327, 330, 334, 480], "drift_ord": [66, 68, 180, 327, 330, 334], "drive": 58, "driven": [68, 170, 179, 187, 202, 251, 334], "drop": [68, 71, 103, 132, 143, 144, 145, 149, 161, 163, 179, 187, 188, 372, 375, 379], "ds000005": 223, "ds000030": [65, 269], "ds000030_r1": [65, 287], "ds000228": [207, 268], "dseg": [179, 249, 251, 253, 255, 256, 258, 259, 261, 262, 263, 372, 375, 379], "dsm_iv_tr": 247, "dsp": 210, "dsp_minus_ssp": [73, 480], "dsp_minus_ssp_for_dst": [73, 480], "dsst": 0, "dst": 210, "dst_minus_sst": [73, 480], "dst_minus_sst_for_dsp": [73, 480], "dstdsp": 210, "dstdsp_minus_sstssp": [73, 480], "dstssp": 210, "dt": 69, "dtseri": [368, 369], "dtype": [3, 21, 24, 35, 38, 43, 44, 46, 47, 51, 52, 53, 55, 56, 57, 59, 61, 69, 72, 79, 81, 91, 93, 94, 104, 107, 111, 135, 142, 143, 144, 148, 149, 163, 190, 328, 331, 332, 333, 337, 338, 339, 344, 346, 354, 355, 358, 360, 372, 373, 374, 375, 376, 377, 378, 382, 454, 456, 457, 463, 473, 475, 481], "dtypelik": [473, 475], "dtyulman": [148, 163], "dua": 228, "dual": [36, 54, 56, 101, 102, 118, 178, 240, 247, 305, 307], "dual_regress": 247, "dualiti": 243, "duan": [118, 227], "dubi": [61, 118, 209, 265], "dubnica": 0, "duchi": [118, 178], "due": [15, 36, 38, 42, 43, 44, 68, 72, 81, 96, 111, 127, 131, 134, 151, 157, 158, 159, 160, 163, 168, 172, 174, 179, 181, 247, 310, 311, 495], "duff": [118, 198], "dugr\u00e9": [0, 129, 163], "duke": 0, "dummi": [3, 102, 114, 134, 135, 156, 163, 171, 172, 174, 179, 305, 306, 307, 308, 334, 456], "dummy_classifi": [3, 34, 305, 307], "dummy_decod": 3, "dummy_output_": [305, 306, 307, 308], "dummy_regressor": [172, 306, 308], "dummyclassifi": [101, 102, 156, 163, 174, 305, 306, 307, 308], "dummyregressor": [305, 306, 307, 308], "duplic": [151, 163, 203], "dupr": [0, 145, 149, 151, 152, 153, 163], "duran": [0, 127, 163], "durat": [6, 35, 66, 68, 69, 74, 129, 163, 180, 181, 190, 329, 334, 435], "dure": [3, 6, 58, 59, 67, 96, 98, 103, 104, 118, 120, 130, 148, 155, 163, 171, 172, 178, 179, 181, 185, 187, 188, 192, 221, 222, 233, 239, 240, 241, 243, 247, 260, 305, 306, 307, 308, 327, 340, 342, 372, 375, 379, 383, 384, 385, 386, 387, 388, 438, 454], "dutch": 0, "dvar": [59, 368], "dvipng": 188, "dviwar": 188, "dwi": 65, "dwindl": 178, "dx_group": 247, "dylan": [39, 118, 176, 227], "dynam": [31, 118, 171, 369], "e": [3, 6, 16, 23, 25, 31, 42, 43, 46, 47, 50, 51, 59, 61, 68, 78, 90, 96, 103, 106, 107, 109, 111, 118, 120, 121, 128, 136, 154, 156, 157, 160, 163, 165, 166, 169, 171, 174, 176, 177, 178, 179, 180, 181, 184, 185, 187, 188, 191, 192, 198, 202, 205, 206, 208, 209, 217, 226, 230, 232, 233, 239, 240, 241, 243, 252, 253, 260, 265, 266, 267, 269, 282, 284, 287, 305, 306, 307, 308, 309, 310, 311, 312, 313, 317, 319, 320, 327, 334, 340, 342, 343, 344, 345, 346, 347, 349, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 430, 438, 441, 444, 445, 446, 447, 449, 450, 451, 453, 454, 455, 456, 457, 460, 461, 463, 469, 479, 495], "e15ebc98c2f13c57d7605faf05fe3de3": 22, "e29482": [118, 187], "e69422": 11, "e_i": [319, 320], "each": [3, 6, 7, 11, 15, 16, 21, 22, 23, 24, 25, 31, 36, 38, 39, 41, 42, 43, 50, 51, 52, 53, 54, 58, 59, 61, 64, 65, 66, 70, 71, 72, 73, 80, 82, 88, 90, 96, 101, 102, 103, 104, 106, 109, 111, 113, 114, 121, 134, 143, 148, 149, 151, 154, 156, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 183, 185, 187, 188, 190, 191, 192, 198, 199, 202, 204, 207, 208, 217, 220, 223, 226, 231, 232, 234, 239, 240, 241, 243, 247, 250, 261, 263, 267, 268, 279, 282, 284, 291, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 317, 319, 320, 327, 329, 330, 334, 340, 342, 345, 351, 357, 362, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 386, 388, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 426, 427, 428, 430, 434, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 454, 455, 456, 457, 458, 459, 460, 461, 463, 467, 469, 470, 471, 478, 479, 480, 495], "each_index_of_map3": [53, 169], "earli": [118, 177, 282, 284, 454], "earlier": 111, "early_stop": [178, 241], "earlystopprob": 178, "eas": 179, "easi": [17, 64, 70, 77, 96, 111, 120, 121, 169, 170, 172, 175, 179, 180, 185, 187, 192, 368], "easier": [6, 24, 41, 68, 111, 137, 142, 157, 163, 170, 171, 178, 179, 437], "easiest": [166, 171, 172], "easili": [2, 3, 10, 16, 24, 32, 33, 41, 42, 52, 61, 65, 96, 120, 121, 132, 134, 158, 163, 171, 172, 174, 176, 177, 178, 179, 180, 185, 188, 255, 256, 277, 340, 342], "ec": 52, "eccentr": [456, 462], "echo": [185, 330], "econom": [118, 391], "econometr": [118, 314, 318, 319, 320], "econometricanalysi": [118, 314, 318], "ecosystem": 186, "ed": [118, 166, 319, 320], "edg": [50, 55, 57, 61, 96, 135, 151, 163, 165, 166, 185, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 430, 440, 449, 498], "edge_cmap": [149, 151, 163, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430, 449], "edge_kwarg": [396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430], "edge_threshold": [23, 50, 53, 56, 57, 61, 149, 151, 163, 169, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430, 449, 495], "edge_vmax": [56, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430], "edge_vmin": [56, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430], "edgecolor": [34, 43, 129, 163, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 430, 434, 436, 437, 439, 441, 442, 443], "edinburgh": 118, "edit": [118, 156, 163, 164, 179, 188, 314, 318], "editor": [118, 165, 219, 239], "edmond": [0, 156, 163], "edu": [118, 228, 232, 237, 263, 286, 314, 318], "educ": [118, 228, 234, 279, 314, 318, 450], "edward": [118, 187], "ee9e0d5a40146477e9197f0d13da9b32": 40, "eeg": 185, "eff_map": 6, "effect": [26, 35, 52, 56, 64, 68, 70, 71, 72, 77, 81, 82, 91, 97, 98, 103, 106, 113, 118, 129, 130, 147, 163, 164, 170, 172, 176, 178, 180, 181, 188, 192, 217, 239, 240, 241, 255, 256, 283, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 319, 320, 321, 323, 324, 327, 330, 340, 342, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 391, 428, 441, 442, 443, 448, 450, 454, 455, 456, 457, 465, 480], "effect_s": [6, 73, 82, 103, 185, 315, 327, 340], "effect_statmap": [65, 77, 367], "effect_vari": [73, 82, 315, 327, 340], "effects_map_path": [340, 342], "effects_of_interest": [73, 480], "effficieni": 66, "efficaci": [59, 118, 369], "effici": [31, 68, 111, 118, 129, 163, 170, 172, 178, 179, 240, 243, 282, 307, 308], "effort": [179, 188], "eg": [88, 91, 145, 148, 154, 163, 165, 166, 171, 191, 192, 423, 424, 465], "eger": [47, 52, 118, 177], "eichel": [118, 201, 250], "eickenberg": [0, 118, 122, 163, 177], "eickhoff": [59, 118, 231, 233, 259, 260, 368, 369], "eigen": [28, 198, 279], "eigen_regress": [28, 279], "eigenvector": 247, "eigenvector_binar": 247, "eigenvector_weight": 247, "eileen": [118, 217], "either": [2, 4, 10, 37, 38, 42, 43, 44, 45, 50, 54, 55, 56, 57, 58, 59, 61, 64, 71, 91, 93, 94, 96, 101, 102, 103, 106, 107, 108, 109, 110, 120, 134, 148, 155, 157, 163, 166, 168, 179, 180, 184, 185, 190, 192, 202, 260, 263, 271, 305, 306, 307, 308, 310, 311, 317, 319, 320, 343, 344, 372, 373, 374, 375, 376, 377, 379, 380, 381, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 426, 428, 429, 430, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 450, 451, 453, 455, 457, 467, 477, 478, 479, 495, 496], "ej": [118, 198], "ekman": [0, 122, 163], "elabor": [44, 136, 163, 495], "elaps": [33, 35, 37, 38, 39, 42, 45, 46, 47, 51, 53, 56, 60, 61, 101, 106, 109], "elapsed_tim": 47, "elast": 47, "elasticnetcv": 47, "electr": 185, "electroencephalographi": 185, "electrophysiolog": 118, "element": [3, 21, 26, 32, 51, 52, 53, 105, 141, 160, 163, 170, 176, 185, 239, 245, 246, 249, 305, 306, 307, 308, 309, 310, 311, 345, 362, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 387, 405, 438, 457, 463, 469, 479], "elementari": 120, "elena": [26, 118, 201, 250], "elev": [23, 405, 444, 446, 447], "elicit": [66, 74, 81], "elif": [10, 114], "elimin": [47, 101, 174, 177, 441, 442], "elizabeth": [0, 118, 145, 149, 151, 152, 153, 163, 319, 320], "ell": [314, 318], "elli": [0, 160, 163], "elliott": [39, 59, 118, 368, 369], "els": [26, 47, 50, 69, 74, 96, 97, 103, 114, 280, 305, 306, 307, 308, 310, 445], "elvi": [0, 52, 118, 122, 125, 136, 138, 141, 163, 168, 169, 177, 457], "emb": 495, "embed": [54, 102, 465], "emerg": 179, "emerton": 0, "emiliano": [118, 202], "emit": 448, "emma": [118, 198], "emot": 185, "emp_cov": 243, "emphas": [205, 252], "empir": [52, 168, 175, 176, 177, 178, 240, 243, 369, 498], "emploi": [65, 184, 185, 218, 466, 467], "empti": [15, 77, 106, 113, 121, 129, 131, 132, 151, 159, 163, 179, 188, 199, 255, 256, 271, 305, 306, 307, 308, 365, 372, 373, 375, 376, 425, 440, 457, 460, 461, 473, 474, 481, 492], "empty_filt": 282, "en": [0, 59, 164, 181, 199, 224, 249, 369], "enabl": [15, 17, 26, 81, 108, 129, 130, 154, 158, 163, 171, 174, 186, 192, 368, 396, 397, 398, 399, 400, 401, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 496], "enable_metadata_rout": [239, 240, 241, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 454, 455, 456, 457], "encapsul": [68, 239, 240, 241, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 454, 455, 456, 457], "enclos": 179, "encod": [30, 41, 44, 48, 72, 77, 86, 116, 118, 172, 173, 192, 281, 307, 308, 347, 364, 371, 374, 377, 419, 443, 448, 481, 497], "encompass": [246, 312, 313], "encount": [61, 79, 81, 114, 444, 446, 447], "encourag": [158, 163, 179], "end": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 130, 145, 155, 163, 176, 178, 179, 191, 202, 292, 366, 367, 468, 469], "endian": [59, 93, 105, 144, 163, 354, 360], "endswith": 13, "energi": [178, 202], "enet_cv": 47, "enforc": [52, 91, 135, 160, 163, 165, 178, 179, 310, 311, 327, 473, 475], "engag": 496, "engemann": [118, 171], "engin": [0, 10, 129, 131, 158, 163, 187, 192, 380, 405, 438, 444, 446, 447, 495, 496], "enh": 179, "enhanc": [24, 26, 68, 69, 73, 118, 185, 188, 194, 291, 301, 315, 342, 391], "enough": [15, 61, 171, 178, 187, 192, 360], "ensembl": [3, 33, 42, 45, 118, 171, 172, 175, 177, 185, 186, 219, 307, 308, 498], "ensur": [59, 61, 103, 114, 131, 133, 134, 148, 155, 163, 176, 178, 179, 181, 188, 287, 315, 340, 342, 372, 375, 392, 394, 395, 460], "ensure_finit": [143, 163, 345, 382, 385, 469], "ensure_ndim": 346, "enter": [35, 70, 113, 181, 480], "entir": [111, 164, 171, 176, 192, 372, 375, 460], "entiti": [129, 163, 366], "entri": [86, 127, 129, 163, 179, 188, 305, 306, 307, 308, 317, 319, 320, 349, 372, 375, 379, 405, 445, 479], "enumer": [3, 23, 24, 36, 43, 50, 51, 54, 60, 67, 68, 69, 70, 73, 74, 81, 96, 103, 104, 106, 107, 109, 113, 114, 375], "env": 188, "environ": [3, 38, 52, 55, 56, 61, 65, 77, 79, 111, 118, 130, 148, 149, 151, 158, 163, 164, 171, 187, 188, 190, 202, 292, 450, 496], "ep": [42, 310, 311], "epi": [3, 6, 12, 16, 27, 32, 33, 94, 96, 97, 108, 185, 187, 191, 192, 234, 305, 306, 307, 308, 312, 313, 374, 377, 385, 434, 437, 443, 455, 481, 495], "epi_filenam": [91, 192], "epi_img": [67, 68, 70, 91, 192, 222, 278, 385, 388, 434], "epoch": [68, 313], "eproc_bold": 65, "equal": [13, 79, 101, 151, 158, 160, 163, 174, 183, 202, 252, 257, 263, 305, 306, 307, 308, 310, 311, 312, 313, 315, 327, 340, 343, 357, 360, 364, 372, 374, 375, 377, 379, 383, 385, 386, 388, 450, 451, 453, 455, 467], "equip": 234, "equival": [15, 83, 109, 127, 135, 163, 176, 178, 181, 188, 205, 277, 305, 306, 307, 308, 312, 313, 356, 373, 374, 376, 377, 383, 384, 385, 386, 387, 388, 448, 455, 457], "erhardt": [26, 118, 201, 250], "eric": [0, 23, 61, 118, 131, 145, 148, 149, 151, 163, 206, 209, 253, 261, 265], "erik": [26, 118, 201, 250], "erin": [118, 197, 247], "eros": [91, 185, 273, 296, 299, 383, 384, 385, 386, 387, 388], "erramuzp": [148, 163], "errant": [131, 163], "erron": [154, 163, 259], "error": [3, 6, 45, 46, 68, 78, 81, 83, 86, 96, 107, 127, 129, 132, 133, 138, 145, 148, 151, 160, 163, 164, 166, 171, 172, 176, 179, 181, 185, 188, 239, 240, 241, 305, 306, 307, 308, 309, 310, 311, 312, 313, 317, 319, 327, 334, 340, 342, 343, 345, 346, 367, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 454, 455, 456, 457, 496], "errorts_statmap": [65, 77, 367], "especi": [96, 149, 158, 163, 165, 171, 190, 451, 498], "esposito": [103, 118], "essen": [118, 121, 198, 226, 282, 284, 369], "essenc": 180, "essenti": [16, 41, 69, 82, 185], "establish": [96, 177, 179, 232], "esteban": [0, 148, 163], "estim": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 66, 67, 69, 71, 72, 73, 74, 77, 80, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 118, 120, 127, 129, 130, 134, 135, 146, 154, 155, 160, 163, 165, 170, 173, 175, 176, 181, 183, 184, 185, 187, 188, 198, 202, 228, 231, 237, 239, 240, 241, 243, 259, 263, 279, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 323, 324, 327, 340, 342, 346, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 440, 448, 454, 455, 456, 457, 488, 497, 498], "estimator_": [305, 306, 307, 308], "estimator_nam": 41, "est\u00e8v": [0, 122, 123, 125, 126, 136, 138, 141, 163], "eswar": [118, 201, 250], "et": [3, 23, 26, 30, 33, 39, 41, 47, 48, 51, 52, 54, 59, 61, 68, 74, 78, 101, 102, 103, 106, 116, 121, 143, 148, 163, 165, 168, 171, 172, 173, 176, 177, 178, 187, 192, 197, 198, 199, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 239, 240, 243, 247, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 271, 277, 279, 280, 281, 282, 284, 290, 305, 308, 311, 312, 313, 319, 320, 322, 345, 347, 352, 364, 368, 369, 371, 374, 377, 391, 419, 426, 443, 448, 456, 457, 462, 469, 481, 497], "etard": [118, 199, 249], "etc": [7, 41, 45, 46, 82, 91, 94, 96, 105, 111, 121, 164, 177, 185, 190, 279, 305, 306, 307, 308, 310, 311, 319, 377, 481], "ethic": 198, "etzel": [118, 176], "eugen": [118, 198], "eux2009": 10, "ev": 164, "eva": [118, 227], "eval": [327, 340, 342, 431], "evalu": [59, 118, 174, 178, 185, 205, 234, 236, 262, 305, 306, 307, 308, 314, 318, 369, 426, 466, 467], "evan": [0, 118, 156, 163, 199, 202, 219, 231, 236, 251, 259, 262], "evanston": 0, "evelina": [118, 206, 253], "evelyn": [47, 52, 118, 177], "even": [33, 45, 52, 53, 61, 67, 81, 103, 111, 121, 129, 132, 133, 134, 151, 156, 163, 164, 178, 179, 187, 282, 284, 305, 306, 308, 310, 311, 468], "evenli": [178, 345, 469], "event": [6, 26, 41, 63, 65, 66, 67, 68, 69, 70, 71, 72, 75, 103, 104, 113, 116, 118, 129, 132, 133, 154, 155, 163, 171, 181, 182, 222, 234, 278, 288, 327, 328, 329, 330, 334, 432, 435, 448, 496, 497, 498], "events1": [72, 235, 289], "events2": [72, 235, 289], "events_": 35, "events_datafram": 72, "events_df": 103, "events_fil": [67, 68], "eventu": [58, 495], "everi": [114, 121, 164, 165, 166, 170, 171, 172, 176, 178, 179, 181, 188, 192, 241, 255, 256, 282, 373, 376, 405, 428, 434, 437, 441, 442, 443, 445, 460, 461, 467, 496], "everyon": [179, 198], "everyth": [103, 188], "everywher": 177, "evid": [118, 202], "ew": [118, 201, 250], "ex": [158, 163, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 434, 436, 437, 438, 442, 443, 444, 446, 447], "exact": [45, 176, 179, 181, 219, 272, 273, 295, 296, 297, 298, 299, 300, 495], "exactli": [6, 86, 96, 101, 111, 130, 163, 178, 179, 305, 306, 307, 308, 309, 365, 450, 479], "examin": [3, 118, 185, 269, 287], "exampl": [1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 71, 72, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 128, 129, 130, 131, 134, 136, 141, 142, 143, 144, 145, 148, 149, 151, 153, 154, 157, 158, 159, 164, 169, 172, 173, 174, 175, 178, 179, 180, 181, 183, 184, 188, 190, 199, 235, 247, 264, 310, 317, 319, 320, 336, 344, 365, 380, 393, 467, 483, 484, 486, 492, 496, 497, 498], "exce": [61, 77], "exceed": [59, 145, 163], "excel": 36, "except": [5, 24, 36, 41, 42, 51, 52, 74, 102, 103, 107, 155, 158, 163, 177, 179, 199, 311, 355, 391], "excerpt": 192, "excess": [202, 368, 379], "exchang": [106, 108, 197, 247], "exclud": [68, 121, 458], "exclude_this_vertex": 24, "exclude_zero": [132, 163, 385, 388], "excluded_label": 24, "exclus": [134, 163, 304, 310, 311, 372, 373, 374, 375, 376, 377, 378, 379, 457], "exclusion_filt": [65, 304], "exclusion_pattern": 65, "exec": 188, "execut": [8, 22, 29, 48, 62, 75, 84, 89, 99, 115, 116, 117, 179, 192, 360, 444, 446, 447, 495, 496, 497], "executor": 46, "exemplarili": 58, "exercis": [4, 187], "exhaust": [179, 187], "exhibit": [51, 181, 192], "exist": [4, 21, 51, 106, 169, 176, 179, 188, 191, 232, 239, 240, 241, 282, 284, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 354, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 440, 454, 455, 456, 457, 495], "exist_ok": [3, 4, 6, 7, 16, 24, 31, 35, 44, 51, 52, 58, 64, 65, 70, 73, 74, 77, 88, 96, 104, 111, 113], "existenti": 7, "exp": 47, "exp_condit": [69, 329], "expand": [133, 140, 163, 185, 190, 355, 454, 456], "expans": 189, "expect": [6, 64, 66, 68, 80, 81, 83, 97, 104, 121, 134, 136, 151, 160, 163, 169, 176, 179, 181, 185, 188, 191, 192, 311, 327, 329, 334, 340, 342, 346, 365], "expens": 46, "experi": [3, 6, 31, 35, 36, 44, 68, 71, 96, 118, 119, 175, 180, 181, 185, 210, 234], "experiment": [3, 66, 67, 68, 70, 73, 82, 96, 127, 129, 132, 154, 155, 158, 163, 171, 178, 181, 191, 208, 210, 235, 254, 327, 330, 334, 444, 446, 447], "experimental_paradigm": [129, 163], "expert": [179, 187], "explain": [6, 7, 13, 43, 45, 51, 59, 68, 71, 133, 154, 163, 168, 171, 179, 181, 187, 192, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "explan": [36, 86, 106, 171, 172, 173, 174, 179, 190, 192, 200, 248], "explanatori": [342, 391], "explicit": [12, 51, 74, 151, 157, 163, 179, 185, 187, 284, 343, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 457, 469], "explicitli": [68, 105, 112, 130, 132, 134, 135, 148, 160, 163, 171, 179, 282, 367, 369, 455], "exploit": [65, 170, 178], "explor": [111, 118, 170, 174, 178, 180, 186, 187, 234, 241, 269, 282, 305, 306, 307, 308, 426], "exploratori": 68, "export": [74, 179, 188, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447], "expos": [47, 52, 121, 129, 130, 140, 144, 145, 163, 179, 190, 282, 283, 284, 285], "express": [72, 73, 121, 127, 136, 163, 185, 190, 282, 305, 306, 307, 308, 310, 311, 325, 327, 330, 355, 441], "ext_var": [45, 46, 77, 79, 81, 109, 228, 286], "extend": [23, 96, 129, 132, 134, 154, 159, 163, 181, 192, 232, 360], "extens": [16, 143, 157, 163, 197, 366, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447], "extent": [59, 97, 105, 171, 185, 404, 407], "extern": [46, 172, 175, 228], "extra": [80, 121, 173, 188, 189, 247, 367, 375, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 433, 434, 435, 436, 437, 440, 441, 442, 443, 445, 475, 495], "extra_info_subject": 80, "extract": [4, 6, 10, 11, 20, 22, 23, 28, 30, 32, 33, 34, 40, 41, 42, 43, 46, 48, 49, 51, 52, 62, 63, 65, 72, 74, 75, 77, 85, 88, 94, 96, 99, 101, 103, 104, 105, 108, 111, 114, 116, 121, 126, 127, 128, 130, 132, 133, 136, 143, 144, 146, 147, 148, 149, 155, 159, 160, 163, 167, 168, 171, 174, 182, 185, 187, 188, 189, 194, 198, 201, 208, 228, 238, 239, 248, 254, 255, 257, 260, 265, 266, 268, 271, 279, 283, 305, 306, 307, 308, 309, 312, 313, 327, 334, 340, 341, 342, 351, 352, 354, 357, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 386, 388, 404, 423, 424, 425, 428, 430, 439, 440, 441, 443, 448, 449, 451, 455, 457, 458, 459, 460, 461, 463, 465, 467, 470, 479, 480, 481, 484, 490, 491, 495, 497, 498], "extract_typ": 459, "extractor": [53, 89, 169, 457], "extrapol": [130, 163, 360, 469], "extrem": [58, 125, 163, 466], "extremum": 199, "ey": [25, 44, 47, 67, 68, 70, 72, 73, 82, 86, 91, 118, 179, 187, 219, 272], "eye_mask": [219, 272], "ez": 247, "f": [3, 4, 7, 10, 11, 12, 16, 17, 19, 22, 23, 24, 26, 27, 31, 32, 33, 34, 35, 36, 37, 39, 41, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 68, 72, 73, 74, 77, 79, 80, 81, 82, 83, 87, 88, 90, 91, 93, 94, 95, 96, 97, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 129, 130, 163, 165, 169, 171, 174, 176, 177, 180, 198, 199, 209, 219, 232, 233, 249, 260, 265, 267, 269, 287, 307, 315, 316, 317, 319, 320, 323, 327, 328, 340, 360, 361, 367, 368, 369, 382, 390, 460, 463], "f1": [44, 171, 305, 307], "f1_score": 44, "f1_score_to_print": 44, "f_classif": [37, 38, 41, 44, 96, 101, 174], "f_re": [317, 319, 320], "f_regress": [47, 106, 109, 110, 114], "f_score": [38, 175], "f_score_img": 38, "fa": 171, "fabian": [0, 118, 122, 163, 225, 257], "face": [7, 19, 23, 24, 30, 34, 35, 40, 41, 48, 72, 96, 100, 101, 103, 115, 116, 118, 120, 128, 130, 143, 156, 163, 171, 176, 180, 185, 186, 190, 191, 192, 218, 219, 235, 271, 272, 289, 305, 307, 309, 350, 352, 355, 356, 357, 358, 371, 377, 391, 405, 419, 437, 440, 443, 444, 445, 446, 447, 448, 450, 453, 471, 472, 476, 478, 479, 497], "face_mask": [219, 272], "facebook": 0, "facecolor": [19, 34, 43, 45, 110, 129, 163, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 430, 434, 436, 437, 439, 441, 442, 443], "facilit": [26, 129, 132, 163, 187, 188, 192, 208], "fact": [111, 178, 181, 185], "factor": [69, 71, 103, 108, 111, 118, 145, 163, 173, 185, 202, 208, 210, 317, 319, 320, 329, 331, 332, 333, 334, 337, 338, 339, 343, 428, 441, 442, 443, 450], "faculti": 0, "fade": 26, "fail": [36, 107, 127, 128, 130, 132, 151, 160, 163, 164, 178, 179, 188, 282, 284, 457], "failur": [107, 143, 163, 179, 188, 385], "fair": [0, 61, 118, 170, 209, 265], "fairli": [47, 172, 181], "fake": 179, "falff": 247, "fall": [11, 160, 163, 179, 438, 479], "fals": [2, 6, 10, 13, 15, 17, 19, 21, 22, 23, 24, 26, 27, 32, 34, 35, 36, 38, 39, 40, 43, 44, 45, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 64, 65, 70, 71, 73, 74, 77, 79, 81, 82, 83, 88, 89, 90, 91, 93, 94, 96, 102, 103, 104, 106, 107, 110, 112, 113, 114, 121, 129, 135, 151, 154, 155, 156, 158, 160, 163, 169, 176, 180, 181, 185, 191, 192, 228, 239, 240, 241, 243, 245, 247, 255, 256, 268, 271, 277, 280, 282, 284, 305, 306, 307, 308, 309, 310, 311, 312, 313, 324, 327, 330, 340, 342, 343, 344, 345, 346, 349, 357, 358, 359, 360, 361, 364, 365, 366, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 428, 430, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 451, 453, 454, 455, 456, 457, 458, 460, 461, 463, 464, 466, 467, 468, 469, 480, 481, 495], "famili": [6, 83, 106, 127, 128, 145, 160, 163, 176, 179, 185, 342, 391, 457, 459], "familiar": [68, 179, 187], "fanci": 101, "far": [68, 178, 360, 366], "faraon": [118, 217], "farther": 405, "fashion": [202, 219], "fast": [3, 33, 42, 51, 52, 67, 68, 74, 103, 118, 151, 154, 163, 168, 170, 171, 172, 175, 178, 179, 185, 186, 204, 222, 277, 284, 307, 308, 313, 362, 455, 456, 462, 498], "fast_abs_percentil": [136, 163], "fast_ica": 107, "fast_svd": [143, 163], "faster": [41, 51, 52, 108, 145, 163, 177, 178, 179, 282, 313, 360, 361, 390, 436, 437, 442, 443, 450, 479], "fastest": 178, "fastica": [94, 107, 108, 312], "faulti": [151, 163], "favor": [160, 163], "fc": 19, "fcon_1000": [200, 227, 248], "fcontrast": [317, 319, 320], "fcontrastresult": [317, 319, 320], "fd_threshold": [59, 130, 163, 368, 369], "fdr": [6, 26, 77, 79, 83, 184, 185, 326, 343, 467, 480], "feasibl": 178, "feat": [65, 183], "featur": [31, 35, 36, 37, 45, 47, 52, 54, 66, 68, 96, 102, 107, 108, 114, 118, 120, 132, 146, 148, 149, 154, 158, 172, 173, 174, 175, 176, 177, 178, 179, 187, 188, 192, 239, 240, 241, 243, 305, 306, 307, 308, 309, 310, 311, 312, 315, 369, 390, 454, 456, 457, 459, 469, 470, 481, 492, 493, 496], "feature_select": [37, 38, 41, 44, 45, 47, 96, 101, 106, 109, 110, 114, 174], "feature_selector": 41, "februari": [47, 118, 122, 123, 128, 138, 139, 143, 153, 163, 177, 187], "feczko": [61, 118, 209, 265], "federico": [118, 202], "feedback": [148, 163, 164, 179, 188], "feel": [148, 163, 179], "feldstein": [118, 201, 250], "femal": [217, 247], "fenna": [118, 231, 237, 259, 263], "fetch": [3, 4, 10, 15, 20, 25, 26, 31, 32, 34, 36, 37, 38, 39, 41, 44, 61, 70, 87, 88, 89, 90, 93, 96, 105, 107, 111, 121, 128, 130, 132, 134, 142, 143, 145, 147, 151, 163, 164, 167, 170, 179, 189, 198, 228, 247, 249, 254, 260, 268, 269, 272, 275, 276, 277, 280, 282, 283, 284, 285, 288, 290, 293, 294, 301, 484, 498], "fetch_abide_pcp": [130, 159, 163, 197], "fetch_adhd": [12, 64, 105, 111, 138, 163, 200], "fetch_atlas_a": [132, 140, 159, 163, 199], "fetch_atlas_allen_2011": [22, 143, 163, 201], "fetch_atlas_basc_multiscale_2015": [20, 111, 128, 129, 139, 163, 202], "fetch_atlas_craddock_2012": [128, 129, 163, 166, 205], "fetch_atlas_destrieux_2009": [10, 166, 206], "fetch_atlas_difumo": [22, 50, 155, 163, 208], "fetch_atlas_harvard_oxford": [11, 22, 59, 93, 138, 159, 163, 166, 179, 217, 256, 458], "fetch_atlas_juelich": [11, 157, 159, 163, 220, 255], "fetch_atlas_msdl": [21, 22, 54, 55, 56, 57, 102, 140, 163, 166, 225], "fetch_atlas_pauli_2017": [22, 148, 151, 163, 229], "fetch_atlas_schaefer_2018": [149, 151, 163, 231], "fetch_atlas_smith_2009": [2, 22, 89, 128, 129, 163, 233], "fetch_atlas_surf_destrieux": [10, 23, 24, 114, 129, 143, 163, 495], "fetch_atlas_talairach": [145, 163, 236], "fetch_atlas_yeo_2011": [11, 50, 88, 134, 163, 166, 237], "fetch_bids_langloc_dataset": [130, 163], "fetch_cobr": [139, 143, 154, 158, 163], "fetch_coords_dosenbach_2010": [61, 139, 142, 163, 209], "fetch_coords_power_2011": [61, 230], "fetch_coords_seitzman_2018": [149, 163, 232], "fetch_development_fmri": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 87, 91, 93, 94, 97, 102, 108, 151, 163, 165, 166, 168, 169, 187, 192, 207], "fetch_ds000030_url": [65, 160, 163, 287], "fetch_fiac_first_level": [73, 210], "fetch_fil": 179, "fetch_haxbi": [3, 4, 16, 17, 19, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 96, 101, 106, 120, 142, 163, 171, 179, 190, 218], "fetch_icbm152_2009": [12, 22, 77, 219, 273, 298], "fetch_icbm152_brain_gm_mask": [68, 77, 141, 163, 219, 272], "fetch_language_localizer_demo_dataset": [103, 104, 113, 130, 163, 180, 203, 221, 264], "fetch_localizer_button_task": [18, 132, 141, 163, 276, 277, 495], "fetch_localizer_calculation_task": [83, 110, 132, 163, 275, 277], "fetch_localizer_contrast": [26, 78, 79, 81, 82, 109, 132, 141, 163, 204, 275, 276], "fetch_localizer_first_level": [67, 68, 70, 222], "fetch_megatrawls_netmat": [28, 198], "fetch_mixed_gambl": [42, 159, 163, 223], "fetch_miyawaki2008": [43, 44, 91, 224], "fetch_neurosynth_word": [107, 121, 282, 284], "fetch_neurovault": [107, 112, 121, 144, 151, 155, 163, 283, 284, 285, 302], "fetch_neurovault_auditory_computation_task": [90, 148, 163, 285, 302], "fetch_neurovault_id": [112, 121, 144, 163, 282, 283, 285, 302], "fetch_neurovault_motor_task": [148, 163, 495], "fetch_nyu_rest": [153, 156, 163], "fetch_oasis_vbm": [45, 46, 77, 228], "fetch_openneuro_dataset": 65, "fetch_openneuro_dataset_index": [160, 163], "fetch_spm_auditori": [6, 26, 71, 234], "fetch_spm_multimodal_fmri": [72, 180, 235], "fetch_stimuli": [40, 271], "fetch_surf_fsaverag": [128, 148, 154, 156, 160, 163, 180, 211, 212, 213, 214, 215, 261, 438, 444, 445, 446, 447, 451, 479, 495], "fetch_surf_fsaverage5": [143, 148, 163], "fetch_surf_nki_enhanc": [143, 151, 163, 227], "fetcher": [32, 34, 129, 130, 134, 138, 139, 140, 143, 148, 151, 152, 155, 157, 158, 159, 160, 163, 180, 228, 249, 264, 268, 285, 289], "few": [2, 15, 16, 27, 41, 42, 43, 52, 79, 83, 93, 105, 106, 135, 146, 147, 163, 170, 172, 175, 177, 179, 180, 188, 191, 375, 455, 479], "fewer": [130, 163, 178, 429], "ff0000": 11, "ff98d5": 11, "ffff00": 11, "fiac": [73, 194, 270, 492], "fiac_nilearn": 73, "field": [12, 47, 105, 121, 151, 163, 181, 185, 190, 282, 305, 306, 307, 308, 312, 313, 328, 330, 360, 365, 366, 374, 377, 455, 478], "fifth": [105, 118, 273, 314, 318], "fig": [10, 12, 13, 19, 25, 26, 40, 41, 43, 44, 52, 60, 64, 66, 67, 69, 74, 77, 80, 81, 93, 98, 103, 104, 109, 114, 438, 444, 495], "fig1": 71, "fig2": 71, "fig_kwarg": 435, "figh": 13, "fight": 192, "figshar": [20, 251], "figsiz": [6, 12, 13, 16, 19, 26, 27, 32, 36, 37, 41, 43, 45, 47, 51, 54, 60, 64, 65, 66, 67, 68, 69, 74, 77, 80, 81, 93, 96, 98, 102, 103, 104, 109, 110, 111, 114, 191, 440], "figur": [2, 4, 6, 10, 13, 15, 16, 19, 23, 24, 25, 27, 32, 34, 35, 36, 37, 38, 43, 44, 45, 46, 47, 51, 52, 54, 55, 58, 59, 60, 61, 64, 65, 67, 68, 69, 70, 71, 77, 81, 86, 93, 96, 102, 103, 104, 109, 110, 111, 114, 129, 132, 134, 145, 154, 155, 158, 159, 160, 163, 164, 179, 180, 181, 191, 367, 372, 373, 374, 375, 376, 377, 379, 380, 381, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 427, 428, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 457, 495], "figure_width": [26, 98], "fil": [6, 72, 234, 235, 288], "filbei": [118, 201, 250], "file": [3, 6, 7, 8, 10, 15, 20, 23, 24, 29, 35, 43, 48, 50, 51, 52, 54, 56, 58, 62, 63, 64, 65, 68, 70, 72, 73, 75, 77, 84, 87, 88, 93, 94, 96, 99, 103, 104, 107, 111, 112, 113, 115, 116, 117, 118, 120, 121, 129, 132, 134, 136, 138, 143, 147, 148, 149, 150, 151, 154, 158, 159, 160, 163, 164, 165, 166, 168, 169, 171, 179, 180, 188, 189, 192, 199, 200, 201, 202, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 221, 222, 224, 225, 228, 229, 235, 237, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 301, 303, 305, 306, 312, 313, 327, 330, 334, 340, 342, 345, 355, 356, 358, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 379, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 455, 457, 465, 467, 469, 471, 472, 476, 477, 478, 479, 480, 481, 496, 497, 498], "file_basenam": 366, "file_field": 366, "file_list": 303, "file_nam": [40, 465], "file_path": [366, 471], "file_tag": [365, 366], "file_typ": [365, 366], "filemesh": [23, 24], "filenam": [3, 4, 11, 16, 53, 58, 64, 96, 120, 130, 141, 151, 158, 159, 163, 166, 169, 170, 179, 190, 191, 255, 256, 287, 303, 305, 306, 307, 308, 310, 311, 355, 366, 367, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 441, 471, 472, 473, 474, 476], "filename_pattern": 179, "filesystem": [160, 163], "filippini": [118, 198, 233, 260], "fill": [16, 22, 26, 65, 69, 96, 104, 113, 134, 143, 151, 157, 163, 178, 192, 202, 360, 361, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 441, 442, 465, 498], "fill_diagon": [57, 59], "fill_doc": [157, 163], "fill_valu": [360, 361], "fillard": [118, 165, 239], "filled_contour": [22, 53, 169, 441], "filter": [35, 54, 58, 59, 61, 64, 65, 68, 69, 70, 73, 96, 107, 113, 119, 120, 125, 127, 128, 148, 151, 156, 158, 160, 163, 171, 185, 189, 191, 228, 247, 282, 284, 304, 305, 306, 307, 308, 310, 311, 312, 313, 327, 330, 340, 345, 362, 364, 365, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 455, 457, 468, 469, 480, 498], "filter_and_extract": [52, 55, 56, 59, 61], "filtered_img": 362, "filtered_sign": 468, "filterwarn": [3, 34, 36, 42, 51], "filtfilt": 468, "final": [3, 4, 6, 15, 16, 26, 32, 44, 51, 56, 58, 59, 60, 66, 70, 86, 95, 96, 103, 111, 156, 163, 165, 172, 178, 179, 180, 187, 188, 191, 192, 202, 217, 241, 340, 365, 372, 373, 375, 376, 457, 495], "find": [4, 32, 34, 47, 53, 59, 81, 103, 125, 163, 169, 170, 171, 173, 175, 178, 179, 181, 185, 188, 192, 202, 226, 235, 243, 251, 347, 385, 386, 388, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 425, 428, 450, 454, 456, 462, 495, 496, 498], "find_cut_coord": [393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419], "find_cut_slic": [136, 143, 163], "find_parcellation_cut_coord": [50, 61, 148, 158, 163, 166, 424, 430], "find_probabilistic_atlas_cut_coord": [50, 53, 56, 148, 163, 166, 169, 423, 430], "find_xyz_cut_coord": [53, 89, 138, 145, 163, 169], "fine": [10, 91, 118, 142, 163, 166, 192, 208, 254, 309, 312, 313, 368, 374, 377, 455, 495], "finer": [10, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419], "finish": [33, 35, 37, 38, 39, 42, 45, 46, 47, 51, 52, 53, 55, 56, 57, 59, 60, 61, 65, 77, 101, 106, 109, 129, 163, 164, 178, 179, 344, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430, 441, 449, 451, 453], "finit": [26, 63, 75, 79, 81, 107, 116, 144, 163, 180, 185, 278, 327, 329, 334, 345, 362, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 385, 428, 431, 432, 442, 443, 457, 469, 497], "fino": [78, 118, 322], "fir": [63, 66, 75, 116, 131, 163, 180, 185, 278, 327, 329, 334, 431, 432, 443, 497], "fir_delai": [66, 67, 327, 329, 330, 334], "fir_delays_": 327, "first": [2, 6, 7, 12, 15, 16, 17, 19, 21, 27, 32, 34, 35, 37, 41, 43, 45, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 66, 67, 71, 73, 75, 77, 79, 82, 83, 86, 88, 91, 93, 94, 95, 96, 97, 98, 100, 108, 109, 111, 114, 115, 118, 120, 121, 122, 128, 130, 132, 148, 149, 151, 154, 156, 158, 159, 163, 164, 165, 166, 168, 169, 170, 172, 174, 175, 178, 179, 181, 182, 183, 184, 188, 189, 190, 191, 194, 202, 241, 243, 269, 270, 273, 274, 278, 279, 282, 284, 287, 293, 294, 304, 305, 306, 307, 308, 312, 313, 327, 330, 340, 342, 346, 351, 352, 361, 362, 365, 367, 368, 370, 373, 376, 377, 378, 380, 387, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 427, 431, 432, 436, 437, 442, 443, 444, 445, 446, 447, 448, 453, 454, 455, 457, 465, 466, 467, 469, 475, 481, 492, 497, 498], "first_epi_fil": 97, "first_level": [6, 26, 35, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 103, 104, 113, 129, 133, 156, 158, 160, 163, 180, 435, 467], "first_level_contrast": [104, 158, 163, 340, 342, 367, 467], "first_level_from_bid": [65, 103, 104, 113, 128, 129, 130, 132, 134, 163, 435], "first_level_glm": 113, "first_level_model": [64, 67, 68], "first_pipelin": 101, "first_plot": 52, "first_roi_data": 96, "first_roi_img": 96, "first_rsn": 2, "first_three_imag": 352, "firstlevelmodel": [6, 26, 64, 67, 68, 70, 71, 72, 73, 103, 113, 132, 133, 134, 135, 156, 158, 160, 163, 180, 330, 340, 342, 367, 467], "firstlevelmodelifittedfirst": 65, "firstlevemodel": 68, "firstli": 59, "fischl": [23, 118, 206, 211, 212, 213, 214, 215, 217, 231, 237, 253, 259, 261, 263, 290], "fisher": [101, 118, 315], "fistlevelmodel": 180, "fit": [3, 6, 24, 26, 30, 32, 34, 37, 38, 39, 41, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 63, 64, 66, 67, 68, 70, 75, 77, 78, 79, 81, 82, 83, 89, 91, 93, 94, 101, 102, 103, 107, 113, 114, 116, 120, 129, 130, 132, 133, 134, 135, 148, 156, 158, 160, 163, 165, 167, 168, 169, 171, 172, 174, 176, 178, 179, 181, 182, 183, 185, 186, 187, 192, 239, 240, 241, 263, 270, 271, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 324, 327, 330, 336, 340, 342, 352, 357, 367, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 391, 404, 407, 426, 427, 431, 443, 448, 454, 455, 456, 457, 460, 465, 467, 480, 481, 497, 498], "fit_intercept": [310, 311], "fit_param": [312, 313, 371, 377, 454, 456], "fit_predict": [454, 456], "fit_transform": [37, 38, 41, 45, 50, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64, 71, 91, 94, 96, 101, 102, 103, 106, 107, 108, 109, 110, 111, 114, 120, 129, 133, 134, 163, 166, 169, 180, 192, 239, 309, 312, 313, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 454, 455, 456, 457], "fitted_pipelin": 101, "fitter": [129, 163], "five": [59, 68, 455], "five_mni_imag": 352, "fix": [17, 32, 35, 46, 50, 51, 61, 72, 105, 113, 124, 164, 178, 179, 188, 191, 314, 315, 318, 324, 327, 330, 480], "fixed_fx_contrast": 73, "fixed_fx_contrast_img": 324, "fixed_fx_stat": 73, "fixed_fx_stat_img": 324, "fixed_fx_vari": 73, "fixed_fx_variance_img": 324, "fixed_fx_z_score_img": 324, "fixur": 179, "fl": 0, "flag": [132, 163, 179, 180, 368, 369], "flake8": [132, 138, 160, 163], "flash": 68, "flat": [24, 44, 128, 163, 191, 211, 212, 213, 214, 215, 216, 290, 293, 294, 301], "flat_left": [211, 212, 213, 214, 215, 216, 290], "flat_right": [211, 212, 213, 214, 215, 216, 290], "flatiron": 0, "flatten": [25, 43, 44, 71, 118, 206, 239, 245, 246, 293], "flavor": [2, 202], "fletcher": [118, 197, 247], "flexibl": [67, 137, 163], "flexibli": 59, "fliem": 227, "flip": [17, 107, 142, 163, 202, 251], "flirt": 217, "flm_object": [160, 163], "float": [3, 43, 44, 46, 69, 77, 131, 151, 154, 163, 240, 241, 243, 247, 273, 282, 284, 289, 291, 295, 296, 299, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 322, 326, 327, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340, 342, 343, 344, 345, 349, 351, 360, 361, 364, 368, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 425, 428, 429, 430, 434, 436, 437, 438, 439, 441, 442, 443, 444, 446, 447, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 462, 465, 466, 467, 468, 469, 470, 479], "float32": [12, 35, 86, 105, 192, 346, 355, 372, 373, 374, 375, 376, 377, 378, 457], "float64": [79, 132, 163], "flore": [118, 165, 239], "florent": [0, 118, 131, 163, 206, 217, 253], "florida": 0, "flow": [156, 163, 181, 185], "fluctuat": [51, 68, 178, 181, 185, 247], "fluenci": 79, "fluid": [12, 59, 219, 272, 368], "fmr": [51, 65], "fmri": [1, 8, 16, 27, 31, 32, 33, 34, 35, 38, 41, 43, 44, 47, 49, 58, 59, 62, 63, 64, 65, 66, 68, 71, 72, 74, 75, 76, 83, 84, 87, 91, 93, 96, 100, 103, 104, 105, 106, 113, 115, 116, 118, 120, 121, 132, 139, 146, 151, 163, 168, 169, 170, 172, 174, 177, 178, 180, 183, 184, 185, 186, 187, 190, 191, 192, 194, 200, 201, 202, 205, 208, 209, 218, 221, 224, 226, 227, 232, 248, 251, 252, 254, 260, 265, 268, 270, 271, 277, 278, 288, 305, 309, 312, 313, 322, 324, 327, 336, 340, 342, 343, 345, 346, 350, 352, 353, 355, 356, 357, 358, 361, 368, 369, 371, 377, 385, 388, 391, 411, 418, 426, 428, 429, 431, 432, 434, 436, 437, 441, 442, 443, 448, 450, 455, 457, 465, 466, 469, 470, 480, 482, 497, 498], "fmri_arrai": 111, "fmri_compress": 52, "fmri_data": [43, 96, 111, 327, 340], "fmri_fil": 103, "fmri_filenam": [3, 38, 39, 59, 96, 101, 120], "fmri_glm": [6, 26, 71, 72, 73, 180], "fmri_glm_multirun": 73, "fmri_glm_run_1": 73, "fmri_glm_run_2": 73, "fmri_img": [6, 36, 38, 39, 41, 67, 68, 71, 72, 73, 96, 111, 113, 180], "fmri_img_surf": 39, "fmri_mask": [38, 94, 101, 106, 109, 110, 120], "fmri_niimg": [3, 32, 36, 101, 171], "fmri_niimgs_condit": 32, "fmri_niimgs_test": 3, "fmri_niimgs_train": 3, "fmri_path": 111, "fmri_random_runs_filenam": 43, "fmri_reduc": 52, "fmri_reduced_rena": 52, "fmri_run": [35, 43], "fmrib": [2, 22, 182, 217, 220, 233, 260, 498], "fmripost": 369, "fmriprep": [65, 68, 113, 129, 130, 132, 158, 160, 163, 166, 170, 181, 185, 192, 219, 235, 268, 272, 273, 295, 296, 297, 298, 299, 300, 330], "fmt": 74, "fnhum": [118, 197, 247], "fnin": [52, 118, 168, 227], "fninf": [118, 121, 226, 282, 284], "fnsy": [118, 201, 250], "focu": [15, 81, 166, 168, 178, 457], "focus": [63, 76, 101, 111, 116, 120, 140, 146, 163, 165, 172, 175, 176, 179], "fold": [3, 31, 33, 36, 38, 43, 54, 70, 96, 101, 102, 171, 172, 174, 176, 178, 179, 192, 241, 305, 306, 307, 308, 309, 310, 311], "folder": [65, 96, 104, 113, 158, 163, 179, 188, 190, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 301, 330, 355, 365], "follow": [2, 4, 7, 10, 15, 19, 22, 23, 24, 26, 31, 35, 36, 37, 38, 39, 43, 44, 45, 50, 51, 52, 54, 55, 56, 57, 58, 59, 61, 64, 65, 66, 67, 68, 70, 71, 74, 91, 93, 94, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 116, 120, 121, 132, 135, 145, 148, 149, 150, 151, 152, 153, 157, 161, 163, 164, 165, 166, 169, 170, 176, 179, 180, 181, 183, 185, 187, 188, 190, 202, 210, 222, 228, 290, 292, 293, 294, 301, 327, 345, 351, 364, 365, 367, 368, 369, 373, 376, 378, 380, 383, 384, 385, 386, 387, 388, 451, 457, 469, 470, 480, 495, 496], "fonov": [118, 202, 219], "font": [392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 444, 446, 447], "fontproperti": [392, 394, 395], "fontsiz": [13, 27, 43, 52, 66, 80, 82, 109, 149, 151, 163, 191, 392, 394, 395, 449, 451, 452, 453], "footbibliographi": [156, 158, 160, 163], "footcit": [156, 158, 160, 163], "footer": [132, 163], "forc": [2, 96, 138, 163, 164, 178, 192, 202, 251, 260, 282, 284, 310, 311], "force_resampl": [68, 72, 77, 86, 95, 111, 132, 163, 360, 361], "ford": [118, 201, 250], "foreground": [90, 169], "forget": [96, 179], "fork": [164, 179], "form": [6, 7, 35, 43, 47, 52, 74, 109, 130, 163, 165, 166, 168, 169, 181, 185, 190, 217, 239, 240, 241, 287, 305, 306, 307, 308, 309, 310, 311, 312, 313, 322, 327, 330, 334, 340, 342, 343, 365, 366, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 391, 427, 450, 454, 455, 456, 457, 466, 467], "formal": [6, 234], "format": [2, 41, 52, 58, 103, 120, 128, 129, 134, 155, 158, 160, 163, 179, 180, 192, 202, 206, 208, 247, 249, 251, 253, 255, 256, 258, 259, 261, 262, 263, 364, 372, 375, 379, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 434, 436, 437, 438, 442, 443, 444, 445, 446, 447, 452, 453, 477, 478, 479, 485], "formatstrformatt": 51, "formatt": [132, 163], "former": [172, 178, 282, 436, 438, 443, 447], "formerli": [93, 148, 163], "formula": [2, 132, 139, 163, 178, 340, 342, 356, 431], "fornito": [59, 118, 166, 369], "forschungszentrum": 0, "fortran": [178, 360, 361, 390, 391], "fortun": [3, 69], "forum": 179, "forward": [118, 236, 262], "foucault": [148, 163], "found": [3, 4, 6, 10, 11, 12, 16, 17, 19, 20, 21, 22, 23, 24, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64, 65, 66, 67, 68, 70, 71, 73, 74, 77, 78, 79, 81, 82, 83, 87, 88, 89, 91, 93, 94, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 120, 121, 148, 163, 164, 165, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 187, 188, 191, 192, 202, 226, 228, 282, 284, 286, 330, 345, 347, 365, 382, 385, 428, 442, 443, 469, 495], "four": [7, 43, 47, 68, 158, 163, 192, 237], "fourth": [83, 86, 156, 163, 327, 342, 368, 369, 424, 469], "fox": [118, 233, 236, 260, 262, 369], "fpr": [6, 35, 64, 65, 73, 83, 104, 184, 185, 327, 340, 343, 467, 480], "fr": [0, 3, 10, 11, 28, 42, 105, 111, 199, 204, 225, 249, 257], "frac": [181, 311, 314, 318], "frackowiak": [118, 345, 469], "fraction": [247, 327, 330, 385, 386, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 479], "frame": [35, 66, 91, 192, 202, 329, 352, 368, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 465], "frame_ax": [393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419], "frame_tim": [35, 66, 69, 180, 328, 329, 334], "frameon": [36, 392, 394, 395], "frames_tim": 334, "frametim": 64, "framewis": [59, 268, 368], "framework": [69, 165, 268], "fran": [61, 118, 230, 266], "franc": [0, 179], "francesca": [118, 201, 250], "francisco": [118, 227], "franz": [0, 149, 151, 153, 163], "fran\u00e7oi": [0, 129, 163], "frau": [0, 136, 163], "frazier": [118, 217], "free": [0, 118, 164, 172, 179, 181, 185, 342, 391], "freedman": [118, 391], "freedom": [59, 103, 112, 166, 181, 315, 318, 324, 369], "freeli": 234, "freesurf": [10, 23, 70, 113, 143, 148, 160, 163, 180, 206, 211, 212, 213, 214, 215, 220, 261, 290, 294, 405, 444, 445, 446, 447, 453, 471, 477, 478, 479], "freimer": [118, 269, 287], "freita": [118, 236, 262], "frem": [3, 30, 48, 116, 118, 128, 154, 163, 171, 172, 175, 177, 185, 186, 271, 280, 307, 308, 311, 352, 357, 440, 443, 448, 497, 498], "fremclassifi": [33, 132, 135, 154, 155, 163, 172, 173, 305, 308], "fremregressor": [33, 42, 132, 135, 154, 155, 163, 172, 173, 306, 307], "french": 0, "frequenc": [6, 68, 125, 163, 192, 247, 305, 306, 307, 308, 310, 311, 312, 313, 327, 334, 345, 368, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 455, 457, 468, 469], "frequent": [134, 163, 181, 479], "frequentist": 181, "frequentist_infer": 181, "fri": [118, 201, 250], "friedman": [118, 165], "friendli": [111, 127, 163, 496], "frisoni": [118, 198], "friston": [118, 234, 345, 469], "frith": [118, 345, 469], "fritsch": [0, 122, 163], "frmi_fil": 166, "from": [0, 4, 6, 7, 8, 9, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 26, 27, 29, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 54, 55, 56, 57, 58, 60, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 94, 95, 97, 98, 99, 100, 102, 104, 106, 107, 108, 111, 112, 113, 114, 115, 117, 118, 119, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 141, 144, 145, 148, 149, 151, 156, 157, 158, 160, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 185, 186, 187, 188, 189, 194, 197, 198, 199, 200, 201, 202, 205, 207, 208, 209, 210, 217, 218, 219, 220, 222, 224, 226, 231, 232, 233, 238, 239, 240, 241, 243, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 267, 268, 269, 271, 273, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 291, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 324, 326, 327, 330, 334, 340, 341, 342, 344, 345, 347, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 426, 428, 429, 431, 433, 434, 435, 436, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 475, 479, 480, 481, 484, 487, 489, 490, 495, 496, 497, 498], "from_volum": [10, 39, 70, 113, 475], "fromkei": 103, "fromnumer": [3, 17, 31], "front": [314, 317], "frontal": [59, 72, 93, 118, 176, 428, 434, 436, 437, 442, 443], "frontier": [52, 118, 121, 168, 197, 201, 208, 226, 227, 247, 250, 282, 284], "frontiersin": 201, "fronto": [61, 104], "frontopariet": 267, "frouin": [118, 204, 277], "frustrat": 179, "fsaverag": [10, 23, 24, 25, 39, 65, 70, 113, 114, 128, 129, 132, 148, 156, 163, 194, 212, 213, 214, 215, 216, 237, 238, 290, 293, 294, 301, 438, 451, 479, 495], "fsaverage3": [156, 163, 194, 290, 293, 294, 301, 451], "fsaverage4": [156, 163, 194, 290, 293, 294, 301, 451], "fsaverage5": [10, 23, 24, 25, 70, 113, 114, 132, 143, 148, 163, 194, 206, 227, 261, 290, 291, 293, 294, 301, 330, 438, 451, 479], "fsaverage5_spher": [160, 163], "fsaverage6": [156, 163, 194, 290, 293, 294, 301, 451], "fsaverage7": [290, 293, 294, 301, 451], "fsaverage_data": [39, 70], "fsaverage_mesh": [10, 23, 24], "fsaverage_sulc": [10, 23, 24, 114], "fsavg": 475, "fsl": [11, 38, 43, 44, 59, 65, 81, 93, 133, 157, 158, 160, 163, 182, 190, 217, 220, 255, 256, 356, 498], "fsl3": [59, 93], "fsl_design_matrix_path": [65, 370], "fsl_z_map": 65, "fslmath": 356, "fslview": 191, "fswiki": [237, 263], "ftp": [200, 248], "fulcher": [59, 118, 369], "full": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 125, 127, 130, 163, 164, 168, 169, 170, 172, 174, 176, 178, 179, 180, 185, 191, 192, 198, 207, 218, 235, 255, 256, 268, 279, 305, 306, 307, 308, 312, 313, 314, 317, 318, 319, 320, 327, 340, 342, 362, 368, 369, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 433, 440, 455, 457, 459, 465, 480], "full_brain_info": [129, 163], "full_coef": 101, "full_correl": 279, "fullbrain": 271, "fulli": [26, 72, 118, 178, 181, 202, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 436, 437, 443, 496], "func": [3, 6, 10, 12, 16, 17, 19, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64, 65, 67, 68, 71, 73, 81, 87, 91, 93, 94, 96, 97, 101, 102, 103, 104, 105, 106, 108, 111, 113, 120, 130, 156, 163, 169, 179, 180, 190, 192, 200, 204, 207, 218, 224, 234, 248, 268, 271, 274, 281, 288, 365, 368, 369], "func1": [72, 73, 210, 235, 270, 289], "func2": [72, 73, 210, 235, 270, 289], "func_fil": 54, "func_filenam": [19, 27, 32, 33, 34, 35, 37, 51, 53, 56, 58, 61, 93, 94, 106, 108, 169, 191], "func_img": [31, 171], "func_left": [227, 291], "func_mask": 247, "func_mean": 247, "func_preproc": [159, 163, 247], "func_reduc": 106, "func_right": [227, 291], "function": [2, 3, 4, 6, 7, 9, 10, 11, 12, 13, 14, 15, 18, 19, 22, 23, 27, 28, 29, 31, 32, 34, 35, 36, 37, 38, 46, 51, 52, 55, 56, 58, 59, 61, 62, 63, 65, 66, 67, 68, 70, 72, 74, 75, 76, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 105, 106, 108, 111, 113, 115, 118, 120, 121, 123, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 153, 154, 155, 156, 157, 158, 159, 160, 163, 168, 171, 172, 175, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 197, 198, 199, 200, 202, 204, 205, 207, 208, 210, 221, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 477, 478, 479, 480, 481, 484, 496, 497, 498], "fundament": 185, "furei": [3, 33, 34, 40, 101, 118, 218, 271], "furo": [127, 160, 163], "further": [0, 15, 16, 24, 26, 41, 58, 68, 71, 86, 96, 111, 119, 165, 171, 173, 175, 178, 188, 190, 194, 202, 232, 282, 327, 340, 368, 405, 486, 487, 495, 498], "furthermor": [6, 41, 45, 58], "fusifor": 481, "fusiform": [93, 176], "futur": [0, 6, 132, 142, 148, 154, 160, 163, 178, 185, 190, 192, 315, 465], "fv": 164, "fwe": [109, 391], "fwer": [79, 83, 184, 185, 342], "fwhm": [4, 68, 96, 97, 107, 109, 145, 151, 163, 185, 187, 191, 192, 362], "g": [0, 6, 10, 15, 23, 25, 26, 32, 33, 43, 45, 46, 50, 51, 58, 64, 69, 96, 102, 103, 109, 118, 128, 156, 160, 163, 166, 176, 178, 179, 180, 181, 184, 185, 187, 191, 192, 198, 199, 205, 208, 228, 236, 239, 240, 241, 252, 262, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 320, 327, 334, 340, 344, 347, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 430, 438, 441, 444, 445, 446, 447, 449, 450, 451, 453, 454, 455, 456, 457, 460, 461, 463, 479, 495], "g004": 201, "g5f85f9571": [35, 64, 70, 73, 104, 113, 480, 481], "g_and_s_cingul": 481, "g_and_s_frontomargin": 481, "g_and_s_occipital_inf": 481, "g_and_s_paracentr": 481, "g_and_s_subcentr": 481, "g_and_s_transv_frontopol": 481, "g_cingul": [24, 481], "g_cuneu": 481, "g_front_inf": 481, "g_front_middl": 481, "g_front_sup": 481, "g_ins_lg_and_s_cent_in": 481, "g_insular_short": 481, "g_oc": 481, "g_occipital_middl": 481, "g_occipital_sup": 481, "g_orbit": 481, "g_pariet_inf": 481, "g_parietal_sup": 481, "g_postcentr": [10, 481], "g_precentr": [10, 481], "g_precuneu": 481, "g_rectu": 481, "g_subcallos": 481, "g_t_transv": 481, "g_temp_sup": 481, "g_temporal_inf": 481, "g_temporal_middl": 481, "ga": [47, 118, 171, 177, 187], "gabriel": [118, 121, 226, 282, 284], "gael": [0, 51, 52, 118, 121, 122, 123, 125, 126, 136, 138, 141, 145, 148, 149, 150, 151, 153, 163, 165, 169, 170, 225, 226, 239, 240, 257, 282, 284, 312, 313, 456, 457, 462], "gagan": [61, 118, 209, 230, 265, 266], "gain": [42, 68, 173, 178, 223, 280], "gale": [0, 148, 151, 163], "gallant": [118, 172], "galleri": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 129, 136, 138, 142, 143, 145, 163, 179, 495, 497], "gambl": [30, 48, 116, 175, 177, 194, 280, 308, 311, 443, 448, 497], "gamma": [69, 160, 163, 180], "ganel": 118, "ganglia": 232, "gap": [56, 240, 243], "gather": [96, 179, 181], "gatsbi": 0, "gau": [0, 128, 129, 130, 131, 132, 133, 134, 135, 163], "gaussian": [6, 35, 47, 73, 81, 96, 104, 118, 165, 178, 181, 192, 193, 202, 240, 243, 362, 480], "gaussian_filt": 47, "gazzalei": [103, 118], "ga\u00ebl": [52, 54, 59, 102, 118, 165, 166, 168, 173, 208, 225, 254, 257, 307, 308, 312], "gca": [51, 54, 102], "gcf": 43, "gee": 118, "gender": [207, 228, 268], "gener": [0, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 116, 120, 127, 129, 130, 131, 132, 134, 148, 149, 151, 153, 154, 156, 158, 163, 171, 172, 174, 176, 178, 179, 180, 181, 182, 184, 185, 186, 187, 189, 192, 202, 205, 219, 224, 232, 251, 252, 277, 287, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 317, 319, 320, 327, 334, 340, 342, 343, 344, 345, 350, 356, 357, 367, 368, 369, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 389, 391, 435, 438, 443, 444, 445, 446, 447, 448, 454, 455, 457, 465, 469, 480, 481, 484, 485, 495, 496, 497], "generate_group_sparse_gaussian_graph": [60, 178], "generate_report": [35, 57, 61, 64, 70, 73, 77, 91, 93, 94, 104, 113, 129, 130, 135, 158, 163, 192, 327, 340, 367, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 457], "genet": [118, 217], "geneva": 0, "genfromtxt": 171, "genom": 0, "gensollen": [0, 130, 155, 156, 157, 158, 159, 160, 163], "gentl": 187, "geoffrei": [118, 319, 320], "geometr": [165, 239], "geometri": [7, 70, 118, 185, 356, 438, 444, 445, 446, 447, 453, 478, 479], "geomspac": 41, "gerard": [106, 118, 391], "geriant": 234, "geriatr": 0, "gerloff": [0, 128, 163], "germani": [0, 118, 177], "germnai": 0, "gervai": [0, 122, 163], "get": [3, 4, 6, 10, 15, 22, 23, 24, 35, 37, 43, 44, 54, 55, 59, 61, 65, 68, 69, 70, 72, 77, 80, 83, 88, 90, 98, 103, 104, 108, 112, 113, 114, 121, 143, 148, 163, 164, 166, 169, 170, 171, 176, 178, 180, 183, 184, 186, 192, 199, 239, 240, 241, 255, 256, 284, 305, 306, 307, 308, 309, 310, 311, 312, 313, 317, 319, 320, 327, 340, 342, 350, 355, 359, 367, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 391, 392, 394, 395, 422, 454, 455, 456, 457, 465, 466, 467, 471, 496], "get_affin": [142, 163, 190, 347], "get_anat": 277, "get_bids_fil": [158, 163], "get_clusters_t": [6, 65, 71, 128, 135, 155, 159, 160, 163], "get_data": [32, 38, 45, 50, 52, 79, 81, 86, 96, 106, 109, 110, 112, 143, 151, 163, 164, 190, 355], "get_data_dir": [4, 141, 163, 190, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 301], "get_dataset_dir": 179, "get_design_from_fslmat": [65, 158, 163], "get_fdata": [12, 26, 82, 105, 111, 151, 163, 190], "get_head": 190, "get_ifram": 465, "get_mask": 277, "get_metadata_rout": [239, 240, 241, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 454, 455, 456, 457], "get_object_bound": [392, 394, 395], "get_param": [103, 239, 240, 241, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 454, 455, 456, 457], "get_standalon": 465, "get_support": 45, "get_tmap": [81, 277], "get_zoom": 429, "getattr": 19, "geuter": [118, 345, 469], "gezici": [0, 130, 163], "gh": [129, 163, 179], "ghislain": [118, 210], "gholamreza": [118, 165], "ghosh": [118, 121, 226, 282, 284], "giant": [151, 163], "gif": [0, 179], "gifti": [7, 129, 132, 163, 211, 212, 213, 214, 215, 216, 290, 291, 471, 472, 473, 474, 476], "gifti_fil": [471, 472, 476], "gigabyt": 179, "gii": [7, 368, 369, 405, 444, 445, 446, 447, 453, 477, 478, 479], "gili": [118, 202], "gill": [0, 148, 151, 163], "gilmor": [0, 156, 163], "gin": [199, 249], "giov": [118, 202], "giovanni": [118, 198], "gist_ncar": [23, 147, 163, 429, 442, 446, 495], "gist_rainbow": 441, "git": [122, 123, 125, 126, 136, 138, 141, 163, 164, 179, 188], "github": [0, 3, 38, 52, 55, 56, 61, 65, 77, 79, 160, 163, 179, 187, 219, 227, 231, 237, 259, 369, 451, 480, 481, 495, 496], "give": [2, 3, 4, 6, 10, 15, 16, 17, 25, 26, 31, 35, 41, 45, 52, 55, 57, 58, 59, 61, 70, 86, 93, 96, 101, 107, 118, 120, 128, 141, 143, 158, 163, 164, 165, 166, 168, 170, 171, 172, 173, 174, 176, 178, 187, 191, 192, 210, 234, 275, 276, 284, 305, 306, 307, 308, 309, 312, 313, 314, 322, 327, 329, 334, 340, 342, 362, 365, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 389, 405, 440, 445, 446, 454, 455, 457, 459, 463, 464, 479], "given": [2, 3, 10, 15, 17, 39, 41, 46, 47, 50, 53, 56, 57, 61, 66, 67, 68, 70, 74, 77, 81, 86, 88, 96, 97, 103, 105, 108, 114, 128, 140, 142, 146, 151, 160, 163, 164, 165, 168, 171, 172, 174, 176, 177, 178, 179, 181, 185, 188, 192, 198, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 255, 256, 276, 277, 279, 280, 286, 291, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 323, 324, 327, 330, 334, 340, 341, 342, 343, 344, 346, 351, 354, 357, 360, 362, 364, 365, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 426, 428, 429, 430, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 467, 468, 470, 481], "gl": [56, 60], "glahn": [118, 233, 260], "glaser": [0, 147, 163], "glass": [9, 10, 29, 50, 64, 77, 112, 116, 134, 141, 142, 143, 145, 146, 151, 154, 163, 186, 302, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430, 436, 439, 443, 448, 449, 452, 467, 495, 497], "glassbrainax": [396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418], "glasser": [118, 198], "glm": [1, 7, 8, 30, 34, 45, 48, 64, 65, 66, 67, 68, 69, 70, 71, 72, 77, 78, 79, 80, 81, 82, 83, 103, 104, 113, 127, 129, 130, 131, 132, 133, 134, 135, 154, 155, 156, 158, 160, 163, 171, 180, 184, 185, 186, 187, 188, 271, 288, 305, 352, 357, 364, 367, 428, 431, 432, 435, 437, 443, 448, 465, 466, 467, 484, 492, 496, 497, 498], "glm_paramet": 103, "glmax": [59, 105], "glmin": [59, 105], "glob": [65, 77, 131, 136, 146, 163, 189, 346, 365], "global": [9, 29, 35, 64, 70, 73, 113, 116, 118, 154, 163, 178, 179, 190, 197, 202, 231, 247, 248, 259, 272, 292, 312, 313, 346, 358, 368, 369, 385, 429, 455, 480, 497], "global_sign": [59, 130, 163, 368, 369], "global_signal_regress": 247, "glossari": [131, 159, 163, 181], "glover": [35, 64, 66, 68, 69, 70, 73, 113, 132, 163, 180, 327, 329, 330, 331, 332, 333, 334, 480], "glover_dispersion_deriv": [132, 163, 327, 329, 334], "glover_hrf": [132, 163, 327, 329, 334], "glover_time_deriv": [132, 163, 327, 329, 334], "gm": [12, 22, 91, 157, 163, 192, 219, 272, 273, 305, 306, 307, 308, 312, 313, 374, 377, 384, 387, 455], "gm_img": 46, "gm_imgs_test": [45, 46], "gm_imgs_train": [45, 46], "gm_maps_mask": 45, "gm_mask": 77, "gm_mask_img": [273, 296], "gm_mni152_templ": 297, "gmbh": 0, "go": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 119, 121, 144, 163, 165, 171, 175, 179, 184, 187, 188, 192, 284, 350, 355, 356, 358, 430, 436, 439, 443, 448, 450, 480, 497, 498], "goal": [7, 87, 92, 95, 98, 111, 120, 178, 179], "gobbini": [3, 33, 34, 40, 101, 118, 218, 271], "godfrei": [118, 201, 250], "goe": [0, 15, 26, 43, 88, 96, 103, 178, 240, 243], "goebel": [118, 176, 187, 309], "goeman": [78, 118, 322], "goldstein": [118, 206, 217, 253], "golobal_sign": 369, "gomez": [0, 148, 151, 157, 160, 163], "goncalv": [0, 128, 163], "gonn": [118, 217], "gonzalez": [26, 118, 141, 148, 163], "good": [7, 52, 59, 67, 68, 118, 120, 143, 163, 165, 168, 170, 172, 173, 174, 175, 177, 178, 179, 180, 188, 190, 192, 282, 307, 308, 422], "goodwin": [118, 198], "googl": 0, "gor": [0, 122, 148, 163], "gordon": [118, 231, 259], "gorgolewski": [0, 118, 121, 122, 136, 163, 208, 226, 254, 269, 282, 284, 287], "gorrono": [0, 153, 163], "goshen": 118, "got": [171, 179], "gotim": 118, "gottstein": 118, "gould": [118, 178], "gov": [51, 118, 170, 172, 210, 312], "govern": 178, "grab": [35, 50, 51, 52, 67, 103, 121, 164], "grace": [118, 207, 268], "gracefulli": 360, "grad": 498, "gradient": 13, "graham": [59, 118, 368, 369], "grai": [12, 26, 40, 43, 44, 45, 46, 68, 77, 91, 94, 131, 134, 141, 148, 151, 157, 163, 176, 184, 186, 192, 219, 228, 272, 273, 286, 305, 306, 307, 308, 312, 313, 374, 377, 428, 429, 434, 437, 439, 455, 479, 481], "grain": [10, 71, 118, 208, 254, 309], "gramfort": [0, 47, 52, 118, 122, 125, 150, 151, 163, 165, 177, 187, 225, 240, 257], "grand": [59, 327], "grant": 0, "graph": [46, 50, 56, 60, 165, 167, 177, 178, 185, 186, 305, 306, 310, 311, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430, 439, 498], "graph_net": 42, "graph_object": 405, "graphic": [61, 118, 165, 178, 179, 193, 240, 243], "graphical_lasso": 56, "graphicallasso": [56, 165], "graphicallassocv": [55, 56, 60, 61, 165, 178, 241], "graphicallassocvifittedgraphicallassocv": [55, 56, 61], "graphnet": [118, 177], "grass": 197, "gratton": [118, 232, 267], "gray_matter_map": [45, 46, 77, 228, 286], "gray_matter_map_filenam": [45, 77], "grayplot": [12, 154, 163, 429], "grayscal": [444, 446, 447, 453], "great": [148, 163], "greater": [68, 103, 156, 158, 163, 181, 202, 327, 336, 343, 344, 351, 364, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 430, 436, 437, 438, 439, 443, 447, 449, 451, 453, 466, 467, 470, 479], "greaterorequ": [121, 282], "greaterthan": [121, 282], "greatli": 187, "green": [43, 52, 118, 156, 163, 232, 267, 314, 318], "greenelab": 232, "greg": [0, 148, 151, 163], "gregori": [103, 118, 171], "grei": [68, 91, 157, 163, 191, 192, 273, 296, 297, 298, 300, 384, 387], "grew": 0, "grey_matter_imag": 26, "grey_matter_mask": 26, "greydon": [0, 156, 163], "grid": [7, 36, 41, 54, 69, 81, 86, 102, 172, 177, 185, 191, 241, 282, 284, 305, 306, 307, 308, 331, 332, 333, 337, 338, 339, 360, 402, 404, 407, 421, 426, 428, 434, 437, 440, 441, 442, 443, 495], "grid_param": [129, 163], "grid_search": [148, 163, 305, 306, 307, 308], "gridsearchcv": [102, 174], "gridsiz": 426, "gridspec": [43, 156, 163], "gridspec_kw": [41, 52, 82, 103], "griffith": [145, 163], "grobler": [0, 122, 163], "groningen": 0, "grosenick": [118, 177], "gross": 228, "ground": [44, 47, 60, 171], "group": [2, 3, 31, 32, 34, 35, 41, 49, 60, 61, 62, 65, 76, 77, 78, 79, 80, 81, 82, 100, 101, 104, 108, 109, 115, 116, 118, 145, 151, 163, 166, 167, 170, 171, 176, 181, 183, 184, 185, 186, 187, 198, 202, 205, 207, 228, 234, 239, 240, 241, 251, 252, 257, 265, 267, 268, 279, 285, 305, 306, 307, 308, 309, 312, 313, 353, 365, 368, 371, 376, 391, 424, 429, 430, 440, 441, 443, 448, 462, 480, 497, 498], "group_connect": 165, "group_mean": 252, "group_multiscale_functional_template_generated_with_basc_on_the_cambridge_sampl": 251, "group_sparse_covari": [136, 163, 178, 241], "group_sparse_covariance_cost": 178, "grouped_conditions_encod": 106, "grouped_fmri_mask": 106, "groupsparsecovari": [56, 165, 178, 241], "groupsparsecovariancecv": [56, 60, 165, 178], "grow": [52, 165, 202], "grp_mask": 389, "grp_mean": 252, "grueschow": [118, 176], "gruner": [118, 201, 250], "gryal": 261, "gs1": 43, "gsc": [56, 60], "gsr": 59, "gt": [38, 91, 93, 94, 104, 113, 480, 481], "gtihub": 164, "guarante": [0, 6, 83, 172, 178, 290, 303, 355, 360, 361, 367, 374], "guess": [171, 178, 383, 450], "guevara": [0, 136, 141, 163], "gui": [118, 183, 198], "guid": [42, 127, 133, 163, 179, 184, 186, 187, 188, 192, 194, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 484, 486, 487, 496], "guidelin": [59, 96, 118, 127, 134, 157, 160, 163, 164, 171, 188], "guidotti": [0, 141, 151, 163], "guillaum": [0, 118, 148, 151, 163, 210], "gur": [59, 118, 368, 369], "gustav": 0, "gutman": [118, 227], "gyral": [118, 206, 217], "gyri": [23, 118, 206, 261], "gyru": [10, 59, 93, 262], "gz": [2, 3, 4, 6, 11, 12, 15, 17, 19, 22, 27, 31, 32, 33, 34, 35, 36, 37, 38, 40, 44, 45, 46, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 65, 73, 77, 79, 87, 88, 91, 93, 94, 96, 97, 104, 105, 106, 107, 108, 109, 111, 112, 113, 120, 187, 188, 190, 202, 208, 210, 367, 368, 369, 405, 444, 453, 477, 478, 481], "g\u00f6z\u00fckan": [0, 132, 133, 134, 135, 163], "h": [59, 67, 118, 206, 211, 212, 213, 214, 215, 228, 236, 253, 262, 269, 287, 290, 314, 318, 368, 369], "h0": [315, 391], "h0_fmax": [159, 163, 391], "h0_max_mass": 391, "h0_max_siz": 391, "h0_max_t": 391, "h0_max_tfc": 391, "h1": 93, "h2": 93, "h_shape": 481, "ha": [3, 6, 13, 24, 32, 35, 38, 39, 41, 43, 44, 45, 52, 54, 55, 57, 61, 66, 68, 69, 71, 72, 73, 74, 77, 81, 83, 88, 91, 93, 96, 103, 108, 121, 127, 128, 129, 130, 132, 134, 135, 136, 138, 142, 145, 148, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 170, 172, 173, 176, 178, 179, 181, 183, 184, 188, 192, 202, 234, 239, 240, 241, 249, 250, 251, 253, 258, 262, 282, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 334, 340, 342, 351, 354, 355, 360, 361, 365, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 391, 393, 436, 438, 443, 447, 448, 454, 455, 456, 457, 461, 465, 467, 468, 470, 479, 480, 481, 495], "habib": [118, 202, 251], "had": [129, 147, 163], "haemodynam": [118, 180, 181, 185], "haemoglobin": 181, "hahn": [0, 160, 163], "hairi": 67, "haitz": [0, 153, 163], "hajim": [43, 44, 118, 224, 281], "hal": [47, 118, 165, 169, 177, 208, 240, 254, 457], "halchenko": [0, 145, 148, 163], "half": [24, 35, 52, 68, 73, 96, 104, 151, 163, 178, 185, 192, 305, 306, 307, 308, 312, 313, 327, 340, 342, 362, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 444, 446, 447, 451, 453, 455, 457, 459, 480], "halfwai": 479, "halgren": [23, 118, 206, 253, 261], "hammond": [0, 151, 163], "hampshir": 0, "han": 118, "hand": [0, 2, 68, 70, 96, 132, 133, 134, 135, 163, 178, 179, 190, 192, 291], "handbook": 187, "handed": [207, 268], "handedness_categori": 247, "handedness_scor": 247, "handi": [155, 163, 180], "handl": [1, 8, 52, 73, 111, 116, 128, 129, 131, 132, 134, 135, 138, 144, 160, 163, 171, 187, 188, 190, 191, 192, 260, 302, 315, 319, 346, 352, 353, 354, 355, 360, 366, 368, 432, 443, 448, 456, 462, 497], "handwerk": [26, 118], "hank": [0, 126, 136, 163], "hanov": 0, "hao": [0, 127, 128, 129, 130, 132, 155, 156, 158, 160, 163], "happen": [46, 50, 51, 164, 176, 179, 192, 479], "hard": [13, 58, 166, 178, 185, 190], "hardcod": [74, 127, 163, 303], "harder": 172, "hardest": 178, "hardwar": 178, "harold": [118, 227], "hartmut": 118, "harvard": [0, 22, 93, 166, 194, 228, 237, 238, 247, 255, 263, 423, 424, 490], "harvard_oxford": 22, "harvard_oxford_sub": 22, "harvardoxford": 11, "hasn": [3, 178], "hasti": [118, 165], "hat": [314, 318], "hatch": 188, "hatchl": [128, 163, 188], "have": [0, 2, 3, 6, 7, 10, 12, 13, 16, 17, 19, 24, 25, 26, 31, 33, 34, 35, 41, 42, 44, 45, 47, 52, 55, 57, 58, 59, 60, 64, 65, 66, 67, 68, 70, 72, 73, 77, 87, 88, 95, 96, 101, 103, 104, 105, 107, 111, 113, 114, 116, 120, 121, 127, 128, 129, 130, 132, 134, 136, 138, 140, 141, 142, 145, 146, 147, 148, 151, 154, 155, 156, 158, 159, 161, 163, 165, 168, 169, 170, 171, 172, 174, 177, 178, 179, 180, 181, 184, 185, 187, 188, 190, 191, 192, 198, 202, 205, 207, 221, 228, 235, 239, 240, 241, 243, 246, 251, 263, 267, 268, 282, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 320, 327, 330, 334, 335, 340, 341, 342, 344, 345, 347, 356, 360, 361, 362, 365, 367, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 390, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 429, 435, 436, 437, 443, 444, 445, 446, 447, 451, 453, 454, 455, 456, 457, 463, 464, 466, 467, 469, 476, 495, 496], "haven": [68, 107], "havlicek": [118, 201, 250], "haxbi": [4, 9, 16, 17, 29, 30, 48, 96, 116, 118, 120, 142, 143, 163, 175, 177, 186, 190, 192, 194, 271, 305, 350, 352, 357, 371, 377, 419, 428, 440, 443, 448, 450, 495, 497], "haxby2001": [3, 4, 16, 17, 19, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 96, 101, 106, 120, 190, 218, 271], "haxby_anat_filenam": [16, 17], "haxby_dataset": [3, 16, 17, 19, 27, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 96, 101, 106, 120, 171, 190, 192], "haxby_face_vs_hous": 31, "haxby_func_filenam": [16, 17], "haxby_label": 96, "haxby_mask_filenam": [16, 17], "haxby_svc_weight": 3, "hayn": [39, 118, 176], "hayward": 0, "hbm": [118, 205, 252, 345, 469], "hbm10": [118, 211, 212, 213, 214, 215, 290], "hbm30": [118, 236, 262], "hbm6": [118, 236, 262], "hc": 164, "hcp": [13, 28, 118, 194, 279], "hcp500": [198, 279], "he": 179, "head": [71, 179, 188, 368, 465, 467], "head_tpl": 465, "head_valu": 465, "header": [3, 12, 96, 100, 104, 115, 116, 125, 129, 131, 132, 149, 151, 159, 163, 190, 248, 344, 345, 348, 349, 355, 356, 357, 358, 359, 360, 361, 364, 429, 469, 497], "health": 0, "healthi": [118, 185, 187, 197, 201, 202, 217, 233, 251], "heart": 68, "heavi": [42, 45, 165, 179, 378], "heavier": 33, "heavili": 0, "hedden": [118, 202], "heidelberg": [0, 118, 165, 219, 225, 239, 257], "heidi": [118, 198], "height": [13, 32, 35, 54, 64, 70, 73, 74, 102, 104, 113, 151, 163, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 429, 430, 434, 436, 437, 439, 440, 441, 442, 443, 449, 451, 453, 465, 467, 480], "height_control": [6, 26, 35, 64, 65, 70, 73, 77, 79, 83, 104, 113, 135, 163, 327, 340, 343, 367, 467], "height_ratio": [41, 52], "height_tf": 44, "height_tf_i": 44, "heinzl": [39, 118], "held": [43, 176, 179, 305, 306, 307, 308, 496], "helen": [118, 205, 252], "help": [13, 16, 26, 35, 61, 96, 118, 144, 148, 149, 163, 166, 172, 180, 183, 192, 243, 496, 498], "helper": [25, 40, 43, 47, 52, 69, 80, 93, 109, 110, 114, 128, 136, 143, 144, 163, 179, 194, 282], "helwegen": [0, 160, 163], "hemi": [7, 10, 23, 24, 39, 50, 70, 114, 405, 444, 445, 446, 447, 453, 473, 474, 495], "hemispher": [7, 10, 23, 24, 39, 50, 61, 81, 88, 96, 113, 114, 132, 134, 141, 142, 146, 163, 169, 191, 206, 211, 212, 213, 214, 215, 216, 224, 227, 253, 261, 262, 290, 291, 293, 363, 379, 380, 381, 392, 400, 423, 428, 430, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 451, 453, 467, 474, 475, 481, 495], "hemispheres_to_analyz": 39, "hemodyam": 67, "hemodynam": [35, 69, 70, 72, 113, 171, 185, 480], "hemodynamic_model": [160, 163], "henc": [3, 41, 59, 61, 74, 77, 88, 154, 163, 176, 179, 181, 202], "henson": [103, 118], "herbert": [118, 217], "here": [2, 3, 4, 6, 7, 10, 11, 13, 15, 16, 20, 21, 24, 26, 31, 32, 33, 34, 35, 36, 37, 38, 41, 45, 46, 47, 51, 52, 57, 58, 59, 61, 64, 65, 66, 67, 68, 70, 71, 73, 74, 77, 90, 91, 94, 96, 97, 101, 103, 104, 105, 107, 108, 111, 113, 114, 118, 120, 121, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 184, 187, 188, 191, 192, 232, 268, 310, 311, 317, 319, 320, 330, 342, 384, 391, 396, 397, 398, 399, 400, 401, 406, 410, 411, 414, 415, 416, 417, 444, 446, 447, 480, 481], "herebi": 176, "herholz": [0, 148, 163], "hertz": [35, 64, 70, 73, 113, 305, 306, 307, 308, 310, 311, 312, 313, 345, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 455, 457, 468, 469, 480], "heschl": 93, "hesheng": [118, 202, 231, 237, 259, 263], "hesit": [120, 179], "heterogen": 165, "heurist": [143, 163, 177, 178, 241, 385, 428, 441, 442, 443, 450, 495], "hex": 452, "hexadecim": 11, "hexbin": 426, "hhmi": 228, "hidden": 26, "hide": [26, 118], "hierarch": [168, 185, 186, 202, 454], "hierarchi": [118, 202, 251], "hierarchical_kmean": [52, 158, 163, 455], "hierarchical_kmeans_parcel": 52, "hierarchicalkmean": [52, 133, 158, 163], "high": [10, 33, 35, 42, 52, 59, 64, 67, 68, 70, 73, 91, 96, 111, 113, 118, 148, 154, 155, 156, 163, 172, 173, 178, 179, 181, 185, 187, 188, 191, 192, 198, 199, 202, 211, 212, 213, 214, 215, 229, 249, 258, 290, 293, 294, 301, 305, 306, 307, 308, 310, 311, 312, 313, 315, 327, 330, 334, 345, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 405, 438, 451, 455, 457, 468, 469, 480], "high_pass": [6, 26, 35, 52, 54, 55, 56, 57, 58, 59, 61, 64, 68, 70, 72, 73, 91, 93, 94, 102, 103, 113, 148, 163, 192, 305, 306, 307, 308, 310, 311, 312, 313, 327, 330, 334, 345, 368, 369, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 455, 457, 468, 469, 480, 481], "high_variance_confound": [52, 55, 56, 57, 59, 61, 68, 91, 93, 94, 134, 138, 155, 163, 192, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 457, 481], "higher": [6, 73, 77, 120, 143, 163, 165, 176, 181, 183, 240, 260, 305, 306, 307, 308, 310, 311, 312, 313, 327, 340, 346, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 405, 455, 456, 457, 468], "highest": [41, 55, 57, 307, 330, 351, 470], "highli": [66, 178, 179], "highlight": [26, 103, 118, 188], "hilari": [118, 207, 268], "himanshu": [0, 131, 132, 133, 134, 163], "himanshupathak21061998": [148, 149, 163], "hint": [68, 165, 166], "hinz": [118, 227], "hippocampu": [232, 267], "hiroki": [43, 44, 118, 224, 281], "hist": [52, 71, 427], "histogram": [327, 336, 385, 388, 426, 427], "histori": 178, "hkmean": 52, "hkmeans_count": 52, "hkmeans_labels_img": 52, "hoc": 178, "hochberg": [181, 326], "hocheberg": [158, 163], "hodg": [118, 217], "hold": [7, 43, 80, 132, 163, 178, 179, 188, 312, 313, 334, 391, 402, 455], "hole": 96, "holland": [0, 148, 151, 163], "hollinshead": [118, 231, 237, 259, 263], "holm": [118, 199, 231, 259, 345, 469], "holtzheim": [118, 205, 252], "home": [2, 3, 4, 6, 7, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 87, 88, 89, 90, 91, 93, 94, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 187, 190, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 301, 355, 480, 481], "homedir": [140, 163], "hommel": [158, 163], "homogen": [91, 130, 163, 168, 191, 205, 247, 252, 305, 306, 307, 308, 312, 313, 360, 374, 377, 455], "homotop": [202, 247, 251], "honorio": [118, 178, 240, 243], "hood": [41, 172, 177, 305, 306, 307, 308, 312, 313, 374, 377, 455], "hook": 179, "hopefulli": 178, "hopkin": 0, "hoptman": [118, 227], "horea": [0, 145, 148, 163], "horizont": [68, 74, 82, 131, 163, 277, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 481], "horizontal_checkerboard": [67, 68, 70, 222, 480], "horton": [118, 198], "hospit": 0, "hospitali": 0, "host": [164, 179], "host_and_deploy_doc": 164, "host_doc": 164, "hough": [118, 198], "hour": [179, 187, 188, 342, 391], "hous": [3, 19, 30, 34, 35, 41, 48, 96, 100, 115, 116, 128, 163, 176, 186, 190, 191, 217, 218, 271, 305, 307, 309, 350, 352, 355, 357, 358, 371, 377, 391, 419, 437, 440, 443, 448, 450, 497], "hover": 91, "how": [0, 1, 2, 3, 4, 5, 6, 7, 10, 15, 16, 20, 22, 26, 28, 36, 39, 41, 43, 47, 50, 51, 52, 53, 56, 58, 59, 61, 64, 65, 66, 68, 69, 71, 73, 74, 80, 81, 86, 88, 89, 90, 91, 93, 96, 97, 103, 105, 107, 110, 111, 112, 114, 116, 120, 128, 132, 143, 154, 155, 158, 159, 163, 164, 166, 168, 169, 170, 171, 172, 174, 176, 178, 181, 185, 186, 187, 189, 191, 207, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 496], "howard": 228, "howev": [0, 26, 50, 51, 52, 68, 71, 73, 88, 96, 103, 111, 164, 165, 171, 174, 178, 181, 192, 199, 360, 367, 369, 498], "hoyo": [0, 52, 118, 151, 163, 171, 173, 307, 308, 456, 462], "hrcku": 22, "hrf": [6, 67, 68, 69, 70, 132, 158, 160, 163, 171, 182, 185, 327, 329, 331, 332, 333, 334, 337, 338, 339, 498], "hrf_model": [6, 26, 35, 64, 66, 67, 68, 70, 72, 73, 113, 327, 329, 330, 334, 480], "hspace": [47, 52, 60], "hstack": [32, 79, 82, 317, 319, 320], "htdoc": [200, 248], "htm": [118, 314, 318], "html": [3, 13, 19, 31, 35, 36, 38, 52, 55, 56, 57, 59, 61, 64, 65, 70, 73, 77, 79, 101, 104, 113, 131, 134, 148, 152, 156, 158, 163, 164, 171, 182, 186, 188, 192, 198, 200, 201, 218, 236, 262, 271, 279, 305, 306, 307, 308, 327, 340, 369, 373, 376, 378, 380, 449, 450, 451, 452, 453, 457, 465, 467, 495, 496], "html_document": 465, "html_report": [373, 376, 378, 380, 457], "html_surfac": [129, 134, 163], "html_view": [450, 495], "htmlcov": 164, "htmldocument": 465, "htmlreport": [327, 340, 373, 376, 378, 380, 381, 457, 467], "http": [0, 2, 3, 4, 6, 10, 11, 13, 18, 19, 20, 22, 28, 36, 40, 42, 47, 51, 54, 59, 65, 72, 79, 81, 82, 83, 102, 104, 105, 107, 111, 112, 118, 121, 160, 163, 164, 165, 169, 170, 172, 177, 179, 181, 187, 188, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 210, 217, 218, 219, 220, 221, 223, 224, 225, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 240, 249, 250, 251, 252, 254, 257, 258, 259, 260, 262, 263, 268, 271, 277, 279, 283, 285, 286, 288, 302, 305, 306, 307, 308, 312, 314, 318, 369, 451, 452, 457, 495, 496], "httperror": [147, 163], "hu": [118, 205, 252], "huang": [0, 132, 163], "hubbard": [118, 187], "huge": [0, 68, 69, 148, 163, 208], "hugh": 228, "huguet": [0, 130, 163], "human": [0, 9, 23, 29, 42, 43, 44, 46, 61, 69, 116, 118, 121, 176, 179, 185, 197, 202, 205, 206, 210, 211, 212, 213, 214, 215, 217, 224, 226, 229, 230, 231, 236, 237, 247, 252, 253, 258, 259, 261, 262, 263, 266, 279, 281, 282, 284, 290, 345, 369, 426, 440, 448, 469, 497], "humanconnectom": [118, 198, 279], "hunar": [103, 118], "hundr": [6, 52, 455], "huntenburg": [0, 136, 151, 163], "hutchison": [118, 201, 250], "hvidovr": 0, "hwbm2": 18, "hybrid": [310, 311], "hyman": [118, 217], "hyper": [172, 173], "hyperparamet": [36, 45], "hyperplan": 310, "hypothalam": [118, 217], "hypothes": [66, 181, 185], "hypothesi": [176, 181, 309, 315, 342, 391], "hz": [6, 35, 64, 68, 70, 72, 73, 113, 192, 202, 327, 334, 480], "i": [0, 2, 4, 6, 10, 11, 12, 13, 15, 16, 17, 19, 21, 22, 23, 24, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 118, 119, 120, 121, 123, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 191, 194, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 210, 211, 212, 213, 214, 215, 219, 222, 225, 226, 228, 229, 231, 234, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 484, 490, 495, 496, 498, 499], "i_ax": 103, "i_col": 109, "i_row": 81, "i_trial": 103, "iacovella": [118, 202], "ian": [0, 151, 163], "ic": [51, 107, 201], "ic_img": 107, "ic_map": 107, "ic_term": 107, "ic_threshold": 107, "ica": [22, 49, 53, 57, 62, 89, 94, 100, 108, 115, 116, 118, 121, 136, 163, 166, 167, 185, 186, 187, 196, 198, 201, 225, 233, 250, 260, 268, 279, 282, 295, 312, 313, 353, 362, 368, 369, 371, 373, 376, 377, 441, 443, 448, 461, 481, 495, 497, 498], "ica_aroma": [59, 158, 163, 368, 369], "ica_map": 107, "icbm": [22, 68, 77, 148, 163, 194, 272], "icbm152": [12, 157, 163, 185, 202, 219, 272, 273, 295, 296, 297, 298, 299, 300], "icbm152_2009": [12, 22, 68, 77], "icbm152nlin2009": 219, "icbm_mask": 68, "iceberg": [26, 118], "id": [6, 35, 64, 65, 71, 72, 73, 104, 107, 112, 121, 128, 163, 199, 217, 220, 247, 249, 262, 280, 282, 284, 291, 327, 372, 375, 379, 466, 480], "ida": [3, 33, 34, 40, 101, 118, 218, 271], "idea": [53, 90, 96, 171, 178, 181], "ideal": [81, 109, 168, 181, 188, 202, 251], "ident": [10, 25, 41, 70, 82, 113, 178, 202, 345, 362, 459, 469], "identif": [74, 96, 118, 185, 198, 204, 247, 277], "identifi": [0, 26, 31, 32, 34, 35, 53, 61, 65, 96, 118, 127, 158, 163, 169, 177, 180, 181, 184, 198, 249, 323, 327, 329, 334, 336, 340], "idp": 208, "idrissa": [0, 133, 163], "idrobo": [0, 52, 118, 151, 163, 171, 173, 307, 308, 456, 462], "idx": 111, "ie": [17, 160, 163, 165, 170, 190, 317, 319, 320, 373, 376, 378, 380, 457], "ieee": [47, 51, 52, 118, 170, 177, 199, 208, 312, 313, 456, 462], "ignor": [3, 17, 31, 34, 36, 42, 51, 65, 72, 105, 107, 135, 149, 154, 163, 164, 239, 240, 241, 282, 284, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 334, 340, 342, 344, 346, 356, 357, 358, 365, 367, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 436, 437, 438, 443, 454, 455, 456, 457, 467, 479], "ignorecas": 121, "ii": [118, 204, 206, 277, 369], "iii": [118, 205, 252], "ilinoi": 0, "ill": 172, "illustr": [9, 29, 52, 68, 69, 87, 92, 95, 98, 104, 113, 116, 171, 179, 188, 191, 192, 447, 479, 497], "im": [19, 33, 112], "imag": [1, 2, 6, 8, 12, 14, 15, 19, 21, 22, 23, 24, 25, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 64, 65, 66, 68, 69, 71, 72, 73, 77, 78, 79, 80, 81, 82, 86, 89, 90, 91, 93, 94, 96, 99, 101, 103, 104, 106, 108, 109, 110, 113, 115, 118, 119, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 151, 155, 156, 157, 158, 159, 160, 163, 165, 166, 168, 169, 170, 171, 172, 176, 177, 179, 181, 183, 185, 187, 188, 189, 194, 197, 198, 199, 200, 202, 204, 207, 208, 210, 217, 218, 219, 220, 221, 222, 224, 225, 226, 228, 229, 231, 234, 235, 236, 237, 238, 239, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 268, 271, 272, 273, 275, 277, 278, 279, 281, 282, 283, 284, 285, 288, 289, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 322, 324, 327, 330, 340, 341, 342, 343, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 466, 467, 469, 470, 472, 474, 475, 476, 479, 480, 481, 484, 487, 490, 497, 498], "image_10426": 15, "image_11020": 107, "image_11021": 107, "image_151": 112, "image_17327": 107, "image_17328": 107, "image_17329": 107, "image_17330": 107, "image_17331": 107, "image_17332": 107, "image_17333": 107, "image_17334": 107, "image_17335": 107, "image_17336": 107, "image_17337": 107, "image_17338": 107, "image_17339": 107, "image_17340": 107, "image_17341": 107, "image_17342": 107, "image_17343": 107, "image_17344": 107, "image_17345": 107, "image_17346": 107, "image_17347": 107, "image_17348": 107, "image_17349": 107, "image_17350": 107, "image_17351": 107, "image_17352": 107, "image_2675": 112, "image_2676": 112, "image_2818": 112, "image_2834": 112, "image_3041": 112, "image_3042": 112, "image_65426": 107, "image_filt": [121, 282], "image_id": [112, 121, 284], "image_m": 201, "image_metadata": 282, "image_path": 107, "image_term": [121, 282], "images_meta": [107, 112, 121, 226, 282, 283, 284, 285], "images_to_plot": 109, "imbalanc": 171, "imcal": 356, "img": [2, 4, 50, 53, 65, 73, 77, 79, 81, 86, 92, 104, 109, 134, 143, 151, 163, 169, 179, 190, 294, 309, 312, 313, 330, 340, 342, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 425, 427, 429, 437, 455, 457, 460, 461, 463, 464, 466, 475, 479, 481, 495], "img1": [87, 105, 356], "img2": [87, 105, 356], "img_3d_affin": 86, "img_3d_affine_in_mm_spac": 86, "img_4d_affin": 86, "img_4d_affine_in_mm_spac": 86, "img_copi": 348, "img_count": 81, "img_fil": [368, 369], "img_filt": [103, 104, 113, 330], "img_in_mm_spac": 86, "img_length": 422, "img_path": [40, 366], "img_plot": [134, 135, 163], "img_to_signals_label": [128, 130, 148, 151, 163, 461, 463], "img_to_signals_map": [128, 163, 460, 464], "img_valu": 457, "imgs_list": [372, 373, 374], "immedi": [96, 369], "impact": [45, 68, 80, 118, 158, 163, 176, 179, 188, 192, 327, 340, 369, 426], "imperfect": 166, "imperi": 0, "implement": [16, 26, 35, 51, 52, 59, 61, 64, 68, 69, 70, 73, 101, 104, 113, 132, 133, 134, 136, 143, 145, 151, 154, 155, 158, 159, 163, 164, 165, 168, 169, 170, 172, 174, 176, 177, 178, 179, 185, 187, 188, 193, 202, 255, 256, 305, 306, 309, 310, 311, 315, 317, 322, 327, 329, 331, 332, 333, 334, 337, 338, 339, 340, 342, 351, 364, 368, 369, 379, 380, 381, 382, 391, 392, 393, 395, 405, 444, 446, 447, 457, 469, 470, 480, 481, 492], "impli": [16, 155, 163, 178, 239, 360, 382, 405], "implic": [72, 103, 118], "implicit": [6, 33, 42, 154, 163, 173, 185, 307, 308], "implicitli": [68, 70, 82, 106, 171, 178], "implictili": 6, "import": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 120, 121, 141, 147, 148, 149, 151, 156, 158, 163, 165, 166, 169, 171, 172, 173, 174, 176, 178, 179, 180, 183, 184, 185, 187, 188, 190, 191, 192, 198, 224, 249, 315, 317, 319, 320, 327, 340, 344, 347, 352, 356, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 439, 467, 473, 475, 479, 495], "important_term": 107, "importantli": [172, 174, 179], "importerror": [5, 102, 151, 163], "impos": [42, 136, 163], "imposs": 359, "impress": 70, "improv": [26, 33, 66, 77, 111, 118, 127, 128, 129, 131, 132, 134, 141, 144, 147, 148, 151, 158, 159, 160, 163, 171, 172, 173, 177, 178, 179, 181, 185, 190, 192, 219, 232, 267, 345, 372, 375, 379, 454, 469], "impul": [63, 75, 116, 278, 327, 431, 432, 443, 497], "impuls": [67, 69, 180, 181, 185, 327, 329, 334], "imput": [127, 163], "imread": 40, "imshow": [13, 26, 40, 41, 43, 44, 47, 86, 166, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 429, 434, 436, 437, 438, 440, 441, 442, 443, 444, 446, 447], "imt": 0, "in_memori": 111, "inact": [6, 181], "inappropri": 39, "inbuilt": [305, 306, 307, 308], "inc": 0, "inch": [393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419], "includ": [3, 15, 26, 32, 35, 39, 42, 45, 46, 57, 61, 64, 65, 66, 68, 70, 71, 73, 77, 79, 81, 82, 91, 93, 94, 103, 104, 109, 111, 113, 125, 128, 129, 130, 131, 132, 134, 135, 141, 151, 153, 154, 158, 160, 163, 164, 169, 171, 176, 177, 179, 180, 183, 185, 187, 188, 190, 196, 198, 200, 201, 202, 210, 218, 222, 231, 232, 234, 239, 240, 241, 246, 250, 251, 268, 273, 287, 295, 296, 299, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 318, 327, 340, 342, 352, 366, 367, 368, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 405, 430, 454, 455, 456, 457, 466, 480, 481, 485, 491], "include_children": 111, "inclus": [68, 304], "inclusion_filt": 304, "incompat": [145, 163, 327], "incomplet": [129, 163], "incongru": 183, "inconsist": [156, 163, 340, 342], "incorpor": [66, 103, 170], "incorrect": 185, "increas": [36, 47, 51, 68, 71, 81, 91, 94, 107, 108, 111, 128, 145, 163, 175, 176, 178, 181, 185, 191, 229, 243, 342, 369, 385, 391, 428, 441, 442, 443, 450, 455, 468], "increment": [68, 97, 187, 188], "inde": [6, 45, 52, 88, 165, 166, 174, 181, 328, 495], "indent": 96, "independ": [43, 51, 68, 100, 115, 116, 136, 163, 168, 170, 171, 176, 178, 181, 185, 192, 224, 225, 268, 305, 306, 307, 308, 312, 345, 352, 357, 368, 369, 371, 374, 377, 391, 443, 448, 469, 497], "index": [2, 6, 10, 11, 21, 23, 24, 35, 43, 44, 53, 58, 59, 67, 68, 73, 74, 89, 90, 93, 103, 104, 107, 114, 130, 134, 140, 158, 163, 164, 169, 179, 186, 199, 200, 249, 251, 253, 255, 256, 258, 259, 261, 262, 263, 269, 304, 305, 306, 307, 308, 317, 319, 320, 334, 352, 360, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 405, 445, 457, 459, 469, 479, 481], "index_": [53, 89, 169, 457], "index_img": [2, 3, 21, 31, 32, 33, 34, 35, 36, 38, 39, 41, 52, 53, 89, 91, 94, 101, 106, 108, 134, 163, 166, 169, 191, 192, 346, 353], "index_of_each_map": 459, "index_to_xy_coord": 43, "indexerror": [136, 158, 163], "indi": [200, 227, 248], "india": 0, "indian": 0, "indic": [10, 32, 34, 44, 53, 57, 61, 68, 74, 81, 88, 140, 143, 148, 163, 169, 176, 179, 185, 188, 190, 199, 201, 231, 236, 247, 249, 250, 253, 255, 256, 258, 259, 262, 263, 271, 282, 288, 305, 306, 307, 308, 310, 311, 312, 327, 330, 346, 358, 360, 361, 363, 371, 372, 373, 374, 375, 376, 377, 378, 380, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 434, 437, 441, 442, 443, 444, 445, 446, 447, 450, 451, 453, 457, 459, 466], "indirect": [165, 166], "indirectli": [10, 113], "individu": [54, 61, 65, 68, 70, 74, 78, 80, 81, 82, 83, 96, 103, 104, 111, 113, 118, 165, 170, 184, 185, 187, 189, 192, 197, 198, 202, 204, 209, 217, 220, 239, 240, 265, 277, 342, 389, 405, 445, 481, 498], "inertia": 454, "inf": [15, 57, 77, 107, 345, 373, 376, 382, 385, 469, 480, 481], "infeas": 111, "infer": [12, 52, 65, 67, 78, 81, 86, 103, 104, 106, 113, 118, 134, 163, 179, 181, 184, 185, 322, 330, 342, 360, 367, 391, 429], "inferior": 93, "inferno": [6, 15, 17, 21, 26, 33, 37, 38, 43, 71, 72, 78, 79, 81, 82, 89, 96, 106, 109, 110, 114, 134, 163, 379, 380, 381, 426, 481], "infin": 15, "infinit": 360, "infinitesim": 180, "infl_left": [211, 212, 213, 214, 215, 216, 290, 438, 451, 495], "infl_right": [211, 212, 213, 214, 215, 216, 290, 438, 451], "inflat": [10, 24, 39, 70, 113, 118, 206, 211, 212, 213, 214, 215, 216, 290, 293, 294, 301, 438, 444, 445, 446, 447, 451, 453, 478, 479], "influenc": [71, 178, 247, 311], "info": [164, 179, 188, 203, 282, 284, 438, 444, 445, 446, 447], "inform": [3, 6, 7, 12, 13, 17, 19, 22, 24, 26, 27, 31, 32, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 51, 52, 54, 55, 56, 57, 61, 64, 65, 68, 69, 72, 73, 74, 77, 79, 80, 91, 93, 94, 96, 97, 103, 104, 105, 106, 108, 109, 113, 114, 118, 120, 121, 125, 128, 131, 134, 145, 149, 159, 163, 164, 165, 166, 169, 170, 171, 173, 175, 178, 179, 180, 184, 185, 187, 188, 190, 192, 197, 198, 199, 200, 201, 204, 205, 207, 208, 218, 219, 223, 224, 225, 226, 228, 232, 233, 236, 237, 239, 240, 241, 247, 249, 250, 251, 252, 257, 259, 260, 262, 263, 270, 271, 272, 273, 279, 280, 281, 282, 284, 286, 289, 291, 295, 296, 297, 298, 299, 300, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 320, 327, 340, 342, 354, 356, 360, 366, 367, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 454, 455, 456, 457, 467, 468, 469, 481, 484, 496, 498], "informat": [0, 228], "infrastructur": [179, 188], "inglat": 293, "inher": [156, 163], "inherit": [15, 130, 134, 135, 163, 318, 465], "ini": [164, 188], "init": [179, 454], "init_with_figur": [393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419], "initi": [0, 3, 24, 39, 51, 52, 53, 70, 96, 103, 129, 163, 169, 177, 180, 190, 192, 197, 221, 241, 243, 312, 313, 314, 318, 327, 340, 372, 373, 375, 376, 378, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 454, 457], "inlin": [178, 465], "inmemorymesh": [7, 444, 445, 446, 447, 453, 471, 478, 479], "inner": [305, 306, 307, 308, 365, 475, 479], "inner_mesh": [25, 475, 479], "innermost": 178, "inplac": 468, "input": [2, 3, 4, 6, 10, 15, 16, 24, 34, 35, 41, 46, 50, 51, 52, 57, 58, 60, 69, 70, 72, 73, 78, 79, 81, 82, 87, 90, 96, 100, 101, 104, 111, 113, 115, 116, 120, 128, 129, 130, 132, 134, 137, 138, 141, 142, 143, 144, 146, 147, 148, 151, 155, 157, 158, 159, 160, 163, 168, 171, 174, 176, 178, 179, 180, 185, 189, 191, 192, 198, 222, 240, 241, 242, 243, 244, 245, 246, 248, 251, 252, 260, 278, 279, 305, 306, 307, 308, 309, 310, 311, 312, 313, 322, 324, 326, 327, 329, 334, 335, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 367, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 428, 429, 436, 437, 438, 441, 442, 443, 450, 451, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 469, 479, 480, 481, 495, 497, 498], "input_data": [37, 38, 43, 44, 45, 50, 54, 55, 56, 57, 58, 59, 61, 64, 71, 91, 93, 94, 96, 101, 102, 103, 106, 107, 108, 109, 110, 120, 158, 163], "inria": [0, 47, 118, 165, 169, 177, 208, 225, 240, 254, 257, 457], "insect": [118, 219], "insensit": 172, "insert": [35, 449, 450, 451, 452, 453, 465, 467, 495], "insid": [15, 22, 25, 36, 52, 58, 101, 174, 179, 239, 240, 241, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 345, 351, 365, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 405, 429, 441, 442, 445, 446, 454, 455, 456, 457, 479], "insight": [0, 41, 59, 157, 163, 165], "inspect": [43, 58, 68, 71, 73, 164, 166, 171, 187, 200, 327, 340, 481], "inspir": [53, 177, 179, 188], "instabl": [60, 68, 178, 468], "instal": [10, 65, 116, 127, 130, 132, 143, 148, 151, 158, 159, 163, 164, 187, 188, 255, 256, 347, 373, 376, 378, 380, 444, 446, 447, 457, 495], "instanc": [3, 4, 6, 16, 23, 24, 33, 52, 54, 68, 69, 70, 88, 132, 133, 135, 145, 151, 158, 163, 165, 166, 168, 170, 171, 179, 180, 181, 184, 185, 187, 190, 191, 239, 240, 241, 246, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 323, 324, 327, 334, 336, 340, 342, 346, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 428, 430, 434, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 453, 454, 455, 456, 457, 475, 496], "instant": [345, 469], "instantan": 74, "instanti": [53, 54, 57, 91, 93, 94, 132, 134, 158, 163, 309, 327, 402, 404, 407, 409, 411, 413, 415, 417, 419, 481], "instead": [10, 15, 37, 38, 43, 44, 45, 50, 52, 54, 55, 56, 57, 58, 59, 61, 64, 68, 71, 91, 93, 94, 96, 101, 102, 103, 106, 107, 108, 109, 110, 120, 127, 128, 130, 132, 134, 135, 136, 138, 141, 142, 144, 145, 146, 148, 151, 155, 157, 158, 159, 160, 163, 177, 178, 179, 180, 183, 191, 192, 203, 228, 239, 240, 241, 264, 285, 286, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 323, 327, 331, 332, 333, 337, 338, 339, 340, 366, 371, 379, 380, 381, 391, 454, 455, 456, 479], "institut": [0, 181, 185, 198, 199, 202, 227, 228, 249], "instruct": [68, 70, 74, 116, 127, 159, 163, 164, 179, 186, 188, 283, 496], "insular": [59, 93, 118, 217], "int": [12, 38, 43, 44, 45, 50, 51, 52, 53, 60, 65, 69, 79, 80, 81, 86, 96, 103, 104, 107, 109, 131, 160, 163, 169, 179, 201, 239, 240, 241, 243, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 319, 320, 322, 327, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 345, 346, 351, 357, 368, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 426, 428, 429, 430, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 462, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 479], "int32": [38, 43, 44, 81, 96, 132, 160, 163, 190, 355, 372, 373, 374, 375, 376, 377, 378, 457], "int64": [38, 43, 44, 52, 72, 81, 104, 132, 160, 163, 190, 454, 456], "int8": [132, 160, 163, 344, 358], "integ": [16, 61, 86, 96, 130, 138, 142, 151, 155, 158, 160, 163, 185, 190, 192, 199, 236, 243, 249, 251, 253, 255, 256, 258, 259, 262, 263, 310, 311, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 434, 436, 437, 441, 442, 443, 445, 446, 458, 463, 464, 467], "integr": [101, 136, 151, 163, 191, 374, 481], "intel": [52, 118, 456, 462], "intellig": [0, 86, 118, 200, 202], "intend": [192, 219, 320, 360, 361], "intens": [27, 53, 66, 71, 74, 83, 90, 96, 190, 191, 312, 343, 344, 364, 368, 428, 429, 436, 441, 442, 443, 450, 457, 467, 479, 495], "intent": 179, "intent_cod": [59, 105], "intent_nam": [59, 105], "intent_p1": [59, 105], "intent_p2": [59, 105], "intent_p3": [59, 105], "intention": 188, "inter": [103, 109, 166, 191, 192, 202, 220, 386, 388], "interact": [10, 16, 23, 50, 55, 57, 61, 103, 111, 130, 148, 149, 153, 158, 163, 167, 169, 171, 179, 185, 186, 187, 380, 449, 450, 452, 498], "intercept": [45, 77, 78, 79, 81, 82, 83, 104, 106, 110, 113, 128, 163, 176, 305, 306, 307, 308, 310, 311, 341, 342, 391], "intercept_": [305, 306, 307, 308, 310, 311], "interchang": [154, 163], "interest": [3, 6, 15, 16, 17, 24, 37, 45, 52, 54, 58, 69, 71, 72, 73, 85, 99, 101, 102, 103, 104, 108, 111, 112, 116, 118, 121, 136, 154, 163, 165, 171, 173, 174, 176, 178, 179, 180, 181, 185, 187, 191, 192, 205, 209, 217, 247, 248, 254, 257, 259, 268, 270, 271, 272, 274, 275, 276, 277, 280, 281, 286, 288, 289, 290, 291, 293, 317, 319, 320, 350, 355, 357, 358, 362, 365, 371, 375, 405, 434, 442, 443, 445, 448, 457, 497, 498], "interestingli": 68, "interfac": [41, 65, 70, 77, 130, 131, 134, 154, 158, 163, 170, 178, 179, 185, 305, 306, 484], "intermedi": [46, 70, 174, 187], "intermediari": 50, "intern": [0, 36, 41, 51, 118, 132, 163, 170, 177, 178, 179, 181, 197, 202, 229, 241, 251, 312, 313, 354, 356], "internet": [3, 52, 170, 189, 194, 498], "interpol": [10, 25, 41, 43, 44, 47, 68, 77, 86, 111, 130, 132, 134, 135, 140, 163, 202, 282, 359, 360, 361, 436, 437, 442, 443, 450, 469, 479], "interpret": [16, 26, 41, 54, 71, 118, 167, 176, 177, 178, 181, 198, 199, 233, 249, 253, 255, 256, 259, 260, 263, 356, 391, 495], "interrupt": 181, "intersect": [96, 191, 199, 386, 388, 389, 461], "intersect_mask": 191, "intersubject": [118, 211, 212, 213, 214, 215, 290], "interv": [67, 68, 103, 164, 305, 306, 307, 308, 310, 311, 317, 319, 320, 343, 364, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 436, 437, 443, 456, 462, 467, 479], "intervent": [118, 165, 239], "intra": [32, 34], "intracalcarin": 93, "intracrani": 228, "intrapariet": 107, "intrins": [38, 118, 168, 202, 231, 233, 237, 259, 260, 263, 369], "intro": [1, 8, 68, 116, 187, 288, 327, 343, 357, 428, 431, 432, 437, 443, 448, 466, 497], "introduc": [121, 132, 133, 134, 141, 151, 160, 163, 171, 172, 176, 179, 192, 240, 247], "introduct": [1, 8, 31, 116, 118, 127, 148, 163, 172, 174, 175, 179, 182, 184, 186, 192, 271, 305, 319, 320, 352, 357, 434, 442, 448, 450, 497, 498], "introductori": [1, 116, 179], "inv": 50, "invalid": [11, 61, 114, 127, 135, 138, 163, 194, 238, 373, 376, 457, 461, 490], "invcov": [317, 319, 320], "invers": [6, 49, 61, 62, 101, 116, 118, 153, 163, 166, 167, 171, 178, 186, 189, 241, 246, 257, 268, 317, 319, 320, 324, 371, 376, 424, 430, 439, 440, 448, 449, 454, 497, 498], "inverse_transform": [38, 43, 45, 52, 58, 94, 101, 103, 106, 107, 108, 109, 110, 114, 119, 128, 134, 144, 151, 160, 163, 168, 239, 312, 313, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 454, 455, 456, 457, 498], "invert": [101, 108, 129, 154, 163, 178, 192, 239, 317, 319, 320, 371, 374, 377, 392, 428, 430, 434, 436, 437, 439, 441, 442, 443], "invest": 0, "investig": [73, 96, 101, 170, 218, 224, 309], "investiss": 0, "invit": 229, "involv": [68, 70, 72, 103, 111, 118, 181, 187, 197, 247], "inward": 479, "io": [10, 18, 22, 54, 65, 79, 81, 82, 83, 102, 104, 164, 169, 179, 188, 203, 207, 208, 221, 229, 254, 258, 268, 277, 451, 496], "ion": [6, 72, 234, 235, 288], "ip": 54, "iprep": 65, "ipynb": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114], "ipython": [2, 4, 17, 171, 187, 496], "iq": [185, 200, 305, 306, 307, 308], "irb": 198, "irrespect": [134, 163, 181, 441], "is_classif": [135, 163], "is_exclud": 24, "is_us": 107, "is_valid": [121, 151, 163], "isabel": [118, 210], "isbi": [51, 118, 170, 312, 313], "isbn": [118, 314, 318, 319, 320], "isf": [65, 78, 81, 104, 112, 135, 163], "ishai": [3, 33, 34, 40, 101, 118, 218, 271], "isin": [3, 24, 31, 33, 36, 38, 39, 101, 106, 120, 121, 282], "isn": 164, "isnan": [47, 79, 96, 106, 109, 110], "isnul": [121, 282], "isol": [6, 71, 103, 171, 181, 405], "isort": [129, 132, 163], "isotrop": [169, 202], "isovoxel": 176, "israel": 0, "issu": [46, 50, 51, 69, 132, 133, 135, 143, 144, 145, 146, 147, 155, 157, 158, 160, 164, 178, 179, 181, 184, 185, 291, 349, 354], "itali": 0, "item": [10, 22, 24, 35, 67, 68, 70, 73, 103, 109, 121, 131, 163, 282, 283, 284, 285, 330, 386, 388], "iter": [36, 51, 56, 70, 72, 94, 108, 111, 151, 163, 171, 176, 202, 239, 240, 241, 243, 305, 306, 307, 308, 310, 311, 312, 313, 346, 350, 353, 354, 357, 362, 379, 380, 381, 422, 455, 456, 462], "iter_img": [2, 51, 134, 163, 191, 352], "iterrow": 103, "itertool": 81, "its": [2, 3, 16, 20, 28, 33, 38, 41, 43, 47, 59, 61, 68, 70, 86, 90, 91, 92, 96, 98, 101, 103, 120, 121, 132, 134, 140, 143, 151, 154, 156, 158, 160, 163, 164, 165, 168, 170, 171, 172, 174, 176, 177, 178, 179, 181, 184, 185, 188, 192, 218, 235, 246, 259, 261, 271, 282, 283, 284, 285, 305, 306, 307, 308, 310, 311, 312, 313, 314, 318, 327, 329, 334, 340, 341, 342, 344, 355, 372, 375, 379, 426, 428, 429, 430, 434, 436, 437, 439, 441, 442, 443, 444, 445, 446, 447, 453, 454, 455, 456, 457, 481, 491], "itself": [20, 26, 36, 68, 168, 202, 239, 240, 241, 312, 313, 350, 455, 479], "ivan": [141, 148, 163], "ixar_spac": [51, 53, 55, 56, 59, 61], "j": [23, 26, 39, 43, 44, 50, 51, 52, 54, 59, 61, 69, 78, 86, 102, 103, 106, 118, 121, 145, 148, 157, 163, 165, 166, 170, 172, 173, 176, 177, 185, 198, 199, 202, 204, 206, 208, 217, 219, 223, 224, 225, 226, 229, 230, 231, 232, 236, 251, 253, 254, 257, 258, 259, 261, 262, 266, 267, 269, 277, 281, 282, 284, 287, 307, 308, 312, 322, 342, 345, 368, 369, 391, 429, 469, 470, 495], "j_col": 81, "jaakkola": [118, 178, 240, 243], "jack": [118, 172, 236, 262], "jahn": 7, "jain": [0, 132, 163], "jake": [0, 151, 163], "jakob": [39, 118], "jame": [3, 33, 34, 40, 101, 118, 205, 218, 252, 271, 319, 320], "jami": [118, 228], "jan": [0, 118, 122, 163, 368, 369], "janaina": [118, 177, 187, 202], "janet": [118, 197, 247], "jani": [118, 217], "januari": [118, 127, 130, 152, 158, 163, 165], "jaqu": [0, 122, 163], "jare": [118, 197, 247], "jargon": 96, "jason": [0, 122, 132, 148, 163], "javier": [0, 156, 163], "javitt": [118, 227], "jawhar": [0, 160, 163], "jean": [0, 51, 52, 74, 118, 121, 122, 145, 148, 163, 165, 168, 170, 178, 204, 210, 217, 226, 240, 243, 277, 282, 284, 312], "jeanett": [103, 118, 171, 185, 187], "jeff": [145, 163], "jeffrei": [118, 176, 197, 247], "jehan": [148, 163], "jell": [0, 78, 118, 127, 128, 163, 322], "jenkinson": [118, 198], "jennif": [3, 33, 34, 40, 101, 118, 218, 271], "jensen": 481, "jepegnanam": [0, 134, 163], "jeremi": [0, 132, 156, 163], "jerom": [0, 129, 130, 132, 141, 145, 147, 148, 149, 151, 152, 160, 163], "jess": [103, 118], "jessica": [61, 118, 201, 209, 230, 233, 250, 260, 265, 266], "jiang": [118, 165, 239], "jill": [118, 198, 201, 206, 217, 250, 253], "jimura": [30, 48, 116, 118, 223, 280, 308, 311, 443, 448, 497], "jimura_poldrack_2012_zmap": 42, "jinja2": 65, "jitsi": 496, "jn": [118, 231, 237, 259, 263], "jneurosci": [118, 176], "job": [46, 81, 111, 121, 164, 327, 340, 342, 391], "jobert": [74, 118, 204, 210, 277], "joblib": [46, 50, 51, 52, 55, 56, 59, 61, 81, 111, 127, 130, 132, 151, 154, 158, 163, 168, 240, 305, 306, 307, 308, 310, 311, 312, 313, 327, 340, 346, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 455, 456, 457], "joblibcollisionwarn": 46, "jocn": [118, 228], "jocn_a_00077": [118, 233, 260], "joe": [145, 163], "johann": [0, 151, 163], "johansen": [118, 198], "john": [0, 39, 61, 106, 118, 134, 145, 163, 176, 178, 201, 209, 227, 228, 250, 265, 391], "johnson": [0, 128, 134, 163], "joi": [118, 368, 369, 470], "join": [65, 77, 107, 179, 479, 496], "joint_mni_imag": 352, "jointli": [66, 179, 438, 444, 446, 447, 451, 453], "joliot": [118, 199, 249], "jon": [0, 153, 163], "jona": [0, 52, 118, 145, 163, 456, 462], "jonathan": [59, 61, 78, 118, 177, 202, 209, 230, 231, 237, 259, 263, 265, 266, 322, 368, 369, 429], "jordan": [118, 231, 237, 259, 263], "jordi": [0, 130, 163], "jorg": [118, 202, 231, 237, 259, 263], "joseph": [61, 118, 165, 201, 209, 250, 265], "joset": [118, 176], "josh": [103, 118], "joshi": [0, 118, 132, 163], "joshua": [0, 118, 153, 163, 231, 237, 259, 263], "josien": [118, 165, 239], "joulot": [0, 160, 163], "journal": [106, 118, 176, 187, 202, 217, 228, 231, 233, 237, 259, 260, 263, 391], "jp": 224, "jpg": 201, "jqueri": [157, 163], "jr": [118, 217], "js_plotting_util": [148, 163], "json": [65, 77, 103, 104, 107, 113, 121, 131, 163, 164, 330, 365, 367, 368, 369], "juan": [118, 201, 250], "judg": [36, 88], "judith": [118, 201, 250], "juelich": [157, 163, 194, 238, 256, 490], "juli": [118, 126, 163, 165, 369], "julia": [0, 136, 151, 163], "julich": [118, 220], "julien": [74, 118, 204, 277], "julio": [0, 128, 163], "junction": 61, "june": [118, 134, 141, 144, 147, 156, 163, 177, 187], "jung": [118, 201, 250], "jupyt": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 149, 151, 163, 171, 187, 192, 449, 450, 451, 452, 453, 465, 467, 495], "just": [3, 4, 6, 13, 15, 17, 22, 26, 41, 43, 45, 47, 52, 53, 54, 59, 61, 67, 68, 72, 73, 77, 78, 79, 81, 83, 89, 93, 101, 103, 104, 105, 114, 120, 140, 163, 169, 171, 178, 181, 187, 188, 192, 345, 362, 365, 368, 441, 442, 443, 450, 467, 469, 479, 495], "justifi": 0, "justin": [118, 369], "juxtaposit": 93, "j\u00fclich": 0, "k": [0, 10, 19, 23, 26, 32, 34, 36, 37, 44, 45, 52, 54, 69, 83, 86, 93, 101, 114, 118, 132, 163, 171, 174, 176, 178, 198, 217, 241, 269, 287, 305, 306, 310, 311, 319, 320, 327, 336, 345, 368, 369, 375, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 430, 434, 436, 437, 439, 441, 442, 443, 454, 469, 481], "k4jp8": 221, "k_init": 454, "kabani": [118, 199], "kahn": [52, 118, 456, 462], "kahnt": [118, 176], "kai": [0, 118, 132, 163, 172], "kaleido": [10, 158, 163, 444, 446, 447, 495, 496], "kalyanam": [118, 201, 250], "kamalak": [54, 102, 118, 208, 254], "kamalakar": [0, 125, 136, 138, 141, 145, 146, 148, 151, 155, 163], "kamiel": [118, 227], "kamil": [118, 198], "kamitani": [43, 44, 118, 224, 281], "kanaan": [0, 141, 163], "kaplan": [118, 227], "kardiom": 0, "karl": [118, 234], "karla": [118, 165, 198, 233, 260], "karlsgodt": [118, 269, 287], "kate": [118, 227, 233, 260], "kathmandu": 0, "katovich": [118, 177], "katrin": 118, "keep": [3, 33, 35, 36, 38, 41, 53, 54, 57, 61, 68, 70, 71, 86, 88, 96, 101, 106, 107, 121, 125, 128, 130, 148, 155, 163, 169, 171, 172, 173, 176, 177, 179, 228, 282, 304, 305, 306, 307, 308, 310, 311, 312, 343, 345, 351, 364, 366, 383, 384, 385, 386, 387, 388, 389, 457, 458, 467, 469, 470], "keep_masked_label": [52, 59, 93, 129, 163, 372, 375, 460, 481], "keep_masked_map": [55, 56, 57, 129, 163, 373, 376, 457, 461, 481], "kei": [15, 57, 61, 68, 73, 81, 105, 120, 121, 129, 134, 163, 164, 166, 179, 187, 190, 199, 247, 249, 250, 251, 252, 255, 256, 260, 263, 272, 278, 282, 305, 306, 307, 308, 314, 318, 323, 327, 334, 336, 340, 342, 366, 367, 391, 402, 405, 429, 438, 451, 467, 473, 474, 475, 480], "keith": [103, 118], "keller": [118, 312], "kelli": [61, 118, 202, 209, 219, 227, 230, 265, 266, 368, 369], "kendrick": [118, 172], "kennedi": [118, 206, 217, 253], "kent": [118, 201, 250], "kept": [15, 121, 129, 163, 179, 245, 255, 256, 307, 344, 345, 362, 380, 383, 384, 385, 386, 387, 388, 389, 457, 459, 465, 469], "keribin": [52, 118], "kern": 178, "kernel": [3, 31, 35, 36, 37, 47, 58, 73, 96, 101, 104, 171, 202, 306, 308, 311, 331, 332, 333, 337, 338, 339, 480], "kevin": [0, 128, 163], "keyword": [16, 101, 121, 151, 163, 174, 178, 192, 241, 247, 282, 292, 330, 345, 356, 367, 369, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 445, 446, 447, 451, 457, 469], "kfold": [36, 38, 39, 43, 47, 310, 311], "khale": [118, 368, 369, 470], "khanuja": [118, 227], "khorshidi": [118, 165, 198], "kiar": [0, 151, 163], "kiefer": [118, 177], "kiehl": [118, 201, 250], "kiesling": [0, 128, 163], "kill": 68, "kim": [0, 132, 163], "kimberli": [118, 233, 260], "kind": [3, 17, 31, 50, 53, 57, 59, 61, 81, 114, 120, 144, 163, 165, 169, 172, 178, 185, 239, 479, 495], "kindli": [46, 50, 51, 188, 217], "king": [0, 118, 145, 148, 163, 227], "kingston": 0, "kit": 202, "kitwar": 0, "klass": 41, "klein": 118, "kleinschmidt": [51, 118, 165, 170, 239, 312], "kline": 227, "klingenberg": [118, 177], "kmean": [158, 160, 163, 168, 186, 191, 327, 336, 454, 455], "kmeans_count": 52, "kmeans_labels_img": 52, "kmeans_parcel": 52, "knive": 192, "knop": [118, 187], "know": [7, 11, 22, 86, 121, 135, 163, 178, 179, 181, 185, 246, 284], "knowledg": [61, 119, 166, 181, 378, 481], "known": [7, 12, 23, 35, 36, 41, 103, 113, 154, 171, 172, 176, 179, 181, 183, 232, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 305, 306, 307, 308, 317, 319, 320, 327, 429], "knutson": [118, 177], "kochunov": [118, 236, 262], "kodibagkar": [0, 129, 163], "kodituwakku": [118, 201, 250], "koen": [0, 160, 163], "koji": [118, 223], "koller": [118, 178], "kollokian": [118, 199], "komesu": [118, 201, 250], "koneru": [118, 217], "kong": [118, 231, 259], "konrad": [0, 129, 163], "konstantin": [0, 122, 163], "koplewicz": [118, 227], "korea": 0, "kosha": [59, 118, 368, 369], "kossaifi": [0, 122, 163], "kouw": [118, 206, 253], "kr": 0, "krain": 118, "kriegeskort": [118, 176, 187, 309], "krienen": [118, 231, 237, 259, 263], "krish": [0, 130, 163], "kristin": 118, "krzysztof": [118, 121, 208, 226, 254, 282, 284], "kshitij": [0, 148, 149, 150, 151, 152, 153, 154, 163], "kth": [3, 17, 31], "kuba": [118, 219], "kumari": [0, 132, 163], "kun": [0, 132, 160, 163], "kwarg": [16, 19, 55, 61, 81, 128, 130, 131, 132, 134, 151, 163, 247, 330, 345, 367, 369, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 430, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 454, 456, 457, 469], "kwarg_image_filt": 282, "kxm045": [118, 165], "l": [3, 7, 10, 15, 26, 32, 33, 34, 39, 40, 44, 47, 54, 59, 61, 71, 96, 101, 118, 129, 151, 158, 163, 165, 171, 172, 177, 187, 198, 199, 202, 209, 217, 218, 228, 230, 231, 232, 233, 236, 237, 247, 249, 259, 260, 262, 263, 265, 266, 267, 271, 368, 369, 392, 394, 395, 396, 397, 398, 399, 400, 401, 420, 428, 430, 434, 436, 437, 439, 441, 442, 443, 467, 473, 474, 495], "l1": [36, 46, 118, 172, 173, 177, 178, 240, 243, 305, 306, 307, 310, 311], "l1_ratio": [47, 310, 311], "l2": [33, 36, 41, 172, 173, 305, 307, 454, 455, 456], "la": 0, "la5c": [269, 287], "lab": 0, "label": [6, 10, 23, 24, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 44, 45, 46, 50, 52, 55, 56, 57, 61, 64, 67, 68, 69, 85, 93, 96, 99, 101, 103, 106, 107, 114, 116, 118, 120, 127, 128, 130, 131, 134, 140, 143, 148, 151, 155, 156, 158, 160, 163, 164, 166, 168, 171, 172, 174, 176, 179, 185, 190, 191, 192, 199, 201, 208, 209, 217, 218, 220, 224, 225, 229, 231, 236, 237, 247, 249, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 265, 267, 271, 281, 305, 306, 307, 308, 309, 310, 311, 323, 327, 330, 334, 336, 340, 341, 365, 368, 369, 372, 375, 379, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 424, 428, 429, 430, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 466, 477, 486, 497], "label_binar": 41, "label_hemispher": [50, 423], "label_idx": 93, "label_imag": 50, "label_image_left": 50, "label_image_right": 50, "label_map": 466, "label_multi": 41, "label_seed_region": 24, "label_top": [392, 394, 395], "labelbinar": 41, "labelencod": [41, 102], "labelpad": 71, "labels_": [327, 340, 372, 375, 379, 454, 456], "labels_affin": 50, "labels_img": [24, 50, 52, 59, 93, 96, 114, 166, 372, 375, 379, 423, 458, 460, 463, 481], "labels_img_": [52, 168, 372, 375, 379, 455], "labels_list": 423, "labels_mask": [41, 114], "laboratori": 0, "laci": [118, 236, 262], "lack": [130, 163], "ladouceur": [118, 187], "lag": [6, 50, 67, 68], "lag_cor": 50, "lag_correl": 50, "lag_correlation_matrix": 50, "lainhart": [118, 197, 247], "laird": [118, 233, 260], "lambda": 121, "lambertz": [118, 210], "lan": [0, 145, 148, 163], "lancast": [118, 236, 262], "land": 164, "landeau": [118, 199, 249], "lane": [0, 118, 160, 163, 391], "lang": [118, 197, 217, 247], "lang_beta_seri": 103, "lang_corr": 103, "lang_seed_beta_seri": 103, "languag": [54, 103, 104, 113, 118, 121, 194, 204, 210, 264, 274, 277], "language_connectivity_img": 103, "languageloc": [103, 104, 113], "languagelocalizer_desc": [103, 104, 113], "lannuzel": [145, 148, 163], "lapack": [143, 163, 178], "lar": 313, "larg": [3, 13, 32, 33, 38, 42, 44, 46, 50, 51, 52, 57, 59, 67, 71, 72, 74, 118, 121, 149, 163, 168, 171, 172, 173, 174, 176, 178, 179, 181, 185, 186, 187, 190, 192, 204, 219, 226, 277, 282, 284, 327, 329, 334, 373, 376, 383, 384, 385, 386, 387, 388, 422, 455, 481], "large_fmri": 111, "larger": [54, 70, 77, 82, 88, 102, 111, 170, 172, 176, 178, 179, 181, 188, 310, 311, 428, 441, 442, 443, 450], "largest": [144, 163, 178, 354, 383, 384, 385, 386, 387, 388, 389, 425], "largest_connected_compon": [144, 163], "largest_connected_component_img": [144, 163], "larri": [118, 206, 217, 253], "lars_path": 313, "larson": [0, 131, 145, 148, 149, 151, 163], "lashkari": [118, 231, 237, 259, 263], "lasso": [43, 60, 61, 118, 165, 172, 177, 178, 306, 308, 310, 311, 313], "lasso_regressor": [172, 306, 308], "lassocv": [129, 163, 305, 306, 307, 308], "lassolarscv": 43, "last": [3, 35, 37, 43, 58, 74, 150, 163, 164, 181, 187, 188, 245, 246, 345, 352, 366, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 457, 473, 495, 496], "lat_fi": 481, "latent": [108, 185], "later": [3, 6, 10, 23, 24, 39, 41, 43, 65, 72, 93, 103, 104, 107, 114, 164, 181, 190, 202, 253, 255, 256, 349, 423, 428, 434, 436, 437, 438, 442, 443, 444, 446, 447, 465, 481, 495], "latest": [132, 143, 163, 164, 179, 188, 249, 499], "latex": [65, 127, 163, 188], "latter": [50, 164, 172, 178, 239, 240, 241, 255, 256, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 454, 455, 456, 457], "laumann": [61, 118, 230, 231, 259, 266, 368], "launch": [153, 163, 164, 171], "laura": [118, 227], "lausann": 0, "law": 198, "lawrenc": [118, 236, 262], "layer": [26, 91], "layout": [134, 148, 163, 309, 393], "lda": 101, "le": [74, 118, 204, 277], "lead": [36, 50, 51, 60, 86, 111, 127, 129, 130, 131, 132, 133, 135, 154, 163, 164, 177, 178, 179, 181, 185, 194, 238, 241, 315, 327, 373, 376, 468, 490, 495], "leak": [46, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419], "learn": [3, 22, 36, 38, 47, 49, 59, 62, 96, 100, 106, 108, 115, 116, 118, 119, 121, 125, 127, 130, 132, 134, 135, 136, 141, 143, 144, 145, 146, 148, 151, 156, 158, 163, 164, 165, 166, 167, 168, 171, 172, 173, 175, 176, 178, 179, 185, 186, 188, 193, 207, 225, 239, 240, 241, 243, 257, 268, 271, 280, 305, 306, 307, 308, 309, 312, 313, 350, 352, 353, 357, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 404, 411, 424, 425, 428, 430, 434, 440, 441, 442, 443, 448, 454, 455, 456, 457, 496, 497, 498], "learner": [305, 306, 307, 308, 310, 311], "learnt": 42, "least": [35, 64, 68, 69, 70, 73, 103, 106, 107, 109, 113, 118, 171, 177, 179, 188, 249, 251, 253, 255, 256, 258, 259, 261, 262, 263, 313, 314, 318, 327, 336, 340, 341, 342, 372, 373, 375, 376, 378, 379, 380, 385, 391, 422, 457, 480, 496], "leav": [18, 26, 31, 35, 41, 171, 176, 181, 349], "leave_spac": [393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419], "leaveonegroupout": [3, 31, 32, 34, 35, 41, 101, 145, 163, 171, 174, 176, 305, 306, 307, 308], "leavepgroupsout": [305, 306, 307, 308], "lebihan": [118, 210], "lectur": [118, 165, 183, 187, 239], "ledoit": [61, 178], "ledoitwolf": 239, "lee": [0, 118, 134, 163], "lefort": [0, 132, 156, 163], "left": [7, 10, 13, 21, 23, 24, 26, 27, 36, 39, 43, 47, 50, 52, 53, 54, 61, 67, 68, 69, 70, 73, 74, 78, 79, 81, 82, 88, 96, 104, 109, 114, 118, 134, 141, 142, 146, 151, 154, 156, 163, 169, 187, 191, 199, 206, 211, 212, 213, 214, 215, 216, 217, 224, 227, 247, 253, 255, 256, 261, 275, 277, 285, 290, 291, 293, 302, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 428, 429, 430, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 451, 453, 467, 473, 474, 480, 481], "left_001": 103, "left_connectom": 50, "left_coord": 7, "left_data": 7, "left_fac": 7, "left_hemi": 50, "left_right": [393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419], "leftminusrightbuttonpress": 70, "legaci": [274, 366, 391], "legacy_format": [134, 158, 163], "legacy_output": [103, 104, 113, 274], "legarreta": [0, 153, 163], "legend": [10, 19, 32, 34, 36, 45, 46, 52, 61, 64, 69, 93, 131, 163, 164, 445], "legend_guid": 19, "legibl": 114, "leipzig": 0, "lemaitr": [0, 148, 151, 163], "len": [3, 13, 23, 32, 34, 35, 36, 41, 50, 51, 54, 65, 66, 67, 68, 69, 73, 78, 81, 93, 96, 101, 104, 107, 113, 114, 121, 243, 305, 306, 307, 308, 310, 311, 312, 313, 317, 319, 320, 324, 327, 340, 357, 360, 374, 377, 383, 385, 386, 388, 455], "length": [3, 16, 58, 69, 73, 79, 132, 163, 169, 179, 254, 257, 305, 306, 307, 308, 310, 311, 314, 318, 319, 320, 331, 332, 333, 337, 338, 339, 346, 372, 373, 374, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 426, 428, 434, 437, 439, 440, 441, 442, 443, 455, 467, 479], "leon": [0, 151, 163], "leonard": [0, 158, 163], "less": [6, 21, 41, 51, 52, 53, 59, 66, 68, 70, 73, 74, 79, 81, 90, 96, 103, 121, 148, 149, 156, 163, 176, 178, 179, 181, 188, 318, 343, 364, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 436, 437, 443, 467, 498], "lessorequ": [121, 282], "lessov": [61, 118, 209, 265], "lessthan": [121, 282], "let": [2, 3, 4, 6, 7, 11, 13, 16, 24, 26, 39, 41, 43, 52, 59, 65, 66, 68, 70, 72, 73, 74, 77, 79, 80, 81, 88, 95, 101, 105, 111, 113, 114, 172, 179, 187, 188, 344, 356], "leticia": [118, 187], "letter": 466, "level": [6, 7, 10, 15, 16, 19, 26, 35, 42, 51, 52, 54, 59, 66, 71, 73, 75, 77, 84, 100, 108, 109, 115, 118, 127, 128, 129, 130, 131, 132, 133, 154, 155, 160, 163, 167, 168, 172, 175, 178, 179, 181, 182, 183, 185, 188, 190, 194, 196, 202, 204, 235, 239, 240, 241, 243, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 293, 294, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 317, 319, 320, 322, 327, 330, 336, 340, 341, 342, 343, 345, 346, 350, 351, 356, 357, 361, 364, 365, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 430, 431, 432, 436, 437, 441, 442, 443, 444, 445, 446, 447, 448, 450, 454, 455, 456, 457, 462, 465, 466, 467, 469, 475, 492, 495, 497, 498], "level_nam": 262, "leventh": [118, 227], "leverag": [21, 154, 163, 186, 187, 305, 306, 455, 496], "lfcd": 247, "lh": 224, "li": [91, 118, 227], "liam": [118, 217], "liau": [118, 368, 369, 470], "lib": [3, 4, 15, 17, 19, 21, 31, 36, 46, 50, 51, 53, 55, 61, 70, 81, 94, 108, 114], "liber": [50, 81], "liblinear": [36, 41, 305, 307], "librari": [5, 96, 102, 120, 148, 163, 174, 179, 182, 187, 191, 485, 495, 496, 498], "licenc": [205, 252], "licens": [0, 129, 134, 163, 249, 250, 252, 259, 263], "lie": [58, 240, 243, 372, 375, 426, 460], "liem": [0, 149, 151, 153, 163], "life": [148, 163], "lifespan": 0, "lifetim": 200, "light": [13, 39, 143, 149, 151, 163, 179, 342], "like": [6, 7, 10, 13, 17, 26, 36, 38, 41, 43, 44, 50, 52, 57, 59, 61, 68, 81, 83, 91, 93, 94, 96, 103, 105, 121, 129, 134, 151, 155, 158, 159, 160, 163, 164, 177, 178, 179, 180, 181, 184, 185, 188, 189, 191, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 293, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 322, 324, 327, 329, 330, 340, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 367, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 426, 427, 428, 429, 434, 436, 437, 438, 439, 441, 442, 443, 444, 446, 447, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 475, 479, 481, 483, 495], "likelihood": [56, 178, 181, 239, 314, 317, 318, 319, 320], "likelihoodmodel": [314, 317], "likelihoodmodelresult": [132, 160, 163, 319, 320], "likewis": 169, "lilla": [118, 231, 237, 259, 263], "lim": 426, "lim_i": 426, "lim_x": 426, "limbic": [118, 217], "limegreen": 19, "limit": [15, 16, 26, 45, 77, 90, 107, 128, 163, 166, 176, 178, 179, 282, 369, 426, 429], "linalg": [47, 50, 178], "linden": [59, 118, 369], "lindquist": [118, 148, 163, 345, 469], "line": [5, 10, 15, 22, 25, 39, 41, 51, 54, 93, 132, 163, 171, 178, 179, 188, 228, 345, 405, 449, 469, 479, 496], "line2d": [5, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430], "line_sample_point": 25, "linear": [3, 6, 26, 31, 35, 36, 37, 39, 47, 64, 68, 70, 73, 101, 104, 106, 113, 118, 135, 145, 163, 171, 175, 180, 181, 182, 185, 186, 191, 192, 202, 219, 243, 282, 305, 306, 307, 308, 310, 311, 312, 313, 317, 319, 320, 327, 340, 345, 359, 360, 361, 369, 391, 427, 469, 479, 480, 484, 488, 496, 498], "linear_model": [39, 41, 43, 44, 47, 114, 313], "linear_svc": 101, "lineardiscriminantanalysi": 101, "linearli": [192, 202, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 436, 437, 443], "linearsvc": [54, 101, 102, 176, 305, 307], "linestyl": 54, "linewidth": [15, 19, 45, 46, 64, 93, 441, 442, 449], "lingual": [93, 481], "lingual_l": 199, "link": [55, 118, 121, 129, 141, 148, 153, 163, 164, 167, 171, 174, 179, 181, 185, 188, 198, 208, 210, 227, 249, 254, 393, 403, 404, 430, 498], "linkag": 440, "linkcheck_": 164, "link\u00f6p": 0, "linspac": [5, 13, 52, 64, 69], "lint": [131, 163, 179, 188], "linter": [132, 163, 179], "linux": 188, "liotti": [118, 236, 262], "liquid": 0, "lisandrelli": [118, 207, 268], "list": [0, 2, 3, 6, 10, 11, 15, 16, 17, 22, 24, 32, 35, 41, 47, 50, 51, 52, 54, 56, 58, 61, 64, 65, 72, 73, 74, 77, 78, 81, 82, 87, 96, 102, 103, 104, 107, 113, 114, 120, 121, 127, 129, 130, 131, 132, 133, 134, 136, 139, 141, 142, 143, 147, 148, 151, 157, 158, 160, 163, 165, 171, 179, 185, 187, 188, 190, 191, 192, 199, 201, 217, 220, 224, 226, 231, 235, 236, 239, 240, 241, 243, 245, 246, 247, 249, 250, 253, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 268, 269, 271, 274, 275, 276, 277, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 301, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 322, 324, 325, 327, 329, 330, 334, 340, 341, 342, 343, 345, 346, 354, 355, 357, 360, 362, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 426, 427, 435, 436, 437, 438, 440, 441, 443, 444, 445, 446, 447, 452, 453, 455, 457, 458, 459, 460, 461, 466, 467, 469, 477, 478, 496, 499], "list_of_2d_arrai": 44, "listedcolormap": 41, "listen": [6, 26, 68, 70, 71, 83, 277], "listening_gt_rest_eff_map": 6, "listening_gt_rest_z_map": 6, "liter": [340, 342], "literatur": [103, 166, 232, 247, 351, 369, 470], "littl": [77, 171, 172, 179], "liu": [118, 202, 231, 237, 259, 263, 368, 369, 470], "livio": [78, 118, 322], "ll": [2, 6, 52, 61, 310, 311], "llc": 0, "llera": [118, 368, 369], "llf": 317, "lloyd": [39, 118], "llrrrrr": 65, "lo": 0, "load": [2, 4, 6, 9, 10, 22, 24, 26, 29, 52, 53, 55, 56, 57, 61, 64, 65, 70, 71, 79, 90, 91, 93, 95, 98, 107, 108, 109, 110, 111, 112, 113, 114, 116, 119, 127, 128, 129, 132, 133, 141, 143, 146, 148, 157, 158, 160, 163, 167, 170, 174, 175, 178, 179, 187, 189, 191, 219, 228, 247, 248, 251, 253, 255, 256, 257, 260, 261, 265, 266, 267, 268, 271, 272, 273, 276, 277, 280, 281, 282, 284, 286, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 312, 313, 330, 344, 355, 356, 358, 368, 369, 430, 446, 448, 449, 453, 471, 475, 477, 478, 484, 486, 495, 497, 498], "load_confound": [59, 68, 113, 128, 129, 130, 132, 158, 163, 166, 192, 330, 369], "load_confounds_strategi": [59, 130, 158, 163, 166, 192, 368], "load_fsaverag": [10, 23, 24, 39, 70, 113, 114, 132, 163, 211, 212, 213, 214, 215, 216, 290, 475], "load_fsaverage_data": [10, 23, 24, 39, 70, 113, 114, 132, 163, 211, 212, 213, 214, 215, 216, 290], "load_img": [2, 38, 95, 96, 105, 111, 112, 141, 163, 179, 190, 191], "load_mni152_brain_mask": [107, 141, 157, 163, 219, 272], "load_mni152_gm_mask": [26, 157, 163, 219, 272], "load_mni152_gm_templ": [157, 163, 219, 272, 296, 298, 300], "load_mni152_templ": [95, 157, 163, 219, 272, 273, 295, 297, 300, 344, 347, 352, 356, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 479], "load_mni152_wm_mask": [26, 157, 163, 219, 272], "load_mni152_wm_templ": [157, 163, 219, 272, 297, 298, 299], "load_niimg": [149, 163], "load_nki": [24, 114, 132, 163, 227], "load_sample_motor_activation_imag": [2, 10, 13, 14, 15, 16, 17, 26, 92, 95, 98, 128, 163, 285, 475], "load_surf_data": [143, 163, 444, 446, 447, 453], "load_surf_mesh": [143, 160, 163, 495], "loadabl": [372, 373, 374, 444, 446, 447, 453], "loadings_init_": 313, "loadsav": 179, "loadtxt": [43, 44], "lobe": [72, 262], "lobul": [93, 118, 217], "loc": [19, 34, 36, 45, 46, 52, 64, 69, 71, 93, 103, 104, 392, 394, 395], "local": [22, 26, 43, 44, 52, 63, 67, 68, 75, 78, 79, 81, 82, 83, 90, 100, 103, 104, 107, 112, 113, 115, 116, 118, 151, 152, 160, 163, 164, 179, 180, 181, 185, 188, 190, 192, 194, 198, 224, 231, 247, 255, 256, 259, 264, 274, 275, 276, 277, 278, 281, 282, 284, 309, 350, 362, 365, 371, 377, 391, 419, 435, 436, 443, 448, 497], "local_region": [53, 169, 457, 459], "localis": [118, 185, 342, 391], "localizer_anat_filenam": 18, "localizer_dataset": [18, 79, 83, 109, 110], "localizer_ev": 74, "localizer_first_level": [67, 68, 70], "localizer_tmap_filenam": 18, "locat": [6, 11, 16, 23, 24, 27, 31, 32, 34, 36, 37, 38, 43, 44, 45, 50, 52, 55, 56, 57, 58, 59, 61, 65, 71, 77, 79, 87, 91, 96, 97, 104, 106, 109, 111, 113, 134, 148, 157, 163, 178, 179, 181, 188, 190, 208, 243, 249, 265, 267, 268, 309, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 466, 495], "lock": [147, 163], "log": [47, 52, 56, 79, 81, 96, 132, 138, 163, 164, 176, 178, 314, 317, 318, 319, 320, 356, 427], "log10": [38, 45, 47, 79, 81, 96, 106, 109, 110, 342, 391, 466], "log_": [45, 106, 109, 110], "log_img": 356, "log_p_valu": 96, "log_p_values_img": 96, "logan": [118, 177], "logarithm": [79, 81, 342], "logger": [132, 163], "logic": [96, 121, 179, 304], "logical_and": [96, 106], "logical_not": [32, 38, 79, 109], "logical_or": 32, "logilab": 0, "login": 164, "logist": [32, 33, 118, 172, 173, 177, 305, 307, 310], "logistic_l1": [32, 172, 305, 307], "logistic_l2": [32, 41, 172, 305, 307], "logisticregressioncv": [41, 129, 163, 305, 306, 307, 308], "logl": [314, 317, 318, 319, 320], "loglf": [314, 318], "loglikelihood": [314, 318], "logo_cv": 41, "logp_max_mass": [81, 342, 391], "logp_max_s": [81, 342, 391], "logp_max_t": [45, 81, 106, 109, 342, 391], "logp_max_tfc": [109, 342, 391], "loic": [0, 122, 123, 125, 126, 136, 138, 141, 151, 163], "loki": 46, "lokybackend": [33, 38, 39, 45, 46, 47, 51, 106, 109], "london": [0, 118, 185, 269, 287], "long": [52, 100, 115, 116, 121, 164, 179, 181, 248, 251, 346, 355, 358, 361, 368, 369, 371, 377, 429, 497], "longer": [46, 108, 125, 127, 128, 129, 130, 145, 149, 151, 154, 156, 158, 160, 163, 164, 181, 369], "longest": 68, "look": [1, 6, 8, 10, 23, 24, 26, 31, 34, 43, 47, 59, 65, 67, 68, 70, 71, 74, 105, 108, 114, 116, 121, 132, 134, 135, 148, 149, 159, 163, 171, 179, 180, 181, 187, 188, 192, 207, 249, 251, 253, 255, 256, 258, 259, 261, 262, 263, 271, 282, 284, 292, 362, 372, 375, 379, 437, 442, 446, 448, 497], "look_up_t": 59, "loop": [36, 41, 47, 103, 154, 163, 171, 178, 191, 305, 306, 307, 308], "loos": 178, "lorocv": 176, "lorrain": [118, 176], "lose": [15, 97, 495], "loss": [135, 163, 168, 173, 310, 369], "loss_pass": 192, "lost": 178, "lot": [67, 72, 73, 88, 125, 148, 151, 163, 164, 165, 171, 172, 178, 179, 187, 243], "loui": [0, 118, 202, 219], "love": 3, "low": [10, 45, 68, 96, 108, 118, 133, 148, 154, 163, 171, 177, 178, 179, 181, 187, 188, 190, 191, 192, 235, 247, 290, 293, 294, 301, 305, 306, 307, 308, 310, 311, 312, 313, 345, 368, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 437, 438, 451, 455, 457, 468, 469], "low_pass": [52, 54, 55, 56, 57, 58, 59, 61, 64, 91, 93, 94, 102, 103, 148, 163, 192, 305, 306, 307, 308, 310, 311, 312, 313, 345, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 455, 457, 468, 469, 481], "lower": [19, 33, 34, 41, 42, 54, 71, 79, 91, 96, 138, 163, 170, 173, 177, 178, 185, 191, 239, 245, 246, 307, 308, 317, 319, 320, 385, 388, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 425, 428, 429, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 468], "lower_cutoff": [91, 385, 388], "lowest": [150, 163], "lprojector": [15, 406, 420], "lr": [15, 17, 397, 420, 430, 436, 439, 467, 495], "lrprojector": [15, 420], "lsa_beta_map": 103, "lsa_events_df": 103, "lsa_glm": 103, "lss": [130, 163], "lss_beta_map": 103, "lss_design_matric": 103, "lss_events_df": 103, "lss_glm": 103, "lss_transform": 103, "lt": [38, 91, 93, 94, 104, 113, 480, 481], "luc": [118, 210], "luca": [118, 177, 202], "lucina": 118, "luisa": [0, 151, 155, 157, 163], "luke": [0, 156, 163], "lunch": 172, "lund": 0, "lut": [11, 52, 59, 93, 114, 134, 163, 179, 249, 251, 253, 255, 256, 258, 259, 261, 262, 263, 372, 375, 379, 481], "lut_": [372, 375, 379], "luz": 0, "lvert": [26, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 436, 437, 443], "lw": [43, 71], "ly": 457, "lyon": 0, "lyr": [15, 398, 420, 430, 436, 439, 467, 495], "lyrprojector": [15, 400, 420], "lyrz": [14, 15, 61, 399, 420, 430, 436, 439, 467, 495], "lyrzprojector": [15, 401, 420], "lyttelton": [118, 202, 251], "lzr": [15, 56, 400, 420, 430, 436, 439, 467, 495], "lzrprojector": [15, 398, 420], "lzry": [15, 401, 420, 430, 436, 439, 467, 495], "lzryprojector": [15, 399, 420], "m": [3, 13, 26, 32, 33, 34, 40, 44, 52, 61, 68, 77, 101, 103, 106, 118, 141, 163, 164, 165, 176, 179, 185, 187, 188, 198, 199, 202, 206, 208, 209, 211, 212, 213, 214, 215, 217, 218, 229, 230, 231, 233, 236, 237, 249, 253, 258, 259, 260, 262, 263, 265, 266, 269, 271, 287, 290, 317, 319, 320, 342, 391, 496], "m_cmap": 13, "ma": [21, 38, 43, 51, 53, 110], "maarten": [118, 227, 368, 369], "mac": [138, 163], "macaluso": [118, 202], "macau": 0, "mach": [52, 118, 456, 462], "machin": [0, 31, 36, 47, 52, 96, 119, 155, 163, 164, 172, 173, 174, 179, 185, 186, 207, 280, 496, 498], "machlouzarid": [118, 208, 254], "macintosh": [118, 198], "mackai": [118, 198, 233, 260], "mackinnon": [118, 319, 320], "maco": [132, 163], "macro": [118, 312], "macroscop": [118, 199, 249], "made": [0, 22, 41, 104, 113, 128, 154, 157, 158, 163, 175, 178, 179, 181, 185, 187, 188, 228, 234, 305, 306, 307, 308, 310, 311, 391, 450], "madhyastha": [145, 148, 163], "magenta": [43, 71, 495], "magic": [59, 105], "magnet": [0, 26, 118, 181, 185, 197, 202, 217, 251, 277], "magnetoencephalographi": 185, "magnetom": 234, "magnitud": [26, 185, 426, 432], "magnusson": 0, "maguir": [118, 217], "mai": [3, 13, 18, 26, 31, 46, 52, 59, 66, 68, 73, 74, 82, 88, 103, 107, 111, 118, 120, 121, 125, 149, 151, 159, 163, 165, 171, 172, 174, 179, 181, 185, 188, 190, 192, 194, 198, 204, 238, 239, 247, 277, 282, 291, 305, 306, 308, 310, 311, 315, 330, 334, 342, 360, 367, 369, 372, 373, 375, 376, 391, 444, 446, 447, 460, 466, 479, 490], "main": [7, 32, 59, 65, 68, 69, 72, 96, 123, 160, 163, 164, 171, 176, 179, 180, 185, 188, 190, 192, 249, 327, 329, 334, 365, 386, 388, 393, 426], "main_deriv": 69, "main_path": 365, "mainli": 178, "maint": [126, 127, 128, 129, 130, 131, 132, 136, 138, 141, 142, 143, 145, 148, 151, 153, 156, 157, 158, 159, 160, 163, 179], "maint_tool": 164, "maintain": [0, 127, 151, 157, 163, 164, 179, 188], "mainten": [158, 163], "mairal": 208, "major": [57, 96, 179, 187, 233], "make": [4, 6, 9, 13, 16, 23, 24, 26, 29, 32, 38, 41, 44, 50, 52, 54, 59, 61, 68, 69, 70, 71, 72, 77, 79, 81, 82, 86, 101, 108, 111, 116, 118, 121, 127, 129, 130, 131, 132, 136, 137, 142, 148, 156, 157, 158, 160, 163, 164, 169, 171, 172, 176, 177, 180, 184, 185, 186, 187, 190, 192, 228, 253, 261, 271, 282, 293, 294, 302, 305, 306, 307, 308, 315, 360, 395, 396, 397, 398, 399, 400, 401, 403, 405, 406, 408, 410, 412, 414, 416, 418, 436, 438, 443, 445, 447, 448, 449, 450, 451, 453, 454, 475, 479, 481, 495, 496, 497], "make_first_level_design_matrix": [64, 66, 133, 158, 163, 180, 327, 435], "make_glm_report": [127, 135, 155, 158, 163, 327, 340, 367], "make_localizer_contrast": 68, "make_pipelin": [39, 43, 47, 114], "make_second_level_design_matrix": [80, 184], "makri": [118, 206, 217, 253], "male": [68, 217, 247], "manag": [129, 130, 163, 179, 188, 496], "mandatori": [178, 345], "mani": [3, 4, 13, 16, 24, 38, 40, 42, 43, 44, 45, 46, 51, 52, 54, 59, 72, 81, 88, 101, 102, 103, 110, 121, 156, 163, 167, 168, 169, 171, 172, 173, 174, 177, 178, 179, 181, 185, 188, 191, 192, 241, 282, 284, 305, 306, 307, 308, 309, 342, 349, 375, 378, 391, 438, 463, 464, 479, 495], "manipul": [1, 8, 41, 58, 68, 91, 98, 120, 143, 163, 187, 190, 271, 292, 362, 437, 448, 484, 497, 498], "manner": [187, 436], "mannheim": 0, "manon": [0, 160, 163], "manual": [16, 17, 20, 36, 37, 38, 43, 44, 45, 50, 54, 55, 56, 57, 58, 59, 61, 64, 65, 71, 83, 85, 91, 93, 94, 99, 101, 102, 103, 104, 106, 107, 108, 109, 110, 113, 116, 120, 164, 165, 171, 187, 189, 192, 271, 312, 313, 350, 355, 357, 358, 362, 371, 375, 434, 442, 443, 444, 446, 447, 448, 495, 497, 498], "map": [2, 3, 7, 9, 11, 12, 15, 16, 20, 21, 23, 24, 29, 35, 39, 42, 47, 49, 53, 54, 55, 56, 57, 59, 62, 64, 65, 68, 70, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 88, 89, 91, 92, 93, 94, 95, 99, 100, 102, 104, 106, 108, 111, 113, 114, 115, 116, 118, 119, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 143, 144, 148, 149, 151, 154, 155, 156, 158, 163, 165, 166, 167, 170, 172, 174, 175, 176, 179, 180, 181, 182, 185, 186, 187, 190, 191, 192, 199, 201, 202, 204, 205, 208, 210, 211, 212, 213, 214, 215, 217, 219, 220, 225, 229, 231, 233, 236, 239, 240, 241, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 268, 272, 275, 276, 277, 282, 283, 284, 285, 286, 290, 293, 294, 295, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 322, 323, 327, 336, 340, 342, 343, 345, 347, 353, 362, 364, 367, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 425, 426, 429, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 461, 464, 466, 467, 469, 475, 479, 480, 486, 491, 497, 498], "map_label": 12, "map_left": [10, 23, 24, 114, 206, 261, 495], "map_nam": [340, 342, 367, 467], "map_right": [10, 23, 24, 114, 206, 261], "map_typ": [112, 282], "maps_img": [50, 55, 56, 57, 166, 192, 373, 376, 380, 424, 441, 457, 459, 461, 464, 481], "maps_img_": [50, 373, 376, 380, 457], "maps_masker_": [312, 313], "maraviglia": [118, 202], "march": [124, 146, 155, 163, 309], "marcu": [118, 176, 198, 228, 369], "marek": [118, 232, 267], "margaret": [118, 227], "margeta": [0, 122, 163], "margin": [54, 360, 426], "marginali": 481, "marguli": [118, 121, 226, 282, 284], "mari": [118, 187], "mariano": [118, 210], "mario": [118, 236, 262], "marisa": [118, 231, 237, 259, 263], "mark": [43, 59, 103, 118, 165, 198, 368, 369], "markdown": [65, 202], "marked_pixel": 43, "markedli": 71, "marker": [43, 131, 149, 151, 154, 156, 163, 164, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 430, 439, 449, 450, 452, 457, 459, 498], "marker_color": [16, 43, 58, 64, 103, 149, 151, 163, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 452, 495], "marker_coord": [58, 64, 103, 149, 151, 163, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 452], "marker_label": [156, 163, 452], "marker_s": [16, 43, 58, 64, 103, 149, 151, 163, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 452, 495], "markiewicz": [0, 151, 163], "marquand": [118, 187], "marseil": 0, "martha": [118, 217], "marti": [106, 118, 236, 262, 391], "martigni": 0, "martin": [0, 118, 136, 141, 155, 163, 201, 206, 211, 212, 213, 214, 215, 219, 250, 290, 345, 469], "martino": 118, "masa": [43, 44, 118, 224, 281], "mask": [3, 9, 21, 24, 29, 31, 32, 33, 35, 36, 37, 41, 42, 43, 45, 46, 47, 50, 51, 52, 53, 57, 58, 59, 61, 64, 65, 70, 71, 73, 77, 79, 81, 85, 93, 94, 98, 99, 104, 108, 109, 110, 113, 116, 119, 121, 127, 128, 130, 132, 133, 134, 135, 141, 142, 143, 145, 148, 151, 154, 156, 157, 158, 163, 168, 172, 175, 177, 186, 187, 189, 190, 202, 204, 210, 218, 219, 224, 240, 247, 249, 268, 270, 271, 272, 273, 277, 281, 295, 296, 299, 305, 306, 307, 308, 309, 310, 311, 312, 313, 322, 324, 327, 340, 342, 343, 344, 345, 346, 350, 351, 352, 355, 357, 358, 362, 364, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 424, 425, 426, 427, 428, 429, 434, 436, 437, 438, 441, 442, 443, 444, 446, 447, 448, 455, 456, 457, 459, 460, 461, 462, 465, 467, 469, 479, 480, 481, 484, 486, 495, 497, 498], "mask4_vt": 3, "mask_": [111, 310, 311], "mask_arg": [91, 94, 192, 312, 313, 374, 377, 455, 481], "mask_atla": 96, "mask_chance_scor": 34, "mask_data": [24, 96], "mask_fac": [19, 34, 120, 190, 218, 271], "mask_face_filenam": 19, "mask_face_littl": [120, 190, 218, 271], "mask_filenam": [3, 32, 34, 37, 42, 101, 106, 120, 171], "mask_hous": [19, 34, 120, 190, 218, 271], "mask_house_filenam": 19, "mask_house_littl": [120, 190, 218, 271], "mask_img": [12, 27, 31, 34, 35, 36, 37, 38, 41, 42, 43, 44, 47, 52, 55, 56, 57, 61, 68, 71, 73, 77, 91, 93, 94, 101, 106, 107, 111, 120, 129, 145, 149, 153, 154, 158, 163, 171, 176, 179, 191, 192, 295, 305, 306, 307, 308, 309, 322, 327, 330, 340, 343, 344, 345, 351, 364, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 389, 390, 425, 429, 438, 456, 457, 459, 460, 461, 462, 463, 464, 479, 481], "mask_img_": [52, 68, 79, 81, 91, 94, 120, 134, 163, 192, 305, 306, 307, 308, 309, 310, 311, 312, 313, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 457], "mask_label": [12, 429], "mask_nam": 34, "mask_path": 111, "mask_quality_check": [79, 109], "mask_roi": 224, "mask_scor": 34, "mask_strategi": [51, 91, 94, 108, 151, 157, 163, 192, 305, 306, 307, 308, 312, 313, 374, 377, 455, 481], "mask_typ": [305, 306, 307, 308, 312, 313, 374, 377, 384, 387, 455], "mask_vt": [3, 16, 17, 19, 32, 34, 41, 96, 101, 120, 171, 190, 218, 271], "mask_vt_filenam": [19, 96], "masked_atla": [130, 163, 460], "masked_data": [27, 102, 114, 191], "masked_less": [43, 110], "masked_pv": 110, "masked_scores_": 309, "maskedarrai": [3, 17, 31], "masker": [34, 37, 38, 41, 43, 44, 45, 46, 50, 52, 54, 55, 56, 57, 58, 59, 61, 64, 71, 77, 91, 93, 94, 96, 100, 101, 102, 103, 106, 107, 108, 109, 110, 111, 115, 116, 120, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 151, 154, 155, 156, 157, 158, 160, 163, 164, 166, 168, 171, 174, 179, 180, 189, 191, 194, 238, 239, 261, 293, 294, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 342, 364, 368, 369, 391, 426, 427, 440, 444, 448, 455, 457, 460, 461, 463, 464, 475, 484, 490, 497, 498], "masker_": [65, 68, 79, 81, 305, 306, 307, 308, 310, 311, 312, 313, 327, 340, 455], "mason": 0, "mass": [0, 35, 61, 64, 70, 73, 81, 104, 113, 160, 163, 342, 391, 423, 466, 480, 484], "mass_univari": [45, 106, 109, 154, 160, 163, 176, 184, 484], "massachusett": 0, "massimiliano": [118, 177, 202], "massiv": [100, 115, 116, 175, 271, 276, 277, 350, 352, 357, 371, 377, 391, 419, 436, 443, 448, 488, 497], "master": [188, 237, 259], "mat": [65, 235, 289, 370, 440], "match": [2, 6, 16, 105, 107, 121, 128, 129, 130, 131, 134, 151, 155, 156, 158, 163, 164, 170, 176, 179, 185, 189, 192, 233, 249, 260, 282, 304, 305, 306, 307, 308, 310, 311, 312, 313, 327, 330, 340, 342, 346, 355, 357, 360, 365, 367, 368, 372, 373, 374, 375, 376, 377, 383, 385, 386, 388, 426, 427, 441, 444, 446, 447, 453, 455, 456, 457, 458], "math": 104, "math_img": [79, 81, 85, 87, 99, 100, 112, 115, 116, 131, 132, 134, 139, 163, 191, 248, 302, 355, 357, 358, 443, 448, 497], "mathbf": 47, "mathemat": [0, 139, 163, 185, 356, 483], "mathi": [26, 118], "mathia": [0, 128, 163], "mathieu": [0, 129, 163], "matlotlib": 430, "matplolib": [10, 13], "matplotlib": [5, 6, 10, 12, 16, 19, 25, 26, 27, 32, 34, 37, 40, 41, 43, 44, 45, 46, 47, 51, 52, 54, 55, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 71, 77, 80, 81, 82, 86, 93, 96, 98, 102, 103, 104, 109, 110, 111, 114, 125, 129, 130, 131, 135, 138, 143, 145, 146, 148, 151, 153, 158, 159, 161, 163, 166, 171, 188, 191, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 495, 496], "matric": [3, 9, 29, 35, 44, 50, 53, 54, 59, 63, 65, 70, 72, 73, 75, 77, 82, 102, 113, 116, 132, 136, 141, 144, 145, 155, 156, 158, 163, 165, 166, 167, 178, 180, 189, 190, 191, 193, 194, 202, 208, 239, 240, 241, 243, 246, 279, 317, 319, 320, 327, 334, 360, 432, 433, 440, 444, 446, 447, 448, 480, 493, 497, 498], "matrix": [6, 23, 35, 39, 43, 44, 47, 50, 53, 54, 56, 64, 65, 66, 68, 70, 71, 73, 76, 77, 78, 79, 81, 82, 83, 84, 86, 93, 94, 103, 104, 105, 107, 109, 113, 116, 127, 128, 132, 133, 134, 146, 151, 154, 163, 168, 169, 171, 172, 178, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 210, 239, 240, 241, 242, 243, 244, 246, 270, 282, 284, 305, 306, 307, 308, 310, 311, 312, 313, 314, 317, 318, 319, 320, 325, 327, 328, 334, 336, 340, 341, 342, 347, 357, 358, 360, 363, 367, 370, 371, 374, 377, 383, 385, 386, 388, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430, 431, 432, 433, 440, 454, 455, 456, 467, 480, 497, 498], "matrix_plot": [134, 163], "matter": [12, 25, 26, 45, 46, 59, 68, 77, 91, 141, 154, 157, 163, 171, 176, 178, 179, 184, 186, 191, 192, 202, 219, 228, 268, 272, 273, 286, 293, 296, 297, 298, 299, 300, 305, 306, 307, 308, 312, 313, 330, 368, 374, 377, 384, 387, 455, 479], "matthew": [106, 118, 165, 198, 227, 391], "matthia": [0, 122, 163], "matthieu": [0, 160, 163], "matur": [61, 118, 209, 265], "maumet": [118, 121, 226, 282, 284, 426], "maura": [3, 33, 34, 40, 101, 118, 218, 271], "maurizio": [118, 369], "max": [0, 12, 32, 36, 45, 47, 52, 54, 56, 58, 60, 61, 71, 82, 86, 90, 106, 107, 109, 114, 118, 156, 163, 165, 178, 239, 360, 361, 391, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 429, 434, 436, 437, 438, 441, 442, 443, 444, 446, 447, 450, 451, 453], "max_imag": [107, 112, 121, 282], "max_it": [43, 51, 53, 60, 94, 108, 240, 241, 243, 305, 306, 307, 308, 310, 311], "max_iter_cv": 241, "max_n_sampl": 60, "max_no_improv": 454, "max_precis": 60, "max_usag": 111, "maxim": [36, 185, 317, 319, 320, 349, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419], "maximilian": [0, 129, 163], "maximum": [16, 35, 51, 68, 73, 81, 91, 94, 96, 104, 105, 108, 130, 131, 151, 163, 176, 185, 192, 220, 239, 240, 241, 243, 248, 255, 256, 282, 291, 301, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 318, 327, 336, 340, 342, 343, 344, 362, 364, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 395, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430, 436, 455, 457, 459, 460, 467, 480, 495], "maxixmum": [132, 163], "maxprob": [11, 59, 93, 167, 255, 256, 498], "mayb": [68, 121, 391], "mayberg": [118, 205, 252], "mayer": [118, 201, 250], "mazoy": [118, 199, 249], "mazziotta": [118, 236, 262], "mb": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 497], "mccarthi": [118, 198], "mcgill": [0, 219], "mcgovern": 0, "mckai": [118, 233, 260], "mckinstri": [118, 202, 219], "mcleod": [26, 118], "md": [0, 237, 259], "md5sum": 3, "mean": [3, 6, 7, 15, 16, 17, 19, 22, 23, 26, 27, 32, 33, 34, 35, 36, 37, 38, 41, 43, 44, 45, 46, 47, 50, 52, 53, 54, 58, 59, 61, 64, 68, 71, 72, 73, 79, 85, 91, 93, 94, 96, 97, 99, 101, 105, 106, 107, 108, 114, 116, 121, 133, 141, 145, 148, 151, 155, 157, 163, 164, 165, 168, 169, 171, 178, 179, 182, 185, 187, 188, 191, 192, 198, 205, 239, 240, 241, 243, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 317, 319, 320, 322, 327, 335, 336, 340, 342, 343, 344, 346, 351, 356, 357, 368, 369, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 426, 428, 429, 441, 442, 443, 444, 446, 447, 448, 450, 454, 455, 456, 457, 459, 460, 462, 463, 464, 467, 469, 470, 479, 481, 497, 498], "mean_": [50, 54, 114, 165, 239], "mean_correl": [53, 169], "mean_correlation_matrix": [50, 54], "mean_data": 114, "mean_epi_img": 32, "mean_fmri": 38, "mean_fmri_img": 106, "mean_func": 97, "mean_func_img": [52, 94], "mean_haxbi": [27, 191], "mean_haxby_img": [16, 17], "mean_imag": 72, "mean_img": [3, 6, 16, 17, 19, 26, 27, 32, 33, 35, 38, 52, 71, 72, 73, 87, 91, 94, 96, 97, 106, 108, 114, 134, 163, 191, 356], "mean_img_": [35, 73], "mean_scor": [54, 102], "mean_test_scor": 102, "meaning": [101, 103, 114, 138, 148, 151, 163, 179, 181, 208, 221, 345, 469], "meaningless": [3, 171, 181, 343], "meant": [3, 6, 108, 246, 315, 465], "meanwhil": [129, 130, 163], "measur": [25, 36, 51, 52, 54, 61, 68, 79, 102, 103, 109, 111, 118, 144, 154, 163, 165, 166, 168, 169, 175, 176, 178, 179, 181, 185, 187, 192, 198, 200, 247, 279, 369, 427, 439, 454, 479, 495], "mechan": [33, 171, 239, 240, 241, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 454, 455, 456, 457], "med": 249, "media": [107, 112], "medial": [10, 24, 61, 93, 114, 118, 176, 438, 444, 446, 447], "medial_wal": [10, 24, 481], "medialtemporallob": 267, "median": [151, 163, 202, 372, 375, 379, 444, 446, 447, 460], "medic": [0, 47, 118, 165, 169, 177, 199, 200, 219, 225, 228, 239, 257, 457], "medicin": 228, "medium": [188, 290, 293, 294, 301, 451], "meet": [118, 160, 163, 198, 202, 496], "meg": [181, 185], "megan": [118, 217], "megatrawl": [9, 29, 116, 118, 138, 163, 194, 279, 440, 448, 497], "meghana": [145, 148, 163], "mehdi": [0, 54, 102, 118, 122, 126, 136, 145, 151, 163], "meisler": [0, 128, 130, 163], "mejia": [26, 118], "melbourn": 0, "melissa": [118, 227], "mem": [8, 29, 48, 62, 75, 84, 99, 115, 117, 497], "member": [179, 188, 496], "memor": [173, 181], "memori": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 140, 148, 149, 163, 168, 169, 178, 179, 191, 192, 240, 290, 293, 294, 301, 305, 306, 307, 308, 310, 311, 312, 313, 315, 320, 327, 330, 340, 346, 350, 360, 361, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 451, 455, 456, 457, 468, 471, 472, 481, 495], "memory_": [240, 305, 306, 307, 308, 310, 311, 312, 313, 327, 340, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 457], "memory_level": [35, 37, 38, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64, 91, 93, 94, 101, 102, 103, 106, 107, 108, 109, 110, 169, 192, 240, 305, 306, 307, 308, 310, 311, 312, 313, 327, 330, 340, 346, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 455, 456, 457, 481], "memory_profil": 111, "memory_usag": 111, "memoryerror": 190, "menn": [118, 227, 368, 369], "mensch": [0, 51, 118, 126, 136, 138, 141, 163, 170, 208, 254, 313], "mental": [0, 68, 70, 74, 83, 118, 187, 204, 277, 283], "mention": [103, 111, 127, 129, 130, 163, 179, 180, 181], "menuet": [148, 163], "merg": [26, 151, 163, 164, 168, 179, 185, 188, 191, 456], "meriaux": [74, 118, 204, 277], "merlin": [118, 312], "mert": [118, 231, 237, 259, 263], "mesh": [23, 24, 39, 70, 113, 114, 128, 132, 134, 143, 148, 151, 156, 160, 163, 180, 185, 186, 192, 211, 212, 213, 214, 215, 216, 290, 293, 294, 301, 305, 306, 307, 308, 310, 311, 312, 313, 356, 379, 380, 381, 405, 438, 444, 445, 446, 447, 451, 453, 455, 471, 472, 473, 474, 475, 476, 477, 478, 479], "mesh_coordin": 23, "mesh_typ": [10, 24, 39, 70, 113, 294, 301], "mess": 38, "messag": [3, 86, 138, 163, 188, 240, 241, 243, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 322, 327, 336, 340, 342, 346, 357, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 454, 455, 456, 457, 462], "met": [128, 163], "meta": [0, 3, 15, 100, 103, 107, 115, 116, 121, 209, 230, 239, 240, 241, 284, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 350, 355, 356, 358, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 436, 443, 448, 454, 455, 456, 457, 497], "meta_analysis_img": 112, "metabol": [69, 181, 185], "metadata": [59, 65, 103, 104, 105, 113, 121, 128, 134, 151, 163, 191, 226, 227, 239, 240, 241, 282, 283, 284, 285, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 330, 340, 367, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 454, 455, 456, 457], "metadata_rout": [239, 240, 241, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 454, 455, 456, 457], "metadatarequest": [239, 240, 241, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 454, 455, 456, 457], "metaprior": 47, "method": [10, 15, 16, 26, 28, 33, 38, 42, 47, 49, 51, 53, 61, 62, 88, 91, 93, 94, 96, 103, 109, 111, 116, 118, 119, 121, 128, 129, 130, 132, 134, 135, 136, 140, 144, 148, 151, 154, 155, 156, 158, 160, 163, 165, 166, 168, 172, 173, 177, 178, 179, 183, 185, 186, 187, 190, 191, 192, 198, 199, 202, 226, 232, 234, 236, 239, 240, 241, 251, 262, 268, 279, 282, 284, 305, 306, 307, 308, 309, 310, 311, 312, 313, 317, 318, 319, 320, 322, 327, 340, 342, 347, 350, 351, 352, 357, 360, 361, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 434, 442, 448, 449, 451, 452, 453, 454, 455, 456, 457, 465, 469, 470, 479, 495, 497, 498], "methodolog": 205, "methodologi": 220, "metric": [33, 37, 41, 43, 44, 54, 81, 134, 151, 163, 171, 172, 176, 185, 205, 305, 306, 307, 308], "meudec": [0, 127, 155, 156, 157, 158, 159, 160, 163], "mf": [77, 118, 198], "mgh": [59, 93, 237, 263], "mgrid": [25, 86], "mgz": [149, 150, 163, 405, 444, 445, 446, 447, 453, 477], "mi": 68, "mia": [0, 130, 163], "mialab": 250, "miami": 0, "mib": 111, "miccai": [118, 165, 239], "micha": [0, 132, 163], "michael": [0, 39, 54, 102, 118, 122, 126, 136, 148, 163, 177, 187, 200, 201, 227, 229, 250, 258, 369], "michel": [0, 47, 52, 118, 122, 128, 129, 130, 132, 163, 177, 187, 204, 225, 227, 257, 277], "mickl": [118, 233, 260], "microarchitectur": 181, "mid": 481, "middl": [47, 59, 68, 93, 118, 148, 156, 163, 228, 366], "midrul": 65, "midx": 104, "miezin": [61, 118, 230, 266], "might": [6, 36, 64, 105, 108, 170, 174, 176, 181, 185, 188, 190, 198, 253, 268, 356, 363, 369, 378, 383, 384, 385, 386, 387, 388, 437], "migrat": [127, 163], "mikiten": [118, 236, 262], "mil": [118, 198], "mila": 0, "mild": 68, "milham": [54, 102, 118, 200, 227], "miller": [118, 165, 198, 233, 260], "millimet": [86, 176, 192, 295, 296, 297, 298, 299, 300, 305, 306, 307, 308, 309, 312, 313, 327, 340, 342, 362, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 455, 457, 459, 466], "mimic": [174, 255, 256], "min": [2, 3, 4, 6, 10, 11, 18, 20, 22, 28, 40, 42, 52, 54, 56, 58, 61, 72, 79, 81, 82, 83, 102, 104, 105, 106, 107, 111, 156, 157, 163, 360, 361, 428, 429, 434, 436, 437, 438, 439, 441, 442, 443, 444, 446, 447, 450, 451, 453], "min_dist": [64, 327, 340, 367, 466, 467], "min_n_sampl": 60, "min_onset": [327, 329, 330, 334], "min_region_s": [53, 89, 90, 169, 457, 459], "min_siz": 458, "minc": 202, "minctracc": 202, "mind": [0, 54, 171, 172, 179, 185], "mine": [118, 187, 202, 251], "ming": [118, 217], "mini": 454, "minibatchkmean": [52, 454, 455], "miniconda": 496, "minim": [59, 65, 111, 179, 185, 327, 329, 334, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 441], "minimalist": 3, "minimize_memori": [65, 70, 71, 73, 77, 180, 327, 330, 340], "minimum": [35, 64, 73, 79, 81, 91, 104, 105, 125, 127, 130, 132, 136, 141, 143, 144, 145, 148, 151, 154, 156, 158, 161, 163, 164, 169, 188, 202, 343, 344, 364, 372, 375, 379, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 422, 430, 450, 457, 458, 459, 460, 466, 467, 480], "minnesota": 0, "minor": [125, 131, 144, 146, 163, 171], "minu": [121, 181, 372, 375, 379], "minut": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 164, 181, 222, 233, 234, 277], "mion": 69, "mion_response_funct": 69, "mion_time_deriv": 69, "miranda": [118, 177, 187, 202], "mirror": [188, 192, 247, 248, 249, 250, 251, 252, 253, 257, 260, 261, 263, 271, 272, 280, 281, 286, 291, 301], "miscellan": [131, 163], "misclassif": [305, 306, 307, 308, 310, 311], "misconcept": 181, "misfit": 68, "mishandl": [26, 118], "mislabel": 188, "misleadingli": 171, "miss": [10, 23, 24, 57, 72, 79, 86, 114, 129, 132, 157, 163, 179, 185, 334, 372, 373, 375, 376, 379, 385, 388, 481], "misspecif": 68, "mit": [0, 231, 237, 259], "mitchel": 208, "mitig": [118, 429], "mitra": [118, 368], "mix": [30, 47, 48, 116, 175, 177, 194, 247, 280, 308, 310, 311, 443, 448, 497], "miyawaki": [30, 48, 116, 118, 192, 194, 281, 347, 364, 371, 374, 377, 419, 443, 448, 481, 497], "miyawaki2008": [43, 44, 91, 481], "miyawaki2008_reconstruction_": 44, "miyawaki_dataset": [44, 91], "miyawaki_filenam": [91, 192], "miyawaki_mean_img": [91, 192], "miykael": [148, 163], "mkdir": [3, 4, 6, 7, 16, 24, 31, 35, 44, 51, 52, 58, 64, 65, 70, 73, 74, 77, 88, 96, 104, 111, 113], "mm": [4, 16, 35, 39, 42, 46, 58, 61, 64, 73, 86, 89, 93, 97, 104, 148, 163, 169, 191, 202, 231, 232, 254, 259, 267, 368, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 424, 457, 458, 459, 467, 479, 480, 481], "mm3": [6, 35, 64, 65, 73, 93, 104, 202, 457, 459, 466, 480], "mmface": [72, 235], "mne": [149, 150, 163], "mni": [16, 51, 55, 57, 68, 70, 95, 104, 113, 118, 121, 141, 151, 154, 160, 163, 166, 184, 185, 187, 191, 192, 194, 199, 202, 208, 209, 220, 221, 230, 232, 238, 249, 251, 257, 265, 266, 267, 307, 330, 347, 378, 384, 387, 428, 430, 434, 436, 437, 441, 442, 443, 449, 450, 452, 467, 490, 495], "mni152": [4, 41, 95, 127, 157, 163, 181, 194, 217, 219, 220, 231, 250, 252, 259, 263, 272, 273, 295, 296, 297, 298, 299, 300, 305, 306, 307, 308, 310, 311, 312, 313, 352, 374, 377, 384, 387, 441, 442, 443, 450, 455, 490], "mni152_file_path": [4, 187], "mni152_templ": 298, "mni152nlin2009casym": [65, 132, 163, 219], "mni152nlin2009casym_": 65, "mni152nlin2009casym_contrast": 65, "mni152nlin2009casym_corrdesign": 65, "mni152nlin2009casym_desc": [50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 65, 87, 93, 94, 97, 108], "mni152nlin2009casym_design": 65, "mni152nlin2009casym_mask": 65, "mni152nlin2009casym_stat": 65, "mni152nlin2009csasym": [219, 272, 273, 295, 296, 297, 298, 299, 300], "mni152nlin2009csym": 219, "mni152nlin6asym": [194, 238, 369, 490], "mni152sym": [194, 238], "mni152templ": [93, 327, 340, 428, 441, 442, 443, 467], "mni305": 185, "mni_icbm152_nlin_sym_09a_nifti": 219, "mni_icbm152_t1_tal_nlin_sym_09a_convert": [4, 187], "mo": 3, "moaepilot": 6, "mock": 179, "modal": [121, 171, 179, 181, 235, 289, 365], "modality_fold": 365, "mode": [9, 15, 17, 22, 29, 58, 63, 75, 85, 96, 99, 116, 118, 141, 146, 149, 155, 160, 163, 179, 180, 186, 191, 192, 198, 208, 248, 254, 257, 260, 282, 284, 327, 334, 352, 371, 376, 378, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 438, 441, 443, 448, 457, 465, 480, 481, 497, 498], "model": [6, 30, 33, 35, 36, 42, 44, 47, 48, 51, 53, 54, 63, 64, 66, 70, 74, 75, 76, 83, 84, 100, 101, 102, 106, 108, 109, 115, 116, 118, 127, 128, 130, 132, 145, 151, 154, 156, 158, 159, 160, 163, 165, 167, 169, 171, 175, 176, 177, 178, 179, 182, 183, 185, 186, 187, 192, 193, 198, 227, 237, 239, 240, 243, 270, 273, 274, 277, 278, 281, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 342, 343, 346, 347, 350, 351, 356, 357, 361, 364, 367, 368, 369, 371, 374, 377, 378, 391, 404, 418, 419, 431, 432, 436, 442, 443, 448, 465, 467, 480, 481, 484, 488, 496, 497, 498], "model_and_arg": 104, "model_ev": [133, 163, 435], "model_evalu": [305, 306, 307, 308], "model_intercept": [79, 81, 109, 342, 391], "model_select": [3, 31, 32, 34, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 54, 101, 102, 148, 163, 171, 174, 305, 306, 307, 308], "model_titl": 69, "modeladhd": [64, 480], "modelflm": 480, "modelin": [65, 77, 79], "models_confound": [65, 103, 104, 330], "models_ev": [65, 104, 330], "models_run_img": [65, 103, 104, 330], "modelsurfac": 113, "modeltwo": 73, "moder": 178, "modern": [136, 163], "modif": [179, 181, 185], "modifi": [18, 52, 61, 96, 107, 134, 141, 158, 163, 164, 179, 188, 192, 234, 282, 284, 360, 361, 364, 444, 446, 447, 453, 468, 469], "modify_d": 282, "modul": [5, 7, 20, 28, 36, 37, 38, 43, 44, 45, 50, 53, 54, 55, 56, 57, 58, 59, 61, 64, 89, 90, 91, 93, 94, 95, 96, 101, 102, 103, 106, 107, 108, 109, 110, 111, 118, 120, 121, 127, 128, 129, 130, 132, 136, 143, 145, 146, 154, 158, 160, 163, 164, 174, 179, 182, 187, 188, 192, 196, 228, 282, 305, 306, 307, 308, 317, 319, 320, 334, 342, 344, 354, 356, 485, 489, 491, 492, 493, 495], "modular": [118, 179, 209, 345, 469], "modulated_ev": [66, 74], "mohammad": [0, 128, 129, 130, 132, 163], "mohlberg": 118, "moment": [24, 120, 164], "monitor": 185, "monkei": 69, "montag": 438, "montgomeri": [118, 319, 320], "month": [164, 188], "montreal": [181, 185, 199, 202, 249], "montr\u00e9al": 0, "mood": [118, 187], "moor": 318, "more": [2, 3, 4, 6, 7, 9, 10, 13, 14, 15, 17, 20, 22, 23, 24, 26, 28, 29, 30, 31, 33, 35, 42, 43, 45, 46, 49, 51, 52, 53, 55, 57, 58, 59, 61, 63, 64, 65, 68, 70, 71, 72, 73, 76, 77, 79, 81, 82, 85, 88, 91, 93, 96, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 116, 118, 119, 120, 121, 123, 127, 128, 129, 132, 134, 135, 137, 141, 143, 145, 147, 148, 151, 153, 157, 158, 159, 163, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 183, 185, 187, 188, 190, 191, 192, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 210, 217, 218, 219, 220, 224, 225, 226, 228, 232, 233, 236, 237, 240, 247, 249, 250, 251, 252, 257, 259, 260, 262, 263, 268, 270, 271, 272, 273, 277, 279, 280, 282, 284, 286, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 317, 319, 320, 327, 330, 340, 342, 346, 357, 365, 366, 367, 369, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 391, 402, 404, 407, 409, 411, 413, 415, 417, 419, 428, 437, 441, 442, 443, 448, 450, 451, 454, 455, 456, 457, 459, 466, 468, 479, 481, 484, 495, 496, 497, 498], "more_smooth_anat_img": 4, "moreno": [118, 204, 227, 277], "moreov": [65, 104, 132, 160, 163, 179, 187, 365], "morgan": [118, 198], "morito": [43, 44, 118, 224, 281], "moritz": [0, 145, 148, 151, 163], "morpholog": [96, 191, 383, 384, 385, 386, 387, 388], "morphologi": 185, "morphometr": 217, "morphometri": [30, 48, 76, 84, 116, 171, 182, 185, 186, 187, 194, 272, 273, 286, 306, 311, 340, 343, 350, 361, 367, 371, 377, 391, 419, 432, 443, 448, 465, 480, 497, 498], "morri": [118, 228], "mortem": 220, "mosaic": [16, 131, 155, 163, 402, 421, 428, 434, 437, 441, 442, 443, 467, 495], "mosaicslic": [404, 407, 421], "most": [7, 25, 35, 43, 45, 46, 52, 64, 77, 96, 103, 111, 113, 129, 134, 145, 148, 163, 164, 171, 172, 173, 174, 176, 178, 179, 181, 188, 191, 192, 198, 205, 220, 327, 329, 334, 437, 444, 446, 447, 453, 455, 457, 459, 473, 479, 495], "most_frequ": 102, "mostli": [135, 163, 178, 364], "motion": [66, 68, 71, 104, 113, 118, 156, 163, 180, 202, 268, 327, 330, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 457, 469], "motiv": 96, "motor": [15, 16, 17, 18, 26, 54, 68, 70, 79, 81, 92, 93, 95, 100, 107, 115, 116, 204, 277, 302, 350, 371, 377, 391, 436, 448, 495, 497], "motor_imag": 495, "mountain": 0, "mourao": [118, 177, 202], "mour\u00e3o": [118, 187], "move": [73, 128, 129, 130, 132, 134, 135, 136, 143, 156, 163], "movement": [59, 107, 118, 187, 192], "movi": [51, 52, 53, 55, 57, 58, 87, 91, 94, 108, 151, 163, 167, 186, 187, 192, 207, 268, 498], "mpl": [188, 392, 394, 395], "mr": 181, "mrg": 179, "mri": [7, 12, 44, 59, 63, 75, 96, 103, 116, 118, 120, 158, 163, 179, 180, 181, 182, 185, 187, 190, 197, 199, 202, 207, 217, 219, 228, 231, 247, 249, 259, 268, 272, 286, 329, 368, 369, 497], "mriqc": 65, "ms_e": [319, 320], "msb": 114, "msdl": [9, 22, 29, 55, 57, 116, 166, 191, 194, 257, 352, 404, 423, 441, 443, 448, 490, 495, 497], "msdl_atla": [21, 54, 55, 56, 57, 102, 481], "msdl_atlas_dataset": 56, "msdl_coord": [54, 102], "msdl_data": [54, 102], "msdl_roi": [55, 56, 57, 225, 257, 481], "mse": [46, 135, 163, 310, 319], "mstep": [202, 251], "msw": 114, "much": [0, 3, 25, 34, 43, 45, 54, 79, 81, 102, 103, 111, 148, 163, 171, 178, 179, 181, 187, 209, 265, 349, 360, 479], "mudassir": [0, 132, 163], "multi": [22, 30, 44, 45, 46, 48, 49, 51, 61, 62, 103, 116, 118, 130, 163, 165, 166, 167, 169, 175, 178, 185, 187, 190, 191, 192, 193, 202, 225, 235, 240, 241, 243, 251, 257, 268, 271, 289, 312, 327, 371, 374, 376, 377, 424, 430, 440, 448, 481, 497, 498], "multi_plt": 41, "multi_scal": 44, "multiclass": [37, 172], "multimask": [134, 163, 192], "multimod": 194, "multimodal_fac": 72, "multimodal_fmri": 72, "multimodal_smri": 72, "multiniftilabelsmask": [50, 127, 129, 131, 163, 189, 481, 498], "multiniftimapsmask": [50, 127, 129, 131, 163, 189, 481, 498], "multiniftimask": [43, 44, 130, 135, 155, 157, 163, 189, 305, 306, 307, 308, 310, 311, 312, 313, 340, 342, 391, 455, 481, 498], "multioutput": [43, 311], "multioutputregressor": 311, "multipca": [374, 481], "multipl": [2, 6, 20, 45, 50, 79, 81, 83, 104, 111, 113, 118, 128, 154, 155, 163, 167, 172, 174, 176, 179, 182, 183, 185, 189, 190, 191, 198, 202, 220, 224, 251, 252, 260, 304, 317, 335, 340, 342, 352, 355, 356, 372, 373, 374, 391, 402, 404, 407, 421, 428, 434, 437, 438, 441, 442, 443, 450, 480, 481, 495, 498], "multiple_spatial_regress": 279, "multipli": [68, 86, 92, 141, 163, 176, 178, 246, 314, 317, 319, 320, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430, 438, 444, 446, 447, 451, 453], "multiprocess": 111, "multiscal": [9, 29, 43, 44, 111, 116, 118, 128, 139, 163, 194, 224, 238, 251, 281, 442, 448, 497], "multisit": [118, 197, 247], "multivari": [39, 100, 115, 116, 118, 170, 185, 186, 187, 201, 250, 268, 352, 357, 371, 377, 443, 448, 484, 496, 497], "multivoxel": [103, 118, 171, 223], "mumford": [103, 118, 171, 185, 187, 269, 287], "murat": [59, 118, 369], "must": [6, 11, 36, 74, 77, 96, 135, 160, 163, 164, 171, 172, 174, 176, 178, 179, 180, 181, 188, 190, 192, 198, 240, 241, 243, 249, 271, 279, 294, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 318, 327, 334, 340, 341, 342, 345, 351, 357, 358, 360, 362, 367, 368, 372, 373, 374, 375, 377, 379, 383, 385, 386, 387, 388, 389, 390, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 427, 428, 430, 433, 435, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 449, 451, 453, 455, 460, 463, 464, 466, 467, 469, 470, 473, 474, 479, 495], "mutabl": [133, 163], "mutual": [134, 163, 310, 311, 372, 373, 374, 375, 376, 377, 378, 379, 457], "mvpa": [30, 116, 185, 187, 224, 498], "mw": [118, 198], "mwrc1oas1_0001_mr1_mpr_an": 46, "mwrc1oas1_0001_mr1_mpr_anon_fslswapdim_bet": [45, 77], "mwrc1oas1_0002_mr1_mpr_an": 46, "mwrc1oas1_0003_mr1_mpr_an": 46, "mwrc1oas1_0004_mr1_mpr_an": 46, "mwrc1oas1_0005_mr1_mpr_an": 46, "mwrc1oas1_0007_mr1_mpr_an": 46, "mwrc1oas1_0009_mr1_mpr_an": 46, "mwrc1oas1_0010_mr1_mpr_an": 46, "mwrc1oas1_0012_mr1_mpr_an": 46, "mwrc1oas1_0013_mr1_mpr_an": 46, "mwrc1oas1_0015_mr1_mpr_an": 46, "mwrc1oas1_0016_mr1_mpr_an": 46, "mwrc1oas1_0019_mr1_mpr_an": 46, "mwrc1oas1_0022_mr1_mpr_an": 46, "mwrc1oas1_0023_mr1_mpr_an": 46, "mwrc1oas1_0025_mr1_mpr_an": 46, "mwrc1oas1_0026_mr1_mpr_an": 46, "mwrc1oas1_0029_mr1_mpr_an": 46, "mwrc1oas1_0031_mr1_mpr_an": 46, "mwrc1oas1_0032_mr1_mpr_an": 46, "mwrc1oas1_0037_mr1_mpr_an": 46, "mwrc1oas1_0038_mr1_mpr_an": 46, "mwrc1oas1_0039_mr1_mpr_an": 46, "mwrc1oas1_0041_mr1_mpr_an": 46, "mwrc1oas1_0042_mr1_mpr_an": 46, "mwrc1oas1_0044_mr1_mpr_an": 46, "mwrc1oas1_0045_mr1_mpr_an": 46, "mwrc1oas1_0049_mr1_mpr_an": 46, "mwrc1oas1_0050_mr1_mpr_an": 46, "mwrc1oas1_0052_mr1_mpr_an": 46, "mwrc1oas1_0053_mr1_mpr_an": 46, "mwrc1oas1_0054_mr1_mpr_an": 46, "mwrc1oas1_0055_mr1_mpr_an": 46, "mwrc1oas1_0056_mr1_mpr_an": 46, "mwrc1oas1_0059_mr1_mpr_an": 46, "mwrc1oas1_0060_mr1_mpr_an": 46, "mwrc1oas1_0061_mr1_mpr_an": 46, "mwrc1oas1_0064_mr1_mpr_an": 46, "mwrc1oas1_0065_mr1_mpr_an": 46, "mwrc1oas1_0067_mr1_mpr_an": 46, "mwrc1oas1_0069_mr1_mpr_an": 46, "mwrc1oas1_0070_mr1_mpr_an": 46, "mwrc1oas1_0071_mr1_mpr_an": 46, "mwrc1oas1_0072_mr1_mpr_an": 46, "mwrc1oas1_0078_mr1_mpr_an": 46, "mwrc1oas1_0079_mr1_mpr_an": 46, "mwrc1oas1_0080_mr1_mpr_an": 46, "mwrc1oas1_0082_mr1_mpr_an": 46, "mwrc1oas1_0086_mr1_mpr_an": 46, "mwrc1oas1_0090_mr1_mpr_an": 46, "mwrc1oas1_0091_mr1_mpr_an": 46, "mwrc1oas1_0094_mr1_mpr_an": 46, "mwrc1oas1_0096_mr1_mpr_an": 46, "mwrc1oas1_0098_mr1_mpr_an": 46, "mwrc1oas1_0099_mr1_mpr_an": 46, "mwrc1oas1_0101_mr1_mpr_an": 46, "mwrc1oas1_0103_mr1_mpr_an": 46, "mwrc1oas1_0104_mr1_mpr_an": 46, "mwrc1oas1_0106_mr1_mpr_an": 46, "mwrc1oas1_0111_mr1_mpr_an": 46, "mwrc1oas1_0113_mr1_mpr_an": 46, "mwrc1oas1_0114_mr1_mpr_an": 46, "mwrc1oas1_0115_mr1_mpr_an": 46, "mwrc1oas1_0117_mr1_mpr_an": 46, "mwrc1oas1_0119_mr1_mpr_an": 46, "mwrc1oas1_0120_mr1_mpr_an": 46, "mwrc1oas1_0121_mr1_mpr_an": 46, "mwrc1oas1_0123_mr1_mpr_an": 46, "mwrc1oas1_0124_mr1_mpr_an": 46, "mwrc1oas1_0126_mr1_mpr_an": 46, "mwrc1oas1_0131_mr1_mpr_an": 46, "mwrc1oas1_0135_mr1_mpr_an": 46, "mwrc1oas1_0136_mr1_mpr_an": 46, "mwrc1oas1_0138_mr1_mpr_an": 46, "mwrc1oas1_0144_mr1_mpr_an": 46, "mwrc1oas1_0145_mr1_mpr_an": 46, "mwrc1oas1_0146_mr1_mpr_an": 46, "mwrc1oas1_0148_mr1_mpr_an": 46, "mwrc1oas1_0150_mr1_mpr_an": 46, "mwrc1oas1_0155_mr1_mpr_an": 46, "mwrc1oas1_0159_mr1_mpr_an": 46, "mwrc1oas1_0160_mr1_mpr_an": 46, "mwrc1oas1_0162_mr1_mpr_an": 46, "mwrc1oas1_0163_mr1_mpr_an": 46, "mwrc1oas1_0164_mr1_mpr_an": 46, "mwrc1oas1_0165_mr1_mpr_an": 46, "mwrc1oas1_0167_mr1_mpr_an": 46, "mwrc1oas1_0169_mr1_mpr_an": 46, "mwrc1oas1_0173_mr1_mpr_an": 46, "mwrc1oas1_0174_mr1_mpr_an": 46, "mwrc1oas1_0176_mr1_mpr_an": 46, "mwrc1oas1_0177_mr1_mpr_an": 46, "mwrc1oas1_0178_mr1_mpr_an": 46, "mwrc1oas1_0180_mr1_mpr_an": 46, "mwrc1oas1_0181_mr1_mpr_an": 46, "mwrc1oas1_0182_mr1_mpr_an": 46, "mwrc1oas1_0184_mr1_mpr_an": 46, "mwrc1oas1_0188_mr1_mpr_an": 46, "mwrc1oas1_0189_mr1_mpr_an": 46, "mwrc1oas1_0190_mr1_mpr_an": 46, "mwrc1oas1_0193_mr1_mpr_an": 46, "mwrc1oas1_0199_mr1_mpr_an": 46, "mwrc1oas1_0200_mr1_mpr_an": 46, "mwrc1oas1_0202_mr1_mpr_an": 46, "mwrc1oas1_0203_mr1_mpr_an": 46, "mwrc1oas1_0204_mr1_mpr_an": 46, "mwrc1oas1_0205_mr1_mpr_an": 46, "mwrc1oas1_0207_mr1_mpr_an": 46, "mwrc1oas1_0208_mr1_mpr_an": 46, "mwrc1oas1_0209_mr1_mpr_an": 46, "mwrc1oas1_0211_mr1_mpr_an": 46, "mwrc1oas1_0212_mr1_mpr_an": 46, "mwrc1oas1_0214_mr1_mpr_an": 46, "mwrc1oas1_0216_mr1_mpr_an": 46, "mwrc1oas1_0217_mr1_mpr_an": 46, "mwrc1oas1_0218_mr1_mpr_an": 46, "mwrc1oas1_0220_mr1_mpr_an": 46, "mwrc1oas1_0223_mr1_mpr_an": 46, "mwrc1oas1_0226_mr1_mpr_an": 46, "mwrc1oas1_0227_mr1_mpr_an": 46, "mwrc2oas1_0001_mr1_mpr_anon_fslswapdim_bet": [45, 77], "my_funct": 188, "my_numb": 179, "myeong": [0, 158, 163], "mzayek": [0, 127, 128, 129, 130, 132, 160, 163], "n": [15, 23, 28, 41, 44, 45, 52, 53, 54, 59, 60, 61, 65, 71, 77, 79, 81, 82, 86, 93, 96, 102, 103, 105, 106, 107, 109, 110, 111, 112, 117, 118, 122, 123, 125, 126, 136, 138, 141, 163, 169, 172, 178, 179, 181, 199, 209, 217, 229, 249, 258, 265, 268, 269, 279, 287, 312, 313, 314, 318, 319, 320, 327, 336, 368, 369, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430, 439, 457, 460, 461, 469, 496], "n_add_reg": 334, "n_alpha": [241, 310, 311], "n_class": [305, 306, 307, 308, 310, 311], "n_classes_": [305, 307, 310], "n_clf": 44, "n_cluster": [52, 454, 456, 462], "n_clusters_": 456, "n_col": [327, 340, 342, 367, 431, 467], "n_column": [73, 181, 246], "n_compcor": [368, 369], "n_compon": [51, 53, 94, 107, 108, 169, 312, 313, 462], "n_cond": 96, "n_cond_img": 96, "n_condit": 101, "n_confound": [239, 351, 470], "n_covar": 391, "n_cut": [136, 163, 422], "n_descriptor": [342, 391], "n_detect": [45, 106, 109], "n_displai": 60, "n_elements_": [135, 160, 163, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 457], "n_epoch": [51, 313], "n_event": [328, 329, 334], "n_featur": [44, 50, 60, 133, 163, 178, 239, 240, 241, 243, 245, 305, 306, 307, 308, 310, 311, 312, 313, 314, 454, 456, 462], "n_features_in_": [135, 163, 239, 240, 454], "n_features_new": [312, 313, 454, 456], "n_features_to_select": 101, "n_fold": [3, 241, 305, 306, 307, 308, 310, 311], "n_frame": [328, 334], "n_init": [52, 312, 454], "n_iter": [52, 273, 296, 299, 455, 456, 462], "n_job": [3, 33, 35, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 50, 51, 53, 56, 60, 61, 65, 77, 78, 79, 81, 82, 83, 101, 102, 103, 104, 106, 109, 111, 113, 174, 241, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 330, 336, 340, 342, 357, 372, 373, 374, 386, 388, 391, 455, 481], "n_l1_ratio": [310, 311], "n_label": [41, 423], "n_left_vertic": 473, "n_map": 424, "n_marker": [393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419], "n_network": [11, 50, 88, 134, 163, 263], "n_node": [449, 452], "n_nonzero_coef": 44, "n_onset": [327, 334], "n_output": [311, 312, 313, 454, 456], "n_outputs_": [305, 306, 307, 308], "n_paramet": [310, 311], "n_parcel": [23, 52, 455], "n_parcels_hemi": 23, "n_perm": [45, 79, 81, 106, 109, 342, 391], "n_point": 25, "n_refin": 241, "n_reg": 329, "n_region": [54, 93, 111, 379, 380], "n_regions_extract": [53, 169], "n_regressor": [6, 328, 336, 342, 391], "n_right_vertic": 473, "n_roi": 259, "n_run": 106, "n_sampl": [10, 47, 79, 83, 109, 110, 133, 163, 239, 240, 241, 305, 306, 307, 308, 310, 311, 312, 313, 345, 371, 374, 377, 391, 454, 456, 462, 468, 469, 479], "n_samples_fit": 311, "n_scan": [35, 64, 66, 181, 329], "n_sourc": 468, "n_split": [3, 36, 38, 39, 43, 47, 54, 102], "n_subject": [12, 24, 26, 42, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 77, 78, 79, 80, 81, 82, 83, 87, 91, 93, 94, 97, 102, 105, 108, 109, 110, 111, 138, 142, 163, 169, 178, 192, 239, 240, 241, 243, 247, 248, 268, 276, 277, 280, 286, 291, 301, 304], "n_t": 25, "n_time_point": [93, 94, 114, 335, 336, 473], "n_timepoint": [101, 111, 171, 174, 379, 380, 381, 473], "n_vertic": [7, 24, 39, 192, 444, 446, 447, 453, 471, 472, 473, 474, 476], "n_vertices_per_hemispher": [379, 380, 381], "n_volum": 58, "n_voxel": [6, 58, 79, 81, 94, 101, 171, 174, 181, 312, 315, 317, 319, 320, 323, 335, 336, 457], "n_z": 25, "naffin": 93, "naiv": [111, 178], "namburi": [39, 118], "name": [2, 3, 4, 6, 10, 11, 13, 15, 22, 23, 24, 28, 32, 34, 46, 47, 54, 59, 61, 65, 67, 70, 72, 73, 74, 77, 78, 79, 81, 82, 93, 96, 103, 104, 107, 113, 114, 120, 127, 129, 134, 140, 149, 151, 156, 158, 160, 163, 164, 168, 172, 176, 179, 180, 185, 187, 188, 189, 192, 194, 198, 199, 201, 208, 209, 229, 232, 238, 239, 240, 241, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 267, 277, 282, 287, 288, 289, 290, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 325, 327, 328, 329, 330, 334, 340, 342, 345, 356, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 451, 453, 454, 455, 456, 457, 458, 460, 466, 467, 469, 481, 490, 498], "name_of_exampl": 164, "name_seed_region": 24, "named_step": [43, 47, 101], "namedtupl": 478, "nan": [21, 51, 53, 57, 59, 65, 93, 96, 105, 107, 125, 129, 138, 143, 151, 155, 163, 228, 345, 360, 373, 376, 382, 385, 438, 444, 446, 447, 451, 453, 469, 479, 481], "nanci": [118, 227], "nano": [118, 312], "nardo": [61, 118, 209, 265], "narend": [118, 198], "narr": [68, 83, 179], "narrai": [310, 311], "naselari": [118, 172], "nassir": [118, 165, 239], "natasha": [0, 127, 163], "nathan": 227, "nation": [0, 118, 176, 187, 198, 202, 233, 260, 309, 369], "nativ": [6, 63, 75, 116, 128, 144, 163, 180, 234, 235, 289, 327, 346, 354, 357, 360, 378, 435, 443, 448, 497], "natur": [51, 118, 121, 181, 185, 198, 207, 226, 268, 282, 284], "naturalist": [165, 166, 168, 169, 207], "naux_fil": 93, "navab": [118, 165, 239], "navi": 71, "navig": [148, 163], "naylor": [118, 207, 268], "nb": 50, "nbitpix": 93, "nbsp": [3, 38, 52, 55, 56, 61, 65, 77, 79], "nbviewer": [3, 38, 52, 55, 56, 61, 65, 77, 79], "nbyte": 111, "nc": 252, "ncal_max": 93, "ncal_min": 93, "ncbi": [51, 118, 170, 172, 210, 312], "nclass": [305, 306, 307, 308], "ncol": [32, 66, 81, 103, 104, 109, 114], "ncollect": 112, "ncomput": 112, "ncut": 205, "ndarrai": [111, 151, 163, 239, 240, 241, 242, 243, 244, 245, 246, 247, 261, 265, 267, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 323, 327, 340, 342, 345, 347, 350, 351, 357, 358, 360, 362, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 388, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 424, 427, 431, 440, 444, 445, 446, 447, 449, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 471, 472, 473, 475, 477, 478, 479], "ndarray": 240, "ndata": 93, "ndata_typ": 93, "ndatatyp": 93, "ndb_name": 93, "ndescrip": 93, "ndim": [93, 390], "ndim_info": 93, "ndimag": [47, 96, 191, 273, 296, 299, 354, 383, 384, 385, 386, 387, 388], "ndownload": 20, "nearbi": 39, "nearest": [10, 41, 43, 44, 47, 52, 68, 77, 86, 111, 118, 132, 151, 160, 163, 185, 282, 359, 360, 361, 436, 437, 442, 443, 450, 456, 462, 466, 479], "nearest_most_frequ": [10, 134, 163, 479], "nearest_neighbor_group": [127, 163], "nearestneighbor": 39, "nearli": [197, 310, 311], "nebraska": 0, "necessari": [4, 65, 91, 94, 104, 113, 127, 151, 158, 163, 165, 168, 171, 179, 180, 188, 192, 199, 249, 282, 284, 291, 305, 306, 307, 308, 320, 327, 340, 377, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 481], "necessarili": [71, 169, 181, 194, 202, 238, 490], "necessit": 164, "necu": [145, 163], "need": [0, 2, 3, 5, 6, 7, 10, 17, 21, 32, 33, 35, 44, 45, 51, 52, 53, 54, 58, 65, 68, 70, 73, 77, 79, 81, 82, 83, 86, 91, 93, 94, 101, 102, 103, 104, 107, 108, 111, 113, 120, 121, 148, 151, 158, 163, 165, 169, 171, 172, 173, 174, 179, 181, 184, 185, 188, 190, 191, 192, 198, 246, 314, 317, 318, 362, 367, 368, 372, 373, 375, 376, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 430, 434, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 455, 457, 479, 495, 496], "neelai": [0, 158, 163], "neg": [10, 15, 17, 18, 45, 54, 61, 68, 79, 81, 82, 92, 98, 106, 110, 118, 130, 134, 135, 155, 158, 163, 176, 181, 185, 198, 247, 311, 342, 343, 360, 364, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 425, 428, 436, 437, 438, 441, 442, 443, 444, 446, 447, 457, 466, 467, 479, 495], "neg_label": 41, "neg_log10_vfwe_pvals_img": 342, "neg_log_pv": [45, 79, 81, 106], "neg_log_pvals_anova": [109, 110], "neg_log_pvals_anova_unmask": [109, 110], "neg_log_pvals_bonferroni": 106, "neg_log_pvals_bonferroni_data": 106, "neg_log_pvals_bonferroni_unmask": 106, "neg_log_pvals_permuted_ols_unmask": [79, 109], "neg_log_pvals_tfce_unmask": 109, "neg_mean_absolute_error": [45, 306, 308], "neg_mean_squared_error": [306, 308], "negat": [55, 85, 99, 116, 302, 356, 443, 448, 497], "negative_edg": 61, "negative_stat_img": 92, "neglig": [178, 349], "neighbor": [10, 39, 52, 96, 151, 163, 186, 309, 436, 437, 442, 443, 450, 455, 456, 462, 479], "neighborhood": [134, 163, 168, 479], "neighbourhood": 479, "neither": [364, 473, 474], "nelson": [61, 118, 209, 230, 265, 266], "nepal": 0, "nest": [25, 31, 45, 154, 163, 174, 239, 240, 241, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 454, 455, 456, 457, 479], "nested_cv_scor": 36, "nested_sample_point": 25, "net": [30, 47, 48, 116, 177, 286, 305, 306, 310, 311, 443, 448, 497], "netherland": 0, "netmat": [28, 138, 163], "neto": [118, 202, 251], "network": [2, 9, 20, 21, 22, 29, 49, 50, 51, 54, 57, 58, 63, 74, 75, 85, 88, 96, 99, 104, 116, 118, 121, 132, 140, 154, 160, 163, 164, 165, 166, 167, 169, 179, 180, 185, 186, 187, 192, 194, 197, 201, 202, 204, 209, 228, 230, 231, 232, 233, 237, 247, 248, 250, 251, 257, 259, 260, 263, 265, 266, 267, 277, 279, 327, 334, 352, 368, 369, 371, 373, 376, 378, 404, 425, 439, 440, 441, 443, 448, 457, 465, 480, 481, 495, 497, 498], "network3": 89, "networks_197": 20, "networks_444": 20, "networks_64": 20, "neural": [69, 118, 165, 170, 181, 185, 187, 192, 204, 218, 240, 269, 287, 309], "neuro": [26, 118, 170, 185, 305, 363], "neuroanatomi": 192, "neurobiolog": 185, "neurogram": 0, "neuroimag": [0, 2, 7, 9, 23, 26, 29, 39, 51, 54, 59, 65, 78, 96, 102, 103, 104, 106, 116, 118, 119, 121, 148, 151, 163, 165, 166, 170, 171, 173, 175, 176, 177, 179, 185, 186, 189, 194, 199, 202, 204, 206, 208, 217, 219, 225, 226, 232, 249, 251, 253, 254, 257, 261, 267, 271, 277, 282, 284, 305, 306, 307, 308, 309, 310, 311, 312, 313, 322, 342, 345, 346, 349, 350, 351, 352, 353, 354, 355, 357, 359, 360, 361, 362, 363, 365, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 428, 429, 434, 436, 437, 438, 441, 442, 443, 448, 450, 451, 455, 457, 460, 461, 463, 464, 467, 470, 479, 485, 495, 497, 498], "neuroinformat": [118, 121, 208, 226, 228, 282, 284], "neurolog": [107, 181, 185, 199, 202, 249], "neurologi": [0, 234], "neuromap": 179, "neuron": [26, 43, 44, 61, 118, 176, 224, 230, 266, 281], "neuroparc": 179, "neurophysiologi": [118, 231, 237, 259, 263], "neuropsychiatr": [269, 287], "neuropsychologia": [118, 223], "neuroradiologi": [26, 118], "neurosci": [0, 26, 52, 68, 74, 118, 168, 176, 185, 187, 197, 198, 201, 204, 227, 228, 233, 247, 250, 260, 277, 498], "neurospin": [0, 63, 67, 75, 116, 179, 180, 222, 435, 448, 497], "neurostar": [179, 187, 188], "neurosynth": [103, 107, 119, 226, 282, 284, 498], "neurosynth_spectral_01": 107, "neurosynth_spectral_01_1": 107, "neurosynth_words_for_image_": 107, "neurosynth_words_for_image_11": 107, "neurovault": [90, 100, 115, 116, 118, 119, 134, 144, 151, 156, 160, 163, 185, 194, 282, 283, 284, 285, 295, 302, 350, 355, 356, 358, 362, 371, 377, 436, 443, 448, 497, 498], "never": [36, 171, 178, 187, 360, 361], "nevertheless": [157, 163], "new": [0, 2, 3, 21, 38, 41, 43, 44, 68, 73, 74, 77, 81, 86, 88, 96, 101, 106, 107, 112, 118, 120, 126, 132, 134, 142, 143, 144, 145, 146, 159, 164, 171, 172, 173, 174, 179, 185, 187, 191, 192, 234, 239, 241, 282, 284, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 320, 327, 340, 354, 357, 358, 359, 360, 364, 369, 372, 374, 375, 377, 379, 383, 385, 386, 388, 391, 426, 427, 428, 429, 430, 431, 434, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 455, 458, 465, 495, 496], "new_img_lik": [12, 38, 50, 96, 105, 111, 112, 129, 134, 151, 160, 163, 191], "new_label": 458, "new_labels_img": 458, "new_titl": 109, "newaxi": [43, 47, 82, 86], "newberg": [0, 134, 163], "newer": [170, 282, 284], "newest": [159, 163, 282], "newli": [164, 440], "newseg": [45, 77], "newton": 178, "next": [15, 57, 58, 61, 66, 67, 68, 70, 71, 73, 77, 80, 81, 82, 83, 146, 149, 158, 163, 166, 177, 178, 179, 181, 188, 480, 481], "nextent": 93, "nglmax": 93, "nglmin": 93, "nguyen": [0, 151, 154, 156, 163], "niak": [202, 247], "nian": [118, 231, 259], "nib": 65, "nibabel": [4, 26, 33, 35, 38, 42, 46, 47, 50, 52, 53, 59, 65, 77, 83, 86, 93, 105, 127, 128, 130, 132, 142, 143, 145, 151, 156, 158, 160, 163, 178, 179, 190, 191, 312, 313, 347, 348, 355, 360, 361, 362, 371, 372, 373, 374, 375, 376, 377, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 455, 457, 458, 459, 463, 464], "nice": [53, 169], "nicer": 24, "nichol": [106, 118, 121, 165, 185, 187, 198, 226, 282, 284, 342, 385, 391, 426], "nichola": [118, 197, 217, 247], "nickerson": [118, 236, 262], "nico": [61, 118, 209, 232, 265, 267], "nicola": [0, 118, 130, 155, 156, 157, 158, 159, 160, 163, 198, 233, 260], "niconnect": 0, "nielsen": [118, 197, 247], "nifitmask": 368, "nifti": [2, 4, 10, 12, 17, 19, 27, 31, 32, 34, 36, 37, 38, 43, 44, 50, 51, 52, 55, 56, 57, 59, 61, 79, 81, 86, 88, 91, 93, 94, 96, 97, 106, 108, 109, 113, 120, 130, 131, 132, 133, 134, 136, 154, 160, 163, 166, 170, 171, 179, 189, 199, 200, 204, 207, 208, 210, 217, 218, 220, 224, 225, 226, 228, 229, 231, 236, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 263, 268, 270, 271, 275, 276, 277, 280, 281, 286, 305, 306, 309, 310, 311, 312, 313, 347, 350, 354, 355, 360, 363, 455, 456, 458, 479, 486, 495], "nifti1": [4, 33, 35, 38, 42, 46, 52, 53, 59, 65, 77, 83, 93, 105, 151, 163, 362, 371, 372, 373, 374, 375, 376, 377, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 455, 457, 458, 459, 463, 464], "nifti1head": [59, 93, 105, 356], "nifti1imag": [4, 26, 33, 35, 38, 42, 43, 46, 47, 52, 53, 59, 65, 77, 83, 86, 93, 143, 144, 146, 151, 163, 169, 190, 253, 255, 256, 258, 259, 262, 263, 273, 280, 295, 296, 297, 298, 299, 300, 305, 306, 307, 308, 309, 312, 313, 322, 324, 327, 340, 342, 343, 344, 346, 348, 352, 353, 355, 356, 357, 360, 361, 362, 363, 364, 371, 372, 373, 374, 375, 376, 377, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 402, 407, 409, 413, 419, 423, 424, 425, 455, 457, 458, 459, 463, 464], "nifti2imag": [146, 163], "nifti_labels_mask": [52, 59], "nifti_maps_mask": [50, 55, 56], "nifti_maps_masker_": [312, 313, 455], "nifti_mask": [37, 38, 45, 94, 106, 109, 110, 111, 120, 179], "nifti_masker_extractor": 46, "nifti_masker_parallel_inmemori": 111, "nifti_masker_parallel_path": 111, "nifti_masker_singl": 111, "nifti_spheres_mask": 61, "niftiimag": [3, 134, 163, 166, 179, 180, 190, 191], "niftilabelsmask": [57, 59, 85, 96, 99, 116, 129, 132, 134, 135, 148, 149, 151, 154, 155, 156, 158, 160, 163, 166, 189, 255, 268, 371, 372, 373, 376, 460, 463, 465, 481, 497, 498], "niftilablesmask": 93, "niftimapsmask": [54, 55, 56, 57, 93, 102, 124, 129, 134, 135, 148, 155, 158, 163, 166, 189, 312, 313, 372, 373, 375, 457, 461, 464, 481, 498], "niftimask": [12, 31, 34, 36, 37, 38, 41, 43, 44, 45, 50, 54, 55, 56, 57, 58, 59, 61, 64, 65, 71, 77, 85, 93, 96, 99, 101, 102, 103, 106, 107, 108, 109, 110, 116, 120, 128, 132, 134, 135, 148, 151, 154, 155, 156, 157, 158, 163, 171, 174, 189, 268, 281, 305, 306, 307, 308, 310, 311, 312, 313, 324, 327, 340, 342, 352, 357, 368, 369, 371, 372, 373, 375, 376, 378, 385, 391, 426, 427, 434, 442, 443, 448, 455, 465, 481, 486, 497, 498], "niftispheresmask": [58, 61, 64, 71, 103, 126, 130, 131, 134, 136, 138, 149, 153, 155, 163, 180, 189, 481, 498], "nightli": 164, "nih": [51, 118, 170, 172, 210, 312], "nii": [2, 3, 4, 6, 11, 12, 15, 17, 19, 22, 27, 31, 32, 33, 34, 35, 36, 37, 38, 44, 45, 46, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 65, 73, 77, 79, 87, 88, 91, 93, 94, 96, 97, 104, 106, 107, 108, 109, 111, 112, 113, 120, 187, 190, 202, 208, 330, 365, 367, 368, 369, 405, 444, 453, 477, 481], "nii_asym": 202, "nii_sym": 202, "niimg": [1, 8, 35, 57, 61, 91, 93, 94, 101, 116, 120, 128, 129, 130, 134, 145, 148, 151, 156, 160, 163, 168, 187, 189, 191, 192, 260, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 322, 327, 330, 340, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 426, 427, 428, 429, 434, 436, 437, 438, 441, 442, 443, 448, 450, 451, 455, 456, 457, 459, 460, 461, 462, 463, 464, 466, 467, 469, 475, 479, 481, 483, 497], "niimg_convers": [130, 163], "niimng": 327, "nijmegen": 0, "nikhil": [0, 130, 163], "niko": [118, 206, 217, 253], "nikolaidi": [148, 163], "nikolau": [118, 176, 187, 309], "nilearn": [1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 119, 120, 121, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 141, 142, 143, 146, 148, 149, 151, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 188, 190, 191, 192, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 480, 481, 484, 490, 495, 497, 498], "nilearn_cach": [35, 37, 38, 42, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64, 94, 101, 102, 103, 106, 107, 108, 109, 110, 169, 481], "nilearn_cmap": 13, "nilearn_data": [2, 3, 4, 6, 10, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64, 65, 67, 68, 70, 71, 72, 73, 77, 78, 79, 81, 82, 83, 87, 88, 89, 90, 91, 93, 94, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 301, 481], "nilearn_glm": [65, 77], "nilearn_shared_data": [190, 292], "nili": [118, 229, 258], "nimag": 111, "nimg": [118, 199, 206, 249], "nintent_cod": 93, "nintent_nam": 93, "nintent_p1": 93, "nintent_p2": 93, "nintent_p3": 93, "nipi": [160, 163, 179, 186, 210], "niprep": 369, "nipyp": 181, "nishimoto": [118, 172], "nistat": [127, 137, 154, 163], "nistats_migr": [127, 163], "nitrc": [3, 10, 11, 28, 42, 105, 111, 200, 205, 227, 248, 252, 260], "nki": [24, 114, 118, 132, 143, 163, 194, 291, 301], "nki_enhanced_surfac": [24, 114], "nki_nilearn": 227, "nlm": [51, 118, 170, 172, 210, 312], "nmagic": 93, "nmetadata": 93, "nmr": [237, 263], "nn": 39, "nnn": 202, "nodal": [154, 163, 439, 495], "node": [21, 24, 25, 26, 61, 113, 149, 151, 154, 156, 163, 166, 192, 198, 247, 258, 290, 293, 294, 301, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430, 438, 439, 449, 451, 452, 479, 495], "node_cmap": [61, 439], "node_color": [146, 156, 163, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430, 449], "node_coord": [23, 149, 151, 163, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430, 439, 449], "node_kwarg": [396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430, 439], "node_s": [61, 149, 151, 158, 163, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430, 439, 449], "node_strength": 61, "node_strength_neg": 61, "node_strength_posit": 61, "node_threshold": 439, "node_valu": 439, "node_vmax": 439, "node_vmin": 439, "nois": [3, 6, 35, 36, 47, 59, 64, 70, 71, 73, 96, 97, 103, 107, 113, 118, 127, 156, 163, 166, 172, 174, 178, 181, 185, 192, 317, 319, 320, 334, 368, 369, 429, 441, 442, 470, 480], "noise_coef": 47, "noise_model": [6, 26, 35, 64, 68, 70, 73, 113, 327, 330, 336, 480], "noisi": [45, 94, 165], "noisier": [436, 437, 442, 443, 450], "nomenclatur": [23, 118, 206, 261], "nomin": 53, "non": [15, 16, 26, 42, 45, 53, 59, 67, 68, 69, 79, 81, 93, 96, 106, 107, 119, 130, 131, 134, 144, 148, 151, 155, 156, 158, 159, 163, 165, 169, 170, 176, 177, 178, 179, 184, 185, 187, 192, 197, 200, 202, 204, 205, 207, 208, 219, 225, 228, 252, 279, 305, 306, 307, 308, 312, 317, 319, 320, 327, 345, 349, 354, 360, 362, 364, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 385, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 428, 436, 437, 438, 441, 442, 443, 444, 446, 447, 451, 453, 457, 463, 469, 481, 495], "non_parametric_infer": [79, 81, 127, 128, 134, 158, 160, 163, 184], "non_rest": 37, "non_steady_st": 368, "nondement": [118, 228], "none": [3, 7, 10, 15, 16, 23, 24, 34, 35, 38, 39, 43, 47, 52, 55, 56, 57, 59, 61, 64, 65, 68, 69, 70, 72, 73, 77, 79, 81, 91, 93, 94, 96, 97, 103, 104, 105, 107, 112, 113, 114, 121, 128, 132, 134, 135, 138, 148, 151, 155, 160, 163, 179, 192, 239, 240, 241, 243, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 327, 329, 330, 334, 336, 340, 341, 342, 343, 344, 345, 346, 351, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 473, 474, 475, 479, 480, 481, 495], "nonlinear": [118, 202, 219], "nonparametr": 81, "nonpres": 192, "nonstochast": [118, 391], "nonzero": [26, 53, 362, 457], "nooner": [118, 227], "noplot": 179, "noqa": 375, "nor": [192, 364], "noreport": 179, "norihiro": [43, 44, 118, 224, 281], "norm": [47, 56, 58, 65, 78, 81, 104, 112, 135, 163, 239, 245, 305, 306, 307, 308, 310, 311, 312, 313, 327, 429, 454, 455, 456, 457], "norm_nois": 47, "norm_resid": [160, 163], "normal": [6, 25, 33, 39, 47, 58, 61, 70, 71, 104, 108, 113, 120, 130, 138, 163, 171, 178, 179, 180, 181, 185, 199, 219, 221, 228, 240, 243, 249, 275, 286, 319, 320, 362, 479], "normalized_cov_beta": 318, "normalized_residu": [319, 320], "northwestern": 0, "nose": [151, 163], "notabl": [52, 166, 220], "notat": [155, 158, 163, 183, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 434, 436, 437, 438, 442, 443, 444, 446, 447], "notcontain": [121, 282], "note": [2, 3, 4, 6, 15, 16, 21, 24, 41, 45, 46, 47, 51, 52, 55, 57, 58, 59, 61, 67, 68, 71, 73, 77, 78, 81, 86, 88, 91, 93, 94, 96, 97, 104, 106, 108, 111, 113, 118, 120, 121, 128, 134, 158, 163, 164, 165, 166, 170, 176, 177, 178, 179, 180, 181, 183, 188, 190, 191, 192, 202, 239, 240, 241, 246, 247, 249, 250, 251, 254, 259, 260, 263, 268, 270, 271, 272, 273, 275, 276, 279, 281, 282, 283, 284, 285, 286, 287, 291, 292, 295, 296, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 327, 340, 343, 345, 351, 354, 356, 357, 360, 363, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 426, 428, 429, 434, 436, 442, 443, 454, 455, 456, 457, 458, 469, 470, 479, 481, 495], "notebook": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 136, 148, 151, 163, 171, 187, 192, 327, 340, 369, 449, 450, 451, 452, 453, 465, 467, 495], "notequ": [121, 282], "noteworthi": [149, 163, 172], "noth": [4, 176, 316, 318, 321, 340, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 437, 438, 441, 442, 443, 450], "notic": [6, 52, 61, 68, 104, 113, 365], "notin": [121, 282], "notion": [171, 176, 366, 439], "notnul": [121, 282], "notter": [0, 148, 163], "nov": [61, 118, 230, 266], "nova": 0, "novel": 232, "novemb": [78, 118, 132, 145, 148, 151, 154, 163, 322], "now": [2, 3, 4, 6, 7, 15, 16, 17, 21, 23, 27, 31, 41, 43, 47, 52, 53, 54, 58, 59, 65, 66, 67, 68, 70, 72, 74, 81, 83, 86, 88, 94, 95, 96, 98, 103, 104, 105, 107, 108, 111, 113, 114, 120, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 163, 171, 177, 179, 188, 191, 305, 306, 307, 308, 312, 313, 314, 317, 318, 319, 320, 344, 352, 356, 369, 372, 374, 375, 377, 455], "np": [5, 6, 7, 10, 12, 13, 15, 21, 23, 24, 25, 26, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 64, 66, 67, 68, 69, 70, 72, 73, 77, 79, 81, 82, 86, 87, 89, 91, 96, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 132, 160, 163, 169, 179, 190, 191, 239, 309, 312, 313, 316, 317, 318, 319, 320, 321, 342, 346, 356, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 391, 454, 455, 456, 457, 473], "npixdim": 93, "nplot": 112, "nqform_cod": 93, "nqoffset_i": 93, "nqoffset_x": 93, "nqoffset_z": 93, "nquatern_b": 93, "nquatern_c": 93, "nquatern_d": 93, "nr": 178, "nregular": 93, "nreshap": 107, "nrg": 228, "nrow": [13, 52, 66, 81, 103, 104, 114], "nscl_inter": 93, "nscl_slope": 93, "nsession_error": 93, "nsform_cod": 93, "nsharedmemori": 111, "nsizeof_hdr": 93, "nslice_cod": 93, "nslice_dur": 93, "nslice_end": 93, "nslice_start": 93, "nsrow_i": 93, "nsrow_x": 93, "nsrow_z": 93, "ntoffset": 93, "ntop": 107, "nuclei": [118, 229, 258], "nuisanc": [172, 185, 200, 202, 207, 248, 314, 317, 318, 319, 369, 469], "null": [66, 74, 81, 159, 163, 171, 176, 181, 185, 315, 342, 391], "null_cv_scor": 101, "null_duration_tri": 74, "number": [3, 10, 13, 31, 33, 35, 36, 41, 42, 45, 51, 52, 53, 56, 57, 58, 61, 67, 68, 70, 73, 74, 79, 81, 88, 91, 94, 96, 101, 103, 107, 108, 109, 111, 113, 121, 130, 131, 134, 136, 148, 151, 154, 155, 156, 158, 163, 165, 168, 169, 171, 172, 173, 176, 179, 181, 185, 187, 188, 192, 194, 198, 199, 202, 205, 229, 231, 237, 238, 239, 240, 241, 243, 247, 248, 251, 254, 255, 256, 259, 260, 262, 268, 271, 273, 276, 277, 280, 282, 286, 291, 296, 299, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 318, 323, 327, 336, 340, 342, 343, 345, 346, 347, 349, 351, 356, 357, 364, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 386, 388, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 425, 426, 428, 429, 430, 431, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 466, 467, 468, 469, 470, 472, 474, 476, 481, 490, 495], "number_of_scan": 351, "number_of_subject": 112, "numer": [1, 8, 31, 35, 37, 60, 116, 155, 163, 179, 180, 192, 243, 315, 317, 319, 320, 328, 441, 442, 468, 497], "numpi": [3, 5, 6, 7, 10, 12, 13, 15, 17, 21, 23, 24, 25, 26, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 64, 66, 67, 68, 69, 70, 72, 73, 77, 79, 81, 82, 86, 89, 91, 96, 101, 103, 104, 106, 107, 108, 109, 110, 114, 125, 127, 129, 130, 131, 132, 133, 134, 135, 139, 143, 145, 148, 151, 154, 156, 158, 163, 168, 169, 171, 178, 179, 188, 190, 191, 239, 240, 241, 242, 243, 244, 245, 246, 247, 261, 265, 267, 305, 306, 307, 308, 309, 310, 311, 312, 313, 317, 319, 320, 323, 327, 329, 334, 336, 340, 342, 345, 346, 347, 350, 351, 352, 356, 357, 358, 360, 362, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 388, 390, 391, 395, 396, 397, 398, 399, 400, 401, 403, 405, 406, 408, 410, 412, 414, 416, 418, 423, 424, 427, 428, 430, 431, 434, 436, 439, 440, 443, 444, 445, 446, 447, 449, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 471, 472, 473, 475, 477, 478, 479], "numpy_convers": [138, 163], "numpy_mask": 111, "numpy_masker_parallel": 111, "numpy_masker_shar": 111, "numpy_masker_shared_parallel": 111, "numpy_masker_singl": 111, "numpydoc": 179, "nunzio": [118, 227], "nutshel": 6, "nv_data": [107, 112], "nvox_offset": 93, "nwith": 111, "nxyzt_unit": 93, "ny": [118, 319, 320], "nyu": [118, 129, 163, 314, 318], "n\u00e1jera": [0, 122, 125, 136, 138, 163], "o": [26, 61, 103, 118, 138, 163, 164, 171, 179, 198, 199, 217, 230, 231, 247, 249, 259, 266, 368], "oas1_0001_mr1": [45, 46, 77], "oas1_0002_mr1": 46, "oas1_0003_mr1": 46, "oas1_0004_mr1": 46, "oas1_0005_mr1": 46, "oas1_0007_mr1": 46, "oas1_0009_mr1": 46, "oas1_0010_mr1": 46, "oas1_0012_mr1": 46, "oas1_0013_mr1": 46, "oas1_0015_mr1": 46, "oas1_0016_mr1": 46, "oas1_0019_mr1": 46, "oas1_0022_mr1": 46, "oas1_0023_mr1": 46, "oas1_0025_mr1": 46, "oas1_0026_mr1": 46, "oas1_0029_mr1": 46, "oas1_0031_mr1": 46, "oas1_0032_mr1": 46, "oas1_0037_mr1": 46, "oas1_0038_mr1": 46, "oas1_0039_mr1": 46, "oas1_0041_mr1": 46, "oas1_0042_mr1": 46, "oas1_0044_mr1": 46, "oas1_0045_mr1": 46, "oas1_0049_mr1": 46, "oas1_0050_mr1": 46, "oas1_0052_mr1": 46, "oas1_0053_mr1": 46, "oas1_0054_mr1": 46, "oas1_0055_mr1": 46, "oas1_0056_mr1": 46, "oas1_0059_mr1": 46, "oas1_0060_mr1": 46, "oas1_0061_mr1": 46, "oas1_0064_mr1": 46, "oas1_0065_mr1": 46, "oas1_0067_mr1": 46, "oas1_0069_mr1": 46, "oas1_0070_mr1": 46, "oas1_0071_mr1": 46, "oas1_0072_mr1": 46, "oas1_0078_mr1": 46, "oas1_0079_mr1": 46, "oas1_0080_mr1": 46, "oas1_0082_mr1": 46, "oas1_0086_mr1": 46, "oas1_0090_mr1": 46, "oas1_0091_mr1": 46, "oas1_0094_mr1": 46, "oas1_0096_mr1": 46, "oas1_0098_mr1": 46, "oas1_0099_mr1": 46, "oas1_0101_mr1": 46, "oas1_0103_mr1": 46, "oas1_0104_mr1": 46, "oas1_0106_mr1": 46, "oas1_0111_mr1": 46, "oas1_0113_mr1": 46, "oas1_0114_mr1": 46, "oas1_0115_mr1": 46, "oas1_0117_mr1": 46, "oas1_0119_mr1": 46, "oas1_0120_mr1": 46, "oas1_0121_mr1": 46, "oas1_0123_mr1": 46, "oas1_0124_mr1": 46, "oas1_0126_mr1": 46, "oas1_0131_mr1": 46, "oas1_0135_mr1": 46, "oas1_0136_mr1": 46, "oas1_0138_mr1": 46, "oas1_0144_mr1": 46, "oas1_0145_mr1": 46, "oas1_0146_mr1": 46, "oas1_0148_mr1": 46, "oas1_0150_mr1": 46, "oas1_0155_mr1": 46, "oas1_0159_mr1": 46, "oas1_0160_mr1": 46, "oas1_0162_mr1": 46, "oas1_0163_mr1": 46, "oas1_0164_mr1": 46, "oas1_0165_mr1": 46, "oas1_0167_mr1": 46, "oas1_0169_mr1": 46, "oas1_0173_mr1": 46, "oas1_0174_mr1": 46, "oas1_0176_mr1": 46, "oas1_0177_mr1": 46, "oas1_0178_mr1": 46, "oas1_0180_mr1": 46, "oas1_0181_mr1": 46, "oas1_0182_mr1": 46, "oas1_0184_mr1": 46, "oas1_0188_mr1": 46, "oas1_0189_mr1": 46, "oas1_0190_mr1": 46, "oas1_0193_mr1": 46, "oas1_0199_mr1": 46, "oas1_0200_mr1": 46, "oas1_0202_mr1": 46, "oas1_0203_mr1": 46, "oas1_0204_mr1": 46, "oas1_0205_mr1": 46, "oas1_0207_mr1": 46, "oas1_0208_mr1": 46, "oas1_0209_mr1": 46, "oas1_0211_mr1": 46, "oas1_0212_mr1": 46, "oas1_0214_mr1": 46, "oas1_0216_mr1": 46, "oas1_0217_mr1": 46, "oas1_0218_mr1": 46, "oas1_0220_mr1": 46, "oas1_0223_mr1": 46, "oas1_0226_mr1": 46, "oas1_0227_mr1": 46, "oasi": [30, 48, 76, 84, 116, 118, 177, 184, 186, 194, 272, 273, 286, 306, 311, 340, 343, 350, 361, 367, 371, 377, 391, 419, 432, 443, 448, 465, 480, 497], "oasis1": [45, 46, 77], "oasis_dataset": [45, 77], "oasisbrain": [228, 286], "obei": [126, 163], "obj": [179, 428, 429, 434, 436, 437, 438, 441, 442, 443, 444, 446, 447, 481], "object": [2, 3, 4, 5, 6, 7, 10, 11, 14, 15, 17, 18, 23, 24, 27, 30, 32, 34, 35, 38, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 66, 70, 71, 73, 77, 83, 90, 91, 93, 94, 96, 98, 101, 105, 111, 113, 116, 118, 120, 121, 128, 129, 132, 133, 134, 140, 143, 151, 154, 157, 158, 160, 163, 165, 166, 167, 168, 169, 171, 172, 173, 174, 176, 178, 180, 185, 186, 187, 189, 191, 218, 239, 240, 241, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 293, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 317, 319, 320, 322, 327, 330, 340, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 426, 427, 428, 429, 431, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 473, 475, 478, 479, 481, 483, 486, 489, 495, 497, 498], "observ": [26, 42, 47, 61, 64, 66, 68, 72, 81, 82, 83, 106, 172, 176, 180, 181, 185, 187, 192, 318, 426, 454], "observed_timeseri": 180, "obtain": [6, 16, 23, 45, 46, 52, 57, 61, 66, 68, 70, 77, 79, 93, 96, 106, 109, 113, 134, 158, 163, 164, 165, 166, 168, 170, 171, 173, 176, 178, 181, 185, 192, 198, 204, 209, 230, 241, 250, 252, 260, 272, 277, 295, 296, 299, 304, 310, 311, 344, 349, 360, 364, 373, 375, 376, 378, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 435, 436, 437, 438, 442, 443, 444, 446, 447, 457, 481], "obviou": 68, "obvious": 70, "occ": 54, "occasion": 164, "occipit": [61, 93], "occur": [3, 32, 69, 135, 136, 163, 181, 185, 247, 496], "occurr": [37, 38, 43, 44, 45, 50, 54, 55, 56, 57, 58, 59, 61, 64, 71, 91, 93, 94, 96, 101, 102, 103, 106, 107, 108, 109, 110, 120, 133, 163, 176], "octav": 202, "octob": [118, 148, 151, 163, 202], "odc": 221, "odd": 468, "off": [13, 15, 40, 43, 44, 68, 74, 119, 127, 141, 163, 178, 179, 202, 205, 307, 308, 383, 384, 385, 386, 387, 388, 441, 442, 443, 450, 467], "offer": [170, 180, 182, 495], "offici": 496, "offlin": [282, 284, 498], "offset": [43, 54, 86, 107, 154, 163, 191, 360], "often": [12, 32, 34, 37, 38, 46, 50, 51, 88, 96, 120, 170, 171, 172, 176, 181, 185, 187, 190, 191, 192, 247, 317, 319, 320], "oftentim": 187, "ohbm": [118, 147, 163, 198], "ok": 187, "okito": [43, 44, 118, 224, 281], "ol": [109, 317, 319, 320, 327, 336, 391, 488], "old": [129, 151, 157, 158, 163, 164], "old_default": [70, 77], "oldenburg": 0, "older": [37, 38, 43, 44, 45, 50, 51, 54, 55, 56, 57, 58, 59, 61, 64, 71, 91, 93, 94, 96, 101, 102, 103, 106, 107, 108, 109, 110, 118, 120, 143, 144, 145, 146, 163, 179, 190, 228, 347], "oldest": [179, 188], "olfact": 481, "oliv": [0, 71, 118, 129, 163, 176, 202, 251], "oliveira": [118, 187], "olivi": [0, 145, 163], "ols_output": 109, "olsmodel": [160, 163, 317, 319, 320], "omit": 433, "on_fslswapdim_bet": 46, "onc": [4, 38, 41, 52, 60, 73, 111, 121, 158, 163, 164, 165, 170, 171, 178, 180, 181, 184, 185, 188, 192, 454, 479], "one": [3, 4, 6, 7, 10, 15, 16, 17, 21, 25, 31, 32, 33, 35, 37, 38, 39, 41, 43, 47, 50, 51, 52, 58, 59, 60, 61, 66, 68, 70, 72, 73, 74, 76, 79, 80, 82, 83, 84, 88, 93, 94, 96, 103, 104, 105, 107, 109, 111, 113, 116, 120, 121, 127, 128, 130, 132, 134, 140, 142, 145, 154, 156, 157, 158, 163, 164, 165, 166, 169, 170, 171, 172, 176, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 192, 202, 221, 239, 241, 247, 251, 252, 260, 267, 273, 277, 280, 290, 293, 294, 301, 305, 306, 307, 308, 310, 312, 313, 315, 327, 329, 330, 334, 336, 340, 341, 342, 345, 346, 347, 349, 350, 352, 356, 360, 365, 372, 374, 375, 379, 381, 390, 391, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 430, 431, 436, 437, 438, 439, 440, 441, 443, 445, 446, 448, 450, 451, 455, 459, 460, 466, 469, 479, 496, 497], "one_mesh_info": [129, 163], "one_minus_pvalu": [155, 163, 315], "ones": [11, 13, 22, 35, 41, 47, 66, 68, 77, 81, 83, 103, 107, 109, 110, 128, 163, 173, 174, 176, 178, 185, 310, 311, 334, 369, 391, 454, 473], "ones_lik": 79, "onevsoneclassifi": [37, 172], "onevsrestclassifi": [37, 172], "ongo": 179, "onli": [2, 3, 6, 14, 15, 17, 20, 24, 26, 31, 33, 35, 36, 38, 39, 41, 43, 45, 46, 50, 52, 54, 55, 57, 58, 61, 64, 65, 68, 70, 72, 73, 77, 81, 83, 86, 88, 93, 96, 98, 101, 102, 103, 104, 105, 107, 108, 111, 113, 114, 120, 121, 128, 131, 132, 133, 134, 135, 141, 146, 151, 156, 158, 159, 163, 164, 165, 166, 168, 169, 171, 172, 173, 174, 176, 178, 179, 181, 184, 185, 188, 189, 190, 191, 228, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 495], "onlin": [51, 118, 170, 179, 205, 313, 496], "onset": [6, 35, 66, 67, 68, 69, 70, 74, 103, 113, 129, 154, 163, 180, 235, 289, 327, 328, 329, 331, 332, 333, 334, 337, 338, 339, 435, 480], "ontario": 0, "onto": [10, 17, 43, 53, 70, 143, 163, 169, 179, 186, 190, 384, 387, 432, 441, 495], "onward": [132, 163, 258], "opac": [26, 450], "opaqu": [72, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 436, 437, 443, 450], "open": [17, 23, 55, 57, 61, 91, 93, 94, 101, 118, 127, 163, 164, 178, 179, 185, 186, 187, 189, 194, 197, 198, 208, 228, 268, 279, 315, 327, 340, 383, 384, 385, 386, 387, 388, 449, 450, 451, 452, 453, 456, 465, 467, 495, 496, 498], "open_in_brows": [10, 17, 23, 35, 55, 57, 61, 64, 70, 73, 93, 94, 104, 113, 130, 148, 163, 192, 449, 450, 451, 452, 453, 465, 467, 495], "openfmri": 208, "openli": 228, "openneuro": [63, 75, 116, 180, 207, 223, 235, 268, 269, 287, 304, 327, 330, 367, 370, 377, 431, 436, 448, 466, 480, 497], "oper": [41, 88, 91, 93, 96, 105, 108, 111, 120, 156, 163, 164, 171, 178, 179, 181, 185, 189, 190, 192, 239, 240, 273, 304, 327, 340, 342, 354, 356, 357, 383, 384, 385, 386, 387, 388, 431, 483, 484, 487, 498], "opercular": [61, 93, 481], "operculari": 93, "operto": [148, 163], "opinion": 179, "opportun": 52, "oppos": [6, 7, 83, 191, 192], "opposit": [47, 72, 176], "opt": 164, "optim": [56, 60, 103, 118, 151, 155, 163, 172, 174, 177, 178, 208, 241, 243, 254, 360, 361], "optimist": [36, 171], "optimum": 178, "option": [9, 10, 14, 16, 22, 24, 29, 45, 54, 59, 69, 74, 91, 106, 116, 120, 125, 127, 128, 129, 130, 132, 141, 143, 144, 145, 146, 151, 154, 155, 156, 157, 158, 160, 163, 164, 166, 171, 173, 179, 180, 185, 188, 190, 192, 239, 240, 241, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 324, 327, 334, 340, 342, 343, 345, 358, 362, 364, 365, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 467, 469, 470, 479, 495, 497], "orang": 495, "orbit": [93, 481], "orcid": 179, "order": [0, 2, 3, 6, 16, 17, 24, 31, 32, 34, 37, 38, 43, 44, 45, 52, 57, 59, 72, 73, 81, 82, 93, 103, 106, 111, 112, 120, 127, 132, 142, 148, 151, 156, 158, 163, 170, 176, 178, 179, 180, 185, 186, 187, 188, 190, 191, 192, 243, 265, 267, 275, 276, 295, 296, 299, 314, 318, 327, 334, 336, 340, 341, 342, 345, 347, 349, 354, 355, 359, 360, 361, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 390, 391, 428, 434, 436, 437, 438, 442, 443, 450, 457, 458, 460, 463, 468, 469, 479, 495, 496], "ordered_region": [265, 267], "ordinari": [68, 106, 109, 318, 391], "orfano": [0, 118, 127, 136, 148, 163, 179, 204, 277], "org": [0, 3, 4, 10, 11, 13, 19, 28, 36, 38, 40, 42, 52, 55, 56, 59, 61, 65, 77, 79, 105, 107, 111, 112, 118, 121, 179, 181, 187, 188, 197, 198, 200, 201, 205, 207, 210, 218, 223, 226, 227, 236, 248, 250, 252, 262, 268, 271, 279, 282, 283, 284, 285, 302, 305, 306, 307, 308, 369, 452], "organ": [6, 7, 41, 61, 118, 138, 151, 157, 159, 163, 179, 185, 187, 202, 230, 231, 232, 237, 259, 263, 266, 342, 369, 391, 407, 478, 496], "orient": [10, 151, 154, 163, 178, 179, 359], "orig": [444, 445, 446, 447, 453, 478, 479], "origami": 0, "origin": [0, 6, 33, 35, 38, 41, 42, 43, 44, 46, 52, 53, 68, 71, 73, 86, 91, 95, 103, 128, 132, 142, 155, 157, 158, 163, 168, 176, 178, 188, 192, 202, 207, 219, 220, 228, 239, 240, 241, 260, 268, 277, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 343, 344, 364, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 429, 444, 446, 447, 451, 453, 454, 455, 456, 457, 467, 469, 473, 475], "original_affin": 95, "original_shap": 95, "original_voxel": 52, "ortho": [15, 16, 17, 26, 65, 98, 403, 404, 420, 421, 428, 430, 434, 436, 437, 439, 441, 442, 443, 467, 495], "orthogon": [148, 163, 185, 327, 329, 334, 345, 393, 402, 403, 404, 407, 421, 428, 430, 434, 436, 437, 439, 441, 442, 443, 467, 469], "orthogonalmatchingpursuit": 44, "orthoprojector": [14, 15, 17, 54, 55, 61, 65, 158, 163, 420, 430, 436, 439], "orthoslic": [2, 4, 11, 17, 18, 27, 51, 83, 91, 96, 98, 101, 158, 163, 402, 407, 409, 411, 413, 415, 417, 419, 421, 428, 434, 437, 441, 442, 443, 495], "oscar": [0, 148, 163], "oscil": [6, 68, 118], "osf": [10, 18, 22, 54, 79, 81, 82, 83, 102, 104, 169, 203, 207, 208, 221, 229, 254, 258, 268, 277], "osram": 0, "ot": [23, 176], "other": [2, 4, 15, 24, 25, 33, 38, 41, 42, 43, 51, 59, 68, 70, 71, 73, 96, 101, 103, 107, 108, 111, 118, 119, 120, 128, 135, 148, 151, 155, 163, 164, 165, 166, 171, 172, 173, 175, 176, 178, 179, 180, 185, 188, 190, 192, 210, 217, 220, 234, 239, 240, 241, 268, 282, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 317, 319, 320, 327, 329, 334, 340, 342, 343, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 391, 437, 448, 454, 455, 456, 457, 467, 495], "otherwis": [26, 96, 106, 107, 148, 163, 181, 188, 239, 240, 241, 245, 263, 279, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 330, 340, 355, 359, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 438, 441, 444, 445, 446, 447, 450, 451, 453, 454, 455, 456, 457, 458, 469, 479], "otten": 118, "our": [0, 2, 3, 15, 20, 24, 26, 31, 36, 41, 43, 52, 54, 59, 61, 66, 68, 69, 70, 74, 96, 101, 104, 111, 113, 114, 120, 121, 132, 148, 158, 163, 166, 171, 178, 179, 181, 188], "ourselv": 10, "out": [31, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 51, 53, 54, 56, 57, 58, 59, 60, 61, 65, 73, 101, 103, 106, 109, 110, 120, 121, 130, 148, 151, 155, 163, 166, 171, 172, 174, 176, 178, 179, 180, 185, 191, 202, 226, 272, 305, 306, 307, 308, 310, 311, 312, 313, 345, 352, 360, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 438, 455, 457, 458, 468, 469, 479, 495], "out_dict": 81, "out_dir": [65, 70, 77, 367], "outcom": [68, 185, 369], "outdat": [127, 142, 163], "outer": [91, 185, 479], "outlier": [185, 228, 368, 369, 372, 373, 374], "outlin": [51, 91, 170, 179, 405, 445, 481, 495], "outperform": [54, 102, 165, 170], "output": [3, 4, 6, 7, 10, 16, 17, 23, 24, 26, 31, 35, 36, 38, 44, 45, 47, 51, 52, 54, 55, 57, 58, 59, 61, 68, 70, 73, 82, 88, 96, 106, 119, 120, 127, 128, 130, 132, 134, 140, 146, 151, 158, 160, 163, 164, 165, 170, 175, 179, 185, 187, 188, 189, 191, 192, 239, 240, 242, 243, 244, 245, 246, 274, 305, 306, 307, 308, 309, 310, 311, 312, 313, 317, 319, 320, 324, 327, 340, 342, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 357, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 428, 429, 436, 437, 438, 441, 442, 443, 450, 451, 455, 457, 460, 461, 463, 464, 466, 467, 479, 495, 498], "output_dir": [3, 4, 6, 7, 16, 24, 31, 35, 44, 51, 52, 58, 64, 65, 70, 73, 74, 77, 88, 96, 104, 111, 113, 427], "output_fil": [6, 16, 24, 405, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 495], "output_filepath": [93, 94, 192], "output_imag": 340, "output_typ": [6, 26, 45, 64, 67, 68, 71, 72, 73, 77, 78, 79, 81, 82, 83, 103, 106, 109, 113, 327, 340, 391], "outsid": [2, 4, 17, 68, 130, 160, 163, 179, 187, 192, 360, 361, 372, 375, 405, 444, 446, 447, 453, 460, 461, 466, 479], "ova": 37, "over": [3, 21, 26, 41, 51, 52, 54, 70, 91, 105, 111, 118, 120, 128, 154, 155, 163, 170, 171, 176, 177, 178, 179, 184, 188, 191, 202, 208, 254, 313, 327, 353, 357, 368, 379, 392, 394, 395, 441, 445, 479, 481, 495], "overal": [37, 68, 71, 111, 128, 163, 178, 179, 220, 310, 311, 379, 380], "overcom": [26, 118], "overcrowd": 164, "overfit": [36, 172, 176], "overflow": [160, 163], "overhead": 178, "overlai": [21, 22, 26, 53, 169, 191, 450, 498], "overlaid": [17, 72, 154, 156, 163, 441, 481], "overlap": [3, 33, 34, 40, 57, 61, 93, 101, 118, 127, 129, 131, 163, 179, 185, 192, 198, 218, 271, 372, 373, 375, 376, 378, 380, 405, 441, 457, 481], "overrid": [16, 65, 103, 114, 155, 163, 247, 248, 249, 250, 251, 252, 253, 257, 260, 261, 263, 271, 272, 280, 281, 286, 291, 301, 455], "overridden": 179, "overrun": [134, 163], "oversampl": [69, 327, 329, 331, 332, 333, 334, 337, 338, 339], "overview": [40, 41, 164, 176, 178, 187], "overwhelm": 61, "overwrit": [12, 59, 282, 284, 392, 394, 395], "ovo": 37, "own": [4, 6, 7, 52, 61, 103, 119, 121, 171, 174, 179, 183, 273, 498], "owner": 282, "ox": [2, 22, 217, 220, 233, 260], "oxford": [0, 22, 93, 118, 166, 194, 238, 247, 255, 319, 320, 423, 424, 490], "oxi": 181, "oxygen": [68, 181, 185], "oxyhaemoglobin": [181, 185], "p": [6, 26, 45, 51, 53, 55, 56, 59, 61, 65, 73, 77, 78, 79, 81, 82, 83, 96, 104, 106, 109, 110, 118, 155, 163, 165, 176, 178, 181, 197, 198, 199, 200, 205, 208, 210, 219, 233, 236, 239, 240, 243, 247, 252, 260, 262, 314, 315, 323, 342, 343, 345, 367, 391, 466, 467, 469], "p001_unc": [81, 104], "p001_uncorrect": 78, "p_f": 19, "p_h": 19, "p_ma": 38, "p_statmap": [65, 77], "p_unmask": 38, "p_v": 19, "p_val": [78, 79, 81], "p_valu": [38, 47, 79, 81, 96, 112, 155, 163, 315, 327, 340], "pa": [0, 330], "pace": [118, 227], "packag": [0, 3, 4, 6, 15, 17, 19, 21, 31, 36, 46, 50, 51, 53, 55, 61, 65, 70, 81, 94, 96, 108, 111, 114, 125, 126, 127, 128, 130, 132, 134, 148, 151, 156, 158, 161, 163, 179, 181, 187, 188, 190, 210, 255, 256, 466, 495], "packagenam": 188, "packagevers": 188, "pad": [72, 73, 130, 151, 163, 191, 192, 349, 360, 361, 385, 388, 392, 394, 395, 468], "padlen": 468, "padtyp": 468, "page": [3, 38, 52, 55, 56, 61, 65, 77, 79, 118, 131, 133, 148, 152, 158, 159, 160, 163, 164, 168, 172, 176, 178, 179, 181, 188, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "pai": [0, 67], "paid": 0, "pair": [3, 76, 84, 88, 101, 116, 121, 131, 132, 163, 171, 172, 184, 277, 280, 282, 305, 306, 307, 308, 310, 311, 340, 366, 367, 368, 369, 432, 436, 440, 444, 446, 447, 448, 456, 467, 479, 497], "paired_design_matrix": 82, "pairwis": [54, 165], "panda": [3, 6, 11, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 65, 66, 67, 68, 71, 72, 74, 77, 78, 79, 80, 81, 82, 83, 96, 101, 103, 106, 113, 120, 121, 127, 130, 132, 134, 145, 148, 154, 156, 158, 159, 163, 171, 239, 247, 249, 251, 253, 254, 255, 256, 258, 259, 261, 262, 263, 265, 266, 267, 268, 270, 286, 312, 313, 327, 328, 330, 334, 340, 341, 342, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 431, 432, 433, 435, 442, 446, 455, 457, 466, 469], "panek": [118, 227], "papadopoulo": [0, 118, 127, 136, 148, 163, 179, 204, 277], "papathanassi": [118, 199, 249], "paper": [0, 51, 52, 120, 121, 132, 163, 168, 178, 179, 181, 282], "par": 93, "paracingul": 93, "paradigm": [26, 68, 100, 115, 116, 121, 171, 181, 222, 235, 278, 284, 334, 350, 355, 356, 358, 436, 443, 448, 497], "paragraph": 178, "parahip": 481, "parahippocamp": 93, "parallel": [33, 35, 37, 38, 39, 41, 42, 45, 46, 47, 50, 51, 53, 56, 60, 61, 81, 101, 106, 109, 127, 163, 178, 181, 342, 374, 391], "param": [239, 240, 241, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 454, 455, 456, 457], "param1": 188, "param2": 188, "param_connectivity__kind": 102, "param_grid": [36, 102, 114, 128, 163, 172, 305, 306, 307, 308], "param_valid": [143, 163], "paramagnet": [181, 185], "paramet": [3, 6, 15, 16, 17, 22, 24, 25, 26, 30, 31, 35, 41, 45, 47, 48, 52, 54, 57, 59, 61, 63, 72, 73, 75, 91, 93, 94, 96, 98, 104, 105, 108, 110, 113, 114, 116, 120, 121, 127, 128, 129, 130, 131, 132, 133, 134, 135, 142, 145, 148, 149, 151, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 183, 185, 187, 188, 189, 190, 202, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 495, 497, 498], "parameter_plot": 65, "parametr": [45, 67, 68, 79, 81, 106, 109, 110, 118, 132, 163, 176, 182, 184, 185, 315, 316, 321, 345, 469, 498], "parcel": [9, 24, 29, 49, 62, 111, 116, 118, 121, 128, 130, 131, 132, 133, 134, 139, 143, 146, 147, 148, 151, 158, 160, 163, 167, 185, 186, 187, 192, 198, 199, 202, 205, 206, 220, 225, 226, 231, 237, 239, 249, 251, 252, 253, 255, 256, 257, 259, 261, 263, 268, 279, 350, 352, 357, 368, 369, 371, 375, 411, 423, 424, 430, 434, 440, 442, 448, 457, 458, 495, 497, 498], "parcellationsifittedparcel": 52, "parent": [3, 4, 6, 7, 16, 24, 31, 35, 44, 51, 52, 58, 64, 65, 70, 73, 74, 77, 88, 96, 104, 111, 113, 179], "pari": [0, 179], "pariet": [21, 61, 93, 107, 225, 257], "parietomedi": 267, "park": [59, 118, 369], "parker": [118, 228], "pars": [160, 163, 188, 366, 367], "parse_bids_filenam": [134, 158, 163], "parser": 366, "parsimoni": 179, "parson": [118, 236, 262], "part": [7, 10, 15, 16, 23, 24, 39, 52, 54, 58, 70, 91, 93, 98, 114, 118, 127, 131, 135, 151, 157, 160, 163, 172, 178, 179, 180, 186, 188, 191, 198, 200, 204, 239, 245, 246, 255, 256, 272, 277, 305, 306, 307, 308, 312, 313, 342, 343, 364, 365, 366, 368, 374, 377, 380, 381, 383, 384, 385, 386, 387, 388, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 433, 440, 455, 457, 473, 474, 481], "partial": [28, 55, 102, 164, 165, 169, 198, 239, 244, 279, 369], "partial_correl": [28, 61, 244, 279], "partial_correlation_matric": 54, "partial_correlation_matrix": 61, "partial_correlation_measur": 54, "particip": [41, 43, 59, 68, 118, 179, 181, 185, 200, 228, 368, 369], "participant_id": 81, "particular": [12, 16, 35, 68, 89, 101, 121, 137, 158, 163, 166, 174, 176, 178, 187, 188, 190, 284, 307, 317, 319, 320, 334, 365, 479], "particularli": [171, 273, 457], "partit": [3, 17, 31, 43, 232], "partli": [26, 43, 45, 72, 178, 181, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 263, 268, 271, 272, 273, 277, 279, 280, 281, 286, 291, 301], "pascual": [0, 136, 163], "pass": [3, 4, 6, 10, 11, 16, 25, 31, 35, 38, 43, 44, 45, 46, 54, 57, 58, 59, 61, 64, 70, 72, 73, 77, 81, 91, 98, 105, 111, 113, 120, 121, 127, 129, 130, 131, 132, 134, 144, 146, 148, 151, 156, 158, 160, 163, 164, 171, 172, 176, 178, 179, 180, 188, 190, 191, 192, 202, 239, 240, 241, 247, 282, 295, 296, 297, 298, 299, 300, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 329, 330, 334, 340, 342, 345, 359, 360, 361, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 385, 386, 388, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 427, 428, 429, 430, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 450, 451, 453, 454, 455, 456, 457, 459, 465, 467, 468, 469, 475, 479, 480], "passiv": 68, "past": [0, 59, 120, 166, 369], "patalasingh": [0, 160, 163], "patch": [19, 43, 44, 52, 188], "patch_openneuro_dataset": 287, "patcog": [52, 118], "path": [3, 4, 6, 7, 16, 24, 31, 35, 44, 51, 52, 58, 64, 65, 70, 73, 74, 77, 88, 96, 104, 111, 113, 119, 120, 121, 129, 133, 140, 151, 157, 159, 160, 163, 171, 177, 178, 179, 188, 189, 192, 199, 210, 221, 224, 234, 235, 240, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 301, 302, 305, 306, 307, 308, 310, 311, 312, 313, 327, 330, 334, 340, 342, 346, 355, 358, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 405, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 453, 455, 456, 457, 465, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479], "path_to_a_bids_dataset": 330, "path_to_edited_fil": 179, "path_to_new_env": 496, "pathlib": [3, 4, 6, 7, 16, 24, 31, 35, 44, 51, 52, 58, 64, 65, 70, 73, 74, 77, 88, 96, 104, 111, 113, 129, 157, 163, 190, 240, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 301, 305, 306, 307, 308, 310, 311, 312, 313, 327, 330, 334, 340, 342, 346, 358, 365, 367, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 453, 455, 456, 457, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479], "pathlik": [133, 163], "patient": [118, 165, 185, 239], "patrick": [0, 129, 132, 134, 163], "pattern": [0, 4, 9, 29, 30, 48, 52, 54, 103, 116, 118, 121, 146, 154, 163, 165, 170, 171, 174, 177, 178, 179, 185, 187, 190, 198, 202, 206, 218, 223, 225, 241, 243, 248, 251, 261, 272, 282, 303, 309, 346, 358, 385, 390, 429, 448, 456, 462, 497], "paugam": [0, 129, 163], "paul": [0, 118, 127, 129, 133, 163, 198, 205, 217, 252], "paula": [0, 151, 163], "pauli": [22, 118, 194, 238, 258], "pauli2017": 22, "paz": 0, "pb": 0, "pbellec": [148, 163], "pca": [57, 312, 373, 376, 481], "pcc": [21, 24, 54, 58], "pcc_coord": [58, 64, 180], "pcc_mask": 24, "pcc_seed": 64, "pcc_seed_correl": 58, "pcc_seed_correlation_z": 58, "pcp": [194, 247], "pd": [3, 6, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 65, 66, 67, 68, 71, 72, 74, 77, 78, 79, 80, 81, 82, 83, 96, 101, 106, 113, 120, 190, 219, 248, 272, 279, 280, 291], "pdf": [16, 58, 69, 129, 160, 163, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447], "pe": 185, "peak": [6, 35, 64, 65, 71, 73, 104, 111, 172, 174, 178, 179, 422, 457, 459, 466, 480], "pearlson": [118, 201, 250], "pearson": [24, 118, 314, 318, 427], "pearsonr": 24, "peck": [118, 319, 320], "pedagog": 39, "pediatr": [118, 202, 217, 219], "pedregosa": [0, 118, 122, 163, 225, 257], "pedro": [118, 202, 251], "peer": [0, 148, 163, 220], "peke": 0, "penal": [172, 178, 241, 310, 311], "penalti": [32, 36, 41, 42, 46, 172, 177, 185, 305, 306, 307, 310, 311], "pend": 81, "pennsylvania": 0, "penros": 318, "peopl": [0, 6, 145, 148, 149, 150, 151, 152, 153, 163, 178, 179], "pep8": [128, 129, 130, 163, 179, 188], "per": [3, 4, 32, 33, 35, 43, 51, 60, 68, 80, 96, 104, 106, 113, 156, 163, 165, 171, 179, 183, 192, 202, 207, 234, 241, 261, 280, 301, 305, 306, 307, 308, 310, 311, 313, 315, 324, 327, 328, 330, 334, 341, 365, 368, 373, 376, 380, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 468], "per_compon": [51, 154, 163, 312, 313, 455], "peraza": [0, 128, 163], "perceiv": 13, "percent": [31, 36, 44, 45, 46, 65, 103, 104, 113, 151, 163, 171, 335, 344, 364, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430, 441, 449, 451, 453, 469], "percentag": [59, 171, 199, 307], "percentil": [33, 35, 41, 42, 46, 68, 89, 90, 101, 305, 306, 307, 308, 310, 311, 344, 351, 364, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 425, 428, 430, 436, 437, 438, 441, 442, 443, 444, 446, 447, 449, 450, 451, 453, 457, 470], "percept": [118, 151, 163, 181, 204, 235, 277], "perceptu": [13, 118, 176], "perez": [0, 136, 141, 163], "perf403": 375, "perfect": [178, 426], "perfectli": [26, 178], "perform": [3, 7, 32, 35, 36, 41, 46, 47, 50, 51, 54, 57, 65, 68, 73, 81, 82, 91, 93, 94, 96, 102, 103, 104, 109, 110, 113, 120, 121, 128, 154, 155, 156, 158, 163, 165, 170, 172, 175, 176, 177, 178, 180, 181, 182, 184, 185, 186, 190, 191, 192, 199, 205, 226, 228, 234, 243, 273, 296, 299, 305, 306, 307, 308, 310, 311, 312, 313, 327, 329, 336, 342, 345, 359, 360, 361, 362, 363, 364, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 402, 404, 407, 409, 411, 413, 415, 417, 419, 421, 428, 430, 434, 436, 437, 439, 441, 442, 443, 450, 454, 455, 456, 457, 460, 462, 467, 468, 469, 479, 480, 481, 498], "perfus": [118, 368, 369, 470], "period": [6, 44, 68, 70, 305, 306, 307, 308, 310, 311, 312, 313, 331, 332, 333, 337, 338, 339, 345, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 429, 455, 457, 469], "perirhin": [118, 176], "perm": [45, 46], "permiss": [116, 151, 163], "permut": [45, 79, 81, 109, 118, 127, 154, 163, 174, 176, 181, 342, 359, 391, 488], "permutation_test_scor": [101, 174], "permuted_least_squar": [160, 163], "permuted_ol": [45, 81, 106, 109, 127, 128, 154, 159, 160, 163, 176, 184, 342], "perpendicular": 426, "persist": [46, 50, 51], "person": [164, 234], "pertin": [64, 77], "perturb": 54, "pescara": 0, "pessoa": [26, 118], "pet": 181, "peter": [118, 176, 187, 233, 236, 260, 262, 309], "petersburg": 0, "petersen": [61, 118, 202, 209, 230, 232, 265, 266, 267, 368, 369], "petkova": [118, 227], "pfleider": [26, 118], "phantom": [118, 199], "phase": 241, "phenom": [118, 269, 287], "phenomena": 68, "phenomenolog": 69, "phenomenologi": 0, "phenomenon": 176, "phenotyp": [54, 65, 102, 159, 163, 171, 175, 189, 197, 200, 207, 227, 247, 248, 268, 291], "philadelphia": [118, 177], "philip": [118, 227], "philipp": [0, 51, 74, 118, 122, 163, 170, 204, 210, 277, 312], "phillip": [118, 187, 201, 250], "phlypo": [0, 122, 163], "phonolog": 107, "php": [3, 10, 11, 28, 42, 105, 111], "physic": [181, 392, 394, 395], "physio_plot": 65, "physiolog": [59, 68, 71, 369], "physiologi": 369, "pi": [25, 86, 314, 318], "pial": [10, 24, 25, 39, 70, 113, 114, 154, 160, 163, 211, 212, 213, 214, 215, 216, 290, 293, 294, 301, 330, 438, 444, 445, 446, 447, 451, 453, 475, 478, 479], "pial_left": [211, 212, 213, 214, 215, 216, 290, 438, 451, 479], "pial_right": [211, 212, 213, 214, 215, 216, 290, 438, 451, 495], "pick": [22, 26, 41, 169, 178, 181, 185, 273], "picked_slic": 38, "pictur": [52, 120, 168, 176, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "piec": [41, 52, 188, 190, 498], "pierr": [0, 118, 145, 147, 148, 149, 163, 165, 202, 239, 251], "pietrantoni": [0, 160, 163], "pietrini": [3, 33, 34, 40, 101, 118, 218, 271], "pietro": [3, 33, 34, 40, 101, 118, 218, 271], "pinel": [51, 68, 74, 118, 170, 204, 277, 312], "ping": [164, 188], "pinho": [0, 151, 155, 157, 163], "pip": [65, 130, 143, 148, 151, 163, 179, 188, 496], "pipe": 102, "pipelin": [3, 37, 39, 42, 43, 44, 45, 47, 77, 101, 102, 118, 132, 154, 163, 164, 170, 171, 172, 175, 176, 177, 185, 191, 202, 239, 240, 241, 247, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 345, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 454, 455, 456, 457, 469, 498], "pisner": [0, 151, 163], "pitfal": [118, 171, 176], "pittsburgh": 0, "pixar001_task": [51, 53, 56, 87], "pixar002_task": [51, 53, 56], "pixar003_task": [51, 53, 56], "pixar004_task": [51, 53], "pixar005_task": [51, 53], "pixar006_task": [51, 53], "pixar007_task": [51, 53], "pixar008_task": [51, 53], "pixar009_task": [51, 53], "pixar010_task": [51, 53], "pixar011_task": [51, 53], "pixar012_task": [51, 53], "pixar013_task": [51, 53], "pixar014_task": [51, 53], "pixar015_task": [51, 53], "pixar016_task": [51, 53], "pixar017_task": 51, "pixar018_task": 51, "pixar019_task": 51, "pixar020_task": 51, "pixar021_task": 51, "pixar022_task": 51, "pixar023_task": 51, "pixar024_task": 51, "pixar123_task": [50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 87, 93, 94, 97, 108], "pixar124_task": [51, 53], "pixar125_task": [51, 53], "pixar126_task": [51, 53], "pixar127_task": 51, "pixar128_task": 51, "pixar_desc": [50, 55, 56, 58, 59, 61], "pixar_spac": [50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 87, 93, 94, 97, 108], "pixdim": [59, 105], "pixel": [43, 44, 181, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 449, 450, 452, 467], "piyadasa": [118, 201, 250], "pkg": 188, "place": [26, 31, 101, 145, 163, 188, 282, 336, 364, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 429, 437, 479], "placehold": 393, "plai": [181, 192], "plain": 179, "plan_polar": 481, "plan_tempo": 481, "planar": 185, "planck": 0, "plane": 450, "planum": 93, "platform": [121, 144, 163, 188, 226], "pleas": [0, 3, 20, 31, 38, 52, 53, 55, 56, 61, 65, 74, 77, 79, 101, 103, 107, 134, 143, 149, 158, 163, 164, 169, 171, 174, 179, 185, 188, 192, 198, 210, 219, 220, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 484, 496], "plenti": 120, "plo": [118, 187], "plot": [1, 2, 4, 8, 9, 20, 21, 22, 24, 27, 28, 29, 31, 32, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 54, 55, 56, 57, 59, 60, 62, 64, 65, 66, 67, 70, 72, 73, 74, 77, 78, 79, 80, 81, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 103, 104, 106, 107, 108, 109, 110, 111, 116, 120, 123, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 169, 170, 171, 176, 179, 180, 181, 184, 185, 186, 187, 191, 192, 194, 238, 239, 248, 253, 255, 256, 261, 263, 265, 266, 268, 271, 272, 275, 277, 288, 293, 294, 296, 299, 302, 327, 343, 346, 357, 358, 371, 378, 380, 385, 465, 467, 475, 479, 484, 490, 492, 496, 497, 498], "plot_3d_and_4d_niimg": [2, 8, 497], "plot_3d_map_to_surface_project": [10, 29, 186, 451, 497], "plot_ab": [10, 15, 65, 81, 82, 104, 112, 395, 436, 495], "plot_adhd_dmn": [64, 75, 497], "plot_adhd_spher": [151, 163], "plot_advanced_decoding_scikit": [101, 115, 497], "plot_affine_transform": [86, 99, 497], "plot_age_group_prediction_cross_v": [102, 115, 151, 163, 497], "plot_anat": [6, 16, 19, 53, 158, 163, 169, 437, 443, 495], "plot_atla": [11, 29, 497], "plot_atlas_comparison": [50, 62, 497], "plot_beta_seri": [103, 115, 497], "plot_bids_analysi": [104, 115, 497], "plot_bids_featur": [65, 75, 179, 497], "plot_bland_altman": [65, 134, 163], "plot_canica_analysi": [151, 163], "plot_carpet": [12, 29, 129, 154, 155, 159, 160, 163, 495, 497], "plot_color_gradi": 13, "plot_colormap": [13, 29, 497], "plot_compare_decomposit": [51, 62, 151, 163, 186, 497], "plot_compare_mean_imag": [87, 99, 497], "plot_connectivity_measur": [144, 163], "plot_connectom": [23, 50, 53, 54, 55, 56, 57, 61, 123, 125, 127, 140, 141, 146, 149, 151, 160, 163, 166, 169, 449, 452, 495], "plot_connectome_strength": [151, 154, 158, 163], "plot_contrast": 68, "plot_contrast_matrix": [6, 65, 67, 68, 132, 163], "plot_copy_headers_math_img": [105, 115, 497], "plot_data_driven_parcel": [52, 62, 186, 497], "plot_decoding_tutori": [3, 8, 151, 163, 179, 186, 497], "plot_demo_glass_brain": [14, 29, 186, 497], "plot_demo_glass_brain_extens": [15, 29, 497], "plot_demo_more_plot": [16, 29, 497], "plot_demo_plot": [17, 29, 497], "plot_design_matrix": [6, 66, 67, 68, 75, 77, 80, 82, 103, 132, 133, 163, 180, 184, 497], "plot_design_matrix_correl": [66, 132, 133, 163], "plot_dim_plot": [18, 29, 497], "plot_epi": [3, 27, 52, 91, 96, 97, 155, 158, 163, 437, 443, 495], "plot_ev": [72, 74, 132, 133, 154, 163, 180], "plot_extract_regions_dictlearning_map": [53, 62, 497], "plot_extract_regions_labels_imag": [88, 99, 497], "plot_extract_rois_smith_atla": [89, 99, 497], "plot_extract_rois_statistical_map": [90, 99, 497], "plot_fiac_analysi": [130, 163], "plot_fir_model": [67, 75, 497], "plot_first_level_detail": [68, 75, 497], "plot_fixed_effect": [130, 163], "plot_glass_brain": [10, 14, 15, 26, 65, 81, 82, 104, 109, 112, 130, 134, 141, 151, 159, 160, 163, 184, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 443, 495], "plot_group_level_connect": [54, 62, 144, 151, 163, 497], "plot_haxby_anova_svm": [31, 48, 143, 163, 497], "plot_haxby_decod": [151, 163], "plot_haxby_different_estim": [32, 48, 151, 163, 497], "plot_haxby_frem": [33, 48, 186, 497], "plot_haxby_full_analysi": [34, 48, 151, 163, 497], "plot_haxby_glm_decod": [35, 48, 497], "plot_haxby_grid_search": [36, 48, 497], "plot_haxby_mask": [19, 29, 497], "plot_haxby_mass_univari": [106, 115, 497], "plot_haxby_multiclass": [37, 48, 497], "plot_haxby_searchlight": [38, 48, 186, 497], "plot_haxby_searchlight_surfac": [39, 48, 497], "plot_haxby_stimuli": [40, 48, 497], "plot_haxby_understand_decod": [41, 48, 497], "plot_hist": 427, "plot_hrf": [69, 75, 497], "plot_ica_neurovault": [107, 115, 497], "plot_ica_resting_st": [108, 115, 497], "plot_img": [4, 6, 26, 38, 129, 134, 151, 158, 163, 187, 402, 404, 407, 409, 411, 413, 415, 417, 419, 495], "plot_img_comparison": [65, 134, 163], "plot_img_on_surf": [10, 129, 133, 154, 156, 163], "plot_inverse_covariance_connectom": [55, 62, 186, 497], "plot_localizer_mass_univariate_method": [109, 110, 115, 497], "plot_localizer_simple_analysi": [110, 115, 497], "plot_localizer_surface_analysi": [70, 75, 497], "plot_mark": [61, 154, 158, 160, 163, 495], "plot_mask_comput": [91, 99, 192, 497], "plot_mask_large_fmri": [111, 115, 497], "plot_matric": 56, "plot_matrix": [28, 33, 37, 53, 54, 55, 56, 57, 59, 60, 61, 114, 145, 146, 151, 163, 169, 433], "plot_mixed_gambles_frem": [42, 48, 497], "plot_miyawaki_encod": [43, 48, 497], "plot_miyawaki_reconstruct": [44, 48, 497], "plot_multi_subject_connectom": [56, 62, 497], "plot_multiscale_parcel": [20, 29, 497], "plot_negate_imag": [92, 99, 497], "plot_neurovault_meta_analysi": [112, 115, 497], "plot_nifti_labels_simpl": [93, 99, 497], "plot_nifti_simpl": [94, 99, 192, 497], "plot_nilearn_101": [4, 8, 164, 497], "plot_oasi": [77, 84, 497], "plot_oasis_vbm": [45, 48, 151, 163, 186, 497], "plot_oasis_vbm_space_net": [46, 48, 497], "plot_overlai": [21, 29, 497], "plot_param": [72, 98], "plot_predictions_residu": [71, 75, 497], "plot_prob_atla": [22, 29, 51, 53, 89, 90, 138, 145, 146, 155, 163, 169, 170, 437, 442, 495, 497], "plot_probabilistic_atlas_extract": [57, 62, 497], "plot_proportion_activated_voxel": [78, 84, 497], "plot_python_101": [5, 8, 497], "plot_resample_to_templ": [95, 99, 497], "plot_roi": [3, 11, 18, 20, 27, 52, 68, 88, 91, 94, 96, 134, 147, 154, 155, 160, 163, 166, 191, 192, 437, 441, 495], "plot_roi_extract": [96, 99, 497], "plot_second_level_association_test": [79, 84, 497], "plot_second_level_design_matrix": [80, 84, 497], "plot_second_level_one_sample_test": [81, 84, 497], "plot_second_level_two_sample_test": [82, 84, 497], "plot_seed_to_voxel_correl": [58, 62, 149, 163, 497], "plot_signal_extract": [59, 62, 192, 497], "plot_simulated_connectom": [60, 62, 497], "plot_simulated_data": [47, 48, 497], "plot_single_subject_single_run": [6, 8, 497], "plot_slic": 47, "plot_smooth_mean_imag": [97, 99, 497], "plot_sphere_based_connectom": [61, 62, 151, 163, 497], "plot_spm_multimodal_fac": [72, 75, 497], "plot_stat_map": [2, 6, 10, 13, 16, 18, 26, 31, 32, 33, 38, 42, 43, 45, 46, 51, 53, 58, 64, 67, 68, 71, 72, 73, 77, 78, 79, 83, 87, 89, 90, 92, 94, 95, 96, 98, 101, 103, 106, 107, 108, 110, 112, 120, 130, 134, 136, 147, 148, 155, 156, 158, 159, 163, 169, 171, 184, 192, 450, 495], "plot_stat_map_from_displai": 16, "plot_surf": [114, 127, 131, 132, 135, 143, 145, 151, 155, 156, 157, 158, 163, 179, 180, 445, 446, 447, 495], "plot_surf_atla": [23, 29, 497], "plot_surf_contour": [10, 129, 132, 154, 163], "plot_surf_roi": [23, 24, 129, 130, 132, 134, 143, 145, 147, 151, 155, 163, 444, 495], "plot_surf_stat_map": [10, 24, 25, 29, 39, 70, 131, 132, 143, 145, 147, 151, 154, 158, 159, 160, 163, 180, 438, 444, 445, 497], "plot_surface_101": [7, 8, 497], "plot_surface_bids_analysi": [113, 115, 497], "plot_surface_image_and_mask": [114, 115, 497], "plot_surface_projection_strategi": [25, 29, 497], "plot_test_tim": 164, "plot_threshold": [83, 84, 497], "plot_threshold_imag": [98, 99, 497], "plot_transpar": [26, 29, 497], "plot_trisurf": 25, "plot_two_runs_model": [73, 75, 130, 163, 497], "plot_typ": [64, 77, 327, 340, 367, 467], "plot_visu": [27, 29, 497], "plot_visualize_megatrawls_netmat": [28, 29, 497], "plot_write_events_fil": [74, 75, 497], "plotli": [10, 129, 130, 131, 135, 158, 163, 380, 405, 444, 446, 447, 495, 496], "plotlysurfacefigur": [10, 132, 158, 163, 444], "plotted_slic": 110, "plotting_config": [6, 26], "plt": [5, 6, 12, 13, 16, 19, 25, 26, 27, 32, 34, 36, 37, 40, 41, 43, 44, 45, 46, 47, 51, 52, 54, 58, 60, 61, 64, 65, 66, 67, 68, 69, 71, 77, 80, 81, 82, 86, 93, 96, 98, 102, 103, 104, 109, 110, 111, 114, 191, 427, 430, 439, 444, 445, 446, 447], "plu": [327, 329, 334], "plug": [180, 192, 314, 318], "plugin": 188, "pluim": [118, 165, 239], "plunkett": [148, 163], "plural": 185, "pmc": [118, 210], "pmc6871319": [118, 210], "pmid": [118, 172, 231, 237, 259, 263], "pna": [118, 176, 187, 198, 202, 233, 260, 369], "pnas_smith09_rsn10": 2, "png": [6, 10, 16, 24, 44, 64, 65, 77, 186, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 495], "point": [3, 4, 7, 9, 16, 23, 29, 57, 58, 86, 88, 93, 96, 111, 114, 116, 120, 148, 151, 160, 163, 169, 171, 178, 181, 185, 187, 188, 189, 190, 241, 305, 306, 307, 308, 327, 360, 361, 385, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 428, 430, 434, 437, 439, 441, 442, 443, 447, 450, 460, 461, 467, 479, 497], "pointer": [101, 174], "pokharel": [0, 130, 163], "pokropek": [118, 219], "polar": 93, "poldrack": [103, 118, 121, 171, 187, 208, 223, 226, 269, 282, 284, 287], "pole": [59, 93], "pole_occipit": 481, "pole_tempor": 481, "polici": [158, 163, 197], "polimeni": [118, 231, 237, 259, 263], "polin": [51, 52, 74, 118, 121, 165, 168, 170, 204, 226, 240, 277, 282, 284, 312, 345, 469], "pollet": [0, 131, 163], "polydata": [24, 132, 135, 163, 358, 475], "polymesh": [7, 24, 132, 163, 293, 444, 445, 446, 447, 453, 475], "polynomi": [66, 68, 180, 327, 334], "pomara": [118, 227], "pone": [118, 187], "pontil": [118, 177, 202], "pool": [202, 210], "pooled_subject": 54, "poorli": [68, 96, 192, 194, 238, 490], "pop": 375, "popul": [118, 165, 180, 198, 217, 219, 240, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 469], "popular": [6, 51, 186, 190, 305, 306], "portabl": [64, 77, 192], "portion": 72, "portug": 0, "pos_label": 41, "posit": [6, 10, 15, 17, 18, 25, 51, 54, 61, 68, 72, 76, 81, 82, 83, 84, 86, 96, 98, 102, 116, 118, 120, 131, 133, 154, 158, 163, 171, 176, 178, 181, 184, 185, 192, 198, 240, 243, 247, 277, 310, 311, 322, 340, 342, 343, 364, 391, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 425, 428, 430, 434, 436, 437, 438, 439, 441, 442, 443, 447, 448, 450, 451, 457, 466, 467, 479, 481, 495, 497], "positive_edg": 61, "posixpath": 4, "possibl": [4, 6, 15, 16, 17, 47, 70, 82, 83, 86, 96, 103, 120, 121, 141, 158, 160, 163, 164, 165, 168, 171, 176, 178, 179, 181, 185, 187, 188, 191, 192, 226, 239, 240, 241, 247, 258, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 317, 319, 320, 327, 330, 340, 342, 349, 360, 365, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 421, 422, 430, 436, 439, 454, 455, 456, 457, 467, 495], "possibli": [6, 68, 192], "post": [24, 54, 68, 96, 118, 134, 136, 163, 165, 179, 191, 220, 239, 273, 457, 481], "postcentr": [10, 93], "posterior": [23, 24, 58, 61, 64, 93, 145, 163, 180, 265, 267, 444, 446, 447], "potenti": [6, 57, 58, 91, 93, 94, 96, 103, 118, 157, 163, 164, 176, 179, 185, 188, 260, 342, 373, 376, 380, 481], "power": [12, 59, 61, 77, 79, 81, 118, 120, 126, 142, 154, 163, 165, 172, 173, 177, 185, 190, 192, 202, 209, 265, 266, 368, 369, 429], "power2": 368, "power2d": 368, "ppd": 247, "ppi": 103, "pqu9r": [208, 254], "pr": [65, 160, 163, 188], "practic": [7, 34, 54, 70, 102, 165, 168, 172, 174, 176, 178, 179, 180, 181, 184, 187, 190, 191], "pradeep": [0, 118, 147, 163, 171], "prafulla": 0, "prakhar": [0, 132, 163], "praneeth": [39, 118], "pre": [65, 73, 96, 104, 128, 143, 148, 160, 163, 181, 192, 207, 318], "prec": [56, 178], "prec_to_parti": [143, 163], "preced": [39, 179, 192, 327], "precentr": [10, 93], "precentral_l": 199, "precis": [16, 44, 55, 60, 64, 93, 128, 163, 165, 168, 169, 178, 187, 192, 204, 229, 239, 240, 241, 243, 244, 277, 305, 307, 317, 319, 320, 342, 391], "precision_": [55, 56, 60, 165], "precision_scor": 44, "precision_to_print": 44, "precision_weight": 324, "precisions_": [56, 60, 165, 240, 241], "precisions_init": 243, "precomput": [3, 311], "precun": 93, "pred": 41, "predefin": [11, 128, 163], "predict": [32, 33, 35, 41, 42, 43, 47, 54, 61, 63, 66, 75, 100, 115, 118, 120, 155, 156, 158, 163, 173, 174, 176, 177, 179, 181, 182, 185, 186, 187, 198, 207, 209, 239, 257, 265, 268, 279, 288, 305, 306, 307, 308, 309, 310, 311, 319, 320, 327, 340, 345, 357, 362, 371, 376, 378, 385, 419, 443, 448, 466, 496, 497, 498], "predict_proba": 41, "predicted_timeseri": [71, 180], "prediction_scor": 45, "predicton_accuraci": 3, "predictor": [6, 43, 180, 181, 319, 320, 369], "prefer": [42, 54, 102, 134, 163, 168, 179, 190], "prefix": [70, 77, 330, 345, 367, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 457, 469], "prefront": 61, "preliminari": [118, 200, 236, 262], "prematur": 243, "premotor": 107, "premrudeepreechacharn": [0, 133, 163], "premultipli": [305, 306, 308, 310, 311], "prep": 65, "prepar": [45, 61, 96, 102, 104, 120, 138, 163, 175, 189, 372, 373, 374, 375, 376, 378, 379, 380, 381, 457, 498], "prepend": [366, 367], "preproc": [103, 104, 113, 330], "preproc_bold": [50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 87, 93, 94, 97, 103, 104, 108, 113], "preprocess": [6, 12, 31, 35, 36, 39, 43, 44, 47, 64, 65, 70, 91, 94, 102, 104, 108, 113, 114, 118, 119, 128, 143, 163, 169, 170, 176, 177, 181, 185, 192, 197, 200, 221, 227, 228, 234, 247, 248, 268, 291, 327, 330, 345, 366, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 457, 469, 480, 481, 484, 485, 498], "prescrib": 343, "preselect": 59, "presenc": [43, 68, 106, 457, 459], "present": [0, 3, 10, 23, 24, 26, 41, 43, 44, 57, 59, 67, 71, 104, 114, 120, 128, 144, 163, 169, 170, 171, 178, 180, 181, 182, 188, 190, 192, 220, 221, 222, 234, 243, 247, 253, 271, 305, 306, 307, 308, 312, 313, 355, 368, 369, 371, 372, 373, 374, 375, 376, 377, 379, 454, 455, 456, 460, 481], "preserv": [54, 61, 102, 350, 362, 438, 454, 455, 456], "preset": [157, 158, 163, 369, 495], "prespecifi": 192, "press": [68, 70, 74, 78, 79, 81, 82, 109, 118, 181, 275, 277, 285, 302, 319, 320, 480], "presum": [322, 343], "pretti": [4, 107], "prettier": [4, 131, 163, 179], "pretty_brain": 495, "prevent": [129, 134, 163, 164, 360, 361, 367, 383, 384, 385, 386, 387, 388], "previou": [2, 10, 15, 44, 52, 57, 61, 65, 66, 68, 73, 74, 79, 96, 132, 157, 158, 163, 165, 168, 172, 174, 178, 181, 243, 305, 306, 307, 308, 312, 313, 374, 377, 455, 480, 481], "previous": [3, 101, 120, 151, 154, 158, 160, 163, 171, 181, 197, 232], "price": [67, 176], "primal": 178, "primari": [82, 179, 467], "primarili": 103, "primat": 69, "prime": 118, "primer": [182, 498], "princip": [202, 279, 369], "principl": [101, 168, 171, 175, 177, 185, 309, 498], "print": [2, 3, 4, 6, 7, 10, 11, 12, 16, 17, 19, 21, 23, 24, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 45, 46, 47, 50, 51, 52, 54, 55, 56, 57, 58, 59, 61, 64, 65, 66, 71, 72, 73, 74, 77, 79, 83, 87, 88, 91, 93, 94, 95, 96, 97, 101, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 120, 132, 163, 164, 171, 179, 187, 190, 199, 249, 327, 340, 352], "print_changed_onli": 192, "prior": [30, 48, 51, 57, 61, 68, 93, 111, 116, 118, 156, 163, 165, 177, 180, 240, 259, 286, 305, 306, 310, 311, 373, 375, 376, 378, 429, 443, 448, 481, 497], "priori": 51, "prioriti": [188, 190, 292], "privat": [127, 129, 130, 160, 163], "prni": [118, 177, 202, 251], "pro": 13, "prob": [22, 255, 256, 258, 437, 441], "probabilist": [9, 29, 49, 54, 62, 102, 116, 118, 128, 129, 148, 159, 163, 167, 179, 185, 191, 192, 208, 217, 219, 225, 229, 239, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 268, 272, 352, 371, 376, 404, 423, 424, 430, 437, 440, 441, 442, 443, 448, 449, 461, 465, 479, 481, 495, 497, 498], "probabilit": 258, "probabl": [6, 12, 22, 42, 46, 50, 51, 64, 68, 79, 81, 83, 96, 166, 176, 178, 181, 185, 187, 188, 217, 220, 228, 255, 256, 286], "probe": [68, 70, 175, 185], "probe_funct": 243, "problem": [3, 6, 33, 35, 41, 42, 46, 50, 51, 96, 111, 118, 171, 172, 173, 176, 177, 178, 179, 181, 185, 187, 188, 243, 310, 311, 313, 314, 317, 318, 319, 320, 342, 391], "problemat": 68, "proc_bold": 65, "proce": [43, 58, 67, 120], "procedur": [6, 33, 78, 79, 81, 86, 89, 106, 166, 171, 176, 181, 184, 185, 199, 202, 277, 326, 342, 391, 469, 491], "proceed": [118, 176, 180, 187, 198, 202, 233, 260, 309, 369], "process": [16, 17, 34, 38, 41, 45, 53, 56, 65, 93, 96, 104, 111, 118, 119, 120, 136, 163, 165, 166, 169, 170, 171, 174, 178, 179, 181, 184, 185, 187, 188, 190, 191, 192, 198, 202, 207, 208, 218, 219, 225, 240, 257, 273, 277, 305, 306, 307, 308, 310, 311, 312, 313, 327, 340, 345, 346, 351, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 455, 456, 457, 463, 464, 469, 484], "process_executor": 46, "process_mask": [38, 47, 142, 163], "process_mask_": 309, "process_mask_img": [38, 47, 176, 309], "processor": [101, 174], "produc": [6, 15, 25, 49, 62, 65, 73, 81, 103, 109, 116, 158, 160, 163, 181, 185, 192, 268, 303, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 404, 443, 457, 479, 495, 497], "product": [24, 58, 81, 178], "profil": [6, 178, 179, 314, 318], "prognosi": [175, 187], "program": [178, 495], "progress": [38, 45, 106, 109, 138, 163, 327], "prohibit": 178, "project": [0, 9, 10, 16, 25, 29, 39, 45, 61, 77, 113, 114, 116, 118, 132, 141, 143, 145, 153, 157, 158, 163, 164, 178, 180, 186, 197, 200, 202, 205, 208, 227, 228, 229, 247, 252, 279, 286, 291, 312, 313, 345, 379, 380, 381, 395, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430, 436, 438, 440, 444, 445, 446, 447, 448, 449, 452, 469, 475, 479, 495, 497], "projector": [158, 163, 420], "promis": [118, 176], "promot": [172, 173, 188], "prompt": 496, "pronounc": [428, 441, 442, 443, 450], "proper": [3, 13, 36, 134, 158, 163, 178, 496], "properli": [39, 131, 134, 163, 176, 192, 194, 238, 430, 436, 490], "properti": [52, 174, 178, 181, 185, 192, 235, 309, 312, 313, 315, 372, 375, 379, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 455, 465, 471, 473, 475], "proport": [6, 52, 54, 71, 76, 84, 102, 116, 169, 181, 184, 185, 277, 319, 322, 340, 439, 443, 448, 497], "proportion": 181, "proportion_true_discoveries_img": [78, 322], "propos": [69, 103, 179, 180, 188, 199, 205, 385], "protocol": [74, 185, 204, 277], "proton": [219, 272], "prototyp": 179, "prove": [178, 192], "provid": [3, 5, 6, 10, 16, 17, 26, 31, 36, 41, 46, 47, 50, 51, 52, 55, 57, 59, 65, 68, 69, 73, 77, 78, 79, 81, 82, 86, 91, 93, 94, 96, 101, 103, 104, 109, 113, 114, 119, 120, 121, 129, 130, 132, 134, 138, 146, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 167, 168, 170, 171, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 190, 192, 197, 198, 199, 208, 217, 218, 228, 231, 233, 237, 239, 240, 241, 243, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 271, 282, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 318, 327, 328, 329, 333, 334, 339, 340, 342, 345, 351, 360, 365, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 425, 426, 429, 439, 441, 445, 454, 455, 456, 457, 458, 465, 467, 469, 479, 480, 481, 495, 496], "proximal_oper": [130, 163], "pruett": [61, 118, 209, 265], "pruim": [118, 368, 369], "psc": [130, 151, 155, 163, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 469], "pseudo": [79, 109, 312, 313, 319, 342, 344, 391, 455], "pseudoinvers": 318, "psychiatr": 185, "psychiatri": [118, 217, 227], "psychoinformat": 0, "psycholog": 187, "psychologi": 0, "psychophysiolog": 103, "pth": [132, 163], "public": [0, 2, 65, 103, 121, 127, 129, 130, 135, 158, 160, 163, 179, 185, 226, 228], "publicli": 169, "publish": [0, 164, 234, 282, 351, 470], "pubm": [51, 118, 170, 172, 249, 312], "pubu": 61, "pull": [138, 160, 163, 164, 185, 187], "pure": [101, 106, 134, 163, 310, 311], "purpl": 71, "purple_green": 495, "purpos": [16, 17, 65, 70, 72, 73, 81, 104, 113, 120, 178, 184, 192, 197, 200, 204, 207, 208, 225, 229, 234, 268, 393, 467, 495], "push": [164, 178, 179, 188], "put": [7, 41, 56, 57, 73, 101, 125, 163, 179, 183, 239, 305, 306, 307, 308, 312, 313, 327, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 429, 455, 457, 469, 481], "pval": 391, "pvals_anova": [109, 110], "pvals_bonferroni": 106, "pwn": 164, "px": [317, 319, 320], "py": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 128, 129, 151, 156, 157, 158, 160, 163, 164, 171, 179, 188, 192, 497], "pylab": 440, "pymvpa": [3, 4, 40, 218, 271], "pyplot": [5, 6, 12, 13, 16, 19, 25, 26, 27, 32, 34, 36, 37, 40, 41, 43, 44, 45, 46, 47, 51, 52, 54, 58, 60, 61, 64, 65, 66, 67, 68, 69, 71, 77, 80, 81, 82, 86, 93, 96, 98, 102, 103, 104, 109, 110, 111, 114, 166, 191, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 429, 430, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 446, 447, 448, 495], "pyproject": [128, 163, 179, 188, 496], "pyramid": 7, "pytest": [132, 163, 164, 179, 188, 496], "pytest_mpl_gener": 188, "pytest_output": 164, "python": [1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 120, 125, 127, 128, 130, 132, 133, 135, 143, 149, 150, 151, 156, 158, 161, 163, 164, 171, 178, 179, 186, 187, 188, 356, 496, 497], "python2": [148, 149, 150, 151, 163], "python3": [3, 4, 15, 17, 19, 21, 31, 36, 46, 50, 51, 53, 55, 61, 70, 81, 94, 108, 114, 149, 151, 163, 179, 496], "pythoncvers": 188, "pythonvers": 188, "q": [118, 181, 188, 323, 343, 467], "qform_cod": [59, 105], "qi": [310, 311], "qingyang": [118, 227], "qoffset_i": [59, 105], "qoffset_x": [59, 105], "qoffset_z": [59, 105], "quadrat": [26, 368], "qualit": [143, 163], "qualiti": [12, 26, 65, 71, 79, 109, 118, 148, 163, 164, 179, 180, 181, 188, 192, 198, 200, 247, 372, 375, 379, 429, 455], "quality_check": 247, "quantif": [327, 336], "quantifi": 188, "quantil": 181, "quantiti": [178, 315], "quatern_b": [59, 105], "quatern_c": [59, 105], "quatern_d": [59, 105], "quayl": 118, "quebec": 0, "queen": 0, "queri": [107, 112, 282, 284, 304], "question": [3, 7, 54, 67, 68, 102, 168, 187, 188, 192, 200, 268, 496], "quick": [103, 164, 187], "quicker": [168, 179], "quickli": [4, 35, 64, 73, 77, 165, 168, 178, 179, 188], "quickstart": 186, "quinn": [118, 217], "quirion": [0, 145, 163], "quit": [3, 6, 68, 169, 178, 204, 277], "quotient": 200, "qu\u00e9bec": 0, "r": [4, 7, 10, 15, 16, 25, 26, 32, 36, 43, 44, 50, 54, 59, 61, 93, 96, 105, 106, 118, 129, 151, 158, 163, 165, 166, 180, 188, 205, 208, 209, 217, 225, 231, 233, 237, 247, 252, 257, 259, 260, 263, 265, 269, 287, 310, 311, 327, 340, 345, 367, 368, 369, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 428, 430, 434, 436, 437, 439, 441, 442, 443, 467, 469, 473, 474, 495], "r2": [47, 155, 163, 306, 308, 319], "r2_score": [43, 311], "r2hvk": [229, 258], "r_": 44, "r_squar": [65, 71, 77, 158, 163, 319, 327, 340], "ra": 359, "raamana": [0, 118, 147, 163, 171], "rachakonda": [118, 201, 250], "rachlin": [118, 227], "radio": 363, "radiolog": [17, 129, 132, 134, 163, 392, 394, 395, 428, 430, 434, 436, 437, 439, 441, 442, 443, 450], "radiu": [10, 38, 39, 47, 58, 61, 64, 103, 138, 163, 175, 180, 185, 192, 232, 267, 309, 378, 479, 481], "radius_neighbors_graph": 39, "rahim": [0, 54, 102, 118, 122, 126, 136, 145, 151, 163], "rahul": [0, 118, 129, 163, 217], "rai": [118, 233, 260], "raichl": [118, 369], "raimon": [118, 368, 369], "rainei": [118, 236, 262], "rainer": [118, 176, 187, 309], "rais": [5, 96, 102, 127, 128, 129, 130, 138, 145, 147, 148, 151, 158, 160, 163, 190, 239, 240, 241, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 330, 334, 340, 342, 343, 346, 355, 359, 360, 364, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 425, 428, 436, 437, 441, 442, 443, 454, 455, 456, 457, 496], "rakuten": 0, "ram": 164, "ramnani": [118, 198], "ramsei": [118, 165], "ran": 45, "randi": [118, 202, 217, 228, 231, 237, 259, 263], "randn": 47, "random": [3, 7, 43, 44, 47, 54, 58, 66, 101, 102, 106, 114, 118, 143, 155, 163, 168, 169, 170, 171, 178, 179, 181, 187, 205, 252, 312, 313, 317, 319, 320, 327, 336, 342, 391, 454, 455, 457, 459], "random_st": [35, 38, 45, 46, 47, 51, 52, 53, 54, 94, 102, 107, 108, 160, 163, 169, 305, 307, 312, 313, 327, 336, 342, 391, 454, 455], "randomli": [22, 176], "randomst": [114, 312, 313, 327, 336, 342, 391, 454, 455], "rang": [10, 15, 26, 41, 44, 47, 50, 52, 56, 58, 60, 65, 69, 71, 80, 81, 82, 93, 103, 106, 109, 111, 114, 134, 141, 145, 155, 163, 178, 179, 202, 208, 240, 243, 254, 343, 344, 364, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 436, 437, 438, 443, 447, 449, 450, 451, 453, 467], "ranjit": [118, 227], "rank": [132, 163, 176, 317, 318, 319, 320, 364, 391], "raphael": [0, 127, 155, 156, 157, 158, 159, 160, 163], "raphson": 178, "rapid": [103, 118, 221], "rapidli": 178, "raquel": [59, 118, 368, 369], "rare": [135, 163, 178], "rarr": [120, 192], "rasero": [0, 156, 163], "rastko": [59, 118, 368, 369], "rate": [3, 6, 68, 83, 138, 163, 178, 181, 185, 192, 234, 322, 342], "rater": 247, "rather": [16, 26, 57, 68, 96, 103, 121, 141, 143, 145, 147, 151, 156, 158, 163, 165, 178, 190, 191, 225, 240, 249, 282, 284, 312, 313, 342, 373, 376, 466, 481], "ratio": [73, 96, 147, 163, 185, 268, 305, 306, 308, 310, 311, 312, 313, 455, 457], "ratio_n_voxel": [53, 169, 457], "rational": 181, "raut": [118, 232, 267], "ravel": [40, 42, 44, 46, 47, 106, 109, 110], "ravi": [118, 201, 250], "raw": [83, 94, 104, 113, 155, 163, 171, 190, 192, 207, 208, 223, 234, 254, 305, 306, 307, 308, 312, 313, 374, 377, 437, 443, 455, 465], "raw_valu": 43, "rc": [118, 219], "rdbu_r": [13, 47, 114, 134, 163, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430, 433, 438, 440, 443, 447, 449, 450, 451, 453], "rdpu": 43, "re": [2, 6, 22, 43, 67, 68, 86, 121, 157, 163, 179, 181, 282, 295, 296, 297, 298, 299, 300, 317, 319, 320, 330, 458], "reach": [56, 178, 179, 181, 187, 282, 368], "reaction": 185, "read": [4, 24, 39, 47, 68, 70, 79, 83, 104, 107, 109, 112, 113, 118, 121, 154, 163, 179, 186, 187, 204, 221, 226, 275, 276, 277, 382, 471], "read_csv": [3, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 65, 71, 72, 96, 101, 106, 120, 190], "read_tabl": [6, 67, 68], "readabl": [68, 111, 128, 163], "reader": [68, 187, 498], "readi": [64, 77, 120, 142, 163, 170, 179, 188], "readili": [166, 171, 174, 187, 190, 191, 457], "readm": [154, 163, 207], "real": [43, 171, 176, 178, 181, 190, 192], "real_timeseri": 71, "realign": [113, 221, 280], "realist": [118, 199, 268, 444, 446, 447, 453], "realli": [3, 71, 149, 163, 171, 369], "realm": 96, "reason": [33, 39, 46, 50, 51, 68, 121, 164, 172, 174, 176, 178, 179, 181, 188, 479], "reassign": 454, "reassur": 68, "rebecca": [61, 118, 207, 209, 265, 268], "rebuild": 164, "rec": 330, "recal": [44, 305, 307], "recall_scor": 44, "recall_to_print": 44, "recap": [2, 4], "recapitul": 232, "recarrai": [158, 163], "recast": 192, "receiv": [41, 71, 103, 171, 185, 427], "recent": [10, 142, 145, 146, 148, 158, 163, 170, 188, 473], "recip": 191, "recognit": [0, 3, 30, 32, 48, 52, 100, 115, 116, 118, 128, 163, 174, 176, 177, 186, 187, 202, 251, 271, 307, 309, 350, 352, 355, 357, 358, 371, 377, 390, 391, 419, 437, 440, 443, 448, 497], "recogniz": 179, "recommend": [6, 13, 25, 65, 103, 107, 127, 132, 135, 149, 150, 151, 156, 158, 160, 161, 163, 171, 176, 181, 187, 190, 192, 368, 372, 373, 374, 375, 376, 377, 378, 457, 466, 469, 479, 481, 496], "recomput": [68, 101, 176, 324], "reconstruct": [30, 43, 48, 116, 118, 192, 206, 224, 239, 246, 281, 312, 313, 371, 374, 377, 448, 463, 464, 497], "reconstructed_img": [312, 313], "record": [35, 43, 68, 171, 181, 185], "recov": [47, 61, 144, 163, 165], "recoveri": [118, 187, 312], "recruit": [118, 187], "rectangl": [19, 43, 52, 86], "recurs": [47, 52, 101, 118, 151, 163, 168, 174, 185, 186, 455, 456, 462], "recursive_neighbor_agglomer": [52, 127, 163], "red": [15, 16, 19, 43, 54, 98, 131, 149, 163, 180, 181, 185, 495], "reddi": [0, 118, 125, 136, 138, 141, 145, 146, 147, 148, 151, 155, 163, 171], "redirect": 188, "redownload": 164, "reduc": [17, 26, 31, 35, 36, 47, 52, 68, 81, 89, 96, 103, 118, 132, 147, 148, 151, 155, 163, 173, 177, 178, 179, 185, 192, 202, 228, 241, 307, 308, 312, 313, 368, 369, 372, 375, 379, 444, 446, 447, 451, 453, 454, 455, 456, 460], "reduce_confound": [59, 268], "reduced_confound": 59, "reducedconfounds_regressor": [50, 55, 56, 58, 59, 61], "reduct": [134, 163, 175, 313, 455], "reduction_ratio": 313, "redund": [132, 151, 163, 179], "ree": 234, "rees": [118, 233, 260], "ref": [57, 93, 171, 481], "ref_img": [426, 427], "ref_label": [65, 426, 427], "ref_niimg": [105, 111, 358], "refactor": [128, 129, 130, 132, 142, 156, 158, 160, 163, 164, 188], "refer": [11, 20, 49, 62, 65, 68, 70, 80, 95, 96, 104, 110, 113, 116, 118, 119, 120, 127, 128, 129, 136, 141, 149, 156, 158, 159, 160, 163, 167, 175, 179, 180, 181, 183, 184, 188, 190, 191, 192, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 495, 497, 498], "referenc": 180, "refin": [56, 60, 61, 241], "refit": [41, 102], "reflect": [54, 104, 165, 179, 181, 202, 247, 251, 441, 442], "reformat": [81, 128, 163], "refresh": [138, 163], "reg_i": 334, "reg_nam": 329, "regard": [66, 133, 154, 163, 177, 273, 298, 369], "regardless": [282, 284], "regim": 52, "region": [6, 11, 16, 17, 20, 23, 24, 26, 33, 35, 42, 43, 45, 46, 47, 49, 51, 52, 55, 58, 59, 61, 62, 65, 68, 71, 72, 77, 85, 99, 102, 111, 114, 116, 118, 127, 129, 131, 133, 134, 136, 140, 142, 143, 146, 151, 154, 156, 158, 163, 165, 167, 170, 171, 177, 179, 180, 181, 185, 187, 189, 191, 194, 199, 202, 205, 208, 209, 217, 218, 220, 223, 225, 229, 232, 238, 239, 247, 249, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 267, 268, 271, 283, 309, 312, 313, 350, 352, 355, 357, 358, 362, 364, 369, 371, 372, 373, 375, 376, 378, 379, 380, 381, 404, 405, 422, 423, 424, 425, 428, 430, 434, 440, 441, 442, 443, 445, 446, 448, 449, 465, 481, 484, 490, 495, 497, 498], "region_atlas_": [372, 375], "region_coord": [54, 55, 57, 102, 140, 163, 257], "region_extractor": [158, 163], "region_id": [131, 163], "region_ids_": [135, 163, 372, 375, 379], "region_label": 88, "region_labels_min_s": 88, "region_labels_not_diag": 88, "region_names_": [114, 131, 132, 135, 163, 372, 375, 379], "region_sign": [46, 372, 373, 375, 376, 378, 379, 380, 455, 457, 461, 464], "region_t": 56, "regionextractor": [53, 89, 133, 134, 136, 138, 144, 149, 163, 169, 458, 459], "regions_dict": 10, "regions_extracted_img": [53, 169, 459], "regions_img": [53, 89, 169], "regions_img_": [53, 89, 169, 457], "regions_index": [53, 169], "regions_indic": 10, "regions_indices_network3": 89, "regions_indices_of_map3": [53, 169], "regions_percentile_img": 90, "regions_value_img": 90, "regist": [181, 198, 202, 217, 251], "registr": [118, 166, 181, 202, 219, 361, 495], "regress": [28, 32, 33, 35, 42, 43, 47, 58, 59, 64, 70, 73, 104, 113, 118, 120, 129, 138, 148, 154, 155, 156, 160, 163, 166, 171, 175, 176, 177, 179, 180, 181, 185, 188, 198, 202, 247, 305, 306, 307, 308, 310, 311, 313, 314, 319, 320, 327, 340, 368, 369, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 457, 469, 480, 498], "regression_result": 323, "regressionresult": [160, 163, 314, 318, 323, 327, 336, 340], "regressor": [35, 42, 46, 59, 64, 65, 68, 70, 103, 104, 109, 113, 127, 132, 154, 155, 159, 163, 166, 172, 180, 279, 306, 308, 311, 323, 327, 329, 334, 342, 368, 369, 391, 433, 480], "regressormix": [135, 163], "regul": 198, "regular": [3, 33, 41, 42, 47, 59, 68, 96, 105, 118, 121, 154, 163, 164, 171, 172, 175, 177, 178, 185, 186, 187, 191, 240, 241, 243, 307, 308, 310, 311, 355, 496, 498], "regularli": [179, 479], "reho": 247, "reilli": [118, 198], "reiner": [0, 129, 163], "reining": [0, 151, 163], "reintroduc": [118, 345, 469], "reiss": [118, 227], "reject": [181, 185], "rel": [41, 43, 52, 61, 67, 68, 93, 111, 171, 179, 181, 185, 188, 309, 310, 311, 327, 329, 334, 349, 449, 451, 453, 481], "relabel": [103, 458], "relabeled_yeo_atla": 88, "relat": [7, 42, 49, 52, 53, 66, 67, 68, 69, 70, 72, 83, 103, 110, 116, 118, 121, 133, 142, 143, 163, 166, 167, 169, 171, 172, 175, 178, 179, 185, 186, 187, 188, 192, 222, 239, 268, 273, 295, 296, 299, 312, 313, 315, 327, 340, 351, 365, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 455, 457, 470, 496, 498], "relationship": [43, 45, 77, 176, 184, 186, 187, 198, 279, 391], "relative_to": [65, 77, 113], "relax": [129, 163, 219], "relaxometri": 272, "releas": [28, 118, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 179, 198, 202, 205, 219, 258, 259, 272, 273, 279, 291, 295, 296, 297, 298, 299, 300, 345], "relev": [31, 36, 52, 59, 68, 70, 108, 121, 135, 156, 160, 163, 171, 172, 178, 179, 188, 191, 192, 239, 240, 241, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 342, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 391, 454, 455, 456, 457], "reli": [0, 6, 32, 68, 94, 96, 129, 130, 132, 135, 141, 157, 163, 164, 168, 178, 181, 185, 188, 190, 273, 330, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 436, 437, 443, 479, 495], "reliabl": [59, 118, 148, 163, 181, 204, 277, 369], "remain": [3, 4, 6, 10, 18, 22, 32, 34, 35, 38, 39, 42, 43, 45, 47, 56, 59, 72, 91, 103, 104, 106, 109, 130, 154, 163, 176, 179, 479], "remark": 181, "rememb": 495, "remi": [148, 163], "remot": [164, 179, 282, 284], "remov": [6, 32, 34, 35, 37, 43, 44, 45, 79, 88, 91, 107, 108, 109, 110, 118, 120, 125, 127, 129, 130, 131, 132, 134, 135, 138, 142, 143, 144, 146, 148, 149, 151, 153, 154, 156, 158, 163, 172, 177, 178, 188, 189, 191, 202, 228, 239, 264, 285, 288, 289, 327, 343, 345, 349, 351, 362, 364, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 429, 441, 457, 458, 460, 461, 465, 468, 469, 470, 479], "rena": [118, 151, 163, 168, 173, 185, 186, 307, 308, 455, 462], "rena_clust": [52, 127, 163], "rena_labels_img": 52, "rena_parcel": 52, "renam": [127, 130, 134, 144, 148, 163, 188], "render": [3, 38, 52, 55, 56, 61, 65, 77, 79, 129, 131, 149, 163, 164, 179, 405, 427, 436, 444, 446, 447, 449, 451, 452, 453], "renew": [138, 163], "renn": 0, "reorder": [59, 132, 146, 163, 359, 422, 440], "reorgan": [158, 163, 179], "repeat": [61, 68, 69, 171, 181, 234], "repetit": [3, 6, 35, 65, 66, 103, 104, 105, 113, 118, 132, 147, 163, 181, 185, 210, 235, 268, 273, 289, 296, 299, 305, 306, 307, 308, 310, 311, 312, 313, 327, 330, 331, 332, 333, 337, 338, 339, 345, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 429, 455, 457, 469], "replac": [3, 4, 26, 32, 37, 38, 43, 44, 45, 50, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64, 71, 79, 81, 91, 93, 94, 96, 101, 102, 103, 106, 107, 108, 109, 110, 114, 120, 127, 128, 129, 132, 142, 143, 148, 151, 154, 155, 156, 157, 158, 163, 174, 178, 179, 188, 228, 345, 362, 368, 369, 382, 385, 469], "repli": 188, "replic": 202, "repo": [164, 179, 188, 496], "repons": 218, "report": [6, 26, 52, 55, 56, 57, 70, 71, 77, 91, 93, 94, 104, 107, 113, 118, 130, 131, 132, 134, 135, 151, 156, 158, 160, 163, 164, 181, 182, 183, 188, 192, 208, 236, 262, 322, 327, 340, 367, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 391, 444, 446, 447, 457, 484, 486, 496], "report_dim": [327, 340, 467], "report_flm": 113, "report_slm": [104, 113], "report_text": [327, 340, 467], "repositori": [118, 119, 179, 185, 188, 190, 219, 226, 282, 284, 498], "repres": [6, 7, 11, 16, 21, 35, 37, 54, 55, 57, 58, 70, 78, 81, 96, 111, 118, 132, 143, 155, 163, 165, 166, 169, 170, 179, 181, 184, 185, 190, 191, 192, 202, 208, 226, 239, 247, 251, 254, 268, 297, 298, 300, 309, 349, 360, 372, 373, 375, 376, 379, 380, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 423, 430, 436, 439, 460, 467, 477, 479, 495], "represenet": 192, "represent": [3, 7, 17, 33, 34, 35, 38, 40, 55, 56, 59, 61, 65, 77, 79, 86, 96, 101, 103, 108, 118, 120, 151, 163, 167, 170, 176, 185, 189, 191, 218, 232, 267, 271, 305, 306, 307, 308, 309, 310, 311, 312, 313, 345, 346, 349, 350, 351, 352, 353, 354, 355, 357, 359, 360, 361, 362, 363, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 428, 429, 436, 437, 438, 441, 442, 443, 450, 451, 455, 457, 460, 461, 463, 464, 467, 479, 498], "reproduc": [3, 26, 34, 43, 44, 51, 54, 74, 101, 103, 118, 186, 204, 277, 307, 308], "request": [3, 32, 77, 103, 132, 135, 138, 151, 163, 164, 168, 178, 185, 198, 239, 240, 241, 254, 255, 256, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 342, 365, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 391, 405, 420, 421, 450, 454, 455, 456, 457, 480, 481, 495, 496], "request_mock": 179, "requir": [10, 21, 38, 41, 45, 50, 58, 65, 66, 69, 70, 74, 77, 80, 95, 121, 136, 141, 143, 145, 154, 158, 159, 163, 164, 166, 169, 174, 176, 178, 179, 181, 185, 187, 188, 190, 191, 192, 202, 228, 241, 286, 327, 334, 343, 363, 368, 369, 373, 376, 378, 380, 391, 435, 457, 458, 495, 496], "rerun": [3, 38, 52, 55, 56, 61, 65, 77, 79], "resamp": [33, 35, 42, 46, 51, 52, 53, 65, 77], "resampl": [10, 12, 26, 50, 55, 56, 57, 59, 68, 72, 77, 85, 93, 94, 99, 107, 111, 116, 120, 128, 135, 140, 141, 144, 145, 151, 155, 157, 158, 163, 189, 202, 221, 228, 235, 282, 284, 297, 298, 300, 302, 305, 306, 307, 308, 310, 311, 312, 313, 327, 340, 350, 355, 357, 359, 360, 361, 372, 373, 374, 375, 376, 377, 383, 385, 386, 387, 388, 426, 427, 436, 437, 442, 443, 448, 450, 455, 457, 460, 479, 481, 484, 497, 498], "resample_img": [50, 72, 86, 91, 95, 128, 132, 145, 151, 160, 163, 191, 192, 282, 312, 313, 327, 340, 359, 361, 374, 377, 383, 385, 386, 388, 455], "resample_to_img": [68, 77, 95, 111, 132, 140, 163, 191, 192, 360], "resampled_affin": 95, "resampled_atla": 111, "resampled_icbm_mask": 68, "resampled_shap": 95, "resampled_stat_img": 95, "resampling_interpol": [145, 163, 436, 437, 442, 443, 450], "resampling_target": [54, 56, 57, 93, 96, 102, 192, 372, 373, 375, 376, 457, 481], "rescal": [6, 24, 35, 43, 82, 128, 157, 163, 392, 394, 395, 432, 444, 446, 447, 453], "research": [0, 118, 164, 185, 190, 192, 197, 198, 200, 202, 204, 207, 208, 217, 225, 228, 229, 268, 369], "resembl": 170, "reset": 105, "reshap": [41, 43, 44, 47, 53, 69, 79, 109, 130, 144, 163, 169, 239], "resid": [71, 160, 163, 368, 369], "residu": [63, 65, 75, 77, 116, 158, 163, 176, 182, 188, 202, 288, 311, 314, 315, 318, 319, 320, 327, 340, 345, 357, 362, 371, 378, 385, 419, 443, 448, 466, 497, 498], "resili": 68, "resiz": [132, 163, 189, 191, 305, 306, 307, 308, 310, 311, 312, 313, 327, 340, 357, 360, 374, 377, 383, 385, 386, 388, 449, 451, 452, 453, 455, 465], "reslic": [385, 388], "resolut": [20, 22, 77, 78, 95, 107, 111, 118, 120, 127, 128, 144, 156, 157, 163, 169, 189, 199, 202, 207, 208, 211, 212, 213, 214, 215, 229, 231, 249, 251, 254, 258, 259, 260, 268, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 322, 377, 384, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 438, 451, 457], "resolution_mm": [22, 50, 254, 259], "resolv": [142, 152, 163], "reson": [0, 26, 118, 181, 185, 197, 202, 217, 251, 277], "resort": 70, "resourc": [0, 164, 190, 229], "resp": 120, "respect": [3, 41, 65, 105, 132, 151, 160, 163, 164, 165, 179, 181, 185, 188, 192, 265, 267, 305, 306, 307, 308, 310, 311, 327, 329, 330, 334, 340, 342, 349, 360, 361, 367, 457, 459, 467], "respir": 68, "respond": 181, "respons": [6, 35, 63, 66, 70, 71, 72, 74, 75, 81, 82, 113, 116, 158, 163, 171, 180, 181, 185, 187, 188, 218, 235, 271, 278, 327, 329, 331, 332, 333, 334, 337, 339, 431, 432, 443, 480, 497], "response_funct": 69, "rest": [2, 3, 6, 10, 22, 24, 26, 32, 34, 35, 37, 41, 44, 51, 53, 54, 57, 58, 59, 65, 71, 72, 73, 89, 91, 94, 101, 102, 103, 118, 129, 139, 143, 163, 168, 169, 170, 174, 178, 179, 185, 187, 190, 197, 198, 200, 201, 202, 205, 209, 225, 227, 232, 233, 234, 247, 248, 250, 251, 260, 291, 304, 313, 366, 368, 369, 377, 440, 457, 481, 498], "rest_dataset": [51, 53, 56, 169], "restart": [181, 312], "resting_st": 32, "restom": [118, 368, 369, 470], "restor": [128, 163, 164], "restrict": [31, 32, 33, 91, 93, 96, 148, 163, 171, 176, 192, 198, 247, 304], "restructur": 191, "restructuredtext": 179, "restult": 65, "result": [3, 6, 7, 10, 15, 16, 25, 32, 35, 38, 39, 43, 44, 45, 46, 47, 50, 51, 52, 54, 58, 60, 61, 64, 67, 68, 70, 73, 74, 79, 80, 81, 86, 88, 89, 90, 94, 95, 96, 97, 98, 102, 103, 104, 105, 107, 108, 109, 110, 111, 113, 114, 118, 119, 121, 128, 129, 131, 141, 148, 151, 154, 159, 160, 163, 164, 165, 167, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 190, 191, 192, 194, 197, 199, 204, 205, 208, 218, 224, 225, 238, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 277, 282, 284, 290, 293, 294, 301, 305, 306, 309, 316, 317, 319, 320, 321, 327, 334, 336, 340, 342, 345, 355, 356, 357, 360, 367, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 426, 430, 444, 446, 447, 451, 457, 460, 461, 466, 479, 480, 490, 492, 495, 498], "result_img": [87, 105, 190, 356], "result_img_with_head": [105, 356], "result_t": 466, "resultfilt": [121, 282], "results_": [327, 340], "resum": [248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 263, 268, 271, 272, 273, 277, 279, 280, 281, 286, 291, 301], "retain": [73, 158, 163, 171, 172, 181, 239, 240, 241, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 454, 455, 456, 457, 460, 461], "retest": 118, "retinotop": 82, "retriev": [2, 16, 17, 21, 23, 47, 51, 92, 93, 94, 120, 158, 163, 166, 171, 174, 186, 190, 192, 226, 263, 288, 292, 368, 369, 420, 421], "return": [3, 4, 10, 15, 33, 35, 42, 43, 44, 47, 50, 51, 59, 68, 69, 73, 81, 82, 86, 96, 103, 111, 112, 120, 121, 128, 129, 130, 132, 134, 140, 144, 151, 154, 156, 158, 159, 160, 163, 164, 166, 171, 173, 176, 178, 179, 185, 187, 188, 190, 227, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 477, 478, 479, 489, 495], "return_cod": [51, 53], "return_count": 52, "return_dist": 52, "return_estim": 101, "return_index": 37, "return_invers": 54, "return_label_map": 466, "return_label_nam": 423, "return_masked_atla": [130, 163, 460], "return_offset": 349, "return_raw_data": 280, "return_z_scor": [73, 324], "reus": [73, 77], "reusabl": [132, 163], "rev": 188, "reveal": [54, 104, 106, 176], "revers": [94, 144, 151, 163], "review": [151, 163, 164, 176, 188, 198, 220], "revis": 366, "rewamp": [125, 163], "reward": 267, "rework": [127, 138, 144, 151, 157, 163], "rewritten": 121, "rex": [118, 201, 250], "reynold": [26, 118], "rf": [43, 69], "rf_model": 69, "rfe": [47, 101, 174], "rfe_svc": 101, "rfmri": [118, 198], "rgb": [34, 452], "rgb_": 26, "rgba": [445, 452], "rgbcmyk": [53, 169], "rh": 224, "rho": 314, "rich": [132, 163, 171], "richard": [103, 118], "richardson": [118, 207, 268], "rid": [327, 340], "ridg": [33, 43, 47, 114, 172, 173, 177, 305, 306, 307, 308], "ridge_classifi": [32, 172, 305, 307], "ridge_cv": 47, "ridge_regressor": [172, 306, 308], "ridgeclassifi": 39, "ridgeclassifiercv": [128, 163, 305, 306, 307, 308], "ridgecv": [47, 128, 163, 305, 306, 307, 308], "ridgwai": [106, 118, 391], "riemannian": 118, "right": [7, 10, 13, 16, 19, 21, 23, 24, 26, 27, 34, 39, 43, 47, 50, 53, 61, 67, 68, 70, 73, 74, 78, 81, 82, 88, 96, 101, 114, 134, 141, 146, 151, 154, 156, 163, 168, 169, 175, 179, 187, 191, 206, 211, 212, 213, 214, 215, 216, 224, 227, 247, 253, 255, 256, 261, 275, 277, 285, 290, 291, 293, 302, 307, 308, 341, 359, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 426, 427, 428, 430, 431, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 451, 453, 467, 473, 474, 480, 481, 495, 498], "right_coord": 7, "right_data": 7, "right_fac": 7, "right_hemi": 50, "rigid": [66, 202], "rigor": 343, "ring": 468, "rint": 69, "riobueno": [118, 207, 268], "rise": 168, "risk": [6, 118, 187], "rissman": [103, 118], "rivera": [118, 121, 226, 282, 284], "rm": 188, "rng": [7, 46, 66, 114, 179], "roalf": [59, 118, 368, 369], "robert": [0, 118, 127, 128, 156, 163, 178, 201, 202, 219, 250], "roberto": [0, 118, 141, 151, 163, 233, 260], "robinson": [106, 118, 198, 391], "robust": [3, 33, 42, 96, 118, 153, 163, 169, 171, 175, 185, 307, 308, 368, 369, 498], "roc": [41, 171, 185], "roc_auc": [32, 34, 101, 174, 305, 307], "roc_auc_ovr": 41, "roc_auc_scor": 41, "rochel": [118, 227], "rockland": [118, 227], "roelof": [0, 127, 128, 163], "roffman": [118, 231, 237, 259, 263], "roger": [118, 201, 211, 212, 213, 214, 215, 250, 290], "rohan": [0, 134, 163], "roi": [10, 11, 18, 22, 27, 30, 35, 48, 59, 61, 85, 88, 90, 93, 99, 102, 111, 116, 118, 121, 129, 143, 151, 154, 163, 171, 187, 189, 205, 209, 230, 231, 232, 253, 259, 265, 266, 267, 271, 305, 350, 352, 355, 357, 358, 362, 363, 371, 375, 377, 405, 434, 436, 442, 443, 445, 446, 448, 495, 497, 498], "roi_img": [71, 442], "roi_map": [10, 23, 24, 130, 163, 405, 445, 446], "roi_siz": 47, "rois_aal": 247, "rois_cc200": 247, "rois_cc400": 247, "rois_dosenbach160": 247, "rois_ez": 247, "rois_ho": 247, "rois_tt": 247, "rokem": [0, 136, 148, 163], "role": [6, 158, 163], "romuald": [148, 163], "ronald": [0, 122, 163], "rooij": [118, 368, 369], "room": 440, "roorke": 0, "root": [52, 178, 188, 197, 239, 255, 256, 318, 368, 454, 455, 456], "rosa": [118, 202, 251], "rosen": [118, 206, 253], "rosenblatt": [78, 118, 322], "rot_i": 59, "rot_x": 59, "rot_z": 59, "rotat": [34, 66, 86, 96, 192, 330, 368], "rotation_matrix": 86, "rothberg": [0, 145, 148, 163], "roti": 104, "rotx": 104, "rotz": 104, "rough": [240, 305, 306, 307, 308, 310, 311, 312, 313, 327, 340, 346, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 455, 456, 457], "roughli": [43, 172, 179, 181, 202], "round": [52, 444, 447], "rout": [239, 240, 241, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 454, 455, 456, 457], "routin": [68, 91, 190, 280, 495], "row": [3, 6, 41, 43, 59, 65, 68, 74, 101, 103, 121, 155, 163, 185, 282, 284, 317, 318, 319, 320, 327, 340, 341, 342, 402, 404, 407, 421, 428, 434, 437, 438, 440, 441, 442, 443, 454, 466, 479, 481], "row_numb": 103, "ro\u00dfmanith": [0, 130, 163], "rprojector": [15, 396, 420], "rrid": [0, 35, 64, 70, 73, 104, 113, 480], "rsn": [2, 22, 89, 143, 163, 201, 233, 250, 260], "rsn10": [233, 260], "rsn20": [233, 260], "rsn28": [22, 201, 250], "rsn70": [233, 260], "rsn_indic": [201, 250], "rsn_name": 201, "rsquared_statmap": [65, 77, 367], "rst": [127, 163, 164, 179, 188], "rt": 234, "rtol": 349, "ru": [118, 231, 259], "ruben": [59, 118, 368, 369], "rudimentari": 32, "ruf012": [133, 163], "ruff": [132, 163, 179, 188], "rugg": 118, "rule": [126, 163, 171, 172, 179, 198, 305, 306, 307, 308], "run": [1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 74, 75, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 116, 120, 130, 132, 133, 134, 138, 142, 156, 158, 160, 163, 164, 165, 166, 168, 171, 172, 175, 176, 177, 178, 179, 180, 183, 187, 188, 190, 191, 192, 202, 210, 218, 224, 235, 241, 243, 270, 271, 277, 281, 288, 289, 312, 313, 324, 327, 330, 343, 345, 346, 357, 360, 369, 374, 377, 386, 388, 391, 428, 431, 432, 435, 437, 443, 448, 454, 465, 466, 469, 480, 481, 495, 496, 497, 498], "run_face_mask": 106, "run_glm": [35, 156, 160, 163], "run_house_mask": 106, "run_img": [64, 70, 104, 113, 327], "run_label": [3, 31, 32, 34, 35, 101, 171], "run_mask": 106, "run_seri": 382, "run_target": 96, "runnabl": 179, "runner": [2, 3, 4, 6, 7, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 87, 88, 89, 90, 91, 93, 94, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 481], "runtim": [46, 160, 163, 179, 305, 306, 308, 310, 311], "runtimeerror": [5, 102], "runtimewarn": [61, 72, 73, 79, 81, 114], "ruparel": [59, 118, 368, 369], "russel": [59, 103, 118, 121, 171, 187, 223, 226, 227, 282, 284, 319, 320, 368, 369], "rv": 0, "rx": 66, "ry": 66, "ryan": [0, 118, 151, 163, 232, 267], "rz": 66, "r\u00e9mi": [0, 128, 129, 130, 131, 132, 133, 134, 135, 145, 163], "s00062": [26, 118], "s01": [79, 109], "s1": 82, "s102": [118, 219], "s1053": [118, 206, 219, 253], "s151": [118, 206, 253], "s2": 82, "s3": 65, "s_calcarin": 481, "s_central": 481, "s_cingul": 481, "s_circular_insula_": 481, "s_circular_insula_inf": 481, "s_circular_insula_sup": 481, "s_collat_transv_": 481, "s_collat_transv_post": 481, "s_front_inf": 481, "s_front_middl": 481, "s_front_sup": 481, "s_interm_prim": 481, "s_intrapariet_and_p_tran": 481, "s_oc": 481, "s_oc_middle_and_lunatu": 481, "s_oc_sup_and_transvers": 481, "s_occipital_": 481, "s_orbit": 481, "s_orbital_later": 481, "s_orbital_m": 481, "s_parieto_occipit": 481, "s_pericallos": 481, "s_postcentr": 481, "s_precentr": 481, "s_suborbit": 481, "s_subpariet": 481, "s_temporal_inf": 481, "s_temporal_sup": 481, "s_temporal_transvers": 481, "sa": [221, 252], "sabb": [118, 269, 287], "sabuncu": [118, 231, 237, 259, 263], "sachin": [0, 160, 163], "saclai": [0, 179], "sadaghiani": [51, 118, 170, 312], "sadato": [43, 44, 118, 224, 281], "sadek": [118, 201, 250], "sadil": [0, 129, 132, 134, 163], "safe": [73, 105, 143, 163], "sage": [0, 160, 163], "sagit": 363, "sagitt": [15, 96, 134, 163, 400, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 428, 430, 434, 436, 437, 439, 441, 442, 443, 467], "sai": [6, 7, 67, 71, 101, 105, 121, 179, 181, 188, 317], "said": [52, 181], "sake": [24, 39, 68, 81, 109], "salat": [118, 206, 253], "salienc": [54, 267], "salimi": [118, 165, 198], "salma": [0, 122, 125, 136, 138, 145, 148, 149, 163], "salo": [0, 127, 128, 129, 130, 155, 158, 159, 160, 163], "salt": 71, "sam": [0, 128, 163], "samanta": [0, 129, 163], "samantha": [118, 227], "samara": [118, 169, 178, 240, 243, 457], "same": [2, 3, 6, 13, 15, 16, 22, 24, 26, 36, 39, 41, 43, 44, 50, 52, 53, 58, 61, 66, 68, 70, 71, 72, 73, 74, 86, 88, 90, 96, 101, 103, 104, 106, 113, 114, 121, 129, 136, 143, 148, 154, 155, 156, 157, 158, 163, 164, 165, 166, 169, 170, 171, 172, 176, 178, 179, 181, 183, 184, 185, 188, 190, 191, 192, 194, 210, 219, 235, 238, 239, 240, 241, 243, 255, 256, 264, 265, 267, 272, 273, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 305, 306, 307, 308, 310, 311, 312, 313, 327, 329, 330, 334, 340, 342, 345, 346, 347, 356, 358, 360, 365, 368, 369, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 387, 389, 397, 398, 399, 400, 401, 410, 411, 414, 415, 416, 417, 422, 428, 430, 434, 436, 437, 440, 441, 442, 443, 451, 454, 455, 457, 458, 463, 464, 466, 467, 469, 490], "sami": [0, 160, 163], "sampl": [3, 9, 29, 33, 36, 38, 43, 52, 61, 66, 68, 70, 72, 76, 77, 79, 80, 83, 84, 86, 96, 104, 109, 111, 113, 116, 118, 120, 132, 134, 154, 156, 157, 163, 164, 166, 171, 176, 178, 180, 181, 184, 187, 192, 197, 202, 208, 220, 227, 239, 240, 241, 243, 268, 277, 295, 296, 297, 298, 299, 300, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 328, 329, 331, 332, 333, 334, 337, 338, 339, 340, 342, 345, 349, 350, 356, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 390, 391, 418, 429, 432, 436, 438, 447, 448, 454, 455, 456, 457, 468, 469, 470, 479, 493, 497], "sample_horizont": 82, "sample_mask": [52, 55, 56, 59, 61, 68, 127, 129, 132, 133, 134, 156, 158, 160, 163, 327, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 457, 469], "sample_point": 25, "sample_vert": 82, "sample_weight": [305, 306, 307, 308, 310, 311], "sampling_r": 468, "san": 0, "sang": 118, "saniti": 192, "sanz": [0, 151, 163], "sarah": [118, 201, 250], "sarang": 118, "saroja": [118, 227], "sass": [0, 158, 163], "sassenhagen": [0, 145, 163], "satisfi": [178, 188], "sato": [43, 44, 118, 224, 281], "satrajit": [118, 121, 226, 282, 284], "satterthwait": [59, 118, 368, 369], "save": [3, 6, 10, 15, 22, 24, 31, 35, 44, 45, 46, 51, 52, 53, 54, 64, 68, 70, 73, 74, 88, 93, 94, 96, 101, 102, 103, 104, 107, 111, 112, 113, 121, 129, 131, 132, 134, 149, 158, 163, 164, 169, 178, 190, 191, 192, 221, 282, 284, 310, 311, 320, 327, 340, 367, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 457, 465, 467, 471, 472, 473, 474, 476, 498], "save_as_html": [35, 64, 70, 73, 77, 93, 94, 104, 113, 192, 449, 450, 451, 452, 453, 465, 467, 495], "save_glm_to_bid": [65, 70, 77, 127, 131, 134, 160, 163], "savefig": [10, 44, 58, 64, 70, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 430, 434, 436, 437, 439, 441, 442, 443, 495], "savio": [0, 122, 163], "saw": 15, "sax": [118, 207, 268], "sayal": [0, 132, 163], "scalabl": [118, 173, 307, 308], "scalar": [104, 176, 192, 314, 315, 317, 318, 319, 320, 362, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 430, 439], "scalarformatt": 52, "scale": [6, 16, 41, 44, 52, 57, 64, 66, 69, 71, 72, 74, 96, 118, 121, 141, 148, 158, 163, 172, 176, 192, 202, 204, 224, 226, 251, 277, 282, 284, 297, 298, 300, 310, 311, 314, 317, 318, 319, 320, 322, 327, 335, 342, 343, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 436, 437, 443, 454, 455, 456, 466, 467, 469, 479, 481, 498], "scale007": [202, 251], "scale012": [202, 251], "scale020": [202, 251], "scale036": [202, 251], "scale064": [202, 251], "scale122": [202, 251], "scale197": [202, 251], "scale325": [202, 251], "scale444": [202, 251], "scale_": 16, "scale_loc": [393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419], "scale_s": [16, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419], "scale_unit": [16, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419], "scalebar": [16, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 495], "scaling_axi": [103, 158, 163, 327], "scan": [6, 35, 38, 58, 61, 66, 67, 68, 69, 72, 96, 103, 118, 156, 163, 168, 176, 181, 185, 190, 200, 202, 217, 221, 234, 277, 312, 313, 327, 329, 334, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 429, 455, 457, 460, 461, 463, 469], "scanner": [68, 105, 181, 185, 368], "scap": 65, "scatter": [25, 96, 160, 163, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430, 439], "scatter3d": 405, "scenario": [68, 180, 181, 192], "schaefer": [118, 194, 238, 259], "schaefer2018_400parcels_7networks_order_fslmni152_1mm": 481, "schaefer2018_localglob": [231, 259], "schaefer_2018": 481, "schedul": 164, "schema": [134, 163], "schemat": [395, 430, 436, 439], "scheme": [9, 29, 31, 35, 38, 39, 41, 101, 116, 134, 154, 163, 165, 171, 172, 174, 178, 241, 305, 306, 307, 308, 391, 447, 479, 497], "schizophrenia": [118, 143, 163, 185, 217], "schlachter": [118, 227], "schlaggar": [61, 118, 202, 209, 230, 232, 265, 266, 267, 368, 369], "school": [0, 228], "schouten": [3, 33, 34, 40, 101, 118, 218, 271], "schre": [118, 217], "schwartz": [118, 122, 163, 171, 173, 204, 277, 307, 308], "schwarz": [118, 121, 226, 282, 284], "scienc": [0, 3, 33, 34, 40, 47, 61, 101, 118, 165, 169, 176, 177, 187, 197, 198, 202, 208, 209, 218, 227, 233, 239, 240, 254, 260, 265, 268, 271, 309, 369, 457, 498], "scientif": [118, 155, 158, 163, 179, 187, 197, 204, 220, 229, 258, 269, 277, 287, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 434, 436, 437, 438, 442, 443, 444, 446, 447], "scientififc": 187, "scikit": [3, 36, 52, 96, 100, 106, 108, 115, 116, 119, 125, 127, 130, 132, 134, 135, 136, 141, 143, 144, 145, 148, 151, 156, 158, 163, 164, 165, 168, 171, 172, 173, 175, 176, 178, 179, 186, 187, 188, 239, 240, 241, 271, 305, 306, 307, 308, 309, 312, 313, 352, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 443, 454, 455, 456, 457, 496, 497, 498], "scilifelab": 0, "scipi": [24, 47, 65, 69, 78, 81, 96, 104, 107, 112, 125, 127, 130, 135, 141, 145, 146, 148, 151, 156, 158, 160, 163, 178, 191, 273, 296, 299, 354, 364, 383, 384, 385, 386, 387, 388, 440, 468], "scissor": [32, 34, 35, 41, 190], "scl": 44, "scl_inter": [59, 105], "scl_scope": 105, "scl_slope": [59, 105], "score": [26, 32, 34, 39, 41, 44, 45, 47, 51, 54, 72, 82, 101, 102, 106, 107, 109, 110, 112, 114, 131, 134, 135, 154, 155, 163, 171, 172, 174, 175, 177, 187, 228, 241, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 344, 364, 368, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 429, 436, 437, 438, 442, 443, 444, 446, 447, 455, 457, 469], "score_ch": 34, "score_func": 114, "score_img": 39, "score_map_img": 43, "score_mean": [32, 34], "score_orig_data": 391, "scoreatpercentil": [90, 107, 364], "scorer": [305, 306, 307, 308], "scorer_": [305, 306, 307, 308], "scores_": [47, 176, 309], "scores_img": 38, "scores_img_": [38, 309], "scores_nilearn": 41, "scores_sklearn": 41, "scores_std": [54, 102], "scorr_2level": [205, 252], "scorr_mean": [205, 252], "scott": [103, 118, 232, 267], "scr_001362": [0, 35, 64, 70, 73, 104, 113, 480], "scrambl": [72, 96, 180, 235], "scrambledpix": [32, 34, 35, 41, 96, 190], "scratch": [120, 164], "screen": [33, 35, 42, 46, 118, 177, 221, 310, 311], "screening_percentil": [3, 31, 32, 35, 36, 41, 45, 46, 114, 171, 305, 306, 307, 308, 310, 311], "screening_percentile_": [305, 306, 307, 308, 310, 311], "screening_percentile_rang": 36, "script": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 157, 163, 164, 173, 179, 190, 191, 192, 205, 495, 496], "scroll": 107, "scrollabl": [131, 163], "scrub": [68, 127, 132, 156, 158, 163, 166, 202, 327, 330, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 457, 469], "sd": [317, 319, 320, 321], "sdata": [118, 229, 258, 269, 287], "sdist": 188, "se": 365, "search": [39, 91, 128, 163, 179, 188, 241, 305, 306, 307, 308, 365], "search_light": [39, 309], "searchlight": [30, 47, 48, 116, 118, 132, 135, 142, 145, 148, 154, 163, 171, 175, 185, 186, 187, 271, 293, 294, 350, 352, 355, 357, 358, 371, 377, 437, 443, 447, 448, 475, 497, 498], "searchlightifittedsearchlight": 38, "seattl": 0, "sebastian": 118, "sec": [54, 268], "second": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 118, 129, 132, 163, 168, 169, 177, 178, 179, 180, 181, 182, 183, 185, 192, 234, 235, 274, 276, 277, 282, 284, 289, 293, 294, 305, 306, 307, 308, 310, 311, 312, 313, 322, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 345, 350, 356, 364, 367, 368, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 427, 429, 432, 435, 436, 437, 443, 444, 445, 446, 447, 448, 453, 455, 457, 465, 466, 467, 468, 469, 475, 492, 497, 498], "second_level": [77, 78, 79, 80, 81, 82, 83, 104, 113, 133, 160, 163, 184, 467], "second_level_contrast": [77, 79, 81, 340, 342, 467], "second_level_glm": 113, "second_level_input": [78, 81, 82, 104, 113, 158, 160, 163, 340, 342, 367, 467], "second_level_input_": 340, "second_level_model": [77, 78, 81, 83, 104], "second_level_model_pair": 82, "second_level_model_unpair": 82, "second_level_stat_typ": 340, "second_roi_data": 96, "second_roi_img": 96, "secondari": 179, "secondlevelmodel": [77, 78, 79, 81, 82, 83, 104, 113, 130, 132, 133, 134, 135, 158, 163, 184, 327, 342, 367, 467], "secondlevelmodelifittedsecond": [77, 79], "secret": 164, "section": [2, 3, 4, 15, 26, 42, 50, 51, 52, 57, 59, 71, 93, 96, 101, 103, 118, 119, 120, 128, 143, 148, 158, 163, 164, 165, 166, 168, 169, 171, 172, 174, 176, 179, 181, 184, 188, 189, 192, 194, 228, 282, 286, 372, 373, 375, 376, 392, 422, 428, 430, 434, 436, 437, 439, 441, 442, 443, 454, 465, 481, 486, 487, 495], "secur": 164, "securitylab": 164, "see": [0, 3, 6, 7, 9, 10, 13, 14, 15, 16, 17, 21, 22, 23, 24, 26, 28, 30, 32, 33, 36, 38, 41, 42, 43, 44, 45, 46, 49, 51, 52, 53, 54, 55, 57, 59, 61, 63, 72, 73, 74, 76, 77, 82, 85, 88, 91, 93, 98, 102, 103, 106, 107, 110, 111, 112, 114, 116, 118, 120, 121, 123, 129, 132, 136, 142, 148, 149, 151, 155, 156, 158, 160, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 183, 185, 188, 190, 192, 194, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 317, 319, 320, 323, 327, 329, 331, 332, 333, 334, 337, 338, 339, 340, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 366, 367, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 428, 429, 435, 436, 437, 438, 441, 442, 443, 450, 451, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 467, 468, 469, 479, 481, 486, 487, 495, 496], "seed": [7, 9, 29, 49, 51, 62, 103, 116, 132, 148, 160, 163, 180, 189, 261, 268, 293, 294, 301, 307, 308, 327, 334, 336, 371, 377, 378, 379, 404, 443, 446, 447, 448, 449, 452, 457, 459, 471, 473, 474, 475, 481, 495, 497, 498], "seed_based_glm": [64, 480], "seed_mask": [58, 64, 103, 180], "seed_time_seri": [58, 64, 180], "seed_timeseri": 24, "seed_to_voxel_correl": 58, "seed_to_voxel_correlations_fisher_z": 58, "seed_to_voxel_correlations_fisher_z_img": 58, "seed_to_voxel_correlations_img": 58, "seed_vertic": 24, "seeds_": 378, "seek": [6, 79, 109, 170, 441], "seem": [68, 77, 101, 178], "seemingli": 171, "seen": [0, 3, 15, 44, 52, 120, 164, 166, 168, 172, 174, 176, 181, 187, 188, 194, 238, 239, 240, 454, 455, 490, 495], "segal": [118, 201, 250], "segment": [59, 118, 169, 185, 202, 206, 217, 219, 225, 228, 257, 263, 272, 368, 457, 459, 479], "segment_half_width": 25, "segreg": [118, 210], "seidman": [118, 206, 217, 253], "seismic": 114, "seismic_r": 433, "seitzman": [118, 151, 163, 267], "select": [3, 6, 15, 16, 20, 21, 24, 31, 34, 35, 36, 37, 44, 45, 58, 59, 68, 78, 91, 96, 103, 109, 113, 118, 119, 129, 141, 142, 143, 145, 153, 154, 156, 158, 163, 164, 166, 169, 172, 173, 174, 175, 176, 177, 178, 191, 192, 202, 224, 240, 241, 251, 268, 269, 279, 282, 284, 286, 304, 305, 306, 307, 308, 310, 311, 312, 313, 340, 342, 352, 364, 368, 369, 380, 436, 438, 441, 443, 444, 446, 447, 454, 455, 457, 479, 495, 498], "select_from_index": 65, "selected_volum": 2, "selectkbest": [37, 44, 114, 143, 163], "selector": 41, "selectpercentil": [41, 101, 143, 163], "self": [50, 51, 55, 81, 96, 164, 179, 239, 240, 241, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 327, 340, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 454, 455, 456, 457], "semant": [118, 156, 158, 163, 176], "semi": [178, 217], "semilogx": 52, "send": [179, 454, 456], "sender": 179, "sens": [108, 114, 171, 187, 305, 306, 307, 308, 317, 319, 320, 395, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418], "sensibl": [36, 171, 174, 240, 243], "sensit": [6, 43, 51, 59, 118, 181, 185, 345, 369, 391, 469], "sensori": 181, "sensorimotor": 61, "sent": [433, 440], "sentenc": [67, 68, 70, 74, 83, 104, 118, 210, 221, 277], "sentence_listen": [67, 68, 70, 222, 480], "sentence_read": [67, 68, 70, 222, 480], "seop": [0, 158, 163], "sep": [31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 65, 71, 72, 74, 96, 106, 190, 392, 394, 395], "separ": [3, 7, 36, 41, 50, 51, 53, 64, 68, 70, 73, 85, 90, 96, 99, 103, 104, 111, 113, 116, 141, 158, 160, 163, 164, 169, 170, 172, 176, 179, 181, 185, 188, 190, 191, 198, 246, 263, 357, 368, 392, 394, 395, 422, 440, 442, 448, 457, 458, 459, 497], "sepideh": [51, 118, 170, 312], "septemb": [118, 129, 135, 142, 157, 163, 169, 457], "sepulcr": [118, 202, 231, 237, 259, 263], "sequenc": [41, 61, 64, 68, 70, 81, 129, 163, 171, 180, 185, 190, 192, 277, 305, 306, 307, 308, 317, 319, 320, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430, 444, 446, 447, 449, 467, 468, 479], "sequenti": [6, 26, 134, 163, 178, 190, 441], "sequentialbackend": [35, 37, 42, 53, 56, 60, 61, 101], "sereno": [118, 206, 211, 212, 213, 214, 215, 290], "seri": [6, 35, 49, 50, 54, 59, 63, 68, 75, 94, 96, 97, 100, 114, 115, 116, 118, 120, 127, 130, 132, 138, 155, 159, 163, 165, 167, 169, 171, 176, 181, 182, 189, 190, 191, 202, 228, 233, 239, 248, 251, 274, 287, 288, 291, 303, 314, 327, 330, 340, 342, 345, 346, 355, 357, 358, 361, 362, 368, 371, 372, 373, 374, 375, 376, 377, 378, 382, 385, 404, 419, 429, 432, 443, 448, 457, 459, 460, 461, 466, 470, 481, 484, 486, 497, 498], "serial": [131, 163, 178, 221], "seriou": 188, "serr": [74, 118, 204, 277], "serv": [155, 163, 179, 188, 208, 254, 268], "server": [107, 164, 179, 282, 284], "servic": 179, "servicesatlas": 219, "session": [31, 72, 120, 156, 158, 163, 171, 183, 187, 218, 313, 330, 345, 365, 496], "session_error": [59, 105], "session_target": [3, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 96, 101, 106, 120, 190, 218, 271], "set": [3, 6, 15, 16, 26, 30, 31, 32, 33, 35, 38, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 56, 58, 59, 61, 64, 65, 67, 68, 71, 77, 81, 82, 83, 91, 96, 98, 101, 102, 103, 104, 105, 113, 116, 118, 121, 127, 128, 129, 130, 132, 134, 141, 145, 151, 154, 155, 157, 158, 160, 163, 164, 165, 166, 169, 171, 173, 175, 178, 180, 181, 182, 183, 184, 185, 186, 188, 190, 192, 199, 202, 224, 232, 234, 239, 240, 241, 263, 267, 271, 277, 282, 284, 305, 306, 307, 308, 309, 310, 311, 312, 313, 317, 319, 320, 326, 327, 329, 330, 334, 340, 341, 342, 343, 344, 345, 349, 352, 357, 359, 360, 361, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 427, 428, 429, 430, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 450, 451, 453, 454, 455, 456, 457, 459, 462, 467, 469, 479, 481, 495, 497, 498], "set_axis_bgcolor": [143, 163], "set_axis_off": 13, "set_axisbelow": [54, 102], "set_config": [192, 239, 240, 241, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 454, 455, 456, 457], "set_fit_request": [240, 241, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 455, 457], "set_index": 71, "set_inverse_transform_request": [239, 312, 313, 372, 373, 375, 376, 378, 379, 380, 381, 454, 455, 456, 457], "set_label_coord": 52, "set_machine_nam": 164, "set_major_formatt": [51, 52], "set_param": [239, 240, 241, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 454, 455, 456, 457], "set_score_request": [310, 311, 312, 313, 455], "set_size_inch": [43, 71, 114], "set_tick": 41, "set_ticklabel": 41, "set_titl": [64, 66, 71, 80, 81, 82, 93, 103, 109], "set_transform_request": [239, 309, 312, 313, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 455, 457], "set_xlabel": [33, 41, 46, 71], "set_xtick": 41, "set_ylabel": [33, 41, 46, 71, 77, 80], "set_ylim": 52, "set_ytick": 41, "setup": [64, 128, 159, 163, 184, 247, 248, 249, 250, 251, 252, 253, 257, 260, 261, 263, 271, 272, 280, 281, 286, 291, 301, 496], "setuptool": [128, 163], "sever": [6, 26, 31, 33, 36, 41, 52, 54, 64, 65, 68, 73, 88, 96, 102, 105, 107, 111, 114, 120, 128, 132, 134, 135, 142, 148, 163, 164, 165, 173, 175, 176, 178, 179, 181, 183, 185, 188, 190, 191, 192, 205, 220, 232, 241, 327, 345, 356, 373, 386, 388, 389, 441, 455, 466, 469, 481, 498], "sex": [77, 80, 118, 184, 200, 217, 247, 279, 291, 305, 306, 307, 308, 310, 311, 480], "sex_clust": 77, "sex_design": 77, "sex_stat": 77, "sf": 112, "sform": [3, 160, 163], "sform_cod": [59, 105], "sfvnmac": [145, 148, 163], "sh": 188, "shade": [23, 444, 446, 447, 453], "shah": [0, 158, 163], "shalit": [118, 208, 254], "shall": 68, "shallow": [473, 474], "shape": [2, 3, 4, 6, 21, 26, 27, 41, 43, 44, 50, 53, 54, 56, 57, 58, 59, 61, 64, 67, 68, 69, 70, 72, 73, 86, 93, 95, 96, 101, 103, 106, 107, 109, 110, 111, 112, 114, 120, 133, 134, 156, 157, 163, 166, 168, 169, 171, 174, 180, 181, 185, 187, 189, 192, 228, 239, 240, 241, 243, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 280, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 323, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 345, 346, 347, 350, 351, 352, 356, 357, 360, 361, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 424, 430, 431, 439, 444, 446, 447, 449, 452, 453, 454, 455, 456, 457, 460, 461, 462, 463, 464, 467, 469, 470, 473, 475], "shaquanna": [118, 227], "sharad": [118, 227], "share": [104, 118, 121, 154, 163, 165, 170, 179, 190, 197, 198, 204, 205, 208, 226, 243, 252, 255, 256, 277, 282, 284], "shared_arrai": 111, "shared_memori": 111, "sharedmemori": 111, "sharex": 52, "sharp": [444, 446, 447, 495], "sharpen": 468, "shawn": [118, 236, 262], "shehzad": 118, "shell": [190, 304], "shevchenko": [0, 132, 163], "shift": [68, 154, 160, 163, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 469], "shinji": [118, 172], "shinohara": [59, 118, 368, 369], "ship": [4, 11, 13, 22, 96, 148, 163, 185, 194, 238, 490, 495], "shm": 111, "shmelkov": [0, 122, 163], "shoe": [32, 34, 35, 36, 41, 190], "short": [46, 68, 100, 103, 115, 116, 121, 132, 163, 178, 179, 185, 231, 239, 261, 282, 283, 284, 285, 293, 294, 301, 305, 364, 379, 381, 440, 444, 448, 475, 497], "shorten": [129, 160, 163], "shorter": [3, 68, 178, 368], "shortlog": [122, 123, 125, 126, 136, 138, 141, 163], "should": [4, 6, 15, 16, 17, 26, 37, 38, 43, 44, 45, 50, 52, 54, 55, 56, 57, 58, 59, 61, 64, 67, 68, 69, 70, 71, 72, 73, 81, 90, 91, 93, 94, 96, 101, 102, 103, 106, 107, 108, 109, 110, 111, 120, 121, 134, 135, 144, 145, 155, 158, 159, 163, 164, 169, 170, 171, 172, 174, 178, 179, 181, 187, 188, 192, 194, 199, 234, 238, 239, 240, 241, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 324, 327, 329, 330, 334, 335, 340, 341, 343, 344, 345, 355, 356, 358, 361, 363, 364, 366, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 391, 392, 405, 425, 428, 430, 434, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 451, 453, 454, 455, 456, 457, 458, 459, 463, 465, 466, 467, 469, 481, 490, 493, 495, 496], "shouldn": [103, 188], "shout": [148, 163], "show": [2, 3, 4, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 116, 120, 130, 132, 143, 149, 154, 156, 158, 163, 164, 165, 166, 169, 171, 172, 174, 176, 179, 181, 183, 184, 191, 192, 218, 235, 271, 283, 302, 314, 327, 340, 402, 404, 405, 407, 409, 411, 413, 415, 417, 419, 426, 445, 449, 452, 457, 467, 481, 495, 497], "show_lr": 450, "showcas": [54, 63, 76, 78, 102, 116, 168, 173, 179], "shown": [16, 22, 26, 41, 43, 57, 68, 71, 96, 121, 156, 163, 165, 170, 171, 180, 181, 260, 369, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430, 438, 439, 442, 449, 451, 453, 481], "shrunk": 239, "shuffl": [38, 39, 51, 53, 307, 308], "sici": [118, 211, 212, 213, 214, 215, 236, 262, 290], "side": [6, 53, 56, 66, 68, 96, 106, 127, 134, 155, 163, 164, 176, 188, 282, 315, 383, 386, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 427, 429, 438, 466, 467], "sidti": [118, 227], "siemen": 234, "sig": 109, "sigma": [314, 317, 318, 319, 320], "sigman": [118, 210], "sign": [10, 15, 24, 45, 106, 107, 128, 163, 176, 190, 198, 310, 344, 364, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430, 436, 441, 449, 451, 453], "signal": [3, 6, 30, 33, 42, 46, 47, 48, 49, 51, 52, 53, 55, 58, 60, 62, 64, 65, 68, 69, 71, 72, 73, 77, 80, 85, 88, 96, 99, 103, 112, 116, 118, 126, 127, 128, 129, 130, 133, 147, 149, 151, 155, 156, 160, 163, 165, 167, 168, 169, 170, 171, 173, 176, 178, 181, 185, 189, 191, 198, 202, 208, 239, 240, 241, 243, 247, 254, 255, 257, 265, 266, 268, 271, 279, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 330, 340, 342, 345, 351, 352, 357, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 391, 423, 429, 430, 439, 440, 448, 449, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 481, 484, 497, 498], "signal_sc": [35, 64, 70, 71, 73, 103, 113, 158, 163, 327, 330, 480], "signals_to_img_label": [128, 163, 460, 464], "signals_to_img_map": [128, 163, 461, 463], "signatur": [149, 163, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "signed_neg_log_pv": [45, 106], "signed_neg_log_pvals_unmask": [45, 106], "signifi": [185, 305, 306, 307, 308], "signific": [26, 36, 52, 68, 77, 82, 111, 118, 134, 163, 171, 176, 178, 181, 183, 185, 342, 391, 466], "significantli": [45, 68, 148, 163, 176, 178], "sigpro": 118, "sikka": [118, 227], "silenc": [36, 51], "silent": [149, 158, 163, 188], "silva": [118, 201, 250], "simexp": [0, 495], "similar": [10, 24, 25, 32, 51, 58, 81, 96, 98, 103, 104, 120, 136, 148, 149, 151, 158, 163, 165, 168, 170, 172, 173, 176, 184, 185, 192, 307, 308, 369], "similarli": [16, 58, 96, 134, 163, 190], "simon": [0, 59, 118, 148, 153, 163, 231, 233, 259, 260, 368, 369], "simpl": [3, 5, 26, 27, 31, 33, 37, 39, 41, 43, 50, 59, 63, 67, 75, 77, 78, 79, 81, 82, 85, 86, 89, 91, 93, 96, 99, 101, 103, 104, 105, 116, 118, 120, 121, 141, 143, 148, 158, 163, 165, 166, 172, 174, 175, 178, 179, 180, 183, 184, 185, 187, 191, 192, 218, 235, 239, 240, 241, 268, 270, 277, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 318, 324, 327, 340, 352, 357, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 429, 442, 443, 448, 454, 455, 456, 457, 465, 480, 481, 497, 498], "simplefilt": [72, 107], "simpler": 54, "simpleregressionresult": [130, 160, 163, 327, 340], "simplest": [4, 72, 101, 121, 174, 178, 495], "simpli": [3, 26, 68, 69, 70, 73, 91, 104, 105, 107, 109, 111, 113, 121, 181, 188, 192, 202, 251, 344, 356, 362, 437, 441, 442, 443], "simplic": [41, 68, 70, 171], "simplifi": [104, 113, 120, 141, 151, 159, 163, 192, 275, 276], "simuilar": [130, 163], "simul": [30, 48, 49, 62, 66, 69, 103, 116, 132, 163, 167, 176, 241, 309, 390, 440, 448, 497, 498], "simultan": [51, 178, 243], "sin": [0, 25, 86, 132, 163], "sinc": [15, 20, 35, 42, 61, 68, 73, 77, 79, 83, 104, 113, 120, 127, 156, 163, 178, 181, 198, 239, 249, 255, 256, 264, 285, 289, 315, 323, 331, 332, 333, 337, 338, 339, 365, 366, 368, 369, 372, 373, 374, 375, 376, 377, 378, 391, 395, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 426, 429, 457, 460, 461, 465, 495], "singh": [0, 148, 163], "singl": [1, 3, 8, 15, 24, 26, 32, 33, 35, 49, 50, 52, 62, 63, 64, 67, 68, 69, 70, 73, 75, 79, 81, 88, 96, 103, 108, 111, 113, 116, 118, 121, 125, 130, 132, 134, 154, 155, 156, 157, 160, 163, 165, 172, 176, 178, 179, 180, 183, 187, 190, 192, 199, 222, 234, 249, 268, 282, 288, 289, 302, 305, 306, 307, 308, 317, 319, 320, 327, 340, 342, 343, 346, 357, 360, 371, 372, 373, 375, 376, 377, 378, 404, 426, 428, 431, 432, 435, 437, 438, 440, 441, 443, 448, 450, 455, 457, 466, 480, 495, 497], "single_mni_imag": 352, "singleton": 52, "singular": [80, 317, 319, 320, 351, 470], "siong": [39, 118], "site": [3, 4, 15, 17, 19, 21, 31, 36, 46, 50, 51, 53, 55, 61, 70, 81, 94, 108, 114, 197, 200, 228, 247, 248, 286], "sitek": [0, 128, 163], "sitter": [0, 129, 163], "situat": [16, 61, 165, 171, 172, 190, 362], "six": [44, 202], "size": [6, 16, 23, 28, 35, 43, 47, 51, 52, 56, 61, 64, 65, 70, 73, 79, 81, 82, 83, 86, 93, 96, 104, 105, 106, 107, 109, 111, 114, 129, 131, 138, 148, 149, 151, 158, 163, 169, 176, 177, 178, 181, 202, 221, 228, 279, 340, 342, 343, 364, 372, 373, 375, 376, 383, 386, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 430, 439, 440, 444, 446, 447, 449, 452, 454, 455, 456, 457, 458, 459, 466, 467, 468, 479, 480, 481], "size_vert": [392, 394, 395], "sizeof_hdr": [59, 105], "sizes_": [454, 456], "sketch": 47, "skim": 282, "skip": [40, 52, 59, 129, 132, 163, 164, 405, 445, 448], "sklearn": [3, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 60, 61, 94, 96, 101, 102, 106, 107, 108, 109, 110, 114, 130, 135, 148, 151, 155, 156, 163, 165, 171, 172, 174, 178, 192, 239, 240, 241, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 270, 271, 272, 274, 278, 282, 284, 288, 289, 290, 291, 293, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 336, 340, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 454, 455, 456, 457], "skull": [91, 272, 383, 384, 385, 386, 387, 388], "skullstrip": [157, 163, 185, 298], "sled": [118, 199], "sleep": 0, "slice": [2, 3, 10, 17, 38, 65, 73, 91, 96, 103, 104, 113, 120, 128, 147, 154, 156, 163, 176, 190, 192, 201, 202, 234, 327, 330, 340, 352, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 437, 467, 498], "slice_cod": [59, 105], "slice_dur": [59, 105], "slice_end": [59, 105], "slice_start": [59, 105], "slice_time_ref": [35, 64, 65, 68, 70, 72, 73, 103, 104, 113, 128, 129, 134, 163, 327, 330, 480], "slicer": [158, 163, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 495], "slight": [160, 163], "slightli": [24, 26, 51, 52, 68, 86, 119, 145, 163, 172, 183, 239, 241, 360, 361, 390], "slovakia": 0, "slow": [6, 38, 47, 68, 177, 178, 179, 192, 202, 495], "slower": [101, 174, 178, 360], "slowest": 178, "slowli": 178, "sluggish": 181, "sm": [118, 198], "small": [3, 6, 13, 19, 26, 32, 52, 54, 61, 67, 88, 102, 106, 107, 118, 137, 139, 140, 163, 168, 169, 171, 176, 178, 179, 180, 187, 188, 305, 306, 308, 309, 310, 311, 315, 345, 441, 442, 446, 455, 458, 469, 479, 495], "small_meta_imag": 121, "smaller": [3, 6, 34, 70, 83, 138, 148, 156, 160, 163, 168, 176, 177, 178, 181, 185, 190, 194, 238, 255, 256, 343, 356, 364, 454, 490], "smallest": 178, "smart": 454, "smith": [2, 22, 85, 96, 99, 106, 116, 118, 165, 185, 194, 198, 260, 279, 342, 352, 371, 376, 391, 425, 441, 443, 448, 457, 490, 497], "smith2009": 22, "smith_2009": [2, 22, 89], "smith_bm10": 22, "smith_bm20": 22, "smith_bm70": 22, "smith_rsn10": 22, "smith_rsn20": 22, "smith_rsn70": 22, "smoller": [118, 231, 237, 259, 263], "smooth": [6, 26, 31, 35, 36, 41, 45, 47, 52, 53, 58, 65, 71, 73, 77, 83, 85, 96, 99, 104, 109, 111, 116, 118, 134, 144, 145, 163, 168, 170, 171, 172, 178, 185, 187, 189, 190, 202, 233, 268, 305, 306, 307, 308, 312, 313, 327, 340, 342, 357, 362, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 391, 434, 444, 446, 447, 448, 454, 455, 457, 459, 480, 497, 498], "smooth_anat_img": 4, "smooth_arrai": 459, "smooth_img": [4, 71, 96, 97, 107, 145, 151, 163, 190, 191, 192], "smooth_x": 47, "smootharomanonaggr_bold": [368, 369], "smoothed_img": [97, 190], "smoothen": 179, "smoother": 68, "smoothing_fwhm": [26, 31, 35, 36, 37, 45, 52, 53, 55, 56, 57, 58, 61, 65, 68, 72, 73, 77, 78, 79, 81, 91, 93, 94, 101, 103, 104, 106, 108, 109, 110, 144, 163, 169, 171, 192, 305, 306, 307, 308, 312, 313, 327, 330, 340, 342, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 455, 457, 459, 480, 481], "snapshot": 64, "snippet": 121, "snr": [47, 185, 345, 469], "snyder": [118, 202, 368, 369], "so": [3, 6, 7, 12, 15, 23, 26, 35, 38, 41, 43, 44, 46, 50, 51, 52, 55, 68, 70, 71, 73, 74, 78, 81, 82, 83, 88, 91, 96, 103, 104, 105, 107, 111, 113, 121, 129, 156, 163, 164, 176, 177, 178, 179, 181, 188, 190, 192, 198, 199, 239, 240, 241, 249, 255, 256, 263, 282, 287, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 330, 340, 342, 365, 366, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 391, 438, 444, 446, 447, 451, 453, 454, 455, 456, 457, 479], "sochat": [118, 121, 226, 282, 284], "social": [118, 207, 268], "socioeconom": 228, "soft": 185, "softwar": [0, 70, 74, 105, 118, 133, 163, 181, 182, 185, 249, 367, 426, 496, 498], "solari": [78, 118, 322], "sole": [68, 121, 178, 239, 240, 241, 312, 313, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 454, 455, 456, 457], "solut": [6, 67, 68, 165, 166, 172, 177, 178, 187, 190, 231, 313], "solv": [33, 42, 178, 179, 187, 188, 313, 391], "solver": [41, 118, 177, 240, 241, 243, 305, 307, 310, 311], "somatomotordors": 267, "somatomotorlater": 267, "some": [0, 3, 6, 7, 10, 11, 13, 15, 16, 26, 32, 43, 44, 46, 50, 51, 52, 59, 68, 69, 70, 72, 82, 86, 88, 101, 105, 107, 108, 111, 114, 120, 121, 129, 133, 135, 141, 148, 154, 157, 158, 160, 163, 164, 171, 172, 174, 176, 178, 179, 181, 184, 187, 188, 190, 191, 192, 194, 231, 237, 238, 239, 240, 241, 247, 253, 255, 256, 282, 305, 306, 307, 308, 309, 310, 311, 312, 313, 317, 327, 340, 343, 345, 367, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 436, 437, 439, 442, 443, 450, 454, 455, 456, 457, 460, 466, 469, 490, 495, 496], "some_high_valu": [45, 46], "someth": 68, "sometim": [61, 66, 68, 82, 121, 125, 129, 163, 164, 171, 179, 185, 188, 314, 318], "somewhat": 68, "son": [118, 319, 320], "song": [0, 158, 163], "soon": [39, 118, 188], "sophi": [0, 128, 163], "sophist": [101, 174], "sorri": 67, "sort": [13, 22, 32, 33, 37, 45, 46, 65, 77, 120, 132, 156, 163, 188, 190, 269, 304, 340, 342, 355, 391], "sought": [178, 185], "sound": [43, 181], "sourav": [0, 148, 163], "sourc": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 118, 164, 165, 166, 170, 178, 179, 188, 229, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 496], "source_affin": 86, "source_img": 361, "sourcery_token": 164, "southern": 0, "sp": 36, "sp1": 44, "sp2": 44, "sp3": 44, "space": [3, 6, 7, 13, 16, 23, 24, 30, 43, 48, 51, 54, 58, 63, 65, 68, 70, 75, 86, 102, 104, 113, 116, 120, 121, 128, 132, 134, 141, 143, 145, 148, 151, 156, 163, 166, 179, 180, 181, 184, 185, 192, 202, 206, 208, 209, 217, 220, 221, 230, 231, 232, 234, 235, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 282, 284, 286, 289, 291, 311, 312, 313, 327, 330, 345, 346, 347, 357, 360, 371, 372, 373, 374, 375, 376, 377, 378, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 424, 428, 429, 430, 434, 435, 436, 437, 439, 441, 442, 443, 448, 449, 450, 452, 454, 456, 457, 469, 479, 497], "space_label": [65, 103, 104, 113, 330], "spacenet": [3, 141, 163, 171, 172, 173, 175, 185, 310, 311, 498], "spacenetclassifi": [135, 163, 177, 305, 306, 311], "spacenetregressor": [42, 46, 135, 163, 177, 310], "span": [56, 72, 181, 428, 441, 442, 443, 450], "spars": [32, 42, 43, 49, 51, 52, 60, 61, 62, 116, 118, 166, 167, 169, 170, 172, 177, 185, 186, 187, 193, 225, 240, 241, 243, 257, 268, 305, 306, 307, 308, 310, 311, 312, 313, 371, 376, 424, 430, 440, 444, 446, 447, 448, 449, 457, 497, 498], "sparser": [72, 96, 170, 310, 311, 457, 459], "sparsifi": [138, 163], "sparsiti": [43, 51, 118, 136, 163, 165, 169, 170, 172, 173, 177, 178, 185, 225, 241, 243, 310, 311, 313, 457], "spatial": [3, 6, 33, 42, 46, 49, 52, 53, 57, 62, 88, 96, 97, 101, 108, 113, 116, 118, 128, 154, 158, 163, 168, 170, 171, 174, 175, 181, 185, 186, 187, 189, 192, 198, 199, 202, 205, 218, 219, 221, 225, 231, 233, 234, 249, 252, 257, 259, 268, 271, 279, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 342, 353, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 441, 443, 448, 455, 457, 459, 481, 497, 498], "spatial_pattern": 225, "spatialimag": [128, 163, 190, 348], "spatiotempor": [103, 118], "speaker": 210, "spec": 164, "special": [121, 128, 135, 151, 163, 179], "specif": [6, 15, 16, 17, 18, 26, 32, 34, 35, 41, 51, 52, 61, 64, 65, 66, 67, 68, 70, 78, 81, 82, 86, 96, 104, 113, 118, 119, 124, 130, 141, 154, 160, 163, 165, 168, 169, 170, 171, 172, 174, 176, 179, 181, 183, 184, 185, 187, 188, 189, 192, 198, 202, 224, 235, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 269, 279, 284, 287, 315, 317, 319, 320, 330, 341, 345, 356, 365, 367, 373, 376, 378, 380, 391, 405, 423, 444, 445, 446, 447, 453, 457, 469, 477, 478, 479, 480, 495, 498], "specifi": [10, 15, 16, 34, 59, 64, 65, 68, 70, 72, 73, 77, 80, 81, 82, 83, 86, 91, 96, 104, 105, 112, 113, 121, 126, 129, 130, 131, 134, 145, 148, 149, 151, 154, 155, 156, 157, 158, 160, 163, 165, 166, 176, 178, 180, 181, 188, 190, 191, 192, 208, 225, 255, 256, 260, 282, 287, 295, 296, 297, 298, 299, 300, 305, 306, 307, 308, 310, 311, 312, 313, 317, 319, 320, 323, 327, 330, 334, 335, 336, 340, 341, 343, 345, 349, 357, 360, 362, 364, 368, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 388, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 425, 428, 429, 434, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 450, 451, 453, 455, 457, 467, 468, 469, 479, 495], "speck": [118, 176], "spectral": [13, 118, 205, 252], "spectrum": 178, "speed": [3, 24, 38, 39, 50, 79, 91, 101, 109, 118, 129, 163, 168, 174, 177, 178, 191, 192, 391, 454, 479], "speedup": 178, "spent": 178, "sphere": [16, 38, 39, 49, 58, 62, 116, 131, 153, 156, 163, 175, 192, 199, 211, 212, 213, 214, 215, 216, 239, 265, 266, 268, 290, 293, 294, 301, 371, 378, 423, 430, 439, 440, 444, 445, 446, 447, 448, 449, 453, 465, 478, 479, 486, 495, 497], "sphere_left": [211, 212, 213, 214, 215, 216, 290], "sphere_right": [211, 212, 213, 214, 215, 216, 290], "spheres_mask": 61, "spheric": [61, 293], "sphinx": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 136, 138, 142, 143, 145, 163, 179], "sphinx_gallery_conf": 179, "sphinx_gallery_dummy_imag": [169, 191], "sphx_glr_auto_examples_00_tutorials_plot_decoding_tutori": 171, "spike": 68, "spine": 13, "spline": [127, 163, 436, 437, 442, 443, 450, 469], "split": [3, 32, 33, 34, 36, 38, 41, 42, 43, 44, 45, 46, 47, 50, 52, 54, 88, 96, 102, 103, 154, 163, 169, 171, 173, 178, 179, 185, 191, 255, 256, 305, 306, 307, 308], "split_index": 44, "split_multi_scal": 44, "splitter": [305, 306], "spm": [6, 26, 38, 43, 44, 64, 68, 69, 72, 81, 118, 133, 159, 160, 163, 175, 180, 182, 185, 190, 194, 199, 249, 288, 327, 329, 334, 337, 338, 339, 356, 498], "spm12": 249, "spm5": 249, "spm8": [45, 77, 228, 249, 286], "spm_auditori": [6, 71, 288], "spm_dispersion_deriv": [132, 163, 327, 329, 334], "spm_hrf": [132, 158, 163, 327, 329, 334], "spm_multimodal_fmri": [72, 180, 289], "spm_time_deriv": [132, 163, 327, 329, 334], "spmt_0001": 107, "spontan": [118, 225, 257], "sportingli": [148, 163], "spot": 68, "spread": [25, 101, 174, 382], "springer": [118, 165, 219, 225, 239, 257], "spuriou": [68, 118, 169, 179, 202, 368, 369, 458], "sqrt": [112, 141, 163, 245, 246, 319, 320], "squar": [35, 44, 46, 52, 64, 68, 70, 73, 103, 106, 109, 113, 118, 166, 172, 177, 178, 180, 188, 202, 239, 311, 314, 317, 318, 319, 327, 340, 351, 367, 368, 373, 376, 380, 391, 426, 454, 455, 456, 470, 480], "squeez": [24, 312, 313, 455], "src_img": [426, 427], "src_label": [65, 426, 427], "sreen": 36, "sriniva": [118, 201, 250], "srow_i": [59, 105], "srow_x": [59, 105], "srow_z": [59, 105], "sse": [314, 318, 319, 320], "ssh": 164, "ssp": 210, "sst": 210, "sstdsp": 210, "sstssp": 210, "sstssp_minus_dstdsp": [73, 480], "st": 0, "stabil": [155, 163, 170, 202, 307, 308, 315], "stabl": [13, 36, 51, 59, 118, 127, 148, 163, 164, 170, 172, 173, 178, 187, 251, 290, 305, 306, 307, 308, 312, 313, 368, 451, 452, 479, 496, 499], "stable_project": [231, 259], "stack": [43, 54, 61, 156, 163, 185, 246], "stage": [103, 118, 179, 187], "stall": 188, "stan": [317, 319, 320], "stand": [16, 47, 151, 163, 185, 191, 495], "standalon": [327, 340, 467], "standard": [3, 6, 10, 11, 12, 23, 26, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64, 65, 68, 70, 71, 73, 74, 77, 91, 93, 94, 96, 101, 102, 104, 108, 109, 110, 111, 113, 114, 118, 120, 128, 129, 148, 151, 155, 157, 158, 163, 166, 169, 171, 172, 176, 179, 180, 181, 185, 190, 191, 192, 206, 211, 212, 213, 214, 215, 239, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 286, 305, 306, 307, 308, 310, 311, 312, 313, 319, 320, 327, 329, 330, 334, 345, 365, 368, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 429, 455, 457, 469, 480, 481, 496], "standard_devi": [151, 163, 372, 375, 379, 460], "standard_glm": 103, "standard_norm": [66, 317, 319, 320], "standardize_confound": [50, 52, 53, 54, 55, 56, 57, 58, 59, 61, 91, 93, 94, 102, 158, 163, 169, 192, 312, 313, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 457, 469, 481], "standardize_sign": [128, 130, 163], "standardscal": [39, 43, 44, 47, 114], "standout": 111, "stanford": [0, 118, 177], "stanisla": [74, 118, 187, 204, 210, 277], "stanlei": [118, 227], "start": [2, 3, 7, 26, 32, 43, 52, 59, 61, 86, 93, 96, 160, 163, 171, 178, 179, 185, 186, 188, 234, 249, 251, 252, 260, 262, 324, 327, 329, 334, 391, 479], "starttim": [103, 104, 113], "stat": [6, 24, 26, 35, 64, 65, 69, 72, 73, 77, 78, 81, 96, 104, 107, 112, 135, 160, 163, 182, 191, 315, 324, 327, 340, 364, 367, 447, 451, 453, 466, 467, 480, 495], "stat_img": [10, 14, 15, 16, 17, 92, 95, 322, 343, 466, 467], "stat_map": [10, 13, 24, 39, 70, 343, 438, 447], "stat_map_img": [10, 436, 443, 450, 451], "stat_map_surf": 24, "stat_maps_pair": 82, "stat_maps_unpair": 82, "stat_threshold": [6, 65, 71, 135, 163, 466], "stat_typ": [6, 70, 71, 113, 130, 131, 163, 315, 323, 327], "state": [0, 2, 24, 32, 34, 51, 52, 53, 54, 57, 59, 68, 89, 91, 94, 102, 103, 118, 129, 143, 154, 156, 163, 165, 166, 168, 169, 170, 172, 177, 181, 185, 187, 188, 197, 198, 200, 201, 202, 205, 209, 225, 227, 232, 233, 247, 248, 250, 251, 291, 305, 306, 307, 308, 309, 312, 313, 327, 336, 342, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 391, 455, 457, 469, 481, 498], "static": [10, 380, 393, 450], "statist": [2, 7, 9, 15, 23, 24, 26, 29, 35, 38, 43, 45, 52, 64, 67, 68, 70, 72, 76, 77, 84, 85, 99, 103, 104, 106, 107, 109, 113, 118, 119, 127, 130, 132, 134, 135, 136, 143, 144, 154, 156, 160, 163, 165, 170, 173, 176, 178, 179, 180, 182, 185, 186, 187, 191, 192, 205, 235, 240, 243, 253, 261, 276, 282, 283, 284, 293, 294, 302, 315, 316, 317, 319, 320, 321, 322, 323, 340, 342, 343, 345, 364, 367, 391, 404, 405, 426, 436, 438, 441, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 457, 459, 466, 467, 469, 475, 479, 480, 491, 496, 497, 498], "statistician": 176, "statmap": [65, 367], "statstic": 83, "statu": [171, 185, 200, 228], "std": [32, 34, 47, 54, 91, 108, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 469], "std_coef_": [305, 306, 307, 308], "std_coef_img_": [305, 306, 307, 308], "std_dvars_threshold": [59, 130, 163, 368, 369], "std_test_scor": 102, "stderr": 44, "steadi": [59, 68, 156, 163, 327, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 457, 469], "steel": [103, 118], "steep": 26, "steinkamp": [0, 148, 153, 163], "step": [3, 12, 13, 21, 35, 37, 39, 41, 45, 47, 50, 52, 53, 58, 61, 64, 65, 67, 68, 70, 73, 81, 82, 91, 96, 101, 104, 113, 120, 127, 132, 146, 154, 160, 163, 164, 165, 168, 169, 170, 171, 173, 174, 176, 178, 179, 185, 188, 189, 190, 191, 200, 207, 228, 241, 248, 273, 296, 299, 307, 308, 312, 313, 327, 330, 342, 369, 371, 374, 377, 383, 384, 385, 386, 387, 388, 455, 469, 498], "stephan": [118, 345, 469], "stephani": [118, 227], "stephen": [106, 118, 165, 178, 185, 198, 217, 227, 233, 260, 279, 342, 391], "stereotax": 202, "stern": [118, 314, 318], "steven": [0, 61, 118, 128, 130, 163, 201, 202, 209, 217, 230, 232, 250, 265, 266, 267, 368, 369], "stick": [68, 181], "still": [16, 52, 68, 81, 93, 105, 111, 121, 129, 158, 163, 176, 178, 183, 188, 192, 282, 495], "stim": 69, "stim_typ": 40, "stimui": 181, "stimul": [6, 74, 171, 234], "stimuli": [30, 32, 34, 35, 41, 48, 68, 82, 101, 116, 165, 166, 168, 169, 171, 181, 187, 190, 192, 207, 218, 271, 281, 347, 364, 371, 374, 377, 419, 443, 448, 481, 497], "stimuli_random_runs_filenam": 43, "stimuli_run": 43, "stimulu": [41, 43, 44, 67, 103, 181], "stimulus_inform": 40, "stimulus_run": 43, "stimulus_shap": 43, "stipul": 101, "stochast": 208, "stoddard": [26, 118], "stop": [46, 56, 100, 115, 116, 118, 121, 177, 240, 243, 282, 284, 350, 355, 356, 358, 436, 443, 448, 454, 497], "stop_go_image_id": 112, "stopsign": 65, "stopsignal_desc": 65, "stopsignal_ev": 65, "stopsignal_spac": 65, "stopsuccess": [65, 480], "stopsuccessminusgo": 65, "stopsuccessminusgo_clust": 65, "stopsuccessminusgo_design": 65, "stopsuccessminusgo_stat": 65, "storag": 192, "store": [3, 7, 28, 31, 47, 52, 53, 54, 55, 57, 71, 72, 96, 104, 111, 113, 121, 164, 169, 171, 176, 179, 233, 255, 256, 292, 317, 319, 320, 358, 382, 391, 427, 471, 472], "store_precis": 239, "stori": [68, 70, 118, 223], "str": [23, 65, 77, 103, 131, 157, 163, 179, 199, 239, 240, 241, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 324, 325, 327, 329, 330, 334, 340, 341, 342, 343, 344, 345, 346, 356, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 463, 465, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479], "straightforward": [73, 178, 315], "strategi": [3, 25, 30, 48, 51, 52, 68, 90, 91, 93, 94, 102, 111, 113, 116, 118, 128, 130, 132, 134, 135, 151, 155, 156, 158, 163, 164, 169, 172, 175, 176, 178, 181, 189, 271, 305, 306, 307, 308, 309, 312, 313, 330, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 387, 429, 440, 441, 448, 455, 460, 469, 479, 481, 497], "stratifi": [156, 163, 171, 305, 307, 309], "stratifiedkfold": [305, 306], "stratifiedshufflesplit": [54, 102], "stream": [3, 34, 120, 186, 192, 218], "strength": [50, 151, 154, 163, 247, 362, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430, 495], "stress": 178, "striat": 54, "strict": [13, 19, 21, 32, 34, 36, 40, 44, 50, 53, 54, 56, 61, 90, 104, 107, 113, 114, 169, 179], "strictli": [255, 256], "string": [4, 16, 31, 35, 46, 50, 51, 58, 74, 79, 81, 90, 103, 104, 113, 120, 131, 134, 145, 146, 158, 160, 163, 164, 179, 188, 190, 199, 201, 221, 249, 275, 276, 286, 292, 304, 317, 319, 320, 325, 327, 329, 334, 340, 342, 344, 345, 355, 356, 364, 365, 367, 372, 373, 374, 375, 376, 377, 379, 380, 381, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 457, 458, 467, 469], "string_beta_seri": 103, "string_connectivity_img": 103, "string_corr": 103, "string_seed_beta_seri": 103, "strive": 3, "stroke": [118, 165, 239], "strong": [66, 68, 91, 178, 179], "stronger": 165, "strongest": 61, "strongli": [171, 179, 185], "struct": [156, 163], "structur": [3, 6, 24, 26, 41, 42, 44, 46, 49, 52, 54, 61, 62, 66, 68, 116, 118, 165, 171, 173, 174, 175, 176, 178, 185, 190, 197, 199, 200, 201, 202, 204, 205, 208, 217, 218, 219, 224, 225, 228, 233, 234, 237, 241, 249, 251, 260, 263, 271, 277, 310, 311, 314, 365, 383, 384, 385, 386, 387, 388, 440, 448, 451, 456, 462, 497, 498], "student": [96, 181, 191, 229, 315, 498], "studi": [0, 2, 6, 33, 35, 43, 45, 59, 68, 77, 100, 102, 115, 116, 118, 121, 167, 172, 174, 175, 177, 178, 181, 186, 190, 199, 202, 209, 218, 219, 224, 228, 235, 251, 282, 284, 295, 309, 350, 355, 356, 358, 362, 368, 369, 371, 377, 436, 443, 448, 497], "stufflebeam": [118, 202], "style": [4, 136, 158, 163, 304], "sub": [6, 22, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 65, 70, 80, 87, 93, 94, 97, 103, 104, 108, 113, 156, 163, 171, 239, 240, 241, 255, 256, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 365, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 454, 455, 456, 457, 467], "sub001": 72, "sub_fold": 365, "sub_id": 247, "sub_label": [103, 128, 163, 330, 365], "subcallos": 93, "subclass": [16, 179, 421], "subcompon": 185, "subcort": [22, 118, 134, 148, 163, 194, 217, 220, 229, 232, 238, 255, 256, 258, 267, 490], "subcortex": [22, 118, 232, 267], "subdivid": [118, 217, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419], "subfold": 188, "subgradi": [118, 178], "subgroup": 185, "subj": 4, "subj1": [4, 190], "subj1_img": 105, "subj2": [3, 17, 19, 27, 31, 32, 34, 36, 37, 38, 96, 106, 120], "subj2_img": 105, "subject": [1, 3, 4, 8, 12, 16, 17, 18, 19, 22, 23, 24, 26, 27, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 49, 50, 51, 52, 53, 55, 57, 59, 60, 61, 62, 63, 64, 67, 68, 70, 73, 75, 77, 79, 80, 82, 87, 93, 96, 97, 102, 103, 104, 105, 106, 108, 109, 110, 111, 114, 116, 118, 120, 121, 127, 128, 129, 130, 132, 139, 141, 142, 151, 154, 163, 166, 167, 168, 169, 171, 178, 180, 181, 183, 184, 187, 189, 190, 191, 193, 196, 198, 199, 201, 202, 204, 207, 217, 221, 222, 223, 225, 227, 228, 233, 234, 239, 240, 241, 243, 247, 248, 249, 251, 257, 268, 271, 276, 277, 279, 280, 286, 288, 289, 290, 291, 301, 304, 312, 313, 327, 330, 340, 341, 343, 346, 357, 360, 365, 368, 369, 371, 372, 373, 374, 376, 377, 378, 386, 388, 404, 424, 428, 430, 431, 432, 435, 437, 440, 443, 448, 455, 466, 480, 481, 495, 497, 498], "subject1": 190, "subject2": 190, "subject_": 190, "subject_01": 190, "subject_03": 190, "subject_data": [6, 26, 71, 72, 180], "subject_effect": 82, "subject_id": [65, 104, 113, 280, 288, 289], "subject_label": [65, 80, 104, 113, 327, 340, 341, 342, 480], "subject_time_seri": 56, "subjects_label": [80, 341], "submit": [185, 188], "submodul": [158, 160, 163, 179], "subobject": [239, 240, 241, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 454, 455, 456, 457], "subpart": [158, 163], "subpeak": [466, 467], "subplot": [12, 13, 25, 26, 32, 40, 41, 43, 44, 46, 47, 52, 54, 60, 66, 67, 68, 69, 71, 77, 80, 81, 82, 96, 98, 103, 104, 109, 114, 127, 163, 435, 444, 445, 446, 447], "subplot_kw": [114, 444, 445, 446, 447], "subplots_adjust": [13, 27, 43, 47, 52, 60, 69, 109, 191], "subsampl": 208, "subsequ": [52, 86, 192, 228, 282, 284, 368, 369], "subset": [38, 47, 96, 113, 172, 176, 179, 202, 304, 317, 330, 352, 368, 473, 474], "substitut": [103, 465], "subthreshold": [26, 118, 134, 163], "subtract": [61, 68, 104, 187, 188, 283], "succ": 112, "succeed": [107, 112], "success": [164, 179, 181, 188, 192, 234], "successfulli": [164, 179], "sufen": [118, 217], "suffer": 369, "suffix": [366, 369], "suggest": [0, 6, 26, 88, 158, 163, 168, 187, 190, 345, 383, 385, 386, 388, 469], "suit": [96, 103, 164, 166, 172, 187, 202, 251], "suitabl": [59, 70, 148, 163, 172, 176, 192, 280, 369], "sulc": [444, 445, 446, 447, 453, 477], "sulc_left": [211, 212, 213, 214, 215, 216, 290, 438, 451], "sulc_right": [211, 212, 213, 214, 215, 216, 290, 438, 451, 495], "sulcal": [10, 23, 24, 39, 70, 114, 118, 206, 211, 212, 213, 214, 215, 216, 253, 290, 294, 438, 444, 446, 447, 451, 453], "sulci": [23, 118, 134, 163, 206, 261], "sulco": [206, 261], "sulcu": 107, "sum": [3, 44, 45, 52, 61, 67, 69, 79, 81, 86, 104, 106, 109, 110, 112, 151, 163, 178, 310, 311, 314, 318, 319, 351, 372, 375, 379, 460, 470], "summar": [57, 61, 93, 171, 179, 319, 373, 375, 376, 378, 466, 481], "summari": [35, 73, 93, 156, 179, 315, 481], "summary_statistics_run_1": 73, "summary_statistics_run_2": 73, "summerlin": [118, 236, 262], "sundermann": [26, 118], "sup": 481, "superimpos": 427, "superior": [59, 93, 177, 359], "supervis": [52, 118, 172, 174, 175, 185, 187], "supplement": [118, 206, 219, 253], "supplementari": [93, 120, 176], "suppli": [61, 65, 309, 310, 311, 334, 368, 372, 375, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430, 460, 469], "support": [0, 4, 10, 16, 26, 31, 34, 35, 36, 37, 41, 47, 101, 109, 120, 125, 127, 128, 130, 132, 133, 134, 135, 143, 144, 145, 148, 149, 150, 151, 155, 156, 158, 159, 160, 161, 163, 164, 171, 172, 174, 176, 179, 181, 185, 186, 188, 305, 306, 307, 308, 310, 311, 315, 364, 367, 368, 372, 375, 444, 446, 447, 463, 479, 496], "supported_loss": 310, "supported_penalti": [310, 311], "suppos": [105, 121, 178, 188, 190, 192, 319, 320], "supposedli": 235, "suppress": [16, 118, 202], "supra": 181, "supracalcarin": 93, "supramar": 481, "supramargin": 93, "suprathreshold": [26, 480], "suptitl": [40, 43, 45, 46, 47, 68, 74, 77, 81, 103, 104, 109], "sur": [0, 179], "suramya": [0, 130, 163], "sure": [16, 24, 70, 96, 116, 127, 130, 131, 132, 163, 164, 176, 179, 188, 481, 496], "surf_data": [438, 444, 446, 447, 451, 453, 477, 479], "surf_img_nki": [24, 114], "surf_map": [7, 10, 23, 114, 444, 447, 453], "surf_mesh": [10, 23, 24, 70, 132, 163, 405, 438, 444, 445, 446, 447, 451, 453, 478, 479, 495], "surf_plot": [129, 134, 143, 163], "surfac": [1, 8, 9, 29, 30, 48, 58, 63, 75, 100, 115, 116, 118, 120, 128, 129, 131, 133, 134, 135, 143, 145, 147, 148, 149, 151, 154, 155, 156, 158, 160, 182, 185, 186, 187, 189, 194, 206, 211, 212, 213, 214, 215, 216, 237, 238, 239, 253, 261, 271, 274, 278, 290, 291, 293, 294, 301, 302, 305, 306, 308, 310, 311, 312, 313, 327, 330, 340, 342, 346, 352, 353, 356, 357, 364, 367, 368, 379, 380, 381, 382, 391, 405, 430, 436, 438, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 465, 484, 486, 489, 492, 496, 497, 498], "surface_imag": [7, 10, 70], "surface_image_data": 7, "surface_image_data_hemi": 7, "surface_image_load": 7, "surface_image_mesh": 7, "surface_image_mesh_hemi": 7, "surface_mesh": 479, "surface_plot": 495, "surfaceimag": [7, 10, 23, 24, 39, 70, 113, 114, 132, 134, 135, 163, 192, 211, 212, 213, 214, 215, 216, 290, 294, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 324, 327, 340, 342, 343, 344, 345, 346, 351, 352, 353, 356, 357, 358, 364, 379, 380, 381, 382, 405, 426, 427, 444, 445, 446, 447, 453, 455, 456, 462, 481], "surfacelabelsmask": [24, 132, 133, 134, 135, 163, 189, 380, 481, 498], "surfacemapsmask": [133, 134, 163, 189, 312, 313, 481, 498], "surfacemask": [114, 132, 133, 163, 189, 305, 306, 307, 308, 312, 313, 324, 327, 340, 342, 380, 426, 427, 455, 456, 481, 498], "surfacemesh": [474, 475], "surfaceview": [451, 453], "surfer": [237, 263], "surpass": 181, "surrog": [38, 106], "surround": [156, 163, 479], "surviv": [53, 155, 163, 315, 457], "sustain": 179, "svc": [3, 31, 32, 33, 34, 35, 36, 37, 41, 120, 151, 163, 171, 172, 174, 305, 307, 309], "svc_coef": 101, "svc_l1": [32, 34, 41, 172, 305, 307], "svc_l2": [32, 41, 172, 305, 307], "svc_ova": 37, "svc_ovo": 37, "svd": [143, 163, 313, 351, 455, 470], "svf8k": 10, "svg": [16, 129, 163, 367, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447], "svm": [30, 36, 37, 41, 45, 47, 48, 54, 102, 116, 120, 143, 163, 173, 175, 177, 185, 192, 271, 305, 352, 443, 448, 450, 497, 498], "svr": [42, 45, 47, 151, 163, 172, 306, 308, 309], "swap": [176, 191, 228, 363], "swap_img_hemispher": 191, "sweden": 0, "swiss": 192, "switch": [130, 143, 150, 163, 179, 188, 436], "switzerland": 0, "sy": [0, 44, 129, 163], "syllab": 234, "sylvain": [0, 145, 148, 151, 163], "sym": [20, 202, 246, 251], "sym_matrix_to_vec": [144, 163, 246], "sym_to_vec": [136, 141, 144, 156, 163], "symbol": [179, 180, 355], "symlink": [287, 303], "symmetr": [20, 50, 81, 144, 163, 178, 202, 219, 245, 246, 251, 255, 256, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430, 438, 444, 447, 449, 450, 451, 453], "symmetri": [176, 178], "symmetric_cbar": [15, 71, 129, 163, 436, 438, 443, 447], "symmetric_cmap": [10, 23, 114, 129, 135, 149, 163, 444, 449, 450, 451, 453, 495], "symmetric_split": [138, 163, 255, 256], "symposium": [51, 118, 170, 312, 313], "symptom": 200, "synchron": 363, "synonym": 181, "synthes": 178, "synthesi": [118, 121, 178, 226, 282, 284], "synthet": [23, 60, 86, 179], "system": [0, 45, 46, 118, 164, 165, 171, 178, 179, 188, 190, 201, 206, 211, 212, 213, 214, 215, 217, 224, 234, 240, 250, 290, 292], "systemat": [103, 118, 138, 163, 202, 277, 368, 369], "s\u00e9gonn": [118, 206, 253], "t": [0, 3, 5, 6, 10, 17, 23, 25, 26, 35, 39, 41, 44, 45, 58, 59, 61, 65, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 81, 82, 85, 92, 94, 95, 96, 99, 102, 103, 105, 106, 107, 108, 109, 111, 112, 113, 116, 118, 121, 130, 132, 134, 154, 163, 164, 165, 176, 177, 178, 179, 181, 182, 184, 185, 187, 188, 190, 191, 201, 204, 217, 231, 233, 236, 237, 250, 259, 260, 262, 263, 269, 277, 282, 283, 284, 287, 310, 311, 315, 317, 318, 319, 320, 321, 323, 327, 340, 342, 364, 367, 368, 369, 385, 391, 438, 441, 443, 448, 459, 467, 470, 479, 495, 497], "t0": [32, 44], "t1": [47, 77, 157, 163, 199, 202, 217, 219, 249, 272, 295, 297, 298, 300, 428, 495], "t1w": 65, "t2": [219, 272, 434, 495], "t2_relax": [219, 272], "t_img": 112, "t_map": [327, 340], "t_map001": 190, "t_r": [6, 12, 26, 35, 52, 54, 55, 56, 57, 58, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 91, 93, 94, 102, 103, 113, 132, 135, 148, 159, 163, 192, 268, 289, 305, 306, 307, 308, 310, 311, 312, 313, 327, 329, 330, 331, 332, 333, 334, 337, 338, 339, 345, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 429, 455, 457, 469, 480, 481], "t_score": 112, "t_scores_original_data": [45, 106], "t_statmap": [65, 77], "t_to_z": 112, "tab": [164, 188, 192], "tab10": 41, "tab20": [10, 445], "tabl": [6, 10, 23, 24, 35, 64, 65, 70, 71, 73, 93, 104, 113, 114, 128, 131, 134, 135, 159, 163, 179, 183, 188, 249, 251, 253, 255, 256, 258, 259, 261, 262, 263, 369, 372, 375, 379, 442, 446, 466, 480], "table_fil": 65, "tabul": 65, "tabular": 65, "tackl": [172, 188], "tag": [32, 34, 121, 135, 163, 164, 179, 188, 365, 366], "tail": [72, 317, 319, 320, 466], "tailor": [52, 70, 168], "take": [3, 4, 6, 10, 25, 31, 35, 43, 45, 46, 52, 53, 65, 67, 68, 69, 72, 74, 77, 79, 81, 96, 98, 101, 103, 105, 107, 113, 120, 128, 133, 135, 145, 148, 151, 157, 163, 164, 165, 166, 168, 171, 174, 176, 178, 179, 180, 181, 190, 192, 232, 239, 273, 282, 295, 296, 297, 298, 299, 300, 305, 306, 307, 308, 309, 313, 327, 329, 334, 342, 356, 372, 375, 390, 391, 395, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 455, 457, 459, 479, 493, 495], "taken": [6, 68, 103, 164, 172, 178, 179, 188, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 330, 340, 342, 361, 372, 373, 375, 376, 378, 457], "takerkart": [0, 151, 163], "tal": [118, 121, 192, 226, 282, 284, 378], "talairach": [118, 145, 163, 184, 194, 238, 247, 262], "tall": 44, "tamer": [0, 130, 163], "tanab": [43, 44, 118, 224, 281], "tangent": [54, 102, 144, 163, 169, 239], "tangent_matric": 54, "tangent_measur": 54, "tar": [3, 4, 40, 143, 163, 188, 210], "target": [3, 31, 35, 43, 86, 91, 96, 101, 103, 128, 148, 163, 171, 172, 176, 178, 179, 185, 188, 189, 202, 224, 271, 281, 305, 306, 307, 308, 309, 310, 311, 312, 313, 342, 360, 361, 371, 377, 384, 387, 391, 454, 456, 457], "target_affin": [52, 55, 56, 86, 91, 94, 191, 192, 305, 306, 307, 308, 310, 311, 312, 313, 327, 330, 340, 357, 360, 374, 377, 383, 385, 386, 388, 455, 481], "target_affine_3x3": 86, "target_affine_4x4": 86, "target_affine_mm_space_offset_chang": 86, "target_img": [361, 384, 387], "target_shap": [52, 55, 56, 86, 91, 94, 191, 192, 305, 306, 307, 308, 310, 311, 312, 313, 327, 330, 340, 357, 360, 374, 377, 383, 385, 386, 388, 455, 481], "target_var": 391, "targett": [137, 163], "tarun": [0, 129, 163], "task": [2, 3, 18, 31, 32, 33, 36, 42, 52, 63, 65, 68, 70, 75, 79, 83, 91, 94, 100, 107, 111, 115, 116, 118, 130, 148, 159, 163, 170, 171, 172, 175, 178, 180, 181, 185, 186, 187, 188, 192, 208, 233, 240, 243, 271, 274, 276, 277, 304, 327, 330, 346, 350, 365, 371, 377, 378, 391, 404, 419, 426, 432, 435, 436, 443, 448, 481, 497], "task001_cope07_succstop_minus_go": 112, "task002_cope007_tstat1": 112, "task002_cope06_succ_stop_vs_go": 112, "task002_cope10_succstop_minus_go": 112, "task003_cope007_tstat1": 112, "task_data": 34, "task_label": [65, 103, 104, 113, 330], "task_mask": [32, 34], "tasknam": 330, "taylor": [0, 26, 118, 127, 128, 129, 130, 155, 158, 159, 160, 163, 177], "tcontrast": [72, 317, 319, 320], "tcontrastresult": [317, 319, 320], "tcorr_2level": [205, 252], "tcorr_mean": [205, 252], "teach": [1, 116, 140, 151, 163, 179, 207], "teal": 71, "team": [46, 50, 51, 179, 187, 188, 225, 257, 496], "technic": [9, 29, 73, 103, 116, 165, 177, 178, 228, 314, 318, 447, 479, 497], "techniqu": [16, 47, 118, 169, 170, 171, 172, 173, 174, 178, 185, 187, 192, 234, 457], "technisch": 0, "technologi": 0, "tel": 0, "tell": [71, 88, 118, 178, 223], "temp_file_lifetim": [130, 163, 465], "temp_lat": 481, "temp_m": 481, "temp_med_and_lingu": 481, "templat": [4, 17, 23, 41, 51, 70, 77, 85, 99, 113, 116, 118, 127, 131, 134, 136, 141, 146, 151, 154, 157, 160, 163, 164, 169, 181, 185, 187, 191, 192, 199, 201, 202, 228, 238, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 302, 305, 306, 307, 308, 312, 313, 355, 360, 361, 369, 374, 377, 384, 387, 428, 441, 442, 443, 448, 450, 455, 465, 490, 497], "template_affin": 95, "template_img": 95, "template_shap": 95, "templateflow": [164, 179, 219, 272, 273, 295, 296, 297, 298, 299, 300], "tempor": [3, 6, 17, 33, 34, 35, 40, 41, 54, 58, 64, 68, 69, 70, 73, 93, 96, 101, 104, 113, 118, 120, 148, 156, 163, 170, 171, 185, 189, 205, 218, 234, 252, 271, 313, 327, 331, 332, 333, 334, 336, 337, 338, 339, 345, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 457, 469, 480], "temporal": 93, "temporal_anat_combin": 368, "temporal_anat_separ": 368, "temporari": 465, "temporarili": 179, "temporooccipit": 93, "temporopariet": 61, "ten": [6, 83, 455], "tend": [81, 103, 173, 178, 190], "tensor": 118, "term": [35, 57, 64, 68, 70, 73, 91, 94, 104, 113, 119, 134, 159, 163, 170, 172, 178, 181, 185, 187, 190, 191, 282, 310, 311, 314, 334, 366, 368, 469, 480, 481], "term_idx": 107, "term_weight": 107, "term_weights_for_compon": 107, "termin": [171, 179, 496], "terminologi": [133, 163, 183], "test": [3, 31, 33, 36, 38, 41, 43, 45, 46, 47, 54, 56, 66, 68, 72, 76, 79, 80, 84, 102, 104, 106, 109, 110, 113, 116, 118, 127, 129, 130, 132, 147, 155, 158, 163, 164, 171, 173, 174, 176, 177, 178, 181, 182, 183, 184, 185, 191, 241, 247, 248, 249, 250, 251, 252, 253, 257, 260, 261, 263, 271, 272, 276, 277, 280, 281, 286, 291, 301, 305, 306, 307, 308, 309, 310, 311, 315, 340, 342, 343, 350, 356, 360, 361, 364, 367, 391, 404, 418, 432, 436, 443, 448, 450, 467, 488, 496, 497], "test_cluster_level_parameters_smok": [127, 163], "test_contrast": 188, "test_data_gen": 188, "test_imag": 179, "test_img_plot": [158, 163], "test_modul": 179, "test_nilearn_standard": [132, 163], "test_scor": 101, "test_sign": [129, 163], "test_siz": [54, 102], "test_someth": 179, "test_surf_plot": 179, "tested_var": [79, 109, 110, 391], "tetrahedron": 7, "tetrel": [0, 151, 163], "teuscher": [118, 201, 250], "teve": [0, 153, 163], "texa": 0, "texliv": 188, "text": [13, 32, 37, 54, 58, 77, 96, 101, 118, 171, 179, 189, 202, 218, 224, 228, 229, 237, 263, 271, 281, 314, 318, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419], "textquoteright": [118, 233, 260], "textur": 479, "tfce": [109, 127, 134, 160, 163, 185, 342, 391], "tgz": [10, 11, 28, 105, 111, 200, 248], "th": 450, "thalam": [118, 217], "thalamu": [199, 232, 267], "than": [3, 4, 6, 16, 26, 33, 34, 37, 38, 41, 42, 43, 44, 45, 46, 50, 51, 52, 54, 55, 56, 57, 58, 59, 61, 64, 68, 70, 71, 73, 77, 79, 81, 83, 88, 90, 91, 93, 94, 96, 101, 102, 103, 106, 107, 108, 109, 110, 111, 118, 119, 120, 121, 130, 135, 138, 141, 142, 143, 144, 145, 147, 151, 156, 158, 163, 165, 168, 170, 171, 172, 173, 174, 176, 178, 179, 181, 183, 185, 188, 190, 191, 192, 194, 202, 225, 238, 255, 256, 282, 284, 307, 308, 312, 313, 327, 336, 342, 343, 344, 351, 356, 364, 365, 368, 369, 372, 373, 374, 376, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 429, 430, 436, 437, 438, 439, 443, 447, 448, 449, 451, 453, 457, 466, 467, 468, 470, 479, 481, 490], "thank": [148, 163, 179, 340, 341, 342], "tharun": [0, 132, 163], "thei": [3, 6, 7, 25, 42, 45, 46, 47, 50, 51, 52, 67, 68, 72, 73, 96, 101, 113, 120, 121, 128, 131, 134, 135, 158, 160, 163, 164, 170, 173, 174, 176, 178, 179, 181, 185, 187, 188, 190, 192, 198, 199, 202, 209, 221, 235, 263, 271, 282, 287, 327, 330, 340, 342, 346, 360, 372, 375, 378, 379, 431, 458, 469, 481, 495], "them": [2, 3, 6, 7, 15, 20, 26, 32, 34, 42, 45, 47, 52, 53, 57, 58, 61, 65, 67, 70, 72, 73, 74, 81, 82, 88, 91, 96, 103, 107, 108, 111, 113, 116, 118, 120, 121, 125, 129, 131, 136, 148, 154, 155, 157, 160, 163, 164, 165, 166, 170, 172, 174, 179, 181, 185, 186, 187, 190, 192, 199, 249, 282, 284, 330, 367, 390, 391, 455, 495], "theme": [127, 160, 163], "themselv": [68, 121, 192], "theodor": [59, 118, 368, 369], "theoret": 176, "theori": [118, 185, 223, 319, 320], "therapanacea": 0, "therefor": [73, 111, 134, 158, 163, 170, 176, 178, 199, 202, 251, 426], "theta": [317, 319, 320], "thithick": [7, 15, 50, 88, 132, 134, 156, 163, 211, 212, 213, 214, 215, 216, 237, 263, 290, 294, 441, 442, 444, 445, 446, 447, 453, 477, 479], "thick_17": [237, 263], "thick_7": [237, 263], "thick_left": [211, 212, 213, 214, 215, 216, 290], "thick_right": [211, 212, 213, 214, 215, 216, 290], "thin": [237, 263], "thin_17": [237, 263], "thin_7": [237, 263], "thing": [2, 3, 7, 41, 59, 68, 128, 163, 168, 177, 178, 179, 188, 192, 317, 345, 469, 495], "think": [26, 118, 179, 181, 192], "third": [16, 68, 83, 169, 183, 336], "thirion": [0, 47, 51, 52, 54, 74, 102, 118, 122, 125, 129, 132, 136, 141, 145, 148, 149, 151, 158, 159, 163, 165, 168, 169, 170, 171, 173, 177, 187, 204, 208, 225, 239, 240, 254, 257, 277, 307, 308, 312, 313, 456, 457, 462], "this_meta": 112, "thiti": [0, 133, 163], "thoma": [0, 106, 118, 121, 134, 151, 154, 157, 158, 163, 165, 172, 185, 187, 198, 201, 226, 231, 237, 250, 259, 263, 282, 284, 342, 368, 369, 391, 426, 470], "thomasyeolab": [231, 237, 259], "thompsen": [118, 227], "thorough": 179, "thoroughli": 179, "thorsten": [118, 176], "those": [7, 13, 24, 26, 53, 65, 68, 73, 82, 91, 113, 132, 158, 163, 170, 172, 174, 178, 179, 181, 188, 198, 233, 234, 282, 367, 372, 375, 429, 446, 451, 457, 460, 463, 464, 473, 474, 479], "though": [103, 108, 164, 171, 318, 444, 446, 447, 468], "thousand": [52, 192, 455], "thr0": [11, 255, 256], "thr25": [11, 59, 93, 166, 255, 256], "thr50": [255, 256], "thread": [38, 164], "three": [6, 15, 20, 25, 34, 43, 52, 66, 67, 68, 77, 91, 96, 111, 118, 149, 157, 163, 178, 179, 185, 188, 190, 199, 207, 232, 268, 360, 362, 402, 404, 407, 421, 428, 430, 434, 435, 436, 437, 439, 441, 442, 443, 467, 479], "threshold": [2, 9, 10, 13, 14, 15, 18, 24, 29, 32, 35, 38, 39, 41, 42, 43, 45, 51, 52, 53, 57, 58, 59, 64, 67, 68, 70, 71, 73, 77, 78, 79, 81, 82, 83, 85, 89, 90, 91, 92, 95, 96, 99, 103, 104, 106, 107, 108, 109, 110, 112, 113, 114, 116, 118, 121, 129, 130, 131, 134, 135, 136, 149, 151, 155, 158, 160, 163, 166, 169, 178, 181, 182, 185, 191, 273, 277, 288, 295, 296, 299, 302, 312, 322, 326, 327, 340, 342, 343, 344, 357, 364, 367, 368, 369, 384, 385, 386, 387, 388, 389, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 425, 428, 430, 436, 437, 438, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 453, 456, 457, 462, 466, 467, 480, 495, 497, 498], "threshold1": 83, "threshold2": 83, "threshold3": 83, "threshold_img": [43, 83, 90, 98, 114, 128, 134, 136, 158, 163, 343, 344], "threshold_percentile_img": 90, "threshold_stats_img": [6, 26, 77, 79, 83, 134, 135, 163, 184, 364], "threshold_value_img": 90, "thresholded_img": 98, "thresholded_map": 343, "thresholded_map1": 83, "thresholded_map2": 83, "thresholded_map3": 83, "thresholded_score_map_img": 43, "thresholding_strategi": [53, 89, 169, 457], "threw": [158, 163], "through": [15, 33, 42, 45, 51, 54, 59, 73, 77, 93, 103, 127, 128, 155, 156, 158, 163, 165, 171, 172, 173, 176, 179, 185, 187, 198, 202, 228, 282, 286, 307, 308, 342, 368, 369, 372, 375, 379, 387, 392, 394, 395, 397, 398, 399, 400, 401, 408, 410, 412, 414, 416, 418, 454, 460, 465, 479, 480], "throughout": 498, "throw": [129, 131, 132, 163, 378], "thrown": [11, 34, 375], "thu": [16, 33, 36, 42, 106, 108, 111, 166, 171, 172, 173, 176, 177, 178, 183, 185, 191, 192, 307, 308, 309, 310, 311, 315, 349, 369, 391], "thual": [0, 127, 128, 156, 158, 160, 163], "thumb": [171, 179], "tianzi": [118, 165, 239], "tibshirani": [118, 165], "tick": [13, 127, 130, 163, 179, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 434, 436, 437, 438, 442, 443, 444, 446, 447, 449, 451, 453], "tick_17": 263, "tick_7": 263, "tick_posit": [32, 34], "ticker": [51, 52], "ticklabel": [151, 163], "tight": [36, 178], "tighter": [144, 163, 178], "tile": [16, 149, 163, 407, 421, 428, 434, 437, 441, 442, 443, 467, 495], "tiledslic": [402, 404, 421], "time": [0, 2, 3, 4, 5, 6, 7, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 56, 59, 60, 63, 65, 66, 67, 69, 70, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 116, 118, 120, 121, 127, 128, 129, 132, 134, 138, 147, 148, 154, 155, 156, 158, 160, 163, 164, 165, 167, 168, 169, 170, 171, 174, 176, 179, 181, 182, 185, 186, 188, 189, 190, 191, 202, 221, 233, 234, 235, 239, 241, 243, 248, 251, 268, 288, 289, 290, 291, 293, 294, 301, 305, 306, 307, 308, 310, 311, 312, 313, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340, 342, 345, 346, 355, 357, 358, 360, 361, 362, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 385, 391, 419, 429, 441, 443, 448, 450, 451, 455, 456, 457, 459, 460, 461, 466, 468, 469, 470, 479, 481, 484, 486, 495, 498], "time_length": [69, 331, 332, 333, 337, 338, 339], "time_seri": [50, 54, 55, 57, 59, 61, 165, 166], "time_series_1": 165, "time_series_2": 165, "time_stamp": 69, "timecours": [180, 368], "timeout": [46, 90, 107, 112, 134, 163, 282, 283, 284, 285], "timepoint": [27, 191, 330, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 457], "timeseri": [24, 28, 51, 53, 61, 91, 108, 142, 155, 163, 165, 169, 198, 200, 208, 254, 279, 345, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 457, 469, 470], "timeseries_each_subject": [53, 169], "timon": 0, "timothi": [61, 118, 198, 230, 231, 259, 266, 368], "ting": [0, 127, 128, 129, 130, 132, 155, 156, 158, 160, 163], "tini": 315, "tinput": 105, "tip": [26, 47, 118, 187], "tissu": [22, 185, 262], "titl": [0, 3, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 28, 31, 32, 33, 34, 37, 38, 39, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 64, 65, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 101, 103, 104, 106, 107, 109, 110, 111, 112, 113, 114, 120, 129, 151, 152, 157, 160, 163, 169, 171, 179, 188, 192, 327, 340, 367, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 428, 429, 430, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 465, 467, 495], "title_font_s": [444, 446, 447], "title_fonts": [449, 451, 452, 453], "tl": 164, "tmap": [18, 81, 130, 163, 204, 275, 277, 495], "tmap_filenam": [2, 90], "tmap_img": 95, "tmi": [47, 118, 177], "tmp": 24, "to_csv": [6, 74], "to_filenam": [3, 4, 6, 7, 31, 51, 52, 58, 73, 88, 96, 111, 191, 473, 474], "to_gifti": [471, 472, 476], "to_latex": 65, "to_list": 102, "to_markdown": 65, "to_numpi": [3, 28, 33, 35, 41, 42, 45, 71, 79, 101, 109], "tobe": [118, 227], "todd": [118, 176, 217, 219], "toffset": [59, 105], "toga": [118, 236, 262], "togeth": [7, 35, 41, 51, 61, 69, 70, 71, 82, 98, 134, 163, 165, 173, 174, 181, 185, 202, 265, 267, 304, 307, 308, 312, 330, 345, 457, 481], "toggl": 349, "toi": [25, 108], "token": 164, "tol": [94, 108, 240, 241, 243, 310, 311], "tol_cv": 241, "toler": [51, 56, 94, 108, 178, 188, 240, 241, 243, 310, 311, 349], "tolil": 39, "tolist": [81, 103], "toll": 165, "tom": [0, 118, 156, 163, 201, 250], "tomassini": [118, 198], "toml": [128, 163, 179, 188, 496], "tommaso": [118, 202], "tommi": [118, 178, 240, 243], "too": [3, 25, 32, 36, 40, 41, 43, 45, 46, 55, 57, 59, 72, 88, 121, 164, 172, 178, 282, 284, 305, 306, 308, 310, 311, 375, 378, 495], "took": [35, 46, 50, 51, 65, 105, 234], "tool": [4, 9, 21, 24, 29, 34, 38, 43, 44, 51, 81, 89, 103, 108, 116, 120, 141, 160, 163, 167, 172, 179, 180, 183, 184, 186, 187, 189, 190, 192, 193, 195, 199, 217, 249, 271, 302, 357, 402, 404, 407, 409, 411, 413, 415, 417, 419, 428, 434, 436, 442, 443, 448, 450, 485, 495, 496, 497], "toolbox": [182, 186, 496, 498], "toolkit": [0, 202], "tootel": [118, 211, 212, 213, 214, 215, 290], "top": [6, 13, 16, 18, 27, 41, 47, 59, 107, 109, 154, 163, 179, 187, 191, 304, 430, 436, 437, 439, 441, 442, 443, 450, 495], "topic": [179, 188], "topologi": 178, "toprul": 65, "tor": [118, 121, 226, 282, 284, 345, 469], "torabi": [0, 128, 129, 130, 132, 163], "toro": [118, 233, 260], "toronto": 0, "total": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 167, 169, 171, 177, 198, 199, 217, 258, 268, 305, 306, 308, 310, 311, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 385, 386, 388, 441, 457, 458, 481, 497, 498], "total_scor": 107, "touch": 349, "tour": 495, "toward": [96, 158, 163, 208, 239, 355, 372, 373, 374, 375, 376, 377, 378, 457, 498], "tox": [3, 4, 15, 17, 19, 21, 31, 36, 46, 50, 51, 53, 55, 61, 70, 81, 94, 108, 114, 130, 163, 164], "tpami": [52, 118, 456, 462], "tpl": 219, "tpr": 185, "tr": [12, 27, 35, 69, 105, 128, 132, 147, 159, 163, 181, 185, 191, 227, 331, 332, 333, 337, 338, 339, 356], "trace": [106, 405], "traceback": 473, "traci": [118, 228], "track": [103, 107, 111, 178, 179, 188], "tracker": 188, "trade": [205, 307, 308], "tradition": 185, "trail": 179, "train": [3, 33, 36, 42, 43, 44, 45, 46, 47, 54, 101, 102, 154, 163, 171, 172, 173, 176, 178, 185, 187, 192, 240, 305, 306, 307, 308, 310, 311, 454, 456, 462], "train_siz": [45, 46], "train_test_split": [45, 46], "trait": 172, "trajectori": 178, "tran": [52, 118, 249, 456, 462], "trans_i": 59, "trans_x": 59, "trans_z": 59, "transact": [47, 118, 177, 199, 208], "transax": 13, "transfer": 187, "transform": [3, 13, 24, 25, 41, 43, 44, 52, 53, 54, 57, 68, 72, 86, 91, 93, 94, 96, 101, 103, 107, 114, 118, 120, 132, 134, 144, 145, 149, 151, 153, 154, 155, 156, 158, 160, 163, 168, 169, 174, 181, 185, 189, 190, 202, 217, 236, 239, 262, 280, 305, 306, 307, 308, 309, 312, 313, 324, 327, 340, 343, 347, 358, 360, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 392, 454, 455, 456, 457, 469, 479, 481, 498], "transform_img": [129, 132, 163, 372, 373, 374], "transform_single_img": [131, 163, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 457], "transform_to_2d": [392, 394, 395], "transient": 192, "translat": [66, 151, 163, 191, 330, 343, 368, 467], "transpar": [9, 16, 24, 29, 72, 116, 129, 134, 151, 163, 192, 277, 288, 296, 299, 302, 327, 343, 357, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 430, 436, 437, 438, 439, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 497], "transparency_data": 26, "transparency_imag": 26, "transparency_rang": [26, 72, 134, 163, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 436, 437, 443], "transpos": [154, 163, 178], "traor": [0, 133, 163], "treat": 121, "treatment": [185, 187], "tree": [168, 231, 259], "trei": [118, 202], "trend": [45, 46, 91, 132, 163, 164, 192], "trended_data": 91, "trendscent": [201, 250], "tresult": 105, "tri": [25, 54, 66, 164, 172, 282, 428, 433, 440, 454], "triag": [158, 163], "trial": [41, 66, 68, 74, 118, 129, 163, 171, 180, 185, 280], "trial_condit": 103, "trial_nam": 103, "trial_numb": 103, "trial_typ": [6, 35, 66, 67, 68, 72, 74, 103, 104, 221, 334, 435], "trial_type_idx": 74, "trial_type_list": 103, "trial_type_seri": 103, "trials_ses1": [235, 289], "trialwise_condit": 103, "triangl": [25, 185, 405, 476, 479], "triangul": [25, 481], "triangular": [185, 239, 245, 246, 433, 440], "triangulari": 93, "tribhuvan": 0, "trick": [19, 187], "tricki": 178, "trigger": [164, 188], "trilinear": 479, "trim": [373, 376, 457, 461], "triplet": [328, 329, 378, 452], "triplett": [118, 269, 287], "trivial": 83, "tronto": 0, "troubleshoot": 179, "true": [2, 3, 4, 6, 7, 10, 11, 14, 15, 16, 17, 19, 22, 23, 24, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64, 65, 66, 68, 70, 71, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 113, 114, 116, 120, 121, 129, 132, 143, 146, 151, 158, 163, 166, 169, 171, 174, 176, 178, 181, 184, 185, 192, 239, 240, 241, 243, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 263, 265, 267, 268, 271, 272, 273, 274, 277, 279, 280, 281, 282, 284, 286, 291, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 322, 327, 330, 340, 342, 343, 344, 345, 346, 349, 351, 355, 357, 359, 360, 361, 364, 365, 366, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 460, 461, 463, 466, 467, 468, 469, 470, 481, 495, 497], "true_divid": 114, "truli": [181, 219], "truncat": [151, 163], "trust": [3, 38, 52, 55, 56, 61, 65, 77, 79, 181], "truth": [44, 47, 60, 171], "try": [3, 4, 5, 22, 38, 42, 43, 52, 55, 56, 59, 61, 65, 67, 68, 70, 77, 79, 91, 101, 102, 107, 111, 121, 133, 135, 160, 163, 165, 166, 171, 172, 177, 178, 179, 181, 188, 192, 207, 367, 496], "ts2": 198, "ts3": 198, "tsuang": [118, 217], "tsv": [6, 50, 55, 56, 58, 59, 61, 63, 65, 75, 77, 104, 113, 116, 129, 163, 179, 180, 207, 234, 235, 249, 251, 253, 255, 256, 258, 259, 261, 262, 263, 268, 288, 289, 327, 330, 334, 340, 342, 367, 368, 369, 372, 375, 379, 432, 435, 448, 497], "tsvfile": 74, "ttest_ind": [96, 191], "tube": 120, "tunabl": 369, "tune": [22, 36, 41, 42, 46, 91, 118, 142, 163, 166, 171, 172, 174, 178, 181, 312, 313, 368, 374, 377, 455, 495], "tupl": [16, 192, 250, 257, 271, 291, 305, 306, 307, 308, 310, 311, 312, 313, 317, 319, 320, 327, 330, 340, 346, 349, 357, 360, 362, 365, 368, 374, 377, 379, 380, 381, 383, 385, 386, 388, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 428, 429, 430, 434, 435, 436, 437, 439, 440, 441, 442, 443, 450, 455, 460, 467, 473, 478], "turn": [13, 50, 68, 86, 166, 168, 178, 192, 383, 384, 385, 386, 387, 388, 441, 442, 443, 450, 467], "turner": [103, 118, 171, 201, 233, 250, 260], "tutori": [6, 7, 8, 31, 68, 101, 138, 148, 163, 171, 179, 183, 186, 187, 192, 218, 271, 305, 352, 357, 434, 442, 448, 450, 497], "tv": [46, 118, 177, 305, 306, 310, 311], "tv_l1": 42, "tvl1": 177, "tweak": [26, 61, 91, 169], "twelv": [118, 207, 268], "twine": 188, "two": [6, 7, 15, 25, 27, 36, 43, 51, 58, 59, 61, 63, 68, 75, 76, 79, 84, 88, 90, 91, 96, 101, 103, 104, 106, 111, 113, 116, 121, 127, 132, 143, 146, 151, 154, 155, 163, 165, 168, 170, 171, 173, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 190, 191, 192, 198, 202, 235, 241, 245, 251, 270, 277, 289, 305, 306, 307, 308, 312, 313, 317, 319, 320, 324, 327, 340, 341, 342, 346, 352, 357, 360, 368, 369, 373, 376, 378, 380, 391, 426, 427, 432, 435, 436, 438, 443, 444, 445, 446, 447, 448, 453, 455, 457, 458, 459, 465, 466, 467, 478, 479, 480, 495, 497], "two_sid": [6, 26, 83, 114, 130, 133, 134, 135, 155, 158, 163, 327, 340, 343, 344, 364, 367, 457, 466, 467], "two_sided_test": [79, 81, 106, 176, 342, 391], "twpyb1pflj6vrlxgh3rohyqanxbdpelw": 232, "tx": 66, "txt": [96, 286], "ty": 66, "tyler": [118, 176], "type": [3, 6, 16, 19, 22, 31, 36, 41, 45, 52, 66, 67, 68, 70, 74, 90, 96, 103, 106, 121, 127, 129, 130, 132, 133, 135, 137, 140, 142, 145, 148, 151, 157, 158, 159, 160, 163, 173, 176, 179, 180, 181, 185, 188, 190, 198, 222, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 279, 309, 315, 323, 327, 340, 342, 345, 349, 350, 352, 354, 355, 357, 358, 362, 363, 364, 365, 366, 367, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 387, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 427, 441, 442, 444, 445, 446, 447, 455, 457, 458, 459, 466, 467, 468, 469], "typeerror": [158, 163, 355, 364], "typic": [6, 7, 74, 80, 81, 103, 113, 168, 170, 172, 176, 179, 181, 183, 185, 190, 191, 192, 197, 292, 307, 308, 317, 366, 367, 378, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 441, 442, 443, 450, 455, 495], "typo": [131, 153, 163], "typograph": [160, 163], "tyszka": [118, 229, 258], "tz": 66, "tziona": [118, 227], "tzourio": [118, 199, 249], "u": [3, 4, 13, 16, 17, 25, 26, 39, 41, 43, 58, 61, 66, 68, 79, 81, 91, 96, 118, 164, 171, 172, 174, 179, 209, 232, 265, 267, 311, 319, 320, 496], "u4": 3, "u5mzi": 203, "u96": 46, "ub": 65, "ubuntu": 178, "uc": 0, "ucc": 229, "uchida": [43, 44, 118, 224, 281], "ucl": [0, 6, 72, 234, 235, 288], "ucla": [269, 287], "ucsd": 232, "uddin": 118, "ugli": 172, "ugurbil": [118, 198], "ui": 164, "uint8": [47, 59, 93, 160, 163, 358], "uk": [0, 2, 6, 22, 72, 217, 220, 233, 234, 235, 260, 288], "ultim": [179, 318, 428, 434, 436, 437, 441, 442, 443], "umask": 51, "unabl": [3, 38, 52, 55, 56, 61, 65, 71, 77, 79, 151, 163], "unavail": [179, 271], "unbalanc": 52, "unbias": [118, 171, 202, 219], "unc": [65, 81, 82, 104], "uncach": 190, "uncertainti": [69, 78, 81, 178, 180, 181, 185], "unchang": [18, 68, 176, 239, 240, 241, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 454, 455, 456, 457], "unclear": 101, "uncom": [10, 17, 23, 39, 55, 57, 61], "uncompress": [65, 143, 147, 163], "unconstrain": [118, 233], "uncontrol": 68, "uncorrect": [6, 65, 78, 81, 82, 83, 104], "under": [41, 106, 134, 135, 160, 163, 171, 172, 176, 177, 178, 179, 180, 181, 185, 188, 198, 202, 226, 228, 234, 305, 306, 307, 308, 309, 312, 313, 349, 360, 361, 366, 374, 377, 384, 387, 391, 455], "underflow": 315, "underlai": [26, 194, 238, 490], "underli": [0, 26, 91, 132, 163, 181, 185, 187, 192, 405, 444, 446, 447, 453], "underneath": [444, 446, 447, 453], "underscor": [130, 163, 179], "undershoot": 68, "understand": [3, 30, 48, 63, 75, 85, 99, 116, 132, 142, 163, 172, 174, 179, 187, 189, 225, 268, 271, 273, 275, 276, 278, 281, 305, 327, 351, 352, 357, 361, 368, 371, 377, 385, 431, 432, 434, 442, 443, 448, 465, 497, 498], "understood": [68, 282], "undirect": [396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 430], "unexpectedli": 73, "unfilt": [160, 163], "unfortun": [174, 178], "uniform": [13, 91, 134, 163], "uniform_averag": 311, "uniformli": [140, 163, 172, 438, 444, 446, 447, 451, 453], "unintention": 188, "uninterrupt": 181, "union": [86, 386, 388, 389], "uniqu": [31, 32, 33, 34, 35, 37, 41, 52, 54, 61, 67, 88, 96, 103, 106, 132, 143, 163, 164, 165, 173, 190, 199, 249, 255, 256, 334, 372, 375, 379, 457, 458, 459], "unique_condit": 37, "unique_run": 35, "unit": [0, 6, 7, 16, 41, 58, 60, 118, 169, 171, 177, 178, 179, 192, 309, 319, 320, 342, 345, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 469], "uniti": [148, 163], "univ": [118, 319, 320], "univari": [31, 35, 36, 41, 64, 70, 73, 100, 104, 113, 115, 116, 118, 173, 175, 177, 271, 276, 277, 305, 306, 307, 308, 310, 311, 350, 352, 357, 371, 377, 391, 419, 436, 443, 448, 480, 484, 497], "univers": [0, 185, 228], "universitair": 0, "universiteit": 0, "universit\u00e4t": 0, "universit\u00e9": [0, 179], "unix": [190, 304], "unknown": [10, 23, 24, 59, 93, 105, 114, 132, 163, 171, 199, 201, 202, 206, 210, 211, 212, 213, 214, 215, 218, 219, 222, 223, 224, 227, 230, 232, 233, 235, 236, 249, 250, 263, 372, 375, 379, 481], "unlabel": 185, "unless": [121, 178, 179, 287, 342, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 436, 437, 438, 443, 469], "unlik": [15, 21, 176, 181, 190, 369], "unlink": 111, "unmask": [34, 47, 119, 128, 143, 146, 163, 189, 191, 312, 313, 371, 374, 377, 498], "unmodifi": 164, "unmodul": [66, 74], "unnecessari": [3, 129, 132, 163, 320], "unoptim": 111, "unpair": [76, 84, 116, 132, 163, 184, 277, 340, 432, 436, 448, 497], "unpaired_design_matrix": 82, "unpen": 178, "unrealist": 178, "unrel": [179, 192], "unrestrict": [197, 200, 204, 207, 208, 225], "unscrub": 202, "unsign": [342, 391], "unstructur": 42, "unsuit": [151, 163], "unsupervis": [108, 185, 312, 313, 454, 456], "unsupport": [135, 163], "unsurprisingli": 82, "unthreshold": [24, 83, 118, 121, 185, 201, 226, 250, 282, 284], "until": [179, 282, 391], "unus": [131, 132, 163, 239, 240, 241, 312, 313, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 454, 455, 456, 457], "unusu": 171, "unwant": [68, 118, 202], "unwarp": 185, "unzip": 188, "up": [0, 3, 6, 10, 23, 24, 35, 38, 50, 86, 88, 91, 96, 101, 107, 114, 118, 127, 129, 130, 132, 134, 135, 148, 149, 151, 156, 158, 161, 163, 164, 168, 174, 175, 177, 178, 180, 181, 182, 185, 188, 192, 202, 234, 249, 251, 253, 255, 256, 258, 259, 261, 262, 263, 287, 314, 341, 372, 375, 379, 391, 429, 442, 446, 454, 479, 498], "updat": [43, 95, 103, 105, 127, 128, 129, 130, 131, 132, 133, 134, 138, 142, 143, 148, 151, 157, 158, 160, 163, 164, 188, 239, 240, 241, 259, 282, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 454, 455, 456, 457], "update_20190916_readm": 259, "update_yeo2011_schaefer2018_labelnam": [231, 259], "upgrad": [37, 38, 43, 44, 45, 50, 54, 55, 56, 57, 58, 59, 61, 64, 71, 91, 93, 94, 96, 101, 102, 103, 106, 107, 108, 109, 110, 120, 127, 132, 143, 145, 151, 156, 158, 161, 163], "upload": [121, 164], "upon": [0, 105, 198, 200, 283, 428, 441, 442, 443, 450, 457, 459, 467], "upper": [15, 43, 178, 317, 319, 320, 385, 388, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 429, 434, 436, 437, 438, 439, 441, 442, 443, 444, 446, 447, 451, 453], "upper_cutoff": [91, 132, 163, 385, 388], "upstream": [179, 188], "urgent": 188, "url": [0, 47, 51, 65, 118, 132, 152, 160, 163, 164, 165, 169, 170, 172, 177, 208, 210, 219, 240, 247, 248, 249, 250, 251, 252, 253, 254, 257, 259, 260, 261, 263, 269, 271, 272, 280, 281, 286, 287, 291, 301, 304, 312, 314, 318, 457], "urls_path": 269, "ursina": [118, 201, 250], "us": [0, 1, 2, 4, 6, 7, 11, 13, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 52, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 91, 92, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 160, 163, 164, 165, 166, 167, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 191, 192, 194, 198, 199, 202, 203, 204, 205, 206, 207, 209, 217, 218, 219, 224, 225, 226, 228, 229, 234, 238, 240, 242, 243, 244, 245, 246, 247, 249, 252, 258, 259, 262, 264, 267, 285, 290, 291, 297, 300, 303, 310, 314, 315, 316, 317, 318, 319, 320, 321, 323, 325, 326, 328, 331, 332, 333, 335, 336, 337, 338, 339, 344, 348, 349, 354, 359, 363, 365, 366, 380, 383, 384, 386, 387, 388, 389, 392, 393, 394, 395, 420, 421, 422, 426, 427, 452, 454, 456, 460, 461, 462, 463, 464, 467, 468, 469, 470, 477, 478, 480, 481, 482, 490, 492, 496, 497, 498], "usa": 0, "usabl": [146, 163, 176, 178, 200, 281, 309], "usag": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 142, 151, 155, 160, 163, 165, 179, 180, 184, 187, 188, 189, 197, 200, 204, 207, 208, 225, 290, 293, 294, 301, 369, 451, 484, 498], "usecas": [101, 168, 172, 174, 179], "useless": 68, "user": [13, 19, 31, 36, 42, 61, 68, 69, 103, 110, 111, 121, 127, 128, 129, 130, 131, 132, 133, 134, 135, 145, 148, 149, 151, 152, 156, 158, 159, 160, 163, 178, 179, 180, 181, 183, 185, 186, 188, 189, 192, 194, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 484, 486, 487, 496], "userguid": 172, "userwarn": [3, 10, 16, 17, 19, 21, 23, 24, 26, 31, 32, 34, 35, 38, 42, 43, 44, 46, 50, 51, 53, 55, 60, 64, 65, 66, 70, 72, 73, 74, 77, 79, 80, 81, 93, 103, 104, 113, 114], "usr": [255, 256], "usual": [3, 32, 35, 51, 79, 81, 96, 158, 163, 164, 170, 172, 173, 174, 179, 181, 185, 187, 188, 191, 199, 249, 307, 308, 314, 385, 439, 455], "utc": [179, 496], "util": [28, 46, 47, 53, 55, 89, 90, 130, 132, 136, 143, 147, 154, 158, 163, 169, 179, 239, 240, 241, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 365, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 454, 455, 456, 457, 484, 489], "u\u011furbil": [118, 198], "v": [3, 25, 26, 30, 34, 35, 37, 40, 41, 48, 54, 67, 68, 78, 81, 82, 91, 100, 101, 115, 116, 118, 121, 128, 130, 163, 171, 172, 176, 178, 179, 186, 188, 199, 200, 210, 217, 218, 219, 226, 232, 236, 262, 267, 271, 275, 277, 282, 284, 285, 302, 305, 307, 309, 311, 350, 352, 355, 357, 358, 368, 371, 377, 391, 419, 437, 440, 443, 448, 450, 470, 497], "v0": [148, 151, 156, 158, 163, 231, 259], "v1": [127, 130, 148, 156, 158, 163], "v2": [151, 156, 163, 164], "v3": [127, 163], "v4": [65, 130, 163], "v_i": [393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 436, 437, 443], "va": 13, "val_scor": 36, "valentina": [118, 198], "valid": [6, 30, 34, 35, 38, 39, 43, 45, 47, 48, 54, 102, 112, 116, 118, 128, 129, 134, 138, 141, 154, 158, 159, 163, 164, 165, 167, 172, 175, 179, 192, 202, 232, 241, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 271, 279, 305, 306, 307, 308, 309, 310, 311, 327, 328, 329, 334, 345, 349, 352, 357, 362, 363, 368, 369, 372, 375, 379, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 453, 460, 466, 477, 478, 479, 497, 498], "valid_method": 455, "validationerror": 179, "valu": [4, 6, 10, 11, 13, 15, 16, 17, 18, 24, 25, 26, 32, 35, 41, 43, 45, 47, 50, 55, 57, 58, 61, 64, 68, 70, 71, 72, 73, 74, 77, 79, 81, 90, 91, 92, 93, 94, 96, 98, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 121, 125, 127, 128, 130, 131, 132, 133, 134, 135, 136, 140, 143, 144, 148, 151, 155, 156, 158, 163, 165, 168, 169, 172, 173, 175, 176, 177, 179, 181, 184, 185, 187, 190, 192, 199, 228, 231, 236, 239, 240, 241, 243, 245, 247, 249, 251, 252, 253, 255, 256, 258, 259, 260, 262, 263, 273, 277, 282, 290, 293, 294, 295, 296, 299, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 323, 327, 328, 330, 336, 340, 342, 343, 344, 345, 346, 349, 351, 356, 360, 361, 362, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 425, 426, 427, 428, 429, 430, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 450, 451, 453, 454, 455, 456, 457, 459, 460, 461, 465, 466, 467, 468, 469, 470, 471, 479, 480, 481, 495], "valuabl": [68, 179], "value_count": [72, 104], "valueerror": [127, 130, 163, 355, 359, 364, 372, 373, 375, 376, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 425, 428, 436, 437, 441, 442, 443, 457, 473, 479], "vamsi": [118, 217], "van": [118, 121, 198, 206, 226, 253, 282, 284, 368, 369], "vanass": [0, 156, 163], "vanessa": [118, 121, 226, 282, 284], "var": 368, "vari": [15, 36, 68, 73, 96, 97, 105, 157, 163, 168, 174, 178, 187, 231, 240, 241, 243, 346], "variabl": [4, 6, 15, 42, 45, 46, 47, 59, 77, 79, 96, 103, 104, 111, 118, 129, 140, 158, 160, 163, 164, 166, 171, 172, 173, 175, 176, 178, 179, 181, 185, 190, 192, 200, 220, 248, 292, 305, 306, 307, 308, 309, 310, 311, 314, 318, 327, 340, 356, 368], "varianc": [6, 35, 41, 43, 45, 51, 58, 59, 60, 61, 68, 71, 82, 151, 154, 155, 163, 171, 176, 178, 185, 192, 239, 243, 305, 306, 307, 308, 312, 313, 315, 317, 319, 320, 323, 324, 327, 336, 340, 345, 351, 367, 368, 369, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 429, 455, 457, 460, 469, 470], "variance_": 312, "variance_img": [73, 324], "variance_statmap": [65, 77, 367], "variance_threshold": 45, "variancethreshold": 45, "variant": [172, 196, 198, 225], "variat": [47, 56, 79, 104, 109, 110, 118, 128, 163, 176, 177, 185, 228, 326, 342, 391], "varieti": [66, 103, 170, 171, 172, 173, 174, 179, 185], "variou": [3, 16, 21, 32, 33, 42, 51, 109, 110, 151, 154, 158, 163, 171, 173, 174, 179, 181, 185, 191, 251, 307, 308, 369, 455, 479], "varoquaux": [0, 47, 51, 52, 54, 59, 102, 118, 121, 122, 123, 125, 126, 136, 138, 141, 145, 148, 149, 150, 151, 153, 163, 165, 166, 168, 169, 170, 171, 173, 177, 187, 208, 225, 226, 239, 240, 254, 257, 282, 284, 307, 308, 312, 313, 456, 457, 462], "vasco": [0, 160, 163], "vastli": 103, "vaudois": 0, "vbm": [171, 185, 187], "vc": 188, "vcov": [317, 319, 320], "vec": 246, "vec_to_sym_matrix": [144, 163], "vector": [31, 34, 35, 36, 37, 41, 43, 47, 54, 73, 86, 101, 102, 120, 144, 163, 171, 172, 174, 185, 239, 305, 306, 307, 308, 314, 317, 318, 319, 320, 323, 325, 439, 479], "vectorize_word": [121, 282, 284], "vega10": 13, "vega20": 13, "vega20b": 13, "vega20c": 13, "vellor": 0, "ventral": [3, 17, 23, 33, 34, 35, 39, 40, 41, 96, 101, 118, 120, 171, 186, 192, 218, 271, 444, 446, 447, 481], "ventralattent": 267, "ventricl": 202, "venv": [179, 496], "verbos": [26, 33, 35, 37, 38, 39, 42, 45, 47, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 64, 65, 77, 91, 93, 94, 101, 102, 103, 106, 109, 148, 163, 169, 192, 240, 241, 243, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 322, 327, 330, 336, 340, 342, 346, 357, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 454, 455, 456, 457, 462, 481], "veri": [4, 13, 32, 33, 34, 37, 38, 42, 43, 45, 47, 52, 57, 68, 77, 78, 79, 81, 88, 96, 107, 120, 151, 163, 165, 166, 168, 171, 172, 173, 174, 177, 178, 179, 181, 185, 188, 192, 305, 306, 307, 308, 310, 311, 373, 376, 378, 422, 441, 446, 468], "verifi": [68, 104, 179, 192], "vern": [118, 206, 217, 253], "verric": 345, "versatil": [174, 186, 496], "version": [10, 20, 21, 23, 35, 37, 38, 43, 44, 45, 50, 51, 54, 55, 56, 57, 58, 59, 61, 64, 70, 71, 72, 73, 91, 93, 94, 96, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 120, 125, 127, 130, 131, 132, 134, 136, 138, 141, 142, 143, 144, 145, 146, 148, 150, 151, 154, 156, 157, 158, 159, 160, 161, 163, 164, 177, 178, 179, 188, 190, 197, 199, 202, 207, 218, 228, 231, 237, 239, 240, 241, 245, 246, 247, 249, 251, 252, 254, 255, 256, 259, 260, 261, 262, 263, 264, 267, 268, 269, 271, 273, 274, 282, 284, 285, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 323, 324, 327, 330, 331, 332, 333, 336, 337, 338, 339, 340, 342, 344, 345, 349, 354, 355, 356, 357, 358, 359, 360, 361, 364, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 384, 387, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 429, 433, 436, 437, 440, 441, 443, 444, 445, 446, 447, 453, 454, 455, 456, 457, 459, 460, 461, 463, 465, 466, 467, 469, 471, 472, 473, 474, 475, 476, 479, 480, 481, 495, 499], "versionad": [179, 188, 375, 376, 377, 378, 457, 481], "versionchang": [179, 188], "versu": [6, 68, 70, 81, 82, 96, 101, 171, 172, 185, 218], "vertex": [7, 10, 25, 134, 163, 185, 261, 379, 380, 381, 382, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 436, 437, 443, 444, 445, 446, 447, 471, 476, 479], "vertic": [7, 10, 23, 24, 39, 44, 68, 70, 74, 82, 113, 129, 143, 163, 165, 185, 277, 305, 306, 307, 308, 310, 311, 312, 313, 327, 340, 346, 351, 379, 381, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 444, 445, 446, 447, 453, 471, 472, 474, 476, 481], "vertical_checkerboard": [67, 68, 70, 222, 480], "vetor": 239, "vfonov": 219, "vhtf6": 277, "vi": 54, "via": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 120, 123, 132, 133, 134, 135, 163, 166, 167, 171, 174, 177, 179, 180, 183, 190, 205, 232, 252, 310, 311, 312, 313, 327, 336, 372, 373, 374, 375, 376, 377, 378, 383, 384, 385, 386, 387, 388, 428, 434, 436, 437, 441, 442, 443, 457, 481], "victoria": [0, 132, 163], "vidaurr": [118, 198], "video": [67, 179, 185], "vienna": 0, "viergev": [118, 165, 239], "view": [0, 6, 14, 15, 17, 26, 35, 39, 45, 55, 57, 61, 64, 65, 68, 70, 73, 86, 98, 104, 106, 113, 114, 128, 129, 131, 132, 134, 145, 154, 156, 160, 163, 171, 176, 178, 187, 188, 192, 235, 305, 306, 307, 308, 312, 313, 360, 374, 377, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 430, 434, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 449, 450, 452, 455, 495, 498], "view_connectom": [23, 55, 57, 61, 148, 149, 151, 156, 163, 450, 452, 495], "view_img": [3, 31, 131, 132, 134, 148, 149, 157, 160, 163, 171, 495], "view_img_on_surf": [10, 148, 149, 151, 156, 163, 449, 450, 452, 453], "view_init": 25, "view_mark": [148, 149, 151, 156, 163, 449, 450, 495], "view_radio": 17, "view_stat_map": [148, 163], "view_surf": [7, 10, 23, 132, 148, 151, 163, 449, 450, 451, 452], "view_typ": [11, 53, 89, 90, 154, 163, 169, 441, 442], "viewabl": [151, 163], "viewer": [31, 148, 163, 171, 191, 450, 495], "viginia": 0, "vijayan": [0, 129, 163], "vinc": [26, 118, 201, 250], "vincent": [0, 47, 52, 118, 122, 163, 177, 187, 201, 204, 225, 227, 250, 257, 277, 369], "vine": [118, 319, 320], "virgil": [0, 122, 163], "virginia": 0, "viridi": [156, 163], "virtual": [179, 188, 496], "visibl": [26, 54, 81, 157, 163, 170, 360, 438, 444, 446, 447, 451, 453, 495], "vision": 234, "visual": [1, 6, 8, 15, 16, 26, 29, 30, 34, 35, 41, 48, 50, 51, 53, 59, 68, 70, 72, 73, 74, 81, 82, 85, 88, 89, 90, 91, 93, 94, 96, 99, 104, 108, 109, 110, 113, 118, 119, 128, 129, 143, 145, 148, 154, 156, 163, 165, 166, 167, 175, 179, 180, 184, 187, 188, 189, 191, 200, 204, 218, 221, 224, 237, 248, 250, 251, 257, 260, 267, 271, 272, 276, 277, 279, 281, 302, 346, 347, 350, 352, 353, 355, 357, 358, 360, 364, 371, 374, 377, 382, 385, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 429, 432, 434, 435, 440, 441, 442, 443, 446, 447, 448, 481, 497, 498], "visual_comput": [67, 68, 70, 222, 480], "visual_left_hand_button_press": [67, 68, 70, 222, 480], "visual_right_hand_button_press": [67, 68, 70, 222, 480], "vittorio": [118, 202], "vivo": [118, 229, 258], "vladimir": [118, 202, 219], "vmax": [15, 26, 43, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 73, 78, 81, 82, 86, 89, 92, 95, 103, 104, 106, 109, 112, 114, 125, 127, 134, 135, 151, 163, 169, 428, 429, 434, 436, 437, 438, 441, 442, 443, 444, 446, 447, 449, 450, 451, 453, 495], "vmhc": 247, "vmin": [15, 26, 33, 38, 43, 47, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 71, 72, 79, 81, 82, 86, 104, 106, 109, 110, 112, 114, 125, 129, 130, 134, 135, 149, 151, 163, 169, 428, 429, 434, 436, 437, 438, 441, 442, 443, 444, 446, 447, 450, 451, 453], "vocabulari": [107, 121, 185, 187, 226, 282, 284], "vogel": [0, 61, 118, 151, 163, 209, 230, 265, 266], "voic": 68, "vol": 309, "vol_img": 475, "vol_to_surf": [10, 134, 145, 154, 156, 163, 180, 438, 444, 445, 446, 447, 451, 475, 495], "vol_to_surf_kwarg": [10, 156, 163, 451, 475], "volum": [9, 17, 29, 33, 35, 38, 41, 42, 46, 51, 57, 59, 64, 70, 81, 89, 93, 103, 111, 114, 118, 120, 127, 129, 130, 132, 134, 145, 148, 156, 163, 170, 171, 176, 177, 185, 186, 187, 190, 194, 199, 202, 217, 224, 238, 249, 251, 254, 271, 281, 305, 306, 307, 308, 310, 311, 312, 313, 327, 349, 356, 357, 360, 361, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 385, 392, 394, 395, 429, 434, 438, 442, 447, 448, 450, 457, 458, 459, 463, 469, 475, 479, 481, 489, 492, 495, 496, 497, 498], "volume_img": [10, 39, 70, 113, 475], "volumetr": [7, 10, 24, 132, 163, 180, 190, 391], "volumn": [59, 368], "volunt": 176, "vote": 172, "vox_offset": [59, 105], "voxel": [3, 7, 16, 26, 27, 30, 35, 38, 39, 41, 42, 43, 44, 47, 48, 49, 52, 53, 61, 62, 64, 68, 70, 71, 72, 73, 76, 81, 83, 84, 86, 89, 91, 92, 94, 101, 103, 104, 105, 106, 109, 113, 116, 118, 120, 128, 134, 138, 141, 142, 143, 149, 158, 160, 163, 168, 169, 171, 173, 174, 175, 177, 180, 181, 182, 185, 186, 187, 190, 192, 199, 202, 220, 221, 224, 231, 234, 237, 247, 255, 256, 263, 268, 272, 273, 286, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 322, 323, 327, 336, 340, 342, 343, 344, 345, 347, 349, 350, 351, 360, 361, 364, 367, 368, 371, 372, 373, 374, 375, 376, 377, 378, 380, 382, 383, 386, 388, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 426, 427, 429, 432, 436, 437, 443, 448, 454, 455, 456, 457, 458, 459, 463, 464, 465, 466, 467, 479, 480, 481, 495, 497, 498], "voxel_ratio": 52, "voxel_wis": 17, "voxelwis": [327, 340], "vrije": 0, "vscode": [151, 163], "vstack": [13, 43, 44, 61, 77, 82, 107], "vt": [3, 19, 96], "vu": 0, "vulner": [118, 157, 163, 217], "vxxx": 224, "w": [26, 39, 47, 61, 110, 118, 165, 198, 209, 231, 236, 237, 239, 241, 259, 262, 263, 265, 269, 287, 310, 311], "w_": [310, 311], "wa": [0, 3, 26, 35, 43, 57, 64, 66, 70, 72, 73, 74, 77, 91, 93, 94, 98, 104, 113, 120, 121, 127, 129, 134, 135, 148, 155, 156, 157, 158, 159, 163, 171, 173, 176, 178, 181, 188, 200, 202, 234, 310, 311, 312, 313, 327, 334, 340, 342, 367, 372, 373, 375, 376, 377, 378, 379, 380, 426, 429, 438, 444, 446, 447, 451, 453, 457, 460, 467, 480, 481], "wager": [118, 121, 226, 282, 284, 345, 469], "wagstyl": [0, 129, 163], "wai": [3, 6, 7, 16, 41, 64, 68, 73, 74, 78, 86, 101, 111, 118, 120, 121, 155, 156, 158, 163, 165, 167, 170, 171, 172, 174, 177, 178, 179, 180, 181, 185, 190, 192, 284, 307, 308, 317, 319, 320, 365, 429, 454, 495, 496], "wait": [121, 164, 178], "wald": [317, 319, 320], "walk": 187, "walker": [169, 457, 459], "wall": [24, 178], "wang": [0, 118, 127, 128, 129, 130, 132, 155, 156, 158, 160, 163, 228], "want": [0, 2, 6, 10, 13, 15, 16, 26, 39, 45, 52, 57, 68, 72, 73, 74, 80, 88, 96, 101, 103, 116, 120, 121, 164, 165, 172, 174, 178, 179, 181, 191, 192, 194, 238, 284, 310, 311, 330, 360, 369, 433, 490, 495, 496], "ward": [93, 168, 185, 186, 202, 375, 455, 481], "ward_labels_img": 52, "ward_parcel": 52, "ward_tre": 52, "warn": [3, 11, 16, 17, 21, 31, 34, 35, 36, 42, 46, 51, 53, 64, 65, 72, 73, 77, 94, 104, 107, 108, 114, 127, 128, 129, 130, 131, 132, 135, 148, 149, 151, 156, 158, 160, 163, 171, 179, 188, 249, 251, 252, 258, 260, 324, 330, 334, 375, 405, 445, 448, 453, 480, 481], "warrington": [0, 129, 163], "washington": [0, 228], "waskom": [0, 122, 163], "wasn": 178, "wassermann": [0, 118, 125, 148, 163, 208, 254], "wast": [26, 118, 178], "watch": [51, 52, 53, 55, 57, 58, 87, 91, 94, 108, 151, 163, 167, 186, 187, 192, 207, 268, 498], "watkin": [118, 233, 260], "wdesign": [160, 163], "we": [0, 2, 3, 4, 6, 7, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 45, 46, 47, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 120, 121, 127, 129, 132, 141, 149, 150, 151, 156, 158, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 176, 178, 180, 185, 187, 188, 189, 190, 191, 192, 208, 229, 232, 246, 255, 256, 273, 282, 284, 310, 311, 312, 317, 319, 320, 340, 342, 344, 352, 356, 364, 365, 366, 367, 383, 385, 386, 388, 395, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 432, 457, 459, 466, 467, 481, 495, 496], "weaker": [54, 68, 81], "weakli": 178, "web": [17, 118, 121, 148, 151, 163, 179, 188, 226, 282, 284, 449, 451, 452, 453, 467, 495, 499], "webpag": 121, "websit": [3, 45, 77, 136, 148, 163, 164, 179, 198, 247, 260, 281], "webster": [106, 118, 165, 391], "wednesdai": [179, 496], "weeda": [78, 118, 322], "week": [164, 179, 188], "weekli": [179, 187], "wegrzyn": [0, 155, 163], "weigh": 179, "weight": [6, 31, 45, 46, 47, 120, 121, 151, 163, 165, 172, 174, 175, 178, 179, 181, 192, 217, 219, 226, 247, 272, 282, 284, 305, 306, 307, 308, 310, 311, 324, 367, 449, 461], "weight_img": [31, 45, 101, 171, 192], "weighted_connectivity_graph": [127, 163], "weird": 121, "welcom": [179, 188, 496], "well": [3, 6, 16, 41, 47, 51, 54, 61, 68, 69, 71, 81, 91, 103, 133, 141, 148, 155, 157, 163, 164, 165, 166, 168, 169, 171, 172, 174, 177, 179, 181, 185, 187, 192, 202, 205, 208, 219, 232, 233, 235, 239, 240, 241, 254, 260, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 346, 360, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 454, 455, 456, 457, 481], "wellcom": [0, 185, 234], "went": 121, "were": [0, 6, 19, 35, 41, 43, 46, 52, 61, 64, 65, 68, 70, 73, 81, 93, 96, 101, 104, 112, 113, 120, 125, 127, 134, 151, 154, 158, 159, 160, 163, 171, 178, 179, 181, 198, 202, 209, 217, 219, 221, 224, 233, 234, 235, 282, 284, 345, 375, 378, 426, 469, 480, 481], "weren": 178, "western": 0, "wget": 188, "wgreen": [118, 314, 318], "what": [16, 59, 68, 73, 159, 172, 178, 182, 188, 190, 192, 240, 314, 318, 351, 365, 470, 495, 498], "whatev": [13, 155, 163], "whats_new": 188, "whatsnew": [127, 163], "whatsoev": 178, "wheel": [164, 188], "when": [2, 3, 4, 9, 10, 17, 25, 26, 29, 32, 35, 57, 61, 64, 65, 66, 68, 69, 70, 73, 74, 77, 91, 93, 94, 96, 103, 104, 105, 111, 113, 116, 120, 121, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 142, 143, 144, 146, 149, 151, 154, 155, 158, 159, 160, 163, 164, 165, 166, 168, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 184, 185, 188, 191, 199, 204, 205, 239, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 275, 277, 282, 284, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 320, 321, 324, 327, 340, 342, 343, 360, 362, 364, 367, 368, 369, 372, 373, 374, 375, 376, 377, 378, 382, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 436, 437, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 453, 455, 460, 467, 468, 469, 479, 481, 495, 497], "whenev": [69, 172, 343], "where": [2, 6, 10, 16, 17, 25, 26, 41, 43, 47, 53, 71, 79, 86, 89, 96, 103, 109, 116, 129, 134, 135, 141, 155, 163, 165, 169, 171, 176, 177, 179, 181, 185, 188, 191, 192, 221, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 301, 305, 306, 307, 308, 310, 311, 314, 317, 318, 319, 320, 323, 327, 340, 342, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 402, 404, 407, 409, 411, 413, 415, 417, 419, 423, 427, 428, 431, 434, 437, 438, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 453, 457, 459, 466, 467, 479, 495], "wherea": [16, 52, 157, 163, 168, 172, 191, 386, 388, 389, 455], "wherein": 66, "whether": [6, 10, 71, 91, 96, 106, 131, 149, 163, 171, 179, 181, 188, 192, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 263, 268, 271, 272, 273, 277, 279, 280, 281, 282, 284, 286, 291, 301, 312, 313, 324, 342, 343, 344, 349, 357, 359, 360, 361, 364, 366, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 394, 395, 436, 438, 443, 444, 445, 447, 455, 457, 466, 467, 469, 470], "which": [0, 3, 6, 7, 10, 11, 15, 16, 22, 24, 27, 31, 32, 34, 35, 36, 38, 39, 41, 43, 45, 47, 50, 52, 54, 61, 64, 68, 69, 70, 71, 77, 78, 81, 86, 91, 93, 96, 98, 101, 103, 113, 118, 120, 121, 126, 127, 128, 130, 132, 134, 136, 141, 142, 145, 146, 147, 148, 149, 151, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 183, 185, 187, 188, 190, 191, 192, 198, 199, 202, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 268, 282, 283, 284, 285, 288, 290, 292, 293, 294, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 326, 327, 334, 335, 340, 342, 344, 349, 355, 360, 364, 366, 367, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 384, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 450, 451, 453, 455, 457, 458, 459, 467, 473, 474, 479, 495, 496], "whichev": 179, "while": [3, 4, 6, 7, 26, 41, 46, 51, 58, 59, 68, 77, 86, 96, 101, 103, 104, 107, 111, 113, 120, 127, 129, 136, 146, 148, 163, 170, 171, 176, 178, 179, 180, 187, 191, 192, 202, 251, 305, 306, 307, 308, 334, 391], "white": [12, 25, 26, 41, 43, 45, 59, 68, 77, 91, 139, 154, 156, 157, 163, 178, 191, 192, 202, 211, 212, 213, 214, 215, 216, 219, 228, 268, 272, 286, 290, 293, 297, 298, 299, 300, 305, 306, 307, 308, 312, 313, 330, 368, 374, 377, 384, 387, 444, 445, 446, 447, 450, 451, 453, 455, 478, 479], "white_left": [211, 212, 213, 214, 215, 216, 290, 479], "white_matt": [59, 293, 294, 301, 475], "white_matter_imag": 26, "white_matter_map": [45, 77, 228, 286], "white_matter_mask": 26, "white_right": [211, 212, 213, 214, 215, 216, 290], "whiten": [314, 318, 319, 320], "whitened_design": 318, "whitened_i": 319, "whitened_residu": 319, "whitened_x": [314, 318], "whitening_": 239, "whitespac": [147, 163], "whl": 188, "who": [0, 121, 192, 198, 207, 369], "whole": [4, 15, 34, 45, 51, 53, 71, 91, 96, 111, 118, 121, 129, 157, 163, 176, 177, 179, 180, 186, 191, 192, 205, 219, 220, 234, 252, 272, 282, 284, 295, 298, 305, 306, 307, 308, 312, 313, 374, 377, 384, 387, 391, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 441, 455, 457, 495], "whose": [10, 70, 134, 163, 178, 185, 240, 241, 243, 318, 352, 433, 473, 474, 479], "why": [3, 7, 96, 178, 192], "wide": [58, 72, 109, 118, 171, 172, 174, 178, 179, 218, 269, 287, 309], "width": [10, 15, 34, 35, 54, 68, 73, 96, 104, 132, 163, 185, 192, 305, 306, 307, 308, 312, 313, 327, 340, 342, 362, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 429, 430, 434, 436, 437, 439, 440, 441, 442, 443, 449, 450, 455, 457, 459, 465, 467, 480], "width_ratio": [82, 103], "width_tf": 44, "width_tf_i": 44, "width_view": [132, 163, 450], "wiesner": [0, 151, 163], "wig": [61, 118, 209, 230, 265, 266], "wiki": 181, "wikipedia": 181, "wildcard": [4, 190, 191, 304, 355], "wilei": [118, 319, 320], "william": [118, 198, 201, 227, 250, 314, 318], "williamson": [0, 127, 128, 163], "wim": [118, 219], "window": [64, 70, 73, 104, 113, 179, 467, 496], "winkler": [106, 118, 198, 391], "winner": 232, "wip": 179, "wisconsin": 0, "wise": [6, 16, 43, 50, 58, 83, 96, 103, 106, 127, 132, 160, 163, 164, 176, 180, 185, 192, 305, 306, 307, 308, 342, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 436, 437, 443], "wish": [68, 81, 109, 158, 163, 179, 185, 188, 219, 234, 272, 273, 295, 296, 297, 298, 299, 300, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 430, 434, 436, 437, 439, 441, 442, 443], "within": [7, 33, 39, 50, 58, 68, 69, 81, 90, 103, 106, 111, 151, 154, 160, 163, 164, 168, 170, 176, 180, 183, 184, 202, 305, 306, 309, 324, 327, 329, 330, 334, 343, 344, 345, 364, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 389, 396, 397, 398, 399, 400, 401, 403, 406, 408, 410, 412, 414, 416, 418, 429, 430, 455, 457, 458, 467, 469], "without": [3, 6, 15, 24, 26, 51, 53, 68, 80, 83, 86, 96, 105, 111, 121, 128, 129, 134, 142, 151, 160, 163, 164, 166, 169, 175, 177, 178, 181, 185, 188, 190, 192, 252, 343, 349, 369, 371, 374, 377, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 429, 437, 441, 495, 498], "wjtyq": [207, 268], "wjvd5": [208, 254], "wlsmodel": 318, "wm": [12, 22, 59, 91, 157, 163, 192, 219, 272, 305, 306, 307, 308, 312, 313, 369, 374, 377, 384, 387, 455], "wm_csf": [59, 330, 368, 369], "wm_mask_img": 299, "wm_mni152_templ": 300, "wn": [160, 163], "woldorff": [118, 236, 262], "wolf": [59, 61, 118, 178, 368, 369], "wolfgang": [118, 229, 258], "women": 0, "wood": [118, 227], "woolrich": [118, 165, 198], "wor": 179, "word": [15, 79, 96, 107, 109, 121, 164, 171, 172, 179, 221, 226, 234, 282, 284, 475], "word_frequ": [107, 121, 226, 282, 284], "work": [0, 1, 2, 3, 4, 6, 8, 10, 15, 16, 17, 19, 21, 23, 24, 26, 31, 32, 33, 34, 35, 36, 38, 42, 43, 44, 46, 50, 51, 52, 53, 55, 58, 60, 61, 64, 65, 66, 70, 72, 73, 74, 77, 79, 80, 81, 86, 88, 91, 93, 94, 96, 100, 101, 103, 104, 105, 108, 113, 114, 115, 116, 129, 132, 133, 134, 143, 144, 151, 158, 159, 163, 164, 165, 170, 171, 172, 174, 178, 179, 180, 181, 188, 190, 191, 192, 198, 202, 239, 240, 241, 248, 251, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 340, 346, 355, 358, 361, 367, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 422, 430, 436, 453, 454, 455, 456, 457, 466, 472, 474, 475, 476, 479, 481, 483, 485, 497], "workaround": [144, 163], "workbench": 13, "worker": [33, 35, 37, 38, 39, 42, 45, 46, 47, 51, 53, 56, 60, 61, 101, 106, 109, 391], "workflow": [64, 179, 183, 188], "workshop": [118, 177, 202, 251], "workspac": 188, "world": [43, 190, 192, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 425, 430, 439], "worri": [6, 25, 120], "wors": [68, 311], "worslei": [118, 345, 469], "worst": 171, "worth": 79, "would": [6, 10, 15, 45, 53, 61, 68, 77, 80, 107, 111, 113, 121, 129, 131, 132, 156, 160, 163, 164, 171, 178, 179, 180, 181, 188, 304, 305, 306, 307, 308, 310, 311, 313, 327, 329, 330, 334, 340, 342, 365, 367, 382, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 429, 436, 437, 443, 467], "wouter": [78, 118, 322], "wrap": [12, 46, 50, 51, 52, 53, 55, 56, 57, 59, 61, 65, 107, 111, 171, 465], "wrapper": [6, 71, 72, 305, 306, 342, 473, 474], "wresid": [160, 163], "write": [6, 44, 73, 116, 121, 127, 158, 160, 163, 178, 179, 188, 367, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 465, 471, 472, 476], "write_imgs_to_path": [130, 163], "write_tmp_img": [130, 163], "written": [178, 234, 465], "wrong": [141, 159, 163, 181], "wrt": 247, "wspace": [43, 47, 109], "wustl": [228, 232, 286], "www": [0, 2, 3, 6, 10, 11, 22, 28, 42, 72, 105, 111, 121, 199, 200, 201, 205, 218, 219, 226, 233, 234, 235, 248, 249, 252, 260, 271, 288], "wy": [160, 163], "x": [3, 6, 10, 14, 15, 16, 25, 33, 35, 37, 39, 41, 43, 44, 47, 50, 55, 57, 59, 61, 64, 65, 68, 71, 73, 77, 86, 93, 94, 96, 104, 107, 118, 129, 130, 133, 134, 138, 143, 145, 151, 156, 158, 160, 163, 171, 176, 179, 185, 188, 191, 192, 198, 202, 210, 234, 239, 251, 257, 280, 305, 306, 307, 308, 310, 311, 312, 313, 314, 317, 318, 319, 320, 327, 336, 340, 347, 368, 371, 374, 377, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 426, 428, 430, 434, 436, 437, 439, 441, 442, 443, 444, 445, 446, 447, 450, 453, 454, 456, 457, 458, 462, 466, 467, 468, 471, 480, 481, 493, 495], "x1": [66, 96, 479], "x1_post": 349, "x1_pre": 349, "x2": [66, 96], "x20": 479, "x27": [3, 52], "x2_post": 349, "x2_pre": 349, "x3": 66, "x4": 66, "x_figure_filenam": 44, "x_inv": [454, 456], "x_new": [312, 313, 454, 456], "x_random_filenam": 44, "x_red": [454, 456], "x_test": [33, 41, 44, 47, 305, 306, 307, 308, 309], "x_train": [33, 41, 44, 47], "xavier": 118, "xaxi": [51, 52], "xerr": [54, 102], "xi": [47, 118, 231, 259], "xiaop": [118, 205, 252], "xlabel": [6, 27, 32, 34, 36, 45, 51, 52, 54, 58, 61, 69, 102, 191], "xlim": [27, 32, 191], "xmean_": [310, 311], "xmin": [32, 428, 429, 430, 434, 436, 437, 439, 441, 442, 443], "xn_post": 349, "xn_pre": 349, "xor": 121, "xprojector": [15, 412, 418, 420], "xslicer": [10, 413, 419, 421], "xstd_": [310, 311], "xtick": [34, 36, 37, 47, 96], "xu": [118, 198], "xx": 47, "xxxx": 179, "xy_indices_of_special_voxel": 43, "xyz": [16, 359, 402, 407, 409, 413, 419], "xyzt_unit": [59, 105], "xz": [14, 15, 16, 52, 410, 411, 420, 421, 428, 430, 434, 436, 437, 439, 441, 442, 443, 467, 495], "xzprojector": [14, 15, 414, 416, 420], "xzslicer": [415, 417, 421], "y": [6, 15, 16, 24, 25, 33, 35, 36, 37, 38, 39, 41, 43, 44, 47, 50, 55, 57, 61, 64, 65, 71, 73, 86, 94, 96, 104, 109, 114, 118, 135, 143, 145, 148, 160, 163, 171, 172, 176, 179, 185, 188, 191, 192, 223, 239, 240, 241, 257, 280, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 327, 335, 336, 340, 342, 347, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 426, 428, 430, 434, 436, 437, 439, 441, 442, 443, 444, 445, 446, 447, 450, 453, 454, 455, 456, 457, 458, 466, 467, 471, 480, 495], "y_binari": 41, "y_binary_": 41, "y_col": 44, "y_dummi": [312, 313, 455], "y_figure_filenam": 44, "y_multi": 41, "y_pred": [31, 33, 36, 44, 46, 171, 305, 307, 310, 311], "y_pred_big": 44, "y_pred_larg": 44, "y_pred_ova": 37, "y_pred_ovo": 37, "y_pred_tal": 44, "y_random_filenam": 44, "y_row": 44, "y_shape": 44, "y_test": [33, 36, 41, 44, 47, 305, 306, 307, 308, 309], "y_train": [33, 36, 41, 44, 47], "y_true": 311, "yamashita": [43, 44, 118, 224, 281], "yan": [118, 227], "yannick": [118, 121, 122, 163, 171, 173, 204, 226, 277, 282, 284, 307, 308], "yarkoni": [118, 121, 226, 282, 284], "yaroslav": [0, 145, 148, 163], "yashar": [118, 368, 369, 470], "yasmin": [0, 127, 128, 129, 130, 132, 160, 163, 187], "yaxi": 52, "ye": [164, 188, 305, 306, 307, 308], "year": [45, 46, 118, 178, 188, 207, 228, 268], "yellow": 16, "yeo": [11, 118, 132, 134, 163, 194, 231, 238, 259, 263, 423], "yeo2011_17networks_mni152_freesurferconformed1mm_liberalmask": [50, 481], "yeo_2011": [11, 50, 88, 481], "yeo_jneurophysiol11_mni152": [50, 481], "yeo_network": 259, "yet": [67, 82, 108, 118, 134, 158, 163, 171, 179, 187, 379, 380, 381, 382, 441, 480], "yh": 44, "yi": [39, 118], "yichun": [0, 132, 163], "yield": [24, 33, 42, 52, 79, 81, 86, 121, 151, 154, 158, 163, 170, 171, 172, 173, 176, 177, 180, 181, 197, 282, 309, 313, 323, 327, 329, 334, 343, 364, 454, 457], "ylabel": [27, 32, 34, 45, 51, 52, 58, 60, 61, 67, 68, 111, 191], "ylim": 34, "ylorrd": 61, "ymean_": [310, 311], "ymin": [428, 429, 430, 434, 436, 437, 439, 441, 442, 443], "yml": 188, "yoichi": [43, 44, 118, 224, 281], "york": [0, 118, 319, 320], "you": [0, 2, 4, 6, 7, 10, 11, 13, 15, 16, 23, 24, 25, 26, 37, 38, 39, 42, 43, 44, 45, 46, 47, 50, 51, 52, 54, 55, 56, 57, 58, 59, 61, 64, 65, 68, 71, 72, 73, 77, 81, 88, 91, 93, 94, 96, 98, 101, 102, 103, 106, 107, 108, 109, 110, 111, 113, 116, 118, 120, 121, 132, 143, 144, 148, 151, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 176, 177, 179, 183, 184, 185, 187, 188, 190, 191, 192, 194, 198, 199, 204, 219, 226, 238, 239, 240, 241, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 260, 261, 263, 268, 271, 272, 273, 277, 279, 280, 281, 282, 286, 287, 291, 295, 296, 297, 298, 299, 300, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 329, 330, 334, 340, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 430, 433, 434, 436, 437, 439, 441, 442, 443, 444, 446, 447, 450, 451, 453, 454, 455, 456, 457, 479, 480, 490, 495, 496, 498], "young": [51, 118, 186, 198, 202, 207, 228, 251], "your": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 121, 164, 166, 170, 171, 172, 174, 176, 188, 190, 192, 198, 255, 256, 268, 273, 305, 306, 307, 308, 312, 313, 318, 374, 377, 455, 480, 495, 498], "your_branch": 179, "your_fork": 179, "your_usernam": 179, "yourself": 164, "yprojector": [15, 408, 418, 420], "yslicer": [94, 409, 419, 421], "yt_big": 44, "yt_larg": 44, "yt_tall": 44, "ytick": [32, 47, 51, 54, 102], "yukiyasu": [43, 44, 118, 224, 281], "yuko": [118, 201, 250], "yusuk": [43, 44, 118, 224, 281], "yvett": [0, 179], "yw": 44, "yx": [15, 16, 120, 414, 415, 420, 421, 428, 430, 434, 436, 437, 439, 441, 442, 443, 467, 495], "yxprojector": [15, 410, 416, 420], "yxslicer": [411, 417], "yz": [15, 16, 33, 42, 416, 417, 420, 421, 428, 430, 434, 436, 437, 439, 441, 442, 443, 467, 495], "yzprojector": [15, 410, 414, 420], "yzslicer": [411, 415, 421], "y\u00fccel": [59, 118, 369], "z": [2, 14, 15, 16, 19, 25, 26, 32, 35, 38, 41, 43, 45, 46, 50, 51, 55, 57, 61, 64, 65, 67, 68, 70, 71, 72, 73, 77, 78, 81, 82, 83, 86, 89, 90, 96, 104, 106, 109, 110, 113, 118, 131, 143, 145, 149, 160, 163, 179, 181, 185, 188, 191, 192, 202, 257, 282, 312, 313, 315, 322, 324, 326, 343, 347, 367, 368, 369, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 391, 392, 394, 395, 399, 400, 401, 402, 403, 410, 411, 416, 417, 418, 419, 420, 421, 422, 425, 428, 429, 430, 434, 436, 437, 439, 441, 442, 443, 444, 445, 446, 447, 450, 453, 457, 458, 466, 467, 469, 471, 480, 495], "z_image_path": 73, "z_img": 112, "z_map": [6, 35, 64, 65, 67, 68, 71, 73, 77, 78, 79, 81, 83, 104, 327, 340], "z_map_ftest": 71, "z_score": [6, 26, 64, 67, 68, 70, 71, 72, 73, 77, 78, 79, 81, 82, 83, 113, 315, 327, 340], "z_scores_left": 113, "z_scores_right": 113, "z_slice": [19, 45], "z_statmap": [65, 77], "z_val": 326, "z_valu": 112, "zack": [118, 176], "zaleski": [118, 166], "zarrar": 118, "zavitz": [118, 227], "zealand": [106, 118, 391], "zenodo": 0, "zero": [6, 10, 15, 21, 23, 24, 26, 38, 39, 41, 42, 47, 50, 56, 57, 70, 72, 73, 79, 81, 96, 125, 130, 134, 151, 155, 159, 163, 165, 169, 171, 172, 176, 177, 178, 181, 185, 191, 192, 228, 239, 240, 241, 243, 305, 306, 307, 308, 310, 311, 312, 313, 314, 319, 320, 327, 340, 342, 343, 345, 346, 349, 362, 364, 368, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 385, 388, 391, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 426, 428, 442, 443, 445, 446, 455, 456, 457, 460, 461, 463, 464, 467, 469, 481], "zero_divis": 44, "zeros_lik": [43, 69, 86, 106], "zielinski": [118, 197, 247], "zijdenbo": [118, 199, 219], "zill": 118, "zip": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 169, 188, 219, 225, 257], "zmap": [42, 104, 223, 280], "zmap_filenam": 42, "zone": [118, 198], "zoom": [156, 163], "zprojector": [15, 408, 412, 420], "zrji8542": [26, 118], "zscore": [6, 128, 129, 151, 163, 239, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 429, 469], "zscore_sampl": [3, 12, 31, 32, 33, 34, 36, 37, 38, 41, 42, 43, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64, 93, 94, 101, 102, 103, 108, 114, 128, 163, 169, 171, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 469, 481], "zslicer": [38, 71, 409, 413, 421], "zstat12": 65, "zuckerberg": 0, "zuo": [118, 231, 259], "zurich": 0, "zvi": [0, 153, 163], "zwalli": [0, 130, 163], "z\u00f6llei": [118, 231, 237, 259, 263], "\u00e1": [118, 219], "\u00e2": [118, 198], "\u00e9": [74, 118, 171, 204, 217, 219, 277], "\u00eb": [47, 118, 171, 177, 187], "\u00eele": 0, "\u00f3scar": [0, 122, 125, 136, 138, 163], "\u00fc": [118, 177], "\u0161": [118, 219], "\u03b1": [35, 64, 73, 104, 480], "\u03b54": [118, 198]}, "titles": ["Team", "Basic tutorials", "3D and 4D niimgs: handling and visualizing", "A introduction tutorial to fMRI decoding", "Basic nilearn example: manipulating and looking at data", "Basic numerics and plotting with Python", "Intro to GLM Analysis: a single-run, single-subject fMRI dataset", "Working with Surface images", "Computation times", "Visualization of brain images", "Making a surface plot of a 3D statistical map", "Basic Atlas plotting", "Visualizing global patterns with a carpet plot", "Colormaps in Nilearn", "Glass brain plotting in nilearn", "Glass brain plotting in nilearn (all options)", "More plotting tools from nilearn", "Plotting tools in nilearn", "Controlling the contrast of the background when plotting", "Plot Haxby masks", "Visualizing multiscale functional brain parcellations", "Visualizing a probabilistic atlas: the default mode in the MSDL atlas", "Visualizing 4D probabilistic atlas maps", "Loading and plotting of a cortical surface atlas", "Seed-based connectivity on the surface", "Technical point: Illustration of the volume to surface sampling schemes", "Plotting images with transparent thresholding", "NeuroImaging volumes visualization", "Visualizing Megatrawls Network Matrices from Human Connectome Project", "Computation times", "Decoding and predicting from brain images", "Decoding with ANOVA + SVM: face vs house in the Haxby dataset", "Different classifiers in decoding the Haxby dataset", "Decoding with FREM: face vs house vs chair object recognition", "ROI-based decoding analysis in Haxby et al. dataset", "Decoding of a dataset after GLM fit for signal extraction", "Setting a parameter by cross-validation", "The haxby dataset: different multi-class strategies", "Searchlight analysis of face vs house recognition", "Cortical surface-based searchlight decoding", "Show stimuli of Haxby et al. dataset", "Understanding <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Decoder</span></code>", "FREM on Jimura et al \u201cmixed gambles\u201d dataset", "Encoding models for visual stimuli from Miyawaki et al. 2008", "Reconstruction of visual stimuli from Miyawaki et al. 2008", "Voxel-Based Morphometry on Oasis dataset", "Voxel-Based Morphometry on Oasis dataset with Space-Net prior", "Example of pattern recognition on simulated data", "Computation times", "Functional connectivity", "Comparing connectomes on different reference atlases", "Deriving spatial maps from group fMRI data using ICA and Dictionary Learning", "Clustering methods to learn a brain parcellation from fMRI", "Regions extraction using dictionary learning and functional connectomes", "Classification of age groups using functional connectivity", "Computing a connectome with sparse inverse covariance", "Group Sparse inverse covariance for multi-subject connectome", "Extracting signals of a probabilistic atlas of functional regions", "Producing single subject maps of seed-to-voxel correlation", "Extracting signals from a brain parcellation", "Connectivity structure estimation on simulated data", "Extract signals on spheres and plot a connectome", "Computation times", "GLM: First level analysis", "Default Mode Network extraction of ADHD dataset", "First level analysis of a complete BIDS dataset from openneuro", "Examples of design matrices", "Analysis of an fMRI dataset with a Finite Impule Response (FIR) model", "Understanding parameters of the first-level model", "Example of MRI response functions", "Example of surface-based first-level analysis", "Predicted time series and residuals", "Single-subject data (two runs) in native space", "Simple example of two-runs fMRI model fitting", "Generate an events.tsv file for the NeuroSpin localizer task", "Computation times", "GLM: Second level analysis", "Voxel-Based Morphometry on OASIS dataset", "Second-level fMRI model: true positive proportion in clusters", "Example of generic design in second-level models", "Example of second level design matrix", "Second-level fMRI model: one sample test", "Second-level fMRI model: two-sample test, unpaired and paired", "Statistical testing of a second-level analysis", "Computation times", "Manipulating brain image volumes", "Visualization of affine resamplings", "Comparing the means of 2 images", "Breaking an atlas of labels in separated regions", "Regions Extraction of Default Mode Networks using Smith Atlas", "Region Extraction using a t-statistical map (3D)", "Understanding NiftiMasker and mask computation", "Negating an image with math_img", "Extracting signals from brain regions using the NiftiLabelsMasker", "Simple example of NiftiMasker use", "Resample an image to a template", "Computing a Region of Interest (ROI) mask manually", "Smoothing an image", "Image thresholding", "Computation times", "Advanced statistical analysis of brain images", "Advanced decoding using scikit learn", "Functional connectivity predicts age group", "Beta-Series Modeling for Task-Based Functional Connectivity and Decoding", "BIDS dataset first and second level analysis", "Copying headers from input images with <code class=\"docutils literal notranslate\"><span class=\"pre\">math_img</span></code>", "Massively univariate analysis of face vs house recognition", "NeuroVault cross-study ICA maps", "Multivariate decompositions: Independent component analysis of fMRI", "Massively univariate analysis of a motor task from the Localizer dataset", "Massively univariate analysis of a calculation task from the Localizer dataset", "Working with long time series fMRI images", "NeuroVault meta-analysis of stop-go paradigm studies", "Surface-based dataset first and second level analysis of a dataset", "A short demo of the surface images &amp; maskers", "Computation times", "Examples", "Computation times", "General bibliography", "<span class=\"section-number\">10. </span>Advanced usage: manual pipelines and scaling up", "<span class=\"section-number\">10.1. </span>Building your own neuroimaging machine-learning pipeline", "<span class=\"section-number\">10.2. </span>Downloading statistical maps from the Neurovault repository", "0.1.0", "0.1.1", "0.1.2", "0.1.3", "0.1.4", "0.10.0", "0.10.1", "0.10.2", "0.10.3", "0.10.4", "0.11.0", "0.11.1", "0.12.0", "0.12.1", "0.2.0", "0.2.1", "0.2.2", "0.2.3", "0.2.4", "0.2.5.1", "0.2.6", "0.3.0", "0.3.1", "0.4.0", "0.4.1", "0.4.2", "0.5.0", "0.5.1", "0.5.2", "0.6.0", "0.6.1", "0.6.2", "0.7.0", "0.7.1", "0.8.0", "0.8.1", "0.9.0", "0.9.1", "0.9.2", "0.13.0.dev", "&lt;no title&gt;", "What\u2019s new", "Continuous integration", "<span class=\"section-number\">6.2. </span>Connectome extraction: inverse covariance for direct connections", "<span class=\"section-number\">6.1. </span>Extracting times series to build a functional connectome", "<span class=\"section-number\">6. </span>Functional connectivity and resting state", "<span class=\"section-number\">6.5. </span>Clustering to parcellate the brain in regions", "<span class=\"section-number\">6.4. </span>Region Extraction for better brain parcellations", "<span class=\"section-number\">6.3. </span>Extracting functional brain networks: ICA and related", "<span class=\"section-number\">5.1. </span>An introduction to decoding", "<span class=\"section-number\">5.2. </span>Choosing the right predictive model for neuroimaging", "<span class=\"section-number\">5.3. </span>FREM: fast ensembling of regularized models for robust decoding", "<span class=\"section-number\">5.6. </span>Running scikit-learn functions for more control on the analysis", "<span class=\"section-number\">5. </span>Decoding and MVPA: predicting from brain images", "<span class=\"section-number\">5.5. </span>Searchlight : finding voxels containing information", "<span class=\"section-number\">5.4. </span>SpaceNet: decoding with spatial structure for better maps", "<span class=\"section-number\">6.2.3.1. </span>Group-sparse covariance estimation", "Contributing", "<span class=\"section-number\">8.2. </span>First level models", "<span class=\"section-number\">8.1. </span>An introduction to GLMs in fMRI statistical analysis", "<span class=\"section-number\">8. </span>Analyzing fMRI using GLMs", "<span class=\"section-number\">8.4. </span>Difference in meanings between different toolboxes", "<span class=\"section-number\">8.3. </span>Second level models", "Glossary", "Nilearn", "<span class=\"section-number\">1. </span>Introduction", "Maintenance", "<span class=\"section-number\">9. </span>Manipulation brain volumes with nilearn", "<span class=\"section-number\">9.1. </span>Input and output: neuroimaging data representation", "<span class=\"section-number\">9.2. </span>Manipulating images: resampling, smoothing, masking, ROIs\u2026", "<span class=\"section-number\">9.3. </span>From neuroimaging volumes to data matrices: the masker objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.connectome</span></code>: Functional Connectivity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.datasets</span></code>: Automatic Dataset Fetching", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.decoding</span></code>: Decoding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.decomposition</span></code>: Multivariate Decompositions", "ABIDE PCP dataset", "MegaTrawls Network Matrices HCP", "AAL atlas", "ADHD dataset", "Allen 2011 atlas", "BASC multiscale atlas", "BIDS language localizer", "Brainomics Localizer", "Craddock 2012 atlas", "Destrieux atlas", "development fMRI dataset", "DiFuMo atlas", "Dosenbach 2010 atlas", "fiac first level dataset", "fsaverage template", "fsaverage3 template", "fsaverage4 template", "fsaverage5 template", "fsaverage6 template", "Content", "Harvard Oxford atlas", "Haxby dataset", "ICBM 152 template", "Juelich atlas", "language localizer demo dataset", "localizer first level dataset", "Mixed gambles statistical maps", "Miyawaki 2008 dataset", "MSDL atlas", "Neurovault statistical maps", "NKI enhanced surface dataset", "OASIS volume based morphometry maps", "Pauli 2007 atlas", "Power 2011 atlas", "Schaefer 2018 atlas", "Seitzman 2018 atlas", "Smith 2009 atlas", "SPM auditory dataset", "SPM multimodal dataset", "Talairach atlas", "Yeo 2011 atlas", "&lt;no title&gt;", "nilearn.connectome.ConnectivityMeasure", "nilearn.connectome.GroupSparseCovariance", "nilearn.connectome.GroupSparseCovarianceCV", "nilearn.connectome.cov_to_corr", "nilearn.connectome.group_sparse_covariance", "nilearn.connectome.prec_to_partial", "nilearn.connectome.sym_matrix_to_vec", "nilearn.connectome.vec_to_sym_matrix", "nilearn.datasets.fetch_abide_pcp", "nilearn.datasets.fetch_adhd", "nilearn.datasets.fetch_atlas_aal", "nilearn.datasets.fetch_atlas_allen_2011", "nilearn.datasets.fetch_atlas_basc_multiscale_2015", "nilearn.datasets.fetch_atlas_craddock_2012", "nilearn.datasets.fetch_atlas_destrieux_2009", "nilearn.datasets.fetch_atlas_difumo", "nilearn.datasets.fetch_atlas_harvard_oxford", "nilearn.datasets.fetch_atlas_juelich", "nilearn.datasets.fetch_atlas_msdl", "nilearn.datasets.fetch_atlas_pauli_2017", "nilearn.datasets.fetch_atlas_schaefer_2018", "nilearn.datasets.fetch_atlas_smith_2009", "nilearn.datasets.fetch_atlas_surf_destrieux", "nilearn.datasets.fetch_atlas_talairach", "nilearn.datasets.fetch_atlas_yeo_2011", "nilearn.datasets.fetch_bids_langloc_dataset", "nilearn.datasets.fetch_coords_dosenbach_2010", "nilearn.datasets.fetch_coords_power_2011", "nilearn.datasets.fetch_coords_seitzman_2018", "nilearn.datasets.fetch_development_fmri", "nilearn.datasets.fetch_ds000030_urls", "nilearn.datasets.fetch_fiac_first_level", "nilearn.datasets.fetch_haxby", "nilearn.datasets.fetch_icbm152_2009", "nilearn.datasets.fetch_icbm152_brain_gm_mask", "nilearn.datasets.fetch_language_localizer_demo_dataset", "nilearn.datasets.fetch_localizer_button_task", "nilearn.datasets.fetch_localizer_calculation_task", "nilearn.datasets.fetch_localizer_contrasts", "nilearn.datasets.fetch_localizer_first_level", "nilearn.datasets.fetch_megatrawls_netmats", "nilearn.datasets.fetch_mixed_gambles", "nilearn.datasets.fetch_miyawaki2008", "nilearn.datasets.fetch_neurovault", "nilearn.datasets.fetch_neurovault_auditory_computation_task", "nilearn.datasets.fetch_neurovault_ids", "nilearn.datasets.fetch_neurovault_motor_task", "nilearn.datasets.fetch_oasis_vbm", "nilearn.datasets.fetch_openneuro_dataset", "nilearn.datasets.fetch_spm_auditory", "nilearn.datasets.fetch_spm_multimodal_fmri", "nilearn.datasets.fetch_surf_fsaverage", "nilearn.datasets.fetch_surf_nki_enhanced", "nilearn.datasets.get_data_dirs", "nilearn.datasets.load_fsaverage", "nilearn.datasets.load_fsaverage_data", "nilearn.datasets.load_mni152_brain_mask", "nilearn.datasets.load_mni152_gm_mask", "nilearn.datasets.load_mni152_gm_template", "nilearn.datasets.load_mni152_template", "nilearn.datasets.load_mni152_wm_mask", "nilearn.datasets.load_mni152_wm_template", "nilearn.datasets.load_nki", "nilearn.datasets.load_sample_motor_activation_image", "nilearn.datasets.patch_openneuro_dataset", "nilearn.datasets.select_from_index", "nilearn.decoding.Decoder", "nilearn.decoding.DecoderRegressor", "nilearn.decoding.FREMClassifier", "nilearn.decoding.FREMRegressor", "nilearn.decoding.SearchLight", "nilearn.decoding.SpaceNetClassifier", "nilearn.decoding.SpaceNetRegressor", "nilearn.decomposition.CanICA", "nilearn.decomposition.DictLearning", "nilearn.glm.ARModel", "nilearn.glm.Contrast", "nilearn.glm.FContrastResults", "nilearn.glm.LikelihoodModelResults", "nilearn.glm.OLSModel", "nilearn.glm.RegressionResults", "nilearn.glm.SimpleRegressionResults", "nilearn.glm.TContrastResults", "nilearn.glm.cluster_level_inference", "nilearn.glm.compute_contrast", "nilearn.glm.compute_fixed_effects", "nilearn.glm.expression_to_contrast_vector", "nilearn.glm.fdr_threshold", "nilearn.glm.first_level.FirstLevelModel", "nilearn.glm.first_level.check_design_matrix", "nilearn.glm.first_level.compute_regressor", "nilearn.glm.first_level.first_level_from_bids", "nilearn.glm.first_level.glover_dispersion_derivative", "nilearn.glm.first_level.glover_hrf", "nilearn.glm.first_level.glover_time_derivative", "nilearn.glm.first_level.make_first_level_design_matrix", "nilearn.glm.first_level.mean_scaling", "nilearn.glm.first_level.run_glm", "nilearn.glm.first_level.spm_dispersion_derivative", "nilearn.glm.first_level.spm_hrf", "nilearn.glm.first_level.spm_time_derivative", "nilearn.glm.second_level.SecondLevelModel", "nilearn.glm.second_level.make_second_level_design_matrix", "nilearn.glm.second_level.non_parametric_inference", "nilearn.glm.threshold_stats_img", "nilearn.image.binarize_img", "nilearn.image.clean_img", "nilearn.image.concat_imgs", "nilearn.image.coord_transform", "nilearn.image.copy_img", "nilearn.image.crop_img", "nilearn.image.get_data", "nilearn.image.high_variance_confounds", "nilearn.image.index_img", "nilearn.image.iter_img", "nilearn.image.largest_connected_component_img", "nilearn.image.load_img", "nilearn.image.math_img", "nilearn.image.mean_img", "nilearn.image.new_img_like", "nilearn.image.reorder_img", "nilearn.image.resample_img", "nilearn.image.resample_to_img", "nilearn.image.smooth_img", "nilearn.image.swap_img_hemispheres", "nilearn.image.threshold_img", "nilearn.interfaces.bids.get_bids_files", "nilearn.interfaces.bids.parse_bids_filename", "nilearn.interfaces.bids.save_glm_to_bids", "nilearn.interfaces.fmriprep.load_confounds", "nilearn.interfaces.fmriprep.load_confounds_strategy", "nilearn.interfaces.fsl.get_design_from_fslmat", "nilearn.maskers.BaseMasker", "nilearn.maskers.MultiNiftiLabelsMasker", "nilearn.maskers.MultiNiftiMapsMasker", "nilearn.maskers.MultiNiftiMasker", "nilearn.maskers.NiftiLabelsMasker", "nilearn.maskers.NiftiMapsMasker", "nilearn.maskers.NiftiMasker", "nilearn.maskers.NiftiSpheresMasker", "nilearn.maskers.SurfaceLabelsMasker", "nilearn.maskers.SurfaceMapsMasker", "nilearn.maskers.SurfaceMasker", "nilearn.masking.apply_mask", "nilearn.masking.compute_background_mask", "nilearn.masking.compute_brain_mask", "nilearn.masking.compute_epi_mask", "nilearn.masking.compute_multi_background_mask", "nilearn.masking.compute_multi_brain_mask", "nilearn.masking.compute_multi_epi_mask", "nilearn.masking.intersect_masks", "nilearn.masking.unmask", "nilearn.mass_univariate.permuted_ols", "nilearn.plotting.displays.BaseAxes", "nilearn.plotting.displays.BaseSlicer", "nilearn.plotting.displays.CutAxes", "nilearn.plotting.displays.GlassBrainAxes", "nilearn.plotting.displays.LProjector", "nilearn.plotting.displays.LRProjector", "nilearn.plotting.displays.LYRProjector", "nilearn.plotting.displays.LYRZProjector", "nilearn.plotting.displays.LZRProjector", "nilearn.plotting.displays.LZRYProjector", "nilearn.plotting.displays.MosaicSlicer", "nilearn.plotting.displays.OrthoProjector", "nilearn.plotting.displays.OrthoSlicer", "nilearn.plotting.displays.PlotlySurfaceFigure", "nilearn.plotting.displays.RProjector", "nilearn.plotting.displays.TiledSlicer", "nilearn.plotting.displays.XProjector", "nilearn.plotting.displays.XSlicer", "nilearn.plotting.displays.XZProjector", "nilearn.plotting.displays.XZSlicer", "nilearn.plotting.displays.YProjector", "nilearn.plotting.displays.YSlicer", "nilearn.plotting.displays.YXProjector", "nilearn.plotting.displays.YXSlicer", "nilearn.plotting.displays.YZProjector", "nilearn.plotting.displays.YZSlicer", "nilearn.plotting.displays.ZProjector", "nilearn.plotting.displays.ZSlicer", "nilearn.plotting.displays.get_projector", "nilearn.plotting.displays.get_slicer", "nilearn.plotting.find_cut_slices", "nilearn.plotting.find_parcellation_cut_coords", "nilearn.plotting.find_probabilistic_atlas_cut_coords", "nilearn.plotting.find_xyz_cut_coords", "nilearn.plotting.img_comparison.plot_bland_altman", "nilearn.plotting.img_comparison.plot_img_comparison", "nilearn.plotting.plot_anat", "nilearn.plotting.plot_carpet", "nilearn.plotting.plot_connectome", "nilearn.plotting.plot_contrast_matrix", "nilearn.plotting.plot_design_matrix", "nilearn.plotting.plot_design_matrix_correlation", "nilearn.plotting.plot_epi", "nilearn.plotting.plot_event", "nilearn.plotting.plot_glass_brain", "nilearn.plotting.plot_img", "nilearn.plotting.plot_img_on_surf", "nilearn.plotting.plot_markers", "nilearn.plotting.plot_matrix", "nilearn.plotting.plot_prob_atlas", "nilearn.plotting.plot_roi", "nilearn.plotting.plot_stat_map", "nilearn.plotting.plot_surf", "nilearn.plotting.plot_surf_contours", "nilearn.plotting.plot_surf_roi", "nilearn.plotting.plot_surf_stat_map", "nilearn.plotting.show", "nilearn.plotting.view_connectome", "nilearn.plotting.view_img", "nilearn.plotting.view_img_on_surf", "nilearn.plotting.view_markers", "nilearn.plotting.view_surf", "nilearn.regions.HierarchicalKMeans", "nilearn.regions.Parcellations", "nilearn.regions.ReNA", "nilearn.regions.RegionExtractor", "nilearn.regions.connected_label_regions", "nilearn.regions.connected_regions", "nilearn.regions.img_to_signals_labels", "nilearn.regions.img_to_signals_maps", "nilearn.regions.recursive_neighbor_agglomeration", "nilearn.regions.signals_to_img_labels", "nilearn.regions.signals_to_img_maps", "nilearn.reporting.HTMLReport", "nilearn.reporting.get_clusters_table", "nilearn.reporting.make_glm_report", "nilearn.signal.butterworth", "nilearn.signal.clean", "nilearn.signal.high_variance_confounds", "nilearn.surface.FileMesh", "nilearn.surface.InMemoryMesh", "nilearn.surface.PolyData", "nilearn.surface.PolyMesh", "nilearn.surface.SurfaceImage", "nilearn.surface.SurfaceMesh", "nilearn.surface.load_surf_data", "nilearn.surface.load_surf_mesh", "nilearn.surface.vol_to_surf", "Examples of GLM reports", "Examples nifti masker reports", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.glm</span></code>: Generalized Linear Models", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.image</span></code>: Image Processing and Resampling Utilities", "API References", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.interfaces</span></code>: Loading components from interfaces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.maskers</span></code>: Extracting Signals from Brain Images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.masking</span></code>: Data Masking Utilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.mass_univariate</span></code>: Mass-Univariate Analysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.plotting</span></code>: Plotting Brain Data", "&lt;no title&gt;", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.regions</span></code>: Operating on Regions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.reporting</span></code>: Reporting Functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.signal</span></code>: Preprocessing Time Series", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.surface</span></code>: Manipulating Surface Data", "<span class=\"section-number\">7. </span>Plotting brain images", "Quickstart", "Computation times", "User guide", "Available documentation for Nilearn"], "titleterms": {"": [16, 61, 64, 101, 163, 171], "0": [17, 18, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 291], "0a0": [151, 163], "0b0": [151, 163], "0rc": [151, 163], "1": [17, 18, 68, 122, 123, 124, 125, 126, 128, 133, 135, 137, 141, 144, 146, 149, 152, 155, 157, 159, 163], "10": [127, 128, 129, 130, 131, 163], "100": 192, "11": [132, 133, 163], "12": [134, 135, 163], "13": [161, 163], "14": 291, "152": 219, "1rc1": [128, 163], "2": [87, 98, 124, 129, 136, 137, 138, 139, 140, 141, 142, 147, 150, 153, 160, 163], "2001": 171, "2007": 229, "2008": [43, 44, 224], "2009": 233, "2010": 209, "2011": [201, 230, 237], "2012": 205, "2018": [231, 232], "2d": [120, 191], "2x2": 16, "3": [125, 130, 139, 143, 144, 163], "3d": [2, 4, 10, 23, 55, 57, 61, 90, 190, 495], "4": [126, 131, 140, 145, 146, 147, 163], "4d": [2, 22, 120, 190, 191], "5": [16, 18, 141, 148, 149, 150, 163], "6": [71, 142, 151, 152, 153, 163], "7": [154, 155, 163], "8": [156, 157, 163], "9": [158, 159, 160, 163], "A": [3, 4, 47, 68, 114, 166, 171, 181], "And": [55, 57], "The": [37, 59, 68, 88, 171, 177, 192], "Then": 44, "aal": 199, "abid": 197, "access": [22, 191, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237], "accuraci": [3, 171], "across": 73, "action": 164, "actual": 71, "ad": [68, 179, 495], "add_contour": 16, "add_edg": 16, "add_mark": 16, "add_overlai": 21, "addit": 179, "adhd": [12, 64, 200, 480], "adjust": 25, "advanc": [100, 101, 116, 119, 192], "affin": [86, 190, 191], "after": [35, 91], "ag": [45, 54, 77, 102], "aggreg": 103, "agreement": [228, 286], "al": [34, 40, 42, 43, 44], "algorithm": 178, "all": [2, 15, 171], "allen": 201, "along": 16, "alpha": [148, 163, 178], "also": [211, 212, 213, 214, 215, 216, 219], "altern": 170, "an": [6, 10, 11, 41, 47, 61, 67, 74, 88, 92, 95, 97, 170, 171, 179, 181, 495], "analys": 183, "analysi": [3, 6, 34, 38, 45, 58, 63, 64, 65, 67, 70, 76, 77, 83, 100, 103, 104, 106, 108, 109, 110, 112, 113, 116, 171, 174, 176, 180, 181, 202, 488], "analyz": [77, 182, 190], "anatom": [16, 17], "angl": 23, "ani": 174, "annot": [16, 121], "anoth": 191, "anova": [31, 36, 101, 171, 174], "answer": 179, "api": [132, 136, 163, 179, 187, 484], "appli": [27, 51, 120, 168, 191, 192], "applic": [103, 187], "apply_mask": 382, "approach": [103, 165], "ar": 68, "argument": [65, 104, 192], "armodel": 314, "around": [10, 54, 61], "arrai": [120, 191], "assign": 164, "asymmetr": 50, "atla": [10, 11, 21, 22, 23, 50, 54, 55, 57, 59, 61, 88, 89, 102, 114, 166, 179, 199, 201, 202, 205, 206, 208, 209, 217, 220, 225, 229, 230, 231, 232, 233, 236, 237], "atlas": [22, 50, 166, 179, 194, 495], "attribut": 179, "auditori": 234, "auto": 164, "automat": [65, 104, 120, 194], "avail": [495, 499], "averag": 61, "ax": 489, "axial": 16, "background": [14, 18, 91], "bag": 172, "bar": [34, 495], "barplot": 37, "basc": 202, "base": [12, 24, 34, 39, 45, 46, 59, 70, 77, 103, 113, 169, 180, 184, 228], "baseax": 392, "baselin": 188, "basemask": 371, "baseslic": 393, "basic": [1, 4, 5, 11, 68, 116], "behavior": [3, 31, 35, 190], "benchmark": 164, "benefit": 26, "beta": [103, 143, 148, 163, 171], "better": [169, 177, 192], "between": [66, 183], "bibliographi": 118, "bid": [65, 104, 113, 203, 365, 366, 367, 480, 485], "binari": [41, 111], "binarize_img": 344, "bio": 45, "black": 14, "bold": [39, 181], "bootstrap": 202, "both": [15, 73], "bound": 178, "brain": [9, 14, 15, 17, 20, 27, 30, 43, 45, 50, 51, 52, 53, 54, 59, 61, 85, 93, 100, 102, 116, 166, 168, 169, 170, 175, 189, 191, 486, 489, 495], "brainom": 204, "break": 88, "browser": [10, 23, 55, 57, 61], "bug": [136, 139, 146, 163, 179], "build": [25, 35, 37, 43, 57, 96, 120, 164, 166, 179, 188], "butterworth": 468, "cach": 164, "calcul": [24, 71, 110], "canica": [51, 170, 312], "carpet": 12, "case": [179, 191], "cat": 3, "censor": 68, "chair": 33, "chanc": [3, 101, 171, 174], "chang": [18, 68, 101, 127, 128, 129, 130, 131, 132, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 153, 154, 156, 157, 158, 159, 160, 161, 163, 192], "changelog": [122, 123, 124, 125, 136, 137, 139, 163, 179], "check": [104, 496], "check_design_matrix": 328, "check_gha_workflow": 164, "children": 54, "choic": 171, "choos": [10, 13, 103, 171, 172], "ci": 164, "circl": 164, "circle_artifact": 164, "circle_ci_token": 164, "cite": 0, "class": [37, 41, 172, 193, 195, 196, 482, 486, 489, 491, 492, 494], "classif": [54, 102, 172], "classifi": [32, 176], "clean": 469, "clean_arg": [372, 373, 374, 375, 376, 377, 378, 457], "clean_img": 345, "close": 188, "cluster": [52, 71, 78, 168, 202], "cluster_level_infer": 322, "code": [132, 163, 168, 171, 173, 176, 179, 188, 191, 495], "coeffici": 53, "collect": 121, "color": 13, "colorbar": 17, "colormap": [11, 13, 495], "column": 16, "combin": 112, "comment": 164, "commit": [164, 179], "common": 192, "compar": [26, 41, 50, 51, 52, 73, 87, 103, 165, 176, 489], "comparison": [10, 173, 181, 184], "compat": 291, "complet": 65, "compon": [107, 108, 170, 485], "compress": [52, 168], "comput": [8, 29, 36, 37, 38, 39, 48, 53, 55, 56, 59, 61, 62, 73, 75, 84, 91, 96, 99, 112, 115, 117, 120, 165, 166, 169, 180, 191, 192, 497], "compute_background_mask": 383, "compute_brain_mask": 384, "compute_contrast": 323, "compute_epi_mask": 385, "compute_fixed_effect": 324, "compute_multi_background_mask": 386, "compute_multi_brain_mask": 387, "compute_multi_epi_mask": 388, "compute_regressor": 329, "concat_img": 346, "concept": 192, "conclus": [68, 111], "condit": [103, 198, 279], "conduct": 179, "confound": [59, 68, 192], "confus": [33, 37], "connect": [24, 49, 50, 54, 59, 60, 88, 102, 103, 114, 116, 165, 167, 169, 193], "connected_label_region": 458, "connected_region": 459, "connectivitymeasur": 239, "connectom": [23, 28, 50, 53, 55, 56, 61, 165, 166, 193, 239, 240, 241, 242, 243, 244, 245, 246, 495], "contain": 176, "content": [197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 498], "continu": [164, 179], "contour": [11, 15, 26, 495], "contrast": [18, 64, 65, 68, 70, 71, 73, 180, 315], "contribut": 179, "contributor": [0, 136, 138, 141, 145, 148, 149, 150, 151, 152, 153, 163], "control": [18, 164, 174, 192], "convert": 41, "coord_transform": 347, "coordin": [16, 50, 61, 166], "copi": 105, "copy_img": 348, "core": 0, "coron": 16, "correct": 184, "correl": [53, 54, 57, 58, 59, 61, 66, 165, 166], "correspond": [27, 55, 57], "cortic": [23, 39, 495], "cours": 64, "cov_to_corr": 242, "covari": [55, 56, 165, 178], "craddock": 205, "creat": [7, 47, 66, 80, 111, 191], "criteria": 178, "criterion": 178, "crop_img": 349, "cross": [3, 31, 36, 37, 41, 101, 107, 171, 174, 176, 178], "css": 179, "csv": 190, "custom": [23, 192], "cut": [14, 16], "cutax": 394, "cutoff": 192, "cylind": 25, "data": [3, 4, 6, 7, 10, 11, 12, 14, 15, 18, 23, 24, 26, 27, 31, 32, 34, 35, 37, 42, 43, 44, 45, 47, 50, 51, 52, 55, 57, 58, 59, 60, 64, 68, 70, 72, 73, 77, 91, 96, 101, 103, 106, 107, 112, 120, 165, 168, 170, 171, 174, 176, 181, 190, 191, 192, 228, 286, 487, 489, 494], "dataset": [2, 6, 12, 18, 19, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 51, 52, 53, 54, 56, 61, 64, 65, 67, 77, 78, 81, 82, 102, 104, 106, 109, 110, 113, 164, 169, 173, 178, 179, 190, 194, 197, 200, 207, 210, 218, 221, 222, 224, 227, 234, 235, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304], "decid": 179, "decis": 179, "decod": [3, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 44, 46, 101, 103, 114, 116, 171, 173, 174, 175, 177, 195, 305, 306, 307, 308, 309, 310, 311], "decoderregressor": 306, "decomposit": [108, 196, 312, 313], "decreas": [18, 190], "default": [21, 61, 64, 89], "defin": [44, 59, 66, 69, 103], "definit": [171, 192], "demo": [15, 114, 221], "depend": 496, "deploi": [164, 188], "deriv": [12, 51, 68, 194], "descript": [120, 178, 194], "design": [66, 68, 79, 80, 103, 180, 192], "destrieux": [23, 206], "detail": [198, 279], "detect": 6, "determinist": 194, "dev": [161, 163], "develop": [0, 51, 52, 53, 54, 61, 102, 207, 496], "dictionari": [51, 53, 169, 170], "dictlearn": 313, "differ": [15, 23, 32, 34, 36, 37, 47, 50, 88, 165, 172, 183, 192, 495], "difumo": 208, "dim": 18, "dimens": [105, 171], "direct": [50, 165], "disclaim": 198, "discrimin": 101, "discuss": 179, "disk": [65, 77], "displai": [10, 16, 23, 24, 55, 56, 57, 59, 61, 81, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 495], "distribut": [71, 188], "dmn": 61, "do": [179, 181], "doc": [164, 188], "document": [164, 179, 188, 499], "dosenbach": [61, 209], "download": [2, 3, 52, 101, 120, 121, 190], "draw": 25, "drift": 68, "drop": 496, "dtype": 192, "dualiti": 178, "dummi": 101, "each": [10, 35], "easi": 171, "edg": [16, 495], "effect": [6, 73, 183], "empir": 173, "empti": 480, "encod": 43, "engin": 101, "enhanc": [18, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 142, 143, 144, 145, 146, 148, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 163, 179, 227], "ensembl": 173, "environ": 179, "epi": [17, 91], "error": 44, "estim": [43, 47, 60, 61, 64, 65, 68, 70, 78, 79, 81, 82, 101, 104, 171, 172, 174, 178, 179], "et": [34, 40, 42, 43, 44], "event": [35, 74, 180], "exampl": [4, 35, 42, 47, 66, 69, 70, 73, 79, 80, 94, 104, 113, 116, 121, 132, 163, 165, 166, 168, 170, 171, 176, 177, 186, 187, 191, 192, 239, 241, 248, 250, 251, 253, 254, 255, 256, 257, 260, 261, 263, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 292, 293, 294, 295, 296, 298, 299, 301, 302, 304, 305, 306, 307, 308, 309, 311, 312, 313, 322, 324, 327, 329, 330, 334, 340, 341, 342, 343, 345, 346, 347, 350, 351, 352, 353, 355, 356, 357, 358, 360, 361, 362, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 385, 390, 391, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 455, 457, 458, 459, 465, 466, 471, 472, 473, 474, 475, 476, 479, 480, 481, 495], "execut": 178, "exercis": [47, 165, 166, 192], "expans": 190, "experi": [42, 120, 171], "experiment": [6, 80], "explicitli": 23, "expression_to_contrast_vector": 325, "extra": 192, "extract": [3, 24, 27, 35, 50, 53, 54, 55, 56, 57, 58, 59, 61, 64, 71, 89, 90, 91, 93, 165, 166, 169, 170, 180, 191, 192, 486], "f": [6, 38, 71], "f_score": 176, "face": [3, 31, 32, 33, 38, 39, 106], "fals": 98, "fashion": 16, "fast": 173, "fcontrastresult": 316, "fdr_threshold": 326, "featur": [3, 16, 41, 101, 136, 139, 163, 171, 186, 480], "fetch": [12, 21, 27, 28, 35, 50, 53, 56, 65, 72, 78, 81, 82, 104, 112, 113, 169, 190, 194], "fetch_abide_pcp": 247, "fetch_adhd": 248, "fetch_atlas_a": 249, "fetch_atlas_allen_2011": 250, "fetch_atlas_basc_multiscale_2015": 251, "fetch_atlas_craddock_2012": 252, "fetch_atlas_destrieux_2009": 253, "fetch_atlas_difumo": 254, "fetch_atlas_harvard_oxford": 255, "fetch_atlas_juelich": 256, "fetch_atlas_msdl": 257, "fetch_atlas_pauli_2017": 258, "fetch_atlas_schaefer_2018": 259, "fetch_atlas_smith_2009": 260, "fetch_atlas_surf_destrieux": 261, "fetch_atlas_talairach": 262, "fetch_atlas_yeo_2011": 263, "fetch_bids_langloc_dataset": 264, "fetch_coords_dosenbach_2010": 265, "fetch_coords_power_2011": 266, "fetch_coords_seitzman_2018": 267, "fetch_development_fmri": 268, "fetch_ds000030_url": 269, "fetch_fiac_first_level": 270, "fetch_haxbi": 271, "fetch_icbm152_2009": 272, "fetch_icbm152_brain_gm_mask": 273, "fetch_language_localizer_demo_dataset": 274, "fetch_localizer_button_task": 275, "fetch_localizer_calculation_task": 276, "fetch_localizer_contrast": 277, "fetch_localizer_first_level": 278, "fetch_megatrawls_netmat": 279, "fetch_mixed_gambl": 280, "fetch_miyawaki2008": 281, "fetch_neurovault": 282, "fetch_neurovault_auditory_computation_task": 283, "fetch_neurovault_id": 284, "fetch_neurovault_motor_task": 285, "fetch_oasis_vbm": 286, "fetch_openneuro_dataset": 287, "fetch_spm_auditori": 288, "fetch_spm_multimodal_fmri": 289, "fetch_surf_fsaverag": 290, "fetch_surf_nki_enhanc": 291, "fetcher": [23, 179], "few": [103, 171], "fiac": [210, 480], "field": 43, "figur": [107, 188, 489], "file": [2, 4, 16, 31, 59, 74, 190, 495], "filemesh": 471, "fill": [15, 495], "filter": [121, 192], "final": 171, "find": [96, 176, 187], "find_cut_slic": 422, "find_parcellation_cut_coord": 423, "find_probabilistic_atlas_cut_coord": 424, "find_xyz_cut_coord": 425, "finit": 67, "fir": 67, "first": [3, 4, 44, 63, 64, 65, 68, 70, 101, 103, 104, 113, 116, 171, 180, 187, 192, 210, 222, 480], "first_level": [327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 482], "first_level_from_bid": 330, "firstlevelmodel": [35, 65, 104, 327], "fisher": 58, "fit": [31, 33, 35, 36, 42, 46, 65, 71, 72, 73, 104, 170, 180, 184], "fix": [73, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 183], "fixtur": 179, "flexibl": 59, "fmri": [3, 6, 37, 51, 52, 54, 61, 67, 70, 73, 78, 81, 82, 101, 102, 108, 111, 165, 166, 171, 181, 182, 207], "fmrib": 183, "fmriprep": [59, 368, 369, 485], "format": [7, 11, 190], "formula": 105, "frem": [33, 42, 173], "fremclassifi": 307, "fremregressor": 308, "from": [2, 3, 12, 16, 23, 25, 28, 30, 35, 42, 43, 44, 51, 52, 53, 59, 61, 65, 91, 93, 96, 101, 103, 105, 109, 110, 116, 120, 121, 166, 175, 190, 191, 192, 485, 486], "fsaverag": 211, "fsaverage3": 212, "fsaverage4": 213, "fsaverage5": 214, "fsaverage6": 215, "fsl": [183, 370, 485], "full": [165, 166, 171], "function": [16, 17, 20, 24, 26, 44, 47, 49, 50, 53, 54, 57, 69, 102, 103, 116, 165, 166, 167, 169, 170, 174, 176, 179, 191, 193, 194, 482, 483, 485, 487, 488, 489, 491, 492, 493, 494, 495], "fund": 0, "further": [7, 47, 101, 120, 174, 176], "gambl": [42, 173, 223], "gap": 178, "gener": [35, 47, 64, 73, 74, 79, 107, 118, 188, 194, 482], "get": [25, 58, 71, 107, 179], "get_bids_fil": 365, "get_clusters_t": 466, "get_data": 350, "get_data_dir": 292, "get_design_from_fslmat": 370, "get_projector": 420, "get_slic": 421, "github": [164, 188], "given": [16, 191], "glass": [14, 15, 17], "glassbrainax": 395, "glm": [6, 26, 35, 63, 73, 76, 116, 181, 182, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 480, 482], "glob": [4, 190], "global": [12, 59], "glossari": 185, "glover_dispersion_deriv": 331, "glover_hrf": 332, "glover_time_deriv": 333, "go": [47, 101, 112, 120, 174], "goe": 179, "good": 171, "graph": [55, 57, 61, 166], "grid": 178, "group": [20, 51, 54, 56, 102, 113, 165, 178], "group_sparse_covari": 243, "groupsparsecovari": 240, "groupsparsecovariancecv": 241, "guid": 498, "guidelin": 179, "handl": 2, "harvard": [11, 217], "haxbi": [3, 19, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 101, 106, 171, 173, 218], "hcp": 198, "header": 105, "help": [179, 187], "hemispher": [14, 15], "hemodynam": 68, "here": [17, 44], "hierarch": 52, "hierarchicalkmean": 454, "high_variance_confound": [351, 470], "higher": [10, 68], "highlight": [126, 127, 129, 130, 131, 132, 133, 134, 135, 143, 144, 145, 148, 151, 154, 155, 156, 157, 158, 160, 161, 163], "hour": 496, "hous": [31, 32, 33, 38, 39, 106], "how": [179, 188, 192], "hrf": 180, "html": 179, "htmlreport": 465, "human": 28, "hyperparamet": 41, "i": [3, 7, 54, 102, 181, 187, 190, 192], "ica": [51, 107, 170], "icbm": 219, "idea": 179, "illustr": 25, "imag": [3, 4, 7, 9, 10, 16, 17, 18, 26, 30, 70, 83, 85, 87, 92, 95, 97, 98, 100, 105, 107, 111, 112, 114, 116, 120, 121, 175, 190, 191, 192, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 483, 486, 489, 495], "img_comparison": [426, 427], "img_to_signals_label": 460, "img_to_signals_map": 461, "impact": [10, 59], "implement": 3, "import": [71, 496], "improv": 96, "impul": 67, "increas": 173, "independ": 108, "index": 111, "index_img": 352, "individu": 191, "infer": 45, "inflat": 23, "inform": 176, "initi": [73, 178], "inmemorymesh": 472, "input": [105, 190], "inspect": [3, 6, 72], "instal": [179, 496], "instanti": 35, "instead": [372, 373, 374, 375, 376, 377, 378, 457], "integr": [164, 179], "interact": [17, 165, 166, 489, 495], "interest": [10, 96], "interfac": [59, 365, 366, 367, 368, 369, 370, 485], "internet": [2, 190], "interpret": 170, "intersect_mask": 389, "intro": 6, "introduct": [3, 171, 181, 187], "invers": [55, 56, 165, 192], "inverse_transform": 120, "issu": [149, 163, 188], "iter": [50, 178], "iter_img": 353, "its": [11, 25], "itself": 44, "jimura": 42, "juelich": [11, 220], "kfold": 3, "kind": [54, 102], "kmean": 52, "known": [149, 163], "l1": 42, "label": [3, 12, 41, 59, 88, 188, 481], "languag": [203, 221], "larg": 111, "largest": 71, "largest_connected_component_img": 354, "latest": 496, "lean": 101, "learn": [0, 37, 41, 51, 52, 53, 101, 114, 120, 169, 170, 174, 187, 192], "leav": 3, "left": 15, "let": 44, "level": [3, 63, 64, 65, 68, 70, 76, 78, 79, 80, 81, 82, 83, 101, 104, 113, 116, 165, 171, 174, 180, 184, 210, 222, 480], "librari": 183, "licens": [197, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237], "like": [112, 190], "likelihoodmodelresult": 317, "linear": [172, 482], "link": [165, 496], "linkcheck": 164, "load": [3, 7, 14, 15, 19, 23, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 50, 51, 54, 59, 77, 96, 101, 102, 106, 120, 168, 171, 190, 192, 485], "load_confound": 368, "load_confounds_strategi": 369, "load_fsaverag": 293, "load_fsaverage_data": 294, "load_img": 355, "load_mni152_brain_mask": 295, "load_mni152_gm_mask": 296, "load_mni152_gm_templ": 297, "load_mni152_templ": 298, "load_mni152_wm_mask": 299, "load_mni152_wm_templ": 300, "load_nki": 301, "load_sample_motor_activation_imag": 302, "load_surf_data": 477, "load_surf_mesh": 478, "local": [18, 74, 109, 110, 203, 204, 221, 222], "locat": 25, "long": 111, "look": [4, 11], "loop": [2, 3], "lprojector": 396, "lrprojector": 397, "lsa": 103, "lss": 103, "lyrprojector": 398, "lyrzprojector": 399, "lzrprojector": 400, "lzryprojector": 401, "machin": [3, 120, 187], "made": 171, "mainten": [179, 188], "make": [10, 17, 34, 179, 188], "make_first_level_design_matrix": 334, "make_glm_report": 467, "make_second_level_design_matrix": 341, "manipul": [4, 85, 116, 189, 191, 494], "manual": [3, 96, 119, 188, 191], "map": [6, 10, 13, 17, 18, 22, 32, 43, 45, 46, 50, 51, 58, 90, 96, 103, 107, 112, 121, 169, 171, 173, 177, 183, 184, 194, 223, 226, 228, 481, 495], "marker": [45, 495], "mask": [12, 16, 17, 19, 26, 27, 34, 38, 44, 68, 91, 96, 101, 106, 107, 111, 114, 120, 171, 174, 176, 191, 192, 382, 383, 384, 385, 386, 387, 388, 389, 390, 487], "masker": [24, 114, 192, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 481, 486], "mass": [45, 488], "mass_univari": [391, 488], "massiv": [45, 106, 109, 110, 176], "match": [190, 191], "math_img": [92, 105, 356], "matplotlib": [13, 36], "matric": [28, 56, 66, 103, 169, 192, 198], "matrix": [3, 33, 37, 52, 55, 57, 59, 61, 80, 114, 165, 166, 180], "maximum": 178, "maxprob": 166, "mean": [87, 181, 183], "mean_img": 357, "mean_scal": 335, "measur": [3, 50, 101, 171, 174], "megatrawl": [28, 198], "memori": [111, 190], "mesh": [7, 10, 25, 495], "messag": 164, "meta": 112, "method": [52, 120], "min_siz": 88, "minu": 112, "mix": [42, 173, 223], "miyawaki": [43, 44, 224], "mni": [91, 219, 272, 273, 295, 296, 297, 298, 299, 300], "mode": [21, 61, 64, 88, 89, 495], "model": [3, 43, 45, 65, 67, 68, 69, 71, 72, 73, 77, 78, 79, 81, 82, 103, 104, 113, 170, 172, 173, 174, 180, 181, 184, 482], "modifi": [105, 178], "modul": [66, 71, 74], "monitor": 179, "more": [16, 18, 174], "morphometri": [45, 46, 77, 184, 228], "mosaicslic": [16, 402], "most": [54, 71, 102], "motion": 59, "motor": 109, "movi": [168, 169], "mri": 69, "msdl": [21, 54, 102, 225], "multi": [37, 41, 56, 170, 172], "multimod": 235, "multiniftilabelsmask": [192, 372], "multiniftimapsmask": [192, 373], "multiniftimask": [192, 374], "multipl": [4, 10, 16, 165, 181, 184, 192], "multiscal": [20, 202], "multivari": [108, 196], "mvpa": 175, "name": 190, "nativ": 72, "negat": 92, "nest": 36, "net": 46, "network": [28, 53, 61, 64, 89, 170, 198], "neuroimag": [27, 120, 172, 187, 190, 192], "neurospin": 74, "neurosynth": 121, "neurovault": [107, 112, 121, 226], "new": [127, 128, 129, 130, 136, 138, 139, 140, 141, 148, 149, 150, 151, 154, 155, 156, 157, 158, 160, 161, 163, 188], "new_img_lik": 358, "nifti": [3, 58, 190, 191, 481], "niftilabelsmask": [93, 192, 375], "niftimapsmask": [192, 376], "niftimask": [91, 94, 111, 192, 377], "niftispheresmask": [192, 378], "nightly_depend": 164, "niimg": [2, 190], "nilearn": [0, 4, 13, 14, 15, 16, 17, 22, 170, 171, 179, 186, 187, 189, 193, 194, 195, 196, 219, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 485, 486, 487, 488, 489, 491, 492, 493, 494, 496, 499], "nilearn_data": 190, "nki": 227, "node": 10, "nois": 68, "non": 120, "non_parametric_infer": 342, "norm": 178, "note": [197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237], "now": [37, 55, 57], "number": [16, 178], "numer": [5, 178], "numpi": 111, "oasi": [45, 46, 77, 228], "object": [16, 21, 31, 33, 36, 65, 104, 170, 179, 190, 192], "obtain": [31, 65, 104], "ol": [68, 106], "olsmodel": 318, "one": [2, 53, 65, 81, 191], "onli": [16, 53, 192], "opaqu": 26, "open": [190, 192], "openneuro": 65, "oper": [191, 491], "optim": 41, "option": 15, "order": 68, "organ": 188, "origin": 88, "orthoprojector": 403, "orthoslic": [16, 404], "other": [0, 22, 26, 174], "our": [4, 44], "out": 3, "outlin": [10, 16], "output": [65, 77, 121, 190], "over": [4, 12, 50], "overlai": [16, 495], "own": [11, 120], "oxford": [11, 217], "page": [165, 166, 169, 170, 180, 183, 184], "pair": 82, "panda": 190, "paradigm": [6, 80, 112], "parallel": 111, "paramet": [10, 36, 64, 66, 68, 69, 70, 88, 101, 103, 165, 172, 174, 192], "parametr": [66, 74, 183], "parcel": [20, 23, 50, 52, 59, 166, 168, 169, 455], "parse_bids_filenam": 366, "part": 26, "partial": [54, 61], "patch_openneuro_dataset": 303, "path": 190, "pattern": [12, 47], "pauli": 229, "pcp": 197, "percentil": 36, "perform": [6, 58, 64, 70, 83, 101, 106, 171, 173, 174, 179], "permut": [101, 106], "permuted_ol": 391, "phenotyp": 190, "philosophi": 192, "pial": 23, "pipelin": [31, 35, 36, 41, 114, 119, 120, 173, 174, 192], "plot": [3, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 25, 26, 33, 34, 36, 37, 47, 50, 53, 58, 61, 68, 69, 71, 82, 112, 114, 188, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 489, 495], "plot_anat": [17, 428], "plot_bland_altman": 426, "plot_carpet": 429, "plot_connectom": 430, "plot_contrast_matrix": 431, "plot_design_matrix": 432, "plot_design_matrix_correl": 433, "plot_epi": [17, 434], "plot_ev": 435, "plot_glass_brain": [17, 436], "plot_img": 437, "plot_img_comparison": 427, "plot_img_on_surf": 438, "plot_mark": 439, "plot_matrix": 440, "plot_prob_atla": [21, 441], "plot_roi": [17, 442], "plot_stat_map": [17, 21, 443], "plot_surf": 444, "plot_surf_contour": 445, "plot_surf_roi": 446, "plot_surf_stat_map": [447, 495], "plotlysurfacefigur": 405, "point": [25, 192], "polici": 188, "polydata": 473, "polymesh": 474, "posit": 78, "post": 188, "power": [54, 102, 230], "pr": 179, "pre": 179, "prec_to_parti": 244, "precis": 56, "predefin": 59, "predict": [3, 30, 31, 36, 37, 44, 45, 46, 71, 101, 102, 116, 171, 172, 175, 180], "prepar": [34, 37, 38, 44, 64, 70, 83, 103, 171, 176, 188, 191, 192], "preprocess": [41, 45, 73, 120, 194, 202, 493], "primer": 181, "principl": [176, 178], "prior": 46, "privat": 179, "probabilist": [21, 22, 50, 57, 166, 194], "process": 483, "produc": 58, "project": [15, 28, 70, 179, 188], "projector": 489, "proper": 35, "proport": 78, "protocol": 112, "pull": [179, 188], "put": 171, "pypi": 188, "python": [5, 190], "qualiti": [45, 46, 96], "quantifi": 44, "question": 179, "quick": 104, "quickstart": 496, "r": 71, "radiu": 176, "rang": 73, "raw": 91, "rc": [148, 163], "read": [7, 176, 190], "recept": 43, "recognit": [33, 38, 47, 106], "recommend": 179, "reconstruct": 44, "recursive_neighbor_agglomer": 462, "reduct": 171, "refer": [3, 23, 24, 26, 33, 34, 39, 40, 43, 44, 47, 50, 51, 52, 54, 59, 61, 74, 78, 101, 102, 103, 106, 121, 165, 166, 168, 169, 170, 171, 172, 173, 176, 177, 178, 185, 187, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 484], "region": [10, 53, 54, 56, 57, 64, 88, 89, 90, 93, 96, 166, 168, 169, 192, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 491], "regionextractor": 457, "regress": 172, "regressionresult": 319, "regressor": 66, "regular": 173, "relabel": 88, "relat": [170, 177], "releas": [188, 496], "remov": [59, 68, 192], "rena": [52, 456], "reorder_img": 359, "report": [35, 61, 64, 65, 73, 179, 465, 466, 467, 480, 481, 492], "repositori": 121, "represent": [52, 168, 190], "request": [179, 188], "resampl": [86, 91, 95, 191, 192, 483], "resample_img": 360, "resample_to_img": 361, "reshap": 107, "residu": [71, 180], "resiz": 192, "resolut": [10, 191, 192], "respons": [36, 39, 67, 68, 69], "rest": [165, 166, 167], "restart": 178, "restrict": [3, 38, 39, 106], "result": [4, 24, 26, 31, 34, 41, 53, 56, 65, 72, 77, 82, 83, 120, 168, 169, 170, 171], "retriev": [3, 6, 11, 18, 20, 24, 31, 55, 57, 59, 61, 68, 101], "return": 16, "review": 179, "right": [15, 17, 103, 172], "robust": 173, "roi": [17, 24, 34, 54, 96, 191], "row": 16, "rprojector": 406, "run": [6, 35, 44, 47, 68, 72, 73, 107, 174, 181], "run_glm": 336, "sagitt": [14, 16], "sampl": [10, 25, 69, 81, 82], "saniti": 104, "save": [4, 7, 16, 58, 65, 77, 495], "save_glm_to_bid": 367, "savefig": 16, "scale": [119, 495], "schaefer": 231, "scheme": 25, "scikit": [0, 37, 41, 101, 114, 120, 174, 192], "scipi": 291, "scope": 179, "score": [3, 6, 31, 36, 37, 38, 43, 176], "screen": 36, "script": 171, "scrub": 59, "search": 178, "searchlight": [38, 39, 176, 309], "second": [76, 78, 79, 80, 81, 82, 83, 104, 113, 116, 184, 480], "second_level": [340, 341, 342, 482], "secondlevelmodel": 340, "see": [211, 212, 213, 214, 215, 216, 219], "seed": [16, 24, 58, 61, 64, 179, 192], "seitzman": 232, "select": [2, 41, 101, 121, 165, 171], "select_from_index": 304, "separ": [12, 88], "seri": [24, 27, 55, 57, 58, 61, 71, 91, 103, 111, 166, 180, 192, 493], "set": [17, 23, 36, 73, 111, 172, 174, 176, 179], "sever": 172, "shape": [190, 191], "share": 111, "short": 114, "show": [40, 103, 448], "side": 17, "signal": [35, 54, 56, 57, 59, 61, 93, 166, 192, 468, 469, 470, 486, 493], "signals_to_img_label": 463, "signals_to_img_map": 464, "signific": [6, 71], "simpl": [4, 34, 47, 65, 73, 80, 83, 94, 171], "simpleregressionresult": 320, "simul": [47, 60, 165, 174], "singl": [6, 16, 58, 72], "size": 191, "slice": [16, 47, 495], "slicer": 489, "smith": [89, 233], "smooth": [4, 68, 97, 191, 192], "smooth_img": 362, "softwar": 183, "some": 83, "sourceri": 164, "space": [46, 72, 165], "spacenet": [42, 46, 177], "spacenetclassifi": 310, "spacenetregressor": 311, "spars": [55, 56, 165, 178], "spatial": [51, 173, 177, 191], "special": 191, "specif": [53, 73, 121, 164, 191], "specifi": 6, "sphere": [61, 176, 481], "spm": [176, 183, 234, 235], "spm_dispersion_deriv": 337, "spm_hrf": 338, "spm_time_deriv": 339, "squar": 71, "stabil": 178, "stabl": [188, 202], "standard": 103, "state": 167, "statist": [6, 10, 17, 65, 73, 83, 90, 96, 100, 112, 116, 121, 181, 183, 184, 194, 223, 226, 495], "step": [4, 187, 192], "stimuli": [40, 43, 44], "stimulu": 69, "stop": [112, 178], "store": 190, "strategi": [37, 59, 171, 192], "strength": 61, "structur": [35, 60, 177, 179], "studi": [3, 54, 101, 107, 112, 173], "style": 179, "subject": [6, 54, 56, 58, 65, 72, 81, 113, 165, 170, 192], "success": 112, "summar": 34, "summari": [61, 136, 163, 165, 166, 169, 170, 180, 183, 184], "support": 3, "surfac": [7, 10, 23, 24, 25, 39, 70, 113, 114, 132, 163, 180, 192, 227, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 494, 495], "surfaceimag": 475, "surfacelabelsmask": [114, 192, 379], "surfacemapsmask": [192, 380], "surfacemask": [192, 381], "surfacemesh": 476, "svc": 101, "svm": [3, 31, 101, 171, 174], "swap_img_hemispher": 363, "sym_matrix_to_vec": 245, "synthet": 178, "t": [83, 90], "t_map": 81, "tabl": [11, 498], "talairach": 236, "tangent": 165, "target": 191, "task": [74, 103, 109, 110], "tcontrastresult": 321, "team": 0, "technic": [25, 198, 279], "templat": [91, 95, 194, 211, 212, 213, 214, 215, 219, 272, 273, 295, 296, 297, 298, 299, 300], "tempor": 192, "term": [107, 198, 279], "test": [6, 71, 81, 82, 83, 96, 101, 179, 188], "test_atlas": 164, "test_with_free_threaded_python": 164, "test_with_tox": 164, "testing_instal": 164, "testing_minimum": 164, "text": 190, "them": 188, "thi": 96, "those": 52, "three": [16, 103], "threshold": [6, 17, 26, 65, 98, 184], "threshold_img": 364, "threshold_stats_img": 343, "through": 2, "tiledslic": [16, 407], "time": [8, 12, 24, 27, 29, 48, 55, 57, 58, 61, 62, 64, 68, 71, 75, 84, 91, 99, 111, 115, 117, 166, 178, 180, 187, 192, 493, 497], "tissu": 12, "togeth": 171, "tool": [16, 17], "toolbox": 183, "top": 10, "total": 165, "tox": 188, "train": [32, 41], "transform": [58, 191, 192], "transpar": 26, "trial": 103, "trigger_hosting_on_pr": 164, "true": [78, 98], "tsv": 74, "tune": 101, "turn": [3, 52], "tutori": [1, 2, 3, 116], "tv": 42, "two": [16, 72, 73, 82, 172], "two_sid": 98, "type": 12, "u": 44, "understand": [41, 68, 91, 190, 192], "univari": [45, 106, 109, 110, 176, 488], "unmask": [120, 192, 390], "unpair": 82, "up": [11, 73, 119, 176, 179], "update_author": 164, "upload": 188, "us": [3, 10, 36, 37, 42, 51, 53, 54, 59, 73, 89, 90, 93, 94, 101, 111, 114, 121, 168, 169, 171, 174, 182, 187, 188, 190, 239, 241, 248, 250, 251, 253, 254, 255, 256, 257, 260, 261, 263, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 292, 293, 294, 295, 296, 298, 299, 301, 302, 304, 305, 306, 307, 308, 309, 311, 312, 313, 322, 324, 327, 329, 330, 334, 340, 341, 342, 343, 345, 346, 347, 350, 351, 352, 353, 355, 356, 357, 358, 360, 361, 362, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 385, 390, 391, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 455, 457, 458, 459, 465, 466, 471, 472, 473, 474, 475, 476, 479, 495], "usag": [119, 192, 228, 286], "user": [190, 498], "util": [483, 487], "v": [31, 32, 33, 38, 106], "valid": [3, 31, 36, 37, 41, 101, 169, 171, 174, 176, 178], "valu": [36, 178], "variabl": 54, "variat": 178, "vbm": [45, 46, 77], "vec_to_sym_matrix": 246, "vector": 3, "version": 496, "via": [31, 41, 164], "view": [10, 16, 23, 24, 72, 77], "view_connectom": 449, "view_img": [17, 450], "view_img_on_surf": [451, 495], "view_mark": 452, "view_surf": [453, 495], "visual": [2, 3, 9, 10, 11, 12, 17, 20, 21, 22, 23, 27, 28, 31, 32, 33, 38, 39, 42, 43, 44, 45, 46, 52, 55, 57, 61, 65, 83, 86, 101, 106, 112, 116, 120, 168, 169, 170, 171, 176, 192, 495], "vmax": 17, "vmin": 17, "vol_to_surf": [25, 479], "volum": [2, 3, 4, 10, 25, 27, 68, 85, 116, 189, 191, 192, 228, 480], "voxel": [6, 45, 46, 58, 77, 96, 176, 184, 191], "ward": 52, "warm": 178, "watch": [168, 169], "we": [34, 37, 44, 179, 181], "web": [10, 23, 55, 57, 61], "weight": [3, 33, 42, 101, 171], "what": [3, 7, 54, 102, 163, 179, 181, 187], "when": [18, 98, 190], "where": 190, "which": [25, 168], "who": 179, "whole": 14, "within": 61, "without": [17, 59, 98, 101, 171, 174], "work": [7, 111], "workflow": 164, "would": 25, "xprojector": 408, "xslicer": [16, 409], "xzprojector": 410, "xzslicer": [16, 411], "yeo": [50, 88, 237], "yml": 164, "your": [103, 120, 179], "yprojector": 412, "yslicer": [16, 413], "yxprojector": 414, "yxslicer": [16, 415], "yzprojector": 416, "yzslicer": [16, 417], "z": [6, 58, 112], "zprojector": 418, "zslicer": [16, 419]}})