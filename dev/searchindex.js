Search.setIndex({"alltitles": {"0.1.0": [[122, null], [163, "id6557"]], "0.1.1": [[123, null], [163, "id6388"]], "0.1.2": [[124, null], [163, "id6219"]], "0.1.3": [[125, null], [163, "id6049"]], "0.1.4": [[126, null], [163, "id5880"]], "0.10.0": [[127, null], [163, "id1548"]], "0.10.1": [[128, null], [163, "id1373"]], "0.10.1rc1": [[128, "rc1"], [163, "rc1"]], "0.10.2": [[129, null], [163, "id1200"]], "0.10.3": [[130, null], [163, "id1027"]], "0.10.4": [[131, null], [163, "id855"]], "0.11.0": [[132, null], [163, "id683"]], "0.11.1": [[133, null], [163, "id512"]], "0.12.0": [[134, null], [163, "id340"]], "0.12.1": [[135, null], [163, "id168"]], "0.13.0.dev": [[161, null], [163, "dev"]], "0.2.0": [[136, null], [163, "id5707"]], "0.2.1": [[137, null], [163, "v0-2-1"]], "0.2.2": [[138, null], [163, "id5532"]], "0.2.3": [[139, null], [163, "id5363"]], "0.2.4": [[140, null], [163, "id5193"]], "0.2.5": [[141, "id2"], [163, "id5023"]], "0.2.5.1": [[141, null], [163, "id5019"]], "0.2.6": [[142, null], [163, "id4848"]], "0.3.0": [[143, null], [163, "id4672"]], "0.3.0 beta": [[143, "beta"], [163, "id4676"]], "0.3.1": [[144, null], [163, "id4500"]], "0.4.0": [[145, null], [163, "id4327"]], "0.4.1": [[146, null], [163, "id4157"]], "0.4.2": [[147, null], [163, "id3987"]], "0.5.0": [[148, null], [163, "id3802"]], "0.5.0 alpha": [[148, "alpha"], [163, "alpha"]], "0.5.0 beta": [[148, "beta"], [163, "beta"]], "0.5.0 rc": [[148, "rc"], [163, "id3806"]], "0.5.1": [[149, null], [163, "id3630"]], "0.5.2": [[150, null], [163, "id3459"]], "0.6.0": [[151, null], [163, "id3273"]], "0.6.0a0": [[151, "a0"], [163, "a0"]], "0.6.0b0": [[151, "b0"], [163, "b0"]], "0.6.0rc": [[151, "rc"], [163, "rc"]], "0.6.1": [[152, null], [163, "id3102"]], "0.6.2": [[153, null], [163, "id2931"]], "0.7.0": [[154, null], [163, "id2758"]], "0.7.1": [[155, null], [163, "id2586"]], "0.8.0": [[156, null], [163, "id2413"]], "0.8.1": [[157, null], [163, "id2240"]], "0.9.0": [[158, null], [163, "id2067"]], "0.9.1": [[159, null], [163, "id1896"]], "0.9.2": [[160, null], [163, "id1721"]], "3D Plots of connectomes": [[507, "d-plots-of-connectomes"]], "3D Plots of markers": [[507, "d-plots-of-markers"]], "3D Plots of statistical maps or atlases on the cortical surface": [[507, "d-plots-of-statistical-maps-or-atlases-on-the-cortical-surface"]], "3D and 4D niimgs: handling and visualizing": [[2, null]], "3D visualization in a web browser": [[10, "d-visualization-in-a-web-browser"], [23, "d-visualization-in-a-web-browser"], [55, "d-visualization-in-a-web-browser"], [57, "d-visualization-in-a-web-browser"], [61, "d-visualization-in-a-web-browser"]], "A few definitions": [[171, "a-few-definitions"]], "A first contrast estimation and plotting": [[68, "a-first-contrast-estimation-and-plotting"]], "A first estimator": [[171, "a-first-estimator"]], "A first step: looking at our data": [[4, "a-first-step-looking-at-our-data"]], "A function to generate data": [[47, "a-function-to-generate-data"]], "A functional connectome: a graph of interactions": [[166, "a-functional-connectome-a-graph-of-interactions"]], "A functional connectome: extracting coordinates of regions": [[166, "a-functional-connectome-extracting-coordinates-of-regions"]], "A introduction tutorial to fMRI decoding": [[3, null]], "A primer on BOLD-fMRI data analysis": [[181, "a-primer-on-bold-fmri-data-analysis"]], "A short demo of the surface images & maskers": [[114, null]], "A simple function to plot slices": [[47, "a-simple-function-to-plot-slices"]], "AAL atlas": [[199, null]], "ABIDE PCP dataset": [[197, null]], "ADHD": [[491, "adhd"]], "ADHD dataset": [[200, null]], "ANOVA pipeline with Decoder object": [[31, "anova-pipeline-with-decoder-object"], [36, "anova-pipeline-with-decoder-object"]], "API References": [[495, null]], "API changes summary": [[136, "api-changes-summary"], [163, "api-changes-summary"]], "APIs of nilearn objects": [[179, "apis-of-nilearn-objects"]], "Access": [[197, "access"], [198, "access"], [199, "access"], [200, "access"], [201, "access"], [202, "access"], [204, "access"], [205, "access"], [206, "access"], [207, "access"], [208, "access"], [209, "access"], [210, "access"], [211, "access"], [212, "access"], [213, "access"], [214, "access"], [215, "access"], [217, "access"], [218, "access"], [219, "access"], [220, "access"], [221, "access"], [222, "access"], [223, "access"], [224, "access"], [225, "access"], [227, "access"], [228, "access"], [229, "access"], [230, "access"], [231, "access"], [232, "access"], [233, "access"], [234, "access"], [235, "access"], [236, "access"], [237, "access"]], "Accessing individual volumes in 4D images": [[191, "accessing-individual-volumes-in-4d-images"]], "Adding a time derivative to the design": [[68, "adding-a-time-derivative-to-the-design"]], "Adding atlases and datasets": [[179, "adding-atlases-and-datasets"]], "Adding overlays, edges, contours, contour fillings, markers, scale bar": [[507, "adding-overlays-edges-contours-contour-fillings-markers-scale-bar"]], "Additional cases": [[179, "additional-cases"]], "Adjust the sample locations": [[25, "adjust-the-sample-locations"]], "Advanced decoding using scikit learn": [[101, null]], "Advanced statistical analysis of brain images": [[100, null], [116, "advanced-statistical-analysis-of-brain-images"]], "Advanced usage: manual pipelines and scaling up": [[119, null]], "Advanced: Design philosophy of \u201cMaskers\u201d": [[192, null]], "Advanced: scikit-learn Pipelines": [[192, null]], "After mask computation: extracting time series": [[91, "after-mask-computation-extracting-time-series"]], "Aggregate beta maps from the LSA model based on condition": [[103, "aggregate-beta-maps-from-the-lsa-model-based-on-condition"]], "Allen 2011 atlas": [[201, null]], "An alternative to ICA: Dictionary learning": [[170, "an-alternative-to-ica-dictionary-learning"]], "An exercise to go further": [[47, "an-exercise-to-go-further"]], "An introduction to GLMs in fMRI statistical analysis": [[181, null]], "An introduction to decoding": [[171, null]], "Analysis of an fMRI dataset with a Finite Impule Response (FIR) model": [[67, null]], "Analyze data": [[77, "analyze-data"]], "Analyzing fMRI using GLMs": [[182, null]], "And now display the corresponding graph": [[55, "and-now-display-the-corresponding-graph"], [55, "id1"], [57, "and-now-display-the-corresponding-graph"]], "Annotate plots: annotate": [[16, "annotate-plots-annotate"]], "Answer questions": [[179, "answer-questions"]], "Applications of beta series": [[103, "applications-of-beta-series"]], "Apply CanICA on the data": [[51, "apply-canica-on-the-data"]], "Applying a mask": [[120, "applying-a-mask"]], "Applying a scikit-learn machine learning method": [[120, "applying-a-scikit-learn-machine-learning-method"]], "Applying clustering": [[168, "applying-clustering"]], "Applying the mask to extract the corresponding time series": [[27, "applying-the-mask-to-extract-the-corresponding-time-series"]], "Atlases": [[194, "atlases"]], "Automatically computing a mask": [[120, "automatically-computing-a-mask"]], "Available Colormaps": [[507, "available-colormaps"]], "Available documentation for Nilearn": [[511, null]], "Axes": [[500, "axes"]], "BASC multiscale atlas": [[202, null]], "BIDS dataset first and second level analysis": [[104, null]], "BIDS features": [[491, "bids-features"]], "BIDS language localizer": [[203, null]], "Bagging several models": [[172, "bagging-several-models"]], "Basic Atlas plotting": [[11, null]], "Basic nilearn example: manipulating and looking at data": [[4, null]], "Basic numerics and plotting with Python": [[5, null]], "Basic tutorials": [[1, null], [116, "basic-tutorials"]], "Benefits": [[26, null]], "Beta-Series Modeling for Task-Based Functional Connectivity and Decoding": [[103, null]], "Bootstrap Analysis of Stable Clusters": [[202, "bootstrap-analysis-of-stable-clusters"]], "Bounds on alpha": [[178, "bounds-on-alpha"]], "Brain mapping with mass univariate": [[45, "brain-mapping-with-mass-univariate"]], "Brain maps using Dictionary learning": [[169, "brain-maps-using-dictionary-learning"]], "Brain parcellations": [[166, "brain-parcellations"]], "Brain parcellations with Hierarchical KMeans Clustering": [[52, "brain-parcellations-with-hierarchical-kmeans-clustering"]], "Brain parcellations with KMeans Clustering": [[52, "brain-parcellations-with-kmeans-clustering"]], "Brain parcellations with ReNA Clustering": [[52, "brain-parcellations-with-rena-clustering"]], "Brain parcellations with Ward Clustering": [[52, "brain-parcellations-with-ward-clustering"]], "Brainomics Localizer": [[204, null]], "Breaking an atlas of labels in separated regions": [[88, null]], "Bug fixes": [[136, "bug-fixes"], [139, "bug-fixes"], [146, "bug-fixes"], [163, "bug-fixes"], [163, "id5364"], [163, "id5711"]], "Build a mask from this statistical map (Improving the quality of the mask)": [[96, "build-a-mask-from-this-statistical-map-improving-the-quality-of-the-mask"]], "Build a mesh (of a cylinder)": [[25, "build-a-mesh-of-a-cylinder"]], "Build a proper event structure for each run": [[35, "build-a-proper-event-structure-for-each-run"]], "Build a statistical test to find voxels of interest": [[96, "build-a-statistical-test-to-find-voxels-of-interest"]], "Build and deploy the documentation manually": [[188, "build-and-deploy-the-documentation-manually"]], "Build and display a correlation matrix": [[57, "build-and-display-a-correlation-matrix"]], "Build of stable docs": [[188, "build-of-stable-docs"]], "Build the decoders, using scikit-learn": [[37, "build-the-decoders-using-scikit-learn"]], "Build the decoding pipeline": [[35, "build-the-decoding-pipeline"]], "Build the distributions and upload them to Pypi": [[188, "build-the-distributions-and-upload-them-to-pypi"]], "Building documentation": [[179, "building-documentation"]], "Building the encoding models": [[43, "building-the-encoding-models"]], "Building your own neuroimaging machine-learning pipeline": [[120, null]], "CHANGES": [[151, "changes"], [163, "id3277"]], "CIRCLE_CI_TOKEN": [[164, null]], "Calculate and Plot F-test": [[71, "calculate-and-plot-f-test"]], "Calculate and plot contrast": [[71, "calculate-and-plot-contrast"]], "Calculating seed-based functional connectivity": [[24, "calculating-seed-based-functional-connectivity"]], "Changelog": [[122, "changelog"], [123, "changelog"], [124, "changelog"], [125, "changelog"], [136, "changelog"], [137, "changelog"], [139, "changelog"], [163, "changelog"], [163, "id5539"], [163, "id5708"], [163, "id6050"], [163, "id6220"], [163, "id6389"], [163, "id6558"], [179, "changelog"]], "Changes": [[127, "changes"], [128, "changes"], [128, "id4"], [129, "changes"], [130, "changes"], [131, "changes"], [132, "changes"], [134, "changes"], [135, "changes"], [138, "changes"], [140, "changes"], [141, "changes"], [142, "changes"], [143, "changes"], [143, "id2"], [144, "changes"], [145, "changes"], [146, "changes"], [147, "changes"], [148, "changes"], [148, "id3"], [148, "id6"], [148, "id10"], [149, "changes"], [151, "id3"], [151, "id7"], [151, "id11"], [153, "changes"], [154, "changes"], [156, "changes"], [157, "changes"], [158, "changes"], [159, "changes"], [160, "changes"], [161, "changes"], [163, "changes"], [163, "id172"], [163, "id344"], [163, "id687"], [163, "id859"], [163, "id1032"], [163, "id1205"], [163, "id1377"], [163, "id1380"], [163, "id1553"], [163, "id1728"], [163, "id1899"], [163, "id2072"], [163, "id2245"], [163, "id2418"], [163, "id2763"], [163, "id2934"], [163, "id3280"], [163, "id3285"], [163, "id3289"], [163, "id3632"], [163, "id3805"], [163, "id3809"], [163, "id3814"], [163, "id3818"], [163, "id3988"], [163, "id4159"], [163, "id4331"], [163, "id4502"], [163, "id4673"], [163, "id4678"], [163, "id4851"], [163, "id5020"], [163, "id5195"], [163, "id5536"]], "Changing the drift model": [[68, "changing-the-drift-model"]], "Changing the feature selection": [[101, "changing-the-feature-selection"]], "Changing the hemodynamic response model": [[68, "changing-the-hemodynamic-response-model"]], "Changing the prediction engine": [[101, "changing-the-prediction-engine"]], "Check installation": [[508, "check-installation"]], "Choice of the prediction accuracy measure": [[171, "choice-of-the-prediction-accuracy-measure"]], "Choosing a good cross-validation strategy": [[171, "choosing-a-good-cross-validation-strategy"]], "Choosing colormaps": [[13, "choosing-colormaps"]], "Choosing the right model for your analysis": [[103, null]], "Choosing the right predictive model for neuroimaging": [[172, null]], "Circle-CI workflows": [[164, "circle-ci-workflows"]], "Citing nilearn": [[0, "citing-nilearn"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Classes": [[193, "classes"], [195, "classes"], [196, "classes"], [493, "classes"], [493, "id1"], [493, "id3"], [497, "classes"], [500, "classes"], [502, "classes"], [503, "classes"], [505, "classes"]], "Classification of age groups using functional connectivity": [[54, null]], "Classification: two classes or multi-class": [[172, "classification-two-classes-or-multi-class"]], "Classifier": [[176, "classifier"]], "Closing policy": [[188, "closing-policy"]], "Clustering methods to learn a brain parcellation from fMRI": [[52, null]], "Clustering to parcellate the brain in regions": [[168, null]], "Code": [[173, null], [173, null], [191, null]], "Code examples": [[132, null], [163, null], [507, null]], "Code of Conduct": [[179, "code-of-conduct"]], "Coding Style": [[179, "coding-style"]], "Colormaps in Nilearn": [[13, null]], "Common data preparation steps: smoothing, filtering, resampling": [[192, "common-data-preparation-steps-smoothing-filtering-resampling"]], "Compare CanICA to dictionary learning": [[51, "compare-canica-to-dictionary-learning"]], "Compare Hierarchical Kmeans clusters with those from Kmeans": [[52, "compare-hierarchical-kmeans-clusters-with-those-from-kmeans"]], "Compare run-specific and fixed effects contrasts": [[73, "compare-run-specific-and-fixed-effects-contrasts"]], "Compare the results": [[41, "compare-the-results"]], "Compare the three modeling approaches": [[103, "compare-the-three-modeling-approaches"]], "Comparing connectomes on different reference atlases": [[50, null]], "Comparing images": [[500, "comparing-images"]], "Comparing the different approaches on simulated data": [[165, "comparing-the-different-approaches-on-simulated-data"]], "Comparing the means of 2 images": [[87, null]], "Comparing to massively univariate analysis: F_score or SPM": [[176, "comparing-to-massively-univariate-analysis-f-score-or-spm"]], "Comparing transparent and opaque thresholding": [[26, "comparing-transparent-and-opaque-thresholding"]], "Compressed representation": [[168, "compressed-representation"]], "Compressed representation of ReNA clustering": [[52, "compressed-representation-of-rena-clustering"]], "Compressed representation of Ward clustering": [[52, "compressed-representation-of-ward-clustering"]], "Computation times": [[8, null], [29, null], [48, null], [62, null], [75, null], [84, null], [99, null], [115, null], [117, null], [509, null]], "Compute a range of contrasts across both runs": [[73, "compute-a-range-of-contrasts-across-both-runs"]], "Compute and display a correlation matrix": [[59, "compute-and-display-a-correlation-matrix"]], "Compute and resample a mask": [[91, "compute-and-resample-a-mask"]], "Compute correlation coefficients": [[53, "compute-correlation-coefficients"]], "Compute fixed effects statistics using preprocessed data of both runs": [[73, "compute-fixed-effects-statistics-using-preprocessed-data-of-both-runs"]], "Compute partial correlation matrix": [[61, "compute-partial-correlation-matrix"]], "Compute prediction scores with different values of screening percentile": [[36, "compute-prediction-scores-with-different-values-of-screening-percentile"]], "Compute statistics": [[112, "compute-statistics"]], "Compute the sparse inverse covariance": [[55, "compute-the-sparse-inverse-covariance"]], "Compute within spheres averaged time-series": [[61, "compute-within-spheres-averaged-time-series"]], "Computing a Region of Interest (ROI) mask manually": [[96, null]], "Computing a connectome with sparse inverse covariance": [[55, null]], "Computing a mask from raw EPI data": [[91, "computing-a-mask-from-raw-epi-data"]], "Computing a mask from the background": [[91, "computing-a-mask-from-the-background"]], "Computing and applying spatial masks": [[191, "computing-and-applying-spatial-masks"]], "Computing contrasts": [[180, "computing-contrasts"]], "Computing functional connectivity matrices": [[169, "computing-functional-connectivity-matrices"]], "Computing group-sparse precision matrices": [[56, "computing-group-sparse-precision-matrices"]], "Computing the mask from the MNI template": [[91, "computing-the-mask-from-the-mni-template"]], "Conclusion": [[68, "conclusion"], [111, "conclusion"]], "Connectivity structure estimation on simulated data": [[60, null]], "Connectivity with a surface atlas and SurfaceLabelsMasker": [[114, "connectivity-with-a-surface-atlas-and-surfacelabelsmasker"]], "Connectome extracted from Dosenbach\u2019s atlas": [[61, "connectome-extracted-from-dosenbach-s-atlas"]], "Connectome extraction: inverse covariance for direct connections": [[165, null]], "Content": [[197, "content"], [198, "content"], [199, "content"], [200, "content"], [201, "content"], [202, "content"], [204, "content"], [205, "content"], [206, "content"], [207, "content"], [208, "content"], [209, "content"], [210, "content"], [211, "content"], [212, "content"], [213, "content"], [214, "content"], [215, "content"], [216, null], [217, "content"], [218, "content"], [219, "content"], [220, "content"], [221, "content"], [222, "content"], [223, "content"], [224, "content"], [225, "content"], [226, "content"], [227, "content"], [228, "content"], [229, "content"], [230, "content"], [231, "content"], [232, "content"], [233, "content"], [234, "content"], [235, "content"], [236, "content"], [237, "content"]], "Continuous integration": [[164, null], [179, "continuous-integration"]], "Contour projections in both hemispheres": [[15, "contour-projections-in-both-hemispheres"]], "Contours and with fillings": [[15, "contours-and-with-fillings"]], "Contribute code": [[179, "contribute-code"]], "Contributing": [[179, null], [179, "id5"]], "Contribution Guidelines": [[179, "contribution-guidelines"]], "Contributors": [[136, "contributors"], [138, "contributors"], [141, "contributors"], [145, "contributors"], [148, "contributors"], [148, "id7"], [148, "id11"], [149, "contributors"], [150, "contributors"], [151, "contributors"], [151, "id9"], [151, "id13"], [152, "contributors"], [153, "contributors"], [163, "contributors"], [163, "id3105"], [163, "id3282"], [163, "id3287"], [163, "id3291"], [163, "id3462"], [163, "id3634"], [163, "id3810"], [163, "id3815"], [163, "id3819"], [163, "id4332"], [163, "id5025"], [163, "id5537"], [163, "id5712"]], "Control via commit message": [[164, null], [164, null]], "Controlling how the mask is computed from the data": [[192, "controlling-how-the-mask-is-computed-from-the-data"]], "Controlling the contrast of the background when plotting": [[18, null]], "Convert the multi-class labels to binary labels": [[41, "convert-the-multi-class-labels-to-binary-labels"]], "Coordinates of Default Mode Network": [[61, "coordinates-of-default-mode-network"]], "Copying headers from input images with math_img": [[105, null]], "Core developers": [[0, "core-developers"]], "Correlation between regressors": [[66, "correlation-between-regressors"]], "Cortical surface-based searchlight decoding": [[39, null]], "Craddock 2012 atlas": [[205, null]], "Create a large fMRI image": [[111, "create-a-large-fmri-image"]], "Create a second level design matrix": [[80, "create-a-second-level-design-matrix"]], "Create a set of binary masks": [[111, "create-a-set-of-binary-masks"]], "Create a simple experimental paradigm": [[80, "create-a-simple-experimental-paradigm"]], "Create data": [[47, "create-data"]], "Create design matrices": [[66, "create-design-matrices"]], "Creating a surface image": [[7, "creating-a-surface-image"]], "Cross validation": [[176, "cross-validation"]], "Cross-validation": [[171, "cross-validation"]], "Cross-validation algorithm": [[178, "cross-validation-algorithm"]], "Cross-validation with scikit-learn": [[101, "cross-validation-with-scikit-learn"], [174, "cross-validation-with-scikit-learn"]], "Cross-validation with the decoder": [[3, "cross-validation-with-the-decoder"]], "Custom data loading: loading only the first 100 time points": [[192, "custom-data-loading-loading-only-the-first-100-time-points"]], "Data": [[7, "data"]], "Data Usage Agreement": [[228, null], [286, null]], "Data fetcher": [[23, "data-fetcher"]], "Data format": [[7, "data-format"]], "Data loading and preprocessing": [[120, "data-loading-and-preprocessing"]], "Data loading: movie-watching data": [[168, "data-loading-movie-watching-data"]], "Dataset caching": [[164, "dataset-caching"]], "Dataset formatting: data shape": [[190, null]], "Datasets descriptions": [[194, "datasets-descriptions"]], "Decode via the Decoder": [[41, "decode-via-the-decoder"]], "Decoding and MVPA: predicting from brain images": [[175, null]], "Decoding and predicting from brain images": [[30, null], [116, "decoding-and-predicting-from-brain-images"]], "Decoding made easy": [[171, "decoding-made-easy"]], "Decoding of a dataset after GLM fit for signal extraction": [[35, null]], "Decoding on simulated data": [[174, null]], "Decoding on the different masks": [[34, "decoding-on-the-different-masks"]], "Decoding performance increase on Haxby dataset": [[173, "decoding-performance-increase-on-haxby-dataset"]], "Decoding with ANOVA + SVM: face vs house in the Haxby dataset": [[31, null]], "Decoding with FREM: face vs house vs chair object recognition": [[33, null]], "Decoding with Support Vector Machine": [[3, "decoding-with-support-vector-machine"]], "Decoding with a scikit-learn Pipeline": [[114, "decoding-with-a-scikit-learn-pipeline"]], "Decoding without a mask: Anova-SVM": [[171, "decoding-without-a-mask-anova-svm"]], "Decoding without a mask: Anova-SVM in scikit-lean": [[101, "decoding-without-a-mask-anova-svm-in-scikit-lean"]], "Decoding without a mask: Anova-SVM using scikit-learn": [[174, "decoding-without-a-mask-anova-svm-using-scikit-learn"]], "Decreasing memory used when loading Nifti images": [[190, null]], "Default Mode Network extraction of ADHD dataset": [[64, null]], "Define parameters": [[66, "define-parameters"]], "Define stimulus parameters and response models": [[69, "define-stimulus-parameters-and-response-models"]], "Define the LSA model": [[103, "define-the-lsa-model"]], "Define the LSS models": [[103, "define-the-lss-models"]], "Define the standard model": [[103, "define-the-standard-model"]], "Demo glass brain plotting": [[15, "demo-glass-brain-plotting"]], "Dependencies": [[508, "dependencies"]], "Deriving a label-based mask": [[12, "deriving-a-label-based-mask"]], "Deriving a mask": [[12, "deriving-a-mask"]], "Deriving spatial maps from group fMRI data using ICA and Dictionary Learning": [[51, null]], "Description": [[178, "description"]], "Design matrix: event-based and time series-based": [[180, "design-matrix-event-based-and-time-series-based"]], "Destrieux atlas": [[206, null]], "Destrieux parcellation on inflated surface with different views": [[23, "destrieux-parcellation-on-inflated-surface-with-different-views"]], "Destrieux parcellation on pial surface": [[23, "destrieux-parcellation-on-pial-surface"]], "Destrieux parcellation with custom view: explicitly set angle": [[23, "destrieux-parcellation-with-custom-view-explicitly-set-angle"]], "Detecting voxels with significant effects": [[6, "detecting-voxels-with-significant-effects"]], "Deterministic atlases": [[194, "deterministic-atlases"]], "Development": [[508, "development"]], "Development version": [[508, "development-version"]], "DiFuMo atlas": [[208, null]], "Difference in meanings between different toolboxes": [[183, null]], "Different classifiers in decoding the Haxby dataset": [[32, null]], "Different connectivity modes": [[88, "different-connectivity-modes"]], "Different display modes": [[507, "different-display-modes"]], "Different linear models": [[172, "different-linear-models"]], "Different masking strategies": [[192, "different-masking-strategies"]], "Different plotting functions": [[507, "different-plotting-functions"]], "Different projections for the left and right hemispheres": [[15, "different-projections-for-the-left-and-right-hemispheres"]], "Dimension reduction with feature selection": [[171, "dimension-reduction-with-feature-selection"]], "Disclaimer": [[198, "disclaimer"]], "Display ROI on surface": [[24, "display-roi-on-surface"]], "Display connectome": [[61, "display-connectome"]], "Display connectome from surface parcellation": [[23, "display-connectome-from-surface-parcellation"]], "Display objects returned by plotting functions": [[16, "display-objects-returned-by-plotting-functions"]], "Display object\u2019s features": [[16, "display-object-s-features"]], "Display outlines of the regions of interest on top of a statistical map": [[10, "display-outlines-of-the-regions-of-interest-on-top-of-a-statistical-map"]], "Display spheres summary report": [[61, "display-spheres-summary-report"]], "Display subject t_maps": [[81, "display-subject-t-maps"]], "Display the connectome matrix": [[55, "display-the-connectome-matrix"]], "Display the sparse inverse covariance": [[55, "display-the-sparse-inverse-covariance"]], "Display time series": [[61, "display-time-series"]], "Displaying or saving to an image file": [[507, "displaying-or-saving-to-an-image-file"]], "Displaying results": [[56, "displaying-results"]], "Documentation": [[179, "documentation"]], "Documentation build and deploy": [[164, "documentation-build-and-deploy"]], "Documentation style": [[179, "documentation-style"]], "Dosenbach 2010 atlas": [[209, null]], "Download a brain development fMRI dataset and turn it to a data matrix": [[52, "download-a-brain-development-fmri-dataset-and-turn-it-to-a-data-matrix"]], "Downloading statistical maps from the Neurovault repository": [[121, null]], "Downloading the data": [[120, "downloading-the-data"]], "Downloading tutorial datasets from Internet": [[2, "downloading-tutorial-datasets-from-internet"]], "Drop-in Hours": [[508, "drop-in-hours"]], "Duality gap": [[178, "duality-gap"]], "Dummy estimator": [[101, "dummy-estimator"]], "ENHANCEMENTS": [[148, "enhancements"], [151, "enhancements"], [152, "enhancements"], [153, "enhancements"], [163, "id2932"], [163, "id3103"], [163, "id3276"], [163, "id3804"]], "Empirical comparisons": [[173, "empirical-comparisons"]], "Encoding models for visual stimuli from Miyawaki et al. 2008": [[43, null]], "Enhancements": [[127, "enhancements"], [128, "enhancements"], [128, "id3"], [129, "enhancements"], [130, "enhancements"], [131, "enhancements"], [132, "enhancements"], [133, "enhancements"], [134, "enhancements"], [135, "enhancements"], [136, "enhancements"], [138, "enhancements"], [142, "enhancements"], [143, "enhancements"], [143, "id4"], [144, "enhancements"], [145, "enhancements"], [146, "enhancements"], [148, "id2"], [148, "id5"], [148, "id9"], [155, "enhancements"], [156, "enhancements"], [157, "enhancements"], [158, "enhancements"], [159, "enhancements"], [160, "enhancements"], [161, "enhancements"], [163, "enhancements"], [163, "id171"], [163, "id343"], [163, "id515"], [163, "id686"], [163, "id858"], [163, "id1031"], [163, "id1204"], [163, "id1376"], [163, "id1379"], [163, "id1552"], [163, "id1727"], [163, "id1898"], [163, "id2071"], [163, "id2244"], [163, "id2417"], [163, "id2590"], [163, "id3808"], [163, "id3812"], [163, "id3817"], [163, "id4158"], [163, "id4329"], [163, "id4504"], [163, "id4675"], [163, "id4680"], [163, "id4850"], [163, "id5534"], [163, "id5710"]], "Estimate contrasts": [[64, "estimate-contrasts"], [70, "estimate-contrasts"]], "Estimate correlations": [[61, "estimate-correlations"]], "Estimate second level model": [[78, "estimate-second-level-model"], [79, "estimate-second-level-model"], [81, "estimate-second-level-model"]], "Estimate second level models": [[82, "estimate-second-level-models"]], "Estimated Attributes": [[179, "estimated-attributes"]], "Estimating receptive fields": [[43, "estimating-receptive-fields"]], "Event-based": [[180, "event-based"]], "Example": [[191, null]], "Example code": [[168, null], [176, null]], "Example of MRI response functions": [[69, null]], "Example of generic design in second-level models": [[79, null]], "Example of pattern recognition on simulated data": [[47, null]], "Example of second level design matrix": [[80, null]], "Example of surface-based first-level analysis": [[70, null]], "Example use of TV-L1 SpaceNet": [[42, "example-use-of-tv-l1-spacenet"]], "Examples": [[116, null], [191, null], [192, null], [192, null], [192, null], [192, null], [192, null], [192, null]], "Examples nifti masker reports": [[492, null]], "Examples of GLM reports": [[491, null]], "Examples of design matrices": [[66, null]], "Examples surface masker reports": [[492, "examples-surface-masker-reports"]], "Examples to better understand the NiftiMasker": [[192, null]], "Examples using Neurovault": [[121, "examples-using-neurovault"]], "Examples using nilearn.connectome.ConnectivityMeasure": [[240, "examples-using-nilearn-connectome-connectivitymeasure"]], "Examples using nilearn.connectome.GroupSparseCovarianceCV": [[242, "examples-using-nilearn-connectome-groupsparsecovariancecv"]], "Examples using nilearn.datasets.fetch_adhd": [[249, "examples-using-nilearn-datasets-fetch-adhd"]], "Examples using nilearn.datasets.fetch_atlas_allen_2011": [[251, "examples-using-nilearn-datasets-fetch-atlas-allen-2011"]], "Examples using nilearn.datasets.fetch_atlas_basc_multiscale_2015": [[252, "examples-using-nilearn-datasets-fetch-atlas-basc-multiscale-2015"]], "Examples using nilearn.datasets.fetch_atlas_destrieux_2009": [[254, "examples-using-nilearn-datasets-fetch-atlas-destrieux-2009"]], "Examples using nilearn.datasets.fetch_atlas_difumo": [[255, "examples-using-nilearn-datasets-fetch-atlas-difumo"]], "Examples using nilearn.datasets.fetch_atlas_harvard_oxford": [[256, "examples-using-nilearn-datasets-fetch-atlas-harvard-oxford"]], "Examples using nilearn.datasets.fetch_atlas_juelich": [[257, "examples-using-nilearn-datasets-fetch-atlas-juelich"]], "Examples using nilearn.datasets.fetch_atlas_msdl": [[258, "examples-using-nilearn-datasets-fetch-atlas-msdl"]], "Examples using nilearn.datasets.fetch_atlas_smith_2009": [[261, "examples-using-nilearn-datasets-fetch-atlas-smith-2009"]], "Examples using nilearn.datasets.fetch_atlas_surf_destrieux": [[262, "examples-using-nilearn-datasets-fetch-atlas-surf-destrieux"]], "Examples using nilearn.datasets.fetch_atlas_yeo_2011": [[264, "examples-using-nilearn-datasets-fetch-atlas-yeo-2011"]], "Examples using nilearn.datasets.fetch_coords_dosenbach_2010": [[265, "examples-using-nilearn-datasets-fetch-coords-dosenbach-2010"]], "Examples using nilearn.datasets.fetch_coords_power_2011": [[266, "examples-using-nilearn-datasets-fetch-coords-power-2011"]], "Examples using nilearn.datasets.fetch_development_fmri": [[268, "examples-using-nilearn-datasets-fetch-development-fmri"]], "Examples using nilearn.datasets.fetch_ds000030_urls": [[269, "examples-using-nilearn-datasets-fetch-ds000030-urls"]], "Examples using nilearn.datasets.fetch_fiac_first_level": [[270, "examples-using-nilearn-datasets-fetch-fiac-first-level"]], "Examples using nilearn.datasets.fetch_haxby": [[271, "examples-using-nilearn-datasets-fetch-haxby"]], "Examples using nilearn.datasets.fetch_icbm152_2009": [[272, "examples-using-nilearn-datasets-fetch-icbm152-2009"]], "Examples using nilearn.datasets.fetch_icbm152_brain_gm_mask": [[273, "examples-using-nilearn-datasets-fetch-icbm152-brain-gm-mask"]], "Examples using nilearn.datasets.fetch_language_localizer_demo_dataset": [[274, "examples-using-nilearn-datasets-fetch-language-localizer-demo-dataset"]], "Examples using nilearn.datasets.fetch_localizer_button_task": [[275, "examples-using-nilearn-datasets-fetch-localizer-button-task"]], "Examples using nilearn.datasets.fetch_localizer_calculation_task": [[276, "examples-using-nilearn-datasets-fetch-localizer-calculation-task"]], "Examples using nilearn.datasets.fetch_localizer_contrasts": [[277, "examples-using-nilearn-datasets-fetch-localizer-contrasts"]], "Examples using nilearn.datasets.fetch_localizer_first_level": [[278, "examples-using-nilearn-datasets-fetch-localizer-first-level"]], "Examples using nilearn.datasets.fetch_megatrawls_netmats": [[279, "examples-using-nilearn-datasets-fetch-megatrawls-netmats"]], "Examples using nilearn.datasets.fetch_mixed_gambles": [[280, "examples-using-nilearn-datasets-fetch-mixed-gambles"]], "Examples using nilearn.datasets.fetch_miyawaki2008": [[281, "examples-using-nilearn-datasets-fetch-miyawaki2008"]], "Examples using nilearn.datasets.fetch_neurovault": [[282, "examples-using-nilearn-datasets-fetch-neurovault"]], "Examples using nilearn.datasets.fetch_neurovault_auditory_computation_task": [[283, "examples-using-nilearn-datasets-fetch-neurovault-auditory-computation-task"]], "Examples using nilearn.datasets.fetch_neurovault_ids": [[284, "examples-using-nilearn-datasets-fetch-neurovault-ids"]], "Examples using nilearn.datasets.fetch_oasis_vbm": [[286, "examples-using-nilearn-datasets-fetch-oasis-vbm"]], "Examples using nilearn.datasets.fetch_openneuro_dataset": [[287, "examples-using-nilearn-datasets-fetch-openneuro-dataset"]], "Examples using nilearn.datasets.fetch_spm_auditory": [[288, "examples-using-nilearn-datasets-fetch-spm-auditory"]], "Examples using nilearn.datasets.fetch_spm_multimodal_fmri": [[289, "examples-using-nilearn-datasets-fetch-spm-multimodal-fmri"]], "Examples using nilearn.datasets.get_data_dirs": [[292, "examples-using-nilearn-datasets-get-data-dirs"]], "Examples using nilearn.datasets.load_fsaverage": [[293, "examples-using-nilearn-datasets-load-fsaverage"]], "Examples using nilearn.datasets.load_fsaverage_data": [[294, "examples-using-nilearn-datasets-load-fsaverage-data"]], "Examples using nilearn.datasets.load_mni152_brain_mask": [[295, "examples-using-nilearn-datasets-load-mni152-brain-mask"]], "Examples using nilearn.datasets.load_mni152_gm_mask": [[296, "examples-using-nilearn-datasets-load-mni152-gm-mask"]], "Examples using nilearn.datasets.load_mni152_template": [[298, "examples-using-nilearn-datasets-load-mni152-template"]], "Examples using nilearn.datasets.load_mni152_wm_mask": [[299, "examples-using-nilearn-datasets-load-mni152-wm-mask"]], "Examples using nilearn.datasets.load_nki": [[301, "examples-using-nilearn-datasets-load-nki"]], "Examples using nilearn.datasets.load_sample_motor_activation_image": [[302, "examples-using-nilearn-datasets-load-sample-motor-activation-image"]], "Examples using nilearn.datasets.select_from_index": [[304, "examples-using-nilearn-datasets-select-from-index"]], "Examples using nilearn.decoding.Decoder": [[305, "examples-using-nilearn-decoding-decoder"]], "Examples using nilearn.decoding.DecoderRegressor": [[306, "examples-using-nilearn-decoding-decoderregressor"]], "Examples using nilearn.decoding.FREMClassifier": [[307, "examples-using-nilearn-decoding-fremclassifier"]], "Examples using nilearn.decoding.FREMRegressor": [[308, "examples-using-nilearn-decoding-fremregressor"]], "Examples using nilearn.decoding.SearchLight": [[309, "examples-using-nilearn-decoding-searchlight"]], "Examples using nilearn.decoding.SpaceNetRegressor": [[311, "examples-using-nilearn-decoding-spacenetregressor"]], "Examples using nilearn.decomposition.CanICA": [[312, "examples-using-nilearn-decomposition-canica"]], "Examples using nilearn.decomposition.DictLearning": [[313, "examples-using-nilearn-decomposition-dictlearning"]], "Examples using nilearn.glm.cluster_level_inference": [[327, "examples-using-nilearn-glm-cluster-level-inference"]], "Examples using nilearn.glm.compute_fixed_effects": [[329, "examples-using-nilearn-glm-compute-fixed-effects"]], "Examples using nilearn.glm.first_level.FirstLevelModel": [[332, "examples-using-nilearn-glm-first-level-firstlevelmodel"]], "Examples using nilearn.glm.first_level.compute_regressor": [[334, "examples-using-nilearn-glm-first-level-compute-regressor"]], "Examples using nilearn.glm.first_level.first_level_from_bids": [[335, "examples-using-nilearn-glm-first-level-first-level-from-bids"]], "Examples using nilearn.glm.first_level.make_first_level_design_matrix": [[339, "examples-using-nilearn-glm-first-level-make-first-level-design-matrix"]], "Examples using nilearn.glm.save_glm_to_bids": [[345, "examples-using-nilearn-glm-save-glm-to-bids"]], "Examples using nilearn.glm.second_level.SecondLevelModel": [[346, "examples-using-nilearn-glm-second-level-secondlevelmodel"]], "Examples using nilearn.glm.second_level.make_second_level_design_matrix": [[347, "examples-using-nilearn-glm-second-level-make-second-level-design-matrix"]], "Examples using nilearn.glm.second_level.non_parametric_inference": [[348, "examples-using-nilearn-glm-second-level-non-parametric-inference"]], "Examples using nilearn.glm.threshold_stats_img": [[349, "examples-using-nilearn-glm-threshold-stats-img"]], "Examples using nilearn.image.clean_img": [[351, "examples-using-nilearn-image-clean-img"]], "Examples using nilearn.image.concat_imgs": [[352, "examples-using-nilearn-image-concat-imgs"]], "Examples using nilearn.image.coord_transform": [[353, "examples-using-nilearn-image-coord-transform"]], "Examples using nilearn.image.get_data": [[356, "examples-using-nilearn-image-get-data"]], "Examples using nilearn.image.high_variance_confounds": [[357, "examples-using-nilearn-image-high-variance-confounds"]], "Examples using nilearn.image.index_img": [[358, "examples-using-nilearn-image-index-img"]], "Examples using nilearn.image.iter_img": [[359, "examples-using-nilearn-image-iter-img"]], "Examples using nilearn.image.load_img": [[361, "examples-using-nilearn-image-load-img"]], "Examples using nilearn.image.math_img": [[362, "examples-using-nilearn-image-math-img"]], "Examples using nilearn.image.mean_img": [[363, "examples-using-nilearn-image-mean-img"]], "Examples using nilearn.image.new_img_like": [[364, "examples-using-nilearn-image-new-img-like"]], "Examples using nilearn.image.resample_img": [[366, "examples-using-nilearn-image-resample-img"]], "Examples using nilearn.image.resample_to_img": [[367, "examples-using-nilearn-image-resample-to-img"]], "Examples using nilearn.image.smooth_img": [[368, "examples-using-nilearn-image-smooth-img"]], "Examples using nilearn.image.threshold_img": [[370, "examples-using-nilearn-image-threshold-img"]], "Examples using nilearn.interfaces.fmriprep.load_confounds": [[373, "examples-using-nilearn-interfaces-fmriprep-load-confounds"]], "Examples using nilearn.interfaces.fmriprep.load_confounds_strategy": [[374, "examples-using-nilearn-interfaces-fmriprep-load-confounds-strategy"]], "Examples using nilearn.interfaces.fsl.get_design_from_fslmat": [[375, "examples-using-nilearn-interfaces-fsl-get-design-from-fslmat"]], "Examples using nilearn.maskers.BaseMasker": [[376, "examples-using-nilearn-maskers-basemasker"]], "Examples using nilearn.maskers.MultiNiftiLabelsMasker": [[377, "examples-using-nilearn-maskers-multiniftilabelsmasker"]], "Examples using nilearn.maskers.MultiNiftiMapsMasker": [[378, "examples-using-nilearn-maskers-multiniftimapsmasker"]], "Examples using nilearn.maskers.MultiNiftiMasker": [[379, "examples-using-nilearn-maskers-multiniftimasker"]], "Examples using nilearn.maskers.NiftiLabelsMasker": [[383, "examples-using-nilearn-maskers-niftilabelsmasker"]], "Examples using nilearn.maskers.NiftiMapsMasker": [[384, "examples-using-nilearn-maskers-niftimapsmasker"]], "Examples using nilearn.maskers.NiftiMasker": [[385, "examples-using-nilearn-maskers-niftimasker"]], "Examples using nilearn.maskers.NiftiSpheresMasker": [[386, "examples-using-nilearn-maskers-niftispheresmasker"]], "Examples using nilearn.maskers.SurfaceLabelsMasker": [[387, "examples-using-nilearn-maskers-surfacelabelsmasker"]], "Examples using nilearn.maskers.SurfaceMasker": [[389, "examples-using-nilearn-maskers-surfacemasker"]], "Examples using nilearn.masking.apply_mask": [[390, "examples-using-nilearn-masking-apply-mask"]], "Examples using nilearn.masking.compute_epi_mask": [[393, "examples-using-nilearn-masking-compute-epi-mask"]], "Examples using nilearn.masking.unmask": [[398, "examples-using-nilearn-masking-unmask"]], "Examples using nilearn.mass_univariate.permuted_ols": [[399, "examples-using-nilearn-mass-univariate-permuted-ols"]], "Examples using nilearn.plotting.displays.LProjector": [[404, "examples-using-nilearn-plotting-displays-lprojector"]], "Examples using nilearn.plotting.displays.LRProjector": [[405, "examples-using-nilearn-plotting-displays-lrprojector"]], "Examples using nilearn.plotting.displays.LYRProjector": [[406, "examples-using-nilearn-plotting-displays-lyrprojector"]], "Examples using nilearn.plotting.displays.LYRZProjector": [[407, "examples-using-nilearn-plotting-displays-lyrzprojector"]], "Examples using nilearn.plotting.displays.LZRProjector": [[408, "examples-using-nilearn-plotting-displays-lzrprojector"]], "Examples using nilearn.plotting.displays.LZRYProjector": [[409, "examples-using-nilearn-plotting-displays-lzryprojector"]], "Examples using nilearn.plotting.displays.MosaicSlicer": [[410, "examples-using-nilearn-plotting-displays-mosaicslicer"]], "Examples using nilearn.plotting.displays.OrthoProjector": [[411, "examples-using-nilearn-plotting-displays-orthoprojector"]], "Examples using nilearn.plotting.displays.OrthoSlicer": [[412, "examples-using-nilearn-plotting-displays-orthoslicer"]], "Examples using nilearn.plotting.displays.PlotlySurfaceFigure": [[413, "examples-using-nilearn-plotting-displays-plotlysurfacefigure"]], "Examples using nilearn.plotting.displays.RProjector": [[414, "examples-using-nilearn-plotting-displays-rprojector"]], "Examples using nilearn.plotting.displays.TiledSlicer": [[415, "examples-using-nilearn-plotting-displays-tiledslicer"]], "Examples using nilearn.plotting.displays.XProjector": [[416, "examples-using-nilearn-plotting-displays-xprojector"]], "Examples using nilearn.plotting.displays.XSlicer": [[417, "examples-using-nilearn-plotting-displays-xslicer"]], "Examples using nilearn.plotting.displays.XZProjector": [[418, "examples-using-nilearn-plotting-displays-xzprojector"]], "Examples using nilearn.plotting.displays.XZSlicer": [[419, "examples-using-nilearn-plotting-displays-xzslicer"]], "Examples using nilearn.plotting.displays.YProjector": [[420, "examples-using-nilearn-plotting-displays-yprojector"]], "Examples using nilearn.plotting.displays.YSlicer": [[421, "examples-using-nilearn-plotting-displays-yslicer"]], "Examples using nilearn.plotting.displays.YXProjector": [[422, "examples-using-nilearn-plotting-displays-yxprojector"]], "Examples using nilearn.plotting.displays.YXSlicer": [[423, "examples-using-nilearn-plotting-displays-yxslicer"]], "Examples using nilearn.plotting.displays.YZProjector": [[424, "examples-using-nilearn-plotting-displays-yzprojector"]], "Examples using nilearn.plotting.displays.YZSlicer": [[425, "examples-using-nilearn-plotting-displays-yzslicer"]], "Examples using nilearn.plotting.displays.ZProjector": [[426, "examples-using-nilearn-plotting-displays-zprojector"]], "Examples using nilearn.plotting.displays.ZSlicer": [[427, "examples-using-nilearn-plotting-displays-zslicer"]], "Examples using nilearn.plotting.find_parcellation_cut_coords": [[431, "examples-using-nilearn-plotting-find-parcellation-cut-coords"]], "Examples using nilearn.plotting.find_probabilistic_atlas_cut_coords": [[432, "examples-using-nilearn-plotting-find-probabilistic-atlas-cut-coords"]], "Examples using nilearn.plotting.find_xyz_cut_coords": [[433, "examples-using-nilearn-plotting-find-xyz-cut-coords"]], "Examples using nilearn.plotting.plot_anat": [[434, "examples-using-nilearn-plotting-plot-anat"]], "Examples using nilearn.plotting.plot_bland_altman": [[435, "examples-using-nilearn-plotting-plot-bland-altman"]], "Examples using nilearn.plotting.plot_carpet": [[436, "examples-using-nilearn-plotting-plot-carpet"]], "Examples using nilearn.plotting.plot_connectome": [[437, "examples-using-nilearn-plotting-plot-connectome"]], "Examples using nilearn.plotting.plot_contrast_matrix": [[438, "examples-using-nilearn-plotting-plot-contrast-matrix"]], "Examples using nilearn.plotting.plot_design_matrix": [[439, "examples-using-nilearn-plotting-plot-design-matrix"]], "Examples using nilearn.plotting.plot_design_matrix_correlation": [[440, "examples-using-nilearn-plotting-plot-design-matrix-correlation"]], "Examples using nilearn.plotting.plot_epi": [[441, "examples-using-nilearn-plotting-plot-epi"]], "Examples using nilearn.plotting.plot_event": [[442, "examples-using-nilearn-plotting-plot-event"]], "Examples using nilearn.plotting.plot_glass_brain": [[443, "examples-using-nilearn-plotting-plot-glass-brain"]], "Examples using nilearn.plotting.plot_img": [[444, "examples-using-nilearn-plotting-plot-img"]], "Examples using nilearn.plotting.plot_img_comparison": [[445, "examples-using-nilearn-plotting-plot-img-comparison"]], "Examples using nilearn.plotting.plot_img_on_surf": [[446, "examples-using-nilearn-plotting-plot-img-on-surf"]], "Examples using nilearn.plotting.plot_markers": [[447, "examples-using-nilearn-plotting-plot-markers"]], "Examples using nilearn.plotting.plot_matrix": [[448, "examples-using-nilearn-plotting-plot-matrix"]], "Examples using nilearn.plotting.plot_prob_atlas": [[449, "examples-using-nilearn-plotting-plot-prob-atlas"]], "Examples using nilearn.plotting.plot_roi": [[450, "examples-using-nilearn-plotting-plot-roi"]], "Examples using nilearn.plotting.plot_stat_map": [[451, "examples-using-nilearn-plotting-plot-stat-map"]], "Examples using nilearn.plotting.plot_surf": [[452, "examples-using-nilearn-plotting-plot-surf"]], "Examples using nilearn.plotting.plot_surf_contours": [[453, "examples-using-nilearn-plotting-plot-surf-contours"]], "Examples using nilearn.plotting.plot_surf_roi": [[454, "examples-using-nilearn-plotting-plot-surf-roi"]], "Examples using nilearn.plotting.plot_surf_stat_map": [[455, "examples-using-nilearn-plotting-plot-surf-stat-map"]], "Examples using nilearn.plotting.show": [[456, "examples-using-nilearn-plotting-show"]], "Examples using nilearn.plotting.view_connectome": [[457, "examples-using-nilearn-plotting-view-connectome"]], "Examples using nilearn.plotting.view_img": [[458, "examples-using-nilearn-plotting-view-img"]], "Examples using nilearn.plotting.view_img_on_surf": [[459, "examples-using-nilearn-plotting-view-img-on-surf"]], "Examples using nilearn.plotting.view_surf": [[461, "examples-using-nilearn-plotting-view-surf"]], "Examples using nilearn.regions.Parcellations": [[463, "examples-using-nilearn-regions-parcellations"]], "Examples using nilearn.regions.RegionExtractor": [[465, "examples-using-nilearn-regions-regionextractor"]], "Examples using nilearn.regions.connected_label_regions": [[466, "examples-using-nilearn-regions-connected-label-regions"]], "Examples using nilearn.regions.connected_regions": [[467, "examples-using-nilearn-regions-connected-regions"]], "Examples using nilearn.reporting.HTMLReport": [[473, "examples-using-nilearn-reporting-htmlreport"]], "Examples using nilearn.reporting.get_clusters_table": [[474, "examples-using-nilearn-reporting-get-clusters-table"]], "Examples using nilearn.surface.FileMesh": [[479, "examples-using-nilearn-surface-filemesh"]], "Examples using nilearn.surface.InMemoryMesh": [[480, "examples-using-nilearn-surface-inmemorymesh"]], "Examples using nilearn.surface.PolyData": [[481, "examples-using-nilearn-surface-polydata"]], "Examples using nilearn.surface.PolyMesh": [[482, "examples-using-nilearn-surface-polymesh"]], "Examples using nilearn.surface.SurfaceImage": [[483, "examples-using-nilearn-surface-surfaceimage"]], "Examples using nilearn.surface.SurfaceMesh": [[484, "examples-using-nilearn-surface-surfacemesh"]], "Examples using nilearn.surface.vol_to_surf": [[487, "examples-using-nilearn-surface-vol-to-surf"]], "Exceptions": [[239, "exceptions"]], "Execution time": [[178, "execution-time"]], "Exercise": [[192, null]], "Exercise: computing connectivity in tangent space": [[165, null]], "Exercise: computing sparse inverse covariance": [[165, null]], "Exercise: computing the correlation matrix of rest fmri": [[165, null], [166, null]], "Exercise: correlation matrix of rest fMRI on probabilistic atlas": [[166, null]], "Extra mask parameters: opening, cutoff\u2026": [[192, "extra-mask-parameters-opening-cutoff"]], "Extract coordinates on Yeo atlas - parcellations": [[50, "extract-coordinates-on-yeo-atlas-parcellations"]], "Extract functional networks with Dictionary learning": [[53, "extract-functional-networks-with-dictionary-learning"]], "Extract regions from networks": [[53, "extract-regions-from-networks"]], "Extract signals and compute a connectivity matrix without confounds removal": [[59, "extract-signals-and-compute-a-connectivity-matrix-without-confounds-removal"]], "Extract signals on a parcellation defined by labels": [[59, "extract-signals-on-a-parcellation-defined-by-labels"]], "Extract signals on spheres and plot a connectome": [[61, null]], "Extract signals on spheres from an atlas": [[61, "extract-signals-on-spheres-from-an-atlas"]], "Extract subjects variabilities around a group connectivity": [[54, "extract-subjects-variabilities-around-a-group-connectivity"]], "Extract the largest clusters": [[71, "extract-the-largest-clusters"]], "Extract the seed region\u2019s time course": [[64, "extract-the-seed-region-s-time-course"]], "Extract the time series": [[57, "extract-the-time-series"]], "Extract time series": [[55, "extract-time-series"]], "Extracting a brain mask": [[27, "extracting-a-brain-mask"], [191, "extracting-a-brain-mask"]], "Extracting functional brain networks: ICA and related": [[170, null]], "Extracting predicted time series and residuals": [[180, "extracting-predicted-time-series-and-residuals"]], "Extracting region signals": [[56, "extracting-region-signals"]], "Extracting signals from a brain parcellation": [[59, null]], "Extracting signals from a probabilistic atlas": [[166, "extracting-signals-from-a-probabilistic-atlas"]], "Extracting signals from brain regions using the NiftiLabelsMasker": [[93, null]], "Extracting signals of a probabilistic atlas of functional regions": [[57, null]], "Extracting signals on a parcellation": [[166, "extracting-signals-on-a-parcellation"]], "Extracting the seed time series with masker": [[24, "extracting-the-seed-time-series-with-masker"]], "Extracting times series to build a functional connectome": [[166, null]], "Extraction of signals from regions for multiple subjects: MultiNiftiMasker, MultiNiftiLabelsMasker, MultiNiftiMapsMasker": [[192, "extraction-of-signals-from-regions-for-multiple-subjects-multiniftimasker-multiniftilabelsmasker-multiniftimapsmasker"]], "Extraction of signals from regions: NiftiLabelsMasker, NiftiMapsMasker": [[192, "extraction-of-signals-from-regions-niftilabelsmasker-niftimapsmasker"]], "Extraction of signals from seeds: NiftiSpheresMasker": [[192, "extraction-of-signals-from-seeds-niftispheresmasker"]], "Extraction of signals from surface images SurfaceMasker, SurfaceLabelsMasker, SurfaceMapsMasker, MultiSurfaceMasker": [[192, "extraction-of-signals-from-surface-images-surfacemasker-surfacelabelsmasker-surfacemapsmasker-multisurfacemasker"]], "Extracts signal from sphere around DMN seeds": [[61, "extracts-signal-from-sphere-around-dmn-seeds"]], "F-scores computation": [[38, "f-scores-computation"]], "FIAC": [[491, "fiac"]], "FIXES": [[151, "fixes"], [163, "id3278"]], "FMRIB Software Library (FSL)": [[183, "fmrib-software-library-fsl"]], "FREM on Jimura et al \u201cmixed gambles\u201d dataset": [[42, null]], "FREM pipeline": [[173, "frem-pipeline"]], "FREM: fast ensembling of regularized models for robust decoding": [[173, null]], "Feature extraction: from fMRI volumes to a data matrix": [[3, "feature-extraction-from-fmri-volumes-to-a-data-matrix"]], "Feature selection": [[41, "feature-selection"]], "Featured examples": [[186, "featured-examples"]], "Fetch and inspect the data": [[72, "fetch-and-inspect-the-data"]], "Fetch brain development functional datasets": [[53, "fetch-brain-development-functional-datasets"]], "Fetch data": [[27, "fetch-data"]], "Fetch dataset": [[78, "fetch-dataset"], [81, "fetch-dataset"], [82, "fetch-dataset"]], "Fetch example BIDS dataset": [[104, "fetch-example-bids-dataset"], [113, "fetch-example-bids-dataset"]], "Fetch example Haxby dataset": [[35, "fetch-example-haxby-dataset"]], "Fetch images for \u201csuccessful stop minus go\u201d-like protocols.": [[112, "fetch-images-for-successful-stop-minus-go-like-protocols"]], "Fetch openneuro BIDS dataset": [[65, "fetch-openneuro-bids-dataset"]], "Fetching Probabilistic atlas - MSDL atlas": [[21, "fetching-probabilistic-atlas-msdl-atlas"]], "Fetching data from ADHD dataset": [[12, "fetching-data-from-adhd-dataset"]], "Fetching datasets": [[56, "fetching-datasets"]], "Fetching movie-watching based functional datasets": [[169, "fetching-movie-watching-based-functional-datasets"]], "Fetching open datasets from Internet": [[190, "fetching-open-datasets-from-internet"]], "Fetching the Megatrawls Network matrices": [[28, "fetching-the-megatrawls-network-matrices"]], "File name matching: \u201cglobbing\u201d and user path expansion": [[190, "file-name-matching-globbing-and-user-path-expansion"]], "File names and objects, 3D and 4D images": [[190, "file-names-and-objects-3d-and-4d-images"]], "Final script": [[171, null]], "Finding help": [[187, "finding-help"]], "First download the data": [[3, "first-download-the-data"], [101, "first-download-the-data"]], "First level analysis of a complete BIDS dataset from openneuro": [[65, null]], "First level model estimation": [[104, "first-level-model-estimation"]], "First level model estimation (one subject)": [[65, "first-level-model-estimation-one-subject"]], "First level models": [[180, null]], "First level report": [[491, "first-level-report"]], "First steps with nilearn": [[187, "first-steps-with-nilearn"]], "First we load the Miyawaki dataset": [[44, "first-we-load-the-miyawaki-dataset"]], "Fisher-z transformation and save nifti": [[58, "fisher-z-transformation-and-save-nifti"]], "Fit FREM": [[33, "fit-frem"], [42, "fit-frem"]], "Fit model": [[71, "fit-model"]], "Fit the Decoder and predict the responses": [[36, "fit-the-decoder-and-predict-the-responses"]], "Fit the SpaceNet and predict with it": [[46, "fit-the-spacenet-and-predict-with-it"]], "Fit the decoder and predict": [[31, "fit-the-decoder-and-predict"]], "Fit the model": [[72, "fit-the-model"]], "Fitting CanICA model with nilearn": [[170, "fitting-canica-model-with-nilearn"]], "Fitting a first level model": [[180, "fitting-a-first-level-model"]], "Fitting a second level model": [[184, "fitting-a-second-level-model"]], "Fitting the masker on data and generating a report": [[93, "fitting-the-masker-on-data-and-generating-a-report"]], "Fixed effects analyses": [[183, null]], "Fixes": [[125, "fixes"], [127, "fixes"], [128, "fixes"], [128, "id2"], [129, "fixes"], [130, "fixes"], [131, "fixes"], [132, "fixes"], [133, "fixes"], [134, "fixes"], [135, "fixes"], [138, "fixes"], [141, "fixes"], [142, "fixes"], [143, "fixes"], [143, "id3"], [144, "fixes"], [145, "fixes"], [147, "fixes"], [148, "fixes"], [149, "fixes"], [150, "fixes"], [151, "id4"], [151, "id8"], [151, "id12"], [152, "fixes"], [153, "fixes"], [154, "fixes"], [155, "fixes"], [156, "fixes"], [157, "fixes"], [158, "fixes"], [159, "fixes"], [160, "fixes"], [161, "fixes"], [163, "fixes"], [163, "id170"], [163, "id342"], [163, "id514"], [163, "id685"], [163, "id857"], [163, "id1030"], [163, "id1203"], [163, "id1375"], [163, "id1378"], [163, "id1551"], [163, "id1726"], [163, "id1897"], [163, "id2070"], [163, "id2243"], [163, "id2416"], [163, "id2589"], [163, "id2762"], [163, "id2933"], [163, "id3104"], [163, "id3281"], [163, "id3286"], [163, "id3290"], [163, "id3461"], [163, "id3633"], [163, "id3813"], [163, "id3989"], [163, "id4330"], [163, "id4503"], [163, "id4674"], [163, "id4679"], [163, "id4849"], [163, "id5022"], [163, "id5535"], [163, "id6051"]], "Fixtures": [[179, "fixtures"]], "From neuroimaging volumes to data matrices: the masker objects": [[192, null]], "Full Example": [[165, null]], "Full code example": [[171, null]], "Full example": [[165, null], [165, null], [165, null], [166, null], [166, null]], "Functional connectivity": [[49, null], [116, "functional-connectivity"]], "Functional connectivity and resting state": [[167, null]], "Functional connectivity predicts age group": [[102, null]], "Functions": [[193, "functions"], [194, "functions"], [194, "id1"], [194, "id2"], [194, "id3"], [493, "functions"], [493, "id2"], [493, "id4"], [494, "functions"], [496, "functions"], [496, "id1"], [496, "id2"], [498, "functions"], [499, "functions"], [500, "functions"], [500, "id1"], [500, "id2"], [502, "functions"], [503, "functions"], [504, "functions"], [505, "functions"]], "Functions for data preparation and image transformation": [[191, "functions-for-data-preparation-and-image-transformation"]], "Funding": [[0, "funding"]], "Further Reading": [[176, null]], "Further reading": [[7, "further-reading"]], "GLM: First level analysis": [[63, null], [116, "glm-first-level-analysis"]], "GLM: Second level analysis": [[76, null], [116, "glm-second-level-analysis"]], "General bibliography": [[118, null]], "General functions": [[194, "general-functions"]], "General functions descriptions": [[194, "general-functions-descriptions"]], "Generate an events.tsv file for the NeuroSpin localizer task": [[74, null]], "Generate figures": [[107, "generate-figures"]], "Generating a report": [[35, "generating-a-report"], [64, "generating-a-report"], [73, "generating-a-report"]], "Generating new baseline figures for plotting tests": [[188, "generating-new-baseline-figures-for-plotting-tests"]], "Get image and term data": [[107, "get-image-and-term-data"]], "Get residuals": [[71, "get-residuals"]], "Get the locations from which vol_to_surf would draw its samples": [[25, "get-the-locations-from-which-vol-to-surf-would-draw-its-samples"]], "Getting the data": [[58, "getting-the-data"]], "GitHub Actions Specification": [[164, "github-actions-specification"]], "Github release": [[188, "github-release"]], "Glass brain plotting in nilearn": [[14, null]], "Glass brain plotting in nilearn (all options)": [[15, null]], "Glass brain plotting: Hemispheric sagittal cuts": [[14, "glass-brain-plotting-hemispheric-sagittal-cuts"]], "Glass brain plotting: black background": [[14, "glass-brain-plotting-black-background"]], "Glass brain plotting: whole brain sagittal cuts": [[14, "glass-brain-plotting-whole-brain-sagittal-cuts"]], "Glass brains": [[179, "glass-brains"]], "Globbing over multiple 3D volumes": [[4, "globbing-over-multiple-3d-volumes"]], "Glossary": [[185, null]], "Going further": [[120, "going-further"]], "Going further with scikit-learn": [[101, "going-further-with-scikit-learn"], [174, "going-further-with-scikit-learn"]], "Group Sparse inverse covariance for multi-subject connectome": [[56, null]], "Group level model": [[113, "group-level-model"]], "Group-sparse covariance estimation": [[178, null]], "Guidelines for HTML and CSS": [[179, "guidelines-for-html-and-css"]], "Guidelines for Private Functions": [[179, "guidelines-for-private-functions"]], "HIGHLIGHTS": [[127, "highlights"], [129, "highlights"], [130, "highlights"], [131, "highlights"], [132, "highlights"], [133, "highlights"], [134, "highlights"], [135, "highlights"], [151, "highlights"], [154, "highlights"], [155, "highlights"], [156, "highlights"], [157, "highlights"], [158, "highlights"], [160, "highlights"], [161, "highlights"], [163, "highlights"], [163, "id169"], [163, "id341"], [163, "id513"], [163, "id684"], [163, "id856"], [163, "id1028"], [163, "id1201"], [163, "id1549"], [163, "id1722"], [163, "id2068"], [163, "id2241"], [163, "id2414"], [163, "id2587"], [163, "id2759"], [163, "id3274"]], "HRF models": [[180, "hrf-models"]], "Harvard Oxford atlas": [[217, null]], "Haxby dataset": [[218, null]], "Here we run the prediction: the decoding itself": [[44, "here-we-run-the-prediction-the-decoding-itself"]], "Highlights": [[126, "highlights"], [143, "highlights"], [144, "highlights"], [145, "highlights"], [148, "highlights"], [148, "id4"], [148, "id8"], [163, "id3807"], [163, "id3811"], [163, "id3816"], [163, "id4328"], [163, "id4501"], [163, "id4677"], [163, "id5881"]], "How do we decide what code goes in?": [[179, "how-do-we-decide-what-code-goes-in"]], "How to contribute a dataset fetcher": [[179, "how-to-contribute-a-dataset-fetcher"]], "How to contribute an atlas": [[179, "how-to-contribute-an-atlas"]], "How to contribute to nilearn": [[179, "how-to-contribute-to-nilearn"]], "How to get help?": [[179, "how-to-get-help"]], "How to help the project?": [[179, "how-to-help-the-project"]], "How to make a release?": [[188, "how-to-make-a-release"]], "Hyperparameter optimization": [[41, "hyperparameter-optimization"]], "ICBM 152 template": [[219, null]], "Image affines": [[190, null]], "Image operations: creating a ROI mask manually": [[191, "image-operations-creating-a-roi-mask-manually"]], "Image thresholded at -2 when two_sided=False": [[98, "id1"]], "Image thresholded at 2 when two_sided=False": [[98, "image-thresholded-at-2-when-two-sided-false"]], "Image thresholded at 2 when two_sided=True": [[98, "image-thresholded-at-2-when-two-sided-true"]], "Image thresholding": [[98, null]], "Image without threshold": [[98, "image-without-threshold"]], "Impact of plot parameters on visualization": [[10, "impact-of-plot-parameters-on-visualization"]], "Implementing a KFold loop": [[3, "implementing-a-kfold-loop"]], "Import modules": [[71, "import-modules"]], "Important links": [[508, "important-links"]], "Inference with massively univariate model": [[45, "inference-with-massively-univariate-model"]], "Initial estimate value": [[178, "initial-estimate-value"]], "Initialize and run the GLM": [[73, "initialize-and-run-the-glm"]], "Input and output: neuroimaging data representation": [[190, null]], "Inputing data: file names or image objects": [[190, "inputing-data-file-names-or-image-objects"]], "Inspecting the dataset": [[6, "inspecting-the-dataset"]], "Inspecting the model weights": [[3, "inspecting-the-model-weights"]], "Install": [[508, "install"]], "Installing": [[179, "installing"]], "Instantiate and run FirstLevelModel": [[35, "instantiate-and-run-firstlevelmodel"]], "Instantiate the mask and visualize atlas": [[93, "instantiate-the-mask-and-visualize-atlas"]], "Interacting with figures": [[500, "module-nilearn.plotting.displays"]], "Interactive plots": [[507, "interactive-plots"]], "Interactive visualization of statistical map slices": [[507, "interactive-visualization-of-statistical-map-slices"]], "Interpreting such components": [[170, "interpreting-such-components"]], "Intro to GLM Analysis: a single-run, single-subject fMRI dataset": [[6, null]], "Introduction": [[187, null]], "Inverse transform: unmasking data": [[192, "inverse-transform-unmasking-data"]], "Issues": [[188, "issues"]], "Iterate over fetched atlases to extract coordinates - probabilistic": [[50, "iterate-over-fetched-atlases-to-extract-coordinates-probabilistic"]], "Iterative grid search": [[178, "iterative-grid-search"]], "Juelich atlas": [[220, null]], "Known Issues": [[149, "known-issues"], [163, "known-issues"]], "Labels": [[188, "labels"]], "Latest release": [[508, "latest-release"]], "Learning with examples": [[187, "learning-with-examples"]], "Learning with the API references": [[187, "learning-with-the-api-references"]], "Let us quantify our prediction error": [[44, "let-us-quantify-our-prediction-error"]], "License": [[197, "license"], [199, "license"], [200, "license"], [201, "license"], [202, "license"], [204, "license"], [205, "license"], [206, "license"], [207, "license"], [208, "license"], [209, "license"], [210, "license"], [211, "license"], [212, "license"], [213, "license"], [214, "license"], [215, "license"], [217, "license"], [218, "license"], [219, "license"], [220, "license"], [221, "license"], [222, "license"], [223, "license"], [224, "license"], [225, "license"], [226, "license"], [227, "license"], [228, "license"], [229, "license"], [230, "license"], [231, "license"], [232, "license"], [233, "license"], [234, "license"], [235, "license"], [236, "license"], [237, "license"]], "Linking total and direct interactions at the group level": [[165, "linking-total-and-direct-interactions-at-the-group-level"]], "Load Haxby dataset": [[19, "load-haxby-dataset"], [38, "load-haxby-dataset"], [39, "load-haxby-dataset"], [106, "load-haxby-dataset"]], "Load Oasis dataset": [[45, "load-oasis-dataset"], [77, "load-oasis-dataset"]], "Load an atlas": [[93, "load-an-atlas"]], "Load and prepare the data": [[34, "load-and-prepare-the-data"]], "Load atlases": [[50, "load-atlases"]], "Load brain development fMRI dataset": [[51, "load-brain-development-fmri-dataset"]], "Load brain development fMRI dataset and MSDL atlas": [[54, "load-brain-development-fmri-dataset-and-msdl-atlas"], [102, "load-brain-development-fmri-dataset-and-msdl-atlas"]], "Load confounds from file using a flexible strategy with fmriprep interface": [[59, "load-confounds-from-file-using-a-flexible-strategy-with-fmriprep-interface"]], "Load data": [[14, "load-data"]], "Load functional data": [[50, "load-functional-data"]], "Load probabilistic atlases - extracting coordinates on brain maps": [[50, "load-probabilistic-atlases-extracting-coordinates-on-brain-maps"]], "Load the Haxby data dataset": [[37, "load-the-haxby-data-dataset"]], "Load the Haxby dataset": [[33, "load-the-haxby-dataset"], [36, "load-the-haxby-dataset"], [41, "load-the-haxby-dataset"]], "Load the Oasis VBM dataset": [[46, "load-the-oasis-vbm-dataset"]], "Load the behavioral data": [[31, "load-the-behavioral-data"], [35, "load-the-behavioral-data"]], "Load the behavioral labels": [[3, "load-the-behavioral-labels"]], "Load the data": [[15, "load-the-data"]], "Load the data from the Jimura mixed-gamble experiment": [[42, "load-the-data-from-the-jimura-mixed-gamble-experiment"]], "Load the surface image": [[7, "load-the-surface-image"]], "Loading and plotting of a cortical surface atlas": [[23, null]], "Loading and preparing the data": [[171, "loading-and-preparing-the-data"]], "Loading non image data: experiment description": [[120, "loading-non-image-data-experiment-description"]], "Loading the data": [[32, "loading-the-data"], [43, "loading-the-data"], [96, "loading-the-data"]], "Loading the data into nilearn": [[171, "loading-the-data-into-nilearn"]], "Look-up table format": [[11, null]], "Looping on all volumes in a 4D file": [[2, "looping-on-all-volumes-in-a-4d-file"]], "Looping through selected volumes in a 4D file": [[2, "looping-through-selected-volumes-in-a-4d-file"]], "MSDL atlas": [[225, null]], "Machine learning applications to Neuroimaging": [[187, "machine-learning-applications-to-neuroimaging"]], "Maintenance": [[179, "maintenance"], [188, null]], "Making a surface plot of a 3D statistical map": [[10, null]], "Making interactive visualizations: view_img": [[17, "making-interactive-visualizations-view-img"]], "Manipulating brain image volumes": [[85, null], [116, "manipulating-brain-image-volumes"]], "Manipulating images: resampling, smoothing, masking, ROIs\u2026": [[191, null]], "Manipulation brain volumes with nilearn": [[189, null]], "Manually leaving out data": [[3, "manually-leaving-out-data"]], "Mapping the encoding scores on the brain": [[43, "mapping-the-encoding-scores-on-the-brain"]], "Mask data": [[106, "mask-data"]], "Mask the fMRI image using NiftiMasker": [[111, "mask-the-fmri-image-using-niftimasker"]], "Masking": [[68, "masking"], [176, "masking"]], "Masking and plotting surface images": [[114, "masking-and-plotting-surface-images"]], "Masking data: from 4D Nifti images to 2D data arrays": [[191, "masking-data-from-4d-nifti-images-to-2d-data-arrays"]], "Masking the data": [[101, "masking-the-data"]], "Masking the data: from 4D image to 2D array": [[120, "masking-the-data-from-4d-image-to-2d-array"]], "Masking using numpy indexing": [[111, "masking-using-numpy-indexing"]], "Masking using numpy indexing in parallel with shared memory": [[111, "masking-using-numpy-indexing-in-parallel-with-shared-memory"]], "Massively univariate analysis of a calculation task from the Localizer dataset": [[110, null]], "Massively univariate analysis of a motor task from the Localizer dataset": [[109, null]], "Massively univariate analysis of face vs house recognition": [[106, null]], "Maximum number of iterations": [[178, "maximum-number-of-iterations"]], "Measuring prediction performance": [[171, "measuring-prediction-performance"]], "Measuring prediction scores using cross-validation": [[3, "measuring-prediction-scores-using-cross-validation"]], "Measuring the chance level": [[101, "measuring-the-chance-level"], [174, "measuring-the-chance-level"]], "MegaTrawls Network Matrices HCP": [[198, null]], "Mesh": [[7, "mesh"]], "Mixed gambles statistical maps": [[223, null]], "Miyawaki 2008 dataset": [[224, null]], "Modifying dimensions in the formula": [[105, "modifying-dimensions-in-the-formula"]], "Modifying the stopping criterion": [[178, "modifying-the-stopping-criterion"]], "More plotting tools from nilearn": [[16, null]], "MosaicSlicer: Three views along multiple rows and columns": [[16, "mosaicslicer-three-views-along-multiple-rows-and-columns"]], "Motion-based scrubbing": [[59, "motion-based-scrubbing"]], "Multi-subject ICA: CanICA": [[170, "multi-subject-ica-canica"]], "MultiNiftiLabelsMasker Usage": [[192, "multiniftilabelsmasker-usage"]], "MultiNiftiMapsMasker Usage": [[192, "multiniftimapsmasker-usage"]], "MultiNiftiMasker Usage": [[192, "multiniftimasker-usage"]], "Multiple Comparisons": [[181, "multiple-comparisons"]], "Multiple comparisons correction": [[184, "multiple-comparisons-correction"]], "Multivariate decompositions: Independent component analysis of fMRI": [[108, null]], "NEW": [[127, "new"], [128, "new"], [129, "new"], [130, "new"], [148, "new"], [149, "new"], [150, "new"], [151, "new"], [151, "id2"], [151, "id5"], [151, "id10"], [154, "new"], [155, "new"], [156, "new"], [157, "new"], [158, "new"], [160, "new"], [161, "new"], [163, "new"], [163, "id1029"], [163, "id1202"], [163, "id1374"], [163, "id1550"], [163, "id1724"], [163, "id2069"], [163, "id2242"], [163, "id2415"], [163, "id2588"], [163, "id2760"], [163, "id3275"], [163, "id3279"], [163, "id3283"], [163, "id3288"], [163, "id3460"], [163, "id3631"], [163, "id3803"]], "NKI enhanced surface dataset": [[227, null]], "Negating an image with math_img": [[92, null]], "Nested cross-validation": [[36, "nested-cross-validation"]], "NeuroImaging volumes visualization": [[27, null]], "NeuroVault cross-study ICA maps": [[107, null]], "NeuroVault meta-analysis of stop-go paradigm studies": [[112, null]], "Neurosynth annotations": [[121, "neurosynth-annotations"]], "Neurovault statistical maps": [[226, null]], "New": [[138, "new"], [140, "new"], [141, "new"], [141, "id3"], [163, "id5021"], [163, "id5024"], [163, "id5194"], [163, "id5533"]], "New features": [[136, "new-features"], [139, "new-features"], [163, "new-features"], [163, "id5709"]], "Nifti and Analyze data": [[190, "nifti-and-analyze-data"]], "Nifti labels masker": [[492, "nifti-labels-masker"]], "Nifti maps masker": [[492, "nifti-maps-masker"]], "Nifti masker": [[492, "nifti-masker"]], "Nifti sphere masker": [[492, "nifti-sphere-masker"]], "NiftiLabelsMasker Usage": [[192, "niftilabelsmasker-usage"]], "NiftiMapsMasker Usage": [[192, "niftimapsmasker-usage"]], "NiftiMasker: applying a mask to load time-series": [[192, "niftimasker-applying-a-mask-to-load-time-series"]], "Niimg-like objects": [[190, "niimg-like-objects"]], "Nilearn": [[186, null]], "Nilearn MNI template": [[219, null], [272, null], [273, null], [295, null], [296, null], [297, null], [298, null], [299, null], [300, null]], "Nilearn data for examples": [[170, null]], "Nilearn plotting functions": [[17, "nilearn-plotting-functions"]], "Not all python version run on pull requests.": [[164, null]], "Notes": [[197, "notes"], [198, "notes"], [199, "notes"], [200, "notes"], [201, "notes"], [203, "notes"], [204, "notes"], [205, "notes"], [206, "notes"], [207, "notes"], [208, "notes"], [209, "notes"], [210, "notes"], [211, "notes"], [212, "notes"], [213, "notes"], [214, "notes"], [215, "notes"], [217, "notes"], [218, "notes"], [219, "notes"], [220, "notes"], [221, "notes"], [222, "notes"], [223, "notes"], [224, "notes"], [225, "notes"], [226, "notes"], [227, "notes"], [228, "notes"], [229, "notes"], [230, "notes"], [231, "notes"], [232, "notes"], [233, "notes"], [234, "notes"], [235, "notes"], [236, "notes"], [237, "notes"]], "Now we compute cross-validation scores": [[37, "now-we-compute-cross-validation-scores"]], "Numerical stability": [[178, "numerical-stability"]], "OASIS volume based morphometry maps": [[228, null]], "Objective": [[170, "objective"]], "Obtain FirstLevelModel objects automatically and fit arguments": [[65, "obtain-firstlevelmodel-objects-automatically-and-fit-arguments"]], "Obtain automatically FirstLevelModel objects and fit arguments": [[104, "obtain-automatically-firstlevelmodel-objects-and-fit-arguments"]], "Obtain prediction scores via cross validation": [[31, "obtain-prediction-scores-via-cross-validation"]], "OrthoSlicer: Three views \u2018sagittal\u2019, \u2018coronal\u2019 and \u2018axial\u2019 with coordinates": [[16, "orthoslicer-three-views-sagittal-coronal-and-axial-with-coordinates"]], "Other contributors": [[0, "other-contributors"]], "Other probabilistic atlases accessible with nilearn": [[22, "other-probabilistic-atlases-accessible-with-nilearn"]], "Output": [[121, "output"]], "Output to dataframe and plot": [[93, "output-to-dataframe-and-plot"]], "Overlay anatomical image as edges: add_edges": [[16, "overlay-anatomical-image-as-edges-add-edges"]], "PR Structure": [[179, "pr-structure"]], "Page summary": [[165, null], [166, null], [169, null], [170, null], [180, null], [183, null], [184, null]], "Parameter min_size": [[88, "parameter-min-size"]], "Parameter selection": [[165, null]], "Parametric modulation": [[66, "parametric-modulation"], [74, "parametric-modulation"]], "Pauli 2007 atlas": [[229, null]], "Perform first level analysis": [[64, "perform-first-level-analysis"], [70, "perform-first-level-analysis"]], "Perform massively univariate analysis with permuted OLS": [[106, "perform-massively-univariate-analysis-with-permuted-ols"]], "Perform the second level analysis": [[83, "perform-the-second-level-analysis"]], "Performance monitoring": [[179, "performance-monitoring"]], "Performing a simple decoding analysis": [[171, "performing-a-simple-decoding-analysis"]], "Performing an F-test": [[6, "performing-an-f-test"]], "Performing decoding with scikit-learn": [[101, "performing-decoding-with-scikit-learn"], [174, "performing-decoding-with-scikit-learn"]], "Performing the GLM analysis": [[6, "performing-the-glm-analysis"]], "Performing the seed-to-voxel correlation analysis": [[58, "performing-the-seed-to-voxel-correlation-analysis"]], "Permutation test": [[101, "permutation-test"]], "Plot 3D image for comparison": [[10, "plot-3d-image-for-comparison"]], "Plot Haxby masks": [[19, null]], "Plot R-squared": [[71, "plot-r-squared"]], "Plot a confusion matrix": [[37, "plot-a-confusion-matrix"]], "Plot a directed connectome - asymmetric connectivity measure": [[50, "plot-a-directed-connectome-asymmetric-connectivity-measure"]], "Plot barplots of the prediction scores": [[37, "plot-barplots-of-the-prediction-scores"]], "Plot confusion matrix": [[33, "plot-confusion-matrix"]], "Plot connectivity matrix": [[114, "plot-connectivity-matrix"]], "Plot distribution of residuals": [[71, "plot-distribution-of-residuals"]], "Plot matplotlib color maps": [[13, "plot-matplotlib-color-maps"], [13, "id1"]], "Plot matrix, graph, and strength": [[61, "plot-matrix-graph-and-strength"]], "Plot multiple views of the 3D volume on a surface": [[10, "plot-multiple-views-of-the-3d-volume-on-a-surface"]], "Plot predicted and actual time series for 6 most significant clusters": [[71, "plot-predicted-and-actual-time-series-for-6-most-significant-clusters"]], "Plot regions extracted for only one specific network": [[53, "plot-regions-extracted-for-only-one-specific-network"]], "Plot resulting connectomes": [[53, "plot-resulting-connectomes"]], "Plot the combined z maps": [[112, "plot-the-combined-z-maps"]], "Plot the masks": [[19, "plot-the-masks"]], "Plot the mesh and the sample locations": [[25, "plot-the-mesh-and-the-sample-locations"]], "Plot the outline of a mask: add_contours": [[16, "plot-the-outline-of-a-mask-add-contours"]], "Plot the prediction scores using matplotlib": [[36, "plot-the-prediction-scores-using-matplotlib"]], "Plot the results": [[82, "plot-the-results"]], "Plot the surface image": [[10, "plot-the-surface-image"]], "Plot thresholded z scores map": [[6, "plot-thresholded-z-scores-map"]], "Plot with higher-resolution mesh": [[10, "plot-with-higher-resolution-mesh"]], "Plotting": [[179, "plotting"], [500, "module-nilearn.plotting"]], "Plotting EPI image: plot_epi": [[17, "plotting-epi-image-plot-epi"]], "Plotting ROIs (here the mask): plot_roi": [[17, "plotting-rois-here-the-mask-plot-roi"]], "Plotting anatomical images: plot_anat": [[17, "plotting-anatomical-images-plot-anat"]], "Plotting brain images": [[507, null]], "Plotting images with transparent thresholding": [[26, null]], "Plotting seeds: add_markers": [[16, "plotting-seeds-add-markers"]], "Plotting statistical maps in a glass brain: plot_glass_brain": [[17, "plotting-statistical-maps-in-a-glass-brain-plot-glass-brain"]], "Plotting statistical maps: plot_stat_map": [[17, "plotting-statistical-maps-plot-stat-map"]], "Plotting the SVM weights": [[3, "plotting-the-svm-weights"]], "Plotting the seed-to-voxel correlation map": [[58, "plotting-the-seed-to-voxel-correlation-map"]], "Plotting the surface image": [[7, "plotting-the-surface-image"]], "Plotting threshold set to 1": [[17, "plotting-threshold-set-to-1"]], "Plotting threshold set to 1 with vmax=0": [[17, "plotting-threshold-set-to-1-with-vmax-0"]], "Plotting threshold set to 1 with vmin=0": [[17, "plotting-threshold-set-to-1-with-vmin-0"]], "Plotting tools in nilearn": [[17, null]], "Plotting with decrease of contrast in background image with dim=.5": [[18, "plotting-with-decrease-of-contrast-in-background-image-with-dim-5"]], "Plotting with enhancement of background image with dim=-.5": [[18, "plotting-with-enhancement-of-background-image-with-dim-5"]], "Plotting with more decrease in contrast with dim=1": [[18, "plotting-with-more-decrease-in-contrast-with-dim-1"]], "Plotting with no change of contrast in background image with dim=0": [[18, "plotting-with-no-change-of-contrast-in-background-image-with-dim-0"]], "Plotting without threshold": [[17, "plotting-without-threshold"]], "Post-release": [[188, "post-release"]], "Power 2011 atlas": [[230, null]], "Pre-commit": [[179, "pre-commit"]], "Predicted time series and residuals": [[71, null]], "Prediction accuracy at chance using simple strategies": [[171, "prediction-accuracy-at-chance-using-simple-strategies"]], "Predictions: regression, classification and multi-class": [[172, "predictions-regression-classification-and-multi-class"]], "Predictive modeling analysis: VBM bio-markers of aging?": [[45, "predictive-modeling-analysis-vbm-bio-markers-of-aging"]], "Prepare code for the release": [[188, "prepare-code-for-the-release"]], "Prepare data and analysis parameters": [[64, "prepare-data-and-analysis-parameters"], [70, "prepare-data-and-analysis-parameters"], [103, "prepare-data-and-analysis-parameters"]], "Prepare masks": [[38, "prepare-masks"]], "Prepare some images for a simple t test": [[83, "prepare-some-images-for-a-simple-t-test"]], "Prepare the documentation for the release": [[188, "prepare-the-documentation-for-the-release"]], "Prepare the fMRI data": [[37, "prepare-the-fmri-data"]], "Prepare the release": [[188, "prepare-the-release"]], "Preparing the data": [[176, "preparing-the-data"]], "Preprocess data": [[45, "preprocess-data"]], "Preprocessed datasets": [[194, "preprocessed-datasets"]], "Preprocessing": [[41, "preprocessing"], [202, "preprocessing"]], "Principle of cross-validation": [[178, "principle-of-cross-validation"]], "Principle of the Searchlight": [[176, "principle-of-the-searchlight"]], "Probabilistic atlases": [[166, "probabilistic-atlases"], [194, "probabilistic-atlases"]], "Process the data with the NiftiLablesMasker": [[93, "process-the-data-with-the-niftilablesmasker"]], "Producing single subject maps of seed-to-voxel correlation": [[58, null]], "Project Organization": [[188, "project-organization"]], "Project the fMRI image to the surface": [[70, "project-the-fmri-image-to-the-surface"]], "Projectors": [[500, "projectors"]], "Pull Requests": [[188, "pull-requests"]], "Putting it all together": [[171, null]], "Python globbing": [[190, null]], "Quick sanity check on fit arguments": [[104, "quick-sanity-check-on-fit-arguments"]], "Quickstart": [[508, null]], "ROI-based decoding analysis in Haxby et al. dataset": [[34, null]], "ROI-to-ROI correlations of children": [[54, "roi-to-roi-correlations-of-children"]], "Reading CSV with pandas": [[190, null]], "Recommendation": [[179, null], [179, null]], "Reconstruction of visual stimuli from Miyawaki et al. 2008": [[44, null]], "Reference": [[165, null], [165, null], [165, null], [165, null], [168, null]], "References": [[3, "references"], [23, "references"], [24, "references"], [26, "references"], [33, "references"], [34, "references"], [39, "references"], [40, "references"], [43, "references"], [44, "references"], [47, "references"], [51, "references"], [52, "references"], [54, "references"], [59, "references"], [61, "references"], [74, "references"], [78, "references"], [101, "references"], [102, "references"], [103, "references"], [106, "references"], [121, "references"], [165, null], [165, "references"], [166, null], [166, null], [166, "references"], [168, "references"], [169, null], [169, "references"], [170, null], [170, null], [170, "references"], [171, "references"], [172, "references"], [173, "references"], [176, "references"], [177, "references"], [178, "references"], [185, "references"], [187, "references"], [197, "references"], [198, "references"], [199, "references"], [200, "references"], [201, "references"], [202, "references"], [204, "references"], [205, "references"], [206, "references"], [207, "references"], [208, "references"], [209, "references"], [210, "references"], [211, "references"], [212, "references"], [213, "references"], [214, "references"], [215, "references"], [217, "references"], [218, "references"], [219, "references"], [220, "references"], [221, "references"], [222, "references"], [223, "references"], [224, "references"], [225, "references"], [226, "references"], [227, "references"], [228, "references"], [229, "references"], [230, "references"], [231, "references"], [232, "references"], [233, "references"], [234, "references"], [235, "references"], [236, "references"], [237, "references"]], "Region Extraction for better brain parcellations": [[169, null]], "Region Extraction using a t-statistical map (3D)": [[90, null]], "Region Extraction with Dictionary learning maps": [[169, "region-extraction-with-dictionary-learning-maps"]], "Region signals extraction": [[54, "region-signals-extraction"]], "Regions Extraction of Default Mode Networks using Smith Atlas": [[89, null]], "Regions definition": [[192, "regions-definition"]], "Regions extraction using dictionary learning and functional connectomes": [[53, null]], "Regression": [[172, "regression"]], "Relabeling the atlas into separated regions": [[88, "relabeling-the-atlas-into-separated-regions"]], "Related example": [[177, "related-example"]], "Removing confounds": [[68, "removing-confounds"]], "Report bugs or discuss enhancement ideas": [[179, "report-bugs-or-discuss-enhancement-ideas"]], "Reports": [[179, "reports"]], "Resample an image to a template": [[95, null]], "Resampling images": [[191, "resampling-images"]], "Resampling one image to match another one": [[191, "resampling-one-image-to-match-another-one"]], "Resampling to a specific target affine, shape, or resolution": [[191, "resampling-to-a-specific-target-affine-shape-or-resolution"]], "Resampling: resizing and changing resolutions of images": [[192, "resampling-resizing-and-changing-resolutions-of-images"]], "Reshape and mask images": [[107, "reshape-and-mask-images"]], "Restrict the analysis to cats and faces": [[3, "restrict-the-analysis-to-cats-and-faces"]], "Restrict to faces and houses": [[38, "restrict-to-faces-and-houses"], [39, "restrict-to-faces-and-houses"], [106, "restrict-to-faces-and-houses"]], "Retrieve and load the fMRI data from the Haxby study": [[3, "retrieve-and-load-the-fmri-data-from-the-haxby-study"], [101, "retrieve-and-load-the-fmri-data-from-the-haxby-study"]], "Retrieve the atlas and the data": [[55, "retrieve-the-atlas-and-the-data"], [57, "retrieve-the-atlas-and-the-data"], [59, "retrieve-the-atlas-and-the-data"]], "Retrieve the brain development fMRI dataset": [[61, "retrieve-the-brain-development-fmri-dataset"]], "Retrieve the brain development functional dataset": [[93, "retrieve-the-brain-development-functional-dataset"]], "Retrieve the data: the localizer dataset with contrast maps": [[18, "retrieve-the-data-the-localizer-dataset-with-contrast-maps"]], "Retrieve the files of the Haxby dataset": [[31, "retrieve-the-files-of-the-haxby-dataset"]], "Retrieving multiscale group brain parcellations": [[20, "retrieving-multiscale-group-brain-parcellations"]], "Retrieving the atlas data": [[11, "retrieving-the-atlas-data"]], "Retrieving the data": [[6, "retrieving-the-data"], [24, "retrieving-the-data"], [68, "retrieving-the-data"]], "Review Pull Requests": [[179, "review-pull-requests"]], "Run ICA and map components to terms": [[107, "run-ica-and-map-components-to-terms"]], "Run different estimators": [[47, "run-different-estimators"]], "Run the GLM on data from each run": [[35, "run-the-glm-on-data-from-each-run"]], "Run the estimators": [[47, "run-the-estimators"]], "Running a basic model": [[68, "running-a-basic-model"]], "Running scikit-learn functions for more control on the analysis": [[174, null]], "SPM auditory dataset": [[234, null]], "SPM multimodal dataset": [[235, null]], "Sample and plot response functions": [[69, "sample-and-plot-response-functions"]], "Sample the 3D data around each node of the mesh": [[10, "sample-the-3d-data-around-each-node-of-the-mesh"]], "Save plots to a file: savefig": [[16, "save-plots-to-a-file-savefig"]], "Save the surface image": [[7, "save-the-surface-image"]], "Saving model outputs to disk": [[65, "saving-model-outputs-to-disk"], [77, "saving-model-outputs-to-disk"]], "Saving results to a file": [[4, "saving-results-to-a-file"]], "Schaefer 2018 atlas": [[231, null]], "Scope of the project": [[179, "scope-of-the-project"]], "Score function": [[176, "score-function"]], "Searchlight": [[176, "id6"]], "Searchlight : finding voxels containing information": [[176, null]], "Searchlight analysis of face vs house recognition": [[38, null]], "Searchlight computation": [[38, "searchlight-computation"], [39, "searchlight-computation"]], "Second level model estimation": [[104, "second-level-model-estimation"]], "Second level models": [[184, null]], "Second level report": [[491, "second-level-report"]], "Second-level fMRI model: one sample test": [[81, null]], "Second-level fMRI model: true positive proportion in clusters": [[78, null]], "Second-level fMRI model: two-sample test, unpaired and paired": [[82, null]], "See Also": [[211, "see-also"], [212, "see-also"], [213, "see-also"], [214, "see-also"], [215, "see-also"], [216, "see-also"], [219, "see-also"]], "Seed-based connectivity on the surface": [[24, null]], "Seeding": [[179, "seeding"]], "Seitzman 2018 atlas": [[232, null]], "Selection filters": [[121, "selection-filters"]], "Set up the GLM": [[73, "set-up-the-glm"]], "Setting a parameter by cross-validation": [[36, null]], "Setting estimator parameters": [[172, "setting-estimator-parameters"], [174, "setting-estimator-parameters"]], "Setting up the searchlight": [[176, "setting-up-the-searchlight"]], "Setting up your environment": [[179, "setting-up-your-environment"]], "Show stimuli of Haxby et al. dataset": [[40, null]], "Show the design matrices for the first few trials": [[103, "show-the-design-matrices-for-the-first-few-trials"]], "Simple example of NiftiMasker use": [[94, null]], "Simple example of two-runs fMRI model fitting": [[73, null]], "Simple image manipulation: smoothing": [[4, "simple-image-manipulation-smoothing"]], "Simple statistical report of thresholded contrast": [[65, "simple-statistical-report-of-thresholded-contrast"]], "Single-subject data (two runs) in native space": [[72, null]], "Slicers": [[500, "slicers"]], "Smith 2009 atlas": [[233, null]], "Smoothing": [[68, "smoothing"], [192, "smoothing"]], "Smoothing an image": [[97, null]], "SpaceNet: decoding with spatial structure for better maps": [[177, null]], "Sparse inverse covariance for functional connectomes": [[165, "sparse-inverse-covariance-for-functional-connectomes"]], "Sparse inverse covariance on multiple subjects": [[165, "sparse-inverse-covariance-on-multiple-subjects"]], "Spatial regularization of decoding maps on mixed gambles study": [[173, "spatial-regularization-of-decoding-maps-on-mixed-gambles-study"]], "Special case: resampling to a given voxel size": [[191, null]], "Specific images or collections": [[121, "specific-images-or-collections"]], "Specifying the experimental paradigm": [[6, "specifying-the-experimental-paradigm"]], "Sphere radius": [[176, "sphere-radius"]], "Statistical Parametric Mapping (SPM)": [[183, "statistical-parametric-mapping-spm"]], "Statistical maps/derivatives": [[194, "statistical-maps-derivatives"]], "Statistical maps/derivatives descriptions": [[194, "statistical-maps-derivatives-descriptions"]], "Statistical significance testing": [[6, "statistical-significance-testing"]], "Statistical testing of a second-level analysis": [[83, null]], "Stopping criteria": [[178, "stopping-criteria"]], "Stopping criterion": [[178, "stopping-criterion"]], "Studying partial correlations": [[54, "studying-partial-correlations"]], "Subject level models": [[113, "subject-level-models"]], "Surface API": [[132, "surface-api"], [163, "surface-api"]], "Surface BOLD response": [[39, "surface-bold-response"]], "Surface GLM": [[491, "surface-glm"], [491, "id1"]], "Surface GLM: empty": [[491, "surface-glm-empty"]], "Surface labels masker": [[492, "surface-labels-masker"]], "Surface maps masker": [[492, "surface-maps-masker"]], "Surface masker": [[492, "surface-masker"]], "Surface plotting": [[507, "surface-plotting"]], "Surface-based analysis": [[180, "surface-based-analysis"]], "Surface-based dataset first and second level analysis of a dataset": [[113, null]], "Synthetic dataset": [[178, "synthetic-dataset"]], "Table of contents": [[510, "table-of-contents"]], "Talairach atlas": [[236, null]], "Team": [[0, null]], "Technical details": [[198, null], [279, null]], "Technical point: Illustration of the volume to surface sampling schemes": [[25, null]], "Templates": [[194, "templates"]], "Templates descriptions": [[194, "templates-descriptions"]], "Temporal Filtering and confound removal": [[192, "temporal-filtering-and-confound-removal"]], "Terms and conditions": [[198, null], [279, null]], "Tests": [[179, "tests"]], "Text files: phenotype or behavior": [[190, "text-files-phenotype-or-behavior"]], "The Haxby 2001 experiment": [[171, "the-haxby-2001-experiment"]], "The SpaceNet decoder": [[177, "the-spacenet-decoder"]], "The concept of \u201cmasker\u201d objects": [[192, "the-concept-of-masker-objects"]], "The haxby dataset: different multi-class strategies": [[37, null]], "The impact of global signal removal": [[59, "the-impact-of-global-signal-removal"]], "The noise model: ar(1), ols, or higher order ar?": [[68, "the-noise-model-ar-1-ols-or-higher-order-ar"]], "The original Yeo atlas": [[88, "the-original-yeo-atlas"]], "Then we prepare and mask the data": [[44, "then-we-prepare-and-mask-the-data"]], "Thresholding plots": [[17, "thresholding-plots"]], "Thresholding statistical maps": [[184, "thresholding-statistical-maps"]], "TiledSlicer: Three views in 2x2 fashion": [[16, "tiledslicer-three-views-in-2x2-fashion"]], "Time series extraction": [[58, "time-series-extraction"]], "Time series-based": [[180, "time-series-based"]], "Time-series from a brain parcellation or \u201cMaxProb\u201d atlas": [[166, "time-series-from-a-brain-parcellation-or-maxprob-atlas"]], "Time-series from a probabilistic atlas": [[166, "time-series-from-a-probabilistic-atlas"]], "Train and cross-validate via an Scikit-Learn pipeline": [[41, "train-and-cross-validate-via-an-scikit-learn-pipeline"]], "Training the decoder": [[32, "training-the-decoder"]], "Transparent masking of part of the data": [[26, "transparent-masking-of-part-of-the-data"]], "Transparent thresholding and contours": [[26, "transparent-thresholding-and-contours"]], "Transparent thresholding on GLM results": [[26, "transparent-thresholding-on-glm-results"]], "Transparent thresholding with other functions": [[26, "transparent-thresholding-with-other-functions"]], "Tuning cross-validation parameters": [[101, "tuning-cross-validation-parameters"]], "Turning the weights into a nifti image": [[3, "turning-the-weights-into-a-nifti-image"]], "Understanding Decoder": [[41, null]], "Understanding NiftiMasker and mask computation": [[91, null]], "Understanding neuroimaging data": [[190, "understanding-neuroimaging-data"]], "Understanding parameters of the first-level model": [[68, null]], "Unmasking (inverse_transform)": [[120, "unmasking-inverse-transform"]], "Use an atlas and choose regions to outline": [[10, "use-an-atlas-and-choose-regions-to-outline"]], "User guide": [[510, null]], "Using and visualizing the resulting parcellation": [[168, "using-and-visualizing-the-resulting-parcellation"]], "Using any other model in the pipeline": [[174, "using-any-other-model-in-the-pipeline"]], "Using nilearn for the first time": [[187, "using-nilearn-for-the-first-time"]], "Using predefined strategies": [[59, "using-predefined-strategies"]], "Using scikit-learn estimators": [[174, "using-scikit-learn-estimators"]], "Using the decoder": [[114, "using-the-decoder"]], "Using tox": [[188, "using-tox"]], "VBM analysis of aging": [[77, "vbm-analysis-of-aging"]], "Validating results": [[169, "validating-results"]], "Variation of norm of estimate": [[178, "variation-of-norm-of-estimate"]], "View results": [[77, "view-results"]], "View the results": [[72, "view-the-results"]], "Viewing results": [[24, "viewing-results"]], "Visualization": [[23, "visualization"], [27, "visualization"], [28, "visualization"], [32, "visualization"], [38, "visualization"], [39, "visualization"], [45, "visualization"], [106, "visualization"], [176, "visualization"]], "Visualization of Dictionary learning maps": [[169, "visualization-of-dictionary-learning-maps"]], "Visualization of FREM weights": [[33, "visualization-of-frem-weights"]], "Visualization of Region Extraction results": [[169, "visualization-of-region-extraction-results"]], "Visualization of affine resamplings": [[86, null]], "Visualization of brain images": [[9, null], [116, "visualization-of-brain-images"]], "Visualization of functional connectivity matrices": [[169, "visualization-of-functional-connectivity-matrices"]], "Visualize FREM weights": [[42, "visualize-frem-weights"]], "Visualize results": [[65, "visualize-results"]], "Visualize the ANOVA + SVC\u2019s discriminating weights": [[101, "visualize-the-anova-svc-s-discriminating-weights"]], "Visualize the atlas": [[93, "visualize-the-atlas"]], "Visualize the data": [[112, "visualize-the-data"]], "Visualize the decoding maps and quality of predictions": [[46, "visualize-the-decoding-maps-and-quality-of-predictions"]], "Visualize the quality of predictions": [[45, "visualize-the-quality-of-predictions"]], "Visualize the results": [[31, "visualize-the-results"], [83, "visualize-the-results"]], "Visualize: Brain parcellations (Hierarchical KMeans)": [[52, "visualize-brain-parcellations-hierarchical-kmeans"]], "Visualize: Brain parcellations (KMeans)": [[52, "visualize-brain-parcellations-kmeans"]], "Visualize: Brain parcellations (ReNA)": [[52, "visualize-brain-parcellations-rena"]], "Visualize: Brain parcellations (Ward)": [[52, "visualize-brain-parcellations-ward"]], "Visualizing 4D probabilistic atlas maps": [[22, null]], "Visualizing Megatrawls Network Matrices from Human Connectome Project": [[28, null]], "Visualizing a 3D file": [[2, "visualizing-a-3d-file"]], "Visualizing a probabilistic atlas with plot_prob_atlas": [[21, "visualizing-a-probabilistic-atlas-with-plot-prob-atlas"]], "Visualizing a probabilistic atlas with plot_stat_map and add_overlay object": [[21, "visualizing-a-probabilistic-atlas-with-plot-stat-map-and-add-overlay-object"]], "Visualizing a probabilistic atlas: the default mode in the MSDL atlas": [[21, null]], "Visualizing an atlas with its own colormap": [[11, "visualizing-an-atlas-with-its-own-colormap"]], "Visualizing brain parcellations": [[20, "visualizing-brain-parcellations"]], "Visualizing global patterns over time": [[12, "visualizing-global-patterns-over-time"]], "Visualizing global patterns with a carpet plot": [[12, null]], "Visualizing global patterns, separated by tissue type": [[12, "visualizing-global-patterns-separated-by-tissue-type"]], "Visualizing multiscale functional brain parcellations": [[20, null]], "Visualizing one volume in a 4D file": [[2, "visualizing-one-volume-in-a-4d-file"]], "Visualizing results": [[120, "visualizing-results"], [170, "visualizing-results"]], "Visualizing the Harvard-Oxford atlas": [[11, "visualizing-the-harvard-oxford-atlas"]], "Visualizing the Harvard-Oxford atlas with contours": [[11, "visualizing-the-harvard-oxford-atlas-with-contours"]], "Visualizing the Juelich atlas": [[11, "visualizing-the-juelich-atlas"]], "Visualizing the Juelich atlas with contours": [[11, "visualizing-the-juelich-atlas-with-contours"]], "Visualizing the computed mask": [[192, "visualizing-the-computed-mask"]], "Visualizing the decoder\u2019s weights": [[171, "visualizing-the-decoder-s-weights"]], "Visualizing the fMRI volume": [[3, "visualizing-the-fmri-volume"]], "Visualizing the face vs house map": [[32, "visualizing-the-face-vs-house-map"]], "Visualizing the parcellation": [[168, "visualizing-the-parcellation"]], "Visualizing the results": [[171, "visualizing-the-results"]], "Visualizing without a colorbar on the right side": [[17, "visualizing-without-a-colorbar-on-the-right-side"]], "Volume GLM": [[491, "volume-glm"]], "Volume censoring": [[68, "volume-censoring"]], "Voxel based morphometry": [[184, "voxel-based-morphometry"]], "Voxel-Based Morphometry on OASIS dataset": [[77, null]], "Voxel-Based Morphometry on Oasis dataset": [[45, null]], "Voxel-Based Morphometry on Oasis dataset with Space-Net prior": [[46, null]], "Warm restart": [[178, "warm-restart"]], "Warnings": [[239, "warnings"]], "We define our prediction function": [[44, "we-define-our-prediction-function"]], "We make a simple bar plot to summarize the results": [[34, "we-make-a-simple-bar-plot-to-summarize-the-results"]], "What do we mean by a run?": [[181, null]], "What is a surface image?": [[7, "what-is-a-surface-image"]], "What is fMRI ?": [[181, "what-is-fmri"]], "What is nilearn?": [[187, "what-is-nilearn"]], "What is the chance level accuracy?": [[3, "what-is-the-chance-level-accuracy"]], "What kind of connectivity is most powerful for classification?": [[54, "what-kind-of-connectivity-is-most-powerful-for-classification"], [102, "what-kind-of-connectivity-is-most-powerful-for-classification"]], "What\u2019s new": [[163, null]], "Which clustering to use": [[168, null]], "Who makes decisions": [[179, "who-makes-decisions"]], "Working with Surface images": [[7, null]], "Working with long time series fMRI images": [[111, null]], "XSlicer: Single view \u2018sagittal\u2019 with only two slices": [[16, "xslicer-single-view-sagittal-with-only-two-slices"]], "XZSlicer: Two views \u2018sagittal\u2019 and \u2018axial\u2019 with given coordinates": [[16, "xzslicer-two-views-sagittal-and-axial-with-given-coordinates"]], "YSlicer: Single view \u2018coronal\u2019 with single cut": [[16, "yslicer-single-view-coronal-with-single-cut"]], "YXSlicer: Two views \u2018coronal\u2019 and \u2018sagittal\u2019 with coordinates": [[16, "yxslicer-two-views-coronal-and-sagittal-with-coordinates"]], "YZSlicer: Two views \u2018coronal\u2019 and \u2018axial\u2019 with coordinates": [[16, "yzslicer-two-views-coronal-and-axial-with-coordinates"]], "Yeo 2011 atlas": [[237, null]], "ZSlicer: Single view \u2018axial\u2019 with number of cuts=5": [[16, "zslicer-single-view-axial-with-number-of-cuts-5"]], "`dtype` argument": [[192, null]], "assign.yml": [[164, "assign-yml"]], "auto-comment.yml": [[164, "auto-comment-yml"]], "benchmark.yml": [[164, "benchmark-yml"]], "build-docs.yml": [[164, "build-docs-yml"]], "check_gha_workflow.yml": [[164, "check-gha-workflow-yml"]], "circle_artifacts.yml": [[164, "circle-artifacts-yml"]], "development fMRI dataset": [[207, null]], "fMRI data modeling": [[181, "fmri-data-modeling"]], "fMRI statistical analysis": [[181, "fmri-statistical-analysis"]], "fMRI: using beta maps of a first-level analysis": [[171, null]], "fiac first level dataset": [[210, null]], "fsaverage template": [[211, null]], "fsaverage3 template": [[212, null]], "fsaverage4 template": [[213, null]], "fsaverage5 template": [[214, null]], "fsaverage6 template": [[215, null]], "language localizer demo dataset": [[221, null]], "linkcheck.yml": [[164, "linkcheck-yml"]], "localizer first level dataset": [[222, null]], "nightly_dependencies.yml": [[164, "nightly-dependencies-yml"]], "nilearn": [[508, "nilearn"]], "nilearn.connectome.ConnectivityMeasure": [[240, null]], "nilearn.connectome.GroupSparseCovariance": [[241, null]], "nilearn.connectome.GroupSparseCovarianceCV": [[242, null]], "nilearn.connectome.cov_to_corr": [[243, null]], "nilearn.connectome.group_sparse_covariance": [[244, null]], "nilearn.connectome.prec_to_partial": [[245, null]], "nilearn.connectome.sym_matrix_to_vec": [[246, null]], "nilearn.connectome.vec_to_sym_matrix": [[247, null]], "nilearn.connectome: Functional Connectivity": [[193, null]], "nilearn.datasets.fetch_abide_pcp": [[248, null]], "nilearn.datasets.fetch_adhd": [[249, null]], "nilearn.datasets.fetch_atlas_aal": [[250, null]], "nilearn.datasets.fetch_atlas_allen_2011": [[251, null]], "nilearn.datasets.fetch_atlas_basc_multiscale_2015": [[252, null]], "nilearn.datasets.fetch_atlas_craddock_2012": [[253, null]], "nilearn.datasets.fetch_atlas_destrieux_2009": [[254, null]], "nilearn.datasets.fetch_atlas_difumo": [[255, null]], "nilearn.datasets.fetch_atlas_harvard_oxford": [[256, null]], "nilearn.datasets.fetch_atlas_juelich": [[257, null]], "nilearn.datasets.fetch_atlas_msdl": [[258, null]], "nilearn.datasets.fetch_atlas_pauli_2017": [[259, null]], "nilearn.datasets.fetch_atlas_schaefer_2018": [[260, null]], "nilearn.datasets.fetch_atlas_smith_2009": [[261, null]], "nilearn.datasets.fetch_atlas_surf_destrieux": [[262, null]], "nilearn.datasets.fetch_atlas_talairach": [[263, null]], "nilearn.datasets.fetch_atlas_yeo_2011": [[264, null]], "nilearn.datasets.fetch_coords_dosenbach_2010": [[265, null]], "nilearn.datasets.fetch_coords_power_2011": [[266, null]], "nilearn.datasets.fetch_coords_seitzman_2018": [[267, null]], "nilearn.datasets.fetch_development_fmri": [[268, null]], "nilearn.datasets.fetch_ds000030_urls": [[269, null]], "nilearn.datasets.fetch_fiac_first_level": [[270, null]], "nilearn.datasets.fetch_haxby": [[271, null]], "nilearn.datasets.fetch_icbm152_2009": [[272, null]], "nilearn.datasets.fetch_icbm152_brain_gm_mask": [[273, null]], "nilearn.datasets.fetch_language_localizer_demo_dataset": [[274, null]], "nilearn.datasets.fetch_localizer_button_task": [[275, null]], "nilearn.datasets.fetch_localizer_calculation_task": [[276, null]], "nilearn.datasets.fetch_localizer_contrasts": [[277, null]], "nilearn.datasets.fetch_localizer_first_level": [[278, null]], "nilearn.datasets.fetch_megatrawls_netmats": [[279, null]], "nilearn.datasets.fetch_mixed_gambles": [[280, null]], "nilearn.datasets.fetch_miyawaki2008": [[281, null]], "nilearn.datasets.fetch_neurovault": [[282, null]], "nilearn.datasets.fetch_neurovault_auditory_computation_task": [[283, null]], "nilearn.datasets.fetch_neurovault_ids": [[284, null]], "nilearn.datasets.fetch_neurovault_motor_task": [[285, null]], "nilearn.datasets.fetch_oasis_vbm": [[286, null]], "nilearn.datasets.fetch_openneuro_dataset": [[287, null]], "nilearn.datasets.fetch_spm_auditory": [[288, null]], "nilearn.datasets.fetch_spm_multimodal_fmri": [[289, null]], "nilearn.datasets.fetch_surf_fsaverage": [[290, null]], "nilearn.datasets.fetch_surf_nki_enhanced": [[291, null]], "nilearn.datasets.get_data_dirs": [[292, null]], "nilearn.datasets.load_fsaverage": [[293, null]], "nilearn.datasets.load_fsaverage_data": [[294, null]], "nilearn.datasets.load_mni152_brain_mask": [[295, null]], "nilearn.datasets.load_mni152_gm_mask": [[296, null]], "nilearn.datasets.load_mni152_gm_template": [[297, null]], "nilearn.datasets.load_mni152_template": [[298, null]], "nilearn.datasets.load_mni152_wm_mask": [[299, null]], "nilearn.datasets.load_mni152_wm_template": [[300, null]], "nilearn.datasets.load_nki": [[301, null]], "nilearn.datasets.load_sample_motor_activation_image": [[302, null]], "nilearn.datasets.patch_openneuro_dataset": [[303, null]], "nilearn.datasets.select_from_index": [[304, null]], "nilearn.datasets: Automatic Dataset Fetching": [[194, null]], "nilearn.decoding.Decoder": [[305, null]], "nilearn.decoding.DecoderRegressor": [[306, null]], "nilearn.decoding.FREMClassifier": [[307, null]], "nilearn.decoding.FREMRegressor": [[308, null]], "nilearn.decoding.SearchLight": [[309, null]], "nilearn.decoding.SpaceNetClassifier": [[310, null]], "nilearn.decoding.SpaceNetRegressor": [[311, null]], "nilearn.decoding: Decoding": [[195, null]], "nilearn.decomposition.CanICA": [[312, null]], "nilearn.decomposition.DictLearning": [[313, null]], "nilearn.decomposition: Multivariate Decompositions": [[196, null]], "nilearn.exceptions.AllVolumesRemovedError": [[314, null]], "nilearn.exceptions.DimensionError": [[315, null]], "nilearn.exceptions.MaskWarning": [[316, null]], "nilearn.exceptions.MeshDimensionError": [[317, null]], "nilearn.exceptions.NotImplementedWarning": [[318, null]], "nilearn.exceptions: Exceptions and warnings": [[239, null]], "nilearn.glm.ARModel": [[319, null]], "nilearn.glm.Contrast": [[320, null]], "nilearn.glm.FContrastResults": [[321, null]], "nilearn.glm.LikelihoodModelResults": [[322, null]], "nilearn.glm.OLSModel": [[323, null]], "nilearn.glm.RegressionResults": [[324, null]], "nilearn.glm.SimpleRegressionResults": [[325, null]], "nilearn.glm.TContrastResults": [[326, null]], "nilearn.glm.cluster_level_inference": [[327, null]], "nilearn.glm.compute_contrast": [[328, null]], "nilearn.glm.compute_fixed_effects": [[329, null]], "nilearn.glm.expression_to_contrast_vector": [[330, null]], "nilearn.glm.fdr_threshold": [[331, null]], "nilearn.glm.first_level": [[493, "module-nilearn.glm.first_level"]], "nilearn.glm.first_level.FirstLevelModel": [[332, null]], "nilearn.glm.first_level.check_design_matrix": [[333, null]], "nilearn.glm.first_level.compute_regressor": [[334, null]], "nilearn.glm.first_level.first_level_from_bids": [[335, null]], "nilearn.glm.first_level.glover_dispersion_derivative": [[336, null]], "nilearn.glm.first_level.glover_hrf": [[337, null]], "nilearn.glm.first_level.glover_time_derivative": [[338, null]], "nilearn.glm.first_level.make_first_level_design_matrix": [[339, null]], "nilearn.glm.first_level.mean_scaling": [[340, null]], "nilearn.glm.first_level.run_glm": [[341, null]], "nilearn.glm.first_level.spm_dispersion_derivative": [[342, null]], "nilearn.glm.first_level.spm_hrf": [[343, null]], "nilearn.glm.first_level.spm_time_derivative": [[344, null]], "nilearn.glm.save_glm_to_bids": [[345, null]], "nilearn.glm.second_level": [[493, "module-nilearn.glm.second_level"]], "nilearn.glm.second_level.SecondLevelModel": [[346, null]], "nilearn.glm.second_level.make_second_level_design_matrix": [[347, null]], "nilearn.glm.second_level.non_parametric_inference": [[348, null]], "nilearn.glm.threshold_stats_img": [[349, null]], "nilearn.glm: Generalized Linear Models": [[493, null]], "nilearn.image.binarize_img": [[350, null]], "nilearn.image.clean_img": [[351, null]], "nilearn.image.concat_imgs": [[352, null]], "nilearn.image.coord_transform": [[353, null]], "nilearn.image.copy_img": [[354, null]], "nilearn.image.crop_img": [[355, null]], "nilearn.image.get_data": [[356, null]], "nilearn.image.high_variance_confounds": [[357, null]], "nilearn.image.index_img": [[358, null]], "nilearn.image.iter_img": [[359, null]], "nilearn.image.largest_connected_component_img": [[360, null]], "nilearn.image.load_img": [[361, null]], "nilearn.image.math_img": [[362, null]], "nilearn.image.mean_img": [[363, null]], "nilearn.image.new_img_like": [[364, null]], "nilearn.image.reorder_img": [[365, null]], "nilearn.image.resample_img": [[366, null]], "nilearn.image.resample_to_img": [[367, null]], "nilearn.image.smooth_img": [[368, null]], "nilearn.image.swap_img_hemispheres": [[369, null]], "nilearn.image.threshold_img": [[370, null]], "nilearn.image: Image Processing and Resampling Utilities": [[494, null]], "nilearn.interfaces.bids": [[496, "module-nilearn.interfaces.bids"]], "nilearn.interfaces.bids.get_bids_files": [[371, null]], "nilearn.interfaces.bids.parse_bids_filename": [[372, null]], "nilearn.interfaces.fmriprep": [[496, "module-nilearn.interfaces.fmriprep"]], "nilearn.interfaces.fmriprep.load_confounds": [[373, null]], "nilearn.interfaces.fmriprep.load_confounds_strategy": [[374, null]], "nilearn.interfaces.fsl": [[496, "module-nilearn.interfaces.fsl"]], "nilearn.interfaces.fsl.get_design_from_fslmat": [[375, null]], "nilearn.interfaces: Loading components from interfaces": [[496, null]], "nilearn.maskers.BaseMasker": [[376, null]], "nilearn.maskers.MultiNiftiLabelsMasker": [[377, null]], "nilearn.maskers.MultiNiftiMapsMasker": [[378, null]], "nilearn.maskers.MultiNiftiMasker": [[379, null]], "nilearn.maskers.MultiSurfaceLabelsMasker": [[380, null]], "nilearn.maskers.MultiSurfaceMapsMasker": [[381, null]], "nilearn.maskers.MultiSurfaceMasker": [[382, null]], "nilearn.maskers.NiftiLabelsMasker": [[383, null]], "nilearn.maskers.NiftiMapsMasker": [[384, null]], "nilearn.maskers.NiftiMasker": [[385, null]], "nilearn.maskers.NiftiSpheresMasker": [[386, null]], "nilearn.maskers.SurfaceLabelsMasker": [[387, null]], "nilearn.maskers.SurfaceMapsMasker": [[388, null]], "nilearn.maskers.SurfaceMasker": [[389, null]], "nilearn.maskers: Extracting Signals from Brain Images": [[497, null]], "nilearn.masking.apply_mask": [[390, null]], "nilearn.masking.compute_background_mask": [[391, null]], "nilearn.masking.compute_brain_mask": [[392, null]], "nilearn.masking.compute_epi_mask": [[393, null]], "nilearn.masking.compute_multi_background_mask": [[394, null]], "nilearn.masking.compute_multi_brain_mask": [[395, null]], "nilearn.masking.compute_multi_epi_mask": [[396, null]], "nilearn.masking.intersect_masks": [[397, null]], "nilearn.masking.unmask": [[398, null]], "nilearn.masking: Data Masking Utilities": [[498, null]], "nilearn.mass_univariate.permuted_ols": [[399, null]], "nilearn.mass_univariate: Mass-Univariate Analysis": [[499, null]], "nilearn.plotting.displays.BaseAxes": [[400, null]], "nilearn.plotting.displays.BaseSlicer": [[401, null]], "nilearn.plotting.displays.CutAxes": [[402, null]], "nilearn.plotting.displays.GlassBrainAxes": [[403, null]], "nilearn.plotting.displays.LProjector": [[404, null]], "nilearn.plotting.displays.LRProjector": [[405, null]], "nilearn.plotting.displays.LYRProjector": [[406, null]], "nilearn.plotting.displays.LYRZProjector": [[407, null]], "nilearn.plotting.displays.LZRProjector": [[408, null]], "nilearn.plotting.displays.LZRYProjector": [[409, null]], "nilearn.plotting.displays.MosaicSlicer": [[410, null]], "nilearn.plotting.displays.OrthoProjector": [[411, null]], "nilearn.plotting.displays.OrthoSlicer": [[412, null]], "nilearn.plotting.displays.PlotlySurfaceFigure": [[413, null]], "nilearn.plotting.displays.RProjector": [[414, null]], "nilearn.plotting.displays.TiledSlicer": [[415, null]], "nilearn.plotting.displays.XProjector": [[416, null]], "nilearn.plotting.displays.XSlicer": [[417, null]], "nilearn.plotting.displays.XZProjector": [[418, null]], "nilearn.plotting.displays.XZSlicer": [[419, null]], "nilearn.plotting.displays.YProjector": [[420, null]], "nilearn.plotting.displays.YSlicer": [[421, null]], "nilearn.plotting.displays.YXProjector": [[422, null]], "nilearn.plotting.displays.YXSlicer": [[423, null]], "nilearn.plotting.displays.YZProjector": [[424, null]], "nilearn.plotting.displays.YZSlicer": [[425, null]], "nilearn.plotting.displays.ZProjector": [[426, null]], "nilearn.plotting.displays.ZSlicer": [[427, null]], "nilearn.plotting.displays.get_projector": [[428, null]], "nilearn.plotting.displays.get_slicer": [[429, null]], "nilearn.plotting.find_cut_slices": [[430, null]], "nilearn.plotting.find_parcellation_cut_coords": [[431, null]], "nilearn.plotting.find_probabilistic_atlas_cut_coords": [[432, null]], "nilearn.plotting.find_xyz_cut_coords": [[433, null]], "nilearn.plotting.plot_anat": [[434, null]], "nilearn.plotting.plot_bland_altman": [[435, null]], "nilearn.plotting.plot_carpet": [[436, null]], "nilearn.plotting.plot_connectome": [[437, null]], "nilearn.plotting.plot_contrast_matrix": [[438, null]], "nilearn.plotting.plot_design_matrix": [[439, null]], "nilearn.plotting.plot_design_matrix_correlation": [[440, null]], "nilearn.plotting.plot_epi": [[441, null]], "nilearn.plotting.plot_event": [[442, null]], "nilearn.plotting.plot_glass_brain": [[443, null]], "nilearn.plotting.plot_img": [[444, null]], "nilearn.plotting.plot_img_comparison": [[445, null]], "nilearn.plotting.plot_img_on_surf": [[446, null]], "nilearn.plotting.plot_markers": [[447, null]], "nilearn.plotting.plot_matrix": [[448, null]], "nilearn.plotting.plot_prob_atlas": [[449, null]], "nilearn.plotting.plot_roi": [[450, null]], "nilearn.plotting.plot_stat_map": [[451, null]], "nilearn.plotting.plot_surf": [[452, null]], "nilearn.plotting.plot_surf_contours": [[453, null]], "nilearn.plotting.plot_surf_roi": [[454, null]], "nilearn.plotting.plot_surf_stat_map": [[455, null]], "nilearn.plotting.show": [[456, null]], "nilearn.plotting.view_connectome": [[457, null]], "nilearn.plotting.view_img": [[458, null]], "nilearn.plotting.view_img_on_surf": [[459, null]], "nilearn.plotting.view_markers": [[460, null]], "nilearn.plotting.view_surf": [[461, null]], "nilearn.plotting: Plotting Brain Data": [[500, null]], "nilearn.regions.HierarchicalKMeans": [[462, null]], "nilearn.regions.Parcellations": [[463, null]], "nilearn.regions.ReNA": [[464, null]], "nilearn.regions.RegionExtractor": [[465, null]], "nilearn.regions.connected_label_regions": [[466, null]], "nilearn.regions.connected_regions": [[467, null]], "nilearn.regions.img_to_signals_labels": [[468, null]], "nilearn.regions.img_to_signals_maps": [[469, null]], "nilearn.regions.recursive_neighbor_agglomeration": [[470, null]], "nilearn.regions.signals_to_img_labels": [[471, null]], "nilearn.regions.signals_to_img_maps": [[472, null]], "nilearn.regions: Operating on Regions": [[502, null]], "nilearn.reporting.HTMLReport": [[473, null]], "nilearn.reporting.get_clusters_table": [[474, null]], "nilearn.reporting.make_glm_report": [[475, null]], "nilearn.reporting: Reporting Functions": [[503, null]], "nilearn.signal.butterworth": [[476, null]], "nilearn.signal.clean": [[477, null]], "nilearn.signal.high_variance_confounds": [[478, null]], "nilearn.signal: Preprocessing Time Series": [[504, null]], "nilearn.surface.FileMesh": [[479, null]], "nilearn.surface.InMemoryMesh": [[480, null]], "nilearn.surface.PolyData": [[481, null]], "nilearn.surface.PolyMesh": [[482, null]], "nilearn.surface.SurfaceImage": [[483, null]], "nilearn.surface.SurfaceMesh": [[484, null]], "nilearn.surface.load_surf_data": [[485, null]], "nilearn.surface.load_surf_mesh": [[486, null]], "nilearn.surface.vol_to_surf": [[487, null]], "nilearn.surface: Manipulating Surface Data": [[505, null]], "nilearn.utils": [[506, "nilearn-utils"]], "nilearn.utils.all_displays": [[488, null]], "nilearn.utils.all_estimators": [[489, null]], "nilearn.utils.all_functions": [[490, null]], "nilearn.utils: Utilities": [[506, null]], "nilearn_data: Where is the downloaded data stored?": [[190, null]], "plot_surf_stat_map: Surface plot using a surface map and a cortical mesh": [[507, "plot-surf-stat-map-surface-plot-using-a-surface-map-and-a-cortical-mesh"]], "scipy >= 0.14.0 compatibility": [[291, null]], "sourcery.yml": [[164, "sourcery-yml"]], "test_atlases.yml": [[164, "test-atlases-yml"]], "test_with_free_threaded_python.yml": [[164, "test-with-free-threaded-python-yml"]], "test_with_tox.yml": [[164, "test-with-tox-yml"]], "testing_install.yml": [[164, "testing-install-yml"]], "testing_minimum.yml": [[164, "testing-minimum-yml"]], "trigger_hosting_on_pr.yml": [[164, "trigger-hosting-on-pr-yml"]], "update_authors.yml": [[164, "update-authors-yml"]], "view_img_on_surf: Surface plot using a 3D statistical map": [[507, "view-img-on-surf-surface-plot-using-a-3d-statistical-map"]], "view_surf: Surface plot using a surface map and a cortical mesh": [[507, "view-surf-surface-plot-using-a-surface-map-and-a-cortical-mesh"]], "\u201cOpaque\u201d thresholding": [[26, "opaque-thresholding"]], "\u201cTransparent\u201d thresholding": [[26, "transparent-thresholding"]]}, "docnames": ["authors", "auto_examples/00_tutorials/index", "auto_examples/00_tutorials/plot_3d_and_4d_niimg", "auto_examples/00_tutorials/plot_decoding_tutorial", "auto_examples/00_tutorials/plot_nilearn_101", "auto_examples/00_tutorials/plot_python_101", "auto_examples/00_tutorials/plot_single_subject_single_run", "auto_examples/00_tutorials/plot_surface_101", "auto_examples/00_tutorials/sg_execution_times", "auto_examples/01_plotting/index", "auto_examples/01_plotting/plot_3d_map_to_surface_projection", "auto_examples/01_plotting/plot_atlas", "auto_examples/01_plotting/plot_carpet", "auto_examples/01_plotting/plot_colormaps", "auto_examples/01_plotting/plot_demo_glass_brain", "auto_examples/01_plotting/plot_demo_glass_brain_extensive", "auto_examples/01_plotting/plot_demo_more_plotting", "auto_examples/01_plotting/plot_demo_plotting", "auto_examples/01_plotting/plot_dim_plotting", "auto_examples/01_plotting/plot_haxby_masks", "auto_examples/01_plotting/plot_multiscale_parcellations", "auto_examples/01_plotting/plot_overlay", "auto_examples/01_plotting/plot_prob_atlas", "auto_examples/01_plotting/plot_surf_atlas", "auto_examples/01_plotting/plot_surf_stat_map", "auto_examples/01_plotting/plot_surface_projection_strategies", "auto_examples/01_plotting/plot_transparency", "auto_examples/01_plotting/plot_visualization", "auto_examples/01_plotting/plot_visualize_megatrawls_netmats", "auto_examples/01_plotting/sg_execution_times", "auto_examples/02_decoding/index", "auto_examples/02_decoding/plot_haxby_anova_svm", "auto_examples/02_decoding/plot_haxby_different_estimators", "auto_examples/02_decoding/plot_haxby_frem", "auto_examples/02_decoding/plot_haxby_full_analysis", "auto_examples/02_decoding/plot_haxby_glm_decoding", "auto_examples/02_decoding/plot_haxby_grid_search", "auto_examples/02_decoding/plot_haxby_multiclass", "auto_examples/02_decoding/plot_haxby_searchlight", "auto_examples/02_decoding/plot_haxby_searchlight_surface", "auto_examples/02_decoding/plot_haxby_stimuli", "auto_examples/02_decoding/plot_haxby_understand_decoder", "auto_examples/02_decoding/plot_mixed_gambles_frem", "auto_examples/02_decoding/plot_miyawaki_encoding", "auto_examples/02_decoding/plot_miyawaki_reconstruction", "auto_examples/02_decoding/plot_oasis_vbm", "auto_examples/02_decoding/plot_oasis_vbm_space_net", "auto_examples/02_decoding/plot_simulated_data", "auto_examples/02_decoding/sg_execution_times", "auto_examples/03_connectivity/index", "auto_examples/03_connectivity/plot_atlas_comparison", "auto_examples/03_connectivity/plot_compare_decomposition", "auto_examples/03_connectivity/plot_data_driven_parcellations", "auto_examples/03_connectivity/plot_extract_regions_dictlearning_maps", "auto_examples/03_connectivity/plot_group_level_connectivity", "auto_examples/03_connectivity/plot_inverse_covariance_connectome", "auto_examples/03_connectivity/plot_multi_subject_connectome", "auto_examples/03_connectivity/plot_probabilistic_atlas_extraction", "auto_examples/03_connectivity/plot_seed_to_voxel_correlation", "auto_examples/03_connectivity/plot_signal_extraction", "auto_examples/03_connectivity/plot_simulated_connectome", "auto_examples/03_connectivity/plot_sphere_based_connectome", "auto_examples/03_connectivity/sg_execution_times", "auto_examples/04_glm_first_level/index", "auto_examples/04_glm_first_level/plot_adhd_dmn", "auto_examples/04_glm_first_level/plot_bids_features", "auto_examples/04_glm_first_level/plot_design_matrix", "auto_examples/04_glm_first_level/plot_fir_model", "auto_examples/04_glm_first_level/plot_first_level_details", "auto_examples/04_glm_first_level/plot_hrf", "auto_examples/04_glm_first_level/plot_localizer_surface_analysis", "auto_examples/04_glm_first_level/plot_predictions_residuals", "auto_examples/04_glm_first_level/plot_spm_multimodal_faces", "auto_examples/04_glm_first_level/plot_two_runs_model", "auto_examples/04_glm_first_level/plot_write_events_file", "auto_examples/04_glm_first_level/sg_execution_times", "auto_examples/05_glm_second_level/index", "auto_examples/05_glm_second_level/plot_oasis", "auto_examples/05_glm_second_level/plot_proportion_activated_voxels", "auto_examples/05_glm_second_level/plot_second_level_association_test", "auto_examples/05_glm_second_level/plot_second_level_design_matrix", "auto_examples/05_glm_second_level/plot_second_level_one_sample_test", "auto_examples/05_glm_second_level/plot_second_level_two_sample_test", "auto_examples/05_glm_second_level/plot_thresholding", "auto_examples/05_glm_second_level/sg_execution_times", "auto_examples/06_manipulating_images/index", "auto_examples/06_manipulating_images/plot_affine_transformation", "auto_examples/06_manipulating_images/plot_compare_mean_image", "auto_examples/06_manipulating_images/plot_extract_regions_labels_image", "auto_examples/06_manipulating_images/plot_extract_rois_smith_atlas", "auto_examples/06_manipulating_images/plot_extract_rois_statistical_maps", "auto_examples/06_manipulating_images/plot_mask_computation", "auto_examples/06_manipulating_images/plot_negate_image", "auto_examples/06_manipulating_images/plot_nifti_labels_simple", "auto_examples/06_manipulating_images/plot_nifti_simple", "auto_examples/06_manipulating_images/plot_resample_to_template", "auto_examples/06_manipulating_images/plot_roi_extraction", "auto_examples/06_manipulating_images/plot_smooth_mean_image", "auto_examples/06_manipulating_images/plot_threshold_image", "auto_examples/06_manipulating_images/sg_execution_times", "auto_examples/07_advanced/index", "auto_examples/07_advanced/plot_advanced_decoding_scikit", "auto_examples/07_advanced/plot_age_group_prediction_cross_val", "auto_examples/07_advanced/plot_beta_series", "auto_examples/07_advanced/plot_bids_analysis", "auto_examples/07_advanced/plot_copy_headers_math_img", "auto_examples/07_advanced/plot_haxby_mass_univariate", "auto_examples/07_advanced/plot_ica_neurovault", "auto_examples/07_advanced/plot_ica_resting_state", "auto_examples/07_advanced/plot_localizer_mass_univariate_methods", "auto_examples/07_advanced/plot_localizer_simple_analysis", "auto_examples/07_advanced/plot_mask_large_fmri", "auto_examples/07_advanced/plot_neurovault_meta_analysis", "auto_examples/07_advanced/plot_surface_bids_analysis", "auto_examples/07_advanced/plot_surface_image_and_maskers", "auto_examples/07_advanced/sg_execution_times", "auto_examples/index", "auto_examples/sg_execution_times", "bibliography", "building_blocks/index", "building_blocks/manual_pipeline", "building_blocks/neurovault", "changes/0.1.0", "changes/0.1.1", "changes/0.1.2", "changes/0.1.3", "changes/0.1.4", "changes/0.10.0", "changes/0.10.1", "changes/0.10.2", "changes/0.10.3", "changes/0.10.4", "changes/0.11.0", "changes/0.11.1", "changes/0.12.0", "changes/0.12.1", "changes/0.2.0", "changes/0.2.1", "changes/0.2.2", "changes/0.2.3", "changes/0.2.4", "changes/0.2.5", "changes/0.2.6", "changes/0.3.0", "changes/0.3.1", "changes/0.4.0", "changes/0.4.1", "changes/0.4.2", "changes/0.5.0", "changes/0.5.1", "changes/0.5.2", "changes/0.6.0", "changes/0.6.1", "changes/0.6.2", "changes/0.7.0", "changes/0.7.1", "changes/0.8.0", "changes/0.8.1", "changes/0.9.0", "changes/0.9.1", "changes/0.9.2", "changes/latest", "changes/names", "changes/whats_new", "ci", "connectivity/connectome_extraction", "connectivity/functional_connectomes", "connectivity/index", "connectivity/parcellating", "connectivity/region_extraction", "connectivity/resting_state_networks", "decoding/decoding_intro", "decoding/estimator_choice", "decoding/frem", "decoding/going_further", "decoding/index", "decoding/searchlight", "decoding/space_net", "developers/group_sparse_covariance", "development", "glm/first_level_model", "glm/glm_intro", "glm/index", "glm/meaning_difference", "glm/second_level_model", "glossary", "index", "introduction", "maintenance", "manipulating_images/index", "manipulating_images/input_output", "manipulating_images/manipulating_images", "manipulating_images/masker_objects", "modules/connectome", "modules/datasets", "modules/decoding", "modules/decomposition", "modules/description/ABIDE_pcp", "modules/description/Megatrawls", "modules/description/aal", "modules/description/adhd", "modules/description/allen_rsn_2011", "modules/description/basc_multiscale_2015", "modules/description/bids_langloc", "modules/description/brainomics_localizer", "modules/description/craddock_2012", "modules/description/destrieux_surface", "modules/description/development_fmri", "modules/description/difumo_atlases", "modules/description/dosenbach_2010", "modules/description/fiac", "modules/description/fsaverage", "modules/description/fsaverage3", "modules/description/fsaverage4", "modules/description/fsaverage5", "modules/description/fsaverage6", "modules/description/fsaverage_content", "modules/description/harvard_oxford", "modules/description/haxby2001", "modules/description/icbm152_2009", "modules/description/juelich", "modules/description/language_localizer_demo", "modules/description/localizer_first_level", "modules/description/mixed_gambles", "modules/description/miyawaki2008", "modules/description/msdl_atlas", "modules/description/neurovault", "modules/description/nki_enhanced_surface", "modules/description/oasis1", "modules/description/pauli_2017", "modules/description/power_2011", "modules/description/schaefer_2018", "modules/description/seitzman_2018", "modules/description/smith_2009", "modules/description/spm_auditory", "modules/description/spm_multimodal", "modules/description/talairach_atlas", "modules/description/yeo_2011", "modules/deterministic_atlases", "modules/exceptions", "modules/generated/nilearn.connectome.ConnectivityMeasure", "modules/generated/nilearn.connectome.GroupSparseCovariance", "modules/generated/nilearn.connectome.GroupSparseCovarianceCV", "modules/generated/nilearn.connectome.cov_to_corr", "modules/generated/nilearn.connectome.group_sparse_covariance", "modules/generated/nilearn.connectome.prec_to_partial", "modules/generated/nilearn.connectome.sym_matrix_to_vec", "modules/generated/nilearn.connectome.vec_to_sym_matrix", "modules/generated/nilearn.datasets.fetch_abide_pcp", "modules/generated/nilearn.datasets.fetch_adhd", "modules/generated/nilearn.datasets.fetch_atlas_aal", "modules/generated/nilearn.datasets.fetch_atlas_allen_2011", "modules/generated/nilearn.datasets.fetch_atlas_basc_multiscale_2015", "modules/generated/nilearn.datasets.fetch_atlas_craddock_2012", "modules/generated/nilearn.datasets.fetch_atlas_destrieux_2009", "modules/generated/nilearn.datasets.fetch_atlas_difumo", "modules/generated/nilearn.datasets.fetch_atlas_harvard_oxford", "modules/generated/nilearn.datasets.fetch_atlas_juelich", "modules/generated/nilearn.datasets.fetch_atlas_msdl", "modules/generated/nilearn.datasets.fetch_atlas_pauli_2017", "modules/generated/nilearn.datasets.fetch_atlas_schaefer_2018", "modules/generated/nilearn.datasets.fetch_atlas_smith_2009", "modules/generated/nilearn.datasets.fetch_atlas_surf_destrieux", "modules/generated/nilearn.datasets.fetch_atlas_talairach", "modules/generated/nilearn.datasets.fetch_atlas_yeo_2011", "modules/generated/nilearn.datasets.fetch_coords_dosenbach_2010", "modules/generated/nilearn.datasets.fetch_coords_power_2011", "modules/generated/nilearn.datasets.fetch_coords_seitzman_2018", "modules/generated/nilearn.datasets.fetch_development_fmri", "modules/generated/nilearn.datasets.fetch_ds000030_urls", "modules/generated/nilearn.datasets.fetch_fiac_first_level", "modules/generated/nilearn.datasets.fetch_haxby", "modules/generated/nilearn.datasets.fetch_icbm152_2009", "modules/generated/nilearn.datasets.fetch_icbm152_brain_gm_mask", "modules/generated/nilearn.datasets.fetch_language_localizer_demo_dataset", "modules/generated/nilearn.datasets.fetch_localizer_button_task", "modules/generated/nilearn.datasets.fetch_localizer_calculation_task", "modules/generated/nilearn.datasets.fetch_localizer_contrasts", "modules/generated/nilearn.datasets.fetch_localizer_first_level", "modules/generated/nilearn.datasets.fetch_megatrawls_netmats", "modules/generated/nilearn.datasets.fetch_mixed_gambles", "modules/generated/nilearn.datasets.fetch_miyawaki2008", "modules/generated/nilearn.datasets.fetch_neurovault", "modules/generated/nilearn.datasets.fetch_neurovault_auditory_computation_task", "modules/generated/nilearn.datasets.fetch_neurovault_ids", "modules/generated/nilearn.datasets.fetch_neurovault_motor_task", "modules/generated/nilearn.datasets.fetch_oasis_vbm", "modules/generated/nilearn.datasets.fetch_openneuro_dataset", "modules/generated/nilearn.datasets.fetch_spm_auditory", "modules/generated/nilearn.datasets.fetch_spm_multimodal_fmri", "modules/generated/nilearn.datasets.fetch_surf_fsaverage", "modules/generated/nilearn.datasets.fetch_surf_nki_enhanced", "modules/generated/nilearn.datasets.get_data_dirs", "modules/generated/nilearn.datasets.load_fsaverage", "modules/generated/nilearn.datasets.load_fsaverage_data", "modules/generated/nilearn.datasets.load_mni152_brain_mask", "modules/generated/nilearn.datasets.load_mni152_gm_mask", "modules/generated/nilearn.datasets.load_mni152_gm_template", "modules/generated/nilearn.datasets.load_mni152_template", "modules/generated/nilearn.datasets.load_mni152_wm_mask", "modules/generated/nilearn.datasets.load_mni152_wm_template", "modules/generated/nilearn.datasets.load_nki", "modules/generated/nilearn.datasets.load_sample_motor_activation_image", "modules/generated/nilearn.datasets.patch_openneuro_dataset", "modules/generated/nilearn.datasets.select_from_index", "modules/generated/nilearn.decoding.Decoder", "modules/generated/nilearn.decoding.DecoderRegressor", "modules/generated/nilearn.decoding.FREMClassifier", "modules/generated/nilearn.decoding.FREMRegressor", "modules/generated/nilearn.decoding.SearchLight", "modules/generated/nilearn.decoding.SpaceNetClassifier", "modules/generated/nilearn.decoding.SpaceNetRegressor", "modules/generated/nilearn.decomposition.CanICA", "modules/generated/nilearn.decomposition.DictLearning", "modules/generated/nilearn.exceptions.AllVolumesRemovedError", "modules/generated/nilearn.exceptions.DimensionError", "modules/generated/nilearn.exceptions.MaskWarning", "modules/generated/nilearn.exceptions.MeshDimensionError", "modules/generated/nilearn.exceptions.NotImplementedWarning", "modules/generated/nilearn.glm.ARModel", "modules/generated/nilearn.glm.Contrast", "modules/generated/nilearn.glm.FContrastResults", "modules/generated/nilearn.glm.LikelihoodModelResults", "modules/generated/nilearn.glm.OLSModel", "modules/generated/nilearn.glm.RegressionResults", "modules/generated/nilearn.glm.SimpleRegressionResults", "modules/generated/nilearn.glm.TContrastResults", "modules/generated/nilearn.glm.cluster_level_inference", "modules/generated/nilearn.glm.compute_contrast", "modules/generated/nilearn.glm.compute_fixed_effects", "modules/generated/nilearn.glm.expression_to_contrast_vector", "modules/generated/nilearn.glm.fdr_threshold", "modules/generated/nilearn.glm.first_level.FirstLevelModel", "modules/generated/nilearn.glm.first_level.check_design_matrix", "modules/generated/nilearn.glm.first_level.compute_regressor", "modules/generated/nilearn.glm.first_level.first_level_from_bids", "modules/generated/nilearn.glm.first_level.glover_dispersion_derivative", "modules/generated/nilearn.glm.first_level.glover_hrf", "modules/generated/nilearn.glm.first_level.glover_time_derivative", "modules/generated/nilearn.glm.first_level.make_first_level_design_matrix", "modules/generated/nilearn.glm.first_level.mean_scaling", "modules/generated/nilearn.glm.first_level.run_glm", "modules/generated/nilearn.glm.first_level.spm_dispersion_derivative", "modules/generated/nilearn.glm.first_level.spm_hrf", "modules/generated/nilearn.glm.first_level.spm_time_derivative", "modules/generated/nilearn.glm.save_glm_to_bids", "modules/generated/nilearn.glm.second_level.SecondLevelModel", "modules/generated/nilearn.glm.second_level.make_second_level_design_matrix", "modules/generated/nilearn.glm.second_level.non_parametric_inference", "modules/generated/nilearn.glm.threshold_stats_img", "modules/generated/nilearn.image.binarize_img", "modules/generated/nilearn.image.clean_img", "modules/generated/nilearn.image.concat_imgs", "modules/generated/nilearn.image.coord_transform", "modules/generated/nilearn.image.copy_img", "modules/generated/nilearn.image.crop_img", "modules/generated/nilearn.image.get_data", "modules/generated/nilearn.image.high_variance_confounds", "modules/generated/nilearn.image.index_img", "modules/generated/nilearn.image.iter_img", "modules/generated/nilearn.image.largest_connected_component_img", "modules/generated/nilearn.image.load_img", "modules/generated/nilearn.image.math_img", "modules/generated/nilearn.image.mean_img", "modules/generated/nilearn.image.new_img_like", "modules/generated/nilearn.image.reorder_img", "modules/generated/nilearn.image.resample_img", "modules/generated/nilearn.image.resample_to_img", "modules/generated/nilearn.image.smooth_img", "modules/generated/nilearn.image.swap_img_hemispheres", "modules/generated/nilearn.image.threshold_img", "modules/generated/nilearn.interfaces.bids.get_bids_files", "modules/generated/nilearn.interfaces.bids.parse_bids_filename", "modules/generated/nilearn.interfaces.fmriprep.load_confounds", "modules/generated/nilearn.interfaces.fmriprep.load_confounds_strategy", "modules/generated/nilearn.interfaces.fsl.get_design_from_fslmat", "modules/generated/nilearn.maskers.BaseMasker", "modules/generated/nilearn.maskers.MultiNiftiLabelsMasker", "modules/generated/nilearn.maskers.MultiNiftiMapsMasker", "modules/generated/nilearn.maskers.MultiNiftiMasker", "modules/generated/nilearn.maskers.MultiSurfaceLabelsMasker", "modules/generated/nilearn.maskers.MultiSurfaceMapsMasker", "modules/generated/nilearn.maskers.MultiSurfaceMasker", "modules/generated/nilearn.maskers.NiftiLabelsMasker", "modules/generated/nilearn.maskers.NiftiMapsMasker", "modules/generated/nilearn.maskers.NiftiMasker", "modules/generated/nilearn.maskers.NiftiSpheresMasker", "modules/generated/nilearn.maskers.SurfaceLabelsMasker", "modules/generated/nilearn.maskers.SurfaceMapsMasker", "modules/generated/nilearn.maskers.SurfaceMasker", "modules/generated/nilearn.masking.apply_mask", "modules/generated/nilearn.masking.compute_background_mask", "modules/generated/nilearn.masking.compute_brain_mask", "modules/generated/nilearn.masking.compute_epi_mask", "modules/generated/nilearn.masking.compute_multi_background_mask", "modules/generated/nilearn.masking.compute_multi_brain_mask", "modules/generated/nilearn.masking.compute_multi_epi_mask", "modules/generated/nilearn.masking.intersect_masks", "modules/generated/nilearn.masking.unmask", "modules/generated/nilearn.mass_univariate.permuted_ols", "modules/generated/nilearn.plotting.displays.BaseAxes", "modules/generated/nilearn.plotting.displays.BaseSlicer", "modules/generated/nilearn.plotting.displays.CutAxes", "modules/generated/nilearn.plotting.displays.GlassBrainAxes", "modules/generated/nilearn.plotting.displays.LProjector", "modules/generated/nilearn.plotting.displays.LRProjector", "modules/generated/nilearn.plotting.displays.LYRProjector", "modules/generated/nilearn.plotting.displays.LYRZProjector", "modules/generated/nilearn.plotting.displays.LZRProjector", "modules/generated/nilearn.plotting.displays.LZRYProjector", "modules/generated/nilearn.plotting.displays.MosaicSlicer", "modules/generated/nilearn.plotting.displays.OrthoProjector", "modules/generated/nilearn.plotting.displays.OrthoSlicer", "modules/generated/nilearn.plotting.displays.PlotlySurfaceFigure", "modules/generated/nilearn.plotting.displays.RProjector", "modules/generated/nilearn.plotting.displays.TiledSlicer", "modules/generated/nilearn.plotting.displays.XProjector", "modules/generated/nilearn.plotting.displays.XSlicer", "modules/generated/nilearn.plotting.displays.XZProjector", "modules/generated/nilearn.plotting.displays.XZSlicer", "modules/generated/nilearn.plotting.displays.YProjector", "modules/generated/nilearn.plotting.displays.YSlicer", "modules/generated/nilearn.plotting.displays.YXProjector", "modules/generated/nilearn.plotting.displays.YXSlicer", "modules/generated/nilearn.plotting.displays.YZProjector", "modules/generated/nilearn.plotting.displays.YZSlicer", "modules/generated/nilearn.plotting.displays.ZProjector", "modules/generated/nilearn.plotting.displays.ZSlicer", "modules/generated/nilearn.plotting.displays.get_projector", "modules/generated/nilearn.plotting.displays.get_slicer", "modules/generated/nilearn.plotting.find_cut_slices", "modules/generated/nilearn.plotting.find_parcellation_cut_coords", "modules/generated/nilearn.plotting.find_probabilistic_atlas_cut_coords", "modules/generated/nilearn.plotting.find_xyz_cut_coords", "modules/generated/nilearn.plotting.plot_anat", "modules/generated/nilearn.plotting.plot_bland_altman", "modules/generated/nilearn.plotting.plot_carpet", "modules/generated/nilearn.plotting.plot_connectome", "modules/generated/nilearn.plotting.plot_contrast_matrix", "modules/generated/nilearn.plotting.plot_design_matrix", "modules/generated/nilearn.plotting.plot_design_matrix_correlation", "modules/generated/nilearn.plotting.plot_epi", "modules/generated/nilearn.plotting.plot_event", "modules/generated/nilearn.plotting.plot_glass_brain", "modules/generated/nilearn.plotting.plot_img", "modules/generated/nilearn.plotting.plot_img_comparison", "modules/generated/nilearn.plotting.plot_img_on_surf", "modules/generated/nilearn.plotting.plot_markers", "modules/generated/nilearn.plotting.plot_matrix", "modules/generated/nilearn.plotting.plot_prob_atlas", "modules/generated/nilearn.plotting.plot_roi", "modules/generated/nilearn.plotting.plot_stat_map", "modules/generated/nilearn.plotting.plot_surf", "modules/generated/nilearn.plotting.plot_surf_contours", "modules/generated/nilearn.plotting.plot_surf_roi", "modules/generated/nilearn.plotting.plot_surf_stat_map", "modules/generated/nilearn.plotting.show", "modules/generated/nilearn.plotting.view_connectome", "modules/generated/nilearn.plotting.view_img", "modules/generated/nilearn.plotting.view_img_on_surf", "modules/generated/nilearn.plotting.view_markers", "modules/generated/nilearn.plotting.view_surf", "modules/generated/nilearn.regions.HierarchicalKMeans", "modules/generated/nilearn.regions.Parcellations", "modules/generated/nilearn.regions.ReNA", "modules/generated/nilearn.regions.RegionExtractor", "modules/generated/nilearn.regions.connected_label_regions", "modules/generated/nilearn.regions.connected_regions", "modules/generated/nilearn.regions.img_to_signals_labels", "modules/generated/nilearn.regions.img_to_signals_maps", "modules/generated/nilearn.regions.recursive_neighbor_agglomeration", "modules/generated/nilearn.regions.signals_to_img_labels", "modules/generated/nilearn.regions.signals_to_img_maps", "modules/generated/nilearn.reporting.HTMLReport", "modules/generated/nilearn.reporting.get_clusters_table", "modules/generated/nilearn.reporting.make_glm_report", "modules/generated/nilearn.signal.butterworth", "modules/generated/nilearn.signal.clean", "modules/generated/nilearn.signal.high_variance_confounds", "modules/generated/nilearn.surface.FileMesh", "modules/generated/nilearn.surface.InMemoryMesh", "modules/generated/nilearn.surface.PolyData", "modules/generated/nilearn.surface.PolyMesh", "modules/generated/nilearn.surface.SurfaceImage", "modules/generated/nilearn.surface.SurfaceMesh", "modules/generated/nilearn.surface.load_surf_data", "modules/generated/nilearn.surface.load_surf_mesh", "modules/generated/nilearn.surface.vol_to_surf", "modules/generated/nilearn.utils.all_displays", "modules/generated/nilearn.utils.all_estimators", "modules/generated/nilearn.utils.all_functions", "modules/generated_reports/glm_reports_examples", "modules/generated_reports/masker_reports_examples", "modules/glm", "modules/image", "modules/index", "modules/interfaces", "modules/maskers", "modules/masking", "modules/mass_univariate", "modules/plotting", "modules/probabilistic_atlases", "modules/regions", "modules/reporting", "modules/signal", "modules/surface", "modules/utils", "plotting/index", "quickstart", "sg_execution_times", "user_guide", "versions"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinxcontrib.bibtex": 9, "sphinxext.opengraph": 1}, "filenames": ["authors.rst", "auto_examples/00_tutorials/index.rst", "auto_examples/00_tutorials/plot_3d_and_4d_niimg.rst", "auto_examples/00_tutorials/plot_decoding_tutorial.rst", "auto_examples/00_tutorials/plot_nilearn_101.rst", "auto_examples/00_tutorials/plot_python_101.rst", "auto_examples/00_tutorials/plot_single_subject_single_run.rst", "auto_examples/00_tutorials/plot_surface_101.rst", "auto_examples/00_tutorials/sg_execution_times.rst", "auto_examples/01_plotting/index.rst", "auto_examples/01_plotting/plot_3d_map_to_surface_projection.rst", "auto_examples/01_plotting/plot_atlas.rst", "auto_examples/01_plotting/plot_carpet.rst", "auto_examples/01_plotting/plot_colormaps.rst", "auto_examples/01_plotting/plot_demo_glass_brain.rst", "auto_examples/01_plotting/plot_demo_glass_brain_extensive.rst", "auto_examples/01_plotting/plot_demo_more_plotting.rst", "auto_examples/01_plotting/plot_demo_plotting.rst", "auto_examples/01_plotting/plot_dim_plotting.rst", "auto_examples/01_plotting/plot_haxby_masks.rst", "auto_examples/01_plotting/plot_multiscale_parcellations.rst", "auto_examples/01_plotting/plot_overlay.rst", "auto_examples/01_plotting/plot_prob_atlas.rst", "auto_examples/01_plotting/plot_surf_atlas.rst", "auto_examples/01_plotting/plot_surf_stat_map.rst", "auto_examples/01_plotting/plot_surface_projection_strategies.rst", "auto_examples/01_plotting/plot_transparency.rst", "auto_examples/01_plotting/plot_visualization.rst", "auto_examples/01_plotting/plot_visualize_megatrawls_netmats.rst", "auto_examples/01_plotting/sg_execution_times.rst", "auto_examples/02_decoding/index.rst", "auto_examples/02_decoding/plot_haxby_anova_svm.rst", "auto_examples/02_decoding/plot_haxby_different_estimators.rst", "auto_examples/02_decoding/plot_haxby_frem.rst", "auto_examples/02_decoding/plot_haxby_full_analysis.rst", "auto_examples/02_decoding/plot_haxby_glm_decoding.rst", "auto_examples/02_decoding/plot_haxby_grid_search.rst", "auto_examples/02_decoding/plot_haxby_multiclass.rst", "auto_examples/02_decoding/plot_haxby_searchlight.rst", "auto_examples/02_decoding/plot_haxby_searchlight_surface.rst", "auto_examples/02_decoding/plot_haxby_stimuli.rst", "auto_examples/02_decoding/plot_haxby_understand_decoder.rst", "auto_examples/02_decoding/plot_mixed_gambles_frem.rst", "auto_examples/02_decoding/plot_miyawaki_encoding.rst", "auto_examples/02_decoding/plot_miyawaki_reconstruction.rst", "auto_examples/02_decoding/plot_oasis_vbm.rst", "auto_examples/02_decoding/plot_oasis_vbm_space_net.rst", "auto_examples/02_decoding/plot_simulated_data.rst", "auto_examples/02_decoding/sg_execution_times.rst", "auto_examples/03_connectivity/index.rst", "auto_examples/03_connectivity/plot_atlas_comparison.rst", "auto_examples/03_connectivity/plot_compare_decomposition.rst", "auto_examples/03_connectivity/plot_data_driven_parcellations.rst", "auto_examples/03_connectivity/plot_extract_regions_dictlearning_maps.rst", "auto_examples/03_connectivity/plot_group_level_connectivity.rst", "auto_examples/03_connectivity/plot_inverse_covariance_connectome.rst", "auto_examples/03_connectivity/plot_multi_subject_connectome.rst", "auto_examples/03_connectivity/plot_probabilistic_atlas_extraction.rst", "auto_examples/03_connectivity/plot_seed_to_voxel_correlation.rst", "auto_examples/03_connectivity/plot_signal_extraction.rst", "auto_examples/03_connectivity/plot_simulated_connectome.rst", "auto_examples/03_connectivity/plot_sphere_based_connectome.rst", "auto_examples/03_connectivity/sg_execution_times.rst", "auto_examples/04_glm_first_level/index.rst", "auto_examples/04_glm_first_level/plot_adhd_dmn.rst", "auto_examples/04_glm_first_level/plot_bids_features.rst", "auto_examples/04_glm_first_level/plot_design_matrix.rst", "auto_examples/04_glm_first_level/plot_fir_model.rst", "auto_examples/04_glm_first_level/plot_first_level_details.rst", "auto_examples/04_glm_first_level/plot_hrf.rst", "auto_examples/04_glm_first_level/plot_localizer_surface_analysis.rst", "auto_examples/04_glm_first_level/plot_predictions_residuals.rst", "auto_examples/04_glm_first_level/plot_spm_multimodal_faces.rst", "auto_examples/04_glm_first_level/plot_two_runs_model.rst", "auto_examples/04_glm_first_level/plot_write_events_file.rst", "auto_examples/04_glm_first_level/sg_execution_times.rst", "auto_examples/05_glm_second_level/index.rst", "auto_examples/05_glm_second_level/plot_oasis.rst", "auto_examples/05_glm_second_level/plot_proportion_activated_voxels.rst", "auto_examples/05_glm_second_level/plot_second_level_association_test.rst", "auto_examples/05_glm_second_level/plot_second_level_design_matrix.rst", "auto_examples/05_glm_second_level/plot_second_level_one_sample_test.rst", "auto_examples/05_glm_second_level/plot_second_level_two_sample_test.rst", "auto_examples/05_glm_second_level/plot_thresholding.rst", "auto_examples/05_glm_second_level/sg_execution_times.rst", "auto_examples/06_manipulating_images/index.rst", "auto_examples/06_manipulating_images/plot_affine_transformation.rst", "auto_examples/06_manipulating_images/plot_compare_mean_image.rst", "auto_examples/06_manipulating_images/plot_extract_regions_labels_image.rst", "auto_examples/06_manipulating_images/plot_extract_rois_smith_atlas.rst", "auto_examples/06_manipulating_images/plot_extract_rois_statistical_maps.rst", "auto_examples/06_manipulating_images/plot_mask_computation.rst", "auto_examples/06_manipulating_images/plot_negate_image.rst", "auto_examples/06_manipulating_images/plot_nifti_labels_simple.rst", "auto_examples/06_manipulating_images/plot_nifti_simple.rst", "auto_examples/06_manipulating_images/plot_resample_to_template.rst", "auto_examples/06_manipulating_images/plot_roi_extraction.rst", "auto_examples/06_manipulating_images/plot_smooth_mean_image.rst", "auto_examples/06_manipulating_images/plot_threshold_image.rst", "auto_examples/06_manipulating_images/sg_execution_times.rst", "auto_examples/07_advanced/index.rst", "auto_examples/07_advanced/plot_advanced_decoding_scikit.rst", "auto_examples/07_advanced/plot_age_group_prediction_cross_val.rst", "auto_examples/07_advanced/plot_beta_series.rst", "auto_examples/07_advanced/plot_bids_analysis.rst", "auto_examples/07_advanced/plot_copy_headers_math_img.rst", "auto_examples/07_advanced/plot_haxby_mass_univariate.rst", "auto_examples/07_advanced/plot_ica_neurovault.rst", "auto_examples/07_advanced/plot_ica_resting_state.rst", "auto_examples/07_advanced/plot_localizer_mass_univariate_methods.rst", "auto_examples/07_advanced/plot_localizer_simple_analysis.rst", "auto_examples/07_advanced/plot_mask_large_fmri.rst", "auto_examples/07_advanced/plot_neurovault_meta_analysis.rst", "auto_examples/07_advanced/plot_surface_bids_analysis.rst", "auto_examples/07_advanced/plot_surface_image_and_maskers.rst", "auto_examples/07_advanced/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/sg_execution_times.rst", "bibliography.rst", "building_blocks/index.rst", "building_blocks/manual_pipeline.rst", "building_blocks/neurovault.rst", "changes/0.1.0.rst", "changes/0.1.1.rst", "changes/0.1.2.rst", "changes/0.1.3.rst", "changes/0.1.4.rst", "changes/0.10.0.rst", "changes/0.10.1.rst", "changes/0.10.2.rst", "changes/0.10.3.rst", "changes/0.10.4.rst", "changes/0.11.0.rst", "changes/0.11.1.rst", "changes/0.12.0.rst", "changes/0.12.1.rst", "changes/0.2.0.rst", "changes/0.2.1.rst", "changes/0.2.2.rst", "changes/0.2.3.rst", "changes/0.2.4.rst", "changes/0.2.5.rst", "changes/0.2.6.rst", "changes/0.3.0.rst", "changes/0.3.1.rst", "changes/0.4.0.rst", "changes/0.4.1.rst", "changes/0.4.2.rst", "changes/0.5.0.rst", "changes/0.5.1.rst", "changes/0.5.2.rst", "changes/0.6.0.rst", "changes/0.6.1.rst", "changes/0.6.2.rst", "changes/0.7.0.rst", "changes/0.7.1.rst", "changes/0.8.0.rst", "changes/0.8.1.rst", "changes/0.9.0.rst", "changes/0.9.1.rst", "changes/0.9.2.rst", "changes/latest.rst", "changes/names.rst", "changes/whats_new.rst", "ci.rst", "connectivity/connectome_extraction.rst", "connectivity/functional_connectomes.rst", "connectivity/index.rst", "connectivity/parcellating.rst", "connectivity/region_extraction.rst", "connectivity/resting_state_networks.rst", "decoding/decoding_intro.rst", "decoding/estimator_choice.rst", "decoding/frem.rst", "decoding/going_further.rst", "decoding/index.rst", "decoding/searchlight.rst", "decoding/space_net.rst", "developers/group_sparse_covariance.rst", "development.rst", "glm/first_level_model.rst", "glm/glm_intro.rst", "glm/index.rst", "glm/meaning_difference.rst", "glm/second_level_model.rst", "glossary.rst", "index.rst", "introduction.rst", "maintenance.rst", "manipulating_images/index.rst", "manipulating_images/input_output.rst", "manipulating_images/manipulating_images.rst", "manipulating_images/masker_objects.rst", "modules/connectome.rst", "modules/datasets.rst", "modules/decoding.rst", "modules/decomposition.rst", "modules/description/ABIDE_pcp.rst", "modules/description/Megatrawls.rst", "modules/description/aal.rst", "modules/description/adhd.rst", "modules/description/allen_rsn_2011.rst", "modules/description/basc_multiscale_2015.rst", "modules/description/bids_langloc.rst", "modules/description/brainomics_localizer.rst", "modules/description/craddock_2012.rst", "modules/description/destrieux_surface.rst", "modules/description/development_fmri.rst", "modules/description/difumo_atlases.rst", "modules/description/dosenbach_2010.rst", "modules/description/fiac.rst", "modules/description/fsaverage.rst", "modules/description/fsaverage3.rst", "modules/description/fsaverage4.rst", "modules/description/fsaverage5.rst", "modules/description/fsaverage6.rst", "modules/description/fsaverage_content.rst", "modules/description/harvard_oxford.rst", "modules/description/haxby2001.rst", "modules/description/icbm152_2009.rst", "modules/description/juelich.rst", "modules/description/language_localizer_demo.rst", "modules/description/localizer_first_level.rst", "modules/description/mixed_gambles.rst", "modules/description/miyawaki2008.rst", "modules/description/msdl_atlas.rst", "modules/description/neurovault.rst", "modules/description/nki_enhanced_surface.rst", "modules/description/oasis1.rst", "modules/description/pauli_2017.rst", "modules/description/power_2011.rst", "modules/description/schaefer_2018.rst", "modules/description/seitzman_2018.rst", "modules/description/smith_2009.rst", "modules/description/spm_auditory.rst", "modules/description/spm_multimodal.rst", "modules/description/talairach_atlas.rst", "modules/description/yeo_2011.rst", "modules/deterministic_atlases.md", "modules/exceptions.rst", "modules/generated/nilearn.connectome.ConnectivityMeasure.rst", "modules/generated/nilearn.connectome.GroupSparseCovariance.rst", "modules/generated/nilearn.connectome.GroupSparseCovarianceCV.rst", "modules/generated/nilearn.connectome.cov_to_corr.rst", "modules/generated/nilearn.connectome.group_sparse_covariance.rst", "modules/generated/nilearn.connectome.prec_to_partial.rst", "modules/generated/nilearn.connectome.sym_matrix_to_vec.rst", "modules/generated/nilearn.connectome.vec_to_sym_matrix.rst", "modules/generated/nilearn.datasets.fetch_abide_pcp.rst", "modules/generated/nilearn.datasets.fetch_adhd.rst", "modules/generated/nilearn.datasets.fetch_atlas_aal.rst", "modules/generated/nilearn.datasets.fetch_atlas_allen_2011.rst", "modules/generated/nilearn.datasets.fetch_atlas_basc_multiscale_2015.rst", "modules/generated/nilearn.datasets.fetch_atlas_craddock_2012.rst", "modules/generated/nilearn.datasets.fetch_atlas_destrieux_2009.rst", "modules/generated/nilearn.datasets.fetch_atlas_difumo.rst", "modules/generated/nilearn.datasets.fetch_atlas_harvard_oxford.rst", "modules/generated/nilearn.datasets.fetch_atlas_juelich.rst", "modules/generated/nilearn.datasets.fetch_atlas_msdl.rst", "modules/generated/nilearn.datasets.fetch_atlas_pauli_2017.rst", "modules/generated/nilearn.datasets.fetch_atlas_schaefer_2018.rst", "modules/generated/nilearn.datasets.fetch_atlas_smith_2009.rst", "modules/generated/nilearn.datasets.fetch_atlas_surf_destrieux.rst", "modules/generated/nilearn.datasets.fetch_atlas_talairach.rst", "modules/generated/nilearn.datasets.fetch_atlas_yeo_2011.rst", "modules/generated/nilearn.datasets.fetch_coords_dosenbach_2010.rst", "modules/generated/nilearn.datasets.fetch_coords_power_2011.rst", "modules/generated/nilearn.datasets.fetch_coords_seitzman_2018.rst", "modules/generated/nilearn.datasets.fetch_development_fmri.rst", "modules/generated/nilearn.datasets.fetch_ds000030_urls.rst", "modules/generated/nilearn.datasets.fetch_fiac_first_level.rst", "modules/generated/nilearn.datasets.fetch_haxby.rst", "modules/generated/nilearn.datasets.fetch_icbm152_2009.rst", "modules/generated/nilearn.datasets.fetch_icbm152_brain_gm_mask.rst", "modules/generated/nilearn.datasets.fetch_language_localizer_demo_dataset.rst", "modules/generated/nilearn.datasets.fetch_localizer_button_task.rst", "modules/generated/nilearn.datasets.fetch_localizer_calculation_task.rst", "modules/generated/nilearn.datasets.fetch_localizer_contrasts.rst", "modules/generated/nilearn.datasets.fetch_localizer_first_level.rst", "modules/generated/nilearn.datasets.fetch_megatrawls_netmats.rst", "modules/generated/nilearn.datasets.fetch_mixed_gambles.rst", "modules/generated/nilearn.datasets.fetch_miyawaki2008.rst", "modules/generated/nilearn.datasets.fetch_neurovault.rst", "modules/generated/nilearn.datasets.fetch_neurovault_auditory_computation_task.rst", "modules/generated/nilearn.datasets.fetch_neurovault_ids.rst", "modules/generated/nilearn.datasets.fetch_neurovault_motor_task.rst", "modules/generated/nilearn.datasets.fetch_oasis_vbm.rst", "modules/generated/nilearn.datasets.fetch_openneuro_dataset.rst", "modules/generated/nilearn.datasets.fetch_spm_auditory.rst", "modules/generated/nilearn.datasets.fetch_spm_multimodal_fmri.rst", "modules/generated/nilearn.datasets.fetch_surf_fsaverage.rst", "modules/generated/nilearn.datasets.fetch_surf_nki_enhanced.rst", "modules/generated/nilearn.datasets.get_data_dirs.rst", "modules/generated/nilearn.datasets.load_fsaverage.rst", "modules/generated/nilearn.datasets.load_fsaverage_data.rst", "modules/generated/nilearn.datasets.load_mni152_brain_mask.rst", "modules/generated/nilearn.datasets.load_mni152_gm_mask.rst", "modules/generated/nilearn.datasets.load_mni152_gm_template.rst", "modules/generated/nilearn.datasets.load_mni152_template.rst", "modules/generated/nilearn.datasets.load_mni152_wm_mask.rst", "modules/generated/nilearn.datasets.load_mni152_wm_template.rst", "modules/generated/nilearn.datasets.load_nki.rst", "modules/generated/nilearn.datasets.load_sample_motor_activation_image.rst", "modules/generated/nilearn.datasets.patch_openneuro_dataset.rst", "modules/generated/nilearn.datasets.select_from_index.rst", "modules/generated/nilearn.decoding.Decoder.rst", "modules/generated/nilearn.decoding.DecoderRegressor.rst", "modules/generated/nilearn.decoding.FREMClassifier.rst", "modules/generated/nilearn.decoding.FREMRegressor.rst", "modules/generated/nilearn.decoding.SearchLight.rst", "modules/generated/nilearn.decoding.SpaceNetClassifier.rst", "modules/generated/nilearn.decoding.SpaceNetRegressor.rst", "modules/generated/nilearn.decomposition.CanICA.rst", "modules/generated/nilearn.decomposition.DictLearning.rst", "modules/generated/nilearn.exceptions.AllVolumesRemovedError.rst", "modules/generated/nilearn.exceptions.DimensionError.rst", "modules/generated/nilearn.exceptions.MaskWarning.rst", "modules/generated/nilearn.exceptions.MeshDimensionError.rst", "modules/generated/nilearn.exceptions.NotImplementedWarning.rst", "modules/generated/nilearn.glm.ARModel.rst", "modules/generated/nilearn.glm.Contrast.rst", "modules/generated/nilearn.glm.FContrastResults.rst", "modules/generated/nilearn.glm.LikelihoodModelResults.rst", "modules/generated/nilearn.glm.OLSModel.rst", "modules/generated/nilearn.glm.RegressionResults.rst", "modules/generated/nilearn.glm.SimpleRegressionResults.rst", "modules/generated/nilearn.glm.TContrastResults.rst", "modules/generated/nilearn.glm.cluster_level_inference.rst", "modules/generated/nilearn.glm.compute_contrast.rst", "modules/generated/nilearn.glm.compute_fixed_effects.rst", "modules/generated/nilearn.glm.expression_to_contrast_vector.rst", "modules/generated/nilearn.glm.fdr_threshold.rst", "modules/generated/nilearn.glm.first_level.FirstLevelModel.rst", "modules/generated/nilearn.glm.first_level.check_design_matrix.rst", "modules/generated/nilearn.glm.first_level.compute_regressor.rst", "modules/generated/nilearn.glm.first_level.first_level_from_bids.rst", "modules/generated/nilearn.glm.first_level.glover_dispersion_derivative.rst", "modules/generated/nilearn.glm.first_level.glover_hrf.rst", "modules/generated/nilearn.glm.first_level.glover_time_derivative.rst", "modules/generated/nilearn.glm.first_level.make_first_level_design_matrix.rst", "modules/generated/nilearn.glm.first_level.mean_scaling.rst", "modules/generated/nilearn.glm.first_level.run_glm.rst", "modules/generated/nilearn.glm.first_level.spm_dispersion_derivative.rst", "modules/generated/nilearn.glm.first_level.spm_hrf.rst", "modules/generated/nilearn.glm.first_level.spm_time_derivative.rst", "modules/generated/nilearn.glm.save_glm_to_bids.rst", "modules/generated/nilearn.glm.second_level.SecondLevelModel.rst", "modules/generated/nilearn.glm.second_level.make_second_level_design_matrix.rst", "modules/generated/nilearn.glm.second_level.non_parametric_inference.rst", "modules/generated/nilearn.glm.threshold_stats_img.rst", "modules/generated/nilearn.image.binarize_img.rst", "modules/generated/nilearn.image.clean_img.rst", "modules/generated/nilearn.image.concat_imgs.rst", "modules/generated/nilearn.image.coord_transform.rst", "modules/generated/nilearn.image.copy_img.rst", "modules/generated/nilearn.image.crop_img.rst", "modules/generated/nilearn.image.get_data.rst", "modules/generated/nilearn.image.high_variance_confounds.rst", "modules/generated/nilearn.image.index_img.rst", "modules/generated/nilearn.image.iter_img.rst", "modules/generated/nilearn.image.largest_connected_component_img.rst", "modules/generated/nilearn.image.load_img.rst", "modules/generated/nilearn.image.math_img.rst", "modules/generated/nilearn.image.mean_img.rst", "modules/generated/nilearn.image.new_img_like.rst", "modules/generated/nilearn.image.reorder_img.rst", "modules/generated/nilearn.image.resample_img.rst", "modules/generated/nilearn.image.resample_to_img.rst", "modules/generated/nilearn.image.smooth_img.rst", "modules/generated/nilearn.image.swap_img_hemispheres.rst", "modules/generated/nilearn.image.threshold_img.rst", "modules/generated/nilearn.interfaces.bids.get_bids_files.rst", "modules/generated/nilearn.interfaces.bids.parse_bids_filename.rst", "modules/generated/nilearn.interfaces.fmriprep.load_confounds.rst", "modules/generated/nilearn.interfaces.fmriprep.load_confounds_strategy.rst", "modules/generated/nilearn.interfaces.fsl.get_design_from_fslmat.rst", "modules/generated/nilearn.maskers.BaseMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiLabelsMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiMapsMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiMasker.rst", "modules/generated/nilearn.maskers.MultiSurfaceLabelsMasker.rst", "modules/generated/nilearn.maskers.MultiSurfaceMapsMasker.rst", "modules/generated/nilearn.maskers.MultiSurfaceMasker.rst", "modules/generated/nilearn.maskers.NiftiLabelsMasker.rst", "modules/generated/nilearn.maskers.NiftiMapsMasker.rst", "modules/generated/nilearn.maskers.NiftiMasker.rst", "modules/generated/nilearn.maskers.NiftiSpheresMasker.rst", "modules/generated/nilearn.maskers.SurfaceLabelsMasker.rst", "modules/generated/nilearn.maskers.SurfaceMapsMasker.rst", "modules/generated/nilearn.maskers.SurfaceMasker.rst", "modules/generated/nilearn.masking.apply_mask.rst", "modules/generated/nilearn.masking.compute_background_mask.rst", "modules/generated/nilearn.masking.compute_brain_mask.rst", "modules/generated/nilearn.masking.compute_epi_mask.rst", "modules/generated/nilearn.masking.compute_multi_background_mask.rst", "modules/generated/nilearn.masking.compute_multi_brain_mask.rst", "modules/generated/nilearn.masking.compute_multi_epi_mask.rst", "modules/generated/nilearn.masking.intersect_masks.rst", "modules/generated/nilearn.masking.unmask.rst", "modules/generated/nilearn.mass_univariate.permuted_ols.rst", "modules/generated/nilearn.plotting.displays.BaseAxes.rst", "modules/generated/nilearn.plotting.displays.BaseSlicer.rst", "modules/generated/nilearn.plotting.displays.CutAxes.rst", "modules/generated/nilearn.plotting.displays.GlassBrainAxes.rst", "modules/generated/nilearn.plotting.displays.LProjector.rst", "modules/generated/nilearn.plotting.displays.LRProjector.rst", "modules/generated/nilearn.plotting.displays.LYRProjector.rst", "modules/generated/nilearn.plotting.displays.LYRZProjector.rst", "modules/generated/nilearn.plotting.displays.LZRProjector.rst", "modules/generated/nilearn.plotting.displays.LZRYProjector.rst", "modules/generated/nilearn.plotting.displays.MosaicSlicer.rst", "modules/generated/nilearn.plotting.displays.OrthoProjector.rst", "modules/generated/nilearn.plotting.displays.OrthoSlicer.rst", "modules/generated/nilearn.plotting.displays.PlotlySurfaceFigure.rst", "modules/generated/nilearn.plotting.displays.RProjector.rst", "modules/generated/nilearn.plotting.displays.TiledSlicer.rst", "modules/generated/nilearn.plotting.displays.XProjector.rst", "modules/generated/nilearn.plotting.displays.XSlicer.rst", "modules/generated/nilearn.plotting.displays.XZProjector.rst", "modules/generated/nilearn.plotting.displays.XZSlicer.rst", "modules/generated/nilearn.plotting.displays.YProjector.rst", "modules/generated/nilearn.plotting.displays.YSlicer.rst", "modules/generated/nilearn.plotting.displays.YXProjector.rst", "modules/generated/nilearn.plotting.displays.YXSlicer.rst", "modules/generated/nilearn.plotting.displays.YZProjector.rst", "modules/generated/nilearn.plotting.displays.YZSlicer.rst", "modules/generated/nilearn.plotting.displays.ZProjector.rst", "modules/generated/nilearn.plotting.displays.ZSlicer.rst", "modules/generated/nilearn.plotting.displays.get_projector.rst", "modules/generated/nilearn.plotting.displays.get_slicer.rst", "modules/generated/nilearn.plotting.find_cut_slices.rst", "modules/generated/nilearn.plotting.find_parcellation_cut_coords.rst", "modules/generated/nilearn.plotting.find_probabilistic_atlas_cut_coords.rst", "modules/generated/nilearn.plotting.find_xyz_cut_coords.rst", "modules/generated/nilearn.plotting.plot_anat.rst", "modules/generated/nilearn.plotting.plot_bland_altman.rst", "modules/generated/nilearn.plotting.plot_carpet.rst", "modules/generated/nilearn.plotting.plot_connectome.rst", "modules/generated/nilearn.plotting.plot_contrast_matrix.rst", "modules/generated/nilearn.plotting.plot_design_matrix.rst", "modules/generated/nilearn.plotting.plot_design_matrix_correlation.rst", "modules/generated/nilearn.plotting.plot_epi.rst", "modules/generated/nilearn.plotting.plot_event.rst", "modules/generated/nilearn.plotting.plot_glass_brain.rst", "modules/generated/nilearn.plotting.plot_img.rst", "modules/generated/nilearn.plotting.plot_img_comparison.rst", "modules/generated/nilearn.plotting.plot_img_on_surf.rst", "modules/generated/nilearn.plotting.plot_markers.rst", "modules/generated/nilearn.plotting.plot_matrix.rst", "modules/generated/nilearn.plotting.plot_prob_atlas.rst", "modules/generated/nilearn.plotting.plot_roi.rst", "modules/generated/nilearn.plotting.plot_stat_map.rst", "modules/generated/nilearn.plotting.plot_surf.rst", "modules/generated/nilearn.plotting.plot_surf_contours.rst", "modules/generated/nilearn.plotting.plot_surf_roi.rst", "modules/generated/nilearn.plotting.plot_surf_stat_map.rst", "modules/generated/nilearn.plotting.show.rst", "modules/generated/nilearn.plotting.view_connectome.rst", "modules/generated/nilearn.plotting.view_img.rst", "modules/generated/nilearn.plotting.view_img_on_surf.rst", "modules/generated/nilearn.plotting.view_markers.rst", "modules/generated/nilearn.plotting.view_surf.rst", "modules/generated/nilearn.regions.HierarchicalKMeans.rst", "modules/generated/nilearn.regions.Parcellations.rst", "modules/generated/nilearn.regions.ReNA.rst", "modules/generated/nilearn.regions.RegionExtractor.rst", "modules/generated/nilearn.regions.connected_label_regions.rst", "modules/generated/nilearn.regions.connected_regions.rst", "modules/generated/nilearn.regions.img_to_signals_labels.rst", "modules/generated/nilearn.regions.img_to_signals_maps.rst", "modules/generated/nilearn.regions.recursive_neighbor_agglomeration.rst", "modules/generated/nilearn.regions.signals_to_img_labels.rst", "modules/generated/nilearn.regions.signals_to_img_maps.rst", "modules/generated/nilearn.reporting.HTMLReport.rst", "modules/generated/nilearn.reporting.get_clusters_table.rst", "modules/generated/nilearn.reporting.make_glm_report.rst", "modules/generated/nilearn.signal.butterworth.rst", "modules/generated/nilearn.signal.clean.rst", "modules/generated/nilearn.signal.high_variance_confounds.rst", "modules/generated/nilearn.surface.FileMesh.rst", "modules/generated/nilearn.surface.InMemoryMesh.rst", "modules/generated/nilearn.surface.PolyData.rst", "modules/generated/nilearn.surface.PolyMesh.rst", "modules/generated/nilearn.surface.SurfaceImage.rst", "modules/generated/nilearn.surface.SurfaceMesh.rst", "modules/generated/nilearn.surface.load_surf_data.rst", "modules/generated/nilearn.surface.load_surf_mesh.rst", "modules/generated/nilearn.surface.vol_to_surf.rst", "modules/generated/nilearn.utils.all_displays.rst", "modules/generated/nilearn.utils.all_estimators.rst", "modules/generated/nilearn.utils.all_functions.rst", "modules/generated_reports/glm_reports_examples.rst", "modules/generated_reports/masker_reports_examples.rst", "modules/glm.rst", "modules/image.rst", "modules/index.rst", "modules/interfaces.rst", "modules/maskers.rst", "modules/masking.rst", "modules/mass_univariate.rst", "modules/plotting.rst", "modules/probabilistic_atlases.md", "modules/regions.rst", "modules/reporting.rst", "modules/signal.rst", "modules/surface.rst", "modules/utils.rst", "plotting/index.rst", "quickstart.md", "sg_execution_times.rst", "user_guide.rst", "versions.rst"], "indexentries": {"__init__() (nilearn.connectome.connectivitymeasure method)": [[240, "nilearn.connectome.ConnectivityMeasure.__init__", false]], "__init__() (nilearn.connectome.groupsparsecovariance method)": [[241, "nilearn.connectome.GroupSparseCovariance.__init__", false]], "__init__() (nilearn.connectome.groupsparsecovariancecv method)": [[242, "nilearn.connectome.GroupSparseCovarianceCV.__init__", false]], "__init__() (nilearn.decoding.decoder method)": [[305, "nilearn.decoding.Decoder.__init__", false]], "__init__() (nilearn.decoding.decoderregressor method)": [[306, "nilearn.decoding.DecoderRegressor.__init__", false]], "__init__() (nilearn.decoding.fremclassifier method)": [[307, "nilearn.decoding.FREMClassifier.__init__", false]], "__init__() (nilearn.decoding.fremregressor method)": [[308, "nilearn.decoding.FREMRegressor.__init__", false]], "__init__() (nilearn.decoding.searchlight method)": [[309, "nilearn.decoding.SearchLight.__init__", false]], "__init__() (nilearn.decoding.spacenetclassifier method)": [[310, "nilearn.decoding.SpaceNetClassifier.__init__", false]], "__init__() (nilearn.decoding.spacenetregressor method)": [[311, "nilearn.decoding.SpaceNetRegressor.__init__", false]], "__init__() (nilearn.decomposition.canica method)": [[312, "nilearn.decomposition.CanICA.__init__", false]], "__init__() (nilearn.decomposition.dictlearning method)": [[313, "nilearn.decomposition.DictLearning.__init__", false]], "__init__() (nilearn.exceptions.allvolumesremovederror method)": [[314, "nilearn.exceptions.AllVolumesRemovedError.__init__", false]], "__init__() (nilearn.exceptions.dimensionerror method)": [[315, "nilearn.exceptions.DimensionError.__init__", false]], "__init__() (nilearn.exceptions.maskwarning method)": [[316, "nilearn.exceptions.MaskWarning.__init__", false]], "__init__() (nilearn.exceptions.meshdimensionerror method)": [[317, "nilearn.exceptions.MeshDimensionError.__init__", false]], "__init__() (nilearn.exceptions.notimplementedwarning method)": [[318, "nilearn.exceptions.NotImplementedWarning.__init__", false]], "__init__() (nilearn.glm.armodel method)": [[319, "nilearn.glm.ARModel.__init__", false]], "__init__() (nilearn.glm.contrast method)": [[320, "nilearn.glm.Contrast.__init__", false]], "__init__() (nilearn.glm.fcontrastresults method)": [[321, "nilearn.glm.FContrastResults.__init__", false]], "__init__() (nilearn.glm.first_level.firstlevelmodel method)": [[332, "nilearn.glm.first_level.FirstLevelModel.__init__", false]], "__init__() (nilearn.glm.likelihoodmodelresults method)": [[322, "nilearn.glm.LikelihoodModelResults.__init__", false]], "__init__() (nilearn.glm.olsmodel method)": [[323, "nilearn.glm.OLSModel.__init__", false]], "__init__() (nilearn.glm.regressionresults method)": [[324, "nilearn.glm.RegressionResults.__init__", false]], "__init__() (nilearn.glm.second_level.secondlevelmodel method)": [[346, "nilearn.glm.second_level.SecondLevelModel.__init__", false]], "__init__() (nilearn.glm.simpleregressionresults method)": [[325, "nilearn.glm.SimpleRegressionResults.__init__", false]], "__init__() (nilearn.glm.tcontrastresults method)": [[326, "nilearn.glm.TContrastResults.__init__", false]], "__init__() (nilearn.maskers.multiniftilabelsmasker method)": [[377, "nilearn.maskers.MultiNiftiLabelsMasker.__init__", false]], "__init__() (nilearn.maskers.multiniftimapsmasker method)": [[378, "nilearn.maskers.MultiNiftiMapsMasker.__init__", false]], "__init__() (nilearn.maskers.multiniftimasker method)": [[379, "nilearn.maskers.MultiNiftiMasker.__init__", false]], "__init__() (nilearn.maskers.multisurfacelabelsmasker method)": [[380, "nilearn.maskers.MultiSurfaceLabelsMasker.__init__", false]], "__init__() (nilearn.maskers.multisurfacemapsmasker method)": [[381, "nilearn.maskers.MultiSurfaceMapsMasker.__init__", false]], "__init__() (nilearn.maskers.multisurfacemasker method)": [[382, "nilearn.maskers.MultiSurfaceMasker.__init__", false]], "__init__() (nilearn.maskers.niftilabelsmasker method)": [[383, "nilearn.maskers.NiftiLabelsMasker.__init__", false]], "__init__() (nilearn.maskers.niftimapsmasker method)": [[384, "nilearn.maskers.NiftiMapsMasker.__init__", false]], "__init__() (nilearn.maskers.niftimasker method)": [[385, "nilearn.maskers.NiftiMasker.__init__", false]], "__init__() (nilearn.maskers.niftispheresmasker method)": [[386, "nilearn.maskers.NiftiSpheresMasker.__init__", false]], "__init__() (nilearn.maskers.surfacelabelsmasker method)": [[387, "nilearn.maskers.SurfaceLabelsMasker.__init__", false]], "__init__() (nilearn.maskers.surfacemapsmasker method)": [[388, "nilearn.maskers.SurfaceMapsMasker.__init__", false]], "__init__() (nilearn.maskers.surfacemasker method)": [[389, "nilearn.maskers.SurfaceMasker.__init__", false]], "__init__() (nilearn.plotting.displays.baseaxes method)": [[400, "nilearn.plotting.displays.BaseAxes.__init__", false]], "__init__() (nilearn.plotting.displays.baseslicer method)": [[401, "nilearn.plotting.displays.BaseSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.cutaxes method)": [[402, "nilearn.plotting.displays.CutAxes.__init__", false]], "__init__() (nilearn.plotting.displays.glassbrainaxes method)": [[403, "nilearn.plotting.displays.GlassBrainAxes.__init__", false]], "__init__() (nilearn.plotting.displays.lprojector method)": [[404, "nilearn.plotting.displays.LProjector.__init__", false]], "__init__() (nilearn.plotting.displays.lrprojector method)": [[405, "nilearn.plotting.displays.LRProjector.__init__", false]], "__init__() (nilearn.plotting.displays.lyrprojector method)": [[406, "nilearn.plotting.displays.LYRProjector.__init__", false]], "__init__() (nilearn.plotting.displays.lyrzprojector method)": [[407, "nilearn.plotting.displays.LYRZProjector.__init__", false]], "__init__() (nilearn.plotting.displays.lzrprojector method)": [[408, "nilearn.plotting.displays.LZRProjector.__init__", false]], "__init__() (nilearn.plotting.displays.lzryprojector method)": [[409, "nilearn.plotting.displays.LZRYProjector.__init__", false]], "__init__() (nilearn.plotting.displays.mosaicslicer method)": [[410, "nilearn.plotting.displays.MosaicSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.orthoprojector method)": [[411, "nilearn.plotting.displays.OrthoProjector.__init__", false]], "__init__() (nilearn.plotting.displays.orthoslicer method)": [[412, "nilearn.plotting.displays.OrthoSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.plotlysurfacefigure method)": [[413, "nilearn.plotting.displays.PlotlySurfaceFigure.__init__", false]], "__init__() (nilearn.plotting.displays.rprojector method)": [[414, "nilearn.plotting.displays.RProjector.__init__", false]], "__init__() (nilearn.plotting.displays.tiledslicer method)": [[415, "nilearn.plotting.displays.TiledSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.xprojector method)": [[416, "nilearn.plotting.displays.XProjector.__init__", false]], "__init__() (nilearn.plotting.displays.xslicer method)": [[417, "nilearn.plotting.displays.XSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.xzprojector method)": [[418, "nilearn.plotting.displays.XZProjector.__init__", false]], "__init__() (nilearn.plotting.displays.xzslicer method)": [[419, "nilearn.plotting.displays.XZSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.yprojector method)": [[420, "nilearn.plotting.displays.YProjector.__init__", false]], "__init__() (nilearn.plotting.displays.yslicer method)": [[421, "nilearn.plotting.displays.YSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.yxprojector method)": [[422, "nilearn.plotting.displays.YXProjector.__init__", false]], "__init__() (nilearn.plotting.displays.yxslicer method)": [[423, "nilearn.plotting.displays.YXSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.yzprojector method)": [[424, "nilearn.plotting.displays.YZProjector.__init__", false]], "__init__() (nilearn.plotting.displays.yzslicer method)": [[425, "nilearn.plotting.displays.YZSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.zprojector method)": [[426, "nilearn.plotting.displays.ZProjector.__init__", false]], "__init__() (nilearn.plotting.displays.zslicer method)": [[427, "nilearn.plotting.displays.ZSlicer.__init__", false]], "__init__() (nilearn.regions.hierarchicalkmeans method)": [[462, "nilearn.regions.HierarchicalKMeans.__init__", false]], "__init__() (nilearn.regions.parcellations method)": [[463, "nilearn.regions.Parcellations.__init__", false]], "__init__() (nilearn.regions.regionextractor method)": [[465, "nilearn.regions.RegionExtractor.__init__", false]], "__init__() (nilearn.regions.rena method)": [[464, "nilearn.regions.ReNA.__init__", false]], "__init__() (nilearn.reporting.htmlreport method)": [[473, "nilearn.reporting.HTMLReport.__init__", false]], "__init__() (nilearn.surface.filemesh method)": [[479, "nilearn.surface.FileMesh.__init__", false]], "__init__() (nilearn.surface.inmemorymesh method)": [[480, "nilearn.surface.InMemoryMesh.__init__", false]], "__init__() (nilearn.surface.polydata method)": [[481, "nilearn.surface.PolyData.__init__", false]], "__init__() (nilearn.surface.polymesh method)": [[482, "nilearn.surface.PolyMesh.__init__", false]], "__init__() (nilearn.surface.surfaceimage method)": [[483, "nilearn.surface.SurfaceImage.__init__", false]], "add_contours() (nilearn.plotting.displays.baseslicer method)": [[401, "nilearn.plotting.displays.BaseSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.lprojector method)": [[404, "nilearn.plotting.displays.LProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.lrprojector method)": [[405, "nilearn.plotting.displays.LRProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.lyrprojector method)": [[406, "nilearn.plotting.displays.LYRProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.lyrzprojector method)": [[407, "nilearn.plotting.displays.LYRZProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.lzrprojector method)": [[408, "nilearn.plotting.displays.LZRProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.lzryprojector method)": [[409, "nilearn.plotting.displays.LZRYProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.mosaicslicer method)": [[410, "nilearn.plotting.displays.MosaicSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.orthoprojector method)": [[411, "nilearn.plotting.displays.OrthoProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.orthoslicer method)": [[412, "nilearn.plotting.displays.OrthoSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.plotlysurfacefigure method)": [[413, "nilearn.plotting.displays.PlotlySurfaceFigure.add_contours", false]], "add_contours() (nilearn.plotting.displays.rprojector method)": [[414, "nilearn.plotting.displays.RProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.tiledslicer method)": [[415, "nilearn.plotting.displays.TiledSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.xprojector method)": [[416, "nilearn.plotting.displays.XProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.xslicer method)": [[417, "nilearn.plotting.displays.XSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.xzprojector method)": [[418, "nilearn.plotting.displays.XZProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.xzslicer method)": [[419, "nilearn.plotting.displays.XZSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.yprojector method)": [[420, "nilearn.plotting.displays.YProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.yslicer method)": [[421, "nilearn.plotting.displays.YSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.yxprojector method)": [[422, "nilearn.plotting.displays.YXProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.yxslicer method)": [[423, "nilearn.plotting.displays.YXSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.yzprojector method)": [[424, "nilearn.plotting.displays.YZProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.yzslicer method)": [[425, "nilearn.plotting.displays.YZSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.zprojector method)": [[426, "nilearn.plotting.displays.ZProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.zslicer method)": [[427, "nilearn.plotting.displays.ZSlicer.add_contours", false]], "add_edges() (nilearn.plotting.displays.baseslicer method)": [[401, "nilearn.plotting.displays.BaseSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.lprojector method)": [[404, "nilearn.plotting.displays.LProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.lrprojector method)": [[405, "nilearn.plotting.displays.LRProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.lyrprojector method)": [[406, "nilearn.plotting.displays.LYRProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.lyrzprojector method)": [[407, "nilearn.plotting.displays.LYRZProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.lzrprojector method)": [[408, "nilearn.plotting.displays.LZRProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.lzryprojector method)": [[409, "nilearn.plotting.displays.LZRYProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.mosaicslicer method)": [[410, "nilearn.plotting.displays.MosaicSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.orthoprojector method)": [[411, "nilearn.plotting.displays.OrthoProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.orthoslicer method)": [[412, "nilearn.plotting.displays.OrthoSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.rprojector method)": [[414, "nilearn.plotting.displays.RProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.tiledslicer method)": [[415, "nilearn.plotting.displays.TiledSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.xprojector method)": [[416, "nilearn.plotting.displays.XProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.xslicer method)": [[417, "nilearn.plotting.displays.XSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.xzprojector method)": [[418, "nilearn.plotting.displays.XZProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.xzslicer method)": [[419, "nilearn.plotting.displays.XZSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.yprojector method)": [[420, "nilearn.plotting.displays.YProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.yslicer method)": [[421, "nilearn.plotting.displays.YSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.yxprojector method)": [[422, "nilearn.plotting.displays.YXProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.yxslicer method)": [[423, "nilearn.plotting.displays.YXSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.yzprojector method)": [[424, "nilearn.plotting.displays.YZProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.yzslicer method)": [[425, "nilearn.plotting.displays.YZSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.zprojector method)": [[426, "nilearn.plotting.displays.ZProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.zslicer method)": [[427, "nilearn.plotting.displays.ZSlicer.add_edges", false]], "add_graph() (nilearn.plotting.displays.lprojector method)": [[404, "nilearn.plotting.displays.LProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.lrprojector method)": [[405, "nilearn.plotting.displays.LRProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.lyrprojector method)": [[406, "nilearn.plotting.displays.LYRProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.lyrzprojector method)": [[407, "nilearn.plotting.displays.LYRZProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.lzrprojector method)": [[408, "nilearn.plotting.displays.LZRProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.lzryprojector method)": [[409, "nilearn.plotting.displays.LZRYProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.orthoprojector method)": [[411, "nilearn.plotting.displays.OrthoProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.rprojector method)": [[414, "nilearn.plotting.displays.RProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.xprojector method)": [[416, "nilearn.plotting.displays.XProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.xzprojector method)": [[418, "nilearn.plotting.displays.XZProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.yprojector method)": [[420, "nilearn.plotting.displays.YProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.yxprojector method)": [[422, "nilearn.plotting.displays.YXProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.yzprojector method)": [[424, "nilearn.plotting.displays.YZProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.zprojector method)": [[426, "nilearn.plotting.displays.ZProjector.add_graph", false]], "add_markers() (nilearn.plotting.displays.baseslicer method)": [[401, "nilearn.plotting.displays.BaseSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.lprojector method)": [[404, "nilearn.plotting.displays.LProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.lrprojector method)": [[405, "nilearn.plotting.displays.LRProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.lyrprojector method)": [[406, "nilearn.plotting.displays.LYRProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.lyrzprojector method)": [[407, "nilearn.plotting.displays.LYRZProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.lzrprojector method)": [[408, "nilearn.plotting.displays.LZRProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.lzryprojector method)": [[409, "nilearn.plotting.displays.LZRYProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.mosaicslicer method)": [[410, "nilearn.plotting.displays.MosaicSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.orthoprojector method)": [[411, "nilearn.plotting.displays.OrthoProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.orthoslicer method)": [[412, "nilearn.plotting.displays.OrthoSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.rprojector method)": [[414, "nilearn.plotting.displays.RProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.tiledslicer method)": [[415, "nilearn.plotting.displays.TiledSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.xprojector method)": [[416, "nilearn.plotting.displays.XProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.xslicer method)": [[417, "nilearn.plotting.displays.XSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.xzprojector method)": [[418, "nilearn.plotting.displays.XZProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.xzslicer method)": [[419, "nilearn.plotting.displays.XZSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.yprojector method)": [[420, "nilearn.plotting.displays.YProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.yslicer method)": [[421, "nilearn.plotting.displays.YSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.yxprojector method)": [[422, "nilearn.plotting.displays.YXProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.yxslicer method)": [[423, "nilearn.plotting.displays.YXSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.yzprojector method)": [[424, "nilearn.plotting.displays.YZProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.yzslicer method)": [[425, "nilearn.plotting.displays.YZSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.zprojector method)": [[426, "nilearn.plotting.displays.ZProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.zslicer method)": [[427, "nilearn.plotting.displays.ZSlicer.add_markers", false]], "add_object_bounds() (nilearn.plotting.displays.baseaxes method)": [[400, "nilearn.plotting.displays.BaseAxes.add_object_bounds", false]], "add_object_bounds() (nilearn.plotting.displays.cutaxes method)": [[402, "nilearn.plotting.displays.CutAxes.add_object_bounds", false]], "add_object_bounds() (nilearn.plotting.displays.glassbrainaxes method)": [[403, "nilearn.plotting.displays.GlassBrainAxes.add_object_bounds", false]], "add_overlay() (nilearn.plotting.displays.baseslicer method)": [[401, "nilearn.plotting.displays.BaseSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.lprojector method)": [[404, "nilearn.plotting.displays.LProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.lrprojector method)": [[405, "nilearn.plotting.displays.LRProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.lyrprojector method)": [[406, "nilearn.plotting.displays.LYRProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.lyrzprojector method)": [[407, "nilearn.plotting.displays.LYRZProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.lzrprojector method)": [[408, "nilearn.plotting.displays.LZRProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.lzryprojector method)": [[409, "nilearn.plotting.displays.LZRYProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.mosaicslicer method)": [[410, "nilearn.plotting.displays.MosaicSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.orthoprojector method)": [[411, "nilearn.plotting.displays.OrthoProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.orthoslicer method)": [[412, "nilearn.plotting.displays.OrthoSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.rprojector method)": [[414, "nilearn.plotting.displays.RProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.tiledslicer method)": [[415, "nilearn.plotting.displays.TiledSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.xprojector method)": [[416, "nilearn.plotting.displays.XProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.xslicer method)": [[417, "nilearn.plotting.displays.XSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.xzprojector method)": [[418, "nilearn.plotting.displays.XZProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.xzslicer method)": [[419, "nilearn.plotting.displays.XZSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.yprojector method)": [[420, "nilearn.plotting.displays.YProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.yslicer method)": [[421, "nilearn.plotting.displays.YSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.yxprojector method)": [[422, "nilearn.plotting.displays.YXProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.yxslicer method)": [[423, "nilearn.plotting.displays.YXSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.yzprojector method)": [[424, "nilearn.plotting.displays.YZProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.yzslicer method)": [[425, "nilearn.plotting.displays.YZSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.zprojector method)": [[426, "nilearn.plotting.displays.ZProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.zslicer method)": [[427, "nilearn.plotting.displays.ZSlicer.add_overlay", false]], "all_displays() (in module nilearn.utils)": [[488, "nilearn.utils.all_displays", false]], "all_estimators() (in module nilearn.utils)": [[489, "nilearn.utils.all_estimators", false]], "all_functions() (in module nilearn.utils)": [[490, "nilearn.utils.all_functions", false]], "allvolumesremovederror (class in nilearn.exceptions)": [[314, "nilearn.exceptions.AllVolumesRemovedError", false]], "annotate() (nilearn.plotting.displays.baseslicer method)": [[401, "nilearn.plotting.displays.BaseSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.lprojector method)": [[404, "nilearn.plotting.displays.LProjector.annotate", false]], "annotate() (nilearn.plotting.displays.lrprojector method)": [[405, "nilearn.plotting.displays.LRProjector.annotate", false]], "annotate() (nilearn.plotting.displays.lyrprojector method)": [[406, "nilearn.plotting.displays.LYRProjector.annotate", false]], "annotate() (nilearn.plotting.displays.lyrzprojector method)": [[407, "nilearn.plotting.displays.LYRZProjector.annotate", false]], "annotate() (nilearn.plotting.displays.lzrprojector method)": [[408, "nilearn.plotting.displays.LZRProjector.annotate", false]], "annotate() (nilearn.plotting.displays.lzryprojector method)": [[409, "nilearn.plotting.displays.LZRYProjector.annotate", false]], "annotate() (nilearn.plotting.displays.mosaicslicer method)": [[410, "nilearn.plotting.displays.MosaicSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.orthoprojector method)": [[411, "nilearn.plotting.displays.OrthoProjector.annotate", false]], "annotate() (nilearn.plotting.displays.orthoslicer method)": [[412, "nilearn.plotting.displays.OrthoSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.rprojector method)": [[414, "nilearn.plotting.displays.RProjector.annotate", false]], "annotate() (nilearn.plotting.displays.tiledslicer method)": [[415, "nilearn.plotting.displays.TiledSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.xprojector method)": [[416, "nilearn.plotting.displays.XProjector.annotate", false]], "annotate() (nilearn.plotting.displays.xslicer method)": [[417, "nilearn.plotting.displays.XSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.xzprojector method)": [[418, "nilearn.plotting.displays.XZProjector.annotate", false]], "annotate() (nilearn.plotting.displays.xzslicer method)": [[419, "nilearn.plotting.displays.XZSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.yprojector method)": [[420, "nilearn.plotting.displays.YProjector.annotate", false]], "annotate() (nilearn.plotting.displays.yslicer method)": [[421, "nilearn.plotting.displays.YSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.yxprojector method)": [[422, "nilearn.plotting.displays.YXProjector.annotate", false]], "annotate() (nilearn.plotting.displays.yxslicer method)": [[423, "nilearn.plotting.displays.YXSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.yzprojector method)": [[424, "nilearn.plotting.displays.YZProjector.annotate", false]], "annotate() (nilearn.plotting.displays.yzslicer method)": [[425, "nilearn.plotting.displays.YZSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.zprojector method)": [[426, "nilearn.plotting.displays.ZProjector.annotate", false]], "annotate() (nilearn.plotting.displays.zslicer method)": [[427, "nilearn.plotting.displays.ZSlicer.annotate", false]], "anova": [[185, "term-ANOVA", true]], "apply_mask() (in module nilearn.masking)": [[390, "nilearn.masking.apply_mask", false]], "args (nilearn.exceptions.allvolumesremovederror attribute)": [[314, "nilearn.exceptions.AllVolumesRemovedError.args", false]], "args (nilearn.exceptions.dimensionerror attribute)": [[315, "nilearn.exceptions.DimensionError.args", false]], "args (nilearn.exceptions.maskwarning attribute)": [[316, "nilearn.exceptions.MaskWarning.args", false]], "args (nilearn.exceptions.meshdimensionerror attribute)": [[317, "nilearn.exceptions.MeshDimensionError.args", false]], "args (nilearn.exceptions.notimplementedwarning attribute)": [[318, "nilearn.exceptions.NotImplementedWarning.args", false]], "armodel (class in nilearn.glm)": [[319, "nilearn.glm.ARModel", false]], "auc": [[185, "term-AUC", true]], "background_label (nilearn.maskers.multiniftilabelsmasker attribute)": [[377, "nilearn.maskers.MultiNiftiLabelsMasker.background_label", false]], "background_label (nilearn.maskers.multisurfacelabelsmasker attribute)": [[380, "nilearn.maskers.MultiSurfaceLabelsMasker.background_label", false]], "background_label (nilearn.maskers.niftilabelsmasker attribute)": [[383, "nilearn.maskers.NiftiLabelsMasker.background_label", false]], "background_label (nilearn.maskers.surfacelabelsmasker attribute)": [[387, "nilearn.maskers.SurfaceLabelsMasker.background_label", false]], "baseaxes (class in nilearn.plotting.displays)": [[400, "nilearn.plotting.displays.BaseAxes", false]], "basemasker (class in nilearn.maskers)": [[376, "nilearn.maskers.BaseMasker", false]], "baseslicer (class in nilearn.plotting.displays)": [[401, "nilearn.plotting.displays.BaseSlicer", false]], "beta": [[185, "term-Beta", true]], "bids": [[185, "term-BIDS", true]], "binarize_img() (in module nilearn.image)": [[350, "nilearn.image.binarize_img", false]], "black_bg (nilearn.plotting.displays.baseslicer property)": [[401, "nilearn.plotting.displays.BaseSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.lprojector property)": [[404, "nilearn.plotting.displays.LProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.lrprojector property)": [[405, "nilearn.plotting.displays.LRProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.lyrprojector property)": [[406, "nilearn.plotting.displays.LYRProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.lyrzprojector property)": [[407, "nilearn.plotting.displays.LYRZProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.lzrprojector property)": [[408, "nilearn.plotting.displays.LZRProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.lzryprojector property)": [[409, "nilearn.plotting.displays.LZRYProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.mosaicslicer property)": [[410, "nilearn.plotting.displays.MosaicSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.orthoprojector property)": [[411, "nilearn.plotting.displays.OrthoProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.orthoslicer property)": [[412, "nilearn.plotting.displays.OrthoSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.rprojector property)": [[414, "nilearn.plotting.displays.RProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.tiledslicer property)": [[415, "nilearn.plotting.displays.TiledSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.xprojector property)": [[416, "nilearn.plotting.displays.XProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.xslicer property)": [[417, "nilearn.plotting.displays.XSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.xzprojector property)": [[418, "nilearn.plotting.displays.XZProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.xzslicer property)": [[419, "nilearn.plotting.displays.XZSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.yprojector property)": [[420, "nilearn.plotting.displays.YProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.yslicer property)": [[421, "nilearn.plotting.displays.YSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.yxprojector property)": [[422, "nilearn.plotting.displays.YXProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.yxslicer property)": [[423, "nilearn.plotting.displays.YXSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.yzprojector property)": [[424, "nilearn.plotting.displays.YZProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.yzslicer property)": [[425, "nilearn.plotting.displays.YZSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.zprojector property)": [[426, "nilearn.plotting.displays.ZProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.zslicer property)": [[427, "nilearn.plotting.displays.ZSlicer.black_bg", false]], "bold": [[185, "term-BOLD", true]], "brain_color (nilearn.plotting.displays.baseslicer property)": [[401, "nilearn.plotting.displays.BaseSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.lprojector property)": [[404, "nilearn.plotting.displays.LProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.lrprojector property)": [[405, "nilearn.plotting.displays.LRProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.lyrprojector property)": [[406, "nilearn.plotting.displays.LYRProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.lyrzprojector property)": [[407, "nilearn.plotting.displays.LYRZProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.lzrprojector property)": [[408, "nilearn.plotting.displays.LZRProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.lzryprojector property)": [[409, "nilearn.plotting.displays.LZRYProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.mosaicslicer property)": [[410, "nilearn.plotting.displays.MosaicSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.orthoprojector property)": [[411, "nilearn.plotting.displays.OrthoProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.orthoslicer property)": [[412, "nilearn.plotting.displays.OrthoSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.rprojector property)": [[414, "nilearn.plotting.displays.RProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.tiledslicer property)": [[415, "nilearn.plotting.displays.TiledSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.xprojector property)": [[416, "nilearn.plotting.displays.XProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.xslicer property)": [[417, "nilearn.plotting.displays.XSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.xzprojector property)": [[418, "nilearn.plotting.displays.XZProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.xzslicer property)": [[419, "nilearn.plotting.displays.XZSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.yprojector property)": [[420, "nilearn.plotting.displays.YProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.yslicer property)": [[421, "nilearn.plotting.displays.YSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.yxprojector property)": [[422, "nilearn.plotting.displays.YXProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.yxslicer property)": [[423, "nilearn.plotting.displays.YXSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.yzprojector property)": [[424, "nilearn.plotting.displays.YZProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.yzslicer property)": [[425, "nilearn.plotting.displays.YZSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.zprojector property)": [[426, "nilearn.plotting.displays.ZProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.zslicer property)": [[427, "nilearn.plotting.displays.ZSlicer.brain_color", false]], "butterworth() (in module nilearn.signal)": [[476, "nilearn.signal.butterworth", false]], "canica": [[185, "term-CanICA", true]], "canica (class in nilearn.decomposition)": [[312, "nilearn.decomposition.CanICA", false]], "check_design_matrix() (in module nilearn.glm.first_level)": [[333, "nilearn.glm.first_level.check_design_matrix", false]], "classification": [[185, "term-classification", true]], "clean() (in module nilearn.signal)": [[477, "nilearn.signal.clean", false]], "clean_img() (in module nilearn.image)": [[351, "nilearn.image.clean_img", false]], "close() (nilearn.plotting.displays.baseslicer method)": [[401, "nilearn.plotting.displays.BaseSlicer.close", false]], "close() (nilearn.plotting.displays.lprojector method)": [[404, "nilearn.plotting.displays.LProjector.close", false]], "close() (nilearn.plotting.displays.lrprojector method)": [[405, "nilearn.plotting.displays.LRProjector.close", false]], "close() (nilearn.plotting.displays.lyrprojector method)": [[406, "nilearn.plotting.displays.LYRProjector.close", false]], "close() (nilearn.plotting.displays.lyrzprojector method)": [[407, "nilearn.plotting.displays.LYRZProjector.close", false]], "close() (nilearn.plotting.displays.lzrprojector method)": [[408, "nilearn.plotting.displays.LZRProjector.close", false]], "close() (nilearn.plotting.displays.lzryprojector method)": [[409, "nilearn.plotting.displays.LZRYProjector.close", false]], "close() (nilearn.plotting.displays.mosaicslicer method)": [[410, "nilearn.plotting.displays.MosaicSlicer.close", false]], "close() (nilearn.plotting.displays.orthoprojector method)": [[411, "nilearn.plotting.displays.OrthoProjector.close", false]], "close() (nilearn.plotting.displays.orthoslicer method)": [[412, "nilearn.plotting.displays.OrthoSlicer.close", false]], "close() (nilearn.plotting.displays.rprojector method)": [[414, "nilearn.plotting.displays.RProjector.close", false]], "close() (nilearn.plotting.displays.tiledslicer method)": [[415, "nilearn.plotting.displays.TiledSlicer.close", false]], "close() (nilearn.plotting.displays.xprojector method)": [[416, "nilearn.plotting.displays.XProjector.close", false]], "close() (nilearn.plotting.displays.xslicer method)": [[417, "nilearn.plotting.displays.XSlicer.close", false]], "close() (nilearn.plotting.displays.xzprojector method)": [[418, "nilearn.plotting.displays.XZProjector.close", false]], "close() (nilearn.plotting.displays.xzslicer method)": [[419, "nilearn.plotting.displays.XZSlicer.close", false]], "close() (nilearn.plotting.displays.yprojector method)": [[420, "nilearn.plotting.displays.YProjector.close", false]], "close() (nilearn.plotting.displays.yslicer method)": [[421, "nilearn.plotting.displays.YSlicer.close", false]], "close() (nilearn.plotting.displays.yxprojector method)": [[422, "nilearn.plotting.displays.YXProjector.close", false]], "close() (nilearn.plotting.displays.yxslicer method)": [[423, "nilearn.plotting.displays.YXSlicer.close", false]], "close() (nilearn.plotting.displays.yzprojector method)": [[424, "nilearn.plotting.displays.YZProjector.close", false]], "close() (nilearn.plotting.displays.yzslicer method)": [[425, "nilearn.plotting.displays.YZSlicer.close", false]], "close() (nilearn.plotting.displays.zprojector method)": [[426, "nilearn.plotting.displays.ZProjector.close", false]], "close() (nilearn.plotting.displays.zslicer method)": [[427, "nilearn.plotting.displays.ZSlicer.close", false]], "closing": [[185, "term-Closing", true]], "cluster_level_inference() (in module nilearn.glm)": [[327, "nilearn.glm.cluster_level_inference", false]], "compute_background_mask() (in module nilearn.masking)": [[391, "nilearn.masking.compute_background_mask", false]], "compute_brain_mask() (in module nilearn.masking)": [[392, "nilearn.masking.compute_brain_mask", false]], "compute_contrast() (in module nilearn.glm)": [[328, "nilearn.glm.compute_contrast", false]], "compute_contrast() (nilearn.glm.first_level.firstlevelmodel method)": [[332, "nilearn.glm.first_level.FirstLevelModel.compute_contrast", false]], "compute_contrast() (nilearn.glm.second_level.secondlevelmodel method)": [[346, "nilearn.glm.second_level.SecondLevelModel.compute_contrast", false]], "compute_epi_mask() (in module nilearn.masking)": [[393, "nilearn.masking.compute_epi_mask", false]], "compute_fixed_effects() (in module nilearn.glm)": [[329, "nilearn.glm.compute_fixed_effects", false]], "compute_multi_background_mask() (in module nilearn.masking)": [[394, "nilearn.masking.compute_multi_background_mask", false]], "compute_multi_brain_mask() (in module nilearn.masking)": [[395, "nilearn.masking.compute_multi_brain_mask", false]], "compute_multi_epi_mask() (in module nilearn.masking)": [[396, "nilearn.masking.compute_multi_epi_mask", false]], "compute_regressor() (in module nilearn.glm.first_level)": [[334, "nilearn.glm.first_level.compute_regressor", false]], "concat_imgs() (in module nilearn.image)": [[352, "nilearn.image.concat_imgs", false]], "conf_int() (nilearn.glm.likelihoodmodelresults method)": [[322, "nilearn.glm.LikelihoodModelResults.conf_int", false]], "conf_int() (nilearn.glm.regressionresults method)": [[324, "nilearn.glm.RegressionResults.conf_int", false]], "conf_int() (nilearn.glm.simpleregressionresults method)": [[325, "nilearn.glm.SimpleRegressionResults.conf_int", false]], "connected_label_regions() (in module nilearn.regions)": [[466, "nilearn.regions.connected_label_regions", false]], "connected_regions() (in module nilearn.regions)": [[467, "nilearn.regions.connected_regions", false]], "connectivitymeasure (class in nilearn.connectome)": [[240, "nilearn.connectome.ConnectivityMeasure", false]], "contrast": [[185, "term-contrast", true]], "contrast (class in nilearn.glm)": [[320, "nilearn.glm.Contrast", false]], "coord_transform() (in module nilearn.image)": [[353, "nilearn.image.coord_transform", false]], "coordinates (nilearn.surface.filemesh property)": [[479, "nilearn.surface.FileMesh.coordinates", false]], "coordinates (nilearn.surface.inmemorymesh attribute)": [[480, "nilearn.surface.InMemoryMesh.coordinates", false]], "coordinates (nilearn.surface.surfacemesh attribute)": [[484, "nilearn.surface.SurfaceMesh.coordinates", false]], "copy_img() (in module nilearn.image)": [[354, "nilearn.image.copy_img", false]], "cov_to_corr() (in module nilearn.connectome)": [[243, "nilearn.connectome.cov_to_corr", false]], "crop_img() (in module nilearn.image)": [[355, "nilearn.image.crop_img", false]], "cutaxes (class in nilearn.plotting.displays)": [[402, "nilearn.plotting.displays.CutAxes", false]], "decision_function() (nilearn.decoding.decoder method)": [[305, "nilearn.decoding.Decoder.decision_function", false]], "decision_function() (nilearn.decoding.fremclassifier method)": [[307, "nilearn.decoding.FREMClassifier.decision_function", false]], "decision_function() (nilearn.decoding.spacenetclassifier method)": [[310, "nilearn.decoding.SpaceNetClassifier.decision_function", false]], "decoder (class in nilearn.decoding)": [[305, "nilearn.decoding.Decoder", false]], "decoderregressor (class in nilearn.decoding)": [[306, "nilearn.decoding.DecoderRegressor", false]], "decoding": [[185, "term-Decoding", true]], "deterministic atlas": [[185, "term-Deterministic-atlas", true]], "dictionary learning": [[185, "term-Dictionary-learning", true]], "dictlearning (class in nilearn.decomposition)": [[313, "nilearn.decomposition.DictLearning", false]], "dilation": [[185, "term-Dilation", true]], "dimensionerror (class in nilearn.exceptions)": [[315, "nilearn.exceptions.DimensionError", false]], "draw_2d() (nilearn.plotting.displays.baseaxes method)": [[400, "nilearn.plotting.displays.BaseAxes.draw_2d", false]], "draw_2d() (nilearn.plotting.displays.cutaxes method)": [[402, "nilearn.plotting.displays.CutAxes.draw_2d", false]], "draw_2d() (nilearn.plotting.displays.glassbrainaxes method)": [[403, "nilearn.plotting.displays.GlassBrainAxes.draw_2d", false]], "draw_cross() (nilearn.plotting.displays.lprojector method)": [[404, "nilearn.plotting.displays.LProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.lrprojector method)": [[405, "nilearn.plotting.displays.LRProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.lyrprojector method)": [[406, "nilearn.plotting.displays.LYRProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.lyrzprojector method)": [[407, "nilearn.plotting.displays.LYRZProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.lzrprojector method)": [[408, "nilearn.plotting.displays.LZRProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.lzryprojector method)": [[409, "nilearn.plotting.displays.LZRYProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.mosaicslicer method)": [[410, "nilearn.plotting.displays.MosaicSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.orthoprojector method)": [[411, "nilearn.plotting.displays.OrthoProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.orthoslicer method)": [[412, "nilearn.plotting.displays.OrthoSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.rprojector method)": [[414, "nilearn.plotting.displays.RProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.tiledslicer method)": [[415, "nilearn.plotting.displays.TiledSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.xprojector method)": [[416, "nilearn.plotting.displays.XProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.xslicer method)": [[417, "nilearn.plotting.displays.XSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.xzprojector method)": [[418, "nilearn.plotting.displays.XZProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.xzslicer method)": [[419, "nilearn.plotting.displays.XZSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.yprojector method)": [[420, "nilearn.plotting.displays.YProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.yslicer method)": [[421, "nilearn.plotting.displays.YSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.yxprojector method)": [[422, "nilearn.plotting.displays.YXProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.yxslicer method)": [[423, "nilearn.plotting.displays.YXSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.yzprojector method)": [[424, "nilearn.plotting.displays.YZProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.yzslicer method)": [[425, "nilearn.plotting.displays.YZSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.zprojector method)": [[426, "nilearn.plotting.displays.ZProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.zslicer method)": [[427, "nilearn.plotting.displays.ZSlicer.draw_cross", false]], "draw_left_right() (nilearn.plotting.displays.baseaxes method)": [[400, "nilearn.plotting.displays.BaseAxes.draw_left_right", false]], "draw_left_right() (nilearn.plotting.displays.cutaxes method)": [[402, "nilearn.plotting.displays.CutAxes.draw_left_right", false]], "draw_left_right() (nilearn.plotting.displays.glassbrainaxes method)": [[403, "nilearn.plotting.displays.GlassBrainAxes.draw_left_right", false]], "draw_position() (nilearn.plotting.displays.baseaxes method)": [[400, "nilearn.plotting.displays.BaseAxes.draw_position", false]], "draw_position() (nilearn.plotting.displays.cutaxes method)": [[402, "nilearn.plotting.displays.CutAxes.draw_position", false]], "draw_position() (nilearn.plotting.displays.glassbrainaxes method)": [[403, "nilearn.plotting.displays.GlassBrainAxes.draw_position", false]], "draw_scale_bar() (nilearn.plotting.displays.baseaxes method)": [[400, "nilearn.plotting.displays.BaseAxes.draw_scale_bar", false]], "draw_scale_bar() (nilearn.plotting.displays.cutaxes method)": [[402, "nilearn.plotting.displays.CutAxes.draw_scale_bar", false]], "draw_scale_bar() (nilearn.plotting.displays.glassbrainaxes method)": [[403, "nilearn.plotting.displays.GlassBrainAxes.draw_scale_bar", false]], "eeg": [[185, "term-EEG", true]], "effect_size() (nilearn.glm.contrast method)": [[320, "nilearn.glm.Contrast.effect_size", false]], "effect_variance() (nilearn.glm.contrast method)": [[320, "nilearn.glm.Contrast.effect_variance", false]], "epi": [[185, "term-EPI", true]], "erosion": [[185, "term-Erosion", true]], "expression_to_contrast_vector() (in module nilearn.glm)": [[330, "nilearn.glm.expression_to_contrast_vector", false]], "faces": [[185, "term-faces", true]], "faces (nilearn.surface.filemesh property)": [[479, "nilearn.surface.FileMesh.faces", false]], "faces (nilearn.surface.inmemorymesh attribute)": [[480, "nilearn.surface.InMemoryMesh.faces", false]], "faces (nilearn.surface.surfacemesh attribute)": [[484, "nilearn.surface.SurfaceMesh.faces", false]], "fcontrast() (nilearn.glm.likelihoodmodelresults method)": [[322, "nilearn.glm.LikelihoodModelResults.Fcontrast", false]], "fcontrast() (nilearn.glm.regressionresults method)": [[324, "nilearn.glm.RegressionResults.Fcontrast", false]], "fcontrast() (nilearn.glm.simpleregressionresults method)": [[325, "nilearn.glm.SimpleRegressionResults.Fcontrast", false]], "fcontrastresults (class in nilearn.glm)": [[321, "nilearn.glm.FContrastResults", false]], "fdr correction": [[185, "term-FDR-correction", true]], "fdr_threshold() (in module nilearn.glm)": [[331, "nilearn.glm.fdr_threshold", false]], "fetch_abide_pcp() (in module nilearn.datasets)": [[248, "nilearn.datasets.fetch_abide_pcp", false]], "fetch_adhd() (in module nilearn.datasets)": [[249, "nilearn.datasets.fetch_adhd", false]], "fetch_atlas_aal() (in module nilearn.datasets)": [[250, "nilearn.datasets.fetch_atlas_aal", false]], "fetch_atlas_allen_2011() (in module nilearn.datasets)": [[251, "nilearn.datasets.fetch_atlas_allen_2011", false]], "fetch_atlas_basc_multiscale_2015() (in module nilearn.datasets)": [[252, "nilearn.datasets.fetch_atlas_basc_multiscale_2015", false]], "fetch_atlas_craddock_2012() (in module nilearn.datasets)": [[253, "nilearn.datasets.fetch_atlas_craddock_2012", false]], "fetch_atlas_destrieux_2009() (in module nilearn.datasets)": [[254, "nilearn.datasets.fetch_atlas_destrieux_2009", false]], "fetch_atlas_difumo() (in module nilearn.datasets)": [[255, "nilearn.datasets.fetch_atlas_difumo", false]], "fetch_atlas_harvard_oxford() (in module nilearn.datasets)": [[256, "nilearn.datasets.fetch_atlas_harvard_oxford", false]], "fetch_atlas_juelich() (in module nilearn.datasets)": [[257, "nilearn.datasets.fetch_atlas_juelich", false]], "fetch_atlas_msdl() (in module nilearn.datasets)": [[258, "nilearn.datasets.fetch_atlas_msdl", false]], "fetch_atlas_pauli_2017() (in module nilearn.datasets)": [[259, "nilearn.datasets.fetch_atlas_pauli_2017", false]], "fetch_atlas_schaefer_2018() (in module nilearn.datasets)": [[260, "nilearn.datasets.fetch_atlas_schaefer_2018", false]], "fetch_atlas_smith_2009() (in module nilearn.datasets)": [[261, "nilearn.datasets.fetch_atlas_smith_2009", false]], "fetch_atlas_surf_destrieux() (in module nilearn.datasets)": [[262, "nilearn.datasets.fetch_atlas_surf_destrieux", false]], "fetch_atlas_talairach() (in module nilearn.datasets)": [[263, "nilearn.datasets.fetch_atlas_talairach", false]], "fetch_atlas_yeo_2011() (in module nilearn.datasets)": [[264, "nilearn.datasets.fetch_atlas_yeo_2011", false]], "fetch_coords_dosenbach_2010() (in module nilearn.datasets)": [[265, "nilearn.datasets.fetch_coords_dosenbach_2010", false]], "fetch_coords_power_2011() (in module nilearn.datasets)": [[266, "nilearn.datasets.fetch_coords_power_2011", false]], "fetch_coords_seitzman_2018() (in module nilearn.datasets)": [[267, "nilearn.datasets.fetch_coords_seitzman_2018", false]], "fetch_development_fmri() (in module nilearn.datasets)": [[268, "nilearn.datasets.fetch_development_fmri", false]], "fetch_ds000030_urls() (in module nilearn.datasets)": [[269, "nilearn.datasets.fetch_ds000030_urls", false]], "fetch_fiac_first_level() (in module nilearn.datasets)": [[270, "nilearn.datasets.fetch_fiac_first_level", false]], "fetch_haxby() (in module nilearn.datasets)": [[271, "nilearn.datasets.fetch_haxby", false]], "fetch_icbm152_2009() (in module nilearn.datasets)": [[272, "nilearn.datasets.fetch_icbm152_2009", false]], "fetch_icbm152_brain_gm_mask() (in module nilearn.datasets)": [[273, "nilearn.datasets.fetch_icbm152_brain_gm_mask", false]], "fetch_language_localizer_demo_dataset() (in module nilearn.datasets)": [[274, "nilearn.datasets.fetch_language_localizer_demo_dataset", false]], "fetch_localizer_button_task() (in module nilearn.datasets)": [[275, "nilearn.datasets.fetch_localizer_button_task", false]], "fetch_localizer_calculation_task() (in module nilearn.datasets)": [[276, "nilearn.datasets.fetch_localizer_calculation_task", false]], "fetch_localizer_contrasts() (in module nilearn.datasets)": [[277, "nilearn.datasets.fetch_localizer_contrasts", false]], "fetch_localizer_first_level() (in module nilearn.datasets)": [[278, "nilearn.datasets.fetch_localizer_first_level", false]], "fetch_megatrawls_netmats() (in module nilearn.datasets)": [[279, "nilearn.datasets.fetch_megatrawls_netmats", false]], "fetch_mixed_gambles() (in module nilearn.datasets)": [[280, "nilearn.datasets.fetch_mixed_gambles", false]], "fetch_miyawaki2008() (in module nilearn.datasets)": [[281, "nilearn.datasets.fetch_miyawaki2008", false]], "fetch_neurovault() (in module nilearn.datasets)": [[282, "nilearn.datasets.fetch_neurovault", false]], "fetch_neurovault_auditory_computation_task() (in module nilearn.datasets)": [[283, "nilearn.datasets.fetch_neurovault_auditory_computation_task", false]], "fetch_neurovault_ids() (in module nilearn.datasets)": [[284, "nilearn.datasets.fetch_neurovault_ids", false]], "fetch_neurovault_motor_task() (in module nilearn.datasets)": [[285, "nilearn.datasets.fetch_neurovault_motor_task", false]], "fetch_oasis_vbm() (in module nilearn.datasets)": [[286, "nilearn.datasets.fetch_oasis_vbm", false]], "fetch_openneuro_dataset() (in module nilearn.datasets)": [[287, "nilearn.datasets.fetch_openneuro_dataset", false]], "fetch_spm_auditory() (in module nilearn.datasets)": [[288, "nilearn.datasets.fetch_spm_auditory", false]], "fetch_spm_multimodal_fmri() (in module nilearn.datasets)": [[289, "nilearn.datasets.fetch_spm_multimodal_fmri", false]], "fetch_surf_fsaverage() (in module nilearn.datasets)": [[290, "nilearn.datasets.fetch_surf_fsaverage", false]], "fetch_surf_nki_enhanced() (in module nilearn.datasets)": [[291, "nilearn.datasets.fetch_surf_nki_enhanced", false]], "file_path (nilearn.surface.filemesh attribute)": [[479, "nilearn.surface.FileMesh.file_path", false]], "filemesh (class in nilearn.surface)": [[479, "nilearn.surface.FileMesh", false]], "find_cut_coords() (nilearn.plotting.displays.baseslicer static method)": [[401, "nilearn.plotting.displays.BaseSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.lprojector class method)": [[404, "nilearn.plotting.displays.LProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.lrprojector class method)": [[405, "nilearn.plotting.displays.LRProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.lyrprojector class method)": [[406, "nilearn.plotting.displays.LYRProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.lyrzprojector class method)": [[407, "nilearn.plotting.displays.LYRZProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.lzrprojector class method)": [[408, "nilearn.plotting.displays.LZRProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.lzryprojector class method)": [[409, "nilearn.plotting.displays.LZRYProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.mosaicslicer class method)": [[410, "nilearn.plotting.displays.MosaicSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.orthoprojector class method)": [[411, "nilearn.plotting.displays.OrthoProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.orthoslicer class method)": [[412, "nilearn.plotting.displays.OrthoSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.rprojector class method)": [[414, "nilearn.plotting.displays.RProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.tiledslicer class method)": [[415, "nilearn.plotting.displays.TiledSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.xprojector class method)": [[416, "nilearn.plotting.displays.XProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.xslicer class method)": [[417, "nilearn.plotting.displays.XSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.xzprojector class method)": [[418, "nilearn.plotting.displays.XZProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.xzslicer class method)": [[419, "nilearn.plotting.displays.XZSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.yprojector class method)": [[420, "nilearn.plotting.displays.YProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.yslicer class method)": [[421, "nilearn.plotting.displays.YSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.yxprojector class method)": [[422, "nilearn.plotting.displays.YXProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.yxslicer class method)": [[423, "nilearn.plotting.displays.YXSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.yzprojector class method)": [[424, "nilearn.plotting.displays.YZProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.yzslicer class method)": [[425, "nilearn.plotting.displays.YZSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.zprojector class method)": [[426, "nilearn.plotting.displays.ZProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.zslicer class method)": [[427, "nilearn.plotting.displays.ZSlicer.find_cut_coords", false]], "find_cut_slices() (in module nilearn.plotting)": [[430, "nilearn.plotting.find_cut_slices", false]], "find_parcellation_cut_coords() (in module nilearn.plotting)": [[431, "nilearn.plotting.find_parcellation_cut_coords", false]], "find_probabilistic_atlas_cut_coords() (in module nilearn.plotting)": [[432, "nilearn.plotting.find_probabilistic_atlas_cut_coords", false]], "find_xyz_cut_coords() (in module nilearn.plotting)": [[433, "nilearn.plotting.find_xyz_cut_coords", false]], "fir": [[185, "term-FIR", true]], "first_level_from_bids() (in module nilearn.glm.first_level)": [[335, "nilearn.glm.first_level.first_level_from_bids", false]], "firstlevelmodel (class in nilearn.glm.first_level)": [[332, "nilearn.glm.first_level.FirstLevelModel", false]], "fit() (nilearn.connectome.connectivitymeasure method)": [[240, "nilearn.connectome.ConnectivityMeasure.fit", false]], "fit() (nilearn.connectome.groupsparsecovariance method)": [[241, "nilearn.connectome.GroupSparseCovariance.fit", false]], "fit() (nilearn.connectome.groupsparsecovariancecv method)": [[242, "nilearn.connectome.GroupSparseCovarianceCV.fit", false]], "fit() (nilearn.decoding.decoder method)": [[305, "nilearn.decoding.Decoder.fit", false]], "fit() (nilearn.decoding.decoderregressor method)": [[306, "nilearn.decoding.DecoderRegressor.fit", false]], "fit() (nilearn.decoding.fremclassifier method)": [[307, "nilearn.decoding.FREMClassifier.fit", false]], "fit() (nilearn.decoding.fremregressor method)": [[308, "nilearn.decoding.FREMRegressor.fit", false]], "fit() (nilearn.decoding.searchlight method)": [[309, "nilearn.decoding.SearchLight.fit", false]], "fit() (nilearn.decoding.spacenetclassifier method)": [[310, "nilearn.decoding.SpaceNetClassifier.fit", false]], "fit() (nilearn.decoding.spacenetregressor method)": [[311, "nilearn.decoding.SpaceNetRegressor.fit", false]], "fit() (nilearn.decomposition.canica method)": [[312, "nilearn.decomposition.CanICA.fit", false]], "fit() (nilearn.decomposition.dictlearning method)": [[313, "nilearn.decomposition.DictLearning.fit", false]], "fit() (nilearn.glm.armodel method)": [[319, "nilearn.glm.ARModel.fit", false]], "fit() (nilearn.glm.first_level.firstlevelmodel method)": [[332, "nilearn.glm.first_level.FirstLevelModel.fit", false]], "fit() (nilearn.glm.olsmodel method)": [[323, "nilearn.glm.OLSModel.fit", false]], "fit() (nilearn.glm.second_level.secondlevelmodel method)": [[346, "nilearn.glm.second_level.SecondLevelModel.fit", false]], "fit() (nilearn.maskers.basemasker method)": [[376, "nilearn.maskers.BaseMasker.fit", false]], "fit() (nilearn.maskers.multiniftilabelsmasker method)": [[377, "nilearn.maskers.MultiNiftiLabelsMasker.fit", false]], "fit() (nilearn.maskers.multiniftimapsmasker method)": [[378, "nilearn.maskers.MultiNiftiMapsMasker.fit", false]], "fit() (nilearn.maskers.multiniftimasker method)": [[379, "nilearn.maskers.MultiNiftiMasker.fit", false]], "fit() (nilearn.maskers.multisurfacelabelsmasker method)": [[380, "nilearn.maskers.MultiSurfaceLabelsMasker.fit", false]], "fit() (nilearn.maskers.multisurfacemapsmasker method)": [[381, "nilearn.maskers.MultiSurfaceMapsMasker.fit", false]], "fit() (nilearn.maskers.multisurfacemasker method)": [[382, "nilearn.maskers.MultiSurfaceMasker.fit", false]], "fit() (nilearn.maskers.niftilabelsmasker method)": [[383, "nilearn.maskers.NiftiLabelsMasker.fit", false]], "fit() (nilearn.maskers.niftimapsmasker method)": [[384, "nilearn.maskers.NiftiMapsMasker.fit", false]], "fit() (nilearn.maskers.niftimasker method)": [[385, "nilearn.maskers.NiftiMasker.fit", false]], "fit() (nilearn.maskers.niftispheresmasker method)": [[386, "nilearn.maskers.NiftiSpheresMasker.fit", false]], "fit() (nilearn.maskers.surfacelabelsmasker method)": [[387, "nilearn.maskers.SurfaceLabelsMasker.fit", false]], "fit() (nilearn.maskers.surfacemapsmasker method)": [[388, "nilearn.maskers.SurfaceMapsMasker.fit", false]], "fit() (nilearn.maskers.surfacemasker method)": [[389, "nilearn.maskers.SurfaceMasker.fit", false]], "fit() (nilearn.regions.hierarchicalkmeans method)": [[462, "nilearn.regions.HierarchicalKMeans.fit", false]], "fit() (nilearn.regions.parcellations method)": [[463, "nilearn.regions.Parcellations.fit", false]], "fit() (nilearn.regions.regionextractor method)": [[465, "nilearn.regions.RegionExtractor.fit", false]], "fit() (nilearn.regions.rena method)": [[464, "nilearn.regions.ReNA.fit", false]], "fit_predict() (nilearn.regions.hierarchicalkmeans method)": [[462, "nilearn.regions.HierarchicalKMeans.fit_predict", false]], "fit_predict() (nilearn.regions.rena method)": [[464, "nilearn.regions.ReNA.fit_predict", false]], "fit_transform() (nilearn.connectome.connectivitymeasure method)": [[240, "nilearn.connectome.ConnectivityMeasure.fit_transform", false]], "fit_transform() (nilearn.decoding.searchlight method)": [[309, "nilearn.decoding.SearchLight.fit_transform", false]], "fit_transform() (nilearn.decomposition.canica method)": [[312, "nilearn.decomposition.CanICA.fit_transform", false]], "fit_transform() (nilearn.decomposition.dictlearning method)": [[313, "nilearn.decomposition.DictLearning.fit_transform", false]], "fit_transform() (nilearn.maskers.basemasker method)": [[376, "nilearn.maskers.BaseMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.multiniftilabelsmasker method)": [[377, "nilearn.maskers.MultiNiftiLabelsMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.multiniftimapsmasker method)": [[378, "nilearn.maskers.MultiNiftiMapsMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.multiniftimasker method)": [[379, "nilearn.maskers.MultiNiftiMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.multisurfacelabelsmasker method)": [[380, "nilearn.maskers.MultiSurfaceLabelsMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.multisurfacemapsmasker method)": [[381, "nilearn.maskers.MultiSurfaceMapsMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.multisurfacemasker method)": [[382, "nilearn.maskers.MultiSurfaceMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.niftilabelsmasker method)": [[383, "nilearn.maskers.NiftiLabelsMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.niftimapsmasker method)": [[384, "nilearn.maskers.NiftiMapsMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.niftimasker method)": [[385, "nilearn.maskers.NiftiMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.niftispheresmasker method)": [[386, "nilearn.maskers.NiftiSpheresMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.surfacelabelsmasker method)": [[387, "nilearn.maskers.SurfaceLabelsMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.surfacemapsmasker method)": [[388, "nilearn.maskers.SurfaceMapsMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.surfacemasker method)": [[389, "nilearn.maskers.SurfaceMasker.fit_transform", false]], "fit_transform() (nilearn.regions.hierarchicalkmeans method)": [[462, "nilearn.regions.HierarchicalKMeans.fit_transform", false]], "fit_transform() (nilearn.regions.parcellations method)": [[463, "nilearn.regions.Parcellations.fit_transform", false]], "fit_transform() (nilearn.regions.regionextractor method)": [[465, "nilearn.regions.RegionExtractor.fit_transform", false]], "fit_transform() (nilearn.regions.rena method)": [[464, "nilearn.regions.ReNA.fit_transform", false]], "fmri": [[185, "term-fMRI", true]], "fmriprep": [[185, "term-fMRIPrep", true]], "fpr correction": [[185, "term-FPR-correction", true]], "frem": [[185, "term-FREM", true]], "fremclassifier (class in nilearn.decoding)": [[307, "nilearn.decoding.FREMClassifier", false]], "fremregressor (class in nilearn.decoding)": [[308, "nilearn.decoding.FREMRegressor", false]], "from_volume() (nilearn.surface.surfaceimage class method)": [[483, "nilearn.surface.SurfaceImage.from_volume", false]], "functional connectivity": [[185, "term-functional-connectivity", true]], "functional connectome": [[185, "term-functional-connectome", true]], "fwer correction": [[185, "term-FWER-correction", true]], "fwhm": [[185, "term-FWHM", true]], "generate_report() (nilearn.glm.first_level.firstlevelmodel method)": [[332, "nilearn.glm.first_level.FirstLevelModel.generate_report", false]], "generate_report() (nilearn.glm.second_level.secondlevelmodel method)": [[346, "nilearn.glm.second_level.SecondLevelModel.generate_report", false]], "generate_report() (nilearn.maskers.multiniftilabelsmasker method)": [[377, "nilearn.maskers.MultiNiftiLabelsMasker.generate_report", false]], "generate_report() (nilearn.maskers.multiniftimapsmasker method)": [[378, "nilearn.maskers.MultiNiftiMapsMasker.generate_report", false]], "generate_report() (nilearn.maskers.multiniftimasker method)": [[379, "nilearn.maskers.MultiNiftiMasker.generate_report", false]], "generate_report() (nilearn.maskers.multisurfacelabelsmasker method)": [[380, "nilearn.maskers.MultiSurfaceLabelsMasker.generate_report", false]], "generate_report() (nilearn.maskers.multisurfacemapsmasker method)": [[381, "nilearn.maskers.MultiSurfaceMapsMasker.generate_report", false]], "generate_report() (nilearn.maskers.multisurfacemasker method)": [[382, "nilearn.maskers.MultiSurfaceMasker.generate_report", false]], "generate_report() (nilearn.maskers.niftilabelsmasker method)": [[383, "nilearn.maskers.NiftiLabelsMasker.generate_report", false]], "generate_report() (nilearn.maskers.niftimapsmasker method)": [[384, "nilearn.maskers.NiftiMapsMasker.generate_report", false]], "generate_report() (nilearn.maskers.niftimasker method)": [[385, "nilearn.maskers.NiftiMasker.generate_report", false]], "generate_report() (nilearn.maskers.niftispheresmasker method)": [[386, "nilearn.maskers.NiftiSpheresMasker.generate_report", false]], "generate_report() (nilearn.maskers.surfacelabelsmasker method)": [[387, "nilearn.maskers.SurfaceLabelsMasker.generate_report", false]], "generate_report() (nilearn.maskers.surfacemapsmasker method)": [[388, "nilearn.maskers.SurfaceMapsMasker.generate_report", false]], "generate_report() (nilearn.maskers.surfacemasker method)": [[389, "nilearn.maskers.SurfaceMasker.generate_report", false]], "generate_report() (nilearn.regions.regionextractor method)": [[465, "nilearn.regions.RegionExtractor.generate_report", false]], "get_bids_files() (in module nilearn.interfaces.bids)": [[371, "nilearn.interfaces.bids.get_bids_files", false]], "get_clusters_table() (in module nilearn.reporting)": [[474, "nilearn.reporting.get_clusters_table", false]], "get_data() (in module nilearn.image)": [[356, "nilearn.image.get_data", false]], "get_data_dirs() (in module nilearn.datasets)": [[292, "nilearn.datasets.get_data_dirs", false]], "get_design_from_fslmat() (in module nilearn.interfaces.fsl)": [[375, "nilearn.interfaces.fsl.get_design_from_fslmat", false]], "get_feature_names_out() (nilearn.maskers.multiniftilabelsmasker method)": [[377, "nilearn.maskers.MultiNiftiLabelsMasker.get_feature_names_out", false]], "get_feature_names_out() (nilearn.maskers.multiniftimapsmasker method)": [[378, "nilearn.maskers.MultiNiftiMapsMasker.get_feature_names_out", false]], "get_feature_names_out() (nilearn.maskers.multiniftimasker method)": [[379, "nilearn.maskers.MultiNiftiMasker.get_feature_names_out", false]], "get_feature_names_out() (nilearn.maskers.multisurfacelabelsmasker method)": [[380, "nilearn.maskers.MultiSurfaceLabelsMasker.get_feature_names_out", false]], "get_feature_names_out() (nilearn.maskers.multisurfacemapsmasker method)": [[381, "nilearn.maskers.MultiSurfaceMapsMasker.get_feature_names_out", false]], "get_feature_names_out() (nilearn.maskers.multisurfacemasker method)": [[382, "nilearn.maskers.MultiSurfaceMasker.get_feature_names_out", false]], "get_feature_names_out() (nilearn.maskers.niftilabelsmasker method)": [[383, "nilearn.maskers.NiftiLabelsMasker.get_feature_names_out", false]], "get_feature_names_out() (nilearn.maskers.niftimapsmasker method)": [[384, "nilearn.maskers.NiftiMapsMasker.get_feature_names_out", false]], "get_feature_names_out() (nilearn.maskers.niftimasker method)": [[385, "nilearn.maskers.NiftiMasker.get_feature_names_out", false]], "get_feature_names_out() (nilearn.maskers.niftispheresmasker method)": [[386, "nilearn.maskers.NiftiSpheresMasker.get_feature_names_out", false]], "get_feature_names_out() (nilearn.maskers.surfacelabelsmasker method)": [[387, "nilearn.maskers.SurfaceLabelsMasker.get_feature_names_out", false]], "get_feature_names_out() (nilearn.maskers.surfacemapsmasker method)": [[388, "nilearn.maskers.SurfaceMapsMasker.get_feature_names_out", false]], "get_feature_names_out() (nilearn.maskers.surfacemasker method)": [[389, "nilearn.maskers.SurfaceMasker.get_feature_names_out", false]], "get_feature_names_out() (nilearn.regions.hierarchicalkmeans method)": [[462, "nilearn.regions.HierarchicalKMeans.get_feature_names_out", false]], "get_feature_names_out() (nilearn.regions.regionextractor method)": [[465, "nilearn.regions.RegionExtractor.get_feature_names_out", false]], "get_iframe() (nilearn.reporting.htmlreport method)": [[473, "nilearn.reporting.HTMLReport.get_iframe", false]], "get_metadata_routing() (nilearn.connectome.connectivitymeasure method)": [[240, "nilearn.connectome.ConnectivityMeasure.get_metadata_routing", false]], "get_metadata_routing() (nilearn.connectome.groupsparsecovariance method)": [[241, "nilearn.connectome.GroupSparseCovariance.get_metadata_routing", false]], "get_metadata_routing() (nilearn.connectome.groupsparsecovariancecv method)": [[242, "nilearn.connectome.GroupSparseCovarianceCV.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.decoder method)": [[305, "nilearn.decoding.Decoder.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.decoderregressor method)": [[306, "nilearn.decoding.DecoderRegressor.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.fremclassifier method)": [[307, "nilearn.decoding.FREMClassifier.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.fremregressor method)": [[308, "nilearn.decoding.FREMRegressor.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.searchlight method)": [[309, "nilearn.decoding.SearchLight.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.spacenetclassifier method)": [[310, "nilearn.decoding.SpaceNetClassifier.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.spacenetregressor method)": [[311, "nilearn.decoding.SpaceNetRegressor.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decomposition.canica method)": [[312, "nilearn.decomposition.CanICA.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decomposition.dictlearning method)": [[313, "nilearn.decomposition.DictLearning.get_metadata_routing", false]], "get_metadata_routing() (nilearn.glm.first_level.firstlevelmodel method)": [[332, "nilearn.glm.first_level.FirstLevelModel.get_metadata_routing", false]], "get_metadata_routing() (nilearn.glm.second_level.secondlevelmodel method)": [[346, "nilearn.glm.second_level.SecondLevelModel.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.basemasker method)": [[376, "nilearn.maskers.BaseMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.multiniftilabelsmasker method)": [[377, "nilearn.maskers.MultiNiftiLabelsMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.multiniftimapsmasker method)": [[378, "nilearn.maskers.MultiNiftiMapsMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.multiniftimasker method)": [[379, "nilearn.maskers.MultiNiftiMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.multisurfacelabelsmasker method)": [[380, "nilearn.maskers.MultiSurfaceLabelsMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.multisurfacemapsmasker method)": [[381, "nilearn.maskers.MultiSurfaceMapsMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.multisurfacemasker method)": [[382, "nilearn.maskers.MultiSurfaceMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.niftilabelsmasker method)": [[383, "nilearn.maskers.NiftiLabelsMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.niftimapsmasker method)": [[384, "nilearn.maskers.NiftiMapsMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.niftimasker method)": [[385, "nilearn.maskers.NiftiMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.niftispheresmasker method)": [[386, "nilearn.maskers.NiftiSpheresMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.surfacelabelsmasker method)": [[387, "nilearn.maskers.SurfaceLabelsMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.surfacemapsmasker method)": [[388, "nilearn.maskers.SurfaceMapsMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.surfacemasker method)": [[389, "nilearn.maskers.SurfaceMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.regions.hierarchicalkmeans method)": [[462, "nilearn.regions.HierarchicalKMeans.get_metadata_routing", false]], "get_metadata_routing() (nilearn.regions.parcellations method)": [[463, "nilearn.regions.Parcellations.get_metadata_routing", false]], "get_metadata_routing() (nilearn.regions.regionextractor method)": [[465, "nilearn.regions.RegionExtractor.get_metadata_routing", false]], "get_metadata_routing() (nilearn.regions.rena method)": [[464, "nilearn.regions.ReNA.get_metadata_routing", false]], "get_object_bounds() (nilearn.plotting.displays.baseaxes method)": [[400, "nilearn.plotting.displays.BaseAxes.get_object_bounds", false]], "get_object_bounds() (nilearn.plotting.displays.cutaxes method)": [[402, "nilearn.plotting.displays.CutAxes.get_object_bounds", false]], "get_object_bounds() (nilearn.plotting.displays.glassbrainaxes method)": [[403, "nilearn.plotting.displays.GlassBrainAxes.get_object_bounds", false]], "get_params() (nilearn.connectome.connectivitymeasure method)": [[240, "nilearn.connectome.ConnectivityMeasure.get_params", false]], "get_params() (nilearn.connectome.groupsparsecovariance method)": [[241, "nilearn.connectome.GroupSparseCovariance.get_params", false]], "get_params() (nilearn.connectome.groupsparsecovariancecv method)": [[242, "nilearn.connectome.GroupSparseCovarianceCV.get_params", false]], "get_params() (nilearn.decoding.decoder method)": [[305, "nilearn.decoding.Decoder.get_params", false]], "get_params() (nilearn.decoding.decoderregressor method)": [[306, "nilearn.decoding.DecoderRegressor.get_params", false]], "get_params() (nilearn.decoding.fremclassifier method)": [[307, "nilearn.decoding.FREMClassifier.get_params", false]], "get_params() (nilearn.decoding.fremregressor method)": [[308, "nilearn.decoding.FREMRegressor.get_params", false]], "get_params() (nilearn.decoding.searchlight method)": [[309, "nilearn.decoding.SearchLight.get_params", false]], "get_params() (nilearn.decoding.spacenetclassifier method)": [[310, "nilearn.decoding.SpaceNetClassifier.get_params", false]], "get_params() (nilearn.decoding.spacenetregressor method)": [[311, "nilearn.decoding.SpaceNetRegressor.get_params", false]], "get_params() (nilearn.decomposition.canica method)": [[312, "nilearn.decomposition.CanICA.get_params", false]], "get_params() (nilearn.decomposition.dictlearning method)": [[313, "nilearn.decomposition.DictLearning.get_params", false]], "get_params() (nilearn.glm.first_level.firstlevelmodel method)": [[332, "nilearn.glm.first_level.FirstLevelModel.get_params", false]], "get_params() (nilearn.glm.second_level.secondlevelmodel method)": [[346, "nilearn.glm.second_level.SecondLevelModel.get_params", false]], "get_params() (nilearn.maskers.basemasker method)": [[376, "nilearn.maskers.BaseMasker.get_params", false]], "get_params() (nilearn.maskers.multiniftilabelsmasker method)": [[377, "nilearn.maskers.MultiNiftiLabelsMasker.get_params", false]], "get_params() (nilearn.maskers.multiniftimapsmasker method)": [[378, "nilearn.maskers.MultiNiftiMapsMasker.get_params", false]], "get_params() (nilearn.maskers.multiniftimasker method)": [[379, "nilearn.maskers.MultiNiftiMasker.get_params", false]], "get_params() (nilearn.maskers.multisurfacelabelsmasker method)": [[380, "nilearn.maskers.MultiSurfaceLabelsMasker.get_params", false]], "get_params() (nilearn.maskers.multisurfacemapsmasker method)": [[381, "nilearn.maskers.MultiSurfaceMapsMasker.get_params", false]], "get_params() (nilearn.maskers.multisurfacemasker method)": [[382, "nilearn.maskers.MultiSurfaceMasker.get_params", false]], "get_params() (nilearn.maskers.niftilabelsmasker method)": [[383, "nilearn.maskers.NiftiLabelsMasker.get_params", false]], "get_params() (nilearn.maskers.niftimapsmasker method)": [[384, "nilearn.maskers.NiftiMapsMasker.get_params", false]], "get_params() (nilearn.maskers.niftimasker method)": [[385, "nilearn.maskers.NiftiMasker.get_params", false]], "get_params() (nilearn.maskers.niftispheresmasker method)": [[386, "nilearn.maskers.NiftiSpheresMasker.get_params", false]], "get_params() (nilearn.maskers.surfacelabelsmasker method)": [[387, "nilearn.maskers.SurfaceLabelsMasker.get_params", false]], "get_params() (nilearn.maskers.surfacemapsmasker method)": [[388, "nilearn.maskers.SurfaceMapsMasker.get_params", false]], "get_params() (nilearn.maskers.surfacemasker method)": [[389, "nilearn.maskers.SurfaceMasker.get_params", false]], "get_params() (nilearn.regions.hierarchicalkmeans method)": [[462, "nilearn.regions.HierarchicalKMeans.get_params", false]], "get_params() (nilearn.regions.parcellations method)": [[463, "nilearn.regions.Parcellations.get_params", false]], "get_params() (nilearn.regions.regionextractor method)": [[465, "nilearn.regions.RegionExtractor.get_params", false]], "get_params() (nilearn.regions.rena method)": [[464, "nilearn.regions.ReNA.get_params", false]], "get_projector() (in module nilearn.plotting.displays)": [[428, "nilearn.plotting.displays.get_projector", false]], "get_slicer() (in module nilearn.plotting.displays)": [[429, "nilearn.plotting.displays.get_slicer", false]], "get_standalone() (nilearn.reporting.htmlreport method)": [[473, "nilearn.reporting.HTMLReport.get_standalone", false]], "glassbrainaxes (class in nilearn.plotting.displays)": [[403, "nilearn.plotting.displays.GlassBrainAxes", false]], "glm": [[185, "term-GLM", true]], "glover_dispersion_derivative() (in module nilearn.glm.first_level)": [[336, "nilearn.glm.first_level.glover_dispersion_derivative", false]], "glover_hrf() (in module nilearn.glm.first_level)": [[337, "nilearn.glm.first_level.glover_hrf", false]], "glover_time_derivative() (in module nilearn.glm.first_level)": [[338, "nilearn.glm.first_level.glover_time_derivative", false]], "group_sparse_covariance() (in module nilearn.connectome)": [[244, "nilearn.connectome.group_sparse_covariance", false]], "groupsparsecovariance (class in nilearn.connectome)": [[241, "nilearn.connectome.GroupSparseCovariance", false]], "groupsparsecovariancecv (class in nilearn.connectome)": [[242, "nilearn.connectome.GroupSparseCovarianceCV", false]], "height (nilearn.reporting.htmlreport property)": [[473, "nilearn.reporting.HTMLReport.height", false]], "hierarchicalkmeans (class in nilearn.regions)": [[462, "nilearn.regions.HierarchicalKMeans", false]], "high_variance_confounds() (in module nilearn.image)": [[357, "nilearn.image.high_variance_confounds", false]], "high_variance_confounds() (in module nilearn.signal)": [[478, "nilearn.signal.high_variance_confounds", false]], "hrf": [[185, "term-HRF", true]], "htmlreport (class in nilearn.reporting)": [[473, "nilearn.reporting.HTMLReport", false]], "ica": [[185, "term-ICA", true]], "img_to_signals_labels() (in module nilearn.regions)": [[468, "nilearn.regions.img_to_signals_labels", false]], "img_to_signals_maps() (in module nilearn.regions)": [[469, "nilearn.regions.img_to_signals_maps", false]], "increment_stack_counter() (nilearn.exceptions.dimensionerror method)": [[315, "nilearn.exceptions.DimensionError.increment_stack_counter", false]], "index_img() (in module nilearn.image)": [[358, "nilearn.image.index_img", false]], "init_with_figure() (nilearn.plotting.displays.baseslicer class method)": [[401, "nilearn.plotting.displays.BaseSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.lprojector class method)": [[404, "nilearn.plotting.displays.LProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.lrprojector class method)": [[405, "nilearn.plotting.displays.LRProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.lyrprojector class method)": [[406, "nilearn.plotting.displays.LYRProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.lyrzprojector class method)": [[407, "nilearn.plotting.displays.LYRZProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.lzrprojector class method)": [[408, "nilearn.plotting.displays.LZRProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.lzryprojector class method)": [[409, "nilearn.plotting.displays.LZRYProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.mosaicslicer class method)": [[410, "nilearn.plotting.displays.MosaicSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.orthoprojector class method)": [[411, "nilearn.plotting.displays.OrthoProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.orthoslicer class method)": [[412, "nilearn.plotting.displays.OrthoSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.rprojector class method)": [[414, "nilearn.plotting.displays.RProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.tiledslicer class method)": [[415, "nilearn.plotting.displays.TiledSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.xprojector class method)": [[416, "nilearn.plotting.displays.XProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.xslicer class method)": [[417, "nilearn.plotting.displays.XSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.xzprojector class method)": [[418, "nilearn.plotting.displays.XZProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.xzslicer class method)": [[419, "nilearn.plotting.displays.XZSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.yprojector class method)": [[420, "nilearn.plotting.displays.YProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.yslicer class method)": [[421, "nilearn.plotting.displays.YSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.yxprojector class method)": [[422, "nilearn.plotting.displays.YXProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.yxslicer class method)": [[423, "nilearn.plotting.displays.YXSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.yzprojector class method)": [[424, "nilearn.plotting.displays.YZProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.yzslicer class method)": [[425, "nilearn.plotting.displays.YZSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.zprojector class method)": [[426, "nilearn.plotting.displays.ZProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.zslicer class method)": [[427, "nilearn.plotting.displays.ZSlicer.init_with_figure", false]], "initialize() (nilearn.glm.armodel method)": [[319, "nilearn.glm.ARModel.initialize", false]], "initialize() (nilearn.glm.olsmodel method)": [[323, "nilearn.glm.OLSModel.initialize", false]], "inmemorymesh (class in nilearn.surface)": [[480, "nilearn.surface.InMemoryMesh", false]], "intersect_masks() (in module nilearn.masking)": [[397, "nilearn.masking.intersect_masks", false]], "inverse_transform() (nilearn.connectome.connectivitymeasure method)": [[240, "nilearn.connectome.ConnectivityMeasure.inverse_transform", false]], "inverse_transform() (nilearn.decomposition.canica method)": [[312, "nilearn.decomposition.CanICA.inverse_transform", false]], "inverse_transform() (nilearn.decomposition.dictlearning method)": [[313, "nilearn.decomposition.DictLearning.inverse_transform", false]], "inverse_transform() (nilearn.maskers.basemasker method)": [[376, "nilearn.maskers.BaseMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.multiniftilabelsmasker method)": [[377, "nilearn.maskers.MultiNiftiLabelsMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.multiniftimapsmasker method)": [[378, "nilearn.maskers.MultiNiftiMapsMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.multiniftimasker method)": [[379, "nilearn.maskers.MultiNiftiMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.multisurfacelabelsmasker method)": [[380, "nilearn.maskers.MultiSurfaceLabelsMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.multisurfacemapsmasker method)": [[381, "nilearn.maskers.MultiSurfaceMapsMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.multisurfacemasker method)": [[382, "nilearn.maskers.MultiSurfaceMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.niftilabelsmasker method)": [[383, "nilearn.maskers.NiftiLabelsMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.niftimapsmasker method)": [[384, "nilearn.maskers.NiftiMapsMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.niftimasker method)": [[385, "nilearn.maskers.NiftiMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.niftispheresmasker method)": [[386, "nilearn.maskers.NiftiSpheresMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.surfacelabelsmasker method)": [[387, "nilearn.maskers.SurfaceLabelsMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.surfacemapsmasker method)": [[388, "nilearn.maskers.SurfaceMapsMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.surfacemasker method)": [[389, "nilearn.maskers.SurfaceMasker.inverse_transform", false]], "inverse_transform() (nilearn.regions.hierarchicalkmeans method)": [[462, "nilearn.regions.HierarchicalKMeans.inverse_transform", false]], "inverse_transform() (nilearn.regions.parcellations method)": [[463, "nilearn.regions.Parcellations.inverse_transform", false]], "inverse_transform() (nilearn.regions.regionextractor method)": [[465, "nilearn.regions.RegionExtractor.inverse_transform", false]], "inverse_transform() (nilearn.regions.rena method)": [[464, "nilearn.regions.ReNA.inverse_transform", false]], "iter_img() (in module nilearn.image)": [[359, "nilearn.image.iter_img", false]], "labels_ (nilearn.maskers.multiniftilabelsmasker property)": [[377, "nilearn.maskers.MultiNiftiLabelsMasker.labels_", false]], "labels_ (nilearn.maskers.multisurfacelabelsmasker property)": [[380, "nilearn.maskers.MultiSurfaceLabelsMasker.labels_", false]], "labels_ (nilearn.maskers.niftilabelsmasker property)": [[383, "nilearn.maskers.NiftiLabelsMasker.labels_", false]], "labels_ (nilearn.maskers.surfacelabelsmasker property)": [[387, "nilearn.maskers.SurfaceLabelsMasker.labels_", false]], "largest_connected_component_img() (in module nilearn.image)": [[360, "nilearn.image.largest_connected_component_img", false]], "likelihoodmodelresults (class in nilearn.glm)": [[322, "nilearn.glm.LikelihoodModelResults", false]], "load_confounds() (in module nilearn.interfaces.fmriprep)": [[373, "nilearn.interfaces.fmriprep.load_confounds", false]], "load_confounds_strategy() (in module nilearn.interfaces.fmriprep)": [[374, "nilearn.interfaces.fmriprep.load_confounds_strategy", false]], "load_fsaverage() (in module nilearn.datasets)": [[293, "nilearn.datasets.load_fsaverage", false]], "load_fsaverage_data() (in module nilearn.datasets)": [[294, "nilearn.datasets.load_fsaverage_data", false]], "load_img() (in module nilearn.image)": [[361, "nilearn.image.load_img", false]], "load_mni152_brain_mask() (in module nilearn.datasets)": [[295, "nilearn.datasets.load_mni152_brain_mask", false]], "load_mni152_gm_mask() (in module nilearn.datasets)": [[296, "nilearn.datasets.load_mni152_gm_mask", false]], "load_mni152_gm_template() (in module nilearn.datasets)": [[297, "nilearn.datasets.load_mni152_gm_template", false]], "load_mni152_template() (in module nilearn.datasets)": [[298, "nilearn.datasets.load_mni152_template", false]], "load_mni152_wm_mask() (in module nilearn.datasets)": [[299, "nilearn.datasets.load_mni152_wm_mask", false]], "load_mni152_wm_template() (in module nilearn.datasets)": [[300, "nilearn.datasets.load_mni152_wm_template", false]], "load_nki() (in module nilearn.datasets)": [[301, "nilearn.datasets.load_nki", false]], "load_sample_motor_activation_image() (in module nilearn.datasets)": [[302, "nilearn.datasets.load_sample_motor_activation_image", false]], "load_surf_data() (in module nilearn.surface)": [[485, "nilearn.surface.load_surf_data", false]], "load_surf_mesh() (in module nilearn.surface)": [[486, "nilearn.surface.load_surf_mesh", false]], "loaded() (nilearn.surface.filemesh method)": [[479, "nilearn.surface.FileMesh.loaded", false]], "logl (nilearn.glm.likelihoodmodelresults property)": [[322, "nilearn.glm.LikelihoodModelResults.logL", false]], "logl (nilearn.glm.regressionresults property)": [[324, "nilearn.glm.RegressionResults.logL", false]], "logl() (nilearn.glm.armodel method)": [[319, "nilearn.glm.ARModel.logL", false]], "logl() (nilearn.glm.olsmodel method)": [[323, "nilearn.glm.OLSModel.logL", false]], "logl() (nilearn.glm.simpleregressionresults method)": [[325, "nilearn.glm.SimpleRegressionResults.logL", false]], "lprojector (class in nilearn.plotting.displays)": [[404, "nilearn.plotting.displays.LProjector", false]], "lrprojector (class in nilearn.plotting.displays)": [[405, "nilearn.plotting.displays.LRProjector", false]], "lut_ (nilearn.maskers.multiniftilabelsmasker attribute)": [[377, "nilearn.maskers.MultiNiftiLabelsMasker.lut_", false]], "lut_ (nilearn.maskers.multisurfacelabelsmasker attribute)": [[380, "nilearn.maskers.MultiSurfaceLabelsMasker.lut_", false]], "lut_ (nilearn.maskers.niftilabelsmasker attribute)": [[383, "nilearn.maskers.NiftiLabelsMasker.lut_", false]], "lut_ (nilearn.maskers.surfacelabelsmasker attribute)": [[387, "nilearn.maskers.SurfaceLabelsMasker.lut_", false]], "lyrprojector (class in nilearn.plotting.displays)": [[406, "nilearn.plotting.displays.LYRProjector", false]], "lyrzprojector (class in nilearn.plotting.displays)": [[407, "nilearn.plotting.displays.LYRZProjector", false]], "lzrprojector (class in nilearn.plotting.displays)": [[408, "nilearn.plotting.displays.LZRProjector", false]], "lzryprojector (class in nilearn.plotting.displays)": [[409, "nilearn.plotting.displays.LZRYProjector", false]], "make_first_level_design_matrix() (in module nilearn.glm.first_level)": [[339, "nilearn.glm.first_level.make_first_level_design_matrix", false]], "make_glm_report() (in module nilearn.reporting)": [[475, "nilearn.reporting.make_glm_report", false]], "make_second_level_design_matrix() (in module nilearn.glm.second_level)": [[347, "nilearn.glm.second_level.make_second_level_design_matrix", false]], "maskwarning (class in nilearn.exceptions)": [[316, "nilearn.exceptions.MaskWarning", false]], "math_img() (in module nilearn.image)": [[362, "nilearn.image.math_img", false]], "mean_img() (in module nilearn.image)": [[363, "nilearn.image.mean_img", false]], "mean_scaling() (in module nilearn.glm.first_level)": [[340, "nilearn.glm.first_level.mean_scaling", false]], "meg": [[185, "term-MEG", true]], "mesh": [[185, "term-mesh", true]], "meshdimensionerror (class in nilearn.exceptions)": [[317, "nilearn.exceptions.MeshDimensionError", false]], "message (nilearn.exceptions.dimensionerror property)": [[315, "nilearn.exceptions.DimensionError.message", false]], "mni": [[185, "term-MNI", true]], "module": [[193, "module-nilearn.connectome", false], [194, "module-nilearn.datasets", false], [195, "module-nilearn.decoding", false], [196, "module-nilearn.decomposition", false], [239, "module-nilearn.exceptions", false], [493, "module-nilearn.glm", false], [493, "module-nilearn.glm.first_level", false], [493, "module-nilearn.glm.second_level", false], [494, "module-nilearn.image", false], [496, "module-nilearn.interfaces", false], [496, "module-nilearn.interfaces.bids", false], [496, "module-nilearn.interfaces.fmriprep", false], [496, "module-nilearn.interfaces.fsl", false], [497, "module-nilearn.maskers", false], [498, "module-nilearn.masking", false], [499, "module-nilearn.mass_univariate", false], [500, "module-nilearn.plotting", false], [500, "module-nilearn.plotting.displays", false], [502, "module-nilearn.regions", false], [503, "module-nilearn.reporting", false], [504, "module-nilearn.signal", false], [505, "module-nilearn.surface", false], [506, "module-nilearn.utils", false]], "mosaicslicer (class in nilearn.plotting.displays)": [[410, "nilearn.plotting.displays.MosaicSlicer", false]], "mse (nilearn.glm.regressionresults property)": [[324, "nilearn.glm.RegressionResults.MSE", false]], "multiniftilabelsmasker (class in nilearn.maskers)": [[377, "nilearn.maskers.MultiNiftiLabelsMasker", false]], "multiniftimapsmasker (class in nilearn.maskers)": [[378, "nilearn.maskers.MultiNiftiMapsMasker", false]], "multiniftimasker (class in nilearn.maskers)": [[379, "nilearn.maskers.MultiNiftiMasker", false]], "multisurfacelabelsmasker (class in nilearn.maskers)": [[380, "nilearn.maskers.MultiSurfaceLabelsMasker", false]], "multisurfacemapsmasker (class in nilearn.maskers)": [[381, "nilearn.maskers.MultiSurfaceMapsMasker", false]], "multisurfacemasker (class in nilearn.maskers)": [[382, "nilearn.maskers.MultiSurfaceMasker", false]], "mvpa": [[185, "term-MVPA", true]], "n_elements_ (nilearn.maskers.multiniftilabelsmasker property)": [[377, "nilearn.maskers.MultiNiftiLabelsMasker.n_elements_", false]], "n_elements_ (nilearn.maskers.multisurfacelabelsmasker property)": [[380, "nilearn.maskers.MultiSurfaceLabelsMasker.n_elements_", false]], "n_elements_ (nilearn.maskers.niftilabelsmasker property)": [[383, "nilearn.maskers.NiftiLabelsMasker.n_elements_", false]], "n_elements_ (nilearn.maskers.surfacelabelsmasker property)": [[387, "nilearn.maskers.SurfaceLabelsMasker.n_elements_", false]], "n_vertices (nilearn.surface.filemesh attribute)": [[479, "nilearn.surface.FileMesh.n_vertices", false]], "n_vertices (nilearn.surface.inmemorymesh attribute)": [[480, "nilearn.surface.InMemoryMesh.n_vertices", false]], "n_vertices (nilearn.surface.polymesh attribute)": [[482, "nilearn.surface.PolyMesh.n_vertices", false]], "n_vertices (nilearn.surface.surfacemesh attribute)": [[484, "nilearn.surface.SurfaceMesh.n_vertices", false]], "neurovault": [[185, "term-Neurovault", true]], "new_img_like() (in module nilearn.image)": [[364, "nilearn.image.new_img_like", false]], "niftilabelsmasker (class in nilearn.maskers)": [[383, "nilearn.maskers.NiftiLabelsMasker", false]], "niftimapsmasker (class in nilearn.maskers)": [[384, "nilearn.maskers.NiftiMapsMasker", false]], "niftimasker (class in nilearn.maskers)": [[385, "nilearn.maskers.NiftiMasker", false]], "niftispheresmasker (class in nilearn.maskers)": [[386, "nilearn.maskers.NiftiSpheresMasker", false]], "nilearn.connectome": [[193, "module-nilearn.connectome", false]], "nilearn.datasets": [[194, "module-nilearn.datasets", false]], "nilearn.decoding": [[195, "module-nilearn.decoding", false]], "nilearn.decomposition": [[196, "module-nilearn.decomposition", false]], "nilearn.exceptions": [[239, "module-nilearn.exceptions", false]], "nilearn.glm": [[493, "module-nilearn.glm", false]], "nilearn.glm.first_level": [[493, "module-nilearn.glm.first_level", false]], "nilearn.glm.second_level": [[493, "module-nilearn.glm.second_level", false]], "nilearn.image": [[494, "module-nilearn.image", false]], "nilearn.interfaces": [[496, "module-nilearn.interfaces", false]], "nilearn.interfaces.bids": [[496, "module-nilearn.interfaces.bids", false]], "nilearn.interfaces.fmriprep": [[496, "module-nilearn.interfaces.fmriprep", false]], "nilearn.interfaces.fsl": [[496, "module-nilearn.interfaces.fsl", false]], "nilearn.maskers": [[497, "module-nilearn.maskers", false]], "nilearn.masking": [[498, "module-nilearn.masking", false]], "nilearn.mass_univariate": [[499, "module-nilearn.mass_univariate", false]], "nilearn.plotting": [[500, "module-nilearn.plotting", false]], "nilearn.plotting.displays": [[500, "module-nilearn.plotting.displays", false]], "nilearn.regions": [[502, "module-nilearn.regions", false]], "nilearn.reporting": [[503, "module-nilearn.reporting", false]], "nilearn.signal": [[504, "module-nilearn.signal", false]], "nilearn.surface": [[505, "module-nilearn.surface", false]], "nilearn.utils": [[506, "module-nilearn.utils", false]], "non_parametric_inference() (in module nilearn.glm.second_level)": [[348, "nilearn.glm.second_level.non_parametric_inference", false]], "normalized_residuals (nilearn.glm.regressionresults property)": [[324, "nilearn.glm.RegressionResults.normalized_residuals", false]], "normalized_residuals() (nilearn.glm.simpleregressionresults method)": [[325, "nilearn.glm.SimpleRegressionResults.normalized_residuals", false]], "notimplementedwarning (class in nilearn.exceptions)": [[318, "nilearn.exceptions.NotImplementedWarning", false]], "olsmodel (class in nilearn.glm)": [[323, "nilearn.glm.OLSModel", false]], "one_minus_pvalue() (nilearn.glm.contrast method)": [[320, "nilearn.glm.Contrast.one_minus_pvalue", false]], "open_in_browser() (nilearn.reporting.htmlreport method)": [[473, "nilearn.reporting.HTMLReport.open_in_browser", false]], "opening": [[185, "term-Opening", true]], "orthoprojector (class in nilearn.plotting.displays)": [[411, "nilearn.plotting.displays.OrthoProjector", false]], "orthoslicer (class in nilearn.plotting.displays)": [[412, "nilearn.plotting.displays.OrthoSlicer", false]], "p_value() (nilearn.glm.contrast method)": [[320, "nilearn.glm.Contrast.p_value", false]], "parameter estimate": [[185, "term-Parameter-estimate", true]], "parcellation": [[185, "term-parcellation", true]], "parcellations (class in nilearn.regions)": [[463, "nilearn.regions.Parcellations", false]], "parse_bids_filename() (in module nilearn.interfaces.bids)": [[372, "nilearn.interfaces.bids.parse_bids_filename", false]], "patch_openneuro_dataset() (in module nilearn.datasets)": [[303, "nilearn.datasets.patch_openneuro_dataset", false]], "permuted_ols() (in module nilearn.mass_univariate)": [[399, "nilearn.mass_univariate.permuted_ols", false]], "plot_anat() (in module nilearn.plotting)": [[434, "nilearn.plotting.plot_anat", false]], "plot_bland_altman() (in module nilearn.plotting)": [[435, "nilearn.plotting.plot_bland_altman", false]], "plot_carpet() (in module nilearn.plotting)": [[436, "nilearn.plotting.plot_carpet", false]], "plot_connectome() (in module nilearn.plotting)": [[437, "nilearn.plotting.plot_connectome", false]], "plot_contrast_matrix() (in module nilearn.plotting)": [[438, "nilearn.plotting.plot_contrast_matrix", false]], "plot_design_matrix() (in module nilearn.plotting)": [[439, "nilearn.plotting.plot_design_matrix", false]], "plot_design_matrix_correlation() (in module nilearn.plotting)": [[440, "nilearn.plotting.plot_design_matrix_correlation", false]], "plot_epi() (in module nilearn.plotting)": [[441, "nilearn.plotting.plot_epi", false]], "plot_event() (in module nilearn.plotting)": [[442, "nilearn.plotting.plot_event", false]], "plot_glass_brain() (in module nilearn.plotting)": [[443, "nilearn.plotting.plot_glass_brain", false]], "plot_img() (in module nilearn.plotting)": [[444, "nilearn.plotting.plot_img", false]], "plot_img_comparison() (in module nilearn.plotting)": [[445, "nilearn.plotting.plot_img_comparison", false]], "plot_img_on_surf() (in module nilearn.plotting)": [[446, "nilearn.plotting.plot_img_on_surf", false]], "plot_markers() (in module nilearn.plotting)": [[447, "nilearn.plotting.plot_markers", false]], "plot_matrix() (in module nilearn.plotting)": [[448, "nilearn.plotting.plot_matrix", false]], "plot_prob_atlas() (in module nilearn.plotting)": [[449, "nilearn.plotting.plot_prob_atlas", false]], "plot_roi() (in module nilearn.plotting)": [[450, "nilearn.plotting.plot_roi", false]], "plot_stat_map() (in module nilearn.plotting)": [[451, "nilearn.plotting.plot_stat_map", false]], "plot_surf() (in module nilearn.plotting)": [[452, "nilearn.plotting.plot_surf", false]], "plot_surf_contours() (in module nilearn.plotting)": [[453, "nilearn.plotting.plot_surf_contours", false]], "plot_surf_roi() (in module nilearn.plotting)": [[454, "nilearn.plotting.plot_surf_roi", false]], "plot_surf_stat_map() (in module nilearn.plotting)": [[455, "nilearn.plotting.plot_surf_stat_map", false]], "plotlysurfacefigure (class in nilearn.plotting.displays)": [[413, "nilearn.plotting.displays.PlotlySurfaceFigure", false]], "polydata (class in nilearn.surface)": [[481, "nilearn.surface.PolyData", false]], "polymesh (class in nilearn.surface)": [[482, "nilearn.surface.PolyMesh", false]], "prec_to_partial() (in module nilearn.connectome)": [[245, "nilearn.connectome.prec_to_partial", false]], "predict() (nilearn.decoding.decoder method)": [[305, "nilearn.decoding.Decoder.predict", false]], "predict() (nilearn.decoding.decoderregressor method)": [[306, "nilearn.decoding.DecoderRegressor.predict", false]], "predict() (nilearn.decoding.fremclassifier method)": [[307, "nilearn.decoding.FREMClassifier.predict", false]], "predict() (nilearn.decoding.fremregressor method)": [[308, "nilearn.decoding.FREMRegressor.predict", false]], "predict() (nilearn.decoding.spacenetclassifier method)": [[310, "nilearn.decoding.SpaceNetClassifier.predict", false]], "predict() (nilearn.decoding.spacenetregressor method)": [[311, "nilearn.decoding.SpaceNetRegressor.predict", false]], "predicted (nilearn.glm.first_level.firstlevelmodel property)": [[332, "nilearn.glm.first_level.FirstLevelModel.predicted", false]], "predicted (nilearn.glm.regressionresults property)": [[324, "nilearn.glm.RegressionResults.predicted", false]], "predicted (nilearn.glm.second_level.secondlevelmodel property)": [[346, "nilearn.glm.second_level.SecondLevelModel.predicted", false]], "predicted() (nilearn.glm.simpleregressionresults method)": [[325, "nilearn.glm.SimpleRegressionResults.predicted", false]], "predictive modeling": [[185, "term-predictive-modeling", true]], "probabilistic atlas": [[185, "term-Probabilistic-atlas", true]], "r_square (nilearn.glm.first_level.firstlevelmodel property)": [[332, "nilearn.glm.first_level.FirstLevelModel.r_square", false]], "r_square (nilearn.glm.regressionresults property)": [[324, "nilearn.glm.RegressionResults.r_square", false]], "r_square (nilearn.glm.second_level.secondlevelmodel property)": [[346, "nilearn.glm.second_level.SecondLevelModel.r_square", false]], "recursive_neighbor_agglomeration() (in module nilearn.regions)": [[470, "nilearn.regions.recursive_neighbor_agglomeration", false]], "region_ids_ (nilearn.maskers.multiniftilabelsmasker property)": [[377, "nilearn.maskers.MultiNiftiLabelsMasker.region_ids_", false]], "region_ids_ (nilearn.maskers.multisurfacelabelsmasker property)": [[380, "nilearn.maskers.MultiSurfaceLabelsMasker.region_ids_", false]], "region_ids_ (nilearn.maskers.niftilabelsmasker property)": [[383, "nilearn.maskers.NiftiLabelsMasker.region_ids_", false]], "region_ids_ (nilearn.maskers.surfacelabelsmasker property)": [[387, "nilearn.maskers.SurfaceLabelsMasker.region_ids_", false]], "region_names_ (nilearn.maskers.multiniftilabelsmasker property)": [[377, "nilearn.maskers.MultiNiftiLabelsMasker.region_names_", false]], "region_names_ (nilearn.maskers.multisurfacelabelsmasker property)": [[380, "nilearn.maskers.MultiSurfaceLabelsMasker.region_names_", false]], "region_names_ (nilearn.maskers.niftilabelsmasker property)": [[383, "nilearn.maskers.NiftiLabelsMasker.region_names_", false]], "region_names_ (nilearn.maskers.surfacelabelsmasker property)": [[387, "nilearn.maskers.SurfaceLabelsMasker.region_names_", false]], "regionextractor (class in nilearn.regions)": [[465, "nilearn.regions.RegionExtractor", false]], "regression": [[185, "term-regression", true]], "regressionresults (class in nilearn.glm)": [[324, "nilearn.glm.RegressionResults", false]], "rena": [[185, "term-ReNA", true]], "rena (class in nilearn.regions)": [[464, "nilearn.regions.ReNA", false]], "reorder_img() (in module nilearn.image)": [[365, "nilearn.image.reorder_img", false]], "resample_img() (in module nilearn.image)": [[366, "nilearn.image.resample_img", false]], "resample_to_img() (in module nilearn.image)": [[367, "nilearn.image.resample_to_img", false]], "residuals (nilearn.glm.first_level.firstlevelmodel property)": [[332, "nilearn.glm.first_level.FirstLevelModel.residuals", false]], "residuals (nilearn.glm.regressionresults property)": [[324, "nilearn.glm.RegressionResults.residuals", false]], "residuals (nilearn.glm.second_level.secondlevelmodel property)": [[346, "nilearn.glm.second_level.SecondLevelModel.residuals", false]], "residuals() (nilearn.glm.simpleregressionresults method)": [[325, "nilearn.glm.SimpleRegressionResults.residuals", false]], "resize() (nilearn.reporting.htmlreport method)": [[473, "nilearn.reporting.HTMLReport.resize", false]], "resting-state": [[185, "term-resting-state", true]], "roc": [[185, "term-ROC", true]], "rprojector (class in nilearn.plotting.displays)": [[414, "nilearn.plotting.displays.RProjector", false]], "run_glm() (in module nilearn.glm.first_level)": [[341, "nilearn.glm.first_level.run_glm", false]], "save_as_html() (nilearn.reporting.htmlreport method)": [[473, "nilearn.reporting.HTMLReport.save_as_html", false]], "save_glm_to_bids() (in module nilearn.glm)": [[345, "nilearn.glm.save_glm_to_bids", false]], "savefig() (nilearn.plotting.displays.baseslicer method)": [[401, "nilearn.plotting.displays.BaseSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.lprojector method)": [[404, "nilearn.plotting.displays.LProjector.savefig", false]], "savefig() (nilearn.plotting.displays.lrprojector method)": [[405, "nilearn.plotting.displays.LRProjector.savefig", false]], "savefig() (nilearn.plotting.displays.lyrprojector method)": [[406, "nilearn.plotting.displays.LYRProjector.savefig", false]], "savefig() (nilearn.plotting.displays.lyrzprojector method)": [[407, "nilearn.plotting.displays.LYRZProjector.savefig", false]], "savefig() (nilearn.plotting.displays.lzrprojector method)": [[408, "nilearn.plotting.displays.LZRProjector.savefig", false]], "savefig() (nilearn.plotting.displays.lzryprojector method)": [[409, "nilearn.plotting.displays.LZRYProjector.savefig", false]], "savefig() (nilearn.plotting.displays.mosaicslicer method)": [[410, "nilearn.plotting.displays.MosaicSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.orthoprojector method)": [[411, "nilearn.plotting.displays.OrthoProjector.savefig", false]], "savefig() (nilearn.plotting.displays.orthoslicer method)": [[412, "nilearn.plotting.displays.OrthoSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.plotlysurfacefigure method)": [[413, "nilearn.plotting.displays.PlotlySurfaceFigure.savefig", false]], "savefig() (nilearn.plotting.displays.rprojector method)": [[414, "nilearn.plotting.displays.RProjector.savefig", false]], "savefig() (nilearn.plotting.displays.tiledslicer method)": [[415, "nilearn.plotting.displays.TiledSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.xprojector method)": [[416, "nilearn.plotting.displays.XProjector.savefig", false]], "savefig() (nilearn.plotting.displays.xslicer method)": [[417, "nilearn.plotting.displays.XSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.xzprojector method)": [[418, "nilearn.plotting.displays.XZProjector.savefig", false]], "savefig() (nilearn.plotting.displays.xzslicer method)": [[419, "nilearn.plotting.displays.XZSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.yprojector method)": [[420, "nilearn.plotting.displays.YProjector.savefig", false]], "savefig() (nilearn.plotting.displays.yslicer method)": [[421, "nilearn.plotting.displays.YSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.yxprojector method)": [[422, "nilearn.plotting.displays.YXProjector.savefig", false]], "savefig() (nilearn.plotting.displays.yxslicer method)": [[423, "nilearn.plotting.displays.YXSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.yzprojector method)": [[424, "nilearn.plotting.displays.YZProjector.savefig", false]], "savefig() (nilearn.plotting.displays.yzslicer method)": [[425, "nilearn.plotting.displays.YZSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.zprojector method)": [[426, "nilearn.plotting.displays.ZProjector.savefig", false]], "savefig() (nilearn.plotting.displays.zslicer method)": [[427, "nilearn.plotting.displays.ZSlicer.savefig", false]], "score() (nilearn.decoding.decoder method)": [[305, "nilearn.decoding.Decoder.score", false]], "score() (nilearn.decoding.decoderregressor method)": [[306, "nilearn.decoding.DecoderRegressor.score", false]], "score() (nilearn.decoding.fremclassifier method)": [[307, "nilearn.decoding.FREMClassifier.score", false]], "score() (nilearn.decoding.fremregressor method)": [[308, "nilearn.decoding.FREMRegressor.score", false]], "score() (nilearn.decoding.spacenetclassifier method)": [[310, "nilearn.decoding.SpaceNetClassifier.score", false]], "score() (nilearn.decoding.spacenetregressor method)": [[311, "nilearn.decoding.SpaceNetRegressor.score", false]], "score() (nilearn.decomposition.canica method)": [[312, "nilearn.decomposition.CanICA.score", false]], "score() (nilearn.decomposition.dictlearning method)": [[313, "nilearn.decomposition.DictLearning.score", false]], "score() (nilearn.regions.parcellations method)": [[463, "nilearn.regions.Parcellations.score", false]], "scores_img_ (nilearn.decoding.searchlight property)": [[309, "nilearn.decoding.SearchLight.scores_img_", false]], "searchlight": [[185, "term-Searchlight", true]], "searchlight (class in nilearn.decoding)": [[309, "nilearn.decoding.SearchLight", false]], "secondlevelmodel (class in nilearn.glm.second_level)": [[346, "nilearn.glm.second_level.SecondLevelModel", false]], "select_from_index() (in module nilearn.datasets)": [[304, "nilearn.datasets.select_from_index", false]], "set_fit_request() (nilearn.connectome.groupsparsecovariance method)": [[241, "nilearn.connectome.GroupSparseCovariance.set_fit_request", false]], "set_fit_request() (nilearn.connectome.groupsparsecovariancecv method)": [[242, "nilearn.connectome.GroupSparseCovarianceCV.set_fit_request", false]], "set_fit_request() (nilearn.decoding.decoder method)": [[305, "nilearn.decoding.Decoder.set_fit_request", false]], "set_fit_request() (nilearn.decoding.decoderregressor method)": [[306, "nilearn.decoding.DecoderRegressor.set_fit_request", false]], "set_fit_request() (nilearn.decoding.fremclassifier method)": [[307, "nilearn.decoding.FREMClassifier.set_fit_request", false]], "set_fit_request() (nilearn.decoding.fremregressor method)": [[308, "nilearn.decoding.FREMRegressor.set_fit_request", false]], "set_fit_request() (nilearn.decoding.searchlight method)": [[309, "nilearn.decoding.SearchLight.set_fit_request", false]], "set_fit_request() (nilearn.decoding.spacenetclassifier method)": [[310, "nilearn.decoding.SpaceNetClassifier.set_fit_request", false]], "set_fit_request() (nilearn.decoding.spacenetregressor method)": [[311, "nilearn.decoding.SpaceNetRegressor.set_fit_request", false]], "set_fit_request() (nilearn.decomposition.canica method)": [[312, "nilearn.decomposition.CanICA.set_fit_request", false]], "set_fit_request() (nilearn.decomposition.dictlearning method)": [[313, "nilearn.decomposition.DictLearning.set_fit_request", false]], "set_fit_request() (nilearn.glm.first_level.firstlevelmodel method)": [[332, "nilearn.glm.first_level.FirstLevelModel.set_fit_request", false]], "set_fit_request() (nilearn.glm.second_level.secondlevelmodel method)": [[346, "nilearn.glm.second_level.SecondLevelModel.set_fit_request", false]], "set_fit_request() (nilearn.maskers.basemasker method)": [[376, "nilearn.maskers.BaseMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.multiniftilabelsmasker method)": [[377, "nilearn.maskers.MultiNiftiLabelsMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.multiniftimapsmasker method)": [[378, "nilearn.maskers.MultiNiftiMapsMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.multiniftimasker method)": [[379, "nilearn.maskers.MultiNiftiMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.multisurfacelabelsmasker method)": [[380, "nilearn.maskers.MultiSurfaceLabelsMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.multisurfacemapsmasker method)": [[381, "nilearn.maskers.MultiSurfaceMapsMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.multisurfacemasker method)": [[382, "nilearn.maskers.MultiSurfaceMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.niftilabelsmasker method)": [[383, "nilearn.maskers.NiftiLabelsMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.niftimapsmasker method)": [[384, "nilearn.maskers.NiftiMapsMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.niftimasker method)": [[385, "nilearn.maskers.NiftiMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.niftispheresmasker method)": [[386, "nilearn.maskers.NiftiSpheresMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.surfacelabelsmasker method)": [[387, "nilearn.maskers.SurfaceLabelsMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.surfacemapsmasker method)": [[388, "nilearn.maskers.SurfaceMapsMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.surfacemasker method)": [[389, "nilearn.maskers.SurfaceMasker.set_fit_request", false]], "set_fit_request() (nilearn.regions.parcellations method)": [[463, "nilearn.regions.Parcellations.set_fit_request", false]], "set_fit_request() (nilearn.regions.regionextractor method)": [[465, "nilearn.regions.RegionExtractor.set_fit_request", false]], "set_inverse_transform_request() (nilearn.connectome.connectivitymeasure method)": [[240, "nilearn.connectome.ConnectivityMeasure.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.decomposition.canica method)": [[312, "nilearn.decomposition.CanICA.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.decomposition.dictlearning method)": [[313, "nilearn.decomposition.DictLearning.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.multiniftilabelsmasker method)": [[377, "nilearn.maskers.MultiNiftiLabelsMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.multiniftimapsmasker method)": [[378, "nilearn.maskers.MultiNiftiMapsMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.multisurfacelabelsmasker method)": [[380, "nilearn.maskers.MultiSurfaceLabelsMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.multisurfacemapsmasker method)": [[381, "nilearn.maskers.MultiSurfaceMapsMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.multisurfacemasker method)": [[382, "nilearn.maskers.MultiSurfaceMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.niftilabelsmasker method)": [[383, "nilearn.maskers.NiftiLabelsMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.niftimapsmasker method)": [[384, "nilearn.maskers.NiftiMapsMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.niftispheresmasker method)": [[386, "nilearn.maskers.NiftiSpheresMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.surfacelabelsmasker method)": [[387, "nilearn.maskers.SurfaceLabelsMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.surfacemapsmasker method)": [[388, "nilearn.maskers.SurfaceMapsMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.surfacemasker method)": [[389, "nilearn.maskers.SurfaceMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.regions.hierarchicalkmeans method)": [[462, "nilearn.regions.HierarchicalKMeans.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.regions.parcellations method)": [[463, "nilearn.regions.Parcellations.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.regions.regionextractor method)": [[465, "nilearn.regions.RegionExtractor.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.regions.rena method)": [[464, "nilearn.regions.ReNA.set_inverse_transform_request", false]], "set_output() (nilearn.connectome.connectivitymeasure method)": [[240, "nilearn.connectome.ConnectivityMeasure.set_output", false]], "set_output() (nilearn.decoding.searchlight method)": [[309, "nilearn.decoding.SearchLight.set_output", false]], "set_output() (nilearn.decomposition.canica method)": [[312, "nilearn.decomposition.CanICA.set_output", false]], "set_output() (nilearn.decomposition.dictlearning method)": [[313, "nilearn.decomposition.DictLearning.set_output", false]], "set_output() (nilearn.maskers.basemasker method)": [[376, "nilearn.maskers.BaseMasker.set_output", false]], "set_output() (nilearn.maskers.multiniftilabelsmasker method)": [[377, "nilearn.maskers.MultiNiftiLabelsMasker.set_output", false]], "set_output() (nilearn.maskers.multiniftimapsmasker method)": [[378, "nilearn.maskers.MultiNiftiMapsMasker.set_output", false]], "set_output() (nilearn.maskers.multiniftimasker method)": [[379, "nilearn.maskers.MultiNiftiMasker.set_output", false]], "set_output() (nilearn.maskers.multisurfacelabelsmasker method)": [[380, "nilearn.maskers.MultiSurfaceLabelsMasker.set_output", false]], "set_output() (nilearn.maskers.multisurfacemapsmasker method)": [[381, "nilearn.maskers.MultiSurfaceMapsMasker.set_output", false]], "set_output() (nilearn.maskers.multisurfacemasker method)": [[382, "nilearn.maskers.MultiSurfaceMasker.set_output", false]], "set_output() (nilearn.maskers.niftilabelsmasker method)": [[383, "nilearn.maskers.NiftiLabelsMasker.set_output", false]], "set_output() (nilearn.maskers.niftimapsmasker method)": [[384, "nilearn.maskers.NiftiMapsMasker.set_output", false]], "set_output() (nilearn.maskers.niftimasker method)": [[385, "nilearn.maskers.NiftiMasker.set_output", false]], "set_output() (nilearn.maskers.niftispheresmasker method)": [[386, "nilearn.maskers.NiftiSpheresMasker.set_output", false]], "set_output() (nilearn.maskers.surfacelabelsmasker method)": [[387, "nilearn.maskers.SurfaceLabelsMasker.set_output", false]], "set_output() (nilearn.maskers.surfacemapsmasker method)": [[388, "nilearn.maskers.SurfaceMapsMasker.set_output", false]], "set_output() (nilearn.maskers.surfacemasker method)": [[389, "nilearn.maskers.SurfaceMasker.set_output", false]], "set_output() (nilearn.regions.hierarchicalkmeans method)": [[462, "nilearn.regions.HierarchicalKMeans.set_output", false]], "set_output() (nilearn.regions.parcellations method)": [[463, "nilearn.regions.Parcellations.set_output", false]], "set_output() (nilearn.regions.regionextractor method)": [[465, "nilearn.regions.RegionExtractor.set_output", false]], "set_output() (nilearn.regions.rena method)": [[464, "nilearn.regions.ReNA.set_output", false]], "set_params() (nilearn.connectome.connectivitymeasure method)": [[240, "nilearn.connectome.ConnectivityMeasure.set_params", false]], "set_params() (nilearn.connectome.groupsparsecovariance method)": [[241, "nilearn.connectome.GroupSparseCovariance.set_params", false]], "set_params() (nilearn.connectome.groupsparsecovariancecv method)": [[242, "nilearn.connectome.GroupSparseCovarianceCV.set_params", false]], "set_params() (nilearn.decoding.decoder method)": [[305, "nilearn.decoding.Decoder.set_params", false]], "set_params() (nilearn.decoding.decoderregressor method)": [[306, "nilearn.decoding.DecoderRegressor.set_params", false]], "set_params() (nilearn.decoding.fremclassifier method)": [[307, "nilearn.decoding.FREMClassifier.set_params", false]], "set_params() (nilearn.decoding.fremregressor method)": [[308, "nilearn.decoding.FREMRegressor.set_params", false]], "set_params() (nilearn.decoding.searchlight method)": [[309, "nilearn.decoding.SearchLight.set_params", false]], "set_params() (nilearn.decoding.spacenetclassifier method)": [[310, "nilearn.decoding.SpaceNetClassifier.set_params", false]], "set_params() (nilearn.decoding.spacenetregressor method)": [[311, "nilearn.decoding.SpaceNetRegressor.set_params", false]], "set_params() (nilearn.decomposition.canica method)": [[312, "nilearn.decomposition.CanICA.set_params", false]], "set_params() (nilearn.decomposition.dictlearning method)": [[313, "nilearn.decomposition.DictLearning.set_params", false]], "set_params() (nilearn.glm.first_level.firstlevelmodel method)": [[332, "nilearn.glm.first_level.FirstLevelModel.set_params", false]], "set_params() (nilearn.glm.second_level.secondlevelmodel method)": [[346, "nilearn.glm.second_level.SecondLevelModel.set_params", false]], "set_params() (nilearn.maskers.basemasker method)": [[376, "nilearn.maskers.BaseMasker.set_params", false]], "set_params() (nilearn.maskers.multiniftilabelsmasker method)": [[377, "nilearn.maskers.MultiNiftiLabelsMasker.set_params", false]], "set_params() (nilearn.maskers.multiniftimapsmasker method)": [[378, "nilearn.maskers.MultiNiftiMapsMasker.set_params", false]], "set_params() (nilearn.maskers.multiniftimasker method)": [[379, "nilearn.maskers.MultiNiftiMasker.set_params", false]], "set_params() (nilearn.maskers.multisurfacelabelsmasker method)": [[380, "nilearn.maskers.MultiSurfaceLabelsMasker.set_params", false]], "set_params() (nilearn.maskers.multisurfacemapsmasker method)": [[381, "nilearn.maskers.MultiSurfaceMapsMasker.set_params", false]], "set_params() (nilearn.maskers.multisurfacemasker method)": [[382, "nilearn.maskers.MultiSurfaceMasker.set_params", false]], "set_params() (nilearn.maskers.niftilabelsmasker method)": [[383, "nilearn.maskers.NiftiLabelsMasker.set_params", false]], "set_params() (nilearn.maskers.niftimapsmasker method)": [[384, "nilearn.maskers.NiftiMapsMasker.set_params", false]], "set_params() (nilearn.maskers.niftimasker method)": [[385, "nilearn.maskers.NiftiMasker.set_params", false]], "set_params() (nilearn.maskers.niftispheresmasker method)": [[386, "nilearn.maskers.NiftiSpheresMasker.set_params", false]], "set_params() (nilearn.maskers.surfacelabelsmasker method)": [[387, "nilearn.maskers.SurfaceLabelsMasker.set_params", false]], "set_params() (nilearn.maskers.surfacemapsmasker method)": [[388, "nilearn.maskers.SurfaceMapsMasker.set_params", false]], "set_params() (nilearn.maskers.surfacemasker method)": [[389, "nilearn.maskers.SurfaceMasker.set_params", false]], "set_params() (nilearn.regions.hierarchicalkmeans method)": [[462, "nilearn.regions.HierarchicalKMeans.set_params", false]], "set_params() (nilearn.regions.parcellations method)": [[463, "nilearn.regions.Parcellations.set_params", false]], "set_params() (nilearn.regions.regionextractor method)": [[465, "nilearn.regions.RegionExtractor.set_params", false]], "set_params() (nilearn.regions.rena method)": [[464, "nilearn.regions.ReNA.set_params", false]], "set_score_request() (nilearn.decoding.spacenetclassifier method)": [[310, "nilearn.decoding.SpaceNetClassifier.set_score_request", false]], "set_score_request() (nilearn.decoding.spacenetregressor method)": [[311, "nilearn.decoding.SpaceNetRegressor.set_score_request", false]], "set_score_request() (nilearn.decomposition.canica method)": [[312, "nilearn.decomposition.CanICA.set_score_request", false]], "set_score_request() (nilearn.decomposition.dictlearning method)": [[313, "nilearn.decomposition.DictLearning.set_score_request", false]], "set_score_request() (nilearn.regions.parcellations method)": [[463, "nilearn.regions.Parcellations.set_score_request", false]], "set_transform_request() (nilearn.connectome.connectivitymeasure method)": [[240, "nilearn.connectome.ConnectivityMeasure.set_transform_request", false]], "set_transform_request() (nilearn.decoding.searchlight method)": [[309, "nilearn.decoding.SearchLight.set_transform_request", false]], "set_transform_request() (nilearn.decomposition.canica method)": [[312, "nilearn.decomposition.CanICA.set_transform_request", false]], "set_transform_request() (nilearn.decomposition.dictlearning method)": [[313, "nilearn.decomposition.DictLearning.set_transform_request", false]], "set_transform_request() (nilearn.maskers.basemasker method)": [[376, "nilearn.maskers.BaseMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.multiniftilabelsmasker method)": [[377, "nilearn.maskers.MultiNiftiLabelsMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.multiniftimapsmasker method)": [[378, "nilearn.maskers.MultiNiftiMapsMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.multiniftimasker method)": [[379, "nilearn.maskers.MultiNiftiMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.multisurfacelabelsmasker method)": [[380, "nilearn.maskers.MultiSurfaceLabelsMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.multisurfacemapsmasker method)": [[381, "nilearn.maskers.MultiSurfaceMapsMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.multisurfacemasker method)": [[382, "nilearn.maskers.MultiSurfaceMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.niftilabelsmasker method)": [[383, "nilearn.maskers.NiftiLabelsMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.niftimapsmasker method)": [[384, "nilearn.maskers.NiftiMapsMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.niftimasker method)": [[385, "nilearn.maskers.NiftiMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.niftispheresmasker method)": [[386, "nilearn.maskers.NiftiSpheresMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.surfacelabelsmasker method)": [[387, "nilearn.maskers.SurfaceLabelsMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.surfacemapsmasker method)": [[388, "nilearn.maskers.SurfaceMapsMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.surfacemasker method)": [[389, "nilearn.maskers.SurfaceMasker.set_transform_request", false]], "set_transform_request() (nilearn.regions.parcellations method)": [[463, "nilearn.regions.Parcellations.set_transform_request", false]], "set_transform_request() (nilearn.regions.regionextractor method)": [[465, "nilearn.regions.RegionExtractor.set_transform_request", false]], "shape (nilearn.surface.polydata property)": [[481, "nilearn.surface.PolyData.shape", false]], "shape (nilearn.surface.surfaceimage property)": [[483, "nilearn.surface.SurfaceImage.shape", false]], "show() (in module nilearn.plotting)": [[456, "nilearn.plotting.show", false]], "show() (nilearn.plotting.displays.plotlysurfacefigure method)": [[413, "nilearn.plotting.displays.PlotlySurfaceFigure.show", false]], "signals_to_img_labels() (in module nilearn.regions)": [[471, "nilearn.regions.signals_to_img_labels", false]], "signals_to_img_maps() (in module nilearn.regions)": [[472, "nilearn.regions.signals_to_img_maps", false]], "simpleregressionresults (class in nilearn.glm)": [[325, "nilearn.glm.SimpleRegressionResults", false]], "smooth_img() (in module nilearn.image)": [[368, "nilearn.image.smooth_img", false]], "snr": [[185, "term-SNR", true]], "spacenet": [[185, "term-SpaceNet", true]], "spacenetclassifier (class in nilearn.decoding)": [[310, "nilearn.decoding.SpaceNetClassifier", false]], "spacenetregressor (class in nilearn.decoding)": [[311, "nilearn.decoding.SpaceNetRegressor", false]], "spm": [[185, "term-SPM", true]], "spm_dispersion_derivative() (in module nilearn.glm.first_level)": [[342, "nilearn.glm.first_level.spm_dispersion_derivative", false]], "spm_hrf() (in module nilearn.glm.first_level)": [[343, "nilearn.glm.first_level.spm_hrf", false]], "spm_time_derivative() (in module nilearn.glm.first_level)": [[344, "nilearn.glm.first_level.spm_time_derivative", false]], "sse (nilearn.glm.regressionresults property)": [[324, "nilearn.glm.RegressionResults.SSE", false]], "stat() (nilearn.glm.contrast method)": [[320, "nilearn.glm.Contrast.stat", false]], "supervised learning": [[185, "term-supervised-learning", true]], "supported_losses (nilearn.decoding.spacenetclassifier attribute)": [[310, "nilearn.decoding.SpaceNetClassifier.SUPPORTED_LOSSES", false]], "supported_penalties (nilearn.decoding.spacenetclassifier attribute)": [[310, "nilearn.decoding.SpaceNetClassifier.SUPPORTED_PENALTIES", false]], "supported_penalties (nilearn.decoding.spacenetregressor attribute)": [[311, "nilearn.decoding.SpaceNetRegressor.SUPPORTED_PENALTIES", false]], "surfaceimage (class in nilearn.surface)": [[483, "nilearn.surface.SurfaceImage", false]], "surfacelabelsmasker (class in nilearn.maskers)": [[387, "nilearn.maskers.SurfaceLabelsMasker", false]], "surfacemapsmasker (class in nilearn.maskers)": [[388, "nilearn.maskers.SurfaceMapsMasker", false]], "surfacemasker (class in nilearn.maskers)": [[389, "nilearn.maskers.SurfaceMasker", false]], "surfacemesh (class in nilearn.surface)": [[484, "nilearn.surface.SurfaceMesh", false]], "svm": [[185, "term-SVM", true]], "swap_img_hemispheres() (in module nilearn.image)": [[369, "nilearn.image.swap_img_hemispheres", false]], "sym_matrix_to_vec() (in module nilearn.connectome)": [[246, "nilearn.connectome.sym_matrix_to_vec", false]], "t() (nilearn.glm.likelihoodmodelresults method)": [[322, "nilearn.glm.LikelihoodModelResults.t", false]], "t() (nilearn.glm.regressionresults method)": [[324, "nilearn.glm.RegressionResults.t", false]], "t() (nilearn.glm.simpleregressionresults method)": [[325, "nilearn.glm.SimpleRegressionResults.t", false]], "tcontrast() (nilearn.glm.likelihoodmodelresults method)": [[322, "nilearn.glm.LikelihoodModelResults.Tcontrast", false]], "tcontrast() (nilearn.glm.regressionresults method)": [[324, "nilearn.glm.RegressionResults.Tcontrast", false]], "tcontrast() (nilearn.glm.simpleregressionresults method)": [[325, "nilearn.glm.SimpleRegressionResults.Tcontrast", false]], "tcontrastresults (class in nilearn.glm)": [[326, "nilearn.glm.TContrastResults", false]], "tfce": [[185, "term-TFCE", true]], "threshold_img() (in module nilearn.image)": [[370, "nilearn.image.threshold_img", false]], "threshold_stats_img() (in module nilearn.glm)": [[349, "nilearn.glm.threshold_stats_img", false]], "tiledslicer (class in nilearn.plotting.displays)": [[415, "nilearn.plotting.displays.TiledSlicer", false]], "title() (nilearn.plotting.displays.baseslicer method)": [[401, "nilearn.plotting.displays.BaseSlicer.title", false]], "title() (nilearn.plotting.displays.lprojector method)": [[404, "nilearn.plotting.displays.LProjector.title", false]], "title() (nilearn.plotting.displays.lrprojector method)": [[405, "nilearn.plotting.displays.LRProjector.title", false]], "title() (nilearn.plotting.displays.lyrprojector method)": [[406, "nilearn.plotting.displays.LYRProjector.title", false]], "title() (nilearn.plotting.displays.lyrzprojector method)": [[407, "nilearn.plotting.displays.LYRZProjector.title", false]], "title() (nilearn.plotting.displays.lzrprojector method)": [[408, "nilearn.plotting.displays.LZRProjector.title", false]], "title() (nilearn.plotting.displays.lzryprojector method)": [[409, "nilearn.plotting.displays.LZRYProjector.title", false]], "title() (nilearn.plotting.displays.mosaicslicer method)": [[410, "nilearn.plotting.displays.MosaicSlicer.title", false]], "title() (nilearn.plotting.displays.orthoprojector method)": [[411, "nilearn.plotting.displays.OrthoProjector.title", false]], "title() (nilearn.plotting.displays.orthoslicer method)": [[412, "nilearn.plotting.displays.OrthoSlicer.title", false]], "title() (nilearn.plotting.displays.rprojector method)": [[414, "nilearn.plotting.displays.RProjector.title", false]], "title() (nilearn.plotting.displays.tiledslicer method)": [[415, "nilearn.plotting.displays.TiledSlicer.title", false]], "title() (nilearn.plotting.displays.xprojector method)": [[416, "nilearn.plotting.displays.XProjector.title", false]], "title() (nilearn.plotting.displays.xslicer method)": [[417, "nilearn.plotting.displays.XSlicer.title", false]], "title() (nilearn.plotting.displays.xzprojector method)": [[418, "nilearn.plotting.displays.XZProjector.title", false]], "title() (nilearn.plotting.displays.xzslicer method)": [[419, "nilearn.plotting.displays.XZSlicer.title", false]], "title() (nilearn.plotting.displays.yprojector method)": [[420, "nilearn.plotting.displays.YProjector.title", false]], "title() (nilearn.plotting.displays.yslicer method)": [[421, "nilearn.plotting.displays.YSlicer.title", false]], "title() (nilearn.plotting.displays.yxprojector method)": [[422, "nilearn.plotting.displays.YXProjector.title", false]], "title() (nilearn.plotting.displays.yxslicer method)": [[423, "nilearn.plotting.displays.YXSlicer.title", false]], "title() (nilearn.plotting.displays.yzprojector method)": [[424, "nilearn.plotting.displays.YZProjector.title", false]], "title() (nilearn.plotting.displays.yzslicer method)": [[425, "nilearn.plotting.displays.YZSlicer.title", false]], "title() (nilearn.plotting.displays.zprojector method)": [[426, "nilearn.plotting.displays.ZProjector.title", false]], "title() (nilearn.plotting.displays.zslicer method)": [[427, "nilearn.plotting.displays.ZSlicer.title", false]], "to_filename() (nilearn.surface.polydata method)": [[481, "nilearn.surface.PolyData.to_filename", false]], "to_filename() (nilearn.surface.polymesh method)": [[482, "nilearn.surface.PolyMesh.to_filename", false]], "to_gifti() (nilearn.surface.filemesh method)": [[479, "nilearn.surface.FileMesh.to_gifti", false]], "to_gifti() (nilearn.surface.inmemorymesh method)": [[480, "nilearn.surface.InMemoryMesh.to_gifti", false]], "to_gifti() (nilearn.surface.surfacemesh method)": [[484, "nilearn.surface.SurfaceMesh.to_gifti", false]], "tr": [[185, "term-TR", true]], "transform() (nilearn.connectome.connectivitymeasure method)": [[240, "nilearn.connectome.ConnectivityMeasure.transform", false]], "transform() (nilearn.decoding.searchlight method)": [[309, "nilearn.decoding.SearchLight.transform", false]], "transform() (nilearn.decomposition.canica method)": [[312, "nilearn.decomposition.CanICA.transform", false]], "transform() (nilearn.decomposition.dictlearning method)": [[313, "nilearn.decomposition.DictLearning.transform", false]], "transform() (nilearn.maskers.basemasker method)": [[376, "nilearn.maskers.BaseMasker.transform", false]], "transform() (nilearn.maskers.multiniftilabelsmasker method)": [[377, "nilearn.maskers.MultiNiftiLabelsMasker.transform", false]], "transform() (nilearn.maskers.multiniftimapsmasker method)": [[378, "nilearn.maskers.MultiNiftiMapsMasker.transform", false]], "transform() (nilearn.maskers.multiniftimasker method)": [[379, "nilearn.maskers.MultiNiftiMasker.transform", false]], "transform() (nilearn.maskers.multisurfacelabelsmasker method)": [[380, "nilearn.maskers.MultiSurfaceLabelsMasker.transform", false]], "transform() (nilearn.maskers.multisurfacemapsmasker method)": [[381, "nilearn.maskers.MultiSurfaceMapsMasker.transform", false]], "transform() (nilearn.maskers.multisurfacemasker method)": [[382, "nilearn.maskers.MultiSurfaceMasker.transform", false]], "transform() (nilearn.maskers.niftilabelsmasker method)": [[383, "nilearn.maskers.NiftiLabelsMasker.transform", false]], "transform() (nilearn.maskers.niftimapsmasker method)": [[384, "nilearn.maskers.NiftiMapsMasker.transform", false]], "transform() (nilearn.maskers.niftimasker method)": [[385, "nilearn.maskers.NiftiMasker.transform", false]], "transform() (nilearn.maskers.niftispheresmasker method)": [[386, "nilearn.maskers.NiftiSpheresMasker.transform", false]], "transform() (nilearn.maskers.surfacelabelsmasker method)": [[387, "nilearn.maskers.SurfaceLabelsMasker.transform", false]], "transform() (nilearn.maskers.surfacemapsmasker method)": [[388, "nilearn.maskers.SurfaceMapsMasker.transform", false]], "transform() (nilearn.maskers.surfacemasker method)": [[389, "nilearn.maskers.SurfaceMasker.transform", false]], "transform() (nilearn.regions.hierarchicalkmeans method)": [[462, "nilearn.regions.HierarchicalKMeans.transform", false]], "transform() (nilearn.regions.parcellations method)": [[463, "nilearn.regions.Parcellations.transform", false]], "transform() (nilearn.regions.regionextractor method)": [[465, "nilearn.regions.RegionExtractor.transform", false]], "transform() (nilearn.regions.rena method)": [[464, "nilearn.regions.ReNA.transform", false]], "transform_imgs() (nilearn.maskers.multiniftilabelsmasker method)": [[377, "nilearn.maskers.MultiNiftiLabelsMasker.transform_imgs", false]], "transform_imgs() (nilearn.maskers.multiniftimapsmasker method)": [[378, "nilearn.maskers.MultiNiftiMapsMasker.transform_imgs", false]], "transform_imgs() (nilearn.maskers.multiniftimasker method)": [[379, "nilearn.maskers.MultiNiftiMasker.transform_imgs", false]], "transform_imgs() (nilearn.maskers.multisurfacelabelsmasker method)": [[380, "nilearn.maskers.MultiSurfaceLabelsMasker.transform_imgs", false]], "transform_imgs() (nilearn.maskers.multisurfacemapsmasker method)": [[381, "nilearn.maskers.MultiSurfaceMapsMasker.transform_imgs", false]], "transform_imgs() (nilearn.maskers.multisurfacemasker method)": [[382, "nilearn.maskers.MultiSurfaceMasker.transform_imgs", false]], "transform_single_imgs() (nilearn.maskers.basemasker method)": [[376, "nilearn.maskers.BaseMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.multiniftilabelsmasker method)": [[377, "nilearn.maskers.MultiNiftiLabelsMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.multiniftimapsmasker method)": [[378, "nilearn.maskers.MultiNiftiMapsMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.multiniftimasker method)": [[379, "nilearn.maskers.MultiNiftiMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.multisurfacelabelsmasker method)": [[380, "nilearn.maskers.MultiSurfaceLabelsMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.multisurfacemapsmasker method)": [[381, "nilearn.maskers.MultiSurfaceMapsMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.multisurfacemasker method)": [[382, "nilearn.maskers.MultiSurfaceMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.niftilabelsmasker method)": [[383, "nilearn.maskers.NiftiLabelsMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.niftimapsmasker method)": [[384, "nilearn.maskers.NiftiMapsMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.niftimasker method)": [[385, "nilearn.maskers.NiftiMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.niftispheresmasker method)": [[386, "nilearn.maskers.NiftiSpheresMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.surfacelabelsmasker method)": [[387, "nilearn.maskers.SurfaceLabelsMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.surfacemapsmasker method)": [[388, "nilearn.maskers.SurfaceMapsMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.surfacemasker method)": [[389, "nilearn.maskers.SurfaceMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.regions.regionextractor method)": [[465, "nilearn.regions.RegionExtractor.transform_single_imgs", false]], "transform_to_2d() (nilearn.plotting.displays.baseaxes method)": [[400, "nilearn.plotting.displays.BaseAxes.transform_to_2d", false]], "transform_to_2d() (nilearn.plotting.displays.cutaxes method)": [[402, "nilearn.plotting.displays.CutAxes.transform_to_2d", false]], "transform_to_2d() (nilearn.plotting.displays.glassbrainaxes method)": [[403, "nilearn.plotting.displays.GlassBrainAxes.transform_to_2d", false]], "unmask() (in module nilearn.masking)": [[398, "nilearn.masking.unmask", false]], "unsupervised learning": [[185, "term-Unsupervised-learning", true]], "valid_methods (nilearn.regions.parcellations attribute)": [[463, "nilearn.regions.Parcellations.VALID_METHODS", false]], "vbm": [[185, "term-VBM", true]], "vcov() (nilearn.glm.likelihoodmodelresults method)": [[322, "nilearn.glm.LikelihoodModelResults.vcov", false]], "vcov() (nilearn.glm.regressionresults method)": [[324, "nilearn.glm.RegressionResults.vcov", false]], "vcov() (nilearn.glm.simpleregressionresults method)": [[325, "nilearn.glm.SimpleRegressionResults.vcov", false]], "vec_to_sym_matrix() (in module nilearn.connectome)": [[247, "nilearn.connectome.vec_to_sym_matrix", false]], "vertex": [[185, "term-vertex", true]], "view_connectome() (in module nilearn.plotting)": [[457, "nilearn.plotting.view_connectome", false]], "view_img() (in module nilearn.plotting)": [[458, "nilearn.plotting.view_img", false]], "view_img_on_surf() (in module nilearn.plotting)": [[459, "nilearn.plotting.view_img_on_surf", false]], "view_markers() (in module nilearn.plotting)": [[460, "nilearn.plotting.view_markers", false]], "view_surf() (in module nilearn.plotting)": [[461, "nilearn.plotting.view_surf", false]], "vol_to_surf() (in module nilearn.surface)": [[487, "nilearn.surface.vol_to_surf", false]], "voxel": [[185, "term-voxel", true]], "ward clustering": [[185, "term-Ward-clustering", true]], "whiten() (nilearn.glm.armodel method)": [[319, "nilearn.glm.ARModel.whiten", false]], "whiten() (nilearn.glm.olsmodel method)": [[323, "nilearn.glm.OLSModel.whiten", false]], "width (nilearn.reporting.htmlreport property)": [[473, "nilearn.reporting.HTMLReport.width", false]], "with_traceback() (nilearn.exceptions.allvolumesremovederror method)": [[314, "nilearn.exceptions.AllVolumesRemovedError.with_traceback", false]], "with_traceback() (nilearn.exceptions.dimensionerror method)": [[315, "nilearn.exceptions.DimensionError.with_traceback", false]], "with_traceback() (nilearn.exceptions.maskwarning method)": [[316, "nilearn.exceptions.MaskWarning.with_traceback", false]], "with_traceback() (nilearn.exceptions.meshdimensionerror method)": [[317, "nilearn.exceptions.MeshDimensionError.with_traceback", false]], "with_traceback() (nilearn.exceptions.notimplementedwarning method)": [[318, "nilearn.exceptions.NotImplementedWarning.with_traceback", false]], "xprojector (class in nilearn.plotting.displays)": [[416, "nilearn.plotting.displays.XProjector", false]], "xslicer (class in nilearn.plotting.displays)": [[417, "nilearn.plotting.displays.XSlicer", false]], "xzprojector (class in nilearn.plotting.displays)": [[418, "nilearn.plotting.displays.XZProjector", false]], "xzslicer (class in nilearn.plotting.displays)": [[419, "nilearn.plotting.displays.XZSlicer", false]], "yprojector (class in nilearn.plotting.displays)": [[420, "nilearn.plotting.displays.YProjector", false]], "yslicer (class in nilearn.plotting.displays)": [[421, "nilearn.plotting.displays.YSlicer", false]], "yxprojector (class in nilearn.plotting.displays)": [[422, "nilearn.plotting.displays.YXProjector", false]], "yxslicer (class in nilearn.plotting.displays)": [[423, "nilearn.plotting.displays.YXSlicer", false]], "yzprojector (class in nilearn.plotting.displays)": [[424, "nilearn.plotting.displays.YZProjector", false]], "yzslicer (class in nilearn.plotting.displays)": [[425, "nilearn.plotting.displays.YZSlicer", false]], "z_score() (nilearn.glm.contrast method)": [[320, "nilearn.glm.Contrast.z_score", false]], "zprojector (class in nilearn.plotting.displays)": [[426, "nilearn.plotting.displays.ZProjector", false]], "zslicer (class in nilearn.plotting.displays)": [[427, "nilearn.plotting.displays.ZSlicer", false]]}, "objects": {"nilearn": [[193, 0, 0, "-", "connectome"], [194, 0, 0, "-", "datasets"], [195, 0, 0, "-", "decoding"], [196, 0, 0, "-", "decomposition"], [239, 0, 0, "-", "exceptions"], [493, 0, 0, "-", "glm"], [494, 0, 0, "-", "image"], [496, 0, 0, "-", "interfaces"], [497, 0, 0, "-", "maskers"], [498, 0, 0, "-", "masking"], [499, 0, 0, "-", "mass_univariate"], [500, 0, 0, "-", "plotting"], [502, 0, 0, "-", "regions"], [503, 0, 0, "-", "reporting"], [504, 0, 0, "-", "signal"], [505, 0, 0, "-", "surface"], [506, 0, 0, "-", "utils"]], "nilearn.connectome": [[240, 1, 1, "", "ConnectivityMeasure"], [241, 1, 1, "", "GroupSparseCovariance"], [242, 1, 1, "", "GroupSparseCovarianceCV"], [243, 3, 1, "", "cov_to_corr"], [244, 3, 1, "", "group_sparse_covariance"], [245, 3, 1, "", "prec_to_partial"], [246, 3, 1, "", "sym_matrix_to_vec"], [247, 3, 1, "", "vec_to_sym_matrix"]], "nilearn.connectome.ConnectivityMeasure": [[240, 2, 1, "", "__init__"], [240, 2, 1, "", "fit"], [240, 2, 1, "", "fit_transform"], [240, 2, 1, "", "get_metadata_routing"], [240, 2, 1, "", "get_params"], [240, 2, 1, "", "inverse_transform"], [240, 2, 1, "", "set_inverse_transform_request"], [240, 2, 1, "", "set_output"], [240, 2, 1, "", "set_params"], [240, 2, 1, "", "set_transform_request"], [240, 2, 1, "", "transform"]], "nilearn.connectome.GroupSparseCovariance": [[241, 2, 1, "", "__init__"], [241, 2, 1, "", "fit"], [241, 2, 1, "", "get_metadata_routing"], [241, 2, 1, "", "get_params"], [241, 2, 1, "", "set_fit_request"], [241, 2, 1, "", "set_params"]], "nilearn.connectome.GroupSparseCovarianceCV": [[242, 2, 1, "", "__init__"], [242, 2, 1, "", "fit"], [242, 2, 1, "", "get_metadata_routing"], [242, 2, 1, "", "get_params"], [242, 2, 1, "", "set_fit_request"], [242, 2, 1, "", "set_params"]], "nilearn.datasets": [[248, 3, 1, "", "fetch_abide_pcp"], [249, 3, 1, "", "fetch_adhd"], [250, 3, 1, "", "fetch_atlas_aal"], [251, 3, 1, "", "fetch_atlas_allen_2011"], [252, 3, 1, "", "fetch_atlas_basc_multiscale_2015"], [253, 3, 1, "", "fetch_atlas_craddock_2012"], [254, 3, 1, "", "fetch_atlas_destrieux_2009"], [255, 3, 1, "", "fetch_atlas_difumo"], [256, 3, 1, "", "fetch_atlas_harvard_oxford"], [257, 3, 1, "", "fetch_atlas_juelich"], [258, 3, 1, "", "fetch_atlas_msdl"], [259, 3, 1, "", "fetch_atlas_pauli_2017"], [260, 3, 1, "", "fetch_atlas_schaefer_2018"], [261, 3, 1, "", "fetch_atlas_smith_2009"], [262, 3, 1, "", "fetch_atlas_surf_destrieux"], [263, 3, 1, "", "fetch_atlas_talairach"], [264, 3, 1, "", "fetch_atlas_yeo_2011"], [265, 3, 1, "", "fetch_coords_dosenbach_2010"], [266, 3, 1, "", "fetch_coords_power_2011"], [267, 3, 1, "", "fetch_coords_seitzman_2018"], [268, 3, 1, "", "fetch_development_fmri"], [269, 3, 1, "", "fetch_ds000030_urls"], [270, 3, 1, "", "fetch_fiac_first_level"], [271, 3, 1, "", "fetch_haxby"], [272, 3, 1, "", "fetch_icbm152_2009"], [273, 3, 1, "", "fetch_icbm152_brain_gm_mask"], [274, 3, 1, "", "fetch_language_localizer_demo_dataset"], [275, 3, 1, "", "fetch_localizer_button_task"], [276, 3, 1, "", "fetch_localizer_calculation_task"], [277, 3, 1, "", "fetch_localizer_contrasts"], [278, 3, 1, "", "fetch_localizer_first_level"], [279, 3, 1, "", "fetch_megatrawls_netmats"], [280, 3, 1, "", "fetch_mixed_gambles"], [281, 3, 1, "", "fetch_miyawaki2008"], [282, 3, 1, "", "fetch_neurovault"], [283, 3, 1, "", "fetch_neurovault_auditory_computation_task"], [284, 3, 1, "", "fetch_neurovault_ids"], [285, 3, 1, "", "fetch_neurovault_motor_task"], [286, 3, 1, "", "fetch_oasis_vbm"], [287, 3, 1, "", "fetch_openneuro_dataset"], [288, 3, 1, "", "fetch_spm_auditory"], [289, 3, 1, "", "fetch_spm_multimodal_fmri"], [290, 3, 1, "", "fetch_surf_fsaverage"], [291, 3, 1, "", "fetch_surf_nki_enhanced"], [292, 3, 1, "", "get_data_dirs"], [293, 3, 1, "", "load_fsaverage"], [294, 3, 1, "", "load_fsaverage_data"], [295, 3, 1, "", "load_mni152_brain_mask"], [296, 3, 1, "", "load_mni152_gm_mask"], [297, 3, 1, "", "load_mni152_gm_template"], [298, 3, 1, "", "load_mni152_template"], [299, 3, 1, "", "load_mni152_wm_mask"], [300, 3, 1, "", "load_mni152_wm_template"], [301, 3, 1, "", "load_nki"], [302, 3, 1, "", "load_sample_motor_activation_image"], [303, 3, 1, "", "patch_openneuro_dataset"], [304, 3, 1, "", "select_from_index"]], "nilearn.decoding": [[305, 1, 1, "", "Decoder"], [306, 1, 1, "", "DecoderRegressor"], [307, 1, 1, "", "FREMClassifier"], [308, 1, 1, "", "FREMRegressor"], [309, 1, 1, "", "SearchLight"], [310, 1, 1, "", "SpaceNetClassifier"], [311, 1, 1, "", "SpaceNetRegressor"]], "nilearn.decoding.Decoder": [[305, 2, 1, "", "__init__"], [305, 2, 1, "", "decision_function"], [305, 2, 1, "", "fit"], [305, 2, 1, "", "get_metadata_routing"], [305, 2, 1, "", "get_params"], [305, 2, 1, "", "predict"], [305, 2, 1, "", "score"], [305, 2, 1, "", "set_fit_request"], [305, 2, 1, "", "set_params"]], "nilearn.decoding.DecoderRegressor": [[306, 2, 1, "", "__init__"], [306, 2, 1, "", "fit"], [306, 2, 1, "", "get_metadata_routing"], [306, 2, 1, "", "get_params"], [306, 2, 1, "", "predict"], [306, 2, 1, "", "score"], [306, 2, 1, "", "set_fit_request"], [306, 2, 1, "", "set_params"]], "nilearn.decoding.FREMClassifier": [[307, 2, 1, "", "__init__"], [307, 2, 1, "", "decision_function"], [307, 2, 1, "", "fit"], [307, 2, 1, "", "get_metadata_routing"], [307, 2, 1, "", "get_params"], [307, 2, 1, "", "predict"], [307, 2, 1, "", "score"], [307, 2, 1, "", "set_fit_request"], [307, 2, 1, "", "set_params"]], "nilearn.decoding.FREMRegressor": [[308, 2, 1, "", "__init__"], [308, 2, 1, "", "fit"], [308, 2, 1, "", "get_metadata_routing"], [308, 2, 1, "", "get_params"], [308, 2, 1, "", "predict"], [308, 2, 1, "", "score"], [308, 2, 1, "", "set_fit_request"], [308, 2, 1, "", "set_params"]], "nilearn.decoding.SearchLight": [[309, 2, 1, "", "__init__"], [309, 2, 1, "", "fit"], [309, 2, 1, "", "fit_transform"], [309, 2, 1, "", "get_metadata_routing"], [309, 2, 1, "", "get_params"], [309, 4, 1, "", "scores_img_"], [309, 2, 1, "", "set_fit_request"], [309, 2, 1, "", "set_output"], [309, 2, 1, "", "set_params"], [309, 2, 1, "", "set_transform_request"], [309, 2, 1, "", "transform"]], "nilearn.decoding.SpaceNetClassifier": [[310, 5, 1, "", "SUPPORTED_LOSSES"], [310, 5, 1, "", "SUPPORTED_PENALTIES"], [310, 2, 1, "", "__init__"], [310, 2, 1, "", "decision_function"], [310, 2, 1, "", "fit"], [310, 2, 1, "", "get_metadata_routing"], [310, 2, 1, "", "get_params"], [310, 2, 1, "", "predict"], [310, 2, 1, "", "score"], [310, 2, 1, "", "set_fit_request"], [310, 2, 1, "", "set_params"], [310, 2, 1, "", "set_score_request"]], "nilearn.decoding.SpaceNetRegressor": [[311, 5, 1, "", "SUPPORTED_PENALTIES"], [311, 2, 1, "", "__init__"], [311, 2, 1, "", "fit"], [311, 2, 1, "", "get_metadata_routing"], [311, 2, 1, "", "get_params"], [311, 2, 1, "", "predict"], [311, 2, 1, "", "score"], [311, 2, 1, "", "set_fit_request"], [311, 2, 1, "", "set_params"], [311, 2, 1, "", "set_score_request"]], "nilearn.decomposition": [[312, 1, 1, "", "CanICA"], [313, 1, 1, "", "DictLearning"]], "nilearn.decomposition.CanICA": [[312, 2, 1, "", "__init__"], [312, 2, 1, "", "fit"], [312, 2, 1, "", "fit_transform"], [312, 2, 1, "", "get_metadata_routing"], [312, 2, 1, "", "get_params"], [312, 2, 1, "", "inverse_transform"], [312, 2, 1, "", "score"], [312, 2, 1, "", "set_fit_request"], [312, 2, 1, "", "set_inverse_transform_request"], [312, 2, 1, "", "set_output"], [312, 2, 1, "", "set_params"], [312, 2, 1, "", "set_score_request"], [312, 2, 1, "", "set_transform_request"], [312, 2, 1, "", "transform"]], "nilearn.decomposition.DictLearning": [[313, 2, 1, "", "__init__"], [313, 2, 1, "", "fit"], [313, 2, 1, "", "fit_transform"], [313, 2, 1, "", "get_metadata_routing"], [313, 2, 1, "", "get_params"], [313, 2, 1, "", "inverse_transform"], [313, 2, 1, "", "score"], [313, 2, 1, "", "set_fit_request"], [313, 2, 1, "", "set_inverse_transform_request"], [313, 2, 1, "", "set_output"], [313, 2, 1, "", "set_params"], [313, 2, 1, "", "set_score_request"], [313, 2, 1, "", "set_transform_request"], [313, 2, 1, "", "transform"]], "nilearn.exceptions": [[314, 1, 1, "", "AllVolumesRemovedError"], [315, 1, 1, "", "DimensionError"], [316, 1, 1, "", "MaskWarning"], [317, 1, 1, "", "MeshDimensionError"], [318, 1, 1, "", "NotImplementedWarning"]], "nilearn.exceptions.AllVolumesRemovedError": [[314, 2, 1, "", "__init__"], [314, 5, 1, "", "args"], [314, 2, 1, "", "with_traceback"]], "nilearn.exceptions.DimensionError": [[315, 2, 1, "", "__init__"], [315, 5, 1, "", "args"], [315, 2, 1, "", "increment_stack_counter"], [315, 4, 1, "", "message"], [315, 2, 1, "", "with_traceback"]], "nilearn.exceptions.MaskWarning": [[316, 2, 1, "", "__init__"], [316, 5, 1, "", "args"], [316, 2, 1, "", "with_traceback"]], "nilearn.exceptions.MeshDimensionError": [[317, 2, 1, "", "__init__"], [317, 5, 1, "", "args"], [317, 2, 1, "", "with_traceback"]], "nilearn.exceptions.NotImplementedWarning": [[318, 2, 1, "", "__init__"], [318, 5, 1, "", "args"], [318, 2, 1, "", "with_traceback"]], "nilearn.glm": [[319, 1, 1, "", "ARModel"], [320, 1, 1, "", "Contrast"], [321, 1, 1, "", "FContrastResults"], [322, 1, 1, "", "LikelihoodModelResults"], [323, 1, 1, "", "OLSModel"], [324, 1, 1, "", "RegressionResults"], [325, 1, 1, "", "SimpleRegressionResults"], [326, 1, 1, "", "TContrastResults"], [327, 3, 1, "", "cluster_level_inference"], [328, 3, 1, "", "compute_contrast"], [329, 3, 1, "", "compute_fixed_effects"], [330, 3, 1, "", "expression_to_contrast_vector"], [331, 3, 1, "", "fdr_threshold"], [493, 0, 0, "-", "first_level"], [345, 3, 1, "", "save_glm_to_bids"], [493, 0, 0, "-", "second_level"], [349, 3, 1, "", "threshold_stats_img"]], "nilearn.glm.ARModel": [[319, 2, 1, "", "__init__"], [319, 2, 1, "", "fit"], [319, 2, 1, "", "initialize"], [319, 2, 1, "", "logL"], [319, 2, 1, "", "whiten"]], "nilearn.glm.Contrast": [[320, 2, 1, "", "__init__"], [320, 2, 1, "", "effect_size"], [320, 2, 1, "", "effect_variance"], [320, 2, 1, "", "one_minus_pvalue"], [320, 2, 1, "", "p_value"], [320, 2, 1, "", "stat"], [320, 2, 1, "", "z_score"]], "nilearn.glm.FContrastResults": [[321, 2, 1, "", "__init__"]], "nilearn.glm.LikelihoodModelResults": [[322, 2, 1, "", "Fcontrast"], [322, 2, 1, "", "Tcontrast"], [322, 2, 1, "", "__init__"], [322, 2, 1, "", "conf_int"], [322, 4, 1, "", "logL"], [322, 2, 1, "", "t"], [322, 2, 1, "", "vcov"]], "nilearn.glm.OLSModel": [[323, 2, 1, "", "__init__"], [323, 2, 1, "", "fit"], [323, 2, 1, "", "initialize"], [323, 2, 1, "", "logL"], [323, 2, 1, "", "whiten"]], "nilearn.glm.RegressionResults": [[324, 2, 1, "", "Fcontrast"], [324, 4, 1, "", "MSE"], [324, 4, 1, "", "SSE"], [324, 2, 1, "", "Tcontrast"], [324, 2, 1, "", "__init__"], [324, 2, 1, "", "conf_int"], [324, 4, 1, "", "logL"], [324, 4, 1, "", "normalized_residuals"], [324, 4, 1, "", "predicted"], [324, 4, 1, "", "r_square"], [324, 4, 1, "", "residuals"], [324, 2, 1, "", "t"], [324, 2, 1, "", "vcov"]], "nilearn.glm.SimpleRegressionResults": [[325, 2, 1, "", "Fcontrast"], [325, 2, 1, "", "Tcontrast"], [325, 2, 1, "", "__init__"], [325, 2, 1, "", "conf_int"], [325, 2, 1, "", "logL"], [325, 2, 1, "", "normalized_residuals"], [325, 2, 1, "", "predicted"], [325, 2, 1, "", "residuals"], [325, 2, 1, "", "t"], [325, 2, 1, "", "vcov"]], "nilearn.glm.TContrastResults": [[326, 2, 1, "", "__init__"]], "nilearn.glm.first_level": [[332, 1, 1, "", "FirstLevelModel"], [333, 3, 1, "", "check_design_matrix"], [334, 3, 1, "", "compute_regressor"], [335, 3, 1, "", "first_level_from_bids"], [336, 3, 1, "", "glover_dispersion_derivative"], [337, 3, 1, "", "glover_hrf"], [338, 3, 1, "", "glover_time_derivative"], [339, 3, 1, "", "make_first_level_design_matrix"], [340, 3, 1, "", "mean_scaling"], [341, 3, 1, "", "run_glm"], [342, 3, 1, "", "spm_dispersion_derivative"], [343, 3, 1, "", "spm_hrf"], [344, 3, 1, "", "spm_time_derivative"]], "nilearn.glm.first_level.FirstLevelModel": [[332, 2, 1, "", "__init__"], [332, 2, 1, "", "compute_contrast"], [332, 2, 1, "", "fit"], [332, 2, 1, "", "generate_report"], [332, 2, 1, "", "get_metadata_routing"], [332, 2, 1, "", "get_params"], [332, 4, 1, "", "predicted"], [332, 4, 1, "", "r_square"], [332, 4, 1, "", "residuals"], [332, 2, 1, "", "set_fit_request"], [332, 2, 1, "", "set_params"]], "nilearn.glm.second_level": [[346, 1, 1, "", "SecondLevelModel"], [347, 3, 1, "", "make_second_level_design_matrix"], [348, 3, 1, "", "non_parametric_inference"]], "nilearn.glm.second_level.SecondLevelModel": [[346, 2, 1, "", "__init__"], [346, 2, 1, "", "compute_contrast"], [346, 2, 1, "", "fit"], [346, 2, 1, "", "generate_report"], [346, 2, 1, "", "get_metadata_routing"], [346, 2, 1, "", "get_params"], [346, 4, 1, "", "predicted"], [346, 4, 1, "", "r_square"], [346, 4, 1, "", "residuals"], [346, 2, 1, "", "set_fit_request"], [346, 2, 1, "", "set_params"]], "nilearn.image": [[350, 3, 1, "", "binarize_img"], [351, 3, 1, "", "clean_img"], [352, 3, 1, "", "concat_imgs"], [353, 3, 1, "", "coord_transform"], [354, 3, 1, "", "copy_img"], [355, 3, 1, "", "crop_img"], [356, 3, 1, "", "get_data"], [357, 3, 1, "", "high_variance_confounds"], [358, 3, 1, "", "index_img"], [359, 3, 1, "", "iter_img"], [360, 3, 1, "", "largest_connected_component_img"], [361, 3, 1, "", "load_img"], [362, 3, 1, "", "math_img"], [363, 3, 1, "", "mean_img"], [364, 3, 1, "", "new_img_like"], [365, 3, 1, "", "reorder_img"], [366, 3, 1, "", "resample_img"], [367, 3, 1, "", "resample_to_img"], [368, 3, 1, "", "smooth_img"], [369, 3, 1, "", "swap_img_hemispheres"], [370, 3, 1, "", "threshold_img"]], "nilearn.interfaces": [[496, 0, 0, "-", "bids"], [496, 0, 0, "-", "fmriprep"], [496, 0, 0, "-", "fsl"]], "nilearn.interfaces.bids": [[371, 3, 1, "", "get_bids_files"], [372, 3, 1, "", "parse_bids_filename"]], "nilearn.interfaces.fmriprep": [[373, 3, 1, "", "load_confounds"], [374, 3, 1, "", "load_confounds_strategy"]], "nilearn.interfaces.fsl": [[375, 3, 1, "", "get_design_from_fslmat"]], "nilearn.maskers": [[376, 1, 1, "", "BaseMasker"], [377, 1, 1, "", "MultiNiftiLabelsMasker"], [378, 1, 1, "", "MultiNiftiMapsMasker"], [379, 1, 1, "", "MultiNiftiMasker"], [380, 1, 1, "", "MultiSurfaceLabelsMasker"], [381, 1, 1, "", "MultiSurfaceMapsMasker"], [382, 1, 1, "", "MultiSurfaceMasker"], [383, 1, 1, "", "NiftiLabelsMasker"], [384, 1, 1, "", "NiftiMapsMasker"], [385, 1, 1, "", "NiftiMasker"], [386, 1, 1, "", "NiftiSpheresMasker"], [387, 1, 1, "", "SurfaceLabelsMasker"], [388, 1, 1, "", "SurfaceMapsMasker"], [389, 1, 1, "", "SurfaceMasker"]], "nilearn.maskers.BaseMasker": [[376, 2, 1, "", "fit"], [376, 2, 1, "", "fit_transform"], [376, 2, 1, "", "get_metadata_routing"], [376, 2, 1, "", "get_params"], [376, 2, 1, "", "inverse_transform"], [376, 2, 1, "", "set_fit_request"], [376, 2, 1, "", "set_output"], [376, 2, 1, "", "set_params"], [376, 2, 1, "", "set_transform_request"], [376, 2, 1, "", "transform"], [376, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiLabelsMasker": [[377, 2, 1, "", "__init__"], [377, 5, 1, "", "background_label"], [377, 2, 1, "", "fit"], [377, 2, 1, "", "fit_transform"], [377, 2, 1, "", "generate_report"], [377, 2, 1, "", "get_feature_names_out"], [377, 2, 1, "", "get_metadata_routing"], [377, 2, 1, "", "get_params"], [377, 2, 1, "", "inverse_transform"], [377, 4, 1, "", "labels_"], [377, 5, 1, "", "lut_"], [377, 4, 1, "", "n_elements_"], [377, 4, 1, "", "region_ids_"], [377, 4, 1, "", "region_names_"], [377, 2, 1, "", "set_fit_request"], [377, 2, 1, "", "set_inverse_transform_request"], [377, 2, 1, "", "set_output"], [377, 2, 1, "", "set_params"], [377, 2, 1, "", "set_transform_request"], [377, 2, 1, "", "transform"], [377, 2, 1, "", "transform_imgs"], [377, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiMapsMasker": [[378, 2, 1, "", "__init__"], [378, 2, 1, "", "fit"], [378, 2, 1, "", "fit_transform"], [378, 2, 1, "", "generate_report"], [378, 2, 1, "", "get_feature_names_out"], [378, 2, 1, "", "get_metadata_routing"], [378, 2, 1, "", "get_params"], [378, 2, 1, "", "inverse_transform"], [378, 2, 1, "", "set_fit_request"], [378, 2, 1, "", "set_inverse_transform_request"], [378, 2, 1, "", "set_output"], [378, 2, 1, "", "set_params"], [378, 2, 1, "", "set_transform_request"], [378, 2, 1, "", "transform"], [378, 2, 1, "", "transform_imgs"], [378, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiMasker": [[379, 2, 1, "", "__init__"], [379, 2, 1, "", "fit"], [379, 2, 1, "", "fit_transform"], [379, 2, 1, "", "generate_report"], [379, 2, 1, "", "get_feature_names_out"], [379, 2, 1, "", "get_metadata_routing"], [379, 2, 1, "", "get_params"], [379, 2, 1, "", "inverse_transform"], [379, 2, 1, "", "set_fit_request"], [379, 2, 1, "", "set_output"], [379, 2, 1, "", "set_params"], [379, 2, 1, "", "set_transform_request"], [379, 2, 1, "", "transform"], [379, 2, 1, "", "transform_imgs"], [379, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiSurfaceLabelsMasker": [[380, 2, 1, "", "__init__"], [380, 5, 1, "", "background_label"], [380, 2, 1, "", "fit"], [380, 2, 1, "", "fit_transform"], [380, 2, 1, "", "generate_report"], [380, 2, 1, "", "get_feature_names_out"], [380, 2, 1, "", "get_metadata_routing"], [380, 2, 1, "", "get_params"], [380, 2, 1, "", "inverse_transform"], [380, 4, 1, "", "labels_"], [380, 5, 1, "", "lut_"], [380, 4, 1, "", "n_elements_"], [380, 4, 1, "", "region_ids_"], [380, 4, 1, "", "region_names_"], [380, 2, 1, "", "set_fit_request"], [380, 2, 1, "", "set_inverse_transform_request"], [380, 2, 1, "", "set_output"], [380, 2, 1, "", "set_params"], [380, 2, 1, "", "set_transform_request"], [380, 2, 1, "", "transform"], [380, 2, 1, "", "transform_imgs"], [380, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiSurfaceMapsMasker": [[381, 2, 1, "", "__init__"], [381, 2, 1, "", "fit"], [381, 2, 1, "", "fit_transform"], [381, 2, 1, "", "generate_report"], [381, 2, 1, "", "get_feature_names_out"], [381, 2, 1, "", "get_metadata_routing"], [381, 2, 1, "", "get_params"], [381, 2, 1, "", "inverse_transform"], [381, 2, 1, "", "set_fit_request"], [381, 2, 1, "", "set_inverse_transform_request"], [381, 2, 1, "", "set_output"], [381, 2, 1, "", "set_params"], [381, 2, 1, "", "set_transform_request"], [381, 2, 1, "", "transform"], [381, 2, 1, "", "transform_imgs"], [381, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiSurfaceMasker": [[382, 2, 1, "", "__init__"], [382, 2, 1, "", "fit"], [382, 2, 1, "", "fit_transform"], [382, 2, 1, "", "generate_report"], [382, 2, 1, "", "get_feature_names_out"], [382, 2, 1, "", "get_metadata_routing"], [382, 2, 1, "", "get_params"], [382, 2, 1, "", "inverse_transform"], [382, 2, 1, "", "set_fit_request"], [382, 2, 1, "", "set_inverse_transform_request"], [382, 2, 1, "", "set_output"], [382, 2, 1, "", "set_params"], [382, 2, 1, "", "set_transform_request"], [382, 2, 1, "", "transform"], [382, 2, 1, "", "transform_imgs"], [382, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiLabelsMasker": [[383, 2, 1, "", "__init__"], [383, 5, 1, "", "background_label"], [383, 2, 1, "", "fit"], [383, 2, 1, "", "fit_transform"], [383, 2, 1, "", "generate_report"], [383, 2, 1, "", "get_feature_names_out"], [383, 2, 1, "", "get_metadata_routing"], [383, 2, 1, "", "get_params"], [383, 2, 1, "", "inverse_transform"], [383, 4, 1, "", "labels_"], [383, 5, 1, "", "lut_"], [383, 4, 1, "", "n_elements_"], [383, 4, 1, "", "region_ids_"], [383, 4, 1, "", "region_names_"], [383, 2, 1, "", "set_fit_request"], [383, 2, 1, "", "set_inverse_transform_request"], [383, 2, 1, "", "set_output"], [383, 2, 1, "", "set_params"], [383, 2, 1, "", "set_transform_request"], [383, 2, 1, "", "transform"], [383, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiMapsMasker": [[384, 2, 1, "", "__init__"], [384, 2, 1, "", "fit"], [384, 2, 1, "", "fit_transform"], [384, 2, 1, "", "generate_report"], [384, 2, 1, "", "get_feature_names_out"], [384, 2, 1, "", "get_metadata_routing"], [384, 2, 1, "", "get_params"], [384, 2, 1, "", "inverse_transform"], [384, 2, 1, "", "set_fit_request"], [384, 2, 1, "", "set_inverse_transform_request"], [384, 2, 1, "", "set_output"], [384, 2, 1, "", "set_params"], [384, 2, 1, "", "set_transform_request"], [384, 2, 1, "", "transform"], [384, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiMasker": [[385, 2, 1, "", "__init__"], [385, 2, 1, "", "fit"], [385, 2, 1, "", "fit_transform"], [385, 2, 1, "", "generate_report"], [385, 2, 1, "", "get_feature_names_out"], [385, 2, 1, "", "get_metadata_routing"], [385, 2, 1, "", "get_params"], [385, 2, 1, "", "inverse_transform"], [385, 2, 1, "", "set_fit_request"], [385, 2, 1, "", "set_output"], [385, 2, 1, "", "set_params"], [385, 2, 1, "", "set_transform_request"], [385, 2, 1, "", "transform"], [385, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiSpheresMasker": [[386, 2, 1, "", "__init__"], [386, 2, 1, "", "fit"], [386, 2, 1, "", "fit_transform"], [386, 2, 1, "", "generate_report"], [386, 2, 1, "", "get_feature_names_out"], [386, 2, 1, "", "get_metadata_routing"], [386, 2, 1, "", "get_params"], [386, 2, 1, "", "inverse_transform"], [386, 2, 1, "", "set_fit_request"], [386, 2, 1, "", "set_inverse_transform_request"], [386, 2, 1, "", "set_output"], [386, 2, 1, "", "set_params"], [386, 2, 1, "", "set_transform_request"], [386, 2, 1, "", "transform"], [386, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.SurfaceLabelsMasker": [[387, 2, 1, "", "__init__"], [387, 5, 1, "", "background_label"], [387, 2, 1, "", "fit"], [387, 2, 1, "", "fit_transform"], [387, 2, 1, "", "generate_report"], [387, 2, 1, "", "get_feature_names_out"], [387, 2, 1, "", "get_metadata_routing"], [387, 2, 1, "", "get_params"], [387, 2, 1, "", "inverse_transform"], [387, 4, 1, "", "labels_"], [387, 5, 1, "", "lut_"], [387, 4, 1, "", "n_elements_"], [387, 4, 1, "", "region_ids_"], [387, 4, 1, "", "region_names_"], [387, 2, 1, "", "set_fit_request"], [387, 2, 1, "", "set_inverse_transform_request"], [387, 2, 1, "", "set_output"], [387, 2, 1, "", "set_params"], [387, 2, 1, "", "set_transform_request"], [387, 2, 1, "", "transform"], [387, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.SurfaceMapsMasker": [[388, 2, 1, "", "__init__"], [388, 2, 1, "", "fit"], [388, 2, 1, "", "fit_transform"], [388, 2, 1, "", "generate_report"], [388, 2, 1, "", "get_feature_names_out"], [388, 2, 1, "", "get_metadata_routing"], [388, 2, 1, "", "get_params"], [388, 2, 1, "", "inverse_transform"], [388, 2, 1, "", "set_fit_request"], [388, 2, 1, "", "set_inverse_transform_request"], [388, 2, 1, "", "set_output"], [388, 2, 1, "", "set_params"], [388, 2, 1, "", "set_transform_request"], [388, 2, 1, "", "transform"], [388, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.SurfaceMasker": [[389, 2, 1, "", "__init__"], [389, 2, 1, "", "fit"], [389, 2, 1, "", "fit_transform"], [389, 2, 1, "", "generate_report"], [389, 2, 1, "", "get_feature_names_out"], [389, 2, 1, "", "get_metadata_routing"], [389, 2, 1, "", "get_params"], [389, 2, 1, "", "inverse_transform"], [389, 2, 1, "", "set_fit_request"], [389, 2, 1, "", "set_inverse_transform_request"], [389, 2, 1, "", "set_output"], [389, 2, 1, "", "set_params"], [389, 2, 1, "", "set_transform_request"], [389, 2, 1, "", "transform"], [389, 2, 1, "", "transform_single_imgs"]], "nilearn.masking": [[390, 3, 1, "", "apply_mask"], [391, 3, 1, "", "compute_background_mask"], [392, 3, 1, "", "compute_brain_mask"], [393, 3, 1, "", "compute_epi_mask"], [394, 3, 1, "", "compute_multi_background_mask"], [395, 3, 1, "", "compute_multi_brain_mask"], [396, 3, 1, "", "compute_multi_epi_mask"], [397, 3, 1, "", "intersect_masks"], [398, 3, 1, "", "unmask"]], "nilearn.mass_univariate": [[399, 3, 1, "", "permuted_ols"]], "nilearn.plotting": [[500, 0, 0, "-", "displays"], [430, 3, 1, "", "find_cut_slices"], [431, 3, 1, "", "find_parcellation_cut_coords"], [432, 3, 1, "", "find_probabilistic_atlas_cut_coords"], [433, 3, 1, "", "find_xyz_cut_coords"], [434, 3, 1, "", "plot_anat"], [435, 3, 1, "", "plot_bland_altman"], [436, 3, 1, "", "plot_carpet"], [437, 3, 1, "", "plot_connectome"], [438, 3, 1, "", "plot_contrast_matrix"], [439, 3, 1, "", "plot_design_matrix"], [440, 3, 1, "", "plot_design_matrix_correlation"], [441, 3, 1, "", "plot_epi"], [442, 3, 1, "", "plot_event"], [443, 3, 1, "", "plot_glass_brain"], [444, 3, 1, "", "plot_img"], [445, 3, 1, "", "plot_img_comparison"], [446, 3, 1, "", "plot_img_on_surf"], [447, 3, 1, "", "plot_markers"], [448, 3, 1, "", "plot_matrix"], [449, 3, 1, "", "plot_prob_atlas"], [450, 3, 1, "", "plot_roi"], [451, 3, 1, "", "plot_stat_map"], [452, 3, 1, "", "plot_surf"], [453, 3, 1, "", "plot_surf_contours"], [454, 3, 1, "", "plot_surf_roi"], [455, 3, 1, "", "plot_surf_stat_map"], [456, 3, 1, "", "show"], [457, 3, 1, "", "view_connectome"], [458, 3, 1, "", "view_img"], [459, 3, 1, "", "view_img_on_surf"], [460, 3, 1, "", "view_markers"], [461, 3, 1, "", "view_surf"]], "nilearn.plotting.displays": [[400, 1, 1, "", "BaseAxes"], [401, 1, 1, "", "BaseSlicer"], [402, 1, 1, "", "CutAxes"], [403, 1, 1, "", "GlassBrainAxes"], [404, 1, 1, "", "LProjector"], [405, 1, 1, "", "LRProjector"], [406, 1, 1, "", "LYRProjector"], [407, 1, 1, "", "LYRZProjector"], [408, 1, 1, "", "LZRProjector"], [409, 1, 1, "", "LZRYProjector"], [410, 1, 1, "", "MosaicSlicer"], [411, 1, 1, "", "OrthoProjector"], [412, 1, 1, "", "OrthoSlicer"], [413, 1, 1, "", "PlotlySurfaceFigure"], [414, 1, 1, "", "RProjector"], [415, 1, 1, "", "TiledSlicer"], [416, 1, 1, "", "XProjector"], [417, 1, 1, "", "XSlicer"], [418, 1, 1, "", "XZProjector"], [419, 1, 1, "", "XZSlicer"], [420, 1, 1, "", "YProjector"], [421, 1, 1, "", "YSlicer"], [422, 1, 1, "", "YXProjector"], [423, 1, 1, "", "YXSlicer"], [424, 1, 1, "", "YZProjector"], [425, 1, 1, "", "YZSlicer"], [426, 1, 1, "", "ZProjector"], [427, 1, 1, "", "ZSlicer"], [428, 3, 1, "", "get_projector"], [429, 3, 1, "", "get_slicer"]], "nilearn.plotting.displays.BaseAxes": [[400, 2, 1, "", "__init__"], [400, 2, 1, "", "add_object_bounds"], [400, 2, 1, "", "draw_2d"], [400, 2, 1, "", "draw_left_right"], [400, 2, 1, "", "draw_position"], [400, 2, 1, "", "draw_scale_bar"], [400, 2, 1, "", "get_object_bounds"], [400, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.BaseSlicer": [[401, 2, 1, "", "__init__"], [401, 2, 1, "", "add_contours"], [401, 2, 1, "", "add_edges"], [401, 2, 1, "", "add_markers"], [401, 2, 1, "", "add_overlay"], [401, 2, 1, "", "annotate"], [401, 4, 1, "", "black_bg"], [401, 4, 1, "", "brain_color"], [401, 2, 1, "", "close"], [401, 2, 1, "", "find_cut_coords"], [401, 2, 1, "", "init_with_figure"], [401, 2, 1, "", "savefig"], [401, 2, 1, "", "title"]], "nilearn.plotting.displays.CutAxes": [[402, 2, 1, "", "__init__"], [402, 2, 1, "", "add_object_bounds"], [402, 2, 1, "", "draw_2d"], [402, 2, 1, "", "draw_left_right"], [402, 2, 1, "", "draw_position"], [402, 2, 1, "", "draw_scale_bar"], [402, 2, 1, "", "get_object_bounds"], [402, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.GlassBrainAxes": [[403, 2, 1, "", "__init__"], [403, 2, 1, "", "add_object_bounds"], [403, 2, 1, "", "draw_2d"], [403, 2, 1, "", "draw_left_right"], [403, 2, 1, "", "draw_position"], [403, 2, 1, "", "draw_scale_bar"], [403, 2, 1, "", "get_object_bounds"], [403, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.LProjector": [[404, 2, 1, "", "__init__"], [404, 2, 1, "", "add_contours"], [404, 2, 1, "", "add_edges"], [404, 2, 1, "", "add_graph"], [404, 2, 1, "", "add_markers"], [404, 2, 1, "", "add_overlay"], [404, 2, 1, "", "annotate"], [404, 4, 1, "", "black_bg"], [404, 4, 1, "", "brain_color"], [404, 2, 1, "", "close"], [404, 2, 1, "", "draw_cross"], [404, 2, 1, "", "find_cut_coords"], [404, 2, 1, "", "init_with_figure"], [404, 2, 1, "", "savefig"], [404, 2, 1, "", "title"]], "nilearn.plotting.displays.LRProjector": [[405, 2, 1, "", "__init__"], [405, 2, 1, "", "add_contours"], [405, 2, 1, "", "add_edges"], [405, 2, 1, "", "add_graph"], [405, 2, 1, "", "add_markers"], [405, 2, 1, "", "add_overlay"], [405, 2, 1, "", "annotate"], [405, 4, 1, "", "black_bg"], [405, 4, 1, "", "brain_color"], [405, 2, 1, "", "close"], [405, 2, 1, "", "draw_cross"], [405, 2, 1, "", "find_cut_coords"], [405, 2, 1, "", "init_with_figure"], [405, 2, 1, "", "savefig"], [405, 2, 1, "", "title"]], "nilearn.plotting.displays.LYRProjector": [[406, 2, 1, "", "__init__"], [406, 2, 1, "", "add_contours"], [406, 2, 1, "", "add_edges"], [406, 2, 1, "", "add_graph"], [406, 2, 1, "", "add_markers"], [406, 2, 1, "", "add_overlay"], [406, 2, 1, "", "annotate"], [406, 4, 1, "", "black_bg"], [406, 4, 1, "", "brain_color"], [406, 2, 1, "", "close"], [406, 2, 1, "", "draw_cross"], [406, 2, 1, "", "find_cut_coords"], [406, 2, 1, "", "init_with_figure"], [406, 2, 1, "", "savefig"], [406, 2, 1, "", "title"]], "nilearn.plotting.displays.LYRZProjector": [[407, 2, 1, "", "__init__"], [407, 2, 1, "", "add_contours"], [407, 2, 1, "", "add_edges"], [407, 2, 1, "", "add_graph"], [407, 2, 1, "", "add_markers"], [407, 2, 1, "", "add_overlay"], [407, 2, 1, "", "annotate"], [407, 4, 1, "", "black_bg"], [407, 4, 1, "", "brain_color"], [407, 2, 1, "", "close"], [407, 2, 1, "", "draw_cross"], [407, 2, 1, "", "find_cut_coords"], [407, 2, 1, "", "init_with_figure"], [407, 2, 1, "", "savefig"], [407, 2, 1, "", "title"]], "nilearn.plotting.displays.LZRProjector": [[408, 2, 1, "", "__init__"], [408, 2, 1, "", "add_contours"], [408, 2, 1, "", "add_edges"], [408, 2, 1, "", "add_graph"], [408, 2, 1, "", "add_markers"], [408, 2, 1, "", "add_overlay"], [408, 2, 1, "", "annotate"], [408, 4, 1, "", "black_bg"], [408, 4, 1, "", "brain_color"], [408, 2, 1, "", "close"], [408, 2, 1, "", "draw_cross"], [408, 2, 1, "", "find_cut_coords"], [408, 2, 1, "", "init_with_figure"], [408, 2, 1, "", "savefig"], [408, 2, 1, "", "title"]], "nilearn.plotting.displays.LZRYProjector": [[409, 2, 1, "", "__init__"], [409, 2, 1, "", "add_contours"], [409, 2, 1, "", "add_edges"], [409, 2, 1, "", "add_graph"], [409, 2, 1, "", "add_markers"], [409, 2, 1, "", "add_overlay"], [409, 2, 1, "", "annotate"], [409, 4, 1, "", "black_bg"], [409, 4, 1, "", "brain_color"], [409, 2, 1, "", "close"], [409, 2, 1, "", "draw_cross"], [409, 2, 1, "", "find_cut_coords"], [409, 2, 1, "", "init_with_figure"], [409, 2, 1, "", "savefig"], [409, 2, 1, "", "title"]], "nilearn.plotting.displays.MosaicSlicer": [[410, 2, 1, "", "__init__"], [410, 2, 1, "", "add_contours"], [410, 2, 1, "", "add_edges"], [410, 2, 1, "", "add_markers"], [410, 2, 1, "", "add_overlay"], [410, 2, 1, "", "annotate"], [410, 4, 1, "", "black_bg"], [410, 4, 1, "", "brain_color"], [410, 2, 1, "", "close"], [410, 2, 1, "", "draw_cross"], [410, 2, 1, "", "find_cut_coords"], [410, 2, 1, "", "init_with_figure"], [410, 2, 1, "", "savefig"], [410, 2, 1, "", "title"]], "nilearn.plotting.displays.OrthoProjector": [[411, 2, 1, "", "__init__"], [411, 2, 1, "", "add_contours"], [411, 2, 1, "", "add_edges"], [411, 2, 1, "", "add_graph"], [411, 2, 1, "", "add_markers"], [411, 2, 1, "", "add_overlay"], [411, 2, 1, "", "annotate"], [411, 4, 1, "", "black_bg"], [411, 4, 1, "", "brain_color"], [411, 2, 1, "", "close"], [411, 2, 1, "", "draw_cross"], [411, 2, 1, "", "find_cut_coords"], [411, 2, 1, "", "init_with_figure"], [411, 2, 1, "", "savefig"], [411, 2, 1, "", "title"]], "nilearn.plotting.displays.OrthoSlicer": [[412, 2, 1, "", "__init__"], [412, 2, 1, "", "add_contours"], [412, 2, 1, "", "add_edges"], [412, 2, 1, "", "add_markers"], [412, 2, 1, "", "add_overlay"], [412, 2, 1, "", "annotate"], [412, 4, 1, "", "black_bg"], [412, 4, 1, "", "brain_color"], [412, 2, 1, "", "close"], [412, 2, 1, "", "draw_cross"], [412, 2, 1, "", "find_cut_coords"], [412, 2, 1, "", "init_with_figure"], [412, 2, 1, "", "savefig"], [412, 2, 1, "", "title"]], "nilearn.plotting.displays.PlotlySurfaceFigure": [[413, 2, 1, "", "__init__"], [413, 2, 1, "", "add_contours"], [413, 2, 1, "", "savefig"], [413, 2, 1, "", "show"]], "nilearn.plotting.displays.RProjector": [[414, 2, 1, "", "__init__"], [414, 2, 1, "", "add_contours"], [414, 2, 1, "", "add_edges"], [414, 2, 1, "", "add_graph"], [414, 2, 1, "", "add_markers"], [414, 2, 1, "", "add_overlay"], [414, 2, 1, "", "annotate"], [414, 4, 1, "", "black_bg"], [414, 4, 1, "", "brain_color"], [414, 2, 1, "", "close"], [414, 2, 1, "", "draw_cross"], [414, 2, 1, "", "find_cut_coords"], [414, 2, 1, "", "init_with_figure"], [414, 2, 1, "", "savefig"], [414, 2, 1, "", "title"]], "nilearn.plotting.displays.TiledSlicer": [[415, 2, 1, "", "__init__"], [415, 2, 1, "", "add_contours"], [415, 2, 1, "", "add_edges"], [415, 2, 1, "", "add_markers"], [415, 2, 1, "", "add_overlay"], [415, 2, 1, "", "annotate"], [415, 4, 1, "", "black_bg"], [415, 4, 1, "", "brain_color"], [415, 2, 1, "", "close"], [415, 2, 1, "", "draw_cross"], [415, 2, 1, "", "find_cut_coords"], [415, 2, 1, "", "init_with_figure"], [415, 2, 1, "", "savefig"], [415, 2, 1, "", "title"]], "nilearn.plotting.displays.XProjector": [[416, 2, 1, "", "__init__"], [416, 2, 1, "", "add_contours"], [416, 2, 1, "", "add_edges"], [416, 2, 1, "", "add_graph"], [416, 2, 1, "", "add_markers"], [416, 2, 1, "", "add_overlay"], [416, 2, 1, "", "annotate"], [416, 4, 1, "", "black_bg"], [416, 4, 1, "", "brain_color"], [416, 2, 1, "", "close"], [416, 2, 1, "", "draw_cross"], [416, 2, 1, "", "find_cut_coords"], [416, 2, 1, "", "init_with_figure"], [416, 2, 1, "", "savefig"], [416, 2, 1, "", "title"]], "nilearn.plotting.displays.XSlicer": [[417, 2, 1, "", "__init__"], [417, 2, 1, "", "add_contours"], [417, 2, 1, "", "add_edges"], [417, 2, 1, "", "add_markers"], [417, 2, 1, "", "add_overlay"], [417, 2, 1, "", "annotate"], [417, 4, 1, "", "black_bg"], [417, 4, 1, "", "brain_color"], [417, 2, 1, "", "close"], [417, 2, 1, "", "draw_cross"], [417, 2, 1, "", "find_cut_coords"], [417, 2, 1, "", "init_with_figure"], [417, 2, 1, "", "savefig"], [417, 2, 1, "", "title"]], "nilearn.plotting.displays.XZProjector": [[418, 2, 1, "", "__init__"], [418, 2, 1, "", "add_contours"], [418, 2, 1, "", "add_edges"], [418, 2, 1, "", "add_graph"], [418, 2, 1, "", "add_markers"], [418, 2, 1, "", "add_overlay"], [418, 2, 1, "", "annotate"], [418, 4, 1, "", "black_bg"], [418, 4, 1, "", "brain_color"], [418, 2, 1, "", "close"], [418, 2, 1, "", "draw_cross"], [418, 2, 1, "", "find_cut_coords"], [418, 2, 1, "", "init_with_figure"], [418, 2, 1, "", "savefig"], [418, 2, 1, "", "title"]], "nilearn.plotting.displays.XZSlicer": [[419, 2, 1, "", "__init__"], [419, 2, 1, "", "add_contours"], [419, 2, 1, "", "add_edges"], [419, 2, 1, "", "add_markers"], [419, 2, 1, "", "add_overlay"], [419, 2, 1, "", "annotate"], [419, 4, 1, "", "black_bg"], [419, 4, 1, "", "brain_color"], [419, 2, 1, "", "close"], [419, 2, 1, "", "draw_cross"], [419, 2, 1, "", "find_cut_coords"], [419, 2, 1, "", "init_with_figure"], [419, 2, 1, "", "savefig"], [419, 2, 1, "", "title"]], "nilearn.plotting.displays.YProjector": [[420, 2, 1, "", "__init__"], [420, 2, 1, "", "add_contours"], [420, 2, 1, "", "add_edges"], [420, 2, 1, "", "add_graph"], [420, 2, 1, "", "add_markers"], [420, 2, 1, "", "add_overlay"], [420, 2, 1, "", "annotate"], [420, 4, 1, "", "black_bg"], [420, 4, 1, "", "brain_color"], [420, 2, 1, "", "close"], [420, 2, 1, "", "draw_cross"], [420, 2, 1, "", "find_cut_coords"], [420, 2, 1, "", "init_with_figure"], [420, 2, 1, "", "savefig"], [420, 2, 1, "", "title"]], "nilearn.plotting.displays.YSlicer": [[421, 2, 1, "", "__init__"], [421, 2, 1, "", "add_contours"], [421, 2, 1, "", "add_edges"], [421, 2, 1, "", "add_markers"], [421, 2, 1, "", "add_overlay"], [421, 2, 1, "", "annotate"], [421, 4, 1, "", "black_bg"], [421, 4, 1, "", "brain_color"], [421, 2, 1, "", "close"], [421, 2, 1, "", "draw_cross"], [421, 2, 1, "", "find_cut_coords"], [421, 2, 1, "", "init_with_figure"], [421, 2, 1, "", "savefig"], [421, 2, 1, "", "title"]], "nilearn.plotting.displays.YXProjector": [[422, 2, 1, "", "__init__"], [422, 2, 1, "", "add_contours"], [422, 2, 1, "", "add_edges"], [422, 2, 1, "", "add_graph"], [422, 2, 1, "", "add_markers"], [422, 2, 1, "", "add_overlay"], [422, 2, 1, "", "annotate"], [422, 4, 1, "", "black_bg"], [422, 4, 1, "", "brain_color"], [422, 2, 1, "", "close"], [422, 2, 1, "", "draw_cross"], [422, 2, 1, "", "find_cut_coords"], [422, 2, 1, "", "init_with_figure"], [422, 2, 1, "", "savefig"], [422, 2, 1, "", "title"]], "nilearn.plotting.displays.YXSlicer": [[423, 2, 1, "", "__init__"], [423, 2, 1, "", "add_contours"], [423, 2, 1, "", "add_edges"], [423, 2, 1, "", "add_markers"], [423, 2, 1, "", "add_overlay"], [423, 2, 1, "", "annotate"], [423, 4, 1, "", "black_bg"], [423, 4, 1, "", "brain_color"], [423, 2, 1, "", "close"], [423, 2, 1, "", "draw_cross"], [423, 2, 1, "", "find_cut_coords"], [423, 2, 1, "", "init_with_figure"], [423, 2, 1, "", "savefig"], [423, 2, 1, "", "title"]], "nilearn.plotting.displays.YZProjector": [[424, 2, 1, "", "__init__"], [424, 2, 1, "", "add_contours"], [424, 2, 1, "", "add_edges"], [424, 2, 1, "", "add_graph"], [424, 2, 1, "", "add_markers"], [424, 2, 1, "", "add_overlay"], [424, 2, 1, "", "annotate"], [424, 4, 1, "", "black_bg"], [424, 4, 1, "", "brain_color"], [424, 2, 1, "", "close"], [424, 2, 1, "", "draw_cross"], [424, 2, 1, "", "find_cut_coords"], [424, 2, 1, "", "init_with_figure"], [424, 2, 1, "", "savefig"], [424, 2, 1, "", "title"]], "nilearn.plotting.displays.YZSlicer": [[425, 2, 1, "", "__init__"], [425, 2, 1, "", "add_contours"], [425, 2, 1, "", "add_edges"], [425, 2, 1, "", "add_markers"], [425, 2, 1, "", "add_overlay"], [425, 2, 1, "", "annotate"], [425, 4, 1, "", "black_bg"], [425, 4, 1, "", "brain_color"], [425, 2, 1, "", "close"], [425, 2, 1, "", "draw_cross"], [425, 2, 1, "", "find_cut_coords"], [425, 2, 1, "", "init_with_figure"], [425, 2, 1, "", "savefig"], [425, 2, 1, "", "title"]], "nilearn.plotting.displays.ZProjector": [[426, 2, 1, "", "__init__"], [426, 2, 1, "", "add_contours"], [426, 2, 1, "", "add_edges"], [426, 2, 1, "", "add_graph"], [426, 2, 1, "", "add_markers"], [426, 2, 1, "", "add_overlay"], [426, 2, 1, "", "annotate"], [426, 4, 1, "", "black_bg"], [426, 4, 1, "", "brain_color"], [426, 2, 1, "", "close"], [426, 2, 1, "", "draw_cross"], [426, 2, 1, "", "find_cut_coords"], [426, 2, 1, "", "init_with_figure"], [426, 2, 1, "", "savefig"], [426, 2, 1, "", "title"]], "nilearn.plotting.displays.ZSlicer": [[427, 2, 1, "", "__init__"], [427, 2, 1, "", "add_contours"], [427, 2, 1, "", "add_edges"], [427, 2, 1, "", "add_markers"], [427, 2, 1, "", "add_overlay"], [427, 2, 1, "", "annotate"], [427, 4, 1, "", "black_bg"], [427, 4, 1, "", "brain_color"], [427, 2, 1, "", "close"], [427, 2, 1, "", "draw_cross"], [427, 2, 1, "", "find_cut_coords"], [427, 2, 1, "", "init_with_figure"], [427, 2, 1, "", "savefig"], [427, 2, 1, "", "title"]], "nilearn.regions": [[462, 1, 1, "", "HierarchicalKMeans"], [463, 1, 1, "", "Parcellations"], [464, 1, 1, "", "ReNA"], [465, 1, 1, "", "RegionExtractor"], [466, 3, 1, "", "connected_label_regions"], [467, 3, 1, "", "connected_regions"], [468, 3, 1, "", "img_to_signals_labels"], [469, 3, 1, "", "img_to_signals_maps"], [470, 3, 1, "", "recursive_neighbor_agglomeration"], [471, 3, 1, "", "signals_to_img_labels"], [472, 3, 1, "", "signals_to_img_maps"]], "nilearn.regions.HierarchicalKMeans": [[462, 2, 1, "", "__init__"], [462, 2, 1, "", "fit"], [462, 2, 1, "", "fit_predict"], [462, 2, 1, "", "fit_transform"], [462, 2, 1, "", "get_feature_names_out"], [462, 2, 1, "", "get_metadata_routing"], [462, 2, 1, "", "get_params"], [462, 2, 1, "", "inverse_transform"], [462, 2, 1, "", "set_inverse_transform_request"], [462, 2, 1, "", "set_output"], [462, 2, 1, "", "set_params"], [462, 2, 1, "", "transform"]], "nilearn.regions.Parcellations": [[463, 5, 1, "", "VALID_METHODS"], [463, 2, 1, "", "__init__"], [463, 2, 1, "", "fit"], [463, 2, 1, "", "fit_transform"], [463, 2, 1, "", "get_metadata_routing"], [463, 2, 1, "", "get_params"], [463, 2, 1, "", "inverse_transform"], [463, 2, 1, "", "score"], [463, 2, 1, "", "set_fit_request"], [463, 2, 1, "", "set_inverse_transform_request"], [463, 2, 1, "", "set_output"], [463, 2, 1, "", "set_params"], [463, 2, 1, "", "set_score_request"], [463, 2, 1, "", "set_transform_request"], [463, 2, 1, "", "transform"]], "nilearn.regions.ReNA": [[464, 2, 1, "", "__init__"], [464, 2, 1, "", "fit"], [464, 2, 1, "", "fit_predict"], [464, 2, 1, "", "fit_transform"], [464, 2, 1, "", "get_metadata_routing"], [464, 2, 1, "", "get_params"], [464, 2, 1, "", "inverse_transform"], [464, 2, 1, "", "set_inverse_transform_request"], [464, 2, 1, "", "set_output"], [464, 2, 1, "", "set_params"], [464, 2, 1, "", "transform"]], "nilearn.regions.RegionExtractor": [[465, 2, 1, "", "__init__"], [465, 2, 1, "", "fit"], [465, 2, 1, "", "fit_transform"], [465, 2, 1, "", "generate_report"], [465, 2, 1, "", "get_feature_names_out"], [465, 2, 1, "", "get_metadata_routing"], [465, 2, 1, "", "get_params"], [465, 2, 1, "", "inverse_transform"], [465, 2, 1, "", "set_fit_request"], [465, 2, 1, "", "set_inverse_transform_request"], [465, 2, 1, "", "set_output"], [465, 2, 1, "", "set_params"], [465, 2, 1, "", "set_transform_request"], [465, 2, 1, "", "transform"], [465, 2, 1, "", "transform_single_imgs"]], "nilearn.reporting": [[473, 1, 1, "", "HTMLReport"], [474, 3, 1, "", "get_clusters_table"], [475, 3, 1, "", "make_glm_report"]], "nilearn.reporting.HTMLReport": [[473, 2, 1, "", "__init__"], [473, 2, 1, "", "get_iframe"], [473, 2, 1, "", "get_standalone"], [473, 4, 1, "", "height"], [473, 2, 1, "", "open_in_browser"], [473, 2, 1, "", "resize"], [473, 2, 1, "", "save_as_html"], [473, 4, 1, "", "width"]], "nilearn.signal": [[476, 3, 1, "", "butterworth"], [477, 3, 1, "", "clean"], [478, 3, 1, "", "high_variance_confounds"]], "nilearn.surface": [[479, 1, 1, "", "FileMesh"], [480, 1, 1, "", "InMemoryMesh"], [481, 1, 1, "", "PolyData"], [482, 1, 1, "", "PolyMesh"], [483, 1, 1, "", "SurfaceImage"], [484, 1, 1, "", "SurfaceMesh"], [485, 3, 1, "", "load_surf_data"], [486, 3, 1, "", "load_surf_mesh"], [487, 3, 1, "", "vol_to_surf"]], "nilearn.surface.FileMesh": [[479, 2, 1, "", "__init__"], [479, 4, 1, "", "coordinates"], [479, 4, 1, "", "faces"], [479, 5, 1, "", "file_path"], [479, 2, 1, "", "loaded"], [479, 5, 1, "", "n_vertices"], [479, 2, 1, "", "to_gifti"]], "nilearn.surface.InMemoryMesh": [[480, 2, 1, "", "__init__"], [480, 5, 1, "", "coordinates"], [480, 5, 1, "", "faces"], [480, 5, 1, "", "n_vertices"], [480, 2, 1, "", "to_gifti"]], "nilearn.surface.PolyData": [[481, 2, 1, "", "__init__"], [481, 4, 1, "", "shape"], [481, 2, 1, "", "to_filename"]], "nilearn.surface.PolyMesh": [[482, 2, 1, "", "__init__"], [482, 5, 1, "", "n_vertices"], [482, 2, 1, "", "to_filename"]], "nilearn.surface.SurfaceImage": [[483, 2, 1, "", "__init__"], [483, 2, 1, "", "from_volume"], [483, 4, 1, "", "shape"]], "nilearn.surface.SurfaceMesh": [[484, 5, 1, "", "coordinates"], [484, 5, 1, "", "faces"], [484, 5, 1, "", "n_vertices"], [484, 2, 1, "", "to_gifti"]], "nilearn.utils": [[488, 3, 1, "", "all_displays"], [489, 3, 1, "", "all_estimators"], [490, 3, 1, "", "all_functions"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "property", "Python property"], "5": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:property", "5": "py:attribute"}, "terms": {"": [0, 2, 3, 4, 6, 7, 10, 11, 13, 17, 24, 26, 31, 32, 36, 41, 43, 44, 47, 52, 53, 58, 59, 65, 66, 67, 68, 69, 70, 72, 73, 74, 77, 79, 80, 81, 82, 88, 93, 95, 96, 103, 105, 106, 107, 111, 113, 114, 118, 121, 130, 131, 135, 141, 148, 158, 159, 164, 165, 168, 172, 175, 176, 178, 179, 181, 182, 183, 184, 185, 187, 188, 190, 191, 192, 197, 198, 199, 200, 201, 202, 204, 205, 208, 209, 217, 220, 224, 225, 226, 228, 230, 232, 233, 236, 237, 240, 241, 242, 250, 252, 253, 261, 263, 264, 265, 266, 277, 282, 284, 288, 305, 306, 307, 308, 309, 310, 311, 312, 313, 322, 324, 325, 332, 346, 350, 351, 360, 362, 366, 367, 368, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 436, 437, 446, 447, 452, 453, 454, 455, 457, 459, 461, 462, 463, 464, 465, 475, 477, 507], "0": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 120, 165, 166, 169, 171, 177, 178, 179, 180, 181, 190, 191, 192, 199, 202, 203, 207, 210, 211, 212, 213, 214, 215, 228, 229, 236, 240, 241, 242, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 318, 319, 320, 322, 323, 324, 325, 327, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 355, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 434, 436, 437, 440, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 487, 491, 492, 507, 508, 509, 511], "00": [8, 29, 32, 34, 35, 47, 48, 56, 62, 64, 73, 75, 84, 91, 99, 115, 117, 491, 509], "000": [36, 45, 81, 96, 117, 176], "0000": 179, "000000": [11, 65, 68, 492], "00002": [118, 201, 251], "00008": [118, 121, 226, 282, 284], "000082": 11, "0001": [55, 56, 61, 310, 311], "00012355e": 3, "0002": 179, "000253": 51, "000519": 53, "00058521e": 3, "00061": 53, "000828": 59, "001": [6, 26, 35, 44, 47, 64, 65, 73, 78, 81, 82, 83, 94, 104, 113, 118, 135, 163, 181, 241, 242, 244, 310, 311, 332, 346, 349, 475, 491], "0010042": 12, "0010042_rest_tshift_rpi_voreg_mni": 12, "00107750e": 3, "001269": 52, "00152": [118, 227], "001547": 52, "00156": [106, 118, 399], "00167": [52, 118, 168], "001927": 93, "002": 44, "002218": 51, "00230947e": 3, "002672": 53, "00276679e": 3, "0029482": [118, 187], "00297": 52, "003": 44, "00338": [118, 231, 237, 260, 264], "00342": 52, "003836": 51, "003948": 51, "004": [43, 44, 118, 202, 224, 281], "004797": 52, "004973": 52, "005": [44, 118, 173, 307, 308], "005065": 6, "00512451": [118, 165, 241], "005308": 51, "005603": 53, "00563468": [47, 118, 177], "00599": [118, 197, 248], "006": [44, 52, 61, 118, 230, 266], "006081": 52, "006388": 52, "00654814e": 3, "00662547e": 3, "007": [44, 59, 118, 165, 166, 223, 225, 258], "007294": 59, "00743128949229107": 77, "007541": 59, "00760e": 11, "00770680e": 3, "008": [35, 44], "00839984": [118, 177], "009": [44, 118, 436], "00991743": [118, 177], "00_tutori": [3, 4, 6, 7, 8, 186, 509], "00e": 491, "01": [3, 4, 6, 8, 13, 21, 26, 29, 32, 34, 35, 40, 45, 48, 51, 54, 56, 58, 61, 62, 64, 65, 70, 72, 73, 75, 84, 99, 102, 103, 104, 106, 108, 113, 114, 115, 118, 202, 206, 225, 242, 254, 258, 332, 335, 339, 371, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 491, 492, 509], "010": [23, 44, 51, 118, 170, 206, 262, 312], "01093944": [118, 169, 465], "011": [44, 46, 48, 509], "01147731": [118, 177], "012": 44, "01288": 51, "013": 44, "014": 44, "01422": [26, 118], "01499899481931678": 71, "015": 44, "015035": 51, "015679": 56, "016": [44, 68], "01698742e": 3, "017": 44, "01771138e": 3, "018": [44, 118, 202, 373, 374], "01872358e": 3, "018869405610299532": 71, "019": 44, "019085": 59, "0193": [118, 211, 212, 213, 214, 215, 236, 263, 290], "019374": 59, "01_plot": [10, 16, 23, 24, 26, 29, 186, 459, 509], "01_task": [6, 103, 104, 113], "01d": 3, "01hz": [68, 248], "02": [3, 32, 35, 48, 51, 54, 56, 62, 64, 65, 73, 75, 80, 84, 93, 102, 113, 115, 118, 170, 176, 202, 252, 312, 373, 374, 491, 509], "020": [44, 59, 107, 118, 217, 373, 374], "021": [44, 107], "02149915e": 3, "022": 44, "022169": 59, "022416": 59, "022868": 56, "023": 44, "023900": 59, "024": [26, 44, 118], "024188": 59, "024363": 35, "025": 44, "02587": 56, "026": 44, "026078": 59, "026206": 35, "026366": 59, "026665": 93, "027": 44, "027587": 59, "027876": 59, "028": 44, "028089": 93, "02839131e": 3, "028668": 65, "029": 44, "02904869": [118, 208, 255], "02912274e": 3, "029500": 59, "029747": 59, "02_decod": [31, 35, 38, 42, 43, 44, 46, 48, 186, 509], "02_task": 113, "02d": 82, "02g": 73, "03": [3, 29, 32, 34, 35, 44, 47, 56, 59, 62, 73, 84, 93, 99, 113, 115, 118, 176, 185, 348, 373, 374, 399, 491, 492, 509], "030": 44, "03004477e": 3, "031": 44, "032": 44, "03260102e": 3, "03299904e": 3, "033": [44, 118, 202, 219], "033396": 59, "033577": 35, "033685": 59, "034": 44, "034236": 59, "034474": 53, "034483": 59, "034967": 6, "035": [39, 44, 118], "036": 44, "03623482e": 3, "03662783e": 3, "037": [44, 118], "038": 44, "03858277e": 3, "039": 44, "03901646e": 3, "03928166e": 3, "0395": [118, 206], "0396": [118, 206], "03_connect": [50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 151, 163, 186, 509], "03_task": 113, "03cm": 46, "03d": [44, 103], "03g": 77, "04": [3, 29, 32, 34, 35, 52, 56, 59, 64, 70, 73, 75, 84, 93, 99, 113, 115, 118, 165, 166, 178, 225, 258, 373, 374, 478, 491, 492, 509], "040": 44, "04054470e": 3, "04069144e": 3, "041": [44, 118, 176], "042": [44, 118, 373, 374, 478], "042248": 59, "042495": 59, "04261313e": 3, "043": 44, "04377746e": 3, "044": 44, "044073": 56, "045": 44, "045756026122034346": 71, "046": 44, "04616780e": 3, "047": [44, 99], "0471754951": [118, 324, 325], "048": [44, 118, 373], "04803017e": 3, "04858280e": 3, "048779": 56, "049": 44, "049211": 59, "049250313e": [55, 56, 61], "049458": 59, "049556260499625526": 71, "04965564e": 3, "04_glm_first_level": [64, 65, 66, 70, 72, 73, 74, 75, 179, 509], "04_task": 113, "05": [6, 26, 29, 32, 34, 35, 47, 48, 51, 52, 54, 56, 73, 77, 78, 79, 81, 83, 93, 102, 113, 115, 118, 181, 199, 200, 201, 205, 225, 228, 229, 231, 234, 235, 236, 237, 249, 250, 253, 258, 259, 260, 263, 264, 288, 322, 324, 325, 327, 491, 492, 509], "050": 44, "0504136102": [118, 374], "051": 44, "052": [44, 118, 204, 277], "05201": [118, 171], "052775": 59, "05279807e": 3, "052952": 59, "053": 44, "053022": 59, "05303585e": 3, "053241": 59, "054": [44, 118, 176], "054759": 59, "054901960784313725": 111, "055": 44, "055006": 59, "055884": 65, "056": 44, "057": [44, 74, 75, 509], "057023": 56, "05703773e": 3, "05715504e": 3, "058": 44, "059": 44, "05_advanc": [151, 163], "05_glm_second_level": [77, 79, 80, 81, 84, 509], "05_task": 113, "06": [23, 29, 34, 35, 48, 64, 73, 77, 93, 113, 118, 178, 202, 206, 252, 262, 309, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 451, 458, 491, 492, 509], "060": [44, 78, 106, 118, 327, 399], "0600244103": [118, 176, 187], "061": [44, 118, 185, 348, 399], "06155840e": 3, "062": [44, 54, 102, 118, 177], "062316": 56, "062676": 6, "063": [44, 118, 165], "064": [44, 118, 373, 374], "064266": 59, "06446872e": 3, "064554": 59, "064585": 59, "064873": 59, "065": 44, "06521614e": 3, "065223": 56, "066": 44, "066189": [118, 319, 323], "066584": 65, "06664590e": 3, "067": 44, "068": 44, "06831240e": 3, "068998": 59, "069": 44, "069287": 59, "06_manipulating_imag": [88, 93, 96, 99, 509], "06_task": 113, "06mm": [33, 35, 42, 46], "07": [29, 32, 34, 35, 39, 48, 52, 62, 64, 73, 78, 93, 113, 118, 172, 202, 219, 231, 260, 327, 464, 470, 491, 492, 509], "070": 44, "07013887e": 3, "071": 44, "072": 44, "07247189e": 3, "07295709e": 3, "073": [44, 59, 118, 172, 374], "07350015": [118, 399], "07355465e": 3, "074": 44, "074250e": 51, "075": 44, "07537655e": 3, "075540": 59, "075787": 59, "076": 44, "07603183e": 3, "077": 44, "07737": 35, "077517": 59, "077764": 59, "078": 44, "079": [42, 44, 48, 509], "079066": 65, "07_advanc": [103, 104, 111, 113, 114, 115, 509], "07_task": 113, "08": [32, 34, 35, 52, 64, 73, 75, 84, 113, 114, 118, 165, 198, 202, 355, 373, 436, 491, 492, 509], "080": [44, 118], "08010492e": 3, "081": 44, "0811879106": [118, 198], "081260": 6, "081559": 59, "081847": 59, "082": [44, 118, 202, 252], "083": 44, "084": 44, "085": 44, "08511036e": 3, "086": 44, "087": 44, "087084": 56, "087385": 93, "088": 44, "08854020e": 3, "08861454e": 3, "089": 44, "089762": 56, "0899818658828737": 46, "08_task": 113, "09": [29, 32, 34, 35, 61, 62, 64, 65, 73, 77, 99, 104, 113, 115, 118, 204, 206, 219, 228, 230, 254, 266, 277, 332, 346, 475, 491, 492, 509], "090": [37, 44, 48, 509], "09023": [135, 163], "090232306167813": [65, 104], "09026715e": 3, "09032557e": 3, "0905267106": [118, 233, 261], "0908073106": [118, 202], "090935": 6, "091": 44, "091516": 65, "09193725e": 3, "091985": 53, "092": [44, 113, 115, 509], "093": 44, "093286": 65, "094": 44, "09405666e": 3, "09407826e": 3, "09423454e": 3, "095": 44, "095605": 35, "096": 44, "096305": 65, "097": 44, "09701998e": 3, "0978": [118, 199, 250], "098": [44, 94, 99, 509], "09866906e": 3, "099": 44, "09947794e": 3, "09951039e": 3, "09_task": 113, "0a0": 148, "0c30ff": 11, "0dev": [240, 250, 305, 306, 307, 308, 310, 311, 312, 313, 316, 318, 332, 335, 350, 351, 366, 372, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 399, 436, 454, 463, 465, 468, 469, 477], "0min": [35, 39, 51, 52, 53, 55, 56, 59, 61, 104], "0mm": [86, 187], "0rc1": [160, 163], "0x7f4aa10fc040": 53, "0x7f4aa10fc610": 53, "0x7f4aa10fc730": 53, "0x7f4aa10fc850": 91, "0x7f4aa10fcb50": 53, "0x7f4aa10fcbb0": 53, "0x7f4aa10fcdf0": 53, "0x7f4aa10fceb0": 53, "0x7f4aa10fd6f0": 53, "0x7f4aa10fe020": 53, "0x7f4aa10fe0b0": 53, "0x7f4aa10fe0e0": 53, "0x7f4aa10fe320": 53, "0x7f4aa10fe560": 93, "0x7f4aa10fe5c0": 53, "0x7f4aa10feef0": 53, "0x7f4aa10fef80": 53, "0x7f4aa10ff3d0": 53, "0x7f4aa10ff5e0": 53, "0x7f4aa10ff7c0": 53, "0x7f4aa10ffbb0": 53, "0x7f4aa10ffc40": 53, "0x7f4aa110e290": 17, "0x7f4aa6ed37c0": 96, "0x7f4aa6f13d30": 65, "0x7f4ab2b4c2b0": 52, "0x7f4ab2b4da20": 52, "0x7f4ab2b4f490": 52, "0x7f4ab2b4f8b0": 59, "0x7f4abf057250": 91, "0x7f4abf0eb220": 54, "0x7f4ac0bb63e0": 55, "0x7f4acf2177f0": 77, "0x7f4ad38555a0": 65, "0x7f4ad3856b90": 55, "0x7f4ad3a77ee0": 83, "0x7f4ad3b2a560": 59, "0x7f4ad3b2c070": 16, "0x7f4ad3b2c7c0": 94, "0x7f4ad3b2cf40": 35, "0x7f4ad3fd6770": 96, "0x7f4ad5b10c10": 56, "0x7f4ad7511060": 55, "0x7f4ad7511ab0": 16, "0x7f4ad7514460": 16, "0x7f4ad7878130": 42, "0x7f4ad78781c0": 42, "0x7f4ad7878370": 42, "0x7f4ad7878460": 42, "0x7f4ad7878490": 42, "0x7f4ad7878640": 42, "0x7f4ad78786a0": 42, "0x7f4ad7878730": 42, "0x7f4ad7878910": 42, "0x7f4ad7878a30": 42, "0x7f4ad7878cd0": 42, "0x7f4ad7878d00": 42, "0x7f4ad7878d60": 42, "0x7f4ad7879000": 42, "0x7f4ad78790c0": 42, "0x7f4ad78790f0": 42, "0x7f4ad78792a0": 42, "0x7f4ad7879390": 42, "0x7f4ad78793c0": 42, "0x7f4ad7879570": 42, "0x7f4ad78795d0": 42, "0x7f4ad7879630": 42, "0x7f4ad7879870": 42, "0x7f4ad7879900": 42, "0x7f4ad7879960": 42, "0x7f4ad7879a20": 42, "0x7f4ad7879b70": 42, "0x7f4ad7879c00": 42, "0x7f4ad7879c30": 42, "0x7f4ad7879cc0": 42, "0x7f4ad7879e40": 42, "0x7f4ad787a050": 42, "0x7f4ad787a080": 42, "0x7f4ad787a0e0": 42, "0x7f4ad787a350": 42, "0x7f4ad787a380": 42, "0x7f4ad787a680": 42, "0x7f4ad787a6b0": 42, "0x7f4ad787a890": 42, "0x7f4ad787aad0": 42, "0x7f4ad787ab90": 42, "0x7f4ad787abf0": 42, "0x7f4ad787ad70": 42, "0x7f4ad787ada0": 42, "0x7f4ad787ae00": 42, "0x7f4ad787ae60": 42, "0x7f4ad787ae90": 42, "0x7f4ad787aec0": 42, "0x7f4ad787aef0": 42, "0x7f4ad787b190": 42, "0x7f4ad787b1f0": 42, "0x7f4ad787b220": 42, "0x7f4ad787b280": 42, "0x7f4ad787b520": 42, "0x7f4ad787b5b0": 42, "0x7f4ad787b5e0": 42, "0x7f4ad787b610": 42, "0x7f4ad787b670": 42, "0x7f4ad787b6a0": 42, "0x7f4ad787b790": 42, "0x7f4ad787b850": 42, "0x7f4ad787ba60": 42, "0x7f4ad787bf70": 42, "0x7f4ad788c400": 17, "0x7f4ad7dc9210": 96, "0x7f4ad8648b50": 16, "0x7f4ad864ac20": 10, "0x7f4ad8653880": 16, "0x7f4ad8f671f0": 52, "0x7f4ad8fcb0d0": 61, "0x7f4ad993c340": 59, "0x7f4ad99d0eb0": 83, "0x7f4ad9a77580": 61, "0x7f4ad9c501f0": 59, "0x7f4ad9c51240": 59, "0x7f4ad9c52d10": 59, "0x7f4ad9d3c1f0": 52, "0x7f4ad9db6ec0": 52, "0x7f4ad9ebe380": 91, "0x7f4adb139bd0": 11, "0x7f4adb148160": 42, "0x7f4adb148190": 42, "0x7f4adb1485e0": 42, "0x7f4adb148a90": 42, "0x7f4adb148af0": 42, "0x7f4adb148b80": 42, "0x7f4adb148d30": 42, "0x7f4adb148d90": 17, "0x7f4adb148f70": 42, "0x7f4adb149090": 42, "0x7f4adb1492a0": 42, "0x7f4adb149300": 17, "0x7f4adb149540": 42, "0x7f4adb149600": 42, "0x7f4adb149750": 42, "0x7f4adb149960": 42, "0x7f4adb149a20": 42, "0x7f4adb149a80": 42, "0x7f4adb149b70": 42, "0x7f4adb149cc0": 42, "0x7f4adb149d20": 42, "0x7f4adb149d50": 42, "0x7f4adb149ed0": 42, "0x7f4adb149f00": 42, "0x7f4adb14a080": 42, "0x7f4adb14a0e0": 42, "0x7f4adb14a4d0": 42, "0x7f4adb14a740": 42, "0x7f4adb14a770": 42, "0x7f4adb14a830": 42, "0x7f4adb14a9e0": 17, "0x7f4adb14aa10": 42, "0x7f4adb14aad0": 42, "0x7f4adb14ad70": 42, "0x7f4adb14add0": 42, "0x7f4adb14ae00": 42, "0x7f4adb14ae90": 42, "0x7f4adb14b130": 42, "0x7f4adb14b160": 42, "0x7f4adb14b1f0": 42, "0x7f4adb14b220": 42, "0x7f4adb14b2b0": 42, "0x7f4adb14b430": 42, "0x7f4adb14b5b0": 42, "0x7f4adb14b790": 42, "0x7f4adb14b7c0": 42, "0x7f4adb14ba30": 42, "0x7f4adb14bca0": 42, "0x7f4adb14bd00": 42, "0x7f4adb14bdf0": 42, "0x7f4adb14beb0": 42, "0x7f4adb14bf70": 42, "0x7f4adb14bfa0": 42, "0x7f4adb17c370": 18, "0x7f4adb189d80": 57, "0x7f4adb18b3d0": 15, "0x7f4adb1b5bd0": 61, "0x7f4adb1bfb50": 15, "0x7f4adb2b85b0": 61, "0x7f4adb2b8640": 35, "0x7f4adb2b9240": 51, "0x7f4adb2bb5e0": 35, "0x7f4adb2c5000": 96, "0x7f4adb2c7d60": 15, "0x7f4adb2f9cc0": 4, "0x7f4adb346980": 15, "0x7f4adb3479d0": 18, "0x7f4adb35f880": 83, "0x7f4adb3846a0": 42, "0x7f4adb384730": 42, "0x7f4adb3872b0": 42, "0x7f4adb387970": 42, "0x7f4adb387b50": 42, "0x7f4adb3c4a60": 16, "0x7f4adb430c70": 42, "0x7f4adb430fa0": 42, "0x7f4adb431030": 42, "0x7f4adb431ab0": 42, "0x7f4adb431b40": 42, "0x7f4adb433310": 42, "0x7f4adb433340": 42, "0x7f4adb433370": 42, "0x7f4adb433970": 42, "0x7f4adb4a4ca0": 16, "0x7f4adb4a52a0": 14, "0x7f4adb4a7f10": 35, "0x7f4adb4b43d0": 42, "0x7f4adb4b4400": 42, "0x7f4adb4b4a30": 42, "0x7f4adb4b5540": 42, "0x7f4adb4b5f30": 42, "0x7f4adb4b6ad0": 42, "0x7f4adb4b6ec0": 42, "0x7f4adb4b7040": 42, "0x7f4adb4b73a0": 2, "0x7f4adb4b7e80": 42, "0x7f4adb4b7ee0": 59, "0x7f4adb4ba650": 42, "0x7f4adb4ba6b0": 42, "0x7f4adb4bbdf0": 42, "0x7f4adb4bbe50": 42, "0x7f4adb4ea3e0": 15, "0x7f4adb658070": 35, "0x7f4adb65a650": 35, "0x7f4adb65a9b0": 56, "0x7f4adb65b160": 35, "0x7f4adb65e8f0": 4, "0x7f4adb694040": 42, "0x7f4adb695540": 42, "0x7f4adb697160": 42, "0x7f4adb6971c0": 42, "0x7f4adb697250": 42, "0x7f4adb6972b0": 42, "0x7f4adb697490": 42, "0x7f4adb697520": 42, "0x7f4adb6979a0": 42, "0x7f4adb697a00": 42, "0x7f4adb697c70": 42, "0x7f4adb697fa0": 42, "0x7f4adb699150": 42, "0x7f4adb699360": 42, "0x7f4adb699600": 42, "0x7f4adb699630": 42, "0x7f4adb699660": 42, "0x7f4adb6996f0": 42, "0x7f4adb699810": 42, "0x7f4adb6999f0": 42, "0x7f4adb69bfd0": 42, "0x7f4adb6d3df0": 77, "0x7f4adb6d3fa0": 16, "0x7f4adb718640": 56, "0x7f4adb718dc0": 59, "0x7f4adb719150": 15, "0x7f4adb71b370": 56, "0x7f4adb739e70": 27, "0x7f4adb7c2140": 42, "0x7f4adb7c3490": 42, "0x7f4adb7c39d0": 42, "0x7f4adb7c3be0": 11, "0x7f4adb83abc0": 15, "0x7f4adb84a9e0": 2, "0x7f4adb855cc0": 59, "0x7f4adb857fa0": 27, "0x7f4adb900160": 77, "0x7f4adb9a4bb0": 15, "0x7f4adb9a5ed0": 35, "0x7f4adb9ff4c0": 4, "0x7f4adba02530": 18, "0x7f4adba02800": 2, "0x7f4adbb8de40": 45, "0x7f4afd8a13c0": 83, "0x7f4afd953700": 59, "0x7f4afd987430": 61, "0x7f4afdc3f100": 96, "0x7f4afdc98100": 42, "0x7f4afdc98190": 42, "0x7f4afdc98310": 42, "0x7f4afdc985e0": 42, "0x7f4afdc986d0": 42, "0x7f4afdc98c40": 42, "0x7f4afdc98d00": 38, "0x7f4afdc98dc0": 42, "0x7f4afdc98e50": 42, "0x7f4afdc98f10": 42, "0x7f4afdc99030": 42, "0x7f4afdc99090": 42, "0x7f4afdc990f0": 42, "0x7f4afdc992d0": 42, "0x7f4afdc99690": 42, "0x7f4afdc99720": [33, 42], "0x7f4afdc99a80": 42, "0x7f4afdc99b40": 42, "0x7f4afdc99b70": 42, "0x7f4afdc99c00": 42, "0x7f4afdc99d20": 42, "0x7f4afdc99d50": 42, "0x7f4afdc99e10": 42, "0x7f4afdc99e70": 42, "0x7f4afdc99f90": 42, "0x7f4afdc9a020": 42, "0x7f4afdc9a080": 38, "0x7f4afdc9a3b0": 42, "0x7f4afdc9a590": 42, "0x7f4afdc9a620": 42, "0x7f4afdc9a6b0": 42, "0x7f4afdc9a860": 42, "0x7f4afdc9aaa0": 42, "0x7f4afdc9ab00": 42, "0x7f4afdc9abc0": 42, "0x7f4afdc9b130": 42, "0x7f4afdc9b160": 42, "0x7f4afdc9b1c0": 42, "0x7f4afdc9b2e0": 42, "0x7f4afdc9b3a0": 42, "0x7f4afdc9b430": 42, "0x7f4afdc9b610": 33, "0x7f4afdc9b7c0": 42, "0x7f4afdc9b910": 42, "0x7f4afdc9b970": 42, "0x7f4afdc9ba60": 38, "0x7f4afdc9bac0": 42, "0x7f4afdc9bc70": 42, "0x7f4afdc9bd00": 42, "0x7f4afdc9bd90": 42, "0x7f4afdc9bdf0": 42, "0x7f4afdc9be50": 42, "0x7f4afde85150": 51, "0x7f4afde865f0": 59, "0x7f4afdf40400": 65, "0x7f4afdf43ee0": 24, "0x7f4afdf84070": 42, "0x7f4afdf841c0": 42, "0x7f4afdf841f0": 42, "0x7f4afdf84250": 42, "0x7f4afdf842e0": 42, "0x7f4afdf84310": 42, "0x7f4afdf844c0": 42, "0x7f4afdf84520": 42, "0x7f4afdf84550": 42, "0x7f4afdf84640": 42, "0x7f4afdf84670": 42, "0x7f4afdf84760": 42, "0x7f4afdf848b0": 42, "0x7f4afdf84a30": 42, "0x7f4afdf84a60": 42, "0x7f4afdf84af0": 42, "0x7f4afdf84d30": 42, "0x7f4afdf84e80": 42, "0x7f4afdf84f10": 42, "0x7f4afdf85030": 42, "0x7f4afdf850c0": 42, "0x7f4afdf85120": 42, "0x7f4afdf851e0": 42, "0x7f4afdf85210": 42, "0x7f4afdf853c0": 42, "0x7f4afdf85480": 42, "0x7f4afdf85630": 42, "0x7f4afdf85720": 42, "0x7f4afdf858d0": 42, "0x7f4afdf85ab0": 42, "0x7f4afdf85b10": 42, "0x7f4afdf85b40": 42, "0x7f4afdf85ba0": 42, "0x7f4afdf85c60": 42, "0x7f4afdf85ea0": 42, "0x7f4afdf85ed0": 42, "0x7f4afdf85f90": 42, "0x7f4afdf86170": 42, "0x7f4afdf866b0": 42, "0x7f4afdf86830": 42, "0x7f4afdf86890": 42, "0x7f4afdf868c0": 42, "0x7f4afdf86950": 42, "0x7f4afdf869e0": 42, "0x7f4afdf86a70": 42, "0x7f4afdf86b60": 42, "0x7f4afdf86c50": 42, "0x7f4afdf86da0": 42, "0x7f4afdf86f20": 42, "0x7f4afdf86fb0": 42, "0x7f4afdf87250": 42, "0x7f4afdf87490": 42, "0x7f4afdf874c0": 42, "0x7f4afdf87580": 42, "0x7f4afdf87700": 42, "0x7f4afdf87880": 42, "0x7f4afdf878e0": 42, "0x7f4afdf87a90": 42, "0x7f4afdf87be0": 42, "0x7f4afdf87c70": 42, "0x7f4afdf87d00": 42, "0x7f4afdf87d60": 42, "0x7f4afdf87dc0": 42, "0x7f4afe0112a0": 16, "0x7f4afe013460": 17, "0x7f4afe03b430": 17, "0x7f4afe098040": 42, "0x7f4afe098220": 42, "0x7f4afe098280": 42, "0x7f4afe098370": 42, "0x7f4afe098670": 42, "0x7f4afe098820": 42, "0x7f4afe098910": 42, "0x7f4afe098970": 42, "0x7f4afe098a00": 42, "0x7f4afe098b20": 42, "0x7f4afe098c70": 42, "0x7f4afe098d90": 42, "0x7f4afe099090": 42, "0x7f4afe0990c0": 42, "0x7f4afe099120": 42, "0x7f4afe0992d0": 42, "0x7f4afe0993c0": 42, "0x7f4afe0993f0": 42, "0x7f4afe099450": 42, "0x7f4afe099600": 42, "0x7f4afe0996f0": 42, "0x7f4afe0997b0": 42, "0x7f4afe099990": 42, "0x7f4afe0999c0": 42, "0x7f4afe099a50": 42, "0x7f4afe099b10": 42, "0x7f4afe099b70": 42, "0x7f4afe099bd0": 42, "0x7f4afe099c30": 42, "0x7f4afe099c90": 42, "0x7f4afe099d50": 42, "0x7f4afe099f60": 42, "0x7f4afe099ff0": 42, "0x7f4afe09a020": 42, "0x7f4afe09a140": 42, "0x7f4afe09a440": 42, "0x7f4afe09a5f0": 42, "0x7f4afe09a620": 42, "0x7f4afe09a650": 42, "0x7f4afe09a6e0": 42, "0x7f4afe09a890": 42, "0x7f4afe09a8f0": 42, "0x7f4afe09aa40": 42, "0x7f4afe09aaa0": 42, "0x7f4afe09ab90": 42, "0x7f4afe09ace0": 42, "0x7f4afe09aec0": 42, "0x7f4afe09b010": 42, "0x7f4afe09b0d0": 42, "0x7f4afe09b220": 42, "0x7f4afe09b280": 42, "0x7f4afe09b340": 42, "0x7f4afe09b3a0": 42, "0x7f4afe09b520": 42, "0x7f4afe09b700": 42, "0x7f4afe09b9d0": 42, "0x7f4afe09ba60": 42, "0x7f4afe09bb50": 42, "0x7f4afe09bbe0": 42, "0x7f4afe09bd60": 42, "0x7f4afe0e8190": 52, "0x7f4afe0e8520": 52, "0x7f4afe0ea0b0": 52, "0x7f4afe0ea200": 52, "0x7f4afe0ea890": 17, "0x7f4afe184910": 52, "0x7f4afe1c0070": 42, "0x7f4afe1c0100": 42, "0x7f4afe1c0190": 42, "0x7f4afe1c01f0": 42, "0x7f4afe1c0250": 42, "0x7f4afe1c04c0": 42, "0x7f4afe1c04f0": 42, "0x7f4afe1c06d0": 42, "0x7f4afe1c0760": 42, "0x7f4afe1c07c0": 42, "0x7f4afe1c0970": 42, "0x7f4afe1c0a00": 42, "0x7f4afe1c0b50": 42, "0x7f4afe1c0d00": 42, "0x7f4afe1c0d30": 42, "0x7f4afe1c0dc0": 42, "0x7f4afe1c0e20": 42, "0x7f4afe1c0e50": 42, "0x7f4afe1c0f40": 42, "0x7f4afe1c0fa0": 42, "0x7f4afe1c1000": 42, "0x7f4afe1c1090": 42, "0x7f4afe1c12d0": 42, "0x7f4afe1c1360": 42, "0x7f4afe1c14e0": 42, "0x7f4afe1c17b0": 42, "0x7f4afe1c1870": 42, "0x7f4afe1c1930": 42, "0x7f4afe1c19c0": 42, "0x7f4afe1c1b40": 42, "0x7f4afe1c1c60": 42, "0x7f4afe1c1cc0": 42, "0x7f4afe1c2020": 42, "0x7f4afe1c2170": 42, "0x7f4afe1c21d0": 42, "0x7f4afe1c2260": 42, "0x7f4afe1c22c0": 42, "0x7f4afe1c25f0": 42, "0x7f4afe1c2620": 42, "0x7f4afe1c29b0": 42, "0x7f4afe1c2a10": 42, "0x7f4afe1c2bf0": 42, "0x7f4afe1c2c20": 42, "0x7f4afe1c2c80": 42, "0x7f4afe1c2d40": 42, "0x7f4afe1c2dd0": 42, "0x7f4afe1c2e00": 42, "0x7f4afe1c2ec0": 42, "0x7f4afe1c2f80": 42, "0x7f4afe1c30a0": 42, "0x7f4afe1c3130": 42, "0x7f4afe1c31c0": 42, "0x7f4afe1c3250": 42, "0x7f4afe1c34c0": 42, "0x7f4afe1c3520": 42, "0x7f4afe1c3580": 42, "0x7f4afe1c36a0": 42, "0x7f4afe1c3730": 42, "0x7f4afe1c3940": 42, "0x7f4afe1c3a00": 42, "0x7f4afe1c3a60": 42, "0x7f4afe1c3b80": 42, "0x7f4afe1c3be0": 42, "0x7f4afe1c3ca0": 42, "0x7f4afe1c3cd0": 42, "0x7f4afe1c3e80": 42, "0x7f4afe1c3fa0": 42, "0x7f4afe1d40d0": 17, "0x7f4afe222200": 65, "0x7f4afe25f5e0": 35, "0x7f4afe25f6a0": 43, "0x7f4afe3dd570": 71, "0x7f4afe504250": 42, "0x7f4afe5043a0": 42, "0x7f4afe5043d0": 42, "0x7f4afe504580": 42, "0x7f4afe5045b0": 42, "0x7f4afe504670": 42, "0x7f4afe5046a0": 42, "0x7f4afe5047f0": 42, "0x7f4afe504850": 42, "0x7f4afe504940": 42, "0x7f4afe504ac0": 42, "0x7f4afe504b50": 42, "0x7f4afe504bb0": 42, "0x7f4afe505150": 42, "0x7f4afe505180": 42, "0x7f4afe505300": 42, "0x7f4afe5053f0": 42, "0x7f4afe505570": 42, "0x7f4afe5055d0": 42, "0x7f4afe505630": 42, "0x7f4afe5056c0": 42, "0x7f4afe505810": 42, "0x7f4afe5058a0": 42, "0x7f4afe505960": 42, "0x7f4afe505b10": 42, "0x7f4afe505c00": 42, "0x7f4afe505c90": [42, 96], "0x7f4afe505cc0": 42, "0x7f4afe505ff0": 42, "0x7f4afe506050": 42, "0x7f4afe506170": 42, "0x7f4afe506230": 42, "0x7f4afe506260": 42, "0x7f4afe506290": 42, "0x7f4afe5062c0": [42, 52], "0x7f4afe506350": 42, "0x7f4afe506470": 42, "0x7f4afe506500": 42, "0x7f4afe5065f0": 42, "0x7f4afe506650": 42, "0x7f4afe5066e0": 42, "0x7f4afe506710": 42, "0x7f4afe5067a0": 42, "0x7f4afe506860": 42, "0x7f4afe506890": 42, "0x7f4afe5068c0": 42, "0x7f4afe506920": 42, "0x7f4afe506b30": 42, "0x7f4afe506e30": 42, "0x7f4afe506f50": 42, "0x7f4afe5070a0": 42, "0x7f4afe5070d0": 42, "0x7f4afe507190": 42, "0x7f4afe507430": 42, "0x7f4afe507670": 42, "0x7f4afe5076a0": 42, "0x7f4afe507850": 42, "0x7f4afe5078b0": 42, "0x7f4afe507940": 42, "0x7f4afe507a90": 42, "0x7f4afe507ac0": 42, "0x7f4afe507b20": 42, "0x7f4afe507bb0": 42, "0x7f4afe507be0": 42, "0x7f4afe507c10": 42, "0x7f4afe507e20": 42, "0x7f4afe581360": 42, "0x7f4afe58b190": 15, "0x7f4afe5c2020": 15, "0x7f4afe63aec0": 17, "0x7f4afe6784f0": 65, "0x7f4afe678bb0": 46, "0x7f4afe67a6e0": 65, "0x7f4afe67bb50": 46, "0x7f4afe6f40a0": 42, "0x7f4afe6f4280": 42, "0x7f4afe6f43d0": 42, "0x7f4afe6f4580": 42, "0x7f4afe6f4730": 42, "0x7f4afe6f4820": 42, "0x7f4afe6f48e0": 42, "0x7f4afe6f4a00": 42, "0x7f4afe6f4ac0": 42, "0x7f4afe6f4dc0": 42, "0x7f4afe6f4ee0": 42, "0x7f4afe6f4fa0": 42, "0x7f4afe6f4fd0": 42, "0x7f4afe6f5000": 42, "0x7f4afe6f5150": 42, "0x7f4afe6f51b0": 42, "0x7f4afe6f5300": 42, "0x7f4afe6f5450": 42, "0x7f4afe6f5510": 42, "0x7f4afe6f5600": 42, "0x7f4afe6f56c0": 42, "0x7f4afe6f56f0": 42, "0x7f4afe6f58a0": 42, "0x7f4afe6f59c0": 42, "0x7f4afe6f59f0": 42, "0x7f4afe6f5a80": 42, "0x7f4afe6f5b70": 42, "0x7f4afe6f5c90": 42, "0x7f4afe6f5cc0": 42, "0x7f4afe6f5d80": 42, "0x7f4afe6f5db0": 42, "0x7f4afe6f5e10": 42, "0x7f4afe6f5f00": 42, "0x7f4afe6f5f60": 42, "0x7f4afe6f6080": 42, "0x7f4afe6f63b0": 42, "0x7f4afe6f6560": 42, "0x7f4afe6f6590": 42, "0x7f4afe6f65c0": 42, "0x7f4afe6f6650": 42, "0x7f4afe6f6710": 42, "0x7f4afe6f6740": 42, "0x7f4afe6f6860": 42, "0x7f4afe6f68f0": 42, "0x7f4afe6f6950": 42, "0x7f4afe6f6f20": 42, "0x7f4afe6f6fe0": 42, "0x7f4afe6f7040": 42, "0x7f4afe6f7190": 42, "0x7f4afe6f71c0": 42, "0x7f4afe6f71f0": 42, "0x7f4afe6f7340": 42, "0x7f4afe6f75b0": 42, "0x7f4afe6f75e0": 42, "0x7f4afe6f76a0": 42, "0x7f4afe6f76d0": 42, "0x7f4afe6f7790": 42, "0x7f4afe6f7880": 42, "0x7f4afe6f7a60": 42, "0x7f4afe6f7a90": 42, "0x7f4afe6f7af0": 42, "0x7f4afe6f7b20": 42, "0x7f4afe6f7be0": 42, "0x7f4afe6f7c70": 42, "0x7f4afe6f7cd0": 42, "0x7f4afe6f7d00": 42, "0x7f4afe6f7dc0": 42, "0x7f4afe7463b0": 77, "0x7f4afe746d40": 77, "0x7f4afe750130": 42, "0x7f4afe750190": 42, "0x7f4afe7504f0": 42, "0x7f4afe7509d0": 42, "0x7f4afe750a00": 42, "0x7f4afe750a30": 42, "0x7f4afe750a90": 42, "0x7f4afe751120": 42, "0x7f4afe751150": 42, "0x7f4afe7512a0": 42, "0x7f4afe751360": 42, "0x7f4afe751420": 42, "0x7f4afe751600": 42, "0x7f4afe751870": 42, "0x7f4afe751a20": 42, "0x7f4afe751f00": 42, "0x7f4afe752020": 42, "0x7f4afe752110": 42, "0x7f4afe752230": 42, "0x7f4afe752290": 42, "0x7f4afe7524a0": 42, "0x7f4afe752770": 55, "0x7f4afe752830": 42, "0x7f4afe752950": 42, "0x7f4afe752980": 42, "0x7f4afe752aa0": 42, "0x7f4afe752b60": 42, "0x7f4afe752ce0": 42, "0x7f4afe752d40": 42, "0x7f4afe752e00": 42, "0x7f4afe752e30": 42, "0x7f4afe753220": 42, "0x7f4afe7532b0": 42, "0x7f4afe7532e0": 42, "0x7f4afe7533d0": 42, "0x7f4afe753430": 42, "0x7f4afe7534f0": 42, "0x7f4afe753790": 42, "0x7f4afe753c70": 42, "0x7f4afe753ee0": 42, "0x7f4afe753f40": 42, "0x7f4afe7841f0": 54, "0x7f4aff92cca0": 42, "0x7f4aff92d0c0": 42, "0x7f4aff92d240": 42, "0x7f4aff92d690": 42, "0x7f4aff92d8a0": 42, "0x7f4aff92d9f0": 42, "0x7f4aff92e3b0": 42, "0x7f4aff92ea70": 42, "0x7f4aff946170": 16, "0x7f4aff947640": 16, "0x7f4aff978d30": 35, "0x7f4aff984040": 42, "0x7f4aff984130": 42, "0x7f4aff984190": 42, "0x7f4aff9841c0": 42, "0x7f4aff984340": 42, "0x7f4aff984580": 42, "0x7f4aff9845b0": 42, "0x7f4aff984670": 42, "0x7f4aff984790": 42, "0x7f4aff9847f0": 42, "0x7f4aff984850": 42, "0x7f4aff984880": 42, "0x7f4aff984a30": 42, "0x7f4aff984bb0": 42, "0x7f4aff984be0": 42, "0x7f4aff984ca0": 42, "0x7f4aff984dc0": 42, "0x7f4aff984df0": 42, "0x7f4aff984e80": 42, "0x7f4aff984f40": 42, "0x7f4aff9850c0": 42, "0x7f4aff985120": 42, "0x7f4aff985150": 42, "0x7f4aff9852a0": 42, "0x7f4aff985360": 42, "0x7f4aff9853f0": 42, "0x7f4aff9857e0": 42, "0x7f4aff985990": 42, "0x7f4aff9859f0": 42, "0x7f4aff985b70": 42, "0x7f4aff985c30": 42, "0x7f4aff985e40": 42, "0x7f4aff986080": 42, "0x7f4aff9861d0": 42, "0x7f4aff986290": 42, "0x7f4aff986470": 42, "0x7f4aff9864a0": 42, "0x7f4aff9865c0": 42, "0x7f4aff9867a0": 42, "0x7f4aff9868f0": 42, "0x7f4aff986aa0": 42, "0x7f4aff986ad0": 42, "0x7f4aff986b30": 42, "0x7f4aff986c80": 42, "0x7f4aff986cb0": 42, "0x7f4aff986ce0": 42, "0x7f4aff986d10": 42, "0x7f4aff986dd0": 42, "0x7f4aff986ef0": 42, "0x7f4aff986fb0": 42, "0x7f4aff987100": 42, "0x7f4aff987190": 42, "0x7f4aff987370": 42, "0x7f4aff9873d0": 42, "0x7f4aff987460": 42, "0x7f4aff987640": 42, "0x7f4aff987760": 42, "0x7f4aff987af0": 42, "0x7f4aff987c10": 42, "0x7f4aff987e80": 42, "0x7f4aff987f70": 42, "0x7f4aff9905b0": 52, "0x7f4affb1fa00": 14, "0x7f4affb3c2e0": 17, "0x7f4affba9e10": 53, "0x7f4affcdc070": 42, "0x7f4affcdc190": 42, "0x7f4affcdc280": 42, "0x7f4affcdc460": 42, "0x7f4affcdc490": 42, "0x7f4affcdc4f0": 42, "0x7f4affcdc520": 42, "0x7f4affcdc5e0": 42, "0x7f4affcdc670": 42, "0x7f4affcdc730": 42, "0x7f4affcdc7c0": 42, "0x7f4affcdcbb0": 42, "0x7f4affcdcdf0": 42, "0x7f4affcdcfd0": 42, "0x7f4affcdd060": 42, "0x7f4affcdd090": 42, "0x7f4affcdd240": 42, "0x7f4affcdd390": 42, "0x7f4affcdd4b0": 42, "0x7f4affcdd4e0": 42, "0x7f4affcdd660": 42, "0x7f4affcdd6f0": 42, "0x7f4affcdd750": 42, "0x7f4affcdd960": 42, "0x7f4affcdd990": 42, "0x7f4affcddab0": 42, "0x7f4affcddcc0": 42, "0x7f4affcddd80": 42, "0x7f4affcdde70": 42, "0x7f4affcde350": 42, "0x7f4affcde4d0": 42, "0x7f4affcde560": 42, "0x7f4affcde8c0": 42, "0x7f4affcdece0": 42, "0x7f4affcded10": 42, "0x7f4affcded70": 42, "0x7f4affcdee90": 42, "0x7f4affcdef80": 42, "0x7f4affcdefe0": 42, "0x7f4affcdf190": 42, "0x7f4affcdf280": 42, "0x7f4affcdf310": 42, "0x7f4affcdf370": 42, "0x7f4affcdf580": 42, "0x7f4affcdf5e0": 42, "0x7f4affcdf7f0": 42, "0x7f4affcdf820": 42, "0x7f4affcdf970": 42, "0x7f4affcdf9d0": 42, "0x7f4affcdfa60": 42, "0x7f4affcdfa90": 42, "0x7f4affcdfac0": 42, "0x7f4affcdfb50": 42, "0x7f4affcdfbe0": 42, "0x7f4affcdfc70": 42, "0x7f4affcdfdf0": 42, "0x7f4affcdfe80": 42, "0x7f4affcdff70": 42, "0x7f4affcdffa0": 42, "0x7f4affe609d0": 61, "0x7f4affe62260": 4, "0x7f4affee0850": 35, "0x7f4affee0a60": 52, "0x7f4affee1360": 52, "0x7f4affee16f0": 35, "0x7f4affee18d0": 61, "0x7f4affee1930": 35, "0x7f4affee2b30": 52, "0x7f4affee30d0": 52, "0x7f4affef4040": 42, "0x7f4affef4130": 42, "0x7f4affef4160": 42, "0x7f4affef41f0": 42, "0x7f4affef42e0": 42, "0x7f4affef4310": 42, "0x7f4affef43a0": 42, "0x7f4affef4490": 42, "0x7f4affef47c0": 42, "0x7f4affef4910": 42, "0x7f4affef4a00": 77, "0x7f4affef4a90": 42, "0x7f4affef4c10": 42, "0x7f4affef4c40": 42, "0x7f4affef4d60": 42, "0x7f4affef4e80": 42, "0x7f4affef4ee0": 42, "0x7f4affef4f10": 42, "0x7f4affef5060": 42, "0x7f4affef50f0": 42, "0x7f4affef5240": 42, "0x7f4affef52a0": 42, "0x7f4affef54e0": 42, "0x7f4affef5510": 42, "0x7f4affef5660": 42, "0x7f4affef57b0": 42, "0x7f4affef5870": 42, "0x7f4affef58a0": 42, "0x7f4affef5a20": 42, "0x7f4affef5ba0": 42, "0x7f4affef5c60": 42, "0x7f4affef5ea0": 42, "0x7f4affef6050": 42, "0x7f4affef61d0": 42, "0x7f4affef6440": 42, "0x7f4affef6650": 42, "0x7f4affef6710": 42, "0x7f4affef67a0": 42, "0x7f4affef6890": 42, "0x7f4affef6950": 42, "0x7f4affef69e0": 42, "0x7f4affef6a10": 42, "0x7f4affef6ad0": 42, "0x7f4affef6bf0": 42, "0x7f4affef6c80": 42, "0x7f4affef6dd0": 42, "0x7f4affef6ec0": 42, "0x7f4affef6ef0": 42, "0x7f4affef6f80": 42, "0x7f4affef6fb0": 42, "0x7f4affef71f0": 42, "0x7f4affef7220": 42, "0x7f4affef7310": 42, "0x7f4affef74c0": 42, "0x7f4affef7520": 42, "0x7f4affef7700": 42, "0x7f4affef77c0": 42, "0x7f4affef7850": 42, "0x7f4affef78e0": 42, "0x7f4affef7940": 42, "0x7f4affef7ac0": 42, "0x7f4affef7df0": 42, "0x7f4affef7e20": 42, "0x7f4affef7ee0": 42, "0x7f4affef7f10": 42, "0x7f4affef7fd0": 42, "1": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 19, 20, 21, 23, 24, 25, 26, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 120, 121, 127, 129, 130, 131, 132, 136, 138, 142, 143, 145, 148, 150, 151, 158, 160, 161, 165, 166, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 181, 185, 187, 188, 190, 192, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 295, 296, 297, 298, 299, 300, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 320, 322, 323, 324, 325, 327, 332, 335, 339, 341, 346, 348, 350, 351, 355, 358, 360, 363, 366, 368, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 435, 436, 437, 438, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 458, 461, 462, 463, 464, 465, 470, 472, 474, 477, 478, 481, 483, 487, 491, 492, 507, 508, 509, 511], "10": [0, 2, 3, 4, 5, 6, 8, 10, 11, 12, 15, 16, 17, 19, 21, 22, 23, 25, 26, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 64, 65, 66, 68, 70, 73, 74, 78, 79, 81, 83, 89, 91, 93, 94, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 118, 121, 126, 135, 148, 158, 161, 165, 166, 168, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 185, 187, 194, 197, 198, 199, 201, 202, 204, 205, 206, 208, 209, 211, 212, 213, 214, 215, 217, 218, 219, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 240, 241, 244, 248, 250, 251, 252, 253, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 271, 277, 281, 282, 283, 284, 285, 287, 290, 291, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 332, 335, 348, 350, 351, 362, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 436, 455, 462, 463, 464, 465, 468, 469, 470, 473, 474, 477, 478, 481, 487, 491, 492, 501, 507, 508, 509, 511], "100": [3, 5, 7, 8, 16, 20, 28, 29, 32, 33, 35, 36, 41, 43, 44, 45, 47, 48, 52, 55, 56, 58, 60, 61, 62, 66, 69, 70, 73, 74, 75, 77, 78, 80, 81, 82, 83, 84, 86, 88, 90, 91, 92, 95, 98, 99, 107, 109, 110, 112, 113, 115, 121, 172, 181, 189, 194, 198, 202, 231, 238, 242, 248, 260, 279, 282, 305, 306, 307, 308, 310, 311, 329, 332, 340, 341, 350, 357, 370, 435, 478, 491, 492, 507, 509], "1000": [36, 52, 79, 96, 168, 181, 194, 197, 200, 202, 231, 238, 260, 348, 399, 462, 492], "10000": [45, 52, 58, 106, 109, 348, 399], "10000000000": 320, "1002": [36, 38, 48, 118, 205, 211, 212, 213, 214, 215, 236, 253, 263, 290, 351, 477, 509], "100319232": 72, "1004": [19, 29, 39, 48, 509], "100417536": 3, "10050888e": 3, "1006": [31, 48, 118, 199, 206, 250, 509], "100608": 492, "100671488": 104, "1007": [26, 48, 115, 118, 509], "100765": 492, "1008": [33, 35, 101, 118, 165, 241], "100a": 73, "100m": 68, "100mm": 88, "101": [14, 18, 25, 35, 40, 43, 44, 73, 118, 373, 374, 478, 491, 492], "1012": [64, 75, 509], "1015": [8, 17, 29, 509], "10159": [65, 491], "10159_task": 65, "1016": [3, 23, 26, 39, 43, 44, 51, 52, 54, 59, 61, 78, 102, 106, 118, 165, 166, 170, 172, 173, 176, 177, 185, 202, 204, 206, 208, 217, 219, 223, 224, 225, 230, 232, 252, 254, 255, 258, 262, 266, 267, 277, 281, 307, 308, 312, 327, 348, 373, 374, 399, 436, 478], "10174464": 104, "10176": 93, "102": [21, 29, 35, 43, 44, 64, 65, 73, 118, 227, 291, 301, 374, 491, 492, 509], "10216400e": 3, "102195200": 4, "1024": [155, 163, 194, 208, 255, 492, 501], "10242": [23, 24, 290, 293, 294, 301, 446, 459, 492], "10243494e": 3, "1026": 64, "102714": 56, "102a": 73, "103": [27, 29, 35, 44, 73, 118, 176, 187, 309, 491, 492, 509], "1033": 35, "10332877e": 3, "10341450e": 3, "10364176e": 3, "1038": [118, 229, 259, 269, 287], "104": [35, 44, 73, 255, 491, 492], "104073": 59, "1042": [44, 48, 103, 106, 115, 118, 509], "10426": [285, 302], "1045": [62, 94, 99, 509], "104535": 35, "104587264": 72, "1046": [61, 160, 163], "105": [15, 29, 35, 44, 65, 73, 491, 492, 509], "10509354": [118, 399], "1052": [103, 118], "1053": 64, "105373": 59, "1054": 492, "105434": 59, "105651": 59, "10567680": 18, "1058": [118, 202], "105981": 59, "106": [35, 44, 73, 118, 198, 202, 231, 233, 237, 260, 261, 264, 491, 492], "106070016": 104, "1062": 492, "106224": 93, "10625024": 6, "1063736": [3, 33, 34, 40, 101, 118, 218, 271], "1064": [118, 202], "106438": 59, "106460": 59, "1067": [65, 75, 509], "106742": 59, "106895": 59, "106a": 35, "106b": 35, "107": [35, 44, 47, 48, 73, 74, 491, 492, 509], "107012": 59, "107145": 59, "107229": 59, "1073": [118, 176, 187, 198, 202, 233, 261, 374], "10743319e": 3, "107488": 59, "107567": 59, "1078": 492, "108": [13, 29, 35, 44, 65, 73, 74, 491, 492, 509], "1080": [73, 118, 399], "108038": 59, "108046": 6, "108058": 59, "108176": 59, "1082": [160, 163], "108211": 59, "108325": 59, "108401": 59, "108440": 59, "10845494e": 3, "108591": 59, "108632": 59, "1087": [58, 62, 509], "108723": 59, "1088": 492, "10880": 93, "108875": 59, "108937": 59, "108969984": 72, "108990": 59, "109": [2, 35, 44, 59, 73, 93, 157, 163, 250, 261, 491, 492], "1090": [51, 492], "109066": 59, "109090": 59, "109104": 59, "1093": [118, 165, 198, 206, 231, 254, 260], "109387": 59, "1095": 492, "109540": 59, "109616": 59, "109654": 59, "1097": [118, 211, 212, 213, 214, 215, 236, 263, 290], "109731": 59, "109769": 59, "1098": 492, "10_task": 113, "10a": [64, 65, 73, 491], "10b": [64, 65, 73], "10c": 65, "10k": 113, "10mm": 52, "10th": 43, "10x10": [43, 44], "11": [3, 6, 11, 23, 29, 35, 41, 43, 44, 45, 47, 52, 56, 64, 65, 67, 68, 72, 73, 74, 75, 93, 101, 104, 107, 118, 122, 134, 136, 145, 148, 149, 150, 158, 198, 202, 205, 206, 217, 223, 224, 253, 254, 281, 293, 294, 301, 309, 336, 337, 338, 342, 343, 344, 350, 355, 363, 365, 366, 367, 370, 387, 388, 389, 435, 440, 453, 461, 465, 479, 480, 481, 482, 483, 484, 491, 492, 509, 511], "110": [35, 44, 58, 73, 88, 114, 118, 263, 269, 287, 491, 492], "11008": 93, "1101": [118, 351, 477], "11020": 107, "11021": 107, "110301": 59, "11051008": 72, "110644": 59, "11072": 93, "1109": [47, 51, 52, 118, 170, 177, 199, 202, 252, 312, 313, 464, 470], "111": [35, 44, 56, 64, 73, 114, 491, 492], "1111": [106, 118, 399], "1112": 197, "111591424": 104, "1116": 491, "112": [35, 44, 73, 95, 118, 373, 374, 491, 492], "11208": 93, "1122": 492, "1125": [118, 231, 237, 260, 264], "1126": [3, 33, 34, 40, 61, 101, 118, 187, 202, 209, 218, 252, 265, 271], "1128": [48, 509], "1129": 43, "112a": 35, "113": [35, 44, 73, 208, 491, 492], "113393664": 72, "113616": 64, "1139": [118, 202, 252], "114": [35, 44, 47, 73, 77, 148, 163, 491, 492], "1143": 492, "11431095e": 3, "114769": 35, "115": [35, 44, 54, 73, 102, 118, 148, 163, 491, 492], "1152": [73, 118, 231, 237, 260, 264, 492], "1155": [156, 163], "1156": 492, "11598509e": 3, "116": [35, 44, 73, 74, 109, 115, 199, 491, 492, 509], "1161": [6, 492], "11617": 91, "1162": [118, 228, 233, 261], "116290": [118, 232, 267], "11648": 93, "1165": [118, 231, 237, 260, 264], "117": [10, 35, 44, 73, 95, 157, 163, 194, 199, 238, 250, 491, 492], "1170": 492, "117126": [118, 208, 255], "1171599": [118, 187], "117161984": 104, "11752": 93, "11760": 93, "1177": [118, 312], "11778035e": 3, "11780525e": 3, "117825536": 72, "118": [35, 44, 73, 491, 492], "1180": [118, 312], "1181": 35, "1184": 104, "11872": 93, "1188": 491, "119": [35, 44, 73, 74, 79, 136, 163, 491, 492], "1190": 492, "11904": 93, "1194144": [61, 118, 209, 265], "11942": 10, "11968": 93, "119a": 35, "11a": [35, 64, 65, 73, 491], "11b": [35, 64, 65, 73, 491], "11c": [64, 65, 491], "12": [6, 11, 13, 27, 32, 34, 35, 41, 43, 44, 46, 47, 51, 52, 56, 59, 61, 62, 64, 65, 66, 69, 70, 71, 72, 73, 79, 80, 82, 84, 93, 98, 99, 101, 104, 107, 112, 113, 114, 118, 122, 125, 127, 128, 136, 138, 154, 159, 160, 161, 177, 178, 191, 194, 199, 202, 207, 233, 238, 250, 252, 259, 261, 264, 268, 285, 305, 306, 307, 308, 309, 310, 311, 332, 345, 346, 348, 370, 373, 374, 378, 381, 383, 384, 385, 386, 388, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 443, 444, 451, 452, 465, 475, 481, 483, 487, 491, 492, 509, 511], "120": [35, 44, 73, 86, 102, 118, 236, 263, 491, 492], "120138": [26, 118], "1204": [41, 48, 509], "1206": [118, 178, 187], "1207": [118, 178, 241, 244], "120742": 59, "12096": 11, "121": [35, 44, 68, 73, 491, 492], "12101375e": 3, "12107776": 10, "121180": 93, "12131685e": 3, "1214": 492, "1215": [64, 491, 492], "12156862745098039": 111, "1216": 492, "122": [35, 44, 65, 68, 73, 74, 122, 163, 194, 202, 238, 252, 268, 491, 492], "12224": 93, "122246": 59, "122257408": 72, "12229730e": 3, "1224": [65, 491, 492], "12250194e": 3, "122699776": 104, "123": [35, 44, 73, 255, 491, 492], "1230": 492, "123008": 93, "12308507e": 3, "123176": 93, "1232": [62, 509], "1233": 56, "12333e": 42, "12339767e": 3, "1238": [142, 163], "123e": 56, "124": [4, 35, 43, 44, 73, 491, 492], "1242": 179, "1243": [104, 115, 509], "1246": 492, "1247": [114, 115, 509], "125": [35, 43, 44, 46, 73, 74, 103, 118, 491, 492], "1250": 36, "1255": 492, "1256": [118, 217, 492], "1257": [107, 492], "126": [6, 35, 44, 59, 73, 93, 105, 114, 157, 163, 491, 492], "1261": 492, "12630704e": 3, "1265": [118, 217], "126713856": 72, "127": [35, 44, 73, 94, 145, 163, 491, 492], "1271": [118, 202], "1273": 492, "127426": 65, "12752": 93, "12757838e": 3, "127944": 56, "128": [35, 44, 66, 68, 70, 73, 86, 155, 163, 194, 208, 255, 491, 492, 501], "1280": 492, "12810046e": 3, "1282": [51, 118, 170, 313], "128245760": 104, "1285": [51, 118, 170, 313], "1285615": 252, "12883045e": 3, "1289": 492, "129": [35, 44, 73, 125, 163, 491, 492], "1290": 492, "1294": [118, 202], "1296": 65, "1298": 107, "12a": [64, 65, 73, 491], "12b": [64, 65], "12mm": 96, "12th": [118, 202], "13": [6, 11, 35, 38, 39, 48, 51, 55, 56, 59, 62, 64, 65, 73, 79, 93, 98, 99, 104, 107, 112, 118, 122, 128, 130, 132, 134, 136, 176, 203, 207, 228, 240, 250, 264, 267, 285, 305, 306, 307, 308, 310, 311, 312, 313, 316, 318, 319, 323, 332, 335, 350, 351, 366, 372, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 399, 436, 454, 463, 465, 468, 469, 477, 491, 492, 509], "130": [35, 44, 64, 73, 491, 492], "13040": [118, 233, 261], "13042393047259077": 71, "13043733e": 3, "13045": [118, 233, 261], "13049": 111, "13075598e": 3, "131": [35, 44, 73, 74, 118, 236, 263, 491, 492], "131260416": 72, "1314": 492, "132": [35, 44, 73, 491, 492], "1327": 492, "13276576e": 3, "1328": [47, 118, 177], "13284": 491, "133": [35, 44, 72, 73, 491, 492], "1335": 492, "1336": [151, 163], "1337": [32, 48, 509], "133758976": 104, "13382978e": 3, "1339": 492, "134": [35, 44, 54, 73, 95, 102, 118, 157, 163, 491, 492], "1340": [47, 118, 177], "13411213e": 3, "134263085": 72, "1344": 492, "13474242e": 3, "135": [35, 44, 73, 74, 87, 99, 491, 492, 509], "1350": [53, 169, 465, 467], "1350mm": [465, 467], "13516800": 22, "1355": 492, "1357": 492, "1358": [61, 118, 209, 265], "136": [35, 44, 73, 491, 492], "1361": [61, 118, 209, 265, 492], "13630354e": 3, "13674218e": 3, "137": [35, 44, 73, 74, 491, 492], "1370": [146, 163], "1371": [118, 187], "1372": 492, "1375": 492, "1377": 492, "13780826e": 3, "138": [35, 44, 65, 73, 491, 492], "1384": 492, "138706944": 104, "1389": 492, "139": [35, 44, 53, 73, 491, 492], "13936": 93, "1395": 492, "13951266": 18, "1396": 492, "1397": 492, "13a": [64, 491], "13b": 64, "13th": [51, 118, 170, 313], "14": [3, 4, 6, 11, 18, 19, 27, 29, 32, 34, 35, 40, 47, 50, 51, 53, 54, 55, 56, 58, 59, 61, 62, 64, 65, 71, 72, 73, 79, 91, 93, 104, 107, 113, 115, 118, 123, 125, 132, 141, 143, 144, 145, 148, 151, 163, 176, 202, 206, 231, 240, 254, 260, 305, 306, 307, 308, 310, 311, 312, 313, 332, 351, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 436, 454, 463, 465, 477, 491, 492, 509], "140": [35, 43, 44, 73, 74, 113, 491, 492], "14016": 93, "1402": 492, "1404": [64, 73], "1408": 492, "141": [35, 44, 73, 126, 163, 263, 491, 492], "1412": [62, 509], "1413": 55, "1414": 53, "141e": 56, "142": [35, 44, 73, 104, 136, 163, 491, 492], "14226735e": 3, "1423": [62, 115, 509], "1424": [54, 102], "142570": 93, "142599": 53, "14272": 93, "1429": [103, 118], "14299302e": 3, "143": [35, 44, 73, 74, 491, 492], "1431": 491, "1432": 118, "143288": 65, "14336": 93, "1435": 492, "1438": [103, 118, 492], "144": [35, 44, 73, 118, 204, 277, 491, 492], "144195584": 104, "14428080e": 3, "1444": [48, 509], "14448": 93, "1445": [34, 118], "1447": [3, 101], "1448": [3, 101], "1449": [3, 101], "145": [35, 44, 73, 118, 171, 491, 492], "1450": [3, 101], "1451": [3, 101], "1452": [3, 96, 101], "1458": [64, 492], "146": [35, 44, 73, 74, 139, 163, 491, 492], "1460": 492, "14638123e": 3, "14640": 93, "14647296": 6, "1466": 492, "1467": [62, 106, 118, 399, 509], "1468": 53, "147": [35, 44, 73, 491, 492], "1472": 492, "1476": [35, 73], "147a": 35, "148": [35, 44, 73, 194, 238, 491, 492], "1483": 492, "149": [10, 35, 44, 73, 74, 491, 492], "1491": 492, "149296": 35, "149553152": 104, "1497": 492, "14976": 93, "1498": [118, 228, 492], "14991383e": 3, "14a": [35, 64, 65], "14b": [64, 65], "14c": 64, "15": [6, 11, 13, 23, 25, 32, 34, 35, 46, 48, 51, 52, 54, 56, 64, 65, 68, 73, 74, 77, 79, 80, 82, 84, 86, 89, 91, 93, 96, 97, 104, 107, 112, 118, 122, 126, 129, 130, 135, 144, 148, 158, 161, 163, 199, 206, 240, 250, 262, 305, 306, 307, 308, 310, 311, 312, 313, 332, 351, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 436, 463, 465, 468, 469, 477, 491, 492, 509], "150": [27, 35, 44, 59, 61, 62, 72, 73, 118, 191, 436, 491, 492, 509], "1500": 90, "15034189e": 3, "150482": 35, "1507": [118, 228], "15088": 93, "151": [35, 44, 73, 74, 112, 491, 492], "1512": 73, "151677": 56, "152": [35, 44, 73, 118, 185, 194, 202, 227, 491, 492], "1523": [118, 145, 163, 176], "1527": 492, "152a": 35, "153": [35, 44, 73, 74, 491, 492], "15319040": 72, "15344068e": 3, "15345853e": 3, "1536": [146, 163, 492], "1539": 492, "153mb": 281, "154": [35, 44, 59, 73, 118, 373, 374, 436, 491, 492], "15426165e": 3, "15468947e": 3, "15491072": 104, "155": [35, 44, 73, 118, 217, 268, 491, 492], "1550": 492, "155009024": 104, "15536": 93, "155444": 56, "15583": 105, "155a": 35, "156": [35, 44, 50, 70, 73, 74, 84, 491, 492, 509], "15616": 93, "1565": [118, 198], "156604": 65, "15661644e": 3, "1567": [118, 198], "15680": 93, "157": [35, 44, 73, 79, 491, 492], "1570": 492, "157605": 65, "1577": 492, "157832": 65, "158": [35, 44, 73, 118, 436, 491, 492], "15805": 111, "1582": 492, "1583": [118, 187], "1585": [118, 187], "15886530e": 3, "158e": 56, "159": [35, 44, 73, 74, 491, 492], "1595": [146, 163], "1599": [29, 509], "15a": [64, 65, 73], "16": [6, 11, 27, 32, 34, 35, 36, 42, 43, 48, 51, 52, 55, 56, 57, 61, 64, 65, 66, 68, 69, 72, 73, 78, 79, 81, 82, 84, 86, 91, 93, 94, 99, 102, 104, 107, 109, 115, 149, 156, 163, 178, 191, 194, 197, 217, 234, 238, 259, 378, 381, 384, 386, 388, 465, 491, 492, 507, 509], "160": [35, 44, 53, 61, 73, 86, 118, 173, 209, 248, 265, 307, 308, 487, 491, 492], "1600": [10, 332, 346, 475, 492], "160110": [118, 269, 287], "16032": 93, "160407552": 104, "1606": [118, 171], "161": [35, 44, 73, 491, 492], "1617": 492, "1619": 492, "162": [35, 44, 73, 74, 118, 217, 491, 492], "1620": 6, "1621": 492, "162682": 52, "1627": 492, "163": [29, 35, 44, 59, 73, 81, 93, 491, 492, 509], "1631": 492, "1637": 492, "1638": 492, "163842": [290, 293, 294, 301, 446, 459], "163e": 56, "164": [23, 35, 44, 59, 73, 74, 93, 491, 492], "1640": 492, "16425360e": 3, "1646": 492, "16488704e": 3, "16491459e": 3, "165": [35, 44, 59, 73, 93, 491, 492], "166": [35, 44, 59, 73, 93, 118, 171, 491, 492], "166248448": 104, "1664": 492, "166999999999994": 58, "167": [35, 44, 59, 73, 74, 93, 194, 199, 238, 250, 491, 492], "1671": 492, "16720438e": 3, "1673": 492, "16784649e": 3, "168": [35, 44, 52, 56, 57, 58, 59, 61, 73, 91, 93, 169, 491, 492], "169": [35, 44, 73, 491, 492], "1691": 492, "1694": 492, "1699": 492, "16a": [64, 65, 73], "16b": 64, "16c": 64, "17": [6, 11, 26, 32, 35, 42, 48, 50, 56, 62, 64, 65, 72, 73, 82, 93, 104, 107, 115, 118, 132, 148, 161, 163, 194, 198, 199, 231, 237, 238, 250, 260, 264, 491, 492, 509], "170": [35, 44, 73, 74, 199, 491, 492], "1704": 492, "1705": [148, 163], "17097097e": 3, "170a": 35, "171": [33, 35, 44, 59, 73, 118, 199, 217, 374, 491, 492], "17135843e": 3, "1716": 492, "171720704": 104, "172": [35, 44, 73, 118, 173, 263, 307, 308, 491, 492], "17254901960784313": 111, "17267680e": 3, "1728": 492, "173": [35, 44, 73, 74, 491, 492], "1730": 492, "17327": 107, "17328": 107, "17329": 107, "17330": 107, "17331": 107, "17332": 107, "17333": 107, "17334": 107, "17335": 107, "17336": 107, "17337": 107, "17338": 107, "17339": 107, "17340": 107, "17341": 107, "17342": 107, "17343": 107, "17343079e": 3, "17344": 107, "17345": 107, "17346": 107, "17347": 107, "17348": 107, "17349": 107, "17350": 107, "17351": 107, "17352": 107, "174": [35, 44, 59, 73, 118, 373, 374, 491, 492], "17432332e": 3, "174325": 56, "175": [35, 44, 73, 491, 492], "1750": [27, 29, 509], "17557431e": 3, "17564075e": 3, "1757": 492, "17594471e": 3, "176": [35, 44, 73, 74, 105, 491, 492], "17600": 93, "17656157e": 3, "177": [35, 44, 73, 491, 492], "177160192": 104, "17736": 105, "1775": 492, "178": [35, 44, 73, 491, 492], "1780": 43, "17815456e": 3, "1789": 492, "179": [35, 44, 73, 118, 171, 206, 491, 492], "1792": 492, "179269": 65, "1796": 492, "17988368e": 3, "179998": 35, "17a": [64, 491], "17b": 491, "17networks_1": 11, "17networks_10": 11, "17networks_11": 11, "17networks_12": 11, "17networks_13": 11, "17networks_14": 11, "17networks_15": 11, "17networks_16": 11, "17networks_17": 11, "17networks_2": 11, "17networks_3": 11, "17networks_4": 11, "17networks_5": 11, "17networks_6": 11, "17networks_7": 11, "17networks_8": 11, "17networks_9": 11, "18": [6, 26, 35, 41, 48, 56, 58, 61, 64, 65, 73, 74, 93, 103, 104, 107, 112, 115, 118, 123, 141, 148, 158, 163, 192, 198, 202, 207, 217, 268, 452, 491, 492, 507, 509], "180": [35, 44, 73, 86, 118, 148, 163, 173, 202, 307, 308, 452, 454, 455, 491, 492], "180063": [118, 229, 259], "1804": 492, "18072": 93, "1808": 492, "1809": 64, "181": [35, 44, 73, 78, 118, 327, 491, 492], "18106707e": 3, "18128262e": 3, "1813": [77, 84, 509], "182": [35, 44, 73, 104, 113, 256, 257, 260, 491, 492], "1821": 35, "1822": 492, "18240": 93, "182566912": 104, "183": [35, 44, 73, 104, 491, 492], "1836": [73, 492], "184": [35, 44, 73, 491, 492], "1842": 492, "1845": 492, "18498704e": 3, "185": [35, 44, 73, 491, 492], "1851": 492, "18519467e": 3, "1856": 492, "186": [35, 44, 73, 77, 491, 492], "1861819": 20, "1866": 492, "1869": 492, "18696820e": 3, "187": [35, 44, 59, 73, 118, 373, 374, 491, 492], "18702336": 6, "18719264e": 3, "18728": 93, "187842560": 104, "188": [35, 44, 73, 74, 491, 492], "18822983e": 3, "1882989": [42, 46], "1888": [151, 163], "189": [35, 44, 73, 118, 351, 358, 477, 491, 492], "189168": 93, "1898": 492, "18a": [64, 65], "18b": 64, "18c": 64, "19": [6, 29, 33, 35, 42, 56, 59, 62, 64, 65, 72, 73, 75, 79, 93, 101, 104, 106, 107, 115, 118, 127, 130, 136, 138, 151, 163, 199, 200, 225, 228, 229, 231, 234, 235, 236, 237, 249, 250, 258, 259, 260, 263, 264, 288, 324, 325, 491, 492, 509], "190": [35, 44, 73, 491, 492], "190231": 93, "1905": 492, "1906": 492, "1908": 73, "190833": 93, "191": [35, 44, 61, 73, 74, 491, 492], "191002": 491, "19114114": 22, "1914": [118, 205, 253], "191511": 93, "1917": 492, "192": [35, 44, 54, 59, 62, 73, 86, 102, 118, 491, 492, 509], "1920": [93, 492], "19272": 93, "1928": [118, 205, 253], "19296": 93, "193": [35, 44, 73, 259, 491, 492], "193167360": 104, "19328": 93, "1935": [43, 118], "19386363e": 3, "19391827e": 3, "19392": 93, "194": [35, 44, 73, 118, 206, 491, 492], "1941": 492, "195": [35, 44, 59, 73, 74, 118, 206, 491, 492], "195093": 65, "1951": [43, 151, 163], "1952": [121, 151, 163], "1953": [151, 163], "1955": 492, "196": [35, 44, 73, 491, 492], "1964": [33, 35], "19685376": 72, "196909": 65, "196a": 35, "197": [20, 35, 44, 73, 194, 202, 238, 252, 358, 491, 492], "1971": 492, "1974": 492, "197878": 65, "19790146e": 3, "198": [35, 44, 73, 74, 259, 491, 492], "198082560": 104, "1983": [118, 399], "1984": 492, "1985": 492, "1987": 492, "199": [35, 44, 73, 491, 492], "1991": 492, "1993": 492, "19935700e": 3, "1994": [118, 351, 477], "19957887e": 3, "1997": [118, 151, 163, 202, 236, 263], "1998": [118, 199, 206, 250], "1999": [118, 132, 163, 206, 211, 212, 213, 214, 215, 219, 290, 492], "19a": [35, 64, 73], "19b": 35, "1a": [6, 35, 64, 65, 73, 104, 491], "1b": [6, 64, 65, 73, 491], "1c": [6, 64, 65, 73, 491], "1d": [54, 120, 134, 160, 163, 190, 192, 240, 309, 312, 313, 322, 324, 325, 328, 334, 345, 351, 352, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 410, 417, 421, 427, 430, 465, 466, 471, 476, 477, 485, 487], "1e": [32, 41, 42, 43, 52, 114, 228, 241, 242, 310, 311, 320, 355, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 451, 454, 458, 464, 470], "1e3": 79, "1e4": [41, 305, 306, 307, 308], "1f": [47, 452, 455], "1hz": 248, "1min": [56, 104], "1mm": [11, 127, 157, 163, 256, 257, 260, 297, 298, 300, 392], "1st": 58, "1x2": 44, "2": [2, 3, 4, 6, 7, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 85, 86, 89, 90, 93, 95, 96, 99, 101, 102, 103, 104, 105, 106, 107, 109, 112, 113, 115, 116, 118, 121, 123, 125, 126, 127, 132, 143, 145, 146, 148, 149, 156, 157, 158, 161, 165, 166, 170, 171, 172, 176, 177, 178, 179, 181, 183, 187, 188, 191, 192, 198, 199, 201, 202, 204, 205, 206, 210, 211, 212, 213, 214, 215, 217, 219, 225, 226, 228, 229, 231, 233, 235, 236, 237, 240, 241, 242, 246, 247, 248, 250, 251, 252, 253, 254, 255, 258, 259, 260, 261, 263, 264, 268, 269, 270, 271, 273, 277, 282, 284, 289, 290, 295, 296, 299, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 322, 323, 324, 325, 332, 334, 335, 339, 341, 345, 346, 348, 349, 351, 357, 358, 361, 362, 363, 364, 367, 368, 370, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 398, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 435, 437, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 458, 464, 465, 467, 468, 469, 471, 474, 477, 478, 487, 491, 492, 507, 508, 509, 511], "20": [2, 6, 8, 22, 24, 25, 29, 32, 33, 35, 41, 42, 47, 51, 53, 55, 57, 60, 61, 64, 65, 68, 71, 72, 73, 74, 79, 80, 83, 84, 93, 96, 97, 103, 104, 107, 110, 118, 125, 136, 141, 161, 163, 165, 169, 171, 194, 197, 198, 202, 233, 238, 252, 261, 305, 306, 307, 308, 310, 311, 312, 313, 487, 491, 492, 501, 509], "200": [35, 44, 45, 46, 73, 96, 107, 118, 165, 194, 198, 202, 238, 240, 248, 252, 260, 279, 310, 311, 491, 492], "2000": [5, 45, 52, 94, 108, 118, 151, 154, 163, 168, 190, 236, 263], "200007": [118, 236, 263], "2001": [3, 33, 34, 40, 101, 106, 118, 120, 175, 186, 190, 199, 218, 250, 271, 399], "2002": [118, 199, 250], "2003": [118, 319, 323, 492], "2004": [103, 118, 206, 254, 324, 325], "2005": [118, 217, 374], "2006": [118, 176, 187, 202, 210, 217, 309, 324, 325], "2007": [68, 74, 118, 204, 217, 228, 277, 357, 373, 374, 478], "2008": [30, 48, 116, 118, 165, 185, 192, 194, 281, 348, 353, 370, 376, 379, 385, 399, 427, 451, 456, 492, 509], "2009": [2, 22, 118, 126, 154, 157, 163, 185, 187, 194, 198, 202, 206, 219, 238, 254, 261, 272, 273, 295, 296, 297, 298, 299, 300, 348, 399, 501], "2009a": 202, "201": [35, 40, 44, 73, 74, 491, 492], "2010": [3, 4, 23, 39, 40, 51, 61, 118, 143, 163, 165, 170, 172, 202, 206, 219, 240, 241, 252, 262, 265, 312], "2011": [26, 39, 47, 52, 61, 118, 121, 126, 134, 143, 163, 165, 172, 176, 177, 194, 202, 219, 223, 225, 226, 231, 233, 238, 251, 258, 260, 261, 264, 266, 282, 284, 373, 374, 501], "2012": [26, 52, 103, 118, 160, 163, 166, 171, 177, 178, 187, 194, 202, 223, 227, 241, 244, 253, 373, 374, 492, 501], "2013": [59, 118, 151, 163, 165, 166, 176, 177, 197, 202, 208, 225, 248, 252, 258, 373], "2014": [52, 103, 106, 118, 168, 169, 176, 177, 198, 373, 399, 465], "2015": [21, 118, 121, 122, 123, 124, 125, 126, 136, 137, 163, 177, 194, 198, 204, 225, 226, 238, 258, 277, 279, 282, 284, 373, 374], "20150533e": 3, "20153834": [51, 118, 170, 312], "2016": [51, 103, 118, 138, 139, 140, 141, 142, 163, 170, 269, 287, 313, 436], "20169463e": 3, "2017": [59, 118, 143, 144, 145, 163, 171, 173, 194, 204, 229, 231, 238, 259, 260, 277, 307, 308, 373, 374, 436, 492], "2018": [52, 59, 78, 118, 146, 147, 148, 163, 173, 194, 207, 208, 229, 238, 259, 260, 268, 307, 308, 327, 351, 374, 464, 470, 477], "2019": [52, 54, 102, 118, 149, 150, 151, 163, 232, 267, 435, 464, 470, 492], "202": [35, 44, 73, 491, 492], "2020": [118, 152, 153, 154, 163, 208, 232, 255, 267], "20200": 93, "20206": 114, "20207": 114, "20208": 114, "20209664": 10, "2021": [155, 156, 157, 163, 199, 200, 205, 225, 228, 229, 231, 234, 235, 236, 237, 249, 250, 253, 258, 259, 260, 263, 264, 288, 492], "2022": [26, 118, 158, 159, 160, 163], "20224": 93, "2023": [26, 118, 127, 128, 129, 163], "2024": [130, 131, 132, 133, 163], "2025": [35, 64, 70, 73, 104, 113, 134, 135, 151, 163, 491, 492], "202624": 53, "2028": [151, 163], "2029": 492, "203": [35, 44, 73, 74, 491, 492], "2031": 492, "2033": 492, "203448320": 104, "2037": 492, "204": [35, 44, 73, 115, 491, 492, 509], "2041": [52, 118], "2043": 492, "2047": 492, "2048": 492, "20480": [23, 24, 93], "20484": [23, 24, 70, 113, 114, 483, 491, 492], "204891": 35, "2049": [52, 118], "20499": [118, 202], "205": [35, 44, 50, 73, 109, 491, 492], "20503": [118, 202], "2052": [73, 151, 163, 492], "2053": 492, "2054": 492, "205584": 35, "2057": [151, 163], "2058": 492, "20590557e": 3, "206": [35, 44, 73, 118, 232, 267, 491, 492], "20610307e": 3, "2063": [151, 163], "2064": 492, "20691790": [118, 172], "206928": 56, "207": [32, 35, 44, 73, 74, 118, 206, 491, 492], "2070": 492, "2072576": 18, "20736": 93, "2074": 492, "208": [35, 44, 73, 107, 115, 118, 165, 240, 491, 492, 509], "2083": [151, 163], "2088": 93, "208945152": 104, "209": [35, 44, 73, 491, 492], "2090": [151, 163], "20922368": 104, "2093": 201, "2096": [118, 166], "20a": [35, 64, 73], "20b": [35, 73], "20c": [35, 73], "20mm": [97, 187], "21": [6, 18, 26, 29, 35, 44, 48, 57, 61, 64, 65, 68, 72, 73, 79, 93, 94, 98, 99, 104, 107, 130, 138, 156, 163, 194, 217, 238, 491, 492, 501, 509], "210": [6, 23, 35, 44, 65, 73, 74, 110, 114, 115, 118, 219, 351, 477, 491, 492, 509], "2104": 492, "2106": [118, 166], "2107": [151, 163], "211": [35, 44, 46, 73, 491, 492], "2110": 492, "2112": 492, "2113378": [47, 118, 177], "2118": [151, 163], "212": [35, 44, 46, 70, 73, 74, 81, 259, 491, 492], "21211738e": 3, "2123": 42, "2123327": 42, "2128": 492, "213": [35, 44, 73, 491, 492], "2131": [43, 151, 163, 492], "21333": [118, 205, 253], "2136": 492, "2138": [151, 163], "213951": 6, "21396596e": 3, "214": [35, 44, 73, 491, 492], "2142": [118, 202, 373, 374], "2144": 61, "214417408": 104, "21449": 492, "2148": 492, "215": [35, 44, 73, 74, 491, 492], "21515628e": 3, "2152": 492, "2153": 492, "2154": [118, 202, 373, 374, 492], "2155": 492, "2157": [151, 163], "216": [3, 32, 35, 44, 73, 491, 492], "2162": 492, "2163": [118, 492], "216436": 93, "21653723": [118, 231, 237, 260, 264], "2166": [151, 163], "21663040e": 3, "2167": 492, "216765": 65, "2169": [151, 163], "217": [35, 44, 61, 73, 491, 492], "21713274e": 3, "2172": [151, 163], "2175": 492, "2176": 492, "2177": [118, 151, 163, 492], "21781": [51, 91], "218": [35, 44, 73, 74, 256, 257, 260, 491, 492], "2181": 492, "2186": 492, "219": [35, 44, 73, 491, 492], "2194": 492, "2195": [151, 163], "21953389e": 3, "2196": 73, "219713": 59, "21984256e": 3, "219889664": 104, "21a": [35, 64, 73], "21b": 64, "21c": 64, "22": [6, 12, 13, 29, 31, 32, 35, 48, 64, 65, 72, 73, 93, 104, 107, 112, 118, 132, 138, 149, 158, 163, 206, 254, 353, 491, 492, 509], "220": [35, 44, 73, 491, 492], "22016": 492, "2202": 492, "22033678e": 3, "220446049250313e": 82, "2207": 492, "2209": 118, "22091805e": 3, "221": [35, 44, 73, 74, 118, 208, 255, 491, 492], "22103e": 46, "2212": [151, 163], "221217": 59, "2214": [151, 163], "22197771e": 3, "222": [35, 44, 73, 491, 492], "2221": [151, 163], "2224": 492, "2229": 118, "223": [35, 44, 58, 62, 70, 73, 75, 118, 219, 491, 492, 509], "22306816": 22, "2231": [151, 163], "2234": 492, "22347125e": 3, "2235": [151, 163, 492], "223608832": 4, "2239": 492, "223948": 35, "224": [35, 44, 73, 74, 491, 492], "2240": [151, 163, 492], "22400087e": 3, "2241": 64, "2242": 492, "2243": 492, "2245": 492, "2246": 492, "2248": [151, 163], "225": [35, 44, 73, 491, 492], "2251": 492, "225345536": 104, "2255": [151, 163], "225659": 93, "225935360": 3, "226": [35, 44, 73, 491, 492], "22603797e": 3, "22620685e": 3, "2264": 492, "22689532e": 3, "2269": 492, "227": [35, 44, 73, 74, 491, 492], "2272": [152, 163], "2274": 492, "2277": 492, "227700": 65, "2278": 492, "22782553e": 3, "22788": 65, "228": [35, 44, 73, 491, 492], "22802": 492, "2282": [158, 163], "22896640": 6, "228e": 56, "229": [35, 44, 73, 259, 491, 492], "2290": [152, 163], "229184": 53, "2295": 64, "2299": [154, 163], "22a": [64, 65], "22b": 64, "23": [6, 35, 64, 65, 72, 73, 74, 93, 103, 104, 107, 118, 202, 233, 252, 261, 311, 374, 491, 492], "230": [35, 44, 73, 74, 491, 492], "2300": [153, 163], "2302": [153, 163], "23027497e": 3, "2304": [154, 163, 492], "230440960": 104, "23065927e": 3, "2307": [154, 163], "2308": [153, 163], "2309": 492, "231": [35, 44, 73, 491, 492], "23104": 93, "2312": [153, 163, 492], "2313": 35, "2319": 492, "232": [35, 44, 59, 73, 491, 492], "2325": 492, "23255511e": 3, "23264": 93, "2327": [154, 163], "23291157e": 3, "232974": 65, "233": [35, 44, 73, 358, 491, 492], "23348016e": 3, "23391036e": 3, "234": [35, 44, 73, 74, 491, 492], "23404708e": 3, "2346": [96, 99, 509], "23477569e": 3, "23478700e": 3, "23488": 492, "235": [35, 44, 73, 491, 492], "23552": 93, "2358": 492, "235864064": 104, "236": [10, 35, 44, 73, 74, 491, 492], "236279": 59, "23640": 104, "23645690e": 3, "2368": 492, "237": [35, 44, 73, 491, 492], "237783": 59, "2379": 492, "238": [2, 8, 35, 44, 73, 118, 236, 263, 491, 492, 509], "2385": 492, "2388": 492, "239": [35, 44, 73, 491, 492], "23919886e": 3, "2395": 492, "23a": [64, 73], "23b": 64, "24": [17, 29, 35, 54, 58, 61, 62, 64, 65, 71, 72, 73, 93, 104, 107, 112, 115, 129, 156, 163, 332, 334, 335, 339, 373, 374, 491, 492, 509], "240": [35, 44, 73, 491, 492], "24000": 93, "2401": 492, "24084480": 72, "2409": 492, "241": [35, 44, 73, 491, 492], "2410": 492, "2411": 492, "241205248": 104, "24171964e": 3, "242": [35, 44, 73, 118, 236, 263, 491, 492], "2425": [3, 33, 34, 40, 101, 118, 218, 271], "24256": [52, 94, 492], "2429": [153, 163], "243": [26, 35, 44, 73, 491, 492], "2430": [3, 33, 34, 40, 101, 118, 218, 271], "2432": 492, "24359": 105, "244": [35, 44, 73, 491, 492], "2440": 492, "24428": 91, "2446": 492, "2449": 492, "24496726e": 3, "245": [35, 44, 73, 491, 492], "2453": 492, "246": [35, 44, 73, 74, 491, 492], "2462": 492, "2465": 492, "246530048": 104, "2466": 492, "2467": 492, "247": [35, 44, 73, 491, 492], "2471": 492, "247761e": 51, "2478": 492, "2479": 492, "248": [35, 44, 73, 74, 491, 492], "24809": 91, "2482": 492, "2485": 492, "249": [35, 44, 73, 491, 492], "24913490e": 3, "2494": 492, "2496": 492, "24a": [35, 65], "24b": 35, "25": [16, 24, 32, 34, 35, 38, 43, 44, 48, 64, 65, 66, 73, 79, 93, 96, 97, 101, 104, 107, 109, 122, 163, 166, 198, 279, 322, 324, 325, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 437, 449, 457, 459, 460, 461, 491, 492, 509], "250": [26, 35, 44, 68, 73, 118, 491, 492], "2506": 492, "2509": [154, 163], "251": [35, 44, 73, 74, 491, 492], "2511": 492, "25184": 93, "251e": 56, "252": [35, 44, 73, 105, 115, 491, 492, 509], "2520": 491, "252100608": 104, "253": [35, 44, 45, 48, 73, 491, 492, 509], "2531": 492, "2532": [156, 163], "2539": 492, "2539520": 6, "254": [35, 44, 73, 74, 122, 163, 491, 492], "2543": 492, "2544": 492, "254408": 35, "255": [35, 44, 73, 157, 163, 491, 492], "2551": 492, "25515834e": 3, "2553": [155, 163, 492], "2555": 492, "256": [4, 13, 35, 44, 73, 86, 155, 163, 194, 208, 255, 264, 491, 492, 501], "2560": 492, "25603468e": 3, "2561": 492, "25610954e": 3, "2562": [290, 293, 294, 301, 459], "2565": 492, "2567": [155, 163], "257": [35, 44, 73, 74, 491, 492], "257638400": 104, "257976e": 51, "258": [35, 44, 491, 492], "2588": 492, "259": [35, 44, 491, 492], "25918984e": 3, "2593": 33, "2594": 492, "25976832": 10, "2598": 492, "25a": [64, 65, 73], "26": [6, 8, 26, 35, 44, 64, 65, 71, 72, 73, 74, 75, 77, 93, 98, 104, 107, 141, 163, 466, 491, 492, 509], "260": [35, 44, 74, 491, 492], "2606": [155, 163], "2608": 492, "261": [35, 44, 118, 176, 491, 492], "2617": 492, "2619": [155, 163], "262": [35, 44, 118, 491, 492], "2622": [155, 163], "2624": 492, "26240": 93, "262979584": 104, "263": [35, 44, 259, 491, 492], "2630": 492, "2635": 492, "2636": [103, 118, 171], "2637": 492, "263e": 56, "264": [35, 44, 61, 74, 230, 266, 491, 492], "2643": [103, 118, 155, 163, 171], "2645": 362, "26476544": 104, "2649": 492, "265": [35, 44, 491, 492], "2650": 492, "2655": [158, 163], "266": [35, 44, 74, 491, 492], "2663": 492, "2664": 73, "2669": [155, 163], "267": [35, 44, 118, 373, 374, 491, 492], "2674": [155, 163, 492], "2675": 112, "2676": 112, "2678": 492, "26795880e": 3, "268": [28, 29, 35, 44, 491, 492, 509], "26816": 93, "268386304": 104, "2684": [155, 163], "2688": 492, "269": [35, 44, 74, 118, 176, 491, 492], "269133": 6, "2696": [155, 163], "2697": [155, 163], "26a": 65, "27": [6, 15, 16, 17, 18, 23, 29, 35, 64, 65, 72, 73, 92, 93, 95, 104, 107, 118, 202, 210, 374, 465, 467, 491, 492, 507, 509], "270": [35, 44, 452, 454, 455, 491, 492], "2702": [155, 163], "27048": 93, "270521": 65, "2707": [156, 163], "271": [35, 44, 491, 492], "27115520": 6, "2712": [155, 163], "2714": [155, 163], "2715": [127, 160, 163], "2717": 492, "2719": [155, 163, 492], "272": [35, 44, 118, 211, 212, 213, 214, 215, 290, 491, 492], "2723": [157, 163], "2725": 492, "273": [35, 44, 118, 199, 250, 491, 492], "2730": [156, 163], "273170432": 104, "2732": [156, 163], "27356275e": 3, "2736": 65, "2738": [157, 163], "274": [35, 44, 491, 492], "27425641e": 3, "2743": 492, "2745": [156, 163], "275": [35, 44, 74, 491, 492], "2750": 492, "2752": 492, "2755": [157, 163, 492], "2757": 492, "276": [35, 44, 491, 492], "2767": [156, 163], "27684": 73, "2769": 492, "277": [35, 44, 118, 373, 374, 491, 492], "27700304e": 3, "27734375": 111, "2774": 492, "2775": 492, "2778": 36, "278": [35, 44, 74, 491, 492], "2783": 492, "278528000": 104, "2789": 492, "279": [35, 44, 491, 492], "2790": [156, 163], "27900": 65, "2792": [156, 163], "279282": 35, "2797": 492, "2798": [156, 163], "27a": [65, 73], "27b": 65, "27c": 65, "27mm": [465, 467], "28": [16, 29, 35, 48, 61, 65, 73, 91, 93, 104, 107, 118, 122, 148, 163, 201, 231, 251, 260, 491, 492, 509], "280": [35, 44, 491, 492], "28008": [73, 491], "28029509e": 3, "2804": [129, 163], "2805": [156, 163], "28051240e": 3, "2806": [156, 163, 492], "280625": 51, "2807": 492, "28087174e": 3, "28092419e": 3, "281": [35, 44, 491, 492], "2810": [156, 163], "28104568e": 3, "2815": [156, 163], "2815524": [52, 118, 464, 470], "2816": 492, "2818": 112, "282": [35, 44, 491, 492], "2821": [156, 158, 163], "2823": 492, "2826": [156, 163, 492], "28267": 53, "2827": 492, "2828": [118, 176], "2829": [158, 163], "283": [35, 44, 491, 492], "2831": [156, 163], "2833": [130, 163], "2834": 112, "2835": 492, "2836": 492, "283918336": 104, "284": [35, 44, 68, 74, 118, 211, 212, 213, 214, 215, 290, 491, 492], "28483584": 72, "285": [5, 8, 35, 44, 491, 492, 509], "2858": [156, 163], "2859": [158, 163], "286": [35, 44, 491, 492], "2860": 43, "2867": [156, 163], "286718": 65, "2868": [156, 163], "2869": [156, 163], "287": [7, 8, 35, 44, 492, 509], "28703056e": 3, "28728127e": 3, "2875": [157, 163], "2876": [157, 163], "28797529e": 3, "288": [35, 44, 51, 68, 73, 74, 118, 170, 312, 491, 492], "2880": [158, 163, 492], "289": [35, 44, 97, 99, 118, 199, 250, 492, 509], "2890": 492, "2892": [21, 51, 53], "289226752": 104, "28a": [65, 73, 491], "28b": 73, "29": [21, 35, 38, 64, 65, 70, 72, 73, 74, 75, 82, 83, 84, 88, 93, 99, 104, 107, 136, 163, 491, 492, 509], "290": [35, 44, 492], "2900": [157, 163], "2902": [158, 163], "2904": [157, 163, 492], "291": [35, 44, 68, 74, 492], "291168628": 3, "29129529e": 3, "2916": 73, "29172532e": 3, "2919": 492, "292": [35, 44, 118, 399, 492], "29243767e": 3, "2928": [157, 163, 492], "292987": 35, "293": [3, 33, 34, 35, 40, 44, 68, 74, 101, 118, 218, 271, 492], "2934": 492, "2939": 492, "293e": 56, "294": [6, 35, 44, 492], "2941": [157, 163], "2942": [158, 163], "2944": [157, 163, 492], "2945": 492, "294584320": 104, "2946": [158, 163], "294655": 51, "295": [35, 44, 492], "29515072e": 3, "2953": [37, 48, 159, 163, 509], "296": [35, 44, 68, 74, 492], "2962": 492, "2965": [158, 163], "297": [35, 44, 492], "29727730e": 3, "297e": 56, "298": [35, 44, 118, 399, 492], "29801": 51, "2981888": 72, "2986": 492, "299": [35, 44, 51, 118, 170, 312, 492], "2993": [62, 509], "2994": 50, "299562": 35, "299974656": 104, "29a": 35, "29b": 35, "2a": [6, 35, 64, 65, 73, 104, 491], "2a2e5a5707983d509d9319c692c867ab": 10, "2acca4": 11, "2b": [6, 35, 64, 65, 73, 104, 491], "2c": [35, 64, 65, 73, 491], "2d": [41, 54, 57, 86, 93, 94, 101, 107, 119, 160, 163, 171, 174, 189, 192, 241, 242, 243, 244, 245, 312, 313, 319, 328, 345, 351, 352, 353, 357, 358, 359, 363, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 400, 402, 403, 404, 405, 406, 407, 408, 409, 414, 416, 418, 420, 422, 424, 426, 435, 443, 462, 463, 464, 465, 471, 472, 481, 485, 487, 498], "2f": [32, 34, 44, 45, 46, 47, 52, 60, 91], "2g": [401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 441, 443, 444, 446, 450, 451, 452, 454, 455], "2min": [51, 104], "2mm": [11, 22, 59, 93, 127, 157, 163, 166, 176, 255, 256, 257, 492], "2nd": [3, 27, 31, 32, 34, 35, 36, 37, 38, 39, 41, 271, 359, 363], "2t": 234, "2x1": 44, "2x2": [44, 149, 163, 410, 412, 415, 429, 434, 441, 444, 449, 450, 451, 507], "3": [2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 26, 27, 29, 32, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 56, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 101, 102, 103, 104, 105, 107, 109, 112, 114, 115, 118, 122, 126, 127, 131, 132, 135, 138, 141, 142, 145, 148, 149, 150, 151, 156, 157, 158, 159, 161, 165, 169, 171, 176, 177, 180, 181, 187, 191, 192, 194, 198, 199, 202, 205, 206, 207, 211, 212, 213, 214, 215, 217, 219, 225, 231, 236, 237, 238, 240, 241, 242, 246, 247, 248, 252, 253, 255, 258, 260, 262, 263, 264, 268, 269, 282, 284, 287, 290, 291, 305, 306, 307, 308, 309, 310, 311, 312, 313, 322, 324, 325, 327, 332, 334, 335, 339, 346, 349, 350, 358, 360, 362, 363, 366, 368, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 393, 394, 396, 398, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 432, 434, 437, 441, 443, 444, 447, 449, 450, 451, 452, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 470, 473, 475, 487, 491, 492, 494, 507, 508, 509, 511], "30": [3, 6, 33, 35, 36, 38, 43, 47, 48, 51, 54, 60, 64, 65, 66, 69, 72, 73, 90, 93, 102, 104, 107, 112, 118, 138, 148, 161, 163, 177, 249, 307, 308, 322, 324, 325, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 473, 491, 492, 509], "300": [28, 33, 35, 44, 48, 58, 64, 70, 71, 75, 103, 194, 198, 232, 238, 260, 267, 279, 492, 509], "3000": 52, "3003": [158, 163], "3008": [158, 163, 492], "3009": [158, 163], "301": [35, 44, 492], "3010": [158, 163, 492], "3013": [158, 163], "3015": [158, 163], "3016": [158, 163], "30176409": 6, "302": [35, 44, 122, 163, 492], "30218247e": 3, "3025": [158, 163], "3026": [158, 163], "303": [35, 44, 492], "3030": [160, 163], "3033": [158, 163], "3035": [158, 163], "3036": [158, 163], "3037": 492, "30382": 46, "3039": [52, 62, 158, 163, 509], "304": [35, 44, 118, 177, 492], "3040": [91, 492], "3041": 112, "3042": [112, 158, 163], "3043": [48, 509], "3044": 42, "3045": 492, "305": [35, 44, 492], "305233920": 104, "3054": 492, "30542517e": 3, "306": [35, 44, 492], "3061": [158, 163], "3063808": 102, "3065": [158, 163, 492], "307": [35, 44, 492], "3072": 492, "3073": [158, 163], "3077": [158, 163], "3078": [158, 163], "308": [35, 44, 492], "308056": 65, "3081": [158, 163], "3082": [158, 163], "3084": 492, "3085": 492, "3086": 492, "3087": 492, "3089": 492, "308e": 56, "309": [35, 44, 118, 204, 277, 492], "3090": [158, 163], "3093": [158, 163, 492], "3095": [118, 231, 260, 492], "3096": 65, "3098": [159, 163], "30t14": [35, 491], "30t15": [64, 70, 73, 104, 113], "31": [35, 42, 43, 48, 64, 65, 70, 72, 73, 84, 89, 93, 99, 104, 118, 177, 217, 233, 261, 491, 492, 509], "310": [3, 35, 44, 492], "3102": [130, 163], "310329344": 104, "3105": [127, 163, 179], "3106": [158, 163], "310882": 93, "3109": [158, 163, 492], "311": [35, 44, 78, 84, 492, 509], "3111": [158, 163], "3113": 492, "31136514e": 3, "3114": [118, 231, 260], "3115": 492, "3118": 492, "312": [35, 44, 492], "3120": 492, "3125": [127, 160, 163, 492], "3126": [158, 163], "3127": [159, 163], "31276664e": 3, "313": [35, 44, 118, 202, 219, 492], "3132": [65, 492], "3133": [158, 163], "3134": 492, "3135": [158, 163, 492], "3136": 492, "3137": [158, 163], "313942": 51, "314": [10, 35, 44, 118, 204, 277, 492], "3141": [160, 163], "314803244": 4, "315": [35, 44, 492], "3152": [159, 163, 492], "3153920": 102, "315686912": 104, "315a": 35, "315b": 35, "316": [35, 44, 492], "3160": 492, "3165": [159, 163], "3169": 492, "317": [35, 44, 492], "3172": [129, 163], "31721203e": 3, "3173": [128, 163], "31739967e": 3, "3174": [159, 163], "31769c9cee5cd55f045e62633d651f3d": 105, "3178": [159, 163], "31784960": 10, "3179": [159, 163], "318": [35, 44, 492], "3181": [127, 160, 163], "3184": [159, 163], "3185": [160, 163], "3186": [64, 492], "3188": [159, 163], "3189": 492, "318e": 56, "319": [8, 35, 44, 492, 509], "3191": [130, 163], "31920306e": 3, "3193": [160, 163], "31938229e": 3, "3196": [127, 160, 163], "31a": 65, "32": [4, 26, 29, 35, 36, 43, 44, 54, 61, 62, 64, 65, 68, 73, 75, 86, 93, 104, 105, 192, 336, 337, 338, 342, 343, 344, 491, 492, 507, 509], "320": [4, 35, 44, 118, 373, 492], "3200": 492, "3201": [159, 163], "32015": 121, "32016": 121, "3203": [129, 163], "3204": [73, 492], "3207": [159, 163], "3209": [160, 163, 492], "321": [6, 8, 35, 44, 118, 177, 492, 509], "32103": 64, "3211264": 102, "321241088": 104, "32145408": 104, "321565": 65, "3216": [160, 163], "32178571e": 3, "3219": 492, "322": [35, 44, 492], "3220": [160, 163, 492], "3222": [160, 163], "32227568e": 3, "3227": [160, 163], "3227648": 102, "3228": 492, "3229": [160, 163], "323": [23, 29, 35, 44, 492, 509], "3233": [160, 163], "32347736": 22, "323499": 93, "3235": [160, 163], "3237": [127, 163], "32375533e": 3, "3238": 492, "324": [35, 44, 73, 118, 187, 491, 492], "3241": [160, 163], "3249": [118, 178], "325": [35, 44, 194, 202, 238, 252, 492], "3250": 492, "32504": 58, "3255": [160, 163], "3258": 492, "3259": [128, 163, 492], "326": [17, 29, 35, 44, 492, 509], "3262": [160, 163], "32639186e": 3, "3264": 492, "326598656": 104, "32696433e": 3, "327": [35, 44, 54, 62, 118, 202, 219, 492, 509], "3270": 492, "32712": 93, "3274": [160, 163], "3276800": [10, 54], "328": [35, 44, 47, 114, 115, 492, 509], "3281": [160, 163], "3283": [160, 163], "3284": [160, 163], "3285": [130, 163], "3286": [160, 163], "32866304": 72, "3289": 492, "329": [35, 44, 61, 118, 209, 265, 492], "3292": [160, 163], "3293": [160, 163], "3293184": [54, 102], "3297": [160, 163], "32980": [107, 283], "33": [10, 29, 35, 64, 65, 72, 73, 74, 93, 96, 99, 104, 118, 205, 207, 253, 268, 491, 492, 509], "330": [35, 44, 492], "3300": [160, 163], "3302": [160, 163], "3306": [160, 163], "331": [35, 44, 492], "3311": [160, 163], "3312": [160, 163], "3317": [160, 163], "3317760": 72, "331865": 35, "332": [16, 35, 44, 492], "332185600": 104, "3322": [160, 163], "33222473e": 3, "3324": 492, "3325952": [54, 102], "3327": 492, "3328": 492, "333": [35, 44, 492], "3333": [160, 163], "3337": [160, 163], "334": [35, 44, 492], "3344": 492, "33451709e": 3, "3346": 492, "3347": [127, 163], "334a": 35, "335": [35, 44, 492], "3351": [128, 163], "3353": [128, 163], "335491": 93, "3355": 492, "3356": 492, "3358720": 102, "336": [35, 44, 492], "33600": 93, "3362": [118, 128, 163, 435], "337": [22, 29, 35, 44, 492, 509], "3371": 104, "337295": 65, "3374": [127, 163], "3375": [127, 163], "3375104": [54, 102], "337707008": 104, "338": [35, 44, 492], "3380": [127, 163], "33811871e": 3, "3382": 492, "3384": [118, 435], "3385": [127, 163], "33866243e": 3, "3389": [52, 118, 121, 168, 197, 201, 226, 227, 248, 251, 282, 284], "339": [35, 44, 492], "3390": [127, 163], "3392": 492, "339a": 35, "33a": 35, "33cm": 42, "34": [3, 16, 35, 37, 48, 54, 65, 72, 73, 93, 104, 118, 176, 491, 492, 509], "340": [35, 44, 492], "34028238e": 3, "3403": [127, 163], "34043334e": 3, "3405": [48, 509], "3406": 46, "3407872": [54, 102], "34092": 73, "341": [35, 44, 118, 373, 492], "3410": 492, "3412": [127, 163], "3414": [128, 163], "341729": 6, "342": [35, 44, 492], "342086": 65, "3422": [127, 163], "3424": [127, 163], "34242788": 10, "3426": [127, 163], "3427": [127, 163], "342704128": 104, "3429": [127, 163], "343": [35, 44, 492], "3430": [127, 163], "3433": [127, 163], "3436": [127, 163], "3437": 492, "34372": 492, "3439": [127, 163], "344": [35, 44, 492], "3440": [127, 163, 492], "3444": [128, 163], "3445": [35, 128, 163], "3446": [127, 163], "3449": [127, 163], "345": [35, 44, 47, 492], "3450": 492, "3452": [127, 163], "3453": [127, 163, 492], "3456": 492, "34560": 492, "34598889e": 3, "346": [35, 44, 492], "3460": 492, "3462": [128, 163], "3465": [128, 163], "3468": 492, "346890": 93, "347": [35, 44, 492], "3474": [128, 163], "3477": [128, 163], "3478": [128, 163], "34792": [208, 255], "347e": 56, "348": [35, 44, 59, 93, 105, 492], "348151808": 104, "3483": [128, 163], "3484": [128, 163], "3485": [128, 163], "3487": 492, "348940": 93, "349": [35, 44, 68, 75, 492, 509], "34905849e": 3, "3491": [128, 163], "349184": 65, "3498": [128, 163], "34a": 65, "35": [6, 10, 21, 26, 35, 44, 56, 64, 65, 72, 73, 74, 75, 93, 104, 122, 163, 199, 258, 282, 491, 492, 509], "350": [35, 44, 492], "351": [35, 44, 491, 492], "35115383e": 3, "352": [35, 44, 492], "3520": 492, "352245": 35, "3523": [128, 163], "3525": [128, 163], "3527": 492, "353": [35, 44, 492], "3531": [128, 163], "35328527e": 3, "353730560": 104, "3538": [129, 163], "354": [35, 44, 492], "35459101e": 3, "3548": [128, 129, 163], "3549": [128, 163], "355": [35, 44, 492], "3550": [128, 163], "3551": [128, 163], "3552": [128, 163], "35521860e": 3, "3553": [128, 163], "3554": [128, 163], "3555": [128, 163], "3556": [129, 163], "3557": [128, 163, 492], "3558": [128, 163], "356": [35, 44, 492], "3563": [128, 163], "3566": [129, 163], "357": [35, 44, 61, 164, 492], "35708621e": 3, "3572": 492, "358": [35, 44, 492], "3584": 492, "35867291e": 3, "358939": 93, "359": [35, 44, 492], "359071744": 104, "3593": 492, "3597": [129, 163], "35a": [65, 73, 491], "36": [6, 16, 17, 18, 33, 35, 44, 45, 48, 61, 64, 65, 72, 73, 92, 93, 95, 104, 109, 114, 115, 145, 148, 163, 194, 199, 202, 233, 238, 252, 491, 492, 507, 509], "360": [35, 44, 65, 73, 118, 210, 491, 492], "3600": [128, 163], "360060360811": 164, "3601": [129, 163], "3603": 492, "3604480": 54, "3605": [128, 163], "3609": [129, 163], "361": [34, 35, 44, 48, 492, 509], "36136733e": 3, "3614": [129, 163], "3615": [129, 163], "36175769e": 3, "362": [35, 492], "3622": 492, "3626": [128, 163], "3629": 492, "363": [35, 492], "3630": [111, 115, 509], "3631": [128, 163], "3635": [128, 163], "364": [35, 104, 492], "3640": [129, 163], "3642": 492, "3644": [129, 163, 492], "3646": [129, 163], "364642304": 104, "3647": [129, 163], "3648": [129, 163, 492], "3649": 492, "365": [35, 492], "3650": [129, 163], "3651": [129, 163], "366": [35, 492], "3665": 492, "367": [35, 54, 492], "367151": 35, "36718975e": 3, "3673": 492, "3676": 492, "368": [35, 492], "3681": [129, 163], "369": [35, 118, 492], "3691": 492, "36991816e": 3, "37": [35, 53, 62, 64, 65, 73, 83, 93, 96, 104, 118, 125, 163, 373, 374, 478, 491, 492, 509], "370": [35, 492], "3700": 492, "370098176": 104, "371": [35, 118, 210, 492], "3710": 492, "3712": 492, "3717": 492, "371760": 93, "372": [35, 492], "3722": [129, 163], "3723": [129, 163], "372383": 35, "37289984": 72, "37295520e": 3, "373": [35, 492], "3730": 492, "3732": [129, 163, 492], "37322752": 104, "3733": [129, 163, 492], "3735": 492, "3736": [129, 163], "3737": 492, "374": [35, 492], "37416142e": 3, "3742": [129, 163], "37420257e": 3, "3743": [129, 163, 492], "375": [35, 492], "3751": 492, "375275520": 104, "3753": [129, 163], "376": [35, 492], "3761": [130, 163], "37628451e": 3, "3763": 492, "3764": 492, "3765": 492, "3766": 492, "3768": 492, "37688": 93, "377": [35, 75, 492, 509], "3774": [129, 163], "3776": 492, "3777": [129, 163], "37777747e": 3, "378": [6, 35, 67, 75, 492, 509], "3781": [129, 163], "3783": [129, 163], "379": [35, 68, 492], "3790": [129, 163], "379355": 65, "3794": [129, 163], "3795": [129, 163], "3797": [129, 163], "37a": 491, "37b": 491, "38": [32, 35, 48, 65, 68, 72, 73, 75, 93, 104, 114, 148, 163, 491, 492, 509], "380": [35, 492], "38016": 93, "3802": [129, 163], "3803": [129, 163], "380502016": 104, "381": [35, 106, 118, 399, 492], "3810": [129, 163], "3811": [129, 163], "3816": [129, 163], "38162767e": 3, "3819": [129, 163], "382": [35, 492], "38237819e": 3, "3827": [129, 163], "38274625e": 3, "383": [35, 492], "3833": [129, 163], "3836": [129, 163], "3838": [129, 163], "384": [35, 492], "3840": 492, "3847": [129, 163], "385": [35, 492], "3854": [129, 163], "3855": [129, 163], "3856": [129, 163], "3857": [129, 163], "385990656": 104, "386": [35, 492], "3860": [129, 163], "3863": [118, 176, 187, 309], "3868": [118, 176, 187, 309], "387": [35, 492], "3873": [129, 163], "3879": [129, 163], "388": [35, 492], "38817165e": 3, "3888": 6, "38888888888888895": 3, "3889": 36, "389": [35, 492], "3897": [129, 163], "389e": 56, "39": [6, 16, 35, 45, 46, 48, 54, 57, 64, 65, 73, 74, 93, 104, 136, 138, 141, 163, 194, 207, 251, 258, 268, 491, 492, 501, 509], "390": [35, 72, 492], "3904": 492, "3905": 492, "3908": 492, "391": [35, 492], "391356416": 104, "3919": [129, 163], "392": [35, 492], "3921": [129, 163], "3927": [129, 163], "392956": 35, "393": [35, 492], "3934": [129, 163], "39346": 492, "3935": [130, 163], "39360": 492, "39362233e": 3, "394": [35, 492], "3942": [129, 163], "3943": [129, 163], "3945": [129, 163], "3949": [132, 163], "395": [35, 492], "39532049e": 3, "396": [35, 65, 73, 492], "39666415e": 3, "396754944": 104, "3968": 492, "397": [35, 106, 118, 399, 492], "397082": 65, "3971": [129, 163], "3973": [129, 163], "398": [35, 492], "3982": 492, "3987": [129, 163], "39891195297241": 46, "399": [35, 492], "39912": 35, "3993": [130, 163], "3994": [129, 163], "3995": 492, "399994": 68, "39a": 35, "3a": [6, 35, 64, 65, 73, 491], "3b": [35, 64, 65, 73, 491], "3c": [64, 65, 73, 491], "3d": [1, 3, 7, 8, 9, 16, 17, 19, 20, 24, 25, 27, 29, 31, 32, 34, 36, 38, 39, 41, 45, 47, 50, 72, 77, 79, 85, 86, 96, 99, 103, 106, 108, 109, 114, 116, 118, 120, 125, 128, 132, 134, 138, 145, 147, 148, 149, 151, 155, 156, 160, 163, 181, 185, 186, 187, 189, 191, 192, 202, 231, 235, 236, 254, 256, 257, 260, 261, 262, 263, 264, 283, 293, 294, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 346, 348, 350, 352, 353, 356, 358, 359, 360, 361, 370, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 432, 433, 435, 436, 437, 443, 444, 445, 446, 447, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 465, 466, 467, 471, 483, 487, 509, 510], "3dj2a": 104, "3f": [3, 6, 36, 47, 51, 58, 101], "3f1468dc43a408bf84510b07cee95049": 28, "3g": 83, "3min": 104, "3mm": 234, "3rd": [21, 114, 443, 444, 450, 451, 458], "3v2": [132, 161, 163, 199, 250], "3vrct": [208, 255], "3x3": [86, 191, 305, 306, 307, 308, 310, 311, 312, 313, 332, 346, 363, 366, 379, 385, 391, 393, 394, 396, 463], "3x3x3": [191, 282, 284, 465, 467], "4": [0, 3, 6, 7, 8, 10, 11, 13, 15, 16, 18, 19, 21, 22, 24, 25, 26, 31, 32, 33, 35, 36, 37, 38, 39, 41, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 77, 78, 79, 80, 81, 83, 86, 88, 91, 93, 94, 95, 97, 99, 101, 102, 103, 104, 105, 107, 109, 110, 111, 112, 113, 114, 115, 118, 122, 132, 136, 141, 144, 148, 149, 150, 151, 156, 161, 165, 166, 169, 171, 176, 177, 178, 179, 187, 198, 202, 206, 210, 211, 212, 213, 214, 215, 217, 221, 223, 228, 229, 230, 236, 242, 248, 263, 266, 269, 287, 290, 305, 306, 307, 308, 310, 311, 312, 313, 332, 346, 351, 362, 363, 366, 367, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 393, 394, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 435, 436, 437, 441, 443, 444, 447, 448, 449, 450, 451, 462, 463, 464, 465, 477, 487, 491, 492, 507, 509], "40": [21, 22, 29, 35, 41, 56, 65, 66, 73, 75, 93, 96, 104, 118, 200, 202, 249, 258, 282, 435, 487, 491, 492, 509], "400": [35, 118, 172, 194, 238, 248, 260, 492], "400000": 68, "4001": [130, 163], "40062088e": 3, "40064": 93, "4008": 107, "401": [35, 492, 509], "40175": 77, "402": 35, "402145280": 104, "4022": [118, 233, 261], "40261225e": 3, "4028": [130, 163], "4029": [130, 163], "403": 35, "4032": 492, "4037": [118, 233, 261], "404": [35, 164], "4042": [130, 163], "405": [35, 59, 118, 165, 166, 225, 258], "4051": [130, 163], "4058": 492, "406": 35, "40640": 93, "4067": [130, 163], "4069": 164, "407": 35, "4070": [130, 163], "4071": [130, 163], "40740740740740744": 3, "407552000": 104, "407676": [118, 351, 477], "4077": 64, "408": [35, 115], "4081": 492, "40825039e": 3, "408391": 65, "4086": [130, 163], "4087": 492, "409": [4, 8, 35, 509], "4094": [130, 163], "4096": 492, "40962": [290, 293, 294, 301, 459], "40978994e": 3, "4099": [130, 163], "40a": 35, "40x64x64": 41, "41": [35, 52, 65, 73, 74, 93, 104, 113, 118, 464, 470, 491, 492], "410": [35, 118, 172], "4103": [130, 163, 492], "4108": 492, "411": [35, 91, 99, 509], "4116": [130, 163], "412": 35, "4121": [130, 163], "4122": [130, 163], "4126": [132, 163, 492], "41275617e": 3, "412925952": 104, "413": [35, 112], "4131": [130, 163], "41326544e": 3, "4136": [130, 163], "4138": 492, "413969": 44, "414": [35, 65, 75, 509], "4141": [130, 163], "41484756e": 3, "415": [35, 59, 118, 165, 166, 225, 258, 374], "4153": [130, 163], "41589669e": 3, "4159": [130, 163], "416": [35, 96, 99, 228, 286, 509], "4160": [93, 492], "4166": [130, 163], "4167": [130, 163], "4168": [93, 130, 163], "417": 35, "41704945e": 3, "417132": 65, "4172": 492, "417917": 35, "418": 35, "4180": [130, 163], "41820160": 72, "418299904": 104, "4188": [130, 163, 492], "418909": 59, "419": 35, "4191": [130, 163], "4195": 492, "41964562e": 3, "42": [6, 10, 25, 26, 35, 46, 64, 65, 66, 72, 73, 77, 93, 94, 103, 104, 108, 112, 118, 199, 234, 491, 492, 507], "420": [11, 29, 35, 509], "4203": 492, "4204": [130, 163], "420413": 59, "42048": 93, "4205": [132, 163], "4208": [129, 163], "421": 35, "42112": 93, "4215": [130, 163], "4219": [130, 163], "422": 35, "42208": 93, "4224": 492, "4225": [130, 163], "422772736": 104, "423": [13, 15, 29, 35, 112, 509], "4232": [131, 163], "4233": [130, 163], "4236": 492, "424": 35, "42458937e": 3, "425": 35, "42528": 93, "42549306e": 3, "4255": [118, 131, 163, 178, 241, 244], "42562085e": 3, "4257": [131, 163], "4258": [131, 163], "426": [35, 492], "4263": 492, "4266": [131, 163], "4267": [131, 163], "4269": [131, 163], "427": [35, 40, 48, 509], "4270": [131, 163], "4273": [132, 163], "4274": [131, 163], "4279": [131, 163], "428": 35, "428195840": 104, "4284": [73, 131, 163], "4285": [131, 163], "42851026e": 3, "4287": [133, 163], "429": 35, "4295": [131, 163], "4296875": 111, "4297": [131, 163], "42975648e": 3, "4298": [131, 163], "42cm": [33, 35], "43": [8, 32, 35, 65, 73, 93, 104, 106, 113, 118, 136, 163, 194, 253, 399, 491, 492, 501], "430": 35, "4302": [131, 163], "43027780e": 3, "43032694e": 3, "4304": [131, 163], "4307": [132, 163, 492], "4308": [131, 163], "43089920": 104, "431": 35, "4310": [131, 163], "4318": [131, 163], "432": [22, 29, 35, 73, 118, 165, 491, 509], "4320": [131, 163], "4325": [131, 163], "433": 35, "4334": [131, 163], "433602560": 104, "4337": [131, 163], "434": 35, "4343": [131, 163], "435": 35, "4352": 492, "43560135e": 3, "436": [35, 59, 118, 374], "4360": [132, 163], "4363": [45, 48, 509], "437": 35, "438": 35, "438943744": 104, "439": 35, "4391": 492, "4392": [132, 163], "4397": [132, 163], "4399": 492, "44": [3, 8, 35, 52, 62, 65, 72, 73, 74, 93, 104, 118, 125, 163, 185, 348, 399, 491, 492, 509], "440": [35, 107], "4403": 492, "4407": [132, 163], "441": [35, 118, 165], "4411": [132, 163], "4412": [132, 163], "4413": [132, 163], "4414": [132, 163], "4416": [132, 163, 492], "442": 35, "443": 35, "4434": 492, "4435": 492, "4436": [132, 163], "4437": [132, 163], "444": [20, 35, 194, 202, 238, 252], "4442": [134, 163], "444350464": 104, "4444": 36, "4446": [132, 163], "445": 35, "4452": [132, 163, 492], "445403": 65, "446": 35, "446359": 93, "4465": [132, 163], "4467": [132, 163], "4469": [132, 163], "447": 35, "4470": [132, 163], "4475": 492, "4476": [132, 163], "448": [35, 492], "4480": 492, "44800": 93, "4487": 492, "449": 35, "449202": 35, "4498": [132, 163], "449839104": 104, "44984": 93, "44a": 35, "44b": 35, "45": [6, 18, 32, 34, 35, 52, 58, 64, 65, 73, 93, 104, 110, 118, 491, 492], "450": 35, "4507": [132, 163], "45093963e": 3, "451": 35, "45132086e": 3, "4515": 492, "4518": 492, "452": 35, "453": 35, "454": [35, 492], "45403123e": 3, "4544": [132, 163, 492], "454836224": 104, "455": [35, 104], "4554": [132, 163], "4555": [132, 163], "4556": [132, 163], "4558": [132, 163], "456": 35, "4563": 64, "457": 35, "4570": [132, 163], "4571": [132, 163], "4574": [132, 163], "4577": [132, 163], "458": 35, "4582": [132, 163], "4585": [132, 163], "459": 35, "4590": [64, 132, 163, 492], "4593": [132, 163], "45955": 35, "459997184": 104, "45a": [35, 73], "46": [32, 35, 42, 61, 65, 72, 73, 93, 95, 104, 112, 115, 122, 163, 192, 251, 253, 491, 492, 507, 509], "460": 35, "460020402": [118, 351, 477], "4607": [132, 163], "4608": 492, "461": [35, 198, 279], "46102336e": 3, "4612": [132, 163], "4618": [132, 163], "462": [6, 35, 107, 115, 509], "4620": [132, 163], "463": [35, 118, 199, 250], "463430": 6, "4635": [132, 163], "4637": [132, 163], "464": [3, 35, 41, 101], "46411392e": 3, "4643": 492, "465": 35, "46505984": 72, "4652": [132, 163], "465248256": 104, "4656": [132, 163], "4657": 492, "465759": 65, "4659": [132, 163], "465973": 44, "466": 35, "4660": [132, 163], "4666666666666667": 111, "466817": 53, "467": 35, "4672": 492, "468": [35, 65, 73, 118, 199, 250, 491], "4682b4": 11, "46870714e": 3, "4688": [132, 163], "469": [35, 105], "4692": [132, 163], "4693": [132, 163], "46a": 35, "46b": 35, "46c": 35, "47": [34, 35, 48, 65, 73, 93, 101, 104, 114, 115, 118, 206, 219, 248, 253, 254, 491, 492, 509], "470": [26, 29, 35, 509], "47012398e": 3, "470614016": 104, "470x500": 23, "471": 35, "4714": [132, 163], "4715": [132, 163], "4718592": 54, "4719": [132, 163], "472": 35, "4720": 492, "4723": [132, 163], "4725": 492, "473": 35, "4734": 492, "4736": 492, "4737": 492, "474": 35, "47419282e": 3, "4743": 492, "475": 35, "47543518e": 3, "4756": [133, 163], "476": 35, "476037120": 104, "4766": [118, 176], "47675039e": 3, "477": 35, "4775": [118, 176], "477846": 65, "478": [35, 108, 115, 509], "479": [35, 492], "48": [6, 21, 35, 56, 59, 64, 65, 72, 73, 74, 80, 93, 104, 105, 118, 194, 202, 217, 238, 251, 256, 258, 280, 353, 491, 492, 501], "480": 35, "4806": [132, 163], "4807": [133, 134, 163], "4809": [134, 163], "481": 35, "481411072": 104, "482": 35, "4820": [134, 163], "483": [35, 122, 163], "4830": [133, 163], "4832": 93, "48332800": 104, "484": 35, "48427842e": 3, "4847132034632034": 114, "4849": [133, 163], "485": [35, 52], "4851": [134, 163], "486": [35, 64], "4860": [132, 163], "4864": 93, "486473728": 104, "4866048": 104, "487": 35, "48724425e": 3, "48731454e": 3, "488": 35, "4880": 93, "48880663e": 3, "489": 35, "48931468e": 3, "4896": 65, "49": [35, 65, 73, 88, 93, 102, 104, 118, 148, 163, 491, 492], "490": 35, "4903": 492, "4906": [133, 163], "491": 35, "491913216": 104, "492": 35, "49253040e": 3, "4926": [133, 163], "4928": 492, "493": 35, "49353948e": 3, "4939": [133, 163], "49396942e": 3, "494": [35, 55, 62, 492, 509], "4948": [133, 163], "495": 35, "4951": [134, 163], "4954": [133, 163], "49554": 491, "496": [35, 107], "4967": [133, 163], "4968": [134, 163], "497": [35, 38, 48, 95, 99, 509], "497287168": 104, "4975": [133, 163], "498": 35, "4980392156862745": 111, "499": 35, "4991": [134, 163], "4991939095387371": 114, "4992": 492, "4998": 492, "4999": [134, 163], "49996683e": 3, "4a": [6, 64, 65, 73, 104, 491], "4a9b3c": 11, "4b": [64, 65, 73, 104], "4c": [64, 65, 73], "4d": [1, 3, 4, 8, 9, 12, 17, 19, 21, 27, 29, 31, 32, 33, 34, 36, 38, 41, 44, 50, 51, 52, 55, 56, 57, 59, 61, 73, 86, 87, 89, 91, 93, 94, 96, 97, 101, 103, 106, 108, 111, 116, 119, 127, 128, 129, 132, 138, 145, 148, 149, 154, 163, 166, 169, 170, 171, 174, 185, 187, 189, 192, 207, 222, 251, 253, 255, 256, 257, 261, 268, 272, 278, 302, 309, 312, 313, 346, 348, 350, 351, 352, 356, 357, 358, 359, 361, 363, 370, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 390, 391, 392, 393, 394, 395, 396, 398, 431, 432, 436, 444, 449, 450, 451, 456, 458, 465, 467, 483, 487, 498, 502, 507, 509, 510], "4f": [35, 36, 101], "4min": 104, "4mm": [96, 169, 176, 207, 268, 313], "4pm": [179, 508], "4th": [21, 96, 118, 177, 185, 191, 324, 325, 359, 363, 366, 449], "4x4": [86, 191, 305, 306, 307, 308, 310, 311, 312, 313, 332, 346, 353, 363, 364, 366, 379, 385, 391, 393, 394, 396, 402, 403, 463], "5": [2, 3, 4, 6, 10, 11, 13, 19, 20, 21, 22, 24, 25, 26, 27, 29, 31, 32, 35, 36, 37, 38, 39, 41, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 81, 82, 83, 90, 91, 93, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 115, 118, 127, 130, 132, 138, 145, 151, 156, 157, 158, 159, 161, 165, 169, 171, 176, 177, 178, 179, 181, 191, 192, 198, 199, 201, 202, 206, 210, 219, 222, 224, 229, 236, 250, 251, 253, 256, 257, 259, 260, 263, 267, 268, 271, 273, 277, 281, 295, 310, 311, 322, 324, 325, 351, 357, 358, 361, 373, 374, 392, 394, 395, 396, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 449, 450, 452, 454, 455, 457, 459, 460, 461, 476, 477, 478, 481, 487, 491, 492, 507, 509], "50": [32, 33, 35, 52, 60, 61, 64, 65, 68, 73, 93, 95, 101, 102, 104, 118, 121, 176, 178, 192, 198, 207, 217, 223, 242, 244, 279, 320, 334, 336, 337, 338, 339, 342, 343, 344, 353, 373, 374, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 437, 463, 465, 467, 491, 492, 507], "500": [26, 35, 37, 44, 52, 81, 101, 114, 194, 202, 238, 260], "5000": [36, 52, 58, 101], "50001": 248, "5004": [134, 163], "5006": [134, 163], "501": 35, "5013": [134, 163], "50177634e": 3, "502": [35, 101], "5021": 199, "502274": 65, "502379": 65, "502923264": 104, "503": 35, "5036": [134, 163], "504": [35, 65, 73, 491], "5040": 51, "50400633e": 3, "50403247e": 3, "5041": [134, 163], "5048": 492, "505": 35, "50540862e": 3, "50556668e": 3, "5056": 492, "506": 35, "50607": 248, "507": 35, "5071": [118, 165, 241], "50760": 73, "5078": [134, 163], "507e": 56, "508": 35, "5082": [134, 163, 492], "508280832": 104, "508380": 93, "5085": [134, 163], "5086": [134, 163], "5088": [134, 163], "509": 35, "50953815e": 3, "5097": [134, 163], "51": [6, 10, 35, 51, 56, 64, 65, 72, 73, 93, 102, 104, 118, 170, 202, 252, 312, 491, 492], "510": 35, "5109": [134, 163], "511": [19, 29, 35, 509], "5112": [134, 163], "5115891053391053": 114, "51173": 35, "511866": 6, "512": [35, 86, 155, 163, 194, 208, 255, 501], "5120": [134, 163], "51200": 492, "51225557e": 3, "512372": [118, 324, 325], "513": 35, "5132": [134, 163], "5134": 492, "513458176": 104, "514": 35, "51478528": 72, "515": 35, "5151": [134, 163], "515125": 65, "516": 35, "5160": [134, 163], "51633": 492, "51638558e": 3, "516815": 65, "5169": [134, 163], "517": 35, "5172": [134, 163], "517443": 65, "5176": 93, "5177": 492, "5179": [134, 163], "518": [35, 43, 48, 509], "51836292e": 3, "5184": 492, "518537216": 104, "5188": 492, "519": 35, "5195": [134, 163], "52": [35, 54, 58, 60, 61, 64, 65, 73, 93, 104, 192, 252, 491, 492, 507], "520": 35, "5202": [134, 163], "521": 35, "52169072e": 3, "522": 35, "5222": [134, 163], "5224": [134, 163], "52294": [26, 118], "523": 35, "5234": [134, 163], "523943936": 104, "524": [35, 41, 48, 509], "5240": [134, 163], "5248": 93, "525": 35, "5256": [134, 163], "526": 35, "5262": [134, 163], "5268": [134, 163], "527": 35, "52762889e": 3, "5277": [134, 163], "5279": [134, 163], "528": [35, 47], "5281": 0, "529": [35, 112, 115, 509], "529317888": 104, "52a": 35, "53": [23, 35, 64, 65, 73, 93, 95, 104, 118, 206, 251, 252, 262, 491, 492], "530": [35, 83, 84, 509], "5301": [134, 163], "5309": [134, 163], "530991": 6, "530e": 56, "531": 35, "5312": 492, "53124657e": 3, "532": 35, "5320": [134, 163], "53210389e": 3, "53245147e": 3, "533": 35, "533043": 65, "5339": 492, "534": [35, 89, 93, 99, 509], "5342": [134, 163], "5346": [134, 163], "5347": [134, 163], "534740992": 104, "535": 35, "5357": [134, 163], "536": 35, "536042": 35, "536638": 65, "53690368": 104, "537": 35, "5371": [134, 163], "5377": [134, 163], "53771055e": 3, "5379": [134, 163], "538": 35, "5381": [134, 163], "5382": [134, 163], "539": [35, 197], "539273": 65, "53965107e": 3, "5398": [134, 163], "53994925e": 3, "54": [32, 35, 64, 65, 73, 93, 102, 103, 104, 113, 118, 165, 202, 219, 252, 491, 492], "540": [6, 35, 65, 73, 491], "540246016": 104, "54080": 492, "540842": 59, "541": 35, "541399": 65, "542": 35, "542346": 59, "5425": [134, 163], "543": 35, "54341717e": 3, "5438": [43, 91, 492], "544": [35, 118, 223], "5440": 492, "54400": 93, "545": 35, "545718272": 104, "54584": 492, "546": [6, 35], "546246": 6, "54629182e": 3, "54677271e": 3, "54692712e": 3, "547": 35, "5473": [161, 163], "548": 35, "5481": [135, 163], "548e": 56, "549": [35, 118, 176, 491], "5490204": [118, 312], "5492": [135, 163], "5496": 93, "54a": 35, "54b": 35, "55": [21, 35, 54, 65, 69, 73, 93, 104, 141, 163, 194, 238, 491, 492], "550": 35, "5508": [161, 163, 491], "551": 35, "551124992": 104, "55124426e": 3, "55160": 93, "5519": [135, 163], "552": [35, 91, 118, 223], "553": 35, "5530": [135, 163], "5535": [161, 163], "5539": [3, 33, 34, 40, 101, 118, 218, 271], "554": 35, "555": 35, "5550": [135, 163], "55501689e": 3, "5552738": 102, "5557": [135, 163], "556": [35, 57, 62, 509], "55619413e": 3, "5565": [135, 163], "556580864": 104, "5568": 492, "557": [35, 66, 75, 509], "5570": [161, 163], "5576": 492, "5578": [135, 163], "558": 35, "559": [35, 118, 176], "5594": [135, 163], "5595": [135, 163], "56": [24, 35, 39, 54, 65, 72, 73, 74, 93, 102, 104, 118, 172, 253, 491, 492], "560": [35, 88, 99, 509], "5601": [135, 163], "5606383": 102, "561": 35, "5614": [135, 163], "5616": [135, 163], "562": [35, 118, 225, 258], "562061312": 104, "5623": [161, 163], "5624": [161, 163], "5625": [161, 163], "5626": [161, 163], "5628": [161, 163], "563": 35, "5630": [161, 163], "5631": [161, 163], "5632": [93, 161, 163], "5633": [161, 163], "5635": [161, 163], "5637": [135, 163], "564": 35, "5640": [161, 163], "564125": 65, "56421873e": 3, "56494246e": 3, "565": 35, "5652": 73, "5654": [161, 163], "5656": [161, 163], "566": 35, "5660": [161, 163], "5661": [161, 163], "5662": [161, 163], "5663": [161, 163], "56643811e": 3, "5668": [161, 163], "567": [35, 64, 491], "5670004976137923e": 71, "5675": [161, 163], "567582720": 104, "5677": [161, 163], "5679": [161, 163], "568": 35, "5680": 93, "56847119e": 3, "56852480": 72, "5687": [161, 163], "569": 35, "5692": [161, 163], "57": [6, 32, 35, 55, 64, 65, 73, 93, 102, 104, 111, 115, 118, 122, 125, 148, 163, 202, 252, 491, 492, 509], "570": 35, "5709": [161, 163], "571": 35, "5710": [161, 163], "5715": [161, 163], "57195": 35, "572": 35, "572388": 44, "5726": [161, 163], "5727": [161, 163], "573": [35, 118, 197, 225, 258], "573030400": 104, "5739": [161, 163], "574": 35, "5741": [161, 163], "57414062e": 3, "575": 35, "57536": 492, "575969": 65, "576": [35, 65, 73], "5760": [93, 492], "57652617e": 3, "577": 35, "5770": [161, 163], "5773": 492, "578": 35, "5780": [161, 163], "578404352": 104, "5785": [161, 163], "57885360e": 3, "579": 35, "57927603e": 3, "58": [32, 35, 51, 54, 62, 65, 73, 83, 84, 93, 104, 148, 163, 491, 492, 509], "580": 35, "58041010e": 3, "581": 35, "5818": 492, "582": [35, 39, 118], "582685": 93, "58286483e": 3, "583": 35, "5832": 491, "583827456": 104, "584": 35, "5845425": 54, "585": 35, "586": 35, "5861": 492, "58655541e": 3, "5868": 73, "587": 35, "587189": 35, "5875966": 54, "588": [18, 29, 35, 509], "589": [12, 29, 35, 509], "58911": 492, "589401": 59, "5894024": 102, "589447168": 104, "58966016": 104, "59": [10, 33, 35, 64, 65, 73, 74, 75, 93, 103, 104, 118, 122, 163, 171, 202, 251, 373, 374, 491, 492, 509], "590": 35, "590403": 65, "590905": 59, "591": 35, "592": [35, 39, 118], "5920556": 102, "593": 35, "593056": 65, "5934": [118, 187], "594": [35, 64, 491], "594345984": 104, "59460782e": 3, "595": 35, "595170": 6, "5952": [93, 492], "59526318e": 3, "596": [8, 35], "597": [3, 8, 35, 509], "5978758": 102, "598": [35, 62], "59875499e": 3, "599": [35, 75, 118, 197, 248], "5992": 93, "599670784": 104, "5997": [61, 118, 209, 265], "59974": 35, "5a": [6, 35, 64, 65, 73, 104, 491], "5b": [6, 35, 64, 65, 73, 104], "5bdeprec": 374, "5c": [65, 73, 104], "5c734f16e50cc772ef593cab9bb3137b": 11, "5c8ff37d4712b400183b7011": 54, "5c8ff37d4712b400193b5b54": 54, "5c8ff37e2286e80016c3c2cb": 54, "5c8ff3814712b4001a3b5561": 54, "5c8ff3822286e80018c3e37b": 54, "5c8ff382a743a90018606df8": 54, "5c8ff3832286e80016c3c2d1": 54, "5c8ff3832286e80019c3c10f": 54, "5c8ff3842286e80017c419e0": 54, "5c8ff3854712b4001a3b5568": 54, "5c8ff3872286e80017c419e9": 54, "5c8ff3872286e80017c419ea": 54, "5c8ff3884712b400183b7023": 54, "5c8ff3884712b400193b5b5c": 54, "5c8ff389a743a9001660a016": 54, "5c8ff38c2286e80016c3c2da": 54, "5c8ff38c4712b4001a3b5573": 54, "5c8ff38ca743a9001760809": 54, "5c8ff38ca743a90018606df": 54, "5c8ff38da743a900176080a2": 54, "5c8ff38f2286e80018c3e38d": 54, "5c8ff3912286e80018c3e393": 54, "5c8ff3914712b400173b5329": 54, "5c8ff3914712b4001a3b5579": 54, "5c8ff391a743a900176080a9": 54, "5c8ff3952286e80016c3c2e7": 102, "5c8ff3952286e80017c41a1b": 54, "5c8ff3954712b400193b5b79": 102, "5c8ff395a743a900176080af": 102, "5c8ff3964712b400193b5b7d": 102, "5c8ff3982286e80017c41a29": 102, "5c8ff399a743a9001660a031": 102, "5c8ff39aa743a900176080ba": 102, "5c8ff39aa743a900176080bf": 102, "5c8ff39aa743a90018606e21": 102, "5c8ff39ca743a90019606c50": 102, "5c8ff39d4712b400193b5b89": 102, "5c8ff39fa743a90018606e2f": 102, "5c8ff3a12286e80016c3c2fc": 102, "5c8ff3a12286e80017c41a48": 102, "5c8ff3a2a743a9001660a048": 102, "5c8ff3a34712b400193b5b92": 102, "5c8ff3a34712b4001a3b55a3": 102, "5c8ff3a72286e80017c41a54": 102, "5c8ff3a7a743a90018606e42": 102, "5c8ff3a84712b400183b7048": 102, "5c8ff3e14712b400183b7097": 54, "5c8ff3e32286e80018c3e42c": 54, "5c8ff3e4a743a9001760814f": 54, "5c8ff3e52286e80018c3e439": 54, "5c8ff3e54712b400183b70a5": 54, "5c8ff3e72286e80017c41b3d": 54, "5c8ff3e82286e80018c3e443": 54, "5c8ff3e9a743a90017608158": 54, "5c8ff3ea4712b400183b70b7": 54, "5c8ff3eb2286e80019c3c194": 54, "5c8ff3eb2286e80019c3c198": 102, "5c8ff3ed2286e80017c41b56": 102, "5c8ff3ee2286e80016c3c379": 102, "5c8ff3ee4712b400183b70c3": 102, "5c8ff3efa743a9001660a0d5": 102, "5c8ff3f12286e80016c3c37": 102, "5c8ff3f14712b4001a3b560": 102, "5c8ff3f1a743a90017608164": 102, "5c8ff3f34712b4001a3b5612": 102, "5c8ff3f64712b400183b70d8": 102, "5c8ff3f6a743a90017608171": 102, "5c8ff3f72286e80019c3c1af": 102, "5c8ff3f7a743a90019606cdf": 102, "5c8ff3f92286e80018c3e463": 102, "5cb46e0339926900160f6930": 102, "5cb46e0cf2be3c001801f757": 102, "5cb46e1c3992690018133a9": 102, "5cb46e35f2be3c00190305ff": 102, "5cb46e3f353c5800199ac787": 102, "5cb46e40f2be3c001801f77f": 102, "5cb46e43f2be3c0017056b8a": 54, "5cb46e4d353c58001b9cb325": 102, "5cb46e5af2be3c001801f799": 54, "5cb46e5c353c5800199ac79f": 54, "5cb46e63f2be3c0017056ba9": 102, "5cb46e6b353c58001b9cb34f": 54, "5cb46e6ba3bc970019f07152": 102, "5cb46e6f353c58001a9b3311": 102, "5cb46e793992690017108eb9": 102, "5cb46e7a353c58001a9b3324": 102, "5cb46e85a3bc97001aeff750": 102, "5cb46e8b353c58001c9abe98": 54, "5cb46e913992690018133b1c": 54, "5cb46e92a3bc970019f0717f": 54, "5cb46e9a353c58001c9abeac": 54, "5cb46e9b39926900190fad5c": 54, "5cb46eaa39926900160f69af": 54, "5cb4700af2be3c0017056f69": 102, "5cb470153992690018133d3b": 102, "5cb47016a3bc970017efe44f": 54, "5cb47016a3bc970018f1fc88": 102, "5cb4701c3992690018133d49": 102, "5cb4701e3992690018133d4f": 54, "5cb4701ff2be3c0017056fad": 102, "5cb47020f2be3c0019030968": 102, "5cb47023353c58001c9ac02b": 54, "5cb4702639926900190faf1d": 102, "5cb4702a353c58001b9cb5a": 54, "5cb4702b39926900171090e4": 102, "5cb4702f39926900171090ee": 54, "5cb4703039926900160f6b3e": 102, "5cb4703439926900160f6b43": 102, "5cb47038353c5800199ac9a2": 102, "5cb4703bf2be3c001801fa49": 54, "5cb470413992690018133d8c": 54, "5cb47045a3bc970019f073a0": 54, "5cb4704af2be3c001705703b": 102, "5cb47052f2be3c0017057069": 54, "5cb47056353c58001c9ac064": 54, "5cb47057f2be3c0019030a1f": 102, "5d": [130, 163, 374], "5d27037f45253a001c3d4563": 18, "5d275ede1c5b4a001aa00c26": 18, "5d27c2c41c5b4a001d9f4e7": 82, "5d27ca3d1c5b4a001b9eeddb": 81, "5d27cb281c5b4a001aa07e29": 81, "5d27cbbd45253a00193c9b70": 83, "5d27ccde1c5b4a001d9f5602": 82, "5d27d29145253a001c3e284f": 18, "5d27d3c3114a42001804500a": 82, "5d27d9c6114a420019045370": 82, "5d27da3a114a4200190453ab": 79, "5d27dbce45253a001a3c32fd": 83, "5d27ddc91c5b4a001b9ef9d0": 18, "5d27de38a26b340016099771": 82, "5d27e0221c5b4a001b9efb25": 83, "5d27e5fa1c5b4a001aa09681": 82, "5d27e787114a420016059c22": 81, "5d27eba2114a420016059fbf": 81, "5d27ebc3114a42001704a18d": 79, "5d27ed481c5b4a001aa09e83": 83, "5d27efab1c5b4a001aa0a0c2": 81, "5d27f18945253a00193cb2dd": 82, "5d27f1f0114a42001804603": 79, "5d27f296114a42001704a5d9": 81, "5d27fb651c5b4a001d9f7938": 82, "5d28000845253a001c3e507a": 83, "5d280057a26b340019089965": 82, "5d280608a26b3400180868d1": 81, "5d2808401c5b4a001d9f83b2": 82, "5d28092e45253a001c3e597f": 79, "5d28095545253a001c3e59a2": 81, "5d2811d0114a42001704b988": 81, "5d2811fba26b340017085492": 82, "5d28144c114a42001804739": 81, "5d2814d145253a001c3e6404": 82, "5d281a2a45253a001c3e684c": 83, "5d281a531c5b4a001c9ea662": 79, "5d281e3d114a42001605cb02": 81, "5d281f851c5b4a001b9f2315": 81, "5d28244745253a001b3c4afa": 82, "5d28295aa26b340018087ef4": 79, "5d282aa5114a42001605db5a": 83, "5d282b2345253a001c3e7d09": 82, "5d282d9045253a001c3e80a1": 81, "5d28309645253a001a3c6a8d": 82, "5d28318445253a00193ce6d7": 82, "5d28335545253a00193ce806": 83, "5d283473a26b34001609ed88": 79, "5d28375345253a001c3e90a2": 81, "5d283ee0a26b34001609f58": 81, "5d283f021c5b4a001aa100cb": 81, "5d284374114a42001605f4d2": 79, "5d28453a1c5b4a001c9eca": 83, "5d2848581c5b4a001aa10aac": 82, "5d284a3445253a001c3ea2d1": 82, "5d284daf1c5b4a001d9fc4e5": 83, "5d285263114a4200160602c6": 81, "5d2852caa26b340018089ae5": 81, "5d28545ca26b340018089ba7": 82, "5d28564b1c5b4a001d9fc9d6": 82, "5d28590d114a4200160607da": 79, "5d285a53114a4200160608b": 79, "5d285b6c1c5b4a001c9edada": 82, "5d285cd945253a001a3c8509": 82, "5d285d61114a42001904a343": 81, "5d28660b1c5b4a001aa122c7": 81, "5d2866c0a26b340017088827": 83, "5d2868f9114a42001704f6a5": 81, "5d286e49114a42001904ab90": 82, "5d286f35a26b34001908e5c1": 79, "5d28709e114a420016061aa1": 81, "5d28765645253a001b3c8106": 82, "5d28781945253a00193d1237": 83, "5d287b3a45253a00193d145": 81, "5d287eeb45253a001c3ed1ba": 82, "5d28847d114a42001904b87b": 81, "5d2888ce1c5b4a001b9f789c": 79, "5d2889a7a26b3400160a368f": 83, "5d288af11c5b4a001d9ff0cb": 82, "5d288fb11c5b4a001d9ff738": 83, "5d28966345253a00193d2e27": 81, "5d2896fb45253a001a3cabe0": 82, "5d289736114a4200170518d7": 81, "5d289b2945253a00193d32ac": 79, "5d289be945253a001c3ef5e2": 82, "5d28a00245253a001c3efac9": 79, "5d28a1c91c5b4a001da00bd9": 82, "5d28a431a26b340019090fa2": 81, "5d28a4c0114a420016064fa2": 83, "5d28af541c5b4a001da01caa": 82, "5d28b135a26b3400160a648": 81, "5d28b6171c5b4a001c9f2ebd": 83, "5d28b761a26b3400160a6ba8": 81, "5d28b9af45253a001a3ccb85": 82, "5d28bb90a26b3400190925d2": 82, "5d28bc0145253a00193d53ab": 79, "5d28c0a81c5b4a001b9fb89a": 81, "5d28cfd91c5b4a001c9f404d": 79, "5d28d2bb114a420017054715": 83, "5d28db3ba26b34001808f444": 79, "5d28e056a26b340019093c95": 83, "5d28e50945253a00193d6e09": 83, "5d28f0bc1c5b4a001b9fd7f3": 79, "5d28ff54114a42001705610c": 83, "5d28ffc245253a00193d7dac": 79, "5d2909cd1c5b4a001b9fe6c5": 79, "5d2919e2114a42001606b46c": 79, "5d2928bc45253a001b3cf010": 79, "5d293a50a26b34001909682a": 79, "5d29492fa26b34001709070f": 79, "5d295328114a42001606dd9a": 79, "5d2c37031c5b4a001ca0da2b": 79, "5d2c442e114a420017071134": 79, "5d2c5c431c5b4a001da257a5": 79, "5d2c6c2645253a001c42460f": 79, "5d2ec286251f0e001604a189": 79, "5d2ed2875d2cdc001702b4c5": 79, "5d2ef8925d2cdc001702e0a5": 79, "5d2f0851251f0e0018044fe4": 79, "5d2f26e4a667db0017f72ae9": 79, "5d2f358c251f0e001704a76a": 79, "5d2f41d2835aff001a52da0c": 79, "5d2f5acc835aff0018532004": 79, "5d2f692d835aff00175372e9": 79, "5d2f7456835aff0017537992": 79, "5d2f8881a667db0018f6b634": 79, "5d2f9552251f0e001605bb64": 79, "5d2faf785d2cdc0017039bb1": 79, "5d2fbffd835aff0018535ef5": 79, "5d2fc225a667db001af6222a": 79, "5d2fdd77835aff00195494d4": 79, "5d2fe5d5a667db0017f80f32": 79, "5d2ff3ea835aff0018538140": 79, "5d301049a667db0019f67ca0": 79, "5d3021b65d2cdc00190344d6": 79, "5d302afe5d2cdc0018030034": 79, "5d303ad4835aff001853bca4": 79, "5d304f845d2cdc001a032801": 79, "5d3058cd835aff001853d4c7": 79, "5d306f15a667db0018f78b4d": 79, "5d307f8b251f0e00190519ca": 79, "5d309cb5251f0e001606fe4b": 79, "5d30a667251f0e00190534dc": 79, "5d30bb07251f0e001705df42": 79, "5d30df37251f0e001705fd72": 79, "5d30e232a667db0018f7f2a9": 79, "5d30f7ec251f0e001805e3cd": 79, "5d3116dca667db0018f81c29": 79, "5d312688251f0e0016079f29": 79, "5d3134fe5d2cdc001705393d": 79, "5d3143f9835aff00195630c": 79, "5d315ac0835aff001754e139": 79, "5d3160bc835aff00195649cf": 79, "5d317bb2251f0e001608002": 79, "5d318a6c251f0e001905b6": 79, "5d31962da667db0017fa303d": 79, "5d31abe45d2cdc0019046202": 79, "5d31cdeea667db001af75ab9": 79, "5d31dc83835aff001956e6c5": 79, "5d31fefea667db0018f8ea9f": 79, "5d32072b5d2cdc0018043969": 79, "5d3219b4a667db0018f8ff1f": 79, "5d3234f3835aff00175590f0": 79, "5d323d06251f0e001706f0b": 79, "5d324e77251f0e001806e5e7": 79, "5d326b70835aff00195762f8": 79, "5d32731a5d2cdc001a0472bb": 79, "5d3286b7251f0e001906427f": 79, "5d3298815d2cdc001804700c": 79, "5d32ab6ea667db0017fb59e8": 79, "5d32bb275d2cdc001a049841": 79, "5d32d901a667db0018f9684f": 79, "5d32e9d3835aff001957cd79": 79, "5d32f34f835aff001755ee97": 79, "5d3306db5d2cdc001706c36f": 79, "5d332373251f0e001609acbd": 79, "5d332b7e835aff001957feec": 79, "5d341711a667db0017fc816f": 79, "5d34294d835aff001958add9": 79, "5d7b8948fcbf44001c44e695": 18, "5fd26f33e54da6efc0bc7eca321ad622": 20, "5hju4": [169, 207, 268], "5min": 104, "5mm": [68, 97, 187, 221], "5pm": [179, 508], "5th": [21, 210], "5x1": 221, "5x4": 221, "6": [3, 6, 8, 10, 11, 13, 21, 25, 26, 29, 32, 33, 35, 36, 38, 40, 41, 43, 44, 45, 46, 47, 52, 53, 54, 56, 57, 58, 61, 62, 64, 65, 66, 68, 72, 73, 74, 75, 82, 84, 91, 93, 96, 99, 102, 103, 104, 107, 110, 111, 112, 114, 118, 122, 125, 127, 141, 143, 145, 148, 149, 150, 156, 157, 158, 165, 169, 176, 177, 178, 180, 191, 202, 209, 227, 233, 234, 248, 265, 268, 271, 312, 373, 374, 378, 381, 384, 386, 388, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 451, 457, 465, 467, 491, 492, 508, 509], "60": [6, 16, 17, 35, 43, 44, 64, 65, 66, 72, 73, 102, 104, 105, 118, 166, 202, 224, 234, 281, 491, 492, 507], "600": [35, 51, 52, 122, 163, 194, 201, 238, 260, 458], "60000": 52, "600137": 93, "601": 35, "601855088049469": 37, "602": 35, "602484": 35, "60263693e": 3, "603": 35, "6031594": 54, "60399349e": 3, "604": 35, "60400635e": 3, "605": 35, "605110272": 104, "6058": 492, "606": 35, "607": [35, 46], "6077": [51, 62, 509], "608": 35, "609": 35, "60956343e": 3, "61": [35, 38, 65, 69, 73, 104, 105, 118, 217, 491, 492], "610": 35, "610729984": 104, "611": 35, "6111": 36, "6111111111111112": [3, 31], "6111716": 54, "612": [35, 65, 73, 491], "61201803e": 3, "613": 35, "613071": 65, "6131100": 102, "6136523": 54, "614": 35, "61421996e": 3, "615": 35, "616": 35, "61629459e": 3, "616334": 35, "616497152": 104, "617": 35, "6176491": 54, "6178036": 102, "618": 35, "619": 35, "62": [6, 35, 64, 65, 73, 74, 93, 103, 104, 112, 118, 145, 163, 194, 238, 257, 491, 492, 501], "620": 35, "6203305": 102, "621": 35, "621936640": 104, "622": [32, 35, 48, 509], "62252795e": 3, "623": 35, "623032": 65, "624": 35, "625": 35, "6253721": 102, "62546": [64, 491], "626": 35, "626162": 93, "627": 35, "627359744": 104, "6274509803921569": 111, "628": 35, "62808064": 72, "629": 35, "63": [6, 35, 59, 64, 65, 66, 73, 93, 95, 104, 118, 229, 251, 259, 491, 492], "630": 35, "6300": 491, "63032947e": 3, "63090005e": 3, "631": 35, "63144973e": 3, "631803": 6, "632": [35, 98, 99, 509], "632930304": 104, "633": 35, "6330": 492, "63369": 492, "634": 35, "63460240e": 3, "635": 35, "635179": 65, "63538617e": 3, "635589": 93, "6358784": 102, "636": 35, "637": [35, 104, 115, 509], "638": [35, 103], "63808": 492, "63812": 492, "63835030e": 3, "638386176": 104, "6384587": 54, "639": 35, "639460": 65, "6397952": 18, "64": [20, 22, 35, 36, 38, 41, 43, 44, 50, 64, 65, 68, 72, 73, 81, 86, 96, 104, 111, 155, 160, 163, 190, 194, 202, 208, 234, 238, 248, 251, 252, 255, 491, 492, 501], "640": 35, "641": [35, 44, 48, 509], "64128": 492, "642": [35, 58, 290, 293, 294, 301, 459], "64226545e": 3, "64243509e": 3, "643": 35, "643219456": 104, "6432694": 102, "64339968": 104, "644": 35, "6447": [118, 187], "645": 35, "645e": 56, "645m": 227, "646": 35, "64628089e": 3, "64686506e": 3, "646e": 56, "647": 35, "647343": 35, "648": [35, 53, 62, 64, 65, 73, 491, 509], "648675328": 104, "648e": 56, "649": 35, "64908": 65, "64x64x64": 234, "65": [34, 35, 44, 64, 65, 73, 93, 104, 136, 163, 491, 492], "650": 35, "65020395e": 3, "65059030e": 3, "6506": 118, "651": 35, "651576": 65, "652": 35, "652072": 65, "65216113e": 3, "6528": 93, "65288887e": 3, "653": 35, "653063": 93, "65324289e": 3, "653885440": 104, "654": 35, "65405265e": 3, "65426": 107, "655": 35, "6552": 65, "656": [11, 29, 35, 509], "657": 35, "65750310e": 3, "658": 35, "65858512e": 3, "659": 35, "659161088": 104, "66": [6, 17, 18, 35, 61, 64, 65, 73, 92, 95, 104, 113, 208, 491, 492], "660": 35, "660587": 35, "661": [29, 35, 106, 115, 509], "662": 35, "663": 35, "664": 35, "664567808": 104, "664e": 56, "665": [35, 61, 118, 121, 226, 230, 266, 282, 284], "66514300e": 3, "6652": 104, "66533": 35, "66533180e": 3, "665675": 65, "666": [35, 81, 84, 509], "667": [35, 57, 62, 99, 509], "668": [35, 93], "66894690e": 3, "669": [35, 52, 118, 464, 470], "669982720": 104, "67": [25, 35, 64, 65, 73, 104, 125, 163, 251, 491, 492], "670": [35, 118, 121, 226, 282, 284], "671": 35, "67106228e": 3, "67114675e": 3, "6712058072321548": 37, "672": [35, 104, 115, 509], "67255933e": 3, "67292402e": 3, "673": 35, "674": 35, "675": [6, 35, 64], "6750208": 6, "675479552": 104, "676": 35, "676518": 6, "676956": 35, "67698285e": 3, "677": 35, "677519": 35, "678": [35, 61, 118, 230, 266], "6784": 93, "679": [35, 492], "67991625e": 3, "67b924beca01574bbea08fde49fbbbcd": 111, "68": [35, 43, 46, 52, 61, 64, 65, 72, 73, 93, 104, 192, 491, 492, 507], "680": [35, 70, 75, 509], "680517632": 104, "68079947e": 3, "681": [35, 52, 118, 464, 470], "68151": 492, "682": 35, "6823529411764706": 111, "68292": 492, "683": 35, "68303271e": 3, "68352": 93, "684": [35, 73], "68458931e": 3, "6848": 492, "685": 35, "68524996e": 3, "6852766": 72, "68544": 492, "68584": 93, "686": 35, "686096384": 104, "686556": 93, "687": 35, "68752124e": 3, "688": 35, "689": [35, 50, 62, 509], "6898": 36, "68e": 56, "69": [6, 22, 32, 35, 54, 64, 65, 73, 74, 81, 104, 491, 492], "690": 35, "69095043e": 3, "691": [35, 71, 75, 509], "69168568e": 3, "691765248": 104, "692": 35, "69248": 492, "693": 35, "69390313e": 3, "694": 35, "695": 35, "6953125": 111, "69550080": 72, "696": 35, "69681152": 104, "697": 35, "697253888": 104, "6979584": 72, "698": [2, 3, 8, 35, 509], "699": 35, "69997686e": 3, "6a": [6, 64, 65, 73, 491], "6b": [6, 64, 65, 491], "6c": [6, 64, 65], "6min": 104, "6mm": [312, 465], "6th": 21, "7": [3, 6, 10, 11, 16, 18, 22, 25, 27, 29, 35, 40, 41, 45, 46, 47, 48, 52, 54, 55, 56, 57, 59, 60, 61, 62, 64, 65, 66, 68, 71, 72, 73, 74, 84, 88, 91, 93, 96, 102, 104, 107, 109, 112, 115, 118, 121, 122, 125, 127, 136, 138, 143, 145, 148, 149, 151, 156, 158, 161, 177, 187, 190, 191, 194, 197, 202, 206, 208, 217, 231, 234, 237, 238, 248, 252, 254, 255, 260, 264, 322, 324, 325, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 437, 443, 447, 449, 450, 452, 454, 455, 464, 481, 491, 492, 507, 509, 511], "70": [22, 32, 34, 35, 64, 65, 66, 73, 104, 118, 161, 163, 176, 194, 233, 261, 491, 492, 501], "700": [35, 151, 163, 194, 238, 260], "700000": 68, "700012": 68, "70012": 492, "701": 35, "70158441e": 3, "70190830e": 3, "702": [35, 56, 62, 491, 509], "7020": 491, "702578688": 104, "703": 35, "704": [10, 29, 35, 77, 84, 492, 509], "705": 35, "7058823529411765": 111, "705898": 93, "706": 35, "707": 35, "70784828e": 3, "707870720": 104, "708": 35, "70884": [118, 219], "709": 35, "70976": 492, "70a": 35, "71": [4, 34, 35, 64, 65, 72, 73, 74, 93, 104, 194, 238, 491, 492], "710": 35, "71051564e": 3, "711": [35, 48], "712": 35, "712135": [118, 199], "71216225e": 3, "713": 35, "713375744": 104, "714": 35, "71451157e": 3, "714833": 65, "71484375": 111, "715": [24, 29, 35, 509], "71508522e": 3, "715557": 93, "71561": [118, 206, 254], "716": 35, "71618781e": 3, "716392": 65, "717": 35, "718": 35, "718946304": 104, "719": 35, "719380": 65, "72": [32, 35, 59, 61, 64, 65, 73, 93, 95, 104, 105, 118, 157, 163, 177, 230, 266, 491, 492], "720": [35, 65, 73], "72051932e": 3, "7209": [64, 118, 198], "721": 35, "7214": [118, 198], "72173054e": 3, "7218": 492, "722": 35, "7221": 46, "7221031": 46, "7229": 42, "723": 35, "724": 35, "72429958e": 3, "724312064": 104, "725": 35, "72569225e": 3, "72591456e": 3, "726": 35, "726928": 93, "727": 35, "728": 35, "729": 35, "729604096": 104, "73": [35, 64, 65, 73, 93, 104, 105, 491, 492], "730": 35, "731": 35, "73138172e": 3, "732": 35, "732209": 93, "733": 35, "734": [35, 103, 115, 509], "734506": 65, "734945280": 104, "735": 35, "735930735930736": 36, "735bf0f211246c83396b5f21f706c224": 10, "736": [35, 88, 99, 509], "73612920e": 3, "7362": 42, "73679163e": 3, "736986": 65, "737": 35, "73788465e": 3, "738": 35, "738699": 6, "739": 35, "73a": 35, "74": [35, 65, 72, 73, 93, 103, 104, 491, 492], "740": 35, "740286464": 104, "740345": 65, "741": 35, "742": 35, "743": 35, "744": [3, 35], "74432": 492, "74481664": 104, "745": 35, "745340928": 104, "746": 35, "74667390e": 3, "747": 35, "748": 35, "749": 35, "74915020e": 3, "7493501": [51, 118, 170, 313], "749503182": 104, "75": [6, 10, 18, 24, 26, 34, 35, 43, 44, 64, 65, 68, 73, 74, 93, 104, 106, 109, 114, 118, 194, 201, 238, 251, 399, 491, 492, 501], "750": 35, "75008": 492, "751": 35, "752": [35, 102, 103, 115, 118, 509], "752451": 65, "75292923e": 3, "753": 35, "75341824": 72, "754": 35, "75452739e": 3, "755": 35, "7552": 492, "75530363e": 3, "756": [35, 73, 103, 111, 115, 118, 491, 509], "756994": 65, "757": 35, "758": 35, "758346": 65, "75855356998246e": 77, "758570": 65, "75889063e": 3, "7589": 35, "759": 35, "76": [34, 35, 64, 65, 68, 73, 74, 93, 104, 254, 262, 491, 492], "760": 35, "76046535e": 3, "761": 35, "7616": 93, "762": [35, 58, 67, 75, 509], "763": [35, 103, 118], "763636": 6, "764": 35, "76487075e": 3, "765": 35, "76553449e": 3, "766": [35, 103, 118], "76642302e": 3, "76693819e": 3, "767": [3, 35], "768": [35, 492], "7680": 93, "769": [35, 115, 509], "769406": 93, "76994641e": 3, "76a": 73, "77": [3, 35, 54, 65, 68, 72, 73, 74, 104, 491, 492], "770": [35, 113], "77020330e": 3, "770578": 65, "771": 35, "772": [35, 71, 75, 92, 99, 509], "772909": 65, "772e": 56, "773": 35, "77309291e": 3, "77394614e": 3, "774": 35, "7744": 93, "774939": 45, "775": 35, "77511891e": 3, "776": 35, "777": [35, 105], "778": 35, "7783": 105, "7784": 111, "7785": 111, "7786": 111, "7787": 111, "778cb0": 11, "779": 35, "77914249e": 3, "779998": 35, "78": [35, 56, 64, 65, 68, 73, 74, 95, 104, 118, 176, 491, 492], "780": [6, 8, 35, 509], "78034344e": 3, "7803921568627451": 111, "7808": 93, "781": [35, 84], "781180": 492, "781181": 492, "781182": 492, "781183": 492, "781286": 11, "782": [35, 46], "78232": 93, "78272": 93, "783": [35, 491], "784": [35, 136, 163], "7847": 111, "785": [35, 91, 99, 509], "786": [35, 78, 118, 327], "7868": 3, "787": 35, "788": 35, "78895539e": 3, "789": 35, "78907649e": 3, "78947428e": 3, "789520": 65, "78976": 492, "79": [35, 61, 64, 65, 68, 73, 74, 93, 104, 107, 491, 492], "790": 35, "791": 35, "79166334e": 3, "792": [35, 65, 491], "79200609e": 3, "79274": 35, "793": [35, 118, 136, 163], "794": 35, "795": 35, "796": [35, 78, 118, 327], "79626240": 104, "796424": 65, "79689252e": 3, "797": 35, "798": 35, "79848": 492, "799": [35, 86, 99, 509], "7a": [6, 35, 64, 65, 73, 491], "7a8732": 11, "7b": [6, 35, 64, 65, 73], "7c": [64, 65], "7e62e7e7fcc4d6e1428b6b2cb48f7a7c": 11, "7min": [46, 104], "7networks_lh_cont_cing_1": 492, "7networks_lh_cont_cing_2": 492, "7networks_lh_cont_ofc_1": 492, "7networks_lh_cont_par_1": 492, "7networks_lh_cont_par_2": 492, "7networks_lh_cont_par_3": 492, "7networks_lh_cont_par_4": 492, "7networks_lh_cont_par_5": 492, "7networks_lh_cont_par_6": 492, "7networks_lh_cont_pcun_1": 492, "7networks_lh_cont_pcun_2": 492, "7networks_lh_cont_pfcl_1": 492, "7networks_lh_cont_pfcl_2": 492, "7networks_lh_cont_pfcl_3": 492, "7networks_lh_cont_pfcl_4": 492, "7networks_lh_cont_pfcl_5": 492, "7networks_lh_cont_pfcl_6": 492, "7networks_lh_cont_pfcl_7": 492, "7networks_lh_cont_pfcl_8": 492, "7networks_lh_cont_pfcmp_1": 492, "7networks_lh_cont_pfcv_1": 492, "7networks_lh_cont_temp_1": 492, "7networks_lh_default_par_1": 492, "7networks_lh_default_par_2": 492, "7networks_lh_default_par_3": 492, "7networks_lh_default_par_4": 492, "7networks_lh_default_par_5": 492, "7networks_lh_default_par_6": 492, "7networks_lh_default_par_7": 492, "7networks_lh_default_pcunpcc_1": 492, "7networks_lh_default_pcunpcc_10": 492, "7networks_lh_default_pcunpcc_11": 492, "7networks_lh_default_pcunpcc_2": 492, "7networks_lh_default_pcunpcc_3": 492, "7networks_lh_default_pcunpcc_4": 492, "7networks_lh_default_pcunpcc_5": 492, "7networks_lh_default_pcunpcc_6": 492, "7networks_lh_default_pcunpcc_7": 492, "7networks_lh_default_pcunpcc_8": 492, "7networks_lh_default_pcunpcc_9": 492, "7networks_lh_default_pfc_1": 492, "7networks_lh_default_pfc_10": 492, "7networks_lh_default_pfc_11": 492, "7networks_lh_default_pfc_12": 492, "7networks_lh_default_pfc_13": 492, "7networks_lh_default_pfc_14": 492, "7networks_lh_default_pfc_15": 492, "7networks_lh_default_pfc_16": 492, "7networks_lh_default_pfc_17": 492, "7networks_lh_default_pfc_18": 492, "7networks_lh_default_pfc_19": 492, "7networks_lh_default_pfc_2": 492, "7networks_lh_default_pfc_20": 492, "7networks_lh_default_pfc_21": 492, "7networks_lh_default_pfc_22": 492, "7networks_lh_default_pfc_23": 492, "7networks_lh_default_pfc_24": 492, "7networks_lh_default_pfc_3": 492, "7networks_lh_default_pfc_4": 492, "7networks_lh_default_pfc_5": 492, "7networks_lh_default_pfc_6": 492, "7networks_lh_default_pfc_7": 492, "7networks_lh_default_pfc_8": 492, "7networks_lh_default_pfc_9": 492, "7networks_lh_default_temp_1": 492, "7networks_lh_default_temp_10": 492, "7networks_lh_default_temp_2": 492, "7networks_lh_default_temp_3": 492, "7networks_lh_default_temp_4": 492, "7networks_lh_default_temp_5": 492, "7networks_lh_default_temp_6": 492, "7networks_lh_default_temp_7": 492, "7networks_lh_default_temp_8": 492, "7networks_lh_default_temp_9": 492, "7networks_lh_dorsattn_fef_1": 492, "7networks_lh_dorsattn_fef_2": 492, "7networks_lh_dorsattn_fef_3": 492, "7networks_lh_dorsattn_fef_4": 492, "7networks_lh_dorsattn_post_1": 492, "7networks_lh_dorsattn_post_10": 492, "7networks_lh_dorsattn_post_11": 492, "7networks_lh_dorsattn_post_12": 492, "7networks_lh_dorsattn_post_13": 492, "7networks_lh_dorsattn_post_14": 492, "7networks_lh_dorsattn_post_15": 492, "7networks_lh_dorsattn_post_16": 492, "7networks_lh_dorsattn_post_17": 492, "7networks_lh_dorsattn_post_2": 492, "7networks_lh_dorsattn_post_3": 492, "7networks_lh_dorsattn_post_4": 492, "7networks_lh_dorsattn_post_5": 492, "7networks_lh_dorsattn_post_6": 492, "7networks_lh_dorsattn_post_7": 492, "7networks_lh_dorsattn_post_8": 492, "7networks_lh_dorsattn_post_9": 492, "7networks_lh_dorsattn_prcv_1": 492, "7networks_lh_dorsattn_prcv_2": 492, "7networks_lh_limbic_ofc_1": 492, "7networks_lh_limbic_ofc_2": 492, "7networks_lh_limbic_ofc_3": 492, "7networks_lh_limbic_ofc_4": 492, "7networks_lh_limbic_ofc_5": 492, "7networks_lh_limbic_temppole_1": 492, "7networks_lh_limbic_temppole_2": 492, "7networks_lh_limbic_temppole_3": 492, "7networks_lh_limbic_temppole_4": 492, "7networks_lh_limbic_temppole_5": 492, "7networks_lh_limbic_temppole_6": 492, "7networks_lh_limbic_temppole_7": 492, "7networks_lh_limbic_temppole_8": 492, "7networks_lh_salventattn_froperins_1": 492, "7networks_lh_salventattn_froperins_2": 492, "7networks_lh_salventattn_froperins_3": 492, "7networks_lh_salventattn_froperins_4": 492, "7networks_lh_salventattn_froperins_5": 492, "7networks_lh_salventattn_froperins_6": 492, "7networks_lh_salventattn_froperins_7": 492, "7networks_lh_salventattn_froperins_8": 492, "7networks_lh_salventattn_froperins_9": 492, "7networks_lh_salventattn_med_1": 492, "7networks_lh_salventattn_med_2": 492, "7networks_lh_salventattn_med_3": 492, "7networks_lh_salventattn_med_4": 492, "7networks_lh_salventattn_med_5": 492, "7networks_lh_salventattn_med_6": 492, "7networks_lh_salventattn_med_7": 492, "7networks_lh_salventattn_paroper_1": 492, "7networks_lh_salventattn_paroper_2": 492, "7networks_lh_salventattn_paroper_3": 492, "7networks_lh_salventattn_paroper_4": 492, "7networks_lh_salventattn_pfcl_1": 492, "7networks_lh_salventattn_tempocc_1": 492, "7networks_lh_sommot_1": 492, "7networks_lh_sommot_10": 492, "7networks_lh_sommot_11": 492, "7networks_lh_sommot_12": 492, "7networks_lh_sommot_13": 492, "7networks_lh_sommot_14": 492, "7networks_lh_sommot_15": 492, "7networks_lh_sommot_16": 492, "7networks_lh_sommot_17": 492, "7networks_lh_sommot_18": 492, "7networks_lh_sommot_19": 492, "7networks_lh_sommot_2": 492, "7networks_lh_sommot_20": 492, "7networks_lh_sommot_21": 492, "7networks_lh_sommot_22": 492, "7networks_lh_sommot_23": 492, "7networks_lh_sommot_24": 492, "7networks_lh_sommot_25": 492, "7networks_lh_sommot_26": 492, "7networks_lh_sommot_27": 492, "7networks_lh_sommot_28": 492, "7networks_lh_sommot_29": 492, "7networks_lh_sommot_3": 492, "7networks_lh_sommot_30": 492, "7networks_lh_sommot_31": 492, "7networks_lh_sommot_32": 492, "7networks_lh_sommot_33": 492, "7networks_lh_sommot_34": 492, "7networks_lh_sommot_35": 492, "7networks_lh_sommot_36": 492, "7networks_lh_sommot_37": 492, "7networks_lh_sommot_4": 492, "7networks_lh_sommot_5": 492, "7networks_lh_sommot_6": 492, "7networks_lh_sommot_7": 492, "7networks_lh_sommot_8": 492, "7networks_lh_sommot_9": 492, "7networks_lh_vis_1": 492, "7networks_lh_vis_10": 492, "7networks_lh_vis_11": 492, "7networks_lh_vis_12": 492, "7networks_lh_vis_13": 492, "7networks_lh_vis_14": 492, "7networks_lh_vis_15": 492, "7networks_lh_vis_16": 492, "7networks_lh_vis_17": 492, "7networks_lh_vis_18": 492, "7networks_lh_vis_19": 492, "7networks_lh_vis_2": 492, "7networks_lh_vis_20": 492, "7networks_lh_vis_21": 492, "7networks_lh_vis_22": 492, "7networks_lh_vis_23": 492, "7networks_lh_vis_24": 492, "7networks_lh_vis_25": 492, "7networks_lh_vis_26": 492, "7networks_lh_vis_27": 492, "7networks_lh_vis_28": 492, "7networks_lh_vis_29": 492, "7networks_lh_vis_3": 492, "7networks_lh_vis_30": 492, "7networks_lh_vis_31": 492, "7networks_lh_vis_4": 492, "7networks_lh_vis_5": 492, "7networks_lh_vis_6": 492, "7networks_lh_vis_7": 492, "7networks_lh_vis_8": 492, "7networks_lh_vis_9": 492, "7networks_rh_cont_cing_1": 492, "7networks_rh_cont_cing_2": 492, "7networks_rh_cont_par_1": 492, "7networks_rh_cont_par_2": 492, "7networks_rh_cont_par_3": 492, "7networks_rh_cont_par_4": 492, "7networks_rh_cont_par_5": 492, "7networks_rh_cont_par_6": 492, "7networks_rh_cont_pcun_1": 492, "7networks_rh_cont_pcun_2": 492, "7networks_rh_cont_pfcl_1": 492, "7networks_rh_cont_pfcl_10": 492, "7networks_rh_cont_pfcl_11": 492, "7networks_rh_cont_pfcl_12": 492, "7networks_rh_cont_pfcl_13": 492, "7networks_rh_cont_pfcl_14": 492, "7networks_rh_cont_pfcl_15": 492, "7networks_rh_cont_pfcl_2": 492, "7networks_rh_cont_pfcl_3": 492, "7networks_rh_cont_pfcl_4": 492, "7networks_rh_cont_pfcl_5": 492, "7networks_rh_cont_pfcl_6": 492, "7networks_rh_cont_pfcl_7": 492, "7networks_rh_cont_pfcl_8": 492, "7networks_rh_cont_pfcl_9": 492, "7networks_rh_cont_pfcmp_1": 492, "7networks_rh_cont_pfcmp_2": 492, "7networks_rh_cont_pfcv_1": 492, "7networks_rh_cont_temp_1": 492, "7networks_rh_cont_temp_2": 492, "7networks_rh_default_par_1": 492, "7networks_rh_default_par_2": 492, "7networks_rh_default_par_3": 492, "7networks_rh_default_par_4": 492, "7networks_rh_default_par_5": 492, "7networks_rh_default_pcunpcc_1": 492, "7networks_rh_default_pcunpcc_2": 492, "7networks_rh_default_pcunpcc_3": 492, "7networks_rh_default_pcunpcc_4": 492, "7networks_rh_default_pcunpcc_5": 492, "7networks_rh_default_pcunpcc_6": 492, "7networks_rh_default_pcunpcc_7": 492, "7networks_rh_default_pcunpcc_8": 492, "7networks_rh_default_pcunpcc_9": 492, "7networks_rh_default_pfcdpfcm_1": 492, "7networks_rh_default_pfcdpfcm_10": 492, "7networks_rh_default_pfcdpfcm_11": 492, "7networks_rh_default_pfcdpfcm_12": 492, "7networks_rh_default_pfcdpfcm_13": 492, "7networks_rh_default_pfcdpfcm_2": 492, "7networks_rh_default_pfcdpfcm_3": 492, "7networks_rh_default_pfcdpfcm_4": 492, "7networks_rh_default_pfcdpfcm_5": 492, "7networks_rh_default_pfcdpfcm_6": 492, "7networks_rh_default_pfcdpfcm_7": 492, "7networks_rh_default_pfcdpfcm_8": 492, "7networks_rh_default_pfcdpfcm_9": 492, "7networks_rh_default_pfcv_1": 492, "7networks_rh_default_pfcv_2": 492, "7networks_rh_default_pfcv_3": 492, "7networks_rh_default_pfcv_4": 492, "7networks_rh_default_temp_1": 492, "7networks_rh_default_temp_2": 492, "7networks_rh_default_temp_3": 492, "7networks_rh_default_temp_4": 492, "7networks_rh_default_temp_5": 492, "7networks_rh_default_temp_6": 492, "7networks_rh_default_temp_7": 492, "7networks_rh_default_temp_8": 492, "7networks_rh_dorsattn_fef_1": 492, "7networks_rh_dorsattn_fef_2": 492, "7networks_rh_dorsattn_fef_3": 492, "7networks_rh_dorsattn_post_1": 492, "7networks_rh_dorsattn_post_10": 492, "7networks_rh_dorsattn_post_11": 492, "7networks_rh_dorsattn_post_12": 492, "7networks_rh_dorsattn_post_13": 492, "7networks_rh_dorsattn_post_14": 492, "7networks_rh_dorsattn_post_15": 492, "7networks_rh_dorsattn_post_16": 492, "7networks_rh_dorsattn_post_17": 492, "7networks_rh_dorsattn_post_18": 492, "7networks_rh_dorsattn_post_19": 492, "7networks_rh_dorsattn_post_2": 492, "7networks_rh_dorsattn_post_3": 492, "7networks_rh_dorsattn_post_4": 492, "7networks_rh_dorsattn_post_5": 492, "7networks_rh_dorsattn_post_6": 492, "7networks_rh_dorsattn_post_7": 492, "7networks_rh_dorsattn_post_8": 492, "7networks_rh_dorsattn_post_9": 492, "7networks_rh_dorsattn_prcv_1": 492, "7networks_rh_limbic_ofc_1": 492, "7networks_rh_limbic_ofc_2": 492, "7networks_rh_limbic_ofc_3": 492, "7networks_rh_limbic_ofc_4": 492, "7networks_rh_limbic_ofc_5": 492, "7networks_rh_limbic_ofc_6": 492, "7networks_rh_limbic_temppole_1": 492, "7networks_rh_limbic_temppole_2": 492, "7networks_rh_limbic_temppole_3": 492, "7networks_rh_limbic_temppole_4": 492, "7networks_rh_limbic_temppole_5": 492, "7networks_rh_limbic_temppole_6": 492, "7networks_rh_limbic_temppole_7": 492, "7networks_rh_salventattn_froperins_1": 492, "7networks_rh_salventattn_froperins_2": 492, "7networks_rh_salventattn_froperins_3": 492, "7networks_rh_salventattn_froperins_4": 492, "7networks_rh_salventattn_froperins_5": 492, "7networks_rh_salventattn_froperins_6": 492, "7networks_rh_salventattn_froperins_7": 492, "7networks_rh_salventattn_froperins_8": 492, "7networks_rh_salventattn_med_1": 492, "7networks_rh_salventattn_med_2": 492, "7networks_rh_salventattn_med_3": 492, "7networks_rh_salventattn_med_4": 492, "7networks_rh_salventattn_med_5": 492, "7networks_rh_salventattn_med_6": 492, "7networks_rh_salventattn_med_7": 492, "7networks_rh_salventattn_med_8": 492, "7networks_rh_salventattn_pfcl_1": 492, "7networks_rh_salventattn_prc_1": 492, "7networks_rh_salventattn_tempoccpar_1": 492, "7networks_rh_salventattn_tempoccpar_2": 492, "7networks_rh_salventattn_tempoccpar_3": 492, "7networks_rh_salventattn_tempoccpar_4": 492, "7networks_rh_salventattn_tempoccpar_5": 492, "7networks_rh_salventattn_tempoccpar_6": 492, "7networks_rh_salventattn_tempoccpar_7": 492, "7networks_rh_sommot_1": 492, "7networks_rh_sommot_10": 492, "7networks_rh_sommot_11": 492, "7networks_rh_sommot_12": 492, "7networks_rh_sommot_13": 492, "7networks_rh_sommot_14": 492, "7networks_rh_sommot_15": 492, "7networks_rh_sommot_16": 492, "7networks_rh_sommot_17": 492, "7networks_rh_sommot_18": 492, "7networks_rh_sommot_19": 492, "7networks_rh_sommot_2": 492, "7networks_rh_sommot_20": 492, "7networks_rh_sommot_21": 492, "7networks_rh_sommot_22": 492, "7networks_rh_sommot_23": 492, "7networks_rh_sommot_24": 492, "7networks_rh_sommot_25": 492, "7networks_rh_sommot_26": 492, "7networks_rh_sommot_27": 492, "7networks_rh_sommot_28": 492, "7networks_rh_sommot_29": 492, "7networks_rh_sommot_3": 492, "7networks_rh_sommot_30": 492, "7networks_rh_sommot_31": 492, "7networks_rh_sommot_32": 492, "7networks_rh_sommot_33": 492, "7networks_rh_sommot_34": 492, "7networks_rh_sommot_35": 492, "7networks_rh_sommot_36": 492, "7networks_rh_sommot_37": 492, "7networks_rh_sommot_38": 492, "7networks_rh_sommot_39": 492, "7networks_rh_sommot_4": 492, "7networks_rh_sommot_40": 492, "7networks_rh_sommot_5": 492, "7networks_rh_sommot_6": 492, "7networks_rh_sommot_7": 492, "7networks_rh_sommot_8": 492, "7networks_rh_sommot_9": 492, "7networks_rh_vis_1": 492, "7networks_rh_vis_10": 492, "7networks_rh_vis_11": 492, "7networks_rh_vis_12": 492, "7networks_rh_vis_13": 492, "7networks_rh_vis_14": 492, "7networks_rh_vis_15": 492, "7networks_rh_vis_16": 492, "7networks_rh_vis_17": 492, "7networks_rh_vis_18": 492, "7networks_rh_vis_19": 492, "7networks_rh_vis_2": 492, "7networks_rh_vis_20": 492, "7networks_rh_vis_21": 492, "7networks_rh_vis_22": 492, "7networks_rh_vis_23": 492, "7networks_rh_vis_24": 492, "7networks_rh_vis_25": 492, "7networks_rh_vis_26": 492, "7networks_rh_vis_27": 492, "7networks_rh_vis_28": 492, "7networks_rh_vis_29": 492, "7networks_rh_vis_3": 492, "7networks_rh_vis_30": 492, "7networks_rh_vis_4": 492, "7networks_rh_vis_5": 492, "7networks_rh_vis_6": 492, "7networks_rh_vis_7": 492, "7networks_rh_vis_8": 492, "7networks_rh_vis_9": 492, "8": [3, 4, 6, 8, 10, 11, 15, 18, 25, 26, 32, 35, 36, 40, 41, 43, 45, 46, 48, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 64, 65, 68, 72, 73, 74, 75, 77, 78, 81, 82, 88, 91, 93, 94, 95, 98, 102, 103, 104, 106, 107, 108, 112, 114, 115, 118, 121, 125, 130, 132, 136, 141, 149, 151, 153, 159, 161, 169, 177, 199, 202, 205, 211, 212, 213, 214, 215, 217, 226, 236, 250, 253, 257, 263, 271, 273, 282, 284, 290, 295, 296, 297, 298, 299, 300, 305, 306, 307, 308, 310, 311, 312, 313, 332, 346, 350, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 392, 395, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 463, 465, 474, 475, 477, 491, 492, 508, 509, 511], "80": [35, 50, 57, 59, 65, 67, 68, 73, 74, 86, 104, 107, 118, 165, 166, 179, 222, 225, 258, 350, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 443, 444, 446, 450, 451, 452, 454, 455, 487, 491, 492], "800": [35, 36, 89, 111, 194, 238, 260, 332, 346, 436, 475], "8006311399803963": 77, "8009": 101, "801": [35, 36, 48, 101, 509], "801208": 44, "802": 35, "80212931e": 3, "803": 35, "80302111e": 3, "803030303030303": 36, "8037": 28, "804": 35, "805": [35, 118], "806": 35, "806378e": 51, "807": 35, "80743177e": 3, "80790296e": 3, "808": [20, 29, 35, 509], "809": [35, 82, 84, 509], "80910092e": 3, "81": [35, 65, 72, 73, 104, 123, 163, 199, 491, 492], "810": 35, "81060225e": 3, "811": 35, "8119": [118, 206, 219, 254], "812": 35, "8122": 36, "813": 35, "81308": 35, "814": 35, "81403904": 72, "81419791e": 3, "815": 35, "816": [35, 52, 62, 509], "81648566e": 3, "81664182e": 3, "817": 35, "81704538e": 3, "817e": 56, "818": 35, "819": 35, "81940390e": 3, "82": [32, 34, 35, 65, 73, 91, 93, 104, 199, 491, 492], "820": 35, "821": 35, "822": [35, 136, 163], "82244409e": 3, "823": [35, 101], "824": 35, "825": 35, "825038": 6, "825802": 51, "826": 35, "82604886e": 3, "82611887e": 3, "82637933e": 3, "827": 35, "82792679e": 3, "828": [35, 39, 48, 65, 73, 509], "82882545e": 3, "829": [35, 115, 509], "82971784e": 3, "82a": 35, "83": [34, 35, 64, 65, 73, 74, 93, 104, 118, 122, 163, 185, 217, 348, 399, 491, 492], "830": [35, 105], "831": 35, "832": [35, 492], "83203952e": 3, "833": [35, 80, 84, 509], "8339": [157, 163], "834": [35, 62, 509], "835": [35, 59], "836": 35, "836576": 35, "837": [6, 35, 64], "8376623376623377": 36, "838": 35, "83881806e": 3, "839": 35, "839058": 35, "839163": 65, "839166": 93, "8397156": 0, "84": [35, 58, 64, 72, 73, 93, 103, 104, 118, 353, 373, 491, 492], "840": 35, "84052949e": 3, "841": 35, "841e": 56, "842": 35, "842804": 35, "842x": [106, 118, 399], "843": 35, "843388": 59, "843833": 65, "844": 35, "844104": 93, "844892": 59, "844e": 56, "845": 35, "846": 35, "84618111e": 3, "84697775e": 3, "847": 35, "848": 35, "84813144e": 3, "84885504": 104, "85": [35, 50, 65, 73, 93, 104, 136, 163, 393, 396, 491, 492], "850138": 6, "8518518518518519": 3, "85356995e": 3, "853608": 65, "85520741e": 3, "856": [99, 509], "85681570e": 3, "8569": 111, "857": 87, "857585": 65, "8576": 93, "8578": 36, "858": [101, 492], "85905523e": 3, "86": [34, 35, 72, 73, 93, 104, 491, 492], "862": 43, "864": [6, 41, 65], "86599557e": 3, "867": [101, 115, 509], "868": [3, 17, 31], "86830219e": 3, "86a": 35, "87": [32, 34, 35, 64, 65, 72, 73, 74, 93, 104, 118, 491, 492], "8711": 36, "87115150e": 3, "87167265e": 3, "87171072": 72, "872": [31, 48, 509], "872285": 65, "87324a": 11, "874f": 58, "875": [118, 136, 163, 165], "8765432098765432": 3, "876886": 59, "878390": 59, "88": [35, 73, 83, 91, 93, 104, 106, 118, 399, 491, 492], "881": 492, "88147746e": 3, "881e": 56, "882": [14, 29, 509], "8824": 93, "88299e": [33, 35, 42, 46], "883419": 65, "8837": 36, "883849": 93, "884": [90, 99, 509], "885": 35, "8859": 36, "886": [3, 29, 509], "88656953e": 3, "887": 26, "88746536e": 3, "88767834e": 3, "887969": 65, "888": [60, 62, 492, 509], "88844507e": 3, "89": [6, 32, 34, 35, 47, 56, 64, 73, 74, 79, 104, 109, 491, 492], "890005": 65, "89030259e": 3, "89089837e": 3, "891": [64, 118, 165, 491], "89177011e": 3, "89275563e": 3, "89305993e": 3, "893538": 65, "89376959e": 3, "895": 114, "8952": 93, "895898": 53, "895e": 56, "896": 492, "8960": 93, "8964": 73, "897": [16, 29, 509], "89710830e": 3, "897183": 65, "89847012e": 3, "8990": 179, "89931776": 104, "8a": [6, 35, 64, 65, 73, 491], "8b": [6, 64, 73, 491], "8c": [64, 491], "8min": 104, "8mm": 104, "9": [3, 6, 8, 10, 11, 16, 18, 26, 35, 37, 38, 41, 43, 44, 45, 47, 50, 52, 54, 55, 56, 57, 58, 59, 61, 62, 64, 65, 69, 71, 72, 73, 74, 88, 90, 91, 92, 93, 94, 96, 101, 102, 103, 104, 106, 107, 108, 109, 110, 115, 118, 120, 121, 122, 125, 131, 145, 154, 156, 161, 165, 185, 206, 207, 226, 228, 231, 260, 268, 269, 282, 284, 319, 323, 332, 341, 345, 348, 364, 370, 373, 374, 377, 378, 379, 383, 384, 385, 386, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 436, 452, 454, 455, 465, 471, 474, 491, 492, 507, 509, 511], "90": [10, 23, 32, 34, 35, 50, 53, 56, 59, 66, 73, 79, 81, 93, 104, 105, 107, 118, 136, 149, 157, 163, 164, 169, 373, 374, 452, 454, 455, 458, 478, 491, 492, 507], "900": [65, 151, 163, 194, 238, 260, 492], "90074619e": 3, "901255": 6, "90209186e": 3, "90251997e": 3, "9049586776859504": 36, "9059": 36, "907": 492, "9073798500881832": 41, "9098039215686274": 111, "91": [2, 32, 35, 59, 64, 72, 73, 79, 93, 104, 157, 163, 250, 261, 491, 492], "911755": 35, "912": [51, 62, 509], "91200": 492, "91328": 492, "9136": 93, "91414449e": 3, "91435": 492, "915": [43, 44, 118, 224, 281], "91520": 492, "915996": 35, "9177489177489176": 36, "92": [10, 32, 34, 35, 65, 73, 79, 93, 104, 106, 118, 399, 491, 492], "921": 107, "92160000": 72, "922085": 59, "923589": 59, "923981": 65, "924582": 65, "92528124e": 3, "92569994e": 3, "9259259259259259": 3, "92618111e": 3, "92748418e": 3, "928": [29, 79, 84, 509], "92870350e": 3, "929": [24, 43, 44, 118, 224, 281], "929461": 65, "93": [32, 34, 35, 65, 73, 79, 93, 104, 254, 491, 492, 509], "93192612e": 3, "932": [47, 48, 105, 509], "93380279e": 3, "934": [69, 75, 509], "93485421e": 3, "935": [25, 29, 118, 217, 509], "935719": 35, "936": [65, 73], "93777286e": 3, "938": [21, 29, 509], "93850252e": 3, "94": [32, 35, 64, 72, 73, 79, 93, 104, 109, 110, 276, 277, 491, 492], "94177063e": 3, "94204735e": 3, "9444444444444444": 31, "945": [118, 217], "945328": 6, "946": 492, "947": 492, "947193": 6, "95": [27, 32, 35, 73, 93, 95, 104, 157, 163, 191, 202, 322, 324, 325, 491, 492], "950386": 93, "952826": 6, "953": [118, 198], "954": 58, "95405707e": 3, "95453184": 104, "95493578e": 3, "955": [35, 48, 509], "95635298e": 3, "956513": 53, "956851": 93, "957": [72, 75, 509], "959472": 65, "959582": 35, "96": [32, 34, 35, 64, 72, 73, 74, 86, 93, 104, 113, 234, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 443, 444, 451, 491, 492], "960": 492, "9600": 93, "962": [75, 509], "96234052e": 3, "96256000": 72, "9629629629629629": 3, "963": 73, "96432217e": 3, "96442e": [33, 35], "965": [118, 198], "966": [89, 99, 509], "967": [75, 492, 509], "9673": [118, 374], "9678": [118, 374], "968": [72, 118, 217], "968400": 93, "969": [97, 99, 509], "97": [32, 35, 47, 72, 73, 90, 93, 104, 491, 492], "970": 492, "972": [6, 64, 73], "9728": 93, "973": 492, "974": [64, 75, 491, 509], "974948": 35, "9753086419753086": 3, "977": [108, 115, 509], "978": [118, 324, 325], "98": [19, 32, 34, 35, 64, 73, 77, 89, 93, 95, 104, 112, 118, 157, 163, 185, 348, 399, 491, 492], "980": [118, 217], "980278": 65, "981": [29, 509], "98107": 0, "981215": 35, "9816": 93, "982": 12, "98227033e": 3, "983": 492, "984": 35, "9841": 104, "98652945e": 3, "98671660e": 3, "98717697e": 3, "98728007e": 3, "98746082e": 3, "9876543209876543": 3, "988": 118, "98919806e": 3, "98950260e": 3, "99": [13, 32, 34, 35, 61, 64, 65, 73, 95, 104, 157, 163, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 491, 492, 509], "99014345e": 3, "9902": 11, "99186878e": 3, "992": 118, "993198": 93, "994713": 35, "997198": 51, "9984": 93, "999": [16, 29, 492, 509], "999189": 65, "999324": 59, "999999998": 46, "999999999": 42, "9a": [35, 64, 65, 73, 491], "9b76y": [208, 255], "9cabe068089e791ef0c5fe930fc20e30": 3, "9min": 104, "A": [0, 1, 5, 6, 7, 8, 12, 16, 17, 22, 26, 31, 43, 45, 46, 50, 51, 52, 59, 61, 64, 66, 70, 73, 74, 77, 81, 82, 86, 88, 91, 100, 101, 103, 106, 109, 110, 111, 115, 116, 117, 118, 121, 128, 132, 143, 144, 148, 151, 157, 161, 163, 165, 167, 168, 170, 172, 174, 175, 176, 178, 179, 180, 182, 185, 187, 188, 190, 191, 192, 198, 199, 201, 202, 204, 205, 206, 208, 209, 217, 223, 226, 229, 230, 231, 232, 233, 234, 236, 240, 241, 242, 251, 253, 254, 259, 261, 262, 263, 265, 266, 267, 269, 271, 282, 283, 284, 285, 287, 293, 294, 301, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 323, 324, 325, 328, 331, 332, 335, 341, 346, 351, 352, 358, 363, 364, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 399, 410, 411, 413, 415, 431, 432, 435, 436, 441, 446, 448, 450, 452, 453, 456, 458, 462, 463, 464, 465, 466, 467, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 507, 509, 510], "AND": [96, 121, 130, 163], "And": [7, 27, 44, 105, 165, 180, 188, 191], "As": [3, 6, 16, 36, 38, 41, 47, 52, 55, 57, 68, 81, 83, 94, 96, 97, 101, 104, 107, 111, 120, 127, 151, 163, 165, 166, 168, 170, 171, 172, 176, 178, 179, 181, 184, 190, 234, 335, 373, 374, 377, 378, 379, 380, 381, 382], "At": [35, 58, 64, 66, 67, 70, 73, 79, 82, 93, 104, 113, 169, 187, 188, 346, 348, 491], "BY": [129, 163, 221], "Be": [171, 172, 179, 242, 319, 476], "But": [52, 77, 82, 101, 169, 178, 181, 192], "By": [3, 15, 16, 27, 31, 35, 37, 41, 61, 66, 71, 72, 105, 155, 163, 172, 179, 188, 192, 229, 241, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 301, 305, 306, 307, 308, 310, 311, 312, 313, 332, 346, 352, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 434, 441, 444, 445, 447, 449, 450, 451, 454, 458, 463, 464, 465, 468, 507], "For": [3, 4, 6, 7, 10, 15, 16, 20, 24, 25, 26, 31, 32, 34, 36, 37, 38, 39, 41, 43, 44, 45, 46, 51, 53, 54, 57, 66, 68, 70, 72, 74, 77, 81, 82, 88, 91, 93, 101, 103, 105, 107, 109, 111, 113, 120, 121, 134, 148, 158, 163, 164, 165, 166, 168, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 184, 185, 187, 188, 190, 191, 192, 197, 198, 199, 200, 201, 204, 205, 207, 208, 210, 217, 218, 219, 220, 224, 225, 226, 228, 232, 233, 236, 237, 240, 247, 250, 251, 252, 256, 257, 260, 261, 263, 264, 270, 272, 273, 279, 282, 284, 286, 289, 291, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 310, 311, 312, 313, 322, 323, 324, 325, 332, 339, 345, 348, 362, 363, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 432, 434, 441, 443, 444, 446, 449, 450, 451, 452, 453, 454, 455, 462, 463, 465, 466, 467, 473, 474, 475, 476, 487, 492, 507, 508], "If": [0, 2, 10, 11, 15, 16, 25, 26, 36, 37, 38, 43, 44, 45, 50, 52, 54, 55, 56, 57, 58, 59, 61, 64, 65, 71, 72, 73, 77, 81, 86, 88, 91, 93, 94, 96, 101, 102, 103, 104, 106, 107, 108, 109, 110, 113, 116, 120, 121, 129, 148, 155, 156, 158, 163, 164, 165, 169, 171, 172, 174, 176, 178, 179, 181, 185, 187, 188, 190, 191, 192, 198, 219, 240, 241, 242, 244, 246, 247, 248, 249, 254, 256, 257, 259, 268, 272, 273, 276, 277, 280, 282, 284, 286, 287, 291, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 322, 323, 324, 325, 328, 329, 332, 335, 339, 341, 345, 346, 347, 348, 349, 350, 351, 352, 356, 357, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 474, 475, 476, 477, 481, 482, 483, 487, 488, 489, 507, 508], "In": [0, 3, 4, 6, 10, 13, 15, 16, 17, 23, 24, 25, 26, 34, 35, 38, 40, 41, 42, 43, 45, 50, 51, 52, 53, 54, 55, 56, 57, 61, 67, 68, 69, 74, 81, 83, 88, 89, 91, 93, 96, 97, 98, 102, 103, 105, 111, 113, 114, 118, 119, 120, 121, 127, 128, 134, 143, 148, 158, 160, 161, 163, 165, 166, 168, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 183, 185, 187, 188, 189, 190, 191, 192, 198, 199, 202, 219, 225, 228, 229, 240, 247, 250, 252, 256, 257, 258, 282, 284, 305, 306, 307, 308, 310, 311, 312, 313, 319, 322, 324, 325, 332, 334, 339, 349, 351, 366, 367, 368, 370, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 399, 436, 437, 449, 462, 463, 465, 471, 474, 477, 487, 507, 508], "Ins": 54, "It": [2, 3, 6, 10, 15, 16, 17, 23, 36, 39, 41, 44, 45, 47, 51, 54, 64, 65, 67, 68, 72, 73, 77, 79, 83, 91, 96, 101, 103, 104, 111, 113, 119, 120, 121, 125, 134, 135, 138, 141, 142, 144, 155, 156, 157, 158, 161, 163, 164, 165, 166, 171, 172, 174, 175, 176, 178, 179, 181, 185, 186, 187, 188, 190, 191, 192, 202, 203, 222, 225, 226, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 508], "Its": [165, 173, 178, 309, 315, 325, 349, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 435, 445, 475], "NOS": 248, "NOT": 121, "No": [17, 59, 65, 68, 77, 79, 93, 97, 109, 112, 178, 179, 367, 491], "Not": [3, 68, 73, 256, 257, 390, 403, 462, 464], "ON": 52, "ONE": [118, 187], "OR": 121, "Of": 70, "On": [3, 14, 38, 52, 55, 56, 59, 61, 65, 68, 70, 77, 79, 107, 118, 149, 163, 164, 166, 178, 187, 191, 192, 241, 244], "One": [3, 6, 15, 36, 37, 41, 51, 52, 59, 81, 156, 163, 165, 166, 171, 172, 176, 178, 180, 181, 183, 184, 188, 190, 192, 301, 332, 366, 374, 378, 384, 468], "Or": [31, 35, 64, 70, 73, 104, 113, 121, 171, 507], "Such": [96, 165, 371], "That": [37, 38, 43, 44, 45, 50, 54, 55, 56, 57, 58, 59, 61, 64, 71, 91, 93, 94, 96, 101, 102, 103, 106, 107, 108, 109, 110, 120, 155, 163, 185, 319, 323, 332, 334, 339], "The": [0, 2, 3, 6, 7, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 30, 31, 32, 34, 35, 36, 38, 41, 43, 44, 45, 46, 48, 50, 51, 52, 54, 55, 57, 58, 61, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 77, 78, 79, 81, 82, 83, 86, 87, 90, 91, 92, 93, 94, 95, 96, 98, 101, 102, 103, 104, 105, 106, 108, 110, 111, 113, 114, 116, 118, 120, 121, 123, 124, 125, 127, 128, 130, 132, 134, 135, 136, 138, 139, 140, 141, 142, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 178, 179, 180, 181, 184, 185, 187, 188, 189, 190, 191, 194, 196, 197, 198, 199, 201, 202, 204, 205, 207, 210, 217, 218, 219, 220, 221, 222, 227, 228, 229, 231, 234, 235, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 271, 272, 273, 275, 276, 277, 279, 280, 283, 284, 285, 286, 287, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 334, 335, 339, 340, 341, 345, 346, 347, 348, 349, 350, 351, 352, 353, 357, 361, 362, 363, 364, 365, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 487, 491, 492, 496, 497, 501, 502, 507, 508, 509, 510], "Their": 224, "Then": [2, 3, 15, 32, 43, 45, 50, 53, 54, 58, 65, 66, 96, 97, 114, 164, 169, 171, 173, 174, 179, 188, 191, 192, 240, 242, 273, 462], "There": [0, 4, 22, 68, 168, 171, 172, 173, 179, 185, 250, 258, 322, 324, 325, 347, 373, 472, 507], "These": [3, 4, 6, 16, 26, 41, 58, 61, 63, 74, 76, 79, 81, 83, 91, 96, 112, 116, 120, 134, 151, 154, 155, 158, 161, 163, 164, 171, 174, 175, 177, 178, 179, 183, 184, 185, 188, 192, 198, 199, 208, 219, 220, 234, 255, 265, 267, 303, 312, 313, 500, 507, 508], "To": [0, 2, 3, 4, 6, 16, 22, 23, 24, 33, 35, 39, 42, 43, 45, 46, 51, 52, 53, 54, 55, 57, 58, 65, 68, 69, 71, 78, 79, 81, 82, 89, 91, 96, 101, 104, 105, 108, 111, 113, 120, 121, 132, 143, 148, 160, 163, 164, 165, 166, 168, 171, 172, 173, 174, 176, 179, 180, 181, 184, 188, 190, 191, 282, 322, 324, 325, 341, 350, 362, 373, 444, 449, 450, 451, 452, 454, 455, 458, 462, 474, 475, 507], "Will": [248, 282, 332, 339, 355, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 437, 446, 455, 459], "With": [10, 15, 34, 59, 80, 91, 174, 178, 181, 241, 244, 328, 374, 477, 486, 508], "_": [32, 38, 47, 50, 52, 54, 60, 65, 73, 77, 79, 82, 96, 103, 106, 109, 110, 127, 156, 160, 163, 179, 188, 287, 335, 345], "__": [103, 240, 241, 242, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465], "______________________________________________________________________": 32, "________________________________________________________________________________": [35, 51, 52, 53, 55, 56, 59, 61], "__________________________________________________________run_glm": 35, "________________________________________________________ward_tre": 52, "____________________________________________________estimator_fit": 52, "_________________________________________________compute_load": [51, 53], "_______________________________________________filter_and_extract": [52, 55, 56, 59, 61], "______________________________________________explained_vari": 51, "_____________________________________________dict_learning_onlin": [51, 53], "__________________________________________high_variance_confound": 56, "_________________________________recursive_neighbor_agglomer": 52, "__all__": 179, "__class__": 47, "__init__": [179, 240, 241, 242, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 332, 346, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 462, 463, 464, 465, 473, 479, 480, 481, 482, 483], "__init___": 323, "__name__": 47, "__sklearn_tags__": [135, 163], "__traceback__": [314, 315, 316, 317, 318], "__version__": 179, "_adjust_screening_percentil": [143, 163], "_agglom": 52, "_apply_cluster_size_threshold": [159, 163], "_ax": 19, "_ball_sample_loc": 25, "_base": [36, 51], "_build": 179, "_cached_cal": 46, "_check_mask_shap": 179, "_check_mask_valu": 179, "_check_second_level_input": [160, 163], "_cmap_d": 13, "_col_filters_available_on_serv": 282, "_column": 181, "_compute_facecolors_matplotlib": [129, 163], "_compute_load": [51, 53], "_core": [3, 17, 31, 61], "_data": [21, 51, 53], "_default_time_out": [282, 284], "_design": 345, "_dict_learn": [51, 53], "_empty_filt": 282, "_estimator_fit": 52, "_explained_vari": 51, "_extractionfunctor": [52, 55, 56, 59, 61], "_fastica": 94, "_full_brain_info": [129, 163], "_gamma_difference_hrf": [160, 163], "_get_clusters_t": [130, 163], "_get_mask_volum": [143, 163], "_get_vertexcolor": [129, 163], "_get_voxelwise_model_attribut": [156, 163], "_hemi": [7, 481, 482], "_label": 69, "_latest": 188, "_line_sample_loc": 25, "_make_stat_map": [65, 77], "_method": 61, "_mix_colormap": [129, 163], "_neurosynth_fetch_words_url": [160, 163], "_neurovault_base_url": [160, 163], "_one_mesh_info": [129, 163], "_plot_surf_matplotlib": [129, 163], "_projector": [14, 15, 17, 54, 55, 61, 65, 132, 158, 163], "_r": 13, "_region_id_nam": [132, 163], "_safe_cach": [127, 163], "_safe_get_data": [143, 163], "_sample_locations_between_surfac": 25, "_scale": 202, "_scan": 181, "_slicer": [2, 4, 10, 11, 16, 17, 18, 27, 38, 43, 51, 71, 83, 91, 94, 96, 158, 163], "_space": 335, "_stat": 345, "_statmap": 345, "_task": 335, "_test": 179, "_univariate_select": 114, "_update_submatrix": 178, "_util": [25, 40, 43, 47, 52, 60, 69, 70, 80, 93, 109, 110, 114, 128, 130, 138, 157, 160, 163, 178, 179, 188], "_valid": 179, "_validate_shap": 179, "_version": 188, "_voxel": 181, "_vx": 188, "_z_map": 73, "a4c8868ab5c651b8594da6f3204": 42, "a_model001_task002_cope011_tstat1": 112, "a_nice_funct": 179, "aal": [132, 140, 163, 194, 238, 250], "aal3": 250, "ab": [32, 46, 47, 56, 61, 83, 86, 106, 107, 108, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 437, 443, 444, 451], "abadi": [0, 136, 138, 141, 148, 163], "abb4588": 118, "abbrevi": 190, "abdulrahman": [103, 118], "aben": [0, 151, 163], "aberr": 80, "abid": [6, 118, 142, 163, 179, 194, 248], "abl": [32, 34, 39, 132, 163, 179, 188, 371, 452, 454, 455, 507], "abnorm": [118, 217], "about": [0, 2, 3, 6, 15, 20, 25, 35, 36, 51, 52, 64, 65, 66, 70, 73, 78, 80, 81, 96, 103, 104, 105, 113, 120, 121, 127, 128, 129, 132, 135, 136, 151, 159, 163, 164, 168, 171, 172, 174, 176, 178, 179, 180, 181, 185, 186, 187, 190, 197, 198, 200, 202, 204, 207, 208, 218, 225, 226, 233, 236, 252, 261, 263, 271, 273, 279, 286, 295, 296, 297, 298, 299, 300, 318, 332, 346, 374, 377, 378, 379, 380, 381, 382, 435, 476, 487, 491], "abov": [2, 3, 4, 6, 15, 22, 26, 35, 41, 45, 50, 51, 52, 59, 68, 88, 96, 98, 103, 121, 130, 132, 133, 143, 161, 163, 165, 166, 168, 170, 171, 176, 178, 179, 180, 185, 188, 190, 191, 192, 218, 233, 250, 273, 295, 296, 299, 305, 306, 307, 308, 310, 311, 312, 313, 319, 322, 323, 324, 325, 332, 334, 336, 337, 338, 339, 342, 343, 344, 351, 366, 367, 373, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 404, 405, 406, 407, 408, 409, 411, 413, 414, 416, 418, 420, 422, 424, 426, 434, 436, 437, 441, 443, 444, 446, 449, 450, 451, 452, 454, 455, 457, 459, 461, 463, 465, 476, 477], "abraham": [0, 54, 102, 118, 122, 123, 125, 126, 136, 138, 141, 151, 163, 169, 202, 373, 374, 465], "abrupt": 192, "absenc": [181, 188, 468], "absent": [6, 72], "absolut": [45, 46, 54, 61, 114, 151, 163, 176, 178, 179, 221, 274, 287, 350, 355, 370, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 437, 443, 444, 446, 449, 450, 451, 452, 454, 455, 458, 459, 461, 507], "absolute_path": 112, "abstract": [119, 376], "abstract_knowledge_regparam": 107, "ac": [2, 6, 22, 72, 118, 217, 219, 220, 233, 234, 235, 261, 288], "academi": [118, 176, 187, 198, 202, 233, 261, 309, 374], "acc": 21, "acceler": [118, 227], "accept": [2, 3, 50, 67, 127, 128, 132, 134, 142, 143, 145, 148, 149, 151, 154, 155, 156, 157, 158, 159, 160, 163, 179, 180, 190, 198, 346, 348, 349, 371, 377, 378, 379, 380, 381, 382, 390, 391, 392, 393, 394, 395, 396, 434, 446, 448, 449, 450, 451, 458, 460, 471, 472], "access": [6, 35, 38, 41, 51, 59, 64, 65, 68, 73, 111, 118, 120, 128, 135, 158, 163, 164, 166, 170, 178, 179, 180, 189, 190, 192, 216, 249, 250, 253, 258, 259, 260, 263, 264, 279, 288, 290, 320, 413, 496, 510], "accident": 188, "accommod": [130, 148, 163], "accord": [6, 11, 44, 47, 65, 103, 127, 143, 144, 145, 148, 154, 156, 160, 163, 169, 176, 179, 209, 227, 237, 241, 248, 250, 252, 254, 256, 257, 259, 260, 262, 263, 264, 303, 307, 310, 311, 319, 351, 371, 377, 380, 383, 387, 399, 446, 447, 452, 454, 455, 459, 461, 464, 465, 474, 476, 477, 507], "accordingli": [16, 158, 163, 371], "account": [6, 35, 64, 68, 70, 73, 78, 96, 113, 135, 163, 164, 176, 179, 188, 192, 198, 220, 373, 377, 378, 383, 384, 386, 465, 491], "accumul": [113, 507], "accur": [26, 52, 61, 68, 70, 151, 159, 163, 176, 180, 181], "accuraci": [31, 32, 33, 34, 35, 37, 39, 44, 54, 101, 102, 155, 163, 175, 176, 185, 187, 305, 307, 309, 310], "accuracy_scor": [44, 54], "accuracy_to_print": 44, "acharya": 0, "achiev": [10, 16, 58, 72, 95, 171, 178, 187, 191, 192, 244], "acompcor_combin": 373, "acoustic_processing_regparam": 107, "acq": 335, "acquir": [3, 41, 68, 69, 120, 181, 185, 187, 221, 234, 235], "acquis": 192, "acquisit": [3, 6, 32, 34, 66, 68, 72, 104, 111, 118, 176, 181, 185, 202, 234, 277, 339, 436], "across": [3, 6, 16, 17, 35, 41, 50, 53, 54, 59, 67, 68, 72, 82, 96, 101, 102, 103, 107, 111, 113, 114, 118, 128, 133, 151, 157, 163, 164, 165, 166, 169, 170, 171, 172, 174, 176, 181, 183, 185, 197, 202, 210, 217, 225, 233, 239, 240, 248, 258, 290, 305, 306, 307, 308, 310, 311, 312, 313, 369, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 436, 463, 465, 487, 491, 507], "act": [31, 36, 144, 163, 185, 246, 247, 250, 252, 254, 256, 257, 259, 260, 262, 263, 264, 377, 380, 383, 387, 401], "action": [34, 36, 42, 51, 181, 188, 204, 277], "action_perception_regparam": 107, "action_regparam": 107, "activ": [6, 7, 13, 15, 16, 17, 26, 32, 34, 43, 44, 52, 65, 68, 70, 71, 72, 73, 78, 79, 81, 82, 83, 103, 113, 118, 120, 165, 166, 169, 170, 171, 175, 176, 178, 179, 180, 181, 184, 185, 187, 188, 192, 198, 199, 202, 204, 209, 223, 224, 225, 233, 242, 248, 250, 258, 261, 281, 302, 327, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 433, 465, 467, 508], "activation_level_regparam": 107, "activation_regparam": 107, "activation_threshold": 433, "active_maintenance_regparam": 107, "active_retrieval_regparam": 107, "actual": [3, 6, 45, 68, 69, 72, 79, 88, 109, 129, 163, 178, 179, 181, 185, 190, 228, 349, 475, 488, 489, 490], "acuity_regparam": 107, "ad": [15, 16, 21, 22, 32, 43, 69, 70, 74, 86, 127, 128, 129, 132, 133, 134, 135, 144, 145, 155, 157, 158, 159, 160, 161, 163, 164, 174, 178, 180, 188, 240, 241, 242, 246, 247, 252, 255, 257, 260, 262, 263, 264, 267, 268, 269, 273, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 318, 332, 335, 341, 345, 346, 348, 350, 351, 355, 360, 361, 362, 363, 365, 366, 367, 370, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 392, 395, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 436, 437, 440, 441, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 461, 462, 463, 464, 465, 467, 474, 475, 477, 479, 480, 481, 482, 483, 484, 487, 510], "adam": [103, 118], "adapt": [13, 52, 67, 98, 120, 132, 163, 164, 169, 172, 179, 332, 341, 373, 435, 491, 492], "adaptation_regparam": 107, "adaptive_control_regparam": 107, "add": [10, 15, 16, 21, 26, 33, 43, 44, 53, 59, 66, 70, 82, 106, 121, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 141, 143, 144, 146, 148, 151, 156, 160, 161, 163, 169, 171, 174, 176, 179, 185, 188, 242, 282, 284, 303, 351, 370, 373, 379, 385, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 457, 459, 461, 476, 477, 507], "add_contour": [10, 15, 19, 26, 132, 144, 151, 163, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 507], "add_edg": [401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 507], "add_graph": [132, 163, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426], "add_mark": [43, 58, 64, 71, 103, 140, 146, 149, 163, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 507], "add_object_bound": [400, 402, 403], "add_overlai": [53, 125, 134, 163, 169, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 441, 443, 444, 449, 450, 451, 507], "add_patch": 43, "add_reg": [64, 66, 180, 339], "add_reg_nam": [64, 66, 339], "add_subplot": 64, "addiction_regparam": 107, "addit": [0, 15, 41, 58, 66, 68, 71, 81, 88, 91, 104, 120, 121, 123, 128, 143, 148, 154, 163, 171, 174, 178, 180, 185, 187, 188, 199, 248, 250, 271, 281, 305, 306, 307, 308, 312, 313, 320, 339, 348, 371, 373, 374, 376, 379, 385, 462, 463, 464, 473, 507], "addition": [15, 16, 26, 61, 71, 157, 163, 179, 184, 188, 191, 192, 208, 218, 335, 399, 474], "address": [118, 181, 184, 185, 188, 348, 399], "adelsberg": [118, 227], "adelsheim": [118, 201, 251], "adelstein": 118, "adequ": [77, 205], "adhd": [63, 75, 105, 111, 116, 151, 160, 163, 165, 180, 194, 249, 332, 339, 376, 386, 412, 451, 473, 492, 503, 509], "adhd200": [200, 249], "adhd200_40sub_preprocess": [200, 249], "adhd40_0010064": 105, "adhd40_0010128": 111, "adhd40_0021019": 111, "adhd40_0023008": 111, "adhd40_0023012": 111, "adhd_dataset": [12, 64, 180], "adher": 179, "adjac": [39, 151, 163, 479], "adjacency_matrix": [23, 50, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 437, 457], "adjust": [13, 68, 69, 127, 132, 146, 163, 374, 401, 412, 415], "admittedli": 168, "adolesc": [118, 187], "adopt": [176, 185], "adriana": [118, 227], "adult": [51, 54, 102, 118, 151, 163, 186, 198, 202, 207, 228, 268, 279], "adulthood": [118, 219], "advanc": [0, 58, 114, 115, 118, 165, 171, 173, 174, 179, 180, 187, 191, 241, 271, 305, 307, 308, 358, 376, 385, 436, 451, 456, 509, 510], "advantag": [41, 45, 46, 70, 178, 192], "advertis": [131, 163], "advic": [171, 198], "advis": [108, 179, 190, 273, 393, 463], "aesthet": [132, 163], "affect": [66, 74, 105, 132, 157, 163, 164, 181, 185, 188], "affect_perception_regparam": 107, "affect_recognition_regparam": 107, "affili": 179, "affin": [26, 43, 50, 59, 72, 85, 91, 95, 96, 99, 105, 111, 116, 142, 157, 163, 185, 189, 192, 217, 305, 306, 307, 308, 310, 311, 312, 313, 332, 346, 351, 352, 353, 354, 356, 361, 362, 363, 364, 365, 366, 367, 369, 377, 378, 379, 383, 384, 385, 391, 392, 393, 394, 395, 396, 397, 400, 402, 403, 456, 463, 465, 468, 471, 472, 487, 494, 509], "affine_": [379, 385], "afni": [160, 163], "after": [24, 30, 36, 38, 41, 43, 48, 53, 59, 68, 79, 96, 101, 103, 109, 116, 130, 159, 163, 164, 168, 169, 171, 176, 178, 179, 181, 185, 188, 191, 192, 202, 244, 271, 305, 306, 307, 308, 312, 332, 340, 341, 351, 355, 358, 363, 373, 374, 378, 380, 384, 385, 387, 465, 466, 468, 469, 473, 474, 475, 509], "afterward": [2, 178, 188], "ag": [46, 49, 62, 80, 100, 115, 116, 118, 151, 163, 165, 172, 173, 177, 184, 185, 186, 187, 200, 202, 207, 217, 219, 228, 240, 248, 258, 268, 279, 291, 305, 306, 307, 308, 310, 311, 376, 384, 437, 448, 456, 491, 509], "again": [16, 52, 73, 93, 105, 107, 111, 120, 179, 184, 187, 282, 284], "against": [65, 111, 171, 180, 185, 282, 348, 399, 435, 448], "age_at_scan": 248, "age_clust": 77, "age_design": 77, "age_group": 268, "age_pr": 45, "age_stat": 77, "age_test": [45, 46], "age_train": [45, 46], "ageeffectongm": 77, "ageeffectongm_contrast": 77, "ageeffectongm_corrdesign": 77, "ageeffectongm_design": 77, "ageeffectongm_mask": 77, "ageeffectongm_report": 77, "ageeffectongm_stat": 77, "ageeffectongm_statmap": 77, "agenc": 0, "agency_regparam": 107, "agencyenterpris": 0, "agent": 69, "agg": 456, "aggarw": [0, 131, 132, 133, 134, 161, 163], "agglom": [52, 151, 163, 168, 463], "agglomer": [52, 118, 185, 186, 307, 308, 462, 463, 464, 470], "agglomerativeclust": [52, 463], "aggreg": [33, 42, 61, 154, 163, 173, 185, 201, 251, 307, 308], "aggres": 374, "aggress": 374, "agre": [45, 77, 179, 198, 228, 279, 286, 346, 348], "agreeableness_regparam": 107, "agreement": [45, 65, 77, 198, 232, 435], "ahern": [118, 217], "ahmad": [0, 127, 128, 129, 157, 158, 160, 163], "ai": 0, "aic": 322, "aid": [118, 211, 212, 213, 214, 215, 236, 263, 290], "aim": [31, 36, 41, 50, 138, 163, 171, 179, 185, 310, 311], "aina": [0, 136, 163], "air": 0, "aka": [6, 68, 168, 181, 327], "aki": [43, 44, 118, 148, 163, 224, 281], "akshai": [148, 163], "al": [3, 23, 26, 30, 33, 39, 41, 47, 48, 51, 52, 54, 59, 61, 68, 74, 78, 101, 102, 103, 106, 116, 121, 143, 148, 163, 165, 168, 171, 172, 173, 176, 177, 178, 187, 192, 197, 198, 199, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 240, 241, 244, 248, 250, 251, 252, 253, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 271, 277, 279, 280, 281, 282, 284, 290, 305, 308, 311, 312, 313, 324, 325, 327, 351, 353, 358, 370, 373, 374, 376, 379, 385, 399, 427, 435, 451, 456, 464, 465, 470, 477, 492, 509], "alan": [118, 202, 219, 252], "alberto": [118, 373, 374], "aldo": [78, 118, 327], "alecia": [61, 118, 209, 230, 265, 266], "alex": [0, 59, 118, 145, 148, 163, 166, 176, 219, 374], "alexa": [118, 207, 268], "alexand": [61, 118, 197, 209, 230, 231, 248, 260, 265, 266, 435], "alexandr": [0, 47, 52, 54, 102, 118, 122, 123, 125, 126, 129, 132, 136, 138, 141, 148, 150, 151, 163, 165, 169, 177, 187, 225, 241, 258, 465], "alexi": [0, 118, 127, 128, 148, 151, 156, 158, 160, 163, 227], "alff": 248, "algorithm": [51, 52, 91, 94, 96, 106, 108, 109, 120, 165, 168, 169, 170, 173, 174, 176, 179, 185, 192, 193, 195, 202, 228, 241, 244, 312, 313, 357, 394, 396, 462, 465, 467, 478], "alia": [240, 241, 242, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465, 507], "alias": [127, 163], "align": [54, 59, 93, 102, 130, 135, 163, 309, 367, 369, 443], "alik": [205, 229, 253], "alisha": [0, 129, 163], "aliz": 104, "all": [3, 4, 9, 13, 16, 20, 24, 26, 29, 32, 35, 37, 38, 41, 42, 43, 44, 45, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 66, 68, 70, 71, 72, 73, 74, 78, 79, 81, 82, 89, 91, 93, 94, 96, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 118, 120, 121, 127, 128, 129, 130, 132, 133, 134, 135, 136, 141, 148, 151, 154, 156, 158, 159, 161, 163, 165, 166, 168, 169, 170, 172, 174, 176, 178, 179, 181, 183, 184, 187, 188, 190, 191, 192, 197, 198, 200, 201, 202, 208, 210, 220, 226, 232, 241, 242, 244, 248, 249, 251, 252, 253, 268, 276, 277, 280, 282, 286, 287, 291, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 327, 332, 335, 341, 345, 346, 347, 348, 349, 351, 352, 357, 362, 363, 366, 367, 368, 370, 371, 372, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 394, 396, 397, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 434, 435, 437, 441, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 461, 463, 465, 468, 475, 477, 487, 488, 489, 490, 504, 507, 508, 509], "all_categori": 32, "all_coef_": [310, 311], "all_displai": [161, 163], "all_estim": [161, 163], "all_funct": [161, 163], "allel": [118, 198], "allen": [22, 26, 118, 143, 163, 194, 251, 501], "allen2011": 22, "allen_rsn_2011": 22, "allevi": 96, "allow": [10, 21, 25, 26, 39, 43, 51, 54, 61, 66, 91, 102, 103, 104, 106, 113, 120, 128, 129, 130, 132, 133, 134, 142, 144, 149, 151, 155, 156, 159, 160, 161, 163, 164, 165, 171, 178, 179, 180, 182, 185, 188, 192, 198, 240, 241, 242, 269, 277, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 335, 346, 348, 371, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 440, 448, 454, 462, 463, 464, 465], "allow_overlap": [55, 56, 57, 61, 378, 381, 384, 386, 388, 465, 492], "allvolumesremovederror": [161, 163], "almli": [118, 202, 219], "almost": [25, 42, 52, 108, 178, 192], "alon": [179, 181, 507], "along": [25, 27, 50, 68, 86, 88, 103, 105, 113, 128, 151, 156, 163, 164, 170, 177, 179, 185, 191, 192, 332, 340, 359, 366, 368, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 414, 415, 416, 418, 420, 422, 424, 426, 429, 430, 434, 435, 441, 444, 445, 449, 450, 451, 465, 466, 477, 487, 507], "alongsid": 17, "alpha": [6, 16, 24, 25, 26, 39, 42, 43, 47, 51, 53, 55, 56, 60, 61, 69, 77, 78, 79, 83, 113, 133, 160, 165, 170, 177, 181, 241, 242, 244, 310, 311, 313, 322, 324, 325, 327, 331, 332, 345, 346, 349, 370, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 437, 443, 444, 447, 449, 450, 451, 452, 454, 455, 475, 507], "alpha_": [60, 242], "alpha_cmap": [53, 169], "alpha_grids_": [310, 311], "alpha_i": [401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 443, 444, 451], "alpha_max": [310, 311], "alpha_min": [310, 311], "alphabet": [118, 151, 163, 188, 190], "alreadi": [22, 35, 36, 52, 73, 91, 96, 104, 107, 111, 112, 113, 121, 132, 133, 151, 158, 163, 169, 171, 172, 179, 187, 192, 282, 284, 346, 348, 367, 399, 465], "also": [0, 3, 4, 7, 12, 13, 15, 16, 17, 18, 23, 24, 26, 31, 33, 36, 41, 45, 46, 52, 53, 54, 58, 59, 65, 66, 68, 69, 71, 72, 74, 77, 79, 81, 88, 91, 93, 95, 96, 97, 101, 111, 113, 120, 121, 125, 127, 129, 130, 132, 134, 135, 136, 141, 142, 144, 148, 151, 154, 157, 158, 160, 163, 164, 165, 166, 169, 170, 172, 173, 174, 176, 178, 179, 180, 181, 183, 184, 185, 187, 188, 190, 191, 192, 193, 194, 205, 206, 210, 217, 225, 226, 234, 238, 242, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 301, 305, 306, 307, 308, 310, 311, 312, 313, 332, 334, 335, 339, 346, 358, 362, 363, 366, 371, 373, 379, 385, 390, 391, 392, 393, 394, 395, 396, 434, 436, 441, 442, 444, 449, 450, 451, 452, 454, 455, 463, 466, 467, 471, 472, 475, 501, 507, 510], "alter": [16, 155, 163], "altern": [6, 7, 10, 17, 21, 23, 55, 57, 61, 68, 73, 167, 168, 176, 185, 192, 234, 322, 324, 325, 399, 510], "although": [35, 42, 52, 81, 172, 185, 188, 192], "altman": [134, 163, 435], "altruism_regparam": 107, "altruistic_motivation_regparam": 107, "alumit": [3, 33, 34, 40, 101, 118, 218, 271], "alveolar_regparam": 107, "alwai": [17, 103, 161, 163, 164, 171, 174, 178, 179, 181, 192, 250, 311, 322, 324, 325, 373, 458, 459, 461, 507], "alzheim": 228, "am": [0, 118, 206, 254], "amadeu": [0, 141, 163], "amag": 0, "amal": [118, 219], "amanda": [118, 229, 259], "amax": 109, "ambi": 248, "ambidextr": 248, "america": 309, "american": [118, 217], "ami": 118, "amodal_representation_regparam": 107, "among": [6, 81, 128, 163, 181, 185, 252, 305, 306, 307, 308], "amongst": [399, 507], "amount": [0, 25, 36, 38, 53, 68, 97, 111, 172, 174, 179, 186, 187, 188, 241, 282, 305, 306, 307, 308, 310, 311, 312, 313, 332, 346, 352, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 463, 464, 465], "amp": [491, 492], "amplifi": 178, "amplitud": [66, 69, 248, 334, 339, 457, 459, 461], "amsterdam": 0, "amunt": [118, 220], "amygdala": [232, 267], "an": [0, 2, 3, 4, 7, 12, 15, 16, 17, 21, 23, 26, 27, 31, 32, 33, 35, 36, 38, 39, 40, 42, 43, 44, 45, 50, 51, 52, 53, 54, 55, 57, 58, 59, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 75, 77, 81, 82, 85, 86, 90, 91, 94, 96, 99, 103, 104, 105, 106, 107, 109, 111, 113, 116, 118, 120, 121, 127, 128, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 143, 144, 145, 146, 148, 151, 153, 154, 155, 156, 158, 160, 161, 163, 164, 165, 166, 167, 169, 172, 173, 174, 175, 176, 177, 178, 180, 182, 183, 184, 185, 187, 188, 190, 191, 192, 194, 197, 198, 199, 204, 205, 217, 219, 225, 228, 235, 238, 240, 241, 242, 246, 250, 254, 258, 264, 268, 277, 278, 280, 282, 284, 287, 294, 298, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 319, 321, 322, 323, 324, 325, 328, 332, 339, 341, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 361, 362, 363, 365, 366, 367, 368, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 473, 475, 477, 478, 481, 485, 486, 487, 494, 501, 509, 510], "ana": [0, 151, 155, 157, 163], "anaconda": [148, 163, 508], "anal": [52, 118, 464, 470], "analog": 96, "analogical_reasoning_regparam": 107, "analogy_regparam": 107, "analu": [145, 148, 163], "analys": [70, 103, 105, 118, 129, 163, 171, 176, 180, 181, 182, 184, 185, 186, 192, 209, 223, 508], "analysi": [1, 7, 8, 16, 30, 31, 33, 35, 36, 41, 48, 51, 52, 66, 68, 69, 72, 73, 74, 75, 79, 80, 81, 82, 84, 97, 101, 115, 118, 119, 121, 132, 134, 161, 163, 165, 166, 170, 172, 175, 177, 182, 183, 184, 185, 186, 187, 191, 192, 206, 208, 209, 210, 217, 223, 230, 235, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 271, 274, 276, 277, 278, 284, 287, 288, 293, 294, 304, 305, 309, 312, 319, 323, 324, 325, 332, 335, 345, 346, 348, 349, 356, 358, 361, 362, 363, 364, 370, 373, 374, 375, 376, 385, 399, 412, 427, 434, 435, 438, 439, 443, 444, 445, 451, 455, 456, 465, 473, 474, 483, 491, 495, 503, 508, 509, 510], "analyz": [3, 35, 41, 52, 63, 64, 70, 73, 76, 96, 104, 113, 116, 170, 179, 181, 183, 185, 187, 189, 202, 220, 399, 491, 493, 510], "anand": [0, 132, 163], "anat": [3, 4, 6, 16, 17, 18, 19, 27, 31, 32, 34, 45, 46, 96, 120, 171, 190, 192, 204, 218, 234, 235, 237, 264, 271, 275, 277, 288, 289, 371], "anat_combin": [373, 374], "anat_img": [145, 163, 434], "anat_separ": 373, "anatom": [3, 4, 6, 12, 18, 19, 23, 27, 32, 34, 38, 65, 96, 106, 118, 121, 144, 163, 169, 176, 185, 192, 199, 202, 206, 208, 218, 219, 229, 232, 237, 248, 250, 252, 254, 262, 268, 271, 272, 275, 277, 373, 434, 444, 449, 451, 458, 474, 507], "anatomi": [6, 45, 70, 77, 204, 232, 264], "anatomical_imag": [350, 362], "anats_all_subject": 4, "anats_all_subjects_smooth": 4, "anchor": 86, "anchoredoffsetbox": [400, 402, 403], "anchoredsizebar": [400, 402, 403], "anchoring_regparam": 107, "ander": [23, 118, 206, 211, 212, 213, 214, 215, 217, 254, 262, 290], "anderson": [106, 118, 197, 198, 248, 399], "andi": 7, "andr": [52, 118, 171, 187, 464, 470], "andrea": [51, 118, 165, 170, 240, 312], "andrew": [118, 166, 197, 201, 205, 219, 248, 251, 253], "andr\u00e9": [0, 118, 151, 163, 173, 187, 206, 254, 307, 308], "angel": 0, "angela": [118, 201, 233, 251, 261], "angl": [25, 86, 128, 163, 185, 313, 452, 454, 455], "angular": [93, 492], "anhedonia_regparam": 107, "ani": [4, 6, 26, 52, 59, 61, 72, 77, 83, 103, 107, 108, 120, 127, 152, 154, 160, 161, 163, 164, 166, 168, 171, 172, 175, 176, 178, 179, 180, 181, 185, 188, 192, 240, 248, 271, 282, 284, 305, 306, 307, 308, 310, 311, 312, 313, 332, 335, 345, 351, 353, 358, 362, 368, 371, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 436, 443, 444, 446, 449, 451, 463, 465, 469, 474, 477, 483, 487, 507, 508], "anim": [118, 202, 219], "animacy_decision_regparam": 107, "animacy_perception_regparam": 107, "anish": [118, 373], "anisotrop": 192, "anisotropi": 96, "ann": [0, 61, 118, 128, 163, 209, 230, 265, 266], "anna": [118, 227], "annot": [96, 119, 129, 132, 143, 154, 163, 206, 226, 231, 236, 260, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 437, 441, 443, 444, 447, 449, 450, 451, 452, 453, 454, 455, 458, 461, 485, 507, 510], "annual": [118, 198, 202], "annunzio": 0, "anoth": [6, 10, 42, 68, 70, 81, 91, 111, 140, 145, 163, 171, 178, 179, 181, 187, 188, 189, 190, 240, 352, 353, 473, 507], "anova": [3, 30, 37, 41, 45, 48, 109, 110, 116, 143, 163, 175, 176, 177, 185, 192, 271, 305, 306, 307, 308, 310, 311, 358, 451, 456, 458, 509, 510], "anova_lda": 101, "anova_svc": 101, "answer": [3, 508], "ant": [54, 492], "anterior": [72, 93, 118, 145, 161, 163, 199, 217, 265, 267, 365, 452, 454, 455], "antialias": 19, "anticorrel": [54, 118, 374], "antoinett": [74, 118, 204, 210, 277], "anton": [118, 210], "antonia": [118, 208, 255], "antonio": [118, 204, 277], "anupriya": [0, 132, 163], "anwar": [118, 227], "anylin": 0, "anymor": [127, 135, 160, 163, 188, 374], "anyon": [164, 508], "anyth": [7, 114, 121, 178, 179], "ap": 371, "apart": [88, 143, 163, 168, 169, 178], "apertur": [26, 118], "apertureneuro": [26, 118], "api": [10, 47, 107, 108, 112, 125, 126, 127, 128, 129, 130, 131, 134, 135, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 188, 376, 377, 380, 383, 384, 385, 386, 387, 388, 389, 444, 462, 464, 465, 510], "apo": [118, 198], "app": [65, 164, 232, 335], "appear": [37, 57, 72, 73, 91, 164, 194, 238, 332, 346, 348, 438, 474, 501], "append": [35, 36, 41, 43, 44, 47, 53, 54, 56, 74, 103, 107, 111, 112, 113, 114, 164, 169, 481, 482], "appli": [3, 26, 31, 33, 34, 45, 47, 53, 59, 64, 68, 70, 81, 82, 91, 94, 96, 101, 103, 104, 105, 107, 108, 119, 121, 127, 129, 130, 131, 132, 139, 141, 145, 148, 151, 156, 157, 158, 163, 165, 166, 167, 170, 172, 173, 174, 176, 180, 184, 185, 189, 198, 202, 205, 217, 232, 240, 248, 282, 304, 305, 306, 307, 308, 309, 312, 313, 323, 332, 345, 346, 348, 349, 350, 351, 362, 368, 370, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 434, 443, 444, 446, 449, 450, 451, 458, 462, 463, 464, 465, 467, 468, 469, 475, 476, 477, 487, 488, 489, 492, 497, 510], "applic": [44, 118, 156, 163, 166, 172, 178, 186, 202, 379, 399, 468, 469, 475, 507, 508, 510], "apply_along_axi": [452, 454, 455], "apply_mask": [27, 134, 163, 191, 379, 385], "appreci": [179, 190], "approach": [26, 35, 36, 41, 43, 44, 50, 51, 52, 68, 70, 113, 118, 148, 163, 167, 170, 171, 172, 176, 178, 179, 180, 181, 186, 309, 351, 373, 374, 477, 487, 491, 508, 510], "appropri": [23, 103, 111, 114, 118, 130, 131, 163, 179, 192, 202, 219, 250, 268, 332, 334, 339, 345, 435, 444, 445, 466], "approv": [179, 198], "approxim": [52, 72, 73, 118, 168, 202, 324, 325, 345, 464, 470], "apr": [118, 229, 259], "april": [118, 128, 131, 140, 143, 149, 150, 159, 163, 198, 217, 279], "arar1": [6, 26, 35, 64, 65, 68, 70, 73, 113, 332, 335, 341, 491], "ar3": [68, 341], "arami": 0, "arang": [23, 32, 34, 35, 36, 41, 51, 54, 66, 68, 96], "arbitrari": [6, 23, 67, 78, 164, 181, 188, 309, 346, 348], "arbitrarili": [6, 234, 311], "archi": 74, "architectur": [118, 168, 233, 261], "archiv": 228, "arctanh": 58, "area": [0, 24, 34, 41, 82, 96, 118, 156, 163, 169, 171, 176, 180, 181, 185, 186, 187, 192, 210, 211, 212, 213, 214, 215, 216, 217, 224, 263, 272, 290, 355, 380, 381, 387, 388, 400, 402, 403, 412, 415, 452, 453, 454, 455, 461], "area_left": [211, 212, 213, 214, 215, 216, 290], "area_right": [211, 212, 213, 214, 215, 216, 290], "aren": [130, 163, 190], "arg": [16, 46, 305, 306, 307, 308, 314, 315, 316, 317, 318], "argmax": 12, "argsort": [37, 45, 46, 107], "arguabl": 68, "argument": [2, 6, 10, 11, 15, 16, 17, 18, 58, 61, 69, 71, 82, 91, 96, 113, 121, 128, 129, 130, 132, 134, 140, 141, 143, 144, 145, 146, 148, 149, 151, 154, 155, 156, 157, 158, 160, 161, 163, 171, 172, 174, 176, 178, 179, 180, 184, 188, 190, 244, 248, 256, 257, 282, 292, 305, 306, 307, 308, 309, 335, 345, 346, 348, 351, 362, 365, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 440, 441, 442, 443, 444, 446, 448, 449, 450, 451, 453, 454, 455, 459, 462, 464, 465, 477, 483, 507], "ariel": [0, 136, 148, 163], "aris": [96, 118, 181, 202, 373, 374], "arithmet": [118, 187], "arm": [155, 163], "armi": 192, "armodel": 323, "aroma": [118, 166, 373, 374], "around": [15, 25, 26, 36, 86, 88, 147, 149, 163, 178, 179, 242, 348, 355, 366, 386, 400, 402, 403, 413, 481, 482, 487], "arr": [61, 368], "arrai": [3, 5, 7, 10, 21, 23, 28, 35, 36, 38, 41, 43, 44, 45, 46, 47, 51, 52, 53, 54, 56, 58, 59, 61, 64, 69, 73, 81, 86, 89, 91, 93, 96, 101, 109, 111, 119, 131, 132, 133, 134, 143, 145, 151, 154, 157, 158, 160, 161, 163, 165, 168, 169, 171, 174, 178, 189, 190, 192, 197, 240, 241, 242, 244, 246, 247, 255, 279, 280, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 319, 320, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 351, 356, 358, 363, 366, 367, 370, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 396, 398, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 434, 437, 441, 443, 447, 451, 452, 453, 454, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 475, 477, 478, 479, 480, 481, 485, 486, 487, 498], "arrang": [118, 149, 163, 410, 412, 415, 429, 434, 441, 444, 449, 450, 451, 507], "array_lik": [332, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 437, 447], "arriv": 170, "arrmean": 61, "arrow": [73, 491], "art": [154, 163, 172, 305, 306, 307, 308], "arthur": [0, 51, 118, 126, 136, 138, 141, 163, 170, 208, 255, 313], "articl": [44, 118, 164, 178, 187, 201, 210, 252], "articul": 171, "artifact": [59, 118, 164, 192, 351, 373, 374, 477], "artifici": [118, 202], "arvind": [118, 201, 251], "arxiv": [118, 165, 171, 178, 187, 241, 244], "asanyarrai": 61, "asarrai": [7, 25, 44, 54, 107, 321, 326, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 465], "ascend": [156, 163, 361], "ascertain": 180, "asd": 197, "ashbi": [103, 118, 171], "ask": [67, 121, 148, 151, 163, 179, 188, 226], "aspect": [13, 41, 43, 147, 163, 174, 178, 192, 332, 346, 373, 475], "asperg": 248, "assembl": [82, 119, 181], "assert": 32, "assess": [71, 80, 118, 171, 178, 179, 180, 200, 248, 309, 399, 435, 436], "assign": [16, 88, 96, 134, 163, 168, 169, 181, 209, 220, 256, 257, 265, 267, 465, 466, 470, 487], "assist": [118, 165, 240], "associ": [6, 15, 50, 74, 77, 79, 109, 113, 127, 132, 163, 171, 176, 179, 181, 184, 185, 250, 287, 309, 320, 348, 373, 374, 377, 380, 383, 387, 399, 435, 474, 487], "assum": [65, 66, 68, 73, 74, 80, 81, 103, 104, 113, 176, 181, 188, 247, 287, 322, 323, 324, 325, 329, 332, 346, 348, 351, 366, 369, 398, 448, 476, 477], "assume_cent": [55, 56, 61], "assumpt": [81, 176, 181, 225], "assur": 65, "astyp": [12, 24, 38, 43, 44, 46, 47, 69, 77, 86, 96, 111], "asv": [164, 179], "asv_benchmark": 179, "aswin": [0, 129, 163], "asym": [202, 252], "asymmetr": [202, 219, 252, 272, 273, 295, 296, 297, 298, 299, 300], "asymmetri": [118, 202], "atla": [9, 12, 24, 29, 49, 51, 53, 62, 85, 96, 99, 111, 116, 118, 121, 126, 128, 129, 130, 132, 134, 139, 140, 142, 143, 144, 145, 148, 151, 154, 155, 156, 157, 159, 160, 163, 167, 169, 178, 185, 191, 192, 194, 238, 240, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 268, 272, 293, 294, 358, 370, 376, 377, 378, 380, 383, 384, 387, 412, 431, 432, 433, 436, 437, 448, 449, 450, 451, 454, 456, 457, 458, 459, 461, 465, 466, 467, 468, 469, 473, 483, 487, 492, 501, 502, 507, 509, 510], "atlantiqu": 0, "atlas": [6, 10, 11, 23, 49, 61, 62, 65, 116, 118, 121, 130, 131, 134, 155, 156, 163, 164, 167, 170, 181, 185, 190, 191, 192, 202, 205, 208, 217, 219, 226, 238, 240, 255, 256, 257, 264, 268, 353, 356, 364, 376, 377, 378, 383, 384, 411, 413, 431, 432, 437, 444, 449, 450, 453, 454, 456, 457, 458, 460, 474, 492, 501, 509, 510], "atlas_data": [12, 21], "atlas_filenam": [21, 55, 57, 59, 166], "atlas_ho_filenam": 11, "atlas_img": [12, 56, 111], "atlas_ju_filenam": 11, "atlas_nam": [256, 257], "atlas_network": 89, "atlas_path": 111, "atlas_region_coord": [56, 166], "atlas_typ": [22, 134, 163, 179, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264], "atlas_valu": 12, "atlas_yeo": 88, "atlas_yeo_2011": 88, "atlasread": [6, 65, 474], "atleast_2d": [104, 114], "atom": [179, 185], "atr": 224, "att": 54, "attempt": [151, 163, 164, 335], "attent": [77, 80, 339], "attila": [118, 219], "attribut": [38, 47, 51, 52, 53, 86, 91, 120, 121, 129, 130, 132, 134, 135, 146, 155, 156, 158, 159, 160, 161, 163, 165, 168, 169, 170, 176, 190, 192, 202, 205, 229, 240, 241, 242, 249, 253, 255, 258, 268, 270, 271, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 293, 305, 306, 307, 308, 309, 310, 311, 312, 313, 322, 323, 324, 325, 332, 346, 353, 361, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 452, 453, 454, 455, 461, 462, 463, 464, 465, 480, 481, 482, 483, 484, 486, 487], "attributeerror": [147, 163], "au": 41, "auc": [32, 34, 41, 171, 185], "aud": 54, "audio": [67, 68, 70], "audio_comput": [67, 68, 70, 222, 491], "audio_left_hand_button_press": [67, 68, 70, 222, 491], "audio_right_hand_button_press": [67, 68, 70, 222, 491], "audiominusvisu": 70, "auditori": [6, 26, 68, 70, 74, 79, 109, 181, 194, 204, 267, 276, 277, 283, 288], "auditory_bold": 6, "auditory_calculation_vs_baselin": 283, "auditory_imag": 26, "audrei": [0, 127, 163], "august": [118, 141, 148, 160, 163], "aureli": [118, 210], "austin": 0, "australia": 0, "australian": [106, 118, 399], "austria": 0, "author": [0, 118, 164, 178, 179, 188], "autism": [118, 197, 248], "auto": [13, 35, 41, 64, 70, 73, 113, 141, 156, 163, 192, 312, 313, 361, 377, 378, 379, 383, 384, 385, 386, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 434, 437, 441, 443, 444, 446, 447, 449, 450, 451, 452, 454, 455, 457, 458, 460, 465, 487, 491], "auto_exampl": [8, 29, 48, 62, 75, 84, 99, 115, 117, 186, 188, 459], "auto_examples_jupyt": 116, "auto_examples_python": 116, "auto_fit": 448, "auto_resampl": [72, 352], "autocorrel": 3, "autoformatt": 179, "autogener": 475, "autom": [118, 121, 188, 199, 202, 217, 226, 236, 250, 263, 282, 284], "automat": [3, 16, 17, 20, 23, 26, 35, 36, 43, 57, 91, 94, 96, 105, 113, 118, 119, 125, 128, 141, 143, 155, 156, 157, 163, 164, 169, 176, 179, 188, 190, 191, 192, 206, 248, 254, 262, 305, 306, 307, 308, 310, 311, 312, 313, 332, 345, 346, 348, 366, 378, 384, 399, 410, 430, 434, 441, 444, 449, 450, 451, 458, 463, 465, 467, 475, 492, 495, 507], "autoregress": [68, 332, 341], "aux_fil": [59, 105], "avail": [0, 3, 16, 24, 25, 33, 42, 45, 65, 70, 77, 82, 91, 96, 104, 110, 113, 121, 128, 151, 156, 161, 163, 166, 169, 172, 174, 178, 179, 180, 184, 187, 188, 198, 202, 208, 220, 223, 228, 231, 234, 235, 237, 248, 252, 255, 261, 268, 277, 279, 281, 286, 310, 311, 335, 381, 388, 448, 453, 487, 491, 508, 510], "avenir": 0, "averag": [6, 10, 25, 32, 39, 52, 54, 71, 96, 118, 134, 154, 157, 163, 168, 172, 173, 183, 184, 185, 202, 211, 212, 213, 214, 215, 219, 223, 248, 290, 305, 306, 363, 368, 373, 387, 448, 452, 454, 455, 463, 487, 492], "avg_method": [129, 131, 156, 163, 452, 454, 455], "aviv": 0, "avoi": 199, "avoid": [10, 24, 35, 55, 56, 57, 61, 64, 65, 72, 73, 77, 104, 132, 135, 146, 151, 160, 161, 163, 164, 176, 178, 179, 181, 190, 291, 305, 306, 307, 308, 320, 335, 346, 348, 355, 360, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 476, 507], "avram": [118, 231, 260], "awai": [71, 178, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427], "awar": [101, 242, 476], "awesom": [148, 163], "ax": [6, 12, 13, 19, 23, 25, 26, 33, 40, 41, 43, 52, 54, 60, 64, 66, 67, 68, 70, 71, 77, 80, 81, 82, 86, 93, 98, 103, 104, 109, 114, 132, 145, 155, 156, 161, 163, 365, 366, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 488], "ax1": [46, 66, 77, 80, 445], "ax2": [46, 66, 445], "ax3": 66, "ax_binari": 41, "ax_im": 43, "ax_multi": 41, "ax_pair": 82, "ax_row": 114, "ax_unpair": 82, "axelson": [118, 187], "axesimag": [55, 57, 59], "axhlin": [36, 410, 412, 415, 417, 419, 421, 423, 425, 427], "axi": [3, 12, 17, 23, 27, 31, 32, 33, 36, 40, 43, 44, 47, 50, 53, 61, 86, 87, 96, 105, 107, 108, 112, 114, 129, 158, 160, 163, 169, 191, 202, 252, 305, 306, 307, 308, 340, 366, 368, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 430, 434, 435, 437, 438, 441, 443, 444, 447, 449, 450, 451, 458], "axial": [6, 15, 96, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 434, 437, 441, 443, 444, 447, 449, 450, 451, 475], "axs1": 71, "axs2": 71, "axvlin": 54, "ayesha": [118, 227], "az1113": 164, "azim": [23, 452, 454, 455], "b": [15, 16, 26, 32, 43, 44, 59, 93, 105, 118, 179, 188, 198, 199, 206, 208, 211, 212, 213, 214, 215, 231, 233, 237, 250, 254, 260, 261, 264, 269, 287, 290, 323, 373, 374, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 507], "b2fd65a88d22090da62c3fb828be840": 4, "b_model001_task002_cope011_tstat1": 112, "ba": 263, "baar": [118, 219], "back": [7, 11, 38, 44, 45, 51, 58, 101, 103, 106, 108, 120, 136, 144, 145, 163, 164, 168, 176, 179, 192, 312, 313, 376, 379, 380, 382, 385, 387, 389, 398, 430, 459, 461, 462, 463, 464], "backend": [33, 38, 39, 45, 46, 47, 51, 106, 109, 128, 135, 138, 148, 153, 158, 163, 313, 456], "background": [3, 9, 10, 11, 15, 16, 17, 23, 24, 29, 32, 33, 43, 47, 52, 59, 70, 93, 94, 96, 108, 113, 114, 116, 120, 128, 131, 134, 139, 141, 143, 144, 145, 146, 148, 151, 154, 160, 161, 163, 179, 185, 191, 192, 202, 237, 256, 257, 263, 264, 275, 281, 305, 306, 307, 308, 312, 313, 377, 379, 380, 383, 385, 387, 391, 394, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 434, 437, 441, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 461, 463, 466, 468, 469, 475, 492, 507, 509, 510], "background_img": [33, 46], "background_label": [52, 59, 93, 192, 377, 380, 383, 387, 431, 468, 471, 492], "backslash": [130, 163], "backward": [145, 158, 163, 179, 256, 257, 473], "bad": [59, 109, 178, 179], "badg": [179, 188], "bag": [175, 310, 311, 510], "balanc": [3, 52, 158, 163, 168], "baldassarr": [118, 177, 202], "ball": [25, 126, 163, 176, 178, 185, 309, 487], "ball_radiu": 25, "ball_sample_point": 25, "balsa": 279, "baltimor": 0, "band": [54, 61, 160, 163, 248, 373, 476, 477], "band_pass_filt": 248, "bandettini": [26, 118, 176, 187, 309], "bandpass": 58, "bandwidth": 261, "bangalor": 0, "bangaru": [118, 227], "baptist": [51, 52, 74, 118, 121, 165, 168, 170, 204, 226, 241, 277, 282, 284, 312], "bar": [16, 45, 106, 109, 111, 130, 131, 134, 148, 163, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 510], "baratz": [0, 153, 163], "barbar": 0, "barbara": [118, 227], "barcelonabeta": 0, "barch": [61, 118, 198, 208, 209, 265], "barh": [32, 51, 54, 102], "barn": [61, 118, 202, 209, 230, 265, 266, 373, 374], "baronnet": [118, 165, 240], "bart": 65, "basal": [54, 232], "basalganglia": 267, "basc": [139, 163, 194, 238, 252], "basc_multiscale_2015": [20, 111], "base": [2, 7, 9, 21, 29, 30, 31, 36, 41, 47, 48, 50, 51, 52, 54, 57, 58, 63, 64, 68, 72, 75, 76, 83, 84, 90, 91, 93, 94, 100, 101, 102, 109, 115, 116, 118, 121, 127, 129, 130, 132, 134, 139, 143, 151, 154, 156, 159, 163, 165, 166, 167, 168, 170, 171, 174, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 192, 194, 200, 202, 204, 206, 207, 208, 217, 224, 225, 226, 241, 244, 248, 254, 260, 262, 268, 271, 272, 273, 274, 277, 278, 279, 282, 284, 286, 293, 294, 301, 305, 306, 307, 309, 311, 312, 313, 332, 335, 339, 345, 346, 348, 349, 350, 351, 352, 356, 358, 362, 367, 370, 373, 374, 376, 385, 386, 387, 393, 399, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 435, 439, 443, 444, 446, 449, 450, 451, 452, 454, 455, 456, 458, 462, 463, 465, 466, 467, 473, 477, 478, 479, 481, 482, 483, 491, 492, 507, 508, 509, 510, 511], "base_mask": [52, 55, 56, 59, 61], "base_url": 260, "baseestim": 489, "baselin": [6, 32, 34, 118, 154, 155, 163, 172, 174, 201, 251, 320, 340], "basemask": [156, 163], "baseslic": [134, 163, 429], "bash": 188, "basi": [68, 70, 180, 202, 332, 334, 339, 373], "basic": [3, 7, 8, 9, 12, 16, 17, 19, 27, 29, 31, 32, 34, 36, 37, 38, 44, 45, 51, 52, 55, 56, 59, 61, 70, 77, 79, 91, 93, 94, 96, 97, 101, 103, 106, 108, 109, 110, 178, 180, 181, 185, 187, 188, 192, 256, 257, 264, 271, 292, 335, 346, 348, 368, 373, 374, 438, 444, 450, 456, 509], "basic_collection_term": 282, "basic_contrast": [70, 180], "basic_image_term": 282, "bassett": [59, 118, 373, 374], "bastien": [74, 118, 204, 277], "bat": 508, "batch": [107, 112, 313, 462], "batch_siz": [51, 53, 313, 462], "baum": [59, 118, 373, 374], "bayesian": [47, 181], "bayesian_ridg": 47, "bayesianridg": 47, "bazeil": [0, 151, 154, 157, 158, 163], "bazemont": 0, "bbox_to_anchor": 32, "bdg": [179, 188], "beaten": 119, "beauti": 46, "becaus": [3, 6, 12, 16, 19, 32, 33, 34, 38, 42, 45, 46, 47, 57, 68, 70, 71, 72, 81, 86, 104, 105, 106, 111, 113, 127, 151, 163, 164, 166, 171, 176, 178, 179, 181, 188, 282, 311, 446, 452, 454, 455, 459, 461, 487], "beckmann": [118, 165, 198, 233, 261, 373, 374], "becom": [3, 68, 121, 130, 163, 172, 173, 174, 181], "bedetti": [145, 148, 163], "been": [0, 6, 34, 38, 39, 42, 43, 44, 45, 58, 64, 68, 74, 77, 81, 83, 87, 91, 93, 95, 96, 108, 113, 127, 128, 130, 132, 134, 135, 136, 138, 141, 142, 148, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 163, 164, 170, 177, 178, 179, 180, 184, 185, 188, 192, 202, 205, 221, 228, 234, 235, 240, 241, 252, 282, 309, 312, 313, 346, 348, 357, 374, 377, 378, 379, 380, 381, 382, 391, 392, 393, 394, 395, 396, 399, 463, 464, 469, 478, 487, 491], "befor": [2, 16, 24, 52, 58, 59, 72, 73, 91, 96, 98, 101, 107, 111, 120, 127, 129, 131, 148, 151, 154, 156, 158, 160, 163, 164, 168, 169, 171, 172, 174, 179, 180, 181, 184, 187, 188, 190, 191, 192, 198, 244, 279, 282, 284, 332, 334, 339, 351, 355, 357, 373, 374, 377, 378, 380, 381, 383, 384, 386, 387, 388, 436, 463, 468, 469, 477, 478, 492, 507], "beforehand": 188, "begin": [43, 65, 68, 72, 111, 154, 163, 179, 185, 198, 476], "beginn": [179, 187], "beh": 65, "behav": [106, 332, 334, 339], "behavior": [33, 36, 37, 41, 43, 77, 79, 98, 101, 118, 120, 128, 129, 130, 134, 135, 136, 138, 145, 148, 155, 160, 163, 171, 172, 174, 175, 179, 185, 189, 192, 197, 198, 228, 233, 240, 261, 279, 345, 436], "behavioral_data": 41, "behavioral_target": 42, "behaviour": [47, 118, 177], "behind": 67, "behren": [118, 198], "behzadi": [118, 357, 373, 374, 478], "beij": 0, "being": [16, 72, 91, 96, 111, 127, 128, 129, 148, 151, 158, 163, 165, 178, 179, 181, 183, 185, 194, 238, 248, 312, 339, 345, 378, 381, 384, 386, 388, 394, 396, 436, 465, 501], "bellec": [0, 118, 148, 149, 163, 202, 252], "belong": [3, 32, 34, 158, 163, 171, 185, 192, 199], "below": [6, 10, 16, 17, 21, 23, 26, 42, 47, 50, 52, 55, 57, 61, 67, 71, 96, 98, 118, 143, 163, 168, 171, 172, 176, 178, 179, 180, 181, 183, 184, 188, 191, 192, 194, 197, 198, 238, 241, 242, 244, 248, 268, 305, 306, 307, 308, 310, 311, 312, 313, 351, 371, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 436, 441, 443, 444, 446, 449, 450, 451, 452, 454, 455, 458, 463, 465, 476, 477, 501, 507, 511], "ben": [0, 59, 118, 122, 123, 125, 136, 138, 163, 374], "benali": [118, 202, 252], "benchmark": [54, 59, 102, 118, 177, 179, 373, 374], "benedetto": 0, "benedict": [118, 227], "benefit": [45, 52, 59, 68, 151, 163, 179, 191], "benjamin": [103, 118, 171, 232, 267], "benjamini": [158, 163, 181, 331], "bennett": [118, 227], "bent": [118, 217], "berg": [118, 198], "berlin": [0, 118, 165, 219, 225, 240, 258], "bertrand": [0, 47, 51, 52, 54, 74, 102, 118, 122, 125, 129, 132, 136, 141, 145, 148, 149, 151, 158, 159, 163, 165, 168, 169, 170, 171, 173, 177, 187, 204, 208, 225, 240, 241, 255, 258, 277, 307, 308, 312, 313, 464, 465, 470], "besid": 187, "besnard": [0, 132, 156, 163], "best": [3, 36, 41, 45, 46, 47, 97, 154, 160, 163, 171, 172, 173, 176, 178, 179, 181, 191, 305, 306, 307, 308, 310, 311, 345, 412, 415, 462, 463], "best_alpha": [305, 306, 307, 308], "best_c": [36, 305, 306, 307, 308], "best_dual": 36, "best_model_params_": [310, 311], "best_penalti": 36, "beta": [6, 26, 28, 42, 45, 68, 100, 115, 116, 118, 130, 159, 180, 185, 198, 274, 279, 305, 306, 307, 308, 319, 322, 323, 324, 325, 332, 335, 352, 376, 385, 386, 412, 439, 451, 456, 509], "beta_map": 103, "betamap": 280, "better": [2, 3, 26, 32, 35, 45, 46, 52, 68, 96, 103, 107, 111, 118, 126, 128, 129, 134, 135, 139, 142, 148, 156, 161, 163, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 178, 180, 191, 241, 449, 465, 487, 510], "between": [2, 7, 10, 17, 23, 24, 25, 26, 32, 43, 45, 52, 53, 54, 58, 65, 68, 70, 72, 74, 77, 79, 81, 82, 88, 98, 102, 103, 106, 109, 111, 113, 132, 136, 143, 148, 151, 154, 157, 161, 163, 165, 166, 167, 169, 171, 172, 176, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 198, 202, 218, 234, 248, 260, 279, 298, 313, 332, 335, 348, 351, 393, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 434, 435, 437, 440, 443, 444, 445, 447, 449, 450, 451, 458, 463, 474, 475, 477, 487, 492, 510], "bewar": [188, 190], "beyond": [73, 159, 163], "bg_color": [400, 402, 403], "bg_filenam": 45, "bg_img": [3, 6, 17, 18, 26, 31, 32, 35, 38, 43, 45, 70, 71, 72, 73, 77, 90, 95, 113, 120, 145, 151, 157, 163, 171, 192, 332, 345, 346, 444, 449, 450, 451, 458, 475], "bg_map": [10, 23, 24, 39, 70, 114, 446, 452, 454, 455, 459, 461, 507], "bg_on_data": [10, 23, 24, 114, 446, 452, 454, 455, 459, 461], "bgcolor": [401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427], "bharat": [118, 227], "bhg087": [118, 206, 254], "bhn256": 118, "bhp157": [118, 198], "bhx179": [118, 231, 260], "bi": 234, "bia": [172, 305, 306, 307, 308, 310, 311], "biap8": [151, 163], "bias": [26, 68, 118], "bib": 118, "bibtex": [128, 160, 163], "bic": [219, 322], "bicr": 224, "bid": [6, 7, 11, 63, 74, 75, 100, 103, 115, 116, 127, 129, 134, 151, 154, 156, 158, 160, 161, 163, 179, 180, 181, 185, 194, 234, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 269, 274, 287, 303, 304, 332, 335, 345, 346, 373, 374, 375, 377, 380, 383, 385, 387, 435, 438, 443, 445, 450, 454, 456, 473, 474, 503, 509], "bielefeld": 0, "big": [3, 35, 44, 52, 65, 148, 163, 168, 171, 179, 190, 192, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490], "big_fsaverage_mesh": 10, "big_fsaverage_sulc": 10, "big_img": 10, "bigger": [42, 46, 194, 238, 501], "bigler": [118, 197, 248], "bihan": [74, 118, 204, 277], "bilder": [118, 269, 287], "bilkent": 0, "bin": [35, 52, 179, 332, 341, 508], "bin_p_valu": 96, "bin_p_values_and_vt": 96, "bin_p_values_and_vt_img": 96, "binar": [44, 96, 157, 163, 248, 350, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 465], "binari": [43, 44, 68, 77, 127, 134, 160, 163, 185, 188, 192, 273, 305, 306, 307, 308, 310, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 435, 445, 450, 465, 474, 477], "binarize_img": [130, 132, 157, 161, 163], "binary_clos": [273, 296, 299], "binary_dil": [96, 191, 391, 392, 393, 394, 395, 396], "binary_eros": [391, 392, 393, 394, 395, 396], "binary_plt": 41, "binaur": 234, "binder": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 153, 163], "bingen": [118, 177], "binh": [0, 151, 154, 156, 163], "binyam": [61, 118, 209, 265], "biolog": [114, 118, 217], "biologi": 510, "biomed": [51, 118, 170, 228, 312, 313], "biorxiv": [118, 351, 477], "biostatist": [0, 118, 165], "bipolar": [118, 217], "birmah": [118, 187], "birn": 228, "birth": [118, 219], "biswal": [118, 227], "bit": [38, 41, 43, 44, 67, 68, 77, 81, 106, 136, 149, 160, 163, 165, 177, 190, 191, 273], "bitpix": [59, 105], "black": [15, 26, 43, 108, 128, 129, 132, 161, 163, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 437, 441, 443, 444, 447, 449, 450, 451, 458, 459, 461], "black_bg": [6, 14, 15, 26, 38, 72, 157, 163, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 437, 441, 443, 444, 447, 449, 450, 451, 458, 459, 461], "black_blu": 21, "black_green": 21, "black_pink": 21, "blacker": [118, 217], "bland": [134, 163, 435], "blend": [401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 443, 444, 451], "blob": [89, 96, 170, 191, 237, 260], "blobbi": 177, "block": [26, 35, 54, 59, 61, 66, 103, 104, 119, 129, 163, 171, 178, 191, 202, 210, 234, 448, 494], "blog": 7, "blood": [68, 181, 185], "bloomberg": 0, "bludau": 118, "blue": [16, 19, 43, 52, 71, 88, 131, 163], "blues_r": 98, "blueski": 179, "blur": 202, "bm": 164, "bm10": 233, "bm20": [22, 233], "bm70": 233, "bmc": [68, 74, 118, 204, 277], "board": 179, "bodi": [66, 202, 473], "bogdan": [0, 127, 133, 163], "boil": 178, "bold": [3, 6, 17, 19, 27, 31, 32, 34, 36, 37, 38, 51, 65, 66, 67, 68, 70, 78, 81, 96, 103, 104, 106, 113, 118, 120, 121, 129, 130, 151, 155, 163, 170, 171, 180, 182, 185, 190, 208, 218, 224, 234, 255, 271, 281, 335, 371, 373, 374, 478, 510], "bonferroni": [6, 83, 106, 109, 110, 176, 181, 185, 349, 475, 491], "boo": [0, 145, 148, 151, 163], "book": [149, 163], "bool": [47, 96, 107, 111, 240, 241, 242, 244, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 265, 267, 268, 271, 272, 273, 277, 279, 280, 281, 282, 284, 286, 291, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 329, 332, 346, 348, 349, 350, 351, 352, 355, 357, 361, 363, 364, 365, 366, 367, 370, 371, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 461, 462, 463, 464, 465, 466, 468, 469, 474, 475, 476, 477, 478], "boolean": [96, 121, 155, 160, 163, 309, 364, 471, 472, 477], "bootstrap": [118, 252], "border": [82, 355, 391, 394, 400, 402, 403], "border_s": [391, 394], "borderpad": [400, 402, 403], "bori": [118, 187], "boston": 0, "both": [3, 4, 6, 10, 16, 25, 39, 42, 43, 50, 52, 54, 61, 66, 70, 81, 82, 87, 91, 96, 98, 103, 109, 111, 113, 114, 121, 129, 130, 132, 134, 151, 158, 163, 164, 165, 168, 170, 176, 177, 179, 180, 185, 190, 191, 192, 197, 198, 220, 229, 240, 247, 259, 268, 293, 332, 334, 339, 348, 349, 351, 370, 380, 381, 382, 387, 388, 389, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 437, 443, 446, 448, 451, 452, 453, 454, 455, 461, 465, 467, 477, 481, 482, 483, 487, 508], "both_hemispher": 10, "botteron": [118, 202, 219], "bottl": [32, 34, 35, 36, 41, 190], "bottleneck": 178, "bottom": [13, 16, 27, 41, 43, 69, 164, 191, 315, 448, 459, 461], "bottomrul": 65, "bougacha": [0, 122, 125, 136, 138, 145, 148, 149, 163], "bound": [15, 86, 91, 93, 134, 144, 151, 163, 191, 312, 366, 400, 402, 403, 434, 436, 441, 443, 444, 446, 447, 449, 450, 451, 452, 454, 455, 459, 461], "boundari": [166, 176, 191, 413, 449, 450, 452, 454, 455], "bounding_box": [400, 402, 403], "boundingboxerror": 366, "bowr": [118, 435], "box": [86, 101, 108, 144, 163, 172, 179, 191, 232, 366], "boxplot": [37, 96], "boyd": 118, "brad": [118, 177], "bradford": [118, 217], "bradlei": [61, 118, 198, 202, 209, 217, 230, 232, 265, 266, 267, 373, 374], "brain": [0, 2, 3, 4, 6, 7, 10, 16, 21, 22, 23, 24, 26, 29, 33, 34, 35, 38, 39, 41, 42, 44, 46, 47, 49, 55, 57, 58, 62, 64, 68, 70, 71, 73, 78, 80, 81, 82, 87, 91, 94, 96, 99, 101, 103, 104, 108, 111, 112, 113, 118, 120, 121, 128, 134, 136, 139, 141, 142, 143, 145, 146, 148, 149, 151, 154, 156, 157, 163, 165, 167, 171, 172, 173, 174, 176, 177, 180, 181, 185, 186, 187, 188, 190, 192, 194, 197, 198, 199, 202, 205, 207, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 224, 225, 226, 228, 229, 230, 232, 233, 234, 236, 238, 240, 241, 248, 250, 252, 253, 255, 256, 258, 259, 261, 263, 265, 266, 267, 268, 271, 272, 273, 279, 281, 282, 284, 290, 295, 298, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 351, 353, 356, 358, 363, 373, 374, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 432, 433, 435, 437, 441, 443, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 465, 466, 467, 468, 473, 477, 491, 492, 495, 498, 501, 508, 509, 510], "brain_color": [401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427], "brain_mask": [58, 103], "brain_parcel": [231, 260], "brain_parcellation_cambridge_basc_multiscale_": 202, "brain_time_seri": 58, "brainhack": [139, 144, 163], "brainlin": 281, "brainmap": [2, 22, 233, 261], "brainmask": 350, "brainom": [118, 148, 163, 194, 277], "brainomics_data": [79, 109], "brainomics_loc": [18, 78, 79, 81, 82, 83, 109, 110], "brainpedia": 121, "brainpedia_subset": 121, "brainsprit": [148, 149, 163, 507], "brammer": [118, 187], "branch": [160, 163, 164, 179, 188], "brandon": [118, 197, 248], "braver": [118, 176], "break": [2, 85, 99, 116, 143, 163, 168, 176, 179, 188, 264, 450, 456, 466, 509], "breakag": 320, "breath": [67, 68, 77], "breez": [118, 217], "brest": 0, "brian": [118, 177, 217, 227, 351, 477], "bridg": 101, "brief": [96, 179, 181], "briefli": 176, "brien": [118, 217], "brigham": 0, "bright": 91, "brighter": 120, "bring": [43, 51, 173, 179, 187, 398], "brisban": 0, "brito": [0, 129, 163], "broader": [184, 197], "brodmann": 263, "brok": [125, 163], "broke": [150, 163], "broken": [88, 141, 149, 163, 176], "brought": 192, "brown": [118, 227], "brows": [61, 121, 158, 163, 226, 492], "browsabl": 164, "browser": [2, 3, 4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 56, 58, 59, 60, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 148, 151, 153, 163, 192, 332, 346, 413, 457, 458, 459, 460, 461, 473, 475, 507], "bruce": [23, 118, 206, 211, 212, 213, 214, 215, 217, 231, 237, 254, 260, 262, 264, 290], "bruno": [118, 202], "brute": 178, "bryan": [118, 201, 251], "bsd": 0, "buck": [0, 128, 163], "bucket": 65, "buckner": [118, 202, 217, 228, 231, 237, 260, 264], "buf": 111, "buffer": 111, "bug": [125, 128, 129, 132, 133, 135, 141, 142, 143, 147, 160, 187, 188, 452, 454, 455, 491, 492], "bugfix": [124, 125, 137, 138, 141, 159, 163, 179], "build": [12, 19, 22, 44, 49, 52, 53, 54, 61, 103, 116, 119, 127, 128, 129, 130, 132, 143, 163, 167, 172, 174, 176, 181, 190, 192, 332, 463, 510], "build_doc": 164, "build_tool": [164, 188], "built": [16, 45, 51, 128, 131, 163, 164, 181, 188, 305, 306, 307, 308, 463, 491, 492], "builtin": [127, 163], "buitelaar": [118, 373, 374], "bullmor": [118, 166], "bump": [127, 130, 132, 148, 151, 156, 157, 158, 161, 163, 172, 174, 188], "bunch": [83, 120, 130, 143, 161, 163, 179, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 293], "burden": 179, "burkhardt": [0, 132, 163], "burn": 179, "busa": [118, 206, 254], "bush": [103, 118], "busi": [118, 399], "bustillo": [118, 201, 251], "butterworth": [61, 127, 128, 156, 160, 163, 351, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 465, 477], "butterworth__": [351, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 465, 477], "butterworth__padtyp": 61, "butterwoth": [156, 163], "button": [61, 68, 70, 74, 78, 79, 81, 82, 109, 158, 163, 179, 181, 275, 277, 285, 302, 491, 492], "bwr": [20, 24, 39, 149, 163, 440], "bwr_r": 20, "byte": [3, 4, 6, 10, 18, 22, 54, 72, 102, 104, 158, 163, 360, 366], "bytes_": [59, 93, 105], "bzdok": [0, 122, 123, 125, 126, 136, 138, 163], "c": [3, 26, 36, 41, 43, 44, 45, 46, 47, 52, 59, 61, 71, 101, 102, 106, 114, 118, 121, 172, 176, 179, 198, 199, 202, 206, 209, 217, 219, 224, 226, 228, 230, 233, 236, 252, 254, 261, 263, 265, 266, 272, 273, 281, 282, 284, 295, 296, 297, 298, 299, 300, 324, 325, 351, 366, 367, 373, 374, 398, 399, 468, 471, 477], "c0": 66, "c1": 66, "c3": 66, "c43afa": 11, "c_ra": [160, 163], "ca": 219, "cach": [45, 46, 52, 106, 126, 136, 163, 168, 241, 305, 306, 307, 308, 310, 311, 312, 313, 332, 346, 352, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 463, 464, 465, 487], "caffo": [118, 351, 477], "caglar": [0, 160, 163], "caitlin": [118, 227], "cakan": [0, 160, 163], "cal_max": [59, 105], "cal_min": [59, 105], "calc_beta": 323, "calcul": [0, 3, 33, 41, 44, 50, 51, 61, 94, 100, 115, 116, 128, 134, 149, 163, 180, 204, 276, 277, 305, 306, 307, 308, 312, 313, 322, 324, 325, 340, 348, 356, 370, 373, 376, 379, 385, 392, 395, 399, 410, 427, 434, 441, 444, 449, 450, 451, 456, 458, 463, 475, 509], "calculu": 44, "calhoun": [26, 118, 201, 227, 251], "california": 0, "call": [2, 4, 6, 10, 15, 16, 17, 35, 51, 52, 53, 55, 56, 59, 61, 68, 70, 74, 78, 83, 89, 91, 93, 96, 101, 108, 120, 121, 130, 132, 151, 161, 163, 164, 165, 166, 168, 169, 171, 172, 176, 178, 179, 180, 181, 184, 185, 188, 190, 192, 196, 202, 240, 242, 244, 252, 264, 282, 284, 287, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 321, 326, 332, 335, 351, 361, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 436, 437, 447, 463, 464, 465, 477, 481, 507], "callabl": [121, 158, 163, 244, 282, 305, 306, 307, 308, 309], "caller": [275, 276], "cambridg": [0, 202], "camelcas": 179, "cameron": [59, 118, 165, 166, 205, 225, 227, 253, 258], "camil": [118, 121, 226, 282, 284, 435], "campagn": [118, 210], "can": [0, 2, 3, 4, 6, 7, 10, 11, 15, 16, 21, 22, 23, 24, 25, 26, 27, 31, 32, 34, 35, 36, 38, 41, 42, 43, 45, 46, 47, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 88, 90, 91, 93, 94, 95, 96, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 118, 119, 120, 121, 127, 128, 130, 131, 132, 133, 134, 135, 136, 139, 141, 143, 148, 149, 151, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 190, 191, 192, 194, 198, 207, 208, 225, 226, 228, 229, 238, 241, 242, 244, 247, 248, 251, 254, 255, 256, 257, 258, 259, 260, 277, 279, 282, 286, 305, 306, 307, 308, 309, 310, 311, 322, 324, 325, 332, 334, 335, 339, 345, 346, 348, 351, 352, 353, 358, 361, 362, 363, 366, 367, 370, 371, 373, 374, 379, 380, 381, 383, 385, 387, 388, 391, 392, 393, 394, 395, 396, 398, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 436, 437, 438, 441, 442, 443, 444, 445, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 463, 465, 466, 467, 473, 474, 475, 476, 477, 487, 491, 492, 501, 507, 508, 510], "canada": 0, "canadian": 0, "cancel": 172, "candid": 102, "canica": [53, 127, 128, 134, 146, 157, 161, 163, 167, 185, 313, 379, 492, 510], "canica_components_img": 51, "canica_resting_st": 51, "canni": 507, "cannon": [118, 269, 287], "cannot": [3, 38, 43, 44, 46, 54, 59, 65, 81, 88, 94, 103, 104, 106, 113, 121, 148, 160, 163, 164, 165, 171, 174, 179, 192, 335, 349, 370, 458, 459, 461, 475, 481, 482], "canon": [6, 35, 53, 68, 70, 86, 113, 141, 163, 185, 196, 312, 491], "cap": [79, 81], "capabl": [70, 131, 158, 163, 192], "capit": 224, "caprihan": [118, 201, 251], "captur": [24, 54, 61, 68, 107, 166, 167, 168, 171, 204, 240, 277], "care": [54, 102, 120, 171, 172, 174, 178, 188, 232, 319], "carefulli": 113, "carpet": [9, 29, 116, 131, 154, 163, 249, 272, 352, 364, 393, 436, 509], "carpet_plot": [160, 163], "carri": [181, 185], "carrier": [118, 198], "case": [13, 16, 24, 26, 36, 41, 43, 52, 53, 57, 61, 65, 67, 68, 69, 74, 86, 91, 93, 94, 98, 103, 104, 105, 111, 113, 121, 135, 141, 151, 154, 163, 165, 166, 168, 171, 172, 176, 178, 187, 188, 190, 199, 247, 250, 254, 256, 257, 305, 306, 307, 308, 309, 310, 311, 332, 334, 339, 345, 346, 348, 349, 358, 366, 367, 368, 369, 378, 379, 383, 384, 385, 386, 393, 431, 434, 436, 437, 441, 443, 444, 446, 449, 450, 451, 458, 474, 475, 487, 492, 507], "cast": [132, 138, 151, 163, 192, 199, 250, 364], "castellano": [118, 227], "castillo": [26, 118], "cat": [32, 34, 35, 41, 101, 120, 171, 186, 190], "catarina": [118, 236, 263], "catch_warn": [34, 36, 42, 51, 72, 107], "categor": [172, 188], "categori": [32, 34, 35, 36, 42, 51, 101, 106, 120, 171, 173, 179, 190, 271], "caterina": [118, 232, 267], "caught": 315, "caus": [46, 52, 86, 133, 136, 163, 188, 369], "caution": 369, "cautious": [145, 163], "caveat": [118, 171], "cavi": [118, 206, 217, 254], "cbar": 41, "cbar_tick_format": [6, 27, 155, 158, 163, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 441, 443, 444, 446, 450, 451, 452, 454, 455], "cbar_vmax": [401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 452], "cbar_vmin": [401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 452], "cbf": 121, "cbig": [231, 237, 260], "cbv": 121, "cc": 248, "cc0": 226, "cd": [51, 53, 55, 56, 61, 179, 188, 313], "cd3e4e": 11, "ce": [332, 335, 346, 475], "cea": [0, 204], "cecil": [118, 187], "ceil": 104, "cell": [3, 10, 17, 23, 38, 52, 55, 56, 57, 61, 65, 77, 79, 181, 185], "censor": [130, 160, 163, 477], "center": [0, 13, 15, 38, 50, 53, 54, 58, 61, 64, 81, 93, 102, 109, 110, 114, 149, 160, 163, 166, 169, 192, 199, 217, 221, 228, 242, 309, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 432, 433, 440, 462, 474, 487], "cento": 202, "centr": 0, "central": [0, 93, 248, 435], "centroid": [413, 462], "cercor": [118, 198, 206, 231, 254, 260], "cereb": 54, "cerebellar": [232, 267], "cerebellum": [61, 118, 198, 209, 232, 265, 267], "cerebr": [118, 181, 198, 204, 206, 209, 217, 231, 237, 254, 260, 264, 265, 277], "cerebrospin": [12, 59, 219, 272, 373], "certain": [6, 17, 59, 98, 113, 148, 163, 164, 171, 179, 181, 188, 198, 282, 366, 370, 449], "certif": 198, "cf": [118, 192, 198], "cff": [164, 179], "cfg": [159, 163], "chain": [96, 191, 240, 241], "chair": [30, 32, 34, 35, 41, 48, 116, 128, 163, 190, 271, 307, 358, 363, 448, 451, 456, 509], "challeng": 165, "chamma": [0, 127, 128, 129, 157, 158, 160, 163], "chan": 0, "chanc": [6, 35, 39, 54, 79, 81, 155, 163, 175, 176, 181], "chance_level": 35, "chandra": 0, "chang": [15, 16, 20, 41, 43, 45, 54, 65, 69, 70, 105, 106, 109, 111, 123, 164, 172, 174, 178, 179, 181, 188, 189, 240, 241, 242, 250, 264, 290, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 340, 346, 350, 351, 360, 364, 366, 369, 370, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 399, 436, 446, 452, 454, 455, 459, 461, 462, 463, 464, 465, 468, 469, 471, 474, 477, 508], "changelog": [127, 143, 188], "channel": [148, 163], "chaogan": [118, 227], "chapra": [0, 132, 163], "chapter": [191, 192], "charact": [160, 163, 341], "character": [67, 68, 118, 187, 219, 373], "characterist": [41, 80, 135, 163, 171, 185, 374], "chawla": [0, 148, 149, 150, 151, 152, 153, 154, 163], "cheap": 172, "check": [2, 3, 11, 13, 16, 22, 26, 66, 79, 95, 96, 105, 109, 120, 128, 131, 132, 138, 141, 163, 164, 166, 171, 174, 178, 179, 185, 187, 188, 190, 192, 240, 241, 242, 244, 273, 292, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 332, 333, 346, 361, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 462, 463, 464, 465, 507], "check_ev": [129, 163], "check_look_up_t": 179, "check_mask_img": 179, "check_matplotlib": [25, 40, 43, 47, 52, 69, 80, 93, 109, 110, 114], "check_niimg": 315, "check_random_st": [46, 47], "checkerboard": [68, 74, 82, 277], "checklist": 164, "checkmk": 0, "checkout": [143, 163, 179, 188], "chee": [39, 118], "chen": [0, 26, 39, 118, 132, 160, 163, 198], "cheung": [118, 227], "chevali": [0, 148, 151, 163], "chiang": [145, 163], "chieti": 0, "child": [0, 54, 268], "child_adult": [54, 102], "childmind": 197, "children": [51, 102, 151, 163, 186, 207, 268], "china": 0, "chiu": [118, 217], "chloe": [0, 161, 163], "choic": [10, 20, 68, 69, 114, 138, 163, 165, 166, 172, 174, 175, 178, 179, 242, 253, 310, 311, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 465], "choos": [15, 16, 25, 35, 36, 47, 50, 89, 93, 113, 174, 175, 181, 192, 305, 306, 307, 308, 374, 434, 437, 441, 443, 444, 447, 449, 450, 451, 462, 463, 475, 487, 510], "chose": 171, "chosen": [23, 36, 68, 103, 164, 178, 240, 452, 454, 455, 458, 459, 461, 487], "chri": [0, 122, 136, 151, 163], "christian": [0, 118, 128, 145, 148, 163, 165, 198, 233, 261, 373, 374], "christin": [52, 118, 227], "christina": [0, 61, 118, 130, 163, 209, 265], "christo": [59, 118, 373, 374], "christoph": [23, 118, 145, 148, 163, 206, 254, 262], "chun": [39, 118], "chunk": [3, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 101, 106], "church": [61, 118, 209, 230, 265, 266], "chyzhyk": [54, 102, 118], "ci": [179, 188, 322, 324, 325], "cibit": 0, "cidx": 81, "cing": 54, "cingul": [24, 58, 61, 64, 93, 180, 199], "cingulo": 61, "cinguloopercular": 267, "cionca": [0, 129, 163], "cipollini": [0, 122, 123, 125, 136, 138, 163], "circl": 86, "circleci": [138, 143, 163, 164], "circular": [78, 202], "ciric": [59, 118, 373, 374], "cisler": [103, 118], "citat": [0, 164, 179], "cite": [168, 204, 220, 225, 258, 268, 277], "cit\u00e9": 0, "ciuciu": [118, 210, 312], "civet": [118, 202], "cjlano": 179, "clair": [118, 198], "clare": [118, 198, 227, 233, 261], "clarifi": [68, 156, 163], "clariti": 56, "clark": [0, 118, 127, 163, 176, 201, 251], "class": [3, 7, 10, 30, 45, 46, 48, 52, 54, 57, 59, 61, 93, 96, 101, 102, 105, 116, 126, 127, 128, 130, 132, 133, 134, 135, 136, 138, 144, 145, 146, 149, 151, 154, 156, 157, 158, 160, 161, 163, 170, 171, 175, 178, 179, 180, 184, 192, 240, 241, 242, 271, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 332, 346, 352, 364, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 434, 437, 441, 443, 444, 447, 448, 449, 450, 451, 456, 462, 463, 464, 465, 466, 467, 473, 479, 480, 481, 482, 483, 484, 488, 489, 492, 495, 509, 510], "class_name0": [378, 379, 381, 382, 384, 385, 386, 388, 389, 462, 465], "class_name1": [378, 379, 381, 382, 384, 385, 386, 388, 389, 462, 465], "class_name2": [378, 379, 381, 382, 384, 385, 386, 388, 389, 462, 465], "class_prior": [305, 306, 307, 308], "classes_": [41, 305, 306, 307, 308, 310], "classic": [31, 36, 96, 172, 190, 218], "classif": [3, 32, 33, 34, 35, 37, 41, 46, 49, 52, 62, 101, 103, 116, 118, 120, 130, 154, 163, 165, 170, 171, 175, 176, 177, 185, 186, 187, 197, 240, 248, 258, 268, 305, 306, 307, 308, 310, 311, 374, 376, 384, 437, 448, 456, 508, 509, 510], "classifi": [3, 30, 34, 35, 38, 41, 44, 48, 54, 101, 102, 116, 151, 154, 155, 163, 171, 172, 173, 174, 175, 185, 186, 187, 271, 305, 307, 309, 310, 356, 358, 363, 451, 456, 489, 509], "classification_accuraci": [35, 101], "classification_target": [32, 34], "classifier_nam": 32, "classifiermixin": [135, 163], "classifiers_data": 32, "classmethod": [401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 483], "claus": 0, "clean": [33, 35, 42, 43, 46, 52, 53, 55, 56, 59, 61, 65, 71, 77, 93, 107, 118, 127, 128, 130, 132, 134, 141, 147, 148, 151, 155, 156, 158, 161, 163, 188, 191, 192, 240, 312, 313, 332, 351, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 436, 463, 465], "clean__": 351, "clean__butterworth__": 351, "clean__sample_mask": [130, 163], "clean_arg": [52, 55, 56, 57, 59, 61, 91, 93, 94, 134, 161, 163, 192, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 465, 492], "clean_args_": [377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 465], "clean_img": [71, 130, 134, 141, 143, 148, 158, 161, 163, 191, 477], "clean_kwarg": [52, 55, 56, 59, 61], "clean_map": [6, 26], "cleaned_sign": 477, "cleaner": [51, 68, 148, 163], "cleanup": 111, "clear": [41, 96, 121, 127, 132, 151, 160, 163, 179, 305, 306, 307, 308, 312, 313, 379, 385, 463], "clearer": [45, 179], "clearli": [129, 158, 163, 179, 194, 238, 501], "clever": [120, 178], "clf": [44, 145, 163], "cli": 183, "click": [26, 121, 164, 181, 192, 277, 507], "clikc": 164, "clinic": [0, 26, 54, 102, 118, 172, 187], "clip": [61, 86, 366, 367], "cllip": 367, "clock": 178, "clone": 179, "close": [16, 24, 39, 43, 52, 88, 111, 158, 163, 165, 172, 178, 179, 181, 185, 273, 305, 306, 307, 308, 310, 311, 391, 392, 393, 394, 395, 396, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 455, 470, 507], "closer": [43, 52, 178, 474], "closest": [86, 366], "cluster": [6, 20, 26, 33, 35, 42, 49, 62, 64, 65, 70, 73, 76, 77, 81, 83, 84, 88, 93, 104, 113, 116, 118, 127, 128, 134, 151, 154, 158, 159, 160, 163, 167, 173, 174, 176, 181, 184, 185, 186, 187, 199, 205, 252, 253, 268, 277, 307, 308, 327, 332, 341, 346, 348, 349, 356, 358, 363, 370, 383, 399, 419, 441, 448, 450, 451, 456, 462, 463, 464, 468, 470, 471, 474, 475, 489, 491, 492, 509, 510], "cluster_level_infer": [78, 135, 158, 163, 184], "cluster_percentil": [307, 308], "cluster_roi": [205, 253], "cluster_s": [159, 163], "cluster_threshold": [6, 26, 64, 65, 70, 71, 83, 98, 158, 161, 163, 332, 345, 346, 349, 370, 474, 475], "clustering_percentil": [135, 163, 307, 308], "cm": [13, 21, 41, 53, 61, 129, 148, 163, 169, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 507], "cma": 217, "cmap": [3, 6, 10, 11, 13, 15, 17, 20, 21, 23, 24, 26, 33, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 52, 53, 55, 56, 57, 59, 71, 72, 78, 79, 81, 82, 83, 88, 89, 91, 93, 94, 96, 98, 106, 109, 110, 114, 129, 149, 151, 160, 161, 163, 169, 192, 204, 275, 276, 277, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 434, 435, 436, 440, 441, 442, 443, 444, 446, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 461, 465, 492, 507], "cmap_filenam": [83, 110], "cmap_label": [160, 163, 436], "cmaps_leftauditoryclick": [79, 109], "cmrmap_r": [52, 55, 56, 57, 59, 93, 377, 378, 383, 384, 465, 492], "cn2h9c": [118, 165, 240], "cnr": [0, 199, 250], "co": [5, 25, 86, 118, 180, 198, 211, 212, 213, 214, 215, 236, 263, 290], "coactiv": 170, "coalson": [61, 118, 209, 265], "coars": 39, "cobr": [129, 139, 143, 163], "code": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 118, 120, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 172, 174, 178, 180, 185, 192, 248, 309, 313, 332, 346, 378, 381, 384, 386, 388, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 435, 447, 465, 473, 475, 491, 492, 500, 503, 508], "codebas": [129, 163, 164, 179], "codecov": [143, 163], "coef": [33, 47, 101, 332, 341], "coef_": [3, 43, 47, 101, 114, 120, 179, 305, 306, 307, 308, 310, 311], "coef_img": [3, 32, 46, 114, 120], "coef_img_": [3, 31, 32, 33, 42, 45, 46, 114, 171, 192, 305, 306, 307, 308, 310, 311], "coeffici": [3, 6, 24, 41, 42, 43, 47, 54, 101, 102, 134, 144, 160, 163, 165, 171, 172, 173, 177, 178, 179, 181, 185, 240, 242, 310, 311, 321, 323, 326, 332, 341, 475], "coerc": [12, 291], "coffe": [35, 65], "coffei": [118, 227], "cognit": [0, 41, 74, 103, 107, 118, 171, 181, 185, 192, 204, 223, 228, 233, 234, 261, 269, 277, 287], "cognitive_paradigm_cogatla": 112, "cohen": [61, 118, 209, 230, 265, 266], "coher": [185, 187], "cohort": [54, 102], "coil": 71, "coimbra": 0, "col": [41, 322, 324, 325], "colcomb": [118, 227], "cold_hot": [13, 26, 45, 46, 147, 163], "colin": [0, 151, 163], "colin27": 220, "colinear": 68, "collaps": 70, "collect": [61, 103, 107, 112, 118, 119, 164, 179, 185, 197, 201, 205, 224, 226, 282, 283, 284, 285, 373, 481, 482, 510], "collection_1257": 107, "collection_1952": 107, "collection_4008": 107, "collection_413": 112, "collection_42": 112, "collection_423": 112, "collection_79": 107, "collection_98": 112, "collection_filt": [121, 282], "collection_id": [107, 112, 121, 282, 284], "collection_metadata": [121, 282], "collection_term": [121, 282], "collections_meta": [121, 226, 282, 283, 284, 285], "colleg": [0, 185], "collin": [118, 199, 202, 219, 250], "collis": 46, "color": [10, 11, 15, 16, 19, 22, 25, 26, 32, 34, 36, 41, 52, 53, 54, 71, 88, 90, 111, 130, 131, 133, 134, 149, 151, 154, 156, 160, 163, 168, 169, 179, 181, 188, 237, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 435, 436, 437, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 465, 492, 507], "color_map": 13, "color_map_nam": 13, "colorado": 0, "colorbar": [2, 10, 11, 15, 16, 21, 22, 24, 26, 27, 38, 41, 43, 51, 53, 60, 71, 81, 88, 89, 90, 96, 98, 104, 107, 114, 125, 127, 130, 131, 135, 140, 143, 148, 149, 151, 155, 156, 157, 158, 159, 163, 169, 191, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 435, 436, 437, 438, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 459, 461, 507], "colorbar_fonts": [457, 459, 461], "colorbar_height": [457, 459, 461], "colormap": [6, 9, 15, 20, 22, 24, 26, 29, 88, 116, 131, 134, 143, 146, 147, 148, 149, 151, 156, 163, 302, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 434, 435, 436, 437, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 465, 509, 510], "colors_17": 237, "colors_7": 237, "column": [3, 6, 11, 41, 59, 65, 66, 67, 68, 70, 71, 72, 73, 74, 77, 78, 79, 81, 82, 83, 93, 101, 103, 104, 113, 121, 129, 130, 134, 155, 163, 181, 241, 242, 244, 250, 252, 254, 256, 257, 259, 260, 262, 263, 264, 305, 306, 307, 308, 319, 322, 323, 324, 325, 330, 332, 339, 345, 346, 347, 348, 351, 366, 373, 374, 375, 377, 380, 383, 387, 399, 410, 412, 415, 429, 434, 438, 439, 441, 442, 444, 448, 449, 450, 451, 454, 472, 474, 475, 476, 477, 478, 492], "column_nam": [65, 375], "com": [0, 20, 160, 163, 164, 179, 219, 227, 231, 232, 237, 252, 260, 374, 507, 508], "combin": [6, 7, 16, 43, 44, 73, 106, 108, 111, 118, 127, 130, 157, 163, 164, 171, 176, 181, 185, 192, 198, 202, 217, 220, 224, 232, 248, 281, 305, 306, 307, 308, 310, 312, 313, 332, 346, 348, 373, 418, 419, 422, 423, 424, 425, 438], "come": [2, 3, 11, 17, 45, 55, 57, 61, 77, 82, 96, 120, 128, 131, 163, 166, 171, 172, 178, 179, 187, 188, 191, 192, 268, 507], "comer": 187, "comfort": [120, 179], "comma": 190, "command": [179, 187, 188, 508], "comment": [179, 192], "commerci": [197, 200, 202, 204, 205, 207, 208, 225, 253], "commit": 188, "commit_sha": 188, "committe": 198, "commod": 178, "common": [12, 26, 52, 68, 69, 72, 96, 103, 143, 151, 157, 159, 163, 165, 171, 174, 176, 178, 179, 181, 184, 189, 191, 197, 202, 205, 235, 244, 253, 358, 366, 367, 371, 379, 394, 396], "commonli": [54, 168, 180, 185, 187, 192, 374], "commun": [0, 118, 179, 186, 188, 197, 207, 268, 508], "comp": [51, 201, 251], "compact": [2, 96, 191, 273], "compar": [3, 6, 11, 32, 33, 35, 37, 42, 44, 49, 54, 59, 61, 62, 66, 68, 79, 81, 82, 85, 88, 96, 99, 102, 105, 111, 116, 118, 121, 123, 134, 151, 163, 166, 167, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 183, 185, 192, 205, 225, 240, 242, 255, 258, 264, 268, 305, 306, 307, 308, 310, 311, 312, 313, 332, 351, 353, 356, 362, 363, 364, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 411, 431, 432, 436, 437, 445, 451, 456, 463, 465, 477, 492, 507, 509, 510], "compare_load": 179, "comparison": [45, 52, 54, 60, 65, 68, 83, 95, 102, 103, 106, 111, 118, 121, 134, 163, 165, 168, 175, 176, 177, 182, 185, 188, 201, 205, 251, 510], "compat": [10, 38, 43, 44, 70, 74, 81, 113, 128, 130, 135, 138, 158, 160, 163, 174, 179, 180, 240, 241, 242, 256, 257, 312, 313, 332, 345, 346, 348, 358, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 435, 438, 445, 462, 463, 464, 465, 473, 477], "compcor": [59, 68, 118, 130, 158, 163, 166, 268, 357, 373, 374, 478], "complementari": [98, 118, 223], "complet": [26, 36, 63, 75, 96, 116, 120, 121, 151, 163, 164, 165, 171, 173, 180, 188, 191, 192, 269, 271, 287, 304, 332, 335, 345, 375, 385, 399, 434, 435, 436, 437, 438, 441, 443, 444, 445, 447, 448, 449, 450, 451, 456, 463, 474, 491, 509], "complex": [68, 79, 89, 118, 121, 171, 173, 176, 179, 184, 187, 192], "compli": [179, 198, 373, 376], "complianc": [129, 134, 163, 179], "compliant": [103, 128, 134, 163, 179, 192, 287, 303, 374, 450, 454], "complic": [178, 190, 322, 324, 325], "compon": [7, 51, 53, 57, 68, 94, 96, 100, 115, 116, 118, 136, 143, 144, 146, 154, 163, 166, 167, 168, 169, 181, 185, 190, 191, 201, 202, 240, 241, 242, 251, 261, 268, 279, 305, 306, 307, 308, 309, 310, 311, 312, 313, 322, 324, 325, 332, 346, 358, 360, 363, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 433, 451, 456, 462, 463, 464, 465, 466, 467, 478, 495, 509], "component_img": 108, "components_": [107, 146, 163, 312, 313], "components_img": [51, 53, 169], "components_img_": [51, 53, 146, 163, 169, 170, 312, 313], "components_init_": 313, "components_mask": [94, 108], "compos": [21, 101, 185, 191, 192, 197, 266, 305, 306, 307, 308], "composit": [36, 41], "comprehens": [118, 179, 187, 202, 204, 277, 303], "compress": [51, 118, 148, 163, 167, 170, 190, 313], "compressed_img_rena": 52, "compris": [66, 68, 88, 466, 474], "compromis": [181, 374], "comptat": 68, "comput": [0, 3, 6, 10, 16, 17, 23, 24, 26, 27, 31, 32, 33, 35, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 64, 65, 66, 67, 68, 69, 70, 72, 74, 77, 79, 81, 83, 85, 87, 92, 94, 97, 101, 102, 103, 104, 106, 107, 108, 111, 113, 114, 116, 118, 119, 121, 129, 132, 136, 148, 154, 155, 156, 158, 163, 167, 168, 170, 171, 172, 173, 174, 176, 177, 178, 181, 182, 183, 185, 186, 187, 189, 190, 193, 240, 242, 244, 258, 268, 271, 281, 290, 293, 294, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 320, 322, 324, 325, 328, 329, 331, 332, 334, 339, 341, 346, 348, 349, 356, 357, 358, 361, 362, 363, 364, 368, 370, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 433, 437, 440, 441, 448, 449, 450, 451, 456, 457, 459, 462, 463, 464, 465, 473, 475, 476, 478, 487, 491, 498, 507, 510], "computation": [68, 172, 176], "computationminussent": 70, "computationnali": 172, "compute_alpha_max": 178, "compute_background_mask": [191, 305, 306, 307, 308, 312, 313, 379, 385, 463], "compute_brain_mask": [154, 157, 163, 191, 305, 306, 307, 308, 312, 313, 379, 385, 395, 463], "compute_contrast": [6, 26, 35, 64, 65, 67, 68, 70, 71, 72, 73, 77, 78, 79, 81, 82, 83, 103, 104, 113, 127, 130, 131, 132, 161, 163, 180, 183, 332, 346, 348, 475], "compute_epi_mask": [12, 27, 71, 91, 191, 192, 305, 306, 307, 308, 312, 313, 379, 385, 463], "compute_fixed_effect": [73, 161, 163, 183], "compute_gray_matter_mask": [154, 158, 163], "compute_multi_background_mask": [132, 163, 191, 379], "compute_multi_brain_mask": [127, 157, 163, 379], "compute_multi_epi_mask": [127, 163, 191, 379], "compute_multi_gray_matter_mask": [127, 163], "compute_multi_grey_matter_mask": [157, 163], "compute_regressor": [69, 128, 158, 163, 180], "computed_regressor": 334, "con": [13, 328], "con_id": [69, 334], "con_val": 328, "concat_img": [2, 12, 72, 103, 111, 134, 142, 163, 191, 358], "concat_niimg": [130, 163], "concaten": [39, 41, 50, 52, 56, 60, 103, 111, 165, 191, 352, 358, 373, 465], "concentr": [46, 179, 181, 185], "concept": [68, 101, 151, 163, 171, 172, 179, 185, 189, 220, 510], "conceptu": 181, "concern": [179, 185], "concis": 282, "concordia": 0, "concret": [67, 111, 179, 181], "concurr": [33, 38, 39, 45, 46, 47, 51, 104, 106, 109], "cond": [96, 103, 334], "cond_": 65, "cond_id": [158, 163], "cond_map": 96, "conda": [179, 508], "condit": [3, 6, 26, 31, 32, 33, 35, 37, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 82, 96, 101, 104, 106, 113, 120, 132, 155, 158, 160, 163, 165, 171, 178, 183, 185, 188, 191, 208, 210, 218, 234, 235, 255, 332, 334, 339, 346, 348, 438, 491], "condition_": 35, "condition_count": 103, "condition_effect": 82, "condition_id": 74, "condition_mask": [3, 31, 32, 33, 36, 38, 39, 101, 106, 120], "condition_mask_test": 33, "condition_mask_train": 33, "condition_nam": [96, 103], "conditions_encod": 106, "conditions_label": 35, "conditions_per_run": 106, "conditions_run": 35, "conditions_test": 3, "conditions_to_modul": 74, "conditions_train": 3, "conduct": [34, 121, 131, 163, 181, 234], "conf": 164, "conf_int": [322, 324, 325], "confer": [147, 163], "confid": [305, 306, 307, 308, 310, 322, 324, 325], "confidence_interv": [322, 324, 325], "config": 164, "configur": [10, 16, 26, 128, 129, 163, 179, 188, 191, 192, 240, 241, 242, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465], "confirm": [2, 31, 72, 129, 163, 179], "conform": [160, 163, 181], "confound": [50, 52, 53, 54, 55, 56, 57, 58, 61, 65, 79, 80, 102, 103, 104, 109, 113, 118, 120, 125, 128, 129, 130, 132, 133, 134, 138, 148, 154, 155, 156, 158, 160, 161, 163, 166, 169, 170, 171, 178, 185, 189, 191, 200, 207, 240, 249, 268, 312, 313, 332, 335, 346, 347, 348, 351, 357, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 399, 463, 465, 477, 478, 496], "confound_fil": 54, "confound_filenam": [56, 58], "confounding_var": 399, "confounds_": [335, 346], "confounds_datafram": 166, "confounds_fd_threshold": 335, "confounds_filenam": 61, "confounds_minimal_no_gsr": 59, "confounds_mot": 335, "confounds_regressor": 65, "confounds_scrub": [59, 335], "confounds_simpl": 59, "confounds_std_dvars_threshold": 335, "confounds_strategi": 335, "confounds_wm_csf": 335, "conftest": 179, "confus": [128, 163, 172, 369], "confusion_matrix": [33, 37, 172], "congdon": [118, 269, 287], "congruent": 183, "conjunct": 96, "connect": [7, 9, 23, 28, 29, 52, 53, 61, 62, 90, 96, 100, 115, 118, 130, 131, 132, 136, 141, 143, 144, 151, 154, 159, 163, 166, 168, 170, 179, 180, 181, 185, 186, 187, 191, 197, 198, 202, 231, 233, 237, 240, 241, 242, 248, 252, 258, 260, 261, 262, 264, 268, 274, 279, 293, 294, 301, 332, 335, 349, 352, 360, 370, 373, 374, 376, 384, 385, 386, 387, 391, 392, 393, 394, 395, 396, 397, 412, 413, 433, 437, 439, 448, 451, 454, 455, 456, 457, 463, 466, 467, 474, 475, 479, 481, 482, 483, 495, 507, 508, 509, 510], "connect_diag": [88, 466], "connected_compon": [465, 467], "connected_label_region": [88, 143, 163, 168, 191, 465, 467], "connected_region": [90, 136, 149, 163, 169, 191, 465, 466], "connection": 187, "connectivity_": 463, "connectivity__kind": 102, "connectivity_measur": 61, "connectivitymatrix": 240, "connectivitymeasur": [50, 53, 54, 57, 59, 61, 102, 114, 129, 136, 138, 141, 144, 154, 161, 163, 165, 166, 169], "connectom": [0, 9, 13, 29, 49, 51, 52, 54, 57, 59, 60, 62, 102, 114, 116, 118, 123, 136, 140, 141, 145, 148, 149, 151, 154, 156, 163, 167, 169, 170, 185, 186, 187, 192, 197, 198, 200, 202, 225, 248, 255, 258, 264, 265, 266, 268, 279, 312, 313, 353, 356, 358, 364, 374, 376, 377, 378, 383, 384, 386, 411, 412, 431, 432, 433, 434, 437, 447, 448, 449, 451, 456, 457, 458, 460, 465, 473, 492, 495, 509, 510], "connectome_measur": [50, 53, 114, 169], "connectomedb": 198, "connectomeview": [457, 460], "connor": [0, 160, 163], "conscious": 0, "consecut": [131, 163, 199, 250, 252, 254, 260, 263, 264, 462], "consensu": [170, 179, 202], "consequ": [3, 16, 88, 192, 374], "conserv": [6, 79, 81, 106, 176, 181, 202, 241, 246], "consid": [6, 26, 51, 56, 57, 58, 68, 69, 82, 94, 96, 106, 111, 120, 138, 151, 158, 163, 176, 179, 198, 220, 237, 248, 264, 305, 306, 307, 308, 310, 311, 312, 313, 319, 323, 332, 334, 335, 339, 346, 348, 355, 361, 378, 379, 380, 381, 383, 384, 385, 387, 388, 393, 396, 399, 403, 450, 463, 466, 468, 469, 492], "consider": [166, 172, 232, 248, 348, 399], "consist": [3, 7, 36, 43, 47, 68, 120, 128, 129, 135, 141, 147, 148, 149, 158, 163, 171, 172, 175, 176, 178, 179, 181, 185, 197, 202, 207, 234, 242, 252, 279, 311, 335, 377, 380, 381, 383, 387, 388, 462, 464, 467], "consolid": [96, 159, 163], "conson": [104, 221], "consortium": [198, 269, 279, 287], "constant": [68, 114, 178, 191, 305, 306, 307, 308, 310, 311, 348, 399, 440, 476, 507], "constant_features_idx": 114, "constitut": [21, 170], "constrain": [52, 53, 118, 168, 186, 205, 218, 225, 232, 233, 253, 258, 271, 463], "constrained_layout": [32, 34, 51, 54, 58, 61, 66, 70, 71, 80, 82, 102], "constraint": [52, 168, 178, 371], "construct": [10, 43, 55, 57, 101, 118, 134, 163, 167, 170, 176, 179, 180, 186, 187, 199, 319, 323, 347, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 465, 473], "constructor": [2, 121, 132, 161, 163, 324, 325, 358], "consult": [104, 198], "consum": [149, 163, 174, 178, 188, 190, 386], "consumpt": [191, 332, 346, 378, 384, 476], "contact": 234, "contain": [2, 3, 4, 6, 23, 24, 38, 43, 44, 52, 55, 58, 65, 66, 70, 73, 74, 81, 86, 93, 96, 104, 105, 110, 112, 113, 120, 121, 128, 129, 130, 131, 133, 134, 138, 143, 148, 151, 160, 161, 163, 164, 165, 171, 172, 175, 178, 179, 181, 185, 188, 190, 192, 198, 199, 200, 201, 202, 205, 207, 210, 217, 218, 220, 224, 226, 227, 228, 229, 235, 240, 241, 242, 244, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 271, 281, 282, 283, 284, 285, 286, 289, 291, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 321, 322, 324, 325, 326, 332, 335, 346, 347, 348, 351, 352, 360, 366, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 399, 446, 447, 450, 452, 453, 454, 455, 459, 461, 462, 463, 464, 465, 466, 468, 469, 473, 475, 477, 481, 482, 483, 485, 486, 487, 497, 510], "contast": 73, "content": [68, 70, 86, 129, 135, 163, 175, 179, 187, 332, 442], "contest": 210, "context": [7, 96, 103, 118, 129, 130, 163, 179, 185], "contigu": [168, 178, 234, 399], "continu": [22, 24, 42, 46, 59, 135, 163, 166, 171, 172, 173, 177, 185, 192, 282, 361, 365, 366, 367, 377, 378, 379, 383, 384, 385, 386, 443, 444, 449, 450, 451, 458, 465, 466, 467], "contour": [10, 16, 19, 22, 89, 90, 129, 132, 143, 151, 154, 156, 160, 163, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 449, 450, 453, 510], "contour_fil": [401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427], "contourf": [16, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427], "contrari": [185, 377, 378, 492], "contrarili": [57, 93, 383, 384, 492], "contrast": [6, 9, 15, 16, 26, 29, 35, 67, 69, 72, 77, 78, 79, 80, 81, 82, 83, 90, 92, 95, 104, 109, 110, 113, 116, 128, 129, 130, 132, 141, 145, 146, 155, 158, 161, 163, 170, 176, 181, 182, 183, 184, 185, 199, 204, 224, 275, 276, 277, 283, 285, 302, 321, 322, 324, 325, 326, 328, 329, 330, 332, 345, 346, 348, 434, 438, 449, 450, 451, 456, 458, 462, 475, 491, 507, 509], "contrast_def": [6, 332, 438, 475], "contrast_definit": 112, "contrast_dim": 320, "contrast_fig": 70, "contrast_id": [67, 68, 70, 72, 73], "contrast_img": [73, 329], "contrast_map_filenam": [79, 109], "contrast_matrix": [67, 68, 70], "contrast_plot": 70, "contrast_typ": [65, 130, 161, 163, 345], "contrast_v": [67, 68, 70, 73], "contribut": [127, 145, 148, 149, 150, 151, 152, 153, 157, 158, 160, 163, 172, 181, 188, 229, 508], "contributor": [122, 123, 125, 126, 179, 188], "control": [6, 9, 10, 12, 15, 16, 21, 24, 26, 29, 35, 40, 43, 51, 59, 64, 70, 73, 78, 81, 101, 104, 113, 116, 118, 128, 130, 132, 136, 144, 145, 149, 151, 155, 163, 165, 169, 170, 171, 172, 175, 176, 178, 179, 181, 185, 189, 197, 200, 202, 240, 248, 275, 313, 327, 331, 349, 370, 373, 374, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 436, 441, 443, 444, 446, 450, 451, 452, 454, 455, 456, 462, 475, 487, 491, 507, 509, 510], "controversi": 248, "convei": [179, 399], "conveni": [121, 191, 192, 207, 268], "convent": [23, 74, 127, 129, 160, 163, 179, 188, 303, 369, 371, 434, 441, 443, 451, 462, 464], "converg": [36, 51, 94, 178, 241, 244, 310, 311, 462], "convergencewarn": [36, 42, 51, 94], "convers": [41, 192, 199, 377, 380, 383, 387], "convert": [3, 6, 21, 38, 43, 44, 45, 51, 53, 68, 81, 96, 112, 120, 151, 156, 158, 160, 163, 169, 171, 176, 185, 191, 309, 330, 352, 353, 361, 377, 378, 379, 383, 384, 385, 386, 465], "convex": 178, "convolut": [69, 181, 334, 339], "convolv": [35, 70, 113, 180, 334, 491], "coord": [16, 43, 53, 55, 57, 61, 71, 89, 103, 149, 151, 163, 169, 400, 402, 403, 431, 432, 437, 452, 453, 454, 455, 461, 507], "coord_transform": [43, 50, 145, 163], "coordin": [7, 17, 20, 23, 39, 43, 52, 55, 57, 71, 96, 103, 118, 120, 126, 130, 140, 143, 145, 146, 148, 154, 158, 160, 163, 167, 169, 178, 180, 181, 185, 192, 199, 200, 206, 209, 211, 212, 213, 214, 215, 220, 230, 232, 233, 258, 265, 266, 267, 290, 313, 353, 362, 366, 386, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 432, 433, 434, 436, 437, 441, 443, 444, 447, 449, 450, 451, 452, 453, 454, 455, 457, 458, 460, 461, 474, 475, 479, 480, 484, 486, 487, 492, 507, 510], "coords_connectom": [53, 169], "copenhagen": 0, "copi": [3, 21, 38, 41, 43, 50, 51, 53, 56, 90, 98, 100, 103, 114, 115, 116, 120, 131, 132, 151, 163, 164, 178, 179, 190, 198, 228, 249, 287, 312, 313, 332, 346, 354, 355, 356, 361, 362, 364, 366, 367, 370, 376, 379, 385, 476, 509], "copy_head": [161, 163, 350, 355, 363, 364, 365, 366, 367, 370], "copy_header_from": [105, 132, 163, 362], "copy_img": [130, 136, 163], "copyto": 111, "corbetta": [118, 374], "core": [21, 45, 46, 51, 53, 178, 179, 188, 508], "coregist": [39, 70, 194, 202, 238, 501], "coregistr": [16, 140, 163, 185, 202], "corei": [118, 201, 251], "corner": [47, 141, 163, 179, 368], "coron": [15, 96, 400, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 434, 437, 441, 443, 444, 447, 449, 450, 451, 458, 475], "corr": [23, 445], "corrcoef": 50, "correct": [6, 33, 35, 42, 45, 46, 59, 77, 79, 81, 83, 104, 106, 109, 110, 118, 127, 128, 151, 154, 160, 163, 165, 176, 179, 181, 182, 185, 188, 202, 278, 287, 303, 305, 306, 308, 310, 311, 348, 349, 370, 373, 374, 399, 436, 452, 453, 454, 455, 478, 510], "correctli": [59, 68, 95, 130, 149, 151, 152, 160, 163, 174, 181, 188, 332, 373, 374, 508], "correl": [24, 28, 35, 45, 46, 49, 50, 55, 62, 64, 70, 73, 102, 103, 113, 114, 116, 118, 132, 163, 169, 171, 178, 181, 185, 187, 192, 198, 202, 218, 224, 240, 243, 245, 247, 268, 279, 312, 373, 374, 376, 385, 386, 412, 440, 445, 451, 491, 507, 509], "correlation_matric": [28, 50, 54, 198, 279], "correlation_matrix": [57, 59, 507], "correlation_measur": [54, 57, 59], "correspond": [2, 3, 6, 7, 15, 25, 31, 32, 35, 36, 38, 41, 42, 43, 47, 52, 58, 59, 66, 67, 68, 71, 74, 79, 80, 81, 82, 83, 88, 93, 94, 96, 104, 106, 113, 118, 129, 134, 153, 155, 163, 164, 166, 171, 172, 174, 176, 178, 179, 181, 185, 186, 188, 192, 199, 202, 204, 228, 233, 236, 240, 250, 255, 258, 261, 267, 273, 277, 284, 295, 296, 299, 305, 306, 307, 308, 309, 310, 311, 312, 313, 328, 329, 332, 334, 335, 339, 341, 345, 346, 347, 348, 362, 363, 366, 371, 377, 378, 379, 380, 383, 384, 385, 387, 391, 392, 393, 394, 395, 396, 397, 399, 413, 428, 429, 434, 435, 436, 441, 444, 445, 447, 449, 450, 451, 452, 453, 454, 455, 463, 465, 466, 468, 469, 471, 474, 475, 487], "cort": [11, 22, 59, 93, 166, 256, 257], "cortex": [3, 7, 24, 33, 34, 35, 40, 41, 58, 59, 61, 64, 70, 72, 77, 81, 82, 93, 101, 107, 118, 169, 171, 176, 180, 181, 198, 199, 206, 209, 217, 218, 224, 231, 237, 254, 260, 264, 265, 271, 281], "cortexl": 267, "cortexmid": 267, "cortexr": 267, "cortic": [9, 10, 24, 25, 29, 30, 48, 58, 59, 70, 93, 116, 118, 132, 143, 145, 148, 154, 163, 166, 180, 186, 206, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 231, 232, 237, 254, 262, 264, 267, 271, 290, 293, 294, 358, 437, 454, 455, 456, 457, 458, 459, 460, 461, 483, 487, 509, 510], "corticalparcellation_yeo2011": [237, 264], "cortl": 256, "cosin": [6, 26, 35, 64, 65, 68, 70, 71, 72, 73, 113, 127, 129, 156, 163, 202, 332, 335, 339, 373, 477, 491], "cosine00": 59, "cosine01": 59, "cosine02": 59, "cosine03": 59, "cosmo": [0, 129, 163], "cost": [33, 42, 56, 81, 111, 154, 163, 168, 172, 173, 177, 178, 179, 185, 192, 307, 308], "costli": [172, 176, 348, 399], "could": [4, 6, 26, 38, 52, 61, 68, 70, 71, 81, 87, 88, 95, 103, 105, 109, 111, 120, 121, 138, 154, 158, 159, 163, 164, 171, 174, 176, 178, 179, 181, 183, 187, 192, 320, 359, 450, 487], "couldn": 178, "counfound": 50, "count": [52, 72, 104, 129, 163, 282, 284, 315], "counter": 315, "counterpart": [132, 163, 172], "countvector": [282, 284], "coupl": [69, 165, 188], "cours": [70, 168, 181, 185, 378, 381, 384, 388], "courtnei": [118, 227], "cov": [56, 322, 324, 325, 508], "cov_estim": 240, "cov_estimator_": 240, "cov_to_corr": [143, 163], "covari": [6, 45, 49, 60, 61, 62, 64, 70, 106, 116, 118, 144, 163, 166, 167, 169, 186, 198, 240, 241, 242, 243, 244, 258, 268, 319, 321, 322, 323, 324, 325, 376, 384, 399, 432, 437, 448, 456, 457, 509, 510], "covariance_": [55, 56, 61, 165], "covariance_estim": 61, "covariances_": [56, 165, 241, 242], "cover": [59, 179, 192, 209, 217, 265, 267, 430], "coverag": [132, 163, 164, 179, 508], "coveral": [143, 163], "covertli": 221, "cox": [26, 118, 227], "cpac": 248, "cpu": [3, 45, 106, 109, 164, 174, 242, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 341, 346, 348, 363, 377, 378, 379, 380, 381, 382, 394, 396, 399, 463], "cr": [118, 219], "craddock": [59, 118, 160, 163, 165, 166, 194, 225, 227, 248, 253, 258, 501], "crash": [151, 163], "crawl": 489, "creat": [2, 3, 6, 10, 11, 12, 13, 18, 20, 21, 22, 23, 24, 26, 28, 35, 38, 39, 41, 42, 43, 44, 45, 50, 51, 52, 58, 68, 70, 72, 73, 74, 77, 81, 86, 90, 96, 101, 103, 104, 112, 114, 119, 120, 127, 132, 134, 140, 148, 160, 161, 163, 164, 165, 166, 170, 171, 172, 174, 179, 180, 181, 183, 185, 186, 188, 189, 190, 192, 282, 284, 304, 312, 313, 332, 335, 345, 346, 347, 350, 355, 358, 363, 364, 365, 366, 367, 370, 401, 410, 411, 412, 415, 434, 435, 436, 437, 438, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 464, 471, 472, 474, 481, 483, 507, 508, 510], "create_fake_bids_dataset": [128, 163], "create_large_fmri": 111, "create_mask": 111, "create_simulation_data": 47, "creation": [77, 127, 151, 163, 312, 313, 335, 475], "creativ": [202, 205, 253], "creativecommon": 253, "credit": 0, "criteo": 0, "criteria": [121, 179, 185, 232, 248, 282], "criterion": [202, 399, 464], "critic": [133, 163, 176, 178], "criugm": 0, "crivello": [118, 199, 250], "cron": 164, "crop": [191, 192, 355], "crop_img": 366, "croppabl": 355, "cross": [30, 34, 35, 38, 39, 43, 45, 47, 48, 54, 58, 100, 102, 115, 116, 118, 121, 128, 129, 134, 154, 163, 165, 172, 175, 228, 242, 271, 282, 286, 295, 305, 306, 307, 308, 309, 310, 311, 358, 368, 376, 385, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 434, 441, 444, 449, 450, 451, 456, 458, 507, 509], "cross_val_scor": [37, 101, 174], "cross_valid": [36, 101, 148, 163, 174, 305, 306, 307, 308, 309, 310, 311], "crossbar": [410, 412, 415, 417, 419, 421, 423, 425, 427], "crowd": 229, "crucial": 176, "csernanski": [118, 228], "csf": [12, 22, 59, 219, 268, 272, 335, 373, 374], "css": [131, 163, 248], "csv": [3, 6, 31, 43, 50, 58, 120, 134, 138, 163, 164, 166, 171, 200, 208, 222, 225, 228, 248, 249, 278, 286, 312, 313, 332, 339, 346, 348, 351, 378, 384, 463, 465, 477], "csv_file": 166, "csv_to_arrai": [138, 163], "ctan": 188, "cube": [192, 474], "cubic": [127, 163, 192, 244, 477], "cubicsplin": [130, 163], "cue": [79, 109, 276, 277], "cumbersom": 181, "cumsum": 66, "cumul": [155, 163, 320], "cuneal": 93, "cur_img": [51, 89], "current": [69, 73, 111, 160, 163, 164, 176, 178, 179, 185, 188, 228, 244, 287, 320, 345, 371, 378, 381, 384, 386, 388, 452, 454, 455, 458, 465], "current_collect": 112, "current_default": [70, 77], "currentmodul": 188, "curs": [26, 96, 118], "curv": [41, 156, 163, 171, 172, 174, 178, 185, 452, 453, 454, 455, 461, 485], "curv_left": [211, 212, 213, 214, 215, 216, 290], "curv_right": [211, 212, 213, 214, 215, 216, 290], "curv_sign": 10, "curvatur": [10, 24, 113, 128, 132, 163, 211, 212, 213, 214, 215, 216, 290, 294], "custom": [10, 15, 16, 24, 41, 50, 59, 69, 128, 148, 156, 158, 163, 166, 176, 189, 239, 305, 306, 307, 308, 309, 310, 311, 315, 316, 318, 332, 334, 339, 374, 413, 452, 454, 455, 473, 507], "custom_funct": [452, 454, 455], "customis": 374, "customiz": 374, "cut": [15, 52, 68, 96, 130, 131, 136, 146, 148, 149, 160, 163, 186, 202, 332, 392, 395, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 434, 437, 441, 443, 444, 447, 449, 450, 451, 458, 475, 507], "cut_coord": [2, 6, 10, 16, 17, 18, 19, 21, 26, 32, 33, 38, 42, 43, 45, 46, 51, 52, 53, 58, 64, 67, 68, 71, 72, 73, 77, 79, 81, 83, 88, 89, 90, 92, 94, 95, 96, 98, 103, 106, 110, 112, 127, 136, 163, 169, 332, 345, 346, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 434, 441, 444, 449, 450, 451, 458, 475, 507], "cut_scor": 43, "cutax": [417, 419, 421, 423, 425, 427], "cutoff": [6, 68, 70, 72, 91, 156, 163, 189, 305, 306, 307, 308, 310, 311, 312, 313, 351, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 463, 465, 476, 477], "cv": [3, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 47, 54, 55, 56, 61, 101, 102, 114, 145, 163, 171, 176, 242, 305, 306, 307, 308, 309, 310, 311], "cv_": [305, 306, 307, 308, 310, 311], "cv_alphas_": 242, "cv_params_": [3, 36, 128, 129, 163, 305, 306, 307, 308], "cv_results_": 102, "cv_score": [36, 101], "cv_scores_": [3, 31, 32, 34, 35, 36, 41, 45, 114, 171, 242, 305, 306, 307, 308, 310, 311], "cv_scores_ova": 37, "cv_scores_ovo": 37, "cwd": [3, 4, 6, 7, 16, 24, 31, 35, 44, 51, 52, 58, 64, 65, 70, 73, 74, 77, 88, 96, 104, 111, 113], "cyan": 507, "cycl": [73, 128, 129, 163, 491], "cyclic": 13, "cytoarchitecton": 220, "cytoarchitectur": 118, "czarina": [0, 129, 163], "c\u00e9line": [0, 151, 163], "d": [0, 26, 28, 44, 54, 59, 61, 78, 103, 118, 121, 165, 178, 179, 187, 199, 202, 208, 209, 219, 226, 230, 233, 250, 261, 265, 266, 269, 282, 284, 287, 320, 327, 351, 373, 374, 436, 448, 477, 494], "d03f51": 492, "d03f52": 492, "d03f53": 492, "d03f54": 492, "d0404d": 492, "d_i": [324, 325], "daan": [118, 373, 374], "daddi": [0, 125, 136, 138, 141, 145, 146, 148, 151, 155, 163], "dadi": [54, 102, 118, 208, 255], "daejeon": 0, "dai": 188, "dale": [23, 118, 206, 211, 212, 213, 214, 215, 217, 254, 262, 290], "dalenberg": [0, 127, 128, 163], "damaraju": [118, 201, 251], "damien": [61, 118, 209, 265], "dan": [0, 118, 148, 151, 163, 236, 263], "danger": [179, 181], "danial": [118, 231, 237, 260, 264], "daniel": [0, 59, 118, 121, 148, 151, 157, 160, 163, 198, 226, 227, 228, 282, 284, 373, 374], "danilo": [0, 122, 123, 125, 126, 136, 138, 163], "danish": 0, "daphn": [118, 178], "dark": [129, 161, 163, 179, 188], "dartel": [228, 286], "dartel_vers": [228, 286], "dartmouth": 0, "darya": [54, 102, 118], "data": [0, 1, 2, 8, 13, 16, 17, 19, 20, 21, 22, 25, 28, 30, 33, 36, 38, 39, 40, 41, 46, 48, 49, 53, 54, 56, 61, 62, 63, 65, 66, 67, 69, 71, 74, 75, 78, 79, 80, 81, 82, 83, 86, 92, 94, 97, 98, 102, 104, 105, 108, 109, 110, 111, 113, 114, 116, 118, 119, 121, 127, 128, 129, 130, 132, 133, 134, 138, 141, 142, 143, 144, 145, 146, 148, 149, 151, 154, 155, 156, 158, 159, 160, 163, 164, 166, 167, 169, 172, 173, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 189, 194, 197, 198, 199, 200, 201, 202, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 224, 225, 226, 227, 229, 232, 233, 234, 235, 238, 240, 241, 242, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 319, 322, 323, 332, 335, 339, 340, 341, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 434, 435, 436, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 475, 477, 481, 483, 485, 487, 491, 492, 493, 494, 495, 496, 501, 507, 509, 510], "data_2d": [400, 402, 403], "data_bound": [400, 402, 403], "data_dir": [65, 103, 104, 113, 157, 163, 190, 221, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 301], "data_figure_run01": [44, 91], "data_fil": 33, "data_gen": [60, 128, 160, 163, 178], "data_img": [391, 394], "data_mask": [68, 108], "data_nam": [288, 289], "data_softwar": 232, "data_typ": [10, 23, 24, 39, 59, 70, 105, 113, 114, 294], "data_usage_agr": [228, 286], "databas": [74, 107, 118, 204, 233, 277, 282], "datad": 13, "datadb": [218, 271], "datafam": 268, "datafram": [11, 35, 65, 66, 68, 73, 74, 77, 78, 79, 80, 81, 82, 83, 103, 104, 113, 121, 129, 134, 154, 158, 159, 161, 163, 240, 248, 249, 250, 252, 254, 255, 256, 257, 259, 260, 262, 263, 264, 265, 266, 267, 270, 279, 280, 286, 291, 312, 313, 332, 333, 335, 339, 345, 346, 347, 348, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 438, 439, 440, 442, 450, 454, 462, 463, 465, 474, 475, 477], "dataia": 0, "dataset": [1, 3, 4, 7, 8, 10, 11, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 43, 48, 50, 55, 57, 58, 59, 60, 63, 68, 70, 71, 72, 73, 75, 76, 79, 83, 84, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 103, 105, 107, 108, 111, 112, 114, 115, 116, 118, 120, 121, 128, 129, 130, 131, 132, 134, 138, 139, 143, 147, 148, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 163, 165, 166, 167, 170, 171, 172, 175, 177, 180, 184, 185, 186, 187, 188, 189, 192, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 211, 212, 213, 214, 215, 217, 219, 220, 223, 225, 228, 229, 230, 231, 232, 233, 236, 237, 305, 306, 307, 308, 311, 312, 332, 335, 339, 345, 346, 349, 350, 353, 356, 358, 362, 363, 367, 371, 373, 374, 375, 376, 385, 386, 399, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 435, 438, 439, 443, 444, 445, 446, 448, 451, 452, 453, 454, 455, 456, 458, 459, 466, 473, 474, 483, 487, 491, 492, 495, 507, 509, 510], "dataset_descript": [65, 77, 345], "dataset_fil": 46, "dataset_ho": 11, "dataset_ju": 11, "dataset_path": [103, 113, 335], "dataset_vers": 287, "dataset_yeo": 11, "datatyp": [59, 105], "date": [0, 35, 64, 70, 73, 104, 113, 157, 163, 251, 254, 272, 282, 284, 491], "davatziko": [59, 118, 373, 374], "david": [0, 59, 118, 121, 160, 163, 187, 198, 206, 217, 226, 227, 233, 254, 261, 282, 284, 373, 374, 399], "davidson": [118, 324, 325], "dawn": [118, 227], "db": [47, 198], "db_name": [59, 105], "dc": [118, 198], "dcf8a4": 11, "ddof": [240, 305, 306, 307, 308, 310, 311, 312, 313, 332, 351, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 436, 463, 465, 477], "de": [0, 148, 151, 163, 198, 340], "deactiv": [6, 13, 73, 491], "dead": 164, "deal": [38, 43, 44, 69, 81, 120, 125, 154, 163, 181, 379, 380, 381, 382, 492], "deanna": [61, 118, 198, 209, 232, 265, 267], "debat": 168, "debia": [310, 311], "debian": [126, 163], "debias": [310, 311], "deborah": [118, 217], "debug": [178, 179, 187, 242, 244], "decai": 476, "decemb": [118, 133, 136, 137, 151, 163, 202, 269, 287], "decent": 188, "decid": [93, 181], "decim": [154, 163, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 444], "decis": [103, 118, 172, 176, 305, 306, 307, 308, 310, 311, 320], "decision_funct": [305, 307, 310], "declar": [6, 179, 181, 241, 244], "decod": [1, 8, 38, 42, 43, 45, 47, 48, 52, 100, 107, 115, 118, 120, 121, 128, 129, 130, 132, 134, 135, 143, 144, 148, 151, 154, 155, 156, 157, 158, 159, 161, 163, 172, 176, 180, 185, 186, 187, 192, 224, 226, 271, 274, 281, 293, 294, 332, 335, 352, 356, 358, 363, 376, 385, 386, 412, 439, 441, 448, 450, 451, 455, 456, 458, 473, 483, 495, 508, 509, 510], "decoderifit": 3, "decoderregressor": [45, 132, 135, 151, 154, 155, 161, 163, 172, 305, 308], "decompos": [53, 165, 169, 181, 465], "decomposit": [51, 53, 94, 100, 107, 115, 116, 118, 128, 136, 143, 146, 154, 160, 163, 169, 170, 186, 233, 268, 357, 358, 363, 376, 379, 385, 451, 456, 465, 478, 492, 495, 509], "decompositionestim": [312, 313, 463], "decompress": 190, "deconvolv": [103, 118, 171], "decor": [70, 129, 157, 163, 179], "decorrel": 178, "decreas": [26, 56, 68, 97, 118, 178, 179, 217, 434, 449, 450, 451, 458], "ded3a": 42, "dedd5c670ed1fd457a722109d3c7f958": 21, "dedic": [179, 228], "deem": [127, 163], "deep": [71, 77, 240, 241, 242, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465], "deephealth": 0, "def": [13, 43, 44, 47, 50, 56, 68, 69, 103, 111, 112, 179, 188, 452, 454, 455], "def_dofmax": 320, "def_tini": 320, "default": [3, 9, 10, 11, 13, 15, 16, 24, 26, 27, 29, 31, 32, 34, 35, 36, 37, 38, 39, 41, 45, 58, 59, 63, 65, 66, 68, 75, 81, 85, 91, 96, 99, 105, 106, 107, 114, 116, 121, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 141, 142, 147, 148, 149, 151, 154, 155, 156, 157, 158, 160, 161, 163, 164, 171, 172, 176, 178, 179, 180, 188, 190, 191, 192, 194, 219, 238, 240, 241, 242, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 320, 322, 323, 324, 325, 327, 328, 329, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 355, 357, 358, 361, 362, 363, 364, 365, 366, 367, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 487, 488, 489, 491, 492, 501, 507, 509], "default_rng": [7, 66, 179], "defaultmod": 267, "defin": [3, 6, 7, 10, 22, 31, 32, 34, 35, 38, 39, 41, 45, 50, 52, 57, 61, 64, 68, 70, 72, 73, 74, 78, 79, 82, 83, 93, 101, 104, 111, 118, 127, 128, 155, 156, 157, 158, 163, 164, 166, 168, 169, 170, 171, 176, 179, 180, 181, 184, 185, 188, 191, 192, 198, 199, 220, 224, 232, 248, 250, 254, 267, 281, 305, 306, 307, 308, 310, 311, 319, 323, 327, 332, 334, 335, 339, 366, 373, 377, 378, 380, 381, 383, 384, 387, 388, 413, 434, 436, 437, 441, 443, 444, 446, 447, 449, 450, 451, 465, 466, 467, 468, 469, 471, 472, 489, 492, 499], "definit": [57, 65, 93, 96, 129, 163, 166, 174, 175, 178, 179, 180, 181, 185, 189, 208, 225, 229, 255, 345, 377, 378, 380, 383, 384, 386, 387, 438, 468, 469, 471, 472, 492], "deg_of_freedom": 112, "degre": [59, 69, 103, 112, 181, 248, 320, 323, 329, 374, 435, 452, 454, 455], "degree_binar": 248, "degree_weight": 248, "dehaen": [74, 118, 187, 204, 210, 277], "del": [0, 47, 111], "delai": [69, 111, 131, 163, 188, 332, 334, 339], "delcroix": [118, 199, 250], "deleg": [160, 163], "delettr": [0, 151, 163], "delimit": [3, 43, 44, 101, 103, 120, 190], "delin": 22, "deliv": [181, 185], "delta": [66, 180, 339, 442], "demand": 228, "demean": [158, 163, 373, 374], "dement": [118, 228], "dementia": 228, "demian": [0, 118, 125, 148, 163, 208, 255], "demo": [39, 100, 103, 104, 113, 115, 116, 120, 132, 154, 158, 163, 179, 194, 203, 240, 262, 274, 293, 294, 301, 305, 370, 387, 389, 448, 452, 456, 483, 509], "demograph": [118, 198], "demonstr": [15, 16, 26, 41, 42, 43, 59, 65, 67, 96, 108, 111, 132, 159, 163, 170, 171, 232, 399, 507], "den": 335, "denghien": [118, 210], "deni": [74, 118, 171, 204, 210, 277], "denmark": 0, "denois": [113, 374], "denoise_strategi": [59, 130, 163, 374], "denot": [3, 6, 16, 148, 163, 181, 190, 191, 192, 224, 373, 374, 380, 383, 387, 410, 432, 450, 465, 466, 467, 468], "dens": [55, 57, 165, 178, 310, 311, 393], "densiti": [45, 60, 77, 178, 184, 186, 219, 228, 248, 272, 286], "denver": 0, "deoxi": 181, "deoxyhaemoglobin": [181, 185], "depart": [0, 185, 234], "depend": [6, 15, 16, 41, 42, 65, 68, 73, 91, 97, 103, 105, 106, 109, 118, 127, 130, 138, 143, 148, 151, 161, 163, 164, 172, 176, 178, 179, 181, 185, 188, 190, 248, 256, 257, 264, 268, 279, 305, 306, 307, 308, 310, 311, 319, 323, 346, 348, 349, 356, 379, 385, 398, 399, 449, 463, 474, 475, 507], "depict": [58, 179, 191], "deploi": [127, 163], "deploy": 179, "deploy_doc": 188, "deploy_typ": 188, "deprec": [127, 128, 129, 130, 132, 134, 135, 138, 142, 143, 144, 145, 146, 148, 149, 151, 153, 154, 156, 158, 160, 161, 163, 179, 188, 203, 240, 285, 305, 306, 307, 308, 310, 311, 312, 313, 332, 336, 337, 338, 342, 343, 344, 351, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 399, 436, 463, 465, 468, 469, 473, 477], "deprecated_cal": [132, 163], "deprecated_cmap": 13, "deprecationwarn": [50, 53, 54, 55, 56, 58, 59, 61, 132, 163], "dept": 0, "depth": [3, 23, 24, 25, 118, 154, 163, 206, 211, 212, 213, 214, 215, 216, 254, 290, 446, 452, 454, 455, 459, 461, 487], "der": [118, 206, 254], "derek": [0, 151, 163], "deriv": [6, 49, 62, 65, 69, 70, 72, 77, 103, 104, 108, 113, 116, 129, 155, 157, 158, 161, 163, 170, 178, 180, 185, 186, 192, 202, 205, 217, 219, 221, 233, 235, 248, 268, 312, 313, 332, 334, 335, 336, 338, 339, 342, 344, 345, 346, 348, 359, 371, 373, 374, 377, 380, 383, 387, 400, 401, 428, 436, 449, 451, 452, 454, 455, 456, 463, 491, 509], "derivatives_fold": [65, 335], "derived_response_funct": 69, "desc": [103, 104, 113, 335, 373, 374], "descent": [178, 313], "describ": [0, 6, 19, 39, 41, 66, 68, 74, 111, 119, 120, 121, 130, 134, 163, 172, 178, 179, 181, 187, 188, 192, 204, 222, 232, 241, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 277, 278, 327, 330, 333, 335, 339, 348, 374, 399, 439], "descrip": [59, 105], "descript": [6, 24, 26, 28, 35, 42, 45, 46, 61, 64, 70, 72, 73, 77, 104, 113, 114, 119, 121, 127, 129, 130, 131, 154, 158, 163, 179, 188, 190, 191, 202, 210, 222, 231, 234, 238, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 270, 272, 273, 274, 278, 279, 280, 282, 283, 284, 285, 286, 288, 289, 291, 293, 295, 296, 297, 298, 299, 300, 301, 334, 348, 351, 355, 363, 368, 369, 374, 399, 435, 491, 501], "descriptor": [176, 333, 399], "deserv": [0, 192], "design": [6, 35, 44, 47, 63, 64, 65, 67, 70, 71, 72, 73, 75, 76, 77, 78, 81, 82, 83, 84, 104, 109, 113, 116, 118, 128, 132, 133, 154, 155, 156, 158, 161, 163, 171, 174, 178, 179, 181, 182, 183, 184, 185, 187, 199, 210, 222, 270, 277, 319, 322, 323, 324, 325, 330, 332, 333, 335, 339, 341, 345, 346, 347, 348, 349, 356, 362, 375, 438, 439, 440, 451, 456, 475, 491, 509, 510], "design_column": [65, 330], "design_matric": [64, 65, 73, 103, 180, 332], "design_matrices_": [6, 67, 68, 70, 103, 332], "design_matrix": [6, 44, 64, 65, 67, 68, 70, 77, 78, 79, 80, 81, 82, 83, 113, 333, 339, 346, 347, 348, 375, 438, 439, 440], "design_matrix1": [73, 210, 270], "design_matrix2": [73, 210, 270], "design_matrix_": 346, "desikan": [118, 217], "desir": [2, 65, 188, 192, 312, 313, 331, 332, 334, 339, 345, 346, 348, 349, 371, 428, 429, 463, 475], "despit": 187, "destin": [443, 444, 450, 451, 458], "destination_path": 475, "destri": 10, "destrieux": [10, 24, 114, 118, 126, 129, 143, 154, 163, 194, 238, 254, 262, 507], "destrieux2009": 10, "destrieux_2009": 10, "destrieux_atla": [10, 23, 24], "destrieux_surfac": [10, 23, 24, 114], "det": [151, 163], "detail": [2, 3, 7, 9, 10, 15, 16, 17, 20, 23, 24, 28, 30, 31, 33, 35, 42, 49, 51, 53, 55, 57, 61, 63, 64, 65, 70, 73, 74, 76, 83, 85, 93, 97, 103, 104, 106, 107, 112, 113, 116, 120, 121, 123, 143, 148, 151, 160, 163, 164, 165, 168, 169, 171, 172, 173, 174, 176, 177, 178, 179, 182, 188, 189, 190, 192, 194, 210, 217, 220, 240, 248, 256, 257, 260, 268, 273, 277, 295, 296, 297, 298, 299, 300, 305, 306, 307, 308, 312, 313, 325, 332, 335, 345, 346, 351, 355, 363, 368, 369, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 399, 442, 459, 462, 463, 465, 467, 491, 492, 497, 498, 507, 508], "details": 51, "detect": [16, 26, 45, 46, 69, 79, 81, 91, 103, 106, 110, 118, 165, 176, 181, 185, 192, 240, 373, 374, 462, 507], "determin": [11, 64, 81, 96, 103, 104, 106, 112, 176, 178, 179, 205, 220, 242, 311, 335, 347, 371, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 435, 443, 444, 446, 450, 451, 452, 454, 455, 458, 462, 465, 487], "determinist": [131, 134, 159, 163, 179, 185, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 462, 487], "detrend": [43, 44, 52, 54, 55, 56, 57, 58, 59, 61, 64, 91, 93, 94, 96, 102, 103, 111, 120, 125, 148, 156, 158, 163, 191, 192, 312, 313, 351, 357, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 436, 463, 465, 477, 478, 492], "detrended_data": 91, "detriment": [45, 374], "dev": [164, 179, 188, 218, 271, 511], "dev132": [35, 64, 70, 73, 104, 113, 491, 492], "develop": [50, 58, 59, 87, 91, 94, 118, 130, 146, 151, 163, 164, 165, 166, 168, 170, 178, 179, 187, 188, 194, 217, 229, 236, 242, 263, 268, 436], "development_dataset": [54, 102], "development_fmri": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 87, 91, 93, 94, 97, 102, 108], "developmental_fmri": [152, 163], "deviat": [54, 165, 305, 306, 307, 308, 310, 311], "devis": 178, "df": [103, 112], "df_den": [321, 322, 324, 325, 326], "df_model": [319, 323], "df_num": [321, 322, 324, 325], "df_resid": [160, 163], "df_residu": 323, "dhrf": [336, 338, 342, 344], "di": 118, "diag": [66, 191, 440, 448], "diagnosi": [185, 187], "diagnost": [171, 175, 200], "diagon": [56, 57, 59, 61, 88, 141, 163, 178, 191, 240, 244, 246, 247, 365, 366, 430, 440, 448, 466], "diagram": [32, 181], "diamagnet": [181, 185], "diamet": 185, "diamond": 86, "dichotom": [26, 118], "dickerson": [118, 217], "dict": [103, 121, 129, 132, 161, 163, 199, 201, 240, 241, 242, 251, 282, 283, 284, 285, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 323, 328, 332, 335, 341, 345, 346, 348, 351, 364, 372, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 436, 437, 446, 447, 454, 455, 459, 462, 463, 464, 465, 473, 475, 477, 481, 483], "dict_init": [51, 53, 313], "dict_kei": 61, "dict_learn": [51, 53, 169], "dict_learning_onlin": [51, 53], "dictionari": [7, 22, 35, 39, 49, 62, 68, 70, 104, 108, 111, 116, 118, 121, 134, 155, 161, 163, 167, 171, 172, 185, 186, 192, 199, 208, 225, 226, 240, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 293, 305, 306, 307, 308, 312, 313, 332, 345, 346, 348, 358, 359, 372, 376, 377, 380, 383, 384, 387, 399, 410, 412, 432, 433, 434, 436, 437, 446, 448, 449, 451, 456, 459, 465, 481, 482, 483, 509, 510], "dictionary_learning_resting_st": 51, "dictlearn": [51, 53, 128, 134, 136, 146, 161, 163, 169, 170], "dictlearning_components_img": 51, "did": [59, 94, 142, 158, 163, 181], "didact": [3, 141, 163, 172, 174, 179], "didn": 179, "diego": [0, 118, 198], "dieterich": [118, 217], "diff": [160, 163], "differ": [2, 7, 10, 16, 20, 21, 22, 24, 26, 30, 31, 41, 48, 49, 54, 55, 57, 58, 61, 62, 66, 68, 69, 70, 71, 72, 73, 74, 77, 81, 82, 83, 91, 93, 96, 101, 102, 103, 105, 106, 107, 111, 116, 118, 120, 127, 129, 130, 134, 149, 155, 157, 163, 164, 166, 167, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 189, 190, 198, 202, 208, 210, 218, 231, 240, 242, 255, 264, 268, 271, 295, 296, 297, 298, 299, 300, 305, 310, 311, 324, 325, 328, 332, 334, 335, 339, 341, 346, 352, 353, 356, 358, 362, 363, 364, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 398, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 432, 434, 435, 437, 441, 443, 444, 448, 449, 450, 451, 456, 463, 465, 474, 475, 487, 491, 492, 509, 510], "differenti": [41, 68, 72], "difficult": [41, 88, 165, 172, 177, 192], "difficulti": 36, "diffus": [118, 171, 185], "difumo": [22, 50, 155, 163, 194, 255, 501], "difumo_atlas": [50, 492], "digicosm": 0, "digit": [118, 199], "dil_bin_p_values_and_vt": 96, "dil_bin_p_values_and_vt_img": 96, "dilat": [91, 96, 185, 191, 273, 296, 299, 391, 392, 393, 394, 395, 396], "dillon": [148, 163], "dim": [3, 22, 24, 31, 50, 59, 105, 139, 141, 145, 163, 171, 320, 322, 324, 325, 434, 449, 450, 451, 458], "dim_info": [59, 105], "dimartino": [118, 227], "dimenens": 261, "dimens": [2, 16, 22, 31, 35, 36, 41, 43, 50, 52, 68, 89, 96, 120, 130, 156, 161, 163, 175, 181, 185, 191, 192, 198, 228, 246, 247, 255, 261, 279, 312, 313, 315, 317, 320, 322, 324, 325, 332, 348, 351, 352, 358, 359, 362, 363, 368, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 432, 435, 448, 449, 463, 465, 477], "dimension": [6, 26, 28, 52, 72, 96, 118, 132, 138, 155, 160, 163, 178, 187, 200, 208, 246, 247, 255, 279, 312, 313, 315, 320, 352, 398, 462, 463, 464], "dimensionerror": [161, 163], "dimitri": [0, 118, 127, 136, 148, 163, 169, 178, 179, 204, 241, 244, 277, 465], "dimitripapadopoulo": 179, "diogo": [0, 160, 163], "dir": [70, 164, 335, 371], "dirac": [332, 334, 339], "direct": [16, 43, 54, 96, 101, 145, 154, 161, 163, 166, 167, 179, 188, 192, 208, 210, 227, 234, 255, 305, 306, 368, 370, 371, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 414, 416, 418, 419, 420, 422, 423, 424, 425, 426, 429, 430, 434, 437, 441, 443, 444, 447, 449, 450, 451, 466, 475, 507, 510], "directli": [3, 6, 34, 35, 41, 50, 51, 54, 65, 70, 73, 88, 91, 98, 111, 114, 132, 140, 144, 146, 148, 163, 168, 171, 174, 179, 181, 190, 192, 282, 335, 399, 413, 449], "directori": [3, 6, 65, 73, 96, 104, 113, 116, 168, 179, 190, 241, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 301, 304, 305, 306, 307, 308, 310, 311, 312, 313, 332, 335, 345, 346, 352, 371, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 445, 463, 464, 465], "disabl": [121, 129, 130, 149, 151, 155, 163, 178, 462], "disadvantag": 192, "disagr": 435, "discard": [6, 121, 181, 247, 282, 304, 335, 371, 393, 396, 477, 487], "discard_diagon": [240, 246], "discount": 68, "discourag": 179, "discov": [2, 179, 186], "discoveri": [6, 78, 79, 81, 83, 118, 181, 185, 187, 227, 327], "discrep": [68, 178], "discret": [68, 72, 127, 155, 156, 163, 202, 332, 341, 361, 373, 377, 378, 379, 383, 384, 385, 386, 465, 477], "discrete_atlas_img": 12, "discrete_vers": 12, "discrimin": [3, 31, 33, 54, 96, 102, 118, 120, 171, 186, 187], "discriminant_analysi": 101, "discuss": [52, 59, 148, 163, 168, 171, 174, 176, 181, 184, 188, 191, 374, 399, 508], "diseas": 228, "disk": [2, 3, 4, 6, 104, 107, 111, 112, 113, 120, 121, 127, 132, 134, 148, 154, 155, 160, 163, 171, 179, 190, 191, 192, 221, 274, 282, 284, 287, 305, 306, 332, 346, 390, 452, 454, 455, 473, 475, 479, 480, 484], "disord": [118, 185, 187, 217], "dispers": [6, 68, 69, 180, 322, 324, 325, 332, 334, 336, 339, 342], "displac": [59, 202, 268, 373], "displai": [2, 3, 4, 6, 11, 12, 14, 15, 17, 18, 19, 21, 22, 26, 27, 28, 38, 42, 43, 45, 50, 51, 52, 53, 54, 58, 64, 65, 67, 68, 69, 70, 71, 72, 73, 77, 83, 86, 89, 91, 93, 94, 95, 96, 98, 102, 103, 106, 109, 110, 127, 130, 131, 132, 134, 140, 145, 146, 148, 149, 151, 155, 156, 158, 160, 161, 163, 164, 166, 169, 170, 176, 181, 186, 191, 332, 339, 346, 378, 381, 384, 386, 388, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 465, 473, 475, 488, 492, 500, 510], "display_ax": 43, "display_mod": [2, 6, 10, 14, 15, 16, 17, 19, 26, 32, 33, 38, 42, 43, 45, 46, 51, 52, 56, 61, 65, 67, 68, 71, 72, 77, 78, 81, 89, 90, 94, 98, 104, 106, 109, 110, 112, 120, 141, 158, 163, 332, 345, 346, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 434, 437, 441, 443, 444, 447, 449, 450, 451, 475, 507], "displayed_map": [57, 378, 381, 384, 388, 465], "displayed_spher": [61, 386], "disregard": 311, "dist": 188, "distanc": [35, 64, 73, 104, 310, 430, 435, 474, 475, 487, 491], "distinct": [82, 103, 118, 178, 198, 254], "distinguish": [13, 54, 96, 101, 102, 161, 163, 172, 176, 181, 186, 190], "distort": [160, 163, 373], "distribut": [3, 6, 15, 16, 23, 33, 34, 40, 51, 52, 58, 81, 96, 101, 118, 155, 159, 163, 171, 176, 178, 181, 185, 206, 211, 212, 213, 214, 215, 218, 226, 262, 271, 320, 348, 399, 435, 445], "dive": 187, "diverg": [13, 15, 26, 440], "divers": [134, 163], "divid": [58, 78, 79, 81, 114, 141, 163, 172, 181, 185, 246, 463], "divis": [0, 93, 232], "dl": [118, 219], "dm_titl": 103, "dmn": [21, 54, 64, 491], "dmn_contrast": 64, "dmn_coord": [61, 192, 507], "dmn_network": 89, "dmn_node": 21, "dmn_z_map": 64, "dni": 224, "do": [0, 3, 6, 10, 23, 24, 25, 27, 32, 33, 35, 36, 39, 41, 43, 45, 52, 53, 54, 60, 64, 65, 67, 68, 69, 71, 77, 79, 81, 82, 96, 101, 103, 104, 105, 111, 113, 114, 120, 131, 133, 134, 135, 145, 149, 154, 158, 163, 164, 165, 169, 170, 171, 172, 174, 176, 178, 187, 188, 190, 191, 192, 194, 199, 238, 240, 242, 250, 273, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 341, 346, 348, 351, 363, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 394, 396, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 436, 463, 465, 477, 487, 501, 507], "do_cca": 312, "doc": [3, 4, 15, 17, 19, 21, 31, 36, 43, 46, 51, 53, 61, 70, 94, 114, 127, 128, 129, 130, 131, 132, 133, 134, 136, 141, 143, 144, 148, 151, 153, 154, 157, 158, 159, 160, 161, 163, 179, 217, 220, 374], "dock": [0, 129, 130, 132, 141, 145, 147, 148, 149, 151, 152, 160, 163], "docstr": [127, 128, 132, 149, 154, 157, 160, 163, 179, 188, 322, 324, 325], "doctest": [129, 163], "doctre": 179, "document": [0, 2, 3, 4, 13, 20, 28, 46, 47, 52, 53, 55, 56, 59, 61, 101, 103, 107, 112, 119, 120, 123, 125, 128, 130, 131, 136, 138, 140, 141, 142, 143, 148, 151, 153, 158, 159, 163, 166, 168, 169, 170, 171, 172, 173, 174, 176, 177, 183, 186, 187, 190, 192, 198, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 507, 508], "doe": [3, 6, 26, 31, 41, 52, 68, 69, 77, 106, 120, 121, 131, 138, 147, 151, 160, 163, 164, 171, 172, 176, 178, 179, 180, 181, 187, 192, 250, 271, 321, 323, 326, 335, 345, 357, 369, 371, 374, 403, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 450, 454, 462, 474, 478, 507], "doesn": [107, 179], "dof": [181, 320, 329], "dofmax": 320, "dohmatob": [0, 52, 118, 122, 125, 136, 138, 141, 163, 168, 169, 177, 465], "doi": [0, 3, 23, 26, 33, 34, 39, 40, 43, 44, 47, 51, 52, 54, 59, 61, 78, 101, 102, 106, 118, 121, 165, 166, 168, 170, 172, 173, 176, 177, 185, 187, 197, 198, 199, 201, 202, 204, 205, 206, 208, 209, 211, 212, 213, 214, 215, 217, 218, 219, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 240, 248, 250, 251, 252, 253, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 271, 277, 281, 282, 284, 287, 290, 307, 308, 312, 313, 327, 348, 351, 373, 374, 399, 436, 464, 470, 477, 478], "domain": [41, 187, 313], "domin": [171, 291], "don": [10, 25, 26, 35, 68, 83, 111, 118, 121, 130, 163, 179, 187, 188, 282, 284, 446, 487, 507], "donald": 118, "donder": 0, "done": [2, 3, 4, 6, 7, 10, 11, 18, 20, 21, 22, 28, 33, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 50, 51, 52, 53, 54, 56, 60, 61, 65, 68, 72, 73, 74, 77, 79, 81, 82, 83, 96, 101, 102, 104, 105, 106, 107, 109, 111, 120, 121, 134, 135, 158, 160, 161, 163, 164, 165, 166, 168, 171, 172, 174, 176, 178, 181, 188, 191, 241, 242, 305, 306, 307, 308, 310, 311, 312, 313, 332, 346, 351, 352, 360, 370, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 463, 464, 465, 477], "dor": 54, "dorsal": [24, 114, 452, 454, 455, 492], "dorsalattent": 267, "dosenbach": [118, 139, 163, 232, 248, 265, 267], "dot": [44, 47, 58, 103, 107, 178, 322, 323, 324, 325, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427], "doubl": [179, 180, 256, 257], "dougla": [118, 324, 325], "down": [2, 71, 107, 168, 178, 179, 307], "downlo": 22, "download": [4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 118, 119, 138, 139, 141, 142, 144, 148, 151, 154, 155, 157, 163, 164, 165, 166, 168, 171, 179, 187, 194, 198, 207, 208, 210, 219, 221, 224, 225, 227, 228, 232, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 301, 304, 510], "download_new": [282, 284], "downloaded_fil": [221, 287], "downsampl": [113, 169, 191, 207, 268, 436], "downsid": [59, 68], "downsiz": 168, "downstream": [105, 129, 161, 163], "dparsf": 248, "dpi": [401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427], "dr": [164, 228], "draft": 179, "drag": 188, "draw": [15, 16, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 439, 487], "draw_2d": [400, 402, 403], "draw_cross": [26, 53, 79, 98, 169, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 441, 444, 449, 450, 451, 458], "draw_left_right": [400, 402, 403], "draw_posit": [400, 402, 403], "draw_scale_bar": [400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427], "drawback": 68, "drawn": [25, 68, 96, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 441, 444, 449, 450, 451, 458, 475, 487], "drf": 69, "drift": [6, 35, 64, 70, 71, 72, 73, 103, 113, 202, 332, 339, 373, 440, 477, 491], "drift_model": [6, 26, 35, 64, 65, 66, 68, 70, 71, 72, 73, 113, 180, 332, 335, 339, 491], "drift_ord": [65, 66, 68, 180, 332, 335, 339], "drive": 58, "driven": [68, 170, 179, 187, 202, 252, 339], "drop": [68, 71, 103, 132, 143, 144, 145, 149, 161, 163, 179, 187, 188, 377, 380, 383, 387], "ds000005": 223, "ds000030": [65, 269], "ds000030_r1": [65, 287], "ds000228": [207, 268], "dseg": [179, 250, 252, 254, 256, 257, 259, 260, 262, 263, 264, 377, 380, 383, 387], "dsm_iv_tr": 248, "dsp": 210, "dsp_minus_ssp": [73, 491], "dsp_minus_ssp_for_dst": [73, 491], "dsst": 0, "dst": 210, "dst_minus_sst": [73, 491], "dst_minus_sst_for_dsp": [73, 491], "dstdsp": 210, "dstdsp_minus_sstssp": [73, 491], "dstssp": 210, "dt": 69, "dtseri": [373, 374], "dtype": [3, 21, 24, 35, 38, 43, 44, 46, 47, 51, 52, 53, 55, 56, 57, 59, 61, 69, 72, 79, 81, 91, 93, 94, 104, 107, 111, 135, 142, 143, 144, 148, 149, 163, 190, 333, 336, 337, 338, 342, 343, 344, 350, 352, 360, 361, 364, 366, 377, 378, 379, 383, 384, 385, 386, 390, 462, 464, 465, 471, 481, 483, 492], "dtypelik": [481, 483], "dtyulman": [148, 163], "dua": 228, "dual": [36, 54, 56, 101, 102, 118, 178, 241, 248, 305, 307], "dual_regress": 248, "dualiti": 244, "duan": [118, 227], "dubi": [61, 118, 209, 265], "dubnica": 0, "duchi": [118, 178], "due": [15, 36, 38, 42, 43, 44, 68, 72, 81, 96, 111, 127, 131, 134, 151, 157, 158, 159, 160, 163, 168, 172, 174, 179, 181, 248, 310, 311, 507], "duff": [118, 198], "dugr\u00e9": [0, 129, 163], "duke": 0, "dummi": [3, 102, 114, 134, 135, 156, 163, 171, 172, 174, 179, 305, 306, 307, 308, 339, 464], "dummy_classifi": [3, 34, 305, 307], "dummy_decod": 3, "dummy_output_": [305, 306, 307, 308], "dummy_regressor": [172, 306, 308], "dummyclassifi": [101, 102, 156, 163, 174, 305, 306, 307, 308], "dummyregressor": [305, 306, 307, 308], "duplic": [151, 163, 203], "dupr": [0, 145, 149, 151, 152, 153, 163], "duran": [0, 127, 163], "durat": [6, 35, 66, 68, 69, 74, 129, 163, 180, 181, 190, 334, 339, 442], "dure": [3, 6, 58, 59, 67, 96, 98, 103, 104, 118, 120, 130, 148, 155, 163, 171, 172, 178, 179, 181, 185, 187, 188, 192, 221, 222, 233, 240, 241, 242, 244, 248, 261, 278, 305, 306, 307, 308, 332, 335, 346, 348, 377, 380, 383, 387, 391, 392, 393, 394, 395, 396, 446, 462], "dutch": 0, "dvar": [59, 373], "dvipng": 188, "dviwar": 188, "dwi": 65, "dwindl": 178, "dx_group": 248, "dylan": [39, 118, 176, 227], "dynam": [31, 118, 171, 374], "e": [3, 6, 16, 23, 25, 31, 42, 43, 47, 50, 51, 59, 61, 68, 78, 90, 96, 103, 106, 107, 109, 111, 118, 120, 121, 128, 136, 154, 156, 157, 160, 163, 165, 166, 169, 171, 174, 176, 177, 178, 179, 180, 181, 184, 185, 187, 188, 191, 192, 198, 202, 205, 206, 208, 209, 217, 226, 230, 232, 233, 241, 242, 244, 253, 254, 261, 265, 266, 267, 269, 282, 284, 287, 305, 306, 307, 308, 310, 311, 314, 322, 324, 325, 332, 339, 346, 348, 349, 350, 351, 352, 353, 355, 373, 374, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 435, 437, 446, 449, 452, 453, 454, 455, 457, 458, 459, 461, 468, 469, 471, 477, 487, 507], "e15ebc98c2f13c57d7605faf05fe3de3": 22, "e29482": [118, 187], "e69422": 11, "e_i": [324, 325], "each": [3, 6, 7, 11, 15, 16, 21, 22, 23, 24, 25, 31, 36, 38, 39, 41, 42, 43, 50, 51, 52, 53, 54, 58, 59, 61, 64, 65, 66, 70, 71, 72, 73, 80, 82, 88, 90, 96, 101, 102, 103, 104, 106, 109, 111, 113, 114, 121, 134, 143, 148, 149, 151, 154, 156, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 183, 185, 187, 188, 190, 191, 192, 198, 199, 202, 204, 207, 208, 217, 220, 223, 226, 231, 232, 234, 240, 241, 242, 244, 248, 251, 262, 264, 267, 268, 279, 282, 284, 291, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 322, 324, 325, 332, 334, 335, 339, 346, 348, 351, 357, 363, 368, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 394, 396, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 434, 435, 437, 441, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 462, 463, 464, 465, 466, 467, 468, 469, 471, 475, 477, 478, 479, 486, 487, 491, 507], "each_index_of_map3": [53, 169], "earli": [118, 177, 282, 284, 462], "earlier": 111, "early_stop": [178, 242], "earlystopprob": 178, "eas": 179, "easi": [17, 64, 70, 77, 96, 111, 120, 121, 169, 170, 172, 175, 179, 180, 185, 187, 192, 373], "easier": [6, 24, 41, 68, 111, 137, 142, 157, 163, 170, 171, 178, 179, 444], "easiest": [166, 171, 172], "easili": [2, 3, 10, 16, 24, 32, 33, 41, 42, 52, 61, 65, 96, 120, 121, 132, 134, 158, 161, 163, 171, 172, 174, 176, 177, 178, 179, 180, 185, 188, 256, 257, 277, 346, 348], "ec": 52, "eccentr": [464, 470], "echo": [185, 335], "econom": [118, 399], "econometr": [118, 319, 323, 324, 325], "econometricanalysi": [118, 319, 323], "ecosystem": 186, "ed": [118, 166, 324, 325], "edg": [50, 55, 57, 61, 96, 135, 151, 163, 165, 166, 185, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 437, 448, 457, 510], "edge_cmap": [149, 151, 163, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 437, 457], "edge_kwarg": [404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 437], "edge_threshold": [23, 50, 53, 56, 57, 61, 149, 151, 163, 169, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 437, 457, 507], "edge_vmax": [56, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 437], "edge_vmin": [56, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 437], "edgecolor": [34, 43, 129, 163, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 437, 441, 443, 444, 447, 449, 450, 451], "edinburgh": 118, "edit": [118, 156, 163, 164, 179, 188, 319, 323], "editor": [118, 165, 219, 240], "edmond": [0, 156, 163], "edu": [118, 228, 232, 237, 264, 279, 286, 319, 323], "educ": [118, 228, 234, 279, 319, 323, 458], "edward": [118, 187], "ee9e0d5a40146477e9197f0d13da9b32": 40, "eeg": 185, "eff_map": 6, "effect": [26, 35, 52, 56, 64, 68, 70, 71, 72, 77, 81, 82, 91, 97, 98, 103, 106, 113, 118, 129, 130, 147, 163, 164, 170, 172, 176, 178, 180, 181, 188, 192, 217, 240, 256, 257, 283, 305, 306, 307, 308, 320, 321, 322, 324, 325, 326, 328, 329, 332, 335, 346, 348, 374, 399, 434, 449, 450, 451, 456, 458, 473, 491], "effect_s": [6, 73, 82, 103, 185, 320, 332, 346], "effect_statmap": [65, 77, 345], "effect_vari": [73, 82, 320, 332, 346], "effects_map_path": [346, 348], "effects_of_interest": [73, 491], "effficieni": 66, "efficaci": [59, 118, 374], "effici": [31, 68, 111, 118, 129, 163, 170, 172, 178, 179, 241, 244, 282, 307, 308], "effort": [179, 188], "eg": [88, 91, 145, 148, 154, 163, 165, 166, 171, 191, 192, 431, 432], "eger": [47, 52, 118, 177], "eichel": [118, 201, 251], "eickenberg": [0, 118, 122, 163, 177], "eickhoff": [59, 118, 231, 233, 260, 261, 373, 374], "eigen": [28, 198, 279], "eigen_regress": [28, 279], "eigenvector": 248, "eigenvector_binar": 248, "eigenvector_weight": 248, "eileen": [118, 217], "either": [2, 4, 10, 37, 38, 42, 43, 44, 45, 50, 54, 55, 56, 57, 58, 59, 61, 64, 71, 91, 93, 94, 96, 101, 102, 103, 106, 107, 108, 109, 110, 120, 134, 148, 155, 157, 161, 163, 166, 168, 179, 180, 184, 185, 190, 192, 202, 261, 264, 271, 305, 306, 307, 308, 310, 311, 322, 324, 325, 349, 350, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 434, 435, 436, 437, 440, 441, 442, 443, 444, 446, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 461, 465, 475, 485, 486, 487, 507, 508], "ej": [118, 198], "ekman": [0, 122, 163], "elabor": [44, 136, 163, 507], "elaps": [33, 35, 37, 38, 39, 42, 45, 46, 47, 51, 53, 56, 60, 61, 101, 106, 109], "elapsed_tim": 47, "elast": 47, "elasticnetcv": 47, "electr": 185, "electroencephalographi": 185, "electrophysiolog": 118, "element": [21, 26, 51, 52, 53, 105, 141, 160, 163, 170, 176, 185, 240, 246, 247, 250, 305, 306, 308, 309, 310, 311, 351, 368, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 395, 413, 446, 465, 471, 477, 487], "elementari": 120, "elena": [26, 118, 201, 251], "elev": [23, 413, 452, 454, 455], "elicit": [66, 74, 81], "elif": [10, 114], "elimin": [47, 101, 174, 177, 449, 450], "elizabeth": [0, 118, 145, 149, 151, 152, 153, 163, 324, 325], "ell": [319, 323], "elli": [0, 160, 163], "elliott": [39, 59, 118, 373, 374], "els": [26, 47, 50, 69, 74, 96, 97, 103, 114, 280, 305, 306, 307, 308, 310, 453], "elvi": [0, 52, 118, 122, 125, 136, 138, 141, 163, 168, 169, 177, 465], "emb": 507, "embed": [54, 102, 473], "emerg": 179, "emerton": 0, "emiliano": [118, 202], "emit": 456, "emma": [118, 198], "emot": 185, "emp_cov": 244, "emphas": [205, 253], "empir": [52, 168, 175, 176, 177, 178, 241, 244, 374, 510], "emploi": [65, 184, 185, 218, 474, 475], "empti": [15, 77, 106, 113, 121, 129, 131, 132, 151, 159, 163, 179, 188, 199, 256, 257, 271, 305, 306, 307, 308, 314, 371, 377, 378, 383, 384, 433, 448, 465, 468, 469, 481, 482, 492, 503], "empty_filt": 282, "en": [0, 59, 164, 181, 199, 224, 250, 374], "enabl": [15, 17, 26, 81, 108, 129, 130, 154, 158, 163, 171, 174, 186, 192, 240, 241, 242, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 404, 405, 406, 407, 408, 409, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 462, 463, 464, 465, 508], "enable_metadata_rout": [240, 241, 242, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465], "encapsul": [68, 240, 241, 242, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465], "enclos": 179, "encod": [30, 41, 44, 48, 72, 77, 86, 116, 118, 172, 173, 192, 281, 307, 308, 353, 370, 376, 379, 385, 427, 451, 456, 492, 509], "encompass": [247, 312, 313], "encount": [61, 79, 81, 114, 452, 454, 455], "encourag": [158, 163, 179], "end": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 130, 145, 155, 163, 176, 178, 179, 191, 202, 292, 345, 476, 477], "endian": [59, 93, 105, 144, 163, 360, 366], "endswith": 13, "energi": [178, 202], "enet_cv": 47, "enet_tol": [55, 56, 61], "enforc": [52, 91, 135, 160, 163, 165, 178, 179, 310, 311, 332, 481, 483], "engag": 508, "engemann": [118, 171], "engin": [0, 10, 129, 131, 158, 163, 187, 192, 381, 388, 413, 446, 452, 454, 455, 507, 508], "enh": 179, "enhanc": [24, 26, 68, 69, 73, 118, 185, 188, 194, 291, 301, 320, 348, 399], "enough": [15, 61, 171, 178, 187, 192, 366], "ensembl": [3, 33, 42, 45, 118, 171, 172, 175, 177, 185, 186, 219, 307, 308, 510], "ensur": [59, 61, 103, 114, 131, 133, 134, 148, 155, 163, 164, 176, 178, 179, 181, 188, 287, 320, 346, 348, 377, 383, 400, 402, 403, 468], "ensure_finit": [143, 163, 351, 390, 393, 477], "ensure_ndim": 352, "enter": [35, 70, 113, 181, 491], "entir": [111, 164, 171, 176, 192, 377, 383, 468], "entiti": [129, 161, 163, 372], "entri": [86, 127, 129, 163, 179, 188, 305, 306, 307, 308, 322, 324, 325, 355, 377, 380, 383, 387, 413, 453, 487], "enumer": [3, 23, 24, 36, 43, 50, 51, 54, 60, 67, 68, 69, 70, 73, 74, 81, 96, 103, 104, 106, 107, 109, 113, 114, 383], "env": 188, "environ": [3, 38, 52, 55, 56, 61, 65, 77, 79, 111, 118, 130, 148, 149, 151, 158, 163, 164, 171, 187, 188, 190, 202, 292, 458, 508], "ep": [42, 55, 56, 61, 310, 311], "epi": [3, 6, 12, 16, 27, 32, 33, 52, 94, 96, 97, 108, 185, 187, 191, 192, 234, 305, 306, 307, 308, 312, 313, 379, 385, 393, 441, 444, 451, 463, 492, 507], "epi_filenam": [91, 192], "epi_img": [67, 68, 70, 91, 192, 222, 278, 393, 396, 441], "epoch": [68, 313], "eproc_bold": 65, "equal": [13, 79, 101, 151, 158, 160, 163, 174, 183, 202, 253, 258, 264, 305, 306, 307, 308, 310, 311, 312, 313, 320, 332, 346, 349, 363, 366, 370, 377, 379, 380, 383, 385, 387, 391, 393, 394, 396, 458, 459, 461, 463, 475], "equip": 234, "equival": [15, 83, 109, 127, 135, 163, 176, 178, 181, 188, 205, 277, 305, 306, 307, 308, 312, 313, 362, 378, 379, 384, 385, 391, 392, 393, 394, 395, 396, 456, 463, 465], "erhardt": [26, 118, 201, 251], "eric": [0, 23, 61, 118, 131, 145, 148, 149, 151, 163, 206, 209, 254, 262, 265], "erik": [26, 118, 201, 251], "erin": [118, 197, 248], "eros": [91, 185, 273, 296, 299, 391, 392, 393, 394, 395, 396], "erramuzp": [148, 163], "errant": [131, 163], "erron": [154, 163, 260], "error": [3, 6, 45, 46, 68, 78, 81, 83, 86, 96, 107, 127, 129, 132, 133, 138, 145, 148, 151, 160, 161, 163, 164, 166, 171, 172, 176, 179, 181, 185, 188, 239, 240, 241, 242, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 322, 324, 332, 335, 339, 345, 346, 348, 349, 351, 352, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465, 508], "errorts_statmap": [65, 77, 345], "especi": [96, 149, 158, 163, 165, 171, 190, 459, 510], "esposito": [103, 118], "essen": [118, 121, 198, 226, 282, 284, 374], "essenc": 180, "essenti": [16, 41, 69, 82, 185], "establish": [96, 177, 179, 232], "esteban": [0, 148, 163], "estim": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 66, 67, 69, 71, 72, 73, 74, 77, 80, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 118, 120, 127, 129, 130, 134, 135, 146, 154, 155, 160, 161, 163, 165, 170, 173, 175, 176, 181, 183, 184, 185, 187, 188, 198, 202, 228, 231, 237, 240, 241, 242, 244, 260, 264, 279, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 320, 322, 323, 324, 325, 328, 329, 332, 345, 346, 348, 352, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 399, 448, 456, 462, 463, 464, 465, 489, 499, 509, 510], "estimator_": [305, 306, 307, 308], "estimator_nam": 41, "est\u00e8v": [0, 122, 123, 125, 126, 136, 138, 141, 163], "eswar": [118, 201, 251], "et": [3, 23, 26, 30, 33, 39, 41, 47, 48, 51, 52, 54, 59, 61, 68, 74, 78, 101, 102, 103, 106, 116, 121, 143, 148, 163, 165, 168, 171, 172, 173, 176, 177, 178, 187, 192, 197, 198, 199, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 240, 241, 244, 248, 250, 251, 252, 253, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 271, 277, 279, 280, 281, 282, 284, 290, 305, 308, 311, 312, 313, 324, 325, 327, 351, 353, 358, 370, 373, 374, 376, 379, 385, 399, 427, 435, 451, 456, 464, 465, 470, 477, 492, 509], "etard": [118, 199, 250], "etc": [7, 41, 45, 46, 82, 91, 94, 96, 105, 111, 121, 164, 177, 185, 190, 279, 305, 306, 307, 308, 310, 311, 324, 385, 492], "ethic": 198, "etzel": [118, 176], "eugen": [118, 198], "eux2009": 10, "ev": 164, "eva": [118, 227], "eval": [332, 346, 348, 438], "evalu": [59, 118, 174, 178, 185, 205, 234, 236, 263, 305, 306, 307, 308, 319, 323, 374, 435, 474, 475], "evan": [0, 118, 156, 163, 199, 202, 219, 231, 236, 252, 260, 263], "evanston": 0, "evelina": [118, 206, 254], "evelyn": [47, 52, 118, 177], "even": [33, 45, 52, 53, 61, 67, 81, 103, 111, 121, 129, 132, 133, 134, 151, 156, 163, 164, 178, 179, 187, 282, 284, 305, 306, 308, 310, 311, 476], "evenli": [178, 351, 477], "event": [6, 26, 41, 63, 65, 66, 67, 68, 69, 70, 71, 72, 75, 103, 104, 113, 116, 118, 129, 132, 133, 154, 155, 163, 171, 181, 182, 222, 234, 278, 288, 332, 333, 334, 335, 339, 439, 442, 456, 508, 509, 510], "events1": [72, 235, 289], "events2": [72, 235, 289], "events_": 35, "events_datafram": 72, "events_df": 103, "events_fil": [67, 68], "eventu": [58, 507], "everi": [114, 121, 164, 165, 166, 170, 171, 172, 176, 178, 179, 181, 188, 192, 242, 256, 257, 282, 378, 384, 413, 434, 441, 444, 449, 450, 451, 453, 468, 469, 475, 508], "everyon": [179, 198], "everyth": [103, 188], "everywher": 177, "evid": [118, 202], "ew": [118, 201, 251], "ex": [158, 163, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 441, 443, 444, 446, 450, 451, 452, 454, 455], "exact": [45, 176, 179, 181, 219, 272, 273, 295, 296, 297, 298, 299, 300, 507], "exactli": [6, 86, 96, 101, 111, 130, 163, 178, 179, 305, 306, 307, 308, 309, 310, 311, 371, 458, 487], "examin": [3, 118, 185, 269, 287], "exampl": [1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 71, 72, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 119, 120, 128, 129, 130, 131, 134, 136, 141, 142, 143, 144, 145, 148, 149, 151, 153, 154, 157, 158, 159, 164, 169, 172, 173, 174, 175, 178, 179, 180, 181, 183, 184, 188, 190, 199, 235, 248, 310, 322, 324, 325, 341, 350, 371, 380, 381, 382, 388, 401, 462, 475, 494, 495, 497, 503, 508, 509, 510], "exce": [61, 77], "exceed": [59, 145, 163], "excel": 36, "except": [5, 24, 36, 41, 42, 51, 52, 74, 102, 103, 107, 155, 158, 163, 177, 179, 199, 311, 361, 399, 495], "excerpt": 192, "excess": [202, 373, 380, 387], "exchang": [106, 108, 197, 248], "exclud": [68, 121, 466], "exclude_subject": [161, 163, 335], "exclude_this_vertex": 24, "exclude_zero": [132, 163, 393, 396], "excluded_label": 24, "exclus": [134, 163, 304, 310, 311, 377, 380, 383, 387], "exclusion_filt": [65, 304], "exclusion_pattern": 65, "exec": 188, "execut": [8, 22, 29, 48, 62, 75, 84, 89, 99, 115, 116, 117, 179, 192, 366, 452, 454, 455, 507, 508, 509], "executor": 46, "exemplarili": 58, "exercis": [4, 187], "exhaust": [179, 187], "exhibit": [51, 181, 192], "exist": [4, 21, 51, 106, 169, 176, 179, 188, 191, 232, 240, 241, 242, 282, 284, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 360, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 448, 462, 463, 464, 465, 507], "exist_ok": [3, 4, 6, 7, 16, 24, 31, 35, 44, 51, 52, 58, 64, 65, 70, 73, 74, 77, 88, 96, 104, 111, 113], "existenti": 7, "exp": 47, "exp_condit": [69, 334], "expand": [133, 140, 163, 185, 190, 361, 462, 464], "expans": 189, "expect": [6, 64, 66, 68, 80, 81, 83, 97, 104, 121, 134, 136, 151, 160, 163, 169, 176, 179, 181, 185, 188, 191, 192, 311, 332, 334, 339, 346, 348, 352, 371], "expens": 46, "experi": [3, 6, 31, 35, 36, 44, 68, 71, 96, 118, 119, 175, 180, 181, 185, 210, 234], "experiment": [3, 66, 67, 68, 70, 73, 82, 96, 127, 129, 132, 154, 155, 158, 163, 171, 178, 181, 191, 208, 210, 235, 255, 332, 335, 339, 452, 454, 455], "experimental_paradigm": [129, 163], "expert": [179, 187], "explain": [6, 7, 13, 43, 45, 51, 59, 68, 71, 133, 154, 163, 168, 171, 179, 181, 187, 192, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490], "explan": [36, 86, 106, 171, 172, 173, 174, 179, 190, 192, 200, 249], "explanatori": [348, 399], "explicit": [51, 74, 151, 157, 163, 179, 185, 187, 284, 349, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 465, 477], "explicitli": [68, 105, 112, 130, 132, 134, 135, 148, 160, 163, 171, 179, 282, 345, 374, 463], "exploit": [65, 170, 178], "explor": [111, 118, 170, 174, 178, 180, 186, 187, 234, 242, 269, 282, 305, 306, 307, 308, 435], "exploratori": 68, "export": [74, 179, 188, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 455], "expos": [47, 52, 121, 129, 130, 140, 144, 145, 163, 179, 190, 282, 283, 284, 285], "express": [72, 73, 121, 127, 136, 163, 185, 190, 282, 305, 306, 307, 308, 310, 311, 330, 332, 335, 361, 449], "ext_var": [45, 46, 77, 79, 81, 109, 228, 286], "extend": [23, 96, 129, 132, 134, 154, 159, 163, 181, 192, 232, 366], "extens": [16, 143, 157, 161, 163, 197, 372, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 455], "extent": [59, 97, 105, 171, 185, 412, 415], "extern": [46, 172, 175, 228], "extra": [80, 121, 161, 163, 173, 188, 189, 248, 345, 383, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 440, 441, 442, 443, 444, 448, 449, 450, 451, 453, 483, 507], "extra_info_subject": 80, "extract": [4, 6, 10, 11, 20, 21, 22, 23, 28, 30, 32, 33, 34, 40, 41, 42, 43, 46, 48, 49, 51, 52, 62, 63, 65, 72, 74, 75, 77, 85, 88, 94, 96, 99, 101, 103, 104, 105, 108, 111, 114, 116, 121, 126, 127, 128, 130, 132, 133, 136, 143, 144, 146, 147, 148, 149, 155, 159, 160, 163, 167, 168, 171, 174, 182, 185, 187, 188, 189, 194, 198, 201, 208, 228, 238, 240, 249, 255, 256, 258, 261, 265, 266, 268, 271, 279, 283, 305, 306, 307, 308, 309, 312, 313, 332, 339, 345, 346, 347, 348, 357, 358, 360, 363, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 394, 396, 412, 431, 432, 433, 434, 437, 447, 448, 449, 451, 456, 457, 459, 463, 465, 466, 467, 468, 469, 471, 473, 475, 478, 487, 491, 492, 495, 501, 502, 507, 509, 510], "extract_typ": 467, "extractor": [53, 89, 161, 163, 169, 465], "extrapol": [130, 161, 163, 366, 477], "extrem": [58, 125, 163, 474], "extremum": 199, "ey": [25, 44, 47, 67, 68, 70, 72, 73, 82, 86, 91, 118, 179, 187, 219, 272], "eye_mask": [219, 272], "ez": 248, "f": [3, 4, 7, 10, 11, 12, 16, 17, 19, 22, 23, 24, 26, 27, 31, 32, 33, 34, 35, 36, 37, 39, 41, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 68, 72, 73, 74, 77, 79, 80, 81, 82, 83, 87, 88, 90, 91, 93, 94, 95, 96, 97, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 129, 130, 163, 165, 169, 171, 174, 176, 177, 180, 198, 199, 209, 219, 232, 233, 250, 261, 265, 267, 269, 287, 307, 320, 321, 322, 324, 325, 328, 332, 333, 345, 346, 366, 367, 373, 374, 390, 398, 468, 471], "f1": [44, 171, 305, 307], "f1_score": 44, "f1_score_to_print": 44, "f_classif": [37, 38, 41, 44, 96, 101, 174], "f_re": [322, 324, 325], "f_regress": [47, 106, 109, 110, 114], "f_score": [38, 175], "f_score_img": 38, "fa": 171, "fabian": [0, 118, 122, 163, 225, 258], "face": [7, 19, 23, 24, 30, 34, 35, 40, 41, 48, 72, 96, 100, 101, 103, 115, 116, 118, 120, 128, 130, 143, 156, 163, 171, 176, 180, 185, 186, 190, 191, 192, 218, 219, 235, 271, 272, 289, 305, 307, 309, 356, 358, 361, 362, 363, 364, 376, 385, 399, 413, 427, 444, 448, 451, 452, 453, 454, 455, 456, 458, 461, 479, 480, 484, 486, 487, 509], "face_mask": [219, 272], "facebook": 0, "facecolor": [19, 34, 43, 45, 110, 129, 163, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 437, 441, 443, 444, 447, 449, 450, 451], "facilit": [26, 129, 132, 163, 187, 188, 192, 208], "fact": [111, 178, 181, 185], "factor": [69, 71, 103, 108, 111, 118, 145, 163, 173, 185, 202, 208, 210, 322, 324, 325, 334, 336, 337, 338, 339, 342, 343, 344, 349, 434, 449, 450, 451, 458], "faculti": 0, "fade": 26, "fail": [36, 107, 127, 128, 130, 132, 151, 160, 163, 164, 178, 179, 188, 282, 284, 465], "failur": [107, 143, 163, 179, 188, 393], "fair": [0, 61, 118, 170, 209, 265], "fairli": [47, 172, 181], "fake": 179, "falff": 248, "fall": [11, 160, 163, 179, 446, 487], "fals": [2, 6, 10, 13, 15, 17, 19, 21, 22, 23, 24, 26, 27, 32, 34, 35, 36, 38, 39, 40, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 64, 65, 70, 71, 73, 74, 77, 79, 81, 82, 83, 88, 89, 90, 91, 93, 94, 96, 102, 104, 106, 107, 110, 112, 113, 114, 121, 129, 135, 151, 154, 155, 156, 158, 160, 161, 163, 169, 176, 180, 181, 185, 191, 192, 228, 240, 241, 242, 244, 246, 248, 256, 257, 268, 271, 277, 280, 282, 284, 305, 306, 307, 308, 309, 310, 311, 312, 313, 329, 332, 335, 346, 348, 349, 350, 351, 352, 355, 366, 367, 370, 371, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 434, 436, 437, 441, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 474, 475, 476, 477, 491, 492, 507], "famili": [6, 83, 106, 127, 128, 145, 160, 163, 176, 179, 185, 348, 399, 465, 467], "familiar": [68, 179, 187], "fanci": 101, "far": [68, 178, 366], "faraon": [118, 217], "farther": 413, "fashion": [202, 219], "fast": [3, 33, 42, 51, 52, 67, 68, 74, 103, 118, 151, 154, 163, 168, 170, 171, 172, 175, 178, 179, 185, 186, 204, 222, 277, 284, 307, 308, 313, 368, 463, 464, 470, 510], "fast_abs_percentil": [136, 163], "fast_ica": 107, "fast_svd": [143, 163], "faster": [41, 51, 52, 108, 145, 163, 177, 178, 179, 282, 313, 366, 367, 398, 443, 444, 450, 451, 458, 487], "fastest": 178, "fastica": [94, 107, 108, 312], "faulti": [151, 163], "favor": [160, 163], "fc": 19, "fcon_1000": [200, 227, 249], "fcontrast": [322, 324, 325], "fcontrastresult": [322, 324, 325], "fd_threshold": [130, 161, 163, 373, 374], "fdr": [6, 26, 77, 79, 83, 184, 185, 331, 349, 475, 491], "feasibl": 178, "feat": [65, 183], "featur": [31, 35, 36, 37, 45, 47, 52, 54, 66, 68, 96, 102, 107, 108, 114, 118, 120, 132, 146, 148, 149, 154, 158, 161, 172, 173, 174, 175, 176, 177, 178, 179, 187, 188, 192, 240, 241, 242, 244, 305, 306, 307, 308, 309, 310, 311, 312, 318, 320, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 398, 462, 464, 465, 467, 477, 478, 492, 503, 504, 508], "feature_names_out": [378, 379, 381, 382, 384, 385, 386, 388, 389, 462, 465], "feature_select": [37, 38, 41, 44, 45, 47, 96, 101, 106, 109, 110, 114, 174], "feature_selector": 41, "februari": [47, 118, 122, 123, 128, 138, 139, 143, 153, 163, 177, 187], "feczko": [61, 118, 209, 265], "federico": [118, 202], "feedback": [148, 163, 164, 179, 188], "feel": [148, 163, 179], "feldstein": [118, 201, 251], "femal": [217, 248], "fenna": [118, 231, 237, 260, 264], "fetch": [3, 4, 10, 15, 20, 25, 26, 31, 32, 34, 36, 37, 38, 39, 41, 44, 61, 70, 87, 88, 89, 90, 93, 96, 105, 107, 111, 121, 128, 130, 132, 134, 142, 143, 145, 147, 151, 163, 164, 167, 170, 179, 189, 198, 228, 248, 255, 261, 268, 269, 272, 275, 276, 277, 280, 282, 283, 284, 285, 288, 290, 293, 294, 301, 495, 510], "fetch_abide_pcp": [130, 159, 163, 197], "fetch_adhd": [12, 64, 105, 111, 138, 163, 200], "fetch_atlas_a": [132, 140, 159, 161, 163, 199], "fetch_atlas_allen_2011": [22, 143, 163, 201], "fetch_atlas_basc_multiscale_2015": [20, 111, 128, 129, 139, 163, 202], "fetch_atlas_craddock_2012": [128, 129, 161, 163, 166, 205], "fetch_atlas_destrieux_2009": [10, 166, 206], "fetch_atlas_difumo": [22, 50, 155, 163, 208], "fetch_atlas_harvard_oxford": [11, 22, 59, 93, 138, 159, 163, 166, 179, 217, 257, 466], "fetch_atlas_juelich": [11, 157, 159, 163, 220, 256], "fetch_atlas_msdl": [21, 22, 54, 55, 56, 57, 102, 140, 163, 166, 225], "fetch_atlas_pauli_2017": [22, 148, 151, 163, 229], "fetch_atlas_schaefer_2018": [149, 151, 163, 231], "fetch_atlas_smith_2009": [2, 22, 89, 128, 129, 161, 163, 233], "fetch_atlas_surf_destrieux": [10, 23, 24, 114, 129, 143, 163, 507], "fetch_atlas_talairach": [145, 163, 236], "fetch_atlas_yeo_2011": [11, 50, 88, 134, 161, 163, 166, 237], "fetch_bids_langloc_dataset": [130, 161, 163], "fetch_cobr": [139, 143, 154, 158, 163], "fetch_coords_dosenbach_2010": [61, 139, 142, 163, 209], "fetch_coords_power_2011": [61, 230], "fetch_coords_seitzman_2018": [149, 163, 232], "fetch_development_fmri": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 87, 91, 93, 94, 97, 102, 108, 151, 163, 165, 166, 168, 169, 187, 192, 207], "fetch_ds000030_url": [65, 160, 163, 287], "fetch_fiac_first_level": [73, 210], "fetch_fil": 179, "fetch_haxbi": [3, 4, 16, 17, 19, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 96, 101, 106, 120, 142, 163, 171, 179, 190, 218], "fetch_icbm152_2009": [12, 22, 77, 219, 273, 298], "fetch_icbm152_brain_gm_mask": [68, 77, 141, 163, 219, 272], "fetch_language_localizer_demo_dataset": [103, 104, 113, 130, 161, 163, 180, 203, 221], "fetch_localizer_button_task": [18, 132, 141, 163, 276, 277, 507], "fetch_localizer_calculation_task": [83, 110, 132, 163, 275, 277], "fetch_localizer_contrast": [26, 78, 79, 81, 82, 109, 132, 141, 163, 204, 275, 276], "fetch_localizer_first_level": [67, 68, 70, 222], "fetch_megatrawls_netmat": [28, 198], "fetch_mixed_gambl": [42, 159, 163, 223], "fetch_miyawaki2008": [43, 44, 91, 224], "fetch_neurosynth_word": [107, 121, 282, 284], "fetch_neurovault": [107, 112, 121, 144, 151, 155, 163, 283, 284, 285, 302], "fetch_neurovault_auditory_computation_task": [90, 148, 163, 285, 302], "fetch_neurovault_id": [112, 121, 144, 163, 282, 283, 285, 302], "fetch_neurovault_motor_task": [148, 163, 507], "fetch_nyu_rest": [153, 156, 163], "fetch_oasis_vbm": [45, 46, 77, 228], "fetch_openneuro_dataset": 65, "fetch_openneuro_dataset_index": [160, 163], "fetch_spm_auditori": [6, 26, 71, 161, 163, 234], "fetch_spm_multimodal_fmri": [72, 161, 163, 180, 235], "fetch_stimuli": [40, 271], "fetch_surf_fsaverag": [128, 148, 154, 156, 160, 163, 180, 211, 212, 213, 214, 215, 262, 446, 452, 453, 454, 455, 459, 487, 507], "fetch_surf_fsaverage5": [143, 148, 163], "fetch_surf_nki_enhanc": [143, 151, 163, 227], "fetcher": [32, 34, 129, 130, 134, 138, 139, 140, 143, 148, 151, 152, 155, 157, 158, 159, 160, 161, 163, 180, 228, 250, 268, 285, 289], "few": [2, 15, 16, 27, 41, 42, 43, 52, 79, 83, 93, 105, 106, 135, 146, 147, 163, 170, 172, 175, 177, 179, 180, 188, 191, 383, 463, 487], "fewer": [130, 163, 178, 436], "ff0000": 11, "ff98d5": 11, "ffff00": 11, "fiac": [73, 194, 270, 503], "fiac_nilearn": 73, "field": [47, 105, 121, 151, 163, 181, 185, 190, 282, 305, 306, 307, 308, 312, 313, 333, 335, 366, 371, 372, 379, 385, 463, 486], "fifth": [105, 118, 273, 319, 323], "fig": [10, 12, 13, 19, 25, 26, 40, 41, 43, 44, 52, 60, 64, 66, 67, 69, 74, 77, 80, 81, 98, 103, 104, 109, 114, 446, 452, 507], "fig1": 71, "fig2": 71, "fig_kwarg": 442, "figh": 13, "fight": 192, "figshar": [20, 252], "figsiz": [6, 12, 13, 16, 19, 26, 27, 32, 36, 37, 41, 43, 45, 47, 51, 54, 60, 64, 65, 66, 67, 68, 69, 74, 77, 80, 81, 93, 96, 98, 102, 103, 104, 109, 110, 111, 114, 191, 448], "figur": [2, 4, 6, 10, 13, 15, 16, 19, 23, 24, 25, 27, 32, 34, 35, 36, 37, 38, 43, 44, 45, 46, 47, 51, 52, 54, 55, 58, 59, 60, 61, 64, 65, 67, 68, 69, 70, 71, 77, 81, 86, 96, 102, 103, 104, 109, 110, 111, 114, 129, 132, 134, 145, 154, 155, 158, 159, 160, 161, 163, 164, 179, 180, 181, 191, 345, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 435, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 465, 507], "figure_width": [26, 98], "fil": [6, 72, 234, 235, 288], "filbei": [118, 201, 251], "file": [3, 6, 7, 8, 10, 15, 20, 21, 23, 24, 29, 35, 43, 48, 50, 51, 52, 54, 56, 58, 62, 63, 64, 65, 68, 70, 72, 73, 75, 77, 84, 87, 88, 93, 94, 96, 99, 103, 104, 107, 111, 112, 113, 115, 116, 117, 118, 120, 121, 129, 132, 134, 136, 138, 143, 147, 148, 149, 150, 151, 154, 158, 159, 160, 163, 164, 165, 166, 168, 169, 171, 179, 180, 188, 189, 192, 199, 200, 201, 202, 207, 208, 210, 211, 212, 213, 214, 215, 216, 218, 221, 222, 224, 225, 228, 229, 235, 237, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 301, 303, 305, 306, 312, 313, 315, 332, 335, 339, 345, 346, 348, 351, 361, 362, 364, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 387, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 463, 465, 473, 475, 477, 479, 480, 484, 485, 486, 487, 491, 492, 508, 509, 510], "file_basenam": [161, 163, 372], "file_dimens": 315, "file_list": 303, "file_nam": [40, 473], "file_path": [161, 163, 372, 479], "file_tag": 371, "file_typ": 371, "filemesh": [23, 24], "filenam": [3, 4, 11, 16, 53, 58, 64, 96, 120, 130, 141, 151, 158, 159, 163, 166, 169, 170, 179, 190, 191, 256, 257, 287, 303, 305, 306, 307, 308, 310, 311, 345, 361, 372, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 449, 479, 480, 481, 482, 484], "filename_pattern": 179, "filesystem": [160, 163], "filippini": [118, 198, 233, 261], "fill": [16, 22, 26, 65, 69, 96, 104, 113, 134, 143, 151, 157, 163, 178, 192, 202, 366, 367, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 449, 450, 473, 510], "fill_diagon": [57, 59], "fill_doc": [157, 163], "fill_valu": [366, 367], "fillard": [118, 165, 240], "filled_contour": [22, 53, 169, 449], "filter": [35, 54, 58, 59, 61, 64, 65, 68, 69, 70, 73, 96, 107, 113, 119, 120, 125, 127, 128, 148, 151, 156, 158, 160, 163, 171, 185, 189, 191, 228, 248, 282, 284, 304, 305, 306, 307, 308, 310, 311, 312, 313, 332, 335, 346, 351, 368, 370, 371, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 463, 465, 476, 477, 488, 489, 491, 510], "filter_and_extract": [52, 55, 56, 59, 61], "filtered_img": 368, "filtered_sign": 476, "filterwarn": [3, 34, 36, 42, 51], "filtfilt": 476, "final": [3, 4, 6, 15, 16, 26, 32, 44, 51, 56, 58, 59, 60, 66, 70, 86, 95, 96, 103, 111, 156, 163, 165, 172, 178, 179, 180, 187, 188, 191, 192, 202, 217, 242, 315, 346, 371, 377, 378, 383, 384, 465, 507], "find": [4, 32, 34, 47, 53, 59, 81, 103, 125, 163, 169, 170, 171, 173, 175, 178, 179, 181, 185, 188, 192, 202, 226, 235, 244, 252, 353, 393, 394, 396, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 433, 434, 458, 462, 464, 470, 507, 508, 510], "find_cut_coord": [401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427], "find_cut_slic": [136, 143, 163], "find_parcellation_cut_coord": [50, 61, 148, 158, 163, 166, 432, 437], "find_probabilistic_atlas_cut_coord": [50, 53, 56, 148, 163, 166, 169, 431, 437], "find_xyz_cut_coord": [53, 89, 138, 145, 163, 169], "fine": [10, 91, 118, 142, 163, 166, 192, 208, 255, 309, 312, 313, 373, 379, 385, 463, 507], "finer": [10, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427], "finish": [33, 35, 37, 38, 39, 42, 45, 46, 47, 51, 52, 53, 55, 56, 57, 59, 60, 61, 65, 77, 93, 101, 106, 109, 129, 163, 164, 178, 179, 350, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 437, 449, 457, 459, 461], "finit": [26, 63, 75, 79, 81, 107, 116, 144, 163, 180, 185, 278, 332, 334, 339, 351, 368, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 393, 434, 438, 439, 450, 451, 465, 477, 509], "fino": [78, 118, 327], "fir": [63, 66, 75, 116, 131, 163, 180, 185, 278, 332, 334, 339, 438, 439, 451, 509], "fir_delai": [65, 66, 67, 332, 334, 335, 339], "fir_delays_": 332, "first": [2, 6, 7, 12, 15, 16, 17, 19, 21, 27, 32, 34, 35, 37, 41, 43, 45, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 66, 67, 71, 73, 75, 77, 79, 82, 83, 86, 88, 91, 93, 94, 95, 96, 97, 98, 100, 108, 109, 111, 114, 115, 118, 120, 121, 122, 128, 130, 132, 148, 149, 151, 154, 156, 158, 159, 161, 163, 164, 165, 166, 168, 169, 170, 172, 174, 175, 178, 179, 181, 182, 183, 184, 188, 189, 190, 191, 194, 202, 242, 244, 269, 270, 273, 274, 278, 279, 282, 284, 287, 293, 294, 304, 305, 306, 307, 308, 312, 313, 332, 335, 345, 346, 348, 352, 357, 358, 367, 368, 371, 373, 375, 378, 381, 384, 385, 386, 388, 395, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 435, 438, 439, 443, 444, 445, 450, 451, 452, 453, 454, 455, 456, 461, 462, 463, 465, 473, 474, 475, 477, 483, 492, 503, 509, 510], "first_epi_fil": 97, "first_level": [6, 26, 35, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 103, 104, 113, 129, 133, 156, 158, 160, 163, 180, 442, 475], "first_level_contrast": [104, 158, 163, 345, 346, 348, 475], "first_level_from_bid": [65, 103, 104, 113, 128, 129, 130, 132, 134, 161, 163, 442], "first_level_glm": 113, "first_level_model": [64, 67, 68], "first_pipelin": 101, "first_plot": 52, "first_roi_data": 96, "first_roi_img": 96, "first_rsn": 2, "first_three_imag": 358, "firstlevelmodel": [6, 26, 64, 67, 68, 70, 71, 72, 73, 103, 113, 132, 133, 134, 135, 156, 158, 160, 163, 180, 335, 345, 346, 348, 475], "firstlevelmodelifit": 65, "firstlevemodel": 68, "firstli": 59, "fischl": [23, 118, 206, 211, 212, 213, 214, 215, 217, 231, 237, 254, 260, 262, 264, 290], "fisher": [101, 118, 320], "fistlevelmodel": 180, "fit": [3, 6, 24, 26, 30, 32, 34, 37, 38, 39, 41, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 63, 64, 66, 67, 68, 70, 75, 77, 78, 79, 81, 82, 83, 89, 91, 94, 101, 102, 103, 107, 113, 114, 116, 120, 129, 130, 132, 133, 134, 135, 148, 156, 158, 160, 161, 163, 165, 167, 168, 169, 171, 172, 174, 176, 178, 179, 181, 182, 183, 185, 186, 187, 192, 240, 241, 242, 264, 270, 271, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 322, 323, 324, 325, 329, 332, 335, 341, 345, 346, 348, 358, 363, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 399, 412, 415, 435, 438, 445, 451, 456, 462, 463, 464, 465, 468, 473, 475, 488, 489, 491, 492, 509, 510], "fit_intercept": [310, 311], "fit_param": [312, 313, 376, 385, 462, 464], "fit_predict": [462, 464], "fit_transform": [37, 38, 41, 45, 50, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64, 71, 91, 94, 96, 101, 102, 103, 106, 107, 108, 109, 110, 111, 114, 120, 129, 133, 134, 161, 163, 166, 169, 180, 192, 240, 309, 312, 313, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465], "fitted_pipelin": 101, "fitter": [129, 163], "five": [59, 68, 463], "five_mni_imag": 358, "fix": [17, 32, 35, 61, 72, 105, 113, 124, 164, 178, 179, 188, 191, 319, 320, 323, 329, 332, 335, 491], "fixed_fx_contrast": 73, "fixed_fx_contrast_img": 329, "fixed_fx_stat": 73, "fixed_fx_stat_img": 329, "fixed_fx_vari": 73, "fixed_fx_variance_img": 329, "fixed_fx_z_score_img": [161, 163, 329], "fixur": 179, "fl": 0, "flag": [132, 163, 179, 180, 373, 374], "flake8": [132, 138, 160, 163], "flash": 68, "flat": [24, 44, 128, 163, 191, 211, 212, 213, 214, 215, 216, 290, 293, 294, 301], "flat_left": [211, 212, 213, 214, 215, 216, 290], "flat_right": [211, 212, 213, 214, 215, 216, 290], "flatiron": 0, "flatten": [25, 43, 44, 71, 118, 206, 240, 246, 247, 293], "flavor": [2, 202], "fletcher": [118, 197, 248], "flexibl": [67, 137, 163], "flexibli": 59, "fliem": 227, "flip": [17, 107, 142, 163, 202, 252], "flirt": 217, "flm_object": [160, 163], "float": [3, 43, 44, 46, 69, 77, 131, 151, 154, 163, 241, 242, 244, 248, 249, 268, 271, 273, 282, 284, 288, 289, 291, 295, 296, 299, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 320, 322, 323, 324, 325, 327, 331, 332, 334, 335, 336, 337, 338, 339, 342, 343, 344, 346, 348, 349, 350, 351, 355, 357, 366, 367, 370, 373, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 436, 437, 441, 443, 444, 446, 447, 449, 450, 451, 452, 454, 455, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 470, 473, 474, 475, 476, 477, 478, 487], "float32": [12, 35, 86, 105, 192, 352, 361, 377, 378, 379, 383, 384, 385, 386, 465], "float64": [3, 55, 56, 61, 65, 79, 82, 104, 132, 163], "flore": [118, 165, 240], "florent": [0, 118, 131, 163, 206, 217, 254], "florida": 0, "flow": [156, 163, 181, 185], "fluctuat": [51, 68, 178, 181, 185, 248], "fluenci": 79, "fluid": [12, 59, 219, 272, 373], "fmr": [51, 65], "fmri": [1, 8, 16, 27, 31, 32, 33, 34, 35, 38, 41, 43, 44, 47, 49, 58, 59, 62, 63, 64, 65, 66, 68, 71, 72, 74, 75, 76, 83, 84, 87, 91, 93, 96, 100, 103, 104, 105, 106, 113, 115, 116, 118, 120, 121, 132, 139, 146, 151, 163, 168, 169, 170, 172, 174, 177, 178, 180, 183, 184, 185, 186, 187, 190, 191, 192, 194, 200, 201, 202, 205, 208, 209, 218, 221, 224, 226, 227, 232, 249, 252, 253, 255, 261, 265, 268, 270, 271, 277, 278, 288, 305, 309, 312, 313, 327, 329, 332, 341, 346, 348, 349, 351, 352, 356, 358, 359, 361, 362, 363, 364, 367, 373, 374, 376, 385, 393, 396, 399, 419, 426, 434, 435, 436, 438, 439, 441, 443, 444, 449, 450, 451, 456, 458, 463, 465, 473, 474, 477, 478, 491, 493, 509, 510], "fmri_arrai": 111, "fmri_compress": 52, "fmri_data": [43, 96, 111, 332, 346], "fmri_fil": 103, "fmri_filenam": [3, 38, 39, 59, 96, 101, 120], "fmri_glm": [6, 26, 71, 72, 73, 180], "fmri_glm_multirun": 73, "fmri_glm_run_1": 73, "fmri_glm_run_2": 73, "fmri_img": [6, 36, 38, 39, 41, 67, 68, 71, 72, 73, 96, 111, 113, 180], "fmri_img_surf": 39, "fmri_mask": [38, 94, 101, 106, 109, 110, 120], "fmri_niimg": [3, 32, 36, 101, 171], "fmri_niimgs_condit": 32, "fmri_niimgs_test": 3, "fmri_niimgs_train": 3, "fmri_path": 111, "fmri_random_runs_filenam": 43, "fmri_reduc": 52, "fmri_reduced_rena": 52, "fmri_run": [35, 43], "fmrib": [2, 22, 182, 217, 220, 233, 261, 510], "fmripost": 374, "fmriprep": [65, 68, 113, 129, 130, 132, 158, 160, 161, 163, 166, 170, 181, 185, 192, 219, 235, 268, 272, 273, 295, 296, 297, 298, 299, 300, 335], "fmt": 74, "fnhum": [118, 197, 248], "fnin": [52, 118, 168, 227], "fninf": [118, 121, 226, 282, 284], "fnsy": [118, 201, 251], "focu": [15, 81, 166, 168, 178, 465], "focus": [63, 76, 101, 111, 116, 120, 140, 146, 163, 165, 172, 175, 176, 179], "fold": [3, 31, 33, 36, 38, 43, 54, 70, 96, 101, 102, 171, 172, 174, 176, 178, 179, 192, 242, 305, 306, 307, 308, 309, 310, 311], "folder": [65, 96, 104, 113, 158, 163, 179, 188, 190, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 301, 335, 361, 371], "follow": [2, 4, 7, 10, 15, 19, 22, 23, 24, 26, 31, 35, 36, 37, 38, 39, 43, 44, 45, 50, 51, 52, 54, 55, 56, 57, 58, 59, 61, 64, 65, 66, 67, 68, 70, 71, 74, 91, 93, 94, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 116, 120, 121, 132, 135, 145, 148, 149, 150, 151, 152, 153, 157, 161, 163, 164, 165, 166, 169, 170, 176, 179, 180, 181, 183, 185, 187, 188, 190, 202, 210, 222, 228, 290, 292, 293, 294, 301, 332, 345, 351, 357, 370, 371, 373, 374, 378, 381, 384, 386, 388, 391, 392, 393, 394, 395, 396, 459, 465, 477, 478, 491, 507, 508], "fonov": [118, 202, 219], "font": [400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 452, 454, 455], "fontproperti": [400, 402, 403], "fontsiz": [13, 27, 43, 52, 66, 80, 82, 109, 149, 151, 163, 191, 400, 402, 403, 457, 459, 460, 461], "footbibliographi": [156, 158, 160, 163], "footcit": [156, 158, 160, 163], "footer": [132, 163], "forc": [2, 96, 138, 163, 164, 178, 192, 202, 252, 261, 282, 284, 310, 311], "force_resampl": [132, 161, 163, 366, 367], "ford": [118, 201, 251], "foreground": [90, 169], "forget": [96, 179], "fork": [164, 179], "form": [6, 7, 35, 43, 47, 52, 74, 109, 130, 163, 165, 166, 168, 169, 181, 185, 190, 217, 240, 241, 242, 287, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 332, 335, 339, 346, 348, 349, 371, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 399, 445, 458, 462, 463, 464, 465, 474, 475], "formal": [6, 234], "format": [2, 41, 58, 93, 103, 120, 128, 129, 134, 155, 158, 160, 163, 179, 180, 192, 202, 206, 208, 248, 250, 252, 254, 256, 257, 259, 260, 262, 263, 264, 315, 370, 376, 377, 380, 383, 384, 385, 386, 387, 388, 389, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 441, 443, 444, 446, 450, 451, 452, 453, 454, 455, 460, 461, 462, 465, 485, 486, 487, 496], "formatstrformatt": 51, "formatt": [132, 163], "former": [172, 178, 282, 443, 446, 451, 455], "formerli": [93, 148, 163], "formula": [2, 132, 139, 163, 178, 346, 348, 362, 438], "fornito": [59, 118, 166, 374], "forschungszentrum": 0, "fortran": [178, 366, 367, 398, 399], "fortun": [3, 69], "forum": 179, "forward": [118, 236, 263], "foucault": [148, 163], "found": [3, 4, 6, 10, 11, 12, 16, 17, 19, 20, 22, 23, 24, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64, 65, 66, 67, 68, 70, 71, 73, 74, 77, 78, 79, 81, 82, 83, 87, 88, 89, 91, 93, 94, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 120, 121, 148, 163, 164, 165, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 187, 188, 191, 192, 202, 226, 228, 282, 284, 286, 335, 351, 353, 371, 390, 393, 434, 450, 451, 477, 507], "four": [7, 43, 47, 68, 158, 163, 192, 237], "fourth": [83, 86, 156, 161, 163, 332, 348, 373, 374, 432, 477], "fox": [118, 233, 236, 261, 263, 374], "fpr": [6, 35, 64, 65, 73, 83, 104, 184, 185, 332, 346, 349, 475, 491], "fr": [0, 3, 10, 11, 21, 28, 42, 105, 111, 199, 204, 225, 250, 258], "frac": [181, 311, 319, 323], "frackowiak": [118, 351, 477], "fraction": [248, 332, 335, 393, 394, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 487], "frame": [35, 66, 91, 192, 202, 334, 358, 373, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 473], "frame_ax": [401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427], "frame_tim": [35, 66, 69, 180, 333, 334, 339], "frameon": [36, 400, 402, 403], "frames_tim": 339, "frametim": 64, "framewis": [59, 268, 373], "framework": [69, 165, 179, 268], "fran": [61, 118, 230, 266], "franc": [0, 179], "francesca": [118, 201, 251], "francisco": [118, 227], "franz": [0, 149, 151, 153, 163], "fran\u00e7oi": [0, 129, 163], "frau": [0, 136, 163], "frazier": [118, 217], "free": [0, 118, 164, 172, 179, 181, 185, 348, 399], "freedman": [118, 399], "freedom": [59, 103, 112, 166, 181, 320, 323, 329, 374], "freeli": 234, "freesurf": [10, 23, 70, 113, 143, 148, 160, 163, 180, 206, 211, 212, 213, 214, 215, 220, 262, 290, 294, 413, 452, 453, 454, 455, 461, 479, 485, 486, 487], "freimer": [118, 269, 287], "freita": [118, 236, 263], "frem": [3, 30, 48, 116, 118, 128, 154, 163, 171, 172, 175, 177, 185, 186, 271, 280, 307, 308, 311, 358, 363, 448, 451, 456, 509, 510], "fremclassifi": [33, 132, 135, 154, 155, 161, 163, 172, 173, 305, 308], "fremregressor": [33, 42, 132, 135, 154, 155, 161, 163, 172, 173, 306, 307], "french": 0, "frequenc": [6, 68, 125, 163, 192, 248, 305, 306, 307, 308, 310, 311, 312, 313, 332, 339, 351, 373, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 463, 465, 476, 477], "frequent": [134, 163, 181, 487], "frequentist": 181, "frequentist_infer": 181, "fri": [118, 201, 251], "friedman": [118, 165], "friendli": [111, 127, 163, 315, 508], "frisoni": [118, 198], "friston": [118, 234, 351, 477], "frith": [118, 351, 477], "fritsch": [0, 122, 163], "frmi_fil": 166, "from": [0, 4, 6, 7, 8, 9, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 26, 27, 29, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 54, 55, 56, 57, 58, 60, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 94, 95, 97, 98, 99, 100, 102, 104, 106, 107, 108, 111, 112, 113, 114, 115, 117, 118, 119, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 141, 144, 145, 148, 149, 151, 156, 157, 158, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 185, 186, 187, 188, 189, 194, 197, 198, 199, 200, 201, 202, 205, 207, 208, 209, 210, 217, 218, 219, 220, 222, 224, 226, 231, 232, 233, 238, 240, 241, 242, 244, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 273, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 291, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 321, 322, 323, 324, 325, 326, 329, 331, 332, 335, 339, 345, 346, 347, 348, 350, 351, 353, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 434, 435, 436, 438, 440, 441, 442, 443, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 483, 487, 488, 489, 490, 491, 492, 495, 498, 500, 501, 507, 508, 509, 510], "from_volum": [10, 39, 70, 113, 483], "fromkei": 103, "fromnumer": [3, 17, 31], "front": [319, 322, 459, 461], "frontal": [59, 72, 93, 118, 176, 434, 441, 443, 444, 450, 451], "frontier": [52, 118, 121, 168, 197, 201, 208, 226, 227, 248, 251, 282, 284], "frontiersin": 201, "fronto": [61, 104], "frontopariet": 267, "frouin": [118, 204, 277], "frustrat": 179, "fsaverag": [10, 23, 24, 25, 39, 65, 70, 113, 114, 128, 129, 132, 148, 156, 163, 194, 212, 213, 214, 215, 216, 237, 238, 290, 293, 294, 301, 446, 459, 487, 507], "fsaverage3": [156, 163, 194, 290, 293, 294, 301, 459], "fsaverage4": [156, 163, 194, 290, 293, 294, 301, 459], "fsaverage5": [10, 23, 24, 25, 70, 113, 114, 132, 143, 148, 163, 194, 206, 227, 262, 290, 291, 293, 294, 301, 335, 446, 459, 487], "fsaverage5_spher": [160, 163], "fsaverage6": [156, 163, 194, 290, 293, 294, 301, 459], "fsaverage7": [290, 293, 294, 301, 459], "fsaverage_data": [39, 70], "fsaverage_mesh": [10, 23, 24], "fsaverage_sulc": [10, 23, 24, 114], "fsavg": 483, "fsl": [11, 38, 43, 44, 59, 65, 81, 93, 133, 157, 158, 160, 163, 182, 190, 217, 220, 256, 257, 362, 510], "fsl3": [59, 93], "fsl_design_matrix_path": [65, 375], "fsl_z_map": 65, "fslmath": 362, "fslview": 191, "fswiki": [237, 264], "ftp": [200, 249], "fulcher": [59, 118, 374], "full": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 125, 127, 130, 163, 164, 168, 169, 170, 172, 174, 176, 178, 179, 180, 185, 191, 192, 198, 207, 218, 235, 256, 257, 268, 279, 305, 306, 307, 308, 312, 313, 319, 322, 323, 324, 325, 332, 346, 348, 368, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 440, 448, 463, 465, 467, 473, 491], "full_brain_info": [129, 163], "full_coef": 101, "full_correl": 279, "fullbrain": 271, "fulli": [26, 72, 118, 178, 181, 202, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 443, 444, 451, 508], "func": [3, 6, 10, 12, 16, 17, 19, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64, 65, 67, 68, 71, 73, 87, 91, 93, 94, 96, 97, 101, 102, 103, 104, 105, 106, 108, 111, 113, 120, 130, 156, 163, 169, 179, 180, 190, 192, 200, 204, 207, 218, 224, 234, 249, 268, 271, 274, 281, 288, 371, 373, 374], "func1": [72, 73, 210, 235, 270, 289], "func2": [72, 73, 210, 235, 270, 289], "func_fil": 54, "func_filenam": [19, 27, 32, 33, 34, 35, 37, 51, 53, 56, 58, 61, 93, 94, 106, 108, 169, 191], "func_img": [31, 171], "func_left": [227, 291], "func_mask": 248, "func_mean": 248, "func_preproc": [159, 163, 248], "func_reduc": 106, "func_right": [227, 291], "function": [2, 3, 4, 6, 7, 9, 10, 11, 12, 13, 14, 15, 18, 19, 22, 23, 27, 28, 29, 31, 32, 34, 35, 36, 37, 38, 46, 51, 52, 55, 56, 58, 59, 61, 62, 63, 65, 66, 67, 68, 70, 72, 74, 75, 76, 87, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 105, 106, 108, 111, 113, 115, 118, 120, 121, 123, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 168, 171, 172, 175, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 197, 198, 199, 200, 202, 204, 205, 207, 208, 210, 221, 225, 226, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 320, 323, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 485, 486, 487, 488, 489, 490, 491, 492, 495, 508, 509, 510], "fundament": 185, "furei": [3, 33, 34, 40, 101, 118, 218, 271], "furo": [127, 160, 163], "further": [0, 15, 16, 24, 26, 41, 58, 68, 71, 86, 96, 111, 119, 165, 171, 173, 175, 178, 188, 190, 194, 202, 232, 282, 332, 346, 373, 413, 497, 498, 507, 510], "furthermor": [6, 41, 45, 58], "fusifor": 492, "fusiform": [93, 176], "futur": [0, 6, 43, 132, 142, 148, 154, 160, 163, 178, 185, 190, 192, 320, 473], "fv": 164, "fwe": [109, 399], "fwer": [79, 83, 184, 185, 348], "fwhm": [4, 68, 96, 97, 107, 109, 145, 151, 163, 185, 187, 191, 192, 368], "g": [0, 6, 10, 15, 23, 25, 26, 32, 33, 43, 45, 46, 50, 51, 58, 64, 69, 96, 102, 103, 109, 118, 128, 156, 160, 163, 166, 176, 178, 179, 180, 181, 184, 185, 187, 191, 192, 198, 199, 205, 208, 228, 236, 253, 263, 305, 306, 307, 308, 324, 325, 332, 339, 346, 350, 353, 373, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 437, 446, 449, 452, 453, 454, 455, 457, 458, 459, 461, 468, 469, 471, 487, 507], "g004": 201, "g8f4a9a93a": [35, 64, 70, 73, 104, 113, 491, 492], "g_and_s_cingul": 492, "g_and_s_frontomargin": 492, "g_and_s_occipital_inf": 492, "g_and_s_paracentr": 492, "g_and_s_subcentr": 492, "g_and_s_transv_frontopol": 492, "g_cingul": [24, 492], "g_cuneu": 492, "g_front_inf": 492, "g_front_middl": 492, "g_front_sup": 492, "g_ins_lg_and_s_cent_in": 492, "g_insular_short": 492, "g_oc": 492, "g_occipital_middl": 492, "g_occipital_sup": 492, "g_orbit": 492, "g_pariet_inf": 492, "g_parietal_sup": 492, "g_postcentr": [10, 492], "g_precentr": [10, 492], "g_precuneu": 492, "g_rectu": 492, "g_subcallos": 492, "g_t_transv": 492, "g_temp_sup": 492, "g_temporal_inf": 492, "g_temporal_middl": 492, "ga": [47, 118, 171, 177, 187], "gabriel": [118, 121, 226, 282, 284], "gael": [0, 51, 52, 118, 121, 122, 123, 125, 126, 136, 138, 141, 145, 148, 149, 150, 151, 153, 163, 165, 169, 170, 225, 226, 240, 241, 258, 282, 284, 312, 313, 464, 465, 470], "gagan": [61, 118, 209, 230, 265, 266], "gain": [42, 68, 173, 178, 223, 280], "gale": [0, 148, 151, 163], "gallant": [118, 172], "galleri": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 129, 136, 138, 142, 143, 145, 163, 179, 507, 509], "gambl": [30, 48, 116, 175, 177, 194, 280, 308, 311, 451, 456, 509], "gamma": [69, 160, 163, 180], "ganel": 118, "ganglia": 232, "gap": [56, 241, 244], "gather": [96, 179, 181], "gatsbi": 0, "gau": [0, 128, 129, 130, 131, 132, 133, 134, 135, 161, 163], "gaussian": [6, 35, 47, 73, 81, 96, 104, 118, 165, 178, 181, 192, 193, 202, 241, 244, 368, 491], "gaussian_filt": 47, "gazzalei": [103, 118], "ga\u00ebl": [52, 54, 59, 102, 118, 165, 166, 168, 173, 208, 225, 255, 258, 307, 308, 312], "gca": [51, 54, 102], "gcf": 43, "gee": 118, "gender": [207, 228, 268], "gener": [0, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 116, 120, 127, 129, 130, 131, 132, 134, 148, 149, 151, 153, 154, 156, 158, 163, 171, 172, 174, 176, 178, 179, 180, 181, 182, 184, 185, 186, 187, 189, 192, 202, 205, 219, 224, 232, 252, 253, 277, 287, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 322, 324, 325, 332, 339, 345, 346, 348, 349, 350, 351, 356, 362, 363, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 397, 399, 442, 446, 451, 452, 453, 454, 455, 456, 462, 463, 465, 473, 477, 491, 492, 495, 496, 507, 508, 509], "generate_group_sparse_gaussian_graph": [60, 178], "generate_report": [35, 57, 61, 64, 70, 73, 77, 91, 93, 94, 104, 113, 129, 130, 135, 158, 161, 163, 192, 332, 345, 346, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 465], "genet": [118, 217], "geneva": 0, "genfromtxt": 171, "genom": 0, "gensollen": [0, 130, 155, 156, 157, 158, 159, 160, 163], "gentl": 187, "geoffrei": [118, 324, 325], "geometr": [165, 240], "geometri": [7, 70, 118, 185, 362, 446, 452, 453, 454, 455, 461, 486, 487], "geomspac": 41, "gerard": [106, 118, 399], "geriant": 234, "geriatr": 0, "gerloff": [0, 128, 163], "germani": [0, 118, 177], "germnai": 0, "gervai": [0, 122, 163], "get": [3, 4, 6, 10, 15, 22, 23, 24, 35, 37, 43, 44, 54, 55, 59, 61, 65, 68, 69, 70, 72, 77, 80, 83, 88, 90, 98, 103, 104, 108, 112, 113, 114, 121, 143, 148, 163, 164, 166, 169, 170, 171, 176, 178, 180, 183, 184, 186, 192, 199, 240, 241, 242, 256, 257, 284, 305, 306, 307, 308, 309, 310, 311, 312, 313, 322, 324, 325, 332, 345, 346, 348, 356, 361, 365, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 399, 400, 402, 403, 430, 462, 463, 464, 465, 473, 474, 475, 479, 488, 489, 490, 508], "get_affin": [142, 163, 190, 353], "get_anat": 277, "get_bids_fil": [158, 163], "get_clusters_t": [6, 65, 71, 128, 135, 155, 159, 160, 163], "get_data": [32, 38, 45, 50, 52, 79, 81, 86, 96, 106, 109, 110, 112, 143, 151, 163, 164, 190, 361], "get_data_dir": [4, 141, 163, 190, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 293, 294, 301], "get_dataset_dir": 179, "get_design_from_fslmat": [65, 158, 163], "get_fdata": [12, 26, 82, 105, 111, 151, 163, 190], "get_feature_names_out": [377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 465], "get_head": 190, "get_ifram": 473, "get_mask": 277, "get_metadata_rout": [240, 241, 242, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465], "get_object_bound": [400, 402, 403], "get_param": [103, 240, 241, 242, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465], "get_standalon": 473, "get_support": 45, "get_tmap": [81, 277], "get_zoom": 436, "getattr": 19, "geuter": [118, 351, 477], "gezici": [0, 130, 163], "gh": [129, 163, 179], "ghislain": [118, 210], "gholamreza": [118, 165], "ghosh": [118, 121, 226, 282, 284], "giant": [151, 163], "gif": [0, 179], "gifti": [7, 129, 132, 163, 211, 212, 213, 214, 215, 216, 290, 291, 479, 480, 481, 482, 484], "gifti_fil": [479, 480, 484], "gigabyt": 179, "gii": [7, 373, 374, 413, 452, 453, 454, 455, 461, 485, 486, 487], "gili": [118, 202], "gill": [0, 148, 151, 163], "gilmor": [0, 156, 163], "gin": [199, 250], "giov": [118, 202], "giovanni": [118, 198], "gist_ncar": [23, 147, 163, 436, 450, 454, 507], "gist_rainbow": 449, "git": [122, 123, 125, 126, 136, 138, 141, 163, 164, 179, 188], "github": [0, 3, 38, 52, 55, 56, 61, 65, 77, 79, 160, 163, 179, 187, 219, 227, 231, 237, 260, 374, 459, 491, 492, 507, 508], "give": [2, 3, 4, 6, 10, 15, 16, 17, 25, 26, 31, 35, 41, 45, 52, 55, 57, 58, 59, 61, 70, 86, 93, 96, 101, 107, 118, 120, 128, 141, 143, 158, 163, 164, 165, 166, 168, 170, 171, 172, 173, 174, 176, 178, 187, 191, 192, 210, 234, 275, 276, 284, 305, 306, 307, 308, 309, 312, 313, 319, 327, 332, 334, 339, 346, 348, 368, 371, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 397, 413, 448, 453, 454, 462, 463, 465, 467, 471, 472, 487], "given": [2, 3, 10, 15, 17, 39, 41, 46, 47, 50, 53, 56, 57, 61, 66, 67, 68, 70, 74, 77, 81, 86, 88, 96, 97, 103, 105, 108, 114, 128, 140, 142, 146, 151, 160, 163, 164, 165, 168, 171, 172, 174, 176, 177, 178, 179, 181, 185, 188, 192, 198, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 256, 257, 276, 277, 279, 280, 286, 291, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 320, 322, 323, 324, 325, 328, 329, 332, 335, 339, 346, 347, 348, 349, 350, 352, 357, 360, 363, 366, 368, 370, 371, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 434, 435, 436, 437, 441, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 475, 476, 478, 492], "gl": [56, 60], "glahn": [118, 233, 261], "glaser": [0, 147, 163], "glass": [9, 10, 29, 50, 64, 77, 112, 116, 134, 141, 142, 143, 145, 146, 151, 154, 163, 186, 302, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 437, 443, 447, 451, 456, 457, 460, 475, 507, 509], "glass_brain_fil": 179, "glassbrainax": [404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426], "glasser": [118, 198], "glm": [1, 7, 8, 30, 34, 45, 48, 64, 65, 66, 67, 68, 69, 70, 71, 72, 77, 78, 79, 80, 81, 82, 83, 103, 104, 113, 127, 129, 130, 131, 132, 133, 134, 135, 154, 155, 156, 158, 160, 161, 163, 171, 179, 180, 184, 185, 186, 187, 188, 271, 288, 305, 358, 363, 370, 434, 438, 439, 442, 444, 451, 456, 473, 474, 475, 495, 503, 508, 509, 510], "glm_paramet": 103, "glmax": [59, 105], "glmin": [59, 105], "glob": [65, 77, 131, 136, 146, 163, 189, 352, 371], "global": [9, 29, 35, 64, 70, 73, 113, 116, 118, 154, 163, 178, 179, 190, 197, 202, 231, 248, 249, 260, 272, 292, 312, 313, 352, 364, 373, 374, 393, 436, 463, 491, 509], "global_sign": [59, 130, 163, 373, 374], "global_signal_regress": 248, "glossari": [131, 159, 163, 181], "glover": [35, 64, 65, 66, 68, 69, 70, 73, 113, 132, 163, 180, 332, 334, 335, 336, 337, 338, 339, 491], "glover_dispersion_deriv": [132, 161, 163, 332, 334, 339], "glover_hrf": [132, 161, 163, 332, 334, 339], "glover_time_deriv": [132, 161, 163, 332, 334, 339], "gm": [12, 22, 91, 157, 163, 192, 219, 272, 273, 305, 306, 307, 308, 312, 313, 379, 385, 392, 395, 463], "gm_img": 46, "gm_imgs_test": [45, 46], "gm_imgs_train": [45, 46], "gm_maps_mask": 45, "gm_mask": 77, "gm_mask_img": [273, 296], "gm_mni152_templ": 297, "gmbh": 0, "go": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 119, 121, 144, 163, 165, 171, 175, 179, 184, 187, 188, 192, 284, 356, 361, 362, 364, 437, 443, 447, 451, 456, 458, 491, 509, 510], "goal": [7, 87, 92, 95, 98, 111, 120, 178, 179, 315], "gobbini": [3, 33, 34, 40, 101, 118, 218, 271], "godfrei": [118, 201, 251], "goe": [0, 15, 26, 43, 88, 96, 103, 178, 241, 244], "goebel": [118, 176, 187, 309], "goeman": [78, 118, 327], "goldstein": [118, 206, 217, 254], "golobal_sign": 374, "gomez": [0, 148, 151, 157, 160, 163], "goncalv": [0, 128, 163], "gonn": [118, 217], "gonzalez": [26, 118, 141, 148, 163], "good": [7, 52, 59, 67, 68, 118, 120, 143, 163, 165, 168, 170, 172, 173, 174, 175, 177, 178, 179, 180, 188, 190, 192, 282, 430], "goodwin": [118, 198], "googl": 0, "gor": [0, 122, 148, 163], "gordon": [118, 231, 260], "gorgolewski": [0, 118, 121, 122, 136, 163, 208, 226, 255, 269, 282, 284, 287], "gorrono": [0, 153, 163], "goshen": 118, "got": [171, 179], "gotim": 118, "gottstein": 118, "gould": [118, 178], "gov": [51, 118, 170, 172, 210, 312], "govern": 178, "grab": [35, 50, 51, 52, 67, 103, 121, 164], "grace": [118, 207, 268], "gracefulli": 366, "grad": 510, "gradient": 13, "graham": [59, 118, 373, 374], "grai": [12, 26, 40, 43, 44, 45, 46, 68, 77, 91, 94, 131, 134, 141, 148, 151, 157, 163, 176, 184, 186, 192, 219, 228, 272, 273, 286, 305, 306, 307, 308, 312, 313, 379, 385, 434, 436, 441, 444, 447, 463, 487, 492], "grain": [10, 71, 118, 208, 255, 309], "gramfort": [0, 47, 52, 118, 122, 125, 150, 151, 163, 165, 177, 187, 225, 241, 258], "grand": [59, 332], "grant": 0, "graph": [46, 50, 56, 60, 165, 167, 177, 178, 185, 186, 305, 306, 310, 311, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 437, 447, 510], "graph_net": 42, "graph_object": 413, "graphic": [61, 118, 165, 178, 179, 193, 241, 244], "graphical_lasso": 56, "graphicallasso": [56, 165], "graphicallassocv": [55, 56, 60, 61, 165, 178, 242], "graphicallassocvifit": [55, 56, 61], "graphnet": [118, 177], "grass": 197, "gratton": [118, 232, 267], "gray_matter_map": [45, 46, 77, 228, 286], "gray_matter_map_filenam": [45, 77], "grayplot": [12, 154, 163, 436], "grayscal": [452, 454, 455, 461], "great": [148, 163], "greater": [68, 103, 156, 158, 163, 181, 202, 332, 341, 349, 350, 357, 370, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 437, 443, 444, 446, 447, 451, 455, 457, 459, 461, 474, 475, 478, 487], "greaterorequ": [121, 282], "greaterthan": [121, 282], "greatli": 187, "green": [43, 52, 118, 156, 163, 232, 267, 319, 323], "greenelab": 232, "greg": [0, 148, 151, 163], "gregori": [103, 118, 171], "grei": [68, 91, 157, 163, 191, 192, 273, 296, 297, 298, 300, 392, 395], "grew": 0, "grey_matter_imag": 26, "grey_matter_mask": 26, "greydon": [0, 156, 163], "grid": [7, 36, 41, 54, 69, 81, 86, 102, 172, 177, 185, 191, 242, 282, 284, 305, 306, 307, 308, 336, 337, 338, 342, 343, 344, 366, 410, 412, 415, 429, 434, 435, 441, 444, 448, 449, 450, 451, 507], "grid_param": [129, 163], "grid_search": [148, 163, 305, 306, 307, 308], "gridsearchcv": [102, 174], "gridsiz": 435, "gridspec": [43, 156, 163], "gridspec_kw": [41, 52, 82, 103], "griffith": [145, 163], "grobler": [0, 122, 163], "groningen": 0, "grosenick": [118, 177], "gross": 228, "ground": [44, 47, 60, 171], "group": [2, 3, 31, 32, 34, 35, 41, 49, 60, 61, 62, 65, 76, 77, 78, 79, 80, 81, 82, 100, 101, 104, 108, 109, 115, 116, 118, 145, 151, 161, 163, 166, 167, 170, 171, 176, 181, 183, 184, 185, 186, 187, 198, 202, 205, 207, 228, 234, 240, 241, 242, 252, 253, 258, 265, 267, 268, 279, 285, 305, 306, 307, 308, 309, 310, 311, 312, 313, 359, 371, 373, 376, 384, 399, 432, 436, 437, 448, 449, 451, 456, 470, 491, 509, 510], "group_connect": 165, "group_mean": 253, "group_multiscale_functional_template_generated_with_basc_on_the_cambridge_sampl": 252, "group_sparse_covari": [136, 163, 178, 242], "group_sparse_covariance_cost": 178, "grouped_conditions_encod": 106, "grouped_fmri_mask": 106, "groupsparsecovari": [56, 165, 178, 242], "groupsparsecovariancecv": [56, 60, 165, 178], "grow": [52, 165, 202], "grp_mask": 397, "grp_mean": [161, 163, 253], "grueschow": [118, 176], "gruner": [118, 201, 251], "gryal": 262, "gs1": 43, "gsc": [56, 60], "gsr": 59, "gt": [38, 77, 91, 93, 94, 492], "gtihub": 164, "guarante": [0, 6, 83, 172, 178, 290, 303, 345, 361, 366, 367, 379], "guess": [171, 178, 391, 458], "guevara": [0, 136, 141, 163], "gui": [118, 183, 198], "guid": [42, 127, 133, 163, 179, 184, 186, 187, 188, 192, 194, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 495, 497, 498, 508], "guidelin": [59, 96, 118, 127, 134, 157, 160, 163, 164, 171, 188], "guidotti": [0, 141, 151, 163], "guillaum": [0, 118, 148, 151, 163, 210], "gur": [59, 118, 373, 374], "gustav": 0, "gutman": [118, 227], "gyral": [118, 206, 217], "gyri": [23, 118, 206, 262], "gyru": [10, 59, 93, 263], "gz": [2, 3, 4, 6, 11, 12, 15, 17, 19, 22, 27, 31, 32, 33, 34, 35, 36, 37, 38, 40, 44, 45, 46, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 65, 73, 77, 79, 87, 88, 91, 93, 94, 96, 97, 104, 105, 106, 107, 108, 109, 111, 112, 113, 120, 187, 188, 190, 202, 208, 210, 345, 373, 374, 413, 452, 461, 485, 486, 492], "g\u00f6z\u00fckan": [0, 132, 133, 134, 135, 161, 163], "h": [59, 67, 118, 206, 211, 212, 213, 214, 215, 228, 236, 254, 263, 269, 287, 290, 319, 323, 373, 374], "h0": [320, 399], "h0_fmax": [159, 163, 399], "h0_max_mass": 399, "h0_max_siz": 399, "h0_max_t": 399, "h0_max_tfc": 399, "h1": 93, "h2": 93, "h_shape": 492, "ha": [3, 6, 13, 24, 32, 38, 39, 41, 43, 44, 45, 52, 54, 57, 61, 66, 68, 69, 71, 72, 73, 74, 77, 81, 83, 88, 91, 93, 96, 103, 108, 121, 127, 128, 129, 130, 132, 134, 135, 136, 138, 142, 145, 148, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 170, 172, 173, 176, 178, 179, 181, 183, 184, 188, 192, 202, 234, 240, 241, 242, 250, 251, 252, 254, 259, 263, 282, 309, 312, 313, 332, 339, 345, 346, 348, 357, 360, 361, 366, 367, 371, 373, 374, 377, 378, 379, 380, 381, 382, 399, 401, 443, 446, 451, 455, 456, 463, 464, 469, 473, 475, 476, 478, 487, 491, 492, 507], "habib": [118, 202, 252], "had": [129, 147, 163], "haemodynam": [118, 180, 181, 185], "haemoglobin": 181, "hahn": [0, 160, 163], "hairi": 67, "haitz": [0, 153, 163], "hajim": [43, 44, 118, 224, 281], "hal": [47, 118, 165, 169, 177, 208, 241, 255, 465], "halchenko": [0, 145, 148, 163], "half": [24, 35, 52, 68, 73, 96, 104, 151, 163, 178, 185, 192, 305, 306, 307, 308, 312, 313, 332, 346, 348, 368, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 463, 465, 467, 491], "halfwai": 487, "halgren": [23, 118, 206, 254, 262], "hammond": [0, 151, 163], "hampshir": 0, "hampson": [0, 161, 163], "han": 118, "hand": [0, 2, 68, 70, 96, 132, 133, 134, 135, 161, 163, 178, 179, 190, 192, 291], "handbook": 187, "handed": [207, 268], "handedness_categori": 248, "handedness_scor": 248, "handi": [155, 163, 180], "handl": [1, 8, 52, 73, 111, 116, 128, 129, 131, 132, 134, 135, 138, 144, 160, 163, 171, 187, 188, 190, 191, 192, 261, 302, 320, 324, 352, 358, 359, 360, 361, 366, 373, 439, 451, 456, 464, 470, 509], "handwerk": [26, 118], "hank": [0, 126, 136, 163], "hanov": 0, "hao": [0, 127, 128, 129, 130, 132, 155, 156, 158, 160, 163], "happen": [164, 176, 179, 192, 487], "hard": [13, 58, 166, 178, 185, 190], "hardcod": [74, 127, 163, 303], "harder": 172, "hardest": 178, "hardwar": 178, "harold": [118, 227], "hartmut": 118, "harvard": [0, 22, 93, 166, 194, 228, 237, 238, 248, 256, 264, 431, 432, 501], "harvard_oxford": 22, "harvard_oxford_sub": 22, "harvardoxford": 11, "hasn": [3, 178], "hasti": [118, 165], "hat": [319, 323], "hatch": 188, "hatchl": [128, 163, 188], "have": [0, 2, 3, 6, 7, 10, 12, 13, 16, 17, 19, 24, 25, 26, 31, 33, 34, 35, 41, 42, 44, 45, 47, 52, 55, 57, 58, 59, 60, 64, 65, 66, 67, 68, 70, 72, 73, 77, 87, 88, 95, 96, 101, 103, 104, 105, 107, 111, 113, 114, 116, 120, 121, 127, 128, 129, 130, 132, 134, 136, 138, 140, 141, 142, 145, 146, 147, 148, 151, 154, 155, 156, 158, 159, 161, 163, 165, 168, 169, 170, 171, 172, 174, 177, 178, 179, 180, 181, 184, 185, 187, 188, 190, 191, 192, 198, 202, 205, 207, 221, 228, 235, 240, 241, 242, 244, 247, 252, 264, 267, 268, 282, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 317, 324, 325, 332, 335, 339, 340, 345, 346, 347, 348, 350, 351, 353, 362, 366, 367, 368, 371, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 398, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 436, 442, 443, 444, 451, 452, 453, 454, 455, 459, 461, 462, 463, 464, 465, 471, 472, 474, 475, 477, 484, 507, 508], "haven": [68, 107], "havlicek": [118, 201, 251], "haxbi": [4, 9, 16, 17, 29, 30, 48, 96, 116, 118, 120, 142, 143, 163, 175, 177, 186, 190, 192, 194, 271, 305, 356, 358, 363, 376, 385, 427, 434, 448, 451, 456, 458, 507, 509], "haxby2001": [3, 4, 16, 17, 19, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 96, 101, 106, 120, 190, 218, 271], "haxby_anat_filenam": [16, 17], "haxby_dataset": [3, 16, 17, 19, 27, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 96, 101, 106, 120, 171, 190, 192], "haxby_face_vs_hous": 31, "haxby_func_filenam": [16, 17], "haxby_label": 96, "haxby_mask_filenam": [16, 17], "haxby_svc_weight": 3, "hayn": [39, 118, 176], "hayward": 0, "hbm": [118, 205, 253, 351, 477], "hbm10": [118, 211, 212, 213, 214, 215, 290], "hbm30": [118, 236, 263], "hbm6": [118, 236, 263], "hc": 164, "hcp": [13, 28, 118, 194, 279], "hcp500": [198, 279], "he": 179, "head": [71, 93, 179, 188, 373, 473, 475], "head_tpl": [161, 163, 473], "head_valu": 473, "header": [3, 96, 100, 104, 115, 116, 125, 129, 131, 132, 149, 151, 159, 163, 190, 249, 350, 351, 354, 355, 361, 362, 363, 364, 365, 366, 367, 370, 436, 477, 509], "health": 0, "healthi": [118, 185, 187, 197, 201, 202, 217, 233, 252], "heart": 68, "heavi": [42, 45, 165, 179, 386], "heavier": 33, "heavili": 0, "hedden": [118, 202], "heidelberg": [0, 118, 165, 219, 225, 240, 258], "heidi": [118, 198], "height": [13, 32, 35, 54, 64, 70, 73, 74, 102, 104, 113, 151, 163, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 436, 437, 441, 443, 444, 447, 448, 449, 450, 451, 457, 459, 461, 473, 475, 491], "height_control": [6, 26, 35, 64, 65, 70, 73, 77, 79, 83, 104, 113, 135, 163, 332, 345, 346, 349, 475], "height_ratio": [41, 52], "height_tf": 44, "height_tf_i": 44, "heinzl": [39, 118], "held": [43, 176, 179, 305, 306, 307, 308, 508], "helen": [118, 205, 253], "help": [13, 16, 26, 35, 61, 96, 118, 144, 148, 149, 163, 166, 172, 180, 183, 192, 244, 508, 510], "helper": [25, 40, 43, 47, 52, 69, 80, 93, 109, 110, 114, 128, 136, 143, 144, 163, 179, 194, 282], "helwegen": [0, 160, 163], "hemi": [7, 10, 23, 24, 39, 50, 70, 114, 413, 452, 453, 454, 455, 461, 481, 482, 507], "hemispher": [7, 10, 23, 24, 39, 50, 61, 81, 88, 96, 113, 114, 132, 134, 141, 142, 146, 163, 169, 191, 206, 211, 212, 213, 214, 215, 216, 224, 227, 254, 262, 263, 290, 291, 293, 369, 380, 381, 382, 387, 388, 389, 400, 408, 431, 434, 437, 441, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 455, 458, 459, 461, 475, 482, 483, 492, 507], "hemispheres_to_analyz": 39, "hemodyam": 67, "hemodynam": [35, 69, 70, 72, 113, 171, 185, 491], "hemodynamic_model": [160, 163], "henc": [3, 41, 59, 61, 74, 77, 88, 154, 163, 176, 179, 181, 202], "henson": [103, 118], "herbert": [118, 217], "here": [2, 3, 4, 6, 7, 10, 11, 13, 15, 16, 20, 21, 24, 26, 31, 32, 33, 34, 35, 36, 37, 38, 41, 45, 46, 47, 51, 52, 57, 58, 59, 61, 64, 65, 66, 67, 68, 70, 71, 73, 74, 77, 90, 91, 94, 96, 97, 101, 103, 104, 105, 107, 108, 111, 113, 114, 118, 120, 121, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 184, 187, 188, 191, 192, 232, 268, 322, 324, 325, 335, 348, 392, 399, 404, 405, 406, 407, 408, 409, 414, 418, 419, 422, 423, 424, 425, 452, 454, 455, 491, 492], "herebi": 176, "herholz": [0, 148, 163], "hertz": [35, 64, 70, 73, 113, 305, 306, 307, 308, 310, 311, 312, 313, 351, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 463, 465, 476, 477, 491], "heschl": 93, "hesheng": [118, 202, 231, 237, 260, 264], "hesit": [120, 179], "heterogen": 165, "heurist": [143, 163, 177, 178, 242, 393, 434, 449, 450, 451, 458, 507], "hex": 460, "hexadecim": 11, "hexbin": 435, "hhmi": 228, "hidden": 26, "hide": [26, 118], "hierarch": [168, 185, 186, 202, 462], "hierarchi": [118, 202, 252], "hierarchical_kmean": [52, 158, 163, 463], "hierarchical_kmeans_parcel": 52, "hierarchicalkmean": [52, 133, 158, 161, 163], "high": [10, 33, 35, 42, 52, 59, 64, 67, 68, 70, 73, 91, 96, 111, 113, 118, 148, 154, 155, 156, 163, 172, 173, 178, 179, 181, 185, 187, 188, 191, 192, 198, 199, 202, 211, 212, 213, 214, 215, 229, 250, 259, 290, 293, 294, 301, 305, 306, 307, 308, 310, 311, 312, 313, 320, 332, 335, 339, 351, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 413, 446, 459, 463, 465, 476, 477, 491], "high_pass": [3, 6, 26, 35, 52, 54, 55, 56, 57, 58, 59, 61, 64, 65, 68, 70, 72, 73, 91, 93, 94, 102, 113, 148, 163, 192, 305, 306, 307, 308, 310, 311, 312, 313, 332, 335, 339, 351, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 463, 465, 476, 477, 491, 492], "high_variance_confound": [52, 55, 56, 57, 59, 61, 68, 91, 93, 94, 134, 138, 155, 163, 192, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 465, 492], "higher": [6, 73, 77, 120, 143, 163, 165, 176, 181, 183, 241, 261, 305, 306, 307, 308, 310, 311, 312, 313, 332, 346, 352, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 413, 463, 464, 465, 476], "highest": [41, 55, 57, 307, 335, 357, 478], "highli": [66, 178, 179], "highlight": [26, 103, 118, 188], "hilari": [118, 207, 268], "himanshu": [0, 131, 132, 133, 134, 161, 163], "himanshupathak21061998": [148, 149, 163], "hint": [68, 165, 166], "hinz": [118, 227], "hippocampu": [232, 267], "hiroki": [43, 44, 118, 224, 281], "hist": [52, 71, 445], "histogram": [332, 341, 393, 396, 435, 445], "histori": 178, "hkmean": 52, "hkmeans_count": 52, "hkmeans_labels_img": 52, "hoc": 178, "hochberg": [181, 331], "hocheberg": [158, 163], "hodg": [118, 217], "hold": [7, 43, 80, 132, 163, 178, 179, 188, 312, 313, 339, 399, 410, 463], "hole": 96, "holland": [0, 148, 151, 163], "hollinshead": [118, 231, 237, 260, 264], "holm": [118, 199, 231, 260, 351, 477], "holtzheim": [118, 205, 253], "home": [2, 3, 4, 6, 7, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 87, 88, 89, 90, 91, 93, 94, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 161, 163, 187, 190, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 301, 361, 491, 492], "homedir": [140, 163], "hommel": [158, 163], "homogen": [91, 130, 161, 163, 168, 191, 205, 248, 253, 305, 306, 307, 308, 312, 313, 366, 379, 385, 463], "homotop": [202, 248, 252], "honorio": [118, 178, 241, 244], "hood": [41, 172, 177, 305, 306, 307, 308, 312, 313, 379, 385, 463], "hook": 179, "hopefulli": 178, "hopkin": 0, "hoptman": [118, 227], "horea": [0, 145, 148, 163], "horizont": [68, 74, 82, 131, 163, 277, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 492], "horizontal_checkerboard": [67, 68, 70, 222, 491], "horton": [118, 198], "hospit": 0, "hospitali": 0, "host": [164, 179], "host_and_deploy_doc": 164, "host_doc": 164, "hough": [118, 198], "hour": [179, 187, 188, 348, 399], "hous": [3, 19, 30, 34, 35, 41, 48, 96, 100, 115, 116, 128, 163, 176, 186, 190, 191, 217, 218, 271, 305, 307, 309, 356, 358, 361, 363, 364, 376, 385, 399, 427, 444, 448, 451, 456, 458, 509], "hover": 91, "how": [0, 1, 2, 3, 4, 5, 6, 7, 10, 15, 16, 20, 22, 26, 28, 36, 39, 41, 43, 47, 50, 51, 52, 53, 56, 58, 59, 61, 64, 65, 66, 68, 69, 71, 73, 74, 80, 81, 86, 88, 89, 90, 91, 93, 96, 97, 103, 105, 107, 110, 111, 112, 114, 116, 120, 128, 132, 143, 154, 155, 158, 159, 163, 164, 166, 168, 169, 170, 171, 172, 174, 176, 178, 181, 185, 186, 187, 189, 191, 207, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 508], "howard": 228, "howev": [0, 26, 50, 51, 52, 68, 71, 73, 88, 96, 103, 111, 164, 165, 171, 174, 178, 181, 192, 199, 345, 366, 374, 510], "hoyo": [0, 52, 118, 151, 163, 171, 173, 307, 308, 464, 470], "hrcku": 22, "hrf": [6, 67, 68, 69, 70, 132, 158, 160, 163, 171, 182, 185, 332, 334, 336, 337, 338, 339, 342, 343, 344, 510], "hrf_model": [6, 26, 35, 64, 65, 66, 67, 68, 70, 72, 73, 113, 332, 334, 335, 339, 491], "hspace": [47, 52, 60], "hstack": [32, 79, 82, 322, 324, 325], "htdoc": [200, 249], "htm": [118, 319, 323], "html": [3, 13, 19, 31, 35, 36, 38, 52, 55, 56, 57, 59, 61, 64, 65, 70, 73, 77, 79, 101, 104, 113, 131, 134, 148, 152, 156, 158, 163, 164, 171, 182, 186, 188, 192, 200, 201, 218, 236, 263, 271, 305, 306, 307, 308, 309, 310, 311, 332, 346, 374, 378, 381, 384, 386, 388, 457, 458, 459, 460, 461, 465, 473, 475, 507, 508], "html_document": 473, "html_report": [378, 381, 384, 386, 388, 465], "html_surfac": [129, 134, 163], "html_view": [458, 507], "htmlcov": 164, "htmldocument": 473, "htmlreport": [161, 163, 332, 346, 378, 381, 382, 384, 386, 388, 389, 465, 475], "http": [0, 2, 3, 4, 6, 10, 11, 13, 18, 19, 20, 21, 22, 28, 36, 40, 42, 47, 51, 54, 59, 65, 72, 79, 81, 82, 83, 102, 104, 105, 107, 111, 112, 118, 121, 160, 163, 164, 165, 169, 170, 172, 177, 179, 181, 187, 188, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 210, 217, 218, 219, 220, 221, 223, 224, 225, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 241, 250, 251, 252, 253, 255, 258, 259, 260, 261, 263, 264, 268, 271, 277, 279, 283, 285, 286, 288, 302, 305, 306, 307, 308, 309, 310, 311, 312, 319, 323, 374, 459, 460, 465, 507, 508], "httperror": [147, 163], "hu": [118, 205, 253], "huang": [0, 132, 163], "hubbard": [118, 187], "huge": [0, 68, 69, 148, 163, 208], "hugh": 228, "huguet": [0, 130, 163], "human": [0, 9, 23, 29, 42, 43, 44, 46, 61, 69, 116, 118, 121, 176, 179, 185, 197, 202, 205, 206, 210, 211, 212, 213, 214, 215, 217, 224, 226, 229, 230, 231, 236, 237, 248, 253, 254, 259, 260, 262, 263, 264, 266, 279, 281, 282, 284, 290, 351, 374, 435, 448, 456, 477, 509], "humanconnectom": [118, 198, 279], "hunar": [103, 118], "hundr": [6, 52, 463], "huntenburg": [0, 136, 151, 163], "hutchison": [118, 201, 251], "hvidovr": 0, "hwbm2": 18, "hybrid": [310, 311], "hyman": [118, 217], "hyper": [172, 173], "hyperparamet": [36, 45], "hyperplan": 310, "hypothalam": [118, 217], "hypothes": [66, 181, 185], "hypothesi": [176, 181, 309, 320, 348, 399], "hz": [6, 35, 64, 68, 70, 72, 73, 113, 192, 202, 332, 339, 491], "i": [0, 2, 4, 6, 10, 11, 12, 13, 15, 16, 17, 19, 21, 22, 23, 24, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 118, 119, 120, 121, 123, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 191, 194, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 210, 211, 212, 213, 214, 215, 219, 222, 225, 226, 228, 229, 231, 234, 235, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 495, 501, 507, 508, 510, 511], "i_ax": 103, "i_col": 109, "i_row": 81, "i_trial": 103, "iacovella": [118, 202], "ian": [0, 151, 163], "ic": [51, 107, 201], "ic_img": 107, "ic_map": 107, "ic_term": 107, "ic_threshold": 107, "ica": [22, 49, 53, 57, 62, 89, 94, 100, 108, 115, 116, 118, 121, 136, 163, 166, 167, 185, 186, 187, 196, 198, 201, 225, 233, 251, 261, 268, 279, 282, 295, 312, 313, 359, 368, 373, 374, 376, 378, 384, 385, 449, 451, 456, 469, 492, 507, 509, 510], "ica_aroma": [59, 158, 163, 373, 374], "ica_map": 107, "icbm": [22, 68, 77, 148, 163, 194, 272], "icbm152": [12, 157, 163, 185, 202, 219, 272, 273, 295, 296, 297, 298, 299, 300], "icbm152_2009": [12, 22, 68, 77], "icbm152nlin2009": 219, "icbm_mask": 68, "iceberg": [26, 118], "id": [6, 35, 64, 65, 71, 72, 73, 104, 107, 112, 121, 128, 163, 199, 217, 220, 248, 250, 263, 280, 282, 284, 291, 332, 377, 380, 383, 387, 474, 491], "ida": [3, 33, 34, 40, 101, 118, 218, 271], "idea": [53, 90, 96, 171, 178, 181], "ideal": [81, 109, 168, 181, 188, 202, 252], "ident": [10, 25, 41, 70, 82, 113, 178, 202, 351, 368, 467, 477], "identif": [74, 96, 118, 185, 198, 204, 248, 277], "identifi": [0, 26, 31, 32, 34, 35, 53, 61, 65, 96, 118, 127, 158, 163, 169, 177, 180, 181, 184, 198, 250, 328, 332, 334, 339, 341, 346], "idp": 208, "idrissa": [0, 133, 163], "idrobo": [0, 52, 118, 151, 163, 171, 173, 307, 308, 464, 470], "idx": 111, "ie": [17, 160, 163, 165, 170, 190, 315, 322, 324, 325, 378, 381, 384, 386, 388, 465], "ieee": [47, 51, 52, 118, 170, 177, 199, 208, 312, 313, 464, 470], "ignor": [3, 17, 31, 34, 36, 42, 51, 65, 72, 105, 107, 135, 149, 154, 163, 164, 240, 241, 242, 282, 284, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 339, 345, 346, 348, 350, 352, 355, 362, 363, 364, 365, 366, 367, 370, 371, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 443, 444, 446, 451, 462, 463, 464, 465, 475, 487], "ignorecas": 121, "ii": [118, 204, 206, 277, 374], "iii": [118, 205, 253], "ilinoi": 0, "ill": 172, "illustr": [9, 29, 52, 68, 69, 87, 92, 95, 98, 104, 113, 116, 171, 179, 188, 191, 192, 455, 487, 509], "im": [19, 33, 112], "imag": [1, 2, 6, 8, 12, 14, 15, 19, 21, 22, 23, 24, 25, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 64, 65, 66, 68, 69, 71, 72, 73, 77, 78, 79, 80, 81, 82, 86, 89, 90, 91, 93, 94, 96, 99, 101, 103, 104, 106, 108, 109, 110, 113, 115, 118, 119, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 151, 155, 156, 157, 158, 159, 160, 161, 163, 165, 166, 168, 169, 170, 171, 172, 176, 177, 179, 181, 183, 185, 187, 188, 189, 194, 197, 198, 199, 200, 202, 204, 207, 208, 210, 217, 218, 219, 220, 221, 222, 224, 225, 226, 228, 229, 231, 234, 235, 236, 237, 238, 240, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 271, 272, 273, 275, 277, 278, 279, 281, 282, 283, 284, 285, 288, 289, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 329, 332, 335, 345, 346, 347, 348, 349, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 477, 478, 480, 482, 483, 484, 487, 491, 492, 495, 498, 501, 509, 510], "image_10426": 15, "image_11020": 107, "image_11021": 107, "image_151": 112, "image_17327": 107, "image_17328": 107, "image_17329": 107, "image_17330": 107, "image_17331": 107, "image_17332": 107, "image_17333": 107, "image_17334": 107, "image_17335": 107, "image_17336": 107, "image_17337": 107, "image_17338": 107, "image_17339": 107, "image_17340": 107, "image_17341": 107, "image_17342": 107, "image_17343": 107, "image_17344": 107, "image_17345": 107, "image_17346": 107, "image_17347": 107, "image_17348": 107, "image_17349": 107, "image_17350": 107, "image_17351": 107, "image_17352": 107, "image_2675": 112, "image_2676": 112, "image_2818": 112, "image_2834": 112, "image_3041": 112, "image_3042": 112, "image_65426": 107, "image_filt": [121, 282], "image_id": [112, 121, 284], "image_m": 201, "image_metadata": 282, "image_path": 107, "image_term": [121, 282], "images_meta": [107, 112, 121, 226, 282, 283, 284, 285], "images_to_plot": 109, "imbalanc": 171, "imbric": 315, "imcal": 362, "img": [2, 4, 50, 53, 65, 73, 77, 79, 81, 86, 92, 104, 109, 134, 143, 151, 161, 163, 169, 179, 190, 294, 309, 312, 313, 335, 346, 348, 350, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 433, 436, 444, 445, 463, 465, 468, 469, 471, 472, 474, 483, 487, 492, 507], "img1": [87, 105, 362], "img2": [87, 105, 362], "img_3d_affin": 86, "img_3d_affine_in_mm_spac": 86, "img_4d_affin": 86, "img_4d_affine_in_mm_spac": 86, "img_copi": 354, "img_count": 81, "img_fil": [373, 374], "img_filt": [103, 104, 113, 335], "img_in_mm_spac": 86, "img_length": 430, "img_path": [40, 372], "img_plot": [135, 163], "img_to_signals_label": [128, 130, 148, 151, 161, 163, 469, 471], "img_to_signals_map": [128, 163, 468, 472], "img_valu": 465, "imgs_list": [377, 378, 379, 380, 381, 382], "immedi": [96, 374], "impact": [45, 68, 80, 118, 158, 163, 176, 179, 188, 192, 332, 346, 374, 435], "imperfect": 166, "imperi": 0, "implement": [16, 26, 35, 51, 52, 59, 61, 64, 68, 69, 70, 73, 101, 104, 113, 132, 133, 134, 136, 143, 145, 151, 154, 155, 158, 159, 163, 164, 165, 168, 169, 170, 172, 174, 176, 177, 178, 179, 185, 187, 188, 193, 202, 240, 256, 257, 305, 306, 309, 310, 311, 312, 313, 318, 320, 322, 327, 332, 334, 336, 337, 338, 339, 342, 343, 344, 346, 348, 357, 373, 374, 377, 378, 379, 380, 381, 382, 387, 388, 389, 390, 399, 400, 401, 403, 413, 452, 454, 455, 463, 464, 465, 477, 478, 491, 492, 503], "impli": [16, 155, 163, 178, 240, 366, 390, 413], "implic": [72, 103, 118], "implicit": [6, 33, 42, 154, 163, 173, 185, 307, 308], "implicitli": [68, 70, 82, 106, 171, 178], "implictili": 6, "import": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 120, 121, 141, 147, 148, 149, 151, 156, 158, 161, 163, 165, 166, 169, 171, 172, 173, 174, 176, 178, 179, 180, 183, 184, 185, 187, 188, 190, 191, 192, 198, 224, 250, 320, 322, 324, 325, 332, 346, 350, 353, 358, 362, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 447, 475, 481, 483, 487, 507], "important_term": 107, "importantli": [172, 174, 179], "importerror": [5, 102, 151, 163], "impos": [42, 136, 163], "imposs": 365, "impress": 70, "improv": [26, 33, 66, 77, 111, 118, 127, 128, 129, 131, 132, 134, 141, 144, 147, 148, 151, 158, 159, 160, 161, 163, 171, 172, 173, 177, 178, 179, 181, 185, 190, 192, 219, 232, 267, 351, 377, 380, 383, 387, 462, 477], "impul": [63, 75, 116, 278, 332, 438, 439, 451, 509], "impuls": [67, 69, 180, 181, 185, 332, 334, 339], "imput": [127, 163], "imread": 40, "imshow": [13, 26, 40, 41, 43, 44, 47, 86, 166, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 436, 441, 443, 444, 446, 448, 449, 450, 451, 452, 454, 455], "imt": 0, "in_memori": 111, "inact": [6, 181], "inappropri": 39, "inbuilt": [305, 306, 307, 308], "inc": 0, "inch": [401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427], "includ": [15, 26, 35, 39, 42, 45, 46, 57, 61, 64, 65, 66, 68, 70, 71, 73, 77, 79, 81, 82, 91, 93, 94, 103, 104, 109, 111, 113, 125, 128, 129, 130, 131, 132, 134, 135, 141, 151, 153, 154, 158, 160, 163, 164, 169, 171, 176, 177, 179, 180, 183, 185, 187, 188, 190, 196, 198, 200, 201, 202, 210, 218, 222, 231, 232, 234, 240, 241, 242, 247, 251, 252, 268, 273, 287, 295, 296, 299, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 323, 332, 345, 346, 348, 358, 373, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 399, 413, 437, 462, 463, 464, 465, 474, 489, 491, 492, 496, 502], "include_children": 111, "inclus": [68, 304], "inclusion_filt": 304, "incompat": [145, 163, 317, 332], "incomplet": [129, 163], "incongru": 183, "inconsist": [156, 163, 346, 348], "incorpor": [66, 103, 170], "incorrect": 185, "increas": [36, 47, 51, 68, 71, 81, 91, 94, 107, 111, 128, 145, 163, 175, 176, 178, 181, 185, 191, 229, 244, 348, 374, 393, 399, 434, 449, 450, 451, 458, 463, 476], "increment": [68, 97, 187, 188, 315], "increment_stack_count": 315, "inde": [6, 45, 52, 88, 165, 166, 174, 181, 333, 507], "indent": 96, "independ": [43, 51, 68, 100, 115, 116, 136, 163, 168, 170, 171, 176, 178, 181, 185, 192, 224, 225, 268, 305, 306, 307, 308, 312, 351, 358, 363, 373, 374, 376, 379, 385, 399, 451, 456, 477, 509], "index": [2, 6, 10, 11, 21, 23, 24, 35, 43, 44, 53, 58, 59, 67, 68, 73, 74, 89, 90, 93, 103, 104, 107, 114, 130, 134, 140, 158, 163, 164, 169, 179, 186, 199, 200, 250, 252, 254, 256, 257, 259, 260, 262, 263, 264, 269, 304, 305, 306, 307, 308, 322, 324, 325, 339, 358, 366, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 413, 453, 465, 467, 477, 487, 492], "index_": [53, 89, 169, 465], "index_img": [2, 3, 21, 31, 32, 33, 34, 35, 36, 38, 39, 41, 52, 53, 89, 91, 94, 101, 106, 108, 134, 163, 166, 169, 191, 192, 352, 359], "index_of_each_map": 467, "index_to_xy_coord": 43, "indexerror": [136, 158, 163], "indi": [200, 227, 249], "india": 0, "indian": 0, "indic": [10, 32, 34, 44, 53, 57, 61, 68, 74, 81, 88, 140, 143, 148, 163, 169, 176, 179, 185, 188, 190, 199, 201, 231, 236, 248, 250, 251, 254, 256, 257, 259, 260, 263, 271, 282, 305, 306, 307, 308, 310, 311, 312, 315, 332, 335, 350, 352, 355, 363, 364, 365, 366, 367, 369, 370, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 441, 444, 449, 450, 451, 452, 453, 454, 455, 458, 461, 465, 467, 474], "indirect": [165, 166], "indirectli": [10, 113], "individu": [54, 61, 65, 68, 70, 74, 78, 80, 81, 82, 83, 96, 103, 104, 111, 113, 118, 165, 170, 184, 185, 187, 189, 192, 197, 198, 202, 204, 209, 217, 220, 240, 241, 265, 277, 348, 397, 413, 453, 492, 510], "inertia": 462, "inf": [15, 57, 77, 107, 351, 378, 384, 390, 393, 477, 491, 492], "infeas": 111, "infer": [52, 65, 67, 78, 81, 86, 103, 104, 106, 113, 118, 134, 163, 179, 181, 184, 185, 327, 335, 345, 348, 366, 399, 436], "inferior": 93, "inferno": [6, 15, 17, 21, 26, 33, 37, 38, 43, 71, 72, 78, 79, 81, 82, 89, 96, 106, 109, 110, 114, 134, 163, 380, 381, 382, 387, 388, 389, 435, 492], "infin": 15, "infinit": 366, "infinitesim": 180, "infl_left": [211, 212, 213, 214, 215, 216, 290, 446, 459, 507], "infl_right": [211, 212, 213, 214, 215, 216, 290, 446, 459], "inflat": [10, 24, 39, 70, 113, 118, 206, 211, 212, 213, 214, 215, 216, 290, 293, 294, 301, 446, 452, 453, 454, 455, 459, 461, 486, 487], "influenc": [71, 178, 248, 311], "info": [164, 179, 188, 203, 282, 284, 446, 452, 453, 454, 455], "inform": [3, 6, 7, 12, 13, 17, 19, 22, 24, 26, 27, 31, 32, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 51, 52, 54, 55, 56, 57, 61, 64, 65, 68, 69, 72, 73, 74, 77, 79, 80, 91, 93, 94, 96, 97, 103, 104, 105, 106, 108, 109, 113, 114, 118, 120, 121, 125, 128, 131, 134, 145, 149, 159, 163, 164, 165, 166, 169, 170, 171, 173, 175, 178, 179, 180, 184, 185, 187, 188, 190, 192, 197, 198, 199, 200, 201, 204, 205, 207, 208, 218, 219, 223, 224, 225, 226, 228, 232, 233, 236, 237, 240, 241, 242, 248, 250, 251, 252, 253, 258, 260, 261, 263, 264, 270, 271, 272, 273, 279, 280, 281, 282, 284, 286, 289, 291, 295, 296, 297, 298, 299, 300, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 325, 332, 345, 346, 348, 360, 362, 366, 372, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465, 475, 476, 477, 492, 495, 508, 510], "informat": [0, 228], "infrastructur": [179, 188], "inglat": 293, "inher": [156, 163], "inherit": [15, 130, 134, 135, 163, 323, 473, 489], "ini": [164, 188], "init": [179, 462], "init_with_figur": [401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427], "initi": [0, 3, 24, 39, 51, 52, 53, 70, 96, 103, 129, 163, 169, 177, 180, 190, 192, 197, 221, 242, 244, 312, 313, 319, 323, 332, 346, 377, 378, 383, 384, 386, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 462, 465], "inlin": [178, 473], "inmemorymesh": [7, 452, 453, 454, 455, 461, 479, 486, 487], "inner": [305, 306, 307, 308, 371, 483, 487], "inner_mesh": [25, 483, 487], "innermost": 178, "inplac": 476, "input": [2, 3, 4, 6, 10, 15, 16, 24, 34, 35, 41, 52, 57, 58, 60, 69, 70, 72, 73, 78, 79, 81, 82, 87, 90, 96, 100, 101, 104, 111, 113, 115, 116, 120, 128, 129, 130, 132, 134, 137, 138, 141, 142, 143, 144, 146, 147, 148, 151, 155, 157, 158, 159, 160, 163, 168, 171, 174, 176, 178, 179, 180, 185, 189, 191, 192, 198, 222, 241, 242, 243, 244, 245, 246, 247, 249, 278, 279, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 329, 331, 332, 334, 339, 340, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 434, 436, 443, 444, 446, 449, 450, 451, 458, 459, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 477, 487, 491, 492, 507, 509, 510], "input_data": [37, 38, 43, 44, 45, 50, 54, 55, 56, 57, 58, 59, 61, 64, 71, 91, 93, 94, 96, 101, 102, 103, 106, 107, 108, 109, 110, 120, 158, 163], "input_featur": [377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 465], "inria": [0, 21, 47, 118, 165, 169, 177, 208, 225, 241, 255, 258, 465], "insect": [118, 219], "insensit": 172, "insert": [35, 457, 458, 459, 460, 461, 473, 475, 507], "insid": [15, 22, 25, 36, 52, 58, 101, 174, 179, 351, 357, 371, 413, 436, 449, 450, 453, 454, 462, 487], "insight": [0, 41, 59, 157, 163, 165], "inspect": [43, 58, 68, 71, 73, 164, 166, 171, 187, 200, 332, 346, 492], "inspir": [53, 177, 179, 188], "instabl": [60, 68, 178, 476], "instal": [10, 65, 116, 127, 130, 132, 143, 148, 151, 158, 159, 163, 164, 187, 188, 256, 257, 353, 378, 381, 384, 386, 388, 452, 454, 455, 465, 507], "instanc": [3, 4, 6, 16, 23, 24, 33, 52, 54, 68, 69, 70, 88, 132, 133, 135, 145, 151, 158, 163, 165, 166, 168, 170, 171, 179, 180, 181, 184, 185, 187, 190, 191, 240, 241, 242, 247, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 322, 323, 324, 325, 328, 329, 332, 339, 341, 346, 348, 352, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 434, 437, 441, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 461, 462, 463, 464, 465, 483, 508], "instant": [351, 477], "instantan": 74, "instanti": [53, 54, 57, 91, 94, 132, 134, 158, 163, 309, 332, 410, 412, 415, 417, 419, 421, 423, 425, 427, 492], "instead": [10, 15, 37, 38, 43, 44, 45, 50, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64, 68, 71, 91, 93, 94, 96, 101, 102, 103, 106, 107, 108, 109, 110, 120, 127, 128, 130, 132, 134, 135, 136, 138, 141, 142, 144, 145, 146, 148, 151, 155, 157, 158, 159, 160, 161, 163, 177, 178, 179, 180, 183, 191, 192, 203, 228, 240, 241, 242, 285, 286, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 336, 337, 338, 342, 343, 344, 346, 351, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 399, 436, 462, 463, 464, 465, 477, 487], "institut": [0, 181, 185, 198, 199, 202, 227, 228, 250], "instruct": [68, 70, 74, 116, 127, 159, 163, 164, 179, 186, 188, 283, 508], "insular": [59, 93, 118, 217], "int": [12, 38, 43, 44, 45, 50, 51, 52, 53, 60, 65, 69, 79, 80, 81, 86, 96, 103, 104, 107, 109, 131, 160, 163, 169, 179, 201, 240, 241, 242, 244, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 320, 322, 324, 325, 327, 332, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 348, 349, 351, 352, 357, 363, 373, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 434, 435, 436, 437, 441, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 470, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 487], "int32": [38, 43, 44, 81, 96, 132, 160, 163, 190, 361, 377, 378, 379, 383, 384, 385, 386, 465], "int64": [38, 43, 44, 52, 72, 81, 104, 114, 132, 160, 163, 190, 462, 464], "int8": [132, 160, 163, 350, 364], "integ": [16, 61, 86, 96, 130, 138, 142, 151, 155, 158, 160, 161, 163, 185, 190, 192, 199, 236, 244, 250, 252, 254, 256, 257, 259, 260, 263, 264, 305, 306, 307, 308, 309, 310, 311, 315, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 441, 443, 444, 449, 450, 451, 453, 454, 466, 471, 472, 475], "integr": [101, 136, 151, 163, 191, 379, 492], "intel": [52, 118, 464, 470], "intellig": [0, 86, 118, 200, 202], "intend": [192, 219, 325, 366, 367], "intens": [27, 53, 66, 71, 74, 83, 90, 96, 190, 191, 312, 349, 350, 370, 373, 434, 436, 443, 449, 450, 451, 458, 465, 475, 487, 507], "intent": 179, "intent_cod": [59, 105], "intent_nam": [59, 105], "intent_p1": [59, 105], "intent_p2": [59, 105], "intent_p3": [59, 105], "intention": 188, "inter": [103, 109, 166, 191, 192, 202, 220, 394, 396], "interact": [10, 16, 23, 50, 55, 57, 61, 103, 111, 130, 148, 149, 153, 158, 163, 167, 169, 171, 179, 185, 186, 187, 381, 388, 457, 458, 460, 510], "intercept": [45, 77, 78, 79, 81, 82, 83, 104, 106, 110, 113, 128, 163, 176, 305, 306, 307, 308, 310, 311, 347, 348, 399], "intercept_": [305, 306, 307, 308, 310, 311], "interchang": [154, 163], "interest": [3, 6, 15, 16, 17, 24, 37, 45, 52, 54, 58, 69, 71, 72, 73, 85, 99, 101, 102, 103, 104, 108, 111, 112, 116, 118, 121, 136, 154, 163, 165, 171, 173, 174, 176, 178, 179, 180, 181, 185, 187, 191, 192, 205, 209, 217, 248, 249, 255, 258, 260, 268, 270, 271, 272, 274, 275, 276, 277, 280, 281, 286, 288, 289, 290, 291, 293, 322, 324, 325, 356, 361, 363, 364, 368, 371, 376, 383, 413, 441, 450, 451, 453, 456, 465, 509, 510], "interestingli": 68, "interfac": [41, 65, 130, 134, 154, 158, 161, 163, 170, 178, 179, 185, 305, 306, 495], "intermedi": [46, 70, 174, 187], "intermediari": 50, "intern": [0, 36, 41, 51, 118, 132, 163, 170, 177, 178, 179, 181, 197, 202, 229, 242, 252, 312, 313, 360, 362], "internet": [3, 52, 170, 189, 194, 510], "interpol": [10, 25, 41, 43, 44, 47, 68, 77, 86, 111, 130, 132, 134, 135, 140, 161, 163, 202, 282, 365, 366, 367, 443, 444, 450, 451, 458, 477, 487], "interpret": [16, 26, 41, 54, 71, 118, 167, 176, 177, 178, 181, 198, 199, 233, 250, 254, 256, 257, 260, 261, 362, 399, 507], "interrupt": 181, "intersect": [96, 191, 199, 394, 396, 397, 469], "intersect_mask": 191, "intersubject": [118, 211, 212, 213, 214, 215, 290], "interv": [67, 68, 103, 164, 305, 306, 307, 308, 310, 311, 322, 324, 325, 349, 370, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 443, 444, 451, 464, 470, 475, 487], "intervent": [118, 165, 240], "intra": [32, 34], "intracalcarin": 93, "intracrani": 228, "intrapariet": 107, "intrins": [38, 118, 168, 202, 231, 233, 237, 260, 261, 264, 374], "intro": [1, 8, 68, 116, 187, 288, 332, 349, 363, 434, 438, 439, 444, 451, 456, 474, 509], "introduc": [121, 132, 133, 134, 141, 151, 160, 161, 163, 171, 172, 176, 179, 192, 241, 248, 376, 383, 384, 385, 386, 387, 388, 389, 462, 465], "introduct": [1, 8, 31, 116, 118, 127, 148, 163, 172, 174, 175, 179, 182, 184, 186, 192, 271, 305, 324, 325, 358, 363, 441, 450, 456, 458, 509, 510], "introductori": [1, 116, 179], "inv": 50, "invalid": [11, 61, 114, 127, 135, 138, 163, 194, 238, 378, 384, 465, 469, 501], "invcov": [322, 324, 325], "invers": [6, 49, 61, 62, 101, 116, 118, 153, 163, 166, 167, 171, 178, 186, 189, 242, 247, 258, 268, 322, 324, 325, 329, 376, 384, 432, 437, 447, 448, 456, 457, 462, 509, 510], "inverse_transform": [38, 43, 45, 52, 58, 94, 101, 103, 106, 107, 108, 109, 110, 114, 119, 128, 134, 144, 151, 160, 163, 168, 240, 312, 313, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465, 510], "invert": [101, 108, 129, 154, 163, 178, 192, 240, 322, 324, 325, 376, 379, 385, 400, 434, 437, 441, 443, 444, 447, 449, 450, 451, 458], "invest": 0, "investig": [73, 96, 101, 170, 218, 224, 309], "investiss": 0, "invit": 229, "involv": [68, 70, 72, 103, 111, 118, 181, 187, 197, 248], "inward": 487, "io": [10, 18, 22, 54, 65, 79, 81, 82, 83, 102, 104, 164, 169, 179, 188, 203, 207, 208, 221, 229, 255, 259, 268, 277, 459, 508], "ion": [6, 72, 234, 235, 288], "ip": 54, "iprep": 65, "ipynb": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114], "ipython": [2, 4, 17, 171, 187, 508], "iq": [185, 200, 305, 306, 307, 308], "irb": 198, "irrespect": [134, 163, 181, 449], "is_classif": [135, 163], "is_exclud": 24, "is_us": 107, "is_valid": [121, 151, 163], "isabel": [118, 210], "isbi": [51, 118, 170, 312, 313], "isbn": [118, 319, 323, 324, 325], "isf": [65, 78, 81, 104, 112, 135, 163], "ishai": [3, 33, 34, 40, 101, 118, 218, 271], "isin": [3, 24, 31, 33, 36, 38, 39, 101, 106, 120, 121, 282], "isn": 164, "isnan": [47, 79, 96, 106, 109, 110], "isnul": [121, 282], "isol": [6, 71, 103, 171, 181, 413], "isort": [129, 132, 163], "isotrop": [169, 202], "isovoxel": 176, "israel": 0, "issu": [69, 132, 133, 135, 143, 144, 145, 146, 147, 155, 157, 158, 160, 164, 178, 179, 181, 184, 185, 291, 355, 360], "itali": 0, "item": [10, 22, 24, 35, 67, 68, 70, 73, 103, 109, 121, 131, 163, 282, 283, 284, 285, 335, 394, 396], "iter": [36, 51, 56, 70, 72, 94, 111, 151, 163, 171, 176, 202, 240, 241, 242, 244, 305, 306, 307, 308, 310, 311, 312, 313, 352, 356, 359, 360, 363, 368, 380, 381, 382, 387, 388, 389, 430, 463, 464, 470], "iter_img": [2, 51, 134, 163, 191, 358], "iterrow": 103, "itertool": 81, "its": [2, 3, 16, 20, 28, 33, 38, 41, 43, 47, 59, 61, 68, 70, 86, 90, 91, 92, 96, 98, 101, 103, 120, 121, 132, 134, 140, 143, 151, 154, 156, 158, 160, 161, 163, 164, 165, 168, 170, 171, 172, 174, 176, 177, 178, 179, 181, 184, 185, 188, 192, 218, 235, 247, 260, 262, 271, 282, 283, 284, 285, 305, 306, 307, 308, 310, 311, 312, 313, 319, 323, 332, 334, 339, 346, 347, 348, 350, 361, 377, 380, 383, 387, 434, 435, 436, 437, 441, 443, 444, 447, 449, 450, 451, 452, 453, 454, 455, 461, 462, 463, 464, 465, 492, 502], "itself": [20, 26, 36, 68, 168, 202, 240, 241, 242, 312, 313, 356, 463, 487], "ivan": [141, 148, 163], "ixar_spac": [51, 53, 55, 56, 59, 61, 93], "j": [23, 26, 39, 43, 44, 50, 51, 52, 54, 59, 61, 69, 78, 86, 102, 103, 106, 118, 121, 145, 148, 157, 163, 165, 166, 170, 172, 173, 176, 177, 185, 198, 199, 202, 204, 206, 208, 217, 219, 223, 224, 225, 226, 229, 230, 231, 232, 236, 252, 254, 255, 258, 259, 260, 262, 263, 266, 267, 269, 277, 281, 282, 284, 287, 307, 308, 312, 327, 348, 351, 373, 374, 399, 436, 477, 478, 507], "j_col": 81, "jaakkola": [118, 178, 241, 244], "jack": [118, 172, 236, 263], "jahn": 7, "jain": [0, 132, 163], "jake": [0, 151, 163], "jakob": [39, 118], "jame": [3, 33, 34, 40, 101, 118, 205, 218, 253, 271, 324, 325], "jami": [118, 228], "jan": [0, 118, 122, 163, 373, 374], "janaina": [118, 177, 187, 202], "janet": [118, 197, 248], "jani": [118, 217], "januari": [118, 127, 130, 152, 158, 163, 165], "jaqu": [0, 122, 163], "jare": [118, 197, 248], "jargon": 96, "jason": [0, 122, 132, 148, 163], "javascript": 179, "javier": [0, 156, 163], "javitt": [118, 227], "jawhar": [0, 160, 163], "jean": [0, 51, 52, 74, 118, 121, 122, 145, 148, 163, 165, 168, 170, 178, 204, 210, 217, 226, 241, 244, 277, 282, 284, 312], "jeanett": [103, 118, 171, 185, 187], "jeff": [145, 163], "jeffrei": [118, 176, 197, 248], "jehan": [148, 163], "jell": [0, 78, 118, 127, 128, 163, 327], "jenkinson": [118, 198], "jennif": [3, 33, 34, 40, 101, 118, 218, 271], "jensen": 492, "jepegnanam": [0, 134, 163], "jeremi": [0, 132, 156, 163], "jerom": [0, 129, 130, 132, 141, 145, 147, 148, 149, 151, 152, 160, 163], "jess": [103, 118], "jessica": [61, 118, 201, 209, 230, 233, 251, 261, 265, 266], "jiang": [118, 165, 240], "jill": [118, 198, 201, 206, 217, 251, 254], "jimura": [30, 48, 116, 118, 223, 280, 308, 311, 451, 456, 509], "jimura_poldrack_2012_zmap": 42, "jinja": [179, 473], "jinja2": [65, 161, 163], "jitsi": 508, "jn": [118, 231, 237, 260, 264], "jneurosci": [118, 176], "job": [46, 81, 111, 121, 164, 332, 346, 348, 399], "jobert": [74, 118, 204, 210, 277], "joblib": [46, 52, 55, 56, 59, 61, 111, 127, 130, 132, 151, 154, 158, 163, 168, 241, 305, 306, 307, 308, 310, 311, 312, 313, 332, 346, 352, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 463, 464, 465], "joblibcollisionwarn": 46, "jocn": [118, 228], "jocn_a_00077": [118, 233, 261], "joe": [145, 163], "johann": [0, 151, 163], "johansen": [118, 198], "john": [0, 39, 61, 106, 118, 134, 145, 163, 176, 178, 201, 209, 227, 228, 251, 265, 399], "johnson": [0, 128, 134, 163], "joi": [118, 373, 374, 478], "join": [65, 77, 107, 179, 487, 508], "joint_mni_imag": 358, "jointli": [66, 179, 446, 452, 454, 455, 459, 461], "joliot": [118, 199, 250], "jon": [0, 153, 163], "jona": [0, 52, 118, 145, 163, 464, 470], "jonathan": [59, 61, 78, 118, 177, 202, 209, 230, 231, 237, 260, 264, 265, 266, 327, 373, 374, 436], "jordan": [118, 231, 237, 260, 264], "jordi": [0, 130, 163], "jorg": [118, 202, 231, 237, 260, 264], "joseph": [61, 118, 165, 201, 209, 251, 265], "joset": [118, 176], "josh": [103, 118], "joshi": [0, 118, 132, 163], "joshua": [0, 118, 153, 163, 231, 237, 260, 264], "josien": [118, 165, 240], "joulot": [0, 160, 163], "journal": [106, 118, 176, 187, 202, 217, 228, 231, 233, 237, 260, 261, 264, 399], "jp": 224, "jpg": 201, "jqueri": [157, 163], "jr": [118, 217], "js_plotting_util": [148, 163], "json": [65, 77, 103, 104, 107, 113, 121, 131, 163, 164, 179, 335, 345, 371, 373, 374], "juan": [118, 201, 251], "judg": [36, 88], "judith": [118, 201, 251], "juelich": [157, 163, 194, 238, 257, 501], "juli": [118, 126, 163, 165, 374], "julia": [0, 136, 151, 163], "julich": [118, 220], "julien": [74, 118, 204, 277], "julio": [0, 128, 163], "junction": 61, "june": [118, 134, 141, 144, 147, 156, 163, 177, 187], "jung": [118, 201, 251], "jupyt": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 149, 151, 163, 171, 187, 192, 457, 458, 459, 460, 461, 473, 475, 507], "just": [3, 4, 6, 13, 15, 17, 22, 26, 41, 43, 45, 47, 52, 53, 54, 59, 61, 67, 68, 72, 73, 77, 78, 79, 81, 83, 89, 93, 101, 103, 104, 105, 114, 120, 140, 161, 163, 169, 171, 178, 181, 187, 188, 192, 351, 368, 371, 373, 449, 450, 451, 458, 475, 477, 487, 507], "justifi": 0, "justin": [118, 374], "juxtaposit": 93, "j\u00fclich": 0, "k": [0, 10, 19, 23, 26, 32, 34, 36, 37, 44, 45, 52, 54, 69, 83, 86, 93, 101, 114, 118, 132, 163, 171, 174, 176, 178, 198, 217, 242, 269, 287, 310, 311, 324, 325, 332, 341, 351, 373, 374, 383, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 437, 441, 443, 444, 447, 449, 450, 451, 462, 477, 492], "k4jp8": 221, "k_init": 462, "kabani": [118, 199], "kahn": [52, 118, 464, 470], "kahnt": [118, 176], "kai": [0, 118, 132, 163, 172], "kaleido": [10, 158, 163, 452, 454, 455, 507, 508], "kalyanam": [118, 201, 251], "kamalak": [54, 102, 118, 208, 255], "kamalakar": [0, 125, 136, 138, 141, 145, 146, 148, 151, 155, 163], "kamiel": [118, 227], "kamil": [118, 198], "kamitani": [43, 44, 118, 224, 281], "kanaan": [0, 141, 163], "kaplan": [118, 227], "kardiom": 0, "karl": [118, 234], "karla": [118, 165, 198, 233, 261], "karlsgodt": [118, 269, 287], "kate": [118, 227, 233, 261], "kathmandu": 0, "katovich": [118, 177], "katrin": 118, "keep": [3, 33, 35, 36, 38, 41, 53, 54, 57, 61, 68, 70, 71, 86, 88, 96, 101, 106, 107, 121, 125, 128, 130, 148, 155, 163, 169, 171, 172, 173, 176, 177, 179, 228, 282, 304, 305, 306, 307, 308, 310, 311, 312, 315, 349, 351, 357, 370, 391, 392, 393, 394, 395, 396, 397, 465, 466, 475, 477, 478], "keep_masked_label": [52, 59, 93, 129, 161, 163, 377, 383, 468, 492], "keep_masked_map": [55, 56, 57, 129, 161, 163, 378, 384, 465, 469, 492], "kei": [15, 57, 61, 68, 73, 81, 105, 120, 121, 129, 134, 161, 163, 164, 166, 179, 187, 190, 199, 248, 250, 251, 252, 253, 256, 257, 272, 278, 282, 305, 306, 307, 308, 319, 323, 328, 332, 339, 341, 345, 346, 348, 372, 399, 410, 413, 436, 446, 459, 475, 481, 482, 483, 491], "keith": [103, 118], "keller": [118, 312], "kelli": [61, 118, 202, 209, 219, 227, 230, 265, 266, 373, 374], "kendrick": [118, 172], "kennedi": [118, 206, 217, 254], "kent": [118, 201, 251], "kept": [15, 121, 129, 163, 179, 246, 256, 257, 307, 314, 350, 351, 368, 381, 388, 391, 392, 393, 394, 395, 396, 397, 465, 467, 473, 477], "keribin": [52, 118], "kern": 178, "kernel": [3, 31, 35, 36, 37, 47, 58, 73, 96, 101, 104, 171, 202, 306, 308, 311, 336, 337, 338, 342, 343, 344, 491], "kevin": [0, 128, 163], "keyword": [16, 101, 121, 151, 163, 174, 178, 192, 242, 248, 282, 292, 335, 345, 351, 362, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 440, 441, 442, 443, 444, 446, 448, 449, 450, 451, 453, 454, 455, 459, 465, 477], "kfold": [36, 38, 39, 43, 47, 305, 306, 307, 308, 309, 310, 311], "khale": [118, 373, 374, 478], "khanuja": [118, 227], "khorshidi": [118, 165, 198], "kiar": [0, 151, 163], "kiefer": [118, 177], "kiehl": [118, 201, 251], "kiesling": [0, 128, 163], "kill": 68, "kim": [0, 132, 163], "kimberli": [118, 233, 261], "kind": [3, 17, 31, 50, 53, 57, 59, 61, 81, 114, 120, 144, 163, 165, 169, 172, 178, 185, 240, 487, 488, 489, 507], "kindli": [188, 217], "king": [0, 118, 145, 148, 163, 227], "kingston": 0, "kit": 202, "kitwar": 0, "klass": 41, "klein": 118, "kleinschmidt": [51, 118, 165, 170, 240, 312], "kline": 227, "klingenberg": [118, 177], "kmean": [158, 160, 163, 168, 186, 191, 332, 341, 462, 463], "kmeans_count": 52, "kmeans_labels_img": 52, "kmeans_parcel": 52, "knive": 192, "knop": [118, 187], "know": [7, 11, 22, 86, 121, 135, 163, 178, 179, 181, 185, 247, 284], "knowledg": [61, 119, 166, 181, 386, 492], "known": [7, 12, 23, 36, 41, 103, 113, 154, 171, 172, 176, 179, 181, 183, 232, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 305, 306, 307, 308, 322, 324, 325, 332, 436], "knutson": [118, 177], "kochunov": [118, 236, 263], "kodibagkar": [0, 129, 163], "kodituwakku": [118, 201, 251], "koen": [0, 160, 163], "koji": [118, 223], "koller": [118, 178], "kollokian": [118, 199], "komesu": [118, 201, 251], "koneru": [118, 217], "kong": [118, 231, 260], "konrad": [0, 129, 163], "konstantin": [0, 122, 163], "koplewicz": [118, 227], "korea": 0, "kosha": [59, 118, 373, 374], "kossaifi": [0, 122, 163], "kouw": [118, 206, 254], "kr": 0, "krain": 118, "kriegeskort": [118, 176, 187, 309], "krienen": [118, 231, 237, 260, 264], "krish": [0, 130, 163], "kristin": 118, "krzysztof": [118, 121, 208, 226, 255, 282, 284], "kshitij": [0, 148, 149, 150, 151, 152, 153, 154, 163], "kth": [3, 17, 31], "kuba": [118, 219], "kumari": [0, 132, 163], "kun": [0, 132, 160, 163], "kwarg": [16, 19, 46, 61, 128, 130, 131, 132, 134, 151, 161, 163, 248, 316, 318, 335, 345, 351, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 437, 440, 441, 443, 444, 446, 447, 448, 449, 450, 451, 453, 454, 455, 462, 464, 465, 477], "kwarg_image_filt": 282, "kxm045": [118, 165], "l": [3, 7, 10, 15, 26, 32, 33, 34, 39, 40, 44, 47, 54, 59, 61, 71, 96, 101, 118, 129, 151, 158, 163, 165, 171, 172, 177, 187, 198, 199, 202, 209, 217, 218, 228, 230, 231, 232, 233, 236, 237, 248, 250, 260, 261, 263, 264, 265, 266, 267, 271, 373, 374, 400, 402, 403, 404, 405, 406, 407, 408, 409, 428, 434, 437, 441, 443, 444, 447, 449, 450, 451, 458, 475, 481, 482, 507], "l1": [36, 46, 118, 172, 173, 177, 178, 241, 244, 305, 306, 307, 310, 311], "l1_ratio": [47, 310, 311], "l2": [33, 36, 41, 172, 173, 305, 307, 462, 463, 464], "la": 0, "la5c": [269, 287], "lab": 0, "label": [6, 10, 23, 24, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 44, 45, 46, 50, 52, 55, 56, 57, 61, 64, 67, 68, 69, 85, 93, 96, 99, 101, 103, 106, 107, 114, 116, 118, 120, 127, 128, 130, 131, 134, 140, 143, 148, 151, 155, 156, 158, 160, 163, 164, 166, 168, 171, 172, 174, 176, 179, 185, 190, 191, 192, 199, 201, 208, 209, 217, 218, 220, 224, 225, 229, 231, 236, 237, 248, 250, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 267, 271, 281, 305, 306, 307, 308, 309, 310, 311, 328, 332, 335, 339, 341, 346, 347, 371, 373, 374, 377, 380, 383, 387, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 432, 434, 436, 437, 441, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 485, 497, 509], "label_binar": 41, "label_hemispher": [50, 431], "label_imag": 50, "label_image_left": 50, "label_image_right": 50, "label_map": 474, "label_multi": 41, "label_seed_region": 24, "label_top": [400, 402, 403], "labelbinar": 41, "labelencod": [41, 102], "labelpad": 71, "labels_": [332, 346, 377, 380, 383, 387, 462, 464], "labels_affin": 50, "labels_img": [24, 50, 52, 59, 93, 96, 114, 166, 377, 380, 383, 387, 431, 466, 468, 471, 492], "labels_img_": [52, 168, 377, 380, 383, 387, 463], "labels_list": 431, "labels_mask": [41, 114], "laboratori": 0, "laci": [118, 236, 263], "lack": [130, 163], "ladouceur": [118, 187], "lag": [6, 50, 67, 68], "lag_cor": 50, "lag_correl": 50, "lag_correlation_matrix": 50, "lainhart": [118, 197, 248], "laird": [118, 233, 261], "lambda": 121, "lambertz": [118, 210], "lan": [0, 145, 148, 163], "lancast": [118, 236, 263], "land": 164, "landeau": [118, 199, 250], "lane": [0, 118, 160, 163, 399], "lang": [118, 197, 217, 248], "lang_beta_seri": 103, "lang_corr": 103, "lang_seed_beta_seri": 103, "languag": [54, 103, 104, 113, 118, 121, 194, 204, 210, 274, 277], "language_connectivity_img": 103, "languageloc": [103, 104, 113], "languagelocalizer_desc": [103, 104, 113], "lannuzel": [145, 148, 163], "lapack": [143, 163, 178], "lar": 313, "larg": [3, 13, 32, 33, 38, 42, 44, 52, 57, 59, 67, 71, 72, 74, 118, 121, 149, 163, 164, 168, 171, 172, 173, 174, 176, 178, 179, 181, 185, 186, 187, 190, 192, 204, 219, 226, 277, 282, 284, 332, 334, 339, 378, 384, 391, 392, 393, 394, 395, 396, 430, 463, 492], "large_fmri": 111, "larger": [54, 70, 77, 82, 88, 102, 111, 170, 172, 176, 178, 179, 181, 188, 310, 311, 434, 449, 450, 451, 458], "largest": [144, 163, 178, 360, 391, 392, 393, 394, 395, 396, 397, 433], "largest_connected_compon": [144, 163], "largest_connected_component_img": [144, 163], "larri": [118, 206, 217, 254], "lars_path": 313, "larson": [0, 131, 145, 148, 149, 151, 163], "lashkari": [118, 231, 237, 260, 264], "lasso": [43, 60, 61, 118, 165, 172, 177, 178, 306, 308, 310, 311, 313], "lasso_regressor": [172, 306, 308], "lassocv": [129, 163, 305, 306, 307, 308], "lassolarscv": 43, "last": [3, 35, 37, 43, 58, 74, 150, 163, 164, 181, 187, 188, 246, 247, 351, 358, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 465, 481, 507, 508], "lat_fi": 492, "latent": [108, 185], "later": [3, 6, 10, 23, 24, 39, 41, 43, 65, 72, 93, 103, 104, 107, 114, 164, 181, 190, 202, 254, 256, 257, 335, 355, 431, 434, 441, 443, 444, 446, 450, 451, 452, 454, 455, 473, 492, 507], "latest": [132, 143, 163, 164, 179, 188, 250, 511], "latex": [65, 127, 163, 188], "latter": [50, 164, 172, 178, 240, 241, 242, 256, 257, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465], "laumann": [61, 118, 230, 231, 260, 266, 373], "launch": [153, 163, 164, 171], "laura": [118, 227], "lausann": 0, "law": 198, "lawrenc": [118, 236, 263], "layer": [26, 91], "layout": [134, 148, 163, 309, 401], "lda": 101, "le": [74, 118, 204, 277], "lead": [36, 50, 51, 60, 86, 111, 127, 129, 130, 131, 132, 133, 135, 154, 163, 164, 177, 178, 179, 181, 185, 194, 238, 242, 320, 332, 378, 384, 476, 501, 507], "leak": [46, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427], "learn": [3, 22, 36, 38, 47, 49, 59, 62, 96, 100, 106, 108, 115, 116, 118, 119, 121, 125, 127, 130, 132, 134, 135, 136, 141, 143, 144, 145, 146, 148, 151, 156, 158, 161, 163, 164, 165, 166, 167, 168, 171, 172, 173, 175, 176, 178, 179, 185, 186, 188, 193, 207, 225, 240, 241, 242, 244, 258, 268, 271, 280, 305, 306, 307, 308, 309, 310, 311, 312, 313, 356, 358, 359, 363, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 412, 419, 432, 433, 434, 437, 441, 448, 449, 450, 451, 456, 462, 463, 464, 465, 508, 509, 510], "learner": [305, 306, 307, 308, 310, 311], "learnt": 42, "least": [35, 64, 68, 69, 70, 73, 103, 106, 107, 109, 113, 118, 171, 177, 179, 188, 250, 252, 254, 256, 257, 259, 260, 262, 263, 264, 313, 319, 323, 332, 341, 346, 347, 348, 377, 378, 380, 381, 383, 384, 386, 387, 388, 393, 399, 430, 465, 488, 489, 491, 508], "leav": [18, 26, 31, 35, 41, 171, 176, 181, 355], "leave_spac": [401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427], "leaveonegroupout": [3, 31, 32, 34, 35, 41, 101, 145, 163, 171, 174, 176, 305, 306, 307, 308, 309, 310, 311], "leavepgroupsout": [305, 306, 307, 308], "lebihan": [118, 210], "lectur": [118, 165, 183, 187, 240], "ledoit": [61, 178], "ledoitwolf": 240, "lee": [0, 118, 134, 163], "lefort": [0, 132, 156, 163], "left": [7, 10, 13, 21, 23, 24, 26, 27, 36, 39, 43, 47, 50, 52, 53, 54, 61, 67, 68, 69, 70, 73, 74, 78, 79, 81, 82, 88, 96, 104, 109, 114, 118, 134, 141, 142, 146, 151, 154, 156, 163, 169, 187, 191, 199, 206, 211, 212, 213, 214, 215, 216, 217, 224, 227, 248, 254, 256, 257, 262, 275, 277, 285, 290, 291, 293, 302, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 434, 436, 437, 441, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 461, 475, 481, 482, 491, 492], "left_001": 103, "left_connectom": 50, "left_coord": 7, "left_data": 7, "left_fac": 7, "left_hemi": 50, "left_right": [401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427], "leftminusrightbuttonpress": 70, "legaci": [161, 163, 399], "legacy_format": [134, 158, 163], "legacy_output": [161, 163], "legarreta": [0, 153, 163], "legend": [10, 19, 32, 34, 36, 45, 46, 52, 61, 64, 69, 131, 163, 164, 453], "legend_guid": 19, "legibl": 114, "leipzig": 0, "lemaitr": [0, 148, 151, 163], "len": [3, 13, 23, 32, 34, 35, 36, 41, 50, 51, 54, 65, 66, 67, 68, 69, 73, 78, 81, 93, 96, 101, 104, 107, 113, 114, 121, 244, 305, 306, 307, 308, 310, 311, 312, 313, 322, 324, 325, 329, 332, 346, 363, 366, 379, 385, 391, 393, 394, 396, 463], "length": [3, 16, 58, 69, 73, 79, 132, 163, 169, 179, 192, 255, 258, 305, 306, 307, 308, 310, 311, 319, 323, 324, 325, 336, 337, 338, 342, 343, 344, 352, 377, 378, 379, 380, 381, 382, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 434, 435, 441, 444, 447, 448, 449, 450, 451, 463, 475, 487], "leon": [0, 151, 163], "leonard": [0, 158, 163], "less": [6, 21, 41, 51, 52, 53, 59, 66, 68, 70, 73, 74, 79, 81, 90, 96, 103, 121, 148, 149, 156, 163, 176, 178, 179, 181, 188, 323, 349, 370, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 443, 444, 451, 475, 510], "lessorequ": [121, 282], "lessov": [61, 118, 209, 265], "lessthan": [121, 282], "let": [2, 3, 4, 6, 7, 11, 13, 16, 24, 26, 39, 41, 43, 52, 59, 65, 66, 68, 70, 72, 73, 74, 77, 79, 80, 81, 88, 95, 101, 105, 111, 113, 114, 172, 179, 187, 188, 350, 362], "leticia": [118, 187], "letter": 474, "level": [6, 7, 10, 15, 16, 19, 26, 35, 42, 51, 52, 54, 59, 66, 71, 73, 75, 77, 84, 100, 108, 109, 115, 118, 127, 128, 129, 130, 131, 132, 133, 154, 155, 160, 161, 163, 167, 168, 172, 175, 178, 179, 181, 182, 183, 185, 188, 190, 194, 196, 202, 204, 235, 240, 241, 242, 244, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 293, 294, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 322, 324, 325, 327, 332, 335, 341, 345, 346, 347, 348, 349, 351, 352, 356, 357, 362, 363, 367, 370, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 435, 437, 438, 439, 443, 444, 445, 449, 450, 451, 452, 453, 454, 455, 456, 458, 462, 463, 464, 465, 470, 473, 474, 475, 477, 483, 503, 507, 509, 510], "level_nam": 263, "leventh": [118, 227], "leverag": [21, 154, 163, 186, 187, 305, 306, 463, 508], "lfcd": 248, "lh": 224, "li": [91, 118, 227], "liam": [118, 217], "liau": [118, 373, 374, 478], "lib": [3, 4, 15, 17, 19, 21, 31, 36, 43, 46, 51, 53, 61, 70, 94, 114], "liber": [50, 81], "liblinear": [36, 41, 305, 307], "librari": [5, 96, 102, 120, 148, 163, 174, 179, 182, 187, 191, 496, 507, 508, 510], "licenc": [205, 253], "licens": [0, 129, 134, 163, 250, 251, 253, 260, 264], "lie": [58, 241, 244, 377, 383, 435, 468], "liem": [0, 149, 151, 153, 163], "life": [148, 163], "lifespan": 0, "lifetim": 200, "light": [13, 39, 143, 149, 151, 163, 179, 348], "like": [6, 7, 10, 13, 17, 26, 36, 38, 41, 43, 44, 50, 52, 57, 59, 61, 68, 81, 83, 91, 93, 94, 96, 103, 105, 121, 129, 134, 151, 155, 158, 159, 160, 161, 163, 164, 177, 178, 179, 180, 181, 184, 185, 188, 189, 191, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 293, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 322, 323, 324, 325, 327, 329, 332, 334, 335, 345, 346, 348, 349, 350, 351, 352, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 434, 435, 436, 441, 443, 444, 445, 446, 447, 449, 450, 451, 452, 454, 455, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 483, 487, 492, 494, 507], "likelihood": [56, 178, 181, 240, 319, 322, 323, 324, 325], "likelihoodmodel": [319, 322], "likelihoodmodelresult": [132, 160, 163, 324, 325], "likewis": 169, "lilla": [118, 231, 237, 260, 264], "lim": 435, "lim_i": 435, "lim_x": 435, "limbic": [118, 217], "limegreen": 19, "limit": [15, 16, 26, 45, 77, 90, 107, 128, 163, 166, 176, 178, 179, 282, 374, 435, 436], "linalg": [47, 50, 178], "linden": [59, 118, 374], "lindquist": [118, 148, 163, 351, 477], "line": [10, 15, 22, 25, 39, 41, 51, 54, 93, 132, 163, 171, 178, 179, 188, 228, 351, 413, 457, 477, 487, 508], "line2d": [404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 437], "line_sample_point": 25, "linear": [3, 6, 26, 31, 35, 36, 37, 39, 47, 64, 68, 70, 73, 101, 104, 106, 113, 118, 135, 145, 163, 171, 175, 180, 181, 182, 185, 186, 191, 192, 202, 219, 244, 282, 305, 306, 307, 308, 312, 313, 322, 324, 325, 332, 346, 351, 365, 366, 367, 374, 399, 445, 477, 487, 491, 495, 499, 508, 510], "linear_model": [39, 41, 43, 44, 47, 114, 313], "linear_svc": 101, "lineardiscriminantanalysi": 101, "linearli": [192, 202, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 443, 444, 451], "linearsvc": [54, 101, 102, 176, 305, 307], "linestyl": 54, "linewidth": [15, 19, 45, 46, 64, 449, 450, 457], "lingual": [93, 492], "lingual_l": 199, "link": [55, 118, 121, 129, 141, 148, 153, 163, 164, 167, 171, 174, 179, 181, 185, 188, 198, 208, 210, 227, 250, 255, 401, 411, 412, 437, 510], "linkag": 448, "linkcheck_": 164, "link\u00f6p": 0, "linspac": [5, 13, 52, 64, 69], "lint": [131, 163, 179, 188], "linter": [132, 163, 179], "linux": 188, "liotti": [118, 236, 263], "liquid": 0, "lisandrelli": [118, 207, 268], "list": [0, 2, 3, 6, 10, 11, 15, 16, 17, 22, 24, 32, 35, 41, 47, 50, 51, 52, 54, 56, 58, 61, 64, 65, 72, 73, 74, 77, 78, 81, 82, 87, 96, 102, 103, 104, 107, 113, 114, 120, 121, 127, 129, 130, 131, 132, 133, 134, 136, 139, 141, 142, 143, 147, 148, 151, 157, 158, 160, 161, 163, 165, 171, 179, 185, 187, 188, 190, 191, 192, 199, 201, 217, 220, 224, 226, 231, 235, 236, 240, 241, 242, 244, 246, 247, 248, 250, 251, 254, 256, 257, 258, 259, 260, 262, 263, 264, 265, 268, 269, 271, 274, 275, 276, 277, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 301, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 327, 329, 330, 332, 334, 335, 339, 345, 346, 347, 348, 349, 351, 352, 360, 361, 363, 366, 368, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 435, 442, 443, 444, 445, 446, 448, 449, 451, 452, 453, 454, 455, 460, 461, 463, 465, 466, 467, 468, 469, 474, 475, 477, 485, 486, 488, 489, 490, 508, 511], "list_of_2d_arrai": 44, "listedcolormap": 41, "listen": [6, 26, 68, 70, 71, 83, 277], "listening_gt_rest_eff_map": 6, "listening_gt_rest_z_map": 6, "liter": [346, 348], "literatur": [103, 166, 232, 248, 357, 374, 478], "littl": [77, 171, 172, 179], "liu": [118, 202, 231, 237, 260, 264, 373, 374, 478], "livio": [78, 118, 327], "ll": [2, 6, 52, 61], "llc": 0, "llera": [118, 373, 374], "llf": 322, "lloyd": [39, 118], "llrrrrr": 65, "lo": 0, "load": [2, 4, 6, 9, 10, 22, 24, 26, 29, 52, 53, 55, 56, 57, 61, 64, 65, 70, 71, 79, 90, 91, 95, 98, 107, 108, 109, 110, 111, 112, 113, 114, 116, 119, 127, 128, 129, 132, 133, 141, 143, 146, 148, 157, 158, 160, 161, 163, 167, 170, 174, 175, 178, 179, 187, 189, 191, 219, 228, 248, 249, 252, 254, 256, 257, 258, 261, 262, 265, 266, 267, 268, 271, 272, 273, 276, 277, 280, 281, 282, 284, 286, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 312, 313, 335, 350, 361, 362, 364, 373, 374, 437, 454, 456, 457, 461, 479, 483, 485, 486, 495, 497, 507, 509, 510], "load_confound": [59, 68, 113, 128, 129, 130, 132, 158, 161, 163, 166, 192, 335, 374], "load_confounds_strategi": [59, 130, 158, 163, 166, 192, 373], "load_fsaverag": [10, 23, 24, 39, 70, 113, 114, 132, 163, 211, 212, 213, 214, 215, 216, 290, 483], "load_fsaverage_data": [10, 23, 24, 39, 70, 113, 114, 132, 163, 211, 212, 213, 214, 215, 216, 290], "load_img": [2, 38, 95, 96, 105, 111, 112, 141, 163, 179, 190, 191], "load_mni152_brain_mask": [107, 141, 157, 163, 219, 272], "load_mni152_gm_mask": [26, 157, 163, 219, 272], "load_mni152_gm_templ": [157, 163, 219, 272, 296, 298, 300], "load_mni152_templ": [95, 157, 163, 219, 272, 273, 295, 297, 300, 350, 353, 358, 362, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 487], "load_mni152_wm_mask": [26, 157, 163, 219, 272], "load_mni152_wm_templ": [157, 163, 219, 272, 297, 298, 299], "load_niimg": [149, 163], "load_nki": [24, 114, 132, 163, 227], "load_sample_motor_activation_imag": [2, 10, 13, 14, 15, 16, 17, 26, 92, 95, 98, 128, 163, 285, 483], "load_surf_data": [143, 163, 452, 454, 455, 461], "load_surf_mesh": [143, 160, 163, 507], "loadabl": [377, 378, 379, 380, 381, 382, 452, 454, 455, 461], "loadings_init_": 313, "loadsav": 179, "loadtxt": [43, 44], "lobe": [72, 263], "lobul": [93, 118, 217], "loc": [19, 34, 36, 45, 46, 52, 64, 69, 71, 103, 104, 400, 402, 403], "local": [22, 26, 43, 44, 52, 63, 67, 68, 75, 78, 79, 81, 82, 83, 90, 100, 103, 104, 107, 112, 113, 115, 116, 118, 151, 152, 160, 163, 164, 179, 180, 181, 185, 188, 190, 192, 194, 198, 224, 231, 248, 256, 257, 260, 274, 275, 276, 277, 278, 281, 282, 284, 309, 356, 368, 371, 376, 385, 399, 427, 442, 443, 451, 456, 509], "local_region": [53, 169, 465, 467], "localis": [118, 185, 348, 399], "localizer_anat_filenam": 18, "localizer_dataset": [18, 79, 83, 109, 110], "localizer_ev": 74, "localizer_first_level": [67, 68, 70], "localizer_tmap_filenam": 18, "locat": [6, 11, 16, 23, 24, 27, 31, 32, 34, 36, 37, 38, 43, 44, 45, 50, 52, 55, 56, 57, 58, 59, 61, 65, 71, 77, 79, 87, 91, 96, 97, 104, 106, 109, 111, 113, 134, 148, 157, 163, 178, 179, 181, 188, 190, 208, 244, 250, 265, 267, 268, 309, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 474, 507], "lock": [147, 163], "log": [47, 52, 56, 79, 81, 96, 132, 138, 163, 164, 176, 178, 319, 322, 323, 324, 325, 362, 445], "log10": [38, 45, 47, 79, 81, 96, 106, 109, 110, 348, 399, 474], "log_": [45, 106, 109, 110], "log_img": 362, "log_p_valu": 96, "log_p_values_img": 96, "logan": [118, 177], "logarithm": [79, 81, 348], "logger": [132, 163], "logic": [96, 121, 179, 304], "logical_and": [96, 106], "logical_not": [32, 38, 79, 109], "logical_or": 32, "logilab": 0, "login": 164, "logist": [32, 33, 118, 172, 173, 177, 305, 307, 310], "logistic_l1": [32, 172, 305, 307], "logistic_l2": [32, 41, 172, 305, 307], "logisticregressioncv": [41, 129, 163, 305, 306, 307, 308], "logl": [319, 322, 323, 324, 325], "loglf": [319, 323], "loglikelihood": [319, 323], "logo_cv": 41, "logp_max_mass": [81, 348, 399], "logp_max_s": [81, 348, 399], "logp_max_t": [45, 81, 106, 109, 348, 399], "logp_max_tfc": [109, 348, 399], "loic": [0, 122, 123, 125, 126, 136, 138, 141, 151, 163], "loki": 46, "lokybackend": [33, 38, 39, 45, 46, 47, 51, 106, 109], "london": [0, 118, 185, 269, 287], "long": [52, 100, 115, 116, 121, 164, 179, 181, 249, 252, 352, 361, 364, 367, 373, 374, 376, 385, 436, 509], "longer": [46, 108, 125, 127, 128, 129, 130, 145, 149, 151, 154, 156, 158, 160, 161, 163, 164, 181, 374, 454], "longest": 68, "look": [1, 6, 8, 10, 23, 24, 26, 31, 34, 43, 47, 59, 65, 67, 68, 70, 71, 74, 105, 108, 114, 116, 121, 132, 134, 135, 148, 149, 159, 163, 171, 179, 180, 181, 187, 188, 192, 207, 250, 252, 254, 256, 257, 259, 260, 262, 263, 264, 271, 282, 284, 292, 368, 377, 380, 383, 387, 444, 450, 454, 456, 509], "look_up_t": 59, "loop": [36, 41, 47, 103, 154, 163, 171, 178, 191, 305, 306, 307, 308], "loos": 178, "lorocv": 176, "lorrain": [118, 176], "lose": [15, 97, 507], "loss": [135, 163, 168, 173, 310, 374], "loss_pass": 192, "lost": 178, "lot": [67, 72, 73, 88, 125, 148, 151, 163, 164, 165, 171, 172, 178, 179, 187, 244], "loui": [0, 118, 202, 219], "love": 3, "low": [10, 45, 68, 96, 108, 118, 133, 148, 154, 163, 171, 177, 178, 179, 181, 187, 188, 190, 191, 192, 235, 248, 290, 293, 294, 301, 305, 306, 307, 308, 310, 311, 312, 313, 351, 373, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 444, 446, 459, 463, 465, 476, 477], "low_pass": [3, 52, 54, 55, 56, 57, 58, 59, 61, 64, 91, 93, 94, 102, 148, 163, 192, 305, 306, 307, 308, 310, 311, 312, 313, 351, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 463, 465, 476, 477, 492], "lower": [19, 33, 34, 41, 42, 54, 71, 79, 91, 96, 138, 163, 170, 173, 177, 178, 185, 191, 240, 246, 247, 307, 308, 322, 324, 325, 393, 396, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 436, 440, 441, 443, 444, 446, 447, 448, 449, 450, 451, 452, 454, 455, 476], "lower_cutoff": [91, 393, 396], "lowercas": [378, 379, 381, 382, 384, 385, 386, 388, 389, 462, 465], "lowest": [150, 163], "lprojector": [15, 414, 428], "lr": [15, 17, 405, 428, 437, 443, 447, 475, 507], "lrprojector": [15, 428], "lsa_beta_map": 103, "lsa_events_df": 103, "lsa_glm": 103, "lss": [130, 163], "lss_beta_map": 103, "lss_design_matric": 103, "lss_events_df": 103, "lss_glm": 103, "lss_transform": 103, "lt": [38, 77, 91, 93, 94, 492], "luc": [118, 210], "luca": [118, 177, 202], "lucina": 118, "luisa": [0, 151, 155, 157, 163], "luke": [0, 156, 163], "lunch": 172, "lund": 0, "lut": [11, 52, 59, 93, 114, 134, 163, 179, 250, 252, 254, 256, 257, 259, 260, 262, 263, 264, 377, 380, 383, 387, 492], "lut_": [377, 380, 383, 387], "luz": 0, "lvert": [26, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 443, 444, 451], "lw": [43, 71], "ly": 465, "lyon": 0, "lyr": [15, 406, 428, 437, 443, 447, 475, 507], "lyrprojector": [15, 408, 428], "lyrz": [14, 15, 61, 407, 428, 437, 443, 447, 475, 507], "lyrzprojector": [15, 409, 428], "lyttelton": [118, 202, 252], "lzr": [15, 56, 408, 428, 437, 443, 447, 475, 507], "lzrprojector": [15, 406, 428], "lzry": [15, 409, 428, 437, 443, 447, 475, 507], "lzryprojector": [15, 407, 428], "m": [3, 13, 26, 32, 33, 34, 40, 44, 52, 61, 68, 77, 101, 103, 106, 118, 141, 163, 164, 165, 176, 179, 185, 187, 188, 198, 199, 202, 206, 208, 209, 211, 212, 213, 214, 215, 217, 218, 229, 230, 231, 233, 236, 237, 250, 254, 259, 260, 261, 263, 264, 265, 266, 269, 271, 287, 290, 322, 324, 325, 348, 399, 508], "m_cmap": 13, "ma": [21, 38, 43, 51, 53, 110], "maarten": [118, 227, 373, 374], "mac": [138, 163], "macaluso": [118, 202], "macau": 0, "mach": [52, 118, 464, 470], "machin": [0, 31, 36, 47, 52, 96, 119, 155, 163, 164, 172, 173, 174, 179, 185, 186, 207, 280, 508, 510], "machlouzarid": [118, 208, 255], "macintosh": [118, 198], "mackai": [118, 198, 233, 261], "mackinnon": [118, 324, 325], "maco": [132, 163], "macro": [118, 312], "macroscop": [118, 199, 250], "made": [0, 22, 41, 104, 113, 128, 154, 157, 158, 161, 163, 175, 178, 179, 181, 185, 187, 188, 228, 234, 305, 306, 307, 308, 310, 311, 458], "madhyastha": [145, 148, 163], "magenta": [43, 71, 507], "magic": [59, 105], "magnet": [0, 26, 118, 181, 185, 197, 202, 217, 252, 277], "magnetoencephalographi": 185, "magnetom": 234, "magnitud": [26, 185, 435, 439], "magnusson": 0, "maguir": [118, 217], "mai": [3, 13, 18, 26, 31, 43, 46, 52, 59, 66, 68, 73, 74, 82, 88, 103, 107, 111, 118, 120, 121, 125, 149, 151, 159, 163, 165, 171, 172, 174, 179, 181, 185, 188, 190, 192, 194, 198, 204, 238, 240, 248, 277, 282, 291, 305, 306, 308, 310, 311, 320, 335, 339, 345, 348, 366, 374, 377, 378, 383, 384, 399, 452, 454, 455, 468, 474, 487, 501], "main": [7, 32, 59, 65, 68, 69, 72, 96, 123, 160, 163, 164, 171, 176, 179, 180, 185, 188, 190, 192, 250, 332, 334, 339, 371, 394, 396, 401, 435], "main_deriv": 69, "main_path": 371, "mainli": 178, "maint": [126, 127, 128, 129, 130, 131, 132, 136, 138, 141, 142, 143, 145, 148, 151, 153, 156, 157, 158, 159, 160, 163, 179], "maint_tool": [164, 179], "maintain": [0, 127, 151, 157, 163, 164, 179, 188], "mainten": [158, 163], "mairal": 208, "major": [57, 96, 179, 187, 233], "make": [4, 6, 9, 13, 16, 23, 24, 26, 29, 32, 38, 41, 44, 50, 52, 54, 59, 61, 68, 69, 70, 71, 72, 77, 79, 81, 82, 86, 101, 108, 111, 116, 118, 121, 127, 129, 130, 131, 132, 136, 137, 142, 148, 156, 157, 158, 160, 161, 163, 164, 169, 171, 172, 176, 177, 180, 184, 185, 186, 187, 190, 192, 228, 254, 262, 271, 282, 293, 294, 302, 305, 306, 307, 308, 320, 366, 403, 404, 405, 406, 407, 408, 409, 411, 413, 414, 416, 418, 420, 422, 424, 426, 443, 446, 451, 453, 455, 456, 457, 458, 459, 461, 462, 483, 487, 492, 507, 508, 509], "make_first_level_design_matrix": [64, 66, 133, 158, 163, 180, 332, 442], "make_glm_report": [127, 135, 155, 158, 161, 163, 332, 345, 346], "make_localizer_contrast": 68, "make_pipelin": [39, 43, 47, 114], "make_second_level_design_matrix": [80, 184], "makri": [118, 206, 217, 254], "male": [68, 217, 248], "manag": [129, 130, 163, 179, 188, 508], "mandatori": [178, 351], "mani": [3, 4, 13, 16, 24, 38, 40, 42, 43, 44, 45, 46, 51, 52, 54, 59, 72, 81, 88, 101, 102, 103, 110, 121, 156, 163, 167, 168, 169, 171, 172, 173, 174, 177, 178, 179, 181, 185, 188, 191, 192, 242, 282, 284, 305, 306, 307, 308, 309, 310, 311, 348, 355, 383, 386, 399, 446, 471, 472, 487, 507], "manipul": [1, 8, 41, 58, 68, 91, 98, 120, 143, 163, 187, 190, 271, 292, 368, 444, 456, 495, 509, 510], "manner": [187, 443], "mannheim": 0, "manon": [0, 160, 163], "manual": [16, 17, 20, 36, 37, 38, 43, 44, 45, 50, 54, 55, 56, 57, 58, 59, 61, 64, 65, 71, 83, 85, 91, 93, 94, 99, 101, 102, 103, 104, 106, 107, 108, 109, 110, 113, 116, 120, 164, 165, 171, 187, 189, 192, 271, 312, 313, 356, 361, 363, 364, 368, 376, 383, 441, 450, 451, 452, 454, 455, 456, 507, 509, 510], "map": [2, 3, 7, 9, 11, 12, 15, 16, 20, 21, 23, 24, 29, 35, 39, 42, 47, 49, 53, 54, 55, 56, 57, 59, 62, 64, 65, 68, 70, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 85, 86, 88, 89, 91, 92, 93, 94, 95, 99, 100, 102, 104, 106, 108, 111, 113, 114, 115, 116, 118, 119, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 143, 144, 148, 149, 151, 154, 155, 156, 158, 161, 163, 165, 166, 167, 170, 172, 174, 175, 176, 179, 180, 181, 182, 185, 186, 187, 190, 191, 192, 199, 201, 202, 204, 205, 208, 210, 211, 212, 213, 214, 215, 217, 219, 220, 225, 229, 231, 233, 236, 240, 241, 242, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 272, 275, 276, 277, 282, 283, 284, 285, 286, 290, 293, 294, 295, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 328, 332, 341, 345, 346, 348, 349, 351, 353, 359, 368, 370, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 433, 435, 436, 443, 444, 446, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 469, 472, 474, 475, 477, 483, 487, 491, 497, 502, 509, 510], "map_label": 12, "map_left": [10, 23, 24, 114, 206, 262, 507], "map_nam": [345, 346, 348, 475], "map_right": [10, 23, 24, 114, 206, 262], "map_typ": [112, 282], "maps_img": [50, 55, 56, 57, 166, 192, 378, 381, 384, 388, 432, 449, 465, 467, 469, 472, 492], "maps_img_": [378, 381, 384, 388, 465], "maps_masker_": [161, 163, 312, 313], "maraviglia": [118, 202], "march": [124, 146, 155, 163, 309], "marcu": [118, 176, 198, 228, 374], "marek": [118, 232, 267], "margaret": [118, 227], "margeta": [0, 122, 163], "margin": [54, 366, 435], "marginali": 492, "marguli": [118, 121, 226, 282, 284], "mari": [118, 187], "mariano": [118, 210], "mario": [118, 236, 263], "marisa": [118, 231, 237, 260, 264], "mark": [43, 59, 103, 118, 165, 198, 373, 374], "markdown": [65, 202], "marked_pixel": 43, "markedli": 71, "marker": [43, 131, 149, 151, 154, 156, 163, 164, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 437, 447, 457, 458, 460, 465, 467, 510], "marker_color": [16, 43, 58, 64, 103, 149, 151, 163, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 460, 507], "marker_coord": [58, 64, 103, 149, 151, 163, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 460], "marker_label": [156, 163, 460], "marker_s": [16, 43, 58, 64, 103, 149, 151, 163, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 460, 507], "markiewicz": [0, 151, 163], "marquand": [118, 187], "marseil": 0, "martha": [118, 217], "marti": [106, 118, 236, 263, 399], "martigni": 0, "martin": [0, 118, 136, 141, 155, 163, 201, 206, 211, 212, 213, 214, 215, 219, 251, 290, 351, 477], "martino": 118, "masa": [43, 44, 118, 224, 281], "mask": [3, 9, 21, 24, 29, 31, 32, 33, 35, 36, 37, 41, 42, 43, 45, 46, 47, 50, 51, 52, 53, 57, 58, 59, 61, 64, 65, 70, 71, 73, 77, 79, 81, 85, 94, 98, 99, 104, 108, 109, 110, 113, 116, 119, 121, 127, 128, 130, 132, 133, 134, 135, 141, 142, 143, 145, 148, 151, 154, 156, 157, 158, 163, 168, 172, 175, 177, 186, 187, 189, 190, 202, 204, 210, 218, 219, 224, 241, 248, 268, 270, 271, 272, 273, 277, 281, 295, 296, 299, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 327, 329, 332, 346, 348, 349, 350, 351, 352, 356, 357, 358, 361, 363, 364, 368, 370, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 432, 433, 434, 435, 436, 441, 443, 444, 445, 446, 449, 450, 451, 452, 454, 455, 456, 463, 464, 465, 467, 468, 469, 470, 473, 475, 477, 487, 491, 492, 495, 497, 507, 509, 510], "mask4_vt": 3, "mask_": [111, 310, 311], "mask_arg": [52, 91, 94, 192, 312, 313, 379, 385, 463, 492], "mask_atla": 96, "mask_chance_scor": 34, "mask_data": [24, 96], "mask_fac": [19, 34, 120, 190, 218, 271], "mask_face_filenam": 19, "mask_face_littl": [120, 190, 218, 271], "mask_filenam": [3, 32, 34, 37, 42, 101, 106, 120, 171], "mask_hous": [19, 34, 120, 190, 218, 271], "mask_house_filenam": 19, "mask_house_littl": [120, 190, 218, 271], "mask_img": [12, 27, 31, 34, 35, 36, 37, 38, 41, 42, 43, 44, 47, 52, 55, 56, 57, 61, 65, 68, 71, 73, 77, 79, 91, 93, 94, 101, 106, 107, 111, 120, 129, 145, 149, 153, 154, 158, 163, 171, 176, 179, 191, 192, 295, 305, 306, 307, 308, 309, 327, 332, 335, 346, 349, 350, 351, 357, 370, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 397, 398, 433, 436, 446, 464, 465, 467, 468, 469, 470, 471, 472, 487, 492], "mask_img_": [52, 68, 79, 81, 91, 94, 120, 134, 163, 192, 305, 306, 307, 308, 309, 310, 311, 312, 313, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 465], "mask_label": [12, 436], "mask_nam": 34, "mask_path": 111, "mask_quality_check": [79, 109], "mask_roi": 224, "mask_scor": 34, "mask_strategi": [3, 51, 52, 91, 94, 108, 151, 157, 163, 192, 305, 306, 307, 308, 312, 313, 379, 385, 463, 492], "mask_typ": [305, 306, 307, 308, 312, 313, 379, 385, 392, 395, 463], "mask_vt": [3, 16, 17, 19, 32, 34, 41, 96, 101, 120, 171, 190, 218, 271], "mask_vt_filenam": [19, 96], "masked_atla": [130, 163, 468], "masked_data": [27, 102, 114, 191], "masked_less": [43, 110], "masked_pv": 110, "masked_scores_": 309, "maskedarrai": [3, 17, 31], "masker": [34, 37, 38, 41, 43, 44, 45, 50, 52, 54, 55, 56, 57, 58, 59, 61, 64, 71, 77, 91, 94, 96, 100, 101, 102, 103, 106, 107, 108, 109, 110, 111, 115, 116, 120, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 151, 154, 155, 156, 157, 158, 160, 161, 163, 164, 166, 168, 171, 174, 179, 180, 189, 191, 194, 238, 240, 262, 293, 294, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 348, 370, 373, 374, 399, 435, 445, 448, 452, 456, 463, 465, 468, 469, 471, 472, 483, 489, 495, 501, 509, 510], "masker_": [65, 68, 79, 81, 305, 306, 307, 308, 310, 311, 312, 313, 332, 346, 463], "maskwarn": [42, 46, 161, 163], "mason": 0, "mass": [0, 35, 61, 64, 70, 73, 81, 104, 113, 160, 163, 348, 399, 431, 474, 491, 495], "mass_univari": [45, 106, 109, 154, 160, 163, 176, 184, 495], "massachusett": 0, "massimiliano": [118, 177, 202], "massiv": [100, 115, 116, 175, 271, 276, 277, 356, 358, 363, 376, 385, 399, 427, 443, 451, 456, 499, 509], "master": [188, 237, 260], "mat": [65, 235, 289, 375, 448], "match": [2, 6, 16, 105, 107, 121, 128, 129, 130, 131, 134, 151, 155, 156, 158, 161, 163, 164, 170, 176, 179, 185, 189, 192, 233, 250, 282, 304, 305, 306, 307, 308, 310, 311, 312, 313, 332, 335, 345, 346, 348, 352, 361, 363, 366, 371, 373, 377, 378, 379, 383, 384, 385, 391, 393, 394, 396, 435, 445, 449, 452, 454, 455, 461, 463, 464, 465, 466], "math": 104, "math_img": [79, 81, 85, 87, 99, 100, 112, 115, 116, 131, 132, 134, 139, 163, 191, 249, 302, 361, 363, 364, 451, 456, 509], "mathbf": 47, "mathemat": [0, 139, 163, 185, 362, 494], "mathi": [26, 118], "mathia": [0, 128, 163], "mathieu": [0, 129, 163], "matlotlib": 437, "matplolib": [10, 13], "matplotlib": [5, 6, 10, 12, 16, 19, 25, 26, 27, 32, 34, 37, 40, 41, 43, 44, 45, 46, 47, 51, 52, 54, 55, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 71, 77, 80, 81, 82, 86, 96, 98, 102, 103, 104, 109, 110, 111, 114, 125, 129, 130, 131, 135, 138, 143, 145, 146, 148, 151, 153, 158, 159, 161, 163, 166, 171, 188, 191, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 465, 507, 508], "matric": [3, 9, 29, 35, 44, 50, 53, 54, 59, 63, 65, 70, 72, 73, 75, 77, 82, 102, 113, 116, 132, 136, 141, 144, 145, 155, 156, 158, 161, 163, 165, 166, 167, 178, 180, 189, 190, 191, 193, 194, 202, 208, 240, 241, 242, 244, 247, 279, 322, 324, 325, 332, 339, 366, 439, 440, 448, 452, 454, 455, 456, 491, 504, 509, 510], "matrix": [6, 23, 35, 39, 43, 44, 47, 50, 53, 54, 56, 64, 65, 66, 68, 70, 71, 73, 76, 77, 78, 79, 81, 82, 83, 84, 86, 94, 103, 104, 105, 107, 109, 113, 116, 127, 128, 132, 133, 134, 146, 151, 154, 163, 168, 169, 171, 172, 178, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 210, 240, 241, 242, 243, 244, 245, 247, 270, 282, 284, 305, 306, 307, 308, 310, 311, 319, 322, 323, 324, 325, 330, 332, 333, 335, 339, 341, 345, 346, 347, 348, 353, 364, 366, 369, 375, 376, 379, 385, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 437, 438, 439, 440, 448, 462, 463, 464, 475, 491, 509, 510], "matrix_plot": [134, 163], "matter": [12, 25, 26, 45, 46, 59, 68, 77, 91, 141, 154, 157, 163, 171, 176, 178, 179, 184, 186, 191, 192, 202, 219, 228, 268, 272, 273, 286, 293, 296, 297, 298, 299, 300, 305, 306, 307, 308, 312, 313, 335, 373, 379, 385, 392, 395, 463, 487], "matthew": [106, 118, 165, 198, 227, 399], "matthia": [0, 122, 163], "matthieu": [0, 160, 163], "matur": [61, 118, 209, 265], "maumet": [118, 121, 226, 282, 284, 435], "maura": [3, 33, 34, 40, 101, 118, 218, 271], "maurizio": [118, 374], "max": [0, 12, 32, 36, 45, 47, 52, 54, 56, 58, 60, 61, 71, 82, 86, 90, 106, 107, 109, 114, 118, 156, 163, 165, 178, 240, 366, 367, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 436, 441, 443, 444, 446, 449, 450, 451, 452, 454, 455, 458, 459, 461], "max_imag": [107, 112, 121, 282], "max_it": [43, 51, 53, 55, 56, 60, 61, 94, 108, 241, 242, 244, 305, 306, 307, 308, 310, 311], "max_iter_cv": 242, "max_n_sampl": 60, "max_no_improv": 462, "max_precis": 60, "max_usag": 111, "maxim": [36, 185, 322, 324, 325, 355, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427], "maximilian": [0, 129, 163], "maximum": [16, 35, 51, 68, 73, 81, 91, 94, 96, 104, 105, 130, 131, 151, 163, 176, 185, 192, 220, 240, 241, 242, 244, 249, 256, 257, 282, 291, 301, 305, 306, 307, 308, 310, 311, 312, 313, 319, 320, 323, 332, 341, 346, 348, 349, 350, 368, 370, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 403, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 437, 443, 463, 465, 467, 468, 475, 491, 507], "maxixmum": [132, 163], "maxprob": [11, 59, 93, 167, 256, 257, 510], "mayb": [68, 121, 399], "mayberg": [118, 205, 253], "mayer": [118, 201, 251], "mazoy": [118, 199, 250], "mazziotta": [118, 236, 263], "mb": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 509], "mccarthi": [118, 198], "mcgill": [0, 219], "mcgovern": 0, "mckai": [118, 233, 261], "mckinstri": [118, 202, 219], "mcleod": [26, 118], "md": [0, 237, 260], "md5sum": 3, "mean": [3, 6, 7, 15, 16, 17, 19, 22, 23, 26, 27, 32, 33, 34, 35, 36, 37, 38, 41, 43, 44, 45, 46, 47, 50, 52, 53, 54, 58, 59, 61, 64, 68, 71, 72, 73, 79, 85, 91, 93, 94, 96, 97, 99, 101, 105, 106, 107, 108, 114, 116, 121, 133, 141, 145, 148, 151, 155, 157, 163, 164, 165, 168, 169, 171, 178, 179, 182, 185, 187, 188, 191, 192, 198, 205, 240, 241, 242, 244, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 322, 324, 325, 327, 332, 340, 341, 346, 348, 349, 350, 351, 352, 357, 362, 363, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 399, 434, 435, 436, 449, 450, 451, 452, 454, 455, 456, 458, 462, 463, 464, 465, 467, 468, 470, 471, 472, 475, 477, 478, 487, 492, 509, 510], "mean_": [50, 54, 114, 165, 240], "mean_correl": [53, 169], "mean_correlation_matrix": [50, 54], "mean_data": 114, "mean_epi_img": 32, "mean_fmri": 38, "mean_fmri_img": 106, "mean_func": 97, "mean_func_img": [52, 94], "mean_haxbi": [27, 191], "mean_haxby_img": [16, 17], "mean_imag": 72, "mean_img": [3, 6, 16, 17, 19, 26, 27, 32, 33, 35, 38, 52, 71, 72, 73, 87, 91, 94, 96, 97, 106, 108, 114, 134, 163, 191, 362], "mean_img_": [35, 73], "mean_scor": [54, 102], "mean_test_scor": 102, "meaning": [101, 103, 114, 138, 148, 151, 163, 179, 181, 208, 221, 351, 477], "meaningless": [3, 171, 181, 349], "meant": [3, 6, 108, 247, 320, 473], "meanwhil": [129, 130, 163], "measur": [25, 36, 51, 52, 54, 61, 68, 79, 102, 103, 109, 111, 118, 144, 154, 163, 165, 166, 168, 169, 175, 176, 178, 179, 181, 185, 187, 192, 198, 200, 248, 279, 374, 445, 447, 462, 487, 507], "mechan": [33, 171, 240, 241, 242, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465], "med": 250, "media": [107, 112], "medial": [10, 24, 61, 93, 114, 118, 176, 446, 452, 454, 455], "medial_wal": [10, 24, 492], "medialtemporallob": 267, "median": [151, 163, 202, 377, 380, 383, 387, 452, 454, 455, 468], "medic": [0, 47, 118, 165, 169, 177, 199, 200, 219, 225, 228, 240, 258, 465], "medicin": 228, "medium": [188, 290, 293, 294, 301, 459], "meet": [118, 160, 163, 198, 202, 508], "meg": [181, 185], "megan": [118, 217], "megatrawl": [9, 29, 116, 118, 138, 163, 194, 279, 448, 456, 509], "meghana": [145, 148, 163], "mehdi": [0, 54, 102, 118, 122, 126, 136, 145, 151, 163], "meisler": [0, 128, 130, 163], "mejia": [26, 118], "melbourn": 0, "melissa": [118, 227], "mem": [8, 29, 48, 62, 75, 84, 99, 115, 117, 509], "member": [179, 188, 508], "memor": [173, 181], "memori": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 140, 148, 149, 163, 168, 169, 178, 179, 191, 192, 241, 290, 293, 294, 301, 305, 306, 307, 308, 310, 311, 312, 313, 320, 325, 332, 335, 346, 352, 356, 366, 367, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 459, 463, 464, 465, 476, 479, 480, 492, 507], "memory_": [241, 305, 306, 307, 308, 310, 311, 312, 313, 332, 346, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 465], "memory_level": [3, 35, 37, 38, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64, 65, 77, 79, 91, 93, 94, 101, 102, 103, 106, 107, 108, 109, 110, 169, 192, 241, 305, 306, 307, 308, 310, 311, 312, 313, 332, 335, 346, 352, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 463, 464, 465, 492], "memory_profil": 111, "memory_usag": 111, "memoryerror": 190, "menn": [118, 227, 373, 374], "mensch": [0, 51, 118, 126, 136, 138, 141, 163, 170, 208, 255, 313], "mental": [0, 68, 70, 74, 83, 118, 187, 204, 277, 283], "mention": [103, 111, 127, 129, 130, 163, 179, 180, 181], "menuet": [148, 163], "merg": [26, 151, 163, 164, 168, 179, 185, 188, 191, 464], "meriaux": [74, 118, 204, 277], "merlin": [118, 312], "mert": [118, 231, 237, 260, 264], "mesh": [23, 24, 39, 70, 113, 114, 128, 132, 134, 143, 148, 151, 156, 160, 163, 180, 185, 186, 192, 211, 212, 213, 214, 215, 216, 290, 293, 294, 301, 305, 306, 307, 308, 310, 311, 312, 313, 317, 362, 380, 381, 382, 387, 388, 389, 413, 446, 452, 453, 454, 455, 459, 461, 463, 479, 480, 481, 482, 483, 484, 485, 486, 487], "mesh_coordin": 23, "mesh_typ": [10, 24, 39, 70, 113, 294, 301], "meshdimensionerror": [161, 163], "mess": 38, "messag": [3, 86, 138, 163, 188, 241, 242, 244, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 327, 332, 341, 346, 348, 352, 363, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 399, 462, 463, 464, 465, 470], "met": [128, 163], "meta": [0, 3, 15, 100, 103, 107, 115, 116, 121, 209, 230, 240, 241, 242, 284, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 356, 361, 362, 364, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 443, 451, 456, 462, 463, 464, 465, 509], "meta_analysis_img": 112, "metabol": [69, 181, 185], "metadata": [59, 65, 103, 104, 105, 113, 121, 128, 134, 151, 163, 191, 226, 227, 240, 241, 242, 282, 283, 284, 285, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 335, 345, 346, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465], "metadata_rout": [240, 241, 242, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465], "metadatarequest": [240, 241, 242, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465], "metaprior": 47, "method": [10, 15, 16, 26, 28, 33, 38, 42, 47, 49, 51, 53, 61, 62, 88, 91, 93, 94, 96, 103, 109, 111, 116, 118, 119, 121, 128, 129, 130, 132, 134, 135, 136, 140, 144, 148, 151, 154, 155, 156, 158, 160, 161, 163, 165, 166, 168, 172, 173, 177, 178, 179, 183, 185, 186, 187, 190, 191, 192, 198, 199, 202, 226, 232, 234, 236, 240, 241, 242, 252, 263, 268, 279, 282, 284, 305, 306, 307, 308, 309, 310, 311, 312, 313, 322, 323, 324, 325, 327, 332, 346, 348, 353, 356, 357, 358, 363, 366, 367, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 441, 450, 456, 457, 459, 460, 461, 462, 463, 464, 465, 473, 477, 478, 507, 509, 510], "methodolog": 205, "methodologi": 220, "metric": [33, 37, 41, 43, 44, 54, 81, 134, 151, 163, 171, 172, 176, 185, 205, 305, 306, 307, 308], "meudec": [0, 127, 155, 156, 157, 158, 159, 160, 163], "mf": [77, 118, 198], "mgh": [59, 93, 237, 264], "mgrid": [25, 86], "mgz": [149, 150, 163, 413, 452, 453, 454, 455, 461, 485], "mi": 68, "mia": [0, 130, 163], "mialab": 251, "miami": 0, "mib": 111, "miccai": [118, 165, 240], "micha": [0, 132, 163], "michael": [0, 39, 54, 102, 118, 122, 126, 136, 148, 163, 177, 187, 200, 201, 227, 229, 251, 259, 374], "michel": [0, 47, 52, 118, 122, 128, 129, 130, 132, 163, 177, 187, 204, 225, 227, 258, 277], "mickl": [118, 233, 261], "microarchitectur": 181, "mid": 492, "middl": [47, 59, 68, 93, 118, 148, 156, 163, 228], "midrul": 65, "midx": 104, "miezin": [61, 118, 230, 266], "might": [6, 36, 64, 105, 108, 170, 174, 176, 181, 185, 188, 190, 198, 254, 268, 362, 369, 374, 386, 391, 392, 393, 394, 395, 396, 444], "migrat": [127, 163], "mikiten": [118, 236, 263], "mil": [118, 198], "mila": 0, "mild": 68, "milham": [54, 102, 118, 200, 227], "miller": [118, 165, 198, 233, 261], "millimet": [86, 176, 192, 295, 296, 297, 298, 299, 300, 305, 306, 307, 308, 309, 312, 313, 332, 346, 348, 368, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 463, 465, 467, 474], "mimic": [174, 256, 257], "min": [2, 3, 4, 6, 10, 11, 18, 20, 21, 22, 28, 40, 42, 52, 54, 56, 58, 61, 72, 79, 81, 82, 83, 102, 104, 105, 106, 107, 111, 156, 157, 163, 366, 367, 434, 436, 441, 443, 444, 446, 447, 449, 450, 451, 452, 454, 455, 458, 459, 461], "min_dist": [64, 332, 345, 346, 474, 475], "min_n_sampl": 60, "min_onset": [65, 332, 334, 335, 339], "min_region_s": [53, 89, 90, 169, 465, 467], "min_siz": 466, "minc": 202, "minctracc": 202, "mind": [0, 54, 171, 172, 179, 185], "mine": [118, 187, 202, 252], "ming": [118, 217], "mini": 462, "minibatchkmean": [52, 462, 463], "miniconda": 508, "minim": [59, 65, 111, 179, 185, 332, 334, 339, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 449], "minimalist": 3, "minimize_memori": [65, 70, 71, 73, 77, 79, 180, 332, 335, 346], "minimum": [35, 64, 73, 79, 81, 91, 104, 105, 125, 127, 130, 132, 136, 141, 143, 144, 145, 148, 151, 154, 156, 158, 161, 163, 164, 169, 188, 202, 349, 350, 370, 377, 380, 383, 387, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 430, 437, 458, 465, 466, 467, 468, 474, 475, 491], "minn": [198, 279], "minnesota": 0, "minor": [125, 131, 144, 146, 163, 171], "minu": [121, 181, 377, 380, 383, 387], "minut": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 164, 181, 222, 233, 234, 277], "mion": 69, "mion_response_funct": 69, "mion_time_deriv": 69, "miranda": [118, 177, 187, 202], "mirror": [188, 192, 248, 249, 250, 251, 252, 253, 254, 258, 261, 262, 264, 271, 272, 280, 281, 286, 291, 301], "miscellan": [131, 163], "misclassif": [305, 306, 307, 308, 310, 311], "misconcept": 181, "misfit": 68, "mishandl": [26, 118], "mislabel": 188, "misleadingli": 171, "miss": [10, 23, 24, 57, 72, 79, 86, 114, 129, 132, 157, 163, 179, 185, 339, 377, 378, 380, 383, 384, 387, 393, 396, 492], "misspecif": 68, "mit": [0, 231, 237, 260], "mitchel": 208, "mitig": [118, 436], "mitra": [118, 373], "mix": [30, 47, 48, 116, 175, 177, 194, 248, 280, 308, 310, 311, 451, 456, 509], "miyawaki": [30, 48, 116, 118, 192, 194, 281, 353, 370, 376, 379, 385, 427, 451, 456, 492, 509], "miyawaki2008": [43, 44, 91, 492], "miyawaki2008_reconstruction_": 44, "miyawaki_dataset": [44, 91], "miyawaki_filenam": [91, 192], "miyawaki_mean_img": [91, 192], "miykael": [148, 163], "mkdir": [3, 4, 6, 7, 16, 24, 31, 35, 44, 51, 52, 58, 64, 65, 70, 73, 74, 77, 88, 96, 104, 111, 113], "mm": [4, 16, 35, 39, 42, 46, 58, 61, 64, 73, 86, 89, 93, 97, 104, 148, 163, 169, 191, 202, 231, 232, 255, 260, 267, 373, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 432, 465, 466, 467, 475, 487, 491, 492], "mm3": [6, 35, 64, 65, 73, 93, 104, 202, 465, 467, 474, 491], "mmface": [72, 235], "mne": [149, 150, 163], "mni": [16, 51, 55, 57, 68, 70, 95, 104, 113, 118, 121, 141, 151, 154, 160, 163, 166, 184, 185, 187, 191, 192, 194, 199, 202, 208, 209, 220, 221, 230, 232, 238, 250, 252, 258, 265, 266, 267, 307, 335, 353, 386, 392, 395, 434, 437, 441, 443, 444, 449, 450, 451, 457, 458, 460, 475, 501, 507], "mni152": [4, 41, 95, 127, 157, 163, 181, 194, 217, 219, 220, 231, 251, 253, 260, 264, 272, 273, 295, 296, 297, 298, 299, 300, 305, 306, 307, 308, 310, 311, 312, 313, 358, 379, 385, 392, 395, 449, 450, 451, 458, 463, 501], "mni152_file_path": [4, 187], "mni152_templ": 298, "mni152nlin2009casym": [65, 132, 163, 219], "mni152nlin2009casym_": 65, "mni152nlin2009casym_contrast": 65, "mni152nlin2009casym_corrdesign": 65, "mni152nlin2009casym_desc": [50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 65, 87, 93, 94, 97, 108], "mni152nlin2009casym_design": 65, "mni152nlin2009casym_mask": 65, "mni152nlin2009casym_stat": 65, "mni152nlin2009csasym": [219, 272, 273, 295, 296, 297, 298, 299, 300], "mni152nlin2009csym": 219, "mni152nlin6asym": [194, 238, 374, 501], "mni152sym": [194, 238], "mni152templ": [93, 332, 346, 434, 449, 450, 451, 475], "mni305": 185, "mni_icbm152_nlin_sym_09a_nifti": 219, "mni_icbm152_t1_tal_nlin_sym_09a_convert": [4, 187], "mo": 3, "moaepilot": 6, "mock": 179, "modal": [121, 171, 179, 181, 235, 289, 371], "modality_fold": 371, "mode": [9, 15, 17, 22, 29, 55, 56, 58, 63, 75, 85, 96, 99, 116, 118, 141, 146, 149, 155, 160, 163, 179, 180, 186, 191, 192, 198, 208, 249, 255, 258, 261, 282, 284, 332, 339, 358, 376, 384, 386, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 433, 446, 449, 451, 456, 465, 473, 491, 492, 509, 510], "model": [6, 30, 33, 35, 36, 42, 44, 47, 48, 51, 53, 54, 63, 64, 66, 70, 74, 75, 76, 83, 84, 100, 101, 102, 106, 108, 109, 115, 116, 118, 127, 128, 130, 132, 145, 151, 154, 156, 158, 159, 160, 161, 163, 165, 167, 169, 171, 175, 176, 177, 178, 179, 182, 183, 185, 186, 187, 192, 193, 198, 227, 237, 240, 241, 244, 270, 273, 274, 277, 278, 281, 305, 306, 307, 308, 310, 311, 312, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 348, 349, 352, 353, 356, 357, 362, 363, 367, 370, 373, 374, 376, 379, 385, 386, 399, 412, 426, 427, 438, 439, 443, 450, 451, 456, 473, 475, 491, 492, 495, 499, 508, 509, 510], "model_and_arg": 104, "model_ev": [133, 163, 442], "model_evalu": [305, 306, 307, 308], "model_intercept": [79, 81, 109, 348, 399], "model_select": [3, 31, 32, 34, 35, 36, 37, 38, 39, 41, 43, 45, 46, 47, 54, 101, 102, 148, 163, 171, 174, 305, 306, 307, 308], "model_titl": 69, "modeladhd": [64, 491], "modelflm": 491, "modelin": [65, 77, 79], "models_confound": [65, 103, 104, 335], "models_ev": [65, 104, 335], "models_run_img": [65, 103, 104, 335], "modelsurfac": 113, "modeltwo": 73, "moder": 178, "modern": [136, 163], "modif": [179, 181, 185], "modifi": [18, 52, 61, 96, 107, 134, 141, 158, 163, 164, 179, 188, 192, 234, 282, 284, 366, 367, 370, 452, 454, 455, 461, 476, 477], "modify_d": 282, "modul": [5, 7, 20, 28, 36, 37, 38, 43, 44, 45, 50, 53, 54, 55, 56, 57, 58, 59, 61, 64, 89, 90, 91, 93, 94, 95, 96, 101, 102, 103, 106, 107, 108, 109, 110, 111, 118, 120, 121, 127, 128, 129, 130, 132, 136, 143, 145, 146, 154, 158, 160, 161, 163, 164, 174, 179, 182, 187, 188, 192, 196, 228, 282, 305, 306, 307, 308, 309, 310, 311, 322, 324, 325, 339, 348, 350, 360, 362, 489, 496, 500, 502, 503, 504, 507], "modular": [118, 179, 209, 351, 477], "modulated_ev": [66, 74], "mohammad": [0, 128, 129, 130, 132, 163], "mohlberg": 118, "moment": [24, 120, 164], "monitor": 185, "monkei": 69, "montag": 446, "montgomeri": [118, 324, 325], "month": [164, 188], "montreal": [181, 185, 199, 202, 250], "montr\u00e9al": 0, "mood": [118, 187], "moor": 323, "more": [2, 3, 4, 6, 7, 9, 10, 13, 14, 15, 17, 20, 22, 23, 24, 26, 28, 29, 30, 31, 33, 35, 42, 43, 45, 46, 49, 51, 52, 53, 55, 57, 58, 59, 61, 63, 64, 65, 68, 70, 71, 72, 73, 76, 77, 79, 81, 82, 85, 88, 91, 93, 96, 101, 103, 104, 106, 107, 109, 111, 112, 113, 114, 116, 118, 119, 120, 121, 123, 127, 128, 129, 132, 134, 135, 137, 141, 143, 145, 147, 148, 151, 153, 157, 158, 159, 161, 163, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 183, 185, 187, 188, 190, 191, 192, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 210, 217, 218, 219, 220, 224, 225, 226, 228, 232, 233, 236, 237, 241, 248, 250, 251, 252, 253, 258, 260, 261, 263, 264, 268, 270, 271, 272, 273, 277, 279, 280, 282, 284, 286, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 310, 311, 312, 313, 320, 322, 324, 325, 332, 335, 345, 346, 348, 352, 363, 371, 372, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 399, 410, 412, 415, 417, 419, 421, 423, 425, 427, 434, 444, 449, 450, 451, 456, 458, 459, 462, 463, 464, 465, 467, 474, 476, 487, 492, 495, 507, 508, 509, 510], "more_smooth_anat_img": 4, "moreno": [118, 204, 227, 277], "moreov": [65, 104, 132, 160, 163, 179, 187, 371], "morgan": [118, 198], "morito": [43, 44, 118, 224, 281], "moritz": [0, 145, 148, 151, 163], "morpholog": [96, 191, 391, 392, 393, 394, 395, 396], "morphologi": 185, "morphometr": 217, "morphometri": [30, 48, 76, 84, 116, 171, 182, 185, 186, 187, 194, 272, 273, 286, 306, 311, 345, 346, 349, 356, 367, 376, 385, 399, 427, 439, 451, 456, 473, 491, 509, 510], "morri": [118, 228], "mortem": 220, "mosaic": [16, 131, 155, 163, 410, 429, 434, 441, 444, 449, 450, 451, 475, 507], "mosaicslic": [412, 415, 429], "most": [7, 25, 35, 43, 45, 46, 52, 64, 77, 96, 103, 111, 113, 129, 134, 145, 148, 163, 164, 171, 172, 173, 174, 176, 178, 179, 181, 188, 191, 192, 198, 205, 220, 332, 334, 339, 444, 452, 454, 455, 461, 463, 465, 467, 481, 487, 507], "most_frequ": 102, "mostli": [135, 163, 178, 370], "motion": [66, 68, 71, 104, 113, 118, 156, 163, 180, 202, 268, 332, 335, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 465, 477], "motiv": 96, "motor": [15, 16, 17, 18, 26, 54, 68, 70, 79, 81, 92, 93, 95, 100, 107, 115, 116, 204, 277, 302, 356, 376, 385, 399, 443, 456, 507, 509], "motor_imag": 507, "mountain": 0, "mourao": [118, 177, 202], "mour\u00e3o": [118, 187], "move": [73, 128, 129, 130, 132, 134, 135, 136, 143, 156, 161, 163], "movement": [59, 107, 118, 187, 192], "movi": [51, 52, 53, 55, 57, 58, 87, 91, 94, 108, 151, 163, 167, 186, 187, 192, 207, 268, 510], "mpl": [188, 400, 402, 403], "mr": 181, "mrg": 179, "mri": [7, 12, 44, 59, 63, 75, 96, 103, 116, 118, 120, 158, 163, 179, 180, 181, 182, 185, 187, 190, 197, 199, 202, 207, 217, 219, 228, 231, 248, 250, 260, 268, 272, 286, 334, 373, 374, 509], "mriqc": 65, "ms_e": [324, 325], "msb": 114, "msdl": [9, 22, 29, 55, 57, 116, 166, 191, 194, 258, 358, 412, 431, 449, 451, 456, 501, 507, 509], "msdl_atla": [21, 54, 55, 56, 57, 102], "msdl_atlas_dataset": 56, "msdl_coord": [54, 102], "msdl_data": [54, 102], "msdl_roi": [21, 55, 56, 57, 225, 258], "mse": [46, 135, 163, 310, 324], "msg": 317, "mstep": [202, 252], "msw": 114, "much": [0, 3, 25, 34, 43, 45, 54, 79, 81, 102, 103, 111, 148, 163, 171, 178, 179, 181, 187, 209, 265, 355, 366, 487], "mudassir": [0, 132, 163], "multi": [22, 30, 44, 45, 46, 48, 49, 51, 61, 62, 103, 116, 118, 130, 161, 163, 165, 166, 167, 169, 175, 178, 185, 187, 190, 191, 192, 193, 202, 225, 235, 241, 242, 244, 252, 258, 268, 271, 289, 312, 332, 376, 379, 384, 385, 432, 437, 448, 456, 492, 509, 510], "multi_mask": 489, "multi_plt": 41, "multi_scal": 44, "multiclass": [37, 172], "multimask": [134, 163, 192], "multimod": 194, "multimodal_fac": 72, "multimodal_fmri": 72, "multimodal_smri": 72, "multiniftilabelsmask": [50, 127, 129, 131, 161, 163, 189, 492, 510], "multiniftimapsmask": [50, 127, 129, 131, 161, 163, 189, 492, 510], "multiniftimask": [43, 44, 130, 135, 155, 157, 163, 189, 305, 306, 307, 308, 310, 311, 312, 313, 346, 348, 399, 463, 492, 510], "multioutput": [43, 311], "multioutputregressor": 311, "multipca": [379, 492], "multipl": [2, 6, 20, 45, 50, 79, 81, 83, 104, 111, 113, 118, 128, 154, 155, 163, 167, 172, 174, 176, 179, 182, 183, 185, 189, 190, 191, 198, 202, 220, 224, 252, 304, 322, 340, 346, 348, 358, 361, 362, 377, 378, 379, 380, 381, 382, 399, 410, 412, 415, 429, 434, 441, 444, 446, 449, 450, 451, 458, 491, 492, 507, 510], "multiple_spatial_regress": 279, "multipli": [68, 86, 92, 141, 163, 176, 178, 247, 319, 322, 324, 325, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 437, 446, 452, 454, 455, 459, 461], "multiprocess": 111, "multiscal": [9, 29, 43, 44, 111, 116, 118, 128, 139, 163, 194, 224, 238, 252, 281, 450, 456, 509], "multisit": [118, 197, 248], "multisurfacelabelsmask": [161, 163], "multisurfacemapsmask": [161, 163], "multisurfacemask": [161, 163, 189, 312, 313, 380, 381, 463, 510], "multivari": [39, 100, 115, 116, 118, 170, 185, 186, 187, 201, 251, 268, 358, 363, 376, 385, 451, 456, 495, 508, 509], "multivoxel": [103, 118, 171, 223], "mumford": [103, 118, 171, 185, 187, 269, 287], "murat": [59, 118, 374], "must": [6, 11, 36, 74, 77, 96, 135, 160, 161, 163, 164, 171, 172, 174, 176, 178, 179, 180, 181, 188, 190, 192, 198, 241, 242, 244, 250, 271, 279, 294, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 323, 332, 339, 345, 346, 347, 348, 351, 357, 363, 364, 366, 368, 373, 377, 378, 379, 380, 381, 382, 383, 385, 387, 391, 393, 394, 395, 396, 397, 398, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 435, 437, 440, 442, 443, 444, 445, 446, 449, 450, 451, 452, 453, 454, 455, 457, 459, 461, 463, 468, 471, 472, 474, 475, 477, 478, 481, 482, 487, 507], "mutabl": [133, 163], "mutual": [134, 163, 310, 311, 377, 380, 383, 387], "mvpa": [30, 116, 185, 187, 224, 510], "mw": [118, 198], "mwrc1oas1_0001_mr1_mpr_an": 46, "mwrc1oas1_0001_mr1_mpr_anon_fslswapdim_bet": [45, 77], "mwrc1oas1_0002_mr1_mpr_an": 46, "mwrc1oas1_0003_mr1_mpr_an": 46, "mwrc1oas1_0004_mr1_mpr_an": 46, "mwrc1oas1_0005_mr1_mpr_an": 46, "mwrc1oas1_0007_mr1_mpr_an": 46, "mwrc1oas1_0009_mr1_mpr_an": 46, "mwrc1oas1_0010_mr1_mpr_an": 46, "mwrc1oas1_0012_mr1_mpr_an": 46, "mwrc1oas1_0013_mr1_mpr_an": 46, "mwrc1oas1_0015_mr1_mpr_an": 46, "mwrc1oas1_0016_mr1_mpr_an": 46, "mwrc1oas1_0019_mr1_mpr_an": 46, "mwrc1oas1_0022_mr1_mpr_an": 46, "mwrc1oas1_0023_mr1_mpr_an": 46, "mwrc1oas1_0025_mr1_mpr_an": 46, "mwrc1oas1_0026_mr1_mpr_an": 46, "mwrc1oas1_0029_mr1_mpr_an": 46, "mwrc1oas1_0031_mr1_mpr_an": 46, "mwrc1oas1_0032_mr1_mpr_an": 46, "mwrc1oas1_0037_mr1_mpr_an": 46, "mwrc1oas1_0038_mr1_mpr_an": 46, "mwrc1oas1_0039_mr1_mpr_an": 46, "mwrc1oas1_0041_mr1_mpr_an": 46, "mwrc1oas1_0042_mr1_mpr_an": 46, "mwrc1oas1_0044_mr1_mpr_an": 46, "mwrc1oas1_0045_mr1_mpr_an": 46, "mwrc1oas1_0049_mr1_mpr_an": 46, "mwrc1oas1_0050_mr1_mpr_an": 46, "mwrc1oas1_0052_mr1_mpr_an": 46, "mwrc1oas1_0053_mr1_mpr_an": 46, "mwrc1oas1_0054_mr1_mpr_an": 46, "mwrc1oas1_0055_mr1_mpr_an": 46, "mwrc1oas1_0056_mr1_mpr_an": 46, "mwrc1oas1_0059_mr1_mpr_an": 46, "mwrc1oas1_0060_mr1_mpr_an": 46, "mwrc1oas1_0061_mr1_mpr_an": 46, "mwrc1oas1_0064_mr1_mpr_an": 46, "mwrc1oas1_0065_mr1_mpr_an": 46, "mwrc1oas1_0067_mr1_mpr_an": 46, "mwrc1oas1_0069_mr1_mpr_an": 46, "mwrc1oas1_0070_mr1_mpr_an": 46, "mwrc1oas1_0071_mr1_mpr_an": 46, "mwrc1oas1_0072_mr1_mpr_an": 46, "mwrc1oas1_0078_mr1_mpr_an": 46, "mwrc1oas1_0079_mr1_mpr_an": 46, "mwrc1oas1_0080_mr1_mpr_an": 46, "mwrc1oas1_0082_mr1_mpr_an": 46, "mwrc1oas1_0086_mr1_mpr_an": 46, "mwrc1oas1_0090_mr1_mpr_an": 46, "mwrc1oas1_0091_mr1_mpr_an": 46, "mwrc1oas1_0094_mr1_mpr_an": 46, "mwrc1oas1_0096_mr1_mpr_an": 46, "mwrc1oas1_0098_mr1_mpr_an": 46, "mwrc1oas1_0099_mr1_mpr_an": 46, "mwrc1oas1_0101_mr1_mpr_an": 46, "mwrc1oas1_0103_mr1_mpr_an": 46, "mwrc1oas1_0104_mr1_mpr_an": 46, "mwrc1oas1_0106_mr1_mpr_an": 46, "mwrc1oas1_0111_mr1_mpr_an": 46, "mwrc1oas1_0113_mr1_mpr_an": 46, "mwrc1oas1_0114_mr1_mpr_an": 46, "mwrc1oas1_0115_mr1_mpr_an": 46, "mwrc1oas1_0117_mr1_mpr_an": 46, "mwrc1oas1_0119_mr1_mpr_an": 46, "mwrc1oas1_0120_mr1_mpr_an": 46, "mwrc1oas1_0121_mr1_mpr_an": 46, "mwrc1oas1_0123_mr1_mpr_an": 46, "mwrc1oas1_0124_mr1_mpr_an": 46, "mwrc1oas1_0126_mr1_mpr_an": 46, "mwrc1oas1_0131_mr1_mpr_an": 46, "mwrc1oas1_0135_mr1_mpr_an": 46, "mwrc1oas1_0136_mr1_mpr_an": 46, "mwrc1oas1_0138_mr1_mpr_an": 46, "mwrc1oas1_0144_mr1_mpr_an": 46, "mwrc1oas1_0145_mr1_mpr_an": 46, "mwrc1oas1_0146_mr1_mpr_an": 46, "mwrc1oas1_0148_mr1_mpr_an": 46, "mwrc1oas1_0150_mr1_mpr_an": 46, "mwrc1oas1_0155_mr1_mpr_an": 46, "mwrc1oas1_0159_mr1_mpr_an": 46, "mwrc1oas1_0160_mr1_mpr_an": 46, "mwrc1oas1_0162_mr1_mpr_an": 46, "mwrc1oas1_0163_mr1_mpr_an": 46, "mwrc1oas1_0164_mr1_mpr_an": 46, "mwrc1oas1_0165_mr1_mpr_an": 46, "mwrc1oas1_0167_mr1_mpr_an": 46, "mwrc1oas1_0169_mr1_mpr_an": 46, "mwrc1oas1_0173_mr1_mpr_an": 46, "mwrc1oas1_0174_mr1_mpr_an": 46, "mwrc1oas1_0176_mr1_mpr_an": 46, "mwrc1oas1_0177_mr1_mpr_an": 46, "mwrc1oas1_0178_mr1_mpr_an": 46, "mwrc1oas1_0180_mr1_mpr_an": 46, "mwrc1oas1_0181_mr1_mpr_an": 46, "mwrc1oas1_0182_mr1_mpr_an": 46, "mwrc1oas1_0184_mr1_mpr_an": 46, "mwrc1oas1_0188_mr1_mpr_an": 46, "mwrc1oas1_0189_mr1_mpr_an": 46, "mwrc1oas1_0190_mr1_mpr_an": 46, "mwrc1oas1_0193_mr1_mpr_an": 46, "mwrc1oas1_0199_mr1_mpr_an": 46, "mwrc1oas1_0200_mr1_mpr_an": 46, "mwrc1oas1_0202_mr1_mpr_an": 46, "mwrc1oas1_0203_mr1_mpr_an": 46, "mwrc1oas1_0204_mr1_mpr_an": 46, "mwrc1oas1_0205_mr1_mpr_an": 46, "mwrc1oas1_0207_mr1_mpr_an": 46, "mwrc1oas1_0208_mr1_mpr_an": 46, "mwrc1oas1_0209_mr1_mpr_an": 46, "mwrc1oas1_0211_mr1_mpr_an": 46, "mwrc1oas1_0212_mr1_mpr_an": 46, "mwrc1oas1_0214_mr1_mpr_an": 46, "mwrc1oas1_0216_mr1_mpr_an": 46, "mwrc1oas1_0217_mr1_mpr_an": 46, "mwrc1oas1_0218_mr1_mpr_an": 46, "mwrc1oas1_0220_mr1_mpr_an": 46, "mwrc1oas1_0223_mr1_mpr_an": 46, "mwrc1oas1_0226_mr1_mpr_an": 46, "mwrc1oas1_0227_mr1_mpr_an": 46, "mwrc2oas1_0001_mr1_mpr_anon_fslswapdim_bet": [45, 77], "my_funct": 188, "my_numb": 179, "myeong": [0, 158, 163], "mzayek": [0, 127, 128, 129, 130, 132, 160, 163], "n": [15, 23, 28, 41, 44, 45, 52, 53, 54, 59, 60, 61, 65, 71, 77, 79, 81, 82, 86, 93, 96, 102, 103, 105, 106, 107, 109, 110, 111, 112, 117, 118, 122, 123, 125, 126, 136, 138, 141, 163, 169, 172, 178, 179, 181, 192, 199, 209, 217, 229, 240, 250, 259, 265, 268, 269, 279, 287, 305, 306, 307, 308, 310, 311, 312, 313, 319, 323, 324, 325, 332, 341, 351, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 436, 437, 447, 463, 465, 468, 469, 477, 508], "n_add_reg": 339, "n_alpha": [242, 310, 311], "n_class": [305, 306, 307, 308, 310, 311], "n_classes_": [305, 307, 310], "n_clf": 44, "n_cluster": [52, 462, 464, 470], "n_clusters_": 464, "n_col": [332, 345, 346, 348, 438, 475], "n_column": [73, 181, 247], "n_compcor": [373, 374], "n_compon": [51, 53, 94, 107, 108, 169, 312, 313, 470], "n_cond": 96, "n_cond_img": 96, "n_condit": 101, "n_confound": [240, 357, 478], "n_covar": 399, "n_cut": [136, 163, 430], "n_descriptor": [348, 399], "n_detect": [45, 106, 109], "n_displai": 60, "n_elements_": [135, 160, 163, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 465], "n_epoch": [51, 313], "n_event": [333, 334, 339], "n_featur": [44, 50, 60, 133, 163, 178, 240, 241, 242, 244, 246, 305, 306, 307, 308, 310, 311, 312, 313, 319, 462, 464, 470], "n_features_in_": [135, 163, 240, 241, 462], "n_features_new": [312, 313, 462, 464], "n_features_to_select": 101, "n_fold": [3, 242, 305, 306, 307, 308, 310, 311], "n_frame": [333, 339], "n_init": [52, 312, 462], "n_iter": [52, 273, 296, 299, 463, 464, 470], "n_job": [3, 33, 35, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 55, 56, 60, 61, 65, 77, 78, 79, 81, 82, 83, 101, 102, 103, 104, 106, 109, 111, 113, 174, 242, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 335, 341, 346, 348, 363, 377, 378, 379, 380, 381, 382, 394, 396, 399, 463, 492], "n_l1_ratio": [310, 311], "n_label": [41, 431], "n_left_vertic": 481, "n_map": 432, "n_marker": [401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427], "n_network": [11, 50, 134, 161, 163, 264], "n_node": [457, 460], "n_nonzero_coef": 44, "n_onset": [332, 339], "n_output": [311, 312, 313, 462, 464], "n_outputs_": [305, 306, 307, 308], "n_paramet": [310, 311], "n_parcel": [23, 52, 463], "n_parcels_hemi": 23, "n_perm": [45, 79, 81, 106, 109, 348, 399], "n_point": 25, "n_refin": [55, 56, 61, 242], "n_reg": 334, "n_region": [54, 93, 111, 380, 381, 387, 388], "n_regions_extract": [53, 169], "n_regressor": [6, 333, 341, 348, 399], "n_right_vertic": 481, "n_roi": 260, "n_run": 106, "n_sampl": [10, 47, 79, 83, 109, 110, 133, 163, 240, 241, 242, 305, 306, 307, 308, 310, 311, 312, 313, 351, 376, 379, 385, 399, 462, 464, 470, 476, 477, 487], "n_samples_fit": 311, "n_scan": [35, 64, 66, 181, 334], "n_sourc": 476, "n_split": [3, 36, 38, 39, 43, 47, 54, 102], "n_subject": [12, 24, 26, 42, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 77, 78, 79, 80, 81, 82, 83, 87, 91, 93, 94, 97, 102, 105, 108, 109, 110, 111, 138, 142, 163, 169, 178, 192, 240, 241, 242, 244, 248, 249, 268, 276, 277, 280, 286, 291, 301, 304], "n_t": 25, "n_time_point": [93, 94, 114, 340, 341, 481], "n_timepoint": [101, 111, 171, 174, 387, 388, 389, 481], "n_vertic": [7, 24, 39, 192, 452, 454, 455, 461, 479, 480, 481, 482, 484], "n_vertices_per_hemispher": [380, 381, 387, 388, 389], "n_volum": 58, "n_voxel": [6, 58, 79, 81, 94, 101, 171, 174, 181, 312, 320, 322, 324, 325, 328, 340, 341, 465], "n_z": 25, "naffin": 93, "naiv": [111, 178], "namburi": [39, 118], "name": [2, 3, 4, 6, 10, 11, 13, 15, 22, 23, 24, 28, 32, 34, 46, 47, 54, 59, 61, 65, 67, 70, 72, 73, 74, 77, 78, 79, 81, 82, 93, 96, 103, 104, 107, 113, 114, 120, 127, 129, 134, 140, 149, 151, 156, 158, 160, 163, 164, 168, 172, 176, 179, 180, 185, 187, 188, 189, 192, 194, 198, 199, 201, 208, 209, 229, 232, 238, 240, 241, 242, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 277, 282, 287, 288, 289, 290, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 330, 332, 333, 334, 335, 339, 345, 346, 348, 351, 362, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 461, 462, 463, 464, 465, 466, 468, 474, 475, 477, 488, 489, 490, 492, 501, 510], "name_of_exampl": 164, "name_seed_region": 24, "named_step": [43, 47, 101], "namedtupl": 486, "nan": [21, 51, 53, 57, 59, 65, 93, 96, 105, 107, 125, 129, 138, 143, 151, 155, 161, 163, 228, 335, 351, 366, 378, 384, 390, 393, 446, 452, 454, 455, 459, 461, 477, 487, 492], "nanci": [118, 227], "nano": [118, 312], "nardo": [61, 118, 209, 265], "narend": [118, 198], "narr": [68, 83, 179], "narrai": [310, 311], "naselari": [118, 172], "nassir": [118, 165, 240], "natasha": [0, 127, 163], "nathan": 227, "nation": [0, 118, 176, 187, 198, 202, 233, 261, 309, 374], "nativ": [6, 63, 75, 116, 128, 144, 163, 180, 234, 235, 289, 332, 352, 360, 363, 366, 386, 442, 451, 456, 509], "natur": [51, 118, 121, 181, 185, 198, 207, 226, 268, 282, 284], "naturalist": [165, 166, 168, 169, 207], "naux_fil": 93, "navab": [118, 165, 240], "navi": 71, "navig": [148, 163], "naylor": [118, 207, 268], "nb": 50, "nbitpix": 93, "nbsp": [3, 38, 52, 55, 56, 61, 65, 77, 79], "nbviewer": [3, 38, 52, 55, 56, 61, 65, 77, 79], "nbyte": 111, "nc": 253, "ncal_max": 93, "ncal_min": 93, "ncbi": [51, 118, 170, 172, 210, 312], "nclass": [305, 306, 307, 308], "ncol": [32, 66, 81, 103, 104, 109, 114], "ncollect": 112, "ncomput": 112, "ncut": 205, "ndarrai": [111, 151, 163, 240, 241, 242, 243, 244, 245, 246, 247, 248, 262, 265, 267, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 322, 323, 324, 325, 328, 332, 345, 346, 348, 351, 353, 356, 357, 364, 368, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 393, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 432, 438, 445, 448, 452, 453, 454, 455, 457, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 478, 479, 480, 481, 483, 485, 486, 487], "ndarray": 241, "ndata": 93, "ndata_typ": 93, "ndatatyp": 93, "ndb_name": 93, "ndescrip": 93, "ndframe": 93, "ndim": [93, 398], "ndim_info": 93, "ndimag": [47, 96, 191, 273, 296, 299, 360, 391, 392, 393, 394, 395, 396], "ndownload": 20, "nearbi": 39, "nearest": [10, 41, 43, 44, 47, 52, 68, 77, 86, 111, 118, 132, 151, 160, 161, 163, 185, 282, 365, 366, 367, 443, 444, 450, 451, 458, 464, 470, 474, 487], "nearest_most_frequ": [10, 134, 161, 163, 487], "nearest_neighbor_group": [127, 163], "nearestneighbor": 39, "nearli": 197, "nebraska": 0, "necessari": [4, 65, 91, 94, 104, 113, 127, 151, 158, 163, 165, 168, 171, 179, 180, 188, 192, 199, 250, 282, 284, 291, 305, 306, 307, 308, 325, 332, 346, 385, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 492], "necessarili": [71, 169, 181, 194, 202, 238, 501], "necessit": 164, "necu": [145, 163], "need": [0, 2, 3, 5, 6, 7, 10, 17, 21, 32, 33, 35, 44, 45, 51, 52, 53, 54, 58, 65, 68, 70, 73, 77, 79, 81, 82, 83, 86, 91, 93, 94, 101, 102, 103, 104, 107, 108, 111, 113, 120, 121, 148, 151, 158, 163, 165, 169, 171, 172, 173, 174, 179, 181, 184, 185, 188, 190, 191, 192, 198, 247, 319, 322, 323, 345, 368, 373, 377, 378, 383, 384, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 437, 441, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 465, 487, 507, 508], "neelai": [0, 158, 163], "neg": [10, 15, 17, 18, 45, 54, 61, 68, 79, 81, 82, 92, 98, 106, 110, 118, 130, 134, 135, 155, 158, 163, 176, 181, 185, 198, 248, 311, 348, 349, 366, 370, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 443, 444, 446, 449, 450, 451, 452, 454, 455, 465, 474, 475, 487, 507], "neg_label": 41, "neg_log10_vfwe_pvals_img": 348, "neg_log_pv": [45, 79, 81, 106], "neg_log_pvals_anova": [109, 110], "neg_log_pvals_anova_unmask": [109, 110], "neg_log_pvals_bonferroni": 106, "neg_log_pvals_bonferroni_data": 106, "neg_log_pvals_bonferroni_unmask": 106, "neg_log_pvals_permuted_ols_unmask": [79, 109], "neg_log_pvals_tfce_unmask": 109, "neg_mean_absolute_error": [45, 306, 308], "neg_mean_squared_error": [306, 308], "negat": [55, 85, 99, 116, 302, 362, 451, 456, 509], "negative_edg": 61, "negative_stat_img": 92, "neglig": [178, 355], "neighbor": [10, 39, 52, 96, 151, 163, 186, 309, 443, 444, 450, 451, 458, 463, 464, 470, 487], "neighborhood": [134, 163, 168, 487], "neighbourhood": 487, "neither": [370, 481, 482], "nelson": [61, 118, 209, 230, 265, 266], "nepal": 0, "nest": [25, 31, 45, 154, 163, 174, 240, 241, 242, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465, 487], "nested_cv_scor": 36, "nested_sample_point": 25, "net": [30, 47, 48, 116, 177, 286, 305, 306, 310, 311, 451, 456, 509], "netherland": 0, "netmat": [28, 138, 163], "neto": [118, 202, 252], "network": [2, 9, 20, 21, 22, 29, 49, 50, 51, 54, 57, 58, 63, 74, 75, 85, 88, 96, 99, 104, 116, 118, 121, 132, 140, 154, 160, 163, 164, 165, 166, 167, 169, 179, 180, 185, 186, 187, 192, 194, 197, 201, 202, 204, 209, 228, 230, 231, 232, 233, 237, 248, 249, 251, 252, 258, 260, 261, 264, 265, 266, 267, 277, 279, 332, 339, 358, 373, 374, 376, 378, 384, 386, 412, 433, 447, 448, 449, 451, 456, 465, 473, 491, 492, 507, 509, 510], "network3": 89, "networks_197": 20, "networks_444": 20, "networks_64": 20, "neural": [69, 118, 165, 170, 181, 185, 187, 192, 204, 218, 241, 269, 287, 309], "neuro": [26, 118, 170, 185, 305, 369], "neuroanatomi": 192, "neurobiolog": 185, "neurogram": 0, "neuroimag": [0, 2, 7, 9, 23, 26, 29, 39, 51, 54, 59, 65, 78, 96, 102, 103, 104, 106, 116, 118, 119, 121, 148, 151, 163, 165, 166, 170, 171, 173, 175, 176, 177, 179, 185, 186, 189, 194, 199, 202, 204, 206, 208, 217, 219, 225, 226, 232, 250, 252, 254, 255, 258, 262, 267, 271, 277, 282, 284, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 348, 351, 352, 355, 356, 357, 358, 359, 360, 361, 363, 365, 366, 367, 368, 369, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 434, 436, 441, 443, 444, 446, 449, 450, 451, 456, 458, 459, 463, 465, 468, 469, 471, 472, 475, 478, 487, 496, 507, 509, 510], "neuroinformat": [118, 121, 208, 226, 228, 282, 284], "neurolog": [107, 181, 185, 199, 202, 250], "neurologi": [0, 234], "neuromap": 179, "neuron": [26, 43, 44, 61, 118, 176, 224, 230, 266, 281], "neuroparc": 179, "neurophysiologi": [118, 231, 237, 260, 264], "neuropsychiatr": [269, 287], "neuropsychologia": [118, 223], "neuroradiologi": [26, 118], "neurosci": [0, 26, 52, 68, 74, 118, 168, 176, 185, 187, 197, 198, 201, 204, 227, 228, 233, 248, 251, 261, 277, 510], "neurospin": [0, 63, 67, 75, 116, 179, 180, 222, 442, 456, 509], "neurostar": [179, 187, 188], "neurosynth": [103, 107, 119, 226, 282, 284, 510], "neurosynth_spectral_01": 107, "neurosynth_spectral_01_1": 107, "neurosynth_words_for_image_": 107, "neurosynth_words_for_image_11": 107, "neurovault": [90, 100, 115, 116, 118, 119, 134, 144, 151, 156, 160, 163, 185, 194, 282, 283, 284, 285, 295, 302, 356, 361, 362, 364, 368, 376, 385, 443, 451, 456, 509, 510], "never": [36, 171, 178, 187, 366, 367], "nevertheless": [157, 163], "new": [0, 2, 3, 21, 38, 41, 43, 44, 68, 73, 74, 77, 81, 86, 88, 96, 101, 106, 107, 112, 118, 120, 126, 132, 134, 142, 143, 144, 145, 146, 159, 164, 171, 172, 173, 174, 179, 185, 187, 191, 192, 234, 240, 242, 282, 284, 305, 306, 307, 308, 309, 310, 311, 312, 313, 324, 325, 332, 346, 350, 355, 360, 363, 364, 365, 366, 367, 370, 374, 377, 379, 380, 383, 385, 387, 391, 393, 394, 396, 399, 434, 435, 436, 437, 438, 441, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 466, 473, 507, 508], "new_img_lik": [12, 38, 50, 96, 105, 111, 112, 129, 134, 151, 160, 163, 191], "new_label": 466, "new_labels_img": 466, "new_titl": 109, "newaxi": [43, 47, 82, 86], "newberg": [0, 134, 163], "newer": [170, 282, 284], "newest": [159, 163, 282], "newli": [164, 448], "newseg": [45, 77], "newton": 178, "next": [15, 57, 58, 61, 66, 67, 68, 70, 71, 73, 77, 80, 81, 82, 83, 146, 149, 158, 163, 166, 177, 178, 179, 181, 188, 491, 492], "nextent": 93, "nglmax": 93, "nglmin": 93, "nguyen": [0, 151, 154, 156, 163], "niak": [202, 248], "nian": [118, 231, 260], "nib": 65, "nibabel": [4, 26, 33, 35, 38, 42, 46, 47, 50, 52, 53, 59, 65, 77, 83, 86, 93, 105, 127, 128, 130, 132, 142, 143, 145, 151, 156, 158, 160, 163, 178, 179, 190, 191, 312, 313, 353, 354, 361, 366, 367, 368, 376, 377, 378, 379, 380, 383, 384, 385, 386, 387, 391, 392, 393, 394, 395, 396, 397, 398, 463, 465, 466, 467, 471, 472], "nice": [53, 169], "nicer": 24, "nichol": [106, 118, 121, 165, 185, 187, 198, 226, 282, 284, 348, 393, 399, 435], "nichola": [118, 197, 217, 248], "nickerson": [118, 236, 263], "nico": [61, 118, 209, 232, 265, 267], "nicola": [0, 118, 130, 155, 156, 157, 158, 159, 160, 163, 198, 233, 261], "niconnect": 0, "nielsen": [118, 197, 248], "nifitmask": 373, "nift": [38, 77], "nifti": [2, 4, 10, 12, 17, 19, 27, 31, 32, 34, 36, 37, 38, 43, 44, 50, 51, 52, 55, 56, 57, 59, 61, 79, 81, 86, 88, 91, 93, 94, 96, 97, 106, 108, 109, 113, 120, 130, 131, 132, 133, 134, 136, 154, 160, 161, 163, 166, 170, 171, 179, 189, 199, 200, 204, 207, 208, 210, 217, 218, 220, 224, 225, 226, 228, 229, 231, 236, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 264, 268, 270, 271, 275, 276, 277, 280, 281, 286, 305, 306, 309, 310, 311, 312, 313, 315, 353, 356, 360, 361, 366, 369, 463, 464, 466, 487, 497, 507], "nifti1": [4, 33, 35, 38, 42, 46, 52, 53, 59, 65, 77, 83, 93, 105, 151, 163, 368, 376, 377, 378, 379, 380, 383, 384, 385, 386, 387, 391, 392, 393, 394, 395, 396, 397, 398, 463, 465, 466, 467, 471, 472], "nifti1head": [59, 93, 105, 362], "nifti1imag": [4, 26, 33, 35, 38, 42, 43, 46, 47, 52, 53, 59, 65, 77, 83, 86, 93, 143, 144, 146, 151, 163, 169, 190, 254, 256, 257, 259, 260, 263, 264, 273, 280, 295, 296, 297, 298, 299, 300, 305, 306, 307, 308, 309, 312, 313, 327, 329, 332, 346, 348, 349, 350, 352, 354, 358, 359, 361, 362, 363, 366, 367, 368, 369, 370, 376, 377, 378, 379, 380, 383, 384, 385, 386, 387, 391, 392, 393, 394, 395, 396, 397, 398, 410, 415, 417, 421, 427, 431, 432, 433, 463, 465, 466, 467, 471, 472], "nifti2imag": [146, 163], "nifti_labels_mask": [52, 59], "nifti_maps_mask": [55, 56], "nifti_maps_masker_": [161, 163], "nifti_mask": [37, 38, 45, 94, 106, 109, 110, 111, 120, 179], "nifti_masker_extractor": 46, "nifti_masker_parallel_inmemori": 111, "nifti_masker_parallel_path": 111, "nifti_masker_singl": 111, "nifti_spheres_mask": 61, "niftiimag": [3, 134, 163, 166, 179, 180, 190, 191], "niftilabelsmask": [57, 59, 85, 96, 99, 116, 129, 132, 134, 135, 148, 149, 151, 154, 155, 156, 158, 160, 161, 163, 166, 189, 256, 268, 376, 377, 378, 384, 468, 471, 473, 492, 509, 510], "niftimapsmask": [54, 55, 56, 57, 93, 102, 124, 129, 134, 135, 148, 155, 158, 161, 163, 166, 189, 312, 313, 377, 378, 383, 465, 469, 472, 492, 510], "niftimask": [12, 31, 34, 36, 37, 38, 41, 43, 44, 45, 50, 54, 55, 56, 57, 58, 59, 61, 64, 65, 71, 77, 85, 93, 96, 99, 101, 102, 103, 106, 107, 108, 109, 110, 116, 120, 128, 132, 134, 135, 148, 151, 154, 155, 156, 157, 158, 163, 171, 174, 189, 268, 281, 305, 306, 307, 308, 310, 311, 329, 332, 346, 348, 358, 363, 373, 374, 376, 377, 378, 383, 384, 386, 393, 399, 435, 441, 445, 450, 451, 456, 463, 473, 492, 497, 509, 510], "niftispheresmask": [58, 61, 64, 71, 103, 126, 130, 131, 134, 136, 138, 149, 153, 155, 163, 180, 189, 492, 510], "nightli": 164, "nih": [51, 118, 170, 172, 210, 312], "nii": [2, 3, 4, 6, 11, 12, 15, 17, 19, 22, 27, 31, 32, 33, 34, 35, 36, 37, 38, 44, 45, 46, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 65, 73, 77, 79, 87, 88, 91, 93, 94, 96, 97, 104, 106, 107, 108, 109, 111, 112, 113, 120, 187, 190, 202, 208, 335, 345, 371, 373, 374, 413, 452, 461, 485, 492], "nii_asym": 202, "nii_sym": 202, "niimg": [1, 8, 35, 57, 61, 91, 93, 94, 101, 116, 120, 128, 129, 130, 134, 145, 148, 151, 156, 160, 163, 168, 187, 189, 191, 192, 261, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 332, 335, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 390, 391, 392, 393, 394, 395, 396, 397, 398, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 434, 435, 436, 441, 443, 444, 445, 446, 449, 450, 451, 456, 458, 459, 463, 464, 465, 467, 468, 469, 470, 471, 472, 474, 475, 477, 483, 487, 492, 494, 509], "niimg_convers": [130, 163], "niimng": 332, "nijmegen": 0, "nikhil": [0, 130, 163], "niko": [118, 206, 217, 254], "nikolaidi": [148, 163], "nikolau": [118, 176, 187, 309], "nilearn": [1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 119, 120, 121, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 141, 142, 143, 146, 148, 149, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 188, 190, 191, 192, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 491, 492, 495, 501, 507, 509, 510], "nilearn_cach": [35, 37, 38, 42, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64, 94, 101, 102, 103, 106, 107, 108, 109, 110, 169, 492], "nilearn_cmap": 13, "nilearn_d": 3, "nilearn_data": [2, 3, 4, 6, 10, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64, 65, 67, 68, 70, 71, 72, 73, 77, 78, 79, 81, 82, 83, 87, 88, 89, 90, 91, 93, 94, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 301, 492], "nilearn_glm": [65, 77], "nilearn_shared_data": [190, 292], "nilearn_versionad": [179, 188, 492], "nilearn_versionchang": 179, "nili": [118, 229, 259], "nimag": 111, "nimg": [118, 199, 206, 250], "nintent_cod": 93, "nintent_nam": 93, "nintent_p1": 93, "nintent_p2": 93, "nintent_p3": 93, "nipi": [160, 163, 179, 186, 210], "niprep": 374, "nipyp": 181, "nishimoto": [118, 172], "nistat": [127, 137, 154, 163], "nistats_migr": [127, 163], "nitrc": [3, 10, 11, 28, 42, 105, 111, 200, 205, 227, 249, 253, 261], "nki": [24, 114, 118, 132, 143, 163, 194, 291, 301], "nki_enhanced_surfac": [24, 114], "nki_nilearn": 227, "nlm": [51, 118, 170, 172, 210, 312], "nmagic": 93, "nmetadata": 93, "nmr": [237, 264], "nn": 39, "nnn": 202, "nodal": [154, 163, 447, 507], "node": [21, 24, 25, 26, 61, 113, 149, 151, 154, 156, 163, 166, 192, 198, 248, 259, 290, 293, 294, 301, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 437, 446, 447, 457, 459, 460, 487, 507], "node_cmap": [61, 447], "node_color": [146, 156, 163, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 437, 457], "node_coord": [23, 149, 151, 163, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 437, 447, 457], "node_kwarg": [404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 437, 447], "node_s": [61, 149, 151, 158, 163, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 437, 447, 457], "node_strength": 61, "node_strength_neg": 61, "node_strength_posit": 61, "node_threshold": 447, "node_valu": 447, "node_vmax": 447, "node_vmin": 447, "nois": [3, 6, 35, 36, 47, 59, 64, 70, 71, 73, 96, 97, 103, 107, 113, 118, 127, 156, 163, 166, 172, 174, 178, 181, 185, 192, 322, 324, 325, 339, 373, 374, 436, 449, 450, 478, 491], "noise_coef": 47, "noise_model": [6, 26, 35, 64, 65, 68, 70, 73, 113, 332, 335, 341, 491], "noisi": [45, 94, 165], "noisier": [443, 444, 450, 451, 458], "nomenclatur": [23, 118, 206, 262], "nomin": 53, "non": [15, 16, 26, 42, 45, 53, 59, 67, 68, 69, 79, 81, 93, 96, 106, 107, 119, 130, 131, 134, 144, 148, 151, 155, 156, 158, 159, 161, 163, 165, 169, 170, 176, 177, 178, 179, 184, 185, 187, 192, 197, 200, 202, 204, 205, 207, 208, 219, 225, 228, 253, 279, 305, 306, 307, 308, 312, 322, 324, 325, 332, 351, 355, 360, 366, 368, 370, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 393, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 434, 443, 444, 446, 449, 450, 451, 452, 454, 455, 459, 461, 465, 471, 477, 492, 507], "non_parametric_infer": [79, 81, 127, 128, 134, 158, 160, 163, 184], "non_rest": 37, "non_steady_st": 373, "nondement": [118, 228], "none": [3, 10, 15, 16, 34, 35, 38, 43, 47, 52, 55, 56, 57, 59, 61, 64, 65, 68, 69, 70, 71, 72, 73, 77, 79, 81, 91, 93, 94, 96, 97, 104, 105, 107, 112, 113, 114, 121, 128, 132, 134, 135, 138, 148, 151, 155, 160, 161, 163, 179, 192, 240, 241, 242, 244, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 332, 334, 335, 339, 341, 345, 346, 347, 348, 349, 350, 351, 352, 357, 361, 362, 363, 364, 365, 366, 368, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 475, 476, 477, 481, 482, 483, 487, 488, 489, 491, 492, 507], "nonlinear": [118, 202, 219], "nonparametr": 81, "nonpres": 192, "nonstochast": [118, 399], "nonzero": [26, 53, 368, 465], "nooner": [118, 227], "noplot": 179, "noqa": 383, "nor": [192, 370], "noreport": 179, "norihiro": [43, 44, 118, 224, 281], "norm": [47, 56, 58, 65, 78, 81, 104, 112, 135, 163, 246, 310, 311, 462, 463, 464], "norm_nois": 47, "norm_resid": [160, 163], "normal": [6, 25, 33, 39, 47, 58, 61, 70, 71, 104, 108, 113, 120, 130, 138, 163, 171, 178, 179, 180, 181, 185, 199, 219, 221, 228, 241, 244, 250, 275, 286, 324, 325, 368, 487], "normalized_cov_beta": 323, "normalized_residu": [324, 325], "northwestern": 0, "nose": [151, 163], "notabl": [52, 166, 220], "notat": [155, 158, 163, 183, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 441, 443, 444, 446, 450, 451, 452, 454, 455], "notcontain": [121, 282], "note": [2, 3, 4, 6, 15, 16, 21, 24, 41, 45, 46, 47, 51, 52, 55, 57, 58, 59, 61, 67, 68, 71, 73, 77, 78, 81, 86, 88, 91, 93, 94, 96, 97, 104, 106, 108, 111, 113, 118, 120, 121, 128, 134, 158, 163, 164, 165, 166, 170, 176, 177, 178, 179, 180, 181, 183, 188, 190, 191, 192, 202, 240, 241, 242, 247, 248, 250, 251, 252, 255, 260, 261, 264, 268, 270, 271, 272, 273, 275, 276, 279, 281, 282, 283, 284, 285, 286, 287, 291, 292, 295, 296, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 322, 323, 324, 325, 332, 345, 346, 349, 351, 357, 360, 362, 363, 366, 369, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 434, 435, 436, 441, 443, 450, 451, 462, 463, 464, 465, 466, 477, 478, 487, 492, 507], "notebook": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 136, 148, 151, 163, 171, 187, 192, 332, 346, 374, 457, 458, 459, 460, 461, 473, 475, 507], "notequ": [121, 282], "noteworthi": [149, 163, 172], "noth": [4, 176, 321, 323, 326, 346, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 444, 446, 449, 450, 451, 458], "notic": [6, 52, 61, 68, 104, 113, 371], "notimplementedwarn": [161, 163], "notin": [121, 282], "notion": [171, 176, 447], "notnul": [121, 282], "notter": [0, 148, 163], "nov": [61, 118, 230, 266], "nova": 0, "novel": 232, "novemb": [78, 118, 132, 145, 148, 151, 154, 163, 327], "now": [2, 3, 4, 6, 7, 15, 16, 17, 21, 23, 27, 31, 41, 43, 47, 52, 53, 54, 58, 59, 65, 66, 67, 68, 70, 72, 74, 81, 83, 86, 88, 94, 95, 96, 98, 103, 104, 105, 107, 108, 111, 113, 114, 120, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 171, 177, 179, 188, 191, 305, 306, 307, 308, 312, 313, 319, 322, 323, 324, 325, 350, 358, 362, 374, 377, 379, 383, 385, 463], "np": [3, 5, 6, 7, 10, 12, 13, 15, 21, 23, 24, 25, 26, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 72, 73, 77, 79, 81, 82, 86, 87, 89, 91, 93, 96, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 132, 160, 163, 169, 179, 190, 191, 240, 309, 312, 313, 321, 322, 323, 324, 325, 326, 348, 352, 362, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 399, 462, 463, 464, 465, 481], "npixdim": 93, "nplot": 112, "nqform_cod": 93, "nqoffset_i": 93, "nqoffset_x": 93, "nqoffset_z": 93, "nquatern_b": 93, "nquatern_c": 93, "nquatern_d": 93, "nr": 178, "nregular": 93, "nreshap": 107, "nrg": 228, "nrow": [13, 52, 66, 81, 103, 104, 114], "nscl_inter": 93, "nscl_slope": 93, "nsession_error": 93, "nsform_cod": 93, "nsharedmemori": 111, "nsizeof_hdr": 93, "nslice_cod": 93, "nslice_dur": 93, "nslice_end": 93, "nslice_start": 93, "nsrow_i": 93, "nsrow_x": 93, "nsrow_z": 93, "ntoffset": 93, "ntop": 107, "nuclei": [118, 229, 259], "nuisanc": [172, 185, 200, 202, 207, 249, 319, 322, 323, 324, 374, 477], "null": [66, 74, 81, 159, 163, 171, 176, 181, 185, 320, 348, 399], "null_cv_scor": 101, "null_duration_tri": 74, "number": [3, 10, 13, 31, 33, 35, 36, 41, 42, 45, 51, 52, 53, 56, 57, 58, 61, 67, 68, 70, 73, 74, 79, 81, 88, 91, 94, 96, 101, 103, 107, 109, 111, 113, 121, 130, 131, 134, 136, 148, 151, 154, 155, 156, 158, 163, 165, 168, 169, 171, 172, 173, 176, 179, 181, 185, 187, 188, 192, 194, 198, 199, 202, 205, 229, 231, 237, 238, 240, 241, 242, 244, 248, 249, 252, 255, 256, 257, 260, 261, 263, 268, 271, 273, 276, 277, 280, 282, 286, 291, 296, 299, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 323, 328, 332, 341, 346, 348, 349, 351, 352, 353, 355, 357, 362, 363, 370, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 394, 396, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 433, 434, 435, 436, 437, 438, 441, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 474, 475, 476, 477, 478, 480, 482, 484, 492, 501, 507], "number_of_scan": 357, "number_of_subject": 112, "numer": [1, 8, 31, 35, 37, 60, 116, 155, 163, 179, 180, 192, 244, 320, 322, 324, 325, 333, 449, 450, 476, 509], "numpi": [3, 5, 6, 7, 10, 12, 13, 15, 17, 21, 23, 24, 25, 26, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 64, 66, 67, 68, 69, 70, 72, 73, 77, 79, 81, 82, 86, 89, 91, 93, 96, 101, 103, 104, 106, 107, 108, 109, 110, 114, 125, 127, 129, 130, 131, 132, 133, 134, 135, 139, 143, 145, 148, 151, 154, 156, 158, 161, 163, 168, 169, 171, 178, 179, 188, 190, 191, 240, 241, 242, 243, 244, 245, 246, 247, 248, 262, 265, 267, 305, 306, 307, 308, 309, 310, 311, 312, 313, 322, 324, 325, 328, 332, 334, 339, 341, 345, 346, 348, 351, 352, 353, 356, 357, 358, 362, 364, 368, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 393, 398, 399, 403, 404, 405, 406, 407, 408, 409, 411, 413, 414, 416, 418, 420, 422, 424, 426, 431, 432, 434, 436, 437, 438, 441, 443, 445, 447, 448, 451, 452, 453, 454, 455, 457, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 478, 479, 480, 481, 483, 485, 486, 487], "numpy_convers": [138, 163], "numpy_mask": 111, "numpy_masker_parallel": 111, "numpy_masker_shar": 111, "numpy_masker_shared_parallel": 111, "numpy_masker_singl": 111, "numpydoc": 179, "nunzio": [118, 227], "nutshel": 6, "nv_data": [107, 112], "nvox_offset": 93, "nwith": 111, "nxyzt_unit": 93, "ny": [118, 324, 325], "nyu": [118, 129, 163, 319, 323], "n\u00e1jera": [0, 122, 125, 136, 138, 163], "o": [26, 61, 103, 118, 138, 163, 164, 171, 179, 198, 199, 217, 230, 231, 248, 250, 260, 266, 373], "oas1_0001_mr1": [45, 46, 77], "oas1_0002_mr1": 46, "oas1_0003_mr1": 46, "oas1_0004_mr1": 46, "oas1_0005_mr1": 46, "oas1_0007_mr1": 46, "oas1_0009_mr1": 46, "oas1_0010_mr1": 46, "oas1_0012_mr1": 46, "oas1_0013_mr1": 46, "oas1_0015_mr1": 46, "oas1_0016_mr1": 46, "oas1_0019_mr1": 46, "oas1_0022_mr1": 46, "oas1_0023_mr1": 46, "oas1_0025_mr1": 46, "oas1_0026_mr1": 46, "oas1_0029_mr1": 46, "oas1_0031_mr1": 46, "oas1_0032_mr1": 46, "oas1_0037_mr1": 46, "oas1_0038_mr1": 46, "oas1_0039_mr1": 46, "oas1_0041_mr1": 46, "oas1_0042_mr1": 46, "oas1_0044_mr1": 46, "oas1_0045_mr1": 46, "oas1_0049_mr1": 46, "oas1_0050_mr1": 46, "oas1_0052_mr1": 46, "oas1_0053_mr1": 46, "oas1_0054_mr1": 46, "oas1_0055_mr1": 46, "oas1_0056_mr1": 46, "oas1_0059_mr1": 46, "oas1_0060_mr1": 46, "oas1_0061_mr1": 46, "oas1_0064_mr1": 46, "oas1_0065_mr1": 46, "oas1_0067_mr1": 46, "oas1_0069_mr1": 46, "oas1_0070_mr1": 46, "oas1_0071_mr1": 46, "oas1_0072_mr1": 46, "oas1_0078_mr1": 46, "oas1_0079_mr1": 46, "oas1_0080_mr1": 46, "oas1_0082_mr1": 46, "oas1_0086_mr1": 46, "oas1_0090_mr1": 46, "oas1_0091_mr1": 46, "oas1_0094_mr1": 46, "oas1_0096_mr1": 46, "oas1_0098_mr1": 46, "oas1_0099_mr1": 46, "oas1_0101_mr1": 46, "oas1_0103_mr1": 46, "oas1_0104_mr1": 46, "oas1_0106_mr1": 46, "oas1_0111_mr1": 46, "oas1_0113_mr1": 46, "oas1_0114_mr1": 46, "oas1_0115_mr1": 46, "oas1_0117_mr1": 46, "oas1_0119_mr1": 46, "oas1_0120_mr1": 46, "oas1_0121_mr1": 46, "oas1_0123_mr1": 46, "oas1_0124_mr1": 46, "oas1_0126_mr1": 46, "oas1_0131_mr1": 46, "oas1_0135_mr1": 46, "oas1_0136_mr1": 46, "oas1_0138_mr1": 46, "oas1_0144_mr1": 46, "oas1_0145_mr1": 46, "oas1_0146_mr1": 46, "oas1_0148_mr1": 46, "oas1_0150_mr1": 46, "oas1_0155_mr1": 46, "oas1_0159_mr1": 46, "oas1_0160_mr1": 46, "oas1_0162_mr1": 46, "oas1_0163_mr1": 46, "oas1_0164_mr1": 46, "oas1_0165_mr1": 46, "oas1_0167_mr1": 46, "oas1_0169_mr1": 46, "oas1_0173_mr1": 46, "oas1_0174_mr1": 46, "oas1_0176_mr1": 46, "oas1_0177_mr1": 46, "oas1_0178_mr1": 46, "oas1_0180_mr1": 46, "oas1_0181_mr1": 46, "oas1_0182_mr1": 46, "oas1_0184_mr1": 46, "oas1_0188_mr1": 46, "oas1_0189_mr1": 46, "oas1_0190_mr1": 46, "oas1_0193_mr1": 46, "oas1_0199_mr1": 46, "oas1_0200_mr1": 46, "oas1_0202_mr1": 46, "oas1_0203_mr1": 46, "oas1_0204_mr1": 46, "oas1_0205_mr1": 46, "oas1_0207_mr1": 46, "oas1_0208_mr1": 46, "oas1_0209_mr1": 46, "oas1_0211_mr1": 46, "oas1_0212_mr1": 46, "oas1_0214_mr1": 46, "oas1_0216_mr1": 46, "oas1_0217_mr1": 46, "oas1_0218_mr1": 46, "oas1_0220_mr1": 46, "oas1_0223_mr1": 46, "oas1_0226_mr1": 46, "oas1_0227_mr1": 46, "oasi": [30, 48, 76, 84, 116, 118, 177, 184, 186, 194, 272, 273, 286, 306, 311, 345, 346, 349, 356, 367, 376, 385, 399, 427, 439, 451, 456, 473, 491, 509], "oasis1": [45, 46, 77], "oasis_dataset": [45, 77], "oasisbrain": [228, 286], "obei": [126, 163], "obj": [179, 377, 378, 379, 380, 381, 382, 434, 436, 441, 443, 444, 446, 449, 450, 451, 452, 454, 455, 492], "object": [2, 3, 4, 6, 7, 10, 11, 14, 15, 17, 18, 23, 24, 27, 30, 32, 34, 35, 38, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 66, 70, 71, 73, 77, 83, 90, 91, 93, 94, 96, 101, 105, 111, 113, 116, 118, 120, 121, 128, 129, 132, 133, 134, 140, 143, 151, 154, 157, 158, 160, 163, 165, 166, 167, 168, 169, 171, 172, 173, 174, 176, 178, 180, 185, 186, 187, 189, 191, 218, 240, 241, 242, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 293, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 322, 324, 325, 327, 332, 335, 346, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 434, 435, 436, 438, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 481, 483, 486, 487, 488, 492, 494, 497, 500, 507, 509, 510], "observ": [26, 42, 47, 61, 64, 66, 68, 72, 81, 82, 83, 106, 172, 176, 180, 181, 185, 187, 192, 323, 435, 462], "observed_timeseri": 180, "obtain": [6, 16, 23, 45, 46, 52, 57, 61, 66, 68, 70, 77, 79, 93, 96, 106, 109, 113, 134, 158, 163, 164, 165, 166, 168, 170, 171, 173, 176, 178, 181, 185, 192, 198, 204, 209, 230, 242, 251, 253, 272, 277, 295, 296, 299, 304, 310, 311, 350, 355, 366, 370, 378, 383, 384, 386, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 442, 443, 444, 446, 450, 451, 452, 454, 455, 465, 492], "obviou": 68, "obvious": 70, "occ": 54, "occasion": 164, "occipit": [61, 93], "occur": [69, 135, 136, 163, 181, 185, 248, 508], "occurr": [37, 38, 43, 44, 45, 50, 54, 55, 56, 57, 58, 59, 61, 64, 71, 91, 93, 94, 96, 101, 102, 103, 106, 107, 108, 109, 110, 120, 133, 163, 176], "octav": 202, "octob": [118, 148, 151, 163, 202], "odc": 221, "odd": 476, "off": [13, 15, 40, 43, 44, 68, 74, 119, 127, 141, 163, 178, 179, 202, 205, 391, 392, 393, 394, 395, 396, 449, 450, 451, 458, 475], "offer": [170, 180, 182, 507], "offici": 508, "offlin": [282, 284, 510], "offset": [43, 54, 86, 107, 154, 163, 191, 366], "often": [32, 34, 37, 38, 88, 96, 120, 170, 171, 172, 176, 181, 185, 187, 190, 191, 192, 248, 322, 324, 325], "oftentim": 187, "ohbm": [118, 147, 163, 198], "ok": 187, "okito": [43, 44, 118, 224, 281], "ol": [109, 322, 324, 325, 332, 341, 399, 499], "old": [129, 151, 157, 158, 163, 164], "old_default": [70, 77], "oldenburg": 0, "older": [37, 38, 43, 44, 45, 50, 51, 54, 55, 56, 57, 58, 59, 61, 64, 71, 91, 93, 94, 96, 101, 102, 103, 106, 107, 108, 109, 110, 118, 120, 143, 144, 145, 146, 163, 179, 190, 228, 353], "oldest": [164, 179, 188], "olfact": 492, "oliv": [0, 71, 118, 129, 163, 176, 202, 252], "oliveira": [118, 187], "olivi": [0, 145, 163], "ols_output": 109, "olsmodel": [160, 163, 322, 324, 325], "omit": 440, "on_fslswapdim_bet": 46, "onc": [4, 38, 41, 52, 60, 73, 111, 121, 158, 163, 164, 165, 170, 171, 178, 179, 180, 181, 184, 185, 188, 192, 462, 487], "one": [3, 4, 6, 7, 10, 15, 16, 17, 21, 25, 31, 32, 33, 35, 37, 38, 39, 41, 43, 47, 50, 51, 52, 58, 59, 60, 61, 66, 68, 70, 72, 73, 74, 76, 79, 80, 82, 83, 84, 88, 93, 94, 96, 103, 104, 105, 107, 109, 111, 113, 116, 120, 121, 127, 128, 130, 132, 134, 140, 142, 145, 154, 156, 157, 158, 161, 163, 164, 165, 166, 169, 170, 171, 172, 176, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 192, 202, 221, 240, 242, 248, 267, 273, 277, 280, 290, 293, 294, 301, 305, 306, 307, 308, 310, 312, 313, 320, 332, 334, 335, 339, 341, 346, 347, 348, 351, 352, 353, 355, 356, 358, 362, 366, 371, 377, 379, 380, 382, 383, 387, 389, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 437, 438, 443, 444, 446, 447, 448, 449, 451, 453, 454, 456, 458, 459, 461, 463, 467, 468, 474, 477, 487, 488, 489, 508, 509], "one_mesh_info": [129, 163], "one_minus_pvalu": [155, 163, 320], "ones": [11, 13, 22, 35, 41, 47, 66, 68, 77, 81, 83, 103, 107, 109, 110, 128, 163, 173, 174, 176, 178, 185, 310, 311, 339, 374, 399, 462, 481], "ones_lik": 79, "onevsoneclassifi": [37, 172], "onevsrestclassifi": [37, 172], "ongo": 179, "onli": [2, 3, 6, 14, 15, 17, 20, 24, 26, 31, 33, 35, 36, 38, 39, 41, 43, 45, 46, 50, 52, 54, 55, 57, 58, 61, 64, 65, 68, 70, 72, 73, 77, 81, 83, 86, 88, 93, 96, 98, 101, 102, 103, 104, 105, 107, 108, 111, 113, 114, 120, 121, 128, 131, 132, 133, 134, 135, 141, 146, 151, 156, 158, 159, 161, 163, 164, 165, 166, 168, 169, 171, 172, 173, 174, 176, 178, 179, 181, 184, 185, 188, 189, 190, 191, 228, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 507], "onlin": [51, 118, 170, 179, 205, 313, 508], "onset": [6, 35, 66, 67, 68, 69, 70, 74, 103, 113, 129, 154, 163, 180, 235, 289, 332, 333, 334, 336, 337, 338, 339, 342, 343, 344, 442, 491], "ontario": 0, "onto": [10, 17, 43, 53, 70, 143, 163, 169, 179, 186, 190, 392, 395, 439, 449, 507], "onward": [132, 163], "opac": [26, 458], "opaqu": [72, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 443, 444, 451, 458], "open": [17, 23, 55, 57, 61, 91, 93, 94, 101, 118, 127, 163, 164, 178, 179, 185, 186, 187, 189, 194, 197, 198, 208, 228, 268, 279, 320, 332, 346, 391, 392, 393, 394, 395, 396, 457, 458, 459, 460, 461, 464, 473, 475, 507, 508, 510], "open_in_brows": [10, 17, 23, 35, 55, 57, 61, 64, 70, 73, 93, 94, 104, 113, 130, 148, 161, 163, 192, 457, 458, 459, 460, 461, 473, 475, 507], "openfmri": 208, "openli": 228, "openneuro": [63, 75, 116, 180, 207, 223, 235, 268, 269, 287, 304, 332, 335, 345, 375, 385, 435, 438, 443, 445, 456, 474, 491, 509], "oper": [41, 88, 91, 93, 96, 105, 108, 111, 120, 156, 163, 164, 171, 178, 179, 181, 185, 189, 190, 192, 240, 241, 273, 304, 332, 346, 348, 360, 362, 363, 391, 392, 393, 394, 395, 396, 438, 494, 495, 498, 510], "opercular": [61, 93, 492], "operculari": 93, "operto": [148, 163], "opinion": 179, "opportun": 52, "oppos": [6, 7, 83, 191, 192], "opposit": [47, 72, 176], "opt": 164, "optim": [56, 60, 103, 118, 151, 155, 163, 172, 174, 177, 178, 208, 242, 244, 255, 366, 367], "optimist": [36, 171], "optimum": 178, "option": [9, 10, 14, 16, 22, 24, 29, 45, 54, 59, 69, 74, 91, 106, 116, 120, 125, 127, 128, 129, 130, 132, 141, 143, 144, 145, 146, 151, 154, 155, 156, 157, 158, 160, 163, 164, 166, 171, 173, 179, 180, 185, 188, 190, 192, 240, 241, 242, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 320, 322, 323, 324, 325, 329, 332, 339, 345, 346, 348, 349, 351, 364, 368, 370, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 461, 462, 463, 464, 465, 466, 467, 469, 475, 477, 478, 487, 507, 509], "orang": 507, "orbit": [93, 492], "orcid": 179, "order": [0, 2, 3, 6, 16, 17, 24, 31, 32, 34, 37, 38, 43, 44, 45, 52, 57, 59, 72, 73, 81, 82, 93, 103, 106, 111, 112, 120, 127, 132, 142, 148, 151, 156, 158, 163, 170, 176, 178, 179, 180, 185, 186, 187, 188, 190, 191, 192, 244, 265, 267, 275, 276, 295, 296, 299, 319, 323, 332, 339, 341, 346, 347, 348, 351, 353, 355, 360, 361, 365, 366, 367, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 398, 399, 434, 441, 443, 444, 446, 450, 451, 458, 465, 466, 468, 471, 476, 477, 487, 507, 508], "ordered_region": [265, 267], "ordinari": [68, 106, 109, 323, 399], "orfano": [0, 118, 127, 136, 148, 163, 179, 204, 277], "org": [0, 3, 4, 10, 11, 13, 19, 28, 36, 38, 40, 42, 52, 55, 56, 59, 61, 65, 77, 79, 105, 107, 111, 112, 118, 121, 179, 181, 187, 188, 197, 198, 200, 201, 205, 207, 210, 218, 223, 226, 227, 236, 249, 251, 253, 263, 268, 271, 279, 282, 283, 284, 285, 302, 305, 306, 307, 308, 309, 310, 311, 374, 460], "organ": [6, 7, 41, 61, 118, 138, 151, 157, 159, 163, 179, 185, 187, 202, 230, 231, 232, 237, 260, 264, 266, 348, 374, 399, 415, 486, 508], "orient": [10, 151, 154, 163, 178, 179, 365], "orig": [452, 453, 454, 455, 461, 486, 487], "origami": 0, "origin": [0, 6, 33, 35, 38, 41, 42, 43, 44, 46, 52, 53, 68, 71, 73, 86, 91, 95, 103, 128, 132, 142, 155, 157, 158, 161, 163, 168, 176, 178, 188, 192, 202, 207, 219, 220, 228, 240, 241, 242, 261, 268, 277, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 349, 350, 351, 370, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 436, 462, 463, 464, 465, 475, 477, 481, 483], "original_affin": 95, "original_shap": 95, "original_voxel": 52, "ortho": [15, 16, 17, 26, 65, 98, 411, 412, 428, 429, 434, 437, 441, 443, 444, 447, 449, 450, 451, 475, 507], "orthogon": [148, 163, 185, 332, 334, 339, 351, 401, 410, 411, 412, 415, 429, 434, 437, 441, 443, 444, 447, 449, 450, 451, 475, 477], "orthogonalmatchingpursuit": 44, "orthoprojector": [14, 15, 17, 54, 55, 61, 65, 158, 163, 428, 437, 443, 447], "orthoslic": [2, 4, 11, 17, 18, 27, 51, 83, 91, 96, 158, 163, 410, 415, 417, 419, 421, 423, 425, 427, 429, 434, 441, 444, 449, 450, 451, 507], "oscar": [0, 148, 163], "oscil": [6, 68, 118], "osf": [10, 18, 22, 54, 79, 81, 82, 83, 102, 104, 169, 203, 207, 208, 221, 229, 255, 259, 268, 277], "osram": 0, "ot": [23, 176], "other": [2, 4, 15, 24, 25, 33, 38, 41, 42, 43, 51, 59, 68, 70, 71, 73, 96, 101, 103, 107, 108, 111, 118, 119, 120, 128, 135, 148, 151, 155, 163, 164, 165, 166, 171, 172, 173, 175, 176, 178, 179, 180, 185, 188, 190, 192, 210, 217, 220, 234, 240, 241, 242, 268, 282, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 322, 324, 325, 332, 334, 339, 345, 346, 348, 349, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 399, 444, 456, 462, 463, 464, 465, 475, 507], "otherwis": [26, 96, 106, 107, 148, 163, 181, 188, 246, 279, 312, 313, 332, 335, 346, 361, 365, 373, 374, 377, 378, 380, 381, 383, 384, 385, 386, 387, 388, 446, 449, 452, 453, 454, 455, 458, 459, 461, 465, 466, 477, 487], "otten": 118, "our": [0, 2, 3, 15, 20, 24, 26, 31, 36, 41, 43, 52, 54, 59, 61, 66, 68, 69, 70, 74, 96, 101, 104, 111, 113, 114, 120, 121, 132, 148, 158, 163, 166, 171, 178, 179, 181, 188], "ourselv": 10, "out": [31, 33, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 51, 53, 54, 56, 57, 58, 59, 60, 61, 65, 73, 101, 103, 106, 109, 110, 120, 121, 130, 148, 151, 155, 163, 166, 171, 172, 174, 176, 178, 179, 180, 185, 191, 202, 226, 272, 305, 306, 307, 308, 310, 311, 312, 313, 351, 358, 366, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 446, 462, 463, 465, 466, 476, 477, 487, 507], "out_dict": 81, "out_dir": [65, 70, 77, 345], "outcom": [68, 185, 374], "outdat": [127, 142, 163], "outer": [91, 185, 487], "outlier": [185, 228, 373, 374, 377, 378, 379, 380, 381, 382], "outlin": [51, 91, 170, 179, 413, 453, 492, 507], "outperform": [54, 102, 165, 170], "output": [3, 4, 6, 7, 10, 16, 17, 23, 24, 26, 31, 35, 36, 38, 44, 45, 47, 51, 52, 54, 55, 57, 58, 59, 61, 68, 70, 73, 82, 88, 96, 106, 119, 120, 127, 128, 130, 132, 134, 140, 146, 151, 158, 160, 161, 163, 164, 165, 170, 175, 179, 185, 187, 188, 189, 191, 192, 240, 241, 243, 244, 245, 246, 247, 305, 306, 307, 308, 309, 310, 311, 312, 313, 322, 324, 325, 332, 345, 346, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 363, 365, 366, 367, 368, 369, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 434, 436, 443, 444, 446, 449, 450, 451, 458, 459, 462, 463, 464, 465, 468, 469, 471, 472, 474, 475, 487, 507, 510], "output_dir": [3, 4, 6, 7, 16, 24, 31, 35, 44, 51, 52, 58, 64, 65, 70, 73, 74, 77, 88, 96, 104, 111, 113, 445], "output_fil": [6, 16, 24, 413, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 455, 507], "output_filepath": [93, 94, 192], "output_imag": 346, "output_typ": [6, 26, 64, 67, 68, 71, 72, 73, 77, 78, 79, 81, 82, 83, 103, 113, 161, 163, 332, 346, 399], "outsid": [2, 4, 17, 68, 130, 160, 163, 179, 187, 192, 366, 367, 377, 383, 413, 452, 454, 455, 461, 468, 469, 474, 487], "ova": 37, "over": [3, 21, 26, 41, 43, 51, 52, 54, 70, 91, 105, 111, 118, 120, 128, 154, 155, 163, 164, 170, 171, 176, 177, 178, 179, 184, 188, 191, 202, 208, 255, 313, 332, 359, 363, 373, 387, 400, 402, 403, 449, 453, 487, 492, 507], "overal": [37, 68, 71, 111, 128, 163, 178, 179, 220, 310, 311, 380, 381, 387, 388], "overcom": [26, 118], "overcrowd": 164, "overfit": [36, 172, 176], "overflow": [160, 163], "overhead": 178, "overlai": [21, 22, 26, 53, 169, 191, 458, 510], "overlaid": [17, 72, 154, 156, 163, 449, 492], "overlap": [3, 33, 34, 40, 57, 61, 93, 101, 118, 127, 129, 131, 163, 179, 185, 192, 198, 218, 271, 377, 378, 381, 383, 384, 386, 388, 413, 449, 465, 492], "overrid": [16, 65, 103, 114, 155, 163, 248, 249, 250, 251, 252, 253, 254, 258, 261, 262, 264, 271, 272, 280, 281, 286, 291, 301], "overridden": 179, "overrun": [134, 163], "oversampl": [69, 332, 334, 336, 337, 338, 339, 342, 343, 344], "overview": [40, 41, 164, 176, 178, 187], "overwhelm": 61, "overwrit": [59, 282, 284, 400, 402, 403], "ovo": 37, "own": [4, 6, 7, 52, 61, 103, 119, 121, 171, 174, 179, 183, 273, 510], "owner": 282, "ox": [2, 22, 217, 220, 233, 261], "oxford": [0, 22, 93, 118, 166, 194, 238, 248, 256, 324, 325, 431, 432, 501], "oxi": 181, "oxygen": [68, 181, 185], "oxyhaemoglobin": [181, 185], "p": [6, 26, 45, 51, 53, 55, 56, 59, 61, 65, 73, 77, 78, 79, 81, 82, 83, 93, 96, 104, 106, 109, 110, 118, 155, 163, 165, 176, 178, 181, 197, 198, 199, 200, 205, 208, 210, 219, 233, 236, 240, 241, 244, 248, 253, 261, 263, 319, 320, 328, 345, 348, 349, 351, 399, 474, 475, 477], "p001_unc": [81, 104], "p001_uncorrect": 78, "p_f": 19, "p_h": 19, "p_ma": 38, "p_statmap": [65, 77], "p_unmask": 38, "p_v": 19, "p_val": [78, 79, 81], "p_valu": [38, 47, 79, 81, 96, 112, 155, 163, 320, 332, 346], "pa": [0, 335], "pace": [118, 227], "packag": [0, 3, 4, 6, 15, 17, 19, 21, 31, 36, 43, 46, 51, 53, 61, 65, 70, 94, 96, 111, 114, 125, 126, 127, 128, 130, 132, 134, 148, 151, 156, 158, 161, 163, 164, 179, 181, 187, 188, 190, 210, 256, 257, 474, 507], "packagenam": 188, "packagevers": 188, "pad": [72, 73, 130, 151, 163, 191, 192, 355, 366, 367, 393, 396, 400, 402, 403, 476], "padlen": 476, "padtyp": 476, "page": [3, 38, 52, 55, 56, 61, 65, 77, 79, 118, 131, 133, 148, 152, 158, 159, 160, 163, 164, 168, 172, 176, 178, 179, 181, 188, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490], "pai": [0, 67], "paid": 0, "pair": [3, 76, 84, 88, 101, 116, 121, 131, 132, 163, 171, 172, 184, 277, 280, 282, 305, 306, 307, 308, 310, 311, 345, 346, 372, 373, 374, 439, 443, 448, 452, 454, 455, 456, 464, 475, 487, 509], "paired_design_matrix": 82, "pairwis": [54, 165], "panda": [3, 6, 11, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 65, 66, 67, 68, 71, 72, 74, 77, 78, 79, 80, 81, 82, 83, 93, 96, 101, 103, 106, 113, 120, 121, 127, 130, 132, 134, 145, 148, 154, 156, 158, 159, 161, 163, 171, 240, 248, 250, 252, 254, 255, 256, 257, 259, 260, 262, 263, 264, 265, 266, 267, 268, 270, 286, 312, 313, 332, 333, 335, 339, 346, 347, 348, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 438, 439, 440, 442, 450, 454, 462, 463, 465, 474, 477], "panek": [118, 227], "papadopoulo": [0, 118, 127, 136, 148, 163, 179, 204, 277], "papathanassi": [118, 199, 250], "paper": [0, 51, 52, 120, 121, 132, 163, 168, 178, 179, 181, 282], "par": 93, "paracingul": 93, "paradigm": [26, 68, 100, 115, 116, 121, 171, 181, 222, 235, 278, 284, 339, 356, 361, 362, 364, 443, 451, 456, 509], "paragraph": 178, "parahip": 492, "parahippocamp": 93, "parallel": [33, 35, 37, 38, 39, 41, 42, 45, 46, 47, 50, 51, 53, 56, 60, 61, 81, 101, 106, 109, 127, 163, 178, 181, 348, 379, 399], "param": [240, 241, 242, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465], "param1": 188, "param2": 188, "param_connectivity__kind": 102, "param_grid": [3, 36, 102, 114, 128, 163, 172, 305, 306, 307, 308], "param_valid": [143, 163], "paramagnet": [181, 185], "paramet": [3, 6, 15, 16, 17, 22, 24, 25, 26, 30, 31, 35, 38, 41, 45, 47, 48, 52, 54, 55, 56, 57, 59, 61, 63, 65, 72, 73, 75, 77, 79, 91, 93, 94, 96, 98, 104, 105, 108, 110, 113, 114, 116, 120, 121, 127, 128, 129, 130, 131, 132, 133, 134, 135, 142, 145, 148, 149, 151, 155, 156, 157, 158, 159, 160, 161, 163, 164, 166, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 183, 185, 187, 188, 189, 190, 202, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 319, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 507, 509, 510], "parameter_plot": 65, "parametr": [45, 67, 68, 79, 81, 106, 109, 110, 118, 132, 163, 176, 182, 184, 185, 320, 321, 326, 351, 477, 510], "parcel": [9, 24, 29, 49, 62, 111, 116, 118, 121, 128, 130, 131, 132, 133, 134, 139, 143, 146, 147, 148, 151, 158, 160, 163, 167, 185, 186, 187, 192, 198, 199, 202, 205, 206, 220, 225, 226, 231, 237, 240, 250, 252, 253, 254, 256, 257, 258, 260, 262, 264, 268, 279, 356, 358, 363, 373, 374, 376, 383, 419, 431, 432, 437, 441, 448, 450, 456, 465, 466, 507, 509, 510], "parcellationsifit": 52, "parent": [3, 4, 6, 7, 16, 24, 31, 35, 44, 51, 52, 58, 64, 65, 70, 73, 74, 77, 88, 96, 104, 111, 113, 179], "pari": [0, 179], "pariet": [21, 61, 93, 107, 225, 258], "parietomedi": 267, "park": [59, 118, 374], "parker": [118, 228], "pars": [160, 163, 188, 345, 372], "parse_bids_filenam": [134, 158, 161, 163], "parsimoni": 179, "parson": [118, 236, 263], "part": [7, 10, 15, 16, 23, 24, 39, 52, 54, 58, 70, 91, 93, 98, 114, 118, 127, 131, 135, 151, 157, 160, 161, 163, 172, 178, 179, 180, 186, 188, 191, 198, 200, 204, 240, 246, 247, 256, 257, 272, 277, 305, 306, 307, 308, 312, 313, 348, 349, 370, 371, 373, 379, 381, 382, 385, 388, 389, 391, 392, 393, 394, 395, 396, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 440, 448, 463, 465, 481, 482, 492], "partial": [28, 55, 102, 164, 165, 169, 198, 240, 245, 279, 374], "partial_correl": [28, 61, 245, 279], "partial_correlation_matric": 54, "partial_correlation_matrix": 61, "partial_correlation_measur": 54, "particip": [41, 43, 59, 68, 118, 179, 181, 185, 200, 228, 373, 374], "participant_id": 81, "particular": [16, 35, 68, 89, 101, 121, 137, 158, 163, 166, 174, 176, 178, 187, 188, 190, 284, 307, 322, 324, 325, 339, 371, 487], "particularli": [171, 273, 465], "partit": [3, 17, 31, 43, 232], "partli": [26, 43, 45, 72, 178, 181, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 268, 271, 272, 273, 277, 279, 280, 281, 286, 291, 301], "pascual": [0, 136, 163], "pass": [3, 4, 6, 10, 11, 16, 25, 31, 35, 38, 43, 44, 45, 46, 54, 57, 58, 59, 61, 64, 70, 72, 73, 77, 81, 91, 98, 105, 111, 113, 120, 121, 127, 129, 130, 131, 132, 134, 144, 146, 148, 151, 156, 158, 160, 161, 163, 164, 171, 172, 176, 178, 179, 180, 188, 190, 191, 192, 202, 240, 241, 242, 248, 282, 295, 296, 297, 298, 299, 300, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 334, 335, 339, 345, 346, 348, 351, 365, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 393, 394, 396, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 435, 436, 437, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 458, 459, 461, 462, 463, 464, 465, 467, 473, 475, 476, 477, 483, 487, 491], "passiv": 68, "past": [0, 59, 120, 166, 374], "patalasingh": [0, 160, 163], "patch": [19, 43, 44, 52, 188], "patch_openneuro_dataset": 287, "patcog": [52, 118], "path": [3, 4, 6, 7, 16, 24, 31, 35, 44, 51, 52, 58, 64, 65, 70, 73, 74, 77, 88, 96, 104, 111, 113, 119, 120, 121, 129, 133, 140, 151, 157, 159, 160, 163, 171, 177, 178, 179, 188, 189, 192, 199, 210, 221, 224, 234, 235, 241, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 301, 302, 305, 306, 307, 308, 310, 311, 312, 313, 332, 335, 339, 345, 346, 348, 352, 361, 364, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 413, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 455, 461, 463, 464, 465, 473, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487], "path_to_a_bids_dataset": 335, "path_to_edited_fil": 179, "path_to_new_env": 508, "pathlib": [3, 4, 6, 7, 16, 24, 31, 35, 44, 51, 52, 58, 64, 65, 70, 73, 74, 77, 88, 96, 104, 111, 113, 129, 157, 163, 190, 241, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 301, 305, 306, 307, 308, 310, 311, 312, 313, 332, 335, 339, 345, 346, 348, 352, 364, 371, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 455, 461, 463, 464, 465, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487], "pathlik": [133, 163], "patient": [118, 165, 185, 240], "patrick": [0, 129, 132, 134, 163], "pattern": [0, 4, 9, 29, 30, 48, 52, 54, 103, 116, 118, 121, 146, 154, 163, 165, 170, 171, 174, 177, 178, 179, 185, 187, 190, 198, 202, 206, 218, 223, 225, 242, 244, 249, 252, 262, 272, 282, 303, 309, 352, 364, 393, 398, 436, 456, 464, 470, 509], "paugam": [0, 129, 163], "paul": [0, 118, 127, 129, 133, 163, 198, 205, 217, 253], "paula": [0, 151, 163], "pauli": [22, 118, 194, 238, 259], "pauli2017": 22, "paz": 0, "pb": 0, "pbellec": [148, 163], "pca": [57, 312, 378, 384, 492], "pcc": [21, 24, 54, 58], "pcc_coord": [58, 64, 180], "pcc_mask": 24, "pcc_seed": 64, "pcc_seed_correl": 58, "pcc_seed_correlation_z": 58, "pcp": [194, 248], "pd": [3, 6, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 65, 66, 67, 68, 71, 72, 74, 77, 78, 79, 80, 81, 82, 83, 96, 101, 106, 113, 120, 190, 219, 249, 272, 279, 280, 291], "pdf": [16, 58, 69, 129, 160, 163, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 455], "pe": 185, "peak": [6, 35, 64, 65, 71, 73, 104, 111, 172, 174, 178, 179, 430, 465, 467, 474, 491], "pearlson": [118, 201, 251], "pearson": [24, 118, 319, 323, 445], "pearsonr": 24, "peck": [118, 324, 325], "pedagog": 39, "pediatr": [118, 202, 217, 219], "pedregosa": [0, 118, 122, 163, 225, 258], "pedro": [118, 202, 252], "peer": [0, 148, 163, 220], "peke": 0, "penal": [172, 178, 242, 310, 311], "penalti": [32, 36, 41, 42, 46, 172, 177, 185, 305, 306, 307, 310, 311], "pend": 81, "pennsylvania": 0, "penros": 323, "peopl": [0, 6, 145, 148, 149, 150, 151, 152, 153, 163, 178, 179], "pep8": [128, 129, 130, 163, 179, 188], "per": [3, 4, 32, 33, 35, 43, 51, 60, 68, 80, 96, 104, 106, 113, 156, 163, 165, 171, 179, 183, 192, 202, 207, 234, 242, 262, 280, 301, 305, 306, 307, 308, 310, 311, 313, 320, 329, 332, 333, 335, 339, 347, 371, 373, 378, 381, 384, 388, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 476], "per_compon": [51, 154, 163, 312, 313, 463], "peraza": [0, 128, 163], "perceiv": 13, "percent": [31, 36, 44, 45, 46, 65, 103, 104, 113, 151, 163, 171, 240, 305, 306, 307, 308, 310, 311, 312, 313, 332, 340, 350, 351, 370, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 436, 437, 449, 457, 459, 461, 463, 465, 477], "percentag": [59, 171, 199, 307], "percentil": [33, 35, 41, 42, 46, 68, 89, 90, 101, 305, 306, 307, 308, 310, 311, 350, 357, 370, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 437, 443, 444, 446, 449, 450, 451, 452, 454, 455, 457, 458, 459, 461, 465, 478], "percept": [118, 151, 163, 181, 204, 235, 277], "perceptu": [13, 118, 176], "perez": [0, 136, 141, 163], "perf403": 383, "perfect": [178, 435], "perfectli": [26, 178], "perform": [3, 7, 32, 35, 36, 41, 47, 54, 57, 65, 68, 73, 81, 82, 91, 93, 94, 96, 102, 103, 104, 109, 110, 113, 120, 121, 128, 154, 155, 156, 158, 163, 165, 170, 172, 175, 176, 177, 178, 180, 181, 182, 184, 185, 186, 190, 191, 192, 199, 205, 226, 228, 234, 244, 273, 296, 299, 305, 306, 307, 308, 310, 311, 312, 313, 332, 334, 341, 348, 351, 365, 366, 367, 368, 369, 370, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 399, 410, 412, 415, 417, 419, 421, 423, 425, 427, 429, 434, 437, 441, 443, 444, 447, 449, 450, 451, 458, 462, 463, 464, 465, 468, 470, 475, 476, 477, 487, 491, 492, 510], "perfus": [118, 373, 374, 478], "period": [6, 44, 68, 70, 305, 306, 307, 308, 310, 311, 312, 313, 336, 337, 338, 342, 343, 344, 351, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 436, 463, 465, 477], "perirhin": [118, 176], "perm": [45, 46], "permiss": [116, 151, 163], "permut": [45, 79, 81, 109, 118, 127, 154, 163, 174, 176, 181, 348, 365, 399, 499], "permutation_test_scor": [101, 174], "permuted_least_squar": [160, 163], "permuted_ol": [45, 81, 106, 109, 127, 128, 154, 159, 160, 161, 163, 176, 184, 348], "perpendicular": 435, "person": [164, 234], "pertin": [64, 77], "perturb": 54, "pescara": 0, "pessoa": [26, 118], "pet": 181, "peter": [118, 176, 187, 233, 236, 261, 263, 309], "petersburg": 0, "petersen": [61, 118, 202, 209, 230, 232, 265, 266, 267, 373, 374], "petkova": [118, 227], "pfleider": [26, 118], "phantom": [118, 199], "phase": 242, "phenom": [118, 269, 287], "phenomena": 68, "phenomenolog": 69, "phenomenologi": 0, "phenomenon": 176, "phenotyp": [54, 65, 102, 159, 163, 171, 175, 189, 197, 200, 207, 227, 248, 249, 268, 291], "philadelphia": [118, 177], "philip": [118, 227], "philipp": [0, 51, 74, 118, 122, 163, 170, 204, 210, 277, 312], "phillip": [118, 187, 201, 251], "phlypo": [0, 122, 163], "php": [3, 10, 11, 28, 42, 105, 111], "physic": [181, 400, 402, 403], "physio_plot": 65, "physiolog": [59, 68, 71, 374], "physiologi": 374, "pi": [25, 86, 319, 323], "pial": [10, 24, 25, 39, 70, 113, 114, 154, 160, 163, 211, 212, 213, 214, 215, 216, 290, 293, 294, 301, 335, 446, 452, 453, 454, 455, 459, 461, 483, 486, 487], "pial_left": [211, 212, 213, 214, 215, 216, 290, 446, 459, 487], "pial_right": [211, 212, 213, 214, 215, 216, 290, 446, 459, 507], "pick": [22, 26, 41, 169, 178, 181, 185, 273], "picked_slic": 38, "pictur": [52, 120, 168, 176, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490], "piec": [41, 52, 188, 190, 510], "pierr": [0, 118, 145, 147, 148, 149, 163, 165, 202, 240, 252], "pietrantoni": [0, 160, 163], "pietrini": [3, 33, 34, 40, 101, 118, 218, 271], "pietro": [3, 33, 34, 40, 101, 118, 218, 271], "pinel": [51, 68, 74, 118, 170, 204, 277, 312], "ping": [164, 188], "pinho": [0, 151, 155, 157, 163], "pip": [65, 130, 143, 148, 151, 163, 179, 188, 508], "pipe": 102, "pipelin": [3, 37, 39, 42, 43, 44, 45, 47, 77, 101, 102, 118, 132, 154, 163, 164, 170, 171, 172, 175, 176, 177, 185, 191, 202, 240, 241, 242, 248, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 351, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465, 477, 510], "pisner": [0, 151, 163], "pitfal": [118, 171, 176], "pittsburgh": 0, "pixar001_task": [51, 53, 56, 87], "pixar002_task": [51, 53, 56], "pixar003_task": [51, 53, 56], "pixar004_task": [51, 53], "pixar005_task": [51, 53], "pixar006_task": [51, 53], "pixar007_task": [51, 53], "pixar008_task": [51, 53], "pixar009_task": [51, 53], "pixar010_task": [51, 53], "pixar011_task": [51, 53], "pixar012_task": [51, 53], "pixar013_task": [51, 53], "pixar014_task": [51, 53], "pixar015_task": [51, 53], "pixar016_task": [51, 53], "pixar017_task": 51, "pixar018_task": 51, "pixar019_task": 51, "pixar020_task": 51, "pixar021_task": 51, "pixar022_task": 51, "pixar023_task": 51, "pixar024_task": 51, "pixar123_task": [50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 87, 93, 94, 97, 108], "pixar124_task": [51, 53], "pixar125_task": [51, 53], "pixar126_task": [51, 53], "pixar127_task": 51, "pixar128_task": 51, "pixar_desc": [50, 55, 56, 58, 59, 61], "pixar_spac": [50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 87, 93, 94, 97, 108], "pixdim": [59, 105], "pixel": [43, 44, 181, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 457, 458, 460, 475], "piyadasa": [118, 201, 251], "pkg": 188, "place": [26, 31, 101, 145, 163, 188, 282, 341, 370, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 436, 444, 487], "placehold": 401, "plai": [181, 192], "plain": 179, "plan_polar": 492, "plan_tempo": 492, "planar": 185, "planck": 0, "plane": 458, "planum": 93, "platform": [121, 144, 163, 188, 226], "pleas": [0, 3, 20, 31, 38, 52, 53, 55, 56, 61, 65, 74, 77, 79, 101, 103, 107, 134, 143, 149, 158, 163, 164, 169, 171, 174, 179, 185, 188, 192, 198, 210, 219, 220, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 495, 508], "plenti": 120, "plo": [118, 187], "plot": [1, 2, 4, 8, 9, 20, 21, 22, 24, 27, 28, 29, 31, 32, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 54, 55, 56, 57, 59, 60, 62, 64, 65, 66, 67, 70, 72, 73, 74, 77, 78, 79, 80, 81, 83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 101, 103, 104, 106, 107, 108, 109, 110, 111, 116, 120, 123, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 166, 169, 170, 171, 176, 180, 181, 184, 185, 186, 187, 191, 192, 194, 238, 240, 249, 254, 256, 257, 262, 264, 265, 266, 268, 271, 272, 275, 277, 288, 293, 294, 296, 299, 302, 332, 349, 352, 363, 364, 376, 381, 386, 388, 393, 473, 475, 483, 487, 495, 501, 503, 508, 509, 510], "plot_3d_and_4d_niimg": [2, 8, 509], "plot_3d_map_to_surface_project": [10, 29, 186, 459, 509], "plot_ab": [10, 15, 65, 81, 82, 104, 112, 403, 443, 507], "plot_adhd_dmn": [64, 75, 509], "plot_adhd_spher": [151, 163], "plot_advanced_decoding_scikit": [101, 115, 509], "plot_affine_transform": [86, 99, 509], "plot_age_group_prediction_cross_v": [102, 115, 151, 163, 509], "plot_anat": [6, 16, 19, 53, 158, 163, 169, 444, 451, 507], "plot_atla": [11, 29, 509], "plot_atlas_comparison": [50, 62, 509], "plot_beta_seri": [103, 115, 509], "plot_bids_analysi": [104, 115, 509], "plot_bids_featur": [65, 75, 179, 509], "plot_bland_altman": [65, 134, 161, 163], "plot_canica_analysi": [151, 163], "plot_carpet": [12, 29, 129, 154, 155, 159, 160, 163, 507, 509], "plot_color_gradi": 13, "plot_colormap": [13, 29, 509], "plot_compare_decomposit": [51, 62, 151, 163, 186, 509], "plot_compare_mean_imag": [87, 99, 509], "plot_connectivity_measur": [144, 163], "plot_connectom": [23, 50, 53, 54, 55, 56, 57, 61, 123, 125, 127, 140, 141, 146, 149, 151, 160, 163, 166, 169, 457, 460, 507], "plot_connectome_strength": [151, 154, 158, 163], "plot_contrast": 68, "plot_contrast_matrix": [6, 65, 67, 68, 132, 161, 163], "plot_copy_headers_math_img": [105, 115, 509], "plot_data_driven_parcel": [52, 62, 186, 509], "plot_decoding_tutori": [3, 8, 151, 163, 179, 186, 509], "plot_demo_glass_brain": [14, 29, 186, 509], "plot_demo_glass_brain_extens": [15, 29, 509], "plot_demo_more_plot": [16, 29, 509], "plot_demo_plot": [17, 29, 509], "plot_design_matrix": [6, 66, 67, 68, 75, 77, 80, 82, 103, 132, 133, 161, 163, 180, 184, 509], "plot_design_matrix_correl": [66, 132, 133, 163], "plot_dim_plot": [18, 29, 509], "plot_epi": [3, 27, 52, 91, 96, 97, 155, 158, 163, 444, 451, 507], "plot_ev": [72, 74, 132, 133, 154, 163, 180], "plot_extract_regions_dictlearning_map": [53, 62, 509], "plot_extract_regions_labels_imag": [88, 99, 509], "plot_extract_rois_smith_atla": [89, 99, 509], "plot_extract_rois_statistical_map": [90, 99, 509], "plot_fiac_analysi": [130, 163], "plot_fir_model": [67, 75, 509], "plot_first_level_detail": [68, 75, 509], "plot_fixed_effect": [130, 163], "plot_glass_brain": [10, 14, 15, 26, 65, 81, 82, 104, 109, 112, 130, 134, 141, 151, 159, 160, 163, 184, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 451, 507], "plot_group_level_connect": [54, 62, 144, 151, 163, 509], "plot_haxby_anova_svm": [31, 48, 143, 163, 509], "plot_haxby_decod": [151, 163], "plot_haxby_different_estim": [32, 48, 151, 163, 509], "plot_haxby_frem": [33, 48, 186, 509], "plot_haxby_full_analysi": [34, 48, 151, 163, 509], "plot_haxby_glm_decod": [35, 48, 509], "plot_haxby_grid_search": [36, 48, 509], "plot_haxby_mask": [19, 29, 509], "plot_haxby_mass_univari": [106, 115, 509], "plot_haxby_multiclass": [37, 48, 509], "plot_haxby_searchlight": [38, 48, 186, 509], "plot_haxby_searchlight_surfac": [39, 48, 509], "plot_haxby_stimuli": [40, 48, 509], "plot_haxby_understand_decod": [41, 48, 509], "plot_hist": 445, "plot_hrf": [69, 75, 509], "plot_ica_neurovault": [107, 115, 509], "plot_ica_resting_st": [108, 115, 509], "plot_img": [4, 6, 26, 38, 129, 134, 151, 158, 163, 187, 410, 412, 415, 417, 419, 421, 423, 425, 427, 507], "plot_img_comparison": [65, 134, 161, 163], "plot_img_on_surf": [10, 129, 133, 154, 156, 163], "plot_inverse_covariance_connectom": [55, 62, 186, 509], "plot_localizer_mass_univariate_method": [109, 110, 115, 509], "plot_localizer_simple_analysi": [110, 115, 509], "plot_localizer_surface_analysi": [70, 75, 509], "plot_mark": [61, 154, 158, 160, 163, 507], "plot_mask_comput": [91, 99, 192, 509], "plot_mask_large_fmri": [111, 115, 509], "plot_matric": 56, "plot_matrix": [28, 33, 37, 53, 54, 55, 56, 57, 59, 60, 61, 114, 145, 146, 151, 163, 169, 440], "plot_mixed_gambles_frem": [42, 48, 509], "plot_miyawaki_encod": [43, 48, 509], "plot_miyawaki_reconstruct": [44, 48, 509], "plot_multi_subject_connectom": [56, 62, 509], "plot_multiscale_parcel": [20, 29, 509], "plot_negate_imag": [92, 99, 509], "plot_neurovault_meta_analysi": [112, 115, 509], "plot_nifti_labels_simpl": [93, 99, 509], "plot_nifti_simpl": [94, 99, 192, 509], "plot_nilearn_101": [4, 8, 164, 509], "plot_oasi": [77, 84, 509], "plot_oasis_vbm": [45, 48, 151, 163, 186, 509], "plot_oasis_vbm_space_net": [46, 48, 509], "plot_overlai": [21, 29, 509], "plot_param": [72, 98], "plot_predictions_residu": [71, 75, 509], "plot_prob_atla": [22, 29, 51, 53, 89, 90, 138, 145, 146, 155, 163, 169, 170, 444, 450, 507, 509], "plot_probabilistic_atlas_extract": [57, 62, 509], "plot_proportion_activated_voxel": [78, 84, 509], "plot_python_101": [5, 8, 509], "plot_resample_to_templ": [95, 99, 509], "plot_roi": [3, 11, 18, 20, 27, 52, 68, 88, 91, 94, 96, 134, 147, 154, 155, 160, 163, 166, 191, 192, 444, 449, 507], "plot_roi_extract": [96, 99, 509], "plot_second_level_association_test": [79, 84, 509], "plot_second_level_design_matrix": [80, 84, 509], "plot_second_level_one_sample_test": [81, 84, 509], "plot_second_level_two_sample_test": [82, 84, 509], "plot_seed_to_voxel_correl": [58, 62, 149, 163, 509], "plot_signal_extract": [59, 62, 192, 509], "plot_simulated_connectom": [60, 62, 509], "plot_simulated_data": [47, 48, 509], "plot_single_subject_single_run": [6, 8, 509], "plot_slic": 47, "plot_smooth_mean_imag": [97, 99, 509], "plot_sphere_based_connectom": [61, 62, 151, 163, 509], "plot_spm_multimodal_fac": [72, 75, 509], "plot_stat_map": [2, 6, 10, 13, 16, 18, 26, 31, 32, 33, 38, 42, 43, 45, 46, 51, 53, 58, 64, 67, 68, 71, 72, 73, 77, 78, 79, 83, 87, 89, 90, 92, 94, 95, 96, 98, 101, 103, 106, 107, 108, 110, 112, 120, 130, 134, 136, 147, 148, 155, 156, 158, 159, 163, 169, 171, 184, 192, 458, 507], "plot_stat_map_from_displai": 16, "plot_surf": [114, 127, 131, 132, 135, 143, 145, 151, 155, 156, 157, 158, 161, 163, 179, 180, 453, 454, 455, 507], "plot_surf_atla": [23, 29, 509], "plot_surf_contour": [10, 129, 132, 154, 163], "plot_surf_roi": [23, 24, 129, 130, 132, 134, 143, 145, 147, 151, 155, 161, 163, 452, 507], "plot_surf_stat_map": [10, 24, 25, 29, 39, 70, 131, 132, 143, 145, 147, 151, 154, 158, 159, 160, 161, 163, 180, 446, 452, 453, 509], "plot_surface_101": [7, 8, 509], "plot_surface_bids_analysi": [113, 115, 509], "plot_surface_image_and_mask": [114, 115, 509], "plot_surface_projection_strategi": [25, 29, 509], "plot_test_tim": 164, "plot_threshold": [83, 84, 509], "plot_threshold_imag": [98, 99, 509], "plot_transpar": [26, 29, 509], "plot_trisurf": 25, "plot_two_runs_model": [73, 75, 130, 163, 509], "plot_typ": [64, 77, 332, 345, 346, 475], "plot_visu": [27, 29, 509], "plot_visualize_megatrawls_netmat": [28, 29, 509], "plot_write_events_fil": [74, 75, 509], "plotli": [10, 129, 130, 131, 135, 158, 163, 381, 388, 413, 452, 454, 455, 507, 508], "plotlysurfacefigur": [10, 132, 158, 163, 452], "plotted_slic": 110, "plotting_config": [6, 26], "plt": [5, 6, 12, 13, 16, 19, 25, 26, 27, 32, 34, 36, 37, 40, 41, 43, 44, 45, 46, 47, 51, 52, 54, 58, 60, 61, 64, 65, 66, 67, 68, 69, 71, 77, 80, 81, 82, 86, 96, 98, 102, 103, 104, 109, 110, 111, 114, 191, 437, 445, 447, 452, 453, 454, 455], "plu": [332, 334, 339], "plug": [180, 192, 319, 323], "plugin": 188, "pluim": [118, 165, 240], "plunkett": [148, 163], "plural": 185, "pmc": [118, 210], "pmc6871319": [118, 210], "pmid": [118, 172, 231, 237, 260, 264], "pna": [118, 176, 187, 198, 202, 233, 261, 374], "pnas_smith09_rsn10": 2, "png": [6, 10, 16, 24, 44, 64, 65, 77, 186, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 455, 507], "point": [3, 4, 7, 9, 16, 23, 29, 57, 58, 86, 88, 93, 96, 111, 114, 116, 120, 148, 151, 160, 163, 169, 171, 178, 181, 185, 187, 188, 189, 190, 242, 305, 306, 307, 308, 332, 366, 367, 393, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 435, 437, 441, 444, 447, 449, 450, 451, 455, 458, 468, 469, 475, 487, 509], "pointer": [101, 174], "pokharel": [0, 130, 163], "pokropek": [118, 219], "polar": [93, 161, 163, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 465], "poldrack": [103, 118, 121, 171, 187, 208, 223, 226, 269, 282, 284, 287], "pole": [59, 93], "pole_occipit": 492, "pole_tempor": 492, "polici": [158, 163, 197], "polimeni": [118, 231, 237, 260, 264], "polin": [51, 52, 74, 118, 121, 165, 168, 170, 204, 226, 241, 277, 282, 284, 312, 351, 477], "pollet": [0, 131, 163], "polydata": [24, 132, 135, 163, 364, 483], "polymesh": [7, 24, 132, 163, 293, 452, 453, 454, 455, 461, 483], "polynomi": [66, 68, 180, 332, 339], "pomara": [118, 227], "pone": [118, 187], "pontil": [118, 177, 202], "pool": [202, 210], "pooled_subject": 54, "poorli": [68, 96, 192, 194, 238, 501], "pop": 383, "popul": [50, 53, 54, 55, 56, 58, 59, 61, 118, 165, 180, 198, 217, 219, 240, 241, 305, 306, 307, 308, 310, 311, 312, 313, 332, 351, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 436, 463, 465, 477], "popular": [6, 51, 186, 190, 305, 306], "portabl": [64, 77, 192], "portion": 72, "portug": 0, "pos_label": 41, "posit": [6, 10, 15, 17, 18, 25, 51, 54, 61, 68, 72, 76, 81, 82, 83, 84, 86, 96, 98, 102, 116, 118, 120, 131, 133, 154, 158, 161, 163, 171, 176, 178, 181, 184, 185, 192, 198, 241, 244, 248, 277, 310, 311, 327, 346, 348, 349, 370, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 433, 434, 437, 441, 443, 444, 446, 447, 449, 450, 451, 455, 456, 458, 459, 465, 474, 475, 487, 492, 507, 509], "positive_edg": 61, "posixpath": 4, "possibl": [4, 6, 15, 16, 17, 47, 70, 82, 83, 86, 96, 103, 120, 121, 141, 158, 160, 163, 164, 165, 168, 171, 176, 178, 179, 181, 185, 187, 188, 191, 192, 226, 240, 241, 242, 248, 305, 306, 307, 308, 309, 310, 311, 312, 313, 320, 322, 324, 325, 332, 335, 346, 348, 355, 366, 371, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 429, 430, 437, 443, 447, 462, 463, 464, 465, 475, 488, 489, 507], "possibli": [6, 68, 192], "post": [24, 54, 68, 96, 118, 134, 136, 163, 165, 179, 191, 220, 240, 273, 465, 492], "postcentr": [10, 93], "posterior": [23, 24, 58, 61, 64, 93, 145, 161, 163, 180, 265, 267, 452, 454, 455], "potenti": [6, 57, 58, 91, 93, 94, 96, 103, 118, 157, 163, 164, 176, 179, 185, 188, 261, 348, 378, 384, 388, 492], "power": [12, 59, 61, 77, 79, 81, 118, 120, 126, 142, 154, 163, 165, 172, 173, 177, 185, 190, 192, 202, 209, 265, 266, 373, 374, 436], "power2": 373, "power2d": 373, "ppd": 248, "ppi": 103, "pqu9r": [208, 255], "pr": [65, 160, 163, 188], "practic": [7, 34, 54, 70, 102, 165, 168, 172, 174, 176, 178, 179, 180, 181, 184, 187, 190, 191], "pradeep": [0, 118, 147, 163, 171], "prafulla": 0, "prakhar": [0, 132, 163], "praneeth": [39, 118], "pre": [65, 73, 96, 104, 128, 143, 148, 160, 163, 181, 192, 207, 323], "prec": [56, 178], "prec_to_parti": [143, 163], "preced": [39, 43, 179, 192, 332], "precentr": [10, 93], "precentral_l": 199, "precis": [16, 44, 55, 60, 64, 93, 128, 163, 165, 168, 169, 178, 187, 192, 204, 229, 240, 241, 242, 244, 245, 277, 305, 307, 322, 324, 325, 348, 399], "precision_": [55, 56, 60, 165], "precision_scor": 44, "precision_to_print": 44, "precision_weight": 329, "precisions_": [56, 60, 165, 241, 242], "precisions_init": 244, "precomput": [3, 311], "precun": 93, "pred": 41, "predefin": [11, 128, 163], "predict": [32, 33, 35, 41, 42, 43, 47, 54, 61, 63, 66, 75, 100, 115, 118, 120, 155, 156, 158, 163, 173, 174, 176, 177, 179, 181, 182, 185, 186, 187, 198, 207, 209, 240, 258, 265, 268, 279, 288, 305, 306, 307, 308, 309, 310, 311, 324, 325, 332, 346, 351, 363, 368, 376, 384, 386, 393, 427, 451, 456, 474, 508, 509, 510], "predict_proba": 41, "predicted_timeseri": [71, 180], "prediction_scor": 45, "predicton_accuraci": 3, "predictor": [6, 43, 180, 181, 324, 325, 374], "prefer": [42, 54, 102, 134, 163, 168, 179, 190], "prefix": [70, 77, 335, 345, 351, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 465, 477], "prefront": 61, "preliminari": [118, 200, 236, 263], "prematur": 244, "premotor": 107, "premrudeepreechacharn": [0, 133, 163], "premultipli": [305, 306, 308, 310, 311], "prep": 65, "prepar": [45, 61, 96, 102, 104, 120, 138, 163, 175, 189, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 465, 510], "prepend": 345, "preproc": [103, 104, 113, 335], "preproc_bold": [50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 87, 93, 94, 97, 103, 104, 108, 113], "preprocess": [6, 31, 35, 36, 39, 43, 44, 47, 64, 65, 70, 91, 94, 102, 104, 108, 113, 114, 118, 119, 128, 143, 163, 169, 170, 176, 177, 181, 185, 192, 197, 200, 221, 227, 228, 234, 248, 249, 268, 291, 332, 335, 351, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 465, 477, 491, 492, 495, 496, 510], "prescrib": 349, "preselect": 59, "presenc": [43, 68, 106, 465, 467], "present": [0, 3, 10, 23, 24, 26, 41, 43, 44, 57, 59, 67, 71, 104, 114, 120, 128, 144, 163, 169, 170, 171, 178, 180, 181, 182, 188, 190, 192, 220, 221, 222, 234, 244, 248, 254, 271, 305, 306, 307, 308, 312, 313, 361, 373, 374, 376, 377, 378, 379, 380, 383, 384, 385, 387, 462, 463, 464, 468, 492], "preserv": [54, 61, 102, 356, 368, 446, 462, 463, 464], "preset": [157, 158, 163, 374, 507], "prespecifi": 192, "press": [68, 70, 74, 78, 79, 81, 82, 109, 118, 181, 275, 277, 285, 302, 324, 325, 491], "presum": [327, 349], "pretti": [4, 107], "prettier": [4, 131, 163, 179], "pretty_brain": 507, "prevent": [129, 134, 163, 164, 345, 366, 367, 391, 392, 393, 394, 395, 396], "previou": [2, 10, 15, 44, 52, 57, 61, 65, 66, 68, 73, 74, 79, 96, 132, 157, 158, 163, 165, 168, 172, 174, 178, 181, 244, 305, 306, 307, 308, 312, 313, 379, 385, 463, 491, 492], "previous": [3, 101, 120, 151, 154, 158, 160, 163, 171, 181, 197, 232], "price": [67, 176], "primal": 178, "primari": [82, 179, 475], "primarili": 103, "primat": 69, "prime": 118, "primer": [182, 510], "princip": [202, 279, 374], "principl": [101, 168, 171, 175, 177, 185, 309, 510], "print": [2, 3, 4, 6, 7, 10, 11, 12, 16, 17, 19, 21, 23, 24, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 45, 46, 47, 50, 51, 52, 54, 55, 56, 57, 58, 59, 61, 64, 65, 66, 71, 72, 73, 74, 77, 79, 83, 87, 88, 91, 93, 94, 95, 96, 97, 101, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 120, 132, 163, 164, 171, 179, 187, 190, 199, 250, 332, 346, 358], "print_changed_onli": 192, "prior": [30, 48, 51, 57, 61, 68, 93, 111, 116, 118, 156, 163, 165, 177, 180, 241, 260, 286, 305, 306, 310, 311, 378, 383, 384, 386, 436, 451, 456, 492, 509], "priori": 51, "prioriti": [188, 190, 292], "privat": [127, 129, 130, 160, 163], "prni": [118, 177, 202, 252], "pro": 13, "prob": [22, 256, 257, 444, 449], "probabilist": [9, 29, 49, 54, 62, 102, 116, 118, 128, 129, 148, 159, 163, 167, 179, 185, 191, 192, 208, 217, 219, 225, 229, 240, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 272, 358, 376, 384, 412, 431, 432, 437, 444, 448, 449, 450, 451, 456, 457, 469, 473, 492, 507, 509, 510], "probabilit": 259, "probabl": [6, 12, 22, 42, 46, 64, 68, 79, 81, 83, 96, 166, 176, 178, 181, 185, 187, 188, 217, 220, 228, 256, 257, 286], "probe": [68, 70, 175, 185], "probe_funct": 244, "problem": [3, 6, 33, 35, 41, 42, 96, 111, 118, 171, 172, 173, 176, 177, 178, 179, 181, 185, 187, 188, 244, 310, 311, 313, 319, 322, 323, 324, 325, 348, 399], "problemat": 68, "proc_bold": 65, "proce": [43, 58, 67, 120], "procedur": [6, 33, 78, 79, 81, 86, 89, 106, 166, 171, 176, 181, 184, 185, 199, 202, 277, 331, 348, 399, 477, 502], "proceed": [118, 176, 180, 187, 198, 202, 233, 261, 309, 374], "process": [16, 17, 34, 38, 41, 45, 53, 56, 65, 96, 104, 111, 118, 119, 120, 136, 163, 165, 166, 169, 170, 171, 174, 178, 179, 181, 184, 185, 187, 188, 190, 191, 192, 198, 202, 207, 208, 218, 219, 225, 241, 258, 273, 277, 305, 306, 307, 308, 310, 311, 312, 313, 332, 346, 351, 352, 357, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 463, 464, 465, 471, 472, 477, 495], "process_executor": 46, "process_mask": [38, 47, 142, 163], "process_mask_": 309, "process_mask_img": [38, 47, 176, 309], "processor": [101, 174], "produc": [6, 15, 25, 49, 62, 65, 73, 81, 103, 109, 116, 158, 160, 163, 181, 185, 192, 268, 303, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 412, 451, 465, 487, 507, 509], "product": [24, 58, 81, 178], "profil": [6, 178, 179, 319, 323], "prognosi": [175, 187], "program": [178, 507], "progress": [38, 45, 106, 109, 138, 163, 332], "prohibit": 178, "project": [0, 9, 10, 16, 25, 29, 39, 45, 61, 77, 113, 114, 116, 118, 132, 141, 143, 145, 153, 157, 158, 163, 164, 178, 180, 186, 197, 200, 202, 205, 208, 227, 228, 229, 248, 253, 279, 286, 291, 312, 313, 351, 380, 381, 382, 387, 388, 389, 403, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 437, 443, 446, 448, 452, 453, 454, 455, 456, 457, 460, 477, 483, 487, 507, 509], "projector": [158, 163, 428], "promis": [118, 176], "promot": [172, 173, 188], "prompt": 508, "pronounc": [434, 449, 450, 451, 458], "proper": [3, 13, 36, 134, 158, 163, 178, 508], "properli": [39, 131, 134, 163, 176, 192, 194, 238, 437, 443, 501], "properti": [52, 174, 178, 181, 185, 192, 235, 309, 315, 322, 324, 332, 346, 377, 380, 383, 387, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 473, 479, 481, 483], "proport": [6, 52, 54, 71, 76, 84, 102, 116, 169, 181, 184, 185, 277, 324, 327, 346, 447, 451, 456, 509], "proportion": 181, "proportion_true_discoveries_img": [78, 327], "propos": [69, 103, 179, 180, 188, 199, 205, 393], "protocol": [74, 185, 204, 277], "proton": [219, 272], "prototyp": 179, "prove": [178, 192], "provid": [3, 5, 6, 10, 16, 17, 26, 31, 36, 41, 47, 51, 52, 57, 59, 65, 68, 69, 73, 77, 78, 79, 81, 82, 86, 91, 93, 94, 96, 101, 103, 104, 109, 113, 114, 119, 120, 121, 129, 130, 132, 134, 138, 146, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 170, 171, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 190, 192, 197, 198, 199, 208, 217, 218, 228, 231, 233, 237, 240, 241, 242, 244, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 271, 282, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 323, 332, 333, 334, 338, 339, 344, 345, 346, 348, 351, 357, 366, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 433, 435, 436, 447, 449, 453, 462, 463, 464, 465, 466, 473, 475, 477, 487, 491, 492, 507, 508], "proximal_oper": [130, 163], "pruett": [61, 118, 209, 265], "pruim": [118, 373, 374], "psc": [130, 151, 155, 163, 240, 305, 306, 307, 308, 310, 311, 312, 313, 332, 351, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 436, 463, 465, 477], "pseudo": [79, 109, 312, 313, 324, 348, 350, 399, 463], "pseudoinvers": 323, "psychiatr": 185, "psychiatri": [118, 217, 227], "psychoinformat": 0, "psycholog": 187, "psychologi": 0, "psychophysiolog": 103, "pth": [132, 163], "public": [0, 2, 65, 103, 121, 127, 129, 130, 135, 158, 160, 161, 163, 179, 185, 226, 228], "publicli": 169, "publish": [0, 164, 234, 282, 357, 478], "pubm": [51, 118, 170, 172, 250, 312], "pubu": 61, "pull": [138, 160, 163, 185, 187], "pure": [101, 106, 134, 163, 179, 310, 311], "purpl": 71, "purple_green": 507, "purpos": [16, 17, 65, 70, 72, 73, 81, 104, 113, 120, 178, 184, 192, 197, 200, 204, 207, 208, 225, 229, 234, 268, 401, 475, 507], "push": [164, 178, 179, 188], "put": [7, 41, 56, 57, 73, 101, 125, 163, 179, 183, 312, 313, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 465, 477, 492], "pval": 399, "pvals_anova": [109, 110], "pvals_bonferroni": 106, "pwn": 164, "px": [322, 324, 325], "py": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 128, 129, 151, 156, 157, 158, 160, 163, 164, 171, 179, 188, 192, 509], "pylab": 448, "pymvpa": [3, 4, 40, 218, 271], "pyplot": [5, 6, 12, 13, 16, 19, 25, 26, 27, 32, 34, 36, 37, 40, 41, 43, 44, 45, 46, 47, 51, 52, 54, 58, 60, 61, 64, 65, 66, 67, 68, 69, 71, 77, 80, 81, 82, 86, 96, 98, 102, 103, 104, 109, 110, 111, 114, 166, 191, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 436, 437, 441, 442, 443, 444, 446, 447, 449, 450, 451, 452, 454, 455, 456, 507], "pyproject": [128, 163, 179, 188, 508], "pyramid": 7, "pytest": [132, 163, 164, 179, 188, 508], "pytest_mpl_gener": 188, "pytest_output": 164, "python": [1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 120, 125, 127, 128, 130, 132, 133, 135, 143, 149, 150, 151, 156, 158, 161, 163, 171, 178, 179, 186, 187, 188, 362, 508, 509], "python2": [148, 149, 150, 151, 163], "python3": [3, 4, 15, 17, 19, 21, 31, 36, 43, 46, 51, 53, 61, 70, 94, 114, 149, 151, 163, 179, 508], "pythoncvers": 188, "pythonvers": 188, "q": [118, 181, 188, 328, 349, 475], "qform_cod": [59, 105], "qi": [310, 311], "qingyang": [118, 227], "qoffset_i": [59, 105], "qoffset_x": [59, 105], "qoffset_z": [59, 105], "quadrat": [26, 373], "qualit": [143, 163], "qualiti": [12, 26, 65, 71, 79, 109, 118, 148, 163, 164, 179, 180, 181, 188, 192, 198, 200, 248, 377, 380, 383, 387, 436, 463], "quality_check": 248, "quantif": [332, 341], "quantifi": 188, "quantil": 181, "quantiti": [178, 320], "quatern_b": [59, 105], "quatern_c": [59, 105], "quatern_d": [59, 105], "quayl": 118, "quebec": 0, "queen": 0, "queri": [107, 112, 282, 284, 304], "question": [3, 7, 54, 67, 68, 102, 168, 187, 188, 192, 200, 268, 508], "quick": [103, 164, 187], "quicker": [168, 179], "quickli": [4, 35, 64, 73, 77, 165, 168, 178, 179, 188], "quickstart": 186, "quinn": [118, 217], "quirion": [0, 145, 163], "quit": [3, 6, 68, 169, 178, 204, 277], "quotient": 200, "qu\u00e9bec": 0, "r": [4, 7, 10, 15, 16, 25, 26, 32, 36, 43, 44, 50, 54, 59, 61, 93, 96, 105, 106, 118, 129, 151, 158, 163, 165, 166, 180, 188, 205, 208, 209, 217, 225, 231, 233, 237, 248, 253, 258, 260, 261, 264, 265, 269, 287, 310, 311, 332, 345, 346, 351, 373, 374, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 434, 437, 441, 443, 444, 447, 449, 450, 451, 458, 475, 477, 481, 482, 507], "r2": [47, 155, 163, 306, 308, 324], "r2_score": [43, 311], "r2hvk": [229, 259], "r_": 44, "r_squar": [65, 71, 77, 158, 163, 324, 332, 346], "ra": 365, "raamana": [0, 118, 147, 163, 171], "rachakonda": [118, 201, 251], "rachlin": [118, 227], "radio": 369, "radiolog": [17, 129, 132, 134, 163, 400, 402, 403, 434, 437, 441, 443, 444, 447, 449, 450, 451, 458], "radiu": [10, 38, 39, 47, 58, 61, 64, 103, 138, 163, 175, 180, 185, 192, 232, 267, 309, 386, 487, 492], "radius_neighbors_graph": 39, "rahim": [0, 54, 102, 118, 122, 126, 136, 145, 151, 163], "rahul": [0, 118, 129, 163, 217], "rai": [118, 233, 261], "raichl": [118, 374], "raimon": [118, 373, 374], "rainei": [118, 236, 263], "rainer": [118, 176, 187, 309], "rais": [5, 96, 102, 127, 128, 129, 130, 138, 145, 147, 148, 151, 158, 160, 163, 190, 240, 241, 242, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 332, 335, 339, 346, 348, 349, 352, 361, 365, 366, 370, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 443, 444, 449, 450, 451, 454, 462, 463, 464, 465, 508], "rakuten": 0, "ram": 164, "ramnani": [118, 198], "ramsei": [118, 165], "ran": 45, "randi": [118, 202, 217, 228, 231, 237, 260, 264], "randn": 47, "random": [3, 7, 43, 44, 47, 54, 58, 66, 101, 102, 106, 114, 118, 143, 155, 161, 163, 168, 169, 170, 171, 178, 179, 181, 187, 205, 253, 312, 313, 322, 324, 325, 332, 341, 348, 399, 462, 463, 465, 467], "random_st": [35, 38, 45, 46, 47, 51, 52, 53, 54, 65, 94, 102, 107, 108, 160, 163, 169, 305, 307, 312, 313, 332, 341, 348, 399, 462, 463], "randomli": [22, 176], "randomst": [114, 312, 313, 332, 341, 348, 399, 462, 463], "rang": [10, 15, 26, 41, 44, 47, 50, 52, 56, 58, 60, 65, 69, 71, 80, 81, 82, 103, 106, 109, 111, 114, 134, 141, 145, 155, 163, 178, 179, 202, 208, 241, 244, 255, 349, 350, 370, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 443, 444, 446, 451, 455, 457, 458, 459, 461, 475], "ranjit": [118, 227], "rank": [132, 163, 176, 322, 323, 324, 325, 370, 399], "raphael": [0, 127, 155, 156, 157, 158, 159, 160, 163], "raphson": 178, "rapid": [103, 118, 221], "rapidli": 178, "raquel": [59, 118, 373, 374], "rare": [135, 163, 178], "rarr": [120, 192], "rasero": [0, 156, 163], "rastko": [59, 118, 373, 374], "rate": [3, 6, 68, 83, 138, 163, 178, 181, 185, 192, 234, 327, 348], "rater": 248, "rather": [16, 26, 57, 68, 96, 103, 121, 141, 143, 145, 147, 151, 156, 158, 163, 165, 178, 190, 191, 225, 241, 250, 282, 284, 312, 313, 348, 378, 384, 474, 492], "ratio": [73, 96, 147, 163, 185, 268, 305, 306, 308, 310, 311, 312, 313, 463, 465], "ratio_n_voxel": [53, 169, 465], "rational": 181, "raut": [118, 232, 267], "ravel": [40, 42, 44, 46, 47, 106, 109, 110], "ravi": [118, 201, 251], "raw": [83, 94, 104, 113, 155, 163, 171, 190, 192, 207, 208, 223, 234, 255, 305, 306, 307, 308, 312, 313, 379, 385, 444, 451, 463, 473], "raw_valu": 43, "rc": [118, 219], "rdbu_r": [13, 47, 114, 134, 161, 163, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 437, 440, 446, 448, 451, 455, 457, 458, 459, 461], "rdpu": 43, "re": [2, 6, 22, 43, 67, 68, 86, 121, 157, 163, 179, 181, 282, 295, 296, 297, 298, 299, 300, 315, 322, 324, 325, 335, 466], "reach": [56, 178, 179, 181, 187, 282, 373], "reaction": 185, "read": [4, 24, 39, 47, 68, 70, 79, 83, 104, 107, 109, 112, 113, 118, 121, 154, 163, 179, 186, 187, 204, 221, 226, 275, 276, 277, 390, 479], "read_csv": [3, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 65, 71, 72, 96, 101, 106, 120, 190], "read_tabl": [6, 67, 68], "readabl": [68, 111, 128, 163], "reader": [68, 187, 510], "readi": [64, 77, 120, 142, 163, 170, 179, 188], "readili": [166, 171, 174, 187, 190, 191, 465], "readm": [154, 163, 207], "real": [43, 171, 176, 178, 181, 190, 192], "real_timeseri": 71, "realign": [113, 221, 280], "realist": [118, 199, 268, 452, 454, 455, 461], "realli": [3, 71, 149, 163, 171, 374], "realm": 96, "reason": [33, 39, 68, 121, 164, 172, 174, 176, 178, 179, 181, 188, 487], "reassign": 462, "reassur": 68, "rebecca": [61, 118, 207, 209, 265, 268], "rebuild": 164, "rec": 335, "recal": [44, 305, 307], "recall_scor": 44, "recall_to_print": 44, "recap": [2, 4], "recapitul": 232, "recarrai": [158, 163], "recast": 192, "receiv": [41, 71, 103, 171, 185, 445], "recent": [10, 142, 145, 146, 148, 158, 163, 170, 188, 481], "recip": 191, "recognit": [0, 3, 30, 32, 48, 52, 100, 115, 116, 118, 128, 163, 174, 176, 177, 186, 187, 202, 252, 271, 307, 309, 356, 358, 361, 363, 364, 376, 385, 398, 399, 427, 444, 448, 451, 456, 509], "recogniz": 179, "recommend": [6, 13, 25, 65, 103, 107, 127, 132, 135, 149, 150, 151, 156, 158, 160, 161, 163, 171, 176, 181, 187, 190, 192, 373, 465, 474, 477, 487, 492, 508], "recomput": [68, 101, 176, 329], "reconstruct": [30, 43, 48, 116, 118, 192, 206, 224, 240, 247, 281, 312, 313, 376, 379, 385, 456, 471, 472, 509], "reconstructed_img": [312, 313], "record": [35, 43, 68, 171, 181, 185], "recov": [47, 61, 144, 163, 165], "recoveri": [118, 187, 312], "recruit": [118, 187], "rectangl": [19, 43, 52, 86], "recurs": [47, 52, 101, 118, 151, 163, 168, 174, 185, 186, 315, 463, 464, 470], "recursive_neighbor_agglomer": [52, 127, 163], "red": [15, 16, 19, 43, 54, 98, 131, 149, 163, 180, 181, 185, 507], "reddi": [0, 118, 125, 136, 138, 141, 145, 146, 147, 148, 151, 155, 163, 171], "redirect": 188, "redownload": 164, "reduc": [17, 26, 31, 35, 36, 47, 52, 68, 81, 89, 96, 103, 118, 132, 147, 148, 151, 155, 163, 173, 177, 178, 179, 185, 192, 202, 228, 242, 307, 308, 312, 313, 373, 374, 377, 380, 383, 387, 462, 463, 464, 468], "reduce_confound": [59, 268], "reduced_confound": 59, "reducedconfounds_regressor": [50, 55, 56, 58, 59, 61], "reduct": [134, 163, 175, 313, 463], "reduction_ratio": 313, "redund": [132, 151, 163, 179], "ree": 234, "rees": [118, 233, 261], "ref": [57, 93, 171, 492], "ref_img": [435, 445], "ref_label": [65, 435, 445], "ref_niimg": [105, 111, 364], "refactor": [128, 129, 130, 132, 142, 156, 158, 160, 163, 164, 188], "refer": [11, 20, 49, 62, 65, 68, 70, 80, 95, 96, 104, 110, 113, 116, 118, 119, 120, 127, 128, 129, 136, 141, 149, 156, 158, 159, 160, 163, 167, 175, 179, 180, 181, 183, 184, 188, 190, 191, 192, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 507, 509, 510], "referenc": 180, "refin": [56, 60, 61, 242], "refit": [41, 102], "reflect": [54, 104, 165, 179, 181, 202, 248, 252, 449, 450], "reformat": [81, 128, 163], "refresh": [138, 163], "reg_i": 339, "reg_nam": 334, "regard": [66, 133, 154, 163, 177, 273, 298, 374], "regardless": [282, 284], "regener": 179, "regim": 52, "region": [6, 11, 16, 17, 20, 23, 24, 26, 33, 35, 42, 43, 45, 46, 47, 49, 51, 52, 55, 58, 59, 61, 62, 65, 68, 71, 72, 77, 85, 99, 102, 111, 114, 116, 118, 127, 129, 131, 133, 134, 136, 140, 142, 143, 146, 151, 154, 156, 158, 163, 165, 167, 170, 171, 177, 179, 180, 181, 185, 187, 189, 191, 194, 199, 202, 205, 208, 209, 217, 218, 220, 223, 225, 229, 232, 238, 240, 248, 250, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 271, 283, 309, 312, 313, 356, 358, 361, 363, 364, 368, 370, 374, 376, 377, 378, 380, 381, 382, 383, 384, 386, 387, 388, 389, 412, 413, 430, 431, 432, 433, 434, 437, 441, 448, 449, 450, 451, 453, 454, 456, 457, 473, 492, 495, 501, 507, 509, 510], "region_atlas_": [377, 383], "region_coord": [54, 55, 57, 102, 140, 163, 258], "region_extractor": [158, 163], "region_id": [131, 163], "region_ids_": [135, 163, 377, 380, 383, 387], "region_label": 88, "region_labels_min_s": 88, "region_labels_not_diag": 88, "region_names_": [114, 131, 132, 135, 163, 377, 380, 383, 387], "region_sign": [377, 378, 380, 381, 383, 384, 386, 387, 388, 463, 465, 469, 472], "region_t": 56, "regionextractor": [53, 89, 133, 134, 136, 138, 144, 149, 161, 163, 169, 466, 467], "regions_dict": 10, "regions_extracted_img": [53, 169, 467], "regions_img": [53, 89, 169], "regions_img_": [53, 89, 169, 465], "regions_index": [53, 169], "regions_indic": 10, "regions_indices_network3": 89, "regions_indices_of_map3": [53, 169], "regions_percentile_img": 90, "regions_value_img": 90, "regist": [181, 198, 202, 217, 252], "registr": [118, 166, 181, 202, 219, 367, 507], "regress": [28, 32, 33, 35, 42, 43, 47, 58, 59, 64, 70, 73, 104, 113, 118, 120, 129, 138, 148, 154, 155, 156, 160, 163, 166, 171, 175, 176, 177, 179, 180, 181, 185, 188, 198, 202, 248, 305, 306, 307, 308, 310, 311, 313, 319, 324, 325, 332, 346, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 465, 477, 491, 510], "regression_result": 328, "regressionresult": [160, 163, 319, 323, 328, 332, 341, 346], "regressor": [35, 42, 46, 59, 64, 65, 68, 70, 103, 104, 109, 113, 127, 132, 154, 155, 159, 163, 166, 172, 180, 279, 306, 308, 311, 328, 332, 334, 339, 348, 373, 374, 399, 440, 489, 491], "regressormix": [135, 163], "regul": 198, "regular": [3, 33, 41, 42, 47, 59, 68, 96, 105, 118, 121, 154, 163, 164, 171, 172, 175, 177, 178, 185, 186, 187, 191, 241, 242, 244, 307, 308, 310, 311, 361, 508, 510], "regularli": [179, 487], "reho": 248, "reilli": [118, 198], "reiner": [0, 129, 163], "reining": [0, 151, 163], "reintroduc": [118, 351, 477], "reiss": [118, 227], "reject": [181, 185], "rel": [41, 43, 52, 61, 67, 68, 93, 111, 161, 163, 171, 179, 181, 185, 188, 309, 310, 311, 332, 334, 339, 355, 457, 459, 461, 492], "relabel": [103, 466], "relabeled_yeo_atla": 88, "relat": [7, 42, 49, 52, 53, 66, 67, 68, 69, 70, 72, 83, 103, 110, 116, 118, 121, 133, 142, 143, 163, 166, 167, 169, 171, 172, 175, 178, 179, 185, 186, 187, 188, 192, 222, 240, 268, 273, 295, 296, 299, 312, 313, 316, 320, 332, 346, 357, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 463, 465, 478, 508, 510], "relationship": [43, 45, 77, 176, 184, 186, 187, 198, 279, 399], "relative_to": [65, 77, 113], "relax": [129, 163, 219], "relaxometri": 272, "releas": [28, 50, 53, 54, 55, 56, 58, 59, 61, 118, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 179, 198, 202, 205, 219, 260, 272, 273, 279, 291, 295, 296, 297, 298, 299, 300, 351], "relev": [31, 36, 52, 59, 68, 70, 108, 121, 135, 156, 160, 163, 171, 172, 178, 179, 188, 191, 192, 240, 241, 242, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 348, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 399, 462, 463, 464, 465], "reli": [0, 6, 32, 68, 94, 96, 129, 130, 132, 135, 141, 157, 163, 164, 168, 178, 179, 181, 185, 188, 190, 273, 335, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 443, 444, 451, 487, 507], "reliabl": [59, 118, 148, 163, 181, 204, 277, 374], "remain": [3, 4, 6, 10, 18, 22, 32, 34, 39, 43, 54, 59, 72, 91, 102, 103, 104, 130, 154, 163, 176, 179, 487], "remark": 181, "rememb": 507, "remi": [148, 163], "remot": [164, 179, 282, 284], "remov": [6, 32, 34, 35, 37, 43, 44, 45, 79, 88, 91, 107, 108, 109, 110, 118, 120, 125, 127, 129, 130, 131, 132, 134, 135, 138, 142, 143, 144, 146, 148, 149, 151, 153, 154, 156, 158, 161, 163, 172, 177, 178, 188, 189, 191, 202, 228, 240, 285, 305, 306, 307, 308, 310, 311, 312, 313, 332, 349, 351, 355, 357, 368, 370, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 399, 436, 449, 463, 465, 466, 468, 469, 473, 474, 475, 476, 477, 478], "rena": [118, 151, 163, 168, 173, 185, 186, 307, 308, 463, 470], "rena_clust": [52, 127, 163], "rena_labels_img": 52, "rena_parcel": 52, "renam": [127, 130, 134, 144, 148, 163, 188], "render": [3, 38, 52, 55, 56, 61, 65, 77, 79, 129, 131, 149, 163, 164, 179, 413, 443, 445, 452, 454, 455, 457, 459, 460, 461], "renew": [138, 163], "renn": 0, "reorder": [59, 132, 146, 163, 365, 430, 448], "reorgan": [158, 163, 179], "repeat": [61, 68, 69, 171, 181, 234], "repetit": [3, 6, 65, 66, 103, 104, 105, 113, 118, 132, 147, 163, 181, 185, 210, 235, 249, 268, 271, 273, 278, 288, 289, 296, 299, 305, 306, 307, 308, 310, 311, 312, 313, 332, 335, 336, 337, 338, 342, 343, 344, 351, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 436, 463, 465, 477], "replac": [3, 4, 26, 32, 37, 38, 43, 44, 45, 50, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64, 71, 79, 81, 91, 93, 94, 96, 101, 102, 103, 106, 107, 108, 109, 110, 114, 120, 127, 128, 129, 132, 142, 143, 148, 151, 154, 155, 156, 157, 158, 161, 163, 174, 178, 179, 188, 228, 240, 305, 306, 307, 308, 310, 311, 312, 313, 332, 335, 351, 368, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 393, 436, 463, 465, 477], "repli": 188, "replic": 202, "repo": [164, 179, 188, 508], "repons": 218, "report": [6, 26, 52, 55, 56, 57, 70, 71, 77, 91, 94, 104, 107, 113, 118, 130, 131, 132, 134, 135, 151, 156, 158, 160, 163, 164, 181, 182, 183, 188, 192, 208, 236, 263, 327, 332, 345, 346, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 399, 452, 454, 455, 465, 495, 497, 508], "report_dim": [332, 346, 475], "report_flm": 113, "report_slm": [104, 113], "report_text": [332, 346, 475], "repositori": [118, 119, 179, 185, 188, 190, 219, 226, 282, 284, 510], "repres": [6, 7, 11, 16, 21, 35, 37, 54, 55, 57, 58, 70, 78, 81, 96, 111, 118, 132, 143, 155, 163, 165, 166, 169, 170, 179, 181, 184, 185, 190, 191, 192, 202, 208, 226, 240, 248, 252, 255, 268, 297, 298, 300, 309, 355, 366, 377, 378, 380, 381, 383, 384, 387, 388, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 431, 437, 443, 447, 468, 475, 485, 487, 507], "represenet": 192, "represent": [3, 7, 17, 33, 34, 35, 38, 40, 55, 56, 59, 61, 65, 77, 79, 86, 96, 101, 103, 108, 118, 120, 151, 163, 167, 170, 176, 185, 189, 191, 218, 232, 267, 271, 305, 306, 307, 308, 309, 310, 311, 312, 313, 351, 352, 355, 356, 357, 358, 359, 360, 361, 363, 365, 366, 367, 368, 369, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 434, 436, 443, 444, 446, 449, 450, 451, 458, 459, 463, 465, 468, 469, 471, 472, 475, 487, 510], "reproduc": [3, 26, 34, 43, 44, 51, 54, 74, 101, 103, 118, 186, 204, 277], "request": [77, 103, 132, 135, 138, 151, 161, 163, 168, 178, 185, 198, 240, 241, 242, 255, 256, 257, 261, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 348, 371, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 399, 413, 428, 429, 458, 462, 463, 464, 465, 491, 492, 507, 508], "request_mock": 179, "requir": [10, 21, 38, 41, 45, 50, 58, 65, 66, 69, 70, 74, 77, 80, 95, 121, 136, 141, 143, 145, 154, 158, 159, 163, 164, 166, 169, 174, 176, 178, 179, 181, 185, 187, 188, 190, 191, 192, 202, 228, 242, 286, 332, 339, 349, 369, 373, 374, 378, 381, 384, 386, 388, 399, 442, 465, 466, 507, 508], "required_dimens": 315, "rerun": [3, 38, 52, 55, 56, 61, 65, 77, 79], "resampl": [10, 12, 26, 33, 35, 42, 46, 50, 51, 52, 53, 55, 56, 57, 59, 65, 68, 72, 77, 85, 93, 94, 99, 107, 111, 116, 120, 128, 135, 140, 141, 144, 145, 151, 155, 157, 158, 163, 189, 202, 221, 228, 235, 282, 284, 297, 298, 300, 302, 305, 306, 307, 308, 310, 311, 312, 313, 332, 346, 356, 361, 363, 365, 366, 367, 377, 378, 379, 383, 384, 385, 391, 393, 394, 395, 396, 435, 443, 444, 445, 450, 451, 456, 458, 463, 465, 468, 487, 492, 495, 509, 510], "resample_img": [72, 86, 91, 95, 128, 132, 145, 151, 160, 161, 163, 191, 192, 282, 312, 313, 332, 346, 365, 367, 379, 385, 391, 393, 394, 396, 463], "resample_to_img": [68, 77, 95, 111, 132, 140, 163, 191, 192, 366], "resampled_affin": 95, "resampled_atla": 111, "resampled_icbm_mask": 68, "resampled_shap": 95, "resampled_stat_img": 95, "resampling_interpol": [145, 163, 443, 444, 450, 451, 458], "resampling_target": [54, 56, 57, 93, 96, 102, 192, 377, 378, 383, 384, 465, 492], "rescal": [6, 24, 35, 43, 82, 128, 157, 163, 400, 402, 403, 439, 452, 454, 455, 461], "research": [0, 118, 164, 185, 190, 192, 197, 198, 200, 202, 204, 207, 208, 217, 225, 228, 229, 268, 374], "resembl": 170, "reset": 105, "reshap": [41, 43, 44, 47, 53, 69, 79, 109, 130, 144, 163, 169, 240], "resid": [71, 160, 163, 373, 374], "residu": [63, 65, 75, 77, 116, 158, 163, 176, 182, 188, 202, 288, 311, 319, 320, 323, 324, 325, 332, 346, 351, 363, 368, 376, 386, 393, 427, 451, 456, 474, 509, 510], "resili": 68, "resiz": [132, 163, 189, 191, 305, 306, 307, 308, 310, 311, 312, 313, 332, 346, 363, 366, 379, 385, 391, 393, 394, 396, 457, 459, 460, 461, 463, 473], "reslic": [393, 396], "resolut": [20, 22, 77, 78, 95, 107, 111, 118, 120, 127, 128, 144, 156, 157, 163, 169, 189, 199, 202, 207, 208, 211, 212, 213, 214, 215, 229, 231, 250, 252, 255, 259, 260, 268, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 327, 385, 392, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 446, 459, 465], "resolution_mm": [22, 50, 255, 260], "resolv": [142, 152, 163], "reson": [0, 26, 118, 181, 185, 197, 202, 217, 252, 277], "resort": 70, "resourc": [0, 164, 190, 229], "resp": 120, "respect": [3, 41, 65, 105, 132, 151, 160, 163, 164, 165, 179, 181, 185, 188, 192, 265, 267, 305, 306, 307, 308, 310, 311, 332, 334, 335, 339, 345, 346, 348, 355, 366, 367, 465, 467, 475], "respir": 68, "respond": 181, "respons": [6, 35, 63, 66, 70, 71, 72, 74, 75, 81, 82, 113, 116, 158, 163, 171, 180, 181, 185, 187, 188, 218, 235, 271, 278, 332, 334, 336, 337, 338, 339, 342, 344, 438, 439, 451, 491, 509], "response_funct": 69, "rest": [2, 3, 6, 10, 22, 24, 26, 32, 34, 35, 37, 41, 44, 51, 53, 54, 57, 58, 59, 65, 71, 72, 73, 89, 91, 94, 101, 102, 103, 118, 129, 139, 143, 161, 163, 168, 169, 170, 174, 178, 179, 185, 187, 190, 197, 198, 200, 201, 202, 205, 209, 225, 227, 232, 233, 234, 248, 249, 251, 252, 261, 291, 304, 313, 373, 374, 385, 448, 465, 492, 510], "rest_dataset": [51, 53, 56, 169], "restart": [181, 312], "resting_st": 32, "restom": [118, 373, 374, 478], "restor": [128, 163, 164], "restrict": [31, 32, 33, 91, 93, 96, 148, 163, 171, 176, 192, 198, 248, 304], "restructur": 191, "restructuredtext": 179, "restult": 65, "result": [3, 6, 7, 10, 15, 16, 25, 32, 35, 38, 39, 43, 44, 45, 46, 47, 50, 51, 52, 54, 58, 60, 61, 64, 67, 68, 70, 73, 74, 79, 80, 81, 86, 88, 89, 90, 94, 95, 96, 97, 98, 102, 103, 104, 105, 107, 108, 109, 110, 111, 113, 114, 118, 119, 121, 128, 129, 131, 141, 148, 151, 154, 159, 160, 163, 164, 165, 167, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 190, 191, 192, 194, 197, 199, 204, 205, 208, 218, 224, 225, 238, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 277, 282, 284, 290, 293, 294, 301, 305, 306, 309, 321, 322, 324, 325, 326, 332, 339, 341, 345, 346, 348, 351, 361, 362, 363, 366, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 435, 437, 452, 454, 455, 459, 465, 468, 469, 474, 487, 491, 501, 503, 507, 510], "result_img": [87, 105, 190, 362], "result_img_with_head": [105, 362], "result_t": 474, "resultfilt": [121, 282], "results_": [332, 346], "resum": [249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 268, 271, 272, 273, 277, 279, 280, 281, 286, 291, 301], "retain": [73, 158, 163, 171, 172, 181, 240, 241, 242, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465, 468, 469], "retest": 118, "retinotop": 82, "retriev": [2, 16, 17, 21, 23, 47, 51, 92, 94, 120, 158, 163, 166, 171, 174, 186, 190, 192, 226, 264, 292, 373, 374, 428, 429], "return": [3, 4, 10, 15, 33, 35, 42, 43, 44, 46, 47, 50, 59, 68, 69, 73, 82, 86, 96, 103, 111, 112, 120, 121, 128, 129, 130, 132, 134, 140, 144, 151, 154, 156, 158, 159, 160, 161, 163, 164, 166, 171, 173, 176, 178, 179, 185, 187, 188, 190, 227, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 488, 489, 490, 500, 507], "return_cod": [51, 53], "return_count": 52, "return_dist": 52, "return_estim": 101, "return_index": 37, "return_invers": 54, "return_label_map": 474, "return_label_nam": 431, "return_masked_atla": [130, 163, 468], "return_offset": 355, "return_raw_data": 280, "return_z_scor": [161, 163], "reus": [73, 77], "reusabl": [132, 163], "rev": 188, "reveal": [54, 104, 106, 176], "revers": [94, 144, 151, 163], "review": [151, 163, 164, 176, 188, 198, 220], "rewamp": [125, 163], "reward": 267, "rework": [127, 138, 144, 151, 157, 163], "rewritten": 121, "rex": [118, 201, 251], "reynold": [26, 118], "rf": [43, 69], "rf_model": 69, "rfe": [47, 101, 174], "rfe_svc": 101, "rfmri": [118, 198], "rgb": [34, 460], "rgb_": 26, "rgba": [453, 460], "rgbcmyk": [53, 169], "rh": 224, "rho": 319, "rich": [132, 163, 171], "richard": [103, 118], "richardson": [118, 207, 268], "rid": [332, 346], "ridg": [33, 43, 47, 114, 172, 173, 177, 305, 306, 307, 308], "ridge_classifi": [32, 172, 305, 307], "ridge_cv": 47, "ridge_regressor": [172, 306, 308], "ridgeclassifi": 39, "ridgeclassifiercv": [128, 163, 305, 306, 307, 308], "ridgecv": [47, 128, 163, 305, 306, 307, 308], "ridgwai": [106, 118, 399], "riemannian": 118, "right": [7, 10, 13, 16, 19, 21, 23, 24, 26, 27, 34, 39, 43, 47, 50, 53, 61, 67, 68, 70, 73, 74, 78, 81, 82, 88, 96, 101, 114, 134, 141, 146, 151, 154, 156, 163, 168, 169, 175, 179, 187, 191, 206, 211, 212, 213, 214, 215, 216, 224, 227, 248, 254, 256, 257, 262, 275, 277, 285, 290, 291, 293, 302, 347, 365, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 434, 435, 437, 438, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 461, 475, 481, 482, 491, 492, 507, 510], "right_coord": 7, "right_data": 7, "right_fac": 7, "right_hemi": 50, "rigid": [66, 202], "rigor": 349, "ring": 476, "rint": 69, "riobueno": [118, 207, 268], "rise": 168, "risk": [6, 118, 187], "rissman": [103, 118], "rivera": [118, 121, 226, 282, 284], "rm": 188, "rng": [7, 46, 66, 114, 179], "roalf": [59, 118, 373, 374], "robert": [0, 118, 127, 128, 156, 163, 178, 201, 202, 219, 251], "roberto": [0, 118, 141, 151, 163, 233, 261], "robinson": [106, 118, 198, 399], "robust": [3, 33, 42, 96, 118, 153, 163, 169, 171, 175, 185, 307, 308, 373, 374, 510], "roc": [41, 171, 185], "roc_auc": [3, 32, 34, 101, 174, 305, 307], "roc_auc_ovr": 41, "roc_auc_scor": 41, "rochel": [118, 227], "rockland": [118, 227], "roelof": [0, 127, 128, 163], "roffman": [118, 231, 237, 260, 264], "roger": [118, 201, 211, 212, 213, 214, 215, 251, 290], "rohan": [0, 134, 163], "roi": [10, 11, 18, 22, 27, 30, 35, 48, 59, 61, 85, 88, 90, 93, 99, 102, 111, 116, 118, 121, 129, 143, 151, 154, 163, 171, 187, 189, 205, 209, 230, 231, 232, 254, 260, 265, 266, 267, 271, 305, 356, 358, 361, 363, 364, 368, 369, 376, 383, 385, 413, 441, 443, 450, 451, 453, 454, 456, 507, 509, 510], "roi_img": [71, 450], "roi_map": [10, 23, 24, 130, 161, 163, 413, 453, 454], "roi_siz": 47, "rois_aal": 248, "rois_cc200": 248, "rois_cc400": 248, "rois_dosenbach160": 248, "rois_ez": 248, "rois_ho": 248, "rois_tt": 248, "rokem": [0, 136, 148, 163], "role": [6, 158, 163], "romuald": [148, 163], "ronald": [0, 122, 163], "rooij": [118, 373, 374], "room": 448, "roorke": 0, "root": [52, 178, 188, 197, 240, 256, 257, 323, 373, 462, 463, 464], "rosa": [118, 202, 252], "rosen": [118, 206, 254], "rosenblatt": [78, 118, 327], "rot_i": 59, "rot_x": 59, "rot_z": 59, "rotat": [34, 66, 86, 96, 192, 335, 373], "rotation_matrix": 86, "rothberg": [0, 145, 148, 163], "roti": 104, "rotx": 104, "rotz": 104, "rough": [241, 305, 306, 307, 308, 310, 311, 312, 313, 332, 346, 352, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 463, 464, 465], "roughli": [43, 172, 179, 181, 202], "round": [52, 452, 455], "rout": [240, 241, 242, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465], "routin": [68, 91, 190, 280, 507], "row": [3, 6, 41, 43, 59, 65, 68, 74, 93, 101, 103, 121, 155, 161, 163, 185, 282, 284, 322, 323, 324, 325, 332, 335, 346, 347, 348, 410, 412, 415, 429, 434, 441, 444, 446, 448, 449, 450, 451, 462, 474, 487, 492], "row_numb": 103, "ro\u00dfmanith": [0, 130, 163], "rprojector": [15, 404, 428], "rrid": [0, 35, 64, 70, 73, 104, 113, 491], "rsn": [2, 22, 89, 143, 163, 201, 233, 251, 261], "rsn10": 233, "rsn20": 233, "rsn28": [22, 201, 251], "rsn70": 233, "rsn_indic": [201, 251], "rsn_name": 201, "rsquared_statmap": [65, 77, 345], "rst": [127, 163, 164, 179, 188], "rt": 234, "rtol": 355, "ru": [118, 231, 260], "ruben": [59, 118, 373, 374], "rudimentari": 32, "ruf012": [133, 163], "ruff": [132, 163, 179, 188], "rugg": 118, "rule": [126, 163, 171, 172, 179, 198, 305, 306, 307, 308], "run": [1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 74, 75, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 116, 120, 130, 132, 133, 134, 138, 142, 156, 158, 160, 163, 165, 166, 168, 171, 172, 175, 176, 177, 178, 179, 180, 183, 187, 188, 190, 191, 192, 202, 210, 218, 224, 235, 242, 244, 270, 271, 277, 281, 288, 289, 312, 313, 329, 332, 335, 349, 351, 352, 363, 366, 374, 379, 385, 394, 396, 399, 434, 438, 439, 442, 444, 451, 456, 462, 473, 474, 477, 491, 492, 507, 508, 509, 510], "run_face_mask": 106, "run_glm": [35, 156, 160, 163], "run_house_mask": 106, "run_img": [64, 70, 104, 113, 332], "run_label": [3, 31, 32, 34, 35, 101, 171], "run_mask": 106, "run_seri": 390, "run_target": 96, "runnabl": 179, "runner": [2, 3, 4, 6, 7, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 87, 88, 89, 90, 91, 93, 94, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 492], "runtim": [46, 160, 163, 179, 305, 306, 308, 310, 311], "runtimeerror": [5, 102], "runtimewarn": [10, 61, 70, 72, 73, 79, 81, 103, 104, 113, 114], "ruparel": [59, 118, 373, 374], "russel": [59, 103, 118, 121, 171, 187, 223, 226, 227, 282, 284, 324, 325, 373, 374], "rv": 0, "rx": 66, "ry": 66, "ryan": [0, 118, 151, 163, 232, 267], "rz": 66, "r\u00e9mi": [0, 128, 129, 130, 131, 132, 133, 134, 135, 145, 161, 163], "s00062": [26, 118], "s01": [79, 109], "s1": 82, "s102": [118, 219], "s1053": [118, 206, 219, 254], "s151": [118, 206, 254], "s2": 82, "s3": 65, "s_calcarin": 492, "s_central": 492, "s_cingul": 492, "s_circular_insula_": 492, "s_circular_insula_inf": 492, "s_circular_insula_sup": 492, "s_collat_transv_": 492, "s_collat_transv_post": 492, "s_front_inf": 492, "s_front_middl": 492, "s_front_sup": 492, "s_interm_prim": 492, "s_intrapariet_and_p_tran": 492, "s_oc": 492, "s_oc_middle_and_lunatu": 492, "s_oc_sup_and_transvers": 492, "s_occipital_": 492, "s_orbit": 492, "s_orbital_later": 492, "s_orbital_m": 492, "s_parieto_occipit": 492, "s_pericallos": 492, "s_postcentr": 492, "s_precentr": 492, "s_suborbit": 492, "s_subpariet": 492, "s_temporal_inf": 492, "s_temporal_sup": 492, "s_temporal_transvers": 492, "sa": [221, 253], "sabb": [118, 269, 287], "sabuncu": [118, 231, 237, 260, 264], "sachin": [0, 160, 163], "saclai": [0, 179], "sadaghiani": [51, 118, 170, 312], "sadato": [43, 44, 118, 224, 281], "sadek": [118, 201, 251], "sadil": [0, 129, 132, 134, 163], "safe": [73, 105, 143, 163], "sage": [0, 160, 163], "sagit": 369, "sagitt": [15, 96, 134, 163, 408, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 434, 437, 441, 443, 444, 447, 449, 450, 451, 475], "sai": [6, 7, 67, 71, 101, 105, 121, 179, 181, 188, 322], "said": [52, 181], "sake": [24, 39, 68, 81, 109], "salat": [118, 206, 254], "salienc": [54, 267], "salimi": [118, 165, 198], "salma": [0, 122, 125, 136, 138, 145, 148, 149, 163], "salo": [0, 127, 128, 129, 130, 155, 158, 159, 160, 163], "salt": 71, "sam": [0, 128, 163], "samanta": [0, 129, 163], "samantha": [118, 227], "samara": [118, 169, 178, 241, 244, 465], "same": [2, 3, 6, 13, 15, 16, 22, 24, 26, 36, 39, 41, 43, 44, 50, 52, 53, 58, 61, 66, 68, 70, 71, 72, 73, 74, 86, 88, 90, 96, 101, 103, 104, 106, 113, 114, 121, 129, 136, 143, 148, 154, 155, 156, 157, 158, 163, 164, 165, 166, 169, 170, 171, 172, 176, 178, 179, 181, 183, 184, 185, 188, 190, 191, 192, 194, 210, 219, 235, 238, 240, 241, 242, 244, 256, 257, 265, 267, 272, 273, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 305, 306, 307, 308, 310, 311, 312, 313, 332, 334, 335, 339, 346, 348, 351, 352, 353, 362, 364, 366, 371, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 395, 397, 405, 406, 407, 408, 409, 418, 419, 422, 423, 424, 425, 430, 434, 436, 437, 441, 443, 444, 448, 449, 450, 451, 459, 462, 463, 465, 466, 471, 472, 474, 475, 477, 501], "sami": [0, 160, 163], "sampl": [3, 9, 29, 33, 36, 38, 43, 50, 52, 53, 54, 55, 56, 58, 59, 61, 66, 68, 70, 72, 76, 77, 79, 80, 83, 84, 86, 96, 104, 109, 111, 113, 116, 118, 120, 132, 134, 154, 156, 157, 163, 164, 166, 171, 176, 178, 180, 181, 184, 187, 192, 197, 202, 208, 220, 227, 240, 241, 242, 244, 268, 277, 295, 296, 297, 298, 299, 300, 302, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 333, 334, 336, 337, 338, 339, 342, 343, 344, 346, 348, 351, 355, 356, 362, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 398, 399, 426, 436, 439, 443, 446, 455, 456, 462, 463, 464, 465, 476, 477, 478, 487, 504, 509], "sample_horizont": 82, "sample_mask": [52, 55, 56, 59, 61, 68, 127, 129, 132, 133, 134, 156, 158, 160, 163, 314, 332, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 465, 477], "sample_point": 25, "sample_vert": 82, "sample_weight": [305, 306, 307, 308, 310, 311], "sampling_r": 476, "san": 0, "sang": 118, "saniti": 192, "sanz": [0, 151, 163], "sarah": [118, 201, 251], "sarang": 118, "saroja": [118, 227], "sass": [0, 158, 163], "sassenhagen": [0, 145, 163], "satisfi": [178, 188], "sato": [43, 44, 118, 224, 281], "satrajit": [118, 121, 226, 282, 284], "satterthwait": [59, 118, 373, 374], "save": [3, 6, 10, 15, 22, 24, 31, 35, 44, 45, 46, 51, 52, 53, 54, 64, 68, 70, 73, 74, 88, 93, 94, 96, 101, 102, 103, 104, 107, 111, 112, 113, 121, 129, 131, 132, 134, 149, 158, 163, 164, 169, 178, 190, 191, 192, 221, 282, 284, 310, 311, 325, 332, 345, 346, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 465, 473, 475, 479, 480, 481, 482, 484, 510], "save_as_html": [35, 64, 70, 73, 77, 93, 94, 104, 113, 192, 457, 458, 459, 460, 461, 473, 475, 507], "save_glm_to_bid": [65, 70, 77, 127, 131, 134, 160, 161, 163], "savefig": [10, 44, 58, 64, 70, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 437, 441, 443, 444, 447, 449, 450, 451, 507], "savefig_kwarg": 413, "savio": [0, 122, 163], "saw": 15, "sax": [118, 207, 268], "sayal": [0, 132, 163], "scalabl": [118, 173, 307, 308], "scalar": [104, 176, 192, 319, 320, 322, 323, 324, 325, 368, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 437, 447], "scalarformatt": 52, "scale": [6, 16, 41, 44, 52, 57, 64, 66, 69, 71, 72, 74, 96, 118, 121, 141, 148, 158, 163, 172, 176, 192, 202, 204, 224, 226, 240, 252, 277, 282, 284, 297, 298, 300, 305, 306, 307, 308, 310, 311, 312, 313, 319, 322, 323, 324, 325, 327, 332, 340, 348, 349, 351, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 436, 443, 444, 451, 462, 463, 464, 465, 474, 475, 477, 487, 492, 510], "scale007": 202, "scale012": 202, "scale020": 202, "scale036": 202, "scale064": 202, "scale122": 202, "scale197": 202, "scale325": 202, "scale444": 202, "scale_": 16, "scale_loc": [401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427], "scale_s": [16, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427], "scale_unit": [16, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427], "scalebar": [16, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 507], "scaling_axi": [103, 158, 163, 332], "scan": [6, 35, 38, 58, 61, 66, 67, 68, 69, 72, 96, 103, 118, 156, 163, 168, 176, 181, 185, 190, 200, 202, 217, 221, 234, 277, 312, 313, 332, 334, 339, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 436, 463, 465, 468, 469, 471, 477], "scanner": [68, 105, 181, 185, 373], "scap": 65, "scatter": [25, 43, 96, 160, 163, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 437, 447], "scatter3d": 413, "scenario": [68, 180, 181, 192], "schaefer": [118, 194, 238, 260], "schaefer2018_400parcels_7networks_order_fslmni152_1mm": 492, "schaefer2018_localglob": [231, 260], "schaefer_2018": 492, "schedul": 164, "schema": [134, 163], "schemat": [403, 437, 443, 447], "scheme": [9, 29, 31, 35, 38, 39, 41, 101, 116, 134, 154, 163, 165, 171, 172, 174, 178, 242, 305, 306, 307, 308, 399, 455, 487, 509], "schizophrenia": [118, 143, 163, 185, 217], "schlachter": [118, 227], "schlaggar": [61, 118, 202, 209, 230, 232, 265, 266, 267, 373, 374], "school": [0, 228], "schouten": [3, 33, 34, 40, 101, 118, 218, 271], "schre": [118, 217], "schwartz": [118, 122, 163, 171, 173, 204, 277, 307, 308], "schwarz": [118, 121, 226, 282, 284], "scienc": [0, 3, 33, 34, 40, 47, 61, 101, 118, 165, 169, 176, 177, 187, 197, 198, 202, 208, 209, 218, 227, 233, 240, 241, 255, 261, 265, 268, 271, 309, 374, 465, 510], "scientif": [118, 155, 158, 163, 179, 187, 197, 204, 220, 229, 259, 269, 277, 287, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 441, 443, 444, 446, 450, 451, 452, 454, 455], "scientififc": 187, "scikit": [3, 36, 52, 96, 100, 106, 108, 115, 116, 119, 125, 127, 130, 132, 134, 135, 136, 141, 143, 144, 145, 148, 151, 156, 158, 161, 163, 164, 165, 168, 171, 172, 173, 175, 176, 178, 179, 186, 187, 188, 240, 241, 242, 271, 305, 306, 307, 308, 309, 310, 311, 312, 313, 358, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 451, 456, 462, 463, 464, 465, 508, 509, 510], "scilifelab": 0, "scipi": [24, 47, 65, 69, 78, 81, 96, 104, 107, 112, 125, 127, 130, 135, 141, 145, 146, 148, 151, 156, 158, 160, 161, 163, 178, 191, 273, 296, 299, 360, 370, 391, 392, 393, 394, 395, 396, 448, 476], "scissor": [32, 34, 35, 41, 190], "scl": 44, "scl_inter": [59, 105], "scl_scope": 105, "scl_slope": [59, 105], "score": [26, 32, 34, 39, 41, 44, 45, 47, 51, 54, 72, 82, 101, 102, 106, 107, 109, 110, 112, 114, 131, 134, 135, 154, 155, 163, 171, 172, 174, 175, 177, 187, 228, 240, 242, 305, 306, 307, 308, 309, 310, 311, 312, 313, 320, 332, 350, 351, 370, 373, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 436, 443, 444, 446, 450, 451, 452, 454, 455, 463, 465, 477], "score_ch": 34, "score_func": 114, "score_img": 39, "score_map_img": 43, "score_mean": [32, 34], "score_orig_data": 399, "scoreatpercentil": [90, 107, 370], "scorer": [305, 306, 307, 308], "scorer_": [305, 306, 307, 308], "scores_": [47, 176, 309], "scores_img": 38, "scores_img_": [38, 309], "scores_nilearn": 41, "scores_sklearn": 41, "scores_std": [54, 102], "scorr_2level": [205, 253], "scorr_mean": [205, 253], "scott": [103, 118, 232, 267], "scr_001362": [0, 35, 64, 70, 73, 104, 113, 491], "scrambl": [72, 96, 180, 235], "scrambledpix": [32, 34, 35, 41, 96, 190], "scratch": [120, 164], "screen": [33, 35, 42, 46, 118, 177, 221, 310, 311], "screening_percentil": [3, 31, 32, 35, 36, 41, 45, 46, 114, 171, 305, 306, 307, 308, 310, 311], "screening_percentile_": [305, 306, 307, 308, 310, 311], "screening_percentile_rang": 36, "script": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 157, 163, 164, 173, 179, 190, 191, 192, 205, 507, 508], "scroll": 107, "scrollabl": [131, 163], "scrub": [68, 127, 132, 156, 158, 161, 163, 166, 202, 314, 332, 335, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 465, 477], "sd": [322, 324, 325, 326], "sdata": [118, 229, 259, 269, 287], "sdist": 188, "se": 371, "search": [39, 91, 128, 163, 179, 188, 242, 305, 306, 307, 308, 371], "search_light": [39, 309], "searchlight": [30, 47, 48, 116, 118, 132, 135, 142, 145, 148, 154, 163, 171, 175, 185, 186, 187, 271, 293, 294, 356, 358, 361, 363, 364, 376, 385, 444, 451, 455, 456, 483, 509, 510], "searchlightifit": 38, "seattl": 0, "sebastian": 118, "sec": [54, 268], "second": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 118, 129, 132, 163, 168, 169, 177, 178, 179, 180, 181, 182, 183, 185, 192, 234, 235, 274, 276, 277, 278, 282, 284, 288, 289, 293, 294, 305, 306, 307, 308, 310, 311, 312, 313, 327, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 351, 356, 362, 370, 373, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 435, 436, 439, 442, 443, 444, 445, 451, 452, 453, 454, 455, 456, 461, 463, 465, 473, 474, 475, 476, 477, 483, 503, 509, 510], "second_level": [77, 78, 79, 80, 81, 82, 83, 104, 113, 133, 160, 163, 184, 475], "second_level_contrast": [77, 79, 81, 346, 348, 475], "second_level_glm": 113, "second_level_input": [78, 81, 82, 104, 113, 158, 160, 163, 345, 346, 348, 475], "second_level_input_": 346, "second_level_model": [77, 78, 81, 83, 104], "second_level_model_pair": 82, "second_level_model_unpair": 82, "second_level_stat_typ": 346, "second_roi_data": 96, "second_roi_img": 96, "secondari": 179, "secondlevelmodel": [77, 78, 79, 81, 82, 83, 104, 113, 130, 132, 133, 134, 135, 158, 163, 184, 332, 345, 348, 475], "secondlevelmodelifit": [77, 79], "secret": 164, "section": [2, 3, 4, 15, 26, 42, 50, 51, 52, 57, 59, 71, 93, 96, 101, 103, 118, 119, 120, 128, 143, 148, 158, 163, 164, 165, 166, 168, 169, 171, 172, 174, 176, 179, 181, 184, 188, 189, 192, 194, 228, 282, 286, 377, 378, 383, 384, 400, 430, 434, 437, 441, 443, 444, 447, 449, 450, 451, 458, 462, 473, 492, 497, 498, 507], "secur": 164, "securitylab": 164, "see": [0, 3, 6, 7, 9, 10, 13, 14, 15, 16, 17, 21, 22, 23, 24, 26, 28, 30, 32, 33, 36, 38, 41, 42, 43, 44, 45, 46, 49, 51, 52, 53, 54, 55, 57, 59, 61, 63, 72, 73, 74, 76, 77, 82, 85, 88, 91, 93, 98, 102, 103, 106, 107, 110, 111, 112, 114, 116, 118, 120, 121, 123, 129, 132, 136, 142, 148, 149, 151, 155, 156, 158, 160, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 183, 185, 188, 190, 192, 194, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 322, 324, 325, 332, 334, 336, 337, 338, 339, 342, 343, 344, 345, 346, 351, 352, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 372, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 434, 436, 442, 443, 444, 446, 449, 450, 451, 458, 459, 460, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 475, 476, 477, 487, 492, 497, 498, 507, 508], "seed": [7, 9, 29, 49, 51, 62, 103, 116, 132, 148, 160, 163, 180, 189, 262, 268, 293, 294, 301, 332, 339, 341, 376, 385, 386, 387, 412, 451, 454, 455, 456, 457, 460, 465, 467, 479, 481, 482, 483, 492, 507, 509, 510], "seed_based_glm": [64, 491], "seed_mask": [58, 64, 103, 180], "seed_time_seri": [58, 64, 180], "seed_timeseri": 24, "seed_to_voxel_correl": 58, "seed_to_voxel_correlations_fisher_z": 58, "seed_to_voxel_correlations_fisher_z_img": 58, "seed_to_voxel_correlations_img": 58, "seed_vertic": 24, "seeds_": 386, "seek": [6, 79, 109, 170, 449], "seem": [68, 77, 101, 178], "seemingli": 171, "seen": [0, 3, 15, 44, 52, 120, 164, 166, 168, 172, 174, 176, 181, 187, 188, 194, 238, 240, 241, 378, 379, 381, 382, 384, 385, 386, 388, 389, 462, 463, 465, 501, 507], "segal": [118, 201, 251], "segment": [59, 118, 169, 185, 202, 206, 217, 219, 225, 228, 258, 264, 272, 373, 465, 467, 487], "segment_half_width": 25, "segreg": [118, 210], "seidman": [118, 206, 217, 254], "seismic": 114, "seismic_r": 440, "seitzman": [118, 151, 163, 267], "select": [3, 6, 15, 16, 20, 21, 24, 31, 34, 35, 36, 37, 44, 45, 58, 59, 68, 78, 91, 96, 103, 109, 113, 118, 119, 129, 141, 142, 143, 145, 153, 154, 156, 158, 161, 163, 164, 166, 169, 172, 173, 174, 175, 176, 177, 178, 191, 192, 202, 224, 241, 242, 252, 268, 269, 279, 282, 284, 286, 304, 305, 306, 307, 308, 310, 311, 312, 313, 346, 348, 358, 370, 373, 374, 381, 388, 443, 446, 449, 451, 452, 454, 455, 462, 463, 465, 487, 507, 510], "select_from_index": 65, "selected_volum": 2, "selectkbest": [37, 44, 114, 143, 163], "selector": 41, "selectpercentil": [41, 101, 143, 163], "self": [46, 96, 164, 179, 240, 241, 242, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 332, 346, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465], "semant": [118, 156, 158, 163, 176], "semi": [178, 217], "semilogx": 52, "send": [179, 462, 464], "sender": 179, "sens": [108, 114, 171, 187, 305, 306, 307, 308, 322, 324, 325, 403, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426], "sensibl": [36, 171, 174, 241, 244], "sensit": [6, 43, 51, 59, 118, 181, 185, 351, 374, 399, 477], "sensori": 181, "sensorimotor": 61, "sent": [440, 448], "sentenc": [67, 68, 70, 74, 83, 104, 118, 210, 221, 277], "sentence_listen": [67, 68, 70, 222, 491], "sentence_read": [67, 68, 70, 222, 491], "seop": [0, 158, 163], "sep": [31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 65, 71, 72, 74, 96, 106, 190, 400, 402, 403], "separ": [3, 7, 36, 41, 50, 51, 53, 64, 68, 70, 73, 85, 90, 96, 99, 103, 104, 111, 113, 116, 141, 158, 160, 163, 164, 169, 170, 172, 176, 179, 181, 185, 188, 190, 191, 198, 247, 264, 363, 373, 400, 402, 403, 430, 448, 450, 456, 465, 466, 467, 509], "sepideh": [51, 118, 170, 312], "septemb": [118, 129, 135, 142, 157, 163, 169, 465], "sepulcr": [118, 202, 231, 237, 260, 264], "sequenc": [41, 61, 64, 68, 70, 81, 129, 163, 171, 180, 185, 190, 192, 277, 305, 306, 307, 308, 322, 324, 325, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 437, 452, 454, 455, 457, 475, 476, 487], "sequenti": [6, 26, 134, 163, 178, 190, 449], "sereno": [118, 206, 211, 212, 213, 214, 215, 290], "seri": [6, 35, 49, 50, 54, 59, 63, 68, 75, 94, 96, 97, 100, 114, 115, 116, 118, 120, 127, 130, 132, 138, 155, 159, 163, 165, 167, 169, 171, 176, 181, 182, 189, 190, 191, 202, 228, 233, 240, 249, 252, 274, 287, 288, 291, 303, 319, 332, 335, 346, 348, 351, 352, 361, 363, 364, 367, 368, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 390, 393, 412, 427, 436, 439, 451, 456, 465, 467, 468, 469, 474, 478, 492, 495, 497, 509, 510], "serial": [131, 163, 178, 221], "seriou": 188, "serr": [74, 118, 204, 277], "serv": [155, 163, 179, 188, 208, 255, 268], "server": [107, 164, 179, 282, 284], "servic": 179, "servicesatlas": 219, "session": [31, 72, 120, 156, 158, 163, 171, 183, 187, 218, 313, 335, 351, 371, 508], "session_error": [59, 105], "session_target": [3, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 96, 101, 106, 120, 190, 218, 271], "set": [3, 6, 15, 16, 26, 30, 31, 32, 33, 35, 38, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 56, 58, 59, 61, 64, 65, 67, 68, 71, 77, 81, 82, 83, 91, 96, 98, 101, 102, 103, 104, 105, 113, 116, 118, 121, 127, 128, 129, 130, 132, 134, 141, 145, 151, 154, 155, 157, 158, 160, 161, 163, 164, 165, 166, 169, 171, 173, 175, 178, 180, 181, 182, 183, 184, 185, 186, 188, 190, 192, 199, 202, 224, 232, 234, 240, 241, 242, 267, 271, 277, 282, 284, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 322, 324, 325, 331, 332, 334, 335, 339, 345, 346, 347, 348, 349, 351, 358, 370, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 436, 437, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 458, 459, 461, 462, 463, 464, 465, 467, 470, 474, 475, 477, 487, 492, 507, 509, 510], "set_axis_bgcolor": [143, 163], "set_axis_off": 13, "set_axisbelow": [54, 102], "set_config": [192, 240, 241, 242, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465], "set_fit_request": [241, 242, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 463, 465], "set_index": 71, "set_inverse_transform_request": [240, 312, 313, 377, 378, 380, 381, 382, 383, 384, 386, 387, 388, 389, 462, 463, 464, 465], "set_label_coord": 52, "set_machine_nam": 164, "set_major_formatt": [51, 52], "set_output": [93, 161, 163, 240, 309, 312, 313, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465], "set_param": [240, 241, 242, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465], "set_score_request": [310, 311, 312, 313, 463], "set_size_inch": [43, 71, 114], "set_tick": 41, "set_ticklabel": 41, "set_titl": [64, 66, 71, 80, 81, 82, 103, 109], "set_transform_request": [240, 309, 312, 313, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 463, 465], "set_xlabel": [33, 41, 46, 71], "set_xtick": 41, "set_ylabel": [33, 41, 46, 71, 77, 80], "set_ylim": 52, "set_ytick": 41, "setup": [64, 128, 159, 163, 184, 248, 249, 250, 251, 252, 253, 254, 258, 261, 262, 264, 271, 272, 280, 281, 286, 291, 301, 508], "setuptool": [128, 163], "sever": [6, 26, 31, 33, 36, 41, 52, 54, 64, 65, 68, 73, 88, 96, 102, 105, 107, 111, 114, 120, 128, 132, 134, 135, 142, 148, 161, 163, 164, 165, 173, 175, 176, 178, 179, 181, 183, 185, 188, 190, 191, 192, 205, 220, 232, 242, 332, 351, 362, 378, 394, 396, 397, 449, 463, 474, 477, 492, 510], "sex": [77, 80, 118, 184, 200, 217, 248, 279, 291, 305, 306, 307, 308, 310, 311, 491], "sex_clust": 77, "sex_design": 77, "sex_stat": 77, "sf": 112, "sform": [3, 160, 163], "sform_cod": [59, 105], "sfvnmac": [145, 148, 163], "sh": 188, "shade": [23, 452, 454, 455, 461], "shah": [0, 158, 163], "shalit": [118, 208, 255], "shall": 68, "shallow": [481, 482], "shape": [2, 3, 4, 6, 21, 26, 27, 35, 41, 43, 44, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 64, 67, 68, 69, 70, 72, 73, 86, 93, 95, 96, 101, 103, 106, 107, 109, 110, 111, 112, 114, 120, 133, 134, 156, 157, 163, 166, 168, 169, 171, 174, 180, 181, 185, 187, 189, 192, 228, 240, 241, 242, 244, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 280, 305, 306, 307, 308, 310, 311, 312, 313, 319, 320, 322, 323, 324, 325, 328, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 351, 352, 353, 356, 357, 358, 362, 363, 366, 367, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 432, 437, 438, 447, 452, 454, 455, 457, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 475, 477, 478, 481, 483], "shaquanna": [118, 227], "sharad": [118, 227], "share": [104, 118, 121, 154, 163, 165, 170, 179, 190, 197, 198, 204, 205, 208, 226, 244, 253, 256, 257, 277, 282, 284], "shared_arrai": 111, "shared_memori": 111, "sharedmemori": 111, "sharex": 52, "sharp": [452, 454, 455, 507], "sharpen": 476, "shawn": [118, 236, 263], "shehzad": 118, "shell": [190, 304], "shelv": 46, "shevchenko": [0, 132, 163], "shift": [68, 154, 160, 163, 240, 305, 306, 307, 308, 310, 311, 312, 313, 332, 351, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 436, 463, 465, 477], "shinji": [118, 172], "shinohara": [59, 118, 373, 374], "ship": [4, 11, 13, 22, 96, 148, 163, 185, 194, 238, 501, 507], "shm": 111, "shmelkov": [0, 122, 163], "shoe": [32, 34, 35, 36, 41, 190], "short": [46, 68, 100, 103, 115, 116, 121, 132, 163, 178, 179, 185, 231, 240, 262, 282, 283, 284, 285, 293, 294, 301, 305, 370, 387, 389, 448, 452, 456, 483, 509], "shorten": [129, 160, 163], "shorter": [3, 68, 178, 373], "shortlog": [122, 123, 125, 126, 136, 138, 141, 163], "should": [4, 6, 15, 16, 17, 26, 37, 38, 43, 44, 45, 50, 52, 54, 55, 56, 57, 58, 59, 61, 64, 67, 68, 69, 70, 71, 72, 73, 81, 90, 91, 93, 94, 96, 101, 102, 103, 106, 107, 108, 109, 110, 111, 120, 121, 134, 135, 144, 145, 155, 158, 159, 163, 164, 169, 170, 171, 172, 174, 178, 179, 181, 187, 188, 192, 194, 199, 234, 238, 240, 241, 242, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 329, 332, 334, 335, 339, 340, 346, 347, 349, 350, 351, 355, 361, 362, 363, 364, 365, 366, 367, 369, 370, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 399, 400, 413, 433, 434, 437, 441, 443, 444, 446, 449, 450, 451, 452, 453, 454, 455, 459, 461, 462, 463, 464, 465, 466, 467, 471, 473, 474, 475, 477, 488, 489, 492, 501, 504, 507, 508], "shouldn": [103, 188], "shout": [148, 163], "show": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 116, 120, 130, 132, 143, 149, 154, 156, 158, 163, 164, 165, 166, 169, 171, 172, 174, 176, 179, 181, 183, 184, 191, 192, 218, 235, 271, 283, 302, 319, 332, 346, 410, 412, 413, 415, 417, 419, 421, 423, 425, 427, 435, 453, 457, 458, 460, 465, 475, 492, 507, 509], "show_lr": 458, "showcas": [54, 63, 76, 78, 102, 116, 168, 173, 179], "shown": [16, 22, 26, 41, 43, 57, 68, 71, 96, 121, 156, 163, 165, 170, 171, 180, 181, 374, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 437, 446, 447, 450, 457, 459, 461, 492], "shrunk": 240, "shuffl": [38, 39, 51, 53], "sici": [118, 211, 212, 213, 214, 215, 236, 263, 290], "side": [6, 53, 56, 66, 68, 96, 106, 127, 134, 155, 163, 164, 176, 188, 282, 320, 391, 394, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 436, 445, 446, 474, 475], "sidti": [118, 227], "siemen": 234, "sig": 109, "sigma": [319, 322, 323, 324, 325], "sigman": [118, 210], "sign": [10, 15, 24, 45, 106, 107, 128, 163, 176, 190, 198, 310, 350, 370, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 437, 443, 449, 457, 459, 461], "signal": [3, 6, 30, 33, 42, 46, 47, 48, 49, 51, 52, 53, 55, 58, 60, 62, 64, 65, 68, 69, 71, 72, 73, 77, 80, 85, 88, 96, 99, 103, 112, 116, 118, 126, 127, 128, 129, 130, 133, 147, 149, 151, 155, 156, 160, 163, 165, 167, 168, 169, 170, 171, 173, 176, 178, 181, 185, 189, 191, 198, 202, 208, 240, 241, 242, 244, 248, 255, 256, 258, 265, 266, 268, 271, 279, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 335, 346, 348, 351, 357, 358, 363, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 399, 431, 436, 437, 447, 448, 456, 457, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 492, 495, 509, 510], "signal_sc": [35, 64, 65, 70, 71, 73, 103, 113, 158, 163, 332, 335, 491], "signals_df": 93, "signals_to_img_label": [128, 163, 468, 472], "signals_to_img_map": [128, 163, 469, 471], "signatur": [149, 163, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490], "signed_neg_log_pv": [45, 106], "signed_neg_log_pvals_unmask": [45, 106], "signifi": [185, 305, 306, 307, 308], "signific": [26, 36, 52, 68, 77, 82, 111, 118, 134, 163, 171, 176, 178, 181, 183, 185, 348, 399, 474], "significantli": [45, 68, 148, 163, 176, 178], "sigpro": 118, "sikka": [118, 227], "silenc": [36, 51], "silent": [149, 158, 163, 188], "silva": [118, 201, 251], "simexp": [0, 507], "similar": [10, 24, 25, 32, 51, 58, 81, 96, 98, 103, 104, 120, 136, 148, 149, 151, 158, 163, 165, 168, 170, 172, 173, 176, 184, 185, 192, 307, 308, 374], "similarli": [16, 58, 96, 134, 163, 190], "simon": [0, 59, 118, 148, 153, 163, 231, 233, 260, 261, 373, 374], "simpl": [3, 5, 26, 27, 31, 33, 37, 39, 41, 43, 50, 59, 63, 67, 75, 77, 78, 79, 81, 82, 85, 86, 89, 91, 93, 96, 99, 101, 103, 104, 105, 116, 118, 120, 121, 141, 143, 148, 158, 163, 165, 166, 172, 174, 175, 178, 179, 180, 183, 184, 185, 187, 191, 192, 218, 235, 240, 241, 242, 268, 270, 277, 305, 306, 307, 308, 309, 310, 311, 312, 313, 320, 323, 329, 332, 346, 358, 363, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 436, 450, 451, 456, 462, 463, 464, 465, 473, 491, 492, 509, 510], "simplefilt": [72, 107], "simpler": 54, "simpleregressionresult": [130, 160, 163, 332, 346], "simplest": [4, 72, 101, 121, 174, 178, 507], "simpli": [3, 26, 68, 69, 70, 73, 91, 104, 105, 107, 109, 111, 113, 121, 181, 188, 192, 202, 252, 350, 362, 368, 444, 449, 450, 451], "simplic": [41, 68, 70, 171], "simplifi": [104, 113, 120, 141, 151, 159, 163, 192, 275, 276], "simuilar": [130, 163], "simul": [30, 48, 49, 62, 66, 69, 103, 116, 132, 163, 167, 176, 242, 309, 398, 448, 456, 509, 510], "simultan": [51, 178, 244], "sin": [0, 25, 86, 132, 163], "sinc": [15, 20, 35, 42, 61, 68, 73, 77, 79, 83, 104, 113, 120, 127, 156, 163, 178, 181, 198, 240, 250, 256, 257, 285, 305, 306, 307, 308, 310, 311, 312, 313, 332, 336, 337, 338, 342, 343, 344, 351, 371, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 399, 403, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 435, 436, 463, 465, 468, 469, 473, 477, 507], "singh": [0, 148, 163], "singl": [1, 3, 8, 15, 24, 26, 32, 33, 35, 49, 50, 52, 62, 63, 64, 67, 68, 69, 70, 73, 75, 79, 81, 88, 96, 103, 108, 111, 113, 116, 118, 121, 125, 130, 132, 134, 154, 155, 156, 157, 160, 161, 163, 165, 172, 176, 178, 179, 180, 183, 187, 190, 192, 199, 222, 234, 250, 268, 282, 288, 289, 302, 305, 306, 307, 308, 322, 324, 325, 332, 346, 348, 349, 352, 363, 366, 376, 377, 378, 383, 384, 385, 386, 412, 434, 435, 438, 439, 442, 444, 446, 448, 449, 451, 456, 458, 463, 465, 474, 491, 507, 509], "single_mni_imag": 358, "singleton": 52, "singular": [80, 322, 324, 325, 357, 478], "siong": [39, 118], "site": [3, 4, 15, 17, 19, 21, 31, 36, 43, 46, 51, 53, 61, 70, 94, 114, 197, 200, 228, 248, 249, 286], "sitek": [0, 128, 163], "sitter": [0, 129, 163], "situat": [16, 61, 165, 171, 172, 190, 368], "six": [44, 202], "size": [6, 16, 23, 28, 35, 43, 47, 51, 52, 56, 61, 64, 65, 70, 73, 79, 81, 82, 83, 86, 93, 96, 104, 105, 106, 107, 109, 111, 114, 129, 131, 138, 148, 149, 151, 158, 163, 164, 169, 176, 177, 178, 181, 202, 221, 228, 279, 346, 348, 349, 370, 377, 378, 383, 384, 391, 394, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 437, 447, 448, 452, 454, 455, 457, 460, 462, 463, 464, 465, 466, 467, 474, 475, 476, 487, 491, 492], "size_vert": [400, 402, 403], "sizeof_hdr": [59, 105], "sizes_": [462, 464], "sketch": 47, "skim": 282, "skip": [40, 52, 59, 129, 132, 161, 163, 164, 335, 413, 453, 456], "sklearn": [3, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 60, 61, 94, 96, 101, 102, 106, 107, 108, 109, 110, 114, 130, 135, 148, 151, 155, 156, 163, 165, 171, 172, 174, 178, 192, 240, 241, 242, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 270, 271, 272, 274, 278, 282, 284, 288, 289, 290, 291, 293, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 341, 346, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465, 489], "sklearn_output_config": [52, 55, 56, 59], "skull": [91, 272, 391, 392, 393, 394, 395, 396], "skullstrip": [157, 163, 185, 298], "sled": [118, 199], "sleep": 0, "slice": [2, 3, 10, 17, 38, 65, 73, 91, 96, 103, 104, 113, 120, 128, 147, 154, 156, 163, 176, 190, 192, 201, 202, 234, 278, 332, 335, 346, 358, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 444, 475, 510], "slice_cod": [59, 105], "slice_dur": [59, 105], "slice_end": [59, 105], "slice_start": [59, 105], "slice_time_ref": [35, 64, 65, 68, 70, 72, 73, 103, 104, 113, 128, 129, 134, 163, 278, 332, 335, 491], "slicer": [158, 163, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 488, 507], "slight": [160, 163], "slightli": [24, 26, 51, 52, 68, 86, 119, 145, 163, 172, 183, 240, 242, 366, 367, 398], "slovakia": 0, "slow": [6, 38, 47, 68, 177, 178, 179, 192, 202, 507], "slower": [101, 174, 178, 366], "slowest": 178, "slowli": 178, "sluggish": 181, "sm": [118, 198], "small": [6, 13, 19, 26, 52, 54, 61, 67, 88, 102, 106, 107, 118, 137, 139, 140, 163, 168, 169, 171, 176, 178, 179, 180, 187, 188, 305, 306, 308, 309, 310, 311, 320, 351, 449, 450, 454, 463, 466, 477, 487, 507], "small_meta_imag": 121, "smaller": [3, 6, 34, 70, 83, 138, 148, 156, 160, 163, 168, 176, 177, 178, 181, 185, 190, 194, 238, 256, 257, 349, 362, 370, 462, 474, 475, 501], "smallest": 178, "smart": 462, "smith": [2, 22, 85, 96, 99, 106, 116, 118, 165, 185, 194, 198, 261, 279, 348, 358, 376, 384, 399, 433, 449, 451, 456, 465, 501, 509], "smith2009": 22, "smith_2009": [2, 22, 89], "smith_bm10": 22, "smith_bm20": 22, "smith_bm70": 22, "smith_rsn10": 22, "smith_rsn20": 22, "smith_rsn70": 22, "smoller": [118, 231, 237, 260, 264], "smooth": [6, 26, 31, 35, 36, 41, 45, 47, 52, 53, 58, 65, 71, 73, 77, 83, 85, 96, 99, 104, 109, 111, 116, 118, 134, 144, 145, 163, 168, 170, 171, 172, 178, 185, 187, 189, 190, 202, 233, 268, 305, 306, 307, 308, 312, 313, 332, 346, 348, 363, 368, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 441, 452, 454, 455, 456, 462, 463, 465, 467, 491, 509, 510], "smooth_anat_img": 4, "smooth_arrai": 467, "smooth_img": [4, 71, 96, 97, 107, 145, 151, 163, 190, 191, 192], "smooth_x": 47, "smootharomanonaggr_bold": [373, 374], "smoothed_img": [97, 190], "smoothen": 179, "smoother": 68, "smoothing_fwhm": [3, 26, 31, 35, 36, 37, 45, 52, 53, 55, 56, 57, 58, 61, 65, 68, 72, 73, 77, 78, 79, 81, 91, 93, 94, 101, 103, 104, 106, 108, 109, 110, 144, 163, 169, 171, 192, 305, 306, 307, 308, 312, 313, 332, 335, 346, 348, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 463, 465, 467, 491, 492], "snapshot": 64, "snippet": 121, "snr": [47, 185, 351, 477], "snyder": [118, 202, 373, 374], "so": [3, 6, 7, 15, 23, 26, 35, 38, 41, 43, 44, 46, 52, 55, 68, 70, 71, 73, 74, 78, 81, 82, 83, 88, 91, 96, 103, 104, 105, 107, 111, 113, 121, 129, 156, 163, 164, 176, 177, 178, 179, 181, 188, 190, 192, 198, 199, 240, 241, 242, 250, 256, 257, 264, 282, 287, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 335, 346, 348, 371, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 399, 446, 452, 454, 455, 459, 461, 462, 463, 464, 465, 487], "sochat": [118, 121, 226, 282, 284], "social": [118, 207, 268], "socioeconom": 228, "soft": 185, "softwar": [0, 70, 74, 105, 118, 133, 163, 181, 182, 185, 250, 345, 435, 508, 510], "solari": [78, 118, 327], "sole": [68, 121, 178, 240, 241, 242, 312, 313, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465], "solut": [6, 67, 68, 165, 166, 172, 177, 178, 187, 190, 231, 313], "solv": [33, 42, 178, 179, 187, 188, 313, 399], "solver": [41, 118, 177, 241, 242, 244, 305, 307, 310, 311], "somatomotordors": 267, "somatomotorlater": 267, "some": [0, 3, 6, 7, 10, 11, 13, 15, 16, 26, 32, 43, 44, 46, 52, 59, 68, 69, 70, 72, 82, 86, 88, 101, 105, 107, 108, 111, 114, 120, 121, 129, 133, 135, 141, 148, 154, 157, 158, 160, 161, 163, 164, 171, 172, 174, 176, 178, 179, 181, 184, 187, 188, 190, 191, 192, 194, 231, 237, 238, 240, 241, 242, 248, 254, 256, 257, 282, 305, 306, 307, 308, 309, 310, 311, 312, 313, 322, 332, 345, 346, 349, 351, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 443, 444, 447, 450, 451, 458, 462, 463, 464, 465, 468, 474, 477, 501, 507, 508], "some_high_valu": [45, 46], "someth": 68, "sometim": [61, 66, 68, 82, 121, 125, 129, 163, 164, 171, 179, 185, 188, 319, 323], "somewhat": 68, "son": [118, 324, 325], "song": [0, 158, 163], "soon": [39, 118, 188], "sophi": [0, 128, 163], "sophist": [101, 174], "sorri": 67, "sort": [13, 22, 32, 33, 37, 45, 46, 65, 77, 120, 132, 156, 163, 188, 190, 269, 304, 346, 348, 361, 399], "sought": [178, 185], "sound": [43, 181], "sourav": [0, 148, 163], "sourc": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 118, 164, 165, 166, 170, 178, 179, 188, 229, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 508], "source_affin": 86, "source_img": 367, "sourcery_token": 164, "southern": 0, "sp": 36, "sp1": 44, "sp2": 44, "sp3": 44, "space": [3, 6, 7, 13, 16, 23, 24, 30, 43, 48, 51, 54, 58, 63, 65, 68, 70, 75, 86, 102, 104, 113, 116, 120, 121, 128, 132, 134, 141, 143, 145, 148, 151, 156, 163, 166, 179, 180, 181, 184, 185, 192, 202, 206, 208, 209, 217, 220, 221, 230, 231, 232, 234, 235, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 282, 284, 286, 289, 291, 311, 312, 313, 332, 335, 351, 352, 353, 363, 366, 376, 377, 378, 379, 383, 384, 385, 386, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 432, 434, 436, 437, 441, 442, 443, 444, 447, 449, 450, 451, 456, 457, 458, 460, 462, 464, 465, 477, 487, 509], "space_label": [65, 103, 104, 113, 335], "spacenet": [3, 141, 163, 171, 172, 173, 175, 185, 310, 311, 510], "spacenetclassifi": [135, 161, 163, 177, 305, 306, 311], "spacenetregressor": [42, 46, 135, 161, 163, 177, 310], "span": [56, 72, 181, 434, 449, 450, 451, 458], "spars": [32, 42, 43, 49, 51, 52, 60, 61, 62, 116, 118, 166, 167, 169, 170, 172, 177, 185, 186, 187, 193, 225, 241, 242, 244, 258, 268, 305, 306, 307, 308, 310, 311, 312, 313, 376, 384, 432, 437, 448, 452, 454, 455, 456, 457, 465, 509, 510], "sparser": [72, 96, 170, 310, 311, 465, 467], "sparsifi": [138, 163], "sparsiti": [43, 51, 118, 136, 163, 165, 169, 170, 172, 173, 177, 178, 185, 225, 242, 244, 310, 311, 313, 465], "spatial": [3, 6, 33, 42, 46, 49, 52, 53, 57, 62, 88, 96, 97, 101, 108, 113, 116, 118, 128, 154, 158, 161, 163, 168, 170, 171, 174, 175, 181, 185, 186, 187, 189, 192, 198, 199, 202, 205, 218, 219, 221, 225, 231, 233, 234, 250, 253, 258, 260, 268, 271, 279, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 348, 359, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 449, 451, 456, 463, 465, 467, 492, 509, 510], "spatial_pattern": 225, "spatialimag": [128, 163, 190, 354], "spatiotempor": [103, 118], "speaker": 210, "spec": 164, "special": [121, 128, 135, 151, 163, 179], "specif": [6, 15, 16, 17, 18, 26, 32, 34, 35, 41, 51, 52, 61, 64, 65, 66, 67, 68, 70, 78, 81, 82, 86, 96, 104, 113, 118, 119, 124, 130, 141, 154, 160, 163, 165, 168, 169, 170, 171, 172, 174, 176, 179, 181, 183, 184, 185, 187, 188, 189, 192, 198, 202, 224, 235, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 269, 279, 284, 287, 320, 322, 324, 325, 335, 345, 347, 351, 362, 371, 378, 381, 384, 386, 388, 399, 413, 431, 452, 453, 454, 455, 461, 465, 477, 485, 486, 487, 488, 489, 491, 507, 510], "specifi": [10, 15, 16, 34, 59, 64, 65, 68, 70, 72, 73, 77, 80, 81, 82, 83, 86, 91, 96, 104, 105, 112, 113, 121, 126, 129, 130, 131, 134, 145, 148, 149, 151, 154, 155, 156, 157, 158, 160, 163, 165, 166, 176, 178, 180, 181, 188, 190, 191, 192, 208, 225, 256, 257, 261, 264, 282, 287, 295, 296, 297, 298, 299, 300, 305, 306, 307, 308, 309, 310, 311, 312, 313, 322, 324, 325, 328, 332, 335, 339, 340, 341, 346, 347, 349, 351, 355, 363, 366, 368, 370, 373, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 396, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 436, 441, 443, 444, 446, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 461, 463, 465, 475, 476, 477, 487, 507], "speck": [118, 176], "spectral": [13, 118, 205, 253], "spectrum": 178, "speed": [3, 24, 38, 39, 50, 79, 91, 101, 109, 118, 129, 163, 168, 174, 177, 178, 191, 192, 399, 462, 487], "speedup": 178, "spent": 178, "sphere": [16, 38, 39, 49, 58, 62, 116, 131, 153, 156, 163, 175, 192, 199, 211, 212, 213, 214, 215, 216, 240, 265, 266, 268, 290, 293, 294, 301, 376, 386, 431, 437, 447, 448, 452, 453, 454, 455, 456, 457, 461, 473, 486, 487, 497, 507, 509], "sphere_left": [211, 212, 213, 214, 215, 216, 290], "sphere_right": [211, 212, 213, 214, 215, 216, 290], "spheres_mask": 61, "spheric": [61, 293], "sphinx": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 136, 138, 142, 143, 145, 161, 163, 179], "sphinx_gallery_conf": 179, "sphinx_gallery_dummy_imag": [169, 191], "sphx_glr_auto_examples_00_tutorials_plot_decoding_tutori": 171, "spike": 68, "spine": 13, "spline": [127, 163, 443, 444, 450, 451, 458, 477], "split": [3, 32, 33, 34, 36, 38, 41, 42, 43, 44, 45, 46, 47, 50, 52, 54, 88, 96, 102, 103, 154, 163, 169, 171, 173, 178, 179, 185, 191, 256, 257, 305, 306, 307, 308], "split_index": 44, "split_multi_scal": 44, "splitter": [305, 306, 307, 308, 309, 310, 311], "spm": [6, 26, 38, 43, 44, 64, 68, 69, 72, 81, 118, 133, 159, 160, 163, 175, 180, 182, 185, 190, 194, 199, 250, 288, 332, 334, 339, 342, 343, 344, 362, 510], "spm12": [161, 163, 250], "spm5": 250, "spm8": [45, 77, 228, 250, 286], "spm_auditori": [6, 71, 288], "spm_dispersion_deriv": [132, 161, 163, 332, 334, 339], "spm_hrf": [132, 158, 161, 163, 332, 334, 339], "spm_multimodal_fmri": [72, 180, 289], "spm_time_deriv": [132, 161, 163, 332, 334, 339], "spmt_0001": 107, "spontan": [118, 225, 258], "sportingli": [148, 163], "spot": 68, "spread": [25, 101, 174, 390], "springer": [118, 165, 219, 225, 240, 258], "spuriou": [68, 118, 169, 179, 202, 373, 374, 466], "sqrt": [112, 141, 163, 246, 247, 324, 325], "squar": [35, 44, 46, 52, 64, 68, 70, 73, 103, 106, 109, 113, 118, 166, 172, 177, 178, 180, 188, 202, 240, 311, 319, 322, 323, 324, 332, 345, 346, 357, 373, 378, 381, 384, 388, 399, 435, 462, 463, 464, 478, 491], "squeez": [24, 312, 313, 463], "src_img": [435, 445], "src_label": [65, 435, 445], "sreen": 36, "sriniva": [118, 201, 251], "srow_i": [59, 105], "srow_x": [59, 105], "srow_z": [59, 105], "sse": [319, 323, 324, 325], "ssh": 164, "ssp": 210, "sst": 210, "sstdsp": 210, "sstssp": 210, "sstssp_minus_dstdsp": [73, 491], "st": 0, "stabil": [155, 163, 170, 202, 320], "stabl": [13, 36, 51, 59, 118, 127, 148, 163, 164, 170, 172, 173, 178, 187, 252, 290, 305, 306, 307, 308, 309, 310, 311, 312, 313, 373, 459, 460, 487, 508, 511], "stable_project": [231, 260], "stack": [43, 54, 61, 156, 163, 185, 247], "stage": [103, 118, 179, 187], "stall": 188, "stan": [322, 324, 325], "stand": [16, 47, 151, 163, 185, 191, 507], "standalon": [332, 346, 475], "standard": [3, 6, 10, 11, 12, 23, 26, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64, 65, 68, 70, 71, 73, 74, 77, 91, 93, 94, 96, 101, 102, 104, 108, 109, 110, 111, 113, 114, 118, 120, 128, 129, 148, 151, 155, 157, 158, 161, 163, 166, 169, 171, 172, 176, 179, 180, 181, 185, 190, 191, 192, 206, 211, 212, 213, 214, 215, 240, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 286, 305, 306, 307, 308, 310, 311, 312, 313, 324, 325, 332, 334, 335, 339, 351, 371, 373, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 436, 463, 465, 477, 491, 492, 508], "standard_devi": [151, 163, 377, 380, 383, 387, 468], "standard_glm": 103, "standard_norm": [66, 322, 324, 325], "standardize_confound": [50, 52, 53, 54, 55, 56, 57, 58, 59, 61, 91, 93, 94, 102, 158, 163, 169, 192, 312, 313, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 465, 477, 492], "standardize_sign": [128, 130, 163], "standardscal": [39, 43, 44, 47, 114], "standout": 111, "stanford": [0, 118, 177], "stanisla": [74, 118, 187, 204, 210, 277], "stanlei": [118, 227], "start": [2, 3, 7, 26, 32, 43, 52, 59, 61, 86, 93, 96, 160, 163, 171, 178, 179, 185, 186, 188, 234, 263, 332, 334, 339, 399, 487], "starttim": [103, 104, 113], "stat": [6, 24, 26, 35, 64, 65, 69, 72, 73, 77, 78, 81, 96, 104, 107, 112, 135, 160, 163, 182, 191, 320, 329, 332, 345, 346, 370, 455, 459, 461, 474, 475, 491, 507], "stat_img": [10, 14, 15, 16, 17, 92, 95, 327, 349, 474, 475], "stat_map": [10, 13, 24, 39, 70, 349, 446, 455], "stat_map_img": [10, 443, 451, 458, 459], "stat_map_surf": 24, "stat_maps_pair": 82, "stat_maps_unpair": 82, "stat_threshold": [6, 65, 71, 135, 163, 474], "stat_typ": [6, 70, 71, 113, 130, 131, 161, 163, 320, 328, 332], "state": [0, 2, 24, 32, 34, 51, 52, 53, 54, 57, 59, 68, 89, 91, 94, 102, 103, 118, 129, 143, 154, 156, 163, 165, 166, 168, 169, 170, 172, 177, 181, 185, 187, 188, 197, 198, 200, 201, 202, 205, 209, 225, 227, 232, 233, 248, 249, 251, 252, 291, 305, 306, 307, 308, 309, 312, 313, 332, 341, 348, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 399, 463, 465, 477, 492, 510], "static": [10, 381, 388, 401, 458], "statist": [2, 7, 9, 15, 23, 24, 26, 29, 35, 38, 43, 45, 52, 64, 67, 68, 70, 72, 76, 77, 84, 85, 99, 103, 104, 106, 107, 109, 113, 118, 119, 127, 130, 132, 134, 135, 136, 143, 144, 154, 156, 160, 163, 165, 170, 173, 176, 178, 179, 180, 182, 185, 186, 187, 191, 192, 205, 235, 241, 244, 254, 262, 276, 282, 283, 284, 293, 294, 302, 320, 321, 322, 324, 325, 326, 327, 328, 345, 346, 348, 349, 351, 370, 399, 412, 413, 435, 443, 446, 449, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 465, 467, 474, 475, 477, 483, 487, 491, 502, 508, 509, 510], "statistician": 176, "statmap": [65, 345], "statstic": 83, "statu": [171, 185, 200, 228], "std": [32, 34, 47, 50, 53, 54, 55, 56, 58, 59, 61, 91, 108, 240, 305, 306, 307, 308, 310, 311, 312, 313, 332, 351, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 436, 463, 465, 477], "std_coef_": [305, 306, 307, 308], "std_coef_img_": [305, 306, 307, 308], "std_dvars_threshold": [130, 161, 163, 373, 374], "std_test_scor": 102, "stderr": 44, "steadi": [59, 68, 156, 163, 332, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 465, 477], "steel": [103, 118], "steep": 26, "steinkamp": [0, 148, 153, 163], "step": [3, 12, 13, 21, 35, 37, 39, 41, 45, 47, 50, 52, 53, 58, 61, 64, 65, 67, 68, 70, 73, 81, 82, 91, 96, 101, 104, 113, 120, 127, 132, 146, 154, 160, 163, 164, 165, 168, 169, 170, 171, 173, 174, 176, 178, 179, 185, 188, 189, 190, 191, 200, 207, 228, 242, 249, 273, 296, 299, 307, 308, 312, 313, 332, 335, 348, 374, 376, 379, 385, 391, 392, 393, 394, 395, 396, 463, 477, 510], "stephan": [118, 351, 477], "stephani": [118, 227], "stephen": [106, 118, 165, 178, 185, 198, 217, 227, 233, 261, 279, 348, 399], "stereotax": 202, "stern": [118, 319, 323], "steven": [0, 61, 118, 128, 130, 163, 201, 202, 209, 217, 230, 232, 251, 265, 266, 267, 373, 374], "stick": [68, 181], "still": [16, 52, 68, 81, 93, 105, 111, 121, 129, 158, 163, 176, 178, 183, 188, 192, 282, 507], "stim": 69, "stim_typ": 40, "stimui": 181, "stimul": [6, 74, 171, 234], "stimuli": [30, 32, 34, 35, 41, 48, 68, 82, 101, 116, 165, 166, 168, 169, 171, 181, 187, 190, 192, 207, 218, 271, 281, 353, 370, 376, 379, 385, 427, 451, 456, 492, 509], "stimuli_random_runs_filenam": 43, "stimuli_run": 43, "stimulu": [41, 43, 44, 67, 103, 181], "stimulus_inform": 40, "stimulus_run": 43, "stimulus_shap": 43, "stipul": 101, "stochast": 208, "stoddard": [26, 118], "stop": [46, 56, 100, 115, 116, 118, 121, 177, 241, 244, 282, 284, 356, 361, 362, 364, 443, 451, 456, 462, 509], "stop_go_image_id": 112, "stopsign": 65, "stopsignal_desc": 65, "stopsignal_ev": 65, "stopsignal_spac": 65, "stopsuccess": [65, 491], "stopsuccessminusgo": 65, "stopsuccessminusgo_clust": 65, "stopsuccessminusgo_design": 65, "stopsuccessminusgo_stat": 65, "storag": 192, "store": [3, 7, 28, 31, 47, 52, 53, 54, 55, 57, 71, 72, 96, 104, 111, 113, 121, 164, 169, 171, 176, 179, 233, 256, 257, 292, 322, 324, 325, 364, 390, 399, 445, 479, 480], "store_precis": 240, "stori": [68, 70, 118, 223], "str": [23, 65, 77, 103, 131, 157, 163, 179, 199, 240, 241, 242, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 329, 330, 332, 334, 335, 339, 345, 346, 347, 348, 349, 350, 351, 352, 362, 364, 365, 366, 367, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 471, 473, 475, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487], "str_": 3, "straightforward": [73, 178, 320], "strategi": [3, 25, 30, 48, 51, 52, 68, 90, 91, 93, 94, 102, 111, 113, 116, 118, 128, 130, 132, 134, 135, 151, 155, 156, 158, 161, 163, 164, 169, 172, 175, 176, 178, 181, 189, 240, 271, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 335, 351, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 395, 436, 448, 449, 456, 463, 465, 468, 477, 487, 492, 509], "stratifi": [156, 163, 171, 305, 307], "stratifiedkfold": [305, 306, 307, 308, 309, 310, 311], "stratifiedshufflesplit": [54, 102], "stream": [3, 34, 120, 186, 192, 218], "strength": [50, 151, 154, 163, 248, 368, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 437, 507], "stress": 178, "striat": 54, "strict": [13, 19, 21, 32, 34, 36, 40, 44, 50, 53, 54, 56, 61, 90, 104, 107, 113, 114, 169, 179], "strictli": [256, 257], "string": [4, 16, 31, 35, 58, 74, 79, 81, 90, 103, 104, 113, 120, 131, 134, 145, 146, 158, 160, 163, 164, 179, 188, 190, 199, 201, 221, 250, 275, 276, 286, 292, 304, 322, 324, 325, 330, 332, 334, 339, 345, 346, 348, 350, 351, 361, 362, 370, 371, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 446, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 465, 466, 475, 477, 488, 489, 490], "string_beta_seri": 103, "string_connectivity_img": 103, "string_corr": 103, "string_seed_beta_seri": 103, "strive": 3, "stroke": [118, 165, 240], "strong": [66, 68, 91, 178, 179], "stronger": 165, "strongest": 61, "strongli": [171, 179, 185], "struct": [156, 163], "structur": [3, 6, 24, 26, 41, 42, 44, 46, 49, 52, 54, 61, 62, 66, 68, 116, 118, 165, 171, 173, 174, 175, 176, 178, 185, 190, 197, 199, 200, 201, 202, 204, 205, 208, 217, 218, 219, 224, 225, 228, 233, 234, 237, 242, 250, 252, 261, 264, 271, 277, 310, 311, 319, 371, 391, 392, 393, 394, 395, 396, 448, 456, 459, 464, 470, 509, 510], "student": [96, 181, 191, 229, 320, 510], "studi": [0, 2, 6, 33, 35, 43, 45, 59, 68, 77, 100, 102, 115, 116, 118, 121, 167, 172, 174, 175, 177, 178, 181, 186, 190, 198, 199, 202, 209, 218, 219, 224, 228, 235, 252, 279, 282, 284, 295, 309, 356, 361, 362, 364, 368, 373, 374, 376, 385, 443, 451, 456, 509], "stufflebeam": [118, 202], "style": [4, 136, 158, 163, 304], "sub": [6, 22, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 65, 70, 80, 87, 93, 94, 97, 103, 104, 108, 113, 156, 163, 171, 240, 241, 242, 256, 257, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 371, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465, 475], "sub001": 72, "sub_fold": 371, "sub_id": 248, "sub_label": [103, 128, 163, 335, 371], "subcallos": 93, "subclass": [16, 179, 429], "subcompon": 185, "subcort": [22, 118, 134, 148, 163, 194, 217, 220, 229, 232, 238, 256, 257, 259, 267, 501], "subcortex": [22, 118, 232, 267], "subdivid": [118, 217, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427], "subfold": 188, "subgradi": [118, 178], "subgroup": 185, "subj": 4, "subj1": [4, 190], "subj1_img": 105, "subj2": [3, 17, 19, 27, 31, 32, 34, 36, 37, 38, 96, 106, 120], "subj2_img": 105, "subject": [1, 3, 4, 8, 12, 16, 17, 18, 19, 22, 23, 24, 26, 27, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 49, 50, 51, 52, 53, 55, 57, 59, 60, 61, 62, 63, 64, 67, 68, 70, 73, 75, 77, 79, 80, 82, 87, 93, 96, 97, 102, 103, 104, 105, 106, 108, 109, 110, 111, 114, 116, 118, 120, 121, 127, 128, 129, 130, 132, 139, 141, 142, 151, 154, 161, 163, 166, 167, 168, 169, 171, 178, 180, 181, 183, 184, 187, 189, 190, 191, 193, 196, 198, 199, 201, 202, 204, 207, 217, 221, 222, 223, 225, 227, 228, 233, 234, 240, 241, 242, 244, 248, 249, 250, 252, 258, 268, 271, 276, 277, 279, 280, 286, 288, 289, 290, 291, 301, 304, 312, 313, 332, 335, 346, 347, 349, 352, 363, 366, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 394, 396, 412, 432, 434, 437, 438, 439, 442, 444, 448, 451, 456, 463, 474, 491, 492, 507, 509, 510], "subject1": 190, "subject2": 190, "subject_": 190, "subject_01": 190, "subject_03": 190, "subject_data": [6, 26, 71, 72, 180], "subject_effect": 82, "subject_id": [65, 104, 113, 161, 163, 280], "subject_label": [65, 80, 104, 113, 332, 346, 347, 348, 491], "subject_time_seri": 56, "subjects_label": [80, 347], "submit": [185, 188], "submodul": [158, 160, 163, 179], "subobject": [240, 241, 242, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465], "subpart": [158, 163], "subpeak": [474, 475], "subplot": [12, 13, 25, 26, 32, 40, 41, 43, 44, 46, 47, 52, 54, 60, 66, 67, 68, 69, 71, 77, 80, 81, 82, 96, 98, 103, 104, 109, 114, 127, 163, 442, 452, 453, 454, 455], "subplot_kw": [114, 452, 453, 454, 455], "subplots_adjust": [13, 27, 43, 47, 52, 60, 69, 109, 191], "subsampl": 208, "subsequ": [52, 86, 192, 228, 282, 284, 373, 374], "subset": [38, 47, 96, 113, 172, 176, 179, 202, 304, 322, 335, 358, 373, 481, 482], "substitut": [103, 473], "subthreshold": [26, 118, 134, 163], "subtract": [61, 68, 104, 187, 188, 283], "succ": 112, "succeed": [107, 112], "success": [164, 179, 181, 188, 192, 234], "successfulli": [164, 179], "sufen": [118, 217], "suffer": 374, "suffix": [161, 163, 372, 374], "suggest": [0, 6, 26, 88, 158, 163, 168, 187, 190, 351, 391, 393, 394, 396, 477], "suit": [96, 103, 164, 166, 172, 187, 202, 252], "suitabl": [59, 70, 148, 163, 172, 176, 192, 280, 374], "sulc": [452, 453, 454, 455, 461, 485], "sulc_left": [211, 212, 213, 214, 215, 216, 290, 446, 459], "sulc_right": [211, 212, 213, 214, 215, 216, 290, 446, 459, 507], "sulcal": [10, 23, 24, 39, 70, 114, 118, 206, 211, 212, 213, 214, 215, 216, 254, 290, 294, 446, 452, 454, 455, 459, 461], "sulci": [23, 118, 134, 163, 206, 262], "sulco": [206, 262], "sulcu": 107, "sum": [3, 44, 45, 52, 61, 67, 69, 79, 81, 86, 104, 106, 109, 110, 112, 151, 163, 178, 310, 311, 319, 323, 324, 357, 377, 380, 383, 387, 468, 478], "summar": [57, 61, 93, 171, 179, 324, 378, 383, 384, 386, 474, 492], "summari": [35, 73, 93, 156, 179, 320, 492], "summary_statistics_run_1": 73, "summary_statistics_run_2": 73, "summerlin": [118, 236, 263], "sundermann": [26, 118], "sup": 492, "superimpos": 445, "superior": [59, 93, 177, 365], "supervis": [52, 118, 172, 174, 175, 185, 187], "supplement": [118, 206, 219, 254], "supplementari": [93, 120, 176], "suppli": [61, 65, 310, 311, 339, 373, 377, 383, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 437, 468, 477], "support": [0, 4, 10, 16, 26, 31, 34, 35, 36, 37, 41, 47, 101, 109, 120, 125, 127, 128, 130, 132, 133, 134, 135, 143, 144, 145, 148, 149, 150, 151, 155, 156, 158, 159, 160, 161, 163, 164, 171, 172, 174, 176, 179, 181, 185, 186, 188, 305, 306, 307, 308, 310, 311, 320, 345, 370, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 452, 454, 455, 465, 471, 487, 508], "supported_loss": 310, "supported_penalti": [310, 311], "suppos": [105, 121, 178, 188, 190, 192, 324, 325], "supposedli": 235, "suppress": [16, 118, 202], "supra": 181, "supracalcarin": 93, "supramar": 492, "supramargin": 93, "suprathreshold": [26, 491], "suptitl": [40, 43, 45, 46, 47, 68, 74, 77, 81, 103, 104, 109], "sur": [0, 179], "suramya": [0, 130, 163], "sure": [16, 24, 70, 96, 116, 127, 130, 131, 132, 163, 164, 176, 179, 188, 492, 508], "surf_data": [446, 452, 454, 455, 459, 461, 485, 487], "surf_img_nki": [24, 114], "surf_map": [7, 10, 23, 114, 452, 455, 461], "surf_mesh": [10, 23, 24, 70, 132, 163, 413, 446, 452, 453, 454, 455, 459, 461, 486, 487, 507], "surf_plot": [129, 134, 143, 163], "surfac": [1, 8, 9, 29, 30, 48, 58, 63, 75, 100, 115, 116, 118, 120, 128, 129, 131, 133, 134, 135, 143, 145, 147, 148, 149, 151, 154, 155, 156, 158, 160, 161, 182, 185, 186, 187, 189, 194, 206, 211, 212, 213, 214, 215, 216, 237, 238, 240, 254, 262, 271, 274, 278, 290, 291, 293, 294, 301, 302, 305, 306, 308, 310, 311, 312, 313, 332, 335, 345, 346, 348, 352, 358, 359, 362, 363, 370, 373, 380, 381, 382, 387, 388, 389, 390, 399, 413, 437, 443, 446, 448, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 473, 495, 497, 503, 508, 509, 510], "surface_imag": [7, 10, 70], "surface_image_data": 7, "surface_image_data_hemi": 7, "surface_image_load": 7, "surface_image_mesh": 7, "surface_image_mesh_hemi": 7, "surface_mesh": 487, "surface_plot": 507, "surfaceimag": [7, 10, 23, 24, 39, 70, 113, 114, 132, 134, 135, 163, 192, 211, 212, 213, 214, 215, 216, 290, 294, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 329, 332, 346, 348, 349, 350, 351, 352, 355, 357, 358, 359, 362, 363, 364, 365, 366, 367, 370, 380, 381, 382, 387, 388, 389, 390, 413, 435, 445, 452, 453, 454, 455, 461, 463, 464, 470, 492], "surfacelabelsmask": [24, 132, 133, 134, 135, 161, 163, 189, 388, 492, 510], "surfacemapsmask": [133, 134, 161, 163, 189, 312, 313, 381, 492, 510], "surfacemask": [114, 132, 133, 161, 163, 189, 305, 306, 307, 308, 329, 332, 346, 348, 380, 381, 382, 388, 435, 445, 464, 492, 510], "surfacemesh": [482, 483], "surfaceview": [459, 461], "surfer": [237, 264], "surpass": 181, "surrog": [38, 106], "surround": [156, 163, 487], "surviv": [53, 155, 163, 320, 465], "sustain": 179, "svc": [3, 31, 32, 33, 34, 35, 36, 37, 38, 41, 120, 151, 163, 171, 172, 174, 305, 307, 309], "svc_coef": 101, "svc_l1": [32, 34, 41, 172, 305, 307], "svc_l2": [32, 41, 172, 305, 307], "svc_ova": 37, "svc_ovo": 37, "svd": [143, 163, 313, 357, 463, 478], "svf8k": 10, "svg": [16, 129, 163, 179, 345, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 455], "svg_to_json_convert": 179, "svm": [30, 36, 37, 41, 45, 47, 48, 54, 102, 116, 120, 143, 163, 173, 175, 177, 185, 192, 271, 305, 358, 451, 456, 458, 509, 510], "svr": [42, 45, 47, 151, 163, 172, 306, 308, 309], "swap": [176, 191, 228, 369], "swap_img_hemispher": 191, "sweden": 0, "swiss": 192, "switch": [130, 143, 150, 163, 179, 188, 443], "switzerland": 0, "sy": [0, 44, 129, 163], "syllab": 234, "sylvain": [0, 145, 148, 151, 163], "sym": [20, 202, 247, 252], "sym_matrix_to_vec": [144, 163, 247], "sym_to_vec": [136, 141, 144, 156, 163], "symbol": [179, 180, 361], "symlink": [287, 303], "symmetr": [20, 50, 81, 144, 163, 178, 202, 219, 246, 247, 252, 256, 257, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 437, 446, 452, 455, 457, 458, 459, 461], "symmetri": [176, 178], "symmetric_cbar": [15, 71, 129, 163, 443, 446, 451, 455], "symmetric_cmap": [10, 23, 114, 129, 135, 149, 163, 452, 457, 458, 459, 461, 507], "symmetric_split": [138, 163, 256, 257], "symposium": [51, 118, 170, 312, 313], "symptom": 200, "synchron": 369, "synonym": 181, "synthes": 178, "synthesi": [118, 121, 178, 226, 282, 284], "synthet": [23, 60, 86, 179], "system": [0, 45, 46, 118, 164, 165, 171, 178, 179, 188, 190, 201, 206, 211, 212, 213, 214, 215, 217, 224, 234, 241, 251, 290, 292], "systemat": [103, 118, 138, 161, 163, 202, 277, 373, 374], "s\u00e9gonn": [118, 206, 254], "t": [0, 3, 5, 6, 10, 17, 23, 25, 26, 35, 39, 41, 44, 45, 58, 59, 61, 65, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 81, 82, 85, 92, 94, 95, 96, 99, 102, 103, 105, 106, 107, 108, 109, 111, 112, 113, 116, 118, 121, 130, 132, 134, 154, 163, 164, 165, 176, 177, 178, 179, 181, 182, 184, 185, 187, 188, 190, 191, 201, 204, 217, 231, 233, 236, 237, 251, 260, 261, 263, 264, 269, 277, 282, 283, 284, 287, 310, 311, 320, 322, 323, 324, 325, 326, 328, 332, 345, 346, 348, 370, 373, 374, 393, 399, 446, 449, 451, 456, 467, 475, 478, 487, 507, 509], "t0": [32, 44], "t1": [47, 77, 157, 163, 199, 202, 217, 219, 250, 272, 295, 297, 298, 300, 434, 507], "t1w": 65, "t2": [219, 272, 441, 507], "t2_relax": [219, 272], "t_img": 112, "t_map": [332, 346], "t_map001": 190, "t_r": [3, 6, 12, 26, 35, 52, 54, 55, 56, 57, 58, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 91, 93, 94, 102, 113, 132, 135, 148, 159, 161, 163, 192, 249, 268, 271, 278, 288, 289, 305, 306, 307, 308, 310, 311, 312, 313, 332, 334, 335, 336, 337, 338, 339, 342, 343, 344, 351, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 436, 463, 465, 477, 491, 492], "t_score": 112, "t_scores_original_data": [45, 106], "t_statmap": [65, 77], "t_to_z": 112, "tab": [164, 188, 192], "tab10": 41, "tab20": [10, 453], "tabl": [6, 10, 23, 24, 35, 64, 65, 70, 71, 73, 93, 104, 113, 114, 128, 131, 134, 135, 159, 163, 179, 183, 188, 250, 252, 254, 256, 257, 259, 260, 262, 263, 264, 374, 377, 380, 383, 387, 450, 454, 474, 491], "table_fil": 65, "tabul": 65, "tabular": 65, "tackl": [172, 188], "tag": [32, 34, 121, 135, 163, 164, 179, 188, 371], "tail": [72, 322, 324, 325, 474], "tailor": [52, 70, 168], "take": [3, 4, 6, 10, 25, 31, 35, 43, 45, 46, 52, 53, 65, 67, 68, 69, 72, 74, 77, 79, 81, 96, 98, 101, 103, 105, 107, 113, 120, 128, 133, 135, 145, 148, 151, 157, 163, 164, 165, 166, 168, 171, 174, 176, 178, 179, 180, 181, 190, 192, 232, 240, 273, 282, 295, 296, 297, 298, 299, 300, 305, 306, 307, 308, 309, 313, 332, 334, 339, 348, 362, 377, 383, 398, 399, 403, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 463, 465, 467, 487, 504, 507], "taken": [6, 68, 103, 164, 172, 178, 179, 188, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 335, 346, 348, 367, 377, 378, 383, 384, 386, 465], "takerkart": [0, 151, 163], "tal": [118, 121, 192, 226, 282, 284, 386], "talairach": [118, 145, 163, 184, 194, 238, 248, 263], "tall": 44, "tamer": [0, 130, 163], "tanab": [43, 44, 118, 224, 281], "tangent": [54, 102, 144, 163, 169, 240], "tangent_matric": 54, "tangent_measur": 54, "tar": [3, 4, 40, 143, 163, 188, 210], "target": [3, 31, 35, 43, 86, 91, 96, 101, 103, 128, 148, 163, 171, 172, 176, 178, 179, 185, 188, 189, 202, 224, 271, 281, 305, 306, 307, 308, 309, 310, 311, 312, 313, 348, 366, 367, 376, 385, 392, 395, 399, 462, 464, 465], "target_affin": [3, 52, 55, 56, 65, 77, 79, 86, 91, 94, 191, 192, 305, 306, 307, 308, 310, 311, 312, 313, 332, 335, 346, 363, 366, 379, 385, 391, 393, 394, 396, 463, 492], "target_affine_3x3": 86, "target_affine_4x4": 86, "target_affine_mm_space_offset_chang": 86, "target_img": [367, 392, 395], "target_shap": [3, 52, 55, 56, 65, 77, 79, 86, 91, 94, 191, 192, 305, 306, 307, 308, 310, 311, 312, 313, 332, 335, 346, 363, 366, 379, 385, 391, 393, 394, 396, 463, 492], "target_var": 399, "targett": [137, 163], "tarun": [0, 129, 163], "task": [2, 3, 18, 31, 32, 33, 35, 36, 42, 52, 63, 65, 68, 70, 75, 79, 83, 91, 94, 100, 107, 111, 115, 116, 118, 130, 148, 159, 163, 170, 171, 172, 175, 178, 180, 181, 185, 186, 187, 188, 192, 208, 233, 241, 244, 271, 274, 276, 277, 304, 332, 335, 352, 356, 371, 376, 385, 386, 399, 412, 427, 435, 439, 442, 443, 451, 456, 492, 509], "task001_cope07_succstop_minus_go": 112, "task002_cope007_tstat1": 112, "task002_cope06_succ_stop_vs_go": 112, "task002_cope10_succstop_minus_go": 112, "task003_cope007_tstat1": 112, "task_data": 34, "task_label": [65, 103, 104, 113, 335], "task_mask": [32, 34], "tasknam": 335, "taylor": [0, 26, 118, 127, 128, 129, 130, 155, 158, 159, 160, 163, 177], "tb": [314, 315, 316, 317, 318], "tcontrast": [72, 322, 324, 325], "tcontrastresult": [322, 324, 325], "tcorr_2level": [205, 253], "tcorr_mean": [205, 253], "teach": [1, 116, 140, 151, 163, 179, 207], "teal": 71, "team": [21, 179, 187, 188, 225, 258, 508], "technic": [9, 29, 73, 103, 116, 165, 177, 178, 228, 319, 323, 455, 487, 509], "techniqu": [16, 47, 118, 169, 170, 171, 172, 173, 174, 178, 185, 187, 192, 234, 465], "technisch": 0, "technologi": 0, "tel": 0, "tell": [71, 88, 118, 178, 223], "temp_file_lifetim": [130, 161, 163, 473], "temp_lat": 492, "temp_m": 492, "temp_med_and_lingu": 492, "templat": [4, 17, 23, 41, 51, 70, 77, 85, 99, 113, 116, 118, 127, 131, 134, 136, 141, 146, 151, 154, 157, 160, 161, 163, 164, 169, 179, 181, 185, 187, 191, 192, 199, 201, 202, 228, 238, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 302, 305, 306, 307, 308, 312, 313, 361, 366, 367, 374, 379, 385, 392, 395, 434, 449, 450, 451, 456, 458, 463, 473, 501, 509], "template_affin": 95, "template_img": 95, "template_shap": 95, "templateflow": [164, 179, 219, 272, 273, 295, 296, 297, 298, 299, 300], "tempor": [3, 6, 17, 33, 34, 35, 40, 41, 54, 58, 64, 68, 69, 70, 73, 93, 96, 101, 104, 113, 118, 120, 148, 156, 161, 163, 170, 171, 185, 189, 205, 218, 234, 253, 271, 313, 332, 336, 337, 338, 339, 341, 342, 343, 344, 351, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 465, 477, 491], "temporal": 93, "temporal_anat_combin": 373, "temporal_anat_separ": 373, "temporari": 473, "temporarili": 179, "temporooccipit": 93, "temporopariet": 61, "ten": [6, 83, 463], "tend": [81, 103, 173, 178, 190], "tensor": 118, "term": [35, 57, 64, 68, 70, 73, 91, 94, 104, 113, 119, 134, 159, 163, 170, 172, 178, 181, 185, 187, 190, 191, 282, 310, 311, 319, 339, 373, 477, 491, 492], "term_idx": 107, "term_weight": 107, "term_weights_for_compon": 107, "termin": [171, 179, 508], "terminologi": [133, 163, 183], "test": [3, 31, 33, 36, 38, 41, 43, 45, 46, 47, 54, 56, 66, 68, 72, 76, 79, 80, 84, 102, 104, 106, 109, 110, 113, 116, 118, 127, 129, 130, 132, 147, 155, 158, 163, 164, 171, 173, 174, 176, 177, 178, 181, 182, 183, 184, 185, 191, 242, 248, 249, 250, 251, 252, 253, 254, 258, 261, 262, 264, 271, 272, 276, 277, 280, 281, 286, 291, 301, 305, 306, 307, 308, 309, 310, 311, 320, 345, 346, 348, 349, 356, 362, 366, 367, 370, 399, 412, 426, 439, 443, 451, 456, 458, 475, 489, 499, 508, 509], "test_cluster_level_parameters_smok": [127, 163], "test_contrast": 188, "test_data_gen": 188, "test_imag": 179, "test_img_plot": [158, 163], "test_modul": 179, "test_nilearn_standard": [132, 163], "test_scor": 101, "test_sign": [129, 163], "test_siz": [54, 102], "test_someth": 179, "test_surf_plot": 179, "tested_var": [79, 109, 110, 399], "tetrahedron": 7, "tetrel": [0, 151, 163], "teuscher": [118, 201, 251], "teve": [0, 153, 163], "texa": 0, "texliv": 188, "text": [13, 32, 37, 54, 58, 77, 96, 101, 118, 171, 179, 189, 202, 218, 224, 228, 229, 237, 271, 281, 319, 323, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427], "textquoteright": [118, 233, 261], "textur": 487, "tfce": [109, 127, 134, 160, 163, 185, 348, 399], "tgz": [10, 11, 28, 105, 111, 200, 249], "th": 458, "thalam": [118, 217], "thalamu": [199, 232, 267], "than": [3, 4, 6, 16, 26, 33, 34, 37, 38, 41, 42, 43, 44, 45, 46, 50, 51, 52, 54, 55, 56, 57, 58, 59, 61, 64, 68, 70, 71, 73, 77, 79, 81, 83, 88, 90, 91, 93, 94, 96, 101, 102, 103, 106, 107, 108, 109, 110, 111, 118, 119, 120, 121, 130, 135, 138, 141, 142, 143, 144, 145, 147, 151, 156, 158, 163, 165, 168, 170, 171, 172, 173, 174, 176, 178, 179, 181, 183, 185, 188, 190, 191, 192, 194, 202, 225, 238, 256, 257, 282, 284, 307, 308, 312, 313, 332, 341, 348, 349, 350, 357, 362, 370, 371, 373, 374, 377, 378, 379, 380, 381, 382, 384, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 436, 437, 443, 444, 446, 447, 451, 455, 456, 457, 459, 461, 465, 474, 475, 476, 478, 487, 492, 501], "thank": [148, 163, 179, 346, 347, 348], "tharun": [0, 132, 163], "thath": 164, "thei": [3, 6, 7, 25, 42, 45, 47, 52, 67, 68, 72, 73, 96, 101, 113, 120, 121, 128, 131, 134, 135, 158, 160, 163, 164, 170, 173, 174, 176, 178, 179, 181, 185, 187, 188, 190, 192, 198, 199, 202, 209, 221, 235, 264, 271, 282, 287, 332, 335, 346, 348, 352, 366, 377, 380, 383, 386, 387, 438, 466, 477, 492, 507], "them": [2, 3, 6, 7, 15, 20, 26, 32, 34, 42, 45, 47, 52, 53, 57, 58, 61, 65, 67, 70, 72, 73, 74, 81, 82, 88, 91, 96, 103, 107, 108, 111, 113, 116, 118, 120, 121, 125, 129, 131, 136, 148, 154, 155, 157, 160, 163, 164, 165, 166, 170, 172, 174, 179, 181, 185, 186, 187, 190, 192, 199, 250, 282, 284, 335, 345, 398, 399, 463, 507], "theme": [127, 160, 163], "themselv": [68, 121, 192], "theodor": [59, 118, 373, 374], "theoret": 176, "theori": [118, 185, 223, 324, 325], "therapanacea": 0, "therefor": [73, 111, 134, 158, 163, 170, 176, 178, 199, 202, 252, 435], "theta": [322, 324, 325], "thi": [0, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 120, 121, 128, 129, 130, 132, 134, 135, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 192, 194, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 210, 218, 224, 225, 227, 228, 229, 231, 233, 234, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 495, 501, 503, 504, 507, 510], "thick": [7, 15, 50, 132, 134, 156, 161, 163, 211, 212, 213, 214, 215, 216, 237, 264, 290, 294, 449, 450, 452, 453, 454, 455, 461, 485, 487], "thick_17": 237, "thick_7": 237, "thick_left": [211, 212, 213, 214, 215, 216, 290], "thick_right": [211, 212, 213, 214, 215, 216, 290], "thin": [161, 163, 237, 264], "thin_17": 237, "thin_7": 237, "thing": [2, 3, 7, 41, 59, 68, 128, 163, 168, 177, 178, 179, 188, 192, 322, 351, 477, 507], "think": [26, 118, 179, 181, 192], "third": [16, 68, 83, 169, 183, 341], "thirion": [0, 47, 51, 52, 54, 74, 102, 118, 122, 125, 129, 132, 136, 141, 145, 148, 149, 151, 158, 159, 163, 165, 168, 169, 170, 171, 173, 177, 187, 204, 208, 225, 240, 241, 255, 258, 277, 307, 308, 312, 313, 464, 465, 470], "this_meta": 112, "thiti": [0, 133, 163], "thoma": [0, 106, 118, 121, 134, 151, 154, 157, 158, 163, 165, 172, 185, 187, 198, 201, 226, 231, 237, 251, 260, 264, 282, 284, 348, 373, 374, 399, 435, 478], "thomasyeolab": [231, 237, 260], "thompsen": [118, 227], "thorough": 179, "thoroughli": 179, "thorsten": [118, 176], "those": [7, 13, 24, 26, 53, 65, 68, 73, 82, 91, 113, 132, 158, 161, 163, 170, 172, 174, 178, 179, 181, 188, 198, 233, 234, 282, 345, 377, 383, 436, 454, 459, 465, 468, 471, 472, 481, 482, 487], "though": [103, 108, 164, 171, 323, 452, 454, 455, 476], "thousand": [52, 192, 463], "thr0": [11, 256, 257], "thr25": [11, 59, 93, 166, 256, 257], "thr50": [256, 257], "thread": [38, 164], "three": [6, 15, 20, 25, 34, 43, 52, 66, 67, 68, 77, 91, 96, 111, 118, 149, 157, 163, 178, 179, 185, 188, 190, 199, 207, 232, 268, 366, 368, 410, 412, 415, 429, 434, 437, 441, 442, 443, 444, 447, 449, 450, 451, 475, 487], "threshold": [2, 9, 10, 13, 14, 15, 18, 24, 29, 32, 35, 38, 39, 41, 42, 43, 45, 51, 52, 53, 57, 58, 59, 64, 67, 68, 70, 71, 73, 77, 78, 79, 81, 82, 83, 85, 89, 90, 91, 92, 95, 96, 99, 103, 104, 106, 107, 108, 109, 110, 112, 113, 114, 116, 118, 121, 129, 130, 131, 134, 135, 136, 149, 151, 155, 158, 160, 163, 166, 169, 178, 181, 182, 185, 191, 273, 277, 288, 295, 296, 299, 302, 312, 327, 331, 332, 345, 346, 348, 349, 350, 363, 370, 373, 374, 392, 393, 394, 395, 396, 397, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 437, 443, 444, 446, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 461, 464, 465, 470, 474, 475, 491, 507, 509, 510], "threshold1": 83, "threshold2": 83, "threshold3": 83, "threshold_img": [43, 83, 90, 98, 114, 128, 134, 136, 158, 161, 163, 349, 350], "threshold_percentile_img": 90, "threshold_stats_img": [6, 26, 77, 79, 83, 134, 135, 161, 163, 184, 370], "threshold_value_img": 90, "thresholded_img": 98, "thresholded_map": 349, "thresholded_map1": 83, "thresholded_map2": 83, "thresholded_map3": 83, "thresholded_score_map_img": 43, "thresholding_strategi": [53, 89, 169, 465], "threw": [158, 163], "through": [15, 33, 42, 45, 51, 54, 59, 73, 77, 93, 103, 127, 128, 155, 156, 158, 163, 165, 171, 172, 173, 176, 179, 185, 187, 198, 202, 228, 282, 286, 307, 308, 348, 373, 374, 377, 380, 383, 387, 395, 400, 402, 403, 405, 406, 407, 408, 409, 416, 418, 420, 422, 424, 426, 462, 468, 473, 487, 491], "throughout": 510, "throw": [129, 131, 132, 163, 386], "thrown": [11, 34, 161, 163, 383], "thu": [16, 33, 36, 42, 106, 108, 111, 166, 171, 172, 173, 176, 177, 178, 183, 185, 191, 192, 307, 308, 309, 310, 311, 320, 355, 374, 399], "thual": [0, 127, 128, 156, 158, 160, 163], "thumb": [171, 179], "tianzi": [118, 165, 240], "tibshirani": [118, 165], "tick": [13, 127, 130, 163, 179, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 441, 443, 444, 446, 450, 451, 452, 454, 455, 457, 459, 461], "tick_posit": [32, 34], "ticker": [51, 52], "ticklabel": [151, 163], "tight": [36, 178], "tighter": [144, 163, 178], "tile": [16, 149, 163, 415, 429, 434, 441, 444, 449, 450, 451, 475, 507], "tiledslic": [410, 412, 429], "till": [161, 163], "time": [0, 2, 3, 4, 5, 6, 7, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 56, 59, 60, 63, 65, 66, 67, 69, 70, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 116, 118, 120, 121, 127, 128, 129, 132, 134, 138, 147, 148, 154, 155, 156, 158, 160, 163, 164, 165, 167, 168, 169, 170, 171, 174, 176, 179, 181, 182, 185, 186, 188, 189, 190, 191, 202, 221, 233, 234, 235, 240, 242, 244, 249, 252, 268, 271, 278, 288, 289, 290, 291, 293, 294, 301, 305, 306, 307, 308, 310, 311, 312, 313, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 348, 351, 352, 361, 363, 364, 366, 367, 368, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 393, 399, 427, 436, 449, 451, 456, 458, 459, 463, 464, 465, 467, 468, 469, 474, 476, 477, 478, 487, 492, 495, 497, 507, 510], "time_length": [69, 336, 337, 338, 342, 343, 344], "time_seri": [50, 54, 55, 57, 59, 61, 165, 166], "time_series_1": 165, "time_series_2": 165, "time_stamp": 69, "timecours": [180, 373], "timeout": [46, 90, 107, 112, 134, 163, 282, 283, 284, 285], "timepoint": [27, 191, 335, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 465], "timeseri": [24, 28, 51, 53, 61, 91, 108, 142, 155, 163, 165, 169, 198, 200, 208, 240, 255, 279, 305, 306, 307, 308, 310, 311, 312, 313, 332, 351, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 436, 463, 465, 477, 478], "timeseries_each_subject": [53, 169], "timon": 0, "timothi": [61, 118, 198, 230, 231, 260, 266, 373], "ting": [0, 127, 128, 129, 130, 132, 155, 156, 158, 160, 163], "tini": 320, "tinput": 105, "tip": [26, 47, 118, 187], "tissu": [22, 185, 263], "titl": [0, 3, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 28, 31, 32, 33, 34, 37, 38, 39, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 64, 65, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 103, 104, 106, 107, 109, 110, 111, 112, 113, 114, 120, 129, 151, 152, 157, 160, 163, 169, 171, 179, 188, 192, 332, 345, 346, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 435, 436, 437, 441, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 473, 475, 507], "title_font_s": [452, 454, 455], "title_fonts": [457, 459, 460, 461], "tl": 164, "tmap": [18, 81, 130, 163, 204, 275, 277, 507], "tmap_filenam": [2, 90], "tmap_img": 95, "tmi": [47, 118, 177], "tmp": 24, "to_csv": [6, 74], "to_filenam": [3, 4, 6, 7, 31, 51, 52, 58, 73, 88, 96, 111, 191, 481, 482], "to_gifti": [479, 480, 484], "to_latex": 65, "to_list": 102, "to_markdown": 65, "to_numpi": [3, 28, 33, 35, 41, 42, 45, 71, 79, 101, 109], "tobe": [118, 227], "todd": [118, 176, 217, 219], "toffset": [59, 105], "toga": [118, 236, 263], "togeth": [7, 35, 41, 51, 61, 69, 70, 71, 82, 98, 134, 163, 165, 173, 174, 181, 185, 202, 265, 267, 304, 307, 308, 312, 335, 351, 465, 492], "toggl": 355, "toi": [25, 108], "token": 164, "tol": [55, 56, 61, 94, 108, 241, 242, 244, 310, 311], "tol_cv": 242, "toler": [51, 56, 94, 178, 188, 241, 242, 244, 310, 311, 355], "tolil": 39, "tolist": [81, 103], "toll": 165, "tom": [0, 118, 156, 163, 201, 251], "tomassini": [118, 198], "toml": [128, 163, 179, 188, 508], "tommaso": [118, 202], "tommi": [118, 178, 241, 244], "too": [25, 36, 40, 41, 43, 45, 46, 55, 57, 59, 72, 88, 121, 164, 172, 178, 282, 284, 305, 306, 308, 310, 311, 383, 386, 507], "took": [35, 65, 105, 234], "tool": [4, 9, 21, 24, 29, 34, 38, 43, 44, 51, 81, 89, 103, 108, 116, 120, 141, 160, 163, 167, 172, 179, 180, 183, 184, 186, 187, 189, 190, 192, 193, 195, 199, 217, 250, 271, 302, 363, 410, 412, 415, 417, 419, 421, 423, 425, 427, 434, 441, 443, 450, 451, 456, 458, 496, 507, 508, 509], "toolbox": [182, 186, 508, 510], "toolkit": [0, 202], "tootel": [118, 211, 212, 213, 214, 215, 290], "top": [6, 13, 16, 18, 27, 41, 47, 59, 107, 109, 154, 163, 179, 187, 191, 304, 437, 443, 444, 447, 449, 450, 451, 458, 459, 461, 507], "topic": [179, 188], "topologi": 178, "toprul": 65, "tor": [118, 121, 226, 282, 284, 351, 477], "torabi": [0, 128, 129, 130, 132, 163], "toro": [118, 233, 261], "toronto": 0, "total": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 167, 169, 171, 177, 198, 199, 217, 259, 268, 305, 306, 308, 310, 311, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 396, 449, 465, 466, 492, 509, 510], "total_scor": 107, "touch": 355, "tour": 507, "toward": [96, 158, 163, 208, 240, 361, 377, 378, 379, 383, 384, 385, 386, 465, 510], "tox": [3, 4, 15, 17, 19, 21, 31, 36, 43, 46, 51, 53, 61, 70, 94, 114, 130, 163, 164], "tpami": [52, 118, 464, 470], "tpl": 219, "tpr": 185, "tr": [27, 35, 69, 105, 128, 132, 147, 159, 161, 163, 181, 185, 191, 227, 336, 337, 338, 342, 343, 344, 362], "trace": [106, 413], "traceback": 481, "traci": [118, 228], "track": [103, 107, 111, 178, 179, 188, 315], "tracker": 188, "trade": 205, "tradition": 185, "trail": 179, "train": [3, 33, 36, 42, 43, 44, 45, 46, 47, 54, 101, 102, 154, 163, 171, 172, 173, 176, 178, 185, 187, 192, 241, 305, 306, 307, 308, 310, 311, 462, 464, 470], "train_siz": [45, 46], "train_test_split": [45, 46], "trait": 172, "trajectori": 178, "tran": [52, 118, 250, 464, 470], "trans_i": 59, "trans_x": 59, "trans_z": 59, "transact": [47, 118, 177, 199, 208], "transax": 13, "transfer": 187, "transform": [3, 13, 24, 25, 41, 43, 44, 52, 53, 54, 57, 68, 72, 86, 91, 93, 94, 96, 101, 103, 107, 114, 118, 120, 132, 134, 144, 145, 149, 151, 153, 154, 155, 156, 158, 160, 161, 163, 168, 169, 174, 181, 185, 189, 190, 202, 217, 236, 240, 263, 280, 305, 306, 307, 308, 309, 312, 313, 329, 332, 346, 349, 353, 364, 366, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 400, 462, 463, 464, 465, 477, 487, 489, 492, 510], "transform_img": [129, 132, 163, 377, 378, 379, 380, 381, 382], "transform_single_img": [131, 163, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 465], "transform_to_2d": [400, 402, 403], "transient": 192, "transit": 164, "translat": [66, 151, 163, 191, 335, 349, 373, 475], "transpar": [9, 16, 24, 29, 72, 116, 129, 134, 151, 163, 192, 277, 288, 296, 299, 302, 332, 349, 363, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 437, 443, 444, 446, 447, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 509], "transparency_data": 26, "transparency_imag": 26, "transparency_rang": [26, 72, 134, 163, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 443, 444, 451], "transpos": [154, 163, 178], "traor": [0, 133, 163], "treat": 121, "treatment": [185, 187], "tree": [168, 231, 260], "trei": [118, 202], "trend": [45, 46, 91, 132, 163, 164, 192], "trended_data": 91, "trendscent": [201, 251], "tresult": 105, "tri": [25, 54, 66, 164, 172, 282, 434, 440, 448, 462], "triag": [158, 163], "trial": [41, 66, 68, 74, 118, 129, 163, 171, 180, 185, 280], "trial_condit": 103, "trial_nam": 103, "trial_numb": 103, "trial_typ": [6, 35, 66, 67, 68, 72, 74, 103, 104, 221, 339, 442], "trial_type_idx": 74, "trial_type_list": 103, "trial_type_seri": 103, "trials_ses1": [235, 289], "trialwise_condit": 103, "triangl": [25, 185, 413, 484, 487], "triangul": [25, 492], "triangular": [185, 240, 246, 247, 440, 448], "triangulari": 93, "tribhuvan": 0, "trick": [19, 187], "tricki": 178, "trigger": [164, 188], "trilinear": 487, "trim": [378, 384, 465, 469], "triplet": [333, 334, 386, 460], "triplett": [118, 269, 287], "trivial": 83, "tronto": 0, "troubleshoot": 179, "true": [2, 3, 4, 6, 7, 10, 11, 14, 15, 16, 17, 22, 23, 24, 26, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64, 65, 66, 70, 71, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 84, 88, 89, 91, 93, 94, 96, 101, 102, 103, 104, 106, 107, 109, 111, 113, 114, 116, 120, 121, 129, 132, 143, 146, 151, 158, 161, 163, 166, 169, 171, 174, 176, 178, 181, 184, 185, 192, 240, 241, 242, 244, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 265, 267, 268, 271, 272, 273, 277, 279, 280, 281, 282, 284, 286, 291, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 332, 335, 346, 348, 349, 350, 351, 352, 355, 357, 361, 363, 364, 365, 366, 367, 370, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 468, 469, 471, 474, 475, 476, 477, 478, 492, 507, 509], "truli": [181, 219], "truncat": [151, 163], "trust": [3, 38, 52, 55, 56, 61, 65, 77, 79, 181], "truth": [44, 47, 60, 171], "try": [3, 4, 5, 22, 38, 42, 43, 52, 55, 56, 59, 61, 65, 67, 68, 70, 77, 79, 91, 101, 102, 107, 111, 121, 133, 135, 160, 163, 165, 166, 171, 172, 177, 178, 179, 181, 188, 192, 207, 345, 508], "ts2": 198, "ts3": 198, "tsuang": [118, 217], "tsv": [6, 50, 55, 56, 58, 59, 61, 63, 65, 75, 77, 104, 113, 116, 129, 163, 179, 180, 207, 234, 235, 250, 252, 254, 256, 257, 259, 260, 262, 263, 264, 268, 288, 289, 332, 335, 339, 345, 346, 348, 373, 374, 377, 380, 383, 387, 439, 442, 456, 509], "tsvfile": 74, "ttest_ind": [96, 191], "tube": 120, "tunabl": 374, "tune": [22, 36, 41, 42, 46, 91, 118, 142, 163, 166, 171, 172, 174, 178, 181, 312, 313, 373, 379, 385, 463, 507], "tupl": [16, 192, 251, 258, 271, 291, 305, 306, 307, 308, 310, 311, 312, 313, 322, 324, 325, 332, 335, 346, 352, 355, 363, 366, 368, 371, 373, 379, 380, 381, 382, 385, 387, 388, 389, 391, 393, 394, 396, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 435, 436, 437, 441, 442, 443, 444, 447, 448, 449, 450, 451, 458, 463, 468, 475, 481, 486, 488, 489, 490], "turn": [13, 50, 68, 86, 161, 163, 166, 168, 178, 192, 391, 392, 393, 394, 395, 396, 449, 450, 451, 458, 475], "turner": [103, 118, 171, 201, 233, 251, 261], "tutori": [6, 7, 8, 31, 68, 101, 138, 148, 163, 171, 179, 183, 186, 187, 192, 218, 271, 305, 358, 363, 441, 450, 456, 458, 509], "tv": [46, 118, 177, 305, 306, 310, 311], "tv_l1": 42, "tvl1": 177, "tweak": [26, 61, 91, 169], "twelv": [118, 207, 268], "twine": 188, "two": [6, 7, 15, 25, 27, 36, 43, 51, 58, 59, 61, 63, 68, 75, 76, 79, 84, 88, 90, 91, 96, 101, 103, 104, 106, 111, 113, 116, 121, 127, 132, 143, 146, 151, 154, 155, 163, 165, 168, 170, 171, 173, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 190, 191, 192, 198, 202, 235, 242, 246, 252, 270, 277, 289, 305, 306, 307, 308, 312, 313, 322, 324, 325, 329, 332, 346, 347, 348, 352, 358, 363, 366, 373, 374, 378, 381, 384, 386, 388, 399, 435, 439, 442, 443, 445, 446, 451, 452, 453, 454, 455, 456, 461, 463, 465, 466, 467, 473, 474, 475, 486, 487, 491, 507, 509], "two_sid": [6, 26, 83, 114, 130, 133, 134, 135, 155, 158, 161, 163, 332, 345, 346, 349, 350, 370, 465, 474, 475], "two_sided_test": [79, 81, 106, 176, 348, 399], "twpyb1pflj6vrlxgh3rohyqanxbdpelw": 232, "tx": 66, "txt": [96, 286], "ty": 66, "tyler": [118, 176], "type": [3, 6, 16, 19, 22, 31, 36, 41, 45, 66, 67, 68, 70, 74, 90, 96, 103, 106, 121, 127, 129, 130, 132, 133, 135, 137, 140, 142, 145, 148, 151, 157, 158, 159, 160, 163, 173, 176, 179, 180, 181, 185, 188, 190, 198, 222, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 279, 309, 315, 320, 328, 332, 345, 346, 348, 351, 355, 356, 358, 360, 361, 363, 364, 368, 369, 370, 371, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 395, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 435, 445, 449, 450, 452, 453, 454, 455, 462, 463, 465, 466, 467, 474, 475, 476, 477, 488, 489], "type_filt": [488, 489], "typeerror": [158, 163, 361, 370], "typic": [6, 7, 74, 80, 81, 103, 113, 168, 170, 172, 176, 179, 181, 183, 185, 190, 191, 192, 197, 292, 307, 308, 322, 345, 372, 386, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 449, 450, 451, 458, 463, 507], "typo": [131, 153, 163], "typograph": [160, 163], "tyszka": [118, 229, 259], "tz": 66, "tziona": [118, 227], "tzourio": [118, 199, 250], "u": [3, 4, 13, 16, 17, 25, 26, 39, 41, 43, 58, 61, 66, 68, 79, 81, 91, 96, 118, 164, 171, 172, 174, 179, 209, 232, 265, 267, 311, 324, 325, 508], "u4": 3, "u5mzi": 203, "u96": 46, "ub": 65, "ubuntu": 178, "uc": 0, "ucc": 229, "uchida": [43, 44, 118, 224, 281], "ucl": [0, 6, 72, 234, 235, 288], "ucla": [269, 287], "ucsd": 232, "uddin": 118, "ugli": 172, "ugurbil": [118, 198], "ui": 164, "uint8": [47, 59, 93, 160, 163, 364], "uk": [0, 2, 6, 22, 72, 217, 220, 233, 234, 235, 261, 288], "ultim": [179, 323, 434, 441, 443, 444, 449, 450, 451], "umask": 51, "unabl": [3, 38, 52, 55, 56, 61, 65, 71, 77, 79, 151, 163], "unavail": [179, 271], "unbalanc": 52, "unbias": [118, 171, 202, 219], "unc": [65, 81, 82, 104], "uncach": 190, "uncertainti": [69, 78, 81, 178, 180, 181, 185], "unchang": [18, 68, 176, 240, 241, 242, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465], "unclear": 101, "uncom": [10, 17, 23, 39, 55, 57, 61], "uncompress": [65, 143, 147, 163], "unconstrain": [118, 233], "uncontrol": 68, "uncorrect": [6, 65, 78, 81, 82, 83, 104], "under": [41, 106, 134, 135, 160, 161, 163, 171, 172, 176, 177, 178, 179, 180, 181, 185, 188, 198, 202, 226, 228, 234, 305, 306, 307, 308, 309, 312, 313, 355, 366, 367, 379, 385, 392, 395, 399, 463], "underflow": 320, "underlai": [26, 194, 238, 501], "underli": [0, 26, 91, 132, 163, 181, 185, 187, 192, 413, 452, 454, 455, 461], "underneath": [452, 454, 455, 461], "underscor": [130, 163, 179], "undershoot": 68, "understand": [3, 30, 48, 63, 75, 85, 99, 116, 132, 142, 163, 172, 174, 179, 187, 189, 225, 268, 271, 273, 275, 276, 278, 281, 305, 332, 357, 358, 363, 367, 373, 376, 385, 393, 438, 439, 441, 450, 451, 456, 473, 509, 510], "understood": [68, 282], "undirect": [404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 437], "unexpectedli": 73, "unfilt": [160, 163], "unfortun": [174, 178], "uniform": [13, 91, 134, 163], "uniform_averag": 311, "uniformli": [140, 163, 172, 446, 452, 454, 455, 459, 461], "unintention": 188, "uninterrupt": 181, "union": [86, 394, 396, 397], "uniqu": [31, 32, 33, 34, 35, 37, 41, 52, 54, 61, 67, 88, 96, 103, 106, 132, 143, 163, 164, 165, 173, 190, 199, 250, 256, 257, 339, 377, 380, 383, 387, 465, 466, 467], "unique_condit": 37, "unique_run": 35, "unit": [0, 6, 7, 16, 41, 58, 60, 118, 169, 171, 177, 178, 179, 192, 240, 305, 306, 307, 308, 309, 310, 311, 312, 313, 324, 325, 332, 348, 351, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 436, 463, 465, 477], "uniti": [148, 163], "univ": [118, 324, 325], "univari": [31, 35, 36, 41, 64, 70, 73, 100, 104, 113, 115, 116, 118, 173, 175, 177, 271, 276, 277, 305, 306, 307, 308, 310, 311, 356, 358, 363, 376, 385, 399, 427, 443, 451, 456, 491, 495, 509], "univers": [0, 185, 228], "universitair": 0, "universiteit": 0, "universit\u00e4t": 0, "universit\u00e9": [0, 179], "unix": [190, 304], "unknown": [10, 23, 24, 59, 93, 105, 114, 132, 163, 171, 199, 201, 202, 206, 210, 211, 212, 213, 214, 215, 218, 219, 222, 223, 224, 227, 230, 232, 233, 235, 236, 250, 251, 264, 377, 380, 383, 387, 492], "unlabel": 185, "unless": [121, 178, 179, 287, 348, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 443, 444, 446, 451, 477], "unlik": [15, 21, 176, 181, 190, 374], "unlink": 111, "unmask": [34, 47, 119, 128, 143, 146, 163, 189, 191, 312, 313, 376, 379, 385, 510], "unmodifi": 164, "unmodul": [66, 74], "unnecessari": [3, 129, 132, 163, 325], "unoptim": 111, "unpair": [76, 84, 116, 132, 163, 184, 277, 346, 439, 443, 456, 509], "unpaired_design_matrix": 82, "unpen": 178, "unrealist": 178, "unrel": [179, 192], "unrestrict": [197, 200, 204, 207, 208, 225], "unscrub": 202, "unsign": [348, 399], "unstructur": 42, "unsuit": [151, 163], "unsupervis": [108, 185, 312, 313, 462, 464], "unsupport": [135, 163], "unsurprisingli": 82, "unthreshold": [24, 83, 118, 121, 185, 201, 226, 251, 282, 284], "until": [179, 282], "unus": [131, 132, 163, 240, 241, 242, 312, 313, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465], "unusu": 171, "unwant": [68, 118, 202], "unwarp": 185, "unzip": 188, "up": [0, 3, 6, 10, 23, 24, 35, 38, 50, 86, 88, 91, 96, 101, 107, 114, 118, 127, 129, 130, 132, 134, 135, 148, 149, 151, 156, 158, 161, 163, 164, 168, 174, 175, 177, 178, 180, 181, 182, 185, 188, 192, 202, 234, 250, 252, 254, 256, 257, 259, 260, 262, 263, 264, 287, 319, 347, 377, 380, 383, 387, 399, 436, 450, 454, 462, 487, 510], "updat": [43, 95, 103, 105, 127, 128, 129, 130, 131, 132, 133, 134, 138, 142, 143, 148, 151, 157, 158, 160, 161, 163, 164, 188, 240, 241, 242, 260, 282, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465], "update_20190916_readm": 260, "update_yeo2011_schaefer2018_labelnam": [231, 260], "upgrad": [37, 38, 43, 44, 45, 50, 54, 55, 56, 57, 58, 59, 61, 64, 71, 91, 93, 94, 96, 101, 102, 103, 106, 107, 108, 109, 110, 120, 127, 132, 143, 145, 151, 156, 158, 161, 163], "upload": [121, 164], "upon": [0, 105, 198, 200, 283, 434, 449, 450, 451, 458, 465, 467, 475], "upper": [15, 43, 178, 322, 324, 325, 393, 396, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 436, 441, 443, 444, 446, 447, 449, 450, 451, 452, 454, 455, 459, 461], "upper_cutoff": [91, 132, 163, 393, 396], "upstream": [161, 163, 179, 188], "urgent": 188, "url": [0, 47, 51, 65, 118, 132, 152, 160, 163, 164, 165, 169, 170, 172, 177, 208, 210, 219, 241, 248, 249, 250, 251, 252, 253, 254, 255, 258, 260, 261, 262, 264, 269, 271, 272, 280, 281, 286, 287, 291, 301, 304, 312, 319, 323, 465], "urls_path": 269, "ursina": [118, 201, 251], "us": [0, 1, 2, 4, 6, 7, 11, 13, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 52, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 91, 92, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 167, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 191, 192, 194, 198, 199, 202, 203, 204, 205, 206, 207, 209, 217, 218, 219, 224, 225, 226, 228, 229, 234, 238, 239, 241, 243, 244, 245, 246, 247, 248, 250, 253, 259, 260, 263, 267, 285, 290, 291, 297, 300, 303, 310, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 330, 331, 333, 336, 337, 338, 340, 341, 342, 343, 344, 350, 354, 355, 360, 365, 369, 371, 372, 380, 381, 382, 388, 391, 392, 394, 395, 396, 397, 400, 401, 402, 403, 428, 429, 430, 460, 462, 464, 468, 469, 470, 471, 472, 475, 476, 477, 478, 485, 486, 488, 489, 490, 491, 492, 493, 501, 503, 508, 509, 510], "usa": 0, "usabl": [146, 163, 176, 178, 200, 281, 309], "usag": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 142, 151, 155, 160, 163, 165, 179, 180, 184, 187, 188, 189, 197, 200, 204, 207, 208, 225, 290, 293, 294, 301, 374, 459, 495, 510], "usecas": [101, 168, 172, 174, 179], "useless": 68, "user": [13, 19, 31, 36, 42, 61, 68, 69, 103, 110, 111, 121, 127, 128, 129, 130, 131, 132, 133, 134, 135, 145, 148, 149, 151, 152, 156, 158, 159, 160, 163, 178, 179, 180, 181, 183, 185, 186, 188, 189, 192, 194, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 495, 497, 498, 506, 508], "userguid": 172, "userwarn": [3, 10, 16, 17, 19, 21, 23, 24, 26, 31, 34, 35, 38, 43, 44, 46, 50, 51, 53, 60, 64, 65, 66, 70, 72, 73, 74, 77, 79, 80, 81, 93, 103, 104, 113, 114], "usr": [256, 257], "usual": [35, 51, 79, 81, 96, 158, 163, 164, 170, 172, 173, 174, 179, 181, 185, 187, 188, 191, 199, 250, 307, 308, 319, 393, 447, 463], "utc": [179, 508], "util": [28, 46, 47, 53, 89, 90, 130, 132, 136, 143, 147, 154, 158, 163, 169, 179, 240, 241, 242, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 371, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465, 495, 500], "u\u011furbil": [118, 198], "v": [3, 25, 26, 30, 34, 35, 37, 40, 41, 48, 54, 67, 68, 78, 81, 82, 91, 100, 101, 115, 116, 118, 121, 128, 130, 163, 171, 172, 176, 178, 179, 186, 188, 199, 200, 210, 217, 218, 219, 226, 232, 236, 263, 267, 271, 275, 277, 282, 284, 285, 302, 305, 307, 309, 311, 356, 358, 361, 363, 364, 373, 376, 385, 399, 427, 444, 448, 451, 456, 458, 478, 509], "v0": [148, 151, 156, 158, 163, 231, 260], "v1": [127, 130, 148, 156, 158, 163], "v2": [151, 156, 163, 164], "v3": [127, 163], "v4": [65, 130, 163], "v_i": [401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 443, 444, 451], "va": 13, "val_scor": 36, "valentina": [118, 198], "valid": [6, 30, 34, 35, 38, 39, 43, 45, 47, 48, 54, 102, 112, 116, 118, 128, 129, 134, 138, 141, 154, 158, 159, 163, 164, 165, 167, 172, 175, 179, 192, 202, 232, 242, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 271, 279, 305, 306, 307, 308, 309, 310, 311, 332, 333, 334, 339, 351, 355, 358, 363, 368, 369, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 461, 462, 465, 468, 474, 485, 486, 487, 509, 510], "valid_method": 463, "validationerror": 179, "valu": [4, 6, 10, 11, 13, 15, 16, 17, 18, 24, 25, 26, 32, 35, 41, 43, 45, 47, 50, 55, 57, 58, 61, 64, 68, 70, 71, 72, 73, 74, 77, 79, 81, 90, 91, 92, 93, 94, 96, 98, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 121, 125, 127, 128, 130, 131, 132, 133, 134, 135, 136, 140, 143, 144, 148, 151, 155, 156, 158, 161, 163, 165, 168, 169, 172, 173, 175, 176, 177, 179, 181, 184, 185, 187, 190, 192, 199, 228, 231, 236, 240, 241, 242, 244, 246, 248, 250, 252, 254, 256, 257, 259, 260, 263, 264, 273, 277, 282, 290, 293, 294, 295, 296, 299, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 320, 322, 323, 324, 325, 328, 332, 333, 335, 341, 345, 346, 348, 349, 350, 351, 352, 355, 357, 362, 366, 367, 368, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 433, 434, 435, 436, 437, 441, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 458, 459, 461, 462, 463, 464, 465, 467, 473, 474, 475, 476, 477, 478, 479, 487, 488, 489, 491, 492, 507], "valuabl": [68, 179], "value_count": [72, 104], "valueerror": [127, 130, 163, 361, 365, 370, 377, 378, 383, 384, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 433, 434, 443, 444, 449, 450, 451, 454, 465, 481, 487], "vamsi": [118, 217], "van": [118, 121, 198, 206, 226, 254, 282, 284, 373, 374], "vanass": [0, 156, 163], "vanessa": [118, 121, 226, 282, 284], "var": 373, "vari": [15, 36, 68, 73, 96, 97, 105, 157, 163, 168, 174, 178, 187, 231, 241, 242, 244, 352], "variabl": [4, 6, 15, 42, 45, 46, 47, 59, 77, 79, 96, 103, 104, 111, 118, 129, 140, 158, 160, 163, 164, 166, 171, 172, 173, 175, 176, 178, 179, 181, 185, 190, 192, 200, 220, 249, 292, 305, 306, 307, 308, 309, 310, 311, 319, 323, 332, 346, 362, 373], "varianc": [6, 35, 41, 43, 45, 51, 58, 59, 60, 61, 68, 71, 82, 151, 154, 155, 163, 171, 176, 178, 185, 192, 240, 244, 305, 306, 307, 308, 310, 311, 312, 313, 320, 322, 324, 325, 328, 329, 332, 341, 345, 346, 351, 357, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 436, 463, 465, 468, 477, 478], "variance_": 312, "variance_img": [73, 329], "variance_statmap": [65, 77, 345], "variance_threshold": 45, "variancethreshold": 45, "variant": [172, 196, 198, 225], "variat": [47, 56, 79, 104, 109, 110, 118, 128, 163, 176, 177, 185, 228, 331, 348, 399], "varieti": [66, 103, 170, 171, 172, 173, 174, 179, 185], "variou": [3, 16, 21, 32, 33, 42, 51, 109, 110, 151, 154, 158, 163, 171, 173, 174, 179, 181, 185, 191, 307, 308, 374, 463, 487], "varoquaux": [0, 47, 51, 52, 54, 59, 102, 118, 121, 122, 123, 125, 126, 136, 138, 141, 145, 148, 149, 150, 151, 153, 163, 165, 166, 168, 169, 170, 171, 173, 177, 187, 208, 225, 226, 240, 241, 255, 258, 282, 284, 307, 308, 312, 313, 464, 465, 470], "vasco": [0, 160, 163], "vastli": 103, "vaudois": 0, "vbm": [171, 185, 187], "vc": 188, "vcov": [322, 324, 325], "vec": 247, "vec_to_sym_matrix": [144, 163], "vector": [31, 34, 35, 36, 37, 41, 43, 47, 54, 73, 86, 101, 102, 120, 144, 163, 171, 172, 174, 185, 240, 305, 306, 307, 308, 319, 322, 323, 324, 325, 328, 330, 447, 487], "vectorize_word": [121, 282, 284], "vega10": 13, "vega20": 13, "vega20b": 13, "vega20c": 13, "vellor": 0, "ventral": [3, 17, 23, 33, 34, 35, 39, 40, 41, 96, 101, 118, 120, 171, 186, 192, 218, 271, 452, 454, 455, 492], "ventralattent": 267, "ventricl": 202, "venv": [179, 508], "verbos": [3, 26, 33, 35, 37, 38, 39, 42, 45, 47, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 64, 65, 77, 79, 91, 93, 94, 101, 102, 103, 106, 109, 148, 163, 169, 192, 241, 242, 244, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 327, 332, 335, 341, 346, 348, 352, 363, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 399, 462, 463, 464, 465, 470, 492], "veri": [4, 13, 32, 33, 34, 37, 38, 42, 43, 45, 47, 52, 57, 68, 77, 78, 79, 81, 88, 96, 107, 120, 151, 163, 165, 166, 168, 171, 172, 173, 174, 177, 178, 179, 181, 185, 188, 192, 305, 306, 307, 308, 310, 311, 378, 384, 386, 430, 449, 454, 476], "verifi": [68, 104, 179, 192], "vern": [118, 206, 217, 254], "verric": 351, "versatil": [174, 186, 508], "version": [10, 20, 21, 23, 35, 37, 38, 43, 44, 45, 50, 51, 54, 55, 56, 57, 58, 59, 61, 64, 70, 71, 72, 73, 91, 93, 94, 96, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 120, 125, 127, 130, 131, 132, 134, 136, 138, 141, 142, 143, 144, 145, 146, 148, 150, 151, 154, 156, 157, 158, 159, 160, 161, 163, 177, 178, 179, 188, 190, 197, 199, 202, 207, 218, 228, 231, 237, 240, 241, 242, 248, 250, 252, 256, 257, 260, 264, 268, 269, 271, 273, 282, 284, 285, 287, 290, 295, 296, 297, 298, 299, 300, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 350, 351, 355, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 399, 436, 462, 463, 464, 465, 468, 473, 477, 491, 492, 507, 511], "versionad": [161, 163, 188], "versionchang": [161, 163, 188], "versu": [6, 68, 70, 81, 82, 96, 101, 161, 163, 171, 172, 185, 218], "vertex": [7, 10, 25, 134, 163, 185, 262, 380, 381, 382, 387, 388, 389, 390, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 443, 444, 451, 452, 453, 454, 455, 479, 484, 487], "vertic": [7, 10, 23, 24, 39, 44, 68, 70, 74, 82, 113, 129, 143, 163, 165, 185, 277, 305, 306, 307, 308, 310, 311, 312, 313, 332, 346, 349, 352, 357, 370, 380, 381, 382, 387, 389, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 452, 453, 454, 455, 461, 463, 474, 475, 479, 480, 482, 484, 492], "vertical_checkerboard": [67, 68, 70, 222, 491], "vetor": 240, "vfonov": 219, "vhtf6": 277, "vi": 54, "via": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 120, 123, 132, 133, 134, 135, 161, 163, 166, 167, 171, 174, 177, 179, 180, 183, 190, 205, 232, 253, 310, 311, 312, 313, 332, 341, 391, 392, 393, 394, 395, 396, 434, 441, 443, 444, 449, 450, 451, 492], "victoria": [0, 132, 163], "vidaurr": [118, 198], "video": [67, 179, 185], "vienna": 0, "viergev": [118, 165, 240], "view": [0, 6, 14, 15, 17, 26, 35, 39, 45, 55, 57, 61, 64, 65, 68, 70, 73, 86, 98, 104, 106, 113, 114, 128, 129, 131, 132, 134, 145, 154, 156, 160, 161, 163, 171, 176, 178, 187, 188, 192, 235, 305, 306, 307, 308, 312, 313, 366, 379, 385, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 437, 441, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 463, 507, 510], "view_connectom": [23, 55, 57, 61, 148, 149, 151, 156, 163, 458, 460, 507], "view_img": [3, 31, 131, 132, 134, 148, 149, 157, 160, 163, 171, 507], "view_img_on_surf": [10, 148, 149, 151, 156, 161, 163, 457, 458, 460, 461], "view_init": 25, "view_mark": [148, 149, 151, 156, 163, 457, 458, 507], "view_radio": 17, "view_stat_map": [148, 163], "view_surf": [7, 10, 23, 132, 148, 151, 161, 163, 457, 458, 459, 460], "view_typ": [11, 53, 89, 90, 154, 163, 169, 449, 450], "viewabl": [151, 163], "viewer": [31, 148, 163, 171, 191, 458, 507], "viginia": 0, "vijayan": [0, 129, 163], "vinc": [26, 118, 201, 251], "vincent": [0, 47, 52, 118, 122, 163, 177, 187, 201, 204, 225, 227, 251, 258, 277, 374], "vine": [118, 324, 325], "virgil": [0, 122, 163], "virginia": 0, "viridi": [156, 163], "virtual": [179, 188, 508], "visibl": [26, 54, 81, 157, 163, 170, 366, 446, 452, 454, 455, 459, 461, 507], "vision": 234, "visual": [1, 6, 8, 15, 16, 26, 29, 30, 34, 35, 41, 48, 50, 51, 53, 59, 68, 70, 72, 73, 74, 81, 82, 85, 88, 89, 90, 91, 94, 96, 99, 104, 108, 109, 110, 113, 118, 119, 128, 129, 143, 145, 148, 154, 156, 163, 165, 166, 167, 175, 179, 180, 184, 187, 188, 189, 191, 200, 204, 218, 221, 224, 237, 249, 251, 252, 258, 261, 267, 271, 272, 276, 277, 279, 281, 302, 352, 353, 356, 358, 359, 361, 363, 364, 366, 370, 376, 379, 385, 390, 393, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 436, 439, 441, 442, 448, 449, 450, 451, 454, 455, 456, 492, 509, 510], "visual_comput": [67, 68, 70, 222, 491], "visual_left_hand_button_press": [67, 68, 70, 222, 491], "visual_right_hand_button_press": [67, 68, 70, 222, 491], "vittorio": [118, 202], "vivo": [118, 229, 259], "vladimir": [118, 202, 219], "vmax": [15, 26, 43, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 73, 78, 81, 82, 86, 89, 92, 95, 103, 104, 106, 109, 112, 114, 125, 127, 134, 135, 151, 163, 169, 434, 436, 441, 443, 444, 446, 449, 450, 451, 452, 454, 455, 457, 458, 459, 461, 507], "vmhc": 248, "vmin": [15, 26, 33, 38, 43, 47, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 71, 72, 79, 81, 82, 86, 104, 106, 109, 110, 112, 114, 125, 129, 130, 134, 135, 149, 151, 163, 169, 434, 436, 441, 443, 444, 446, 449, 450, 451, 452, 454, 455, 458, 459, 461], "vocabulari": [107, 121, 185, 187, 226, 282, 284], "vogel": [0, 61, 118, 151, 163, 209, 230, 265, 266], "voic": 68, "vol": 309, "vol_img": 483, "vol_to_surf": [10, 134, 145, 154, 156, 161, 163, 180, 446, 452, 453, 454, 455, 459, 483, 507], "vol_to_surf_kwarg": [10, 156, 163, 459, 483], "volum": [9, 17, 29, 33, 35, 38, 41, 42, 46, 51, 57, 59, 64, 70, 81, 89, 93, 103, 111, 114, 118, 120, 127, 129, 130, 132, 134, 145, 148, 156, 163, 170, 171, 176, 177, 185, 186, 187, 190, 194, 199, 202, 217, 224, 238, 250, 252, 255, 271, 281, 305, 306, 307, 308, 310, 311, 312, 313, 314, 332, 355, 362, 363, 366, 367, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 393, 400, 402, 403, 436, 441, 446, 450, 455, 456, 458, 465, 466, 467, 471, 477, 483, 487, 492, 503, 507, 508, 509, 510], "volume_img": [10, 39, 70, 113, 483], "volumetr": [7, 10, 24, 132, 163, 180, 190, 399], "volumn": [59, 373], "volunt": 176, "vote": 172, "vox_offset": [59, 105], "voxel": [3, 7, 16, 26, 27, 30, 35, 38, 39, 41, 42, 43, 44, 47, 48, 49, 52, 53, 61, 62, 64, 68, 70, 71, 72, 73, 76, 81, 83, 84, 86, 89, 91, 92, 94, 101, 103, 104, 105, 106, 109, 113, 116, 118, 120, 128, 134, 138, 141, 142, 143, 149, 158, 160, 163, 168, 169, 171, 173, 174, 175, 177, 180, 181, 182, 185, 186, 187, 190, 192, 199, 202, 220, 221, 224, 231, 234, 237, 248, 256, 257, 268, 272, 273, 286, 305, 306, 307, 308, 309, 310, 311, 312, 313, 320, 327, 328, 332, 341, 345, 346, 348, 349, 350, 351, 353, 355, 356, 357, 366, 367, 370, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 390, 391, 394, 396, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 435, 436, 439, 443, 444, 445, 451, 456, 462, 463, 464, 465, 466, 467, 471, 472, 473, 474, 475, 487, 491, 492, 507, 509, 510], "voxel_ratio": 52, "voxel_wis": 17, "voxelwis": [332, 346], "vrije": 0, "vscode": [151, 163], "vstack": [13, 43, 44, 61, 77, 82, 107], "vt": [3, 19, 96], "vu": 0, "vulner": [118, 157, 163, 217], "vxxx": 224, "w": [26, 39, 47, 61, 110, 118, 165, 198, 209, 231, 236, 237, 240, 242, 260, 263, 264, 265, 269, 287, 310, 311], "w_": [310, 311], "wa": [0, 3, 26, 35, 43, 57, 64, 66, 70, 72, 73, 74, 77, 91, 93, 94, 98, 104, 113, 120, 121, 127, 129, 134, 135, 148, 155, 156, 157, 158, 159, 161, 163, 171, 173, 176, 178, 181, 188, 200, 202, 234, 250, 264, 310, 311, 312, 313, 332, 339, 345, 346, 348, 350, 373, 376, 377, 378, 380, 381, 383, 384, 385, 386, 387, 388, 389, 399, 435, 436, 446, 452, 454, 455, 459, 461, 462, 465, 468, 475, 491, 492], "wager": [118, 121, 226, 282, 284, 351, 477], "wagstyl": [0, 129, 163], "wai": [3, 6, 7, 16, 41, 64, 68, 73, 74, 78, 86, 101, 111, 118, 120, 121, 155, 156, 158, 163, 165, 167, 170, 171, 172, 174, 177, 178, 179, 180, 181, 185, 190, 192, 284, 322, 324, 325, 371, 436, 462, 507, 508], "wait": [121, 164, 178], "wald": [322, 324, 325], "walk": 187, "walker": [169, 465, 467], "wall": [24, 178], "wang": [0, 118, 127, 128, 129, 130, 132, 155, 156, 158, 160, 163, 228], "want": [0, 2, 6, 10, 13, 15, 16, 26, 39, 45, 52, 57, 68, 72, 73, 74, 80, 88, 93, 96, 101, 103, 116, 120, 121, 164, 165, 172, 174, 178, 179, 181, 191, 192, 194, 238, 284, 335, 366, 374, 440, 501, 507, 508], "ward": [93, 168, 185, 186, 202, 383, 463, 492], "ward_labels_img": 52, "ward_parcel": 52, "ward_tre": 52, "warn": [3, 11, 16, 17, 21, 31, 34, 35, 36, 42, 46, 51, 53, 64, 65, 72, 73, 77, 94, 104, 107, 114, 127, 128, 129, 130, 131, 132, 135, 148, 149, 151, 156, 158, 160, 163, 171, 179, 188, 314, 316, 318, 335, 339, 383, 413, 453, 456, 461, 491, 492, 495], "warrington": [0, 129, 163], "washington": [0, 228], "waskom": [0, 122, 163], "wasn": 178, "wassermann": [0, 118, 125, 148, 163, 208, 255], "wast": [26, 118, 178], "watch": [51, 52, 53, 55, 57, 58, 87, 91, 94, 108, 151, 163, 167, 186, 187, 192, 207, 268, 510], "watkin": [118, 233, 261], "wdesign": [160, 163], "we": [0, 2, 3, 4, 6, 7, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 31, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 45, 46, 47, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 120, 121, 127, 129, 132, 141, 149, 150, 151, 156, 158, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 176, 178, 180, 185, 187, 188, 189, 190, 191, 192, 208, 229, 232, 247, 256, 257, 273, 282, 284, 312, 322, 324, 325, 345, 346, 348, 350, 358, 362, 370, 371, 391, 393, 394, 396, 403, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 439, 465, 467, 474, 475, 492, 507, 508], "weaker": [54, 68, 81], "weakli": 178, "web": [17, 118, 121, 148, 151, 163, 179, 188, 226, 282, 284, 457, 459, 460, 461, 475, 507, 511], "webpag": 121, "websit": [3, 45, 77, 136, 148, 163, 164, 179, 198, 248, 261, 281], "webster": [106, 118, 165, 399], "wednesdai": [179, 508], "weeda": [78, 118, 327], "week": [164, 179, 188], "weekli": [179, 187], "wegrzyn": [0, 155, 163], "weigh": 179, "weight": [6, 31, 45, 46, 47, 120, 121, 151, 163, 165, 172, 174, 175, 178, 179, 181, 192, 217, 219, 226, 248, 272, 282, 284, 305, 306, 307, 308, 310, 311, 329, 345, 457, 469], "weight_img": [31, 45, 101, 171, 192], "weighted_connectivity_graph": [127, 163], "weird": 121, "welcom": [179, 188, 508], "well": [3, 6, 16, 41, 47, 51, 54, 61, 68, 69, 71, 81, 91, 103, 133, 141, 148, 155, 157, 161, 163, 164, 165, 166, 168, 169, 171, 172, 174, 177, 179, 181, 185, 187, 192, 202, 205, 208, 219, 232, 233, 235, 240, 241, 242, 255, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 346, 352, 366, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 462, 463, 464, 465, 492], "wellcom": [0, 185, 234], "went": 121, "were": [0, 6, 19, 35, 41, 43, 46, 52, 61, 64, 65, 68, 70, 73, 81, 93, 96, 101, 104, 112, 113, 120, 125, 127, 134, 151, 154, 158, 159, 160, 161, 163, 171, 178, 179, 181, 198, 202, 209, 217, 219, 221, 224, 233, 234, 235, 282, 284, 314, 351, 383, 386, 435, 477, 491, 492], "weren": 178, "western": 0, "wget": 188, "wgreen": [118, 319, 323], "what": [16, 59, 68, 73, 159, 172, 178, 182, 188, 190, 192, 241, 319, 323, 357, 371, 478, 507, 510], "whatev": [13, 155, 163], "whats_new": 188, "whatsnew": [127, 163], "whatsoev": 178, "wheel": [164, 188], "when": [2, 3, 4, 9, 10, 17, 25, 26, 29, 35, 57, 61, 64, 65, 66, 68, 69, 70, 73, 74, 77, 91, 93, 94, 96, 103, 104, 105, 111, 113, 116, 120, 121, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 142, 143, 144, 146, 149, 151, 154, 155, 158, 159, 160, 161, 163, 164, 165, 166, 168, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 184, 185, 188, 191, 199, 204, 205, 240, 241, 242, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 275, 277, 282, 284, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 320, 321, 325, 326, 329, 332, 345, 346, 348, 349, 366, 368, 370, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 443, 444, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 461, 462, 463, 464, 465, 468, 475, 476, 477, 487, 492, 507, 509], "whenev": [69, 172, 349], "where": [2, 6, 10, 16, 17, 25, 26, 41, 43, 47, 53, 71, 79, 86, 89, 96, 103, 109, 116, 129, 134, 135, 141, 155, 163, 165, 169, 171, 176, 177, 179, 181, 185, 188, 191, 192, 221, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 301, 305, 306, 307, 308, 310, 311, 319, 322, 323, 324, 325, 328, 332, 346, 348, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 410, 412, 415, 417, 419, 421, 423, 425, 427, 431, 434, 438, 441, 444, 445, 446, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 461, 465, 467, 474, 475, 487, 488, 489, 490, 507], "wherea": [16, 52, 157, 163, 168, 172, 191, 394, 396, 397, 463], "wherein": 66, "whether": [6, 10, 71, 91, 96, 106, 131, 149, 163, 171, 179, 181, 188, 192, 240, 241, 242, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 268, 271, 272, 273, 277, 279, 280, 281, 282, 284, 286, 291, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 329, 332, 346, 348, 349, 355, 370, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 399, 400, 402, 403, 443, 446, 451, 452, 453, 455, 462, 463, 464, 465, 474, 475, 477, 478], "which": [0, 3, 6, 7, 10, 11, 15, 16, 22, 24, 27, 31, 32, 34, 35, 36, 38, 39, 41, 43, 45, 47, 50, 52, 54, 61, 64, 68, 69, 70, 71, 77, 78, 81, 86, 91, 93, 96, 98, 101, 103, 113, 118, 120, 121, 126, 127, 128, 130, 132, 134, 136, 141, 142, 145, 146, 147, 148, 149, 151, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 183, 185, 187, 188, 190, 191, 192, 198, 199, 202, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 282, 283, 284, 285, 290, 292, 293, 294, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 322, 323, 324, 325, 331, 332, 339, 340, 345, 346, 348, 350, 355, 361, 366, 370, 372, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 392, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 461, 463, 465, 466, 467, 475, 481, 482, 487, 488, 489, 507, 508], "whichev": 179, "while": [3, 4, 6, 7, 26, 41, 46, 51, 58, 59, 68, 77, 86, 96, 101, 103, 104, 107, 111, 113, 120, 127, 129, 136, 146, 148, 163, 170, 171, 176, 178, 179, 180, 187, 191, 192, 202, 252, 305, 306, 307, 308, 339, 399], "white": [12, 25, 26, 41, 43, 45, 59, 68, 77, 91, 139, 154, 156, 157, 163, 178, 191, 192, 202, 211, 212, 213, 214, 215, 216, 219, 228, 268, 272, 286, 290, 293, 297, 298, 299, 300, 305, 306, 307, 308, 312, 313, 335, 373, 379, 385, 392, 395, 452, 453, 454, 455, 458, 459, 461, 463, 486, 487], "white_left": [211, 212, 213, 214, 215, 216, 290, 487], "white_matt": [59, 293, 294, 301, 483], "white_matter_imag": 26, "white_matter_map": [45, 77, 228, 286], "white_matter_mask": 26, "white_right": [211, 212, 213, 214, 215, 216, 290], "whiten": [319, 323, 324, 325], "whitened_design": 323, "whitened_i": 324, "whitened_residu": 324, "whitened_x": [319, 323], "whitening_": 240, "whitespac": [147, 163], "whl": 188, "who": [0, 121, 192, 198, 207, 374], "whole": [4, 15, 34, 45, 51, 53, 71, 91, 96, 111, 118, 121, 129, 157, 163, 164, 176, 177, 179, 180, 186, 191, 192, 205, 219, 220, 234, 253, 272, 282, 284, 295, 298, 305, 306, 307, 308, 312, 313, 379, 385, 392, 395, 399, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 449, 463, 465, 507], "whose": [10, 70, 134, 163, 178, 185, 241, 242, 244, 323, 358, 440, 481, 482, 487], "why": [3, 7, 96, 178, 192], "wide": [58, 72, 109, 118, 171, 172, 174, 178, 179, 218, 269, 287, 309], "width": [10, 15, 34, 35, 54, 68, 73, 96, 104, 132, 163, 185, 192, 305, 306, 307, 308, 312, 313, 332, 346, 348, 368, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 436, 437, 441, 443, 444, 447, 448, 449, 450, 451, 457, 458, 463, 465, 467, 473, 475, 491], "width_ratio": [82, 103], "width_tf": 44, "width_tf_i": 44, "width_view": [132, 163, 458], "wiesner": [0, 151, 163], "wig": [61, 118, 209, 230, 265, 266], "wiki": 181, "wikipedia": 181, "wildcard": [4, 190, 191, 304, 361], "wilei": [118, 324, 325], "william": [118, 198, 201, 227, 251, 319, 323], "williamson": [0, 127, 128, 163], "wim": [118, 219], "window": [64, 70, 73, 104, 113, 179, 475, 508], "winkler": [106, 118, 198, 399], "winner": 232, "wip": 179, "wisconsin": 0, "wise": [6, 16, 43, 50, 58, 83, 96, 103, 106, 127, 132, 160, 163, 164, 176, 180, 185, 192, 305, 306, 307, 308, 348, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 435, 443, 444, 451], "wish": [68, 81, 109, 158, 163, 179, 185, 188, 219, 234, 272, 273, 295, 296, 297, 298, 299, 300, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 437, 441, 443, 444, 447, 449, 450, 451], "with_traceback": [314, 315, 316, 317, 318], "within": [7, 33, 39, 50, 58, 68, 69, 81, 90, 103, 106, 111, 151, 154, 160, 163, 164, 168, 170, 176, 180, 183, 184, 202, 240, 241, 242, 305, 306, 307, 308, 309, 310, 311, 312, 313, 329, 332, 334, 335, 339, 346, 349, 350, 351, 370, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 397, 404, 405, 406, 407, 408, 409, 411, 414, 416, 418, 420, 422, 424, 426, 436, 437, 462, 463, 464, 465, 466, 475, 477], "without": [3, 6, 15, 24, 26, 51, 53, 68, 80, 83, 86, 96, 105, 111, 121, 128, 129, 134, 142, 151, 160, 163, 164, 166, 169, 175, 177, 178, 181, 185, 188, 190, 192, 253, 349, 355, 374, 376, 379, 385, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 436, 444, 449, 507, 510], "wjtyq": [207, 268], "wjvd5": [208, 255], "wlsmodel": 323, "wm": [12, 22, 59, 91, 157, 163, 192, 219, 272, 305, 306, 307, 308, 312, 313, 374, 379, 385, 392, 395, 463], "wm_csf": [59, 335, 373, 374], "wm_mask_img": 299, "wm_mni152_templ": 300, "wn": [160, 163], "woldorff": [118, 236, 263], "wolf": [59, 61, 118, 178, 373, 374], "wolfgang": [118, 229, 259], "women": 0, "wood": [118, 227], "woolrich": [118, 165, 198], "wor": 179, "word": [15, 79, 96, 107, 109, 121, 161, 163, 164, 171, 172, 179, 221, 226, 234, 282, 284, 483], "word_frequ": [107, 121, 226, 282, 284], "work": [0, 1, 2, 3, 4, 6, 8, 10, 15, 16, 17, 19, 21, 23, 24, 26, 31, 32, 33, 34, 35, 36, 38, 42, 43, 44, 46, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 64, 65, 66, 70, 72, 73, 74, 77, 79, 80, 81, 86, 88, 91, 93, 94, 96, 100, 101, 103, 104, 105, 113, 114, 115, 116, 129, 132, 133, 134, 143, 144, 151, 158, 159, 163, 164, 165, 170, 171, 172, 174, 178, 179, 180, 181, 188, 190, 191, 192, 198, 202, 240, 241, 242, 249, 252, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 345, 346, 352, 361, 364, 367, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 430, 437, 443, 461, 462, 463, 464, 465, 474, 480, 482, 483, 484, 487, 492, 494, 496, 509], "workaround": [144, 163], "workbench": 13, "worker": [33, 38, 39, 45, 46, 47, 51, 106, 109, 399], "workflow": [64, 179, 183, 188], "workshop": [118, 177, 202, 252], "workspac": 188, "world": [43, 190, 192, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 433, 437, 447], "worri": [6, 25, 120], "wors": [68, 311], "worslei": [118, 351, 477], "worst": 171, "worth": 79, "would": [6, 10, 15, 45, 53, 61, 68, 77, 80, 107, 111, 113, 121, 129, 131, 132, 156, 160, 163, 164, 171, 178, 179, 180, 181, 188, 304, 305, 306, 307, 308, 310, 311, 313, 332, 334, 335, 339, 345, 346, 348, 371, 390, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 435, 436, 443, 444, 451, 475], "wouter": [78, 118, 327], "wrap": [12, 52, 53, 55, 56, 57, 59, 61, 65, 93, 107, 111, 171, 473], "wrapper": [305, 306, 348, 481, 482], "wresid": [160, 163], "write": [6, 44, 73, 116, 121, 127, 158, 160, 163, 178, 179, 188, 345, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 473, 479, 480, 484], "write_imgs_to_path": [130, 163], "write_tmp_img": [130, 163], "written": [178, 234, 473], "wrong": [141, 159, 163, 181], "wrt": 248, "wspace": [43, 47, 109], "wu": [198, 279], "wustl": [228, 232, 279, 286], "www": [0, 2, 3, 6, 10, 11, 22, 28, 42, 72, 105, 111, 121, 198, 199, 200, 201, 205, 218, 219, 226, 233, 234, 235, 249, 250, 253, 261, 271, 279, 288], "wy": [160, 163], "x": [3, 6, 10, 14, 15, 16, 25, 33, 35, 37, 39, 41, 43, 44, 47, 50, 55, 57, 59, 61, 64, 65, 68, 71, 73, 77, 86, 93, 94, 96, 104, 107, 118, 129, 130, 133, 134, 138, 143, 145, 151, 156, 158, 160, 161, 163, 171, 176, 179, 185, 188, 191, 192, 198, 202, 210, 234, 240, 252, 258, 280, 305, 306, 307, 308, 310, 311, 312, 313, 319, 322, 323, 324, 325, 332, 341, 346, 353, 373, 376, 379, 385, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 437, 441, 443, 444, 447, 449, 450, 451, 452, 453, 454, 455, 458, 461, 462, 464, 465, 466, 470, 474, 475, 476, 479, 491, 492, 504, 507], "x1": [66, 96, 487], "x1_post": 355, "x1_pre": 355, "x2": [66, 96], "x20": 487, "x27": [3, 38, 52, 55, 56, 61, 65], "x2_post": 355, "x2_pre": 355, "x3": 66, "x4": 66, "x7f4afdc9a080": 38, "x7f4afdc9ba60": 38, "x7f4afe7463b0": 77, "x_figure_filenam": 44, "x_inv": [462, 464], "x_new": [312, 313, 462, 464], "x_random_filenam": 44, "x_red": [462, 464], "x_test": [33, 41, 44, 47, 305, 306, 307, 308, 309], "x_train": [33, 41, 44, 47], "xavier": 118, "xaxi": [51, 52], "xerr": [54, 102], "xi": [47, 118, 231, 260], "xiaop": [118, 205, 253], "xlabel": [6, 27, 32, 34, 36, 45, 51, 52, 54, 58, 61, 69, 102, 191], "xlim": [27, 32, 191], "xmean_": [310, 311], "xmin": [32, 434, 436, 437, 441, 443, 444, 447, 449, 450, 451], "xn_post": 355, "xn_pre": 355, "xor": 121, "xprojector": [15, 420, 426, 428], "xslicer": [10, 421, 427, 429], "xstd_": [310, 311], "xtick": [34, 36, 37, 47, 96], "xu": [118, 198], "xx": 47, "xxxx": 179, "xy_indices_of_special_voxel": 43, "xyz": [16, 365, 410, 415, 417, 421, 427], "xyzt_unit": [59, 105], "xz": [14, 15, 16, 52, 418, 419, 428, 429, 434, 437, 441, 443, 444, 447, 449, 450, 451, 475, 507], "xzprojector": [14, 15, 422, 424, 428], "xzslicer": [423, 425, 429], "y": [6, 15, 16, 24, 25, 33, 35, 36, 37, 38, 39, 41, 43, 44, 47, 50, 55, 57, 61, 64, 65, 71, 73, 86, 94, 96, 104, 109, 114, 118, 135, 143, 145, 148, 160, 163, 171, 172, 176, 179, 185, 188, 191, 192, 223, 240, 241, 242, 258, 280, 305, 306, 307, 308, 309, 310, 311, 312, 313, 319, 322, 323, 324, 325, 332, 340, 341, 346, 348, 353, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 437, 441, 443, 444, 447, 449, 450, 451, 452, 453, 454, 455, 458, 461, 462, 463, 464, 465, 466, 474, 475, 479, 491, 507], "y_binari": 41, "y_binary_": 41, "y_col": 44, "y_dummi": [312, 313, 463], "y_figure_filenam": 44, "y_multi": 41, "y_pred": [31, 33, 36, 44, 46, 171, 305, 307, 310, 311], "y_pred_big": 44, "y_pred_larg": 44, "y_pred_ova": 37, "y_pred_ovo": 37, "y_pred_tal": 44, "y_random_filenam": 44, "y_row": 44, "y_shape": 44, "y_test": [33, 36, 41, 44, 47, 305, 306, 307, 308, 309], "y_train": [33, 36, 41, 44, 47], "y_true": 311, "yamashita": [43, 44, 118, 224, 281], "yan": [118, 227], "yannick": [118, 121, 122, 163, 171, 173, 204, 226, 277, 282, 284, 307, 308], "yarkoni": [118, 121, 226, 282, 284], "yaroslav": [0, 145, 148, 163], "yashar": [118, 373, 374, 478], "yasmin": [0, 127, 128, 129, 130, 132, 160, 163, 187], "yaxi": 52, "ye": [164, 188, 305, 306, 307, 308], "year": [45, 46, 118, 178, 188, 207, 228, 268], "yellow": 16, "yeo": [11, 118, 132, 134, 163, 194, 231, 238, 260, 264, 431], "yeo2011_17networks_mni152_freesurferconformed1mm_liberalmask": [50, 492], "yeo_2011": [11, 50, 88, 492], "yeo_jneurophysiol11_mni152": [50, 492], "yeo_network": 260, "yet": [67, 82, 108, 118, 134, 158, 163, 171, 179, 187, 240, 309, 312, 313, 377, 378, 379, 380, 381, 382, 387, 388, 389, 390, 449, 463, 464, 491], "yh": 44, "yi": [39, 118], "yichun": [0, 132, 163], "yield": [24, 33, 42, 52, 79, 81, 86, 121, 151, 154, 158, 163, 170, 171, 172, 173, 176, 177, 180, 181, 197, 282, 309, 313, 328, 332, 334, 339, 349, 370, 462, 465], "ylabel": [27, 32, 34, 45, 51, 52, 58, 60, 61, 67, 68, 111, 191], "ylim": 34, "ylorrd": 61, "ymean_": [310, 311], "ymin": [434, 436, 437, 441, 443, 444, 447, 449, 450, 451], "yml": 188, "yoichi": [43, 44, 118, 224, 281], "york": [0, 118, 324, 325], "you": [0, 2, 4, 6, 7, 10, 11, 13, 15, 16, 23, 24, 25, 26, 37, 38, 39, 42, 43, 44, 45, 46, 47, 50, 52, 54, 55, 56, 57, 58, 59, 61, 64, 65, 68, 71, 72, 73, 77, 81, 88, 91, 93, 94, 96, 98, 101, 102, 103, 106, 107, 108, 109, 110, 111, 113, 116, 118, 120, 121, 132, 143, 144, 148, 151, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 176, 177, 179, 183, 184, 185, 187, 188, 190, 191, 192, 194, 198, 199, 204, 219, 226, 238, 240, 241, 242, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 261, 262, 264, 268, 271, 272, 273, 277, 279, 280, 281, 282, 286, 287, 291, 295, 296, 297, 298, 299, 300, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 332, 334, 335, 339, 346, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 437, 440, 441, 443, 444, 447, 449, 450, 451, 452, 454, 455, 458, 459, 461, 462, 463, 464, 465, 487, 491, 501, 507, 508, 510], "young": [51, 118, 186, 198, 202, 207, 228, 252, 279], "your": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 121, 164, 166, 170, 171, 172, 174, 176, 188, 190, 192, 198, 256, 257, 268, 273, 305, 306, 307, 308, 312, 313, 323, 379, 385, 463, 491, 507, 510], "your_branch": 179, "your_fork": 179, "your_usernam": 179, "yourself": 164, "yprojector": [15, 416, 426, 428], "yslicer": [94, 417, 427, 429], "yt_big": 44, "yt_larg": 44, "yt_tall": 44, "ytick": [32, 47, 51, 54, 102], "yukiyasu": [43, 44, 118, 224, 281], "yuko": [118, 201, 251], "yusuk": [43, 44, 118, 224, 281], "yvett": [0, 179], "yw": 44, "yx": [15, 16, 120, 422, 423, 428, 429, 434, 437, 441, 443, 444, 447, 449, 450, 451, 475, 507], "yxprojector": [15, 418, 424, 428], "yxslicer": [419, 425], "yz": [15, 16, 33, 42, 424, 425, 428, 429, 434, 437, 441, 443, 444, 447, 449, 450, 451, 475, 507], "yzprojector": [15, 418, 422, 428], "yzslicer": [419, 423, 429], "y\u00fccel": [59, 118, 374], "z": [2, 14, 15, 16, 19, 25, 26, 32, 35, 38, 41, 43, 45, 46, 50, 51, 55, 57, 61, 64, 65, 67, 68, 70, 71, 72, 73, 77, 78, 81, 82, 83, 86, 89, 90, 96, 104, 106, 109, 110, 113, 118, 131, 143, 145, 149, 160, 163, 179, 181, 185, 188, 191, 192, 202, 240, 258, 282, 305, 306, 307, 308, 310, 311, 312, 313, 320, 327, 329, 331, 332, 345, 349, 351, 353, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 399, 400, 402, 403, 407, 408, 409, 410, 411, 418, 419, 424, 425, 426, 427, 428, 429, 430, 433, 434, 436, 437, 441, 443, 444, 447, 449, 450, 451, 452, 453, 454, 455, 458, 461, 463, 465, 466, 474, 475, 477, 479, 491, 507], "z_image_path": 73, "z_img": 112, "z_map": [6, 35, 64, 65, 67, 68, 71, 73, 77, 78, 79, 81, 83, 104, 332, 346], "z_map_ftest": 71, "z_score": [6, 26, 64, 67, 68, 70, 71, 72, 73, 77, 78, 79, 81, 82, 83, 113, 320, 332, 346], "z_scores_left": 113, "z_scores_right": 113, "z_slice": [19, 45], "z_statmap": [65, 77], "z_val": 331, "z_valu": 112, "zack": [118, 176], "zaleski": [118, 166], "zarrar": 118, "zavitz": [118, 227], "zealand": [106, 118, 399], "zenodo": 0, "zero": [6, 10, 15, 21, 23, 24, 26, 38, 39, 41, 42, 47, 50, 56, 57, 70, 72, 73, 79, 81, 96, 125, 130, 134, 151, 155, 159, 163, 165, 169, 171, 172, 176, 177, 178, 181, 185, 191, 192, 228, 240, 241, 242, 244, 305, 306, 307, 308, 310, 311, 312, 313, 319, 324, 325, 332, 346, 348, 349, 351, 352, 355, 368, 370, 373, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 393, 396, 399, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 434, 435, 436, 450, 451, 453, 454, 463, 464, 465, 468, 469, 471, 472, 475, 477, 492], "zero_divis": 44, "zeros_lik": [43, 69, 86, 106], "zielinski": [118, 197, 248], "zijdenbo": [118, 199, 219], "zill": 118, "zip": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 169, 188, 219, 225, 258], "zmap": [42, 104, 223, 280], "zmap_filenam": 42, "zone": [118, 198], "zoom": [156, 163], "zprojector": [15, 416, 420, 428], "zrji8542": [26, 118], "zscore": [6, 128, 129, 151, 163, 240, 305, 306, 307, 308, 310, 311, 312, 313, 332, 351, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 436, 463, 465, 477], "zscore_sampl": [3, 12, 31, 32, 33, 34, 36, 37, 38, 41, 42, 43, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64, 93, 94, 101, 102, 103, 108, 114, 128, 163, 169, 171, 240, 305, 306, 307, 308, 310, 311, 312, 313, 332, 351, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 436, 463, 465, 477, 492], "zslicer": [38, 71, 417, 421, 429], "zstat12": 65, "zuckerberg": 0, "zuo": [118, 231, 260], "zurich": 0, "zvi": [0, 153, 163], "zwalli": [0, 130, 163], "z\u00f6llei": [118, 231, 237, 260, 264], "\u00e1": [118, 219], "\u00e2": [118, 198], "\u00e9": [74, 118, 171, 204, 217, 219, 277], "\u00eb": [47, 118, 171, 177, 187], "\u00eele": 0, "\u00f3scar": [0, 122, 125, 136, 138, 163], "\u00fc": [118, 177], "\u0161": [118, 219], "\u03b1": [35, 64, 73, 104, 491], "\u03b54": [118, 198]}, "titles": ["Team", "Basic tutorials", "3D and 4D niimgs: handling and visualizing", "A introduction tutorial to fMRI decoding", "Basic nilearn example: manipulating and looking at data", "Basic numerics and plotting with Python", "Intro to GLM Analysis: a single-run, single-subject fMRI dataset", "Working with Surface images", "Computation times", "Visualization of brain images", "Making a surface plot of a 3D statistical map", "Basic Atlas plotting", "Visualizing global patterns with a carpet plot", "Colormaps in Nilearn", "Glass brain plotting in nilearn", "Glass brain plotting in nilearn (all options)", "More plotting tools from nilearn", "Plotting tools in nilearn", "Controlling the contrast of the background when plotting", "Plot Haxby masks", "Visualizing multiscale functional brain parcellations", "Visualizing a probabilistic atlas: the default mode in the MSDL atlas", "Visualizing 4D probabilistic atlas maps", "Loading and plotting of a cortical surface atlas", "Seed-based connectivity on the surface", "Technical point: Illustration of the volume to surface sampling schemes", "Plotting images with transparent thresholding", "NeuroImaging volumes visualization", "Visualizing Megatrawls Network Matrices from Human Connectome Project", "Computation times", "Decoding and predicting from brain images", "Decoding with ANOVA + SVM: face vs house in the Haxby dataset", "Different classifiers in decoding the Haxby dataset", "Decoding with FREM: face vs house vs chair object recognition", "ROI-based decoding analysis in Haxby et al. dataset", "Decoding of a dataset after GLM fit for signal extraction", "Setting a parameter by cross-validation", "The haxby dataset: different multi-class strategies", "Searchlight analysis of face vs house recognition", "Cortical surface-based searchlight decoding", "Show stimuli of Haxby et al. dataset", "Understanding <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Decoder</span></code>", "FREM on Jimura et al \u201cmixed gambles\u201d dataset", "Encoding models for visual stimuli from Miyawaki et al. 2008", "Reconstruction of visual stimuli from Miyawaki et al. 2008", "Voxel-Based Morphometry on Oasis dataset", "Voxel-Based Morphometry on Oasis dataset with Space-Net prior", "Example of pattern recognition on simulated data", "Computation times", "Functional connectivity", "Comparing connectomes on different reference atlases", "Deriving spatial maps from group fMRI data using ICA and Dictionary Learning", "Clustering methods to learn a brain parcellation from fMRI", "Regions extraction using dictionary learning and functional connectomes", "Classification of age groups using functional connectivity", "Computing a connectome with sparse inverse covariance", "Group Sparse inverse covariance for multi-subject connectome", "Extracting signals of a probabilistic atlas of functional regions", "Producing single subject maps of seed-to-voxel correlation", "Extracting signals from a brain parcellation", "Connectivity structure estimation on simulated data", "Extract signals on spheres and plot a connectome", "Computation times", "GLM: First level analysis", "Default Mode Network extraction of ADHD dataset", "First level analysis of a complete BIDS dataset from openneuro", "Examples of design matrices", "Analysis of an fMRI dataset with a Finite Impule Response (FIR) model", "Understanding parameters of the first-level model", "Example of MRI response functions", "Example of surface-based first-level analysis", "Predicted time series and residuals", "Single-subject data (two runs) in native space", "Simple example of two-runs fMRI model fitting", "Generate an events.tsv file for the NeuroSpin localizer task", "Computation times", "GLM: Second level analysis", "Voxel-Based Morphometry on OASIS dataset", "Second-level fMRI model: true positive proportion in clusters", "Example of generic design in second-level models", "Example of second level design matrix", "Second-level fMRI model: one sample test", "Second-level fMRI model: two-sample test, unpaired and paired", "Statistical testing of a second-level analysis", "Computation times", "Manipulating brain image volumes", "Visualization of affine resamplings", "Comparing the means of 2 images", "Breaking an atlas of labels in separated regions", "Regions Extraction of Default Mode Networks using Smith Atlas", "Region Extraction using a t-statistical map (3D)", "Understanding NiftiMasker and mask computation", "Negating an image with math_img", "Extracting signals from brain regions using the NiftiLabelsMasker", "Simple example of NiftiMasker use", "Resample an image to a template", "Computing a Region of Interest (ROI) mask manually", "Smoothing an image", "Image thresholding", "Computation times", "Advanced statistical analysis of brain images", "Advanced decoding using scikit learn", "Functional connectivity predicts age group", "Beta-Series Modeling for Task-Based Functional Connectivity and Decoding", "BIDS dataset first and second level analysis", "Copying headers from input images with <code class=\"docutils literal notranslate\"><span class=\"pre\">math_img</span></code>", "Massively univariate analysis of face vs house recognition", "NeuroVault cross-study ICA maps", "Multivariate decompositions: Independent component analysis of fMRI", "Massively univariate analysis of a motor task from the Localizer dataset", "Massively univariate analysis of a calculation task from the Localizer dataset", "Working with long time series fMRI images", "NeuroVault meta-analysis of stop-go paradigm studies", "Surface-based dataset first and second level analysis of a dataset", "A short demo of the surface images &amp; maskers", "Computation times", "Examples", "Computation times", "General bibliography", "<span class=\"section-number\">10. </span>Advanced usage: manual pipelines and scaling up", "<span class=\"section-number\">10.1. </span>Building your own neuroimaging machine-learning pipeline", "<span class=\"section-number\">10.2. </span>Downloading statistical maps from the Neurovault repository", "0.1.0", "0.1.1", "0.1.2", "0.1.3", "0.1.4", "0.10.0", "0.10.1", "0.10.2", "0.10.3", "0.10.4", "0.11.0", "0.11.1", "0.12.0", "0.12.1", "0.2.0", "0.2.1", "0.2.2", "0.2.3", "0.2.4", "0.2.5.1", "0.2.6", "0.3.0", "0.3.1", "0.4.0", "0.4.1", "0.4.2", "0.5.0", "0.5.1", "0.5.2", "0.6.0", "0.6.1", "0.6.2", "0.7.0", "0.7.1", "0.8.0", "0.8.1", "0.9.0", "0.9.1", "0.9.2", "0.13.0.dev", "&lt;no title&gt;", "What\u2019s new", "Continuous integration", "<span class=\"section-number\">6.2. </span>Connectome extraction: inverse covariance for direct connections", "<span class=\"section-number\">6.1. </span>Extracting times series to build a functional connectome", "<span class=\"section-number\">6. </span>Functional connectivity and resting state", "<span class=\"section-number\">6.5. </span>Clustering to parcellate the brain in regions", "<span class=\"section-number\">6.4. </span>Region Extraction for better brain parcellations", "<span class=\"section-number\">6.3. </span>Extracting functional brain networks: ICA and related", "<span class=\"section-number\">5.1. </span>An introduction to decoding", "<span class=\"section-number\">5.2. </span>Choosing the right predictive model for neuroimaging", "<span class=\"section-number\">5.3. </span>FREM: fast ensembling of regularized models for robust decoding", "<span class=\"section-number\">5.6. </span>Running scikit-learn functions for more control on the analysis", "<span class=\"section-number\">5. </span>Decoding and MVPA: predicting from brain images", "<span class=\"section-number\">5.5. </span>Searchlight : finding voxels containing information", "<span class=\"section-number\">5.4. </span>SpaceNet: decoding with spatial structure for better maps", "<span class=\"section-number\">6.2.3.1. </span>Group-sparse covariance estimation", "Contributing", "<span class=\"section-number\">8.2. </span>First level models", "<span class=\"section-number\">8.1. </span>An introduction to GLMs in fMRI statistical analysis", "<span class=\"section-number\">8. </span>Analyzing fMRI using GLMs", "<span class=\"section-number\">8.4. </span>Difference in meanings between different toolboxes", "<span class=\"section-number\">8.3. </span>Second level models", "Glossary", "Nilearn", "<span class=\"section-number\">1. </span>Introduction", "Maintenance", "<span class=\"section-number\">9. </span>Manipulation brain volumes with nilearn", "<span class=\"section-number\">9.1. </span>Input and output: neuroimaging data representation", "<span class=\"section-number\">9.2. </span>Manipulating images: resampling, smoothing, masking, ROIs\u2026", "<span class=\"section-number\">9.3. </span>From neuroimaging volumes to data matrices: the masker objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.connectome</span></code>: Functional Connectivity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.datasets</span></code>: Automatic Dataset Fetching", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.decoding</span></code>: Decoding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.decomposition</span></code>: Multivariate Decompositions", "ABIDE PCP dataset", "MegaTrawls Network Matrices HCP", "AAL atlas", "ADHD dataset", "Allen 2011 atlas", "BASC multiscale atlas", "BIDS language localizer", "Brainomics Localizer", "Craddock 2012 atlas", "Destrieux atlas", "development fMRI dataset", "DiFuMo atlas", "Dosenbach 2010 atlas", "fiac first level dataset", "fsaverage template", "fsaverage3 template", "fsaverage4 template", "fsaverage5 template", "fsaverage6 template", "Content", "Harvard Oxford atlas", "Haxby dataset", "ICBM 152 template", "Juelich atlas", "language localizer demo dataset", "localizer first level dataset", "Mixed gambles statistical maps", "Miyawaki 2008 dataset", "MSDL atlas", "Neurovault statistical maps", "NKI enhanced surface dataset", "OASIS volume based morphometry maps", "Pauli 2007 atlas", "Power 2011 atlas", "Schaefer 2018 atlas", "Seitzman 2018 atlas", "Smith 2009 atlas", "SPM auditory dataset", "SPM multimodal dataset", "Talairach atlas", "Yeo 2011 atlas", "&lt;no title&gt;", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.exceptions</span></code>: Exceptions and warnings", "nilearn.connectome.ConnectivityMeasure", "nilearn.connectome.GroupSparseCovariance", "nilearn.connectome.GroupSparseCovarianceCV", "nilearn.connectome.cov_to_corr", "nilearn.connectome.group_sparse_covariance", "nilearn.connectome.prec_to_partial", "nilearn.connectome.sym_matrix_to_vec", "nilearn.connectome.vec_to_sym_matrix", "nilearn.datasets.fetch_abide_pcp", "nilearn.datasets.fetch_adhd", "nilearn.datasets.fetch_atlas_aal", "nilearn.datasets.fetch_atlas_allen_2011", "nilearn.datasets.fetch_atlas_basc_multiscale_2015", "nilearn.datasets.fetch_atlas_craddock_2012", "nilearn.datasets.fetch_atlas_destrieux_2009", "nilearn.datasets.fetch_atlas_difumo", "nilearn.datasets.fetch_atlas_harvard_oxford", "nilearn.datasets.fetch_atlas_juelich", "nilearn.datasets.fetch_atlas_msdl", "nilearn.datasets.fetch_atlas_pauli_2017", "nilearn.datasets.fetch_atlas_schaefer_2018", "nilearn.datasets.fetch_atlas_smith_2009", "nilearn.datasets.fetch_atlas_surf_destrieux", "nilearn.datasets.fetch_atlas_talairach", "nilearn.datasets.fetch_atlas_yeo_2011", "nilearn.datasets.fetch_coords_dosenbach_2010", "nilearn.datasets.fetch_coords_power_2011", "nilearn.datasets.fetch_coords_seitzman_2018", "nilearn.datasets.fetch_development_fmri", "nilearn.datasets.fetch_ds000030_urls", "nilearn.datasets.fetch_fiac_first_level", "nilearn.datasets.fetch_haxby", "nilearn.datasets.fetch_icbm152_2009", "nilearn.datasets.fetch_icbm152_brain_gm_mask", "nilearn.datasets.fetch_language_localizer_demo_dataset", "nilearn.datasets.fetch_localizer_button_task", "nilearn.datasets.fetch_localizer_calculation_task", "nilearn.datasets.fetch_localizer_contrasts", "nilearn.datasets.fetch_localizer_first_level", "nilearn.datasets.fetch_megatrawls_netmats", "nilearn.datasets.fetch_mixed_gambles", "nilearn.datasets.fetch_miyawaki2008", "nilearn.datasets.fetch_neurovault", "nilearn.datasets.fetch_neurovault_auditory_computation_task", "nilearn.datasets.fetch_neurovault_ids", "nilearn.datasets.fetch_neurovault_motor_task", "nilearn.datasets.fetch_oasis_vbm", "nilearn.datasets.fetch_openneuro_dataset", "nilearn.datasets.fetch_spm_auditory", "nilearn.datasets.fetch_spm_multimodal_fmri", "nilearn.datasets.fetch_surf_fsaverage", "nilearn.datasets.fetch_surf_nki_enhanced", "nilearn.datasets.get_data_dirs", "nilearn.datasets.load_fsaverage", "nilearn.datasets.load_fsaverage_data", "nilearn.datasets.load_mni152_brain_mask", "nilearn.datasets.load_mni152_gm_mask", "nilearn.datasets.load_mni152_gm_template", "nilearn.datasets.load_mni152_template", "nilearn.datasets.load_mni152_wm_mask", "nilearn.datasets.load_mni152_wm_template", "nilearn.datasets.load_nki", "nilearn.datasets.load_sample_motor_activation_image", "nilearn.datasets.patch_openneuro_dataset", "nilearn.datasets.select_from_index", "nilearn.decoding.Decoder", "nilearn.decoding.DecoderRegressor", "nilearn.decoding.FREMClassifier", "nilearn.decoding.FREMRegressor", "nilearn.decoding.SearchLight", "nilearn.decoding.SpaceNetClassifier", "nilearn.decoding.SpaceNetRegressor", "nilearn.decomposition.CanICA", "nilearn.decomposition.DictLearning", "nilearn.exceptions.AllVolumesRemovedError", "nilearn.exceptions.DimensionError", "nilearn.exceptions.MaskWarning", "nilearn.exceptions.MeshDimensionError", "nilearn.exceptions.NotImplementedWarning", "nilearn.glm.ARModel", "nilearn.glm.Contrast", "nilearn.glm.FContrastResults", "nilearn.glm.LikelihoodModelResults", "nilearn.glm.OLSModel", "nilearn.glm.RegressionResults", "nilearn.glm.SimpleRegressionResults", "nilearn.glm.TContrastResults", "nilearn.glm.cluster_level_inference", "nilearn.glm.compute_contrast", "nilearn.glm.compute_fixed_effects", "nilearn.glm.expression_to_contrast_vector", "nilearn.glm.fdr_threshold", "nilearn.glm.first_level.FirstLevelModel", "nilearn.glm.first_level.check_design_matrix", "nilearn.glm.first_level.compute_regressor", "nilearn.glm.first_level.first_level_from_bids", "nilearn.glm.first_level.glover_dispersion_derivative", "nilearn.glm.first_level.glover_hrf", "nilearn.glm.first_level.glover_time_derivative", "nilearn.glm.first_level.make_first_level_design_matrix", "nilearn.glm.first_level.mean_scaling", "nilearn.glm.first_level.run_glm", "nilearn.glm.first_level.spm_dispersion_derivative", "nilearn.glm.first_level.spm_hrf", "nilearn.glm.first_level.spm_time_derivative", "nilearn.glm.save_glm_to_bids", "nilearn.glm.second_level.SecondLevelModel", "nilearn.glm.second_level.make_second_level_design_matrix", "nilearn.glm.second_level.non_parametric_inference", "nilearn.glm.threshold_stats_img", "nilearn.image.binarize_img", "nilearn.image.clean_img", "nilearn.image.concat_imgs", "nilearn.image.coord_transform", "nilearn.image.copy_img", "nilearn.image.crop_img", "nilearn.image.get_data", "nilearn.image.high_variance_confounds", "nilearn.image.index_img", "nilearn.image.iter_img", "nilearn.image.largest_connected_component_img", "nilearn.image.load_img", "nilearn.image.math_img", "nilearn.image.mean_img", "nilearn.image.new_img_like", "nilearn.image.reorder_img", "nilearn.image.resample_img", "nilearn.image.resample_to_img", "nilearn.image.smooth_img", "nilearn.image.swap_img_hemispheres", "nilearn.image.threshold_img", "nilearn.interfaces.bids.get_bids_files", "nilearn.interfaces.bids.parse_bids_filename", "nilearn.interfaces.fmriprep.load_confounds", "nilearn.interfaces.fmriprep.load_confounds_strategy", "nilearn.interfaces.fsl.get_design_from_fslmat", "nilearn.maskers.BaseMasker", "nilearn.maskers.MultiNiftiLabelsMasker", "nilearn.maskers.MultiNiftiMapsMasker", "nilearn.maskers.MultiNiftiMasker", "nilearn.maskers.MultiSurfaceLabelsMasker", "nilearn.maskers.MultiSurfaceMapsMasker", "nilearn.maskers.MultiSurfaceMasker", "nilearn.maskers.NiftiLabelsMasker", "nilearn.maskers.NiftiMapsMasker", "nilearn.maskers.NiftiMasker", "nilearn.maskers.NiftiSpheresMasker", "nilearn.maskers.SurfaceLabelsMasker", "nilearn.maskers.SurfaceMapsMasker", "nilearn.maskers.SurfaceMasker", "nilearn.masking.apply_mask", "nilearn.masking.compute_background_mask", "nilearn.masking.compute_brain_mask", "nilearn.masking.compute_epi_mask", "nilearn.masking.compute_multi_background_mask", "nilearn.masking.compute_multi_brain_mask", "nilearn.masking.compute_multi_epi_mask", "nilearn.masking.intersect_masks", "nilearn.masking.unmask", "nilearn.mass_univariate.permuted_ols", "nilearn.plotting.displays.BaseAxes", "nilearn.plotting.displays.BaseSlicer", "nilearn.plotting.displays.CutAxes", "nilearn.plotting.displays.GlassBrainAxes", "nilearn.plotting.displays.LProjector", "nilearn.plotting.displays.LRProjector", "nilearn.plotting.displays.LYRProjector", "nilearn.plotting.displays.LYRZProjector", "nilearn.plotting.displays.LZRProjector", "nilearn.plotting.displays.LZRYProjector", "nilearn.plotting.displays.MosaicSlicer", "nilearn.plotting.displays.OrthoProjector", "nilearn.plotting.displays.OrthoSlicer", "nilearn.plotting.displays.PlotlySurfaceFigure", "nilearn.plotting.displays.RProjector", "nilearn.plotting.displays.TiledSlicer", "nilearn.plotting.displays.XProjector", "nilearn.plotting.displays.XSlicer", "nilearn.plotting.displays.XZProjector", "nilearn.plotting.displays.XZSlicer", "nilearn.plotting.displays.YProjector", "nilearn.plotting.displays.YSlicer", "nilearn.plotting.displays.YXProjector", "nilearn.plotting.displays.YXSlicer", "nilearn.plotting.displays.YZProjector", "nilearn.plotting.displays.YZSlicer", "nilearn.plotting.displays.ZProjector", "nilearn.plotting.displays.ZSlicer", "nilearn.plotting.displays.get_projector", "nilearn.plotting.displays.get_slicer", "nilearn.plotting.find_cut_slices", "nilearn.plotting.find_parcellation_cut_coords", "nilearn.plotting.find_probabilistic_atlas_cut_coords", "nilearn.plotting.find_xyz_cut_coords", "nilearn.plotting.plot_anat", "nilearn.plotting.plot_bland_altman", "nilearn.plotting.plot_carpet", "nilearn.plotting.plot_connectome", "nilearn.plotting.plot_contrast_matrix", "nilearn.plotting.plot_design_matrix", "nilearn.plotting.plot_design_matrix_correlation", "nilearn.plotting.plot_epi", "nilearn.plotting.plot_event", "nilearn.plotting.plot_glass_brain", "nilearn.plotting.plot_img", "nilearn.plotting.plot_img_comparison", "nilearn.plotting.plot_img_on_surf", "nilearn.plotting.plot_markers", "nilearn.plotting.plot_matrix", "nilearn.plotting.plot_prob_atlas", "nilearn.plotting.plot_roi", "nilearn.plotting.plot_stat_map", "nilearn.plotting.plot_surf", "nilearn.plotting.plot_surf_contours", "nilearn.plotting.plot_surf_roi", "nilearn.plotting.plot_surf_stat_map", "nilearn.plotting.show", "nilearn.plotting.view_connectome", "nilearn.plotting.view_img", "nilearn.plotting.view_img_on_surf", "nilearn.plotting.view_markers", "nilearn.plotting.view_surf", "nilearn.regions.HierarchicalKMeans", "nilearn.regions.Parcellations", "nilearn.regions.ReNA", "nilearn.regions.RegionExtractor", "nilearn.regions.connected_label_regions", "nilearn.regions.connected_regions", "nilearn.regions.img_to_signals_labels", "nilearn.regions.img_to_signals_maps", "nilearn.regions.recursive_neighbor_agglomeration", "nilearn.regions.signals_to_img_labels", "nilearn.regions.signals_to_img_maps", "nilearn.reporting.HTMLReport", "nilearn.reporting.get_clusters_table", "nilearn.reporting.make_glm_report", "nilearn.signal.butterworth", "nilearn.signal.clean", "nilearn.signal.high_variance_confounds", "nilearn.surface.FileMesh", "nilearn.surface.InMemoryMesh", "nilearn.surface.PolyData", "nilearn.surface.PolyMesh", "nilearn.surface.SurfaceImage", "nilearn.surface.SurfaceMesh", "nilearn.surface.load_surf_data", "nilearn.surface.load_surf_mesh", "nilearn.surface.vol_to_surf", "nilearn.utils.all_displays", "nilearn.utils.all_estimators", "nilearn.utils.all_functions", "Examples of GLM reports", "Examples nifti masker reports", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.glm</span></code>: Generalized Linear Models", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.image</span></code>: Image Processing and Resampling Utilities", "API References", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.interfaces</span></code>: Loading components from interfaces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.maskers</span></code>: Extracting Signals from Brain Images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.masking</span></code>: Data Masking Utilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.mass_univariate</span></code>: Mass-Univariate Analysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.plotting</span></code>: Plotting Brain Data", "&lt;no title&gt;", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.regions</span></code>: Operating on Regions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.reporting</span></code>: Reporting Functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.signal</span></code>: Preprocessing Time Series", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.surface</span></code>: Manipulating Surface Data", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.utils</span></code>: Utilities", "<span class=\"section-number\">7. </span>Plotting brain images", "Quickstart", "Computation times", "User guide", "Available documentation for Nilearn"], "titleterms": {"": [16, 61, 64, 101, 163, 171], "0": [17, 18, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 291], "0a0": [151, 163], "0b0": [151, 163], "0rc": [151, 163], "1": [17, 18, 68, 122, 123, 124, 125, 126, 128, 133, 135, 137, 141, 144, 146, 149, 152, 155, 157, 159, 163], "10": [127, 128, 129, 130, 131, 163], "100": 192, "11": [132, 133, 163], "12": [134, 135, 163], "13": [161, 163], "14": 291, "152": 219, "1rc1": [128, 163], "2": [87, 98, 124, 129, 136, 137, 138, 139, 140, 141, 142, 147, 150, 153, 160, 163], "2001": 171, "2007": 229, "2008": [43, 44, 224], "2009": 233, "2010": 209, "2011": [201, 230, 237], "2012": 205, "2018": [231, 232], "2d": [120, 191], "2x2": 16, "3": [125, 130, 139, 143, 144, 163], "3d": [2, 4, 10, 23, 55, 57, 61, 90, 190, 507], "4": [126, 131, 140, 145, 146, 147, 163], "4d": [2, 22, 120, 190, 191], "5": [16, 18, 141, 148, 149, 150, 163], "6": [71, 142, 151, 152, 153, 163], "7": [154, 155, 163], "8": [156, 157, 163], "9": [158, 159, 160, 163], "A": [3, 4, 47, 68, 114, 166, 171, 181], "And": [55, 57], "Not": 164, "The": [37, 59, 68, 88, 171, 177, 192], "Then": 44, "aal": 199, "abid": 197, "access": [22, 191, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237], "accuraci": [3, 171], "across": 73, "action": 164, "actual": 71, "ad": [68, 179, 507], "add_contour": 16, "add_edg": 16, "add_mark": 16, "add_overlai": 21, "addit": 179, "adhd": [12, 64, 200, 491], "adjust": 25, "advanc": [100, 101, 116, 119, 192], "affin": [86, 190, 191], "after": [35, 91], "ag": [45, 54, 77, 102], "aggreg": 103, "agreement": [228, 286], "al": [34, 40, 42, 43, 44], "algorithm": 178, "all": [2, 15, 164, 171], "all_displai": 488, "all_estim": 489, "all_funct": 490, "allen": 201, "allvolumesremovederror": 314, "along": 16, "alpha": [148, 163, 178], "also": [211, 212, 213, 214, 215, 216, 219], "altern": 170, "an": [6, 10, 11, 41, 47, 61, 67, 74, 88, 92, 93, 95, 97, 170, 171, 179, 181, 507], "analys": 183, "analysi": [3, 6, 34, 38, 45, 58, 63, 64, 65, 67, 70, 76, 77, 83, 100, 103, 104, 106, 108, 109, 110, 112, 113, 116, 171, 174, 176, 180, 181, 202, 499], "analyz": [77, 182, 190], "anatom": [16, 17], "angl": 23, "ani": 174, "annot": [16, 121], "anoth": 191, "anova": [31, 36, 101, 171, 174], "answer": 179, "api": [132, 136, 163, 179, 187, 495], "appli": [27, 51, 120, 168, 191, 192], "applic": [103, 187], "apply_mask": 390, "approach": [103, 165], "ar": 68, "argument": [65, 104, 192], "armodel": 319, "around": [10, 54, 61], "arrai": [120, 191], "assign": 164, "asymmetr": 50, "atla": [10, 11, 21, 22, 23, 50, 54, 55, 57, 59, 61, 88, 89, 93, 102, 114, 166, 179, 199, 201, 202, 205, 206, 208, 209, 217, 220, 225, 229, 230, 231, 232, 233, 236, 237], "atlas": [22, 50, 166, 179, 194, 507], "attribut": 179, "auditori": 234, "auto": 164, "automat": [65, 104, 120, 194], "avail": [507, 511], "averag": 61, "ax": 500, "axial": 16, "background": [14, 18, 91], "bag": 172, "bar": [34, 507], "barplot": 37, "basc": 202, "base": [12, 24, 34, 39, 45, 46, 59, 70, 77, 103, 113, 169, 180, 184, 228], "baseax": 400, "baselin": 188, "basemask": 376, "baseslic": 401, "basic": [1, 4, 5, 11, 68, 116], "behavior": [3, 31, 35, 190], "benchmark": 164, "benefit": 26, "beta": [103, 143, 148, 163, 171], "better": [169, 177, 192], "between": [66, 183], "bibliographi": 118, "bid": [65, 104, 113, 203, 371, 372, 491, 496], "binari": [41, 111], "binarize_img": 350, "bio": 45, "black": 14, "bold": [39, 181], "bootstrap": 202, "both": [15, 73], "bound": 178, "brain": [9, 14, 15, 17, 20, 27, 30, 43, 45, 50, 51, 52, 53, 54, 59, 61, 85, 93, 100, 102, 116, 166, 168, 169, 170, 175, 179, 189, 191, 497, 500, 507], "brainom": 204, "break": 88, "browser": [10, 23, 55, 57, 61], "bug": [136, 139, 146, 163, 179], "build": [25, 35, 37, 43, 57, 96, 120, 164, 166, 179, 188], "butterworth": 476, "cach": 164, "calcul": [24, 71, 110], "canica": [51, 170, 312], "carpet": 12, "case": [179, 191], "cat": 3, "censor": 68, "chair": 33, "chanc": [3, 101, 171, 174], "chang": [18, 68, 101, 127, 128, 129, 130, 131, 132, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 153, 154, 156, 157, 158, 159, 160, 161, 163, 192], "changelog": [122, 123, 124, 125, 136, 137, 139, 163, 179], "check": [104, 508], "check_design_matrix": 333, "check_gha_workflow": 164, "children": 54, "choic": 171, "choos": [10, 13, 103, 171, 172], "ci": 164, "circl": 164, "circle_artifact": 164, "circle_ci_token": 164, "cite": 0, "class": [37, 41, 172, 193, 195, 196, 493, 497, 500, 502, 503, 505], "classif": [54, 102, 172], "classifi": [32, 176], "clean": 477, "clean_img": 351, "close": 188, "cluster": [52, 71, 78, 168, 202], "cluster_level_infer": 327, "code": [132, 163, 168, 171, 173, 176, 179, 188, 191, 507], "coeffici": 53, "collect": 121, "color": 13, "colorbar": 17, "colormap": [11, 13, 507], "column": 16, "combin": 112, "comment": 164, "commit": [164, 179], "common": 192, "compar": [26, 41, 50, 51, 52, 73, 87, 103, 165, 176, 500], "comparison": [10, 173, 181, 184], "compat": 291, "complet": 65, "compon": [107, 108, 170, 496], "compress": [52, 168], "comput": [8, 29, 36, 37, 38, 39, 48, 53, 55, 56, 59, 61, 62, 73, 75, 84, 91, 96, 99, 112, 115, 117, 120, 165, 166, 169, 180, 191, 192, 509], "compute_background_mask": 391, "compute_brain_mask": 392, "compute_contrast": 328, "compute_epi_mask": 393, "compute_fixed_effect": 329, "compute_multi_background_mask": 394, "compute_multi_brain_mask": 395, "compute_multi_epi_mask": 396, "compute_regressor": 334, "concat_img": 352, "concept": 192, "conclus": [68, 111], "condit": [103, 198, 279], "conduct": 179, "confound": [59, 68, 192], "confus": [33, 37], "connect": [24, 49, 50, 54, 59, 60, 88, 102, 103, 114, 116, 165, 167, 169, 193], "connected_label_region": 466, "connected_region": 467, "connectivitymeasur": 240, "connectom": [23, 28, 50, 53, 55, 56, 61, 165, 166, 193, 240, 241, 242, 243, 244, 245, 246, 247, 507], "contain": 176, "content": [197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 510], "continu": [164, 179], "contour": [11, 15, 26, 507], "contrast": [18, 64, 65, 68, 70, 71, 73, 180, 320], "contribut": 179, "contributor": [0, 136, 138, 141, 145, 148, 149, 150, 151, 152, 153, 163], "control": [18, 164, 174, 192], "convert": 41, "coord_transform": 353, "coordin": [16, 50, 61, 166], "copi": 105, "copy_img": 354, "core": 0, "coron": 16, "correct": 184, "correl": [53, 54, 57, 58, 59, 61, 66, 165, 166], "correspond": [27, 55, 57], "cortic": [23, 39, 507], "cours": 64, "cov_to_corr": 243, "covari": [55, 56, 165, 178], "craddock": 205, "creat": [7, 47, 66, 80, 111, 191], "criteria": 178, "criterion": 178, "crop_img": 355, "cross": [3, 31, 36, 37, 41, 101, 107, 171, 174, 176, 178], "css": 179, "csv": 190, "custom": [23, 192], "cut": [14, 16], "cutax": 402, "cutoff": 192, "cylind": 25, "data": [3, 4, 6, 7, 10, 11, 12, 14, 15, 18, 23, 24, 26, 27, 31, 32, 34, 35, 37, 42, 43, 44, 45, 47, 50, 51, 52, 55, 57, 58, 59, 60, 64, 68, 70, 72, 73, 77, 91, 93, 96, 101, 103, 106, 107, 112, 120, 165, 168, 170, 171, 174, 176, 181, 190, 191, 192, 228, 286, 498, 500, 505], "datafram": 93, "dataset": [2, 6, 12, 18, 19, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 51, 52, 53, 54, 56, 61, 64, 65, 67, 77, 78, 81, 82, 93, 102, 104, 106, 109, 110, 113, 164, 169, 173, 178, 179, 190, 194, 197, 200, 207, 210, 218, 221, 222, 224, 227, 234, 235, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304], "decid": 179, "decis": 179, "decod": [3, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 44, 46, 101, 103, 114, 116, 171, 173, 174, 175, 177, 195, 305, 306, 307, 308, 309, 310, 311], "decoderregressor": 306, "decomposit": [108, 196, 312, 313], "decreas": [18, 190], "default": [21, 61, 64, 89], "defin": [44, 59, 66, 69, 103], "definit": [171, 192], "demo": [15, 114, 221], "depend": 508, "deploi": [164, 188], "deriv": [12, 51, 68, 194], "descript": [120, 178, 194], "design": [66, 68, 79, 80, 103, 180, 192], "destrieux": [23, 206], "detail": [198, 279], "detect": 6, "determinist": 194, "dev": [161, 163], "develop": [0, 51, 52, 53, 54, 61, 93, 102, 207, 508], "dictionari": [51, 53, 169, 170], "dictlearn": 313, "differ": [15, 23, 32, 34, 36, 37, 47, 50, 88, 165, 172, 183, 192, 507], "difumo": 208, "dim": 18, "dimens": [105, 171], "dimensionerror": 315, "direct": [50, 165], "disclaim": 198, "discrimin": 101, "discuss": 179, "disk": [65, 77], "displai": [10, 16, 23, 24, 55, 56, 57, 59, 61, 81, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 507], "distribut": [71, 188], "dmn": 61, "do": [179, 181], "doc": [164, 188], "document": [164, 179, 188, 511], "dosenbach": [61, 209], "download": [2, 3, 52, 101, 120, 121, 190], "draw": 25, "drift": 68, "drop": 508, "dtype": 192, "dualiti": 178, "dummi": 101, "each": [10, 35], "easi": 171, "edg": [16, 507], "effect": [6, 73, 183], "empir": 173, "empti": 491, "encod": 43, "engin": 101, "enhanc": [18, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 142, 143, 144, 145, 146, 148, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 163, 179, 227], "ensembl": 173, "environ": 179, "epi": [17, 91], "error": 44, "estim": [43, 47, 60, 61, 64, 65, 68, 70, 78, 79, 81, 82, 101, 104, 171, 172, 174, 178, 179], "et": [34, 40, 42, 43, 44], "event": [35, 74, 180], "exampl": [4, 35, 42, 47, 66, 69, 70, 73, 79, 80, 94, 104, 113, 116, 121, 132, 163, 165, 166, 168, 170, 171, 176, 177, 186, 187, 191, 192, 240, 242, 249, 251, 252, 254, 255, 256, 257, 258, 261, 262, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 292, 293, 294, 295, 296, 298, 299, 301, 302, 304, 305, 306, 307, 308, 309, 311, 312, 313, 327, 329, 332, 334, 335, 339, 345, 346, 347, 348, 349, 351, 352, 353, 356, 357, 358, 359, 361, 362, 363, 364, 366, 367, 368, 370, 373, 374, 375, 376, 377, 378, 379, 383, 384, 385, 386, 387, 389, 390, 393, 398, 399, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 463, 465, 466, 467, 473, 474, 479, 480, 481, 482, 483, 484, 487, 491, 492, 507], "except": [239, 314, 315, 316, 317, 318], "execut": 178, "exercis": [47, 165, 166, 192], "expans": 190, "experi": [42, 120, 171], "experiment": [6, 80], "explicitli": 23, "expression_to_contrast_vector": 330, "extra": 192, "extract": [3, 24, 27, 35, 50, 53, 54, 55, 56, 57, 58, 59, 61, 64, 71, 89, 90, 91, 93, 165, 166, 169, 170, 180, 191, 192, 497], "f": [6, 38, 71], "f_score": 176, "face": [3, 31, 32, 33, 38, 39, 106], "fals": 98, "fashion": 16, "fast": 173, "fcontrastresult": 321, "fdr_threshold": 331, "featur": [3, 16, 41, 101, 136, 139, 163, 171, 186, 491], "fetch": [12, 21, 27, 28, 35, 50, 53, 56, 65, 72, 78, 81, 82, 104, 112, 113, 169, 190, 194], "fetch_abide_pcp": 248, "fetch_adhd": 249, "fetch_atlas_a": 250, "fetch_atlas_allen_2011": 251, "fetch_atlas_basc_multiscale_2015": 252, "fetch_atlas_craddock_2012": 253, "fetch_atlas_destrieux_2009": 254, "fetch_atlas_difumo": 255, "fetch_atlas_harvard_oxford": 256, "fetch_atlas_juelich": 257, "fetch_atlas_msdl": 258, "fetch_atlas_pauli_2017": 259, "fetch_atlas_schaefer_2018": 260, "fetch_atlas_smith_2009": 261, "fetch_atlas_surf_destrieux": 262, "fetch_atlas_talairach": 263, "fetch_atlas_yeo_2011": 264, "fetch_coords_dosenbach_2010": 265, "fetch_coords_power_2011": 266, "fetch_coords_seitzman_2018": 267, "fetch_development_fmri": 268, "fetch_ds000030_url": 269, "fetch_fiac_first_level": 270, "fetch_haxbi": 271, "fetch_icbm152_2009": 272, "fetch_icbm152_brain_gm_mask": 273, "fetch_language_localizer_demo_dataset": 274, "fetch_localizer_button_task": 275, "fetch_localizer_calculation_task": 276, "fetch_localizer_contrast": 277, "fetch_localizer_first_level": 278, "fetch_megatrawls_netmat": 279, "fetch_mixed_gambl": 280, "fetch_miyawaki2008": 281, "fetch_neurovault": 282, "fetch_neurovault_auditory_computation_task": 283, "fetch_neurovault_id": 284, "fetch_neurovault_motor_task": 285, "fetch_oasis_vbm": 286, "fetch_openneuro_dataset": 287, "fetch_spm_auditori": 288, "fetch_spm_multimodal_fmri": 289, "fetch_surf_fsaverag": 290, "fetch_surf_nki_enhanc": 291, "fetcher": [23, 179], "few": [103, 171], "fiac": [210, 491], "field": 43, "figur": [107, 188, 500], "file": [2, 4, 16, 31, 59, 74, 190, 507], "filemesh": 479, "fill": [15, 507], "filter": [121, 192], "final": 171, "find": [96, 176, 187], "find_cut_slic": 430, "find_parcellation_cut_coord": 431, "find_probabilistic_atlas_cut_coord": 432, "find_xyz_cut_coord": 433, "finit": 67, "fir": 67, "first": [3, 4, 44, 63, 64, 65, 68, 70, 101, 103, 104, 113, 116, 171, 180, 187, 192, 210, 222, 491], "first_level": [332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 493], "first_level_from_bid": 335, "firstlevelmodel": [35, 65, 104, 332], "fisher": 58, "fit": [31, 33, 35, 36, 42, 46, 65, 71, 72, 73, 93, 104, 170, 180, 184], "fix": [73, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 183], "fixtur": 179, "flexibl": 59, "fmri": [3, 6, 37, 51, 52, 54, 61, 67, 70, 73, 78, 81, 82, 101, 102, 108, 111, 165, 166, 171, 181, 182, 207], "fmrib": 183, "fmriprep": [59, 373, 374, 496], "format": [7, 11, 190], "formula": 105, "frem": [33, 42, 173], "fremclassifi": 307, "fremregressor": 308, "from": [2, 3, 12, 16, 23, 25, 28, 30, 35, 42, 43, 44, 51, 52, 53, 59, 61, 65, 91, 93, 96, 101, 103, 105, 109, 110, 116, 120, 121, 166, 175, 190, 191, 192, 496, 497], "fsaverag": 211, "fsaverage3": 212, "fsaverage4": 213, "fsaverage5": 214, "fsaverage6": 215, "fsl": [183, 375, 496], "full": [165, 166, 171], "function": [16, 17, 20, 24, 26, 44, 47, 49, 50, 53, 54, 57, 69, 93, 102, 103, 116, 165, 166, 167, 169, 170, 174, 176, 179, 191, 193, 194, 493, 494, 496, 498, 499, 500, 502, 503, 504, 505, 507], "fund": 0, "further": [7, 47, 101, 120, 174, 176], "gambl": [42, 173, 223], "gap": 178, "gener": [35, 47, 64, 73, 74, 79, 93, 107, 118, 188, 194, 493], "get": [25, 58, 71, 107, 179], "get_bids_fil": 371, "get_clusters_t": 474, "get_data": 356, "get_data_dir": 292, "get_design_from_fslmat": 375, "get_projector": 428, "get_slic": 429, "github": [164, 188], "given": [16, 191], "glass": [14, 15, 17, 179], "glassbrainax": 403, "glm": [6, 26, 35, 63, 73, 76, 116, 181, 182, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 491, 493], "glob": [4, 190], "global": [12, 59], "glossari": 185, "glover_dispersion_deriv": 336, "glover_hrf": 337, "glover_time_deriv": 338, "go": [47, 101, 112, 120, 174], "goe": 179, "good": 171, "graph": [55, 57, 61, 166], "grid": 178, "group": [20, 51, 54, 56, 102, 113, 165, 178], "group_sparse_covari": 244, "groupsparsecovari": 241, "groupsparsecovariancecv": 242, "guid": 510, "guidelin": 179, "handl": 2, "harvard": [11, 217], "haxbi": [3, 19, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 101, 106, 171, 173, 218], "hcp": 198, "header": 105, "help": [179, 187], "hemispher": [14, 15], "hemodynam": 68, "here": [17, 44], "hierarch": 52, "hierarchicalkmean": 462, "high_variance_confound": [357, 478], "higher": [10, 68], "highlight": [126, 127, 129, 130, 131, 132, 133, 134, 135, 143, 144, 145, 148, 151, 154, 155, 156, 157, 158, 160, 161, 163], "hour": 508, "hous": [31, 32, 33, 38, 39, 106], "how": [179, 188, 192], "hrf": 180, "html": 179, "htmlreport": 473, "human": 28, "hyperparamet": 41, "i": [3, 7, 54, 102, 181, 187, 190, 192], "ica": [51, 107, 170], "icbm": 219, "idea": 179, "illustr": 25, "imag": [3, 4, 7, 9, 10, 16, 17, 18, 26, 30, 70, 83, 85, 87, 92, 95, 97, 98, 100, 105, 107, 111, 112, 114, 116, 120, 121, 175, 190, 191, 192, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 494, 497, 500, 507], "img_to_signals_label": 468, "img_to_signals_map": 469, "impact": [10, 59], "implement": 3, "import": [71, 508], "improv": 96, "impul": 67, "increas": 173, "independ": 108, "index": 111, "index_img": 358, "individu": 191, "infer": 45, "inflat": 23, "inform": 176, "initi": [73, 178], "inmemorymesh": 480, "input": [105, 190], "inspect": [3, 6, 72], "instal": [179, 508], "instanti": [35, 93], "integr": [164, 179], "interact": [17, 165, 166, 500, 507], "interest": [10, 96], "interfac": [59, 371, 372, 373, 374, 375, 496], "internet": [2, 190], "interpret": 170, "intersect_mask": 397, "intro": 6, "introduct": [3, 171, 181, 187], "invers": [55, 56, 165, 192], "inverse_transform": 120, "issu": [149, 163, 188], "iter": [50, 178], "iter_img": 359, "its": [11, 25], "itself": 44, "jimura": 42, "juelich": [11, 220], "kfold": 3, "kind": [54, 102], "kmean": 52, "known": [149, 163], "l1": 42, "label": [3, 12, 41, 59, 88, 188, 492], "languag": [203, 221], "larg": 111, "largest": 71, "largest_connected_component_img": 360, "latest": 508, "lean": 101, "learn": [0, 37, 41, 51, 52, 53, 101, 114, 120, 169, 170, 174, 187, 192], "leav": 3, "left": 15, "let": 44, "level": [3, 63, 64, 65, 68, 70, 76, 78, 79, 80, 81, 82, 83, 101, 104, 113, 116, 165, 171, 174, 180, 184, 210, 222, 491], "librari": 183, "licens": [197, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237], "like": [112, 190], "likelihoodmodelresult": 322, "linear": [172, 493], "link": [165, 508], "linkcheck": 164, "load": [3, 7, 14, 15, 19, 23, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 50, 51, 54, 59, 77, 93, 96, 101, 102, 106, 120, 168, 171, 190, 192, 496], "load_confound": 373, "load_confounds_strategi": 374, "load_fsaverag": 293, "load_fsaverage_data": 294, "load_img": 361, "load_mni152_brain_mask": 295, "load_mni152_gm_mask": 296, "load_mni152_gm_templ": 297, "load_mni152_templ": 298, "load_mni152_wm_mask": 299, "load_mni152_wm_templ": 300, "load_nki": 301, "load_sample_motor_activation_imag": 302, "load_surf_data": 485, "load_surf_mesh": 486, "local": [18, 74, 109, 110, 203, 204, 221, 222], "locat": 25, "long": 111, "look": [4, 11], "loop": [2, 3], "lprojector": 404, "lrprojector": 405, "lsa": 103, "lss": 103, "lyrprojector": 406, "lyrzprojector": 407, "lzrprojector": 408, "lzryprojector": 409, "machin": [3, 120, 187], "made": 171, "mainten": [179, 188], "make": [10, 17, 34, 179, 188], "make_first_level_design_matrix": 339, "make_glm_report": 475, "make_second_level_design_matrix": 347, "manipul": [4, 85, 116, 189, 191, 505], "manual": [3, 96, 119, 188, 191], "map": [6, 10, 13, 17, 18, 22, 32, 43, 45, 46, 50, 51, 58, 90, 96, 103, 107, 112, 121, 169, 171, 173, 177, 183, 184, 194, 223, 226, 228, 492, 507], "marker": [45, 507], "mask": [12, 16, 17, 19, 26, 27, 34, 38, 44, 68, 91, 93, 96, 101, 106, 107, 111, 114, 120, 171, 174, 176, 191, 192, 390, 391, 392, 393, 394, 395, 396, 397, 398, 498], "masker": [24, 93, 114, 192, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 492, 497], "maskwarn": 316, "mass": [45, 499], "mass_univari": [399, 499], "massiv": [45, 106, 109, 110, 176], "match": [190, 191], "math_img": [92, 105, 362], "matplotlib": [13, 36], "matric": [28, 56, 66, 103, 169, 192, 198], "matrix": [3, 33, 37, 52, 55, 57, 59, 61, 80, 114, 165, 166, 180], "maximum": 178, "maxprob": 166, "mean": [87, 181, 183], "mean_img": 363, "mean_scal": 340, "measur": [3, 50, 101, 171, 174], "megatrawl": [28, 198], "memori": [111, 190], "mesh": [7, 10, 25, 507], "meshdimensionerror": 317, "messag": 164, "meta": 112, "method": [52, 120], "min_siz": 88, "minu": 112, "mix": [42, 173, 223], "miyawaki": [43, 44, 224], "mni": [91, 219, 272, 273, 295, 296, 297, 298, 299, 300], "mode": [21, 61, 64, 88, 89, 507], "model": [3, 43, 45, 65, 67, 68, 69, 71, 72, 73, 77, 78, 79, 81, 82, 103, 104, 113, 170, 172, 173, 174, 180, 181, 184, 493], "modifi": [105, 178], "modul": [66, 71, 74], "monitor": 179, "more": [16, 18, 174], "morphometri": [45, 46, 77, 184, 228], "mosaicslic": [16, 410], "most": [54, 71, 102], "motion": 59, "motor": 109, "movi": [168, 169], "mri": 69, "msdl": [21, 54, 102, 225], "multi": [37, 41, 56, 170, 172], "multimod": 235, "multiniftilabelsmask": [192, 377], "multiniftimapsmask": [192, 378], "multiniftimask": [192, 379], "multipl": [4, 10, 16, 165, 181, 184, 192], "multiscal": [20, 202], "multisurfacelabelsmask": 380, "multisurfacemapsmask": 381, "multisurfacemask": [192, 382], "multivari": [108, 196], "mvpa": 175, "name": 190, "nativ": 72, "negat": 92, "nest": 36, "net": 46, "network": [28, 53, 61, 64, 89, 170, 198], "neuroimag": [27, 120, 172, 187, 190, 192], "neurospin": 74, "neurosynth": 121, "neurovault": [107, 112, 121, 226], "new": [127, 128, 129, 130, 136, 138, 139, 140, 141, 148, 149, 150, 151, 154, 155, 156, 157, 158, 160, 161, 163, 188], "new_img_lik": 364, "nifti": [3, 58, 190, 191, 492], "niftilabelsmask": [93, 192, 383], "niftilablesmask": 93, "niftimapsmask": [192, 384], "niftimask": [91, 94, 111, 192, 385], "niftispheresmask": [192, 386], "nightly_depend": 164, "niimg": [2, 190], "nilearn": [0, 4, 13, 14, 15, 16, 17, 22, 170, 171, 179, 186, 187, 189, 193, 194, 195, 196, 219, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 508, 511], "nilearn_data": 190, "nki": 227, "node": 10, "nois": 68, "non": 120, "non_parametric_infer": 348, "norm": 178, "note": [197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237], "notimplementedwarn": 318, "now": [37, 55, 57], "number": [16, 178], "numer": [5, 178], "numpi": 111, "oasi": [45, 46, 77, 228], "object": [16, 21, 31, 33, 36, 65, 104, 170, 179, 190, 192], "obtain": [31, 65, 104], "ol": [68, 106], "olsmodel": 323, "one": [2, 53, 65, 81, 191], "onli": [16, 53, 192], "opaqu": 26, "open": [190, 192], "openneuro": 65, "oper": [191, 502], "optim": 41, "option": 15, "order": 68, "organ": 188, "origin": 88, "orthoprojector": 411, "orthoslic": [16, 412], "other": [0, 22, 26, 174], "our": [4, 44], "out": 3, "outlin": [10, 16], "output": [65, 77, 93, 121, 190], "over": [4, 12, 50], "overlai": [16, 507], "own": [11, 120], "oxford": [11, 217], "page": [165, 166, 169, 170, 180, 183, 184], "pair": 82, "panda": 190, "paradigm": [6, 80, 112], "parallel": 111, "paramet": [10, 36, 64, 66, 68, 69, 70, 88, 101, 103, 165, 172, 174, 192], "parametr": [66, 74, 183], "parcel": [20, 23, 50, 52, 59, 166, 168, 169, 463], "parse_bids_filenam": 372, "part": 26, "partial": [54, 61], "patch_openneuro_dataset": 303, "path": 190, "pattern": [12, 47], "pauli": 229, "pcp": 197, "percentil": 36, "perform": [6, 58, 64, 70, 83, 101, 106, 171, 173, 174, 179], "permut": [101, 106], "permuted_ol": 399, "phenotyp": 190, "philosophi": 192, "pial": 23, "pipelin": [31, 35, 36, 41, 114, 119, 120, 173, 174, 192], "plot": [3, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 25, 26, 33, 34, 36, 37, 47, 50, 53, 58, 61, 68, 69, 71, 82, 93, 112, 114, 179, 188, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 500, 507], "plot_anat": [17, 434], "plot_bland_altman": 435, "plot_carpet": 436, "plot_connectom": 437, "plot_contrast_matrix": 438, "plot_design_matrix": 439, "plot_design_matrix_correl": 440, "plot_epi": [17, 441], "plot_ev": 442, "plot_glass_brain": [17, 443], "plot_img": 444, "plot_img_comparison": 445, "plot_img_on_surf": 446, "plot_mark": 447, "plot_matrix": 448, "plot_prob_atla": [21, 449], "plot_roi": [17, 450], "plot_stat_map": [17, 21, 451], "plot_surf": 452, "plot_surf_contour": 453, "plot_surf_roi": 454, "plot_surf_stat_map": [455, 507], "plotlysurfacefigur": 413, "point": [25, 192], "polici": 188, "polydata": 481, "polymesh": 482, "posit": 78, "post": 188, "power": [54, 102, 230], "pr": 179, "pre": 179, "prec_to_parti": 245, "precis": 56, "predefin": 59, "predict": [3, 30, 31, 36, 37, 44, 45, 46, 71, 101, 102, 116, 171, 172, 175, 180], "prepar": [34, 37, 38, 44, 64, 70, 83, 103, 171, 176, 188, 191, 192], "preprocess": [41, 45, 73, 120, 194, 202, 504], "primer": 181, "principl": [176, 178], "prior": 46, "privat": 179, "probabilist": [21, 22, 50, 57, 166, 194], "process": [93, 494], "produc": 58, "project": [15, 28, 70, 179, 188], "projector": 500, "proper": 35, "proport": 78, "protocol": 112, "pull": [164, 179, 188], "put": 171, "pypi": 188, "python": [5, 164, 190], "qualiti": [45, 46, 96], "quantifi": 44, "question": 179, "quick": 104, "quickstart": 508, "r": 71, "radiu": 176, "rang": 73, "raw": 91, "rc": [148, 163], "read": [7, 176, 190], "recept": 43, "recognit": [33, 38, 47, 106], "recommend": 179, "reconstruct": 44, "recursive_neighbor_agglomer": 470, "reduct": 171, "refer": [3, 23, 24, 26, 33, 34, 39, 40, 43, 44, 47, 50, 51, 52, 54, 59, 61, 74, 78, 101, 102, 103, 106, 121, 165, 166, 168, 169, 170, 171, 172, 173, 176, 177, 178, 185, 187, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 495], "region": [10, 53, 54, 56, 57, 64, 88, 89, 90, 93, 96, 166, 168, 169, 192, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 502], "regionextractor": 465, "regress": 172, "regressionresult": 324, "regressor": 66, "regular": 173, "relabel": 88, "relat": [170, 177], "releas": [188, 508], "remov": [59, 68, 192], "rena": [52, 464], "reorder_img": 365, "report": [35, 61, 64, 65, 73, 93, 179, 473, 474, 475, 491, 492, 503], "repositori": 121, "represent": [52, 168, 190], "request": [164, 179, 188], "resampl": [86, 91, 95, 191, 192, 494], "resample_img": 366, "resample_to_img": 367, "reshap": 107, "residu": [71, 180], "resiz": 192, "resolut": [10, 191, 192], "respons": [36, 39, 67, 68, 69], "rest": [165, 166, 167], "restart": 178, "restrict": [3, 38, 39, 106], "result": [4, 24, 26, 31, 34, 41, 53, 56, 65, 72, 77, 82, 83, 120, 168, 169, 170, 171], "retriev": [3, 6, 11, 18, 20, 24, 31, 55, 57, 59, 61, 68, 93, 101], "return": 16, "review": 179, "right": [15, 17, 103, 172], "robust": 173, "roi": [17, 24, 34, 54, 96, 191], "row": 16, "rprojector": 414, "run": [6, 35, 44, 47, 68, 72, 73, 107, 164, 174, 181], "run_glm": 341, "sagitt": [14, 16], "sampl": [10, 25, 69, 81, 82], "saniti": 104, "save": [4, 7, 16, 58, 65, 77, 507], "save_glm_to_bid": 345, "savefig": 16, "scale": [119, 507], "schaefer": 231, "scheme": 25, "scikit": [0, 37, 41, 101, 114, 120, 174, 192], "scipi": 291, "scope": 179, "score": [3, 6, 31, 36, 37, 38, 43, 176], "screen": 36, "script": 171, "scrub": 59, "search": 178, "searchlight": [38, 39, 176, 309], "second": [76, 78, 79, 80, 81, 82, 83, 104, 113, 116, 184, 491], "second_level": [346, 347, 348, 493], "secondlevelmodel": 346, "see": [211, 212, 213, 214, 215, 216, 219], "seed": [16, 24, 58, 61, 64, 179, 192], "seitzman": 232, "select": [2, 41, 101, 121, 165, 171], "select_from_index": 304, "separ": [12, 88], "seri": [24, 27, 55, 57, 58, 61, 71, 91, 103, 111, 166, 180, 192, 504], "set": [17, 23, 36, 73, 111, 172, 174, 176, 179], "sever": 172, "shape": [190, 191], "share": 111, "short": 114, "show": [40, 103, 456], "side": 17, "signal": [35, 54, 56, 57, 59, 61, 93, 166, 192, 476, 477, 478, 497, 504], "signals_to_img_label": 471, "signals_to_img_map": 472, "signific": [6, 71], "simpl": [4, 34, 47, 65, 73, 80, 83, 94, 171], "simpleregressionresult": 325, "simul": [47, 60, 165, 174], "singl": [6, 16, 58, 72], "size": 191, "slice": [16, 47, 507], "slicer": 500, "smith": [89, 233], "smooth": [4, 68, 97, 191, 192], "smooth_img": 368, "softwar": 183, "some": 83, "sourceri": 164, "space": [46, 72, 165], "spacenet": [42, 46, 177], "spacenetclassifi": 310, "spacenetregressor": 311, "spars": [55, 56, 165, 178], "spatial": [51, 173, 177, 191], "special": 191, "specif": [53, 73, 121, 164, 191], "specifi": 6, "sphere": [61, 176, 492], "spm": [176, 183, 234, 235], "spm_dispersion_deriv": 342, "spm_hrf": 343, "spm_time_deriv": 344, "squar": 71, "stabil": 178, "stabl": [188, 202], "standard": 103, "state": 167, "statist": [6, 10, 17, 65, 73, 83, 90, 96, 100, 112, 116, 121, 181, 183, 184, 194, 223, 226, 507], "step": [4, 187, 192], "stimuli": [40, 43, 44], "stimulu": 69, "stop": [112, 178], "store": 190, "strategi": [37, 59, 171, 192], "strength": 61, "structur": [35, 60, 177, 179], "studi": [3, 54, 101, 107, 112, 173], "style": 179, "subject": [6, 54, 56, 58, 65, 72, 81, 113, 165, 170, 192], "success": 112, "summar": 34, "summari": [61, 136, 163, 165, 166, 169, 170, 180, 183, 184], "support": 3, "surfac": [7, 10, 23, 24, 25, 39, 70, 113, 114, 132, 163, 180, 192, 227, 479, 480, 481, 482, 483, 484, 485, 486, 487, 491, 492, 505, 507], "surfaceimag": 483, "surfacelabelsmask": [114, 192, 387], "surfacemapsmask": [192, 388], "surfacemask": [192, 389], "surfacemesh": 484, "svc": 101, "svm": [3, 31, 101, 171, 174], "swap_img_hemispher": 369, "sym_matrix_to_vec": 246, "synthet": 178, "t": [83, 90], "t_map": 81, "tabl": [11, 510], "talairach": 236, "tangent": 165, "target": 191, "task": [74, 103, 109, 110], "tcontrastresult": 326, "team": 0, "technic": [25, 198, 279], "templat": [91, 95, 194, 211, 212, 213, 214, 215, 219, 272, 273, 295, 296, 297, 298, 299, 300], "tempor": 192, "term": [107, 198, 279], "test": [6, 71, 81, 82, 83, 96, 101, 179, 188], "test_atlas": 164, "test_with_free_threaded_python": 164, "test_with_tox": 164, "testing_instal": 164, "testing_minimum": 164, "text": 190, "them": 188, "thi": 96, "those": 52, "three": [16, 103], "threshold": [6, 17, 26, 65, 98, 184], "threshold_img": 370, "threshold_stats_img": 349, "through": 2, "tiledslic": [16, 415], "time": [8, 12, 24, 27, 29, 48, 55, 57, 58, 61, 62, 64, 68, 71, 75, 84, 91, 99, 111, 115, 117, 166, 178, 180, 187, 192, 504, 509], "tissu": 12, "togeth": 171, "tool": [16, 17], "toolbox": 183, "top": 10, "total": 165, "tox": 188, "train": [32, 41], "transform": [58, 191, 192], "transpar": 26, "trial": 103, "trigger_hosting_on_pr": 164, "true": [78, 98], "tsv": 74, "tune": 101, "turn": [3, 52], "tutori": [1, 2, 3, 116], "tv": 42, "two": [16, 72, 73, 82, 172], "two_sid": 98, "type": 12, "u": 44, "understand": [41, 68, 91, 190, 192], "univari": [45, 106, 109, 110, 176, 499], "unmask": [120, 192, 398], "unpair": 82, "up": [11, 73, 119, 176, 179], "update_author": 164, "upload": 188, "us": [3, 10, 36, 37, 42, 51, 53, 54, 59, 73, 89, 90, 93, 94, 101, 111, 114, 121, 168, 169, 171, 174, 182, 187, 188, 190, 240, 242, 249, 251, 252, 254, 255, 256, 257, 258, 261, 262, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 292, 293, 294, 295, 296, 298, 299, 301, 302, 304, 305, 306, 307, 308, 309, 311, 312, 313, 327, 329, 332, 334, 335, 339, 345, 346, 347, 348, 349, 351, 352, 353, 356, 357, 358, 359, 361, 362, 363, 364, 366, 367, 368, 370, 373, 374, 375, 376, 377, 378, 379, 383, 384, 385, 386, 387, 389, 390, 393, 398, 399, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 463, 465, 466, 467, 473, 474, 479, 480, 481, 482, 483, 484, 487, 507], "usag": [119, 192, 228, 286], "user": [190, 510], "util": [488, 489, 490, 494, 498, 506], "v": [31, 32, 33, 38, 106], "valid": [3, 31, 36, 37, 41, 101, 169, 171, 174, 176, 178], "valu": [36, 178], "variabl": 54, "variat": 178, "vbm": [45, 46, 77], "vec_to_sym_matrix": 247, "vector": 3, "version": [164, 508], "via": [31, 41, 164], "view": [10, 16, 23, 24, 72, 77], "view_connectom": 457, "view_img": [17, 458], "view_img_on_surf": [459, 507], "view_mark": 460, "view_surf": [461, 507], "visual": [2, 3, 9, 10, 11, 12, 17, 20, 21, 22, 23, 27, 28, 31, 32, 33, 38, 39, 42, 43, 44, 45, 46, 52, 55, 57, 61, 65, 83, 86, 93, 101, 106, 112, 116, 120, 168, 169, 170, 171, 176, 192, 507], "vmax": 17, "vmin": 17, "vol_to_surf": [25, 487], "volum": [2, 3, 4, 10, 25, 27, 68, 85, 116, 189, 191, 192, 228, 491], "voxel": [6, 45, 46, 58, 77, 96, 176, 184, 191], "ward": 52, "warm": 178, "warn": 239, "watch": [168, 169], "we": [34, 37, 44, 179, 181], "web": [10, 23, 55, 57, 61], "weight": [3, 33, 42, 101, 171], "what": [3, 7, 54, 102, 163, 179, 181, 187], "when": [18, 98, 190], "where": 190, "which": [25, 168], "who": 179, "whole": 14, "within": 61, "without": [17, 59, 98, 101, 171, 174], "work": [7, 111], "workflow": 164, "would": 25, "xprojector": 416, "xslicer": [16, 417], "xzprojector": 418, "xzslicer": [16, 419], "yeo": [50, 88, 237], "yml": 164, "your": [103, 120, 179], "yprojector": 420, "yslicer": [16, 421], "yxprojector": 422, "yxslicer": [16, 423], "yzprojector": 424, "yzslicer": [16, 425], "z": [6, 58, 112], "zprojector": 426, "zslicer": [16, 427]}})