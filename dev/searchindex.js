Search.setIndex({"alltitles": {"0.1.0": [[119, null], [158, "id5996"]], "0.1.1": [[120, null], [158, "id5833"]], "0.1.2": [[121, null], [158, "id5670"]], "0.1.3": [[122, null], [158, "id5506"]], "0.1.4": [[123, null], [158, "id5343"]], "0.10.0": [[124, null], [158, "id1161"]], "0.10.1": [[125, null], [158, "id992"]], "0.10.1rc1": [[125, "rc1"], [158, "rc1"]], "0.10.2": [[126, null], [158, "id825"]], "0.10.3": [[127, null], [158, "id658"]], "0.10.4": [[128, null], [158, "id492"]], "0.11.0": [[129, null], [158, "id326"]], "0.11.1": [[130, null], [158, "id162"]], "0.11.2.dev": [[156, null], [158, "dev"]], "0.2.0": [[131, null], [158, "id5176"]], "0.2.1": [[132, null], [158, "v0-2-1"]], "0.2.2": [[133, null], [158, "id5007"]], "0.2.3": [[134, null], [158, "id4844"]], "0.2.4": [[135, null], [158, "id4680"]], "0.2.5": [[136, "id2"], [158, "id4516"]], "0.2.5.1": [[136, null], [158, "id4512"]], "0.2.6": [[137, null], [158, "id4347"]], "0.3.0": [[138, null], [158, "id4177"]], "0.3.0 beta": [[138, "beta"], [158, "id4181"]], "0.3.1": [[139, null], [158, "id4011"]], "0.4.0": [[140, null], [158, "id3844"]], "0.4.1": [[141, null], [158, "id3680"]], "0.4.2": [[142, null], [158, "id3516"]], "0.5.0": [[143, null], [158, "id3337"]], "0.5.0 alpha": [[143, "alpha"], [158, "alpha"]], "0.5.0 beta": [[143, "beta"], [158, "beta"]], "0.5.0 rc": [[143, "rc"], [158, "id3341"]], "0.5.1": [[144, null], [158, "id3171"]], "0.5.2": [[145, null], [158, "id3006"]], "0.6.0": [[146, null], [158, "id2826"]], "0.6.0a0": [[146, "a0"], [158, "a0"]], "0.6.0b0": [[146, "b0"], [158, "b0"]], "0.6.0rc": [[146, "rc"], [158, "rc"]], "0.6.1": [[147, null], [158, "id2661"]], "0.6.2": [[148, null], [158, "id2496"]], "0.7.0": [[149, null], [158, "id2329"]], "0.7.1": [[150, null], [158, "id2163"]], "0.8.0": [[151, null], [158, "id1996"]], "0.8.1": [[152, null], [158, "id1829"]], "0.9.0": [[153, null], [158, "id1662"]], "0.9.1": [[154, null], [158, "id1497"]], "0.9.2": [[155, null], [158, "id1328"]], "3D Plots of connectomes": [[486, "d-plots-of-connectomes"]], "3D Plots of markers": [[486, "d-plots-of-markers"]], "3D Plots of statistical maps or atlases on the cortical surface": [[486, "d-plots-of-statistical-maps-or-atlases-on-the-cortical-surface"]], "3D and 4D niimgs: handling and visualizing": [[2, null]], "3D visualization in a web browser": [[10, "d-visualization-in-a-web-browser"], [23, "d-visualization-in-a-web-browser"], [54, "d-visualization-in-a-web-browser"], [56, "d-visualization-in-a-web-browser"], [60, "d-visualization-in-a-web-browser"]], "A few definitions": [[165, "a-few-definitions"]], "A first contrast estimation and plotting": [[67, "a-first-contrast-estimation-and-plotting"]], "A first estimator": [[165, "a-first-estimator"]], "A first step: looking at our data": [[4, "a-first-step-looking-at-our-data"]], "A function to generate data": [[46, "a-function-to-generate-data"]], "A functional connectome: a graph of interactions": [[160, "a-functional-connectome-a-graph-of-interactions"]], "A functional connectome: extracting coordinates of regions": [[160, "a-functional-connectome-extracting-coordinates-of-regions"]], "A introduction tutorial to fMRI decoding": [[3, null]], "A primer on BOLD-fMRI data analysis": [[175, "a-primer-on-bold-fmri-data-analysis"]], "A short demo of the surface images & maskers": [[111, null]], "A simple function to plot slices": [[46, "a-simple-function-to-plot-slices"]], "AAL atlas": [[193, null]], "ABIDE PCP dataset": [[191, null]], "ADHD": [[472, "adhd"]], "ADHD dataset": [[194, null]], "ANOVA pipeline with Decoder object": [[30, "anova-pipeline-with-decoder-object"], [35, "anova-pipeline-with-decoder-object"]], "API References": [[476, null]], "API changes summary": [[131, "api-changes-summary"], [158, "api-changes-summary"]], "APIs of nilearn objects": [[173, "apis-of-nilearn-objects"]], "Access": [[191, "access"], [192, "access"], [193, "access"], [194, "access"], [195, "access"], [196, "access"], [198, "access"], [199, "access"], [200, "access"], [201, "access"], [202, "access"], [203, "access"], [204, "access"], [205, "access"], [206, "access"], [207, "access"], [208, "access"], [209, "access"], [211, "access"], [212, "access"], [213, "access"], [214, "access"], [215, "access"], [216, "access"], [217, "access"], [218, "access"], [219, "access"], [221, "access"], [222, "access"], [223, "access"], [224, "access"], [225, "access"], [226, "access"], [227, "access"], [228, "access"], [229, "access"], [230, "access"], [231, "access"]], "Accessing individual volumes in 4D images": [[185, "accessing-individual-volumes-in-4d-images"]], "Adding a time derivative to the design": [[67, "adding-a-time-derivative-to-the-design"]], "Adding atlases and datasets": [[173, "adding-atlases-and-datasets"]], "Adding overlays, edges, contours, contour fillings, markers, scale bar": [[486, "adding-overlays-edges-contours-contour-fillings-markers-scale-bar"]], "Additional cases": [[173, "additional-cases"]], "Adjust the sample locations": [[25, "adjust-the-sample-locations"]], "Advanced decoding using scikit learn": [[99, null]], "Advanced statistical analysis of brain images": [[98, null], [113, "advanced-statistical-analysis-of-brain-images"]], "Advanced usage: manual pipelines and scaling up": [[116, null]], "Advanced: Design philosophy of \u201cMaskers\u201d": [[186, null]], "Advanced: scikit-learn Pipelines": [[186, null]], "After mask computation: extracting time series": [[90, "after-mask-computation-extracting-time-series"]], "Aggregate beta maps from the LSA model based on condition": [[101, "aggregate-beta-maps-from-the-lsa-model-based-on-condition"]], "Allen 2011 atlas": [[195, null]], "An alternative to ICA: Dictionary learning": [[164, "an-alternative-to-ica-dictionary-learning"]], "An exercise to go further": [[46, "an-exercise-to-go-further"]], "An introduction to GLMs in fMRI statistical analysis": [[175, null]], "An introduction to decoding": [[165, null]], "Analysis of an fMRI dataset with a Finite Impule Response (FIR) model": [[66, null]], "Analyze data": [[76, "analyze-data"]], "Analyzing fMRI using GLMs": [[176, null]], "And now display the corresponding graph": [[54, "and-now-display-the-corresponding-graph"], [54, "id1"], [56, "and-now-display-the-corresponding-graph"]], "Annotating plots": [[16, "annotating-plots"]], "Answer questions": [[173, "answer-questions"]], "Applications of beta series": [[101, "applications-of-beta-series"]], "Apply CanICA on the data": [[50, "apply-canica-on-the-data"]], "Applying a mask": [[117, "applying-a-mask"]], "Applying a scikit-learn machine learning method": [[117, "applying-a-scikit-learn-machine-learning-method"]], "Applying clustering": [[162, "applying-clustering"]], "Applying the mask to extract the corresponding time series": [[26, "applying-the-mask-to-extract-the-corresponding-time-series"]], "Atlases": [[188, "atlases"]], "Atlases descriptions": [[188, "atlases-descriptions"]], "Automatically computing a mask": [[117, "automatically-computing-a-mask"]], "Available Colormaps": [[486, "available-colormaps"]], "Available documentation for Nilearn": [[490, null]], "Axes": [[481, "axes"]], "BASC multiscale atlas": [[196, null]], "BIDS dataset first and second level analysis": [[102, null]], "BIDS features": [[472, "bids-features"]], "BIDS language localizer": [[197, null]], "Bagging several models": [[166, "bagging-several-models"]], "Basic Atlas plotting": [[11, null]], "Basic nilearn example: manipulating and looking at data": [[4, null]], "Basic numerics and plotting with Python": [[5, null]], "Basic tutorials": [[1, null], [113, "basic-tutorials"]], "Beta-Series Modeling for Task-Based Functional Connectivity and Decoding": [[101, null]], "Bootstrap Analysis of Stable Clusters": [[196, "bootstrap-analysis-of-stable-clusters"]], "Bounds on alpha": [[172, "bounds-on-alpha"]], "Brain mapping with mass univariate": [[44, "brain-mapping-with-mass-univariate"]], "Brain maps using Dictionary learning": [[163, "brain-maps-using-dictionary-learning"]], "Brain parcellations": [[160, "brain-parcellations"]], "Brain parcellations with Hierarchical KMeans Clustering": [[51, "brain-parcellations-with-hierarchical-kmeans-clustering"]], "Brain parcellations with KMeans Clustering": [[51, "brain-parcellations-with-kmeans-clustering"]], "Brain parcellations with ReNA Clustering": [[51, "brain-parcellations-with-rena-clustering"]], "Brain parcellations with Ward Clustering": [[51, "brain-parcellations-with-ward-clustering"]], "Brainomics Localizer": [[198, null]], "Breaking an atlas of labels in separated regions": [[87, null]], "Bug fixes": [[131, "bug-fixes"], [134, "bug-fixes"], [141, "bug-fixes"], [158, "bug-fixes"], [158, "id4845"], [158, "id5180"]], "Build a mask from this statistical map (Improving the quality of the mask)": [[95, "build-a-mask-from-this-statistical-map-improving-the-quality-of-the-mask"]], "Build a mesh (of a cylinder)": [[25, "build-a-mesh-of-a-cylinder"]], "Build a proper event structure for each run": [[34, "build-a-proper-event-structure-for-each-run"]], "Build a statistical test to find voxels of interest": [[95, "build-a-statistical-test-to-find-voxels-of-interest"]], "Build and deploy the documentation manually": [[182, "build-and-deploy-the-documentation-manually"]], "Build and display a correlation matrix": [[56, "build-and-display-a-correlation-matrix"]], "Build of stable docs": [[182, "build-of-stable-docs"]], "Build the decoders, using scikit-learn": [[36, "build-the-decoders-using-scikit-learn"]], "Build the decoding pipeline": [[34, "build-the-decoding-pipeline"]], "Build the distributions and upload them to Pypi": [[182, "build-the-distributions-and-upload-them-to-pypi"]], "Building documentation": [[173, "building-documentation"]], "Building the encoding models": [[42, "building-the-encoding-models"]], "Building your own neuroimaging machine-learning pipeline": [[117, null]], "CHANGES": [[146, "changes"], [158, "id2830"]], "Calculate and Plot F-test": [[70, "calculate-and-plot-f-test"]], "Calculate and plot contrast": [[70, "calculate-and-plot-contrast"]], "Calculating seed-based functional connectivity": [[24, "calculating-seed-based-functional-connectivity"]], "Changelog": [[119, "changelog"], [120, "changelog"], [121, "changelog"], [122, "changelog"], [131, "changelog"], [132, "changelog"], [134, "changelog"], [158, "changelog"], [158, "id5014"], [158, "id5177"], [158, "id5507"], [158, "id5671"], [158, "id5834"], [158, "id5997"], [173, "changelog"]], "Changes": [[124, "changes"], [125, "changes"], [125, "id4"], [126, "changes"], [127, "changes"], [128, "changes"], [129, "changes"], [133, "changes"], [135, "changes"], [136, "changes"], [137, "changes"], [138, "changes"], [138, "id2"], [139, "changes"], [140, "changes"], [141, "changes"], [142, "changes"], [143, "changes"], [143, "id3"], [143, "id6"], [143, "id10"], [144, "changes"], [146, "id3"], [146, "id7"], [146, "id11"], [148, "changes"], [149, "changes"], [151, "changes"], [152, "changes"], [153, "changes"], [154, "changes"], [155, "changes"], [156, "changes"], [158, "changes"], [158, "id330"], [158, "id496"], [158, "id663"], [158, "id830"], [158, "id996"], [158, "id999"], [158, "id1166"], [158, "id1335"], [158, "id1500"], [158, "id1667"], [158, "id1834"], [158, "id2001"], [158, "id2334"], [158, "id2499"], [158, "id2833"], [158, "id2838"], [158, "id2842"], [158, "id3173"], [158, "id3340"], [158, "id3344"], [158, "id3349"], [158, "id3353"], [158, "id3517"], [158, "id3682"], [158, "id3848"], [158, "id4013"], [158, "id4178"], [158, "id4183"], [158, "id4350"], [158, "id4513"], [158, "id4682"], [158, "id5011"]], "Changing the drift model": [[67, "changing-the-drift-model"]], "Changing the feature selection": [[99, "changing-the-feature-selection"]], "Changing the hemodynamic response model": [[67, "changing-the-hemodynamic-response-model"]], "Changing the prediction engine": [[99, "changing-the-prediction-engine"]], "Changing the views to \u2018coronal\u2019, \u2018sagittal\u2019 views with coordinates": [[16, "changing-the-views-to-coronal-sagittal-views-with-coordinates"]], "Check installation": [[487, "check-installation"]], "Choice of the prediction accuracy measure": [[165, "choice-of-the-prediction-accuracy-measure"]], "Choosing a good cross-validation strategy": [[165, "choosing-a-good-cross-validation-strategy"]], "Choosing the right model for your analysis": [[101, null]], "Choosing the right predictive model for neuroimaging": [[166, null]], "Citing nilearn": [[0, "citing-nilearn"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Classes": [[187, "classes"], [189, "classes"], [190, "classes"], [474, "classes"], [474, "id1"], [474, "id3"], [478, "classes"], [481, "classes"], [482, "classes"], [483, "classes"], [485, "classes"]], "Classification of age groups using functional connectivity": [[53, null]], "Classification: two classes or multi-class": [[166, "classification-two-classes-or-multi-class"]], "Classifier": [[170, "classifier"]], "Closing policy": [[182, "closing-policy"]], "Clustering methods to learn a brain parcellation from fMRI": [[51, null]], "Clustering to parcellate the brain in regions": [[162, null]], "Code": [[167, null], [167, null], [185, null]], "Code examples": [[129, null], [158, null], [486, null]], "Code of Conduct": [[173, "code-of-conduct"]], "Coding Style": [[173, "coding-style"]], "Common data preparation steps: smoothing, filtering, resampling": [[186, "common-data-preparation-steps-smoothing-filtering-resampling"]], "Compare CanICA to dictionary learning": [[50, "compare-canica-to-dictionary-learning"]], "Compare Hierarchical Kmeans clusters with those from Kmeans": [[51, "compare-hierarchical-kmeans-clusters-with-those-from-kmeans"]], "Compare run-specific and fixed effects contrasts": [[72, "compare-run-specific-and-fixed-effects-contrasts"]], "Compare the results": [[40, "compare-the-results"]], "Compare the three modeling approaches": [[101, "compare-the-three-modeling-approaches"]], "Comparing connectomes on different reference atlases": [[49, null]], "Comparing the different approaches on simulated data": [[159, "comparing-the-different-approaches-on-simulated-data"]], "Comparing the means of 2 images": [[86, null]], "Comparing to massively univariate analysis: F_score or SPM": [[170, "comparing-to-massively-univariate-analysis-f-score-or-spm"]], "Compressed representation": [[162, "compressed-representation"]], "Compressed representation of ReNA clustering": [[51, "compressed-representation-of-rena-clustering"]], "Compressed representation of Ward clustering": [[51, "compressed-representation-of-ward-clustering"]], "Computation times": [[8, null], [28, null], [47, null], [61, null], [74, null], [83, null], [97, null], [112, null], [114, null], [488, null]], "Compute a range of contrasts across both runs": [[72, "compute-a-range-of-contrasts-across-both-runs"]], "Compute and display a correlation matrix": [[58, "compute-and-display-a-correlation-matrix"]], "Compute and resample a mask": [[90, "compute-and-resample-a-mask"]], "Compute correlation coefficients": [[52, "compute-correlation-coefficients"]], "Compute partial correlation matrix": [[60, "compute-partial-correlation-matrix"]], "Compute prediction scores with different values of screening percentile": [[35, "compute-prediction-scores-with-different-values-of-screening-percentile"]], "Compute statistics": [[109, "compute-statistics"]], "Compute the sparse inverse covariance": [[54, "compute-the-sparse-inverse-covariance"]], "Compute within spheres averaged time-series": [[60, "compute-within-spheres-averaged-time-series"]], "Computing a Region of Interest (ROI) mask manually": [[95, null]], "Computing a connectome with sparse inverse covariance": [[54, null]], "Computing a mask from raw EPI data": [[90, "computing-a-mask-from-raw-epi-data"]], "Computing a mask from the background": [[90, "computing-a-mask-from-the-background"]], "Computing and applying spatial masks": [[185, "computing-and-applying-spatial-masks"]], "Computing contrasts": [[174, "computing-contrasts"]], "Computing functional connectivity matrices": [[163, "computing-functional-connectivity-matrices"]], "Computing group-sparse precision matrices": [[55, "computing-group-sparse-precision-matrices"]], "Computing the mask from the MNI template": [[90, "computing-the-mask-from-the-mni-template"]], "Conclusion": [[67, "conclusion"]], "Connectivity structure estimation on simulated data": [[59, null]], "Connectivity with a surface atlas and SurfaceLabelsMasker": [[111, "connectivity-with-a-surface-atlas-and-surfacelabelsmasker"]], "Connectome extracted from Dosenbach\u2019s atlas": [[60, "connectome-extracted-from-dosenbach-s-atlas"]], "Connectome extraction: inverse covariance for direct connections": [[159, null]], "Content": [[191, "content"], [192, "content"], [193, "content"], [194, "content"], [195, "content"], [196, "content"], [198, "content"], [199, "content"], [200, "content"], [201, "content"], [202, "content"], [203, "content"], [204, "content"], [205, "content"], [206, "content"], [207, "content"], [208, "content"], [209, "content"], [210, null], [211, "content"], [212, "content"], [213, "content"], [214, "content"], [215, "content"], [216, "content"], [217, "content"], [218, "content"], [219, "content"], [220, "content"], [221, "content"], [222, "content"], [223, "content"], [224, "content"], [225, "content"], [226, "content"], [227, "content"], [228, "content"], [229, "content"], [230, "content"], [231, "content"]], "Continuous integration": [[173, "continuous-integration"]], "Contribute code": [[173, "contribute-code"]], "Contributing": [[173, null], [173, "id5"]], "Contribution Guidelines": [[173, "contribution-guidelines"]], "Contributors": [[131, "contributors"], [133, "contributors"], [136, "contributors"], [140, "contributors"], [143, "contributors"], [143, "id7"], [143, "id11"], [144, "contributors"], [145, "contributors"], [146, "contributors"], [146, "id9"], [146, "id13"], [147, "contributors"], [148, "contributors"], [158, "contributors"], [158, "id2664"], [158, "id2835"], [158, "id2840"], [158, "id2844"], [158, "id3009"], [158, "id3175"], [158, "id3345"], [158, "id3350"], [158, "id3354"], [158, "id3849"], [158, "id4518"], [158, "id5012"], [158, "id5181"]], "Controlling how the mask is computed from the data": [[186, "controlling-how-the-mask-is-computed-from-the-data"]], "Controlling the contrast of the background when plotting": [[18, null]], "Convert the multi-class labels to binary labels": [[40, "convert-the-multi-class-labels-to-binary-labels"]], "Coordinates of Default Mode Network": [[60, "coordinates-of-default-mode-network"]], "Copying headers from input images with math_img": [[103, null]], "Core developers": [[0, "core-developers"]], "Correlation between regressors": [[65, "correlation-between-regressors"]], "Cortical surface-based searchlight decoding": [[38, null]], "Craddock 2012 atlas": [[199, null]], "Create a second level design matrix": [[79, "create-a-second-level-design-matrix"]], "Create a simple experimental paradigm": [[79, "create-a-simple-experimental-paradigm"]], "Create data": [[46, "create-data"]], "Create design matrices": [[65, "create-design-matrices"]], "Creating a surface image": [[7, "creating-a-surface-image"]], "Cross validation": [[170, "cross-validation"]], "Cross-validation": [[165, "cross-validation"]], "Cross-validation algorithm": [[172, "cross-validation-algorithm"]], "Cross-validation with scikit-learn": [[99, "cross-validation-with-scikit-learn"], [168, "cross-validation-with-scikit-learn"]], "Cross-validation with the decoder": [[3, "cross-validation-with-the-decoder"]], "Custom data loading: loading only the first 100 time points": [[186, "custom-data-loading-loading-only-the-first-100-time-points"]], "Data": [[7, "data"]], "Data Usage Agreement": [[222, null], [279, null]], "Data fetcher": [[23, "data-fetcher"]], "Data format": [[7, "data-format"]], "Data loading and preprocessing": [[117, "data-loading-and-preprocessing"]], "Data loading: movie-watching data": [[162, "data-loading-movie-watching-data"]], "Dataset formatting: data shape": [[184, null]], "Datasets descriptions": [[188, "datasets-descriptions"]], "Decode via the Decoder": [[40, "decode-via-the-decoder"]], "Decoding and MVPA: predicting from brain images": [[169, null]], "Decoding and predicting from brain images": [[29, null], [113, "decoding-and-predicting-from-brain-images"]], "Decoding made easy": [[165, "decoding-made-easy"]], "Decoding of a dataset after GLM fit for signal extraction": [[34, null]], "Decoding on simulated data": [[168, null]], "Decoding on the different masks": [[33, "decoding-on-the-different-masks"]], "Decoding performance increase on Haxby dataset": [[167, "decoding-performance-increase-on-haxby-dataset"]], "Decoding with ANOVA + SVM: face vs house in the Haxby dataset": [[30, null]], "Decoding with FREM: face vs house vs chair object recognition": [[32, null]], "Decoding with Support Vector Machine": [[3, "decoding-with-support-vector-machine"]], "Decoding with a scikit-learn Pipeline": [[111, "decoding-with-a-scikit-learn-pipeline"]], "Decoding without a mask: Anova-SVM": [[165, "decoding-without-a-mask-anova-svm"]], "Decoding without a mask: Anova-SVM in scikit-lean": [[99, "decoding-without-a-mask-anova-svm-in-scikit-lean"]], "Decoding without a mask: Anova-SVM using scikit-learn": [[168, "decoding-without-a-mask-anova-svm-using-scikit-learn"]], "Decreasing memory used when loading Nifti images": [[184, null]], "Default Mode Network extraction of ADHD dataset": [[63, null]], "Define parameters": [[65, "define-parameters"]], "Define stimulus parameters and response models": [[68, "define-stimulus-parameters-and-response-models"]], "Define the LSA model": [[101, "define-the-lsa-model"]], "Define the LSS models": [[101, "define-the-lss-models"]], "Define the standard model": [[101, "define-the-standard-model"]], "Demo glass brain plotting": [[15, "demo-glass-brain-plotting"]], "Demo glass brain plotting with contours and with fillings": [[15, "demo-glass-brain-plotting-with-contours-and-with-fillings"]], "Demonstrating various display features": [[16, "demonstrating-various-display-features"]], "Dependencies": [[487, "dependencies"]], "Deriving a label-based mask": [[12, "deriving-a-label-based-mask"]], "Deriving a mask": [[12, "deriving-a-mask"]], "Deriving spatial maps from group fMRI data using ICA and Dictionary Learning": [[50, null]], "Description": [[172, "description"]], "Design matrix: event-based and time series-based": [[174, "design-matrix-event-based-and-time-series-based"]], "Destrieux atlas": [[200, null]], "Destrieux parcellation on inflated surface with different views": [[23, "destrieux-parcellation-on-inflated-surface-with-different-views"]], "Destrieux parcellation on pial surface": [[23, "destrieux-parcellation-on-pial-surface"]], "Destrieux parcellation with custom view: explicitly set angle": [[23, "destrieux-parcellation-with-custom-view-explicitly-set-angle"]], "Detecting voxels with significant effects": [[6, "detecting-voxels-with-significant-effects"]], "Deterministic atlases": [[188, "deterministic-atlases"]], "Development": [[487, "development"]], "Development version": [[487, "development-version"]], "DiFuMo atlas": [[202, null]], "Difference in meanings between different toolboxes": [[177, null]], "Different classifiers in decoding the Haxby dataset": [[31, null]], "Different connectivity modes": [[87, "different-connectivity-modes"]], "Different display modes": [[486, "different-display-modes"]], "Different linear models": [[166, "different-linear-models"]], "Different masking strategies": [[186, "different-masking-strategies"]], "Different plotting functions": [[486, "different-plotting-functions"]], "Different projections for the left and right hemispheres": [[15, "different-projections-for-the-left-and-right-hemispheres"]], "Dimension reduction with feature selection": [[165, "dimension-reduction-with-feature-selection"]], "Disclaimer": [[192, "disclaimer"]], "Display ROI on surface": [[24, "display-roi-on-surface"]], "Display connectome": [[60, "display-connectome"]], "Display connectome from surface parcellation": [[23, "display-connectome-from-surface-parcellation"]], "Display contour projections in both hemispheres": [[15, "display-contour-projections-in-both-hemispheres"]], "Display outlines of the regions of interest on top of a statistical map": [[10, "display-outlines-of-the-regions-of-interest-on-top-of-a-statistical-map"]], "Display spheres summary report": [[60, "display-spheres-summary-report"]], "Display subject t_maps": [[80, "display-subject-t-maps"]], "Display the connectome matrix": [[54, "display-the-connectome-matrix"]], "Display the sparse inverse covariance": [[54, "display-the-sparse-inverse-covariance"]], "Display time series": [[60, "display-time-series"]], "Displaying or saving to an image file": [[486, "displaying-or-saving-to-an-image-file"]], "Displaying results": [[55, "displaying-results"]], "Documentation": [[173, "documentation"]], "Documentation style": [[173, "documentation-style"]], "Dosenbach 2010 atlas": [[203, null]], "Download a brain development fMRI dataset and turn it to a data matrix": [[51, "download-a-brain-development-fmri-dataset-and-turn-it-to-a-data-matrix"]], "Downloading statistical maps from the Neurovault repository": [[118, null]], "Downloading the data": [[117, "downloading-the-data"]], "Downloading tutorial datasets from Internet": [[2, "downloading-tutorial-datasets-from-internet"]], "Drop-in Hours": [[487, "drop-in-hours"]], "Duality gap": [[172, "duality-gap"]], "Dummy estimator": [[99, "dummy-estimator"]], "ENHANCEMENTS": [[143, "enhancements"], [146, "enhancements"], [147, "enhancements"], [148, "enhancements"], [158, "id2497"], [158, "id2662"], [158, "id2829"], [158, "id3339"]], "Empirical comparisons": [[167, "empirical-comparisons"]], "Encoding models for visual stimuli from Miyawaki et al. 2008": [[42, null]], "Enhancements": [[124, "enhancements"], [125, "enhancements"], [125, "id3"], [126, "enhancements"], [127, "enhancements"], [128, "enhancements"], [129, "enhancements"], [130, "enhancements"], [131, "enhancements"], [133, "enhancements"], [137, "enhancements"], [138, "enhancements"], [138, "id4"], [139, "enhancements"], [140, "enhancements"], [141, "enhancements"], [143, "id2"], [143, "id5"], [143, "id9"], [150, "enhancements"], [151, "enhancements"], [152, "enhancements"], [153, "enhancements"], [154, "enhancements"], [155, "enhancements"], [156, "enhancements"], [158, "enhancements"], [158, "id164"], [158, "id329"], [158, "id495"], [158, "id662"], [158, "id829"], [158, "id995"], [158, "id998"], [158, "id1165"], [158, "id1334"], [158, "id1499"], [158, "id1666"], [158, "id1833"], [158, "id2000"], [158, "id2167"], [158, "id3343"], [158, "id3347"], [158, "id3352"], [158, "id3681"], [158, "id3846"], [158, "id4015"], [158, "id4180"], [158, "id4185"], [158, "id4349"], [158, "id5009"], [158, "id5179"]], "Estimate contrasts": [[63, "estimate-contrasts"], [69, "estimate-contrasts"]], "Estimate correlations": [[60, "estimate-correlations"]], "Estimate second level model": [[77, "estimate-second-level-model"], [78, "estimate-second-level-model"], [80, "estimate-second-level-model"]], "Estimate second level models": [[81, "estimate-second-level-models"]], "Estimated Attributes": [[173, "estimated-attributes"]], "Estimating receptive fields": [[42, "estimating-receptive-fields"]], "Event-based": [[174, "event-based"]], "Example": [[185, null]], "Example code": [[162, null], [170, null]], "Example of MRI response functions": [[68, null]], "Example of generic design in second-level models": [[78, null]], "Example of pattern recognition on simulated data": [[46, null]], "Example of second level design matrix": [[79, null]], "Example of surface-based first-level analysis": [[69, null]], "Example use of TV-L1 SpaceNet": [[41, "example-use-of-tv-l1-spacenet"]], "Examples": [[113, null], [185, null], [186, null], [186, null], [186, null], [186, null], [186, null], [186, null]], "Examples masker reports": [[473, null]], "Examples of GLM reports": [[472, null]], "Examples of design matrices": [[65, null]], "Examples to better understand the NiftiMasker": [[186, null]], "Examples using Neurovault": [[118, "examples-using-neurovault"]], "Examples using nilearn.connectome.ConnectivityMeasure": [[232, "examples-using-nilearn-connectome-connectivitymeasure"]], "Examples using nilearn.connectome.GroupSparseCovarianceCV": [[234, "examples-using-nilearn-connectome-groupsparsecovariancecv"]], "Examples using nilearn.datasets.fetch_adhd": [[241, "examples-using-nilearn-datasets-fetch-adhd"]], "Examples using nilearn.datasets.fetch_atlas_allen_2011": [[243, "examples-using-nilearn-datasets-fetch-atlas-allen-2011"]], "Examples using nilearn.datasets.fetch_atlas_basc_multiscale_2015": [[244, "examples-using-nilearn-datasets-fetch-atlas-basc-multiscale-2015"]], "Examples using nilearn.datasets.fetch_atlas_destrieux_2009": [[246, "examples-using-nilearn-datasets-fetch-atlas-destrieux-2009"]], "Examples using nilearn.datasets.fetch_atlas_difumo": [[247, "examples-using-nilearn-datasets-fetch-atlas-difumo"]], "Examples using nilearn.datasets.fetch_atlas_harvard_oxford": [[248, "examples-using-nilearn-datasets-fetch-atlas-harvard-oxford"]], "Examples using nilearn.datasets.fetch_atlas_juelich": [[249, "examples-using-nilearn-datasets-fetch-atlas-juelich"]], "Examples using nilearn.datasets.fetch_atlas_msdl": [[250, "examples-using-nilearn-datasets-fetch-atlas-msdl"]], "Examples using nilearn.datasets.fetch_atlas_smith_2009": [[253, "examples-using-nilearn-datasets-fetch-atlas-smith-2009"]], "Examples using nilearn.datasets.fetch_atlas_surf_destrieux": [[254, "examples-using-nilearn-datasets-fetch-atlas-surf-destrieux"]], "Examples using nilearn.datasets.fetch_atlas_yeo_2011": [[256, "examples-using-nilearn-datasets-fetch-atlas-yeo-2011"]], "Examples using nilearn.datasets.fetch_coords_dosenbach_2010": [[258, "examples-using-nilearn-datasets-fetch-coords-dosenbach-2010"]], "Examples using nilearn.datasets.fetch_coords_power_2011": [[259, "examples-using-nilearn-datasets-fetch-coords-power-2011"]], "Examples using nilearn.datasets.fetch_development_fmri": [[261, "examples-using-nilearn-datasets-fetch-development-fmri"]], "Examples using nilearn.datasets.fetch_ds000030_urls": [[262, "examples-using-nilearn-datasets-fetch-ds000030-urls"]], "Examples using nilearn.datasets.fetch_fiac_first_level": [[263, "examples-using-nilearn-datasets-fetch-fiac-first-level"]], "Examples using nilearn.datasets.fetch_haxby": [[264, "examples-using-nilearn-datasets-fetch-haxby"]], "Examples using nilearn.datasets.fetch_icbm152_2009": [[265, "examples-using-nilearn-datasets-fetch-icbm152-2009"]], "Examples using nilearn.datasets.fetch_icbm152_brain_gm_mask": [[266, "examples-using-nilearn-datasets-fetch-icbm152-brain-gm-mask"]], "Examples using nilearn.datasets.fetch_language_localizer_demo_dataset": [[267, "examples-using-nilearn-datasets-fetch-language-localizer-demo-dataset"]], "Examples using nilearn.datasets.fetch_localizer_button_task": [[268, "examples-using-nilearn-datasets-fetch-localizer-button-task"]], "Examples using nilearn.datasets.fetch_localizer_calculation_task": [[269, "examples-using-nilearn-datasets-fetch-localizer-calculation-task"]], "Examples using nilearn.datasets.fetch_localizer_contrasts": [[270, "examples-using-nilearn-datasets-fetch-localizer-contrasts"]], "Examples using nilearn.datasets.fetch_localizer_first_level": [[271, "examples-using-nilearn-datasets-fetch-localizer-first-level"]], "Examples using nilearn.datasets.fetch_megatrawls_netmats": [[272, "examples-using-nilearn-datasets-fetch-megatrawls-netmats"]], "Examples using nilearn.datasets.fetch_mixed_gambles": [[273, "examples-using-nilearn-datasets-fetch-mixed-gambles"]], "Examples using nilearn.datasets.fetch_miyawaki2008": [[274, "examples-using-nilearn-datasets-fetch-miyawaki2008"]], "Examples using nilearn.datasets.fetch_neurovault": [[275, "examples-using-nilearn-datasets-fetch-neurovault"]], "Examples using nilearn.datasets.fetch_neurovault_auditory_computation_task": [[276, "examples-using-nilearn-datasets-fetch-neurovault-auditory-computation-task"]], "Examples using nilearn.datasets.fetch_neurovault_ids": [[277, "examples-using-nilearn-datasets-fetch-neurovault-ids"]], "Examples using nilearn.datasets.fetch_neurovault_motor_task": [[278, "examples-using-nilearn-datasets-fetch-neurovault-motor-task"]], "Examples using nilearn.datasets.fetch_oasis_vbm": [[279, "examples-using-nilearn-datasets-fetch-oasis-vbm"]], "Examples using nilearn.datasets.fetch_openneuro_dataset": [[280, "examples-using-nilearn-datasets-fetch-openneuro-dataset"]], "Examples using nilearn.datasets.fetch_spm_auditory": [[281, "examples-using-nilearn-datasets-fetch-spm-auditory"]], "Examples using nilearn.datasets.fetch_spm_multimodal_fmri": [[282, "examples-using-nilearn-datasets-fetch-spm-multimodal-fmri"]], "Examples using nilearn.datasets.get_data_dirs": [[285, "examples-using-nilearn-datasets-get-data-dirs"]], "Examples using nilearn.datasets.load_fsaverage": [[286, "examples-using-nilearn-datasets-load-fsaverage"]], "Examples using nilearn.datasets.load_fsaverage_data": [[287, "examples-using-nilearn-datasets-load-fsaverage-data"]], "Examples using nilearn.datasets.load_mni152_brain_mask": [[288, "examples-using-nilearn-datasets-load-mni152-brain-mask"]], "Examples using nilearn.datasets.load_mni152_template": [[291, "examples-using-nilearn-datasets-load-mni152-template"]], "Examples using nilearn.datasets.load_nki": [[294, "examples-using-nilearn-datasets-load-nki"]], "Examples using nilearn.datasets.load_sample_motor_activation_image": [[295, "examples-using-nilearn-datasets-load-sample-motor-activation-image"]], "Examples using nilearn.datasets.select_from_index": [[297, "examples-using-nilearn-datasets-select-from-index"]], "Examples using nilearn.decoding.Decoder": [[298, "examples-using-nilearn-decoding-decoder"]], "Examples using nilearn.decoding.DecoderRegressor": [[299, "examples-using-nilearn-decoding-decoderregressor"]], "Examples using nilearn.decoding.FREMClassifier": [[300, "examples-using-nilearn-decoding-fremclassifier"]], "Examples using nilearn.decoding.FREMRegressor": [[301, "examples-using-nilearn-decoding-fremregressor"]], "Examples using nilearn.decoding.SearchLight": [[302, "examples-using-nilearn-decoding-searchlight"]], "Examples using nilearn.decoding.SpaceNetRegressor": [[304, "examples-using-nilearn-decoding-spacenetregressor"]], "Examples using nilearn.decomposition.CanICA": [[305, "examples-using-nilearn-decomposition-canica"]], "Examples using nilearn.decomposition.DictLearning": [[306, "examples-using-nilearn-decomposition-dictlearning"]], "Examples using nilearn.glm.cluster_level_inference": [[315, "examples-using-nilearn-glm-cluster-level-inference"]], "Examples using nilearn.glm.compute_fixed_effects": [[317, "examples-using-nilearn-glm-compute-fixed-effects"]], "Examples using nilearn.glm.first_level.FirstLevelModel": [[320, "examples-using-nilearn-glm-first-level-firstlevelmodel"]], "Examples using nilearn.glm.first_level.compute_regressor": [[322, "examples-using-nilearn-glm-first-level-compute-regressor"]], "Examples using nilearn.glm.first_level.first_level_from_bids": [[323, "examples-using-nilearn-glm-first-level-first-level-from-bids"]], "Examples using nilearn.glm.first_level.make_first_level_design_matrix": [[327, "examples-using-nilearn-glm-first-level-make-first-level-design-matrix"]], "Examples using nilearn.glm.second_level.SecondLevelModel": [[333, "examples-using-nilearn-glm-second-level-secondlevelmodel"]], "Examples using nilearn.glm.second_level.make_second_level_design_matrix": [[334, "examples-using-nilearn-glm-second-level-make-second-level-design-matrix"]], "Examples using nilearn.glm.second_level.non_parametric_inference": [[335, "examples-using-nilearn-glm-second-level-non-parametric-inference"]], "Examples using nilearn.glm.threshold_stats_img": [[336, "examples-using-nilearn-glm-threshold-stats-img"]], "Examples using nilearn.image.clean_img": [[338, "examples-using-nilearn-image-clean-img"]], "Examples using nilearn.image.concat_imgs": [[339, "examples-using-nilearn-image-concat-imgs"]], "Examples using nilearn.image.coord_transform": [[340, "examples-using-nilearn-image-coord-transform"]], "Examples using nilearn.image.get_data": [[343, "examples-using-nilearn-image-get-data"]], "Examples using nilearn.image.high_variance_confounds": [[344, "examples-using-nilearn-image-high-variance-confounds"]], "Examples using nilearn.image.index_img": [[345, "examples-using-nilearn-image-index-img"]], "Examples using nilearn.image.iter_img": [[346, "examples-using-nilearn-image-iter-img"]], "Examples using nilearn.image.load_img": [[348, "examples-using-nilearn-image-load-img"]], "Examples using nilearn.image.math_img": [[349, "examples-using-nilearn-image-math-img"]], "Examples using nilearn.image.mean_img": [[350, "examples-using-nilearn-image-mean-img"]], "Examples using nilearn.image.new_img_like": [[351, "examples-using-nilearn-image-new-img-like"]], "Examples using nilearn.image.resample_img": [[353, "examples-using-nilearn-image-resample-img"]], "Examples using nilearn.image.resample_to_img": [[354, "examples-using-nilearn-image-resample-to-img"]], "Examples using nilearn.image.smooth_img": [[355, "examples-using-nilearn-image-smooth-img"]], "Examples using nilearn.image.threshold_img": [[357, "examples-using-nilearn-image-threshold-img"]], "Examples using nilearn.interfaces.bids.save_glm_to_bids": [[360, "examples-using-nilearn-interfaces-bids-save-glm-to-bids"]], "Examples using nilearn.interfaces.fmriprep.load_confounds": [[361, "examples-using-nilearn-interfaces-fmriprep-load-confounds"]], "Examples using nilearn.interfaces.fmriprep.load_confounds_strategy": [[362, "examples-using-nilearn-interfaces-fmriprep-load-confounds-strategy"]], "Examples using nilearn.interfaces.fsl.get_design_from_fslmat": [[363, "examples-using-nilearn-interfaces-fsl-get-design-from-fslmat"]], "Examples using nilearn.maskers.BaseMasker": [[364, "examples-using-nilearn-maskers-basemasker"]], "Examples using nilearn.maskers.MultiNiftiLabelsMasker": [[365, "examples-using-nilearn-maskers-multiniftilabelsmasker"]], "Examples using nilearn.maskers.MultiNiftiMapsMasker": [[366, "examples-using-nilearn-maskers-multiniftimapsmasker"]], "Examples using nilearn.maskers.MultiNiftiMasker": [[367, "examples-using-nilearn-maskers-multiniftimasker"]], "Examples using nilearn.maskers.NiftiLabelsMasker": [[368, "examples-using-nilearn-maskers-niftilabelsmasker"]], "Examples using nilearn.maskers.NiftiMapsMasker": [[369, "examples-using-nilearn-maskers-niftimapsmasker"]], "Examples using nilearn.maskers.NiftiMasker": [[370, "examples-using-nilearn-maskers-niftimasker"]], "Examples using nilearn.maskers.NiftiSpheresMasker": [[371, "examples-using-nilearn-maskers-niftispheresmasker"]], "Examples using nilearn.maskers.SurfaceLabelsMasker": [[372, "examples-using-nilearn-maskers-surfacelabelsmasker"]], "Examples using nilearn.maskers.SurfaceMasker": [[374, "examples-using-nilearn-maskers-surfacemasker"]], "Examples using nilearn.masking.apply_mask": [[375, "examples-using-nilearn-masking-apply-mask"]], "Examples using nilearn.masking.compute_epi_mask": [[378, "examples-using-nilearn-masking-compute-epi-mask"]], "Examples using nilearn.masking.unmask": [[383, "examples-using-nilearn-masking-unmask"]], "Examples using nilearn.mass_univariate.permuted_ols": [[384, "examples-using-nilearn-mass-univariate-permuted-ols"]], "Examples using nilearn.plotting.displays.LProjector": [[389, "examples-using-nilearn-plotting-displays-lprojector"]], "Examples using nilearn.plotting.displays.LRProjector": [[390, "examples-using-nilearn-plotting-displays-lrprojector"]], "Examples using nilearn.plotting.displays.LYRProjector": [[391, "examples-using-nilearn-plotting-displays-lyrprojector"]], "Examples using nilearn.plotting.displays.LYRZProjector": [[392, "examples-using-nilearn-plotting-displays-lyrzprojector"]], "Examples using nilearn.plotting.displays.LZRProjector": [[393, "examples-using-nilearn-plotting-displays-lzrprojector"]], "Examples using nilearn.plotting.displays.LZRYProjector": [[394, "examples-using-nilearn-plotting-displays-lzryprojector"]], "Examples using nilearn.plotting.displays.MosaicSlicer": [[395, "examples-using-nilearn-plotting-displays-mosaicslicer"]], "Examples using nilearn.plotting.displays.OrthoProjector": [[396, "examples-using-nilearn-plotting-displays-orthoprojector"]], "Examples using nilearn.plotting.displays.OrthoSlicer": [[397, "examples-using-nilearn-plotting-displays-orthoslicer"]], "Examples using nilearn.plotting.displays.PlotlySurfaceFigure": [[398, "examples-using-nilearn-plotting-displays-plotlysurfacefigure"]], "Examples using nilearn.plotting.displays.RProjector": [[399, "examples-using-nilearn-plotting-displays-rprojector"]], "Examples using nilearn.plotting.displays.TiledSlicer": [[400, "examples-using-nilearn-plotting-displays-tiledslicer"]], "Examples using nilearn.plotting.displays.XProjector": [[401, "examples-using-nilearn-plotting-displays-xprojector"]], "Examples using nilearn.plotting.displays.XSlicer": [[402, "examples-using-nilearn-plotting-displays-xslicer"]], "Examples using nilearn.plotting.displays.XZProjector": [[403, "examples-using-nilearn-plotting-displays-xzprojector"]], "Examples using nilearn.plotting.displays.XZSlicer": [[404, "examples-using-nilearn-plotting-displays-xzslicer"]], "Examples using nilearn.plotting.displays.YProjector": [[405, "examples-using-nilearn-plotting-displays-yprojector"]], "Examples using nilearn.plotting.displays.YSlicer": [[406, "examples-using-nilearn-plotting-displays-yslicer"]], "Examples using nilearn.plotting.displays.YXProjector": [[407, "examples-using-nilearn-plotting-displays-yxprojector"]], "Examples using nilearn.plotting.displays.YXSlicer": [[408, "examples-using-nilearn-plotting-displays-yxslicer"]], "Examples using nilearn.plotting.displays.YZProjector": [[409, "examples-using-nilearn-plotting-displays-yzprojector"]], "Examples using nilearn.plotting.displays.YZSlicer": [[410, "examples-using-nilearn-plotting-displays-yzslicer"]], "Examples using nilearn.plotting.displays.ZProjector": [[411, "examples-using-nilearn-plotting-displays-zprojector"]], "Examples using nilearn.plotting.displays.ZSlicer": [[412, "examples-using-nilearn-plotting-displays-zslicer"]], "Examples using nilearn.plotting.find_parcellation_cut_coords": [[416, "examples-using-nilearn-plotting-find-parcellation-cut-coords"]], "Examples using nilearn.plotting.find_probabilistic_atlas_cut_coords": [[417, "examples-using-nilearn-plotting-find-probabilistic-atlas-cut-coords"]], "Examples using nilearn.plotting.find_xyz_cut_coords": [[418, "examples-using-nilearn-plotting-find-xyz-cut-coords"]], "Examples using nilearn.plotting.plot_anat": [[419, "examples-using-nilearn-plotting-plot-anat"]], "Examples using nilearn.plotting.plot_carpet": [[420, "examples-using-nilearn-plotting-plot-carpet"]], "Examples using nilearn.plotting.plot_connectome": [[421, "examples-using-nilearn-plotting-plot-connectome"]], "Examples using nilearn.plotting.plot_contrast_matrix": [[422, "examples-using-nilearn-plotting-plot-contrast-matrix"]], "Examples using nilearn.plotting.plot_design_matrix": [[423, "examples-using-nilearn-plotting-plot-design-matrix"]], "Examples using nilearn.plotting.plot_design_matrix_correlation": [[424, "examples-using-nilearn-plotting-plot-design-matrix-correlation"]], "Examples using nilearn.plotting.plot_epi": [[425, "examples-using-nilearn-plotting-plot-epi"]], "Examples using nilearn.plotting.plot_event": [[426, "examples-using-nilearn-plotting-plot-event"]], "Examples using nilearn.plotting.plot_glass_brain": [[427, "examples-using-nilearn-plotting-plot-glass-brain"]], "Examples using nilearn.plotting.plot_img": [[428, "examples-using-nilearn-plotting-plot-img"]], "Examples using nilearn.plotting.plot_img_comparison": [[429, "examples-using-nilearn-plotting-plot-img-comparison"]], "Examples using nilearn.plotting.plot_img_on_surf": [[430, "examples-using-nilearn-plotting-plot-img-on-surf"]], "Examples using nilearn.plotting.plot_markers": [[431, "examples-using-nilearn-plotting-plot-markers"]], "Examples using nilearn.plotting.plot_matrix": [[432, "examples-using-nilearn-plotting-plot-matrix"]], "Examples using nilearn.plotting.plot_prob_atlas": [[433, "examples-using-nilearn-plotting-plot-prob-atlas"]], "Examples using nilearn.plotting.plot_roi": [[434, "examples-using-nilearn-plotting-plot-roi"]], "Examples using nilearn.plotting.plot_stat_map": [[435, "examples-using-nilearn-plotting-plot-stat-map"]], "Examples using nilearn.plotting.plot_surf": [[436, "examples-using-nilearn-plotting-plot-surf"]], "Examples using nilearn.plotting.plot_surf_contours": [[437, "examples-using-nilearn-plotting-plot-surf-contours"]], "Examples using nilearn.plotting.plot_surf_roi": [[438, "examples-using-nilearn-plotting-plot-surf-roi"]], "Examples using nilearn.plotting.plot_surf_stat_map": [[439, "examples-using-nilearn-plotting-plot-surf-stat-map"]], "Examples using nilearn.plotting.show": [[440, "examples-using-nilearn-plotting-show"]], "Examples using nilearn.plotting.view_connectome": [[441, "examples-using-nilearn-plotting-view-connectome"]], "Examples using nilearn.plotting.view_img": [[442, "examples-using-nilearn-plotting-view-img"]], "Examples using nilearn.plotting.view_img_on_surf": [[443, "examples-using-nilearn-plotting-view-img-on-surf"]], "Examples using nilearn.plotting.view_surf": [[445, "examples-using-nilearn-plotting-view-surf"]], "Examples using nilearn.regions.Parcellations": [[447, "examples-using-nilearn-regions-parcellations"]], "Examples using nilearn.regions.RegionExtractor": [[449, "examples-using-nilearn-regions-regionextractor"]], "Examples using nilearn.regions.connected_label_regions": [[450, "examples-using-nilearn-regions-connected-label-regions"]], "Examples using nilearn.regions.connected_regions": [[451, "examples-using-nilearn-regions-connected-regions"]], "Examples using nilearn.reporting.HTMLReport": [[457, "examples-using-nilearn-reporting-htmlreport"]], "Examples using nilearn.reporting.get_clusters_table": [[458, "examples-using-nilearn-reporting-get-clusters-table"]], "Examples using nilearn.reporting.make_glm_report": [[459, "examples-using-nilearn-reporting-make-glm-report"]], "Examples using nilearn.surface.FileMesh": [[463, "examples-using-nilearn-surface-filemesh"]], "Examples using nilearn.surface.InMemoryMesh": [[464, "examples-using-nilearn-surface-inmemorymesh"]], "Examples using nilearn.surface.PolyData": [[465, "examples-using-nilearn-surface-polydata"]], "Examples using nilearn.surface.PolyMesh": [[466, "examples-using-nilearn-surface-polymesh"]], "Examples using nilearn.surface.SurfaceImage": [[467, "examples-using-nilearn-surface-surfaceimage"]], "Examples using nilearn.surface.SurfaceMesh": [[468, "examples-using-nilearn-surface-surfacemesh"]], "Examples using nilearn.surface.vol_to_surf": [[471, "examples-using-nilearn-surface-vol-to-surf"]], "Execution time": [[172, "execution-time"]], "Exercise": [[186, null]], "Exercise: computing connectivity in tangent space": [[159, null]], "Exercise: computing sparse inverse covariance": [[159, null]], "Exercise: computing the correlation matrix of rest fmri": [[159, null], [160, null]], "Exercise: correlation matrix of rest fMRI on probabilistic atlas": [[160, null]], "Extra mask parameters: opening, cutoff\u2026": [[186, "extra-mask-parameters-opening-cutoff"]], "Extract coordinates on Yeo atlas - parcellations": [[49, "extract-coordinates-on-yeo-atlas-parcellations"]], "Extract functional networks with Dictionary learning": [[52, "extract-functional-networks-with-dictionary-learning"]], "Extract regions from networks": [[52, "extract-regions-from-networks"]], "Extract signals and compute a connectivity matrix without confounds removal": [[58, "extract-signals-and-compute-a-connectivity-matrix-without-confounds-removal"]], "Extract signals on a parcellation defined by labels": [[58, "extract-signals-on-a-parcellation-defined-by-labels"]], "Extract signals on spheres and plot a connectome": [[60, null]], "Extract signals on spheres from an atlas": [[60, "extract-signals-on-spheres-from-an-atlas"]], "Extract subjects variabilities around a group connectivity": [[53, "extract-subjects-variabilities-around-a-group-connectivity"]], "Extract the largest clusters": [[70, "extract-the-largest-clusters"]], "Extract the seed region\u2019s time course": [[63, "extract-the-seed-region-s-time-course"]], "Extract the time series": [[56, "extract-the-time-series"]], "Extract time series": [[54, "extract-time-series"]], "Extracting a brain mask": [[26, "extracting-a-brain-mask"], [185, "extracting-a-brain-mask"]], "Extracting functional brain networks: ICA and related": [[164, null]], "Extracting predicted time series and residuals": [[174, "extracting-predicted-time-series-and-residuals"]], "Extracting region signals": [[55, "extracting-region-signals"]], "Extracting signals from a brain parcellation": [[58, null]], "Extracting signals from a probabilistic atlas": [[160, "extracting-signals-from-a-probabilistic-atlas"]], "Extracting signals from brain regions using the NiftiLabelsMasker": [[92, null]], "Extracting signals of a probabilistic atlas of functional regions": [[56, null]], "Extracting signals on a parcellation": [[160, "extracting-signals-on-a-parcellation"]], "Extracting the seed time series with masker": [[24, "extracting-the-seed-time-series-with-masker"]], "Extracting times series to build a functional connectome": [[160, null]], "Extraction of signals from regions for multiple subjects: MultiNiftiMasker, MultiNiftiLabelsMasker, MultiNiftiMapsMasker": [[186, "extraction-of-signals-from-regions-for-multiple-subjects-multiniftimasker-multiniftilabelsmasker-multiniftimapsmasker"]], "Extraction of signals from regions: NiftiLabelsMasker, NiftiMapsMasker": [[186, "extraction-of-signals-from-regions-niftilabelsmasker-niftimapsmasker"]], "Extraction of signals from seeds: NiftiSpheresMasker": [[186, "extraction-of-signals-from-seeds-niftispheresmasker"]], "Extracts signal from sphere around DMN seeds": [[60, "extracts-signal-from-sphere-around-dmn-seeds"]], "F-scores computation": [[37, "f-scores-computation"]], "FIAC": [[472, "fiac"]], "FIXES": [[146, "fixes"], [158, "id2831"]], "FMRIB Software Library (FSL)": [[177, "fmrib-software-library-fsl"]], "FREM on Jimura et al \u201cmixed gambles\u201d dataset": [[41, null]], "FREM pipeline": [[167, "frem-pipeline"]], "FREM: fast ensembling of regularized models for robust decoding": [[167, null]], "Feature extraction: from fMRI volumes to a data matrix": [[3, "feature-extraction-from-fmri-volumes-to-a-data-matrix"]], "Feature selection": [[40, "feature-selection"]], "Featured examples": [[180, "featured-examples"]], "Fetch brain development functional datasets": [[52, "fetch-brain-development-functional-datasets"]], "Fetch data": [[26, "fetch-data"]], "Fetch dataset": [[77, "fetch-dataset"], [80, "fetch-dataset"], [81, "fetch-dataset"]], "Fetch example BIDS dataset": [[102, "fetch-example-bids-dataset"], [110, "fetch-example-bids-dataset"]], "Fetch example Haxby dataset": [[34, "fetch-example-haxby-dataset"]], "Fetch images for \u201csuccessful stop minus go\u201d-like protocols.": [[109, "fetch-images-for-successful-stop-minus-go-like-protocols"]], "Fetch openneuro BIDS dataset": [[64, "fetch-openneuro-bids-dataset"]], "Fetching Probabilistic atlas - MSDL atlas": [[21, "fetching-probabilistic-atlas-msdl-atlas"]], "Fetching data from ADHD dataset": [[12, "fetching-data-from-adhd-dataset"]], "Fetching datasets": [[55, "fetching-datasets"]], "Fetching movie-watching based functional datasets": [[163, "fetching-movie-watching-based-functional-datasets"]], "Fetching open datasets from Internet": [[184, "fetching-open-datasets-from-internet"]], "Fetching the Megatrawls Network matrices": [[27, "fetching-the-megatrawls-network-matrices"]], "File name matching: \u201cglobbing\u201d and user path expansion": [[184, "file-name-matching-globbing-and-user-path-expansion"]], "File names and objects, 3D and 4D images": [[184, "file-names-and-objects-3d-and-4d-images"]], "Final script": [[165, null]], "Finding help": [[181, "finding-help"]], "First download the data": [[3, "first-download-the-data"], [99, "first-download-the-data"]], "First level analysis of a complete BIDS dataset from openneuro": [[64, null]], "First level model estimation": [[102, "first-level-model-estimation"]], "First level model estimation (one subject)": [[64, "first-level-model-estimation-one-subject"]], "First level models": [[174, null]], "First level report": [[472, "first-level-report"]], "First steps with nilearn": [[181, "first-steps-with-nilearn"]], "First we load the Miyawaki dataset": [[43, "first-we-load-the-miyawaki-dataset"]], "First, we retrieve data from nilearn provided (general-purpose) datasets": [[16, "first-we-retrieve-data-from-nilearn-provided-general-purpose-datasets"]], "Fisher-z transformation and save nifti": [[57, "fisher-z-transformation-and-save-nifti"]], "Fit FREM": [[32, "fit-frem"], [41, "fit-frem"]], "Fit model": [[70, "fit-model"]], "Fit the Decoder and predict the responses": [[35, "fit-the-decoder-and-predict-the-responses"]], "Fit the SpaceNet and predict with it": [[45, "fit-the-spacenet-and-predict-with-it"]], "Fit the decoder and predict": [[30, "fit-the-decoder-and-predict"]], "Fitting CanICA model with nilearn": [[164, "fitting-canica-model-with-nilearn"]], "Fitting a first level model": [[174, "fitting-a-first-level-model"]], "Fitting a second level model": [[178, "fitting-a-second-level-model"]], "Fixed effects analyses": [[177, null]], "Fixes": [[122, "fixes"], [124, "fixes"], [125, "fixes"], [125, "id2"], [126, "fixes"], [127, "fixes"], [128, "fixes"], [129, "fixes"], [130, "fixes"], [133, "fixes"], [136, "fixes"], [137, "fixes"], [138, "fixes"], [138, "id3"], [139, "fixes"], [140, "fixes"], [142, "fixes"], [143, "fixes"], [144, "fixes"], [145, "fixes"], [146, "id4"], [146, "id8"], [146, "id12"], [147, "fixes"], [148, "fixes"], [149, "fixes"], [150, "fixes"], [151, "fixes"], [152, "fixes"], [153, "fixes"], [154, "fixes"], [155, "fixes"], [156, "fixes"], [158, "fixes"], [158, "id163"], [158, "id328"], [158, "id494"], [158, "id661"], [158, "id828"], [158, "id994"], [158, "id997"], [158, "id1164"], [158, "id1333"], [158, "id1498"], [158, "id1665"], [158, "id1832"], [158, "id1999"], [158, "id2166"], [158, "id2333"], [158, "id2498"], [158, "id2663"], [158, "id2834"], [158, "id2839"], [158, "id2843"], [158, "id3008"], [158, "id3174"], [158, "id3348"], [158, "id3518"], [158, "id3847"], [158, "id4014"], [158, "id4179"], [158, "id4184"], [158, "id4348"], [158, "id4515"], [158, "id5010"], [158, "id5508"]], "Fixtures": [[173, "fixtures"]], "From neuroimaging volumes to data matrices: the masker objects": [[186, null]], "Full Example": [[159, null]], "Full code example": [[165, null]], "Full example": [[159, null], [159, null], [159, null], [160, null], [160, null]], "Functional connectivity": [[48, null], [113, "functional-connectivity"]], "Functional connectivity and resting state": [[161, null]], "Functional connectivity predicts age group": [[100, null]], "Functions": [[187, "functions"], [188, "functions"], [188, "id1"], [188, "id2"], [188, "id3"], [474, "functions"], [474, "id2"], [474, "id4"], [475, "functions"], [477, "functions"], [477, "id1"], [477, "id2"], [479, "functions"], [480, "functions"], [481, "functions"], [481, "id1"], [482, "functions"], [483, "functions"], [484, "functions"], [485, "functions"]], "Functions for data preparation and image transformation": [[185, "functions-for-data-preparation-and-image-transformation"]], "Funding": [[0, "funding"]], "Further Reading": [[170, null]], "Further reading": [[7, "further-reading"]], "GLM: First level analysis": [[62, null], [113, "glm-first-level-analysis"]], "GLM: Second level analysis": [[75, null], [113, "glm-second-level-analysis"]], "General bibliography": [[115, null]], "General functions": [[188, "general-functions"]], "General functions descriptions": [[188, "general-functions-descriptions"]], "Generate an events.tsv file for the NeuroSpin localizer task": [[73, null]], "Generate figures": [[105, "generate-figures"]], "Generating a report": [[34, "generating-a-report"], [63, "generating-a-report"], [72, "generating-a-report"], [76, "generating-a-report"]], "Get image and term data": [[105, "get-image-and-term-data"]], "Get residuals": [[70, "get-residuals"]], "Get the locations from which vol_to_surf would draw its samples": [[25, "get-the-locations-from-which-vol-to-surf-would-draw-its-samples"]], "Getting the data": [[57, "getting-the-data"]], "Github release": [[182, "github-release"]], "Glass brain plotting in nilearn": [[14, null]], "Glass brain plotting in nilearn (all options)": [[15, null]], "Glass brain plotting: Hemispheric sagittal cuts": [[14, "glass-brain-plotting-hemispheric-sagittal-cuts"]], "Glass brain plotting: black background": [[14, "glass-brain-plotting-black-background"]], "Glass brain plotting: whole brain sagittal cuts": [[14, "glass-brain-plotting-whole-brain-sagittal-cuts"]], "Globbing over multiple 3D volumes": [[4, "globbing-over-multiple-3d-volumes"]], "Glossary": [[179, null]], "Going further": [[117, "going-further"]], "Going further with scikit-learn": [[99, "going-further-with-scikit-learn"], [168, "going-further-with-scikit-learn"]], "Group Sparse inverse covariance for multi-subject connectome": [[55, null]], "Group level model": [[110, "group-level-model"]], "Group-sparse covariance estimation": [[172, null]], "Guidelines for HTML and CSS": [[173, "guidelines-for-html-and-css"]], "Guidelines for Private Functions": [[173, "guidelines-for-private-functions"]], "HIGHLIGHTS": [[124, "highlights"], [126, "highlights"], [127, "highlights"], [128, "highlights"], [129, "highlights"], [130, "highlights"], [146, "highlights"], [149, "highlights"], [150, "highlights"], [151, "highlights"], [152, "highlights"], [153, "highlights"], [155, "highlights"], [158, "highlights"], [158, "id327"], [158, "id493"], [158, "id659"], [158, "id826"], [158, "id1162"], [158, "id1329"], [158, "id1663"], [158, "id1830"], [158, "id1997"], [158, "id2164"], [158, "id2330"], [158, "id2827"]], "HRF models": [[174, "hrf-models"]], "Harvard Oxford atlas": [[211, null]], "Haxby dataset": [[212, null]], "Here we run the prediction: the decoding itself": [[43, "here-we-run-the-prediction-the-decoding-itself"]], "Highlights": [[123, "highlights"], [138, "highlights"], [139, "highlights"], [140, "highlights"], [143, "highlights"], [143, "id4"], [143, "id8"], [158, "id3342"], [158, "id3346"], [158, "id3351"], [158, "id3845"], [158, "id4012"], [158, "id4182"], [158, "id5344"]], "How do we decide what code goes in?": [[173, "how-do-we-decide-what-code-goes-in"]], "How to contribute a dataset fetcher": [[173, "how-to-contribute-a-dataset-fetcher"]], "How to contribute an atlas": [[173, "how-to-contribute-an-atlas"]], "How to contribute to nilearn": [[173, "how-to-contribute-to-nilearn"]], "How to get help?": [[173, "how-to-get-help"]], "How to help the project?": [[173, "how-to-help-the-project"]], "How to make a release?": [[182, "how-to-make-a-release"]], "How to use add_contours": [[16, "how-to-use-add-contours"]], "Hyperparameter optimization": [[40, "hyperparameter-optimization"]], "ICBM 152 template": [[213, null]], "Image affines": [[184, null]], "Image operations: creating a ROI mask manually": [[185, "image-operations-creating-a-roi-mask-manually"]], "Impact of plot parameters on visualization": [[10, "impact-of-plot-parameters-on-visualization"]], "Implementing a KFold loop": [[3, "implementing-a-kfold-loop"]], "Import modules": [[70, "import-modules"]], "Important links": [[487, "important-links"]], "Inference with massively univariate model": [[44, "inference-with-massively-univariate-model"]], "Initial estimate value": [[172, "initial-estimate-value"]], "Initialize and run the GLM": [[72, "initialize-and-run-the-glm"]], "Input and output: neuroimaging data representation": [[184, null]], "Inputing data: file names or image objects": [[184, "inputing-data-file-names-or-image-objects"]], "Inspecting the dataset": [[6, "inspecting-the-dataset"]], "Inspecting the model weights": [[3, "inspecting-the-model-weights"]], "Install": [[487, "install"]], "Installing": [[173, "installing"]], "Instantiate and run FirstLevelModel": [[34, "instantiate-and-run-firstlevelmodel"]], "Interactive plots": [[486, "interactive-plots"]], "Interactive visualization of statistical map slices": [[486, "interactive-visualization-of-statistical-map-slices"]], "Interpreting such components": [[164, "interpreting-such-components"]], "Intro to GLM Analysis: a single-run, single-subject fMRI dataset": [[6, null]], "Introduction": [[181, null]], "Inverse transform: unmasking data": [[186, "inverse-transform-unmasking-data"]], "Issues": [[182, "issues"]], "Iterate over fetched atlases to extract coordinates - probabilistic": [[49, "iterate-over-fetched-atlases-to-extract-coordinates-probabilistic"]], "Iterative grid search": [[172, "iterative-grid-search"]], "Juelich atlas": [[214, null]], "Known Issues": [[144, "known-issues"], [158, "known-issues"]], "Labels": [[182, "labels"]], "Latest release": [[487, "latest-release"]], "Learning with examples": [[181, "learning-with-examples"]], "Learning with the API references": [[181, "learning-with-the-api-references"]], "Let us quantify our prediction error": [[43, "let-us-quantify-our-prediction-error"]], "License": [[191, "license"], [193, "license"], [194, "license"], [195, "license"], [196, "license"], [198, "license"], [199, "license"], [200, "license"], [201, "license"], [202, "license"], [203, "license"], [204, "license"], [205, "license"], [206, "license"], [207, "license"], [208, "license"], [209, "license"], [211, "license"], [212, "license"], [213, "license"], [214, "license"], [215, "license"], [216, "license"], [217, "license"], [218, "license"], [219, "license"], [220, "license"], [221, "license"], [222, "license"], [223, "license"], [224, "license"], [225, "license"], [226, "license"], [227, "license"], [228, "license"], [229, "license"], [230, "license"], [231, "license"]], "Linking total and direct interactions at the group level": [[159, "linking-total-and-direct-interactions-at-the-group-level"]], "Load Haxby dataset": [[19, "load-haxby-dataset"], [37, "load-haxby-dataset"], [38, "load-haxby-dataset"], [104, "load-haxby-dataset"]], "Load Oasis dataset": [[44, "load-oasis-dataset"], [76, "load-oasis-dataset"]], "Load and prepare the data": [[33, "load-and-prepare-the-data"]], "Load atlases": [[49, "load-atlases"]], "Load brain development fMRI dataset": [[50, "load-brain-development-fmri-dataset"]], "Load brain development fMRI dataset and MSDL atlas": [[53, "load-brain-development-fmri-dataset-and-msdl-atlas"], [100, "load-brain-development-fmri-dataset-and-msdl-atlas"]], "Load confounds from file using a flexible strategy with fmriprep interface": [[58, "load-confounds-from-file-using-a-flexible-strategy-with-fmriprep-interface"]], "Load data": [[14, "load-data"]], "Load functional data": [[49, "load-functional-data"]], "Load probabilistic atlases - extracting coordinates on brain maps": [[49, "load-probabilistic-atlases-extracting-coordinates-on-brain-maps"]], "Load the Haxby data dataset": [[36, "load-the-haxby-data-dataset"]], "Load the Haxby dataset": [[32, "load-the-haxby-dataset"], [35, "load-the-haxby-dataset"], [40, "load-the-haxby-dataset"]], "Load the Oasis VBM dataset": [[45, "load-the-oasis-vbm-dataset"]], "Load the behavioral data": [[30, "load-the-behavioral-data"], [34, "load-the-behavioral-data"]], "Load the behavioral labels": [[3, "load-the-behavioral-labels"]], "Load the data": [[15, "load-the-data"]], "Load the data from the Jimura mixed-gamble experiment": [[41, "load-the-data-from-the-jimura-mixed-gamble-experiment"]], "Load the surface image": [[7, "load-the-surface-image"]], "Loading and plotting of a cortical surface atlas": [[23, null]], "Loading and preparing the data": [[165, "loading-and-preparing-the-data"]], "Loading non image data: experiment description": [[117, "loading-non-image-data-experiment-description"]], "Loading the data": [[31, "loading-the-data"], [42, "loading-the-data"], [95, "loading-the-data"]], "Loading the data into nilearn": [[165, "loading-the-data-into-nilearn"]], "Looping on all volumes in a 4D file": [[2, "looping-on-all-volumes-in-a-4d-file"]], "Looping through selected volumes in a 4D file": [[2, "looping-through-selected-volumes-in-a-4d-file"]], "MSDL atlas": [[219, null]], "Machine learning applications to Neuroimaging": [[181, "machine-learning-applications-to-neuroimaging"]], "Maintenance": [[173, "maintenance"], [182, null]], "Making a surface plot of a 3D statistical map": [[10, null]], "Making interactive visualizations with function view_img": [[17, "making-interactive-visualizations-with-function-view-img"]], "Manipulating brain image volumes": [[84, null], [113, "manipulating-brain-image-volumes"]], "Manipulating images: resampling, smoothing, masking, ROIs\u2026": [[185, null]], "Manipulation brain volumes with nilearn": [[183, null]], "Manually leaving out data": [[3, "manually-leaving-out-data"]], "Mapping the encoding scores on the brain": [[42, "mapping-the-encoding-scores-on-the-brain"]], "Mask data": [[104, "mask-data"]], "Masking": [[67, "masking"], [170, "masking"]], "Masking and plotting surface images": [[111, "masking-and-plotting-surface-images"]], "Masking data: from 4D Nifti images to 2D data arrays": [[185, "masking-data-from-4d-nifti-images-to-2d-data-arrays"]], "Masking the data": [[99, "masking-the-data"]], "Masking the data: from 4D image to 2D array": [[117, "masking-the-data-from-4d-image-to-2d-array"]], "Massively univariate analysis of a calculation task from the Localizer dataset": [[108, null]], "Massively univariate analysis of a motor task from the Localizer dataset": [[107, null]], "Massively univariate analysis of face vs house recognition": [[104, null]], "Matplotlib colormaps in Nilearn": [[13, null]], "Maximum number of iterations": [[172, "maximum-number-of-iterations"]], "Measuring prediction performance": [[165, "measuring-prediction-performance"]], "Measuring prediction scores using cross-validation": [[3, "measuring-prediction-scores-using-cross-validation"]], "Measuring the chance level": [[99, "measuring-the-chance-level"], [168, "measuring-the-chance-level"]], "MegaTrawls Network Matrices HCP": [[192, null]], "Mesh": [[7, "mesh"]], "Mixed gambles statistical maps": [[217, null]], "Miyawaki 2008 dataset": [[218, null]], "Modifying dimensions in the formula": [[103, "modifying-dimensions-in-the-formula"]], "Modifying the stopping criterion": [[172, "modifying-the-stopping-criterion"]], "More plotting tools from nilearn": [[16, null]], "Motion-based scrubbing": [[58, "motion-based-scrubbing"]], "Multi-subject ICA: CanICA": [[164, "multi-subject-ica-canica"]], "MultiNiftiLabelsMasker Usage": [[186, "multiniftilabelsmasker-usage"]], "MultiNiftiMapsMasker Usage": [[186, "multiniftimapsmasker-usage"]], "MultiNiftiMasker Usage": [[186, "multiniftimasker-usage"]], "Multiple Comparisons": [[175, "multiple-comparisons"]], "Multiple comparisons correction": [[178, "multiple-comparisons-correction"]], "Multivariate decompositions: Independent component analysis of fMRI": [[106, null]], "NEW": [[124, "new"], [125, "new"], [126, "new"], [127, "new"], [143, "new"], [144, "new"], [145, "new"], [146, "new"], [146, "id2"], [146, "id5"], [146, "id10"], [149, "new"], [150, "new"], [151, "new"], [152, "new"], [153, "new"], [155, "new"], [156, "new"], [158, "new"], [158, "id660"], [158, "id827"], [158, "id993"], [158, "id1163"], [158, "id1331"], [158, "id1664"], [158, "id1831"], [158, "id1998"], [158, "id2165"], [158, "id2331"], [158, "id2828"], [158, "id2832"], [158, "id2836"], [158, "id2841"], [158, "id3007"], [158, "id3172"], [158, "id3338"]], "NKI enhanced surface dataset": [[221, null]], "Negating an image with math_img": [[91, null]], "Nested cross-validation": [[35, "nested-cross-validation"]], "NeuroImaging volumes visualization": [[26, null]], "NeuroVault cross-study ICA maps": [[105, null]], "NeuroVault meta-analysis of stop-go paradigm studies": [[109, null]], "Neurosynth annotations": [[118, "neurosynth-annotations"]], "Neurovault statistical maps": [[220, null]], "New": [[133, "new"], [135, "new"], [136, "new"], [136, "id3"], [158, "id4514"], [158, "id4517"], [158, "id4681"], [158, "id5008"]], "New features": [[131, "new-features"], [134, "new-features"], [158, "new-features"], [158, "id5178"]], "Nifti and Analyze data": [[184, "nifti-and-analyze-data"]], "Nifti labels masker": [[473, "nifti-labels-masker"]], "Nifti maps masker": [[473, "nifti-maps-masker"]], "Nifti masker": [[473, "nifti-masker"]], "Nifti sphere masker": [[473, "nifti-sphere-masker"]], "NiftiLabelsMasker Usage": [[186, "niftilabelsmasker-usage"]], "NiftiMapsMasker Usage": [[186, "niftimapsmasker-usage"]], "NiftiMasker: applying a mask to load time-series": [[186, "niftimasker-applying-a-mask-to-load-time-series"]], "Niimg-like objects": [[184, "niimg-like-objects"]], "Nilearn": [[180, null]], "Nilearn MNI template": [[213, null]], "Nilearn data for examples": [[164, null]], "Notes": [[191, "notes"], [192, "notes"], [193, "notes"], [194, "notes"], [195, "notes"], [197, "notes"], [198, "notes"], [199, "notes"], [200, "notes"], [201, "notes"], [202, "notes"], [203, "notes"], [204, "notes"], [205, "notes"], [206, "notes"], [207, "notes"], [208, "notes"], [209, "notes"], [211, "notes"], [212, "notes"], [213, "notes"], [214, "notes"], [215, "notes"], [216, "notes"], [217, "notes"], [218, "notes"], [219, "notes"], [220, "notes"], [221, "notes"], [222, "notes"], [223, "notes"], [224, "notes"], [225, "notes"], [226, "notes"], [227, "notes"], [228, "notes"], [229, "notes"], [230, "notes"], [231, "notes"]], "Now we compute cross-validation scores": [[36, "now-we-compute-cross-validation-scores"]], "Now, another way of limiting the number of slices along rows and columns": [[16, "now-another-way-of-limiting-the-number-of-slices-along-rows-and-columns"]], "Now, changing the number of slices along columns": [[16, "now-changing-the-number-of-slices-along-columns"]], "Now, views are changed to \u2018coronal\u2019 and \u2018axial\u2019 views with coordinates": [[16, "now-views-are-changed-to-coronal-and-axial-views-with-coordinates"]], "Numerical stability": [[172, "numerical-stability"]], "OASIS volume based morphometry maps": [[222, null]], "Objective": [[164, "objective"]], "Obtain FirstLevelModel objects automatically and fit arguments": [[64, "obtain-firstlevelmodel-objects-automatically-and-fit-arguments"]], "Obtain automatically FirstLevelModel objects and fit arguments": [[102, "obtain-automatically-firstlevelmodel-objects-and-fit-arguments"]], "Obtain prediction scores via cross validation": [[30, "obtain-prediction-scores-via-cross-validation"]], "Only generating the HTML report": [[64, "only-generating-the-html-report"]], "Other contributors": [[0, "other-contributors"]], "Other probabilistic atlases accessible with nilearn": [[22, "other-probabilistic-atlases-accessible-with-nilearn"]], "Output": [[118, "output"]], "PR Structure": [[173, "pr-structure"]], "Page summary": [[159, null], [160, null], [163, null], [164, null], [174, null], [177, null], [178, null]], "Parameter min_size": [[87, "parameter-min-size"]], "Parameter selection": [[159, null]], "Parametric modulation": [[65, "parametric-modulation"], [73, "parametric-modulation"]], "Pauli 2007 atlas": [[223, null]], "Perform first level analysis": [[63, "perform-first-level-analysis"], [69, "perform-first-level-analysis"]], "Perform massively univariate analysis with permuted OLS": [[104, "perform-massively-univariate-analysis-with-permuted-ols"]], "Perform the second level analysis": [[82, "perform-the-second-level-analysis"]], "Performing a simple decoding analysis": [[165, "performing-a-simple-decoding-analysis"]], "Performing an F-test": [[6, "performing-an-f-test"]], "Performing decoding with scikit-learn": [[99, "performing-decoding-with-scikit-learn"], [168, "performing-decoding-with-scikit-learn"]], "Performing the GLM analysis": [[6, "performing-the-glm-analysis"]], "Performing the seed-to-voxel correlation analysis": [[57, "performing-the-seed-to-voxel-correlation-analysis"]], "Permutation test": [[99, "permutation-test"]], "Plot 3D image for comparison": [[10, "plot-3d-image-for-comparison"]], "Plot Haxby masks": [[19, null]], "Plot R-squared": [[70, "plot-r-squared"]], "Plot a confusion matrix": [[36, "plot-a-confusion-matrix"]], "Plot a directed connectome - asymmetric connectivity measure": [[49, "plot-a-directed-connectome-asymmetric-connectivity-measure"]], "Plot barplots of the prediction scores": [[36, "plot-barplots-of-the-prediction-scores"]], "Plot color maps": [[13, "plot-color-maps"]], "Plot confusion matrix": [[32, "plot-confusion-matrix"]], "Plot connectivity matrix": [[111, "plot-connectivity-matrix"]], "Plot distribution of residuals": [[70, "plot-distribution-of-residuals"]], "Plot matplotlib color maps": [[13, "plot-matplotlib-color-maps"]], "Plot matrix, graph, and strength": [[60, "plot-matrix-graph-and-strength"]], "Plot multiple views of the 3D volume on a surface": [[10, "plot-multiple-views-of-the-3d-volume-on-a-surface"]], "Plot predicted and actual time series for 6 most significant clusters": [[70, "plot-predicted-and-actual-time-series-for-6-most-significant-clusters"]], "Plot regions extracted for only one specific network": [[52, "plot-regions-extracted-for-only-one-specific-network"]], "Plot resulting connectomes": [[52, "plot-resulting-connectomes"]], "Plot the combined z maps": [[109, "plot-the-combined-z-maps"]], "Plot the masks": [[19, "plot-the-masks"]], "Plot the mesh and the sample locations": [[25, "plot-the-mesh-and-the-sample-locations"]], "Plot the prediction scores using matplotlib": [[35, "plot-the-prediction-scores-using-matplotlib"]], "Plot the results": [[81, "plot-the-results"]], "Plot the surface image": [[10, "plot-the-surface-image"]], "Plot thresholded z scores map": [[6, "plot-thresholded-z-scores-map"]], "Plot with higher-resolution mesh": [[10, "plot-with-higher-resolution-mesh"]], "Plotting EPI image with function plot_epi": [[17, "plotting-epi-image-with-function-plot-epi"]], "Plotting ROIs (here the mask) with function plot_roi": [[17, "plotting-rois-here-the-mask-with-function-plot-roi"]], "Plotting anatomical images with function plot_anat": [[17, "plotting-anatomical-images-with-function-plot-anat"]], "Plotting brain images": [[486, null]], "Plotting seeds using add_markers": [[16, "plotting-seeds-using-add-markers"]], "Plotting statistical maps in a glass brain with function plot_glass_brain": [[17, "plotting-statistical-maps-in-a-glass-brain-with-function-plot-glass-brain"]], "Plotting statistical maps with function plot_stat_map": [[17, "plotting-statistical-maps-with-function-plot-stat-map"]], "Plotting the SVM weights": [[3, "plotting-the-svm-weights"]], "Plotting the seed-to-voxel correlation map": [[57, "plotting-the-seed-to-voxel-correlation-map"]], "Plotting the surface image": [[7, "plotting-the-surface-image"]], "Plotting tools in nilearn": [[17, null]], "Plotting with decrease of contrast in background image with dim=.5": [[18, "plotting-with-decrease-of-contrast-in-background-image-with-dim-5"]], "Plotting with enhancement of background image with dim=-.5": [[18, "plotting-with-enhancement-of-background-image-with-dim-5"]], "Plotting with more decrease in contrast with dim=1": [[18, "plotting-with-more-decrease-in-contrast-with-dim-1"]], "Plotting with no change of contrast in background image with dim=0": [[18, "plotting-with-no-change-of-contrast-in-background-image-with-dim-0"]], "Post-release": [[182, "post-release"]], "Power 2011 atlas": [[224, null]], "Pre-commit": [[173, "pre-commit"]], "Predicted time series and residuals": [[70, null]], "Prediction accuracy at chance using simple strategies": [[165, "prediction-accuracy-at-chance-using-simple-strategies"]], "Predictions: regression, classification and multi-class": [[166, "predictions-regression-classification-and-multi-class"]], "Predictive modeling analysis: VBM bio-markers of aging?": [[44, "predictive-modeling-analysis-vbm-bio-markers-of-aging"]], "Prepare code for the release": [[182, "prepare-code-for-the-release"]], "Prepare data and analysis parameters": [[63, "prepare-data-and-analysis-parameters"], [69, "prepare-data-and-analysis-parameters"], [101, "prepare-data-and-analysis-parameters"]], "Prepare masks": [[37, "prepare-masks"]], "Prepare some images for a simple t test": [[82, "prepare-some-images-for-a-simple-t-test"]], "Prepare the fMRI data": [[36, "prepare-the-fmri-data"]], "Prepare the release": [[182, "prepare-the-release"]], "Preparing the data": [[170, "preparing-the-data"]], "Preprocess data": [[44, "preprocess-data"]], "Preprocessed datasets": [[188, "preprocessed-datasets"]], "Preprocessing": [[40, "preprocessing"], [196, "preprocessing"]], "Principle of cross-validation": [[172, "principle-of-cross-validation"]], "Principle of the Searchlight": [[170, "principle-of-the-searchlight"]], "Probabilistic atlases": [[160, "probabilistic-atlases"], [188, "probabilistic-atlases"]], "Producing single subject maps of seed-to-voxel correlation": [[57, null]], "Project Organization": [[182, "project-organization"]], "Project the fMRI image to the surface": [[69, "project-the-fmri-image-to-the-surface"]], "Projectors": [[481, "projectors"]], "Pull Requests": [[182, "pull-requests"]], "Putting it all together": [[165, null]], "Python globbing": [[184, null]], "Quick sanity check on fit arguments": [[102, "quick-sanity-check-on-fit-arguments"]], "Quickstart": [[487, null]], "ROI-based decoding analysis in Haxby et al. dataset": [[33, null]], "ROI-to-ROI correlations of children": [[53, "roi-to-roi-correlations-of-children"]], "Reading CSV with pandas": [[184, null]], "Recommendation": [[173, null], [173, null]], "Reconstruction of visual stimuli from Miyawaki et al. 2008": [[43, null]], "Reference": [[159, null], [159, null], [159, null], [159, null], [162, null]], "References": [[3, "references"], [23, "references"], [24, "references"], [32, "references"], [33, "references"], [38, "references"], [39, "references"], [42, "references"], [43, "references"], [46, "references"], [50, "references"], [51, "references"], [53, "references"], [58, "references"], [60, "references"], [71, "references"], [72, "references"], [73, "references"], [77, "references"], [99, "references"], [100, "references"], [101, "references"], [104, "references"], [118, "references"], [159, null], [159, "references"], [160, null], [160, null], [160, "references"], [162, "references"], [163, null], [163, "references"], [164, null], [164, null], [164, "references"], [165, "references"], [166, "references"], [167, "references"], [170, "references"], [171, "references"], [172, "references"], [179, "references"], [181, "references"], [191, "references"], [192, "references"], [193, "references"], [194, "references"], [195, "references"], [196, "references"], [198, "references"], [199, "references"], [200, "references"], [201, "references"], [202, "references"], [203, "references"], [204, "references"], [205, "references"], [206, "references"], [207, "references"], [208, "references"], [209, "references"], [211, "references"], [212, "references"], [213, "references"], [214, "references"], [215, "references"], [216, "references"], [217, "references"], [218, "references"], [219, "references"], [220, "references"], [221, "references"], [222, "references"], [223, "references"], [224, "references"], [225, "references"], [226, "references"], [227, "references"], [228, "references"], [229, "references"], [230, "references"], [231, "references"]], "Region Extraction for better brain parcellations": [[163, null]], "Region Extraction using a t-statistical map (3D)": [[89, null]], "Region Extraction with Dictionary learning maps": [[163, "region-extraction-with-dictionary-learning-maps"]], "Region signals extraction": [[53, "region-signals-extraction"]], "Regions Extraction of Default Mode Networks using Smith Atlas": [[88, null]], "Regions definition": [[186, "regions-definition"]], "Regions extraction using dictionary learning and functional connectomes": [[52, null]], "Regression": [[166, "regression"]], "Relabeling the atlas into separated regions": [[87, "relabeling-the-atlas-into-separated-regions"]], "Related example": [[171, "related-example"]], "Removing confounds": [[67, "removing-confounds"]], "Report bugs or discuss enhancement ideas": [[173, "report-bugs-or-discuss-enhancement-ideas"]], "Resample an image to a template": [[94, null]], "Resampling images": [[185, "resampling-images"]], "Resampling one image to match another one": [[185, "resampling-one-image-to-match-another-one"]], "Resampling to a specific target affine, shape, or resolution": [[185, "resampling-to-a-specific-target-affine-shape-or-resolution"]], "Resampling: resizing and changing resolutions of images": [[186, "resampling-resizing-and-changing-resolutions-of-images"]], "Reshape and mask images": [[105, "reshape-and-mask-images"]], "Restrict the analysis to cats and faces": [[3, "restrict-the-analysis-to-cats-and-faces"]], "Restrict to faces and houses": [[37, "restrict-to-faces-and-houses"], [38, "restrict-to-faces-and-houses"], [104, "restrict-to-faces-and-houses"]], "Retrieve and load the fMRI data from the Haxby study": [[3, "retrieve-and-load-the-fmri-data-from-the-haxby-study"], [99, "retrieve-and-load-the-fmri-data-from-the-haxby-study"]], "Retrieve data from nilearn provided (general-purpose) datasets": [[17, "retrieve-data-from-nilearn-provided-general-purpose-datasets"]], "Retrieve the atlas and the data": [[54, "retrieve-the-atlas-and-the-data"], [56, "retrieve-the-atlas-and-the-data"], [58, "retrieve-the-atlas-and-the-data"]], "Retrieve the brain development fMRI dataset": [[60, "retrieve-the-brain-development-fmri-dataset"]], "Retrieve the data: the localizer dataset with contrast maps": [[18, "retrieve-the-data-the-localizer-dataset-with-contrast-maps"]], "Retrieve the files of the Haxby dataset": [[30, "retrieve-the-files-of-the-haxby-dataset"]], "Retrieving multiscale group brain parcellations": [[20, "retrieving-multiscale-group-brain-parcellations"]], "Retrieving the atlas data": [[11, "retrieving-the-atlas-data"]], "Retrieving the data": [[6, "retrieving-the-data"], [24, "retrieving-the-data"], [67, "retrieving-the-data"]], "Review Pull Requests": [[173, "review-pull-requests"]], "Run ICA and map components to terms": [[105, "run-ica-and-map-components-to-terms"]], "Run different estimators": [[46, "run-different-estimators"]], "Run the GLM on data from each run": [[34, "run-the-glm-on-data-from-each-run"]], "Run the estimators": [[46, "run-the-estimators"]], "Running a basic model": [[67, "running-a-basic-model"]], "Running scikit-learn functions for more control on the analysis": [[168, null]], "SPM auditory dataset": [[228, null]], "SPM multimodal dataset": [[229, null]], "Sample and plot response functions": [[68, "sample-and-plot-response-functions"]], "Sample the 3D data around each node of the mesh": [[10, "sample-the-3d-data-around-each-node-of-the-mesh"]], "Save the surface image": [[7, "save-the-surface-image"]], "Saving model outputs to disk": [[64, "saving-model-outputs-to-disk"], [76, "saving-model-outputs-to-disk"]], "Saving plots to file": [[16, "saving-plots-to-file"]], "Saving results to a file": [[4, "saving-results-to-a-file"]], "Schaefer 2018 atlas": [[225, null]], "Scope of the project": [[173, "scope-of-the-project"]], "Score function": [[170, "score-function"]], "Searchlight": [[170, "id6"]], "Searchlight : finding voxels containing information": [[170, null]], "Searchlight analysis of face vs house recognition": [[37, null]], "Searchlight computation": [[37, "searchlight-computation"], [38, "searchlight-computation"]], "Second level model estimation": [[102, "second-level-model-estimation"]], "Second level models": [[178, null]], "Second level report": [[472, "second-level-report"]], "Second-level fMRI model: one sample test": [[80, null]], "Second-level fMRI model: true positive proportion in clusters": [[77, null]], "Second-level fMRI model: two-sample test, unpaired and paired": [[81, null]], "See Also": [[205, "see-also"], [206, "see-also"], [207, "see-also"], [208, "see-also"], [209, "see-also"], [210, "see-also"], [213, "see-also"]], "Seed-based connectivity on the surface": [[24, null]], "Seeding": [[173, "seeding"]], "Seitzman 2018 atlas": [[226, null]], "Selection filters": [[118, "selection-filters"]], "Set up the GLM": [[72, "set-up-the-glm"]], "Setting a parameter by cross-validation": [[35, null]], "Setting estimator parameters": [[166, "setting-estimator-parameters"], [168, "setting-estimator-parameters"]], "Setting up the searchlight": [[170, "setting-up-the-searchlight"]], "Setting up your environment": [[173, "setting-up-your-environment"]], "Show stimuli of Haxby et al. dataset": [[39, null]], "Show the design matrices for the first few trials": [[101, "show-the-design-matrices-for-the-first-few-trials"]], "Showing how to use add_edges": [[16, "showing-how-to-use-add-edges"]], "Simple example of NiftiMasker use": [[93, null]], "Simple example of two-runs fMRI model fitting": [[72, null]], "Simple image manipulation: smoothing": [[4, "simple-image-manipulation-smoothing"]], "Simple statistical report of thresholded contrast": [[64, "simple-statistical-report-of-thresholded-contrast"]], "Single-subject data (two runs) in native space": [[71, null]], "Slicers": [[481, "slicers"]], "Smith 2009 atlas": [[227, null]], "Smoothing": [[67, "smoothing"], [186, "smoothing"]], "Smoothing an image": [[96, null]], "SpaceNet: decoding with spatial structure for better maps": [[171, null]], "Sparse inverse covariance for functional connectomes": [[159, "sparse-inverse-covariance-for-functional-connectomes"]], "Sparse inverse covariance on multiple subjects": [[159, "sparse-inverse-covariance-on-multiple-subjects"]], "Spatial regularization of decoding maps on mixed gambles study": [[167, "spatial-regularization-of-decoding-maps-on-mixed-gambles-study"]], "Special case: resampling to a given voxel size": [[185, null]], "Specific images or collections": [[118, "specific-images-or-collections"]], "Specifying the experimental paradigm": [[6, "specifying-the-experimental-paradigm"]], "Sphere radius": [[170, "sphere-radius"]], "Statistical Parametric Mapping (SPM)": [[177, "statistical-parametric-mapping-spm"]], "Statistical maps/derivatives": [[188, "statistical-maps-derivatives"]], "Statistical maps/derivatives descriptions": [[188, "statistical-maps-derivatives-descriptions"]], "Statistical significance testing": [[6, "statistical-significance-testing"]], "Statistical testing of a second-level analysis": [[82, null]], "Stopping criteria": [[172, "stopping-criteria"]], "Stopping criterion": [[172, "stopping-criterion"]], "Studying partial correlations": [[53, "studying-partial-correlations"]], "Subject level models": [[110, "subject-level-models"]], "Surface API": [[129, "surface-api"], [158, "surface-api"]], "Surface BOLD response": [[38, "surface-bold-response"]], "Surface GLM": [[472, "surface-glm"], [472, "id1"]], "Surface maskers": [[473, "surface-maskers"]], "Surface plotting": [[486, "surface-plotting"]], "Surface-based analysis": [[174, "surface-based-analysis"]], "Surface-based dataset first and second level analysis of a dataset": [[110, null]], "Synthetic dataset": [[172, "synthetic-dataset"]], "Table of contents": [[489, "table-of-contents"]], "Talairach atlas": [[230, null]], "Team": [[0, null]], "Technical details": [[192, null], [272, null]], "Technical point: Illustration of the volume to surface sampling schemes": [[25, null]], "Templates": [[188, "templates"]], "Templates descriptions": [[188, "templates-descriptions"]], "Temporal Filtering and confound removal": [[186, "temporal-filtering-and-confound-removal"]], "Terms and conditions": [[192, null], [272, null]], "Tests": [[173, "tests"]], "Text files: phenotype or behavior": [[184, "text-files-phenotype-or-behavior"]], "The Haxby 2001 experiment": [[165, "the-haxby-2001-experiment"]], "The SpaceNet decoder": [[171, "the-spacenet-decoder"]], "The concept of \u201cmasker\u201d objects": [[186, "the-concept-of-masker-objects"]], "The haxby dataset: different multi-class strategies": [[36, null]], "The impact of global signal removal": [[58, "the-impact-of-global-signal-removal"]], "The noise model: ar(1), ols, or higher order ar?": [[67, "the-noise-model-ar-1-ols-or-higher-order-ar"]], "The original Yeo atlas": [[87, "the-original-yeo-atlas"]], "Then we prepare and mask the data": [[43, "then-we-prepare-and-mask-the-data"]], "Thresholding statistical maps": [[178, "thresholding-statistical-maps"]], "Time series extraction": [[57, "time-series-extraction"]], "Time series-based": [[174, "time-series-based"]], "Time-series from a brain parcellation or \u201cMaxProb\u201d atlas": [[160, "time-series-from-a-brain-parcellation-or-maxprob-atlas"]], "Time-series from a probabilistic atlas": [[160, "time-series-from-a-probabilistic-atlas"]], "Train and cross-validate via an Scikit-Learn pipeline": [[40, "train-and-cross-validate-via-an-scikit-learn-pipeline"]], "Training the decoder": [[31, "training-the-decoder"]], "Tuning cross-validation parameters": [[99, "tuning-cross-validation-parameters"]], "Turning the weights into a nifti image": [[3, "turning-the-weights-into-a-nifti-image"]], "Understanding Decoder": [[40, null]], "Understanding NiftiMasker and mask computation": [[90, null]], "Understanding neuroimaging data": [[184, "understanding-neuroimaging-data"]], "Understanding parameters of the first-level model": [[67, null]], "Unmasking (inverse_transform)": [[117, "unmasking-inverse-transform"]], "Use an atlas and choose regions to outline": [[10, "use-an-atlas-and-choose-regions-to-outline"]], "User guide": [[489, null]], "Using and visualizing the resulting parcellation": [[162, "using-and-visualizing-the-resulting-parcellation"]], "Using any other model in the pipeline": [[168, "using-any-other-model-in-the-pipeline"]], "Using nilearn for the first time": [[181, "using-nilearn-for-the-first-time"]], "Using predefined strategies": [[58, "using-predefined-strategies"]], "Using scikit-learn estimators": [[168, "using-scikit-learn-estimators"]], "Using the decoder": [[111, "using-the-decoder"]], "Using tox": [[182, "using-tox"]], "VBM analysis of aging": [[76, "vbm-analysis-of-aging"]], "Validating results": [[163, "validating-results"]], "Variation of norm of estimate": [[172, "variation-of-norm-of-estimate"]], "Viewing results": [[24, "viewing-results"]], "Visualization": [[23, "visualization"], [26, "visualization"], [27, "visualization"], [31, "visualization"], [37, "visualization"], [38, "visualization"], [44, "visualization"], [104, "visualization"], [110, "visualization"], [170, "visualization"]], "Visualization of Dictionary learning maps": [[163, "visualization-of-dictionary-learning-maps"]], "Visualization of FREM weights": [[32, "visualization-of-frem-weights"]], "Visualization of Region Extraction results": [[163, "visualization-of-region-extraction-results"]], "Visualization of affine resamplings": [[85, null]], "Visualization of brain images": [[9, null], [113, "visualization-of-brain-images"]], "Visualization of functional connectivity matrices": [[163, "visualization-of-functional-connectivity-matrices"]], "Visualize FREM weights": [[41, "visualize-frem-weights"]], "Visualize in - two views \u2018sagittal\u2019 and \u2018axial\u2019 with given coordinates": [[16, "visualize-in-two-views-sagittal-and-axial-with-given-coordinates"]], "Visualize the ANOVA + SVC\u2019s discriminating weights": [[99, "visualize-the-anova-svc-s-discriminating-weights"]], "Visualize the data": [[109, "visualize-the-data"]], "Visualize the decoding maps and quality of predictions": [[45, "visualize-the-decoding-maps-and-quality-of-predictions"]], "Visualize the quality of predictions": [[44, "visualize-the-quality-of-predictions"]], "Visualize the results": [[30, "visualize-the-results"], [82, "visualize-the-results"]], "Visualize: Brain parcellations (Hierarchical KMeans)": [[51, "visualize-brain-parcellations-hierarchical-kmeans"]], "Visualize: Brain parcellations (KMeans)": [[51, "visualize-brain-parcellations-kmeans"]], "Visualize: Brain parcellations (ReNA)": [[51, "visualize-brain-parcellations-rena"]], "Visualize: Brain parcellations (Ward)": [[51, "visualize-brain-parcellations-ward"]], "Visualizing 4D probabilistic atlas maps": [[22, null]], "Visualizing Megatrawls Network Matrices from Human Connectome Project": [[27, null]], "Visualizing a 3D file": [[2, "visualizing-a-3d-file"]], "Visualizing a probabilistic atlas with plot_prob_atlas": [[21, "visualizing-a-probabilistic-atlas-with-plot-prob-atlas"]], "Visualizing a probabilistic atlas with plot_stat_map and add_overlay object": [[21, "visualizing-a-probabilistic-atlas-with-plot-stat-map-and-add-overlay-object"]], "Visualizing a probabilistic atlas: the default mode in the MSDL atlas": [[21, null]], "Visualizing brain parcellations": [[20, "visualizing-brain-parcellations"]], "Visualizing global patterns over time": [[12, "visualizing-global-patterns-over-time"]], "Visualizing global patterns with a carpet plot": [[12, null]], "Visualizing global patterns, separated by tissue type": [[12, "visualizing-global-patterns-separated-by-tissue-type"]], "Visualizing in - single view \u2018axial\u2019 with number of cuts=5": [[16, "visualizing-in-single-view-axial-with-number-of-cuts-5"]], "Visualizing in - single view \u2018sagittal\u2019 with only two slices": [[16, "visualizing-in-single-view-sagittal-with-only-two-slices"]], "Visualizing in - \u2018coronal\u2019 view with single cut": [[16, "visualizing-in-coronal-view-with-single-cut"]], "Visualizing in - \u2018sagittal\u2019, \u2018coronal\u2019 and \u2018axial\u2019 with given coordinates": [[16, "visualizing-in-sagittal-coronal-and-axial-with-given-coordinates"]], "Visualizing multiscale functional brain parcellations": [[20, null]], "Visualizing one volume in a 4D file": [[2, "visualizing-one-volume-in-a-4d-file"]], "Visualizing results": [[117, "visualizing-results"], [164, "visualizing-results"]], "Visualizing the Harvard-Oxford atlas": [[11, "visualizing-the-harvard-oxford-atlas"]], "Visualizing the Harvard-Oxford atlas with contours": [[11, "visualizing-the-harvard-oxford-atlas-with-contours"]], "Visualizing the Juelich atlas": [[11, "visualizing-the-juelich-atlas"]], "Visualizing the Juelich atlas with contours": [[11, "visualizing-the-juelich-atlas-with-contours"]], "Visualizing the computed mask": [[186, "visualizing-the-computed-mask"]], "Visualizing the decoder\u2019s weights": [[165, "visualizing-the-decoder-s-weights"]], "Visualizing the fMRI volume": [[3, "visualizing-the-fmri-volume"]], "Visualizing the face vs house map": [[31, "visualizing-the-face-vs-house-map"]], "Visualizing the parcellation": [[162, "visualizing-the-parcellation"]], "Visualizing the results": [[165, "visualizing-the-results"]], "Visualizing three views along multiple rows and columns": [[16, "visualizing-three-views-along-multiple-rows-and-columns"]], "Visualizing three views in 2x2 fashion": [[16, "visualizing-three-views-in-2x2-fashion"]], "Visualizing without a colorbar on the right side": [[16, "visualizing-without-a-colorbar-on-the-right-side"]], "Volume GLM": [[472, "volume-glm"]], "Volume censoring": [[67, "volume-censoring"]], "Voxel based morphometry": [[178, "voxel-based-morphometry"]], "Voxel-Based Morphometry on OASIS dataset": [[76, null]], "Voxel-Based Morphometry on Oasis dataset": [[44, null]], "Voxel-Based Morphometry on Oasis dataset with Space-Net prior": [[45, null]], "Warm restart": [[172, "warm-restart"]], "We define our prediction function": [[43, "we-define-our-prediction-function"]], "We make a simple bar plot to summarize the results": [[33, "we-make-a-simple-bar-plot-to-summarize-the-results"]], "What do we mean by a run?": [[175, null]], "What is a surface image?": [[7, "what-is-a-surface-image"]], "What is fMRI ?": [[175, "what-is-fmri"]], "What is nilearn?": [[181, "what-is-nilearn"]], "What is the chance level accuracy?": [[3, "what-is-the-chance-level-accuracy"]], "What kind of connectivity is most powerful for classification?": [[53, "what-kind-of-connectivity-is-most-powerful-for-classification"], [100, "what-kind-of-connectivity-is-most-powerful-for-classification"]], "What\u2019s new": [[158, null]], "Which clustering to use": [[162, null]], "Who makes decisions": [[173, "who-makes-decisions"]], "Working with Surface images": [[7, null]], "Yeo 2011 atlas": [[231, null]], "`dtype` argument": [[186, null]], "development fMRI dataset": [[201, null]], "fMRI data modeling": [[175, "fmri-data-modeling"]], "fMRI statistical analysis": [[175, "fmri-statistical-analysis"]], "fMRI: using beta maps of a first-level analysis": [[165, null]], "fiac first level dataset": [[204, null]], "fsaverage template": [[205, null]], "fsaverage3 template": [[206, null]], "fsaverage4 template": [[207, null]], "fsaverage5 template": [[208, null]], "fsaverage6 template": [[209, null]], "language localizer demo dataset": [[215, null]], "localizer first level dataset": [[216, null]], "nilearn": [[487, "nilearn"]], "nilearn.connectome.ConnectivityMeasure": [[232, null]], "nilearn.connectome.GroupSparseCovariance": [[233, null]], "nilearn.connectome.GroupSparseCovarianceCV": [[234, null]], "nilearn.connectome.cov_to_corr": [[235, null]], "nilearn.connectome.group_sparse_covariance": [[236, null]], "nilearn.connectome.prec_to_partial": [[237, null]], "nilearn.connectome.sym_matrix_to_vec": [[238, null]], "nilearn.connectome.vec_to_sym_matrix": [[239, null]], "nilearn.connectome: Functional Connectivity": [[187, null]], "nilearn.datasets.fetch_abide_pcp": [[240, null]], "nilearn.datasets.fetch_adhd": [[241, null]], "nilearn.datasets.fetch_atlas_aal": [[242, null]], "nilearn.datasets.fetch_atlas_allen_2011": [[243, null]], "nilearn.datasets.fetch_atlas_basc_multiscale_2015": [[244, null]], "nilearn.datasets.fetch_atlas_craddock_2012": [[245, null]], "nilearn.datasets.fetch_atlas_destrieux_2009": [[246, null]], "nilearn.datasets.fetch_atlas_difumo": [[247, null]], "nilearn.datasets.fetch_atlas_harvard_oxford": [[248, null]], "nilearn.datasets.fetch_atlas_juelich": [[249, null]], "nilearn.datasets.fetch_atlas_msdl": [[250, null]], "nilearn.datasets.fetch_atlas_pauli_2017": [[251, null]], "nilearn.datasets.fetch_atlas_schaefer_2018": [[252, null]], "nilearn.datasets.fetch_atlas_smith_2009": [[253, null]], "nilearn.datasets.fetch_atlas_surf_destrieux": [[254, null]], "nilearn.datasets.fetch_atlas_talairach": [[255, null]], "nilearn.datasets.fetch_atlas_yeo_2011": [[256, null]], "nilearn.datasets.fetch_bids_langloc_dataset": [[257, null]], "nilearn.datasets.fetch_coords_dosenbach_2010": [[258, null]], "nilearn.datasets.fetch_coords_power_2011": [[259, null]], "nilearn.datasets.fetch_coords_seitzman_2018": [[260, null]], "nilearn.datasets.fetch_development_fmri": [[261, null]], "nilearn.datasets.fetch_ds000030_urls": [[262, null]], "nilearn.datasets.fetch_fiac_first_level": [[263, null]], "nilearn.datasets.fetch_haxby": [[264, null]], "nilearn.datasets.fetch_icbm152_2009": [[265, null]], "nilearn.datasets.fetch_icbm152_brain_gm_mask": [[266, null]], "nilearn.datasets.fetch_language_localizer_demo_dataset": [[267, null]], "nilearn.datasets.fetch_localizer_button_task": [[268, null]], "nilearn.datasets.fetch_localizer_calculation_task": [[269, null]], "nilearn.datasets.fetch_localizer_contrasts": [[270, null]], "nilearn.datasets.fetch_localizer_first_level": [[271, null]], "nilearn.datasets.fetch_megatrawls_netmats": [[272, null]], "nilearn.datasets.fetch_mixed_gambles": [[273, null]], "nilearn.datasets.fetch_miyawaki2008": [[274, null]], "nilearn.datasets.fetch_neurovault": [[275, null]], "nilearn.datasets.fetch_neurovault_auditory_computation_task": [[276, null]], "nilearn.datasets.fetch_neurovault_ids": [[277, null]], "nilearn.datasets.fetch_neurovault_motor_task": [[278, null]], "nilearn.datasets.fetch_oasis_vbm": [[279, null]], "nilearn.datasets.fetch_openneuro_dataset": [[280, null]], "nilearn.datasets.fetch_spm_auditory": [[281, null]], "nilearn.datasets.fetch_spm_multimodal_fmri": [[282, null]], "nilearn.datasets.fetch_surf_fsaverage": [[283, null]], "nilearn.datasets.fetch_surf_nki_enhanced": [[284, null]], "nilearn.datasets.get_data_dirs": [[285, null]], "nilearn.datasets.load_fsaverage": [[286, null]], "nilearn.datasets.load_fsaverage_data": [[287, null]], "nilearn.datasets.load_mni152_brain_mask": [[288, null]], "nilearn.datasets.load_mni152_gm_mask": [[289, null]], "nilearn.datasets.load_mni152_gm_template": [[290, null]], "nilearn.datasets.load_mni152_template": [[291, null]], "nilearn.datasets.load_mni152_wm_mask": [[292, null]], "nilearn.datasets.load_mni152_wm_template": [[293, null]], "nilearn.datasets.load_nki": [[294, null]], "nilearn.datasets.load_sample_motor_activation_image": [[295, null]], "nilearn.datasets.patch_openneuro_dataset": [[296, null]], "nilearn.datasets.select_from_index": [[297, null]], "nilearn.datasets: Automatic Dataset Fetching": [[188, null]], "nilearn.decoding.Decoder": [[298, null]], "nilearn.decoding.DecoderRegressor": [[299, null]], "nilearn.decoding.FREMClassifier": [[300, null]], "nilearn.decoding.FREMRegressor": [[301, null]], "nilearn.decoding.SearchLight": [[302, null]], "nilearn.decoding.SpaceNetClassifier": [[303, null]], "nilearn.decoding.SpaceNetRegressor": [[304, null]], "nilearn.decoding: Decoding": [[189, null]], "nilearn.decomposition.CanICA": [[305, null]], "nilearn.decomposition.DictLearning": [[306, null]], "nilearn.decomposition: Multivariate Decompositions": [[190, null]], "nilearn.glm.ARModel": [[307, null]], "nilearn.glm.Contrast": [[308, null]], "nilearn.glm.FContrastResults": [[309, null]], "nilearn.glm.LikelihoodModelResults": [[310, null]], "nilearn.glm.OLSModel": [[311, null]], "nilearn.glm.RegressionResults": [[312, null]], "nilearn.glm.SimpleRegressionResults": [[313, null]], "nilearn.glm.TContrastResults": [[314, null]], "nilearn.glm.cluster_level_inference": [[315, null]], "nilearn.glm.compute_contrast": [[316, null]], "nilearn.glm.compute_fixed_effects": [[317, null]], "nilearn.glm.expression_to_contrast_vector": [[318, null]], "nilearn.glm.fdr_threshold": [[319, null]], "nilearn.glm.first_level": [[474, "module-nilearn.glm.first_level"]], "nilearn.glm.first_level.FirstLevelModel": [[320, null]], "nilearn.glm.first_level.check_design_matrix": [[321, null]], "nilearn.glm.first_level.compute_regressor": [[322, null]], "nilearn.glm.first_level.first_level_from_bids": [[323, null]], "nilearn.glm.first_level.glover_dispersion_derivative": [[324, null]], "nilearn.glm.first_level.glover_hrf": [[325, null]], "nilearn.glm.first_level.glover_time_derivative": [[326, null]], "nilearn.glm.first_level.make_first_level_design_matrix": [[327, null]], "nilearn.glm.first_level.mean_scaling": [[328, null]], "nilearn.glm.first_level.run_glm": [[329, null]], "nilearn.glm.first_level.spm_dispersion_derivative": [[330, null]], "nilearn.glm.first_level.spm_hrf": [[331, null]], "nilearn.glm.first_level.spm_time_derivative": [[332, null]], "nilearn.glm.second_level": [[474, "module-nilearn.glm.second_level"]], "nilearn.glm.second_level.SecondLevelModel": [[333, null]], "nilearn.glm.second_level.make_second_level_design_matrix": [[334, null]], "nilearn.glm.second_level.non_parametric_inference": [[335, null]], "nilearn.glm.threshold_stats_img": [[336, null]], "nilearn.glm: Generalized Linear Models": [[474, null]], "nilearn.image.binarize_img": [[337, null]], "nilearn.image.clean_img": [[338, null]], "nilearn.image.concat_imgs": [[339, null]], "nilearn.image.coord_transform": [[340, null]], "nilearn.image.copy_img": [[341, null]], "nilearn.image.crop_img": [[342, null]], "nilearn.image.get_data": [[343, null]], "nilearn.image.high_variance_confounds": [[344, null]], "nilearn.image.index_img": [[345, null]], "nilearn.image.iter_img": [[346, null]], "nilearn.image.largest_connected_component_img": [[347, null]], "nilearn.image.load_img": [[348, null]], "nilearn.image.math_img": [[349, null]], "nilearn.image.mean_img": [[350, null]], "nilearn.image.new_img_like": [[351, null]], "nilearn.image.reorder_img": [[352, null]], "nilearn.image.resample_img": [[353, null]], "nilearn.image.resample_to_img": [[354, null]], "nilearn.image.smooth_img": [[355, null]], "nilearn.image.swap_img_hemispheres": [[356, null]], "nilearn.image.threshold_img": [[357, null]], "nilearn.image: Image Processing and Resampling Utilities": [[475, null]], "nilearn.interfaces.bids": [[477, "module-nilearn.interfaces.bids"]], "nilearn.interfaces.bids.get_bids_files": [[358, null]], "nilearn.interfaces.bids.parse_bids_filename": [[359, null]], "nilearn.interfaces.bids.save_glm_to_bids": [[360, null]], "nilearn.interfaces.fmriprep": [[477, "module-nilearn.interfaces.fmriprep"]], "nilearn.interfaces.fmriprep.load_confounds": [[361, null]], "nilearn.interfaces.fmriprep.load_confounds_strategy": [[362, null]], "nilearn.interfaces.fsl": [[477, "module-nilearn.interfaces.fsl"]], "nilearn.interfaces.fsl.get_design_from_fslmat": [[363, null]], "nilearn.interfaces: Loading components from interfaces": [[477, null]], "nilearn.maskers.BaseMasker": [[364, null]], "nilearn.maskers.MultiNiftiLabelsMasker": [[365, null]], "nilearn.maskers.MultiNiftiMapsMasker": [[366, null]], "nilearn.maskers.MultiNiftiMasker": [[367, null]], "nilearn.maskers.NiftiLabelsMasker": [[368, null]], "nilearn.maskers.NiftiMapsMasker": [[369, null]], "nilearn.maskers.NiftiMasker": [[370, null]], "nilearn.maskers.NiftiSpheresMasker": [[371, null]], "nilearn.maskers.SurfaceLabelsMasker": [[372, null]], "nilearn.maskers.SurfaceMapsMasker": [[373, null]], "nilearn.maskers.SurfaceMasker": [[374, null]], "nilearn.maskers: Extracting Signals from Brain Images": [[478, null]], "nilearn.masking.apply_mask": [[375, null]], "nilearn.masking.compute_background_mask": [[376, null]], "nilearn.masking.compute_brain_mask": [[377, null]], "nilearn.masking.compute_epi_mask": [[378, null]], "nilearn.masking.compute_multi_background_mask": [[379, null]], "nilearn.masking.compute_multi_brain_mask": [[380, null]], "nilearn.masking.compute_multi_epi_mask": [[381, null]], "nilearn.masking.intersect_masks": [[382, null]], "nilearn.masking.unmask": [[383, null]], "nilearn.masking: Data Masking Utilities": [[479, null]], "nilearn.mass_univariate.permuted_ols": [[384, null]], "nilearn.mass_univariate: Mass-Univariate Analysis": [[480, null]], "nilearn.plotting.displays.BaseAxes": [[385, null]], "nilearn.plotting.displays.BaseSlicer": [[386, null]], "nilearn.plotting.displays.CutAxes": [[387, null]], "nilearn.plotting.displays.GlassBrainAxes": [[388, null]], "nilearn.plotting.displays.LProjector": [[389, null]], "nilearn.plotting.displays.LRProjector": [[390, null]], "nilearn.plotting.displays.LYRProjector": [[391, null]], "nilearn.plotting.displays.LYRZProjector": [[392, null]], "nilearn.plotting.displays.LZRProjector": [[393, null]], "nilearn.plotting.displays.LZRYProjector": [[394, null]], "nilearn.plotting.displays.MosaicSlicer": [[395, null]], "nilearn.plotting.displays.OrthoProjector": [[396, null]], "nilearn.plotting.displays.OrthoSlicer": [[397, null]], "nilearn.plotting.displays.PlotlySurfaceFigure": [[398, null]], "nilearn.plotting.displays.RProjector": [[399, null]], "nilearn.plotting.displays.TiledSlicer": [[400, null]], "nilearn.plotting.displays.XProjector": [[401, null]], "nilearn.plotting.displays.XSlicer": [[402, null]], "nilearn.plotting.displays.XZProjector": [[403, null]], "nilearn.plotting.displays.XZSlicer": [[404, null]], "nilearn.plotting.displays.YProjector": [[405, null]], "nilearn.plotting.displays.YSlicer": [[406, null]], "nilearn.plotting.displays.YXProjector": [[407, null]], "nilearn.plotting.displays.YXSlicer": [[408, null]], "nilearn.plotting.displays.YZProjector": [[409, null]], "nilearn.plotting.displays.YZSlicer": [[410, null]], "nilearn.plotting.displays.ZProjector": [[411, null]], "nilearn.plotting.displays.ZSlicer": [[412, null]], "nilearn.plotting.displays.get_projector": [[413, null]], "nilearn.plotting.displays.get_slicer": [[414, null]], "nilearn.plotting.displays: Interacting with figures": [[481, "module-nilearn.plotting.displays"]], "nilearn.plotting.find_cut_slices": [[415, null]], "nilearn.plotting.find_parcellation_cut_coords": [[416, null]], "nilearn.plotting.find_probabilistic_atlas_cut_coords": [[417, null]], "nilearn.plotting.find_xyz_cut_coords": [[418, null]], "nilearn.plotting.plot_anat": [[419, null]], "nilearn.plotting.plot_carpet": [[420, null]], "nilearn.plotting.plot_connectome": [[421, null]], "nilearn.plotting.plot_contrast_matrix": [[422, null]], "nilearn.plotting.plot_design_matrix": [[423, null]], "nilearn.plotting.plot_design_matrix_correlation": [[424, null]], "nilearn.plotting.plot_epi": [[425, null]], "nilearn.plotting.plot_event": [[426, null]], "nilearn.plotting.plot_glass_brain": [[427, null]], "nilearn.plotting.plot_img": [[428, null]], "nilearn.plotting.plot_img_comparison": [[429, null]], "nilearn.plotting.plot_img_on_surf": [[430, null]], "nilearn.plotting.plot_markers": [[431, null]], "nilearn.plotting.plot_matrix": [[432, null]], "nilearn.plotting.plot_prob_atlas": [[433, null]], "nilearn.plotting.plot_roi": [[434, null]], "nilearn.plotting.plot_stat_map": [[435, null]], "nilearn.plotting.plot_surf": [[436, null]], "nilearn.plotting.plot_surf_contours": [[437, null]], "nilearn.plotting.plot_surf_roi": [[438, null]], "nilearn.plotting.plot_surf_stat_map": [[439, null]], "nilearn.plotting.show": [[440, null]], "nilearn.plotting.view_connectome": [[441, null]], "nilearn.plotting.view_img": [[442, null]], "nilearn.plotting.view_img_on_surf": [[443, null]], "nilearn.plotting.view_markers": [[444, null]], "nilearn.plotting.view_surf": [[445, null]], "nilearn.plotting: Plotting Brain Data": [[481, null]], "nilearn.regions.HierarchicalKMeans": [[446, null]], "nilearn.regions.Parcellations": [[447, null]], "nilearn.regions.ReNA": [[448, null]], "nilearn.regions.RegionExtractor": [[449, null]], "nilearn.regions.connected_label_regions": [[450, null]], "nilearn.regions.connected_regions": [[451, null]], "nilearn.regions.img_to_signals_labels": [[452, null]], "nilearn.regions.img_to_signals_maps": [[453, null]], "nilearn.regions.recursive_neighbor_agglomeration": [[454, null]], "nilearn.regions.signals_to_img_labels": [[455, null]], "nilearn.regions.signals_to_img_maps": [[456, null]], "nilearn.regions: Operating on Regions": [[482, null]], "nilearn.reporting.HTMLReport": [[457, null]], "nilearn.reporting.get_clusters_table": [[458, null]], "nilearn.reporting.make_glm_report": [[459, null]], "nilearn.reporting: Reporting Functions": [[483, null]], "nilearn.signal.butterworth": [[460, null]], "nilearn.signal.clean": [[461, null]], "nilearn.signal.high_variance_confounds": [[462, null]], "nilearn.signal: Preprocessing Time Series": [[484, null]], "nilearn.surface.FileMesh": [[463, null]], "nilearn.surface.InMemoryMesh": [[464, null]], "nilearn.surface.PolyData": [[465, null]], "nilearn.surface.PolyMesh": [[466, null]], "nilearn.surface.SurfaceImage": [[467, null]], "nilearn.surface.SurfaceMesh": [[468, null]], "nilearn.surface.load_surf_data": [[469, null]], "nilearn.surface.load_surf_mesh": [[470, null]], "nilearn.surface.vol_to_surf": [[471, null]], "nilearn.surface: Manipulating Surface Data": [[485, null]], "nilearn_data: Where is the downloaded data stored?": [[184, null]], "plot_surf_stat_map: Surface plot using a surface map and a cortical mesh": [[486, "plot-surf-stat-map-surface-plot-using-a-surface-map-and-a-cortical-mesh"]], "scipy >= 0.14.0 compatibility": [[284, null]], "view_img_on_surf: Surface plot using a 3D statistical map": [[486, "view-img-on-surf-surface-plot-using-a-3d-statistical-map"]], "view_surf: Surface plot using a surface map and a cortical mesh": [[486, "view-surf-surface-plot-using-a-surface-map-and-a-cortical-mesh"]]}, "docnames": ["authors", "auto_examples/00_tutorials/index", "auto_examples/00_tutorials/plot_3d_and_4d_niimg", "auto_examples/00_tutorials/plot_decoding_tutorial", "auto_examples/00_tutorials/plot_nilearn_101", "auto_examples/00_tutorials/plot_python_101", "auto_examples/00_tutorials/plot_single_subject_single_run", "auto_examples/00_tutorials/plot_surface_101", "auto_examples/00_tutorials/sg_execution_times", "auto_examples/01_plotting/index", "auto_examples/01_plotting/plot_3d_map_to_surface_projection", "auto_examples/01_plotting/plot_atlas", "auto_examples/01_plotting/plot_carpet", "auto_examples/01_plotting/plot_colormaps", "auto_examples/01_plotting/plot_demo_glass_brain", "auto_examples/01_plotting/plot_demo_glass_brain_extensive", "auto_examples/01_plotting/plot_demo_more_plotting", "auto_examples/01_plotting/plot_demo_plotting", "auto_examples/01_plotting/plot_dim_plotting", "auto_examples/01_plotting/plot_haxby_masks", "auto_examples/01_plotting/plot_multiscale_parcellations", "auto_examples/01_plotting/plot_overlay", "auto_examples/01_plotting/plot_prob_atlas", "auto_examples/01_plotting/plot_surf_atlas", "auto_examples/01_plotting/plot_surf_stat_map", "auto_examples/01_plotting/plot_surface_projection_strategies", "auto_examples/01_plotting/plot_visualization", "auto_examples/01_plotting/plot_visualize_megatrawls_netmats", "auto_examples/01_plotting/sg_execution_times", "auto_examples/02_decoding/index", "auto_examples/02_decoding/plot_haxby_anova_svm", "auto_examples/02_decoding/plot_haxby_different_estimators", "auto_examples/02_decoding/plot_haxby_frem", "auto_examples/02_decoding/plot_haxby_full_analysis", "auto_examples/02_decoding/plot_haxby_glm_decoding", "auto_examples/02_decoding/plot_haxby_grid_search", "auto_examples/02_decoding/plot_haxby_multiclass", "auto_examples/02_decoding/plot_haxby_searchlight", "auto_examples/02_decoding/plot_haxby_searchlight_surface", "auto_examples/02_decoding/plot_haxby_stimuli", "auto_examples/02_decoding/plot_haxby_understand_decoder", "auto_examples/02_decoding/plot_mixed_gambles_frem", "auto_examples/02_decoding/plot_miyawaki_encoding", "auto_examples/02_decoding/plot_miyawaki_reconstruction", "auto_examples/02_decoding/plot_oasis_vbm", "auto_examples/02_decoding/plot_oasis_vbm_space_net", "auto_examples/02_decoding/plot_simulated_data", "auto_examples/02_decoding/sg_execution_times", "auto_examples/03_connectivity/index", "auto_examples/03_connectivity/plot_atlas_comparison", "auto_examples/03_connectivity/plot_compare_decomposition", "auto_examples/03_connectivity/plot_data_driven_parcellations", "auto_examples/03_connectivity/plot_extract_regions_dictlearning_maps", "auto_examples/03_connectivity/plot_group_level_connectivity", "auto_examples/03_connectivity/plot_inverse_covariance_connectome", "auto_examples/03_connectivity/plot_multi_subject_connectome", "auto_examples/03_connectivity/plot_probabilistic_atlas_extraction", "auto_examples/03_connectivity/plot_seed_to_voxel_correlation", "auto_examples/03_connectivity/plot_signal_extraction", "auto_examples/03_connectivity/plot_simulated_connectome", "auto_examples/03_connectivity/plot_sphere_based_connectome", "auto_examples/03_connectivity/sg_execution_times", "auto_examples/04_glm_first_level/index", "auto_examples/04_glm_first_level/plot_adhd_dmn", "auto_examples/04_glm_first_level/plot_bids_features", "auto_examples/04_glm_first_level/plot_design_matrix", "auto_examples/04_glm_first_level/plot_fir_model", "auto_examples/04_glm_first_level/plot_first_level_details", "auto_examples/04_glm_first_level/plot_hrf", "auto_examples/04_glm_first_level/plot_localizer_surface_analysis", "auto_examples/04_glm_first_level/plot_predictions_residuals", "auto_examples/04_glm_first_level/plot_spm_multimodal_faces", "auto_examples/04_glm_first_level/plot_two_runs_model", "auto_examples/04_glm_first_level/plot_write_events_file", "auto_examples/04_glm_first_level/sg_execution_times", "auto_examples/05_glm_second_level/index", "auto_examples/05_glm_second_level/plot_oasis", "auto_examples/05_glm_second_level/plot_proportion_activated_voxels", "auto_examples/05_glm_second_level/plot_second_level_association_test", "auto_examples/05_glm_second_level/plot_second_level_design_matrix", "auto_examples/05_glm_second_level/plot_second_level_one_sample_test", "auto_examples/05_glm_second_level/plot_second_level_two_sample_test", "auto_examples/05_glm_second_level/plot_thresholding", "auto_examples/05_glm_second_level/sg_execution_times", "auto_examples/06_manipulating_images/index", "auto_examples/06_manipulating_images/plot_affine_transformation", "auto_examples/06_manipulating_images/plot_compare_mean_image", "auto_examples/06_manipulating_images/plot_extract_regions_labels_image", "auto_examples/06_manipulating_images/plot_extract_rois_smith_atlas", "auto_examples/06_manipulating_images/plot_extract_rois_statistical_maps", "auto_examples/06_manipulating_images/plot_mask_computation", "auto_examples/06_manipulating_images/plot_negate_image", "auto_examples/06_manipulating_images/plot_nifti_labels_simple", "auto_examples/06_manipulating_images/plot_nifti_simple", "auto_examples/06_manipulating_images/plot_resample_to_template", "auto_examples/06_manipulating_images/plot_roi_extraction", "auto_examples/06_manipulating_images/plot_smooth_mean_image", "auto_examples/06_manipulating_images/sg_execution_times", "auto_examples/07_advanced/index", "auto_examples/07_advanced/plot_advanced_decoding_scikit", "auto_examples/07_advanced/plot_age_group_prediction_cross_val", "auto_examples/07_advanced/plot_beta_series", "auto_examples/07_advanced/plot_bids_analysis", "auto_examples/07_advanced/plot_copy_headers_math_img", "auto_examples/07_advanced/plot_haxby_mass_univariate", "auto_examples/07_advanced/plot_ica_neurovault", "auto_examples/07_advanced/plot_ica_resting_state", "auto_examples/07_advanced/plot_localizer_mass_univariate_methods", "auto_examples/07_advanced/plot_localizer_simple_analysis", "auto_examples/07_advanced/plot_neurovault_meta_analysis", "auto_examples/07_advanced/plot_surface_bids_analysis", "auto_examples/07_advanced/plot_surface_image_and_maskers", "auto_examples/07_advanced/sg_execution_times", "auto_examples/index", "auto_examples/sg_execution_times", "bibliography", "building_blocks/index", "building_blocks/manual_pipeline", "building_blocks/neurovault", "changes/0.1.0", "changes/0.1.1", "changes/0.1.2", "changes/0.1.3", "changes/0.1.4", "changes/0.10.0", "changes/0.10.1", "changes/0.10.2", "changes/0.10.3", "changes/0.10.4", "changes/0.11.0", "changes/0.11.1", "changes/0.2.0", "changes/0.2.1", "changes/0.2.2", "changes/0.2.3", "changes/0.2.4", "changes/0.2.5", "changes/0.2.6", "changes/0.3.0", "changes/0.3.1", "changes/0.4.0", "changes/0.4.1", "changes/0.4.2", "changes/0.5.0", "changes/0.5.1", "changes/0.5.2", "changes/0.6.0", "changes/0.6.1", "changes/0.6.2", "changes/0.7.0", "changes/0.7.1", "changes/0.8.0", "changes/0.8.1", "changes/0.9.0", "changes/0.9.1", "changes/0.9.2", "changes/latest", "changes/names", "changes/whats_new", "connectivity/connectome_extraction", "connectivity/functional_connectomes", "connectivity/index", "connectivity/parcellating", "connectivity/region_extraction", "connectivity/resting_state_networks", "decoding/decoding_intro", "decoding/estimator_choice", "decoding/frem", "decoding/going_further", "decoding/index", "decoding/searchlight", "decoding/space_net", "developers/group_sparse_covariance", "development", "glm/first_level_model", "glm/glm_intro", "glm/index", "glm/meaning_difference", "glm/second_level_model", "glossary", "index", "introduction", "maintenance", "manipulating_images/index", "manipulating_images/input_output", "manipulating_images/manipulating_images", "manipulating_images/masker_objects", "modules/connectome", "modules/datasets", "modules/decoding", "modules/decomposition", "modules/description/ABIDE_pcp", "modules/description/Megatrawls", "modules/description/aal", "modules/description/adhd", "modules/description/allen_rsn_2011", "modules/description/basc_multiscale_2015", "modules/description/bids_langloc", "modules/description/brainomics_localizer", "modules/description/craddock_2012", "modules/description/destrieux_surface", "modules/description/development_fmri", "modules/description/difumo_atlases", "modules/description/dosenbach_2010", "modules/description/fiac", "modules/description/fsaverage", "modules/description/fsaverage3", "modules/description/fsaverage4", "modules/description/fsaverage5", "modules/description/fsaverage6", "modules/description/fsaverage_content", "modules/description/harvard_oxford", "modules/description/haxby2001", "modules/description/icbm152_2009", "modules/description/juelich", "modules/description/language_localizer_demo", "modules/description/localizer_first_level", "modules/description/mixed_gambles", "modules/description/miyawaki2008", "modules/description/msdl_atlas", "modules/description/neurovault", "modules/description/nki_enhanced_surface", "modules/description/oasis1", "modules/description/pauli_2017", "modules/description/power_2011", "modules/description/schaefer_2018", "modules/description/seitzman_2018", "modules/description/smith_2009", "modules/description/spm_auditory", "modules/description/spm_multimodal", "modules/description/talairach_atlas", "modules/description/yeo_2011", "modules/generated/nilearn.connectome.ConnectivityMeasure", "modules/generated/nilearn.connectome.GroupSparseCovariance", "modules/generated/nilearn.connectome.GroupSparseCovarianceCV", "modules/generated/nilearn.connectome.cov_to_corr", "modules/generated/nilearn.connectome.group_sparse_covariance", "modules/generated/nilearn.connectome.prec_to_partial", "modules/generated/nilearn.connectome.sym_matrix_to_vec", "modules/generated/nilearn.connectome.vec_to_sym_matrix", "modules/generated/nilearn.datasets.fetch_abide_pcp", "modules/generated/nilearn.datasets.fetch_adhd", "modules/generated/nilearn.datasets.fetch_atlas_aal", "modules/generated/nilearn.datasets.fetch_atlas_allen_2011", "modules/generated/nilearn.datasets.fetch_atlas_basc_multiscale_2015", "modules/generated/nilearn.datasets.fetch_atlas_craddock_2012", "modules/generated/nilearn.datasets.fetch_atlas_destrieux_2009", "modules/generated/nilearn.datasets.fetch_atlas_difumo", "modules/generated/nilearn.datasets.fetch_atlas_harvard_oxford", "modules/generated/nilearn.datasets.fetch_atlas_juelich", "modules/generated/nilearn.datasets.fetch_atlas_msdl", "modules/generated/nilearn.datasets.fetch_atlas_pauli_2017", "modules/generated/nilearn.datasets.fetch_atlas_schaefer_2018", "modules/generated/nilearn.datasets.fetch_atlas_smith_2009", "modules/generated/nilearn.datasets.fetch_atlas_surf_destrieux", "modules/generated/nilearn.datasets.fetch_atlas_talairach", "modules/generated/nilearn.datasets.fetch_atlas_yeo_2011", "modules/generated/nilearn.datasets.fetch_bids_langloc_dataset", "modules/generated/nilearn.datasets.fetch_coords_dosenbach_2010", "modules/generated/nilearn.datasets.fetch_coords_power_2011", "modules/generated/nilearn.datasets.fetch_coords_seitzman_2018", "modules/generated/nilearn.datasets.fetch_development_fmri", "modules/generated/nilearn.datasets.fetch_ds000030_urls", "modules/generated/nilearn.datasets.fetch_fiac_first_level", "modules/generated/nilearn.datasets.fetch_haxby", "modules/generated/nilearn.datasets.fetch_icbm152_2009", "modules/generated/nilearn.datasets.fetch_icbm152_brain_gm_mask", "modules/generated/nilearn.datasets.fetch_language_localizer_demo_dataset", "modules/generated/nilearn.datasets.fetch_localizer_button_task", "modules/generated/nilearn.datasets.fetch_localizer_calculation_task", "modules/generated/nilearn.datasets.fetch_localizer_contrasts", "modules/generated/nilearn.datasets.fetch_localizer_first_level", "modules/generated/nilearn.datasets.fetch_megatrawls_netmats", "modules/generated/nilearn.datasets.fetch_mixed_gambles", "modules/generated/nilearn.datasets.fetch_miyawaki2008", "modules/generated/nilearn.datasets.fetch_neurovault", "modules/generated/nilearn.datasets.fetch_neurovault_auditory_computation_task", "modules/generated/nilearn.datasets.fetch_neurovault_ids", "modules/generated/nilearn.datasets.fetch_neurovault_motor_task", "modules/generated/nilearn.datasets.fetch_oasis_vbm", "modules/generated/nilearn.datasets.fetch_openneuro_dataset", "modules/generated/nilearn.datasets.fetch_spm_auditory", "modules/generated/nilearn.datasets.fetch_spm_multimodal_fmri", "modules/generated/nilearn.datasets.fetch_surf_fsaverage", "modules/generated/nilearn.datasets.fetch_surf_nki_enhanced", "modules/generated/nilearn.datasets.get_data_dirs", "modules/generated/nilearn.datasets.load_fsaverage", "modules/generated/nilearn.datasets.load_fsaverage_data", "modules/generated/nilearn.datasets.load_mni152_brain_mask", "modules/generated/nilearn.datasets.load_mni152_gm_mask", "modules/generated/nilearn.datasets.load_mni152_gm_template", "modules/generated/nilearn.datasets.load_mni152_template", "modules/generated/nilearn.datasets.load_mni152_wm_mask", "modules/generated/nilearn.datasets.load_mni152_wm_template", "modules/generated/nilearn.datasets.load_nki", "modules/generated/nilearn.datasets.load_sample_motor_activation_image", "modules/generated/nilearn.datasets.patch_openneuro_dataset", "modules/generated/nilearn.datasets.select_from_index", "modules/generated/nilearn.decoding.Decoder", "modules/generated/nilearn.decoding.DecoderRegressor", "modules/generated/nilearn.decoding.FREMClassifier", "modules/generated/nilearn.decoding.FREMRegressor", "modules/generated/nilearn.decoding.SearchLight", "modules/generated/nilearn.decoding.SpaceNetClassifier", "modules/generated/nilearn.decoding.SpaceNetRegressor", "modules/generated/nilearn.decomposition.CanICA", "modules/generated/nilearn.decomposition.DictLearning", "modules/generated/nilearn.glm.ARModel", "modules/generated/nilearn.glm.Contrast", "modules/generated/nilearn.glm.FContrastResults", "modules/generated/nilearn.glm.LikelihoodModelResults", "modules/generated/nilearn.glm.OLSModel", "modules/generated/nilearn.glm.RegressionResults", "modules/generated/nilearn.glm.SimpleRegressionResults", "modules/generated/nilearn.glm.TContrastResults", "modules/generated/nilearn.glm.cluster_level_inference", "modules/generated/nilearn.glm.compute_contrast", "modules/generated/nilearn.glm.compute_fixed_effects", "modules/generated/nilearn.glm.expression_to_contrast_vector", "modules/generated/nilearn.glm.fdr_threshold", "modules/generated/nilearn.glm.first_level.FirstLevelModel", "modules/generated/nilearn.glm.first_level.check_design_matrix", "modules/generated/nilearn.glm.first_level.compute_regressor", "modules/generated/nilearn.glm.first_level.first_level_from_bids", "modules/generated/nilearn.glm.first_level.glover_dispersion_derivative", "modules/generated/nilearn.glm.first_level.glover_hrf", "modules/generated/nilearn.glm.first_level.glover_time_derivative", "modules/generated/nilearn.glm.first_level.make_first_level_design_matrix", "modules/generated/nilearn.glm.first_level.mean_scaling", "modules/generated/nilearn.glm.first_level.run_glm", "modules/generated/nilearn.glm.first_level.spm_dispersion_derivative", "modules/generated/nilearn.glm.first_level.spm_hrf", "modules/generated/nilearn.glm.first_level.spm_time_derivative", "modules/generated/nilearn.glm.second_level.SecondLevelModel", "modules/generated/nilearn.glm.second_level.make_second_level_design_matrix", "modules/generated/nilearn.glm.second_level.non_parametric_inference", "modules/generated/nilearn.glm.threshold_stats_img", "modules/generated/nilearn.image.binarize_img", "modules/generated/nilearn.image.clean_img", "modules/generated/nilearn.image.concat_imgs", "modules/generated/nilearn.image.coord_transform", "modules/generated/nilearn.image.copy_img", "modules/generated/nilearn.image.crop_img", "modules/generated/nilearn.image.get_data", "modules/generated/nilearn.image.high_variance_confounds", "modules/generated/nilearn.image.index_img", "modules/generated/nilearn.image.iter_img", "modules/generated/nilearn.image.largest_connected_component_img", "modules/generated/nilearn.image.load_img", "modules/generated/nilearn.image.math_img", "modules/generated/nilearn.image.mean_img", "modules/generated/nilearn.image.new_img_like", "modules/generated/nilearn.image.reorder_img", "modules/generated/nilearn.image.resample_img", "modules/generated/nilearn.image.resample_to_img", "modules/generated/nilearn.image.smooth_img", "modules/generated/nilearn.image.swap_img_hemispheres", "modules/generated/nilearn.image.threshold_img", "modules/generated/nilearn.interfaces.bids.get_bids_files", "modules/generated/nilearn.interfaces.bids.parse_bids_filename", "modules/generated/nilearn.interfaces.bids.save_glm_to_bids", "modules/generated/nilearn.interfaces.fmriprep.load_confounds", "modules/generated/nilearn.interfaces.fmriprep.load_confounds_strategy", "modules/generated/nilearn.interfaces.fsl.get_design_from_fslmat", "modules/generated/nilearn.maskers.BaseMasker", "modules/generated/nilearn.maskers.MultiNiftiLabelsMasker", "modules/generated/nilearn.maskers.MultiNiftiMapsMasker", "modules/generated/nilearn.maskers.MultiNiftiMasker", "modules/generated/nilearn.maskers.NiftiLabelsMasker", "modules/generated/nilearn.maskers.NiftiMapsMasker", "modules/generated/nilearn.maskers.NiftiMasker", "modules/generated/nilearn.maskers.NiftiSpheresMasker", "modules/generated/nilearn.maskers.SurfaceLabelsMasker", "modules/generated/nilearn.maskers.SurfaceMapsMasker", "modules/generated/nilearn.maskers.SurfaceMasker", "modules/generated/nilearn.masking.apply_mask", "modules/generated/nilearn.masking.compute_background_mask", "modules/generated/nilearn.masking.compute_brain_mask", "modules/generated/nilearn.masking.compute_epi_mask", "modules/generated/nilearn.masking.compute_multi_background_mask", "modules/generated/nilearn.masking.compute_multi_brain_mask", "modules/generated/nilearn.masking.compute_multi_epi_mask", "modules/generated/nilearn.masking.intersect_masks", "modules/generated/nilearn.masking.unmask", "modules/generated/nilearn.mass_univariate.permuted_ols", "modules/generated/nilearn.plotting.displays.BaseAxes", "modules/generated/nilearn.plotting.displays.BaseSlicer", "modules/generated/nilearn.plotting.displays.CutAxes", "modules/generated/nilearn.plotting.displays.GlassBrainAxes", "modules/generated/nilearn.plotting.displays.LProjector", "modules/generated/nilearn.plotting.displays.LRProjector", "modules/generated/nilearn.plotting.displays.LYRProjector", "modules/generated/nilearn.plotting.displays.LYRZProjector", "modules/generated/nilearn.plotting.displays.LZRProjector", "modules/generated/nilearn.plotting.displays.LZRYProjector", "modules/generated/nilearn.plotting.displays.MosaicSlicer", "modules/generated/nilearn.plotting.displays.OrthoProjector", "modules/generated/nilearn.plotting.displays.OrthoSlicer", "modules/generated/nilearn.plotting.displays.PlotlySurfaceFigure", "modules/generated/nilearn.plotting.displays.RProjector", "modules/generated/nilearn.plotting.displays.TiledSlicer", "modules/generated/nilearn.plotting.displays.XProjector", "modules/generated/nilearn.plotting.displays.XSlicer", "modules/generated/nilearn.plotting.displays.XZProjector", "modules/generated/nilearn.plotting.displays.XZSlicer", "modules/generated/nilearn.plotting.displays.YProjector", "modules/generated/nilearn.plotting.displays.YSlicer", "modules/generated/nilearn.plotting.displays.YXProjector", "modules/generated/nilearn.plotting.displays.YXSlicer", "modules/generated/nilearn.plotting.displays.YZProjector", "modules/generated/nilearn.plotting.displays.YZSlicer", "modules/generated/nilearn.plotting.displays.ZProjector", "modules/generated/nilearn.plotting.displays.ZSlicer", "modules/generated/nilearn.plotting.displays.get_projector", "modules/generated/nilearn.plotting.displays.get_slicer", "modules/generated/nilearn.plotting.find_cut_slices", "modules/generated/nilearn.plotting.find_parcellation_cut_coords", "modules/generated/nilearn.plotting.find_probabilistic_atlas_cut_coords", "modules/generated/nilearn.plotting.find_xyz_cut_coords", "modules/generated/nilearn.plotting.plot_anat", "modules/generated/nilearn.plotting.plot_carpet", "modules/generated/nilearn.plotting.plot_connectome", "modules/generated/nilearn.plotting.plot_contrast_matrix", "modules/generated/nilearn.plotting.plot_design_matrix", "modules/generated/nilearn.plotting.plot_design_matrix_correlation", "modules/generated/nilearn.plotting.plot_epi", "modules/generated/nilearn.plotting.plot_event", "modules/generated/nilearn.plotting.plot_glass_brain", "modules/generated/nilearn.plotting.plot_img", "modules/generated/nilearn.plotting.plot_img_comparison", "modules/generated/nilearn.plotting.plot_img_on_surf", "modules/generated/nilearn.plotting.plot_markers", "modules/generated/nilearn.plotting.plot_matrix", "modules/generated/nilearn.plotting.plot_prob_atlas", "modules/generated/nilearn.plotting.plot_roi", "modules/generated/nilearn.plotting.plot_stat_map", "modules/generated/nilearn.plotting.plot_surf", "modules/generated/nilearn.plotting.plot_surf_contours", "modules/generated/nilearn.plotting.plot_surf_roi", "modules/generated/nilearn.plotting.plot_surf_stat_map", "modules/generated/nilearn.plotting.show", "modules/generated/nilearn.plotting.view_connectome", "modules/generated/nilearn.plotting.view_img", "modules/generated/nilearn.plotting.view_img_on_surf", "modules/generated/nilearn.plotting.view_markers", "modules/generated/nilearn.plotting.view_surf", "modules/generated/nilearn.regions.HierarchicalKMeans", "modules/generated/nilearn.regions.Parcellations", "modules/generated/nilearn.regions.ReNA", "modules/generated/nilearn.regions.RegionExtractor", "modules/generated/nilearn.regions.connected_label_regions", "modules/generated/nilearn.regions.connected_regions", "modules/generated/nilearn.regions.img_to_signals_labels", "modules/generated/nilearn.regions.img_to_signals_maps", "modules/generated/nilearn.regions.recursive_neighbor_agglomeration", "modules/generated/nilearn.regions.signals_to_img_labels", "modules/generated/nilearn.regions.signals_to_img_maps", "modules/generated/nilearn.reporting.HTMLReport", "modules/generated/nilearn.reporting.get_clusters_table", "modules/generated/nilearn.reporting.make_glm_report", "modules/generated/nilearn.signal.butterworth", "modules/generated/nilearn.signal.clean", "modules/generated/nilearn.signal.high_variance_confounds", "modules/generated/nilearn.surface.FileMesh", "modules/generated/nilearn.surface.InMemoryMesh", "modules/generated/nilearn.surface.PolyData", "modules/generated/nilearn.surface.PolyMesh", "modules/generated/nilearn.surface.SurfaceImage", "modules/generated/nilearn.surface.SurfaceMesh", "modules/generated/nilearn.surface.load_surf_data", "modules/generated/nilearn.surface.load_surf_mesh", "modules/generated/nilearn.surface.vol_to_surf", "modules/generated_reports/glm_reports_examples", "modules/generated_reports/masker_reports_examples", "modules/glm", "modules/image", "modules/index", "modules/interfaces", "modules/maskers", "modules/masking", "modules/mass_univariate", "modules/plotting", "modules/regions", "modules/reporting", "modules/signal", "modules/surface", "plotting/index", "quickstart", "sg_execution_times", "user_guide", "versions"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinxcontrib.bibtex": 9}, "filenames": ["authors.rst", "auto_examples/00_tutorials/index.rst", "auto_examples/00_tutorials/plot_3d_and_4d_niimg.rst", "auto_examples/00_tutorials/plot_decoding_tutorial.rst", "auto_examples/00_tutorials/plot_nilearn_101.rst", "auto_examples/00_tutorials/plot_python_101.rst", "auto_examples/00_tutorials/plot_single_subject_single_run.rst", "auto_examples/00_tutorials/plot_surface_101.rst", "auto_examples/00_tutorials/sg_execution_times.rst", "auto_examples/01_plotting/index.rst", "auto_examples/01_plotting/plot_3d_map_to_surface_projection.rst", "auto_examples/01_plotting/plot_atlas.rst", "auto_examples/01_plotting/plot_carpet.rst", "auto_examples/01_plotting/plot_colormaps.rst", "auto_examples/01_plotting/plot_demo_glass_brain.rst", "auto_examples/01_plotting/plot_demo_glass_brain_extensive.rst", "auto_examples/01_plotting/plot_demo_more_plotting.rst", "auto_examples/01_plotting/plot_demo_plotting.rst", "auto_examples/01_plotting/plot_dim_plotting.rst", "auto_examples/01_plotting/plot_haxby_masks.rst", "auto_examples/01_plotting/plot_multiscale_parcellations.rst", "auto_examples/01_plotting/plot_overlay.rst", "auto_examples/01_plotting/plot_prob_atlas.rst", "auto_examples/01_plotting/plot_surf_atlas.rst", "auto_examples/01_plotting/plot_surf_stat_map.rst", "auto_examples/01_plotting/plot_surface_projection_strategies.rst", "auto_examples/01_plotting/plot_visualization.rst", "auto_examples/01_plotting/plot_visualize_megatrawls_netmats.rst", "auto_examples/01_plotting/sg_execution_times.rst", "auto_examples/02_decoding/index.rst", "auto_examples/02_decoding/plot_haxby_anova_svm.rst", "auto_examples/02_decoding/plot_haxby_different_estimators.rst", "auto_examples/02_decoding/plot_haxby_frem.rst", "auto_examples/02_decoding/plot_haxby_full_analysis.rst", "auto_examples/02_decoding/plot_haxby_glm_decoding.rst", "auto_examples/02_decoding/plot_haxby_grid_search.rst", "auto_examples/02_decoding/plot_haxby_multiclass.rst", "auto_examples/02_decoding/plot_haxby_searchlight.rst", "auto_examples/02_decoding/plot_haxby_searchlight_surface.rst", "auto_examples/02_decoding/plot_haxby_stimuli.rst", "auto_examples/02_decoding/plot_haxby_understand_decoder.rst", "auto_examples/02_decoding/plot_mixed_gambles_frem.rst", "auto_examples/02_decoding/plot_miyawaki_encoding.rst", "auto_examples/02_decoding/plot_miyawaki_reconstruction.rst", "auto_examples/02_decoding/plot_oasis_vbm.rst", "auto_examples/02_decoding/plot_oasis_vbm_space_net.rst", "auto_examples/02_decoding/plot_simulated_data.rst", "auto_examples/02_decoding/sg_execution_times.rst", "auto_examples/03_connectivity/index.rst", "auto_examples/03_connectivity/plot_atlas_comparison.rst", "auto_examples/03_connectivity/plot_compare_decomposition.rst", "auto_examples/03_connectivity/plot_data_driven_parcellations.rst", "auto_examples/03_connectivity/plot_extract_regions_dictlearning_maps.rst", "auto_examples/03_connectivity/plot_group_level_connectivity.rst", "auto_examples/03_connectivity/plot_inverse_covariance_connectome.rst", "auto_examples/03_connectivity/plot_multi_subject_connectome.rst", "auto_examples/03_connectivity/plot_probabilistic_atlas_extraction.rst", "auto_examples/03_connectivity/plot_seed_to_voxel_correlation.rst", "auto_examples/03_connectivity/plot_signal_extraction.rst", "auto_examples/03_connectivity/plot_simulated_connectome.rst", "auto_examples/03_connectivity/plot_sphere_based_connectome.rst", "auto_examples/03_connectivity/sg_execution_times.rst", "auto_examples/04_glm_first_level/index.rst", "auto_examples/04_glm_first_level/plot_adhd_dmn.rst", "auto_examples/04_glm_first_level/plot_bids_features.rst", "auto_examples/04_glm_first_level/plot_design_matrix.rst", "auto_examples/04_glm_first_level/plot_fir_model.rst", "auto_examples/04_glm_first_level/plot_first_level_details.rst", "auto_examples/04_glm_first_level/plot_hrf.rst", "auto_examples/04_glm_first_level/plot_localizer_surface_analysis.rst", "auto_examples/04_glm_first_level/plot_predictions_residuals.rst", "auto_examples/04_glm_first_level/plot_spm_multimodal_faces.rst", "auto_examples/04_glm_first_level/plot_two_runs_model.rst", "auto_examples/04_glm_first_level/plot_write_events_file.rst", "auto_examples/04_glm_first_level/sg_execution_times.rst", "auto_examples/05_glm_second_level/index.rst", "auto_examples/05_glm_second_level/plot_oasis.rst", "auto_examples/05_glm_second_level/plot_proportion_activated_voxels.rst", "auto_examples/05_glm_second_level/plot_second_level_association_test.rst", "auto_examples/05_glm_second_level/plot_second_level_design_matrix.rst", "auto_examples/05_glm_second_level/plot_second_level_one_sample_test.rst", "auto_examples/05_glm_second_level/plot_second_level_two_sample_test.rst", "auto_examples/05_glm_second_level/plot_thresholding.rst", "auto_examples/05_glm_second_level/sg_execution_times.rst", "auto_examples/06_manipulating_images/index.rst", "auto_examples/06_manipulating_images/plot_affine_transformation.rst", "auto_examples/06_manipulating_images/plot_compare_mean_image.rst", "auto_examples/06_manipulating_images/plot_extract_regions_labels_image.rst", "auto_examples/06_manipulating_images/plot_extract_rois_smith_atlas.rst", "auto_examples/06_manipulating_images/plot_extract_rois_statistical_maps.rst", "auto_examples/06_manipulating_images/plot_mask_computation.rst", "auto_examples/06_manipulating_images/plot_negate_image.rst", "auto_examples/06_manipulating_images/plot_nifti_labels_simple.rst", "auto_examples/06_manipulating_images/plot_nifti_simple.rst", "auto_examples/06_manipulating_images/plot_resample_to_template.rst", "auto_examples/06_manipulating_images/plot_roi_extraction.rst", "auto_examples/06_manipulating_images/plot_smooth_mean_image.rst", "auto_examples/06_manipulating_images/sg_execution_times.rst", "auto_examples/07_advanced/index.rst", "auto_examples/07_advanced/plot_advanced_decoding_scikit.rst", "auto_examples/07_advanced/plot_age_group_prediction_cross_val.rst", "auto_examples/07_advanced/plot_beta_series.rst", "auto_examples/07_advanced/plot_bids_analysis.rst", "auto_examples/07_advanced/plot_copy_headers_math_img.rst", "auto_examples/07_advanced/plot_haxby_mass_univariate.rst", "auto_examples/07_advanced/plot_ica_neurovault.rst", "auto_examples/07_advanced/plot_ica_resting_state.rst", "auto_examples/07_advanced/plot_localizer_mass_univariate_methods.rst", "auto_examples/07_advanced/plot_localizer_simple_analysis.rst", "auto_examples/07_advanced/plot_neurovault_meta_analysis.rst", "auto_examples/07_advanced/plot_surface_bids_analysis.rst", "auto_examples/07_advanced/plot_surface_image_and_maskers.rst", "auto_examples/07_advanced/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/sg_execution_times.rst", "bibliography.rst", "building_blocks/index.rst", "building_blocks/manual_pipeline.rst", "building_blocks/neurovault.rst", "changes/0.1.0.rst", "changes/0.1.1.rst", "changes/0.1.2.rst", "changes/0.1.3.rst", "changes/0.1.4.rst", "changes/0.10.0.rst", "changes/0.10.1.rst", "changes/0.10.2.rst", "changes/0.10.3.rst", "changes/0.10.4.rst", "changes/0.11.0.rst", "changes/0.11.1.rst", "changes/0.2.0.rst", "changes/0.2.1.rst", "changes/0.2.2.rst", "changes/0.2.3.rst", "changes/0.2.4.rst", "changes/0.2.5.rst", "changes/0.2.6.rst", "changes/0.3.0.rst", "changes/0.3.1.rst", "changes/0.4.0.rst", "changes/0.4.1.rst", "changes/0.4.2.rst", "changes/0.5.0.rst", "changes/0.5.1.rst", "changes/0.5.2.rst", "changes/0.6.0.rst", "changes/0.6.1.rst", "changes/0.6.2.rst", "changes/0.7.0.rst", "changes/0.7.1.rst", "changes/0.8.0.rst", "changes/0.8.1.rst", "changes/0.9.0.rst", "changes/0.9.1.rst", "changes/0.9.2.rst", "changes/latest.rst", "changes/names.rst", "changes/whats_new.rst", "connectivity/connectome_extraction.rst", "connectivity/functional_connectomes.rst", "connectivity/index.rst", "connectivity/parcellating.rst", "connectivity/region_extraction.rst", "connectivity/resting_state_networks.rst", "decoding/decoding_intro.rst", "decoding/estimator_choice.rst", "decoding/frem.rst", "decoding/going_further.rst", "decoding/index.rst", "decoding/searchlight.rst", "decoding/space_net.rst", "developers/group_sparse_covariance.rst", "development.rst", "glm/first_level_model.rst", "glm/glm_intro.rst", "glm/index.rst", "glm/meaning_difference.rst", "glm/second_level_model.rst", "glossary.rst", "index.rst", "introduction.rst", "maintenance.rst", "manipulating_images/index.rst", "manipulating_images/input_output.rst", "manipulating_images/manipulating_images.rst", "manipulating_images/masker_objects.rst", "modules/connectome.rst", "modules/datasets.rst", "modules/decoding.rst", "modules/decomposition.rst", "modules/description/ABIDE_pcp.rst", "modules/description/Megatrawls.rst", "modules/description/aal.rst", "modules/description/adhd.rst", "modules/description/allen_rsn_2011.rst", "modules/description/basc_multiscale_2015.rst", "modules/description/bids_langloc.rst", "modules/description/brainomics_localizer.rst", "modules/description/craddock_2012.rst", "modules/description/destrieux_surface.rst", "modules/description/development_fmri.rst", "modules/description/difumo_atlases.rst", "modules/description/dosenbach_2010.rst", "modules/description/fiac.rst", "modules/description/fsaverage.rst", "modules/description/fsaverage3.rst", "modules/description/fsaverage4.rst", "modules/description/fsaverage5.rst", "modules/description/fsaverage6.rst", "modules/description/fsaverage_content.rst", "modules/description/harvard_oxford.rst", "modules/description/haxby2001.rst", "modules/description/icbm152_2009.rst", "modules/description/juelich.rst", "modules/description/language_localizer_demo.rst", "modules/description/localizer_first_level.rst", "modules/description/mixed_gambles.rst", "modules/description/miyawaki2008.rst", "modules/description/msdl_atlas.rst", "modules/description/neurovault.rst", "modules/description/nki_enhanced_surface.rst", "modules/description/oasis1.rst", "modules/description/pauli_2017.rst", "modules/description/power_2011.rst", "modules/description/schaefer_2018.rst", "modules/description/seitzman_2018.rst", "modules/description/smith_2009.rst", "modules/description/spm_auditory.rst", "modules/description/spm_multimodal.rst", "modules/description/talairach_atlas.rst", "modules/description/yeo_2011.rst", "modules/generated/nilearn.connectome.ConnectivityMeasure.rst", "modules/generated/nilearn.connectome.GroupSparseCovariance.rst", "modules/generated/nilearn.connectome.GroupSparseCovarianceCV.rst", "modules/generated/nilearn.connectome.cov_to_corr.rst", "modules/generated/nilearn.connectome.group_sparse_covariance.rst", "modules/generated/nilearn.connectome.prec_to_partial.rst", "modules/generated/nilearn.connectome.sym_matrix_to_vec.rst", "modules/generated/nilearn.connectome.vec_to_sym_matrix.rst", "modules/generated/nilearn.datasets.fetch_abide_pcp.rst", "modules/generated/nilearn.datasets.fetch_adhd.rst", "modules/generated/nilearn.datasets.fetch_atlas_aal.rst", "modules/generated/nilearn.datasets.fetch_atlas_allen_2011.rst", "modules/generated/nilearn.datasets.fetch_atlas_basc_multiscale_2015.rst", "modules/generated/nilearn.datasets.fetch_atlas_craddock_2012.rst", "modules/generated/nilearn.datasets.fetch_atlas_destrieux_2009.rst", "modules/generated/nilearn.datasets.fetch_atlas_difumo.rst", "modules/generated/nilearn.datasets.fetch_atlas_harvard_oxford.rst", "modules/generated/nilearn.datasets.fetch_atlas_juelich.rst", "modules/generated/nilearn.datasets.fetch_atlas_msdl.rst", "modules/generated/nilearn.datasets.fetch_atlas_pauli_2017.rst", "modules/generated/nilearn.datasets.fetch_atlas_schaefer_2018.rst", "modules/generated/nilearn.datasets.fetch_atlas_smith_2009.rst", "modules/generated/nilearn.datasets.fetch_atlas_surf_destrieux.rst", "modules/generated/nilearn.datasets.fetch_atlas_talairach.rst", "modules/generated/nilearn.datasets.fetch_atlas_yeo_2011.rst", "modules/generated/nilearn.datasets.fetch_bids_langloc_dataset.rst", "modules/generated/nilearn.datasets.fetch_coords_dosenbach_2010.rst", "modules/generated/nilearn.datasets.fetch_coords_power_2011.rst", "modules/generated/nilearn.datasets.fetch_coords_seitzman_2018.rst", "modules/generated/nilearn.datasets.fetch_development_fmri.rst", "modules/generated/nilearn.datasets.fetch_ds000030_urls.rst", "modules/generated/nilearn.datasets.fetch_fiac_first_level.rst", "modules/generated/nilearn.datasets.fetch_haxby.rst", "modules/generated/nilearn.datasets.fetch_icbm152_2009.rst", "modules/generated/nilearn.datasets.fetch_icbm152_brain_gm_mask.rst", "modules/generated/nilearn.datasets.fetch_language_localizer_demo_dataset.rst", "modules/generated/nilearn.datasets.fetch_localizer_button_task.rst", "modules/generated/nilearn.datasets.fetch_localizer_calculation_task.rst", "modules/generated/nilearn.datasets.fetch_localizer_contrasts.rst", "modules/generated/nilearn.datasets.fetch_localizer_first_level.rst", "modules/generated/nilearn.datasets.fetch_megatrawls_netmats.rst", "modules/generated/nilearn.datasets.fetch_mixed_gambles.rst", "modules/generated/nilearn.datasets.fetch_miyawaki2008.rst", "modules/generated/nilearn.datasets.fetch_neurovault.rst", "modules/generated/nilearn.datasets.fetch_neurovault_auditory_computation_task.rst", "modules/generated/nilearn.datasets.fetch_neurovault_ids.rst", "modules/generated/nilearn.datasets.fetch_neurovault_motor_task.rst", "modules/generated/nilearn.datasets.fetch_oasis_vbm.rst", "modules/generated/nilearn.datasets.fetch_openneuro_dataset.rst", "modules/generated/nilearn.datasets.fetch_spm_auditory.rst", "modules/generated/nilearn.datasets.fetch_spm_multimodal_fmri.rst", "modules/generated/nilearn.datasets.fetch_surf_fsaverage.rst", "modules/generated/nilearn.datasets.fetch_surf_nki_enhanced.rst", "modules/generated/nilearn.datasets.get_data_dirs.rst", "modules/generated/nilearn.datasets.load_fsaverage.rst", "modules/generated/nilearn.datasets.load_fsaverage_data.rst", "modules/generated/nilearn.datasets.load_mni152_brain_mask.rst", "modules/generated/nilearn.datasets.load_mni152_gm_mask.rst", "modules/generated/nilearn.datasets.load_mni152_gm_template.rst", "modules/generated/nilearn.datasets.load_mni152_template.rst", "modules/generated/nilearn.datasets.load_mni152_wm_mask.rst", "modules/generated/nilearn.datasets.load_mni152_wm_template.rst", "modules/generated/nilearn.datasets.load_nki.rst", "modules/generated/nilearn.datasets.load_sample_motor_activation_image.rst", "modules/generated/nilearn.datasets.patch_openneuro_dataset.rst", "modules/generated/nilearn.datasets.select_from_index.rst", "modules/generated/nilearn.decoding.Decoder.rst", "modules/generated/nilearn.decoding.DecoderRegressor.rst", "modules/generated/nilearn.decoding.FREMClassifier.rst", "modules/generated/nilearn.decoding.FREMRegressor.rst", "modules/generated/nilearn.decoding.SearchLight.rst", "modules/generated/nilearn.decoding.SpaceNetClassifier.rst", "modules/generated/nilearn.decoding.SpaceNetRegressor.rst", "modules/generated/nilearn.decomposition.CanICA.rst", "modules/generated/nilearn.decomposition.DictLearning.rst", "modules/generated/nilearn.glm.ARModel.rst", "modules/generated/nilearn.glm.Contrast.rst", "modules/generated/nilearn.glm.FContrastResults.rst", "modules/generated/nilearn.glm.LikelihoodModelResults.rst", "modules/generated/nilearn.glm.OLSModel.rst", "modules/generated/nilearn.glm.RegressionResults.rst", "modules/generated/nilearn.glm.SimpleRegressionResults.rst", "modules/generated/nilearn.glm.TContrastResults.rst", "modules/generated/nilearn.glm.cluster_level_inference.rst", "modules/generated/nilearn.glm.compute_contrast.rst", "modules/generated/nilearn.glm.compute_fixed_effects.rst", "modules/generated/nilearn.glm.expression_to_contrast_vector.rst", "modules/generated/nilearn.glm.fdr_threshold.rst", "modules/generated/nilearn.glm.first_level.FirstLevelModel.rst", "modules/generated/nilearn.glm.first_level.check_design_matrix.rst", "modules/generated/nilearn.glm.first_level.compute_regressor.rst", "modules/generated/nilearn.glm.first_level.first_level_from_bids.rst", "modules/generated/nilearn.glm.first_level.glover_dispersion_derivative.rst", "modules/generated/nilearn.glm.first_level.glover_hrf.rst", "modules/generated/nilearn.glm.first_level.glover_time_derivative.rst", "modules/generated/nilearn.glm.first_level.make_first_level_design_matrix.rst", "modules/generated/nilearn.glm.first_level.mean_scaling.rst", "modules/generated/nilearn.glm.first_level.run_glm.rst", "modules/generated/nilearn.glm.first_level.spm_dispersion_derivative.rst", "modules/generated/nilearn.glm.first_level.spm_hrf.rst", "modules/generated/nilearn.glm.first_level.spm_time_derivative.rst", "modules/generated/nilearn.glm.second_level.SecondLevelModel.rst", "modules/generated/nilearn.glm.second_level.make_second_level_design_matrix.rst", "modules/generated/nilearn.glm.second_level.non_parametric_inference.rst", "modules/generated/nilearn.glm.threshold_stats_img.rst", "modules/generated/nilearn.image.binarize_img.rst", "modules/generated/nilearn.image.clean_img.rst", "modules/generated/nilearn.image.concat_imgs.rst", "modules/generated/nilearn.image.coord_transform.rst", "modules/generated/nilearn.image.copy_img.rst", "modules/generated/nilearn.image.crop_img.rst", "modules/generated/nilearn.image.get_data.rst", "modules/generated/nilearn.image.high_variance_confounds.rst", "modules/generated/nilearn.image.index_img.rst", "modules/generated/nilearn.image.iter_img.rst", "modules/generated/nilearn.image.largest_connected_component_img.rst", "modules/generated/nilearn.image.load_img.rst", "modules/generated/nilearn.image.math_img.rst", "modules/generated/nilearn.image.mean_img.rst", "modules/generated/nilearn.image.new_img_like.rst", "modules/generated/nilearn.image.reorder_img.rst", "modules/generated/nilearn.image.resample_img.rst", "modules/generated/nilearn.image.resample_to_img.rst", "modules/generated/nilearn.image.smooth_img.rst", "modules/generated/nilearn.image.swap_img_hemispheres.rst", "modules/generated/nilearn.image.threshold_img.rst", "modules/generated/nilearn.interfaces.bids.get_bids_files.rst", "modules/generated/nilearn.interfaces.bids.parse_bids_filename.rst", "modules/generated/nilearn.interfaces.bids.save_glm_to_bids.rst", "modules/generated/nilearn.interfaces.fmriprep.load_confounds.rst", "modules/generated/nilearn.interfaces.fmriprep.load_confounds_strategy.rst", "modules/generated/nilearn.interfaces.fsl.get_design_from_fslmat.rst", "modules/generated/nilearn.maskers.BaseMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiLabelsMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiMapsMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiMasker.rst", "modules/generated/nilearn.maskers.NiftiLabelsMasker.rst", "modules/generated/nilearn.maskers.NiftiMapsMasker.rst", "modules/generated/nilearn.maskers.NiftiMasker.rst", "modules/generated/nilearn.maskers.NiftiSpheresMasker.rst", "modules/generated/nilearn.maskers.SurfaceLabelsMasker.rst", "modules/generated/nilearn.maskers.SurfaceMapsMasker.rst", "modules/generated/nilearn.maskers.SurfaceMasker.rst", "modules/generated/nilearn.masking.apply_mask.rst", "modules/generated/nilearn.masking.compute_background_mask.rst", "modules/generated/nilearn.masking.compute_brain_mask.rst", "modules/generated/nilearn.masking.compute_epi_mask.rst", "modules/generated/nilearn.masking.compute_multi_background_mask.rst", "modules/generated/nilearn.masking.compute_multi_brain_mask.rst", "modules/generated/nilearn.masking.compute_multi_epi_mask.rst", "modules/generated/nilearn.masking.intersect_masks.rst", "modules/generated/nilearn.masking.unmask.rst", "modules/generated/nilearn.mass_univariate.permuted_ols.rst", "modules/generated/nilearn.plotting.displays.BaseAxes.rst", "modules/generated/nilearn.plotting.displays.BaseSlicer.rst", "modules/generated/nilearn.plotting.displays.CutAxes.rst", "modules/generated/nilearn.plotting.displays.GlassBrainAxes.rst", "modules/generated/nilearn.plotting.displays.LProjector.rst", "modules/generated/nilearn.plotting.displays.LRProjector.rst", "modules/generated/nilearn.plotting.displays.LYRProjector.rst", "modules/generated/nilearn.plotting.displays.LYRZProjector.rst", "modules/generated/nilearn.plotting.displays.LZRProjector.rst", "modules/generated/nilearn.plotting.displays.LZRYProjector.rst", "modules/generated/nilearn.plotting.displays.MosaicSlicer.rst", "modules/generated/nilearn.plotting.displays.OrthoProjector.rst", "modules/generated/nilearn.plotting.displays.OrthoSlicer.rst", "modules/generated/nilearn.plotting.displays.PlotlySurfaceFigure.rst", "modules/generated/nilearn.plotting.displays.RProjector.rst", "modules/generated/nilearn.plotting.displays.TiledSlicer.rst", "modules/generated/nilearn.plotting.displays.XProjector.rst", "modules/generated/nilearn.plotting.displays.XSlicer.rst", "modules/generated/nilearn.plotting.displays.XZProjector.rst", "modules/generated/nilearn.plotting.displays.XZSlicer.rst", "modules/generated/nilearn.plotting.displays.YProjector.rst", "modules/generated/nilearn.plotting.displays.YSlicer.rst", "modules/generated/nilearn.plotting.displays.YXProjector.rst", "modules/generated/nilearn.plotting.displays.YXSlicer.rst", "modules/generated/nilearn.plotting.displays.YZProjector.rst", "modules/generated/nilearn.plotting.displays.YZSlicer.rst", "modules/generated/nilearn.plotting.displays.ZProjector.rst", "modules/generated/nilearn.plotting.displays.ZSlicer.rst", "modules/generated/nilearn.plotting.displays.get_projector.rst", "modules/generated/nilearn.plotting.displays.get_slicer.rst", "modules/generated/nilearn.plotting.find_cut_slices.rst", "modules/generated/nilearn.plotting.find_parcellation_cut_coords.rst", "modules/generated/nilearn.plotting.find_probabilistic_atlas_cut_coords.rst", "modules/generated/nilearn.plotting.find_xyz_cut_coords.rst", "modules/generated/nilearn.plotting.plot_anat.rst", "modules/generated/nilearn.plotting.plot_carpet.rst", "modules/generated/nilearn.plotting.plot_connectome.rst", "modules/generated/nilearn.plotting.plot_contrast_matrix.rst", "modules/generated/nilearn.plotting.plot_design_matrix.rst", "modules/generated/nilearn.plotting.plot_design_matrix_correlation.rst", "modules/generated/nilearn.plotting.plot_epi.rst", "modules/generated/nilearn.plotting.plot_event.rst", "modules/generated/nilearn.plotting.plot_glass_brain.rst", "modules/generated/nilearn.plotting.plot_img.rst", "modules/generated/nilearn.plotting.plot_img_comparison.rst", "modules/generated/nilearn.plotting.plot_img_on_surf.rst", "modules/generated/nilearn.plotting.plot_markers.rst", "modules/generated/nilearn.plotting.plot_matrix.rst", "modules/generated/nilearn.plotting.plot_prob_atlas.rst", "modules/generated/nilearn.plotting.plot_roi.rst", "modules/generated/nilearn.plotting.plot_stat_map.rst", "modules/generated/nilearn.plotting.plot_surf.rst", "modules/generated/nilearn.plotting.plot_surf_contours.rst", "modules/generated/nilearn.plotting.plot_surf_roi.rst", "modules/generated/nilearn.plotting.plot_surf_stat_map.rst", "modules/generated/nilearn.plotting.show.rst", "modules/generated/nilearn.plotting.view_connectome.rst", "modules/generated/nilearn.plotting.view_img.rst", "modules/generated/nilearn.plotting.view_img_on_surf.rst", "modules/generated/nilearn.plotting.view_markers.rst", "modules/generated/nilearn.plotting.view_surf.rst", "modules/generated/nilearn.regions.HierarchicalKMeans.rst", "modules/generated/nilearn.regions.Parcellations.rst", "modules/generated/nilearn.regions.ReNA.rst", "modules/generated/nilearn.regions.RegionExtractor.rst", "modules/generated/nilearn.regions.connected_label_regions.rst", "modules/generated/nilearn.regions.connected_regions.rst", "modules/generated/nilearn.regions.img_to_signals_labels.rst", "modules/generated/nilearn.regions.img_to_signals_maps.rst", "modules/generated/nilearn.regions.recursive_neighbor_agglomeration.rst", "modules/generated/nilearn.regions.signals_to_img_labels.rst", "modules/generated/nilearn.regions.signals_to_img_maps.rst", "modules/generated/nilearn.reporting.HTMLReport.rst", "modules/generated/nilearn.reporting.get_clusters_table.rst", "modules/generated/nilearn.reporting.make_glm_report.rst", "modules/generated/nilearn.signal.butterworth.rst", "modules/generated/nilearn.signal.clean.rst", "modules/generated/nilearn.signal.high_variance_confounds.rst", "modules/generated/nilearn.surface.FileMesh.rst", "modules/generated/nilearn.surface.InMemoryMesh.rst", "modules/generated/nilearn.surface.PolyData.rst", "modules/generated/nilearn.surface.PolyMesh.rst", "modules/generated/nilearn.surface.SurfaceImage.rst", "modules/generated/nilearn.surface.SurfaceMesh.rst", "modules/generated/nilearn.surface.load_surf_data.rst", "modules/generated/nilearn.surface.load_surf_mesh.rst", "modules/generated/nilearn.surface.vol_to_surf.rst", "modules/generated_reports/glm_reports_examples.rst", "modules/generated_reports/masker_reports_examples.rst", "modules/glm.rst", "modules/image.rst", "modules/index.rst", "modules/interfaces.rst", "modules/maskers.rst", "modules/masking.rst", "modules/mass_univariate.rst", "modules/plotting.rst", "modules/regions.rst", "modules/reporting.rst", "modules/signal.rst", "modules/surface.rst", "plotting/index.rst", "quickstart.md", "sg_execution_times.rst", "user_guide.rst", "versions.rst"], "indexentries": {"__init__() (nilearn.connectome.connectivitymeasure method)": [[232, "nilearn.connectome.ConnectivityMeasure.__init__", false]], "__init__() (nilearn.connectome.groupsparsecovariance method)": [[233, "nilearn.connectome.GroupSparseCovariance.__init__", false]], "__init__() (nilearn.connectome.groupsparsecovariancecv method)": [[234, "nilearn.connectome.GroupSparseCovarianceCV.__init__", false]], "__init__() (nilearn.decoding.decoder method)": [[298, "nilearn.decoding.Decoder.__init__", false]], "__init__() (nilearn.decoding.decoderregressor method)": [[299, "nilearn.decoding.DecoderRegressor.__init__", false]], "__init__() (nilearn.decoding.fremclassifier method)": [[300, "nilearn.decoding.FREMClassifier.__init__", false]], "__init__() (nilearn.decoding.fremregressor method)": [[301, "nilearn.decoding.FREMRegressor.__init__", false]], "__init__() (nilearn.decoding.searchlight method)": [[302, "nilearn.decoding.SearchLight.__init__", false]], "__init__() (nilearn.decoding.spacenetclassifier method)": [[303, "nilearn.decoding.SpaceNetClassifier.__init__", false]], "__init__() (nilearn.decoding.spacenetregressor method)": [[304, "nilearn.decoding.SpaceNetRegressor.__init__", false]], "__init__() (nilearn.decomposition.canica method)": [[305, "nilearn.decomposition.CanICA.__init__", false]], "__init__() (nilearn.decomposition.dictlearning method)": [[306, "nilearn.decomposition.DictLearning.__init__", false]], "__init__() (nilearn.glm.armodel method)": [[307, "nilearn.glm.ARModel.__init__", false]], "__init__() (nilearn.glm.contrast method)": [[308, "nilearn.glm.Contrast.__init__", false]], "__init__() (nilearn.glm.fcontrastresults method)": [[309, "nilearn.glm.FContrastResults.__init__", false]], "__init__() (nilearn.glm.first_level.firstlevelmodel method)": [[320, "nilearn.glm.first_level.FirstLevelModel.__init__", false]], "__init__() (nilearn.glm.likelihoodmodelresults method)": [[310, "nilearn.glm.LikelihoodModelResults.__init__", false]], "__init__() (nilearn.glm.olsmodel method)": [[311, "nilearn.glm.OLSModel.__init__", false]], "__init__() (nilearn.glm.regressionresults method)": [[312, "nilearn.glm.RegressionResults.__init__", false]], "__init__() (nilearn.glm.second_level.secondlevelmodel method)": [[333, "nilearn.glm.second_level.SecondLevelModel.__init__", false]], "__init__() (nilearn.glm.simpleregressionresults method)": [[313, "nilearn.glm.SimpleRegressionResults.__init__", false]], "__init__() (nilearn.glm.tcontrastresults method)": [[314, "nilearn.glm.TContrastResults.__init__", false]], "__init__() (nilearn.maskers.basemasker method)": [[364, "nilearn.maskers.BaseMasker.__init__", false]], "__init__() (nilearn.maskers.multiniftilabelsmasker method)": [[365, "nilearn.maskers.MultiNiftiLabelsMasker.__init__", false]], "__init__() (nilearn.maskers.multiniftimapsmasker method)": [[366, "nilearn.maskers.MultiNiftiMapsMasker.__init__", false]], "__init__() (nilearn.maskers.multiniftimasker method)": [[367, "nilearn.maskers.MultiNiftiMasker.__init__", false]], "__init__() (nilearn.maskers.niftilabelsmasker method)": [[368, "nilearn.maskers.NiftiLabelsMasker.__init__", false]], "__init__() (nilearn.maskers.niftimapsmasker method)": [[369, "nilearn.maskers.NiftiMapsMasker.__init__", false]], "__init__() (nilearn.maskers.niftimasker method)": [[370, "nilearn.maskers.NiftiMasker.__init__", false]], "__init__() (nilearn.maskers.niftispheresmasker method)": [[371, "nilearn.maskers.NiftiSpheresMasker.__init__", false]], "__init__() (nilearn.maskers.surfacelabelsmasker method)": [[372, "nilearn.maskers.SurfaceLabelsMasker.__init__", false]], "__init__() (nilearn.maskers.surfacemapsmasker method)": [[373, "nilearn.maskers.SurfaceMapsMasker.__init__", false]], "__init__() (nilearn.maskers.surfacemasker method)": [[374, "nilearn.maskers.SurfaceMasker.__init__", false]], "__init__() (nilearn.plotting.displays.baseaxes method)": [[385, "nilearn.plotting.displays.BaseAxes.__init__", false]], "__init__() (nilearn.plotting.displays.baseslicer method)": [[386, "nilearn.plotting.displays.BaseSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.cutaxes method)": [[387, "nilearn.plotting.displays.CutAxes.__init__", false]], "__init__() (nilearn.plotting.displays.glassbrainaxes method)": [[388, "nilearn.plotting.displays.GlassBrainAxes.__init__", false]], "__init__() (nilearn.plotting.displays.lprojector method)": [[389, "nilearn.plotting.displays.LProjector.__init__", false]], "__init__() (nilearn.plotting.displays.lrprojector method)": [[390, "nilearn.plotting.displays.LRProjector.__init__", false]], "__init__() (nilearn.plotting.displays.lyrprojector method)": [[391, "nilearn.plotting.displays.LYRProjector.__init__", false]], "__init__() (nilearn.plotting.displays.lyrzprojector method)": [[392, "nilearn.plotting.displays.LYRZProjector.__init__", false]], "__init__() (nilearn.plotting.displays.lzrprojector method)": [[393, "nilearn.plotting.displays.LZRProjector.__init__", false]], "__init__() (nilearn.plotting.displays.lzryprojector method)": [[394, "nilearn.plotting.displays.LZRYProjector.__init__", false]], "__init__() (nilearn.plotting.displays.mosaicslicer method)": [[395, "nilearn.plotting.displays.MosaicSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.orthoprojector method)": [[396, "nilearn.plotting.displays.OrthoProjector.__init__", false]], "__init__() (nilearn.plotting.displays.orthoslicer method)": [[397, "nilearn.plotting.displays.OrthoSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.plotlysurfacefigure method)": [[398, "nilearn.plotting.displays.PlotlySurfaceFigure.__init__", false]], "__init__() (nilearn.plotting.displays.rprojector method)": [[399, "nilearn.plotting.displays.RProjector.__init__", false]], "__init__() (nilearn.plotting.displays.tiledslicer method)": [[400, "nilearn.plotting.displays.TiledSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.xprojector method)": [[401, "nilearn.plotting.displays.XProjector.__init__", false]], "__init__() (nilearn.plotting.displays.xslicer method)": [[402, "nilearn.plotting.displays.XSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.xzprojector method)": [[403, "nilearn.plotting.displays.XZProjector.__init__", false]], "__init__() (nilearn.plotting.displays.xzslicer method)": [[404, "nilearn.plotting.displays.XZSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.yprojector method)": [[405, "nilearn.plotting.displays.YProjector.__init__", false]], "__init__() (nilearn.plotting.displays.yslicer method)": [[406, "nilearn.plotting.displays.YSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.yxprojector method)": [[407, "nilearn.plotting.displays.YXProjector.__init__", false]], "__init__() (nilearn.plotting.displays.yxslicer method)": [[408, "nilearn.plotting.displays.YXSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.yzprojector method)": [[409, "nilearn.plotting.displays.YZProjector.__init__", false]], "__init__() (nilearn.plotting.displays.yzslicer method)": [[410, "nilearn.plotting.displays.YZSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.zprojector method)": [[411, "nilearn.plotting.displays.ZProjector.__init__", false]], "__init__() (nilearn.plotting.displays.zslicer method)": [[412, "nilearn.plotting.displays.ZSlicer.__init__", false]], "__init__() (nilearn.regions.hierarchicalkmeans method)": [[446, "nilearn.regions.HierarchicalKMeans.__init__", false]], "__init__() (nilearn.regions.parcellations method)": [[447, "nilearn.regions.Parcellations.__init__", false]], "__init__() (nilearn.regions.regionextractor method)": [[449, "nilearn.regions.RegionExtractor.__init__", false]], "__init__() (nilearn.regions.rena method)": [[448, "nilearn.regions.ReNA.__init__", false]], "__init__() (nilearn.reporting.htmlreport method)": [[457, "nilearn.reporting.HTMLReport.__init__", false]], "__init__() (nilearn.surface.filemesh method)": [[463, "nilearn.surface.FileMesh.__init__", false]], "__init__() (nilearn.surface.inmemorymesh method)": [[464, "nilearn.surface.InMemoryMesh.__init__", false]], "__init__() (nilearn.surface.polydata method)": [[465, "nilearn.surface.PolyData.__init__", false]], "__init__() (nilearn.surface.polymesh method)": [[466, "nilearn.surface.PolyMesh.__init__", false]], "__init__() (nilearn.surface.surfaceimage method)": [[467, "nilearn.surface.SurfaceImage.__init__", false]], "__init__() (nilearn.surface.surfacemesh method)": [[468, "nilearn.surface.SurfaceMesh.__init__", false]], "add_contours() (nilearn.plotting.displays.baseslicer method)": [[386, "nilearn.plotting.displays.BaseSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.lprojector method)": [[389, "nilearn.plotting.displays.LProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.lrprojector method)": [[390, "nilearn.plotting.displays.LRProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.lyrprojector method)": [[391, "nilearn.plotting.displays.LYRProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.lyrzprojector method)": [[392, "nilearn.plotting.displays.LYRZProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.lzrprojector method)": [[393, "nilearn.plotting.displays.LZRProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.lzryprojector method)": [[394, "nilearn.plotting.displays.LZRYProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.mosaicslicer method)": [[395, "nilearn.plotting.displays.MosaicSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.orthoprojector method)": [[396, "nilearn.plotting.displays.OrthoProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.orthoslicer method)": [[397, "nilearn.plotting.displays.OrthoSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.plotlysurfacefigure method)": [[398, "nilearn.plotting.displays.PlotlySurfaceFigure.add_contours", false]], "add_contours() (nilearn.plotting.displays.rprojector method)": [[399, "nilearn.plotting.displays.RProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.tiledslicer method)": [[400, "nilearn.plotting.displays.TiledSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.xprojector method)": [[401, "nilearn.plotting.displays.XProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.xslicer method)": [[402, "nilearn.plotting.displays.XSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.xzprojector method)": [[403, "nilearn.plotting.displays.XZProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.xzslicer method)": [[404, "nilearn.plotting.displays.XZSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.yprojector method)": [[405, "nilearn.plotting.displays.YProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.yslicer method)": [[406, "nilearn.plotting.displays.YSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.yxprojector method)": [[407, "nilearn.plotting.displays.YXProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.yxslicer method)": [[408, "nilearn.plotting.displays.YXSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.yzprojector method)": [[409, "nilearn.plotting.displays.YZProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.yzslicer method)": [[410, "nilearn.plotting.displays.YZSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.zprojector method)": [[411, "nilearn.plotting.displays.ZProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.zslicer method)": [[412, "nilearn.plotting.displays.ZSlicer.add_contours", false]], "add_edges() (nilearn.plotting.displays.baseslicer method)": [[386, "nilearn.plotting.displays.BaseSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.lprojector method)": [[389, "nilearn.plotting.displays.LProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.lrprojector method)": [[390, "nilearn.plotting.displays.LRProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.lyrprojector method)": [[391, "nilearn.plotting.displays.LYRProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.lyrzprojector method)": [[392, "nilearn.plotting.displays.LYRZProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.lzrprojector method)": [[393, "nilearn.plotting.displays.LZRProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.lzryprojector method)": [[394, "nilearn.plotting.displays.LZRYProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.mosaicslicer method)": [[395, "nilearn.plotting.displays.MosaicSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.orthoprojector method)": [[396, "nilearn.plotting.displays.OrthoProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.orthoslicer method)": [[397, "nilearn.plotting.displays.OrthoSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.rprojector method)": [[399, "nilearn.plotting.displays.RProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.tiledslicer method)": [[400, "nilearn.plotting.displays.TiledSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.xprojector method)": [[401, "nilearn.plotting.displays.XProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.xslicer method)": [[402, "nilearn.plotting.displays.XSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.xzprojector method)": [[403, "nilearn.plotting.displays.XZProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.xzslicer method)": [[404, "nilearn.plotting.displays.XZSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.yprojector method)": [[405, "nilearn.plotting.displays.YProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.yslicer method)": [[406, "nilearn.plotting.displays.YSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.yxprojector method)": [[407, "nilearn.plotting.displays.YXProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.yxslicer method)": [[408, "nilearn.plotting.displays.YXSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.yzprojector method)": [[409, "nilearn.plotting.displays.YZProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.yzslicer method)": [[410, "nilearn.plotting.displays.YZSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.zprojector method)": [[411, "nilearn.plotting.displays.ZProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.zslicer method)": [[412, "nilearn.plotting.displays.ZSlicer.add_edges", false]], "add_graph() (nilearn.plotting.displays.lprojector method)": [[389, "nilearn.plotting.displays.LProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.lrprojector method)": [[390, "nilearn.plotting.displays.LRProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.lyrprojector method)": [[391, "nilearn.plotting.displays.LYRProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.lyrzprojector method)": [[392, "nilearn.plotting.displays.LYRZProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.lzrprojector method)": [[393, "nilearn.plotting.displays.LZRProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.lzryprojector method)": [[394, "nilearn.plotting.displays.LZRYProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.orthoprojector method)": [[396, "nilearn.plotting.displays.OrthoProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.rprojector method)": [[399, "nilearn.plotting.displays.RProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.xprojector method)": [[401, "nilearn.plotting.displays.XProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.xzprojector method)": [[403, "nilearn.plotting.displays.XZProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.yprojector method)": [[405, "nilearn.plotting.displays.YProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.yxprojector method)": [[407, "nilearn.plotting.displays.YXProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.yzprojector method)": [[409, "nilearn.plotting.displays.YZProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.zprojector method)": [[411, "nilearn.plotting.displays.ZProjector.add_graph", false]], "add_markers() (nilearn.plotting.displays.baseslicer method)": [[386, "nilearn.plotting.displays.BaseSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.lprojector method)": [[389, "nilearn.plotting.displays.LProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.lrprojector method)": [[390, "nilearn.plotting.displays.LRProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.lyrprojector method)": [[391, "nilearn.plotting.displays.LYRProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.lyrzprojector method)": [[392, "nilearn.plotting.displays.LYRZProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.lzrprojector method)": [[393, "nilearn.plotting.displays.LZRProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.lzryprojector method)": [[394, "nilearn.plotting.displays.LZRYProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.mosaicslicer method)": [[395, "nilearn.plotting.displays.MosaicSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.orthoprojector method)": [[396, "nilearn.plotting.displays.OrthoProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.orthoslicer method)": [[397, "nilearn.plotting.displays.OrthoSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.rprojector method)": [[399, "nilearn.plotting.displays.RProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.tiledslicer method)": [[400, "nilearn.plotting.displays.TiledSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.xprojector method)": [[401, "nilearn.plotting.displays.XProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.xslicer method)": [[402, "nilearn.plotting.displays.XSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.xzprojector method)": [[403, "nilearn.plotting.displays.XZProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.xzslicer method)": [[404, "nilearn.plotting.displays.XZSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.yprojector method)": [[405, "nilearn.plotting.displays.YProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.yslicer method)": [[406, "nilearn.plotting.displays.YSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.yxprojector method)": [[407, "nilearn.plotting.displays.YXProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.yxslicer method)": [[408, "nilearn.plotting.displays.YXSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.yzprojector method)": [[409, "nilearn.plotting.displays.YZProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.yzslicer method)": [[410, "nilearn.plotting.displays.YZSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.zprojector method)": [[411, "nilearn.plotting.displays.ZProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.zslicer method)": [[412, "nilearn.plotting.displays.ZSlicer.add_markers", false]], "add_object_bounds() (nilearn.plotting.displays.baseaxes method)": [[385, "nilearn.plotting.displays.BaseAxes.add_object_bounds", false]], "add_object_bounds() (nilearn.plotting.displays.cutaxes method)": [[387, "nilearn.plotting.displays.CutAxes.add_object_bounds", false]], "add_object_bounds() (nilearn.plotting.displays.glassbrainaxes method)": [[388, "nilearn.plotting.displays.GlassBrainAxes.add_object_bounds", false]], "add_overlay() (nilearn.plotting.displays.baseslicer method)": [[386, "nilearn.plotting.displays.BaseSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.lprojector method)": [[389, "nilearn.plotting.displays.LProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.lrprojector method)": [[390, "nilearn.plotting.displays.LRProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.lyrprojector method)": [[391, "nilearn.plotting.displays.LYRProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.lyrzprojector method)": [[392, "nilearn.plotting.displays.LYRZProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.lzrprojector method)": [[393, "nilearn.plotting.displays.LZRProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.lzryprojector method)": [[394, "nilearn.plotting.displays.LZRYProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.mosaicslicer method)": [[395, "nilearn.plotting.displays.MosaicSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.orthoprojector method)": [[396, "nilearn.plotting.displays.OrthoProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.orthoslicer method)": [[397, "nilearn.plotting.displays.OrthoSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.rprojector method)": [[399, "nilearn.plotting.displays.RProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.tiledslicer method)": [[400, "nilearn.plotting.displays.TiledSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.xprojector method)": [[401, "nilearn.plotting.displays.XProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.xslicer method)": [[402, "nilearn.plotting.displays.XSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.xzprojector method)": [[403, "nilearn.plotting.displays.XZProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.xzslicer method)": [[404, "nilearn.plotting.displays.XZSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.yprojector method)": [[405, "nilearn.plotting.displays.YProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.yslicer method)": [[406, "nilearn.plotting.displays.YSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.yxprojector method)": [[407, "nilearn.plotting.displays.YXProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.yxslicer method)": [[408, "nilearn.plotting.displays.YXSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.yzprojector method)": [[409, "nilearn.plotting.displays.YZProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.yzslicer method)": [[410, "nilearn.plotting.displays.YZSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.zprojector method)": [[411, "nilearn.plotting.displays.ZProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.zslicer method)": [[412, "nilearn.plotting.displays.ZSlicer.add_overlay", false]], "annotate() (nilearn.plotting.displays.baseslicer method)": [[386, "nilearn.plotting.displays.BaseSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.lprojector method)": [[389, "nilearn.plotting.displays.LProjector.annotate", false]], "annotate() (nilearn.plotting.displays.lrprojector method)": [[390, "nilearn.plotting.displays.LRProjector.annotate", false]], "annotate() (nilearn.plotting.displays.lyrprojector method)": [[391, "nilearn.plotting.displays.LYRProjector.annotate", false]], "annotate() (nilearn.plotting.displays.lyrzprojector method)": [[392, "nilearn.plotting.displays.LYRZProjector.annotate", false]], "annotate() (nilearn.plotting.displays.lzrprojector method)": [[393, "nilearn.plotting.displays.LZRProjector.annotate", false]], "annotate() (nilearn.plotting.displays.lzryprojector method)": [[394, "nilearn.plotting.displays.LZRYProjector.annotate", false]], "annotate() (nilearn.plotting.displays.mosaicslicer method)": [[395, "nilearn.plotting.displays.MosaicSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.orthoprojector method)": [[396, "nilearn.plotting.displays.OrthoProjector.annotate", false]], "annotate() (nilearn.plotting.displays.orthoslicer method)": [[397, "nilearn.plotting.displays.OrthoSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.rprojector method)": [[399, "nilearn.plotting.displays.RProjector.annotate", false]], "annotate() (nilearn.plotting.displays.tiledslicer method)": [[400, "nilearn.plotting.displays.TiledSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.xprojector method)": [[401, "nilearn.plotting.displays.XProjector.annotate", false]], "annotate() (nilearn.plotting.displays.xslicer method)": [[402, "nilearn.plotting.displays.XSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.xzprojector method)": [[403, "nilearn.plotting.displays.XZProjector.annotate", false]], "annotate() (nilearn.plotting.displays.xzslicer method)": [[404, "nilearn.plotting.displays.XZSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.yprojector method)": [[405, "nilearn.plotting.displays.YProjector.annotate", false]], "annotate() (nilearn.plotting.displays.yslicer method)": [[406, "nilearn.plotting.displays.YSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.yxprojector method)": [[407, "nilearn.plotting.displays.YXProjector.annotate", false]], "annotate() (nilearn.plotting.displays.yxslicer method)": [[408, "nilearn.plotting.displays.YXSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.yzprojector method)": [[409, "nilearn.plotting.displays.YZProjector.annotate", false]], "annotate() (nilearn.plotting.displays.yzslicer method)": [[410, "nilearn.plotting.displays.YZSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.zprojector method)": [[411, "nilearn.plotting.displays.ZProjector.annotate", false]], "annotate() (nilearn.plotting.displays.zslicer method)": [[412, "nilearn.plotting.displays.ZSlicer.annotate", false]], "anova": [[179, "term-ANOVA", true]], "apply_mask() (in module nilearn.masking)": [[375, "nilearn.masking.apply_mask", false]], "armodel (class in nilearn.glm)": [[307, "nilearn.glm.ARModel", false]], "auc": [[179, "term-AUC", true]], "baseaxes (class in nilearn.plotting.displays)": [[385, "nilearn.plotting.displays.BaseAxes", false]], "basemasker (class in nilearn.maskers)": [[364, "nilearn.maskers.BaseMasker", false]], "baseslicer (class in nilearn.plotting.displays)": [[386, "nilearn.plotting.displays.BaseSlicer", false]], "beta": [[179, "term-Beta", true]], "bids": [[179, "term-BIDS", true]], "binarize_img() (in module nilearn.image)": [[337, "nilearn.image.binarize_img", false]], "black_bg (nilearn.plotting.displays.baseslicer property)": [[386, "nilearn.plotting.displays.BaseSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.lprojector property)": [[389, "nilearn.plotting.displays.LProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.lrprojector property)": [[390, "nilearn.plotting.displays.LRProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.lyrprojector property)": [[391, "nilearn.plotting.displays.LYRProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.lyrzprojector property)": [[392, "nilearn.plotting.displays.LYRZProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.lzrprojector property)": [[393, "nilearn.plotting.displays.LZRProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.lzryprojector property)": [[394, "nilearn.plotting.displays.LZRYProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.mosaicslicer property)": [[395, "nilearn.plotting.displays.MosaicSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.orthoprojector property)": [[396, "nilearn.plotting.displays.OrthoProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.orthoslicer property)": [[397, "nilearn.plotting.displays.OrthoSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.rprojector property)": [[399, "nilearn.plotting.displays.RProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.tiledslicer property)": [[400, "nilearn.plotting.displays.TiledSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.xprojector property)": [[401, "nilearn.plotting.displays.XProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.xslicer property)": [[402, "nilearn.plotting.displays.XSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.xzprojector property)": [[403, "nilearn.plotting.displays.XZProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.xzslicer property)": [[404, "nilearn.plotting.displays.XZSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.yprojector property)": [[405, "nilearn.plotting.displays.YProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.yslicer property)": [[406, "nilearn.plotting.displays.YSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.yxprojector property)": [[407, "nilearn.plotting.displays.YXProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.yxslicer property)": [[408, "nilearn.plotting.displays.YXSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.yzprojector property)": [[409, "nilearn.plotting.displays.YZProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.yzslicer property)": [[410, "nilearn.plotting.displays.YZSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.zprojector property)": [[411, "nilearn.plotting.displays.ZProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.zslicer property)": [[412, "nilearn.plotting.displays.ZSlicer.black_bg", false]], "bold": [[179, "term-BOLD", true]], "brain_color (nilearn.plotting.displays.baseslicer property)": [[386, "nilearn.plotting.displays.BaseSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.lprojector property)": [[389, "nilearn.plotting.displays.LProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.lrprojector property)": [[390, "nilearn.plotting.displays.LRProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.lyrprojector property)": [[391, "nilearn.plotting.displays.LYRProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.lyrzprojector property)": [[392, "nilearn.plotting.displays.LYRZProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.lzrprojector property)": [[393, "nilearn.plotting.displays.LZRProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.lzryprojector property)": [[394, "nilearn.plotting.displays.LZRYProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.mosaicslicer property)": [[395, "nilearn.plotting.displays.MosaicSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.orthoprojector property)": [[396, "nilearn.plotting.displays.OrthoProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.orthoslicer property)": [[397, "nilearn.plotting.displays.OrthoSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.rprojector property)": [[399, "nilearn.plotting.displays.RProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.tiledslicer property)": [[400, "nilearn.plotting.displays.TiledSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.xprojector property)": [[401, "nilearn.plotting.displays.XProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.xslicer property)": [[402, "nilearn.plotting.displays.XSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.xzprojector property)": [[403, "nilearn.plotting.displays.XZProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.xzslicer property)": [[404, "nilearn.plotting.displays.XZSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.yprojector property)": [[405, "nilearn.plotting.displays.YProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.yslicer property)": [[406, "nilearn.plotting.displays.YSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.yxprojector property)": [[407, "nilearn.plotting.displays.YXProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.yxslicer property)": [[408, "nilearn.plotting.displays.YXSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.yzprojector property)": [[409, "nilearn.plotting.displays.YZProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.yzslicer property)": [[410, "nilearn.plotting.displays.YZSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.zprojector property)": [[411, "nilearn.plotting.displays.ZProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.zslicer property)": [[412, "nilearn.plotting.displays.ZSlicer.brain_color", false]], "butterworth() (in module nilearn.signal)": [[460, "nilearn.signal.butterworth", false]], "canica": [[179, "term-CanICA", true]], "canica (class in nilearn.decomposition)": [[305, "nilearn.decomposition.CanICA", false]], "check_design_matrix() (in module nilearn.glm.first_level)": [[321, "nilearn.glm.first_level.check_design_matrix", false]], "check_params() (nilearn.decoding.spacenetclassifier method)": [[303, "nilearn.decoding.SpaceNetClassifier.check_params", false]], "check_params() (nilearn.decoding.spacenetregressor method)": [[304, "nilearn.decoding.SpaceNetRegressor.check_params", false]], "classification": [[179, "term-classification", true]], "clean() (in module nilearn.signal)": [[461, "nilearn.signal.clean", false]], "clean_img() (in module nilearn.image)": [[338, "nilearn.image.clean_img", false]], "close() (nilearn.plotting.displays.baseslicer method)": [[386, "nilearn.plotting.displays.BaseSlicer.close", false]], "close() (nilearn.plotting.displays.lprojector method)": [[389, "nilearn.plotting.displays.LProjector.close", false]], "close() (nilearn.plotting.displays.lrprojector method)": [[390, "nilearn.plotting.displays.LRProjector.close", false]], "close() (nilearn.plotting.displays.lyrprojector method)": [[391, "nilearn.plotting.displays.LYRProjector.close", false]], "close() (nilearn.plotting.displays.lyrzprojector method)": [[392, "nilearn.plotting.displays.LYRZProjector.close", false]], "close() (nilearn.plotting.displays.lzrprojector method)": [[393, "nilearn.plotting.displays.LZRProjector.close", false]], "close() (nilearn.plotting.displays.lzryprojector method)": [[394, "nilearn.plotting.displays.LZRYProjector.close", false]], "close() (nilearn.plotting.displays.mosaicslicer method)": [[395, "nilearn.plotting.displays.MosaicSlicer.close", false]], "close() (nilearn.plotting.displays.orthoprojector method)": [[396, "nilearn.plotting.displays.OrthoProjector.close", false]], "close() (nilearn.plotting.displays.orthoslicer method)": [[397, "nilearn.plotting.displays.OrthoSlicer.close", false]], "close() (nilearn.plotting.displays.rprojector method)": [[399, "nilearn.plotting.displays.RProjector.close", false]], "close() (nilearn.plotting.displays.tiledslicer method)": [[400, "nilearn.plotting.displays.TiledSlicer.close", false]], "close() (nilearn.plotting.displays.xprojector method)": [[401, "nilearn.plotting.displays.XProjector.close", false]], "close() (nilearn.plotting.displays.xslicer method)": [[402, "nilearn.plotting.displays.XSlicer.close", false]], "close() (nilearn.plotting.displays.xzprojector method)": [[403, "nilearn.plotting.displays.XZProjector.close", false]], "close() (nilearn.plotting.displays.xzslicer method)": [[404, "nilearn.plotting.displays.XZSlicer.close", false]], "close() (nilearn.plotting.displays.yprojector method)": [[405, "nilearn.plotting.displays.YProjector.close", false]], "close() (nilearn.plotting.displays.yslicer method)": [[406, "nilearn.plotting.displays.YSlicer.close", false]], "close() (nilearn.plotting.displays.yxprojector method)": [[407, "nilearn.plotting.displays.YXProjector.close", false]], "close() (nilearn.plotting.displays.yxslicer method)": [[408, "nilearn.plotting.displays.YXSlicer.close", false]], "close() (nilearn.plotting.displays.yzprojector method)": [[409, "nilearn.plotting.displays.YZProjector.close", false]], "close() (nilearn.plotting.displays.yzslicer method)": [[410, "nilearn.plotting.displays.YZSlicer.close", false]], "close() (nilearn.plotting.displays.zprojector method)": [[411, "nilearn.plotting.displays.ZProjector.close", false]], "close() (nilearn.plotting.displays.zslicer method)": [[412, "nilearn.plotting.displays.ZSlicer.close", false]], "closing": [[179, "term-Closing", true]], "cluster_level_inference() (in module nilearn.glm)": [[315, "nilearn.glm.cluster_level_inference", false]], "compute_background_mask() (in module nilearn.masking)": [[376, "nilearn.masking.compute_background_mask", false]], "compute_brain_mask() (in module nilearn.masking)": [[377, "nilearn.masking.compute_brain_mask", false]], "compute_contrast() (in module nilearn.glm)": [[316, "nilearn.glm.compute_contrast", false]], "compute_contrast() (nilearn.glm.first_level.firstlevelmodel method)": [[320, "nilearn.glm.first_level.FirstLevelModel.compute_contrast", false]], "compute_contrast() (nilearn.glm.second_level.secondlevelmodel method)": [[333, "nilearn.glm.second_level.SecondLevelModel.compute_contrast", false]], "compute_epi_mask() (in module nilearn.masking)": [[378, "nilearn.masking.compute_epi_mask", false]], "compute_fixed_effects() (in module nilearn.glm)": [[317, "nilearn.glm.compute_fixed_effects", false]], "compute_multi_background_mask() (in module nilearn.masking)": [[379, "nilearn.masking.compute_multi_background_mask", false]], "compute_multi_brain_mask() (in module nilearn.masking)": [[380, "nilearn.masking.compute_multi_brain_mask", false]], "compute_multi_epi_mask() (in module nilearn.masking)": [[381, "nilearn.masking.compute_multi_epi_mask", false]], "compute_regressor() (in module nilearn.glm.first_level)": [[322, "nilearn.glm.first_level.compute_regressor", false]], "concat_imgs() (in module nilearn.image)": [[339, "nilearn.image.concat_imgs", false]], "conf_int() (nilearn.glm.likelihoodmodelresults method)": [[310, "nilearn.glm.LikelihoodModelResults.conf_int", false]], "conf_int() (nilearn.glm.regressionresults method)": [[312, "nilearn.glm.RegressionResults.conf_int", false]], "conf_int() (nilearn.glm.simpleregressionresults method)": [[313, "nilearn.glm.SimpleRegressionResults.conf_int", false]], "connected_label_regions() (in module nilearn.regions)": [[450, "nilearn.regions.connected_label_regions", false]], "connected_regions() (in module nilearn.regions)": [[451, "nilearn.regions.connected_regions", false]], "connectivitymeasure (class in nilearn.connectome)": [[232, "nilearn.connectome.ConnectivityMeasure", false]], "contrast": [[179, "term-contrast", true]], "contrast (class in nilearn.glm)": [[308, "nilearn.glm.Contrast", false]], "contrast_type (nilearn.glm.contrast property)": [[308, "nilearn.glm.Contrast.contrast_type", false]], "coord_transform() (in module nilearn.image)": [[340, "nilearn.image.coord_transform", false]], "coordinates (nilearn.surface.filemesh property)": [[463, "nilearn.surface.FileMesh.coordinates", false]], "coordinates (nilearn.surface.inmemorymesh attribute)": [[464, "nilearn.surface.InMemoryMesh.coordinates", false]], "coordinates (nilearn.surface.surfacemesh attribute)": [[468, "nilearn.surface.SurfaceMesh.coordinates", false]], "copy_img() (in module nilearn.image)": [[341, "nilearn.image.copy_img", false]], "cov_to_corr() (in module nilearn.connectome)": [[235, "nilearn.connectome.cov_to_corr", false]], "crop_img() (in module nilearn.image)": [[342, "nilearn.image.crop_img", false]], "cutaxes (class in nilearn.plotting.displays)": [[387, "nilearn.plotting.displays.CutAxes", false]], "decision_function() (nilearn.decoding.decoder method)": [[298, "nilearn.decoding.Decoder.decision_function", false]], "decision_function() (nilearn.decoding.decoderregressor method)": [[299, "nilearn.decoding.DecoderRegressor.decision_function", false]], "decision_function() (nilearn.decoding.fremclassifier method)": [[300, "nilearn.decoding.FREMClassifier.decision_function", false]], "decision_function() (nilearn.decoding.fremregressor method)": [[301, "nilearn.decoding.FREMRegressor.decision_function", false]], "decision_function() (nilearn.decoding.spacenetclassifier method)": [[303, "nilearn.decoding.SpaceNetClassifier.decision_function", false]], "decision_function() (nilearn.decoding.spacenetregressor method)": [[304, "nilearn.decoding.SpaceNetRegressor.decision_function", false]], "decoder (class in nilearn.decoding)": [[298, "nilearn.decoding.Decoder", false]], "decoderregressor (class in nilearn.decoding)": [[299, "nilearn.decoding.DecoderRegressor", false]], "decoding": [[179, "term-Decoding", true]], "deterministic atlas": [[179, "term-Deterministic-atlas", true]], "dictionary learning": [[179, "term-Dictionary-learning", true]], "dictlearning (class in nilearn.decomposition)": [[306, "nilearn.decomposition.DictLearning", false]], "dilation": [[179, "term-Dilation", true]], "draw_2d() (nilearn.plotting.displays.baseaxes method)": [[385, "nilearn.plotting.displays.BaseAxes.draw_2d", false]], "draw_2d() (nilearn.plotting.displays.cutaxes method)": [[387, "nilearn.plotting.displays.CutAxes.draw_2d", false]], "draw_2d() (nilearn.plotting.displays.glassbrainaxes method)": [[388, "nilearn.plotting.displays.GlassBrainAxes.draw_2d", false]], "draw_cross() (nilearn.plotting.displays.lprojector method)": [[389, "nilearn.plotting.displays.LProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.lrprojector method)": [[390, "nilearn.plotting.displays.LRProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.lyrprojector method)": [[391, "nilearn.plotting.displays.LYRProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.lyrzprojector method)": [[392, "nilearn.plotting.displays.LYRZProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.lzrprojector method)": [[393, "nilearn.plotting.displays.LZRProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.lzryprojector method)": [[394, "nilearn.plotting.displays.LZRYProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.mosaicslicer method)": [[395, "nilearn.plotting.displays.MosaicSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.orthoprojector method)": [[396, "nilearn.plotting.displays.OrthoProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.orthoslicer method)": [[397, "nilearn.plotting.displays.OrthoSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.rprojector method)": [[399, "nilearn.plotting.displays.RProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.tiledslicer method)": [[400, "nilearn.plotting.displays.TiledSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.xprojector method)": [[401, "nilearn.plotting.displays.XProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.xslicer method)": [[402, "nilearn.plotting.displays.XSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.xzprojector method)": [[403, "nilearn.plotting.displays.XZProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.xzslicer method)": [[404, "nilearn.plotting.displays.XZSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.yprojector method)": [[405, "nilearn.plotting.displays.YProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.yslicer method)": [[406, "nilearn.plotting.displays.YSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.yxprojector method)": [[407, "nilearn.plotting.displays.YXProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.yxslicer method)": [[408, "nilearn.plotting.displays.YXSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.yzprojector method)": [[409, "nilearn.plotting.displays.YZProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.yzslicer method)": [[410, "nilearn.plotting.displays.YZSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.zprojector method)": [[411, "nilearn.plotting.displays.ZProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.zslicer method)": [[412, "nilearn.plotting.displays.ZSlicer.draw_cross", false]], "draw_left_right() (nilearn.plotting.displays.baseaxes method)": [[385, "nilearn.plotting.displays.BaseAxes.draw_left_right", false]], "draw_left_right() (nilearn.plotting.displays.cutaxes method)": [[387, "nilearn.plotting.displays.CutAxes.draw_left_right", false]], "draw_left_right() (nilearn.plotting.displays.glassbrainaxes method)": [[388, "nilearn.plotting.displays.GlassBrainAxes.draw_left_right", false]], "draw_position() (nilearn.plotting.displays.baseaxes method)": [[385, "nilearn.plotting.displays.BaseAxes.draw_position", false]], "draw_position() (nilearn.plotting.displays.cutaxes method)": [[387, "nilearn.plotting.displays.CutAxes.draw_position", false]], "draw_position() (nilearn.plotting.displays.glassbrainaxes method)": [[388, "nilearn.plotting.displays.GlassBrainAxes.draw_position", false]], "draw_scale_bar() (nilearn.plotting.displays.baseaxes method)": [[385, "nilearn.plotting.displays.BaseAxes.draw_scale_bar", false]], "draw_scale_bar() (nilearn.plotting.displays.cutaxes method)": [[387, "nilearn.plotting.displays.CutAxes.draw_scale_bar", false]], "draw_scale_bar() (nilearn.plotting.displays.glassbrainaxes method)": [[388, "nilearn.plotting.displays.GlassBrainAxes.draw_scale_bar", false]], "eeg": [[179, "term-EEG", true]], "effect_size() (nilearn.glm.contrast method)": [[308, "nilearn.glm.Contrast.effect_size", false]], "effect_variance() (nilearn.glm.contrast method)": [[308, "nilearn.glm.Contrast.effect_variance", false]], "epi": [[179, "term-EPI", true]], "erosion": [[179, "term-Erosion", true]], "expression_to_contrast_vector() (in module nilearn.glm)": [[318, "nilearn.glm.expression_to_contrast_vector", false]], "faces": [[179, "term-faces", true]], "faces (nilearn.surface.filemesh property)": [[463, "nilearn.surface.FileMesh.faces", false]], "faces (nilearn.surface.inmemorymesh attribute)": [[464, "nilearn.surface.InMemoryMesh.faces", false]], "faces (nilearn.surface.surfacemesh attribute)": [[468, "nilearn.surface.SurfaceMesh.faces", false]], "fcontrast() (nilearn.glm.likelihoodmodelresults method)": [[310, "nilearn.glm.LikelihoodModelResults.Fcontrast", false]], "fcontrast() (nilearn.glm.regressionresults method)": [[312, "nilearn.glm.RegressionResults.Fcontrast", false]], "fcontrast() (nilearn.glm.simpleregressionresults method)": [[313, "nilearn.glm.SimpleRegressionResults.Fcontrast", false]], "fcontrastresults (class in nilearn.glm)": [[309, "nilearn.glm.FContrastResults", false]], "fdr correction": [[179, "term-FDR-correction", true]], "fdr_threshold() (in module nilearn.glm)": [[319, "nilearn.glm.fdr_threshold", false]], "fetch_abide_pcp() (in module nilearn.datasets)": [[240, "nilearn.datasets.fetch_abide_pcp", false]], "fetch_adhd() (in module nilearn.datasets)": [[241, "nilearn.datasets.fetch_adhd", false]], "fetch_atlas_aal() (in module nilearn.datasets)": [[242, "nilearn.datasets.fetch_atlas_aal", false]], "fetch_atlas_allen_2011() (in module nilearn.datasets)": [[243, "nilearn.datasets.fetch_atlas_allen_2011", false]], "fetch_atlas_basc_multiscale_2015() (in module nilearn.datasets)": [[244, "nilearn.datasets.fetch_atlas_basc_multiscale_2015", false]], "fetch_atlas_craddock_2012() (in module nilearn.datasets)": [[245, "nilearn.datasets.fetch_atlas_craddock_2012", false]], "fetch_atlas_destrieux_2009() (in module nilearn.datasets)": [[246, "nilearn.datasets.fetch_atlas_destrieux_2009", false]], "fetch_atlas_difumo() (in module nilearn.datasets)": [[247, "nilearn.datasets.fetch_atlas_difumo", false]], "fetch_atlas_harvard_oxford() (in module nilearn.datasets)": [[248, "nilearn.datasets.fetch_atlas_harvard_oxford", false]], "fetch_atlas_juelich() (in module nilearn.datasets)": [[249, "nilearn.datasets.fetch_atlas_juelich", false]], "fetch_atlas_msdl() (in module nilearn.datasets)": [[250, "nilearn.datasets.fetch_atlas_msdl", false]], "fetch_atlas_pauli_2017() (in module nilearn.datasets)": [[251, "nilearn.datasets.fetch_atlas_pauli_2017", false]], "fetch_atlas_schaefer_2018() (in module nilearn.datasets)": [[252, "nilearn.datasets.fetch_atlas_schaefer_2018", false]], "fetch_atlas_smith_2009() (in module nilearn.datasets)": [[253, "nilearn.datasets.fetch_atlas_smith_2009", false]], "fetch_atlas_surf_destrieux() (in module nilearn.datasets)": [[254, "nilearn.datasets.fetch_atlas_surf_destrieux", false]], "fetch_atlas_talairach() (in module nilearn.datasets)": [[255, "nilearn.datasets.fetch_atlas_talairach", false]], "fetch_atlas_yeo_2011() (in module nilearn.datasets)": [[256, "nilearn.datasets.fetch_atlas_yeo_2011", false]], "fetch_bids_langloc_dataset() (in module nilearn.datasets)": [[257, "nilearn.datasets.fetch_bids_langloc_dataset", false]], "fetch_coords_dosenbach_2010() (in module nilearn.datasets)": [[258, "nilearn.datasets.fetch_coords_dosenbach_2010", false]], "fetch_coords_power_2011() (in module nilearn.datasets)": [[259, "nilearn.datasets.fetch_coords_power_2011", false]], "fetch_coords_seitzman_2018() (in module nilearn.datasets)": [[260, "nilearn.datasets.fetch_coords_seitzman_2018", false]], "fetch_development_fmri() (in module nilearn.datasets)": [[261, "nilearn.datasets.fetch_development_fmri", false]], "fetch_ds000030_urls() (in module nilearn.datasets)": [[262, "nilearn.datasets.fetch_ds000030_urls", false]], "fetch_fiac_first_level() (in module nilearn.datasets)": [[263, "nilearn.datasets.fetch_fiac_first_level", false]], "fetch_haxby() (in module nilearn.datasets)": [[264, "nilearn.datasets.fetch_haxby", false]], "fetch_icbm152_2009() (in module nilearn.datasets)": [[265, "nilearn.datasets.fetch_icbm152_2009", false]], "fetch_icbm152_brain_gm_mask() (in module nilearn.datasets)": [[266, "nilearn.datasets.fetch_icbm152_brain_gm_mask", false]], "fetch_language_localizer_demo_dataset() (in module nilearn.datasets)": [[267, "nilearn.datasets.fetch_language_localizer_demo_dataset", false]], "fetch_localizer_button_task() (in module nilearn.datasets)": [[268, "nilearn.datasets.fetch_localizer_button_task", false]], "fetch_localizer_calculation_task() (in module nilearn.datasets)": [[269, "nilearn.datasets.fetch_localizer_calculation_task", false]], "fetch_localizer_contrasts() (in module nilearn.datasets)": [[270, "nilearn.datasets.fetch_localizer_contrasts", false]], "fetch_localizer_first_level() (in module nilearn.datasets)": [[271, "nilearn.datasets.fetch_localizer_first_level", false]], "fetch_megatrawls_netmats() (in module nilearn.datasets)": [[272, "nilearn.datasets.fetch_megatrawls_netmats", false]], "fetch_mixed_gambles() (in module nilearn.datasets)": [[273, "nilearn.datasets.fetch_mixed_gambles", false]], "fetch_miyawaki2008() (in module nilearn.datasets)": [[274, "nilearn.datasets.fetch_miyawaki2008", false]], "fetch_neurovault() (in module nilearn.datasets)": [[275, "nilearn.datasets.fetch_neurovault", false]], "fetch_neurovault_auditory_computation_task() (in module nilearn.datasets)": [[276, "nilearn.datasets.fetch_neurovault_auditory_computation_task", false]], "fetch_neurovault_ids() (in module nilearn.datasets)": [[277, "nilearn.datasets.fetch_neurovault_ids", false]], "fetch_neurovault_motor_task() (in module nilearn.datasets)": [[278, "nilearn.datasets.fetch_neurovault_motor_task", false]], "fetch_oasis_vbm() (in module nilearn.datasets)": [[279, "nilearn.datasets.fetch_oasis_vbm", false]], "fetch_openneuro_dataset() (in module nilearn.datasets)": [[280, "nilearn.datasets.fetch_openneuro_dataset", false]], "fetch_spm_auditory() (in module nilearn.datasets)": [[281, "nilearn.datasets.fetch_spm_auditory", false]], "fetch_spm_multimodal_fmri() (in module nilearn.datasets)": [[282, "nilearn.datasets.fetch_spm_multimodal_fmri", false]], "fetch_surf_fsaverage() (in module nilearn.datasets)": [[283, "nilearn.datasets.fetch_surf_fsaverage", false]], "fetch_surf_nki_enhanced() (in module nilearn.datasets)": [[284, "nilearn.datasets.fetch_surf_nki_enhanced", false]], "file_path (nilearn.surface.filemesh attribute)": [[463, "nilearn.surface.FileMesh.file_path", false]], "filemesh (class in nilearn.surface)": [[463, "nilearn.surface.FileMesh", false]], "find_cut_coords() (nilearn.plotting.displays.baseslicer static method)": [[386, "nilearn.plotting.displays.BaseSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.lprojector class method)": [[389, "nilearn.plotting.displays.LProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.lrprojector class method)": [[390, "nilearn.plotting.displays.LRProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.lyrprojector class method)": [[391, "nilearn.plotting.displays.LYRProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.lyrzprojector class method)": [[392, "nilearn.plotting.displays.LYRZProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.lzrprojector class method)": [[393, "nilearn.plotting.displays.LZRProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.lzryprojector class method)": [[394, "nilearn.plotting.displays.LZRYProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.mosaicslicer class method)": [[395, "nilearn.plotting.displays.MosaicSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.orthoprojector class method)": [[396, "nilearn.plotting.displays.OrthoProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.orthoslicer class method)": [[397, "nilearn.plotting.displays.OrthoSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.rprojector class method)": [[399, "nilearn.plotting.displays.RProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.tiledslicer class method)": [[400, "nilearn.plotting.displays.TiledSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.xprojector class method)": [[401, "nilearn.plotting.displays.XProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.xslicer class method)": [[402, "nilearn.plotting.displays.XSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.xzprojector class method)": [[403, "nilearn.plotting.displays.XZProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.xzslicer class method)": [[404, "nilearn.plotting.displays.XZSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.yprojector class method)": [[405, "nilearn.plotting.displays.YProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.yslicer class method)": [[406, "nilearn.plotting.displays.YSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.yxprojector class method)": [[407, "nilearn.plotting.displays.YXProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.yxslicer class method)": [[408, "nilearn.plotting.displays.YXSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.yzprojector class method)": [[409, "nilearn.plotting.displays.YZProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.yzslicer class method)": [[410, "nilearn.plotting.displays.YZSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.zprojector class method)": [[411, "nilearn.plotting.displays.ZProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.zslicer class method)": [[412, "nilearn.plotting.displays.ZSlicer.find_cut_coords", false]], "find_cut_slices() (in module nilearn.plotting)": [[415, "nilearn.plotting.find_cut_slices", false]], "find_parcellation_cut_coords() (in module nilearn.plotting)": [[416, "nilearn.plotting.find_parcellation_cut_coords", false]], "find_probabilistic_atlas_cut_coords() (in module nilearn.plotting)": [[417, "nilearn.plotting.find_probabilistic_atlas_cut_coords", false]], "find_xyz_cut_coords() (in module nilearn.plotting)": [[418, "nilearn.plotting.find_xyz_cut_coords", false]], "fir": [[179, "term-FIR", true]], "first_level_from_bids() (in module nilearn.glm.first_level)": [[323, "nilearn.glm.first_level.first_level_from_bids", false]], "firstlevelmodel (class in nilearn.glm.first_level)": [[320, "nilearn.glm.first_level.FirstLevelModel", false]], "fit() (nilearn.connectome.connectivitymeasure method)": [[232, "nilearn.connectome.ConnectivityMeasure.fit", false]], "fit() (nilearn.connectome.groupsparsecovariance method)": [[233, "nilearn.connectome.GroupSparseCovariance.fit", false]], "fit() (nilearn.connectome.groupsparsecovariancecv method)": [[234, "nilearn.connectome.GroupSparseCovarianceCV.fit", false]], "fit() (nilearn.decoding.decoder method)": [[298, "nilearn.decoding.Decoder.fit", false]], "fit() (nilearn.decoding.decoderregressor method)": [[299, "nilearn.decoding.DecoderRegressor.fit", false]], "fit() (nilearn.decoding.fremclassifier method)": [[300, "nilearn.decoding.FREMClassifier.fit", false]], "fit() (nilearn.decoding.fremregressor method)": [[301, "nilearn.decoding.FREMRegressor.fit", false]], "fit() (nilearn.decoding.searchlight method)": [[302, "nilearn.decoding.SearchLight.fit", false]], "fit() (nilearn.decoding.spacenetclassifier method)": [[303, "nilearn.decoding.SpaceNetClassifier.fit", false]], "fit() (nilearn.decoding.spacenetregressor method)": [[304, "nilearn.decoding.SpaceNetRegressor.fit", false]], "fit() (nilearn.decomposition.canica method)": [[305, "nilearn.decomposition.CanICA.fit", false]], "fit() (nilearn.decomposition.dictlearning method)": [[306, "nilearn.decomposition.DictLearning.fit", false]], "fit() (nilearn.glm.armodel method)": [[307, "nilearn.glm.ARModel.fit", false]], "fit() (nilearn.glm.first_level.firstlevelmodel method)": [[320, "nilearn.glm.first_level.FirstLevelModel.fit", false]], "fit() (nilearn.glm.olsmodel method)": [[311, "nilearn.glm.OLSModel.fit", false]], "fit() (nilearn.glm.second_level.secondlevelmodel method)": [[333, "nilearn.glm.second_level.SecondLevelModel.fit", false]], "fit() (nilearn.maskers.basemasker method)": [[364, "nilearn.maskers.BaseMasker.fit", false]], "fit() (nilearn.maskers.multiniftilabelsmasker method)": [[365, "nilearn.maskers.MultiNiftiLabelsMasker.fit", false]], "fit() (nilearn.maskers.multiniftimapsmasker method)": [[366, "nilearn.maskers.MultiNiftiMapsMasker.fit", false]], "fit() (nilearn.maskers.multiniftimasker method)": [[367, "nilearn.maskers.MultiNiftiMasker.fit", false]], "fit() (nilearn.maskers.niftilabelsmasker method)": [[368, "nilearn.maskers.NiftiLabelsMasker.fit", false]], "fit() (nilearn.maskers.niftimapsmasker method)": [[369, "nilearn.maskers.NiftiMapsMasker.fit", false]], "fit() (nilearn.maskers.niftimasker method)": [[370, "nilearn.maskers.NiftiMasker.fit", false]], "fit() (nilearn.maskers.niftispheresmasker method)": [[371, "nilearn.maskers.NiftiSpheresMasker.fit", false]], "fit() (nilearn.maskers.surfacelabelsmasker method)": [[372, "nilearn.maskers.SurfaceLabelsMasker.fit", false]], "fit() (nilearn.maskers.surfacemapsmasker method)": [[373, "nilearn.maskers.SurfaceMapsMasker.fit", false]], "fit() (nilearn.maskers.surfacemasker method)": [[374, "nilearn.maskers.SurfaceMasker.fit", false]], "fit() (nilearn.regions.hierarchicalkmeans method)": [[446, "nilearn.regions.HierarchicalKMeans.fit", false]], "fit() (nilearn.regions.parcellations method)": [[447, "nilearn.regions.Parcellations.fit", false]], "fit() (nilearn.regions.regionextractor method)": [[449, "nilearn.regions.RegionExtractor.fit", false]], "fit() (nilearn.regions.rena method)": [[448, "nilearn.regions.ReNA.fit", false]], "fit_predict() (nilearn.regions.hierarchicalkmeans method)": [[446, "nilearn.regions.HierarchicalKMeans.fit_predict", false]], "fit_predict() (nilearn.regions.rena method)": [[448, "nilearn.regions.ReNA.fit_predict", false]], "fit_transform() (nilearn.connectome.connectivitymeasure method)": [[232, "nilearn.connectome.ConnectivityMeasure.fit_transform", false]], "fit_transform() (nilearn.decoding.searchlight method)": [[302, "nilearn.decoding.SearchLight.fit_transform", false]], "fit_transform() (nilearn.decomposition.canica method)": [[305, "nilearn.decomposition.CanICA.fit_transform", false]], "fit_transform() (nilearn.decomposition.dictlearning method)": [[306, "nilearn.decomposition.DictLearning.fit_transform", false]], "fit_transform() (nilearn.glm.first_level.firstlevelmodel method)": [[320, "nilearn.glm.first_level.FirstLevelModel.fit_transform", false]], "fit_transform() (nilearn.glm.second_level.secondlevelmodel method)": [[333, "nilearn.glm.second_level.SecondLevelModel.fit_transform", false]], "fit_transform() (nilearn.maskers.basemasker method)": [[364, "nilearn.maskers.BaseMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.multiniftilabelsmasker method)": [[365, "nilearn.maskers.MultiNiftiLabelsMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.multiniftimapsmasker method)": [[366, "nilearn.maskers.MultiNiftiMapsMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.multiniftimasker method)": [[367, "nilearn.maskers.MultiNiftiMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.niftilabelsmasker method)": [[368, "nilearn.maskers.NiftiLabelsMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.niftimapsmasker method)": [[369, "nilearn.maskers.NiftiMapsMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.niftimasker method)": [[370, "nilearn.maskers.NiftiMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.niftispheresmasker method)": [[371, "nilearn.maskers.NiftiSpheresMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.surfacelabelsmasker method)": [[372, "nilearn.maskers.SurfaceLabelsMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.surfacemapsmasker method)": [[373, "nilearn.maskers.SurfaceMapsMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.surfacemasker method)": [[374, "nilearn.maskers.SurfaceMasker.fit_transform", false]], "fit_transform() (nilearn.regions.hierarchicalkmeans method)": [[446, "nilearn.regions.HierarchicalKMeans.fit_transform", false]], "fit_transform() (nilearn.regions.parcellations method)": [[447, "nilearn.regions.Parcellations.fit_transform", false]], "fit_transform() (nilearn.regions.regionextractor method)": [[449, "nilearn.regions.RegionExtractor.fit_transform", false]], "fit_transform() (nilearn.regions.rena method)": [[448, "nilearn.regions.ReNA.fit_transform", false]], "fmri": [[179, "term-fMRI", true]], "fmriprep": [[179, "term-fMRIPrep", true]], "fpr correction": [[179, "term-FPR-correction", true]], "frem": [[179, "term-FREM", true]], "fremclassifier (class in nilearn.decoding)": [[300, "nilearn.decoding.FREMClassifier", false]], "fremregressor (class in nilearn.decoding)": [[301, "nilearn.decoding.FREMRegressor", false]], "from_volume() (nilearn.surface.surfaceimage class method)": [[467, "nilearn.surface.SurfaceImage.from_volume", false]], "functional connectivity": [[179, "term-functional-connectivity", true]], "functional connectome": [[179, "term-functional-connectome", true]], "fwer correction": [[179, "term-FWER-correction", true]], "fwhm": [[179, "term-FWHM", true]], "generate_report() (nilearn.glm.first_level.firstlevelmodel method)": [[320, "nilearn.glm.first_level.FirstLevelModel.generate_report", false]], "generate_report() (nilearn.glm.second_level.secondlevelmodel method)": [[333, "nilearn.glm.second_level.SecondLevelModel.generate_report", false]], "generate_report() (nilearn.maskers.multiniftilabelsmasker method)": [[365, "nilearn.maskers.MultiNiftiLabelsMasker.generate_report", false]], "generate_report() (nilearn.maskers.multiniftimapsmasker method)": [[366, "nilearn.maskers.MultiNiftiMapsMasker.generate_report", false]], "generate_report() (nilearn.maskers.multiniftimasker method)": [[367, "nilearn.maskers.MultiNiftiMasker.generate_report", false]], "generate_report() (nilearn.maskers.niftilabelsmasker method)": [[368, "nilearn.maskers.NiftiLabelsMasker.generate_report", false]], "generate_report() (nilearn.maskers.niftimapsmasker method)": [[369, "nilearn.maskers.NiftiMapsMasker.generate_report", false]], "generate_report() (nilearn.maskers.niftimasker method)": [[370, "nilearn.maskers.NiftiMasker.generate_report", false]], "generate_report() (nilearn.maskers.niftispheresmasker method)": [[371, "nilearn.maskers.NiftiSpheresMasker.generate_report", false]], "generate_report() (nilearn.maskers.surfacelabelsmasker method)": [[372, "nilearn.maskers.SurfaceLabelsMasker.generate_report", false]], "generate_report() (nilearn.maskers.surfacemasker method)": [[374, "nilearn.maskers.SurfaceMasker.generate_report", false]], "generate_report() (nilearn.regions.regionextractor method)": [[449, "nilearn.regions.RegionExtractor.generate_report", false]], "get_bids_files() (in module nilearn.interfaces.bids)": [[358, "nilearn.interfaces.bids.get_bids_files", false]], "get_clusters_table() (in module nilearn.reporting)": [[458, "nilearn.reporting.get_clusters_table", false]], "get_data() (in module nilearn.image)": [[343, "nilearn.image.get_data", false]], "get_data_dirs() (in module nilearn.datasets)": [[285, "nilearn.datasets.get_data_dirs", false]], "get_design_from_fslmat() (in module nilearn.interfaces.fsl)": [[363, "nilearn.interfaces.fsl.get_design_from_fslmat", false]], "get_iframe() (nilearn.reporting.htmlreport method)": [[457, "nilearn.reporting.HTMLReport.get_iframe", false]], "get_metadata_routing() (nilearn.connectome.connectivitymeasure method)": [[232, "nilearn.connectome.ConnectivityMeasure.get_metadata_routing", false]], "get_metadata_routing() (nilearn.connectome.groupsparsecovariance method)": [[233, "nilearn.connectome.GroupSparseCovariance.get_metadata_routing", false]], "get_metadata_routing() (nilearn.connectome.groupsparsecovariancecv method)": [[234, "nilearn.connectome.GroupSparseCovarianceCV.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.decoder method)": [[298, "nilearn.decoding.Decoder.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.decoderregressor method)": [[299, "nilearn.decoding.DecoderRegressor.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.fremclassifier method)": [[300, "nilearn.decoding.FREMClassifier.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.fremregressor method)": [[301, "nilearn.decoding.FREMRegressor.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.searchlight method)": [[302, "nilearn.decoding.SearchLight.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.spacenetclassifier method)": [[303, "nilearn.decoding.SpaceNetClassifier.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.spacenetregressor method)": [[304, "nilearn.decoding.SpaceNetRegressor.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decomposition.canica method)": [[305, "nilearn.decomposition.CanICA.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decomposition.dictlearning method)": [[306, "nilearn.decomposition.DictLearning.get_metadata_routing", false]], "get_metadata_routing() (nilearn.glm.first_level.firstlevelmodel method)": [[320, "nilearn.glm.first_level.FirstLevelModel.get_metadata_routing", false]], "get_metadata_routing() (nilearn.glm.second_level.secondlevelmodel method)": [[333, "nilearn.glm.second_level.SecondLevelModel.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.basemasker method)": [[364, "nilearn.maskers.BaseMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.multiniftilabelsmasker method)": [[365, "nilearn.maskers.MultiNiftiLabelsMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.multiniftimapsmasker method)": [[366, "nilearn.maskers.MultiNiftiMapsMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.multiniftimasker method)": [[367, "nilearn.maskers.MultiNiftiMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.niftilabelsmasker method)": [[368, "nilearn.maskers.NiftiLabelsMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.niftimapsmasker method)": [[369, "nilearn.maskers.NiftiMapsMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.niftimasker method)": [[370, "nilearn.maskers.NiftiMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.niftispheresmasker method)": [[371, "nilearn.maskers.NiftiSpheresMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.surfacelabelsmasker method)": [[372, "nilearn.maskers.SurfaceLabelsMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.surfacemapsmasker method)": [[373, "nilearn.maskers.SurfaceMapsMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.surfacemasker method)": [[374, "nilearn.maskers.SurfaceMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.regions.hierarchicalkmeans method)": [[446, "nilearn.regions.HierarchicalKMeans.get_metadata_routing", false]], "get_metadata_routing() (nilearn.regions.parcellations method)": [[447, "nilearn.regions.Parcellations.get_metadata_routing", false]], "get_metadata_routing() (nilearn.regions.regionextractor method)": [[449, "nilearn.regions.RegionExtractor.get_metadata_routing", false]], "get_metadata_routing() (nilearn.regions.rena method)": [[448, "nilearn.regions.ReNA.get_metadata_routing", false]], "get_object_bounds() (nilearn.plotting.displays.baseaxes method)": [[385, "nilearn.plotting.displays.BaseAxes.get_object_bounds", false]], "get_object_bounds() (nilearn.plotting.displays.cutaxes method)": [[387, "nilearn.plotting.displays.CutAxes.get_object_bounds", false]], "get_object_bounds() (nilearn.plotting.displays.glassbrainaxes method)": [[388, "nilearn.plotting.displays.GlassBrainAxes.get_object_bounds", false]], "get_params() (nilearn.connectome.connectivitymeasure method)": [[232, "nilearn.connectome.ConnectivityMeasure.get_params", false]], "get_params() (nilearn.connectome.groupsparsecovariance method)": [[233, "nilearn.connectome.GroupSparseCovariance.get_params", false]], "get_params() (nilearn.connectome.groupsparsecovariancecv method)": [[234, "nilearn.connectome.GroupSparseCovarianceCV.get_params", false]], "get_params() (nilearn.decoding.decoder method)": [[298, "nilearn.decoding.Decoder.get_params", false]], "get_params() (nilearn.decoding.decoderregressor method)": [[299, "nilearn.decoding.DecoderRegressor.get_params", false]], "get_params() (nilearn.decoding.fremclassifier method)": [[300, "nilearn.decoding.FREMClassifier.get_params", false]], "get_params() (nilearn.decoding.fremregressor method)": [[301, "nilearn.decoding.FREMRegressor.get_params", false]], "get_params() (nilearn.decoding.searchlight method)": [[302, "nilearn.decoding.SearchLight.get_params", false]], "get_params() (nilearn.decoding.spacenetclassifier method)": [[303, "nilearn.decoding.SpaceNetClassifier.get_params", false]], "get_params() (nilearn.decoding.spacenetregressor method)": [[304, "nilearn.decoding.SpaceNetRegressor.get_params", false]], "get_params() (nilearn.decomposition.canica method)": [[305, "nilearn.decomposition.CanICA.get_params", false]], "get_params() (nilearn.decomposition.dictlearning method)": [[306, "nilearn.decomposition.DictLearning.get_params", false]], "get_params() (nilearn.glm.first_level.firstlevelmodel method)": [[320, "nilearn.glm.first_level.FirstLevelModel.get_params", false]], "get_params() (nilearn.glm.second_level.secondlevelmodel method)": [[333, "nilearn.glm.second_level.SecondLevelModel.get_params", false]], "get_params() (nilearn.maskers.basemasker method)": [[364, "nilearn.maskers.BaseMasker.get_params", false]], "get_params() (nilearn.maskers.multiniftilabelsmasker method)": [[365, "nilearn.maskers.MultiNiftiLabelsMasker.get_params", false]], "get_params() (nilearn.maskers.multiniftimapsmasker method)": [[366, "nilearn.maskers.MultiNiftiMapsMasker.get_params", false]], "get_params() (nilearn.maskers.multiniftimasker method)": [[367, "nilearn.maskers.MultiNiftiMasker.get_params", false]], "get_params() (nilearn.maskers.niftilabelsmasker method)": [[368, "nilearn.maskers.NiftiLabelsMasker.get_params", false]], "get_params() (nilearn.maskers.niftimapsmasker method)": [[369, "nilearn.maskers.NiftiMapsMasker.get_params", false]], "get_params() (nilearn.maskers.niftimasker method)": [[370, "nilearn.maskers.NiftiMasker.get_params", false]], "get_params() (nilearn.maskers.niftispheresmasker method)": [[371, "nilearn.maskers.NiftiSpheresMasker.get_params", false]], "get_params() (nilearn.maskers.surfacelabelsmasker method)": [[372, "nilearn.maskers.SurfaceLabelsMasker.get_params", false]], "get_params() (nilearn.maskers.surfacemapsmasker method)": [[373, "nilearn.maskers.SurfaceMapsMasker.get_params", false]], "get_params() (nilearn.maskers.surfacemasker method)": [[374, "nilearn.maskers.SurfaceMasker.get_params", false]], "get_params() (nilearn.regions.hierarchicalkmeans method)": [[446, "nilearn.regions.HierarchicalKMeans.get_params", false]], "get_params() (nilearn.regions.parcellations method)": [[447, "nilearn.regions.Parcellations.get_params", false]], "get_params() (nilearn.regions.regionextractor method)": [[449, "nilearn.regions.RegionExtractor.get_params", false]], "get_params() (nilearn.regions.rena method)": [[448, "nilearn.regions.ReNA.get_params", false]], "get_projector() (in module nilearn.plotting.displays)": [[413, "nilearn.plotting.displays.get_projector", false]], "get_slicer() (in module nilearn.plotting.displays)": [[414, "nilearn.plotting.displays.get_slicer", false]], "get_standalone() (nilearn.reporting.htmlreport method)": [[457, "nilearn.reporting.HTMLReport.get_standalone", false]], "glassbrainaxes (class in nilearn.plotting.displays)": [[388, "nilearn.plotting.displays.GlassBrainAxes", false]], "glm": [[179, "term-GLM", true]], "glover_dispersion_derivative() (in module nilearn.glm.first_level)": [[324, "nilearn.glm.first_level.glover_dispersion_derivative", false]], "glover_hrf() (in module nilearn.glm.first_level)": [[325, "nilearn.glm.first_level.glover_hrf", false]], "glover_time_derivative() (in module nilearn.glm.first_level)": [[326, "nilearn.glm.first_level.glover_time_derivative", false]], "group_sparse_covariance() (in module nilearn.connectome)": [[236, "nilearn.connectome.group_sparse_covariance", false]], "groupsparsecovariance (class in nilearn.connectome)": [[233, "nilearn.connectome.GroupSparseCovariance", false]], "groupsparsecovariancecv (class in nilearn.connectome)": [[234, "nilearn.connectome.GroupSparseCovarianceCV", false]], "hierarchicalkmeans (class in nilearn.regions)": [[446, "nilearn.regions.HierarchicalKMeans", false]], "high_variance_confounds() (in module nilearn.image)": [[344, "nilearn.image.high_variance_confounds", false]], "high_variance_confounds() (in module nilearn.signal)": [[462, "nilearn.signal.high_variance_confounds", false]], "hrf": [[179, "term-HRF", true]], "htmlreport (class in nilearn.reporting)": [[457, "nilearn.reporting.HTMLReport", false]], "ica": [[179, "term-ICA", true]], "img_to_signals_labels() (in module nilearn.regions)": [[452, "nilearn.regions.img_to_signals_labels", false]], "img_to_signals_maps() (in module nilearn.regions)": [[453, "nilearn.regions.img_to_signals_maps", false]], "index_img() (in module nilearn.image)": [[345, "nilearn.image.index_img", false]], "init_with_figure() (nilearn.plotting.displays.baseslicer class method)": [[386, "nilearn.plotting.displays.BaseSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.lprojector class method)": [[389, "nilearn.plotting.displays.LProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.lrprojector class method)": [[390, "nilearn.plotting.displays.LRProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.lyrprojector class method)": [[391, "nilearn.plotting.displays.LYRProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.lyrzprojector class method)": [[392, "nilearn.plotting.displays.LYRZProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.lzrprojector class method)": [[393, "nilearn.plotting.displays.LZRProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.lzryprojector class method)": [[394, "nilearn.plotting.displays.LZRYProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.mosaicslicer class method)": [[395, "nilearn.plotting.displays.MosaicSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.orthoprojector class method)": [[396, "nilearn.plotting.displays.OrthoProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.orthoslicer class method)": [[397, "nilearn.plotting.displays.OrthoSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.rprojector class method)": [[399, "nilearn.plotting.displays.RProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.tiledslicer class method)": [[400, "nilearn.plotting.displays.TiledSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.xprojector class method)": [[401, "nilearn.plotting.displays.XProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.xslicer class method)": [[402, "nilearn.plotting.displays.XSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.xzprojector class method)": [[403, "nilearn.plotting.displays.XZProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.xzslicer class method)": [[404, "nilearn.plotting.displays.XZSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.yprojector class method)": [[405, "nilearn.plotting.displays.YProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.yslicer class method)": [[406, "nilearn.plotting.displays.YSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.yxprojector class method)": [[407, "nilearn.plotting.displays.YXProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.yxslicer class method)": [[408, "nilearn.plotting.displays.YXSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.yzprojector class method)": [[409, "nilearn.plotting.displays.YZProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.yzslicer class method)": [[410, "nilearn.plotting.displays.YZSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.zprojector class method)": [[411, "nilearn.plotting.displays.ZProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.zslicer class method)": [[412, "nilearn.plotting.displays.ZSlicer.init_with_figure", false]], "initialize() (nilearn.glm.armodel method)": [[307, "nilearn.glm.ARModel.initialize", false]], "initialize() (nilearn.glm.olsmodel method)": [[311, "nilearn.glm.OLSModel.initialize", false]], "inmemorymesh (class in nilearn.surface)": [[464, "nilearn.surface.InMemoryMesh", false]], "intersect_masks() (in module nilearn.masking)": [[382, "nilearn.masking.intersect_masks", false]], "inverse_transform() (nilearn.connectome.connectivitymeasure method)": [[232, "nilearn.connectome.ConnectivityMeasure.inverse_transform", false]], "inverse_transform() (nilearn.decomposition.canica method)": [[305, "nilearn.decomposition.CanICA.inverse_transform", false]], "inverse_transform() (nilearn.decomposition.dictlearning method)": [[306, "nilearn.decomposition.DictLearning.inverse_transform", false]], "inverse_transform() (nilearn.maskers.basemasker method)": [[364, "nilearn.maskers.BaseMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.multiniftilabelsmasker method)": [[365, "nilearn.maskers.MultiNiftiLabelsMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.multiniftimapsmasker method)": [[366, "nilearn.maskers.MultiNiftiMapsMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.multiniftimasker method)": [[367, "nilearn.maskers.MultiNiftiMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.niftilabelsmasker method)": [[368, "nilearn.maskers.NiftiLabelsMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.niftimapsmasker method)": [[369, "nilearn.maskers.NiftiMapsMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.niftimasker method)": [[370, "nilearn.maskers.NiftiMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.niftispheresmasker method)": [[371, "nilearn.maskers.NiftiSpheresMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.surfacelabelsmasker method)": [[372, "nilearn.maskers.SurfaceLabelsMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.surfacemapsmasker method)": [[373, "nilearn.maskers.SurfaceMapsMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.surfacemasker method)": [[374, "nilearn.maskers.SurfaceMasker.inverse_transform", false]], "inverse_transform() (nilearn.regions.hierarchicalkmeans method)": [[446, "nilearn.regions.HierarchicalKMeans.inverse_transform", false]], "inverse_transform() (nilearn.regions.parcellations method)": [[447, "nilearn.regions.Parcellations.inverse_transform", false]], "inverse_transform() (nilearn.regions.regionextractor method)": [[449, "nilearn.regions.RegionExtractor.inverse_transform", false]], "inverse_transform() (nilearn.regions.rena method)": [[448, "nilearn.regions.ReNA.inverse_transform", false]], "iter_img() (in module nilearn.image)": [[346, "nilearn.image.iter_img", false]], "largest_connected_component_img() (in module nilearn.image)": [[347, "nilearn.image.largest_connected_component_img", false]], "likelihoodmodelresults (class in nilearn.glm)": [[310, "nilearn.glm.LikelihoodModelResults", false]], "load_confounds() (in module nilearn.interfaces.fmriprep)": [[361, "nilearn.interfaces.fmriprep.load_confounds", false]], "load_confounds_strategy() (in module nilearn.interfaces.fmriprep)": [[362, "nilearn.interfaces.fmriprep.load_confounds_strategy", false]], "load_fsaverage() (in module nilearn.datasets)": [[286, "nilearn.datasets.load_fsaverage", false]], "load_fsaverage_data() (in module nilearn.datasets)": [[287, "nilearn.datasets.load_fsaverage_data", false]], "load_img() (in module nilearn.image)": [[348, "nilearn.image.load_img", false]], "load_mni152_brain_mask() (in module nilearn.datasets)": [[288, "nilearn.datasets.load_mni152_brain_mask", false]], "load_mni152_gm_mask() (in module nilearn.datasets)": [[289, "nilearn.datasets.load_mni152_gm_mask", false]], "load_mni152_gm_template() (in module nilearn.datasets)": [[290, "nilearn.datasets.load_mni152_gm_template", false]], "load_mni152_template() (in module nilearn.datasets)": [[291, "nilearn.datasets.load_mni152_template", false]], "load_mni152_wm_mask() (in module nilearn.datasets)": [[292, "nilearn.datasets.load_mni152_wm_mask", false]], "load_mni152_wm_template() (in module nilearn.datasets)": [[293, "nilearn.datasets.load_mni152_wm_template", false]], "load_nki() (in module nilearn.datasets)": [[294, "nilearn.datasets.load_nki", false]], "load_sample_motor_activation_image() (in module nilearn.datasets)": [[295, "nilearn.datasets.load_sample_motor_activation_image", false]], "load_surf_data() (in module nilearn.surface)": [[469, "nilearn.surface.load_surf_data", false]], "load_surf_mesh() (in module nilearn.surface)": [[470, "nilearn.surface.load_surf_mesh", false]], "loaded() (nilearn.surface.filemesh method)": [[463, "nilearn.surface.FileMesh.loaded", false]], "logl() (nilearn.glm.armodel method)": [[307, "nilearn.glm.ARModel.logL", false]], "logl() (nilearn.glm.likelihoodmodelresults method)": [[310, "nilearn.glm.LikelihoodModelResults.logL", false]], "logl() (nilearn.glm.olsmodel method)": [[311, "nilearn.glm.OLSModel.logL", false]], "logl() (nilearn.glm.regressionresults method)": [[312, "nilearn.glm.RegressionResults.logL", false]], "logl() (nilearn.glm.simpleregressionresults method)": [[313, "nilearn.glm.SimpleRegressionResults.logL", false]], "lprojector (class in nilearn.plotting.displays)": [[389, "nilearn.plotting.displays.LProjector", false]], "lrprojector (class in nilearn.plotting.displays)": [[390, "nilearn.plotting.displays.LRProjector", false]], "lyrprojector (class in nilearn.plotting.displays)": [[391, "nilearn.plotting.displays.LYRProjector", false]], "lyrzprojector (class in nilearn.plotting.displays)": [[392, "nilearn.plotting.displays.LYRZProjector", false]], "lzrprojector (class in nilearn.plotting.displays)": [[393, "nilearn.plotting.displays.LZRProjector", false]], "lzryprojector (class in nilearn.plotting.displays)": [[394, "nilearn.plotting.displays.LZRYProjector", false]], "make_first_level_design_matrix() (in module nilearn.glm.first_level)": [[327, "nilearn.glm.first_level.make_first_level_design_matrix", false]], "make_glm_report() (in module nilearn.reporting)": [[459, "nilearn.reporting.make_glm_report", false]], "make_second_level_design_matrix() (in module nilearn.glm.second_level)": [[334, "nilearn.glm.second_level.make_second_level_design_matrix", false]], "math_img() (in module nilearn.image)": [[349, "nilearn.image.math_img", false]], "mean_img() (in module nilearn.image)": [[350, "nilearn.image.mean_img", false]], "mean_scaling() (in module nilearn.glm.first_level)": [[328, "nilearn.glm.first_level.mean_scaling", false]], "meg": [[179, "term-MEG", true]], "mesh": [[179, "term-mesh", true]], "mni": [[179, "term-MNI", true]], "module": [[187, "module-nilearn.connectome", false], [188, "module-nilearn.datasets", false], [189, "module-nilearn.decoding", false], [190, "module-nilearn.decomposition", false], [474, "module-nilearn.glm", false], [474, "module-nilearn.glm.first_level", false], [474, "module-nilearn.glm.second_level", false], [475, "module-nilearn.image", false], [477, "module-nilearn.interfaces", false], [477, "module-nilearn.interfaces.bids", false], [477, "module-nilearn.interfaces.fmriprep", false], [477, "module-nilearn.interfaces.fsl", false], [478, "module-nilearn.maskers", false], [479, "module-nilearn.masking", false], [480, "module-nilearn.mass_univariate", false], [481, "module-nilearn.plotting", false], [481, "module-nilearn.plotting.displays", false], [482, "module-nilearn.regions", false], [483, "module-nilearn.reporting", false], [484, "module-nilearn.signal", false], [485, "module-nilearn.surface", false]], "mosaicslicer (class in nilearn.plotting.displays)": [[395, "nilearn.plotting.displays.MosaicSlicer", false]], "mse() (nilearn.glm.regressionresults method)": [[312, "nilearn.glm.RegressionResults.MSE", false]], "multiniftilabelsmasker (class in nilearn.maskers)": [[365, "nilearn.maskers.MultiNiftiLabelsMasker", false]], "multiniftimapsmasker (class in nilearn.maskers)": [[366, "nilearn.maskers.MultiNiftiMapsMasker", false]], "multiniftimasker (class in nilearn.maskers)": [[367, "nilearn.maskers.MultiNiftiMasker", false]], "mvpa": [[179, "term-MVPA", true]], "n_vertices (nilearn.surface.filemesh attribute)": [[463, "nilearn.surface.FileMesh.n_vertices", false]], "n_vertices (nilearn.surface.inmemorymesh attribute)": [[464, "nilearn.surface.InMemoryMesh.n_vertices", false]], "n_vertices (nilearn.surface.polymesh attribute)": [[466, "nilearn.surface.PolyMesh.n_vertices", false]], "n_vertices (nilearn.surface.surfacemesh attribute)": [[468, "nilearn.surface.SurfaceMesh.n_vertices", false]], "neurovault": [[179, "term-Neurovault", true]], "new_img_like() (in module nilearn.image)": [[351, "nilearn.image.new_img_like", false]], "nifti_maps_masker_ (nilearn.decomposition.canica property)": [[305, "nilearn.decomposition.CanICA.nifti_maps_masker_", false]], "nifti_maps_masker_ (nilearn.decomposition.dictlearning property)": [[306, "nilearn.decomposition.DictLearning.nifti_maps_masker_", false]], "nifti_maps_masker_ (nilearn.regions.parcellations property)": [[447, "nilearn.regions.Parcellations.nifti_maps_masker_", false]], "niftilabelsmasker (class in nilearn.maskers)": [[368, "nilearn.maskers.NiftiLabelsMasker", false]], "niftimapsmasker (class in nilearn.maskers)": [[369, "nilearn.maskers.NiftiMapsMasker", false]], "niftimasker (class in nilearn.maskers)": [[370, "nilearn.maskers.NiftiMasker", false]], "niftispheresmasker (class in nilearn.maskers)": [[371, "nilearn.maskers.NiftiSpheresMasker", false]], "nilearn.connectome": [[187, "module-nilearn.connectome", false]], "nilearn.datasets": [[188, "module-nilearn.datasets", false]], "nilearn.decoding": [[189, "module-nilearn.decoding", false]], "nilearn.decomposition": [[190, "module-nilearn.decomposition", false]], "nilearn.glm": [[474, "module-nilearn.glm", false]], "nilearn.glm.first_level": [[474, "module-nilearn.glm.first_level", false]], "nilearn.glm.second_level": [[474, "module-nilearn.glm.second_level", false]], "nilearn.image": [[475, "module-nilearn.image", false]], "nilearn.interfaces": [[477, "module-nilearn.interfaces", false]], "nilearn.interfaces.bids": [[477, "module-nilearn.interfaces.bids", false]], "nilearn.interfaces.fmriprep": [[477, "module-nilearn.interfaces.fmriprep", false]], "nilearn.interfaces.fsl": [[477, "module-nilearn.interfaces.fsl", false]], "nilearn.maskers": [[478, "module-nilearn.maskers", false]], "nilearn.masking": [[479, "module-nilearn.masking", false]], "nilearn.mass_univariate": [[480, "module-nilearn.mass_univariate", false]], "nilearn.plotting": [[481, "module-nilearn.plotting", false]], "nilearn.plotting.displays": [[481, "module-nilearn.plotting.displays", false]], "nilearn.regions": [[482, "module-nilearn.regions", false]], "nilearn.reporting": [[483, "module-nilearn.reporting", false]], "nilearn.signal": [[484, "module-nilearn.signal", false]], "nilearn.surface": [[485, "module-nilearn.surface", false]], "non_parametric_inference() (in module nilearn.glm.second_level)": [[335, "nilearn.glm.second_level.non_parametric_inference", false]], "normalized_residuals() (nilearn.glm.regressionresults method)": [[312, "nilearn.glm.RegressionResults.normalized_residuals", false]], "normalized_residuals() (nilearn.glm.simpleregressionresults method)": [[313, "nilearn.glm.SimpleRegressionResults.normalized_residuals", false]], "olsmodel (class in nilearn.glm)": [[311, "nilearn.glm.OLSModel", false]], "one_minus_pvalue() (nilearn.glm.contrast method)": [[308, "nilearn.glm.Contrast.one_minus_pvalue", false]], "open_in_browser() (nilearn.reporting.htmlreport method)": [[457, "nilearn.reporting.HTMLReport.open_in_browser", false]], "opening": [[179, "term-Opening", true]], "orthoprojector (class in nilearn.plotting.displays)": [[396, "nilearn.plotting.displays.OrthoProjector", false]], "orthoslicer (class in nilearn.plotting.displays)": [[397, "nilearn.plotting.displays.OrthoSlicer", false]], "p_value() (nilearn.glm.contrast method)": [[308, "nilearn.glm.Contrast.p_value", false]], "parameter estimate": [[179, "term-Parameter-estimate", true]], "parcellation": [[179, "term-parcellation", true]], "parcellations (class in nilearn.regions)": [[447, "nilearn.regions.Parcellations", false]], "parse_bids_filename() (in module nilearn.interfaces.bids)": [[359, "nilearn.interfaces.bids.parse_bids_filename", false]], "patch_openneuro_dataset() (in module nilearn.datasets)": [[296, "nilearn.datasets.patch_openneuro_dataset", false]], "permuted_ols() (in module nilearn.mass_univariate)": [[384, "nilearn.mass_univariate.permuted_ols", false]], "plot_anat() (in module nilearn.plotting)": [[419, "nilearn.plotting.plot_anat", false]], "plot_carpet() (in module nilearn.plotting)": [[420, "nilearn.plotting.plot_carpet", false]], "plot_connectome() (in module nilearn.plotting)": [[421, "nilearn.plotting.plot_connectome", false]], "plot_contrast_matrix() (in module nilearn.plotting)": [[422, "nilearn.plotting.plot_contrast_matrix", false]], "plot_design_matrix() (in module nilearn.plotting)": [[423, "nilearn.plotting.plot_design_matrix", false]], "plot_design_matrix_correlation() (in module nilearn.plotting)": [[424, "nilearn.plotting.plot_design_matrix_correlation", false]], "plot_epi() (in module nilearn.plotting)": [[425, "nilearn.plotting.plot_epi", false]], "plot_event() (in module nilearn.plotting)": [[426, "nilearn.plotting.plot_event", false]], "plot_glass_brain() (in module nilearn.plotting)": [[427, "nilearn.plotting.plot_glass_brain", false]], "plot_img() (in module nilearn.plotting)": [[428, "nilearn.plotting.plot_img", false]], "plot_img_comparison() (in module nilearn.plotting)": [[429, "nilearn.plotting.plot_img_comparison", false]], "plot_img_on_surf() (in module nilearn.plotting)": [[430, "nilearn.plotting.plot_img_on_surf", false]], "plot_markers() (in module nilearn.plotting)": [[431, "nilearn.plotting.plot_markers", false]], "plot_matrix() (in module nilearn.plotting)": [[432, "nilearn.plotting.plot_matrix", false]], "plot_prob_atlas() (in module nilearn.plotting)": [[433, "nilearn.plotting.plot_prob_atlas", false]], "plot_roi() (in module nilearn.plotting)": [[434, "nilearn.plotting.plot_roi", false]], "plot_stat_map() (in module nilearn.plotting)": [[435, "nilearn.plotting.plot_stat_map", false]], "plot_surf() (in module nilearn.plotting)": [[436, "nilearn.plotting.plot_surf", false]], "plot_surf_contours() (in module nilearn.plotting)": [[437, "nilearn.plotting.plot_surf_contours", false]], "plot_surf_roi() (in module nilearn.plotting)": [[438, "nilearn.plotting.plot_surf_roi", false]], "plot_surf_stat_map() (in module nilearn.plotting)": [[439, "nilearn.plotting.plot_surf_stat_map", false]], "plotlysurfacefigure (class in nilearn.plotting.displays)": [[398, "nilearn.plotting.displays.PlotlySurfaceFigure", false]], "polydata (class in nilearn.surface)": [[465, "nilearn.surface.PolyData", false]], "polymesh (class in nilearn.surface)": [[466, "nilearn.surface.PolyMesh", false]], "prec_to_partial() (in module nilearn.connectome)": [[237, "nilearn.connectome.prec_to_partial", false]], "predict() (nilearn.decoding.decoder method)": [[298, "nilearn.decoding.Decoder.predict", false]], "predict() (nilearn.decoding.decoderregressor method)": [[299, "nilearn.decoding.DecoderRegressor.predict", false]], "predict() (nilearn.decoding.fremclassifier method)": [[300, "nilearn.decoding.FREMClassifier.predict", false]], "predict() (nilearn.decoding.fremregressor method)": [[301, "nilearn.decoding.FREMRegressor.predict", false]], "predict() (nilearn.decoding.spacenetclassifier method)": [[303, "nilearn.decoding.SpaceNetClassifier.predict", false]], "predict() (nilearn.decoding.spacenetregressor method)": [[304, "nilearn.decoding.SpaceNetRegressor.predict", false]], "predicted() (nilearn.glm.first_level.firstlevelmodel method)": [[320, "nilearn.glm.first_level.FirstLevelModel.predicted", false]], "predicted() (nilearn.glm.regressionresults method)": [[312, "nilearn.glm.RegressionResults.predicted", false]], "predicted() (nilearn.glm.second_level.secondlevelmodel method)": [[333, "nilearn.glm.second_level.SecondLevelModel.predicted", false]], "predicted() (nilearn.glm.simpleregressionresults method)": [[313, "nilearn.glm.SimpleRegressionResults.predicted", false]], "predictive modeling": [[179, "term-predictive-modeling", true]], "probabilistic atlas": [[179, "term-Probabilistic-atlas", true]], "r_square() (nilearn.glm.first_level.firstlevelmodel method)": [[320, "nilearn.glm.first_level.FirstLevelModel.r_square", false]], "r_square() (nilearn.glm.regressionresults method)": [[312, "nilearn.glm.RegressionResults.r_square", false]], "r_square() (nilearn.glm.second_level.secondlevelmodel method)": [[333, "nilearn.glm.second_level.SecondLevelModel.r_square", false]], "recursive_neighbor_agglomeration() (in module nilearn.regions)": [[454, "nilearn.regions.recursive_neighbor_agglomeration", false]], "regionextractor (class in nilearn.regions)": [[449, "nilearn.regions.RegionExtractor", false]], "regression": [[179, "term-regression", true]], "regressionresults (class in nilearn.glm)": [[312, "nilearn.glm.RegressionResults", false]], "rena": [[179, "term-ReNA", true]], "rena (class in nilearn.regions)": [[448, "nilearn.regions.ReNA", false]], "reorder_img() (in module nilearn.image)": [[352, "nilearn.image.reorder_img", false]], "resample_img() (in module nilearn.image)": [[353, "nilearn.image.resample_img", false]], "resample_to_img() (in module nilearn.image)": [[354, "nilearn.image.resample_to_img", false]], "residuals() (nilearn.glm.first_level.firstlevelmodel method)": [[320, "nilearn.glm.first_level.FirstLevelModel.residuals", false]], "residuals() (nilearn.glm.regressionresults method)": [[312, "nilearn.glm.RegressionResults.residuals", false]], "residuals() (nilearn.glm.second_level.secondlevelmodel method)": [[333, "nilearn.glm.second_level.SecondLevelModel.residuals", false]], "residuals() (nilearn.glm.simpleregressionresults method)": [[313, "nilearn.glm.SimpleRegressionResults.residuals", false]], "resize() (nilearn.reporting.htmlreport method)": [[457, "nilearn.reporting.HTMLReport.resize", false]], "resting-state": [[179, "term-resting-state", true]], "roc": [[179, "term-ROC", true]], "rprojector (class in nilearn.plotting.displays)": [[399, "nilearn.plotting.displays.RProjector", false]], "run_glm() (in module nilearn.glm.first_level)": [[329, "nilearn.glm.first_level.run_glm", false]], "save_as_html() (nilearn.reporting.htmlreport method)": [[457, "nilearn.reporting.HTMLReport.save_as_html", false]], "save_glm_to_bids() (in module nilearn.interfaces.bids)": [[360, "nilearn.interfaces.bids.save_glm_to_bids", false]], "savefig() (nilearn.plotting.displays.baseslicer method)": [[386, "nilearn.plotting.displays.BaseSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.lprojector method)": [[389, "nilearn.plotting.displays.LProjector.savefig", false]], "savefig() (nilearn.plotting.displays.lrprojector method)": [[390, "nilearn.plotting.displays.LRProjector.savefig", false]], "savefig() (nilearn.plotting.displays.lyrprojector method)": [[391, "nilearn.plotting.displays.LYRProjector.savefig", false]], "savefig() (nilearn.plotting.displays.lyrzprojector method)": [[392, "nilearn.plotting.displays.LYRZProjector.savefig", false]], "savefig() (nilearn.plotting.displays.lzrprojector method)": [[393, "nilearn.plotting.displays.LZRProjector.savefig", false]], "savefig() (nilearn.plotting.displays.lzryprojector method)": [[394, "nilearn.plotting.displays.LZRYProjector.savefig", false]], "savefig() (nilearn.plotting.displays.mosaicslicer method)": [[395, "nilearn.plotting.displays.MosaicSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.orthoprojector method)": [[396, "nilearn.plotting.displays.OrthoProjector.savefig", false]], "savefig() (nilearn.plotting.displays.orthoslicer method)": [[397, "nilearn.plotting.displays.OrthoSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.plotlysurfacefigure method)": [[398, "nilearn.plotting.displays.PlotlySurfaceFigure.savefig", false]], "savefig() (nilearn.plotting.displays.rprojector method)": [[399, "nilearn.plotting.displays.RProjector.savefig", false]], "savefig() (nilearn.plotting.displays.tiledslicer method)": [[400, "nilearn.plotting.displays.TiledSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.xprojector method)": [[401, "nilearn.plotting.displays.XProjector.savefig", false]], "savefig() (nilearn.plotting.displays.xslicer method)": [[402, "nilearn.plotting.displays.XSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.xzprojector method)": [[403, "nilearn.plotting.displays.XZProjector.savefig", false]], "savefig() (nilearn.plotting.displays.xzslicer method)": [[404, "nilearn.plotting.displays.XZSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.yprojector method)": [[405, "nilearn.plotting.displays.YProjector.savefig", false]], "savefig() (nilearn.plotting.displays.yslicer method)": [[406, "nilearn.plotting.displays.YSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.yxprojector method)": [[407, "nilearn.plotting.displays.YXProjector.savefig", false]], "savefig() (nilearn.plotting.displays.yxslicer method)": [[408, "nilearn.plotting.displays.YXSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.yzprojector method)": [[409, "nilearn.plotting.displays.YZProjector.savefig", false]], "savefig() (nilearn.plotting.displays.yzslicer method)": [[410, "nilearn.plotting.displays.YZSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.zprojector method)": [[411, "nilearn.plotting.displays.ZProjector.savefig", false]], "savefig() (nilearn.plotting.displays.zslicer method)": [[412, "nilearn.plotting.displays.ZSlicer.savefig", false]], "score() (nilearn.decoding.decoder method)": [[298, "nilearn.decoding.Decoder.score", false]], "score() (nilearn.decoding.decoderregressor method)": [[299, "nilearn.decoding.DecoderRegressor.score", false]], "score() (nilearn.decoding.fremclassifier method)": [[300, "nilearn.decoding.FREMClassifier.score", false]], "score() (nilearn.decoding.fremregressor method)": [[301, "nilearn.decoding.FREMRegressor.score", false]], "score() (nilearn.decoding.spacenetclassifier method)": [[303, "nilearn.decoding.SpaceNetClassifier.score", false]], "score() (nilearn.decoding.spacenetregressor method)": [[304, "nilearn.decoding.SpaceNetRegressor.score", false]], "score() (nilearn.decomposition.canica method)": [[305, "nilearn.decomposition.CanICA.score", false]], "score() (nilearn.decomposition.dictlearning method)": [[306, "nilearn.decomposition.DictLearning.score", false]], "score() (nilearn.regions.parcellations method)": [[447, "nilearn.regions.Parcellations.score", false]], "scores_img_ (nilearn.decoding.searchlight property)": [[302, "nilearn.decoding.SearchLight.scores_img_", false]], "searchlight": [[179, "term-Searchlight", true]], "searchlight (class in nilearn.decoding)": [[302, "nilearn.decoding.SearchLight", false]], "secondlevelmodel (class in nilearn.glm.second_level)": [[333, "nilearn.glm.second_level.SecondLevelModel", false]], "select_from_index() (in module nilearn.datasets)": [[297, "nilearn.datasets.select_from_index", false]], "set_fit_request() (nilearn.connectome.groupsparsecovariance method)": [[233, "nilearn.connectome.GroupSparseCovariance.set_fit_request", false]], "set_fit_request() (nilearn.connectome.groupsparsecovariancecv method)": [[234, "nilearn.connectome.GroupSparseCovarianceCV.set_fit_request", false]], "set_fit_request() (nilearn.decoding.decoder method)": [[298, "nilearn.decoding.Decoder.set_fit_request", false]], "set_fit_request() (nilearn.decoding.decoderregressor method)": [[299, "nilearn.decoding.DecoderRegressor.set_fit_request", false]], "set_fit_request() (nilearn.decoding.fremclassifier method)": [[300, "nilearn.decoding.FREMClassifier.set_fit_request", false]], "set_fit_request() (nilearn.decoding.fremregressor method)": [[301, "nilearn.decoding.FREMRegressor.set_fit_request", false]], "set_fit_request() (nilearn.decoding.searchlight method)": [[302, "nilearn.decoding.SearchLight.set_fit_request", false]], "set_fit_request() (nilearn.decoding.spacenetclassifier method)": [[303, "nilearn.decoding.SpaceNetClassifier.set_fit_request", false]], "set_fit_request() (nilearn.decoding.spacenetregressor method)": [[304, "nilearn.decoding.SpaceNetRegressor.set_fit_request", false]], "set_fit_request() (nilearn.decomposition.canica method)": [[305, "nilearn.decomposition.CanICA.set_fit_request", false]], "set_fit_request() (nilearn.decomposition.dictlearning method)": [[306, "nilearn.decomposition.DictLearning.set_fit_request", false]], "set_fit_request() (nilearn.glm.first_level.firstlevelmodel method)": [[320, "nilearn.glm.first_level.FirstLevelModel.set_fit_request", false]], "set_fit_request() (nilearn.glm.second_level.secondlevelmodel method)": [[333, "nilearn.glm.second_level.SecondLevelModel.set_fit_request", false]], "set_fit_request() (nilearn.maskers.basemasker method)": [[364, "nilearn.maskers.BaseMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.multiniftilabelsmasker method)": [[365, "nilearn.maskers.MultiNiftiLabelsMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.multiniftimapsmasker method)": [[366, "nilearn.maskers.MultiNiftiMapsMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.multiniftimasker method)": [[367, "nilearn.maskers.MultiNiftiMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.niftilabelsmasker method)": [[368, "nilearn.maskers.NiftiLabelsMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.niftimapsmasker method)": [[369, "nilearn.maskers.NiftiMapsMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.niftimasker method)": [[370, "nilearn.maskers.NiftiMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.niftispheresmasker method)": [[371, "nilearn.maskers.NiftiSpheresMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.surfacelabelsmasker method)": [[372, "nilearn.maskers.SurfaceLabelsMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.surfacemapsmasker method)": [[373, "nilearn.maskers.SurfaceMapsMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.surfacemasker method)": [[374, "nilearn.maskers.SurfaceMasker.set_fit_request", false]], "set_fit_request() (nilearn.regions.parcellations method)": [[447, "nilearn.regions.Parcellations.set_fit_request", false]], "set_fit_request() (nilearn.regions.regionextractor method)": [[449, "nilearn.regions.RegionExtractor.set_fit_request", false]], "set_inverse_transform_request() (nilearn.connectome.connectivitymeasure method)": [[232, "nilearn.connectome.ConnectivityMeasure.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.decomposition.canica method)": [[305, "nilearn.decomposition.CanICA.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.decomposition.dictlearning method)": [[306, "nilearn.decomposition.DictLearning.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.multiniftilabelsmasker method)": [[365, "nilearn.maskers.MultiNiftiLabelsMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.multiniftimapsmasker method)": [[366, "nilearn.maskers.MultiNiftiMapsMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.niftilabelsmasker method)": [[368, "nilearn.maskers.NiftiLabelsMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.niftimapsmasker method)": [[369, "nilearn.maskers.NiftiMapsMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.niftispheresmasker method)": [[371, "nilearn.maskers.NiftiSpheresMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.surfacelabelsmasker method)": [[372, "nilearn.maskers.SurfaceLabelsMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.surfacemapsmasker method)": [[373, "nilearn.maskers.SurfaceMapsMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.surfacemasker method)": [[374, "nilearn.maskers.SurfaceMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.regions.hierarchicalkmeans method)": [[446, "nilearn.regions.HierarchicalKMeans.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.regions.parcellations method)": [[447, "nilearn.regions.Parcellations.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.regions.regionextractor method)": [[449, "nilearn.regions.RegionExtractor.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.regions.rena method)": [[448, "nilearn.regions.ReNA.set_inverse_transform_request", false]], "set_output() (nilearn.connectome.connectivitymeasure method)": [[232, "nilearn.connectome.ConnectivityMeasure.set_output", false]], "set_output() (nilearn.decoding.searchlight method)": [[302, "nilearn.decoding.SearchLight.set_output", false]], "set_output() (nilearn.decomposition.canica method)": [[305, "nilearn.decomposition.CanICA.set_output", false]], "set_output() (nilearn.decomposition.dictlearning method)": [[306, "nilearn.decomposition.DictLearning.set_output", false]], "set_output() (nilearn.glm.first_level.firstlevelmodel method)": [[320, "nilearn.glm.first_level.FirstLevelModel.set_output", false]], "set_output() (nilearn.glm.second_level.secondlevelmodel method)": [[333, "nilearn.glm.second_level.SecondLevelModel.set_output", false]], "set_output() (nilearn.maskers.basemasker method)": [[364, "nilearn.maskers.BaseMasker.set_output", false]], "set_output() (nilearn.maskers.multiniftilabelsmasker method)": [[365, "nilearn.maskers.MultiNiftiLabelsMasker.set_output", false]], "set_output() (nilearn.maskers.multiniftimapsmasker method)": [[366, "nilearn.maskers.MultiNiftiMapsMasker.set_output", false]], "set_output() (nilearn.maskers.multiniftimasker method)": [[367, "nilearn.maskers.MultiNiftiMasker.set_output", false]], "set_output() (nilearn.maskers.niftilabelsmasker method)": [[368, "nilearn.maskers.NiftiLabelsMasker.set_output", false]], "set_output() (nilearn.maskers.niftimapsmasker method)": [[369, "nilearn.maskers.NiftiMapsMasker.set_output", false]], "set_output() (nilearn.maskers.niftimasker method)": [[370, "nilearn.maskers.NiftiMasker.set_output", false]], "set_output() (nilearn.maskers.niftispheresmasker method)": [[371, "nilearn.maskers.NiftiSpheresMasker.set_output", false]], "set_output() (nilearn.maskers.surfacelabelsmasker method)": [[372, "nilearn.maskers.SurfaceLabelsMasker.set_output", false]], "set_output() (nilearn.maskers.surfacemapsmasker method)": [[373, "nilearn.maskers.SurfaceMapsMasker.set_output", false]], "set_output() (nilearn.maskers.surfacemasker method)": [[374, "nilearn.maskers.SurfaceMasker.set_output", false]], "set_output() (nilearn.regions.hierarchicalkmeans method)": [[446, "nilearn.regions.HierarchicalKMeans.set_output", false]], "set_output() (nilearn.regions.parcellations method)": [[447, "nilearn.regions.Parcellations.set_output", false]], "set_output() (nilearn.regions.regionextractor method)": [[449, "nilearn.regions.RegionExtractor.set_output", false]], "set_output() (nilearn.regions.rena method)": [[448, "nilearn.regions.ReNA.set_output", false]], "set_params() (nilearn.connectome.connectivitymeasure method)": [[232, "nilearn.connectome.ConnectivityMeasure.set_params", false]], "set_params() (nilearn.connectome.groupsparsecovariance method)": [[233, "nilearn.connectome.GroupSparseCovariance.set_params", false]], "set_params() (nilearn.connectome.groupsparsecovariancecv method)": [[234, "nilearn.connectome.GroupSparseCovarianceCV.set_params", false]], "set_params() (nilearn.decoding.decoder method)": [[298, "nilearn.decoding.Decoder.set_params", false]], "set_params() (nilearn.decoding.decoderregressor method)": [[299, "nilearn.decoding.DecoderRegressor.set_params", false]], "set_params() (nilearn.decoding.fremclassifier method)": [[300, "nilearn.decoding.FREMClassifier.set_params", false]], "set_params() (nilearn.decoding.fremregressor method)": [[301, "nilearn.decoding.FREMRegressor.set_params", false]], "set_params() (nilearn.decoding.searchlight method)": [[302, "nilearn.decoding.SearchLight.set_params", false]], "set_params() (nilearn.decoding.spacenetclassifier method)": [[303, "nilearn.decoding.SpaceNetClassifier.set_params", false]], "set_params() (nilearn.decoding.spacenetregressor method)": [[304, "nilearn.decoding.SpaceNetRegressor.set_params", false]], "set_params() (nilearn.decomposition.canica method)": [[305, "nilearn.decomposition.CanICA.set_params", false]], "set_params() (nilearn.decomposition.dictlearning method)": [[306, "nilearn.decomposition.DictLearning.set_params", false]], "set_params() (nilearn.glm.first_level.firstlevelmodel method)": [[320, "nilearn.glm.first_level.FirstLevelModel.set_params", false]], "set_params() (nilearn.glm.second_level.secondlevelmodel method)": [[333, "nilearn.glm.second_level.SecondLevelModel.set_params", false]], "set_params() (nilearn.maskers.basemasker method)": [[364, "nilearn.maskers.BaseMasker.set_params", false]], "set_params() (nilearn.maskers.multiniftilabelsmasker method)": [[365, "nilearn.maskers.MultiNiftiLabelsMasker.set_params", false]], "set_params() (nilearn.maskers.multiniftimapsmasker method)": [[366, "nilearn.maskers.MultiNiftiMapsMasker.set_params", false]], "set_params() (nilearn.maskers.multiniftimasker method)": [[367, "nilearn.maskers.MultiNiftiMasker.set_params", false]], "set_params() (nilearn.maskers.niftilabelsmasker method)": [[368, "nilearn.maskers.NiftiLabelsMasker.set_params", false]], "set_params() (nilearn.maskers.niftimapsmasker method)": [[369, "nilearn.maskers.NiftiMapsMasker.set_params", false]], "set_params() (nilearn.maskers.niftimasker method)": [[370, "nilearn.maskers.NiftiMasker.set_params", false]], "set_params() (nilearn.maskers.niftispheresmasker method)": [[371, "nilearn.maskers.NiftiSpheresMasker.set_params", false]], "set_params() (nilearn.maskers.surfacelabelsmasker method)": [[372, "nilearn.maskers.SurfaceLabelsMasker.set_params", false]], "set_params() (nilearn.maskers.surfacemapsmasker method)": [[373, "nilearn.maskers.SurfaceMapsMasker.set_params", false]], "set_params() (nilearn.maskers.surfacemasker method)": [[374, "nilearn.maskers.SurfaceMasker.set_params", false]], "set_params() (nilearn.regions.hierarchicalkmeans method)": [[446, "nilearn.regions.HierarchicalKMeans.set_params", false]], "set_params() (nilearn.regions.parcellations method)": [[447, "nilearn.regions.Parcellations.set_params", false]], "set_params() (nilearn.regions.regionextractor method)": [[449, "nilearn.regions.RegionExtractor.set_params", false]], "set_params() (nilearn.regions.rena method)": [[448, "nilearn.regions.ReNA.set_params", false]], "set_score_request() (nilearn.decoding.decoder method)": [[298, "nilearn.decoding.Decoder.set_score_request", false]], "set_score_request() (nilearn.decoding.decoderregressor method)": [[299, "nilearn.decoding.DecoderRegressor.set_score_request", false]], "set_score_request() (nilearn.decoding.spacenetclassifier method)": [[303, "nilearn.decoding.SpaceNetClassifier.set_score_request", false]], "set_score_request() (nilearn.decoding.spacenetregressor method)": [[304, "nilearn.decoding.SpaceNetRegressor.set_score_request", false]], "set_score_request() (nilearn.decomposition.canica method)": [[305, "nilearn.decomposition.CanICA.set_score_request", false]], "set_score_request() (nilearn.decomposition.dictlearning method)": [[306, "nilearn.decomposition.DictLearning.set_score_request", false]], "set_score_request() (nilearn.regions.parcellations method)": [[447, "nilearn.regions.Parcellations.set_score_request", false]], "set_transform_request() (nilearn.connectome.connectivitymeasure method)": [[232, "nilearn.connectome.ConnectivityMeasure.set_transform_request", false]], "set_transform_request() (nilearn.decoding.searchlight method)": [[302, "nilearn.decoding.SearchLight.set_transform_request", false]], "set_transform_request() (nilearn.decomposition.canica method)": [[305, "nilearn.decomposition.CanICA.set_transform_request", false]], "set_transform_request() (nilearn.decomposition.dictlearning method)": [[306, "nilearn.decomposition.DictLearning.set_transform_request", false]], "set_transform_request() (nilearn.maskers.basemasker method)": [[364, "nilearn.maskers.BaseMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.multiniftilabelsmasker method)": [[365, "nilearn.maskers.MultiNiftiLabelsMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.multiniftimapsmasker method)": [[366, "nilearn.maskers.MultiNiftiMapsMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.multiniftimasker method)": [[367, "nilearn.maskers.MultiNiftiMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.niftilabelsmasker method)": [[368, "nilearn.maskers.NiftiLabelsMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.niftimapsmasker method)": [[369, "nilearn.maskers.NiftiMapsMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.niftimasker method)": [[370, "nilearn.maskers.NiftiMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.niftispheresmasker method)": [[371, "nilearn.maskers.NiftiSpheresMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.surfacelabelsmasker method)": [[372, "nilearn.maskers.SurfaceLabelsMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.surfacemapsmasker method)": [[373, "nilearn.maskers.SurfaceMapsMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.surfacemasker method)": [[374, "nilearn.maskers.SurfaceMasker.set_transform_request", false]], "set_transform_request() (nilearn.regions.parcellations method)": [[447, "nilearn.regions.Parcellations.set_transform_request", false]], "set_transform_request() (nilearn.regions.regionextractor method)": [[449, "nilearn.regions.RegionExtractor.set_transform_request", false]], "shape (nilearn.surface.polydata property)": [[465, "nilearn.surface.PolyData.shape", false]], "shape (nilearn.surface.surfaceimage property)": [[467, "nilearn.surface.SurfaceImage.shape", false]], "show() (in module nilearn.plotting)": [[440, "nilearn.plotting.show", false]], "show() (nilearn.plotting.displays.plotlysurfacefigure method)": [[398, "nilearn.plotting.displays.PlotlySurfaceFigure.show", false]], "signals_to_img_labels() (in module nilearn.regions)": [[455, "nilearn.regions.signals_to_img_labels", false]], "signals_to_img_maps() (in module nilearn.regions)": [[456, "nilearn.regions.signals_to_img_maps", false]], "simpleregressionresults (class in nilearn.glm)": [[313, "nilearn.glm.SimpleRegressionResults", false]], "smooth_img() (in module nilearn.image)": [[355, "nilearn.image.smooth_img", false]], "snr": [[179, "term-SNR", true]], "spacenet": [[179, "term-SpaceNet", true]], "spacenetclassifier (class in nilearn.decoding)": [[303, "nilearn.decoding.SpaceNetClassifier", false]], "spacenetregressor (class in nilearn.decoding)": [[304, "nilearn.decoding.SpaceNetRegressor", false]], "spm": [[179, "term-SPM", true]], "spm_dispersion_derivative() (in module nilearn.glm.first_level)": [[330, "nilearn.glm.first_level.spm_dispersion_derivative", false]], "spm_hrf() (in module nilearn.glm.first_level)": [[331, "nilearn.glm.first_level.spm_hrf", false]], "spm_time_derivative() (in module nilearn.glm.first_level)": [[332, "nilearn.glm.first_level.spm_time_derivative", false]], "sse() (nilearn.glm.regressionresults method)": [[312, "nilearn.glm.RegressionResults.SSE", false]], "stat() (nilearn.glm.contrast method)": [[308, "nilearn.glm.Contrast.stat", false]], "supervised learning": [[179, "term-supervised-learning", true]], "supported_losses (nilearn.decoding.spacenetclassifier attribute)": [[303, "nilearn.decoding.SpaceNetClassifier.SUPPORTED_LOSSES", false]], "supported_losses (nilearn.decoding.spacenetregressor attribute)": [[304, "nilearn.decoding.SpaceNetRegressor.SUPPORTED_LOSSES", false]], "supported_penalties (nilearn.decoding.spacenetclassifier attribute)": [[303, "nilearn.decoding.SpaceNetClassifier.SUPPORTED_PENALTIES", false]], "supported_penalties (nilearn.decoding.spacenetregressor attribute)": [[304, "nilearn.decoding.SpaceNetRegressor.SUPPORTED_PENALTIES", false]], "surfaceimage (class in nilearn.surface)": [[467, "nilearn.surface.SurfaceImage", false]], "surfacelabelsmasker (class in nilearn.maskers)": [[372, "nilearn.maskers.SurfaceLabelsMasker", false]], "surfacemapsmasker (class in nilearn.maskers)": [[373, "nilearn.maskers.SurfaceMapsMasker", false]], "surfacemasker (class in nilearn.maskers)": [[374, "nilearn.maskers.SurfaceMasker", false]], "surfacemesh (class in nilearn.surface)": [[468, "nilearn.surface.SurfaceMesh", false]], "svm": [[179, "term-SVM", true]], "swap_img_hemispheres() (in module nilearn.image)": [[356, "nilearn.image.swap_img_hemispheres", false]], "sym_matrix_to_vec() (in module nilearn.connectome)": [[238, "nilearn.connectome.sym_matrix_to_vec", false]], "t() (nilearn.glm.likelihoodmodelresults method)": [[310, "nilearn.glm.LikelihoodModelResults.t", false]], "t() (nilearn.glm.regressionresults method)": [[312, "nilearn.glm.RegressionResults.t", false]], "t() (nilearn.glm.simpleregressionresults method)": [[313, "nilearn.glm.SimpleRegressionResults.t", false]], "tcontrast() (nilearn.glm.likelihoodmodelresults method)": [[310, "nilearn.glm.LikelihoodModelResults.Tcontrast", false]], "tcontrast() (nilearn.glm.regressionresults method)": [[312, "nilearn.glm.RegressionResults.Tcontrast", false]], "tcontrast() (nilearn.glm.simpleregressionresults method)": [[313, "nilearn.glm.SimpleRegressionResults.Tcontrast", false]], "tcontrastresults (class in nilearn.glm)": [[314, "nilearn.glm.TContrastResults", false]], "tfce": [[179, "term-TFCE", true]], "threshold_img() (in module nilearn.image)": [[357, "nilearn.image.threshold_img", false]], "threshold_stats_img() (in module nilearn.glm)": [[336, "nilearn.glm.threshold_stats_img", false]], "tiledslicer (class in nilearn.plotting.displays)": [[400, "nilearn.plotting.displays.TiledSlicer", false]], "title() (nilearn.plotting.displays.baseslicer method)": [[386, "nilearn.plotting.displays.BaseSlicer.title", false]], "title() (nilearn.plotting.displays.lprojector method)": [[389, "nilearn.plotting.displays.LProjector.title", false]], "title() (nilearn.plotting.displays.lrprojector method)": [[390, "nilearn.plotting.displays.LRProjector.title", false]], "title() (nilearn.plotting.displays.lyrprojector method)": [[391, "nilearn.plotting.displays.LYRProjector.title", false]], "title() (nilearn.plotting.displays.lyrzprojector method)": [[392, "nilearn.plotting.displays.LYRZProjector.title", false]], "title() (nilearn.plotting.displays.lzrprojector method)": [[393, "nilearn.plotting.displays.LZRProjector.title", false]], "title() (nilearn.plotting.displays.lzryprojector method)": [[394, "nilearn.plotting.displays.LZRYProjector.title", false]], "title() (nilearn.plotting.displays.mosaicslicer method)": [[395, "nilearn.plotting.displays.MosaicSlicer.title", false]], "title() (nilearn.plotting.displays.orthoprojector method)": [[396, "nilearn.plotting.displays.OrthoProjector.title", false]], "title() (nilearn.plotting.displays.orthoslicer method)": [[397, "nilearn.plotting.displays.OrthoSlicer.title", false]], "title() (nilearn.plotting.displays.rprojector method)": [[399, "nilearn.plotting.displays.RProjector.title", false]], "title() (nilearn.plotting.displays.tiledslicer method)": [[400, "nilearn.plotting.displays.TiledSlicer.title", false]], "title() (nilearn.plotting.displays.xprojector method)": [[401, "nilearn.plotting.displays.XProjector.title", false]], "title() (nilearn.plotting.displays.xslicer method)": [[402, "nilearn.plotting.displays.XSlicer.title", false]], "title() (nilearn.plotting.displays.xzprojector method)": [[403, "nilearn.plotting.displays.XZProjector.title", false]], "title() (nilearn.plotting.displays.xzslicer method)": [[404, "nilearn.plotting.displays.XZSlicer.title", false]], "title() (nilearn.plotting.displays.yprojector method)": [[405, "nilearn.plotting.displays.YProjector.title", false]], "title() (nilearn.plotting.displays.yslicer method)": [[406, "nilearn.plotting.displays.YSlicer.title", false]], "title() (nilearn.plotting.displays.yxprojector method)": [[407, "nilearn.plotting.displays.YXProjector.title", false]], "title() (nilearn.plotting.displays.yxslicer method)": [[408, "nilearn.plotting.displays.YXSlicer.title", false]], "title() (nilearn.plotting.displays.yzprojector method)": [[409, "nilearn.plotting.displays.YZProjector.title", false]], "title() (nilearn.plotting.displays.yzslicer method)": [[410, "nilearn.plotting.displays.YZSlicer.title", false]], "title() (nilearn.plotting.displays.zprojector method)": [[411, "nilearn.plotting.displays.ZProjector.title", false]], "title() (nilearn.plotting.displays.zslicer method)": [[412, "nilearn.plotting.displays.ZSlicer.title", false]], "to_filename() (nilearn.surface.polydata method)": [[465, "nilearn.surface.PolyData.to_filename", false]], "to_filename() (nilearn.surface.polymesh method)": [[466, "nilearn.surface.PolyMesh.to_filename", false]], "to_gifti() (nilearn.surface.filemesh method)": [[463, "nilearn.surface.FileMesh.to_gifti", false]], "to_gifti() (nilearn.surface.inmemorymesh method)": [[464, "nilearn.surface.InMemoryMesh.to_gifti", false]], "to_gifti() (nilearn.surface.surfacemesh method)": [[468, "nilearn.surface.SurfaceMesh.to_gifti", false]], "tr": [[179, "term-TR", true]], "transform() (nilearn.connectome.connectivitymeasure method)": [[232, "nilearn.connectome.ConnectivityMeasure.transform", false]], "transform() (nilearn.decoding.searchlight method)": [[302, "nilearn.decoding.SearchLight.transform", false]], "transform() (nilearn.decomposition.canica method)": [[305, "nilearn.decomposition.CanICA.transform", false]], "transform() (nilearn.decomposition.dictlearning method)": [[306, "nilearn.decomposition.DictLearning.transform", false]], "transform() (nilearn.maskers.basemasker method)": [[364, "nilearn.maskers.BaseMasker.transform", false]], "transform() (nilearn.maskers.multiniftilabelsmasker method)": [[365, "nilearn.maskers.MultiNiftiLabelsMasker.transform", false]], "transform() (nilearn.maskers.multiniftimapsmasker method)": [[366, "nilearn.maskers.MultiNiftiMapsMasker.transform", false]], "transform() (nilearn.maskers.multiniftimasker method)": [[367, "nilearn.maskers.MultiNiftiMasker.transform", false]], "transform() (nilearn.maskers.niftilabelsmasker method)": [[368, "nilearn.maskers.NiftiLabelsMasker.transform", false]], "transform() (nilearn.maskers.niftimapsmasker method)": [[369, "nilearn.maskers.NiftiMapsMasker.transform", false]], "transform() (nilearn.maskers.niftimasker method)": [[370, "nilearn.maskers.NiftiMasker.transform", false]], "transform() (nilearn.maskers.niftispheresmasker method)": [[371, "nilearn.maskers.NiftiSpheresMasker.transform", false]], "transform() (nilearn.maskers.surfacelabelsmasker method)": [[372, "nilearn.maskers.SurfaceLabelsMasker.transform", false]], "transform() (nilearn.maskers.surfacemapsmasker method)": [[373, "nilearn.maskers.SurfaceMapsMasker.transform", false]], "transform() (nilearn.maskers.surfacemasker method)": [[374, "nilearn.maskers.SurfaceMasker.transform", false]], "transform() (nilearn.regions.hierarchicalkmeans method)": [[446, "nilearn.regions.HierarchicalKMeans.transform", false]], "transform() (nilearn.regions.parcellations method)": [[447, "nilearn.regions.Parcellations.transform", false]], "transform() (nilearn.regions.regionextractor method)": [[449, "nilearn.regions.RegionExtractor.transform", false]], "transform() (nilearn.regions.rena method)": [[448, "nilearn.regions.ReNA.transform", false]], "transform_imgs() (nilearn.maskers.multiniftilabelsmasker method)": [[365, "nilearn.maskers.MultiNiftiLabelsMasker.transform_imgs", false]], "transform_imgs() (nilearn.maskers.multiniftimapsmasker method)": [[366, "nilearn.maskers.MultiNiftiMapsMasker.transform_imgs", false]], "transform_imgs() (nilearn.maskers.multiniftimasker method)": [[367, "nilearn.maskers.MultiNiftiMasker.transform_imgs", false]], "transform_single_imgs() (nilearn.maskers.basemasker method)": [[364, "nilearn.maskers.BaseMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.multiniftilabelsmasker method)": [[365, "nilearn.maskers.MultiNiftiLabelsMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.multiniftimapsmasker method)": [[366, "nilearn.maskers.MultiNiftiMapsMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.multiniftimasker method)": [[367, "nilearn.maskers.MultiNiftiMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.niftilabelsmasker method)": [[368, "nilearn.maskers.NiftiLabelsMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.niftimapsmasker method)": [[369, "nilearn.maskers.NiftiMapsMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.niftimasker method)": [[370, "nilearn.maskers.NiftiMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.niftispheresmasker method)": [[371, "nilearn.maskers.NiftiSpheresMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.regions.regionextractor method)": [[449, "nilearn.regions.RegionExtractor.transform_single_imgs", false]], "transform_to_2d() (nilearn.plotting.displays.baseaxes method)": [[385, "nilearn.plotting.displays.BaseAxes.transform_to_2d", false]], "transform_to_2d() (nilearn.plotting.displays.cutaxes method)": [[387, "nilearn.plotting.displays.CutAxes.transform_to_2d", false]], "transform_to_2d() (nilearn.plotting.displays.glassbrainaxes method)": [[388, "nilearn.plotting.displays.GlassBrainAxes.transform_to_2d", false]], "unmask() (in module nilearn.masking)": [[383, "nilearn.masking.unmask", false]], "unsupervised learning": [[179, "term-Unsupervised-learning", true]], "valid_methods (nilearn.regions.parcellations attribute)": [[447, "nilearn.regions.Parcellations.VALID_METHODS", false]], "vbm": [[179, "term-VBM", true]], "vcov() (nilearn.glm.likelihoodmodelresults method)": [[310, "nilearn.glm.LikelihoodModelResults.vcov", false]], "vcov() (nilearn.glm.regressionresults method)": [[312, "nilearn.glm.RegressionResults.vcov", false]], "vcov() (nilearn.glm.simpleregressionresults method)": [[313, "nilearn.glm.SimpleRegressionResults.vcov", false]], "vec_to_sym_matrix() (in module nilearn.connectome)": [[239, "nilearn.connectome.vec_to_sym_matrix", false]], "vertex": [[179, "term-vertex", true]], "view_connectome() (in module nilearn.plotting)": [[441, "nilearn.plotting.view_connectome", false]], "view_img() (in module nilearn.plotting)": [[442, "nilearn.plotting.view_img", false]], "view_img_on_surf() (in module nilearn.plotting)": [[443, "nilearn.plotting.view_img_on_surf", false]], "view_markers() (in module nilearn.plotting)": [[444, "nilearn.plotting.view_markers", false]], "view_surf() (in module nilearn.plotting)": [[445, "nilearn.plotting.view_surf", false]], "vol_to_surf() (in module nilearn.surface)": [[471, "nilearn.surface.vol_to_surf", false]], "voxel": [[179, "term-voxel", true]], "ward clustering": [[179, "term-Ward-clustering", true]], "whiten() (nilearn.glm.armodel method)": [[307, "nilearn.glm.ARModel.whiten", false]], "whiten() (nilearn.glm.olsmodel method)": [[311, "nilearn.glm.OLSModel.whiten", false]], "xprojector (class in nilearn.plotting.displays)": [[401, "nilearn.plotting.displays.XProjector", false]], "xslicer (class in nilearn.plotting.displays)": [[402, "nilearn.plotting.displays.XSlicer", false]], "xzprojector (class in nilearn.plotting.displays)": [[403, "nilearn.plotting.displays.XZProjector", false]], "xzslicer (class in nilearn.plotting.displays)": [[404, "nilearn.plotting.displays.XZSlicer", false]], "yprojector (class in nilearn.plotting.displays)": [[405, "nilearn.plotting.displays.YProjector", false]], "yslicer (class in nilearn.plotting.displays)": [[406, "nilearn.plotting.displays.YSlicer", false]], "yxprojector (class in nilearn.plotting.displays)": [[407, "nilearn.plotting.displays.YXProjector", false]], "yxslicer (class in nilearn.plotting.displays)": [[408, "nilearn.plotting.displays.YXSlicer", false]], "yzprojector (class in nilearn.plotting.displays)": [[409, "nilearn.plotting.displays.YZProjector", false]], "yzslicer (class in nilearn.plotting.displays)": [[410, "nilearn.plotting.displays.YZSlicer", false]], "z_score() (nilearn.glm.contrast method)": [[308, "nilearn.glm.Contrast.z_score", false]], "zprojector (class in nilearn.plotting.displays)": [[411, "nilearn.plotting.displays.ZProjector", false]], "zslicer (class in nilearn.plotting.displays)": [[412, "nilearn.plotting.displays.ZSlicer", false]]}, "objects": {"nilearn": [[187, 0, 0, "-", "connectome"], [188, 0, 0, "-", "datasets"], [189, 0, 0, "-", "decoding"], [190, 0, 0, "-", "decomposition"], [474, 0, 0, "-", "glm"], [475, 0, 0, "-", "image"], [477, 0, 0, "-", "interfaces"], [478, 0, 0, "-", "maskers"], [479, 0, 0, "-", "masking"], [480, 0, 0, "-", "mass_univariate"], [481, 0, 0, "-", "plotting"], [482, 0, 0, "-", "regions"], [483, 0, 0, "-", "reporting"], [484, 0, 0, "-", "signal"], [485, 0, 0, "-", "surface"]], "nilearn.connectome": [[232, 1, 1, "", "ConnectivityMeasure"], [233, 1, 1, "", "GroupSparseCovariance"], [234, 1, 1, "", "GroupSparseCovarianceCV"], [235, 3, 1, "", "cov_to_corr"], [236, 3, 1, "", "group_sparse_covariance"], [237, 3, 1, "", "prec_to_partial"], [238, 3, 1, "", "sym_matrix_to_vec"], [239, 3, 1, "", "vec_to_sym_matrix"]], "nilearn.connectome.ConnectivityMeasure": [[232, 2, 1, "", "__init__"], [232, 2, 1, "", "fit"], [232, 2, 1, "", "fit_transform"], [232, 2, 1, "", "get_metadata_routing"], [232, 2, 1, "", "get_params"], [232, 2, 1, "", "inverse_transform"], [232, 2, 1, "", "set_inverse_transform_request"], [232, 2, 1, "", "set_output"], [232, 2, 1, "", "set_params"], [232, 2, 1, "", "set_transform_request"], [232, 2, 1, "", "transform"]], "nilearn.connectome.GroupSparseCovariance": [[233, 2, 1, "", "__init__"], [233, 2, 1, "", "fit"], [233, 2, 1, "", "get_metadata_routing"], [233, 2, 1, "", "get_params"], [233, 2, 1, "", "set_fit_request"], [233, 2, 1, "", "set_params"]], "nilearn.connectome.GroupSparseCovarianceCV": [[234, 2, 1, "", "__init__"], [234, 2, 1, "", "fit"], [234, 2, 1, "", "get_metadata_routing"], [234, 2, 1, "", "get_params"], [234, 2, 1, "", "set_fit_request"], [234, 2, 1, "", "set_params"]], "nilearn.datasets": [[240, 3, 1, "", "fetch_abide_pcp"], [241, 3, 1, "", "fetch_adhd"], [242, 3, 1, "", "fetch_atlas_aal"], [243, 3, 1, "", "fetch_atlas_allen_2011"], [244, 3, 1, "", "fetch_atlas_basc_multiscale_2015"], [245, 3, 1, "", "fetch_atlas_craddock_2012"], [246, 3, 1, "", "fetch_atlas_destrieux_2009"], [247, 3, 1, "", "fetch_atlas_difumo"], [248, 3, 1, "", "fetch_atlas_harvard_oxford"], [249, 3, 1, "", "fetch_atlas_juelich"], [250, 3, 1, "", "fetch_atlas_msdl"], [251, 3, 1, "", "fetch_atlas_pauli_2017"], [252, 3, 1, "", "fetch_atlas_schaefer_2018"], [253, 3, 1, "", "fetch_atlas_smith_2009"], [254, 3, 1, "", "fetch_atlas_surf_destrieux"], [255, 3, 1, "", "fetch_atlas_talairach"], [256, 3, 1, "", "fetch_atlas_yeo_2011"], [257, 3, 1, "", "fetch_bids_langloc_dataset"], [258, 3, 1, "", "fetch_coords_dosenbach_2010"], [259, 3, 1, "", "fetch_coords_power_2011"], [260, 3, 1, "", "fetch_coords_seitzman_2018"], [261, 3, 1, "", "fetch_development_fmri"], [262, 3, 1, "", "fetch_ds000030_urls"], [263, 3, 1, "", "fetch_fiac_first_level"], [264, 3, 1, "", "fetch_haxby"], [265, 3, 1, "", "fetch_icbm152_2009"], [266, 3, 1, "", "fetch_icbm152_brain_gm_mask"], [267, 3, 1, "", "fetch_language_localizer_demo_dataset"], [268, 3, 1, "", "fetch_localizer_button_task"], [269, 3, 1, "", "fetch_localizer_calculation_task"], [270, 3, 1, "", "fetch_localizer_contrasts"], [271, 3, 1, "", "fetch_localizer_first_level"], [272, 3, 1, "", "fetch_megatrawls_netmats"], [273, 3, 1, "", "fetch_mixed_gambles"], [274, 3, 1, "", "fetch_miyawaki2008"], [275, 3, 1, "", "fetch_neurovault"], [276, 3, 1, "", "fetch_neurovault_auditory_computation_task"], [277, 3, 1, "", "fetch_neurovault_ids"], [278, 3, 1, "", "fetch_neurovault_motor_task"], [279, 3, 1, "", "fetch_oasis_vbm"], [280, 3, 1, "", "fetch_openneuro_dataset"], [281, 3, 1, "", "fetch_spm_auditory"], [282, 3, 1, "", "fetch_spm_multimodal_fmri"], [283, 3, 1, "", "fetch_surf_fsaverage"], [284, 3, 1, "", "fetch_surf_nki_enhanced"], [285, 3, 1, "", "get_data_dirs"], [286, 3, 1, "", "load_fsaverage"], [287, 3, 1, "", "load_fsaverage_data"], [288, 3, 1, "", "load_mni152_brain_mask"], [289, 3, 1, "", "load_mni152_gm_mask"], [290, 3, 1, "", "load_mni152_gm_template"], [291, 3, 1, "", "load_mni152_template"], [292, 3, 1, "", "load_mni152_wm_mask"], [293, 3, 1, "", "load_mni152_wm_template"], [294, 3, 1, "", "load_nki"], [295, 3, 1, "", "load_sample_motor_activation_image"], [296, 3, 1, "", "patch_openneuro_dataset"], [297, 3, 1, "", "select_from_index"]], "nilearn.decoding": [[298, 1, 1, "", "Decoder"], [299, 1, 1, "", "DecoderRegressor"], [300, 1, 1, "", "FREMClassifier"], [301, 1, 1, "", "FREMRegressor"], [302, 1, 1, "", "SearchLight"], [303, 1, 1, "", "SpaceNetClassifier"], [304, 1, 1, "", "SpaceNetRegressor"]], "nilearn.decoding.Decoder": [[298, 2, 1, "", "__init__"], [298, 2, 1, "", "decision_function"], [298, 2, 1, "", "fit"], [298, 2, 1, "", "get_metadata_routing"], [298, 2, 1, "", "get_params"], [298, 2, 1, "", "predict"], [298, 2, 1, "", "score"], [298, 2, 1, "", "set_fit_request"], [298, 2, 1, "", "set_params"], [298, 2, 1, "", "set_score_request"]], "nilearn.decoding.DecoderRegressor": [[299, 2, 1, "", "__init__"], [299, 2, 1, "", "decision_function"], [299, 2, 1, "", "fit"], [299, 2, 1, "", "get_metadata_routing"], [299, 2, 1, "", "get_params"], [299, 2, 1, "", "predict"], [299, 2, 1, "", "score"], [299, 2, 1, "", "set_fit_request"], [299, 2, 1, "", "set_params"], [299, 2, 1, "", "set_score_request"]], "nilearn.decoding.FREMClassifier": [[300, 2, 1, "", "__init__"], [300, 2, 1, "", "decision_function"], [300, 2, 1, "", "fit"], [300, 2, 1, "", "get_metadata_routing"], [300, 2, 1, "", "get_params"], [300, 2, 1, "", "predict"], [300, 2, 1, "", "score"], [300, 2, 1, "", "set_fit_request"], [300, 2, 1, "", "set_params"]], "nilearn.decoding.FREMRegressor": [[301, 2, 1, "", "__init__"], [301, 2, 1, "", "decision_function"], [301, 2, 1, "", "fit"], [301, 2, 1, "", "get_metadata_routing"], [301, 2, 1, "", "get_params"], [301, 2, 1, "", "predict"], [301, 2, 1, "", "score"], [301, 2, 1, "", "set_fit_request"], [301, 2, 1, "", "set_params"]], "nilearn.decoding.SearchLight": [[302, 2, 1, "", "__init__"], [302, 2, 1, "", "fit"], [302, 2, 1, "", "fit_transform"], [302, 2, 1, "", "get_metadata_routing"], [302, 2, 1, "", "get_params"], [302, 4, 1, "", "scores_img_"], [302, 2, 1, "", "set_fit_request"], [302, 2, 1, "", "set_output"], [302, 2, 1, "", "set_params"], [302, 2, 1, "", "set_transform_request"], [302, 2, 1, "", "transform"]], "nilearn.decoding.SpaceNetClassifier": [[303, 5, 1, "", "SUPPORTED_LOSSES"], [303, 5, 1, "", "SUPPORTED_PENALTIES"], [303, 2, 1, "", "__init__"], [303, 2, 1, "", "check_params"], [303, 2, 1, "", "decision_function"], [303, 2, 1, "", "fit"], [303, 2, 1, "", "get_metadata_routing"], [303, 2, 1, "", "get_params"], [303, 2, 1, "", "predict"], [303, 2, 1, "", "score"], [303, 2, 1, "", "set_fit_request"], [303, 2, 1, "", "set_params"], [303, 2, 1, "", "set_score_request"]], "nilearn.decoding.SpaceNetRegressor": [[304, 5, 1, "", "SUPPORTED_LOSSES"], [304, 5, 1, "", "SUPPORTED_PENALTIES"], [304, 2, 1, "", "__init__"], [304, 2, 1, "", "check_params"], [304, 2, 1, "", "decision_function"], [304, 2, 1, "", "fit"], [304, 2, 1, "", "get_metadata_routing"], [304, 2, 1, "", "get_params"], [304, 2, 1, "", "predict"], [304, 2, 1, "", "score"], [304, 2, 1, "", "set_fit_request"], [304, 2, 1, "", "set_params"], [304, 2, 1, "", "set_score_request"]], "nilearn.decomposition": [[305, 1, 1, "", "CanICA"], [306, 1, 1, "", "DictLearning"]], "nilearn.decomposition.CanICA": [[305, 2, 1, "", "__init__"], [305, 2, 1, "", "fit"], [305, 2, 1, "", "fit_transform"], [305, 2, 1, "", "get_metadata_routing"], [305, 2, 1, "", "get_params"], [305, 2, 1, "", "inverse_transform"], [305, 4, 1, "", "nifti_maps_masker_"], [305, 2, 1, "", "score"], [305, 2, 1, "", "set_fit_request"], [305, 2, 1, "", "set_inverse_transform_request"], [305, 2, 1, "", "set_output"], [305, 2, 1, "", "set_params"], [305, 2, 1, "", "set_score_request"], [305, 2, 1, "", "set_transform_request"], [305, 2, 1, "", "transform"]], "nilearn.decomposition.DictLearning": [[306, 2, 1, "", "__init__"], [306, 2, 1, "", "fit"], [306, 2, 1, "", "fit_transform"], [306, 2, 1, "", "get_metadata_routing"], [306, 2, 1, "", "get_params"], [306, 2, 1, "", "inverse_transform"], [306, 4, 1, "", "nifti_maps_masker_"], [306, 2, 1, "", "score"], [306, 2, 1, "", "set_fit_request"], [306, 2, 1, "", "set_inverse_transform_request"], [306, 2, 1, "", "set_output"], [306, 2, 1, "", "set_params"], [306, 2, 1, "", "set_score_request"], [306, 2, 1, "", "set_transform_request"], [306, 2, 1, "", "transform"]], "nilearn.glm": [[307, 1, 1, "", "ARModel"], [308, 1, 1, "", "Contrast"], [309, 1, 1, "", "FContrastResults"], [310, 1, 1, "", "LikelihoodModelResults"], [311, 1, 1, "", "OLSModel"], [312, 1, 1, "", "RegressionResults"], [313, 1, 1, "", "SimpleRegressionResults"], [314, 1, 1, "", "TContrastResults"], [315, 3, 1, "", "cluster_level_inference"], [316, 3, 1, "", "compute_contrast"], [317, 3, 1, "", "compute_fixed_effects"], [318, 3, 1, "", "expression_to_contrast_vector"], [319, 3, 1, "", "fdr_threshold"], [474, 0, 0, "-", "first_level"], [474, 0, 0, "-", "second_level"], [336, 3, 1, "", "threshold_stats_img"]], "nilearn.glm.ARModel": [[307, 2, 1, "", "__init__"], [307, 2, 1, "", "fit"], [307, 2, 1, "", "initialize"], [307, 2, 1, "", "logL"], [307, 2, 1, "", "whiten"]], "nilearn.glm.Contrast": [[308, 2, 1, "", "__init__"], [308, 4, 1, "", "contrast_type"], [308, 2, 1, "", "effect_size"], [308, 2, 1, "", "effect_variance"], [308, 2, 1, "", "one_minus_pvalue"], [308, 2, 1, "", "p_value"], [308, 2, 1, "", "stat"], [308, 2, 1, "", "z_score"]], "nilearn.glm.FContrastResults": [[309, 2, 1, "", "__init__"]], "nilearn.glm.LikelihoodModelResults": [[310, 2, 1, "", "Fcontrast"], [310, 2, 1, "", "Tcontrast"], [310, 2, 1, "", "__init__"], [310, 2, 1, "", "conf_int"], [310, 2, 1, "", "logL"], [310, 2, 1, "", "t"], [310, 2, 1, "", "vcov"]], "nilearn.glm.OLSModel": [[311, 2, 1, "", "__init__"], [311, 2, 1, "", "fit"], [311, 2, 1, "", "initialize"], [311, 2, 1, "", "logL"], [311, 2, 1, "", "whiten"]], "nilearn.glm.RegressionResults": [[312, 2, 1, "", "Fcontrast"], [312, 2, 1, "", "MSE"], [312, 2, 1, "", "SSE"], [312, 2, 1, "", "Tcontrast"], [312, 2, 1, "", "__init__"], [312, 2, 1, "", "conf_int"], [312, 2, 1, "", "logL"], [312, 2, 1, "", "normalized_residuals"], [312, 2, 1, "", "predicted"], [312, 2, 1, "", "r_square"], [312, 2, 1, "", "residuals"], [312, 2, 1, "", "t"], [312, 2, 1, "", "vcov"]], "nilearn.glm.SimpleRegressionResults": [[313, 2, 1, "", "Fcontrast"], [313, 2, 1, "", "Tcontrast"], [313, 2, 1, "", "__init__"], [313, 2, 1, "", "conf_int"], [313, 2, 1, "", "logL"], [313, 2, 1, "", "normalized_residuals"], [313, 2, 1, "", "predicted"], [313, 2, 1, "", "residuals"], [313, 2, 1, "", "t"], [313, 2, 1, "", "vcov"]], "nilearn.glm.TContrastResults": [[314, 2, 1, "", "__init__"]], "nilearn.glm.first_level": [[320, 1, 1, "", "FirstLevelModel"], [321, 3, 1, "", "check_design_matrix"], [322, 3, 1, "", "compute_regressor"], [323, 3, 1, "", "first_level_from_bids"], [324, 3, 1, "", "glover_dispersion_derivative"], [325, 3, 1, "", "glover_hrf"], [326, 3, 1, "", "glover_time_derivative"], [327, 3, 1, "", "make_first_level_design_matrix"], [328, 3, 1, "", "mean_scaling"], [329, 3, 1, "", "run_glm"], [330, 3, 1, "", "spm_dispersion_derivative"], [331, 3, 1, "", "spm_hrf"], [332, 3, 1, "", "spm_time_derivative"]], "nilearn.glm.first_level.FirstLevelModel": [[320, 2, 1, "", "__init__"], [320, 2, 1, "", "compute_contrast"], [320, 2, 1, "", "fit"], [320, 2, 1, "", "fit_transform"], [320, 2, 1, "", "generate_report"], [320, 2, 1, "", "get_metadata_routing"], [320, 2, 1, "", "get_params"], [320, 2, 1, "", "predicted"], [320, 2, 1, "", "r_square"], [320, 2, 1, "", "residuals"], [320, 2, 1, "", "set_fit_request"], [320, 2, 1, "", "set_output"], [320, 2, 1, "", "set_params"]], "nilearn.glm.second_level": [[333, 1, 1, "", "SecondLevelModel"], [334, 3, 1, "", "make_second_level_design_matrix"], [335, 3, 1, "", "non_parametric_inference"]], "nilearn.glm.second_level.SecondLevelModel": [[333, 2, 1, "", "__init__"], [333, 2, 1, "", "compute_contrast"], [333, 2, 1, "", "fit"], [333, 2, 1, "", "fit_transform"], [333, 2, 1, "", "generate_report"], [333, 2, 1, "", "get_metadata_routing"], [333, 2, 1, "", "get_params"], [333, 2, 1, "", "predicted"], [333, 2, 1, "", "r_square"], [333, 2, 1, "", "residuals"], [333, 2, 1, "", "set_fit_request"], [333, 2, 1, "", "set_output"], [333, 2, 1, "", "set_params"]], "nilearn.image": [[337, 3, 1, "", "binarize_img"], [338, 3, 1, "", "clean_img"], [339, 3, 1, "", "concat_imgs"], [340, 3, 1, "", "coord_transform"], [341, 3, 1, "", "copy_img"], [342, 3, 1, "", "crop_img"], [343, 3, 1, "", "get_data"], [344, 3, 1, "", "high_variance_confounds"], [345, 3, 1, "", "index_img"], [346, 3, 1, "", "iter_img"], [347, 3, 1, "", "largest_connected_component_img"], [348, 3, 1, "", "load_img"], [349, 3, 1, "", "math_img"], [350, 3, 1, "", "mean_img"], [351, 3, 1, "", "new_img_like"], [352, 3, 1, "", "reorder_img"], [353, 3, 1, "", "resample_img"], [354, 3, 1, "", "resample_to_img"], [355, 3, 1, "", "smooth_img"], [356, 3, 1, "", "swap_img_hemispheres"], [357, 3, 1, "", "threshold_img"]], "nilearn.interfaces": [[477, 0, 0, "-", "bids"], [477, 0, 0, "-", "fmriprep"], [477, 0, 0, "-", "fsl"]], "nilearn.interfaces.bids": [[358, 3, 1, "", "get_bids_files"], [359, 3, 1, "", "parse_bids_filename"], [360, 3, 1, "", "save_glm_to_bids"]], "nilearn.interfaces.fmriprep": [[361, 3, 1, "", "load_confounds"], [362, 3, 1, "", "load_confounds_strategy"]], "nilearn.interfaces.fsl": [[363, 3, 1, "", "get_design_from_fslmat"]], "nilearn.maskers": [[364, 1, 1, "", "BaseMasker"], [365, 1, 1, "", "MultiNiftiLabelsMasker"], [366, 1, 1, "", "MultiNiftiMapsMasker"], [367, 1, 1, "", "MultiNiftiMasker"], [368, 1, 1, "", "NiftiLabelsMasker"], [369, 1, 1, "", "NiftiMapsMasker"], [370, 1, 1, "", "NiftiMasker"], [371, 1, 1, "", "NiftiSpheresMasker"], [372, 1, 1, "", "SurfaceLabelsMasker"], [373, 1, 1, "", "SurfaceMapsMasker"], [374, 1, 1, "", "SurfaceMasker"]], "nilearn.maskers.BaseMasker": [[364, 2, 1, "", "__init__"], [364, 2, 1, "", "fit"], [364, 2, 1, "", "fit_transform"], [364, 2, 1, "", "get_metadata_routing"], [364, 2, 1, "", "get_params"], [364, 2, 1, "", "inverse_transform"], [364, 2, 1, "", "set_fit_request"], [364, 2, 1, "", "set_output"], [364, 2, 1, "", "set_params"], [364, 2, 1, "", "set_transform_request"], [364, 2, 1, "", "transform"], [364, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiLabelsMasker": [[365, 2, 1, "", "__init__"], [365, 2, 1, "", "fit"], [365, 2, 1, "", "fit_transform"], [365, 2, 1, "", "generate_report"], [365, 2, 1, "", "get_metadata_routing"], [365, 2, 1, "", "get_params"], [365, 2, 1, "", "inverse_transform"], [365, 2, 1, "", "set_fit_request"], [365, 2, 1, "", "set_inverse_transform_request"], [365, 2, 1, "", "set_output"], [365, 2, 1, "", "set_params"], [365, 2, 1, "", "set_transform_request"], [365, 2, 1, "", "transform"], [365, 2, 1, "", "transform_imgs"], [365, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiMapsMasker": [[366, 2, 1, "", "__init__"], [366, 2, 1, "", "fit"], [366, 2, 1, "", "fit_transform"], [366, 2, 1, "", "generate_report"], [366, 2, 1, "", "get_metadata_routing"], [366, 2, 1, "", "get_params"], [366, 2, 1, "", "inverse_transform"], [366, 2, 1, "", "set_fit_request"], [366, 2, 1, "", "set_inverse_transform_request"], [366, 2, 1, "", "set_output"], [366, 2, 1, "", "set_params"], [366, 2, 1, "", "set_transform_request"], [366, 2, 1, "", "transform"], [366, 2, 1, "", "transform_imgs"], [366, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiMasker": [[367, 2, 1, "", "__init__"], [367, 2, 1, "", "fit"], [367, 2, 1, "", "fit_transform"], [367, 2, 1, "", "generate_report"], [367, 2, 1, "", "get_metadata_routing"], [367, 2, 1, "", "get_params"], [367, 2, 1, "", "inverse_transform"], [367, 2, 1, "", "set_fit_request"], [367, 2, 1, "", "set_output"], [367, 2, 1, "", "set_params"], [367, 2, 1, "", "set_transform_request"], [367, 2, 1, "", "transform"], [367, 2, 1, "", "transform_imgs"], [367, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiLabelsMasker": [[368, 2, 1, "", "__init__"], [368, 2, 1, "", "fit"], [368, 2, 1, "", "fit_transform"], [368, 2, 1, "", "generate_report"], [368, 2, 1, "", "get_metadata_routing"], [368, 2, 1, "", "get_params"], [368, 2, 1, "", "inverse_transform"], [368, 2, 1, "", "set_fit_request"], [368, 2, 1, "", "set_inverse_transform_request"], [368, 2, 1, "", "set_output"], [368, 2, 1, "", "set_params"], [368, 2, 1, "", "set_transform_request"], [368, 2, 1, "", "transform"], [368, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiMapsMasker": [[369, 2, 1, "", "__init__"], [369, 2, 1, "", "fit"], [369, 2, 1, "", "fit_transform"], [369, 2, 1, "", "generate_report"], [369, 2, 1, "", "get_metadata_routing"], [369, 2, 1, "", "get_params"], [369, 2, 1, "", "inverse_transform"], [369, 2, 1, "", "set_fit_request"], [369, 2, 1, "", "set_inverse_transform_request"], [369, 2, 1, "", "set_output"], [369, 2, 1, "", "set_params"], [369, 2, 1, "", "set_transform_request"], [369, 2, 1, "", "transform"], [369, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiMasker": [[370, 2, 1, "", "__init__"], [370, 2, 1, "", "fit"], [370, 2, 1, "", "fit_transform"], [370, 2, 1, "", "generate_report"], [370, 2, 1, "", "get_metadata_routing"], [370, 2, 1, "", "get_params"], [370, 2, 1, "", "inverse_transform"], [370, 2, 1, "", "set_fit_request"], [370, 2, 1, "", "set_output"], [370, 2, 1, "", "set_params"], [370, 2, 1, "", "set_transform_request"], [370, 2, 1, "", "transform"], [370, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiSpheresMasker": [[371, 2, 1, "", "__init__"], [371, 2, 1, "", "fit"], [371, 2, 1, "", "fit_transform"], [371, 2, 1, "", "generate_report"], [371, 2, 1, "", "get_metadata_routing"], [371, 2, 1, "", "get_params"], [371, 2, 1, "", "inverse_transform"], [371, 2, 1, "", "set_fit_request"], [371, 2, 1, "", "set_inverse_transform_request"], [371, 2, 1, "", "set_output"], [371, 2, 1, "", "set_params"], [371, 2, 1, "", "set_transform_request"], [371, 2, 1, "", "transform"], [371, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.SurfaceLabelsMasker": [[372, 2, 1, "", "__init__"], [372, 2, 1, "", "fit"], [372, 2, 1, "", "fit_transform"], [372, 2, 1, "", "generate_report"], [372, 2, 1, "", "get_metadata_routing"], [372, 2, 1, "", "get_params"], [372, 2, 1, "", "inverse_transform"], [372, 2, 1, "", "set_fit_request"], [372, 2, 1, "", "set_inverse_transform_request"], [372, 2, 1, "", "set_output"], [372, 2, 1, "", "set_params"], [372, 2, 1, "", "set_transform_request"], [372, 2, 1, "", "transform"]], "nilearn.maskers.SurfaceMapsMasker": [[373, 2, 1, "", "__init__"], [373, 2, 1, "", "fit"], [373, 2, 1, "", "fit_transform"], [373, 2, 1, "", "get_metadata_routing"], [373, 2, 1, "", "get_params"], [373, 2, 1, "", "inverse_transform"], [373, 2, 1, "", "set_fit_request"], [373, 2, 1, "", "set_inverse_transform_request"], [373, 2, 1, "", "set_output"], [373, 2, 1, "", "set_params"], [373, 2, 1, "", "set_transform_request"], [373, 2, 1, "", "transform"]], "nilearn.maskers.SurfaceMasker": [[374, 2, 1, "", "__init__"], [374, 2, 1, "", "fit"], [374, 2, 1, "", "fit_transform"], [374, 2, 1, "", "generate_report"], [374, 2, 1, "", "get_metadata_routing"], [374, 2, 1, "", "get_params"], [374, 2, 1, "", "inverse_transform"], [374, 2, 1, "", "set_fit_request"], [374, 2, 1, "", "set_inverse_transform_request"], [374, 2, 1, "", "set_output"], [374, 2, 1, "", "set_params"], [374, 2, 1, "", "set_transform_request"], [374, 2, 1, "", "transform"]], "nilearn.masking": [[375, 3, 1, "", "apply_mask"], [376, 3, 1, "", "compute_background_mask"], [377, 3, 1, "", "compute_brain_mask"], [378, 3, 1, "", "compute_epi_mask"], [379, 3, 1, "", "compute_multi_background_mask"], [380, 3, 1, "", "compute_multi_brain_mask"], [381, 3, 1, "", "compute_multi_epi_mask"], [382, 3, 1, "", "intersect_masks"], [383, 3, 1, "", "unmask"]], "nilearn.mass_univariate": [[384, 3, 1, "", "permuted_ols"]], "nilearn.plotting": [[481, 0, 0, "-", "displays"], [415, 3, 1, "", "find_cut_slices"], [416, 3, 1, "", "find_parcellation_cut_coords"], [417, 3, 1, "", "find_probabilistic_atlas_cut_coords"], [418, 3, 1, "", "find_xyz_cut_coords"], [419, 3, 1, "", "plot_anat"], [420, 3, 1, "", "plot_carpet"], [421, 3, 1, "", "plot_connectome"], [422, 3, 1, "", "plot_contrast_matrix"], [423, 3, 1, "", "plot_design_matrix"], [424, 3, 1, "", "plot_design_matrix_correlation"], [425, 3, 1, "", "plot_epi"], [426, 3, 1, "", "plot_event"], [427, 3, 1, "", "plot_glass_brain"], [428, 3, 1, "", "plot_img"], [429, 3, 1, "", "plot_img_comparison"], [430, 3, 1, "", "plot_img_on_surf"], [431, 3, 1, "", "plot_markers"], [432, 3, 1, "", "plot_matrix"], [433, 3, 1, "", "plot_prob_atlas"], [434, 3, 1, "", "plot_roi"], [435, 3, 1, "", "plot_stat_map"], [436, 3, 1, "", "plot_surf"], [437, 3, 1, "", "plot_surf_contours"], [438, 3, 1, "", "plot_surf_roi"], [439, 3, 1, "", "plot_surf_stat_map"], [440, 3, 1, "", "show"], [441, 3, 1, "", "view_connectome"], [442, 3, 1, "", "view_img"], [443, 3, 1, "", "view_img_on_surf"], [444, 3, 1, "", "view_markers"], [445, 3, 1, "", "view_surf"]], "nilearn.plotting.displays": [[385, 1, 1, "", "BaseAxes"], [386, 1, 1, "", "BaseSlicer"], [387, 1, 1, "", "CutAxes"], [388, 1, 1, "", "GlassBrainAxes"], [389, 1, 1, "", "LProjector"], [390, 1, 1, "", "LRProjector"], [391, 1, 1, "", "LYRProjector"], [392, 1, 1, "", "LYRZProjector"], [393, 1, 1, "", "LZRProjector"], [394, 1, 1, "", "LZRYProjector"], [395, 1, 1, "", "MosaicSlicer"], [396, 1, 1, "", "OrthoProjector"], [397, 1, 1, "", "OrthoSlicer"], [398, 1, 1, "", "PlotlySurfaceFigure"], [399, 1, 1, "", "RProjector"], [400, 1, 1, "", "TiledSlicer"], [401, 1, 1, "", "XProjector"], [402, 1, 1, "", "XSlicer"], [403, 1, 1, "", "XZProjector"], [404, 1, 1, "", "XZSlicer"], [405, 1, 1, "", "YProjector"], [406, 1, 1, "", "YSlicer"], [407, 1, 1, "", "YXProjector"], [408, 1, 1, "", "YXSlicer"], [409, 1, 1, "", "YZProjector"], [410, 1, 1, "", "YZSlicer"], [411, 1, 1, "", "ZProjector"], [412, 1, 1, "", "ZSlicer"], [413, 3, 1, "", "get_projector"], [414, 3, 1, "", "get_slicer"]], "nilearn.plotting.displays.BaseAxes": [[385, 2, 1, "", "__init__"], [385, 2, 1, "", "add_object_bounds"], [385, 2, 1, "", "draw_2d"], [385, 2, 1, "", "draw_left_right"], [385, 2, 1, "", "draw_position"], [385, 2, 1, "", "draw_scale_bar"], [385, 2, 1, "", "get_object_bounds"], [385, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.BaseSlicer": [[386, 2, 1, "", "__init__"], [386, 2, 1, "", "add_contours"], [386, 2, 1, "", "add_edges"], [386, 2, 1, "", "add_markers"], [386, 2, 1, "", "add_overlay"], [386, 2, 1, "", "annotate"], [386, 4, 1, "", "black_bg"], [386, 4, 1, "", "brain_color"], [386, 2, 1, "", "close"], [386, 2, 1, "", "find_cut_coords"], [386, 2, 1, "", "init_with_figure"], [386, 2, 1, "", "savefig"], [386, 2, 1, "", "title"]], "nilearn.plotting.displays.CutAxes": [[387, 2, 1, "", "__init__"], [387, 2, 1, "", "add_object_bounds"], [387, 2, 1, "", "draw_2d"], [387, 2, 1, "", "draw_left_right"], [387, 2, 1, "", "draw_position"], [387, 2, 1, "", "draw_scale_bar"], [387, 2, 1, "", "get_object_bounds"], [387, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.GlassBrainAxes": [[388, 2, 1, "", "__init__"], [388, 2, 1, "", "add_object_bounds"], [388, 2, 1, "", "draw_2d"], [388, 2, 1, "", "draw_left_right"], [388, 2, 1, "", "draw_position"], [388, 2, 1, "", "draw_scale_bar"], [388, 2, 1, "", "get_object_bounds"], [388, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.LProjector": [[389, 2, 1, "", "__init__"], [389, 2, 1, "", "add_contours"], [389, 2, 1, "", "add_edges"], [389, 2, 1, "", "add_graph"], [389, 2, 1, "", "add_markers"], [389, 2, 1, "", "add_overlay"], [389, 2, 1, "", "annotate"], [389, 4, 1, "", "black_bg"], [389, 4, 1, "", "brain_color"], [389, 2, 1, "", "close"], [389, 2, 1, "", "draw_cross"], [389, 2, 1, "", "find_cut_coords"], [389, 2, 1, "", "init_with_figure"], [389, 2, 1, "", "savefig"], [389, 2, 1, "", "title"]], "nilearn.plotting.displays.LRProjector": [[390, 2, 1, "", "__init__"], [390, 2, 1, "", "add_contours"], [390, 2, 1, "", "add_edges"], [390, 2, 1, "", "add_graph"], [390, 2, 1, "", "add_markers"], [390, 2, 1, "", "add_overlay"], [390, 2, 1, "", "annotate"], [390, 4, 1, "", "black_bg"], [390, 4, 1, "", "brain_color"], [390, 2, 1, "", "close"], [390, 2, 1, "", "draw_cross"], [390, 2, 1, "", "find_cut_coords"], [390, 2, 1, "", "init_with_figure"], [390, 2, 1, "", "savefig"], [390, 2, 1, "", "title"]], "nilearn.plotting.displays.LYRProjector": [[391, 2, 1, "", "__init__"], [391, 2, 1, "", "add_contours"], [391, 2, 1, "", "add_edges"], [391, 2, 1, "", "add_graph"], [391, 2, 1, "", "add_markers"], [391, 2, 1, "", "add_overlay"], [391, 2, 1, "", "annotate"], [391, 4, 1, "", "black_bg"], [391, 4, 1, "", "brain_color"], [391, 2, 1, "", "close"], [391, 2, 1, "", "draw_cross"], [391, 2, 1, "", "find_cut_coords"], [391, 2, 1, "", "init_with_figure"], [391, 2, 1, "", "savefig"], [391, 2, 1, "", "title"]], "nilearn.plotting.displays.LYRZProjector": [[392, 2, 1, "", "__init__"], [392, 2, 1, "", "add_contours"], [392, 2, 1, "", "add_edges"], [392, 2, 1, "", "add_graph"], [392, 2, 1, "", "add_markers"], [392, 2, 1, "", "add_overlay"], [392, 2, 1, "", "annotate"], [392, 4, 1, "", "black_bg"], [392, 4, 1, "", "brain_color"], [392, 2, 1, "", "close"], [392, 2, 1, "", "draw_cross"], [392, 2, 1, "", "find_cut_coords"], [392, 2, 1, "", "init_with_figure"], [392, 2, 1, "", "savefig"], [392, 2, 1, "", "title"]], "nilearn.plotting.displays.LZRProjector": [[393, 2, 1, "", "__init__"], [393, 2, 1, "", "add_contours"], [393, 2, 1, "", "add_edges"], [393, 2, 1, "", "add_graph"], [393, 2, 1, "", "add_markers"], [393, 2, 1, "", "add_overlay"], [393, 2, 1, "", "annotate"], [393, 4, 1, "", "black_bg"], [393, 4, 1, "", "brain_color"], [393, 2, 1, "", "close"], [393, 2, 1, "", "draw_cross"], [393, 2, 1, "", "find_cut_coords"], [393, 2, 1, "", "init_with_figure"], [393, 2, 1, "", "savefig"], [393, 2, 1, "", "title"]], "nilearn.plotting.displays.LZRYProjector": [[394, 2, 1, "", "__init__"], [394, 2, 1, "", "add_contours"], [394, 2, 1, "", "add_edges"], [394, 2, 1, "", "add_graph"], [394, 2, 1, "", "add_markers"], [394, 2, 1, "", "add_overlay"], [394, 2, 1, "", "annotate"], [394, 4, 1, "", "black_bg"], [394, 4, 1, "", "brain_color"], [394, 2, 1, "", "close"], [394, 2, 1, "", "draw_cross"], [394, 2, 1, "", "find_cut_coords"], [394, 2, 1, "", "init_with_figure"], [394, 2, 1, "", "savefig"], [394, 2, 1, "", "title"]], "nilearn.plotting.displays.MosaicSlicer": [[395, 2, 1, "", "__init__"], [395, 2, 1, "", "add_contours"], [395, 2, 1, "", "add_edges"], [395, 2, 1, "", "add_markers"], [395, 2, 1, "", "add_overlay"], [395, 2, 1, "", "annotate"], [395, 4, 1, "", "black_bg"], [395, 4, 1, "", "brain_color"], [395, 2, 1, "", "close"], [395, 2, 1, "", "draw_cross"], [395, 2, 1, "", "find_cut_coords"], [395, 2, 1, "", "init_with_figure"], [395, 2, 1, "", "savefig"], [395, 2, 1, "", "title"]], "nilearn.plotting.displays.OrthoProjector": [[396, 2, 1, "", "__init__"], [396, 2, 1, "", "add_contours"], [396, 2, 1, "", "add_edges"], [396, 2, 1, "", "add_graph"], [396, 2, 1, "", "add_markers"], [396, 2, 1, "", "add_overlay"], [396, 2, 1, "", "annotate"], [396, 4, 1, "", "black_bg"], [396, 4, 1, "", "brain_color"], [396, 2, 1, "", "close"], [396, 2, 1, "", "draw_cross"], [396, 2, 1, "", "find_cut_coords"], [396, 2, 1, "", "init_with_figure"], [396, 2, 1, "", "savefig"], [396, 2, 1, "", "title"]], "nilearn.plotting.displays.OrthoSlicer": [[397, 2, 1, "", "__init__"], [397, 2, 1, "", "add_contours"], [397, 2, 1, "", "add_edges"], [397, 2, 1, "", "add_markers"], [397, 2, 1, "", "add_overlay"], [397, 2, 1, "", "annotate"], [397, 4, 1, "", "black_bg"], [397, 4, 1, "", "brain_color"], [397, 2, 1, "", "close"], [397, 2, 1, "", "draw_cross"], [397, 2, 1, "", "find_cut_coords"], [397, 2, 1, "", "init_with_figure"], [397, 2, 1, "", "savefig"], [397, 2, 1, "", "title"]], "nilearn.plotting.displays.PlotlySurfaceFigure": [[398, 2, 1, "", "__init__"], [398, 2, 1, "", "add_contours"], [398, 2, 1, "", "savefig"], [398, 2, 1, "", "show"]], "nilearn.plotting.displays.RProjector": [[399, 2, 1, "", "__init__"], [399, 2, 1, "", "add_contours"], [399, 2, 1, "", "add_edges"], [399, 2, 1, "", "add_graph"], [399, 2, 1, "", "add_markers"], [399, 2, 1, "", "add_overlay"], [399, 2, 1, "", "annotate"], [399, 4, 1, "", "black_bg"], [399, 4, 1, "", "brain_color"], [399, 2, 1, "", "close"], [399, 2, 1, "", "draw_cross"], [399, 2, 1, "", "find_cut_coords"], [399, 2, 1, "", "init_with_figure"], [399, 2, 1, "", "savefig"], [399, 2, 1, "", "title"]], "nilearn.plotting.displays.TiledSlicer": [[400, 2, 1, "", "__init__"], [400, 2, 1, "", "add_contours"], [400, 2, 1, "", "add_edges"], [400, 2, 1, "", "add_markers"], [400, 2, 1, "", "add_overlay"], [400, 2, 1, "", "annotate"], [400, 4, 1, "", "black_bg"], [400, 4, 1, "", "brain_color"], [400, 2, 1, "", "close"], [400, 2, 1, "", "draw_cross"], [400, 2, 1, "", "find_cut_coords"], [400, 2, 1, "", "init_with_figure"], [400, 2, 1, "", "savefig"], [400, 2, 1, "", "title"]], "nilearn.plotting.displays.XProjector": [[401, 2, 1, "", "__init__"], [401, 2, 1, "", "add_contours"], [401, 2, 1, "", "add_edges"], [401, 2, 1, "", "add_graph"], [401, 2, 1, "", "add_markers"], [401, 2, 1, "", "add_overlay"], [401, 2, 1, "", "annotate"], [401, 4, 1, "", "black_bg"], [401, 4, 1, "", "brain_color"], [401, 2, 1, "", "close"], [401, 2, 1, "", "draw_cross"], [401, 2, 1, "", "find_cut_coords"], [401, 2, 1, "", "init_with_figure"], [401, 2, 1, "", "savefig"], [401, 2, 1, "", "title"]], "nilearn.plotting.displays.XSlicer": [[402, 2, 1, "", "__init__"], [402, 2, 1, "", "add_contours"], [402, 2, 1, "", "add_edges"], [402, 2, 1, "", "add_markers"], [402, 2, 1, "", "add_overlay"], [402, 2, 1, "", "annotate"], [402, 4, 1, "", "black_bg"], [402, 4, 1, "", "brain_color"], [402, 2, 1, "", "close"], [402, 2, 1, "", "draw_cross"], [402, 2, 1, "", "find_cut_coords"], [402, 2, 1, "", "init_with_figure"], [402, 2, 1, "", "savefig"], [402, 2, 1, "", "title"]], "nilearn.plotting.displays.XZProjector": [[403, 2, 1, "", "__init__"], [403, 2, 1, "", "add_contours"], [403, 2, 1, "", "add_edges"], [403, 2, 1, "", "add_graph"], [403, 2, 1, "", "add_markers"], [403, 2, 1, "", "add_overlay"], [403, 2, 1, "", "annotate"], [403, 4, 1, "", "black_bg"], [403, 4, 1, "", "brain_color"], [403, 2, 1, "", "close"], [403, 2, 1, "", "draw_cross"], [403, 2, 1, "", "find_cut_coords"], [403, 2, 1, "", "init_with_figure"], [403, 2, 1, "", "savefig"], [403, 2, 1, "", "title"]], "nilearn.plotting.displays.XZSlicer": [[404, 2, 1, "", "__init__"], [404, 2, 1, "", "add_contours"], [404, 2, 1, "", "add_edges"], [404, 2, 1, "", "add_markers"], [404, 2, 1, "", "add_overlay"], [404, 2, 1, "", "annotate"], [404, 4, 1, "", "black_bg"], [404, 4, 1, "", "brain_color"], [404, 2, 1, "", "close"], [404, 2, 1, "", "draw_cross"], [404, 2, 1, "", "find_cut_coords"], [404, 2, 1, "", "init_with_figure"], [404, 2, 1, "", "savefig"], [404, 2, 1, "", "title"]], "nilearn.plotting.displays.YProjector": [[405, 2, 1, "", "__init__"], [405, 2, 1, "", "add_contours"], [405, 2, 1, "", "add_edges"], [405, 2, 1, "", "add_graph"], [405, 2, 1, "", "add_markers"], [405, 2, 1, "", "add_overlay"], [405, 2, 1, "", "annotate"], [405, 4, 1, "", "black_bg"], [405, 4, 1, "", "brain_color"], [405, 2, 1, "", "close"], [405, 2, 1, "", "draw_cross"], [405, 2, 1, "", "find_cut_coords"], [405, 2, 1, "", "init_with_figure"], [405, 2, 1, "", "savefig"], [405, 2, 1, "", "title"]], "nilearn.plotting.displays.YSlicer": [[406, 2, 1, "", "__init__"], [406, 2, 1, "", "add_contours"], [406, 2, 1, "", "add_edges"], [406, 2, 1, "", "add_markers"], [406, 2, 1, "", "add_overlay"], [406, 2, 1, "", "annotate"], [406, 4, 1, "", "black_bg"], [406, 4, 1, "", "brain_color"], [406, 2, 1, "", "close"], [406, 2, 1, "", "draw_cross"], [406, 2, 1, "", "find_cut_coords"], [406, 2, 1, "", "init_with_figure"], [406, 2, 1, "", "savefig"], [406, 2, 1, "", "title"]], "nilearn.plotting.displays.YXProjector": [[407, 2, 1, "", "__init__"], [407, 2, 1, "", "add_contours"], [407, 2, 1, "", "add_edges"], [407, 2, 1, "", "add_graph"], [407, 2, 1, "", "add_markers"], [407, 2, 1, "", "add_overlay"], [407, 2, 1, "", "annotate"], [407, 4, 1, "", "black_bg"], [407, 4, 1, "", "brain_color"], [407, 2, 1, "", "close"], [407, 2, 1, "", "draw_cross"], [407, 2, 1, "", "find_cut_coords"], [407, 2, 1, "", "init_with_figure"], [407, 2, 1, "", "savefig"], [407, 2, 1, "", "title"]], "nilearn.plotting.displays.YXSlicer": [[408, 2, 1, "", "__init__"], [408, 2, 1, "", "add_contours"], [408, 2, 1, "", "add_edges"], [408, 2, 1, "", "add_markers"], [408, 2, 1, "", "add_overlay"], [408, 2, 1, "", "annotate"], [408, 4, 1, "", "black_bg"], [408, 4, 1, "", "brain_color"], [408, 2, 1, "", "close"], [408, 2, 1, "", "draw_cross"], [408, 2, 1, "", "find_cut_coords"], [408, 2, 1, "", "init_with_figure"], [408, 2, 1, "", "savefig"], [408, 2, 1, "", "title"]], "nilearn.plotting.displays.YZProjector": [[409, 2, 1, "", "__init__"], [409, 2, 1, "", "add_contours"], [409, 2, 1, "", "add_edges"], [409, 2, 1, "", "add_graph"], [409, 2, 1, "", "add_markers"], [409, 2, 1, "", "add_overlay"], [409, 2, 1, "", "annotate"], [409, 4, 1, "", "black_bg"], [409, 4, 1, "", "brain_color"], [409, 2, 1, "", "close"], [409, 2, 1, "", "draw_cross"], [409, 2, 1, "", "find_cut_coords"], [409, 2, 1, "", "init_with_figure"], [409, 2, 1, "", "savefig"], [409, 2, 1, "", "title"]], "nilearn.plotting.displays.YZSlicer": [[410, 2, 1, "", "__init__"], [410, 2, 1, "", "add_contours"], [410, 2, 1, "", "add_edges"], [410, 2, 1, "", "add_markers"], [410, 2, 1, "", "add_overlay"], [410, 2, 1, "", "annotate"], [410, 4, 1, "", "black_bg"], [410, 4, 1, "", "brain_color"], [410, 2, 1, "", "close"], [410, 2, 1, "", "draw_cross"], [410, 2, 1, "", "find_cut_coords"], [410, 2, 1, "", "init_with_figure"], [410, 2, 1, "", "savefig"], [410, 2, 1, "", "title"]], "nilearn.plotting.displays.ZProjector": [[411, 2, 1, "", "__init__"], [411, 2, 1, "", "add_contours"], [411, 2, 1, "", "add_edges"], [411, 2, 1, "", "add_graph"], [411, 2, 1, "", "add_markers"], [411, 2, 1, "", "add_overlay"], [411, 2, 1, "", "annotate"], [411, 4, 1, "", "black_bg"], [411, 4, 1, "", "brain_color"], [411, 2, 1, "", "close"], [411, 2, 1, "", "draw_cross"], [411, 2, 1, "", "find_cut_coords"], [411, 2, 1, "", "init_with_figure"], [411, 2, 1, "", "savefig"], [411, 2, 1, "", "title"]], "nilearn.plotting.displays.ZSlicer": [[412, 2, 1, "", "__init__"], [412, 2, 1, "", "add_contours"], [412, 2, 1, "", "add_edges"], [412, 2, 1, "", "add_markers"], [412, 2, 1, "", "add_overlay"], [412, 2, 1, "", "annotate"], [412, 4, 1, "", "black_bg"], [412, 4, 1, "", "brain_color"], [412, 2, 1, "", "close"], [412, 2, 1, "", "draw_cross"], [412, 2, 1, "", "find_cut_coords"], [412, 2, 1, "", "init_with_figure"], [412, 2, 1, "", "savefig"], [412, 2, 1, "", "title"]], "nilearn.regions": [[446, 1, 1, "", "HierarchicalKMeans"], [447, 1, 1, "", "Parcellations"], [448, 1, 1, "", "ReNA"], [449, 1, 1, "", "RegionExtractor"], [450, 3, 1, "", "connected_label_regions"], [451, 3, 1, "", "connected_regions"], [452, 3, 1, "", "img_to_signals_labels"], [453, 3, 1, "", "img_to_signals_maps"], [454, 3, 1, "", "recursive_neighbor_agglomeration"], [455, 3, 1, "", "signals_to_img_labels"], [456, 3, 1, "", "signals_to_img_maps"]], "nilearn.regions.HierarchicalKMeans": [[446, 2, 1, "", "__init__"], [446, 2, 1, "", "fit"], [446, 2, 1, "", "fit_predict"], [446, 2, 1, "", "fit_transform"], [446, 2, 1, "", "get_metadata_routing"], [446, 2, 1, "", "get_params"], [446, 2, 1, "", "inverse_transform"], [446, 2, 1, "", "set_inverse_transform_request"], [446, 2, 1, "", "set_output"], [446, 2, 1, "", "set_params"], [446, 2, 1, "", "transform"]], "nilearn.regions.Parcellations": [[447, 5, 1, "", "VALID_METHODS"], [447, 2, 1, "", "__init__"], [447, 2, 1, "", "fit"], [447, 2, 1, "", "fit_transform"], [447, 2, 1, "", "get_metadata_routing"], [447, 2, 1, "", "get_params"], [447, 2, 1, "", "inverse_transform"], [447, 4, 1, "", "nifti_maps_masker_"], [447, 2, 1, "", "score"], [447, 2, 1, "", "set_fit_request"], [447, 2, 1, "", "set_inverse_transform_request"], [447, 2, 1, "", "set_output"], [447, 2, 1, "", "set_params"], [447, 2, 1, "", "set_score_request"], [447, 2, 1, "", "set_transform_request"], [447, 2, 1, "", "transform"]], "nilearn.regions.ReNA": [[448, 2, 1, "", "__init__"], [448, 2, 1, "", "fit"], [448, 2, 1, "", "fit_predict"], [448, 2, 1, "", "fit_transform"], [448, 2, 1, "", "get_metadata_routing"], [448, 2, 1, "", "get_params"], [448, 2, 1, "", "inverse_transform"], [448, 2, 1, "", "set_inverse_transform_request"], [448, 2, 1, "", "set_output"], [448, 2, 1, "", "set_params"], [448, 2, 1, "", "transform"]], "nilearn.regions.RegionExtractor": [[449, 2, 1, "", "__init__"], [449, 2, 1, "", "fit"], [449, 2, 1, "", "fit_transform"], [449, 2, 1, "", "generate_report"], [449, 2, 1, "", "get_metadata_routing"], [449, 2, 1, "", "get_params"], [449, 2, 1, "", "inverse_transform"], [449, 2, 1, "", "set_fit_request"], [449, 2, 1, "", "set_inverse_transform_request"], [449, 2, 1, "", "set_output"], [449, 2, 1, "", "set_params"], [449, 2, 1, "", "set_transform_request"], [449, 2, 1, "", "transform"], [449, 2, 1, "", "transform_single_imgs"]], "nilearn.reporting": [[457, 1, 1, "", "HTMLReport"], [458, 3, 1, "", "get_clusters_table"], [459, 3, 1, "", "make_glm_report"]], "nilearn.reporting.HTMLReport": [[457, 2, 1, "", "__init__"], [457, 2, 1, "", "get_iframe"], [457, 2, 1, "", "get_standalone"], [457, 2, 1, "", "open_in_browser"], [457, 2, 1, "", "resize"], [457, 2, 1, "", "save_as_html"]], "nilearn.signal": [[460, 3, 1, "", "butterworth"], [461, 3, 1, "", "clean"], [462, 3, 1, "", "high_variance_confounds"]], "nilearn.surface": [[463, 1, 1, "", "FileMesh"], [464, 1, 1, "", "InMemoryMesh"], [465, 1, 1, "", "PolyData"], [466, 1, 1, "", "PolyMesh"], [467, 1, 1, "", "SurfaceImage"], [468, 1, 1, "", "SurfaceMesh"], [469, 3, 1, "", "load_surf_data"], [470, 3, 1, "", "load_surf_mesh"], [471, 3, 1, "", "vol_to_surf"]], "nilearn.surface.FileMesh": [[463, 2, 1, "", "__init__"], [463, 4, 1, "", "coordinates"], [463, 4, 1, "", "faces"], [463, 5, 1, "", "file_path"], [463, 2, 1, "", "loaded"], [463, 5, 1, "", "n_vertices"], [463, 2, 1, "", "to_gifti"]], "nilearn.surface.InMemoryMesh": [[464, 2, 1, "", "__init__"], [464, 5, 1, "", "coordinates"], [464, 5, 1, "", "faces"], [464, 5, 1, "", "n_vertices"], [464, 2, 1, "", "to_gifti"]], "nilearn.surface.PolyData": [[465, 2, 1, "", "__init__"], [465, 4, 1, "", "shape"], [465, 2, 1, "", "to_filename"]], "nilearn.surface.PolyMesh": [[466, 2, 1, "", "__init__"], [466, 5, 1, "", "n_vertices"], [466, 2, 1, "", "to_filename"]], "nilearn.surface.SurfaceImage": [[467, 2, 1, "", "__init__"], [467, 2, 1, "", "from_volume"], [467, 4, 1, "", "shape"]], "nilearn.surface.SurfaceMesh": [[468, 2, 1, "", "__init__"], [468, 5, 1, "", "coordinates"], [468, 5, 1, "", "faces"], [468, 5, 1, "", "n_vertices"], [468, 2, 1, "", "to_gifti"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "property", "Python property"], "5": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:property", "5": "py:attribute"}, "terms": {"": [0, 2, 3, 4, 6, 7, 10, 17, 24, 30, 31, 35, 40, 42, 43, 46, 50, 51, 52, 57, 58, 65, 66, 67, 68, 69, 71, 72, 73, 76, 78, 79, 80, 81, 87, 92, 93, 94, 95, 101, 103, 104, 105, 110, 111, 115, 118, 127, 128, 136, 143, 153, 154, 159, 162, 166, 169, 170, 172, 173, 175, 176, 177, 178, 179, 181, 182, 184, 185, 186, 191, 192, 193, 194, 195, 196, 198, 199, 202, 203, 211, 214, 218, 219, 220, 222, 224, 226, 227, 230, 231, 232, 233, 234, 242, 244, 245, 253, 255, 256, 258, 259, 270, 275, 277, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 312, 313, 320, 333, 337, 338, 347, 349, 353, 354, 355, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 420, 421, 430, 431, 436, 437, 438, 439, 441, 443, 445, 446, 447, 448, 449, 459, 461, 486, 489], "0": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 159, 160, 163, 165, 171, 172, 173, 174, 175, 184, 185, 186, 193, 196, 197, 201, 205, 206, 207, 208, 209, 222, 223, 230, 232, 233, 234, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 419, 420, 421, 424, 426, 427, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 473, 486, 487, 488, 490], "00": [8, 28, 31, 33, 34, 46, 47, 50, 55, 61, 74, 83, 90, 97, 112, 114, 472, 488], "000": [35, 44, 80, 95, 114, 170], "0000": 173, "000000": [64, 67], "00002": [115, 195, 243], "00008": [115, 118, 220, 275, 277], "0001": [303, 304], "00012763e": 3, "0002": 173, "000524": 52, "00057857e": 3, "000797": 51, "000828": 58, "001": [6, 34, 43, 46, 64, 77, 80, 81, 82, 102, 110, 175, 233, 234, 236, 303, 304, 320, 333, 336, 459, 472], "0010042": 12, "0010042_rest_tshift_rpi_voreg_mni": 12, "00107422e": 3, "001089": 34, "001315": 50, "00152": [115, 221], "00156": [104, 115, 384], "00167": [51, 115, 162], "001698": 52, "001838": 51, "001919": 52, "002": 43, "00229999e": 3, "002644": 50, "002689": 50, "00277823e": 3, "002875": 52, "002881": 50, "0029482": [115, 181], "002969": 52, "003": 43, "003096": 51, "00316": 50, "00338": [115, 225, 231, 252, 256], "003411": 34, "003659": 50, "003907": 34, "004": [42, 43, 115, 196, 218, 274], "004194": 50, "004306": 51, "004387": 50, "004826": 51, "004827": 52, "005": [43, 115, 167, 300, 301], "005065": 6, "00512451": [115, 159, 233], "005349": 34, "00555": 34, "00563468": [46, 115, 171], "005777885591323e": 70, "005922": 51, "00599": [115, 191, 240], "006": [43, 51, 60, 115, 224, 259], "00655506e": 3, "00662572e": 3, "006711": 50, "006757": 34, "006862": 52, "007": [43, 58, 115, 159, 160, 217, 219, 250], "007294": 58, "007541": 58, "00771410e": 3, "00779": 34, "008": [34, 43], "00839984": [115, 171], "009": [43, 115, 420], "009333": 51, "00991743": [115, 171], "00_tutori": [3, 4, 6, 7, 8, 180, 488], "00e": 472, "01": [3, 4, 6, 8, 13, 28, 31, 33, 34, 39, 44, 47, 50, 53, 55, 57, 60, 61, 63, 71, 72, 74, 83, 97, 100, 101, 102, 104, 110, 111, 112, 115, 196, 200, 219, 234, 246, 250, 320, 323, 327, 358, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 472, 473, 488], "010": [23, 43, 50, 115, 164, 200, 254, 305], "010495": 52, "010751": 51, "01093944": [115, 163, 449], "011": 43, "011243": 50, "011367": 34, "01147731": [115, 171], "011997": 34, "012": 43, "012477": 50, "013": 43, "013254": 50, "014": [43, 112], "01499899481932693": 70, "015": 43, "01524": 34, "015679": 55, "016": [43, 67, 101, 112, 488], "01699005e": 3, "017": 43, "01769572e": 3, "018": [43, 115, 196, 361, 362], "01872301e": 3, "018869405610297586": 70, "019": 43, "019085": 58, "0193": [115, 205, 206, 207, 208, 209, 230, 255, 283], "019374": 58, "01_plot": [10, 12, 16, 23, 24, 28, 180, 443, 488], "01_task": [6, 101, 102, 110], "01d": 3, "01hz": [67, 240], "02": [3, 28, 31, 34, 47, 50, 53, 55, 61, 64, 72, 74, 79, 83, 97, 100, 102, 110, 112, 115, 164, 170, 196, 244, 305, 361, 362, 472, 488], "020": [43, 58, 105, 115, 211, 361, 362], "020942": 52, "021": [43, 105], "02135441e": 3, "022": 43, "022169": 58, "022416": 58, "022868": 55, "023": 43, "023900": 58, "02394": 34, "024": 43, "024188": 58, "024363": 34, "025": 43, "02587": 55, "026": 43, "026078": 58, "026206": 34, "026366": 58, "026579": 34, "027": 43, "027587": 58, "027876": 58, "028": 43, "028052": 34, "02838807e": 3, "029": 43, "02904869": [115, 202, 247], "02912618e": 3, "029500": 58, "029747": 58, "02_decod": [30, 37, 43, 45, 47, 180, 488], "02_task": 110, "02d": 81, "02g": 72, "03": [3, 28, 31, 33, 34, 43, 46, 47, 52, 55, 58, 61, 72, 74, 83, 92, 97, 110, 112, 115, 170, 179, 335, 361, 362, 384, 472, 473, 488], "030": 43, "03006018e": 3, "031": 43, "032": 43, "03259720e": 3, "03299165e": 3, "033": [43, 115, 196, 213], "033396": 58, "033577": 34, "033685": 58, "034": 43, "034236": 58, "034483": 58, "034967": 6, "035": [38, 43, 76, 83, 115, 488], "036": [43, 82, 83, 488], "03622951e": 3, "036247": 34, "03655244e": 3, "037": [43, 115], "038": 43, "038187": 34, "03859686e": 3, "03893573e": 3, "039": [43, 47, 488], "03927521e": 3, "0395": [115, 200], "0396": [115, 200], "03_connect": [49, 50, 51, 57, 61, 146, 158, 180, 488], "03_task": 110, "03cm": 45, "03d": [43, 101], "03g": 76, "04": [3, 28, 31, 33, 34, 51, 52, 55, 58, 61, 72, 74, 110, 115, 159, 160, 172, 219, 250, 361, 362, 462, 472, 473, 488], "040": 43, "04053007e": 3, "04068482e": 3, "041": [43, 106, 112, 115, 170, 488], "041336": 50, "042": [43, 115, 361, 362, 462], "042248": 58, "042495": 58, "0426": 105, "04261767e": 3, "043": 43, "043015": 34, "043724": 64, "04382488e": 3, "044": 43, "044073": 55, "044286": 34, "045": 43, "04575602612203437": 70, "046": 43, "04616470e": 3, "0463": 34, "047": 43, "0471754951": [115, 312, 313], "048": [43, 115, 361], "04811664e": 3, "04858795e": 3, "048779": 55, "049": 43, "049211": 58, "049458": 58, "04955626049962088": 70, "04965514e": 3, "04_glm_first_level": [64, 71, 72, 73, 74, 488], "04_task": 110, "05": [6, 13, 28, 31, 33, 34, 46, 47, 50, 52, 53, 55, 72, 76, 77, 78, 80, 82, 100, 102, 110, 175, 193, 194, 195, 199, 219, 222, 223, 225, 228, 229, 230, 231, 241, 242, 245, 250, 251, 252, 255, 256, 281, 282, 310, 312, 313, 315, 472, 473, 488], "050": 43, "0504136102": [115, 362], "051": 43, "052": [43, 115, 198, 270], "05201": [115, 165], "052775": 58, "05279336e": 3, "052952": 58, "053": 43, "053022": 58, "05313262e": 3, "053241": 58, "054": [43, 115, 170], "054759": 58, "055": 43, "055006": 58, "056": 43, "056165": 64, "056282e": 52, "05697523e": 3, "057": 43, "057023": 55, "05703271e": 3, "058": 43, "059": 43, "05_advanc": [146, 158], "05_glm_second_level": [83, 488], "05_task": 110, "06": [23, 33, 34, 46, 72, 92, 97, 110, 112, 115, 172, 196, 200, 244, 254, 302, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 435, 442, 472, 473, 488], "060": [43, 77, 104, 115, 315, 384], "0600244103": [115, 170, 181], "061": [43, 115, 179, 335, 384], "061121": 34, "06136": 34, "06156228e": 3, "062": [43, 53, 100, 115, 171], "062316": 55, "062676": 6, "063": [43, 115, 159], "063614": 34, "064": [43, 115, 361, 362], "064266": 58, "06446596e": 3, "064554": 58, "064585": 58, "064873": 58, "065": 43, "06521194e": 3, "065223": 55, "066": [43, 44, 47, 488], "066189": [115, 307, 311], "06665797e": 3, "067": 43, "068": 43, "06832132e": 3, "068998": 58, "069": 43, "069287": 58, "06_manipulating_imag": [87, 92, 95, 96, 97, 488], "06_task": 110, "06mm": 45, "07": [31, 33, 34, 38, 46, 47, 51, 61, 71, 72, 74, 77, 83, 92, 110, 112, 115, 166, 196, 213, 225, 252, 315, 448, 454, 472, 488], "070": 43, "07013271e": 3, "07071": 34, "071": 43, "072": [43, 64, 74, 488], "07247139e": 3, "07299927e": 3, "073": [43, 58, 115, 166, 362], "07350015": [115, 384], "07356308e": 3, "074": 43, "075": 43, "07541157e": 3, "075540": 58, "075787": 58, "076": 43, "07603401e": 3, "076144": 34, "077": 43, "07737": 34, "077517": 58, "077764": 58, "078": 43, "078390": 64, "079": 43, "079389": 64, "07_advanc": [101, 102, 110, 111, 112, 488], "07_task": 110, "08": [31, 33, 34, 51, 72, 97, 102, 110, 115, 159, 192, 196, 342, 361, 420, 472, 473, 488], "080": [43, 115], "08011951e": 3, "081": 43, "0811879106": [115, 192], "081260": 6, "081559": 58, "081847": 58, "082": [43, 115, 196, 244], "083": 43, "084": [43, 83], "085": 43, "08511952e": 3, "086": 43, "087": 43, "087084": 55, "088": 43, "08853505e": 3, "08863176e": 3, "089": 43, "08944947e": 3, "089762": 55, "08_task": 110, "09": [31, 33, 34, 60, 110, 115, 198, 200, 213, 222, 224, 246, 259, 270, 320, 333, 459, 472, 473], "090": 43, "09026291e": 3, "0905267106": [115, 227, 253], "0908073106": [115, 196], "090935": 6, "091": 43, "091521": 34, "09181971e": 3, "092": 43, "093": [43, 63, 74, 488], "093039": 34, "094": [43, 57, 61, 488], "09405346e": 3, "09409504e": 3, "09421546e": 3, "095": 43, "095605": 34, "096": 43, "097": 43, "09703161e": 3, "0978": [115, 193, 242], "098": 43, "0983": 34, "09849": 34, "09867185e": 3, "099": 43, "09945113e": 3, "09969872e": 3, "09_task": 110, "0a0": 143, "0min": [34, 50, 51, 52, 54, 55, 56, 58, 60], "0mm": [85, 181], "0rc1": [155, 158], "0x7fc184ae4af0": 99, "0x7fc1a7759f40": 58, "0x7fc1a77f1c70": 82, "0x7fc1a915a4f0": 82, "0x7fc1a915aee0": 89, "0x7fc1a9431f40": 70, "0x7fc1a94dd6a0": 54, "0x7fc1a97355b0": 60, "0x7fc1ad12d3a0": 34, "0x7fc1af7815b0": 51, "0x7fc1af781670": 51, "0x7fc1af781b80": 51, "0x7fc1af7957f0": 72, "0x7fc1b1f38610": 60, "0x7fc1b50d8d90": 87, "0x7fc1b50f1940": 76, "0x7fc1d1c7d910": 53, "0x7fc1d2253400": 34, "0x7fc1d2259880": 54, "0x7fc1d24d3760": 51, "0x7fc1d2801c40": 51, "0x7fc1d2b28310": 50, "0x7fc1d2b8a190": 51, "0x7fc1d2b8a880": 51, "0x7fc1d2b8a8e0": 51, "0x7fc1d2b8a9a0": 95, "0x7fc1d2b8afa0": 51, "0x7fc1d2f86d60": 87, "0x7fc1d36188b0": 44, "0x7fc1d3670910": 54, "0x7fc1d37a2730": 37, "0x7fc1d3820a60": 34, "0x7fc1d3ef2dc0": 60, "0x7fc1d49999a0": 76, "0x7fc1d4a91b50": 16, "0x7fc1d80cc370": 58, "0x7fc1d8133c70": 58, "0x7fc1d81409d0": 51, "0x7fc1d8182730": 58, "0x7fc1d81b8460": 60, "0x7fc1d81b88b0": 90, "0x7fc1d81b8fd0": 58, "0x7fc1d8206d00": 58, "0x7fc1dcd51310": 72, "0x7fc1dcd532b0": 15, "0x7fc1dd059250": 17, "0x7fc1dd059c70": 26, "0x7fc1dd1839a0": 50, "0x7fc1dd2c9400": 10, "0x7fc1dd43d580": 15, "0x7fc1dd474e20": 18, "0x7fc1dd503ac0": 60, "0x7fc1dd5edeb0": 16, "0x7fc1dd6bf760": 60, "0x7fc1dd6ddc10": 16, "0x7fc1dd6eb430": 16, "0x7fc1dd76b0a0": 93, "0x7fc1dd7c36a0": 34, "0x7fc1dd7c38b0": 54, "0x7fc1dd7c3d60": 55, "0x7fc1dd7cadc0": 42, "0x7fc1dd7e1760": 58, "0x7fc1dd80a340": 95, "0x7fc1dd848400": 90, "0x7fc1dd874e80": 58, "0x7fc1dd87d5b0": 15, "0x7fc1dd8d1b80": 95, "0x7fc1dd9ad1f0": 15, "0x7fc1dd9d5bb0": 15, "0x7fc1ee71c880": 16, "0x7fc1ee7c4910": 24, "0x7fc1ee8065e0": 5, "0x7fc1f72596d0": 15, "0x7fc1f7298b80": 34, "0x7fc1f72ab3d0": 34, "0x7fc1f72ab4c0": 82, "0x7fc1f72ab940": 34, "0x7fc1f72b97c0": 34, "0x7fc1f72eab50": 16, "0x7fc1f7367be0": 72, "0x7fc1f7398310": 17, "0x7fc1f73985e0": 41, "0x7fc1f74518e0": 51, "0x7fc1f7451dc0": 51, "0x7fc1f7451e20": 51, "0x7fc1f750aa30": 34, "0x7fc1f754c280": 14, "0x7fc1f75cb760": 34, "0x7fc1f75cb970": 34, "0x7fc1f764b0d0": 15, "0x7fc1f764b1f0": 34, "0x7fc1f764b9a0": 34, "0x7fc1f764eb80": 53, "0x7fc1f766e910": 90, "0x7fc1f766edf0": 37, "0x7fc1f7673f40": 15, "0x7fc1f76a5700": 18, "0x7fc1f76b5100": 58, "0x7fc1f76b56d0": 34, "0x7fc1f76be940": 11, "0x7fc1f76d3310": 58, "0x7fc1f770f1f0": 34, "0x7fc1f771d520": 17, "0x7fc1f774a370": 34, "0x7fc1f774a6a0": 58, "0x7fc1f774aeb0": 34, "0x7fc1f7755790": 34, "0x7fc1f77559a0": 34, "0x7fc1f779c580": 18, "0x7fc1f779ceb0": 4, "0x7fc1f77d9670": 95, "0x7fc1f783b340": 4, "0x7fc1f78d47f0": 16, "0x7fc1f78d4910": 34, "0x7fc1f78d4be0": 16, "0x7fc1f79b5430": 16, "0x7fc1f7a09460": 15, "0x7fc1f7a09e50": 2, "0x7fc1f7a27700": 2, "0x7fc1f7ad60d0": 95, "0x7fc1f7b09760": 4, "0x7fc1f7b31190": 34, "0x7fc1f7b31940": 34, "0x7fc1f7b48100": 4, "0x7fc1f7b48a30": 14, "0x7fc1f7b5a850": 54, "0x7fc1f7b5ae50": 11, "0x7fc1f7b5aeb0": 60, "0x7fc1f7b6c520": 51, "0x7fc1f7b6cac0": 34, "0x7fc1f7b6f160": 26, "0x7fc1f7b6fa30": 16, "0x7fc1f7b7d520": 37, "0x7fc1f7b8bf40": 2, "0x7fc1f7ba1880": 15, "0x7fc1f7ba1d30": 87, "0x7fc1f7bb8c70": 16, "0x7fc1f7bbedf0": 17, "0x7fc1f7bff6d0": 16, "0x7fc1f7c41730": 34, "0x7fc1f7c41cd0": 82, "0x7fc1f7c41e50": 17, "0x7fc1f7f54f70": 50, "0x7fc1f7fc3850": 55, "0x7fc1f7fc3a00": 55, "0x7fc1f7fc3a30": 55, "0x7fc1f7fd5070": 95, "0x7fc1f807c7c0": 56, "1": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 16, 19, 20, 23, 24, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 117, 118, 124, 126, 127, 128, 129, 131, 133, 137, 138, 140, 143, 145, 146, 153, 155, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 179, 181, 182, 184, 186, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 288, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 320, 323, 327, 329, 333, 335, 337, 338, 342, 345, 347, 350, 353, 355, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 420, 421, 422, 427, 429, 431, 432, 433, 434, 436, 438, 439, 442, 443, 445, 446, 447, 448, 449, 454, 456, 458, 461, 462, 465, 471, 472, 473, 486, 487, 488, 490], "10": [0, 2, 3, 5, 6, 10, 12, 13, 16, 22, 23, 24, 25, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 63, 64, 65, 67, 71, 73, 77, 78, 80, 82, 83, 88, 90, 92, 93, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 115, 118, 123, 143, 153, 159, 160, 162, 164, 165, 166, 167, 170, 171, 172, 174, 175, 179, 181, 191, 192, 193, 195, 196, 198, 199, 200, 202, 203, 205, 206, 207, 208, 209, 211, 212, 213, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 236, 240, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 264, 267, 270, 274, 275, 277, 280, 283, 284, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 315, 316, 323, 335, 337, 338, 349, 361, 362, 366, 368, 369, 371, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 420, 439, 446, 447, 448, 449, 452, 453, 454, 457, 458, 461, 462, 465, 471, 472, 473, 486, 488, 490], "100": [3, 16, 32, 34, 35, 40, 42, 43, 44, 46, 51, 57, 65, 76, 87, 90, 105, 107, 118, 166, 175, 183, 192, 196, 225, 234, 240, 252, 272, 275, 298, 299, 300, 301, 303, 304, 317, 320, 328, 329, 337, 344, 357, 462, 472, 473, 486, 489], "1000": [35, 51, 78, 95, 162, 175, 191, 194, 196, 225, 252, 446, 473], "10000": [41, 44, 51, 57, 104, 107, 335, 384], "10000000000": 308, "1002": [72, 74, 115, 199, 205, 206, 207, 208, 209, 230, 245, 255, 283, 338, 461, 488], "10049163e": 3, "1006": [115, 193, 200, 242], "100765": 473, "1008": [47, 115, 159, 233, 488], "1009": 35, "100m": 67, "100mm": 87, "101": [34, 42, 43, 72, 115, 361, 362, 462, 472, 473], "1010": [28, 47, 488], "1011": [16, 19, 28, 30, 488], "1012": [3, 8, 99, 112, 488], "1013": [37, 47, 488], "1014": [32, 38, 47, 488], "1015": 34, "10159": [64, 472], "10159_task": 64, "1016": [23, 38, 42, 43, 50, 51, 53, 58, 60, 77, 100, 104, 115, 159, 160, 164, 166, 167, 170, 171, 179, 196, 198, 200, 202, 211, 213, 217, 218, 219, 224, 226, 244, 246, 247, 250, 254, 259, 260, 270, 274, 300, 301, 305, 315, 335, 361, 362, 384, 420, 462], "1017": [12, 28, 488], "1018": [28, 74, 488], "1019": [17, 63], "102": [34, 42, 43, 115, 221, 284, 294, 362, 472, 473], "10217060e": 3, "1024": [150, 158, 202, 247], "10242": [23, 24, 283, 286, 287, 294, 430, 443, 473], "10244260e": 3, "102714": 55, "103": [34, 43, 115, 170, 181, 302, 472, 473], "10332125e": 3, "10349025e": 3, "10363756e": 3, "1038": [115, 223, 251, 262, 280], "104": [34, 43, 247, 472, 473], "104073": 58, "1042": [101, 115], "104223": 34, "10426": [105, 278], "104292352": 71, "104293434": 41, "104535": 34, "1046": [104, 112, 155, 158, 488], "10493952": 10, "104956": 34, "105": [34, 43, 472, 473], "10509354": [115, 384], "1052": [57, 60, 61, 101, 115, 488], "105373": 58, "1054": 473, "105434": 58, "105651": 58, "1058": [43, 47, 115, 196, 488], "105981": 58, "106": [28, 34, 43, 74, 83, 97, 112, 115, 192, 196, 225, 227, 231, 252, 253, 256, 472, 473, 488], "1062": 473, "1063736": [3, 32, 33, 39, 99, 115, 212, 264], "1064": [115, 196], "106438": 58, "106460": 58, "106742": 58, "106895": 58, "107": [7, 8, 18, 20, 25, 27, 28, 34, 43, 59, 61, 65, 68, 73, 74, 77, 79, 81, 82, 85, 89, 91, 94, 105, 108, 109, 472, 473, 488], "107012": 58, "107145": 58, "107229": 58, "1073": [115, 170, 181, 192, 196, 227, 253, 362], "10743428e": 3, "107488": 58, "107567": 58, "1078": 473, "108": [28, 34, 43, 73, 472, 473, 488], "1080": [115, 384], "108038": 58, "108046": 6, "108058": 58, "108176": 58, "1082": [34, 155, 158], "108211": 58, "108325": 58, "108401": 58, "108440": 58, "10846516e": 3, "108591": 58, "108609536": 71, "108632": 58, "108723": 58, "108875": 58, "108937": 58, "108990": 58, "109": [2, 5, 8, 15, 21, 34, 43, 45, 46, 47, 58, 92, 152, 158, 242, 253, 472, 473, 488], "1090": [50, 473], "109066": 58, "109090": 58, "109104": 58, "1093": [71, 115, 159, 192, 200, 225, 246, 252], "109387": 58, "1095": 473, "109540": 58, "109616": 58, "109654": 58, "1097": [115, 205, 206, 207, 208, 209, 230, 255, 283], "109731": 58, "109769": 58, "1098": 473, "10_task": 110, "10a": [64, 472], "10b": 64, "10k": 110, "10mm": 51, "10th": 42, "10x10": [42, 43], "11": [3, 6, 17, 28, 34, 40, 42, 43, 44, 46, 51, 55, 64, 66, 67, 71, 73, 74, 92, 99, 105, 115, 119, 131, 140, 143, 144, 145, 153, 192, 196, 199, 200, 211, 217, 218, 245, 246, 274, 286, 287, 294, 302, 324, 325, 326, 330, 331, 332, 337, 342, 350, 352, 353, 354, 357, 372, 373, 374, 424, 437, 445, 449, 463, 464, 465, 466, 467, 468, 472, 473, 488, 490], "110": [34, 43, 87, 115, 255, 262, 280, 472, 473], "1101": [110, 112, 115, 338, 461, 488], "11020": 105, "11021": 105, "110301": 58, "110644": 58, "11072": 92, "1109": [46, 50, 51, 115, 164, 171, 193, 196, 244, 305, 306, 448, 454], "111": [34, 43, 55, 63, 92, 472, 473], "1111": [104, 115, 384], "1112": 191, "1116": 472, "112": [34, 43, 94, 111, 115, 361, 362, 472, 473], "11208": 92, "1122": 473, "1125": [115, 225, 231, 252, 256], "1126": [3, 32, 33, 39, 60, 99, 115, 181, 196, 203, 212, 244, 258, 264], "112a": 34, "112b": 34, "113": [28, 34, 43, 83, 111, 202, 472, 473, 488], "113442816": 71, "1139": [115, 196, 244], "114": [13, 34, 43, 46, 80, 143, 158, 472, 473], "11411456": 6, "1143": 473, "11430765e": 3, "114769": 34, "114926": 34, "115": [34, 43, 53, 72, 100, 115, 143, 158, 472, 473], "115105": 34, "1152": [115, 225, 231, 252, 256], "11534336": 71, "1155": [151, 158], "115557": 34, "1156": 473, "11599448e": 3, "116": [34, 43, 73, 193, 472, 473], "1161": [6, 473], "1162": [115, 222, 227, 253], "116290": [115, 226, 260], "1165": [115, 225, 231, 252, 256], "117": [10, 14, 28, 34, 43, 94, 152, 158, 193, 242, 472, 473, 488], "1170": 473, "117126": [115, 202, 247], "1171599": [115, 181], "117228": 34, "11752": 92, "11760": 92, "1177": [112, 115, 305, 488], "11777843e": 3, "11779366e": 3, "1178": 100, "118": [32, 34, 43, 472, 473], "1180": [115, 305], "118095872": 71, "1181": 34, "11872": 92, "1188": 472, "118a": 34, "119": [34, 43, 73, 131, 158, 472, 473], "1190": 473, "1194": [42, 47, 488], "1194144": [60, 115, 203, 258], "11942": 10, "11a": [34, 472], "12": [6, 26, 33, 34, 40, 42, 43, 45, 46, 47, 50, 51, 55, 58, 60, 61, 64, 65, 68, 69, 70, 74, 78, 79, 81, 90, 92, 93, 97, 99, 101, 102, 105, 109, 111, 112, 115, 119, 122, 124, 125, 131, 133, 149, 154, 155, 158, 171, 172, 185, 186, 193, 196, 201, 227, 242, 244, 251, 253, 261, 323, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 449, 465, 472, 473, 488], "120": [34, 43, 45, 85, 100, 115, 230, 255, 472, 473], "1206": [115, 172, 181], "1207": [115, 172, 233, 236], "120742": 58, "12096": 11, "121": [34, 43, 67, 472, 473], "12100705e": 3, "12124289e": 3, "1214": 473, "1215": 473, "122": [34, 43, 67, 73, 93, 105, 119, 158, 196, 244, 261, 472, 473], "122246": 58, "12230060e": 3, "1224": [472, 473], "12249799e": 3, "12288589e": 3, "1229": [107, 108], "123": [34, 43, 47, 247, 472, 473, 488], "1230": 473, "123084800": 71, "123176": 92, "12339021e": 3, "1237": 35, "1238": [137, 158], "12393": 472, "123e": 55, "124": [4, 34, 39, 42, 43, 111, 472, 473], "1241": [53, 61, 488], "1242": 173, "124367": 34, "1246": 473, "125": [32, 34, 42, 43, 73, 101, 115, 472, 473], "12516": 52, "1255": 473, "1256": [115, 211, 473], "1257": [105, 473], "126": [6, 34, 43, 45, 58, 60, 61, 72, 92, 103, 152, 158, 472, 473, 488], "126069": 34, "1261": 473, "12645280e": 3, "1265": [115, 211], "126558208": 4, "127": [34, 43, 140, 158, 472, 473], "1271": [115, 196], "1273": 473, "12752": 92, "12760286e": 3, "127795200": 71, "127944": 55, "128": [34, 43, 65, 67, 69, 85, 93, 106, 150, 158, 202, 247, 472, 473], "12811649e": 3, "1282": [50, 115, 164, 306], "1285": [50, 115, 164, 306], "1285615": 244, "12883212e": 3, "1289": 473, "129": [34, 43, 72, 122, 158, 472, 473], "1290": 473, "1294": [115, 196], "1295": [28, 488], "1296": 10, "12a": 34, "12mm": 95, "12th": [115, 196], "13": [6, 26, 28, 34, 55, 58, 64, 71, 72, 74, 78, 92, 102, 105, 109, 112, 115, 119, 125, 127, 129, 131, 158, 170, 197, 201, 222, 232, 242, 244, 245, 251, 253, 260, 281, 307, 311, 317, 337, 342, 350, 352, 353, 354, 357, 361, 368, 369, 384, 420, 452, 453, 472, 473, 488], "130": [34, 43, 472, 473], "13040": [115, 227, 253], "1304239304725877": 70, "130424832": 4, "13045": [115, 227, 253], "13045940e": 3, "1307": 105, "13075108e": 3, "131": [34, 43, 73, 115, 230, 255, 472, 473], "1314": 473, "132": [34, 43, 51, 54, 472, 473], "1327": 473, "132784128": 71, "1328": [46, 115, 171], "13286163e": 3, "133": [34, 43, 472, 473], "1335": 473, "1336": [146, 158], "1337": [47, 488], "1338": 40, "13381859e": 3, "1339": 473, "134": [34, 43, 53, 94, 100, 115, 152, 158, 472, 473], "1340": [46, 115, 171], "1341": [47, 488], "13410424e": 3, "134169": 52, "1342": 31, "134263085": 71, "134325": 34, "13464196e": 3, "135": [32, 34, 43, 73, 472, 473], "1350": [52, 163, 449, 451], "1350mm": [449, 451], "1355": 473, "1357": 473, "1358": [60, 115, 203, 258], "136": [34, 43, 472, 473], "1361": [60, 115, 203, 258, 473], "13630624e": 3, "13672972e": 3, "137": [34, 43, 73, 472, 473], "1370": [141, 158], "1371": [115, 181], "1372": 473, "1375": 473, "137613": 34, "1377": 473, "13779411e": 3, "138": [34, 43, 472, 473], "13823": 34, "1384": 473, "1389": 473, "139": [34, 43, 472, 473], "13936": 92, "1395": 473, "1396": 473, "1397": 473, "13th": [50, 115, 164, 306], "14": [4, 6, 8, 19, 31, 34, 39, 50, 54, 55, 60, 61, 64, 70, 71, 78, 92, 105, 115, 120, 122, 129, 136, 138, 139, 140, 143, 146, 158, 170, 196, 200, 225, 246, 252, 438, 472, 473, 488], "140": [34, 42, 43, 73, 93, 97, 472, 473, 488], "1402": 473, "140209": 34, "141": [34, 43, 123, 158, 255, 472, 473], "141601": 34, "141e": 55, "142": [34, 43, 71, 131, 158, 472, 473], "1420": 78, "14229255e": 3, "1429": [101, 115], "14298686e": 3, "143": [34, 43, 73, 472, 473], "1430": [54, 61, 488], "1432": 115, "1433": 52, "1435": 473, "143717": 34, "1438": [101, 115, 473], "144": [34, 43, 115, 198, 270, 472, 473], "14427898e": 3, "14448": 92, "1445": 115, "1447": [3, 47, 99, 488], "144768": 34, "1448": [3, 33, 99], "1449": [3, 99], "145": [34, 43, 115, 165, 472, 473], "1450": [3, 99], "1451": [3, 99], "1452": [3, 95, 99], "1456": [28, 488], "1457": 26, "1458": 473, "146": [34, 43, 73, 134, 158, 472, 473], "1460": 473, "14638106e": 3, "14640": 92, "1466": 473, "1467": [104, 115, 384], "147": [34, 43, 472, 473], "147067": 34, "147577": 34, "1476": 34, "148": [34, 43, 472, 473], "1483": 473, "14857": 34, "149": [34, 43, 73, 472, 473], "1491": 473, "149296": 34, "1494": [50, 52], "1495": [50, 52], "1497": 473, "1498": [115, 222, 473], "14991417e": 3, "14a": [34, 64, 472], "15": [6, 23, 25, 31, 34, 37, 51, 53, 55, 63, 64, 66, 67, 70, 71, 73, 74, 78, 79, 81, 83, 85, 88, 92, 95, 105, 109, 112, 115, 119, 123, 126, 127, 139, 143, 153, 158, 193, 200, 232, 242, 254, 368, 369, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 420, 452, 453, 472, 473, 488], "150": [26, 34, 43, 115, 185, 420, 472, 473], "1500": 89, "15035044e": 3, "150482": 34, "1507": [115, 222], "15088": 92, "1509": [2, 16, 19, 31, 37, 42, 44, 45, 50, 88, 104, 108], "151": [10, 34, 43, 73, 105, 109, 472, 473], "151677": 55, "152": [34, 43, 115, 179, 188, 196, 221, 472, 473], "152188": 34, "1523": [115, 140, 158, 170], "1527": 473, "153": [34, 43, 73, 472, 473], "15343397e": 3, "15346189e": 3, "1536": [141, 158], "1539": 473, "153mb": 274, "154": [34, 43, 58, 115, 361, 362, 420, 472, 473], "15426175e": 3, "15473607e": 3, "155": [34, 43, 115, 211, 261, 472, 473], "1550": 473, "15536": 92, "155444": 55, "1558": [111, 112, 488], "15583": 103, "156": [34, 43, 73, 472, 473], "15611": 34, "15648735e": 3, "1565": [115, 192], "156681": 34, "1567": [115, 192], "156a": 34, "157": [34, 43, 472, 473], "1570": 473, "15720448": 71, "1577": 473, "158": [34, 43, 115, 420, 472, 473], "1582": 473, "1583": [115, 181], "1585": [115, 181], "158513": 34, "15886206e": 3, "15892480": 6, "158e": 55, "159": [34, 43, 73, 78, 83, 95, 97, 107, 112, 472, 473, 488], "1594": 80, "1595": [141, 158], "16": [6, 26, 31, 33, 34, 35, 41, 50, 51, 55, 56, 60, 64, 65, 67, 68, 71, 77, 78, 80, 81, 85, 92, 105, 107, 144, 151, 158, 172, 185, 191, 211, 228, 251, 366, 369, 371, 449, 472, 473, 486], "160": [34, 43, 60, 66, 74, 85, 115, 167, 203, 240, 258, 300, 301, 471, 472, 473, 488], "1600": [320, 333, 459, 473], "160110": [115, 262, 280], "16032": 92, "1606": [115, 165], "161": [28, 34, 43, 472, 473, 488], "1617": 473, "1619": 473, "161a": 34, "162": [11, 34, 43, 73, 115, 211, 472, 473], "1620": 6, "1621": 473, "16236544": 22, "162682": 51, "1627": 473, "162822": 34, "163": [34, 43, 58, 472, 473], "1631": 473, "1637": 473, "1638": 473, "163842": [283, 286, 287, 294, 430, 443], "163956": 64, "163e": 55, "164": [34, 43, 58, 73, 472, 473], "1640": 473, "16426462e": 3, "1646": 473, "16480000e": 3, "164a": 34, "165": [34, 43, 58, 472, 473], "16504713e": 3, "166": [34, 43, 58, 71, 72, 115, 165, 472, 473], "166999999999994": 57, "167": [25, 28, 34, 43, 58, 73, 193, 242, 472, 473, 488], "1671": 473, "16718592e": 3, "1673": 473, "16786294e": 3, "168": [34, 43, 56, 57, 58, 60, 90, 92, 163, 472, 473], "169": [34, 43, 472, 473], "1691": 473, "1694": 473, "1699": 473, "17": [6, 18, 28, 31, 33, 34, 46, 47, 49, 50, 55, 64, 81, 92, 105, 112, 115, 129, 143, 158, 192, 193, 225, 231, 242, 252, 256, 472, 473, 488], "170": [34, 43, 73, 193, 472, 473], "170346": 34, "1704": 473, "1705": [143, 158], "17095948e": 3, "171": [34, 43, 58, 115, 193, 211, 362, 472, 473], "17136848e": 3, "1716": 473, "172": [34, 43, 115, 167, 255, 300, 301, 472, 473], "17266681e": 3, "173": [34, 43, 73, 472, 473], "1730": 473, "17327": 105, "17328": 105, "17329": 105, "17330": 105, "17331": 105, "17332": 105, "17333": 105, "17334": 105, "17335": 105, "17336": 105, "17337": 105, "17338": 105, "17339": 105, "17340": 105, "17341": 105, "17342": 105, "17343": 105, "17344": 105, "17384412e": 3, "174": [34, 43, 58, 115, 361, 362, 472, 473], "174325": 55, "17435241e": 3, "175": [34, 43, 472, 473], "17555633e": 3, "17563544e": 3, "1757": 473, "17596782e": 3, "176": [34, 43, 63, 73, 103, 472, 473], "17658664e": 3, "177": [34, 43, 472, 473], "17736": 103, "1775": 473, "178": [34, 43, 472, 473], "1780": 42, "17806240e": 3, "178757632": 102, "1789": 473, "179": [23, 28, 34, 43, 115, 165, 200, 472, 473, 488], "1792": 473, "1796": 473, "17989303e": 3, "179998": 34, "18": [6, 28, 34, 55, 57, 60, 63, 64, 71, 73, 74, 92, 99, 104, 105, 109, 112, 115, 120, 136, 143, 153, 158, 186, 192, 196, 201, 211, 261, 436, 438, 439, 472, 473, 486, 488], "180": [34, 43, 85, 115, 143, 158, 167, 196, 300, 301, 436, 438, 439, 472, 473], "180063": [115, 223, 251], "1804": 473, "18072": 92, "1808": 473, "181": [34, 43, 77, 115, 315, 472, 473], "18107422e": 3, "18129429e": 3, "182": [34, 43, 248, 249, 252, 472, 473], "1822": 473, "183": [34, 43, 472, 473], "1836": 473, "184": [34, 43, 472, 473], "1842": 473, "1845": 473, "185": [5, 8, 34, 43, 472, 473, 488], "18500315e": 3, "1851": 473, "18518242e": 3, "186": [34, 43, 472, 473], "1861819": 20, "1866": 473, "186859": 34, "1869": 473, "18696943e": 3, "187": [34, 43, 58, 115, 361, 362, 472, 473], "187135": 34, "18720270e": 3, "18728": 92, "188": [34, 43, 73, 472, 473], "18822276e": 3, "1888": [146, 158], "189": [32, 34, 43, 115, 338, 345, 461, 472, 473], "1898": 473, "18a": 472, "19": [6, 34, 43, 55, 64, 67, 74, 78, 92, 97, 105, 115, 124, 127, 131, 133, 146, 158, 193, 194, 219, 222, 223, 225, 228, 229, 230, 231, 241, 242, 250, 251, 252, 255, 256, 281, 282, 312, 313, 472, 473, 488], "190": [34, 43, 472, 473], "190333": 34, "190472": 64, "1905": 473, "1906": 473, "191": [34, 43, 73, 472, 473], "19114114": 22, "1914": [115, 199, 245], "1917": 473, "192": [34, 43, 53, 85, 100, 115, 472, 473], "1920": 473, "19272": 92, "1928": [115, 199, 245], "19296": 92, "193": [34, 43, 251, 472, 473], "1935": [42, 115], "19380860e": 3, "19384404e": 3, "194": [34, 43, 115, 200, 472, 473], "1941": 473, "195": [34, 43, 49, 73, 115, 200, 472, 473], "1951": [42, 146, 158], "1952": [118, 146, 158], "1953": [146, 158], "1955": 473, "196": [34, 43, 472, 473], "197": [20, 34, 43, 196, 244, 345, 472, 473], "1971": 473, "1974": 473, "197666": 34, "19790483e": 3, "198": [34, 43, 73, 251, 472, 473], "1983": [115, 384], "1985": 473, "1987": 473, "199": [34, 43, 472, 473], "1991": 473, "1993": 473, "19935174e": 3, "1994": [115, 338, 461], "19958183e": 3, "1997": [115, 146, 158, 196, 230, 255], "1998": [49, 61, 115, 193, 200, 242, 488], "1999": [115, 129, 158, 200, 205, 206, 207, 208, 209, 213, 283, 473], "19a": [34, 472], "19b": [34, 472], "1a": [6, 34, 64, 472], "1b": [6, 64, 472], "1c": [6, 64, 472], "1d": [53, 107, 108, 117, 155, 158, 184, 186, 232, 302, 310, 312, 313, 316, 322, 338, 360, 364, 365, 366, 367, 368, 369, 370, 371, 372, 395, 402, 406, 412, 415, 449, 450, 455, 460, 461, 469, 471], "1e": [31, 40, 41, 42, 51, 111, 222, 233, 234, 303, 304, 308, 342, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 435, 438, 442, 448, 454], "1e3": 78, "1e4": [40, 298, 299, 300, 301], "1f": [46, 436, 439], "1hz": 240, "1min": 55, "1mm": [11, 124, 152, 158, 248, 249, 252, 290, 291, 293, 377], "1st": 57, "1x2": 43, "2": [2, 3, 4, 6, 7, 8, 10, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 84, 85, 88, 89, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 107, 109, 110, 113, 115, 118, 120, 122, 123, 124, 129, 138, 140, 141, 143, 144, 151, 152, 153, 159, 160, 163, 164, 165, 166, 170, 171, 172, 173, 175, 177, 181, 182, 185, 186, 192, 193, 195, 196, 198, 199, 200, 204, 205, 206, 207, 208, 209, 211, 213, 219, 220, 222, 223, 225, 227, 229, 230, 231, 232, 233, 234, 238, 239, 240, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 255, 256, 261, 262, 263, 264, 266, 270, 275, 277, 282, 283, 288, 289, 292, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 320, 322, 323, 327, 329, 333, 335, 336, 338, 344, 345, 348, 349, 350, 351, 354, 355, 357, 360, 361, 362, 365, 366, 367, 368, 369, 370, 371, 376, 377, 378, 379, 380, 381, 383, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 421, 429, 431, 432, 433, 434, 435, 436, 438, 439, 440, 442, 448, 449, 451, 452, 453, 455, 458, 461, 462, 471, 472, 473, 486, 487, 488, 490], "20": [6, 15, 22, 25, 28, 34, 35, 40, 41, 43, 46, 47, 50, 52, 54, 56, 59, 60, 64, 67, 70, 71, 73, 79, 82, 92, 95, 101, 105, 108, 115, 122, 131, 136, 158, 159, 163, 165, 191, 192, 196, 227, 244, 253, 298, 299, 300, 301, 303, 304, 305, 306, 471, 472, 473, 488], "200": [34, 43, 44, 45, 95, 105, 115, 159, 192, 196, 232, 240, 244, 252, 272, 303, 304, 472, 473], "2000": [5, 44, 51, 115, 146, 149, 158, 162, 184, 230, 255], "200007": [115, 230, 255], "2001": [3, 32, 33, 39, 99, 104, 115, 117, 169, 180, 184, 193, 212, 242, 264, 384, 489], "2002": [115, 193, 242], "2003": [71, 115, 307, 311, 473], "2004": [101, 115, 200, 246, 312, 313], "2005": [115, 211, 362], "2006": [72, 115, 170, 181, 196, 204, 211, 302, 312, 313], "2007": [67, 73, 115, 188, 198, 211, 222, 270, 344, 361, 362, 462], "2008": [29, 47, 113, 115, 159, 179, 186, 188, 274, 335, 340, 357, 364, 367, 370, 384, 412, 435, 440, 473, 488], "2009": [2, 22, 115, 123, 149, 152, 158, 179, 181, 188, 192, 196, 200, 213, 246, 253, 265, 266, 288, 289, 290, 291, 292, 293, 335, 384], "2009a": 196, "201": [33, 34, 39, 43, 47, 73, 472, 473, 488], "2010": [4, 23, 38, 39, 50, 60, 115, 138, 158, 159, 164, 166, 188, 196, 200, 213, 232, 233, 244, 254, 258, 305], "2011": [38, 46, 51, 60, 115, 118, 123, 138, 158, 159, 166, 170, 171, 188, 196, 213, 217, 219, 220, 225, 227, 243, 250, 252, 253, 256, 259, 275, 277, 361, 362], "2012": [51, 101, 115, 155, 158, 160, 165, 171, 172, 181, 188, 196, 217, 221, 233, 236, 245, 361, 362, 473], "2013": [58, 115, 146, 158, 159, 160, 170, 171, 191, 196, 202, 219, 240, 244, 250, 361], "2014": [51, 101, 104, 115, 162, 163, 170, 171, 192, 361, 384, 449], "2015": [115, 118, 119, 120, 121, 122, 123, 131, 132, 158, 171, 192, 198, 219, 220, 250, 270, 272, 275, 277, 361, 362], "20150641e": 3, "20153834": [50, 115, 164, 305], "2016": [50, 101, 115, 133, 134, 135, 136, 137, 158, 164, 262, 280, 306, 420], "20166460e": 3, "2017": [58, 115, 138, 139, 140, 158, 165, 167, 198, 223, 225, 251, 252, 270, 300, 301, 361, 362, 420, 473], "2018": [51, 58, 77, 115, 141, 142, 143, 158, 167, 188, 201, 202, 223, 251, 252, 261, 300, 301, 315, 338, 362, 448, 454, 461], "2019": [51, 53, 100, 115, 144, 145, 146, 158, 226, 260, 448, 454, 473], "202": [34, 43, 472, 473], "2020": [115, 147, 148, 149, 158, 202, 226, 247, 260], "20200": 92, "20206": 111, "20207": 111, "20208": 111, "2021": [150, 151, 152, 158, 193, 194, 199, 219, 222, 223, 225, 228, 229, 230, 231, 241, 242, 245, 250, 251, 252, 255, 256, 281, 282, 473], "2022": [153, 154, 155, 158], "2023": [124, 125, 126, 158], "2024": [128, 129, 130, 158], "2025": [110, 146, 158, 472, 473], "20275200": 71, "2028": [146, 158], "2029": 473, "203": [34, 43, 73, 472, 473], "20307968": 6, "2031": 473, "2033": 473, "2037": 473, "204": [34, 43, 472, 473], "2041": [51, 115], "204104": 52, "2043": 473, "2047": 473, "20480": [23, 24], "20484": [23, 24, 111, 467, 473], "204891": 34, "2049": [51, 115], "20499": [115, 196], "205": [34, 43, 472, 473], "20503": [115, 196], "2052": [146, 158, 473], "2053": 473, "2054": 473, "205584": 34, "2057": [146, 158], "2058": 473, "20589584e": 3, "206": [34, 43, 74, 115, 226, 260, 472, 473, 488], "20606401e": 3, "2063": [146, 158], "2064": 473, "20691790": [115, 166], "206928": 55, "207": [34, 43, 69, 73, 115, 200, 472, 473], "2070": 473, "20736": 92, "2074": 473, "208": [34, 43, 115, 159, 232, 472, 473], "208105": 64, "208286": 34, "2083": [146, 158], "2088": 92, "209": [34, 43, 472, 473], "2090": [146, 158], "209168": 34, "2093": 195, "2096": [115, 160], "209652396": 52, "209919": 34, "20a": 34, "20b": 34, "20c": 34, "20mm": [96, 181], "20t08": 472, "20t10": 110, "21": [6, 28, 30, 32, 34, 47, 56, 57, 60, 61, 64, 67, 71, 76, 78, 80, 83, 92, 105, 110, 127, 133, 151, 158, 211, 472, 473, 488], "210": [6, 23, 34, 43, 73, 78, 83, 115, 213, 338, 461, 472, 473, 488], "2104": 473, "2106": [115, 160], "2107": [146, 158], "211": [13, 28, 34, 43, 45, 472, 473, 488], "2110": 473, "2113378": [46, 115, 171], "211798": 34, "2118": [146, 158], "212": [34, 43, 45, 73, 251, 472, 473], "21213118e": 3, "2128": 473, "213": [34, 43, 472, 473], "2131": [42, 146, 158, 473], "21333": [115, 199, 245], "2136": 473, "2138": [146, 158], "213951": 6, "21395574e": 3, "214": [34, 43, 472, 473], "2142": [115, 196, 361, 362], "2144": 60, "21449": 473, "2148": 473, "215": [34, 43, 73, 472, 473], "21512242e": 3, "2152": 473, "2153": 473, "2154": [115, 196, 361, 362, 473], "2155": 473, "2157": [146, 158], "216": [3, 31, 34, 43, 472, 473], "2162": 473, "2163": [115, 473], "21653723": [115, 225, 231, 252, 256], "2166": [146, 158], "21662164e": 3, "2167": 473, "2169": [146, 158], "217": [34, 43, 472, 473], "21702399e": 3, "2172": [146, 158], "2175": 473, "2177": [115, 146, 158, 473], "218": [34, 43, 73, 248, 249, 252, 472, 473], "2181": 473, "2186": 473, "219": [34, 43, 472, 473], "2194": 473, "2195": [146, 158], "21953663e": 3, "2196": 472, "219633": 50, "219668": 34, "219713": 58, "21985815e": 3, "22": [2, 6, 8, 34, 47, 50, 51, 64, 71, 92, 105, 109, 115, 129, 133, 144, 153, 158, 200, 246, 340, 472, 473, 488], "220": [34, 43, 54, 61, 472, 473, 488], "2202": 473, "22034043e": 3, "220446049250313e": 81, "2207": 473, "2209": 115, "22091962e": 3, "221": [34, 43, 73, 115, 202, 247, 472, 473], "22103e": 45, "2212": [146, 158], "221217": 58, "2214": [146, 158], "22197324e": 3, "222": [34, 43, 472, 473], "2221": [146, 158], "2224": 473, "2229": 115, "223": [34, 43, 115, 213, 472, 473], "2231": [146, 158], "223389": 34, "2234": 473, "22348585e": 3, "2235": [146, 158, 473], "2239": 473, "223948": 34, "22399468e": 3, "224": [34, 43, 73, 472, 473], "2240": [146, 158], "2242": 473, "2243": 473, "2245": 473, "2246": 473, "2248": [146, 158], "225": [34, 43, 472, 473], "2251": 473, "2255": [146, 158], "226": [34, 43, 472, 473], "22602778e": 3, "22616607e": 3, "2264": 473, "2269": 473, "22691604e": 3, "227": [34, 43, 64, 72, 73, 472, 473], "227098e": 50, "2272": [147, 158], "2274": 473, "2277": 473, "2278": 473, "22785298e": 3, "228": [34, 43, 472, 473], "22802": 473, "2282": [153, 158], "228201": 34, "228e": 55, "229": [34, 43, 251, 472, 473], "2290": [147, 158], "2299": [149, 158], "23": [6, 31, 34, 43, 64, 70, 71, 73, 74, 92, 95, 97, 101, 102, 105, 109, 112, 115, 196, 227, 244, 253, 299, 304, 472, 473, 488], "230": [34, 43, 73, 472, 473], "2300": [148, 158], "2302": [148, 158], "23027933e": 3, "2304": [149, 158], "23066060e": 3, "2307": [149, 158], "2308": [47, 148, 158, 488], "2309": [41, 473], "231": [34, 43, 472, 473], "2312": [148, 158, 473], "2319": 473, "232": [34, 43, 60, 70, 74, 472, 473, 488], "2325": 473, "23252500e": 3, "23264": 92, "2327": [149, 158], "23291083e": 3, "233": [34, 43, 345, 472, 473], "23348444e": 3, "23386736e": 3, "23391068e": 3, "234": [34, 43, 73, 472, 473], "2344": [83, 488], "2345": 76, "23477512e": 3, "23478649e": 3, "235": [34, 43, 472, 473], "23552": 92, "23571": 34, "2358": [95, 97, 473, 488], "236": [31, 34, 43, 73, 472, 473], "236279": 58, "23639986e": 3, "237": [34, 43, 472, 473], "237783": 58, "2379": 473, "238": [34, 43, 115, 230, 255, 472, 473], "2385": 473, "2388": 473, "239": [17, 28, 34, 43, 472, 473, 488], "23919586e": 3, "2395": 473, "24": [6, 34, 44, 46, 47, 53, 60, 64, 70, 71, 92, 105, 107, 126, 151, 158, 320, 322, 323, 327, 361, 472, 473, 488], "240": [34, 43, 472, 473], "2401": 473, "2409": 473, "241": [10, 28, 34, 43, 472, 473, 488], "2410": 473, "2411": 473, "241636": 34, "24178474e": 3, "242": [34, 43, 115, 230, 255, 472, 473], "242388": 34, "2425": [3, 32, 33, 39, 99, 115, 212, 264], "24256x24256": 51, "2429": [148, 158], "243": [18, 28, 34, 43, 472, 473, 488], "2430": [3, 32, 33, 39, 99, 115, 212, 264], "24359": 103, "244": [34, 43, 472, 473], "2440": 473, "244318208": 102, "2446": 473, "2449": 473, "24492420e": 3, "245": [34, 43, 50, 61, 472, 473, 488], "24510464": 71, "2453": 473, "246": [34, 43, 73, 472, 473], "2462": 473, "2465": 473, "2466": 473, "2467": 473, "247": [34, 43, 472, 473], "2471": 473, "247356": 34, "2478": 473, "2479": 473, "248": [34, 43, 73, 472, 473], "2482": 473, "2485": 473, "24879104": 6, "249": [34, 43, 108, 112, 473, 488], "24912419e": 3, "2494": 473, "249686": 34, "25": [6, 8, 16, 24, 28, 31, 32, 33, 34, 37, 42, 43, 47, 64, 65, 78, 92, 95, 96, 99, 105, 119, 158, 160, 192, 272, 310, 312, 313, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 433, 441, 443, 444, 445, 472, 473, 488], "250": [34, 43, 67, 115, 473], "2506": 473, "2509": [149, 158], "251": [34, 43, 73, 473], "2511": 473, "25184": 92, "251e": 55, "252": [34, 43, 472, 473], "2520": 64, "253": [34, 43, 473], "2531": 473, "2532": [151, 158], "2539": 473, "254": [34, 43, 73, 119, 158, 473], "254210": 64, "2543": 473, "2544": 473, "254408": 34, "255": [34, 43, 152, 158, 473], "2551": 473, "25516704e": 3, "2553": [150, 158, 473], "2555": 473, "256": [4, 34, 43, 85, 150, 158, 202, 247, 256, 473], "25602848e": 3, "2561": 473, "2562": [283, 286, 287, 294, 443], "25623789e": 3, "256269": 34, "2565": 473, "2567": [150, 158], "257": [34, 43, 49, 73, 473], "257986": 64, "258": [34, 43, 473], "2588": 473, "259": [34, 43, 473], "25937808e": 3, "2594": 473, "2598": 473, "26": [34, 63, 64, 71, 73, 76, 87, 92, 97, 105, 136, 158, 450, 472, 473, 488], "260": [34, 43, 73, 95, 473], "2606": [150, 158], "2608": 473, "260924": 34, "261": [34, 43, 115, 170, 473], "2617": 473, "2619": [150, 158], "262": [34, 43, 115, 473], "2622": [150, 158], "263": [34, 43, 251, 473], "2630": 473, "2635": 473, "2636": [101, 115, 165], "2637": 473, "263e": 55, "264": [34, 43, 60, 73, 224, 259, 473], "2643": [101, 115, 150, 158, 165], "2645": 349, "2649": 473, "265": [34, 43, 473], "2650": 473, "26522": 45, "2655": [153, 158], "266": [34, 43, 73, 473], "2663": 473, "2669": [150, 158], "267": [34, 43, 115, 361, 362, 473], "2674": [150, 158, 473], "2675": [105, 109], "2676": [105, 109], "2678": 473, "26796285e": 3, "268": [34, 43, 473], "2684": [150, 158], "268412": 34, "269": [34, 43, 73, 115, 170, 473], "269133": 6, "2696": [150, 158], "2697": [150, 158], "27": [6, 16, 17, 18, 22, 23, 28, 31, 34, 41, 64, 66, 71, 72, 91, 92, 94, 105, 111, 112, 115, 196, 204, 362, 449, 451, 472, 473, 486, 488], "270": [34, 43, 436, 438, 439, 473], "2702": [150, 158], "27048": 92, "2707": [151, 158], "270843": 34, "271": [34, 43, 473], "2712": [150, 158], "2714": [150, 158], "2715": [124, 155, 158], "2717": 473, "2719": [150, 158, 473], "272": [34, 43, 115, 205, 206, 207, 208, 209, 283, 473], "272182": 52, "2723": [152, 158], "2725": 473, "273": [34, 43, 72, 74, 115, 193, 242, 473, 488], "2730": [151, 158], "2732": [151, 158], "273301504": 4, "273473536": 4, "27357129e": 3, "2738": [152, 158], "274": [34, 43, 473], "27426795e": 3, "2743": 473, "2745": [151, 158], "275": [34, 43, 73, 473], "2750": 473, "2755": [152, 158, 473], "2757": 473, "276": [34, 43, 473], "2767": [151, 158], "2769": 473, "277": [34, 43, 115, 361, 362, 473], "27701258e": 3, "2774": 473, "2775": 473, "278": [34, 43, 73, 473], "2783": 473, "278396": 34, "2789": 473, "279": [34, 43, 473], "2790": [151, 158], "2792": [151, 158], "279282": 34, "2797": 473, "2798": [151, 158], "27mm": [449, 451], "28": [34, 47, 60, 64, 71, 90, 92, 105, 115, 119, 143, 158, 195, 225, 243, 252, 472, 473], "280": [34, 43, 473], "28028012e": 3, "2804": [126, 158], "2805": [151, 158], "28052427e": 3, "2806": [151, 158, 473], "2807": 473, "28087447e": 3, "28093643e": 3, "281": [34, 43, 473], "2810": [151, 158], "28111395e": 3, "2815": [151, 158], "2815524": [51, 115, 448, 454], "2816": 473, "2818": [105, 109], "282": [34, 43, 473], "2821": [151, 153, 158], "2823": 473, "2826": [21, 50, 52, 151, 158, 473], "2827": 473, "2828": [115, 170], "28286976": [41, 103], "28288": 34, "2829": [153, 158], "283": [34, 43, 473], "2831": [151, 158], "2833": [127, 158], "2834": [105, 109], "2835": 473, "2836": 473, "284": [34, 43, 67, 73, 115, 205, 206, 207, 208, 209, 283, 473], "28481": 34, "285": [34, 43, 473], "2858": [151, 158], "2859": [153, 158], "286": [34, 43, 473], "2860": 42, "2867": [151, 158], "2868": [151, 158], "2869": [151, 158], "287": [34, 43, 473], "28703023e": 3, "28713817e": 3, "2875": [152, 158], "2876": [152, 158], "28797852e": 3, "288": [34, 43, 50, 67, 73, 115, 164, 305, 472, 473], "2880": [153, 158], "288251": 34, "289": [34, 43, 103, 112, 115, 193, 242, 473, 488], "2890": 473, "289828": 34, "29": [21, 31, 34, 37, 52, 61, 64, 71, 73, 77, 82, 83, 92, 105, 131, 158, 472, 473, 488], "290": [34, 43, 95, 473], "2900": [152, 158], "2902": [153, 158], "2904": [152, 158, 473], "29073408": 71, "291": [34, 43, 67, 73, 74, 472, 473, 488], "291168628": 4, "29133663e": 3, "291568": 34, "29172299e": 3, "291882": 34, "2919": 473, "292": [34, 43, 66, 115, 384, 473], "29212672": 6, "29243257e": 3, "292458": 34, "292525e": 34, "2928": [152, 158, 473], "292987": 34, "293": [3, 32, 33, 34, 39, 43, 67, 73, 99, 115, 212, 264, 473], "2934": 473, "2939": 473, "293e": 55, "294": [6, 34, 43, 88, 97, 473, 488], "2941": [152, 158], "2942": [153, 158], "2944": [152, 158], "2945": 473, "2946": [153, 158], "295": [34, 43, 473], "29514546e": 3, "2953": [154, 158], "296": [34, 43, 67, 73, 96, 97, 473, 488], "2962": 473, "2965": [153, 158], "297": [34, 41, 43, 473], "29727535e": 3, "2977": [51, 61, 488], "297e": 55, "298": [8, 34, 43, 115, 384, 473, 488], "2986": 473, "298717": 34, "299": [4, 34, 43, 50, 54, 56, 115, 164, 305, 473], "299271": 34, "299562": 34, "29a": [34, 472], "29b": 34, "2a": [6, 34, 64, 472], "2a2e5a5707983d509d9319c692c867ab": 10, "2b": [6, 64, 472], "2bqxn": 66, "2c": [64, 472], "2d": [40, 53, 56, 85, 92, 93, 99, 105, 116, 155, 158, 165, 168, 183, 186, 233, 234, 235, 236, 237, 305, 306, 307, 316, 340, 360, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 385, 387, 388, 389, 390, 391, 392, 393, 394, 399, 401, 403, 405, 407, 409, 411, 427, 446, 447, 448, 449, 455, 456, 465, 469, 471, 479, 489], "2dev": 490, "2f": [31, 33, 43, 44, 45, 46, 51, 59, 90], "2g": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 425, 427, 428, 430, 434, 435, 436, 438, 439], "2min": [50, 58], "2mm": [11, 22, 58, 92, 124, 152, 158, 160, 170, 247, 248, 249, 473], "2nd": [3, 26, 30, 31, 33, 34, 35, 36, 37, 38, 40, 264], "2t": 228, "2x1": 43, "2x2": [43, 144, 158, 395, 397, 400, 414, 419, 425, 428, 433, 434, 435, 486], "3": [2, 3, 4, 6, 7, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 28, 31, 32, 33, 34, 35, 36, 38, 40, 42, 43, 44, 45, 46, 50, 51, 52, 53, 55, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 92, 94, 95, 97, 99, 100, 101, 102, 103, 105, 107, 108, 109, 111, 112, 115, 119, 123, 124, 128, 129, 133, 136, 137, 140, 143, 144, 145, 146, 151, 152, 153, 154, 159, 163, 165, 170, 171, 174, 175, 181, 185, 186, 192, 193, 196, 199, 200, 201, 205, 206, 207, 208, 209, 211, 213, 219, 225, 230, 231, 232, 233, 234, 238, 239, 240, 244, 245, 247, 250, 252, 254, 255, 256, 257, 261, 262, 267, 275, 277, 280, 283, 284, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 310, 312, 313, 315, 316, 320, 322, 323, 327, 333, 336, 337, 345, 347, 349, 350, 353, 355, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 378, 379, 381, 383, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 419, 421, 425, 427, 428, 431, 433, 434, 435, 436, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 457, 459, 471, 472, 473, 475, 486, 487, 488], "30": [3, 6, 10, 32, 33, 34, 37, 41, 42, 44, 46, 47, 50, 51, 53, 59, 64, 65, 68, 92, 100, 105, 109, 115, 133, 143, 158, 171, 241, 300, 301, 310, 312, 313, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 457, 472, 473, 488], "300": [27, 34, 43, 57, 63, 70, 101, 192, 226, 252, 260, 272, 473], "3000": 51, "3003": [153, 158], "3008": [153, 158], "3009": [153, 158], "301": [34, 43, 473], "3010": [153, 158, 473], "3013": [153, 158], "3015": [153, 158], "3016": [153, 158], "30176409": 6, "302": [34, 43, 119, 158, 473], "3021": [36, 47, 488], "30220402e": 3, "3025": [153, 158], "3026": [153, 158], "303": [34, 43, 473], "3030": [155, 158], "3033": [153, 158], "3035": [153, 158], "3036": [153, 158], "3037": 473, "3039": [153, 158], "304": [34, 43, 115, 171, 473], "3040": 473, "3041": [105, 109], "3042": [105, 109, 153, 158], "304337": 34, "3045": 473, "30493": 34, "305": [34, 43, 473], "3054": 473, "30545268e": 3, "306": [34, 43, 473], "3061": [153, 158], "3065": [153, 158, 473], "307": [34, 43, 473], "3072000": 71, "3073": [153, 158], "307532": 64, "3077": [153, 158], "3078": [153, 158], "308": [34, 43, 473], "3081": [153, 158], "3082": [153, 158], "3084": 473, "3085": 473, "3086": 473, "3087": 473, "3089": 473, "308e": 55, "309": [34, 43, 115, 198, 270, 473], "3090": [153, 158], "3093": [153, 158, 473], "3095": [115, 225, 252, 473], "3098": [154, 158], "31": [34, 36, 42, 47, 50, 71, 76, 83, 92, 115, 171, 211, 227, 253, 472, 473, 488], "310": [3, 34, 43, 473], "3102": [127, 158], "3105": [124, 158, 173], "3106": [153, 158], "3109": [153, 158, 473], "311": [34, 43, 473], "3111": [153, 158], "3113": 473, "31137902e": 3, "3114": [115, 225, 252], "3115": 473, "3118": 473, "312": [34, 43, 473], "3120": 473, "3125": [124, 155, 158, 473], "3126": [153, 158], "3127": [154, 158], "31277482e": 3, "313": [34, 43, 115, 196, 213, 473, 488], "3132": 473, "3133": [153, 158], "3134": 473, "3135": [153, 158, 473], "3137": [153, 158], "314": [34, 43, 115, 198, 270, 473], "3141": [155, 158], "314803244": 4, "315": [34, 43, 473], "3152": [154, 158, 473], "316": [34, 43, 473], "3160": 473, "3162112": 6, "3165": [154, 158], "3169": 473, "317": [34, 43, 473], "3172": [126, 158], "31723370e": 3, "3173": [125, 158], "3174": [154, 158], "31742315e": 3, "31769c9cee5cd55f045e62633d651f3d": 103, "3178": [154, 158], "3179": [154, 158], "318": [34, 43, 473], "3181": [124, 155, 158], "3184": [154, 158], "3185": [155, 158], "3186": 473, "3188": [154, 158], "3189": 473, "318e": 55, "319": [34, 43, 473], "3191": [127, 158], "31918907e": 3, "3193": [155, 158], "31950849e": 3, "3196": [124, 155, 158], "31a": 34, "32": [34, 35, 42, 55, 60, 61, 67, 85, 92, 102, 103, 186, 324, 325, 326, 330, 331, 332, 472, 473, 486, 488], "320": [34, 43, 115, 361, 473], "3201": [154, 158], "32015": 118, "32016": 118, "3203": [126, 158], "3204": 473, "3207": [154, 158], "3209": [155, 158, 473], "321": [34, 43, 95, 115, 171, 473], "32111": 34, "3216": [155, 158], "32178956e": 3, "3219": 473, "321921": 34, "322": [3, 8, 34, 43, 473, 488], "3220": [155, 158, 473], "32215335e": 3, "3222": [155, 158], "322679e": 50, "3227": [155, 158], "322726": 34, "322742": 50, "3228": 473, "3229": [155, 158], "323": [34, 43, 473], "3233": [155, 158], "3235": [155, 158], "3237": [124, 158], "32377270e": 3, "3238": 473, "324": [34, 43, 115, 181, 472, 473], "3241": [155, 158], "3248": 34, "3249": [115, 172], "325": [34, 43, 196, 244, 473], "3250": 473, "32504": 57, "3255": [155, 158], "32571392": 66, "3258": 473, "3259": [125, 158, 473], "326": [34, 43, 473], "3262": [155, 158], "32639609e": 3, "32696902e": 3, "327": [22, 28, 34, 43, 95, 107, 112, 115, 196, 213, 473, 488], "3270": 473, "32712": 92, "3274": [155, 158], "327741": 34, "328": [34, 43, 46, 56, 61, 473, 488], "3281": [155, 158], "3283": [155, 158], "328376320": 102, "3284": [155, 158], "3285": [127, 158], "3286": [155, 158], "3289": 473, "329": [34, 43, 60, 115, 203, 258, 473], "3292": [155, 158], "3293": [155, 158], "329567": 34, "3297": [155, 158], "32980": [105, 276], "33": [34, 45, 64, 71, 73, 92, 96, 107, 112, 115, 199, 201, 245, 261, 472, 473, 488], "330": [34, 43, 473], "3300": [155, 158], "3302": [155, 158], "3306": [155, 158], "331": [28, 34, 43, 473], "3311": [155, 158], "3312": [155, 158], "3317": [155, 158], "331865": 34, "332": [34, 43, 473], "3322": [155, 158], "33222836e": 3, "3324": 473, "3327": 473, "333": [34, 43, 473], "3333": [155, 158], "33349632": 71, "3337": [155, 158], "334": [34, 43, 473], "3344": 473, "33451168e": 3, "3346": 473, "3347": [124, 158], "335": [34, 43, 473], "3351": [125, 158], "3353": [125, 158], "3355": 473, "3356": 473, "336": [34, 43, 473], "3362": [125, 158], "337": [34, 43, 473], "3374": [124, 158], "3375": [124, 158], "338": [34, 43, 473], "3380": [124, 158], "33810398e": 3, "3382": 473, "3385": [124, 158], "33869015e": 3, "3389": [51, 115, 118, 162, 191, 195, 220, 221, 240, 243, 275, 277], "339": [34, 43, 473], "3390": [124, 158], "3392": 473, "3393": [45, 47, 488], "34": [16, 32, 34, 43, 47, 53, 64, 92, 115, 170, 472, 473, 488], "340": [34, 43, 473], "34028171e": 3, "3403": [124, 158], "34043811e": 3, "341": [34, 43, 115, 361, 473], "3410": 473, "3412": [124, 158], "341327": 34, "3414": [125, 158], "341729": 6, "342": [34, 43, 473], "3422": [124, 158], "3424": [124, 158], "34242788": 10, "3426": [124, 158], "3427": [124, 158], "3429": [124, 158], "343": [34, 43, 59, 61, 473, 488], "3430": [124, 158], "3433": [124, 158], "3436": [124, 158], "3437": 473, "34372": 473, "3439": [124, 158], "344": [34, 43, 473], "3440": [124, 158, 473], "3444": [125, 158], "3445": [125, 158], "3446": [124, 158], "3448832": 71, "3449": [124, 158], "345": [34, 43, 46, 473], "3450": 473, "3452": [124, 158], "3453": [124, 158, 473], "34532740": 66, "34599227e": 3, "346": [34, 43, 473], "3460": 473, "3462": [125, 158], "3465": [125, 158], "3468": 473, "347": [34, 43, 473], "3474": [125, 158], "347685": 34, "3477": [125, 158], "3478": [125, 158], "34792": [202, 247], "347e": 55, "348": [34, 43, 58, 92, 103, 473], "3483": [125, 158], "348351": 64, "3484": [125, 158], "3485": [125, 158], "3487": 473, "349": [12, 34, 43, 76, 473], "34906413e": 3, "3491": [125, 158], "349128": 34, "3498": [125, 158], "349998": 34, "35": [21, 31, 34, 55, 71, 73, 92, 119, 158, 193, 250, 275, 472, 473], "350": [34, 43, 67, 74, 473, 488], "351": [34, 43, 473], "35113714e": 3, "351326": 34, "352": [34, 43, 473], "352245": 34, "3523": [125, 158], "3525": [125, 158], "3527": 473, "353": [34, 43, 473], "3531": [125, 158], "35323911e": 3, "3538": [126, 158], "354": [34, 43, 473], "35434381e": 3, "3548": [125, 126, 158], "3549": [125, 158], "355": [34, 43, 473], "3550": [125, 158], "3551": [125, 158], "3552": [125, 158], "35522936e": 3, "3553": [125, 158], "3554": [125, 158], "3555": [125, 158], "3556": [126, 158], "355602": 34, "3557": [125, 158, 473], "3558": [125, 158], "356": [34, 43, 473], "3563": [125, 158], "3566": [126, 158], "357": [34, 43, 473], "35704233e": 3, "3572": 473, "358": [34, 43, 473], "35868080e": 3, "359": [34, 43, 473], "3593": 473, "3597": [126, 158], "35a": 472, "36": [6, 16, 17, 18, 34, 60, 64, 88, 91, 92, 94, 97, 111, 140, 143, 158, 193, 196, 227, 244, 472, 473, 486, 488], "360": [34, 43, 64, 72, 73, 74, 115, 204, 472, 473, 488], "3600": [125, 158], "360045": 34, "3601": [126, 158], "3603": 473, "3605": [125, 158], "3609": [126, 158], "36095792e": 3, "361": [34, 43, 473], "3614": [126, 158], "3615": [126, 158], "36177357e": 3, "361796": 34, "361a": 34, "362": [34, 473], "3622": 473, "3626": [125, 158], "3629": 473, "363": [34, 473], "3631": [125, 158], "3635": [125, 158], "36385": 34, "364": [34, 473], "3640": [126, 158], "3642": 473, "364282e": 50, "3644": [126, 158, 473], "364448": 34, "3646": [126, 158], "3647": [126, 158], "3648": [126, 158], "3649": 473, "365": [34, 473], "3650": [126, 158], "3651": [126, 158], "365571": 34, "366": [34, 473], "366314": 34, "3665": 473, "367": [34, 53, 473], "367151": 34, "36718576e": 3, "3673": 473, "3676": 473, "368": [34, 473], "3681": [126, 158], "369": [34, 115, 473], "3691": 473, "36991546e": 3, "37": [6, 34, 71, 82, 92, 95, 115, 122, 158, 361, 362, 462, 472, 473], "370": [4, 8, 34, 473, 488], "3700": 473, "371": [34, 72, 115, 204, 473], "3710": 473, "3717": 473, "372": [34, 473], "3722": [126, 158], "3723": [126, 158], "372383": 34, "37294351e": 3, "373": [34, 473], "3730": 473, "3732": [126, 158, 473], "3733": [126, 158, 473], "3735": 473, "3736": [126, 158], "3737": 473, "374": [34, 473], "37409855e": 3, "37416134e": 3, "3742": [126, 158], "3743": [126, 158, 473], "374435": 34, "375": [34, 473], "3751": 473, "375261": 34, "3753": [126, 158], "376": [34, 473], "3761": [127, 158], "37626474e": 3, "3763": 473, "3764": 473, "3765": 473, "3766": 473, "3768": 473, "37688": 92, "377": [34, 473], "3774": [126, 158], "3777": [126, 158], "37778080e": 3, "378": [6, 34, 88, 97, 473, 488], "3781": [126, 158], "378178": 34, "3783": [126, 158], "379": [34, 473], "3790": [126, 158], "3794": [126, 158], "3795": [126, 158], "3797": [126, 158], "37a": 472, "37b": 472, "38": [34, 51, 64, 92, 102, 111, 112, 143, 158, 472, 473, 488], "380": [34, 473], "3802": [126, 158], "3803": [126, 158], "38051840": 71, "381": [34, 104, 115, 384, 473], "3810": [126, 158], "3811": [126, 158], "3816": [126, 158], "38161654e": 3, "3819": [126, 158], "382": [34, 473], "38237699e": 3, "3827": [126, 158], "38273519e": 3, "383": [34, 473], "3833": [126, 158], "3836": [126, 158], "3838": [126, 158], "384": [34, 473], "3847": [126, 158], "384872": 34, "385": [34, 473], "3854": [126, 158], "3855": [126, 158], "3856": [126, 158], "3857": [126, 158], "385929": 64, "386": [34, 473], "3860": [126, 158], "3863": [115, 170, 181, 302], "3868": [115, 170, 181, 302], "387": [34, 473], "3873": [126, 158], "3879": [126, 158], "388": [34, 473], "38818048e": 3, "3888": 6, "38888888888888895": 3, "3889": 35, "389": [34, 94, 97, 473, 488], "3897": [126, 158], "389e": 55, "39": [3, 6, 8, 16, 34, 51, 53, 56, 61, 71, 73, 92, 131, 133, 136, 158, 201, 243, 250, 261, 472, 473, 488], "390": [34, 71, 473], "3905": 473, "3908": 473, "391": [34, 473], "3919": [126, 158], "392": [34, 473], "3921": [126, 158], "3927": [126, 158], "392956": 34, "393": [34, 473], "3934": [126, 158], "39346": 473, "3935": [127, 158], "39361418e": 3, "394": [34, 473], "3942": [126, 158], "3943": [126, 158], "3945": [126, 158], "3949": [129, 158], "395": [34, 473], "39532852e": 3, "396": [34, 473], "39666279e": 3, "397": [34, 104, 115, 384, 473], "3971": [126, 158], "397187": 34, "3973": [126, 158], "397476": 34, "398": [2, 8, 34, 473, 488], "3982": 473, "3987": [126, 158], "399": [34, 473], "3993": [127, 158], "3994": [126, 158], "3995": 473, "399994": 67, "3a": [6, 34, 64, 472], "3b": 472, "3c": 472, "3d": [1, 3, 7, 8, 9, 16, 17, 19, 20, 24, 25, 26, 28, 30, 31, 33, 35, 37, 38, 40, 44, 46, 49, 71, 76, 78, 84, 85, 95, 97, 101, 104, 106, 107, 111, 113, 115, 117, 122, 125, 129, 133, 140, 142, 143, 144, 146, 150, 151, 155, 158, 175, 179, 180, 181, 183, 185, 186, 196, 225, 230, 246, 248, 249, 252, 253, 254, 255, 276, 278, 285, 286, 287, 295, 298, 299, 300, 301, 302, 303, 304, 305, 306, 333, 335, 337, 339, 340, 343, 345, 346, 347, 348, 357, 364, 365, 366, 367, 368, 369, 370, 371, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 416, 417, 418, 420, 421, 427, 428, 430, 431, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 449, 450, 451, 455, 467, 471, 488, 489], "3dev": 439, "3dj2a": 102, "3f": [3, 6, 35, 46, 50, 57, 99], "3f1468dc43a408bf84510b07cee95049": 27, "3g": 82, "3mm": 228, "3rd": [21, 111, 427, 428, 434, 435, 442], "3v2": [129, 158, 193, 242], "3vrct": [202, 247], "3x3": [85, 185, 298, 299, 300, 301, 303, 304, 305, 306, 320, 333, 350, 353, 367, 370, 376, 378, 379, 381, 447], "3x3x3": [185, 275, 277, 449, 451], "4": [0, 3, 6, 7, 13, 15, 16, 19, 21, 24, 25, 28, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 46, 47, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 64, 66, 67, 68, 69, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 85, 87, 92, 93, 99, 100, 101, 102, 103, 105, 107, 109, 111, 112, 115, 119, 129, 131, 136, 139, 143, 144, 145, 146, 151, 159, 160, 163, 165, 170, 171, 172, 173, 181, 192, 196, 200, 204, 205, 206, 207, 208, 209, 211, 215, 217, 222, 223, 224, 230, 232, 234, 240, 255, 259, 262, 280, 283, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 338, 349, 350, 353, 354, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 378, 379, 381, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 425, 427, 428, 431, 432, 433, 434, 435, 446, 447, 448, 449, 461, 471, 472, 473, 486, 488], "40": [4, 21, 32, 33, 34, 40, 47, 55, 65, 92, 95, 110, 112, 194, 196, 241, 250, 275, 471, 472, 473, 488], "400": [34, 115, 166, 240, 252, 473], "400000": 67, "4001": [127, 158], "400515": 34, "40061503e": 3, "4008": 105, "400x500": 23, "401": 34, "40175": 76, "402": 34, "4022": [115, 227, 253], "40259912e": 3, "4028": [127, 158], "4029": [127, 158], "403": 34, "4037": [115, 227, 253], "404": 34, "4042": [127, 158], "404684": 34, "405": [34, 58, 115, 159, 160, 219, 250], "4051": [127, 158], "4058": 473, "406": 34, "40640": 92, "4067": [127, 158], "407": 34, "4070": [127, 158], "4071": [127, 158], "40740740740740744": 3, "407676": [115, 338, 461], "408": 34, "4081": 473, "40813797e": 3, "4086": [127, 158], "4087": 473, "409": 34, "4094": [127, 158], "40962": [283, 286, 287, 294, 443], "40979778e": 3, "4099": [127, 158], "40x64x64": 40, "41": [34, 51, 73, 82, 83, 92, 105, 115, 448, 454, 472, 473, 488], "410": [34, 115, 166], "4103": [127, 158, 473], "4108": 473, "411": 34, "4116": [127, 158], "412": 34, "4121": [127, 158], "4122": [127, 158], "4126": [129, 158, 473], "41273261e": 3, "413": [34, 109], "4131": [127, 158], "41325849e": 3, "4136": [127, 158], "4138": 473, "413969": 43, "414": 34, "4141": [127, 158], "41482598e": 3, "415": [34, 58, 115, 159, 160, 219, 250, 362], "4153": [127, 158], "41588961e": 3, "4159": [127, 158], "416": [34, 65, 222, 279], "416095": 34, "4166": [127, 158], "4167": [127, 158], "4168": [92, 127, 158], "417": [34, 97, 488], "41704209e": 3, "4172": 473, "4176": 472, "417917": 34, "418": [34, 90], "4180": [127, 158], "4188": [127, 158, 473], "418909": 58, "419": 34, "4191": [127, 158], "4195": 473, "41963632e": 3, "42": [6, 8, 10, 25, 34, 45, 64, 65, 74, 92, 93, 101, 105, 106, 109, 115, 193, 228, 472, 473, 486, 488], "420": 34, "4203": 473, "4204": [127, 158], "420413": 58, "4205": [129, 158], "4208": [126, 158], "421": 34, "4215": [127, 158], "4219": [127, 158], "422": [34, 51, 61, 488], "42208": 92, "4224": 473, "4225": [127, 158], "423": [34, 109], "4232": [128, 158], "4233": [127, 158], "4236": 473, "424": 34, "42459546e": 3, "424686": 34, "425": 34, "42528": 92, "42549684e": 3, "4255": [115, 128, 158, 172, 233, 236], "42561434e": 3, "4257": [128, 158], "4258": [128, 158], "426": [34, 473], "4263": 473, "42639360": 71, "426454": 34, "4266": [128, 158], "4267": [128, 158], "4269": [128, 158], "427": 34, "4270": [128, 158], "4273": [129, 158], "4274": [128, 158], "4279": [128, 158], "428": 34, "4284": [128, 158], "4285": [128, 158], "42851816e": 3, "4287": [130, 158], "429": 34, "4295": [128, 158], "4297": [128, 158], "42975414e": 3, "4298": [128, 158], "43": [10, 28, 34, 51, 92, 102, 104, 115, 131, 158, 245, 384, 472, 473, 488], "430": 34, "4302": [128, 158], "43029212e": 3, "43033039e": 3, "4304": [128, 158], "4307": [129, 158, 473], "4308": [128, 158], "431": 34, "4310": [128, 158], "4318": [128, 158], "432": [34, 45, 47, 64, 115, 159, 472, 488], "4320": [128, 158], "4325": [128, 158], "433": 34, "433094656": 102, "4334": [128, 158], "4337": [128, 158], "434": 34, "4343": [128, 158], "435": 34, "435127": 34, "43559662e": 3, "436": [34, 58, 115, 362], "4360": [129, 158], "437": [28, 34, 488], "438": [22, 34], "4384": [47, 488], "4385": 44, "439": 34, "4391": 473, "4392": [129, 158], "4397": [129, 158], "4399": 473, "44": [4, 34, 40, 47, 71, 73, 92, 115, 122, 158, 179, 335, 384, 472, 473, 488], "440": [34, 105], "4403": 473, "4407": [129, 158], "441": [34, 115, 159], "441012": 34, "4411": [129, 158], "4412": [129, 158], "4413": [129, 158], "4414": [129, 158], "4416": [129, 158], "442": 34, "443": 34, "4434": 473, "4435": 473, "4436": [129, 158], "4437": [129, 158], "444": [20, 34, 196, 244], "4442": [156, 158], "4444": 35, "4446": [129, 158], "4449": [52, 61, 488], "445": 34, "4452": [129, 158, 473], "446": 34, "4465": [129, 158], "4467": [129, 158], "4469": [129, 158], "447": 34, "4470": [129, 158], "4475": 473, "4476": [129, 158], "447911": 34, "448": 34, "4487": 473, "449": 34, "449202": 34, "4498": [129, 158], "44984": 92, "45": [6, 31, 33, 34, 51, 57, 64, 72, 74, 92, 108, 115, 472, 473, 488], "450": 34, "4507": [129, 158], "45093764e": 3, "451": 34, "45132209e": 3, "4515": 473, "451605": 52, "4518": 473, "452": 34, "453": 34, "454": [34, 473], "45402650e": 3, "4544": [129, 158], "455": 34, "4554": [129, 158], "4555": [129, 158], "4556": [129, 158], "4558": [129, 158], "45583539": 103, "456": 34, "456513": 34, "457": 34, "4570": [129, 158], "4571": [129, 158], "4574": [129, 158], "457669": 34, "4577": [129, 158], "458": 34, "4582": [129, 158], "4585": [129, 158], "459": 34, "4590": [129, 158, 473], "4593": [129, 158], "45955": 34, "46": [31, 34, 45, 47, 60, 64, 92, 94, 109, 119, 158, 186, 243, 245, 472, 473, 486, 488], "460": 34, "460020402": [115, 338, 461], "4607": [129, 158], "461": [34, 192, 272], "46107349e": 3, "461193": 64, "4612": [129, 158], "4618": [129, 158], "462": [6, 34], "4620": [129, 158], "463": [34, 115, 193, 242], "463430": 6, "4635": [129, 158], "4637": [129, 158], "464": [3, 34, 40, 99], "46410116e": 3, "4643": 473, "465": [31, 34, 47, 488], "4652": [129, 158], "4656": [129, 158], "465647": 34, "4657": 473, "4659": [129, 158], "465973": 43, "466": 34, "4660": [129, 158], "467": 34, "468": [6, 8, 34, 64, 115, 193, 242, 472, 488], "46871534e": 3, "4688": [129, 158], "469": [34, 103], "4692": [129, 158], "4693": [129, 158], "46a": 34, "47": [34, 43, 92, 99, 115, 200, 213, 240, 245, 246, 472, 473], "470": 34, "47014322e": 3, "471": [34, 67, 74, 488], "4714": [129, 158], "4715": [129, 158], "4719": [129, 158], "472": 34, "4720": 473, "4723": [129, 158], "4725": 473, "473": [30, 34, 47, 488], "4734": 473, "4737": 473, "474": 34, "47419326e": 3, "4743": 473, "475": 34, "47544839e": 3, "4756": [130, 158], "476": 34, "4766": [115, 170], "47673775e": 3, "477": 34, "477099": 50, "4775": [115, 170], "478": 34, "479": [34, 473], "47923200": 71, "48": [6, 21, 31, 34, 47, 55, 58, 64, 73, 92, 103, 110, 115, 196, 211, 243, 248, 250, 273, 340, 472, 473, 488], "480": 34, "4806": [129, 158], "4807": [130, 156, 158], "481": [34, 58, 61, 488], "481522": 34, "482": 34, "4820": [156, 158], "483": [34, 59, 90, 97, 119, 158, 488], "4830": [130, 158], "4832": 92, "484": 34, "48441134e": 3, "4847132034632034": 111, "4849": [130, 158], "485": [34, 51, 106, 112, 488], "486": [34, 472], "4860": [129, 158], "487": 34, "48709627e": 3, "48728578e": 3, "488": 34, "4880": 92, "48880114e": 3, "488905": 34, "489": 34, "48931608e": 3, "489424": 34, "49": [34, 71, 72, 87, 92, 115, 143, 158, 472, 473], "490": 34, "4903": 473, "49038": 34, "4906": [130, 158], "491": 34, "492": 34, "49253231e": 3, "4926": [130, 158], "493": [34, 41, 47, 51, 488], "49353965e": 3, "4939": [130, 158], "49397998e": 3, "494": [34, 473], "4948": [130, 158], "495": 34, "4951": [156, 158], "4954": [130, 158], "496": [34, 105], "4967": [130, 158], "497": 34, "4975": [130, 158], "497712": 34, "497881": 34, "498": 34, "499": [34, 79, 83, 488], "4991": [156, 158], "4991939095387371": 111, "499281": 34, "4998": 473, "49996080e": 3, "4a": [6, 472], "4d": [1, 3, 4, 8, 9, 12, 17, 19, 21, 26, 28, 30, 31, 32, 33, 35, 37, 40, 43, 49, 50, 51, 54, 55, 56, 58, 60, 72, 85, 86, 88, 90, 92, 93, 95, 96, 99, 101, 104, 106, 113, 116, 124, 125, 126, 129, 133, 140, 143, 144, 149, 158, 160, 163, 164, 165, 168, 179, 181, 183, 186, 201, 216, 243, 245, 247, 248, 249, 253, 261, 265, 271, 278, 285, 302, 305, 306, 333, 335, 337, 338, 339, 343, 344, 345, 346, 348, 350, 357, 364, 365, 366, 367, 368, 369, 370, 371, 375, 376, 377, 378, 379, 380, 381, 383, 416, 417, 420, 428, 433, 434, 435, 440, 442, 449, 451, 467, 471, 479, 482, 486, 488, 489], "4f": [34, 35, 99], "4min": 45, "4mm": [95, 163, 170, 201, 261, 306], "4pm": [173, 487], "4th": [21, 95, 115, 171, 179, 185, 312, 313, 350, 353, 433], "4x4": [85, 185, 298, 299, 300, 301, 303, 304, 305, 306, 320, 333, 340, 350, 351, 353, 367, 370, 376, 378, 379, 381, 387, 388, 447], "5": [2, 3, 4, 6, 8, 10, 12, 13, 19, 21, 23, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 80, 82, 89, 90, 92, 95, 96, 99, 100, 101, 102, 105, 107, 108, 109, 110, 115, 124, 127, 129, 133, 140, 146, 151, 152, 153, 154, 159, 163, 165, 170, 171, 172, 175, 185, 186, 192, 193, 195, 196, 200, 204, 213, 216, 218, 223, 230, 242, 243, 245, 248, 249, 251, 252, 255, 260, 261, 264, 266, 270, 274, 288, 303, 304, 310, 312, 313, 338, 344, 345, 348, 361, 362, 377, 379, 380, 381, 382, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 433, 434, 436, 438, 439, 441, 443, 444, 445, 460, 461, 462, 465, 471, 472, 473, 486, 488], "50": [32, 34, 38, 51, 54, 59, 60, 61, 64, 67, 71, 94, 99, 115, 118, 170, 172, 186, 192, 201, 211, 217, 234, 236, 272, 300, 301, 308, 322, 324, 325, 326, 327, 330, 331, 332, 340, 361, 362, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 447, 449, 451, 472, 473, 486], "500": [34, 36, 43, 51, 80, 99, 111, 196, 252], "5000": [51, 57, 99], "50001": 240, "5004": [156, 158], "5006": [156, 158], "501": 34, "5013": [156, 158], "50145": 34, "50178571e": 3, "502": [34, 99], "5021": 193, "503": 34, "5036": [156, 158], "504": [34, 64, 472], "50401038e": 3, "50403343e": 3, "5041": [156, 158], "5048": 473, "505": 34, "50535064e": 3, "50556646e": 3, "506": 34, "50607": 240, "506396": 34, "507": 34, "5071": [115, 159, 233], "507e": 55, "508": 34, "5082": 473, "509": 34, "50956301e": 3, "51": [6, 10, 34, 50, 55, 64, 115, 164, 196, 244, 305, 472, 473], "510": 34, "511": 34, "511344": 52, "5115891053391053": 111, "51173": 34, "511866": 6, "512": [34, 85, 150, 158, 202, 247], "51225221e": 3, "512372": [115, 312, 313], "513": [34, 472], "5134": 473, "514": 34, "515": 34, "516": 34, "51633": 473, "51637255e": 3, "517": 34, "517283840": 102, "5176": 92, "5177": 473, "518": [34, 100, 112, 488], "518244": 34, "51837653e": 3, "5188": 473, "519": 34, "52": [6, 34, 57, 60, 92, 186, 244, 472, 473, 486], "520": 34, "521": 34, "52167813e": 3, "522": 34, "5220": 472, "523": 34, "524": 34, "525": 34, "526": 34, "527": 34, "52763972e": 3, "528": [34, 46], "528093": 34, "5281": 0, "529": 34, "53": [23, 34, 63, 71, 92, 94, 115, 200, 243, 244, 254, 472, 473], "530": 34, "530991": 6, "530e": 55, "531": [34, 79], "53124701e": 3, "532": 34, "53203957e": 3, "53245501e": 3, "533": 34, "53370880": 71, "5339": 473, "534": 34, "534376": 64, "535": 34, "536": [34, 55, 61, 488], "536042": 34, "537": 34, "53769579e": 3, "538": 34, "539": [34, 191], "53963948e": 3, "53996143e": 3, "54": [34, 41, 64, 92, 101, 115, 159, 196, 213, 244, 472, 473], "540": [6, 34, 64, 472], "540842": 58, "541": [34, 72], "542": 34, "542346": 58, "543": 34, "54334544e": 3, "5438": 42, "544": [34, 115, 217], "545": 34, "54584": 473, "546": [6, 34], "546246": 6, "54629231e": 3, "54677689e": 3, "546823e": 34, "547": 34, "54773437e": 3, "548": 34, "548e": 55, "549": [2, 8, 34, 115, 170, 488], "5490204": [115, 305], "5496": 92, "55": [21, 34, 50, 61, 68, 136, 158, 472, 473, 488], "550": 34, "551": 34, "55123756e": 3, "55160": 92, "552": [34, 90, 115, 217], "553": 34, "5539": [3, 32, 33, 39, 99, 115, 212, 264], "554": 34, "555": [34, 56, 61, 488], "55501661e": 3, "5556": 35, "556": 34, "55619390e": 3, "5562": 472, "557": 34, "5576": 473, "558": 34, "559": [34, 115, 170], "56": [24, 34, 38, 73, 115, 166, 245, 472, 473], "560": 34, "561": 34, "562": [34, 115, 219, 250], "563": 34, "564": 34, "56429306e": 3, "56492348e": 3, "565": 34, "566": 34, "56643800e": 3, "567": 34, "568": 34, "5680": 92, "56852": 34, "56856235e": 3, "569": [34, 105, 112, 488], "56991744": 41, "56a": 34, "57": [6, 34, 64, 92, 102, 115, 119, 122, 143, 158, 196, 244, 472, 473], "570": 34, "57069": 34, "571": [34, 112, 488], "57195": 34, "572": [34, 101], "572388": 43, "573": [34, 115, 191, 219, 250], "574": 34, "57414654e": 3, "574836": 34, "575": 34, "575977": 34, "576": 34, "57664142e": 3, "577": [34, 63], "5773": 473, "578": 34, "57885737e": 3, "579": 34, "579066": 50, "579124": 34, "57925629e": 3, "57a": 34, "58": [34, 71, 92, 143, 158, 472, 473], "580": 34, "58038926e": 3, "581": 34, "5818": 473, "582": [34, 38, 115], "58286614e": 3, "583": [34, 55, 61, 488], "584": 34, "585": 34, "586": 34, "5861": 473, "58654494e": 3, "587": 34, "587189": 34, "587956": 64, "588": 34, "589": [34, 47], "58911": 473, "589401": 58, "59": [34, 51, 53, 54, 61, 73, 92, 93, 101, 115, 119, 158, 165, 196, 243, 361, 362, 472, 473, 488], "590": [10, 34, 69, 74, 488], "590796": 34, "590905": 58, "591": 34, "592": [34, 38, 115], "593": 34, "5934": [115, 181], "594": 34, "59462113e": 3, "595": 34, "595170": 6, "59526299e": 3, "596": 34, "597": 34, "598": 34, "59874059e": 3, "599": [34, 115, 191, 240], "5992": 92, "5997": [60, 115, 203, 258], "59974": 34, "59981824": 71, "5a": [6, 34, 64], "5b": [6, 34, 64], "5c": 64, "5c734f16e50cc772ef593cab9bb3137b": 11, "5c8ff37d4712b400183b7011": 55, "5c8ff37d4712b400193b5b54": 55, "5c8ff37e2286e80016c3c2cb": 50, "5c8ff3814712b4001a3b5561": 50, "5c8ff3822286e80018c3e37b": 50, "5c8ff382a743a90018606df8": 50, "5c8ff3832286e80016c3c2d1": 50, "5c8ff3832286e80019c3c10f": 50, "5c8ff3842286e80017c419e0": 50, "5c8ff3854712b4001a3b5568": 50, "5c8ff3872286e80017c419e9": 50, "5c8ff3872286e80017c419ea": 50, "5c8ff3884712b400183b7023": 50, "5c8ff3884712b400193b5b5c": 50, "5c8ff389a743a9001660a016": 50, "5c8ff38c2286e80016c3c2da": 50, "5c8ff38c4712b4001a3b5573": 50, "5c8ff38ca743a9001760809": 50, "5c8ff38ca743a90018606df": 50, "5c8ff38da743a900176080a2": 50, "5c8ff38f2286e80018c3e38d": 50, "5c8ff3912286e80018c3e393": 50, "5c8ff3914712b400173b5329": 50, "5c8ff3914712b4001a3b5579": 50, "5c8ff391a743a900176080a9": 50, "5c8ff3952286e80016c3c2e7": 100, "5c8ff3952286e80017c41a1b": 50, "5c8ff3954712b400193b5b79": 100, "5c8ff395a743a900176080af": 100, "5c8ff3964712b400193b5b7d": 100, "5c8ff3982286e80017c41a29": 100, "5c8ff399a743a9001660a031": 100, "5c8ff39aa743a900176080ba": 100, "5c8ff39aa743a900176080bf": 100, "5c8ff39aa743a90018606e21": 100, "5c8ff39ca743a90019606c50": 100, "5c8ff39d4712b400193b5b89": 100, "5c8ff39fa743a90018606e2f": 100, "5c8ff3a12286e80016c3c2fc": 100, "5c8ff3a12286e80017c41a48": 100, "5c8ff3a2a743a9001660a048": 100, "5c8ff3a34712b400193b5b92": 100, "5c8ff3a34712b4001a3b55a3": 100, "5c8ff3a72286e80017c41a54": 100, "5c8ff3a7a743a90018606e42": 100, "5c8ff3a84712b400183b7048": 100, "5c8ff3e14712b400183b7097": 50, "5c8ff3e32286e80018c3e42c": 50, "5c8ff3e4a743a9001760814f": 50, "5c8ff3e52286e80018c3e439": 50, "5c8ff3e54712b400183b70a5": 50, "5c8ff3e72286e80017c41b3d": 50, "5c8ff3e82286e80018c3e443": 50, "5c8ff3e9a743a90017608158": 50, "5c8ff3ea4712b400183b70b7": 50, "5c8ff3eb2286e80019c3c194": 50, "5c8ff3eb2286e80019c3c198": 100, "5c8ff3ed2286e80017c41b56": 100, "5c8ff3ee2286e80016c3c379": 100, "5c8ff3ee4712b400183b70c3": 100, "5c8ff3efa743a9001660a0d5": 100, "5c8ff3f12286e80016c3c37": 100, "5c8ff3f14712b4001a3b560": 100, "5c8ff3f1a743a90017608164": 100, "5c8ff3f34712b4001a3b5612": 100, "5c8ff3f64712b400183b70d8": 100, "5c8ff3f6a743a90017608171": 100, "5c8ff3f72286e80019c3c1af": 100, "5c8ff3f7a743a90019606cdf": 100, "5c8ff3f92286e80018c3e463": 100, "5cb46e0339926900160f6930": 100, "5cb46e0cf2be3c001801f757": 100, "5cb46e1c3992690018133a9": 100, "5cb46e35f2be3c00190305ff": 100, "5cb46e3f353c5800199ac787": 100, "5cb46e40f2be3c001801f77f": 100, "5cb46e43f2be3c0017056b8a": 50, "5cb46e4d353c58001b9cb325": 100, "5cb46e5af2be3c001801f799": 50, "5cb46e5c353c5800199ac79f": 50, "5cb46e63f2be3c0017056ba9": 100, "5cb46e6b353c58001b9cb34f": 55, "5cb46e6ba3bc970019f07152": 100, "5cb46e6f353c58001a9b3311": 100, "5cb46e793992690017108eb9": 100, "5cb46e7a353c58001a9b3324": 100, "5cb46e85a3bc97001aeff750": 100, "5cb46e8b353c58001c9abe98": 50, "5cb46e913992690018133b1c": 50, "5cb46e92a3bc970019f0717f": 50, "5cb46e9a353c58001c9abeac": 50, "5cb46e9b39926900190fad5c": 50, "5cb46eaa39926900160f69af": 50, "5cb4700af2be3c0017056f69": 100, "5cb470153992690018133d3b": 100, "5cb47016a3bc970017efe44f": 50, "5cb47016a3bc970018f1fc88": 100, "5cb4701c3992690018133d49": 100, "5cb4701e3992690018133d4f": 55, "5cb4701ff2be3c0017056fad": 100, "5cb47020f2be3c0019030968": 100, "5cb47023353c58001c9ac02b": 50, "5cb4702639926900190faf1d": 100, "5cb4702a353c58001b9cb5a": 50, "5cb4702b39926900171090e4": 100, "5cb4702f39926900171090ee": 50, "5cb4703039926900160f6b3e": 100, "5cb4703439926900160f6b43": 100, "5cb47038353c5800199ac9a2": 100, "5cb4703bf2be3c001801fa49": 50, "5cb470413992690018133d8c": 50, "5cb47045a3bc970019f073a0": 50, "5cb4704af2be3c001705703b": 100, "5cb47052f2be3c0017057069": 50, "5cb47056353c58001c9ac064": 50, "5cb47057f2be3c0019030a1f": 100, "5d": [127, 158, 186], "5d27037f45253a001c3d4563": 18, "5d275ede1c5b4a001aa00c26": 18, "5d27c2c41c5b4a001d9f4e7": 81, "5d27c31345253a001a3c25fb": 78, "5d27ca3d1c5b4a001b9eeddb": 80, "5d27cb281c5b4a001aa07e29": 77, "5d27cbbd45253a00193c9b70": 82, "5d27ccde1c5b4a001d9f5602": 81, "5d27d29145253a001c3e284f": 18, "5d27d3c3114a42001804500a": 81, "5d27d9c6114a420019045370": 81, "5d27da3a114a4200190453ab": 78, "5d27dbce45253a001a3c32fd": 82, "5d27ddc91c5b4a001b9ef9d0": 18, "5d27de38a26b340016099771": 81, "5d27e0221c5b4a001b9efb25": 82, "5d27e5fa1c5b4a001aa09681": 81, "5d27e787114a420016059c22": 77, "5d27eba2114a420016059fbf": 80, "5d27ebc3114a42001704a18d": 78, "5d27ed481c5b4a001aa09e83": 82, "5d27efab1c5b4a001aa0a0c2": 77, "5d27f18945253a00193cb2dd": 81, "5d27f1f0114a42001804603": 78, "5d27f296114a42001704a5d9": 80, "5d27fb651c5b4a001d9f7938": 81, "5d28000845253a001c3e507a": 82, "5d280057a26b340019089965": 81, "5d280608a26b3400180868d1": 80, "5d2808401c5b4a001d9f83b2": 81, "5d28092e45253a001c3e597f": 78, "5d28095545253a001c3e59a2": 77, "5d2811d0114a42001704b988": 80, "5d2811fba26b340017085492": 81, "5d28144c114a42001804739": 77, "5d2814d145253a001c3e6404": 81, "5d281a2a45253a001c3e684c": 82, "5d281a531c5b4a001c9ea662": 78, "5d281e3d114a42001605cb02": 77, "5d281f851c5b4a001b9f2315": 80, "5d28244745253a001b3c4afa": 81, "5d28295aa26b340018087ef4": 78, "5d282aa5114a42001605db5a": 82, "5d282b2345253a001c3e7d09": 81, "5d282d9045253a001c3e80a1": 80, "5d28309645253a001a3c6a8d": 81, "5d28318445253a00193ce6d7": 81, "5d28335545253a00193ce806": 82, "5d283473a26b34001609ed88": 78, "5d28375345253a001c3e90a2": 77, "5d283ee0a26b34001609f58": 80, "5d283f021c5b4a001aa100cb": 77, "5d284374114a42001605f4d2": 78, "5d28453a1c5b4a001c9eca": 82, "5d2848581c5b4a001aa10aac": 81, "5d284a3445253a001c3ea2d1": 81, "5d284daf1c5b4a001d9fc4e5": 82, "5d285263114a4200160602c6": 80, "5d2852caa26b340018089ae5": 77, "5d28545ca26b340018089ba7": 81, "5d28564b1c5b4a001d9fc9d6": 81, "5d28590d114a4200160607da": 78, "5d285a53114a4200160608b": 78, "5d285b6c1c5b4a001c9edada": 81, "5d285cd945253a001a3c8509": 81, "5d285d61114a42001904a343": 80, "5d28660b1c5b4a001aa122c7": 77, "5d2866c0a26b340017088827": 82, "5d2868f9114a42001704f6a5": 77, "5d286e49114a42001904ab90": 81, "5d286f35a26b34001908e5c1": 78, "5d28709e114a420016061aa1": 80, "5d28765645253a001b3c8106": 81, "5d28781945253a00193d1237": 82, "5d287b3a45253a00193d145": 80, "5d287eeb45253a001c3ed1ba": 81, "5d28847d114a42001904b87b": 77, "5d2888ce1c5b4a001b9f789c": 78, "5d2889a7a26b3400160a368f": 82, "5d288af11c5b4a001d9ff0cb": 81, "5d288fb11c5b4a001d9ff738": 82, "5d28966345253a00193d2e27": 80, "5d2896fb45253a001a3cabe0": 81, "5d289736114a4200170518d7": 77, "5d289b2945253a00193d32ac": 78, "5d289be945253a001c3ef5e2": 81, "5d28a00245253a001c3efac9": 78, "5d28a1c91c5b4a001da00bd9": 81, "5d28a431a26b340019090fa2": 80, "5d28a4c0114a420016064fa2": 82, "5d28af541c5b4a001da01caa": 81, "5d28b135a26b3400160a648": 77, "5d28b6171c5b4a001c9f2ebd": 82, "5d28b761a26b3400160a6ba8": 80, "5d28b9af45253a001a3ccb85": 81, "5d28bb90a26b3400190925d2": 81, "5d28bc0145253a00193d53ab": 78, "5d28c0a81c5b4a001b9fb89a": 77, "5d28cfd91c5b4a001c9f404d": 78, "5d28d2bb114a420017054715": 82, "5d28db3ba26b34001808f444": 78, "5d28e056a26b340019093c95": 82, "5d28e50945253a00193d6e09": 82, "5d28f0bc1c5b4a001b9fd7f3": 78, "5d28ff54114a42001705610c": 82, "5d28ffc245253a00193d7dac": 78, "5d2909cd1c5b4a001b9fe6c5": 78, "5d2919e2114a42001606b46c": 78, "5d2928bc45253a001b3cf010": 78, "5d293a50a26b34001909682a": 78, "5d29492fa26b34001709070f": 78, "5d295328114a42001606dd9a": 78, "5d2c37031c5b4a001ca0da2b": 78, "5d2c442e114a420017071134": 78, "5d2c5c431c5b4a001da257a5": 78, "5d2c6c2645253a001c42460f": 78, "5d2ec286251f0e001604a189": 78, "5d2ed2875d2cdc001702b4c5": 78, "5d2ef8925d2cdc001702e0a5": 78, "5d2f0851251f0e0018044fe4": 78, "5d2f26e4a667db0017f72ae9": 78, "5d2f358c251f0e001704a76a": 78, "5d2f41d2835aff001a52da0c": 78, "5d2f5acc835aff0018532004": 78, "5d2f692d835aff00175372e9": 78, "5d2f7456835aff0017537992": 78, "5d2f8881a667db0018f6b634": 78, "5d2f9552251f0e001605bb64": 78, "5d2faf785d2cdc0017039bb1": 78, "5d2fbffd835aff0018535ef5": 78, "5d2fc225a667db001af6222a": 78, "5d2fdd77835aff00195494d4": 78, "5d2fe5d5a667db0017f80f32": 78, "5d2ff3ea835aff0018538140": 78, "5d301049a667db0019f67ca0": 78, "5d3021b65d2cdc00190344d6": 78, "5d302afe5d2cdc0018030034": 78, "5d303ad4835aff001853bca4": 78, "5d304f845d2cdc001a032801": 78, "5d3058cd835aff001853d4c7": 78, "5d306f15a667db0018f78b4d": 78, "5d307f8b251f0e00190519ca": 78, "5d309cb5251f0e001606fe4b": 78, "5d30a667251f0e00190534dc": 78, "5d30bb07251f0e001705df42": 78, "5d30df37251f0e001705fd72": 78, "5d30e232a667db0018f7f2a9": 78, "5d30f7ec251f0e001805e3cd": 78, "5d3116dca667db0018f81c29": 78, "5d312688251f0e0016079f29": 78, "5d3134fe5d2cdc001705393d": 78, "5d3143f9835aff00195630c": 78, "5d315ac0835aff001754e139": 78, "5d3160bc835aff00195649cf": 78, "5d317bb2251f0e001608002": 78, "5d318a6c251f0e001905b6": 78, "5d31962da667db0017fa303d": 78, "5d31abe45d2cdc0019046202": 78, "5d31cdeea667db001af75ab9": 78, "5d31dc83835aff001956e6c5": 78, "5d31fefea667db0018f8ea9f": 78, "5d32072b5d2cdc0018043969": 78, "5d3219b4a667db0018f8ff1f": 78, "5d3234f3835aff00175590f0": 78, "5d323d06251f0e001706f0b": 78, "5d324e77251f0e001806e5e7": 78, "5d326b70835aff00195762f8": 78, "5d32731a5d2cdc001a0472bb": 78, "5d3286b7251f0e001906427f": 78, "5d3298815d2cdc001804700c": 78, "5d32ab6ea667db0017fb59e8": 78, "5d32bb275d2cdc001a049841": 78, "5d32d901a667db0018f9684f": 78, "5d32e9d3835aff001957cd79": 78, "5d32f34f835aff001755ee97": 78, "5d3306db5d2cdc001706c36f": 78, "5d332373251f0e001609acbd": 78, "5d332b7e835aff001957feec": 78, "5d341711a667db0017fc816f": 78, "5d34294d835aff001958add9": 78, "5d7b8948fcbf44001c44e695": 18, "5fd26f33e54da6efc0bc7eca321ad622": 20, "5hju4": [163, 201, 261], "5mm": [67, 96, 181, 215], "5pm": [173, 487], "5th": [21, 204], "5x1": 215, "5x4": 215, "6": [3, 6, 8, 10, 21, 25, 28, 31, 32, 34, 35, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 55, 56, 57, 59, 60, 64, 65, 66, 67, 71, 73, 81, 83, 92, 95, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 115, 119, 122, 124, 136, 138, 140, 143, 144, 145, 151, 152, 153, 159, 163, 170, 171, 172, 174, 185, 196, 203, 221, 227, 228, 240, 258, 261, 264, 305, 361, 362, 366, 369, 371, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 435, 441, 449, 451, 472, 473, 487, 488], "60": [6, 16, 32, 34, 42, 43, 65, 100, 103, 115, 160, 196, 218, 228, 274, 472, 473, 486], "600": [34, 51, 119, 158, 195, 252, 442], "60000": 51, "60046": 34, "601": 34, "601435": 34, "601855088049469": 36, "601956352": 102, "602": 34, "602484": 34, "60263475e": 3, "602952": 34, "603": 34, "60399524e": 3, "604": 34, "60400880e": 3, "605": 34, "6058": 473, "606": 34, "606351": 34, "607": 34, "608": [34, 52, 61, 488], "609": 34, "60957102e": 3, "61": [34, 37, 68, 103, 115, 211, 472, 473], "610": 34, "611": 34, "6111111111111112": [3, 30], "612": [34, 472], "61202546e": 3, "613": 34, "614": 34, "61421769e": 3, "615": 34, "616": 34, "616334": 34, "61634194e": 3, "617": 34, "618": [34, 110, 112, 488], "619": 34, "62": [34, 64, 71, 73, 101, 103, 109, 115, 140, 158, 249, 472, 473], "620": 34, "621": 34, "622": [34, 50], "622503": 34, "62254818e": 3, "622651": 50, "623": 34, "624": [34, 87], "624162": 34, "624816": 34, "625": 34, "626": 34, "627": [34, 46, 47, 488], "627259": 34, "627725": 34, "628": 34, "629": 34, "629164": 34, "63": [6, 33, 34, 64, 94, 115, 223, 243, 251, 472, 473], "630": 34, "6300": 64, "63031463e": 3, "631": 34, "63104762e": 3, "63146319e": 3, "631803": 6, "632": [34, 50], "633": [34, 49, 61, 488], "6330": 473, "63369": 473, "634": 34, "63468533e": 3, "634889": 34, "635": 34, "63537549e": 3, "636": 34, "637": 34, "638": 34, "63812": 473, "63834163e": 3, "639": 34, "64": [12, 20, 22, 32, 34, 35, 37, 40, 49, 67, 80, 85, 87, 95, 150, 155, 158, 184, 196, 202, 228, 240, 243, 244, 247, 472, 473], "640": 34, "6408": 472, "641": 34, "642": [32, 34, 47, 57, 283, 286, 287, 294, 443, 488], "64227570e": 3, "64243717e": 3, "643": 34, "644": [34, 68, 74, 102, 112, 488], "644223": 34, "6447": [115, 181], "645": 34, "645241": 34, "645e": 55, "645m": 221, "646": 34, "64628127e": 3, "64672": 34, "64683601e": 3, "646e": 55, "647": 34, "647343": 34, "648": [34, 64, 472], "648e": 55, "649": 34, "64x64x64": 228, "65": [34, 92, 131, 158, 472, 473], "650": 34, "65021135e": 3, "65057888e": 3, "6506": 115, "651": 34, "652": 34, "65216361e": 3, "65277078e": 3, "653": 34, "65323530e": 3, "654": [34, 37, 47, 488], "65404475e": 3, "65426": 105, "6546": 34, "655": 34, "656": 34, "6564": [50, 61, 488], "657": 34, "65738902e": 3, "658": 34, "65839104": 71, "65860064e": 3, "659": 34, "66": [6, 17, 18, 34, 60, 64, 71, 91, 94, 102, 110, 202, 472, 473], "660": 34, "660587": 34, "661": [34, 85, 97, 488], "6610705534617105": 45, "662": 34, "663": 34, "664": 34, "66423320770264": 45, "664250": 64, "664e": 55, "665": [34, 47, 60, 115, 118, 220, 224, 259, 275, 277, 488], "66514002e": 3, "66531652e": 3, "66533": 34, "666": 34, "666023": 34, "6667": 35, "667": 34, "668": 34, "668929": 64, "66894814e": 3, "669": [34, 51, 115, 448, 454, 472], "67": [6, 25, 34, 122, 158, 243, 472, 473], "670": [34, 115, 118, 220, 275, 277], "671": 34, "67105992e": 3, "67119559e": 3, "6712058072321548": 36, "672": 34, "67254758e": 3, "672751616": 102, "67292890e": 3, "673": [34, 42, 47, 488], "674": [34, 58, 61, 488], "675": [6, 34, 105], "6759": 35, "676": [34, 105], "676518": 6, "676956": 34, "67698222e": 3, "677": [34, 92, 97, 488], "677519": 34, "678": [34, 60, 115, 224, 259], "6784": 92, "679": [34, 473], "679756": 34, "67991906e": 3, "68": [31, 32, 33, 34, 45, 60, 186, 472, 473, 486], "680": 34, "68079266e": 3, "681": [34, 51, 115, 448, 454], "68151": 473, "682": 34, "682436": 34, "68292": 473, "683": 34, "68303219e": 3, "683343": 64, "684": 34, "684567": 34, "68464455e": 3, "685": 34, "68524985e": 3, "6852766": 71, "68584": 92, "686": 34, "687": 34, "68752257e": 3, "688": 34, "689": 34, "68e": 55, "69": [6, 12, 34, 73, 80, 102, 472, 473], "690": 34, "69096152e": 3, "691": 34, "69171204e": 3, "692": 34, "692869": 64, "693": 34, "69391159e": 3, "694": 34, "695": 34, "696": 34, "697": 34, "697867": 34, "698": [3, 34], "699": 34, "69998818e": 3, "6a": [6, 64, 472], "6b": [6, 472], "6c": 6, "6mm": [305, 449], "6th": 21, "7": [3, 6, 16, 25, 26, 28, 31, 34, 36, 39, 40, 41, 44, 45, 46, 47, 50, 51, 52, 54, 55, 56, 58, 59, 60, 64, 65, 67, 70, 71, 73, 74, 78, 83, 87, 92, 95, 97, 102, 105, 106, 109, 112, 115, 118, 119, 122, 124, 131, 133, 138, 140, 143, 144, 146, 151, 153, 171, 181, 184, 185, 191, 196, 200, 202, 211, 225, 228, 231, 240, 244, 246, 247, 252, 256, 310, 312, 313, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 421, 427, 431, 433, 434, 436, 438, 439, 443, 445, 448, 465, 472, 473, 486, 488, 490], "70": [22, 31, 33, 34, 65, 71, 115, 170, 227, 253, 472, 473], "700": [34, 45, 146, 158, 252], "700000": 67, "700012": 67, "70012": 473, "701": 34, "70158193e": 3, "70176246e": 3, "702": 34, "703": [34, 40, 47, 488], "703344": 34, "704": 34, "705": [34, 74], "706": 34, "707": [12, 28, 34, 488], "70785332e": 3, "708": 34, "70884": [115, 213], "709": 34, "71": [33, 34, 73, 472, 473], "710": 34, "71049989e": 3, "710553": 64, "711": [34, 77, 83, 86, 97, 488], "712": 34, "712135": [115, 193], "71217875e": 3, "71450812e": 3, "71510021e": 3, "71561": [115, 200, 246], "715845": 64, "71625148e": 3, "7168000": 71, "717663": 34, "71909376": 71, "72": [34, 45, 58, 60, 64, 92, 94, 103, 115, 152, 158, 171, 224, 259, 472, 473], "72051858e": 3, "7209": [115, 192], "721": [16, 28, 488], "7214": [115, 192], "72173116e": 3, "7218": 473, "722": [26, 28, 488], "7221": 45, "722242": 34, "7229": 41, "72430647e": 3, "7249920": 6, "72569509e": 3, "72592256e": 3, "726486": 64, "729": 472, "73": [33, 34, 92, 103, 472, 473], "730": [24, 28, 488], "73156891e": 3, "732": [8, 111, 488], "733": 6, "734851e": 52, "735212": 34, "735bf0f211246c83396b5f21f706c224": 10, "736": [109, 112, 488], "73612338e": 3, "73680303e": 3, "73789204e": 3, "738699": 6, "74": [11, 16, 19, 22, 34, 50, 52, 71, 88, 89, 92, 101, 472, 473], "7407": 32, "740886": 34, "74249": 34, "743122": 50, "744": 3, "74432": 473, "74667015e": 3, "748163e": 52, "74916649e": 3, "7493501": [50, 115, 164, 306], "749503182": 102, "75": [24, 32, 34, 42, 43, 67, 73, 92, 104, 107, 111, 115, 195, 243, 384, 472, 473], "752": [92, 97, 101, 115, 488], "75291906e": 3, "75454419e": 3, "75530367e": 3, "756": [64, 101, 115, 472], "758": [3, 17, 30], "75889175e": 3, "7589": 34, "76": [31, 33, 34, 67, 73, 246, 254, 472, 473], "76045888e": 3, "760997": 34, "7616": 92, "762": 57, "763": [101, 115], "763636": 6, "763713": 34, "764": [87, 97, 488], "76479257e": 3, "76554384e": 3, "766": [101, 115], "7662337662337662": 35, "76643337e": 3, "76694211e": 3, "767": 3, "768": [21, 28, 488], "769": [14, 28, 488], "76993755e": 3, "77": [34, 67, 71, 73, 472, 473], "77019514e": 3, "77109": 34, "772e": 55, "773": [80, 83, 488], "773093": 34, "77311560e": 3, "77393747e": 3, "774": [33, 41], "774939": 44, "77511727e": 3, "776293": 64, "777": 103, "7770562770562771": 35, "777205": 50, "7783": 103, "77913406e": 3, "779998": 34, "78": [34, 51, 54, 55, 67, 73, 94, 115, 170, 472, 473, 488], "78033434e": 3, "7808": 92, "78176256": 71, "782": 97, "78232": 92, "7835497835497836": 35, "784": [131, 158], "785086": 34, "786": [77, 115, 315], "7868": 4, "78886371e": 3, "78907832e": 3, "78949250e": 3, "79": [34, 67, 73, 92, 105, 472, 473], "790": [36, 47, 488], "79165444e": 3, "791928": 34, "792": [64, 104, 112, 488], "79200019e": 3, "793": [71, 115, 131, 158], "796": [33, 77, 115, 315], "796836": 34, "79689453e": 3, "798387": 64, "79848": 473, "7a": [6, 34, 64, 472], "7b": 6, "7e62e7e7fcc4d6e1428b6b2cb48f7a7c": 11, "7networks_lh_cont_cing_1": 473, "7networks_lh_cont_cing_2": 473, "7networks_lh_cont_ofc_1": 473, "7networks_lh_cont_par_1": 473, "7networks_lh_cont_par_2": 473, "7networks_lh_cont_par_3": 473, "7networks_lh_cont_par_4": 473, "7networks_lh_cont_par_5": 473, "7networks_lh_cont_par_6": 473, "7networks_lh_cont_pcun_1": 473, "7networks_lh_cont_pcun_2": 473, "7networks_lh_cont_pfcl_1": 473, "7networks_lh_cont_pfcl_2": 473, "7networks_lh_cont_pfcl_3": 473, "7networks_lh_cont_pfcl_4": 473, "7networks_lh_cont_pfcl_5": 473, "7networks_lh_cont_pfcl_6": 473, "7networks_lh_cont_pfcl_7": 473, "7networks_lh_cont_pfcl_8": 473, "7networks_lh_cont_pfcmp_1": 473, "7networks_lh_cont_pfcv_1": 473, "7networks_lh_cont_temp_1": 473, "7networks_lh_default_par_1": 473, "7networks_lh_default_par_2": 473, "7networks_lh_default_par_3": 473, "7networks_lh_default_par_4": 473, "7networks_lh_default_par_5": 473, "7networks_lh_default_par_6": 473, "7networks_lh_default_par_7": 473, "7networks_lh_default_pcunpcc_1": 473, "7networks_lh_default_pcunpcc_10": 473, "7networks_lh_default_pcunpcc_11": 473, "7networks_lh_default_pcunpcc_2": 473, "7networks_lh_default_pcunpcc_3": 473, "7networks_lh_default_pcunpcc_4": 473, "7networks_lh_default_pcunpcc_5": 473, "7networks_lh_default_pcunpcc_6": 473, "7networks_lh_default_pcunpcc_7": 473, "7networks_lh_default_pcunpcc_8": 473, "7networks_lh_default_pcunpcc_9": 473, "7networks_lh_default_pfc_1": 473, "7networks_lh_default_pfc_10": 473, "7networks_lh_default_pfc_11": 473, "7networks_lh_default_pfc_12": 473, "7networks_lh_default_pfc_13": 473, "7networks_lh_default_pfc_14": 473, "7networks_lh_default_pfc_15": 473, "7networks_lh_default_pfc_16": 473, "7networks_lh_default_pfc_17": 473, "7networks_lh_default_pfc_18": 473, "7networks_lh_default_pfc_19": 473, "7networks_lh_default_pfc_2": 473, "7networks_lh_default_pfc_20": 473, "7networks_lh_default_pfc_21": 473, "7networks_lh_default_pfc_22": 473, "7networks_lh_default_pfc_23": 473, "7networks_lh_default_pfc_24": 473, "7networks_lh_default_pfc_3": 473, "7networks_lh_default_pfc_4": 473, "7networks_lh_default_pfc_5": 473, "7networks_lh_default_pfc_6": 473, "7networks_lh_default_pfc_7": 473, "7networks_lh_default_pfc_8": 473, "7networks_lh_default_pfc_9": 473, "7networks_lh_default_temp_1": 473, "7networks_lh_default_temp_10": 473, "7networks_lh_default_temp_2": 473, "7networks_lh_default_temp_3": 473, "7networks_lh_default_temp_4": 473, "7networks_lh_default_temp_5": 473, "7networks_lh_default_temp_6": 473, "7networks_lh_default_temp_7": 473, "7networks_lh_default_temp_8": 473, "7networks_lh_default_temp_9": 473, "7networks_lh_dorsattn_fef_1": 473, "7networks_lh_dorsattn_fef_2": 473, "7networks_lh_dorsattn_fef_3": 473, "7networks_lh_dorsattn_fef_4": 473, "7networks_lh_dorsattn_post_1": 473, "7networks_lh_dorsattn_post_10": 473, "7networks_lh_dorsattn_post_11": 473, "7networks_lh_dorsattn_post_12": 473, "7networks_lh_dorsattn_post_13": 473, "7networks_lh_dorsattn_post_14": 473, "7networks_lh_dorsattn_post_15": 473, "7networks_lh_dorsattn_post_16": 473, "7networks_lh_dorsattn_post_17": 473, "7networks_lh_dorsattn_post_2": 473, "7networks_lh_dorsattn_post_3": 473, "7networks_lh_dorsattn_post_4": 473, "7networks_lh_dorsattn_post_5": 473, "7networks_lh_dorsattn_post_6": 473, "7networks_lh_dorsattn_post_7": 473, "7networks_lh_dorsattn_post_8": 473, "7networks_lh_dorsattn_post_9": 473, "7networks_lh_dorsattn_prcv_1": 473, "7networks_lh_dorsattn_prcv_2": 473, "7networks_lh_limbic_ofc_1": 473, "7networks_lh_limbic_ofc_2": 473, "7networks_lh_limbic_ofc_3": 473, "7networks_lh_limbic_ofc_4": 473, "7networks_lh_limbic_ofc_5": 473, "7networks_lh_limbic_temppole_1": 473, "7networks_lh_limbic_temppole_2": 473, "7networks_lh_limbic_temppole_3": 473, "7networks_lh_limbic_temppole_4": 473, "7networks_lh_limbic_temppole_5": 473, "7networks_lh_limbic_temppole_6": 473, "7networks_lh_limbic_temppole_7": 473, "7networks_lh_limbic_temppole_8": 473, "7networks_lh_salventattn_froperins_1": 473, "7networks_lh_salventattn_froperins_2": 473, "7networks_lh_salventattn_froperins_3": 473, "7networks_lh_salventattn_froperins_4": 473, "7networks_lh_salventattn_froperins_5": 473, "7networks_lh_salventattn_froperins_6": 473, "7networks_lh_salventattn_froperins_7": 473, "7networks_lh_salventattn_froperins_8": 473, "7networks_lh_salventattn_froperins_9": 473, "7networks_lh_salventattn_med_1": 473, "7networks_lh_salventattn_med_2": 473, "7networks_lh_salventattn_med_3": 473, "7networks_lh_salventattn_med_4": 473, "7networks_lh_salventattn_med_5": 473, "7networks_lh_salventattn_med_6": 473, "7networks_lh_salventattn_med_7": 473, "7networks_lh_salventattn_paroper_1": 473, "7networks_lh_salventattn_paroper_2": 473, "7networks_lh_salventattn_paroper_3": 473, "7networks_lh_salventattn_paroper_4": 473, "7networks_lh_salventattn_pfcl_1": 473, "7networks_lh_salventattn_tempocc_1": 473, "7networks_lh_sommot_1": 473, "7networks_lh_sommot_10": 473, "7networks_lh_sommot_11": 473, "7networks_lh_sommot_12": 473, "7networks_lh_sommot_13": 473, "7networks_lh_sommot_14": 473, "7networks_lh_sommot_15": 473, "7networks_lh_sommot_16": 473, "7networks_lh_sommot_17": 473, "7networks_lh_sommot_18": 473, "7networks_lh_sommot_19": 473, "7networks_lh_sommot_2": 473, "7networks_lh_sommot_20": 473, "7networks_lh_sommot_21": 473, "7networks_lh_sommot_22": 473, "7networks_lh_sommot_23": 473, "7networks_lh_sommot_24": 473, "7networks_lh_sommot_25": 473, "7networks_lh_sommot_26": 473, "7networks_lh_sommot_27": 473, "7networks_lh_sommot_28": 473, "7networks_lh_sommot_29": 473, "7networks_lh_sommot_3": 473, "7networks_lh_sommot_30": 473, "7networks_lh_sommot_31": 473, "7networks_lh_sommot_32": 473, "7networks_lh_sommot_33": 473, "7networks_lh_sommot_34": 473, "7networks_lh_sommot_35": 473, "7networks_lh_sommot_36": 473, "7networks_lh_sommot_37": 473, "7networks_lh_sommot_4": 473, "7networks_lh_sommot_5": 473, "7networks_lh_sommot_6": 473, "7networks_lh_sommot_7": 473, "7networks_lh_sommot_8": 473, "7networks_lh_sommot_9": 473, "7networks_lh_vis_1": 473, "7networks_lh_vis_10": 473, "7networks_lh_vis_11": 473, "7networks_lh_vis_12": 473, "7networks_lh_vis_13": 473, "7networks_lh_vis_14": 473, "7networks_lh_vis_15": 473, "7networks_lh_vis_16": 473, "7networks_lh_vis_17": 473, "7networks_lh_vis_18": 473, "7networks_lh_vis_19": 473, "7networks_lh_vis_2": 473, "7networks_lh_vis_20": 473, "7networks_lh_vis_21": 473, "7networks_lh_vis_22": 473, "7networks_lh_vis_23": 473, "7networks_lh_vis_24": 473, "7networks_lh_vis_25": 473, "7networks_lh_vis_26": 473, "7networks_lh_vis_27": 473, "7networks_lh_vis_28": 473, "7networks_lh_vis_29": 473, "7networks_lh_vis_3": 473, "7networks_lh_vis_30": 473, "7networks_lh_vis_31": 473, "7networks_lh_vis_4": 473, "7networks_lh_vis_5": 473, "7networks_lh_vis_6": 473, "7networks_lh_vis_7": 473, "7networks_lh_vis_8": 473, "7networks_lh_vis_9": 473, "7networks_rh_cont_cing_1": 473, "7networks_rh_cont_cing_2": 473, "7networks_rh_cont_par_1": 473, "7networks_rh_cont_par_2": 473, "7networks_rh_cont_par_3": 473, "7networks_rh_cont_par_4": 473, "7networks_rh_cont_par_5": 473, "7networks_rh_cont_par_6": 473, "7networks_rh_cont_pcun_1": 473, "7networks_rh_cont_pcun_2": 473, "7networks_rh_cont_pfcl_1": 473, "7networks_rh_cont_pfcl_10": 473, "7networks_rh_cont_pfcl_11": 473, "7networks_rh_cont_pfcl_12": 473, "7networks_rh_cont_pfcl_13": 473, "7networks_rh_cont_pfcl_14": 473, "7networks_rh_cont_pfcl_15": 473, "7networks_rh_cont_pfcl_2": 473, "7networks_rh_cont_pfcl_3": 473, "7networks_rh_cont_pfcl_4": 473, "7networks_rh_cont_pfcl_5": 473, "7networks_rh_cont_pfcl_6": 473, "7networks_rh_cont_pfcl_7": 473, "7networks_rh_cont_pfcl_8": 473, "7networks_rh_cont_pfcl_9": 473, "7networks_rh_cont_pfcmp_1": 473, "7networks_rh_cont_pfcmp_2": 473, "7networks_rh_cont_pfcv_1": 473, "7networks_rh_cont_temp_1": 473, "7networks_rh_cont_temp_2": 473, "7networks_rh_default_par_1": 473, "7networks_rh_default_par_2": 473, "7networks_rh_default_par_3": 473, "7networks_rh_default_par_4": 473, "7networks_rh_default_par_5": 473, "7networks_rh_default_pcunpcc_1": 473, "7networks_rh_default_pcunpcc_2": 473, "7networks_rh_default_pcunpcc_3": 473, "7networks_rh_default_pcunpcc_4": 473, "7networks_rh_default_pcunpcc_5": 473, "7networks_rh_default_pcunpcc_6": 473, "7networks_rh_default_pcunpcc_7": 473, "7networks_rh_default_pcunpcc_8": 473, "7networks_rh_default_pcunpcc_9": 473, "7networks_rh_default_pfcdpfcm_1": 473, "7networks_rh_default_pfcdpfcm_10": 473, "7networks_rh_default_pfcdpfcm_11": 473, "7networks_rh_default_pfcdpfcm_12": 473, "7networks_rh_default_pfcdpfcm_13": 473, "7networks_rh_default_pfcdpfcm_2": 473, "7networks_rh_default_pfcdpfcm_3": 473, "7networks_rh_default_pfcdpfcm_4": 473, "7networks_rh_default_pfcdpfcm_5": 473, "7networks_rh_default_pfcdpfcm_6": 473, "7networks_rh_default_pfcdpfcm_7": 473, "7networks_rh_default_pfcdpfcm_8": 473, "7networks_rh_default_pfcdpfcm_9": 473, "7networks_rh_default_pfcv_1": 473, "7networks_rh_default_pfcv_2": 473, "7networks_rh_default_pfcv_3": 473, "7networks_rh_default_pfcv_4": 473, "7networks_rh_default_temp_1": 473, "7networks_rh_default_temp_2": 473, "7networks_rh_default_temp_3": 473, "7networks_rh_default_temp_4": 473, "7networks_rh_default_temp_5": 473, "7networks_rh_default_temp_6": 473, "7networks_rh_default_temp_7": 473, "7networks_rh_default_temp_8": 473, "7networks_rh_dorsattn_fef_1": 473, "7networks_rh_dorsattn_fef_2": 473, "7networks_rh_dorsattn_fef_3": 473, "7networks_rh_dorsattn_post_1": 473, "7networks_rh_dorsattn_post_10": 473, "7networks_rh_dorsattn_post_11": 473, "7networks_rh_dorsattn_post_12": 473, "7networks_rh_dorsattn_post_13": 473, "7networks_rh_dorsattn_post_14": 473, "7networks_rh_dorsattn_post_15": 473, "7networks_rh_dorsattn_post_16": 473, "7networks_rh_dorsattn_post_17": 473, "7networks_rh_dorsattn_post_18": 473, "7networks_rh_dorsattn_post_19": 473, "7networks_rh_dorsattn_post_2": 473, "7networks_rh_dorsattn_post_3": 473, "7networks_rh_dorsattn_post_4": 473, "7networks_rh_dorsattn_post_5": 473, "7networks_rh_dorsattn_post_6": 473, "7networks_rh_dorsattn_post_7": 473, "7networks_rh_dorsattn_post_8": 473, "7networks_rh_dorsattn_post_9": 473, "7networks_rh_dorsattn_prcv_1": 473, "7networks_rh_limbic_ofc_1": 473, "7networks_rh_limbic_ofc_2": 473, "7networks_rh_limbic_ofc_3": 473, "7networks_rh_limbic_ofc_4": 473, "7networks_rh_limbic_ofc_5": 473, "7networks_rh_limbic_ofc_6": 473, "7networks_rh_limbic_temppole_1": 473, "7networks_rh_limbic_temppole_2": 473, "7networks_rh_limbic_temppole_3": 473, "7networks_rh_limbic_temppole_4": 473, "7networks_rh_limbic_temppole_5": 473, "7networks_rh_limbic_temppole_6": 473, "7networks_rh_limbic_temppole_7": 473, "7networks_rh_salventattn_froperins_1": 473, "7networks_rh_salventattn_froperins_2": 473, "7networks_rh_salventattn_froperins_3": 473, "7networks_rh_salventattn_froperins_4": 473, "7networks_rh_salventattn_froperins_5": 473, "7networks_rh_salventattn_froperins_6": 473, "7networks_rh_salventattn_froperins_7": 473, "7networks_rh_salventattn_froperins_8": 473, "7networks_rh_salventattn_med_1": 473, "7networks_rh_salventattn_med_2": 473, "7networks_rh_salventattn_med_3": 473, "7networks_rh_salventattn_med_4": 473, "7networks_rh_salventattn_med_5": 473, "7networks_rh_salventattn_med_6": 473, "7networks_rh_salventattn_med_7": 473, "7networks_rh_salventattn_med_8": 473, "7networks_rh_salventattn_pfcl_1": 473, "7networks_rh_salventattn_prc_1": 473, "7networks_rh_salventattn_tempoccpar_1": 473, "7networks_rh_salventattn_tempoccpar_2": 473, "7networks_rh_salventattn_tempoccpar_3": 473, "7networks_rh_salventattn_tempoccpar_4": 473, "7networks_rh_salventattn_tempoccpar_5": 473, "7networks_rh_salventattn_tempoccpar_6": 473, "7networks_rh_salventattn_tempoccpar_7": 473, "7networks_rh_sommot_1": 473, "7networks_rh_sommot_10": 473, "7networks_rh_sommot_11": 473, "7networks_rh_sommot_12": 473, "7networks_rh_sommot_13": 473, "7networks_rh_sommot_14": 473, "7networks_rh_sommot_15": 473, "7networks_rh_sommot_16": 473, "7networks_rh_sommot_17": 473, "7networks_rh_sommot_18": 473, "7networks_rh_sommot_19": 473, "7networks_rh_sommot_2": 473, "7networks_rh_sommot_20": 473, "7networks_rh_sommot_21": 473, "7networks_rh_sommot_22": 473, "7networks_rh_sommot_23": 473, "7networks_rh_sommot_24": 473, "7networks_rh_sommot_25": 473, "7networks_rh_sommot_26": 473, "7networks_rh_sommot_27": 473, "7networks_rh_sommot_28": 473, "7networks_rh_sommot_29": 473, "7networks_rh_sommot_3": 473, "7networks_rh_sommot_30": 473, "7networks_rh_sommot_31": 473, "7networks_rh_sommot_32": 473, "7networks_rh_sommot_33": 473, "7networks_rh_sommot_34": 473, "7networks_rh_sommot_35": 473, "7networks_rh_sommot_36": 473, "7networks_rh_sommot_37": 473, "7networks_rh_sommot_38": 473, "7networks_rh_sommot_39": 473, "7networks_rh_sommot_4": 473, "7networks_rh_sommot_40": 473, "7networks_rh_sommot_5": 473, "7networks_rh_sommot_6": 473, "7networks_rh_sommot_7": 473, "7networks_rh_sommot_8": 473, "7networks_rh_sommot_9": 473, "7networks_rh_vis_1": 473, "7networks_rh_vis_10": 473, "7networks_rh_vis_11": 473, "7networks_rh_vis_12": 473, "7networks_rh_vis_13": 473, "7networks_rh_vis_14": 473, "7networks_rh_vis_15": 473, "7networks_rh_vis_16": 473, "7networks_rh_vis_17": 473, "7networks_rh_vis_18": 473, "7networks_rh_vis_19": 473, "7networks_rh_vis_2": 473, "7networks_rh_vis_20": 473, "7networks_rh_vis_21": 473, "7networks_rh_vis_22": 473, "7networks_rh_vis_23": 473, "7networks_rh_vis_24": 473, "7networks_rh_vis_25": 473, "7networks_rh_vis_26": 473, "7networks_rh_vis_27": 473, "7networks_rh_vis_28": 473, "7networks_rh_vis_29": 473, "7networks_rh_vis_3": 473, "7networks_rh_vis_30": 473, "7networks_rh_vis_4": 473, "7networks_rh_vis_5": 473, "7networks_rh_vis_6": 473, "7networks_rh_vis_7": 473, "7networks_rh_vis_8": 473, "7networks_rh_vis_9": 473, "8": [3, 4, 6, 10, 13, 15, 25, 28, 31, 34, 35, 36, 39, 40, 42, 45, 51, 52, 53, 55, 56, 57, 58, 60, 63, 64, 67, 71, 72, 73, 76, 77, 80, 87, 89, 90, 92, 93, 97, 101, 102, 104, 105, 106, 109, 111, 115, 118, 122, 127, 129, 131, 136, 144, 146, 148, 154, 163, 171, 193, 196, 199, 205, 206, 207, 208, 209, 211, 220, 230, 242, 245, 249, 255, 264, 266, 275, 277, 283, 288, 289, 290, 291, 292, 293, 298, 299, 300, 301, 303, 304, 305, 306, 320, 333, 337, 361, 364, 365, 366, 367, 368, 369, 370, 371, 377, 380, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 447, 449, 458, 459, 461, 472, 473, 488, 490], "80": [34, 45, 49, 56, 58, 66, 67, 71, 73, 85, 102, 105, 115, 159, 160, 173, 216, 219, 250, 337, 395, 400, 402, 406, 412, 418, 471, 472, 473], "800": [35, 74, 88, 252, 320, 333, 420, 459, 488], "8009": 99, "801": [70, 99], "801208": 43, "80215217e": 3, "80300296e": 3, "8037": 27, "805": [71, 115], "80741576e": 3, "80778766e": 3, "80913519e": 3, "81": [34, 120, 158, 193, 472, 473], "810": 50, "81057849e": 3, "8119": [115, 200, 213, 246], "813068": 34, "81308": 34, "81418688e": 3, "815": [91, 97, 488], "815609": 64, "8159": 35, "81650750e": 3, "81665991e": 3, "81703436e": 3, "817748e": 52, "817e": 55, "818": 105, "81943185e": 3, "82": [6, 31, 33, 34, 41, 90, 193, 472, 473], "821": [81, 83, 488], "822": [131, 158], "82243653e": 3, "823": 99, "825038": 6, "82604254e": 3, "82611626e": 3, "82638013e": 3, "827": [11, 28, 96, 97, 488], "82724e": 45, "82794700e": 3, "828": [64, 74, 472, 488], "82886222e": 3, "82972671e": 3, "83": [33, 34, 73, 115, 119, 158, 179, 211, 335, 384, 472, 473], "832": 473, "83203587e": 3, "8339": [152, 158], "834": [39, 47, 105, 488], "83468288": 71, "835504": 34, "836": [34, 103, 112, 488], "836576": 34, "837": [6, 472], "83881757e": 3, "838935": 34, "839058": 34, "8397156": 0, "84": [22, 34, 71, 92, 101, 115, 340, 361, 472, 473], "84047555e": 3, "841e": 55, "842804": 34, "842x": [104, 115, 384], "843": [71, 74, 488], "843388": 58, "844892": 58, "844e": 55, "84618590e": 3, "84695862e": 3, "84813339e": 3, "8493": 35, "85": [34, 49, 92, 131, 158, 378, 381, 472, 473], "850138": 6, "85051": 34, "8518518518518519": 3, "852582": 34, "85357118e": 3, "85520620e": 3, "85680814e": 3, "858": [99, 473], "85893120": 41, "85904487e": 3, "86": [4, 31, 33, 34, 472, 473], "861249": 34, "863": [86, 89, 93, 97, 488], "864": [6, 40], "86599575e": 3, "867": [27, 28, 488], "868": [38, 47, 488], "86831638e": 3, "8685": 35, "87": [31, 33, 34, 73, 92, 115, 472, 473], "870": [28, 488], "871": 24, "87115769e": 3, "87168683e": 3, "873351": 34, "8748": 35, "874f": 57, "875": [8, 115, 131, 158, 159], "8765432098765432": 3, "876886": 58, "878390": 58, "88": [34, 71, 82, 90, 92, 104, 115, 384, 472, 473], "880": [97, 488], "881": [87, 473], "88148636e": 3, "881e": 55, "8824": 92, "882906": 64, "884836": 34, "885": 34, "88580096": 71, "886": 3, "88648510e": 3, "88747103e": 3, "88767817e": 3, "888": 473, "88847420e": 3, "89": [31, 33, 34, 73, 78, 102, 107, 472, 473], "89029602e": 3, "89087894e": 3, "891": [115, 159], "89177297e": 3, "89275621e": 3, "89305915e": 3, "89377744e": 3, "895": 111, "8952": 92, "895e": 55, "897": [53, 61, 488], "89707579e": 3, "89848408e": 3, "8990": 173, "8a": [6, 34], "8b": 6, "8mm": 102, "9": [2, 3, 4, 6, 10, 11, 12, 15, 16, 17, 19, 21, 22, 28, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 68, 70, 71, 72, 73, 74, 76, 78, 79, 80, 83, 87, 88, 89, 90, 91, 92, 93, 95, 97, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 115, 117, 118, 119, 122, 128, 140, 149, 151, 159, 179, 200, 201, 220, 222, 225, 252, 261, 262, 275, 277, 307, 311, 320, 329, 335, 351, 357, 360, 361, 362, 365, 366, 367, 368, 369, 370, 371, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 420, 436, 438, 439, 455, 458, 472, 473, 486, 487, 488, 490], "90": [10, 13, 23, 31, 33, 34, 45, 49, 52, 55, 58, 65, 78, 80, 92, 103, 105, 115, 131, 144, 152, 158, 163, 361, 362, 436, 438, 439, 442, 462, 472, 473, 486], "900": [146, 158, 252, 473], "90072175e": 3, "901255": 6, "90209035e": 3, "902378": 34, "90256702e": 3, "9026": 35, "9033": 35, "904959": 34, "906274": 64, "907": 473, "9073798500881832": 40, "91": [2, 31, 34, 45, 58, 71, 78, 92, 152, 158, 242, 253, 472, 473], "911755": 34, "9136": 92, "91415905e": 3, "91435": 473, "915": [42, 43, 115, 218, 274], "91520": 473, "915996": 34, "9177489177489176": 35, "918": [102, 112, 488], "918703": 64, "91a": 34, "92": [31, 33, 34, 78, 104, 115, 384, 472, 473], "920": [23, 28, 80, 488], "921": 105, "922085": 58, "922613": 34, "923589": 58, "924282": 34, "92529920e": 3, "92569844e": 3, "9259259259259259": 3, "92626296e": 3, "927": [19, 28, 488], "92749893e": 3, "92870677e": 3, "929": [42, 43, 115, 218, 274], "93": [4, 31, 33, 34, 78, 92, 246, 472, 473], "931553": 34, "93194037e": 3, "932": [61, 103], "93380229e": 3, "93484967e": 3, "935": [34, 115, 211], "935719": 34, "936": 472, "937283": 64, "93778408e": 3, "938447": 34, "93851352e": 3, "94": [31, 34, 66, 78, 92, 107, 108, 269, 270, 472, 473], "940878": 34, "94178093e": 3, "94203918e": 3, "94257152": 71, "943745": 34, "944003": 34, "9444444444444444": 30, "945": [115, 211], "945328": 6, "945765": 34, "946": 473, "9462809917355371": 35, "947": 473, "947193": 6, "94835": 52, "95": [26, 31, 34, 71, 92, 94, 152, 158, 185, 196, 310, 312, 313, 472, 473], "950054": 64, "952826": 6, "953": [115, 192], "9535488": 66, "954": [20, 28, 57, 488], "95406599e": 3, "95493760e": 3, "955666": 34, "95625631e": 3, "959582": 34, "96": [6, 31, 33, 34, 51, 54, 73, 85, 110, 228, 472, 473, 488], "96234330e": 3, "9629629629629629": 3, "964": [35, 47, 488], "96433361e": 3, "964351": 34, "965": [111, 112, 115, 192, 488], "967": [65, 74, 473, 488], "9673": [115, 362], "9678": [115, 362], "968": [115, 211], "97": [31, 34, 46, 89, 472, 473], "970": 473, "972": 6, "973": 473, "974": [71, 74, 488], "974948": 34, "975": [99, 112, 488], "975076e": 50, "9753086419753086": 3, "978": [115, 312, 313], "98": [31, 33, 34, 71, 76, 88, 92, 94, 109, 115, 152, 158, 179, 335, 384, 472, 473], "980": [115, 211], "981": [7, 8, 488], "98107": 0, "981215": 34, "9816": 92, "98227386e": 3, "983": 473, "983539": 34, "98653719e": 3, "98672799e": 3, "98717296e": 3, "98727892e": 3, "98744939e": 3, "9876543209876543": 3, "98795520": 102, "988": 115, "98919713e": 3, "98950055e": 3, "99": [13, 31, 33, 34, 45, 60, 94, 152, 158, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 472, 473], "99014382e": 3, "9902": 11, "99186491e": 3, "992": [15, 28, 115, 488], "994713": 34, "99753984": 71, "9984": 92, "998496": 34, "999": [80, 473], "999324": 58, "9a": 472, "9b76y": [202, 247], "A": [0, 1, 5, 6, 7, 8, 12, 16, 17, 22, 30, 42, 44, 45, 49, 50, 51, 58, 60, 63, 65, 69, 71, 72, 73, 76, 80, 81, 85, 87, 90, 93, 98, 99, 101, 104, 107, 108, 112, 113, 114, 115, 118, 125, 129, 138, 139, 143, 146, 152, 158, 159, 161, 162, 164, 166, 168, 169, 170, 172, 173, 174, 176, 179, 181, 182, 184, 185, 186, 192, 193, 195, 196, 198, 199, 200, 202, 203, 211, 217, 220, 223, 224, 225, 226, 227, 228, 230, 232, 233, 234, 243, 245, 246, 251, 253, 254, 255, 258, 259, 260, 262, 264, 275, 276, 277, 278, 280, 286, 287, 294, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 312, 313, 316, 319, 320, 323, 329, 333, 338, 339, 345, 350, 351, 358, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 395, 396, 398, 400, 416, 417, 420, 425, 430, 432, 434, 436, 437, 440, 442, 446, 447, 448, 449, 450, 451, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 486, 488, 489], "AND": [95, 118, 127, 158], "And": [7, 26, 43, 103, 159, 174, 182, 185], "As": [3, 6, 16, 35, 37, 40, 46, 51, 54, 56, 67, 80, 82, 93, 95, 96, 99, 102, 105, 117, 124, 146, 158, 159, 160, 162, 164, 165, 166, 170, 172, 173, 175, 178, 184, 228, 323, 361, 362], "At": [57, 65, 66, 69, 76, 78, 81, 92, 110, 163, 181, 182, 333, 335], "BY": [126, 158, 215], "Be": [165, 166, 173, 234, 307, 460], "But": [51, 81, 99, 163, 172, 175, 186], "By": [3, 15, 16, 26, 30, 34, 36, 40, 60, 65, 70, 71, 103, 150, 158, 166, 173, 182, 186, 223, 233, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 294, 298, 299, 300, 301, 303, 304, 305, 306, 320, 333, 339, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 419, 425, 428, 429, 431, 433, 434, 435, 442, 447, 448, 449, 452, 486], "For": [3, 4, 6, 7, 10, 15, 16, 20, 24, 25, 30, 31, 33, 35, 36, 37, 38, 40, 42, 43, 44, 45, 50, 52, 53, 56, 65, 67, 69, 71, 72, 73, 76, 80, 81, 87, 90, 92, 99, 101, 103, 105, 107, 110, 117, 118, 143, 153, 158, 159, 160, 162, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 178, 179, 181, 182, 184, 185, 186, 191, 192, 193, 194, 195, 198, 199, 201, 202, 204, 211, 212, 213, 214, 218, 219, 220, 222, 226, 227, 229, 230, 231, 232, 239, 242, 243, 244, 248, 249, 252, 253, 255, 256, 265, 266, 272, 275, 277, 279, 284, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 303, 304, 305, 306, 310, 311, 312, 313, 320, 327, 333, 335, 350, 358, 361, 362, 365, 366, 368, 369, 371, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 419, 425, 428, 430, 433, 434, 435, 436, 437, 438, 439, 447, 449, 450, 451, 457, 458, 459, 460, 471, 473, 486, 487], "If": [0, 2, 10, 15, 16, 25, 35, 36, 37, 42, 43, 44, 49, 50, 51, 53, 54, 55, 56, 57, 58, 60, 63, 70, 76, 80, 85, 87, 90, 92, 93, 95, 99, 100, 101, 104, 105, 106, 107, 108, 113, 117, 118, 126, 143, 150, 151, 153, 158, 159, 163, 165, 166, 168, 170, 172, 173, 175, 179, 181, 182, 184, 185, 186, 192, 213, 232, 233, 234, 236, 238, 239, 240, 241, 244, 245, 246, 248, 249, 251, 253, 261, 265, 266, 269, 270, 273, 275, 277, 279, 280, 284, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 316, 317, 320, 323, 327, 329, 333, 334, 335, 336, 337, 338, 339, 343, 344, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 360, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 458, 459, 460, 461, 465, 466, 467, 471, 486, 487], "In": [0, 2, 4, 6, 10, 15, 16, 17, 19, 23, 24, 25, 31, 33, 34, 37, 39, 40, 41, 42, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 60, 64, 66, 67, 68, 73, 76, 78, 80, 82, 87, 88, 90, 92, 95, 96, 100, 101, 103, 104, 108, 110, 111, 115, 116, 117, 118, 124, 125, 138, 143, 153, 155, 156, 158, 159, 160, 162, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 179, 181, 182, 183, 184, 185, 186, 192, 193, 196, 213, 219, 222, 223, 232, 239, 242, 244, 248, 249, 250, 275, 277, 298, 299, 300, 301, 303, 304, 305, 306, 307, 310, 312, 313, 320, 322, 327, 333, 335, 336, 353, 354, 355, 357, 378, 384, 420, 421, 433, 437, 445, 446, 455, 458, 471, 486, 487], "Ins": 53, "It": [2, 3, 6, 10, 15, 16, 17, 23, 35, 38, 40, 43, 44, 46, 50, 53, 63, 66, 67, 71, 72, 76, 78, 82, 90, 95, 99, 101, 102, 110, 116, 117, 118, 122, 133, 136, 137, 139, 150, 151, 152, 153, 158, 159, 160, 165, 166, 168, 169, 170, 172, 173, 175, 179, 180, 181, 182, 184, 185, 186, 196, 197, 216, 219, 220, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 487], "Its": [159, 167, 172, 302, 313, 320, 333, 336, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 459], "NOS": 240, "NOT": 118, "No": [11, 16, 19, 22, 50, 52, 58, 67, 78, 88, 89, 92, 107, 109, 110, 172, 173, 354, 472], "Not": [3, 67, 72, 248, 249, 388, 446, 448], "ON": 51, "ONE": [115, 181], "OR": 118, "Of": 69, "On": [14, 37, 51, 54, 55, 58, 60, 64, 67, 69, 76, 78, 105, 115, 144, 158, 160, 172, 181, 185, 186, 233, 236], "One": [3, 6, 15, 35, 36, 40, 50, 51, 58, 71, 72, 80, 151, 158, 159, 160, 165, 166, 170, 172, 174, 175, 177, 178, 182, 184, 186, 294, 320, 353, 362, 366, 367, 369, 452], "Or": [30, 118, 165, 486], "Such": [95, 159, 358], "That": [36, 37, 42, 43, 44, 49, 53, 54, 55, 56, 57, 58, 60, 63, 70, 90, 92, 93, 95, 99, 100, 101, 104, 105, 106, 107, 108, 117, 150, 158, 179, 307, 311, 320, 322, 327], "The": [0, 2, 3, 6, 7, 10, 12, 15, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 33, 35, 37, 40, 42, 43, 44, 45, 47, 49, 50, 51, 53, 54, 56, 57, 60, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 76, 77, 78, 80, 81, 82, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 106, 108, 110, 111, 113, 115, 117, 118, 120, 121, 122, 124, 125, 127, 129, 131, 133, 134, 135, 136, 137, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 162, 163, 164, 166, 167, 168, 169, 170, 172, 173, 174, 175, 178, 179, 181, 182, 183, 184, 185, 190, 191, 192, 193, 195, 196, 198, 199, 201, 204, 211, 212, 213, 214, 215, 216, 221, 222, 223, 225, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 261, 262, 264, 265, 266, 268, 269, 270, 272, 273, 276, 277, 278, 279, 280, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 322, 323, 327, 328, 329, 333, 334, 335, 336, 337, 338, 339, 340, 344, 348, 349, 350, 351, 352, 353, 354, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 471, 472, 473, 477, 478, 482, 486, 487, 488, 489], "Their": 218, "Then": [2, 3, 15, 31, 42, 44, 49, 52, 53, 57, 64, 65, 95, 96, 111, 163, 165, 167, 168, 173, 182, 185, 186, 232, 234, 266, 446], "There": [0, 4, 22, 67, 162, 165, 166, 167, 173, 179, 242, 250, 310, 312, 313, 334, 361, 456, 486], "These": [3, 4, 6, 16, 40, 57, 60, 62, 73, 75, 78, 80, 82, 90, 95, 109, 113, 117, 146, 149, 150, 153, 158, 165, 168, 169, 171, 172, 173, 177, 178, 179, 182, 186, 192, 193, 202, 213, 214, 228, 247, 258, 260, 296, 481, 486, 487], "To": [0, 2, 3, 4, 6, 16, 22, 23, 24, 32, 34, 38, 41, 42, 44, 45, 50, 51, 52, 53, 54, 56, 57, 64, 67, 68, 70, 77, 78, 80, 81, 88, 90, 95, 99, 102, 103, 106, 110, 117, 118, 129, 138, 143, 155, 158, 159, 160, 162, 165, 166, 167, 168, 170, 173, 174, 175, 178, 182, 184, 185, 275, 310, 312, 313, 320, 329, 333, 337, 349, 361, 428, 433, 434, 435, 436, 438, 439, 442, 446, 459, 486], "Will": [240, 275, 281, 320, 327, 342, 353, 354, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 430, 439, 443], "With": [10, 15, 33, 58, 79, 90, 168, 172, 175, 233, 236, 316, 362, 461, 470, 487], "_": [31, 37, 44, 46, 49, 51, 53, 59, 63, 64, 76, 78, 81, 95, 101, 104, 107, 108, 124, 151, 155, 158, 173, 280, 323, 360], "__": [101, 232, 233, 234, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 449], "______________________________________________________________________": 31, "________________________________________________________________________________": [34, 50, 51, 52, 54, 55, 58, 60], "___________________________________________________________unmask": 34, "__________________________________________________________fastica": 52, "__________________________________________________________run_glm": 34, "________________________________________________________ward_tre": 51, "_____________________________________________________resample_img": 54, "____________________________________________________estimator_fit": 51, "___________________________________________________randomized_svd": [50, 52], "__________________________________________________filter_and_mask": 34, "_________________________________________________compute_load": [50, 52], "_______________________________________________filter_and_extract": [51, 54, 55, 58, 60], "______________________________________________explained_vari": 50, "_____________________________________________dict_learning_onlin": [50, 52], "__________________________________________high_variance_confound": 55, "________________________________________resample_img": 56, "__________________________________filter_and_extract": [56, 58], "_________________________________recursive_neighbor_agglomer": 51, "__all__": 173, "__class__": 46, "__init__": [173, 232, 233, 234, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 320, 333, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 446, 447, 448, 449, 457, 463, 464, 465, 466, 467, 468], "__init___": 311, "__name__": 46, "__version__": 173, "_adjust_screening_percentil": [138, 158], "_agglom": 51, "_apply_cluster_size_threshold": [154, 158], "_apply_mask": 111, "_ax": [11, 16, 19, 22, 50, 52, 88, 89], "_ball_sample_loc": 25, "_base": [35, 41, 50, 51], "_build": 173, "_build_pars": 362, "_cach": 50, "_check_look_up_t": 173, "_check_mask_shap": 173, "_check_mask_valu": 173, "_check_second_level_input": [155, 158], "_chunk_report_": [4, 6, 10, 22, 41, 66, 71, 102, 103], "_cmap_d": 13, "_col_filters_available_on_serv": 275, "_column": 175, "_compute_facecolors_matplotlib": [126, 158], "_compute_load": [50, 52], "_convolve_regressor": 65, "_data": [21, 50, 52], "_design": 360, "_dict_learn": [50, 52], "_empty_filt": 275, "_estimator_fit": 51, "_explained_vari": 50, "_extractionfunctor": [51, 54, 55, 58, 60], "_fastica": [52, 93, 106], "_fetch_neurovault_implement": 109, "_full_brain_info": [126, 158], "_gamma_difference_hrf": [155, 158], "_get_clusters_t": [127, 158], "_get_mask_volum": [138, 158], "_get_vertexcolor": [126, 158], "_get_voxelwise_model_attribut": [151, 158], "_glob_spm_multimodal_fmri_data": 71, "_hemi": [7, 465, 466], "_label": 68, "_latest": 182, "_line_sample_loc": 25, "_method": 60, "_mix_colormap": [126, 158], "_neurosynth_fetch_words_url": [155, 158], "_neurovault_base_url": [155, 158], "_one_mesh_info": [126, 158], "_plot_surf_matplotlib": [126, 158], "_projector": [14, 15, 17, 53, 54, 60, 129, 153, 158], "_r": 13, "_region_id_nam": [129, 158], "_safe_cach": [124, 158], "_safe_get_data": [138, 158], "_sample_locations_between_surfac": 25, "_scale": 196, "_scan": 175, "_slicer": [2, 4, 10, 11, 16, 17, 18, 19, 26, 31, 37, 41, 42, 44, 45, 50, 70, 72, 76, 82, 87, 88, 89, 90, 93, 95, 99, 104, 108, 153, 158], "_space": 323, "_stat": 360, "_statmap": 360, "_tag": 359, "_task": [64, 323], "_test": 173, "_univariate_select": 111, "_update_submatrix": 172, "_util": [25, 39, 40, 42, 46, 51, 59, 68, 72, 79, 92, 107, 108, 111, 125, 127, 133, 152, 155, 158, 172, 173, 182], "_valid": 173, "_validate_shap": 173, "_version": 182, "_voxel": 175, "_vx": 182, "_z_map": 72, "a4c8868ab5c651b8594da6f3204": 41, "a_model001_task002_cope011_tstat1": 109, "a_nice_funct": 173, "aal": [129, 135, 158, 188, 242], "aal3": 242, "ab": [31, 45, 46, 55, 60, 82, 85, 104, 105, 106, 384, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421], "abadi": [0, 131, 133, 136, 143, 158], "abb4588": 115, "abbrevi": 184, "abdulrahman": [101, 115], "aben": [0, 146, 158], "aberr": 79, "abid": [6, 115, 137, 158, 173, 188, 240], "abl": [31, 33, 38, 129, 158, 173, 182, 358, 436, 438, 439, 486], "abnorm": [115, 211], "about": [0, 2, 3, 6, 15, 20, 25, 51, 64, 65, 77, 79, 80, 95, 101, 102, 103, 110, 117, 118, 124, 125, 126, 129, 131, 146, 154, 158, 162, 165, 166, 168, 170, 172, 173, 174, 175, 179, 180, 181, 184, 191, 192, 194, 196, 198, 201, 202, 212, 219, 220, 227, 230, 244, 253, 255, 264, 266, 272, 279, 288, 289, 290, 291, 292, 293, 362, 460, 471, 472], "abov": [2, 3, 4, 6, 15, 22, 34, 40, 44, 49, 50, 51, 58, 67, 87, 95, 101, 118, 127, 129, 130, 138, 158, 159, 160, 162, 164, 165, 170, 172, 173, 174, 179, 182, 184, 185, 186, 212, 227, 242, 264, 266, 288, 289, 292, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 316, 320, 322, 324, 325, 326, 327, 330, 331, 332, 338, 353, 354, 361, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 389, 390, 391, 392, 393, 394, 396, 398, 399, 401, 403, 405, 407, 409, 411, 421, 433, 441, 443, 445, 447, 449, 460, 461], "abraham": [0, 53, 100, 115, 119, 120, 122, 123, 131, 133, 136, 146, 158, 163, 196, 361, 362, 449], "abrupt": 186, "absenc": [175, 182, 452], "absent": [6, 71], "absolut": [44, 45, 53, 60, 111, 146, 158, 170, 172, 173, 215, 257, 267, 280, 337, 342, 357, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 418, 419, 421, 427, 428, 430, 434, 435, 436, 439, 442, 443, 445, 486], "absolute_path": 109, "abstract": [116, 364], "abstract_knowledge_regparam": 105, "ac": [2, 6, 22, 71, 115, 211, 213, 214, 227, 228, 229, 253, 281, 282], "academi": [115, 170, 181, 192, 196, 227, 253, 302, 362], "acc": 21, "acceler": [115, 221], "accept": [2, 3, 49, 66, 124, 125, 129, 137, 138, 140, 143, 144, 146, 149, 150, 151, 152, 153, 154, 155, 158, 173, 174, 184, 192, 251, 333, 335, 336, 358, 375, 376, 377, 378, 379, 380, 381, 419, 430, 432, 433, 434, 435, 442, 444, 455, 456], "access": [6, 34, 37, 40, 50, 58, 63, 64, 67, 72, 76, 115, 117, 125, 153, 158, 160, 164, 172, 173, 174, 183, 184, 186, 210, 241, 242, 245, 250, 251, 252, 255, 256, 272, 281, 282, 283, 308, 398, 477, 489], "accommod": [127, 143, 158], "accord": [43, 46, 95, 101, 124, 138, 139, 140, 143, 149, 151, 155, 158, 163, 170, 173, 203, 221, 231, 233, 240, 242, 244, 246, 248, 249, 251, 252, 254, 255, 296, 298, 299, 300, 301, 303, 304, 307, 338, 358, 384, 430, 431, 436, 438, 439, 443, 445, 448, 449, 460, 461, 486], "accordingli": [16, 153, 158, 358], "account": [6, 67, 77, 95, 170, 173, 182, 186, 192, 214, 361, 365, 366, 368, 369, 371, 449], "accumul": [110, 486], "accur": [51, 60, 67, 69, 146, 154, 158, 170, 174, 175], "accuraci": [30, 31, 32, 33, 34, 36, 38, 43, 53, 99, 100, 150, 158, 169, 170, 179, 181, 298, 300, 302, 303, 489], "accuracy_scor": [43, 53], "accuracy_to_print": 43, "acharya": 0, "achiev": [10, 16, 57, 71, 94, 165, 172, 181, 185, 186, 236], "acompcor_combin": 361, "acoustic_processing_regparam": 105, "acq": 323, "acquir": [3, 40, 67, 68, 117, 175, 179, 181, 215, 228], "acquis": 186, "acquisit": [3, 6, 31, 33, 65, 67, 71, 102, 115, 170, 175, 179, 196, 228, 270, 327, 420], "across": [3, 6, 16, 17, 40, 49, 52, 53, 58, 66, 67, 81, 95, 99, 100, 101, 105, 111, 115, 125, 130, 146, 152, 158, 159, 160, 163, 164, 165, 166, 168, 170, 175, 177, 179, 191, 196, 204, 211, 219, 227, 232, 240, 250, 283, 298, 299, 300, 301, 303, 304, 305, 306, 356, 373, 375, 420, 447, 449, 471, 486], "act": [30, 35, 139, 158, 179, 238, 239, 242, 244, 246, 248, 249, 251, 252, 254, 255, 386], "action": [173, 175, 182, 198, 270], "action_perception_regparam": 105, "action_regparam": 105, "activ": [6, 7, 15, 16, 17, 31, 33, 42, 43, 51, 67, 69, 70, 71, 72, 77, 78, 80, 81, 82, 101, 110, 115, 117, 159, 160, 163, 164, 165, 169, 170, 172, 173, 174, 175, 178, 179, 181, 182, 186, 192, 193, 196, 198, 203, 217, 218, 219, 227, 234, 240, 242, 250, 253, 274, 295, 315, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 418, 449, 451, 487], "activation_level_regparam": 105, "activation_regparam": 105, "activation_threshold": 418, "active_maintenance_regparam": 105, "active_retrieval_regparam": 105, "actual": [3, 6, 44, 67, 68, 71, 78, 87, 107, 126, 158, 172, 173, 175, 179, 184, 222, 320, 333, 336, 459], "acuity_regparam": 105, "ad": [2, 15, 16, 19, 21, 22, 31, 37, 42, 44, 45, 50, 68, 69, 73, 85, 88, 104, 108, 124, 125, 126, 129, 130, 139, 140, 150, 152, 153, 154, 155, 158, 168, 172, 174, 182, 232, 233, 234, 238, 239, 244, 247, 249, 252, 254, 255, 260, 261, 262, 266, 267, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 323, 329, 333, 335, 337, 338, 342, 347, 348, 349, 350, 352, 353, 354, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 377, 380, 384, 385, 387, 388, 419, 420, 421, 424, 425, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 445, 446, 447, 448, 449, 451, 458, 461, 463, 464, 465, 466, 467, 468, 471, 489], "adam": [101, 115], "adapt": [51, 66, 117, 129, 158, 163, 166, 173, 320, 329, 361, 472, 473], "adaptation_regparam": 105, "adaptive_control_regparam": 105, "add": [10, 15, 16, 21, 32, 42, 43, 52, 58, 65, 69, 81, 104, 118, 123, 124, 125, 126, 127, 128, 129, 130, 136, 138, 139, 141, 143, 146, 151, 155, 156, 158, 163, 165, 168, 170, 173, 179, 182, 234, 275, 277, 296, 338, 361, 370, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 441, 443, 445, 460, 461, 486], "add_ax": [2, 16, 19, 31, 37, 42, 44, 45, 50, 88, 104, 108], "add_contour": [10, 15, 19, 129, 139, 146, 158, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 486], "add_edg": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 486], "add_graph": [129, 158, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411], "add_mark": [42, 57, 63, 70, 101, 135, 141, 144, 158, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 486], "add_object_bound": [385, 387, 388], "add_overlai": [52, 122, 158, 163, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 425, 427, 428, 433, 434, 435, 486], "add_patch": 42, "add_reg": [63, 65, 174, 327], "add_reg_nam": [63, 65, 327], "add_subplot": [63, 92], "addiction_regparam": 105, "addit": [0, 15, 16, 40, 57, 65, 67, 70, 80, 87, 90, 102, 117, 118, 120, 125, 138, 143, 149, 158, 165, 168, 172, 174, 179, 181, 182, 193, 240, 242, 264, 274, 298, 299, 300, 301, 302, 305, 306, 308, 320, 327, 333, 335, 358, 361, 362, 364, 367, 370, 446, 447, 448, 457, 486], "addition": [15, 16, 60, 70, 152, 158, 173, 178, 182, 185, 186, 202, 212, 323, 384, 458], "address": [115, 175, 178, 179, 182, 335, 384], "adelsberg": [115, 221], "adelsheim": [115, 195, 243], "adelstein": 115, "adequ": [76, 199], "adhd": [62, 74, 103, 113, 146, 155, 158, 159, 174, 188, 241, 320, 327, 364, 371, 397, 435, 457, 459, 473, 483, 488], "adhd200": [194, 241], "adhd200_40sub_preprocess": [194, 241], "adhd40_0010064": 103, "adhd_dataset": [12, 63, 174], "adher": 173, "adjac": [38, 146, 158, 463], "adjacency_matrix": [23, 49, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 441], "adjust": [40, 67, 68, 124, 129, 141, 158, 362, 386, 397, 400], "adjust_screening_percentil": 40, "admittedli": 162, "adolesc": [115, 181], "adopt": [170, 179], "adriana": [115, 221], "adult": [50, 53, 100, 115, 146, 158, 180, 196, 201, 222, 261], "adulthood": [115, 213], "advanc": [0, 57, 111, 112, 115, 159, 165, 167, 168, 173, 174, 181, 185, 233, 264, 298, 300, 301, 345, 364, 370, 420, 435, 488, 489], "advantag": [40, 44, 45, 69, 172, 186], "advertis": [128, 158], "advic": [165, 192], "advis": [106, 173, 184, 266, 378, 447], "aesthet": [129, 158], "affect": [65, 73, 103, 129, 152, 158, 175, 179], "affect_perception_regparam": 105, "affect_recognition_regparam": 105, "affili": 173, "affin": [32, 42, 45, 49, 51, 58, 71, 80, 84, 87, 90, 92, 94, 95, 97, 103, 105, 113, 137, 152, 158, 179, 183, 186, 211, 298, 299, 300, 301, 303, 304, 305, 306, 320, 333, 338, 339, 340, 341, 343, 348, 349, 350, 351, 352, 353, 354, 356, 365, 366, 367, 368, 369, 370, 376, 377, 378, 379, 380, 381, 382, 385, 387, 388, 440, 447, 452, 455, 456, 471, 475, 488, 489], "affine_": [367, 370], "afni": [155, 158], "after": [24, 29, 33, 35, 37, 40, 42, 47, 52, 58, 67, 78, 95, 99, 101, 107, 113, 127, 154, 158, 162, 163, 165, 170, 172, 173, 175, 179, 182, 185, 186, 196, 236, 264, 298, 299, 300, 301, 305, 320, 328, 329, 333, 338, 342, 345, 350, 361, 362, 369, 370, 450, 452, 453, 457, 458, 459, 488], "afterward": [2, 172, 182], "ag": [45, 48, 61, 79, 98, 112, 113, 115, 146, 158, 159, 166, 167, 171, 178, 179, 180, 181, 194, 196, 201, 211, 213, 222, 232, 240, 250, 261, 272, 284, 298, 299, 300, 301, 303, 304, 364, 369, 421, 432, 440, 472, 488], "again": [16, 51, 72, 92, 103, 105, 117, 173, 178, 181, 275, 277], "against": [64, 165, 174, 179, 275, 335, 384, 432], "age_at_scan": 240, "age_design": 76, "age_group": 261, "age_pr": 44, "age_stat": 76, "age_test": [44, 45], "age_train": [44, 45], "ageeffectongm": 76, "ageeffectongm_contrast": 76, "ageeffectongm_design": 76, "ageeffectongm_report": 76, "ageeffectongm_stat": 76, "ageeffectongm_statmap": 76, "agenc": 0, "agency_regparam": 105, "agencyenterpris": 0, "agent": 68, "agg": 440, "aggarw": [0, 128, 129, 130, 156, 158], "agglom": [51, 146, 158, 162, 447], "agglomer": [51, 115, 179, 180, 300, 301, 446, 447, 448, 454], "agglomerativeclust": [51, 447], "aggreg": [32, 41, 60, 149, 158, 167, 179, 195, 243, 300, 301], "aggres": 362, "aggress": 362, "agre": [44, 76, 173, 192, 222, 272, 279, 333, 335], "agreeableness_regparam": 105, "agreement": [44, 64, 76, 192, 226], "ahern": [115, 211], "ahmad": [0, 124, 125, 126, 152, 153, 155, 158], "ai": 0, "aic": 310, "aid": [115, 205, 206, 207, 208, 209, 230, 255, 283], "aim": [30, 35, 40, 49, 133, 158, 165, 173, 179, 303, 304], "aina": [0, 131, 158], "air": 0, "aka": [6, 67, 162, 175, 315], "aki": [42, 43, 115, 143, 158, 218, 274], "akshai": [143, 158], "al": [3, 23, 29, 32, 38, 40, 46, 47, 50, 51, 53, 58, 60, 67, 71, 72, 73, 77, 99, 100, 101, 104, 113, 118, 138, 143, 158, 159, 162, 165, 166, 167, 170, 171, 172, 181, 186, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 236, 240, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 264, 270, 272, 273, 274, 275, 277, 283, 298, 301, 304, 305, 306, 312, 313, 315, 338, 340, 345, 357, 361, 362, 364, 367, 370, 384, 412, 435, 440, 448, 449, 454, 461, 473, 488], "alan": [115, 196, 213, 244], "alberto": [115, 361, 362], "aldo": [77, 115, 315], "alecia": [60, 115, 203, 224, 258, 259], "alex": [0, 58, 115, 140, 143, 158, 160, 170, 213, 362], "alexa": [115, 201, 261], "alexand": [60, 115, 191, 203, 224, 225, 240, 252, 258, 259], "alexandr": [0, 46, 51, 53, 100, 115, 119, 120, 122, 123, 126, 129, 131, 133, 136, 143, 145, 146, 158, 159, 163, 171, 181, 219, 233, 250, 449], "alexi": [0, 115, 124, 125, 143, 146, 151, 153, 155, 158, 221], "alff": 240, "algorithm": [50, 51, 90, 93, 95, 104, 106, 107, 117, 159, 162, 163, 164, 167, 168, 170, 179, 186, 187, 189, 196, 222, 233, 236, 305, 306, 344, 379, 381, 446, 449, 451, 462], "alia": [232, 233, 234, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 449, 486], "alias": [124, 158], "align": [53, 58, 92, 100, 127, 158, 302, 354, 356, 427], "alik": [199, 223, 245], "alisha": [0, 126, 158], "aliz": 102, "all": [3, 4, 9, 16, 20, 24, 28, 31, 34, 36, 37, 40, 41, 42, 43, 44, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 65, 67, 69, 70, 71, 72, 73, 77, 78, 80, 81, 88, 90, 92, 93, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117, 118, 124, 125, 126, 127, 129, 130, 131, 136, 143, 146, 149, 151, 153, 154, 156, 158, 159, 160, 162, 163, 164, 166, 168, 170, 172, 173, 175, 177, 178, 181, 182, 184, 185, 186, 191, 192, 194, 195, 196, 202, 204, 214, 220, 226, 233, 234, 236, 240, 241, 243, 244, 245, 261, 269, 270, 273, 275, 278, 279, 280, 284, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 315, 320, 323, 329, 333, 334, 335, 338, 339, 344, 349, 350, 353, 354, 355, 357, 358, 359, 360, 361, 362, 365, 366, 367, 369, 370, 371, 379, 381, 382, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 421, 425, 427, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 445, 447, 449, 452, 459, 461, 471, 473, 484, 486, 487, 488], "all_categori": 31, "all_coef_": [303, 304], "allel": [115, 192], "allen": [22, 115, 138, 158, 188, 243], "allen2011": 22, "allen_rsn_2011": 22, "allevi": 95, "allow": [10, 21, 25, 38, 42, 50, 53, 60, 65, 90, 100, 101, 102, 104, 110, 117, 125, 126, 127, 129, 130, 137, 139, 144, 146, 150, 151, 154, 155, 156, 158, 159, 165, 172, 173, 174, 176, 179, 182, 186, 192, 232, 233, 234, 262, 270, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 323, 333, 335, 358, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 424, 432, 446, 447, 448, 449], "allow_overlap": [54, 55, 56, 60, 366, 369, 371, 373, 473], "almli": [115, 196, 213], "almost": [25, 41, 51, 106, 172, 186], "alon": [173, 175, 486], "along": [25, 26, 49, 67, 85, 87, 101, 103, 110, 125, 146, 151, 158, 164, 171, 173, 179, 185, 186, 303, 304, 320, 328, 353, 355, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 385, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 399, 400, 401, 403, 405, 407, 409, 411, 414, 415, 419, 425, 428, 429, 433, 434, 435, 449, 450, 461, 471, 486], "alpha": [6, 16, 24, 25, 38, 41, 42, 46, 50, 52, 59, 68, 76, 77, 78, 82, 110, 130, 155, 159, 164, 171, 175, 233, 234, 236, 303, 304, 306, 310, 312, 313, 315, 319, 320, 333, 336, 357, 360, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 421, 427, 431, 433, 434, 436, 438, 439, 459, 486], "alpha_": [59, 234], "alpha_cmap": [52, 163], "alpha_grids_": [303, 304], "alpha_max": [303, 304], "alpha_min": [303, 304], "alphabet": [115, 146, 158, 182, 184], "alreadi": [22, 34, 35, 51, 72, 90, 95, 102, 105, 109, 110, 118, 129, 130, 146, 153, 158, 163, 165, 166, 173, 181, 186, 275, 277, 333, 335, 354, 384, 449], "also": [0, 3, 4, 7, 12, 15, 16, 17, 18, 23, 24, 30, 32, 35, 40, 44, 45, 51, 52, 53, 57, 58, 64, 65, 67, 68, 70, 71, 73, 76, 78, 80, 87, 90, 92, 94, 95, 96, 99, 110, 117, 118, 122, 124, 126, 127, 129, 131, 136, 137, 139, 143, 146, 149, 152, 153, 155, 158, 159, 160, 163, 164, 166, 167, 168, 170, 172, 173, 174, 175, 177, 178, 179, 181, 182, 184, 185, 186, 187, 199, 200, 204, 211, 219, 220, 228, 234, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 294, 298, 299, 300, 301, 303, 304, 305, 306, 320, 322, 323, 327, 333, 345, 349, 350, 353, 358, 359, 361, 367, 370, 375, 376, 377, 378, 379, 380, 381, 419, 420, 425, 426, 428, 433, 434, 435, 436, 438, 439, 447, 450, 451, 455, 456, 459, 486, 489], "alter": [16, 150, 158], "altern": [6, 7, 10, 17, 21, 23, 54, 56, 60, 67, 72, 161, 162, 170, 179, 186, 228, 310, 312, 313, 384, 489], "although": [34, 41, 51, 80, 166, 179, 182, 186], "altruism_regparam": 105, "altruistic_motivation_regparam": 105, "alumit": [3, 32, 33, 39, 99, 115, 212, 264], "alwai": [2, 16, 17, 19, 31, 37, 42, 44, 45, 50, 88, 101, 104, 108, 165, 168, 172, 173, 175, 186, 242, 299, 304, 310, 312, 313, 317, 361, 442, 443, 445, 452, 486], "alzheim": 222, "am": [0, 115, 200, 246], "amadeu": [0, 49, 136, 158], "amag": 0, "amal": [115, 213], "amanda": [115, 223, 251], "amax": 107, "ambi": 240, "ambidextr": 240, "america": 302, "american": [115, 211], "ami": 115, "among": [6, 80, 125, 158, 175, 179, 244, 298, 299, 300, 301], "amongst": [384, 486], "amount": [0, 25, 35, 37, 52, 67, 96, 166, 168, 173, 180, 181, 182, 233, 275, 298, 299, 300, 301, 303, 304, 305, 306, 320, 333, 339, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 447, 448, 449], "amp": [472, 473], "amplifi": 172, "amplitud": [65, 68, 240, 322, 327, 441, 443, 445], "amsterdam": 0, "amunt": [115, 214], "amygdala": [226, 260], "an": [0, 2, 3, 4, 7, 12, 15, 16, 17, 19, 21, 22, 23, 26, 30, 31, 32, 34, 35, 37, 38, 39, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 56, 57, 58, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 74, 76, 80, 81, 84, 85, 88, 89, 90, 92, 93, 95, 97, 101, 102, 103, 104, 105, 107, 108, 110, 113, 115, 117, 118, 124, 125, 126, 127, 128, 129, 131, 134, 135, 136, 138, 139, 140, 141, 143, 146, 148, 149, 150, 151, 153, 155, 156, 158, 159, 160, 161, 163, 166, 167, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 181, 182, 184, 185, 186, 191, 192, 193, 198, 199, 211, 213, 219, 222, 229, 232, 233, 234, 238, 242, 245, 246, 250, 256, 261, 270, 271, 273, 275, 277, 280, 287, 291, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 316, 320, 327, 329, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 347, 348, 349, 350, 352, 353, 354, 355, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 457, 459, 461, 462, 465, 469, 470, 471, 475, 488, 489], "ana": [0, 146, 150, 152, 158], "anaconda": [143, 158, 487], "anal": [51, 115, 448, 454], "analog": 95, "analu": [140, 143, 158], "analys": [69, 101, 103, 115, 126, 158, 165, 170, 174, 175, 176, 178, 179, 180, 186, 203, 217, 487], "analysi": [1, 7, 8, 16, 29, 30, 32, 34, 35, 40, 47, 50, 51, 65, 67, 68, 71, 72, 73, 74, 78, 79, 80, 81, 83, 96, 99, 112, 115, 116, 118, 129, 158, 159, 160, 164, 166, 169, 171, 176, 177, 178, 179, 180, 181, 185, 186, 200, 202, 203, 204, 211, 217, 224, 229, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 261, 262, 264, 267, 269, 270, 271, 277, 280, 281, 286, 287, 297, 298, 302, 305, 307, 311, 312, 313, 320, 323, 333, 336, 343, 345, 348, 349, 350, 351, 357, 360, 361, 362, 363, 364, 370, 384, 397, 412, 419, 422, 423, 427, 428, 429, 430, 434, 435, 439, 440, 449, 457, 458, 459, 467, 472, 483, 487, 488, 489], "analyz": [3, 34, 40, 51, 62, 75, 95, 113, 164, 173, 175, 177, 179, 181, 183, 196, 214, 384, 474, 489], "anand": [0, 129, 158], "anat": [3, 4, 6, 16, 17, 18, 19, 26, 30, 31, 33, 44, 45, 95, 117, 165, 184, 186, 198, 212, 228, 229, 231, 256, 264, 268, 270, 281, 282, 358], "anat_combin": [361, 362], "anat_img": [140, 158, 419], "anat_separ": 361, "anatom": [3, 4, 6, 12, 16, 18, 19, 23, 26, 31, 33, 37, 95, 104, 115, 118, 139, 158, 163, 170, 179, 186, 193, 196, 200, 202, 212, 213, 223, 226, 231, 240, 242, 244, 246, 254, 261, 264, 265, 268, 270, 361, 419, 428, 433, 435, 442, 486], "anatomi": [6, 44, 69, 76, 198, 226, 256], "anatomical_imag": [337, 349], "anats_all_subject": 4, "anats_all_subjects_smooth": 4, "anchor": 85, "anchoredoffsetbox": [385, 387, 388], "anchoredsizebar": [385, 387, 388], "ander": [23, 115, 200, 205, 206, 207, 208, 209, 211, 246, 254, 283], "anderson": [104, 115, 191, 192, 240, 384], "andi": 7, "andr": [51, 115, 165, 181, 448, 454], "andrea": [50, 115, 159, 164, 232, 305], "andrew": [115, 160, 191, 195, 199, 213, 240, 243, 245], "andr\u00e9": [0, 115, 146, 158, 167, 181, 200, 246, 300, 301], "angel": 0, "angela": [115, 195, 227, 243, 253], "angl": [25, 85, 125, 158, 179, 306, 436, 438, 439], "angular": [92, 473], "ani": [4, 6, 51, 58, 60, 76, 82, 101, 105, 106, 117, 124, 147, 149, 155, 158, 160, 162, 165, 166, 169, 170, 172, 173, 174, 175, 179, 182, 186, 240, 264, 275, 277, 340, 345, 349, 355, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 430, 433, 449, 453, 458, 461, 467, 471, 486, 487, 489], "anim": [115, 196, 213], "anish": [115, 361], "anisotrop": 186, "anisotropi": 95, "ann": [0, 60, 115, 125, 158, 203, 224, 258, 259], "anna": [115, 221], "annot": [95, 116, 126, 129, 138, 149, 158, 200, 220, 225, 230, 252, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 421, 425, 427, 428, 431, 433, 434, 435, 436, 437, 438, 439, 442, 445, 469, 486, 489], "annual": [115, 192, 196], "annunzio": 0, "anoth": [6, 10, 41, 67, 69, 80, 90, 135, 140, 158, 165, 172, 173, 175, 181, 183, 184, 232, 303, 304, 339, 340, 359, 457, 486, 489], "anova": [3, 29, 36, 40, 44, 47, 107, 108, 113, 138, 158, 169, 170, 171, 179, 186, 264, 298, 299, 300, 301, 303, 304, 345, 435, 440, 442, 488, 489], "anova_lda": 99, "anova_svc": 99, "answer": [3, 487], "ant": [53, 473], "anterior": [71, 92, 105, 111, 115, 140, 158, 193, 211, 258, 260, 352, 436, 438, 439], "antialias": 19, "anticorrel": [53, 115, 362], "antoinett": [72, 73, 115, 198, 204, 270], "anton": [72, 115, 204], "antonia": [115, 202, 247], "antonio": [115, 198, 270], "anupriya": [0, 129, 158], "anwar": [115, 221], "anylin": 0, "anymor": [124, 155, 158], "anyon": 487, "anyth": [7, 111, 118, 172, 173], "ap": 358, "apart": [87, 138, 158, 162, 163, 172], "api": [10, 46, 105, 106, 109, 122, 123, 124, 125, 126, 127, 128, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 148, 149, 150, 151, 152, 153, 154, 155, 182, 232, 302, 305, 306, 320, 333, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 380, 428, 446, 447, 448, 449, 489], "apo": [115, 192], "app": [64, 226, 323], "appear": [36, 56, 90, 173, 320, 333, 335, 422, 458], "append": [34, 35, 40, 42, 43, 46, 52, 53, 55, 71, 73, 101, 105, 109, 110, 111, 163, 465, 466], "appli": [3, 30, 32, 33, 44, 46, 52, 58, 63, 67, 69, 76, 80, 81, 90, 93, 95, 99, 101, 102, 103, 105, 106, 110, 116, 118, 124, 126, 127, 128, 129, 134, 136, 140, 143, 146, 151, 152, 153, 158, 159, 160, 161, 164, 166, 167, 168, 170, 174, 178, 179, 183, 192, 196, 199, 211, 226, 232, 240, 275, 297, 298, 299, 300, 301, 302, 305, 306, 311, 320, 333, 335, 336, 337, 338, 349, 355, 357, 358, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 419, 430, 433, 434, 435, 436, 438, 439, 442, 443, 445, 446, 447, 448, 449, 451, 452, 453, 458, 460, 461, 471, 473, 478, 489], "applic": [43, 115, 151, 158, 160, 166, 172, 180, 196, 320, 333, 367, 384, 452, 453, 459, 486, 487, 489], "apply_along_axi": [436, 438, 439], "apply_mask": [26, 185, 367, 370], "appreci": [173, 184], "approach": [35, 40, 42, 43, 49, 50, 51, 67, 69, 115, 143, 158, 161, 164, 165, 166, 170, 172, 173, 174, 175, 180, 302, 338, 361, 362, 461, 471, 487, 489], "appropri": [23, 101, 111, 115, 127, 128, 158, 173, 186, 196, 213, 242, 261, 320, 322, 327, 360, 428, 450], "approv": [173, 192], "approxim": [51, 71, 72, 115, 162, 196, 312, 313, 360, 448, 454], "apr": [115, 223, 251], "april": [115, 125, 128, 135, 138, 144, 145, 154, 158, 192, 211, 272], "ar": [0, 2, 3, 4, 6, 7, 10, 11, 15, 20, 21, 22, 23, 24, 25, 27, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 75, 78, 79, 80, 81, 82, 85, 87, 88, 90, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117, 118, 122, 124, 125, 126, 127, 128, 129, 136, 138, 139, 141, 143, 144, 146, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 179, 181, 182, 184, 185, 186, 192, 193, 194, 196, 198, 199, 201, 202, 213, 214, 216, 220, 222, 225, 228, 229, 230, 231, 232, 233, 234, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 294, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 316, 317, 320, 322, 323, 327, 329, 333, 335, 337, 338, 342, 344, 350, 352, 353, 354, 355, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 455, 456, 457, 458, 459, 461, 469, 470, 471, 473, 481, 486, 487], "ar001_task": 52, "ar002_task": 52, "ar003_task": 52, "ar004_task": 52, "ar005_task": 52, "ar006_task": 52, "ar007_task": 52, "ar008_task": 52, "ar009_task": 52, "ar010_task": 52, "ar011_task": 52, "ar012_task": 52, "ar013_task": 52, "ar014_task": 52, "ar015_task": 52, "ar016_task": 52, "ar1": [6, 34, 67, 110, 320, 323, 329, 472], "ar123_task": [51, 52], "ar124_task": 52, "ar125_task": 52, "ar126_task": 52, "ar3": [67, 329], "arami": 0, "arang": [13, 23, 31, 33, 34, 35, 40, 50, 53, 65, 67, 71, 95], "arbitrari": [6, 23, 52, 66, 77, 175, 182, 302, 333, 335], "arbitrarili": [6, 228, 299, 304], "archi": 73, "architectur": [115, 162, 227, 253], "archiv": 222, "arctanh": 57, "area": [0, 24, 33, 40, 72, 81, 95, 115, 151, 158, 163, 165, 170, 174, 175, 179, 180, 181, 186, 204, 205, 206, 207, 208, 209, 210, 211, 218, 255, 265, 283, 342, 372, 373, 385, 387, 388, 397, 400, 436, 437, 438, 439, 445], "area_left": [205, 206, 207, 208, 209, 210, 283], "area_right": [205, 206, 207, 208, 209, 210, 283], "aren": [127, 158, 184], "arg": [12, 16, 50, 72, 300, 301, 364, 468], "argmax": 12, "argsort": [36, 44, 45, 105], "arguabl": 67, "argument": [2, 6, 10, 15, 16, 18, 19, 31, 37, 42, 44, 45, 50, 57, 60, 68, 70, 81, 88, 90, 93, 95, 104, 108, 110, 118, 125, 126, 127, 129, 135, 136, 138, 139, 140, 141, 143, 144, 146, 149, 150, 151, 152, 153, 155, 158, 165, 166, 168, 170, 172, 173, 174, 178, 182, 184, 236, 240, 248, 249, 275, 285, 298, 299, 300, 301, 302, 323, 333, 335, 338, 349, 352, 360, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 380, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 424, 425, 426, 427, 428, 430, 432, 433, 434, 435, 437, 438, 439, 443, 446, 448, 461, 467, 486], "argument_dict": 50, "ariel": [0, 131, 143, 158], "aris": [95, 115, 175, 196, 361, 362], "arithmet": [115, 181], "arm": [150, 158], "armi": 186, "armodel": 311, "aroma": [115, 160, 361, 362], "around": [15, 25, 35, 85, 87, 142, 144, 158, 172, 173, 234, 335, 342, 353, 371, 385, 387, 388, 398, 465, 466, 471], "arr": [60, 355], "arrai": [3, 5, 7, 10, 12, 21, 23, 27, 32, 34, 35, 37, 40, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 57, 58, 60, 63, 68, 72, 80, 85, 87, 88, 90, 95, 99, 107, 108, 116, 128, 129, 130, 138, 140, 146, 149, 152, 153, 155, 158, 159, 162, 163, 165, 168, 172, 183, 184, 186, 191, 232, 233, 234, 236, 238, 239, 247, 272, 273, 284, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 338, 343, 345, 353, 354, 357, 360, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 379, 381, 383, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 421, 425, 427, 431, 435, 436, 437, 438, 439, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 459, 461, 462, 463, 464, 465, 469, 470, 471, 479, 489], "arrang": [115, 144, 158, 395, 397, 400, 414, 419, 425, 428, 433, 434, 435, 486], "array_lik": [320, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 431], "arriv": 164, "arrmean": 60, "art": [149, 158, 166, 298, 299, 300, 301], "arthur": [0, 50, 115, 123, 131, 133, 136, 158, 164, 202, 247, 306], "articl": [43, 72, 115, 172, 181, 195, 204, 244], "articul": 165, "artifact": [58, 115, 186, 338, 361, 362, 461], "artifici": [115, 196], "arvind": [115, 195, 243], "arxiv": [115, 159, 165, 172, 181, 233, 236], "asanyarrai": 60, "asarrai": [7, 25, 43, 53, 105, 309, 314], "ascend": [151, 158, 348], "ascertain": 174, "asd": 191, "ashbi": [101, 115, 165], "ask": [66, 118, 143, 146, 158, 173, 182, 220], "aspect": [13, 40, 42, 142, 158, 168, 172, 186, 320, 333, 361, 459], "asperg": 240, "assembl": [81, 116, 175], "assert": 31, "assess": [70, 79, 115, 165, 172, 173, 174, 194, 240, 302, 384, 420], "assign": [16, 87, 95, 162, 163, 175, 203, 214, 248, 249, 258, 260, 449, 450, 454], "assist": [115, 159, 232], "associ": [6, 15, 49, 73, 76, 78, 107, 110, 124, 129, 158, 165, 170, 173, 175, 178, 179, 242, 280, 302, 308, 335, 361, 362, 384, 458, 471], "assum": [65, 67, 71, 72, 73, 79, 80, 170, 175, 182, 239, 280, 310, 311, 312, 313, 317, 320, 333, 335, 338, 353, 356, 383, 432, 460, 461], "assumpt": [80, 170, 175, 219], "assur": 64, "astyp": [37, 42, 43, 45, 46, 68, 76, 85, 95], "aswin": [0, 126, 158], "asym": [196, 244], "asymmetr": [196, 213, 244, 265, 266, 288, 289, 290, 291, 292, 293], "asymmetri": [115, 196], "atla": [9, 12, 24, 28, 48, 50, 52, 61, 84, 92, 95, 97, 113, 115, 118, 123, 125, 126, 127, 129, 134, 135, 137, 138, 139, 140, 143, 146, 149, 150, 151, 152, 154, 155, 156, 158, 161, 163, 172, 179, 185, 186, 188, 232, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 259, 261, 265, 286, 287, 345, 357, 364, 365, 366, 368, 369, 372, 397, 416, 417, 418, 420, 421, 432, 433, 434, 435, 438, 440, 441, 442, 443, 445, 449, 450, 451, 452, 453, 457, 467, 473, 482, 486, 488, 489], "atlantiqu": 0, "atlas": [10, 11, 23, 48, 60, 61, 113, 115, 118, 127, 128, 150, 151, 156, 158, 161, 164, 175, 179, 184, 185, 186, 196, 199, 202, 211, 213, 220, 232, 247, 248, 249, 256, 261, 340, 343, 351, 364, 365, 366, 368, 369, 396, 398, 416, 417, 421, 428, 433, 434, 437, 438, 440, 441, 442, 444, 473, 488, 489], "atlas_data": [12, 21], "atlas_filenam": [21, 54, 56, 58, 160], "atlas_ho_filenam": 11, "atlas_img": [12, 55], "atlas_ju_filenam": 11, "atlas_nam": [248, 249], "atlas_network": 88, "atlas_region_coord": [55, 160], "atlas_typ": [22, 156, 158, 173, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "atlas_valu": 12, "atlas_yeo": 87, "atlas_yeo_2011": 87, "atleast_2d": [102, 111], "atom": [173, 179], "atr": 218, "att": 53, "attempt": [146, 158, 323], "attent": [79, 327], "attila": [115, 213], "attribut": [37, 46, 50, 51, 52, 85, 90, 117, 118, 126, 127, 129, 141, 150, 151, 153, 154, 155, 158, 159, 162, 163, 164, 170, 184, 186, 196, 199, 223, 232, 233, 234, 241, 245, 247, 250, 261, 263, 264, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 286, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 311, 312, 313, 320, 340, 348, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 436, 437, 438, 439, 445, 446, 447, 448, 449, 464, 465, 466, 467, 468, 470, 471], "attributeerror": [142, 158], "au": 40, "auc": [31, 33, 40, 165, 179], "aud": 53, "audio": [66, 67, 69], "audio_comput": [66, 67, 69, 216], "audio_left_hand_button_press": [66, 67, 69, 216], "audio_right_hand_button_press": [66, 67, 69, 216], "auditori": [6, 67, 69, 73, 78, 105, 107, 175, 188, 198, 260, 269, 270, 276, 281], "auditory_bold": 6, "auditory_calculation_vs_baselin": 276, "audrei": [0, 124, 158], "august": [115, 136, 143, 155, 158], "aureli": [72, 115, 204], "austin": 0, "australia": 0, "australian": [104, 115, 384], "austria": 0, "author": [0, 49, 57, 115, 172, 173, 182], "autism": [115, 191, 240], "auto": [13, 40, 136, 151, 158, 186, 305, 306, 348, 365, 366, 367, 368, 369, 370, 371, 386, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 415, 419, 421, 425, 427, 428, 430, 431, 433, 434, 435, 436, 438, 439, 441, 442, 444, 471], "auto_exampl": [8, 28, 47, 61, 74, 83, 97, 112, 114, 173, 180, 443], "auto_examples_jupyt": 113, "auto_examples_python": 113, "auto_fit": 432, "auto_resampl": [71, 339], "autocorrel": 3, "autoformatt": 173, "autogener": [320, 333, 459], "autom": [115, 118, 182, 193, 196, 211, 220, 230, 242, 255, 275, 277], "automat": [3, 16, 17, 20, 23, 34, 35, 42, 56, 90, 93, 95, 103, 110, 115, 116, 122, 125, 136, 138, 150, 151, 152, 158, 163, 170, 173, 182, 184, 185, 186, 200, 240, 246, 254, 298, 299, 300, 301, 303, 304, 305, 306, 320, 333, 335, 353, 360, 366, 369, 384, 395, 415, 419, 425, 428, 433, 434, 435, 442, 447, 449, 451, 459, 473, 486, 489], "autoregress": [67, 320, 329], "aux": 93, "aux_fil": [58, 92, 103], "avail": [0, 3, 16, 24, 25, 32, 41, 44, 64, 76, 81, 90, 95, 102, 108, 110, 118, 125, 146, 151, 158, 160, 163, 166, 168, 172, 174, 178, 181, 182, 192, 196, 202, 214, 217, 222, 225, 228, 231, 240, 244, 247, 253, 261, 270, 272, 274, 279, 303, 304, 323, 432, 437, 471, 487, 489], "avenir": 0, "averag": [6, 10, 25, 31, 38, 51, 53, 70, 95, 115, 149, 152, 158, 162, 166, 167, 177, 178, 179, 196, 205, 206, 207, 208, 209, 213, 217, 240, 283, 298, 299, 350, 355, 361, 372, 432, 436, 438, 439, 447, 471, 473], "avg_method": [126, 128, 151, 158, 436, 438, 439], "aviv": 0, "avoi": 193, "avoid": [10, 24, 54, 55, 56, 60, 71, 129, 141, 146, 155, 158, 170, 172, 173, 175, 184, 284, 298, 299, 300, 301, 308, 333, 335, 342, 347, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 460, 486], "avram": [115, 225, 252], "awai": [70, 172, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "awar": [99, 234, 460], "awesom": [143, 158], "ax": [2, 11, 12, 16, 19, 22, 23, 25, 31, 32, 37, 39, 40, 42, 44, 45, 50, 51, 52, 53, 59, 63, 65, 66, 67, 70, 76, 79, 80, 81, 85, 88, 89, 92, 101, 102, 104, 107, 108, 110, 111, 129, 140, 150, 151, 158, 352, 353, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 467], "ax1": [45, 65, 76, 79, 429], "ax2": [45, 65, 429], "ax3": 65, "ax_binari": 40, "ax_im": 42, "ax_multi": 40, "ax_pair": 81, "ax_row": 111, "ax_unpair": 81, "axelson": [115, 181], "axesimag": [54, 56, 58], "axessubplot": [6, 66, 67], "axhlin": [35, 395, 397, 400, 402, 404, 406, 408, 410, 412], "axi": [3, 12, 13, 17, 23, 26, 30, 31, 32, 35, 39, 42, 43, 46, 49, 52, 60, 85, 86, 95, 103, 105, 106, 109, 111, 126, 153, 155, 158, 163, 185, 196, 244, 298, 299, 300, 301, 303, 304, 328, 353, 355, 385, 387, 388, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 415, 419, 421, 422, 425, 427, 428, 431, 433, 434, 435], "axial": [6, 15, 95, 320, 333, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 419, 421, 425, 427, 428, 431, 433, 434, 435, 459], "axs1": 70, "axs2": 70, "axvlin": 53, "ayesha": [115, 221], "azim": [23, 436, 438, 439], "b": [15, 16, 31, 42, 43, 58, 92, 103, 115, 173, 182, 192, 193, 200, 202, 205, 206, 207, 208, 209, 225, 227, 231, 242, 246, 252, 253, 256, 262, 280, 283, 311, 361, 362, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 486], "b2fd65a88d22090da62c3fb828be840": 4, "b_model001_task002_cope011_tstat1": 109, "ba": 255, "baar": [115, 213], "back": [7, 37, 43, 44, 50, 57, 99, 101, 104, 106, 117, 131, 139, 140, 158, 162, 170, 173, 186, 305, 306, 364, 367, 370, 372, 374, 383, 415, 446, 447, 448], "backend": [32, 36, 37, 38, 44, 45, 46, 50, 52, 55, 59, 60, 99, 104, 107, 125, 133, 143, 148, 153, 158, 306, 440], "background": [3, 9, 10, 15, 16, 17, 23, 24, 28, 31, 32, 42, 46, 51, 58, 69, 92, 93, 95, 106, 110, 111, 113, 117, 125, 128, 134, 136, 138, 139, 140, 141, 143, 146, 149, 155, 156, 158, 173, 179, 185, 186, 196, 231, 248, 249, 255, 256, 268, 274, 298, 299, 300, 301, 305, 306, 320, 333, 365, 367, 368, 370, 372, 376, 379, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 419, 421, 425, 427, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 445, 447, 450, 452, 453, 459, 473, 486, 488, 489], "background_img": [32, 45], "background_label": [51, 58, 92, 186, 365, 368, 372, 416, 452, 455, 473], "backslash": [127, 158], "backward": [140, 153, 158, 173, 248, 249, 457], "bad": [58, 107, 172, 173], "badg": [173, 182], "bag": [169, 303, 304, 489], "balanc": [3, 51, 153, 158, 162], "baldassarr": [115, 171, 196], "ball": [25, 123, 158, 170, 172, 179, 302, 471], "ball_radiu": 25, "ball_sample_point": 25, "baltimor": 0, "band": [53, 60, 155, 158, 240, 361, 460, 461], "band_pass_filt": 240, "bandettini": [115, 170, 181, 302], "bandpass": 57, "bandwidth": 253, "bangalor": 0, "bangaru": [115, 221], "baptist": [50, 51, 73, 115, 118, 159, 162, 164, 198, 220, 233, 270, 275, 277, 305], "bar": [16, 44, 104, 107, 127, 128, 143, 158, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 489], "baratz": [0, 148, 158], "barbara": [115, 221], "barcelonabeta": 0, "barch": [60, 115, 192, 202, 203, 258], "barh": [31, 50, 53, 100], "barn": [60, 115, 196, 203, 224, 258, 259, 361, 362], "baronnet": [115, 159, 232], "bart": 64, "basal": [53, 226], "basalganglia": 260, "basc": [134, 158, 188, 244], "basc_multiscale_2015": 20, "base": [2, 7, 9, 21, 28, 29, 30, 35, 40, 46, 47, 49, 50, 51, 53, 56, 57, 62, 63, 67, 71, 74, 75, 82, 83, 89, 90, 92, 93, 98, 99, 100, 107, 112, 113, 115, 118, 124, 126, 127, 129, 134, 138, 146, 149, 151, 154, 156, 158, 159, 160, 161, 162, 164, 165, 168, 170, 171, 172, 173, 175, 176, 177, 179, 180, 181, 182, 186, 188, 194, 196, 198, 200, 201, 202, 211, 218, 219, 220, 233, 236, 240, 246, 252, 254, 261, 264, 265, 266, 267, 270, 271, 272, 275, 277, 279, 286, 287, 294, 298, 299, 300, 301, 302, 304, 305, 306, 320, 323, 327, 333, 335, 336, 337, 338, 339, 343, 345, 349, 354, 357, 360, 361, 362, 364, 370, 371, 372, 378, 384, 385, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 423, 433, 434, 435, 438, 439, 440, 442, 446, 447, 449, 450, 451, 457, 459, 461, 462, 463, 465, 466, 467, 472, 473, 486, 487, 488, 489, 490], "base_mask": [51, 54, 55, 56, 58, 60, 93], "base_url": 252, "baselin": [6, 31, 33, 115, 149, 150, 158, 166, 168, 195, 243, 308, 328], "basemask": [151, 158], "baseslic": 414, "bash": 182, "basi": [67, 69, 174, 196, 320, 322, 327, 361], "basic": [3, 7, 8, 9, 12, 16, 17, 19, 26, 28, 30, 31, 33, 35, 36, 37, 43, 44, 50, 51, 54, 55, 58, 60, 69, 71, 76, 78, 90, 92, 93, 95, 96, 99, 101, 104, 106, 107, 108, 172, 174, 175, 179, 181, 182, 186, 248, 249, 264, 285, 323, 333, 335, 355, 361, 362, 422, 428, 434, 440, 488], "basic_collection_term": 275, "basic_contrast": [69, 71, 174], "basic_image_term": 275, "bassett": [58, 115, 361, 362], "bastien": [73, 115, 198, 270], "bat": 487, "batch": [105, 109, 306, 446], "batch_siz": [50, 52, 306, 446], "baum": [58, 115, 361, 362], "bayesian": [46, 175], "bayesian_ridg": 46, "bayesianridg": 46, "bazeil": [0, 146, 149, 152, 153, 158], "bazemont": 0, "bbox_to_anchor": 31, "bdg": [173, 182], "beaten": 116, "beauti": 45, "becaus": [3, 6, 12, 16, 19, 31, 32, 33, 37, 41, 44, 45, 46, 56, 67, 70, 71, 80, 85, 102, 103, 104, 110, 124, 146, 158, 160, 165, 170, 172, 173, 175, 182, 275, 299, 303, 304, 430, 436, 438, 439, 443, 445, 471], "beckmann": [115, 159, 192, 227, 253, 361, 362], "becom": [3, 67, 118, 127, 158, 166, 167, 168, 175], "bedetti": [140, 143, 158], "been": [0, 6, 12, 33, 37, 38, 41, 44, 49, 51, 54, 56, 57, 63, 67, 71, 73, 76, 80, 82, 86, 87, 90, 92, 94, 95, 106, 110, 124, 125, 127, 129, 131, 133, 136, 137, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 158, 164, 171, 172, 173, 174, 178, 179, 182, 186, 196, 199, 215, 222, 228, 229, 233, 244, 275, 320, 333, 335, 344, 376, 377, 378, 379, 380, 381, 384, 453, 462, 471, 472], "befor": [2, 16, 24, 51, 57, 58, 72, 90, 95, 99, 105, 117, 124, 126, 128, 143, 146, 149, 151, 153, 155, 158, 162, 163, 165, 166, 168, 173, 174, 175, 178, 181, 182, 184, 185, 186, 192, 236, 272, 275, 277, 305, 306, 320, 322, 327, 338, 342, 344, 361, 362, 365, 366, 368, 369, 371, 372, 373, 420, 436, 438, 439, 443, 445, 447, 452, 453, 461, 462, 467, 486], "beforehand": [105, 182], "begin": [42, 64, 67, 71, 149, 158, 173, 179, 192, 460], "beginn": [173, 181], "beh": 64, "behav": [104, 320, 322, 327], "behavior": [2, 16, 19, 31, 32, 35, 36, 37, 40, 42, 44, 45, 50, 76, 78, 88, 99, 104, 108, 115, 117, 125, 126, 127, 131, 133, 140, 143, 150, 155, 158, 165, 166, 168, 169, 173, 179, 183, 186, 191, 192, 222, 227, 232, 244, 245, 253, 272, 364, 365, 366, 367, 368, 369, 370, 371, 420, 449, 489], "behavioral_data": 40, "behavioral_target": 41, "behaviour": [46, 115, 171], "behind": 66, "behren": [115, 192], "behzadi": [115, 344, 361, 362, 462], "beij": 0, "being": [16, 90, 95, 105, 124, 125, 126, 143, 146, 153, 158, 159, 172, 173, 175, 177, 179, 240, 305, 327, 360, 366, 369, 371, 379, 381, 420, 436, 438, 439, 443, 445, 449], "bellec": [0, 115, 143, 144, 158, 196, 244], "belong": [3, 31, 33, 153, 158, 165, 179, 186, 193], "below": [6, 10, 17, 21, 23, 41, 46, 49, 51, 54, 56, 60, 66, 70, 95, 115, 138, 158, 162, 165, 166, 170, 172, 173, 174, 175, 177, 178, 182, 185, 186, 191, 192, 233, 234, 236, 240, 261, 298, 299, 300, 301, 303, 304, 305, 306, 338, 358, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 427, 428, 430, 434, 435, 436, 439, 442, 447, 449, 460, 461, 486, 490], "ben": [0, 58, 115, 119, 120, 122, 131, 133, 158, 362], "benali": [115, 196, 244], "benchmark": [53, 58, 100, 115, 171, 361, 362], "benedetto": 0, "benedict": [115, 221], "benefit": [44, 51, 58, 67, 146, 158, 173, 185], "benjamin": [101, 115, 165, 226, 260], "benjamini": [153, 158, 175, 319], "bennett": [115, 221], "bent": [115, 211], "berg": [115, 192], "berlin": [0, 115, 159, 213, 219, 232, 250], "bertrand": [0, 46, 50, 51, 53, 73, 100, 115, 119, 122, 126, 129, 131, 136, 140, 143, 144, 146, 153, 154, 158, 159, 162, 163, 164, 165, 167, 171, 181, 198, 202, 219, 232, 233, 247, 250, 270, 300, 301, 305, 306, 448, 449, 454], "besid": 181, "besnard": [0, 129, 151, 158], "best": [3, 35, 40, 44, 45, 46, 96, 149, 155, 158, 165, 166, 167, 170, 172, 173, 175, 185, 298, 299, 300, 301, 303, 304, 360, 397, 400, 446, 447], "best_alpha": [298, 299, 300, 301], "best_c": [35, 298, 299, 300, 301], "best_dual": 35, "best_model_params_": [303, 304], "best_penalti": 35, "beta": [6, 27, 41, 44, 67, 71, 98, 112, 113, 115, 127, 154, 174, 179, 192, 267, 272, 298, 299, 300, 301, 307, 310, 311, 312, 313, 320, 323, 339, 364, 370, 371, 397, 423, 435, 440, 488], "beta_map": 101, "betamap": 273, "better": [2, 3, 31, 34, 44, 45, 51, 67, 95, 101, 105, 115, 123, 125, 126, 134, 137, 143, 151, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 172, 174, 185, 233, 433, 449, 471, 489], "between": [2, 7, 10, 23, 24, 25, 31, 42, 44, 51, 52, 53, 57, 64, 67, 69, 71, 73, 76, 78, 80, 81, 87, 100, 101, 104, 107, 110, 129, 131, 138, 143, 146, 149, 152, 158, 159, 160, 161, 163, 165, 166, 170, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 192, 196, 212, 228, 240, 252, 272, 291, 300, 301, 306, 320, 323, 333, 338, 378, 384, 385, 387, 388, 415, 419, 421, 424, 427, 429, 431, 433, 434, 435, 436, 438, 439, 442, 443, 445, 447, 458, 459, 461, 471, 473, 489], "bewar": [182, 184], "beyond": [72, 154, 158], "bg_color": [385, 387, 388], "bg_filenam": 44, "bg_img": [3, 6, 17, 18, 30, 31, 34, 37, 42, 44, 70, 71, 72, 76, 89, 94, 110, 117, 140, 146, 152, 158, 165, 186, 320, 333, 360, 428, 433, 434, 435, 442, 459], "bg_map": [10, 23, 24, 38, 69, 110, 111, 430, 436, 438, 439, 443, 445, 486], "bg_on_data": [10, 23, 24, 111, 430, 436, 438, 439, 443, 445], "bgcolor": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "bharat": [115, 221], "bhg087": [115, 200, 246], "bhn256": 115, "bhp157": [115, 192], "bhx179": [115, 225, 252], "bi": 228, "bia": [166, 298, 299, 300, 301, 303, 304], "biap8": [146, 158], "bias": 67, "bib": 115, "bibtex": [125, 155, 158], "bic": [213, 310], "bicr": 218, "bid": [6, 7, 62, 73, 74, 76, 98, 101, 112, 113, 124, 126, 128, 146, 149, 151, 153, 155, 158, 173, 174, 175, 179, 188, 228, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 262, 267, 280, 296, 297, 320, 323, 333, 361, 362, 363, 370, 422, 427, 429, 440, 457, 458, 459, 483, 488], "bielefeld": 0, "big": [3, 43, 51, 143, 158, 162, 165, 173, 184, 186, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471], "big_fsaverage_mesh": 10, "big_fsaverage_sulc": 10, "big_img": 10, "bigger": [41, 45], "bigler": [115, 191, 240], "bihan": [73, 115, 198, 270], "bilder": [115, 262, 280], "bilkent": 0, "bin": [34, 51, 173, 320, 329, 487], "bin_p_valu": 95, "bin_p_values_and_vt": 95, "bin_p_values_and_vt_img": 95, "binar": [43, 95, 152, 158, 240, 337], "binari": [42, 43, 67, 76, 124, 155, 158, 179, 182, 186, 266, 298, 299, 300, 301, 303, 304, 372, 373, 374, 434, 458, 461], "binarize_img": [127, 129, 152, 158], "binary_clos": [266, 289, 292], "binary_dil": [95, 185, 376, 377, 378, 379, 380, 381], "binary_eros": [376, 377, 378, 379, 380, 381], "binary_plt": 40, "binaur": 228, "binder": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 148, 158], "bingen": [115, 171], "binh": [0, 146, 149, 151, 158], "binyam": [60, 115, 203, 258], "biolog": [111, 115, 211], "biologi": 489, "biomed": [50, 115, 164, 222, 305, 306], "biorxiv": [115, 338, 461], "biostatist": [0, 115, 159], "bipolar": [115, 211], "birmah": [115, 181], "birn": 222, "birth": [115, 213], "biswal": [115, 221], "bit": [12, 37, 40, 43, 66, 67, 76, 80, 87, 95, 104, 131, 144, 155, 158, 159, 171, 184, 185, 266], "bitpix": [58, 92, 103], "black": [15, 42, 106, 125, 126, 129, 158, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 421, 425, 427, 428, 431, 433, 434, 435, 442, 443, 445], "black_bg": [6, 14, 15, 37, 71, 152, 158, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 421, 425, 427, 428, 431, 433, 434, 435, 442, 443, 445], "black_blu": 21, "black_green": 21, "black_pink": 21, "blacker": [115, 211], "blob": [88, 95, 164, 185, 252], "blobbi": 171, "block": [34, 53, 58, 60, 65, 101, 102, 116, 126, 158, 165, 172, 185, 196, 204, 228, 432, 475], "blog": 7, "blood": [67, 175, 179], "bloomberg": 0, "bludau": 115, "blue": [16, 19, 42, 51, 70, 87, 128, 158], "blur": 196, "bm10": [227, 253], "bm20": [22, 227, 253], "bm70": [227, 253], "bmc": [67, 73, 115, 198, 270], "board": 173, "bodi": [65, 196, 457], "bogdan": [0, 124, 130, 158], "boil": 172, "bold": [3, 6, 17, 19, 26, 30, 31, 33, 35, 36, 37, 50, 65, 66, 67, 69, 77, 80, 95, 101, 102, 104, 110, 115, 117, 118, 126, 127, 146, 150, 158, 164, 165, 174, 176, 179, 184, 202, 212, 218, 228, 247, 264, 274, 323, 358, 361, 362, 462, 489], "bonferroni": [6, 82, 104, 107, 108, 170, 175, 179, 320, 333, 336, 459, 472], "boo": [0, 140, 143, 146, 158], "book": [144, 158], "bool": [46, 95, 105, 232, 233, 234, 236, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 256, 258, 260, 261, 264, 265, 266, 267, 270, 272, 273, 274, 275, 277, 279, 284, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 315, 317, 320, 333, 335, 336, 337, 338, 339, 342, 344, 348, 350, 351, 352, 353, 354, 357, 358, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 445, 446, 447, 448, 449, 450, 452, 453, 458, 459, 460, 461, 462, 467], "boolean": [95, 118, 150, 155, 158, 302, 351, 371, 455, 456, 461], "bootstrap": [115, 244], "border": [81, 342, 376, 379, 385, 387, 388], "border_s": [376, 379], "borderpad": [385, 387, 388], "bori": [115, 181], "boston": 0, "both": [3, 4, 6, 10, 16, 25, 38, 41, 49, 51, 53, 60, 65, 69, 80, 81, 86, 90, 95, 101, 107, 110, 111, 118, 126, 127, 129, 146, 153, 156, 158, 159, 162, 164, 170, 171, 173, 174, 179, 184, 185, 186, 191, 192, 214, 223, 232, 239, 251, 261, 286, 320, 322, 327, 335, 336, 338, 357, 372, 373, 374, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 427, 430, 432, 435, 436, 437, 438, 439, 445, 449, 451, 461, 465, 466, 467, 471, 487], "both_hemispher": 10, "botteron": [115, 196, 213], "bottl": [31, 33, 34, 35, 40, 184], "bottleneck": 172, "bottom": [13, 16, 26, 40, 42, 68, 185, 432], "bottomrul": 64, "bougacha": [0, 119, 122, 131, 133, 140, 143, 144, 158], "bound": [15, 85, 90, 139, 146, 158, 185, 305, 353, 385, 387, 388, 419, 420, 425, 427, 428, 430, 431, 433, 434, 435, 436, 438, 439, 443, 445], "boundari": [160, 170, 185, 398, 433, 434, 436, 438, 439], "bounding_box": [385, 387, 388], "boundingboxerror": 353, "box": [85, 99, 106, 139, 158, 166, 173, 185, 226, 353], "boxplot": [36, 95], "boyd": 115, "brad": [115, 171], "bradford": [115, 211], "bradlei": [60, 115, 192, 196, 203, 211, 224, 226, 258, 259, 260, 361, 362], "brain": [0, 2, 3, 4, 6, 7, 10, 13, 16, 21, 22, 23, 24, 28, 32, 33, 37, 38, 40, 41, 43, 45, 46, 48, 54, 56, 57, 61, 67, 69, 70, 72, 77, 79, 80, 81, 86, 90, 93, 95, 97, 99, 101, 106, 109, 115, 117, 118, 125, 131, 134, 136, 137, 138, 140, 141, 143, 144, 146, 149, 151, 152, 158, 159, 161, 165, 166, 167, 168, 170, 171, 173, 174, 175, 179, 180, 181, 184, 186, 191, 192, 193, 196, 199, 201, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 218, 219, 220, 222, 223, 224, 226, 227, 228, 230, 232, 233, 240, 242, 244, 245, 247, 248, 250, 251, 253, 255, 258, 259, 260, 261, 264, 265, 266, 272, 274, 275, 277, 278, 283, 288, 291, 295, 298, 299, 300, 301, 302, 303, 304, 305, 306, 315, 338, 340, 343, 345, 350, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 376, 377, 378, 379, 380, 381, 384, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 416, 417, 418, 421, 425, 427, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 457, 461, 473, 479, 487, 488, 489], "brain_color": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "brain_mask": [57, 101], "brain_parcel": [225, 252], "brain_parcellation_cambridge_basc_multiscale_": 196, "brain_time_seri": 57, "brainhack": [134, 139, 158], "brainlin": 274, "brainmap": [2, 22, 227, 253], "brainmask": 337, "brainom": [115, 143, 158, 188, 270], "brainomics_data": [78, 107], "brainomics_loc": [18, 77, 78, 80, 81, 82, 107, 108], "brainpedia": 118, "brainpedia_subset": 118, "brainsprit": [143, 144, 158, 486], "brammer": [115, 181], "branch": [155, 158, 173, 182], "brandon": [115, 191, 240], "braver": [115, 170], "break": [2, 84, 97, 113, 138, 158, 162, 170, 173, 256, 434, 440, 450, 488], "breakag": 308, "breath": [66, 67], "breez": [115, 211], "brest": 0, "brian": [115, 171, 211, 221, 338, 461], "bridg": 99, "brief": [95, 173, 175], "briefli": 170, "brien": [115, 211], "brigham": 0, "bright": 90, "brighter": 117, "bring": [42, 50, 167, 173, 181, 383], "brisban": 0, "brito": [0, 126, 158], "broader": [178, 191], "brodmann": 255, "brok": [122, 158], "broke": [145, 158], "broken": [87, 136, 144, 158, 170], "brought": 186, "brown": [115, 221], "brows": [60, 118, 153, 158, 220, 473], "browser": [2, 3, 4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55, 57, 58, 59, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 143, 146, 148, 158, 186, 320, 333, 398, 441, 442, 443, 444, 445, 457, 459, 486], "bruce": [23, 115, 200, 205, 206, 207, 208, 209, 211, 225, 231, 246, 252, 254, 256, 283], "bruno": [115, 196], "brute": 172, "bryan": [115, 195, 243], "bsd": 0, "buck": [0, 125, 158], "bucket": 64, "buckner": [115, 196, 211, 222, 225, 231, 252, 256], "bug": [34, 122, 125, 126, 129, 130, 136, 137, 138, 142, 155, 181, 182, 436, 438, 439, 472, 473], "bugfix": [121, 122, 132, 133, 136, 154, 158, 173], "build": [12, 19, 22, 43, 48, 51, 52, 53, 60, 71, 101, 113, 116, 124, 125, 126, 127, 129, 138, 158, 161, 166, 168, 170, 175, 184, 186, 320, 447, 489], "build_tool": 182, "built": [16, 34, 44, 50, 125, 128, 158, 175, 182, 298, 299, 300, 301, 447, 472, 473], "builtin": [124, 158], "buitelaar": [115, 361, 362], "bullmor": [115, 160], "bump": [124, 127, 129, 143, 146, 151, 152, 153, 158, 166, 168, 182], "bunch": [82, 117, 127, 138, 158, 173, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 286], "burden": 173, "burkhardt": [0, 129, 158], "burn": 173, "busa": [115, 200, 246], "bush": [101, 115], "busi": [115, 384], "bustillo": [115, 195, 243], "butterworth": [60, 124, 125, 151, 155, 158, 338, 365, 366, 367, 368, 369, 370, 371, 461], "butterworth__": [338, 365, 366, 367, 368, 369, 370, 371, 461], "butterworth__padtyp": 60, "butterwoth": [151, 158], "button": [60, 67, 69, 73, 77, 78, 80, 81, 107, 153, 158, 173, 175, 268, 270, 278, 473], "bwr": [20, 24, 38, 144, 158, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 424, 441], "bwr_r": 20, "byte": [4, 6, 10, 22, 41, 66, 71, 102, 103, 153, 158, 347, 353], "bzdok": [0, 119, 120, 122, 123, 131, 133, 158], "c": [3, 35, 40, 42, 43, 44, 45, 46, 51, 58, 60, 70, 99, 100, 104, 111, 115, 118, 166, 170, 173, 192, 193, 196, 200, 203, 211, 213, 218, 220, 222, 224, 227, 230, 244, 246, 253, 255, 258, 259, 265, 266, 274, 275, 277, 288, 289, 290, 291, 292, 293, 312, 313, 338, 353, 354, 361, 362, 383, 384, 452, 455, 461], "c0": 65, "c1": 65, "c3": 65, "c_ra": [155, 158], "ca": 213, "cac0ef0f4307834e60fedd2a0448862a": 66, "cach": [44, 45, 51, 56, 58, 93, 104, 123, 131, 158, 162, 233, 298, 299, 300, 301, 303, 304, 305, 306, 320, 333, 339, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 447, 448, 449, 471], "caffo": [115, 338, 461], "caglar": [0, 155, 158], "caitlin": [115, 221], "cakan": [0, 155, 158], "cal_max": [58, 92, 103], "cal_min": [58, 92, 103], "calc_beta": 311, "calcul": [0, 3, 32, 40, 43, 49, 50, 60, 93, 98, 112, 113, 125, 144, 158, 174, 198, 269, 270, 298, 299, 300, 301, 305, 306, 310, 312, 313, 328, 335, 343, 357, 361, 364, 367, 370, 377, 380, 384, 395, 412, 419, 425, 428, 433, 434, 435, 440, 442, 447, 459, 488], "calculu": 43, "calhoun": [115, 195, 221, 243], "california": 0, "call": [2, 4, 6, 10, 15, 16, 17, 34, 50, 51, 52, 54, 55, 58, 60, 67, 69, 73, 77, 82, 88, 90, 92, 95, 99, 106, 117, 118, 127, 129, 146, 158, 159, 160, 162, 163, 165, 166, 170, 172, 173, 174, 175, 178, 179, 182, 184, 186, 190, 196, 232, 234, 236, 244, 256, 275, 277, 280, 299, 304, 306, 309, 314, 320, 323, 333, 338, 348, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 380, 420, 421, 431, 447, 461, 465, 486], "callabl": [118, 153, 158, 236, 275, 298, 299, 300, 301, 302], "caller": [268, 269], "cambridg": [0, 196], "camelcas": 173, "cameron": [58, 115, 159, 160, 199, 219, 221, 245, 250], "camil": [115, 118, 220, 275, 277], "campagn": [72, 115, 204], "can": [0, 2, 3, 4, 6, 7, 10, 12, 13, 15, 16, 19, 21, 22, 23, 24, 25, 26, 30, 31, 33, 34, 35, 37, 40, 41, 42, 44, 45, 46, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 87, 88, 89, 90, 92, 93, 94, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 115, 116, 117, 118, 124, 125, 127, 128, 129, 130, 131, 134, 136, 138, 143, 144, 146, 149, 150, 151, 152, 153, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 181, 182, 184, 185, 186, 192, 201, 202, 219, 220, 222, 223, 233, 234, 236, 239, 240, 243, 246, 247, 248, 249, 250, 251, 252, 256, 270, 272, 275, 279, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 312, 313, 320, 322, 323, 327, 333, 335, 338, 339, 340, 345, 348, 349, 350, 353, 354, 357, 358, 360, 361, 362, 367, 370, 376, 377, 378, 379, 380, 381, 383, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 425, 426, 427, 428, 429, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 447, 449, 450, 451, 457, 458, 459, 460, 461, 471, 473, 486, 487, 489], "canada": 0, "canadian": 0, "cancel": 166, "candid": 100, "canica": [52, 124, 125, 141, 152, 158, 161, 179, 306, 367, 473, 489], "canica_components_img": 50, "canica_resting_st": 50, "canni": 486, "cannon": [115, 262, 280], "cannot": [3, 12, 37, 50, 53, 58, 80, 87, 93, 95, 104, 118, 143, 155, 158, 159, 165, 168, 173, 186, 357, 442, 443, 445, 465, 466], "canon": [6, 52, 67, 71, 85, 136, 158, 179, 190, 305], "cap": [78, 80], "capabl": [69, 128, 153, 158, 186], "capit": 218, "caprihan": [115, 195, 243], "captur": [24, 53, 60, 67, 105, 160, 161, 162, 165, 198, 232, 270], "care": [53, 100, 117, 165, 166, 168, 172, 226, 307], "carefulli": 110, "carpet": [9, 28, 113, 128, 149, 158, 241, 265, 339, 351, 378, 420, 488], "carpet_plot": [155, 158], "carri": [175, 179], "carrier": [115, 192], "case": [16, 24, 35, 40, 42, 50, 51, 52, 56, 60, 64, 66, 67, 68, 73, 85, 90, 92, 93, 102, 103, 110, 118, 136, 146, 149, 158, 159, 160, 162, 165, 166, 170, 172, 181, 182, 184, 193, 239, 242, 246, 248, 249, 298, 299, 300, 301, 303, 304, 320, 322, 327, 333, 335, 336, 345, 353, 354, 355, 356, 359, 366, 367, 368, 369, 370, 371, 378, 416, 419, 420, 421, 425, 427, 428, 430, 433, 434, 435, 437, 442, 445, 458, 459, 471, 473, 486], "cast": [12, 129, 133, 146, 158, 186, 193, 242, 351], "castellano": [115, 221], "cat": [31, 33, 34, 40, 99, 117, 165, 180, 184], "catarina": [115, 230, 255], "catch_warn": 71, "categor": [166, 182], "categori": [31, 33, 34, 99, 104, 117, 165, 167, 173, 184, 264], "caterina": [115, 226, 260], "caus": [45, 50, 51, 85, 93, 130, 131, 158, 356], "caution": 356, "cautious": [140, 158], "caveat": [115, 165], "cavi": [115, 200, 211, 246], "cbar": 40, "cbar_tick_format": [6, 26, 150, 153, 158, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 425, 427, 428, 430, 434, 435, 436, 438, 439], "cbar_vmax": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 436], "cbar_vmin": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 436], "cbf": 118, "cbig": [225, 252], "cbv": 118, "cc": 240, "cc0": 220, "cd": [50, 52, 182, 306], "ce": [320, 323, 333, 459], "cea": [0, 198], "cecil": [115, 181], "ceil": 102, "cell": [10, 17, 23, 37, 51, 54, 55, 56, 60, 64, 76, 78, 175, 179], "censor": [127, 155, 158, 461], "center": [0, 15, 37, 49, 52, 53, 57, 60, 63, 80, 100, 107, 108, 111, 144, 155, 158, 160, 163, 186, 193, 211, 215, 222, 232, 234, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 418, 420, 424, 446, 447, 449, 458, 471], "cento": 196, "centr": 0, "central": [0, 92, 240], "centroid": [398, 446], "cercor": [71, 115, 192, 200, 225, 246, 252], "cereb": 53, "cerebellar": [226, 260], "cerebellum": [60, 115, 192, 203, 226, 258, 260], "cerebr": [71, 115, 175, 192, 198, 200, 203, 211, 225, 231, 246, 252, 256, 258, 270], "cerebrospin": [12, 58, 213, 265, 361], "certain": [6, 58, 110, 143, 158, 165, 173, 175, 182, 192, 275, 353, 357, 433], "certif": 192, "cf": [115, 186, 192], "cff": 173, "cfg": [154, 158], "chain": [95, 185, 232, 233], "chair": [29, 31, 33, 34, 40, 47, 113, 125, 158, 184, 264, 300, 345, 350, 432, 435, 440, 488], "challeng": 159, "chamma": [0, 124, 125, 126, 152, 153, 155, 158], "chan": 0, "chanc": [6, 34, 38, 53, 78, 80, 150, 158, 169, 170, 175, 489], "chance_level": 34, "chandra": 0, "chang": [15, 20, 40, 42, 44, 53, 64, 68, 103, 104, 107, 108, 120, 166, 168, 172, 173, 175, 182, 183, 232, 233, 234, 283, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 323, 328, 333, 347, 351, 353, 356, 357, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 384, 430, 436, 438, 439, 443, 445, 446, 447, 448, 449, 452, 453, 455, 458, 461, 487, 489], "changelog": [124, 138, 182], "channel": [143, 158], "chaogan": [115, 221], "chapra": [0, 129, 158], "chapter": [185, 186], "charact": [155, 158, 329], "character": [66, 67, 115, 181, 213, 361], "characterist": [40, 79, 165, 179, 362], "chawla": [0, 143, 144, 145, 146, 147, 148, 149, 158], "cheap": 166, "check": [2, 3, 16, 65, 78, 94, 95, 103, 107, 117, 125, 128, 129, 133, 136, 158, 160, 165, 168, 172, 173, 181, 182, 184, 186, 232, 233, 234, 236, 266, 285, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 321, 333, 348, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 446, 447, 448, 449, 486], "check_ev": [65, 73, 126, 158], "check_feature_screen": [33, 41], "check_mask_img": 173, "check_matplotlib": [25, 39, 42, 46, 51, 68, 79, 92, 107, 108, 111], "check_param": [303, 304], "check_random_st": [45, 46], "checkerboard": [67, 73, 81, 270], "checkmk": 0, "checkout": [138, 158, 173, 182], "chee": [38, 115], "chen": [0, 38, 115, 129, 155, 158, 192], "cheung": [115, 221], "chevali": [0, 143, 146, 158], "chiang": [140, 158], "chieti": 0, "child": [0, 53, 261], "child_adult": [53, 100], "childmind": 191, "children": [50, 100, 146, 158, 180, 201, 261], "china": 0, "chiu": [115, 211], "choic": [10, 20, 67, 68, 71, 111, 133, 158, 159, 160, 166, 168, 169, 172, 173, 234, 245, 303, 304, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 449, 489], "choos": [15, 16, 25, 34, 35, 46, 49, 88, 110, 168, 169, 175, 186, 298, 299, 300, 301, 320, 333, 362, 419, 421, 425, 427, 428, 431, 433, 434, 435, 446, 447, 459, 471, 489], "chose": 165, "chosen": [23, 35, 67, 101, 172, 232, 436, 438, 439, 442, 443, 445, 471], "chri": [0, 119, 131, 146, 158], "christian": [0, 115, 125, 140, 143, 158, 159, 192, 227, 253, 361, 362], "christin": [51, 115, 221], "christina": [0, 60, 115, 127, 158, 203, 258], "christo": [58, 115, 361, 362], "christoph": [23, 115, 140, 143, 158, 200, 246, 254], "chun": [38, 115], "chunk": [3, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 99, 104], "church": [60, 115, 203, 224, 258, 259], "chyzhyk": [53, 100, 115], "ci": [173, 182, 310, 312, 313], "cibit": 0, "cidx": 80, "cing": 53, "cingul": [24, 57, 60, 63, 92, 174, 193], "cingulo": 60, "cinguloopercular": 260, "cionca": [0, 126, 158], "cipollini": [0, 119, 120, 122, 131, 133, 158], "circl": 85, "circleci": [133, 138, 158], "circular": [77, 196], "ciric": [58, 115, 361, 362], "cisler": [101, 115], "citat": [0, 173], "cite": [162, 198, 214, 219, 250, 261, 270], "cit\u00e9": 0, "ciuciu": [72, 115, 204, 305], "civet": [115, 196], "clair": [115, 192], "clare": [115, 192, 221, 227, 253], "clarifi": [67, 151, 158], "clariti": 55, "clark": [0, 115, 124, 158, 170, 195, 243], "class": [3, 7, 10, 12, 29, 44, 45, 47, 51, 53, 56, 58, 60, 92, 95, 99, 100, 103, 113, 123, 124, 125, 127, 129, 130, 131, 133, 139, 140, 141, 144, 146, 149, 151, 152, 153, 155, 158, 164, 165, 169, 172, 173, 174, 178, 186, 232, 233, 234, 264, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 320, 333, 339, 351, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 419, 421, 425, 427, 428, 431, 432, 433, 434, 435, 440, 446, 447, 448, 449, 450, 451, 457, 463, 464, 465, 466, 467, 468, 473, 476, 488, 489], "class_prior": [298, 299, 300, 301], "classes_": [40, 298, 299, 300, 301, 303, 304], "classic": [30, 35, 95, 166, 184, 212], "classif": [3, 31, 32, 33, 34, 36, 40, 45, 48, 51, 61, 99, 101, 113, 115, 117, 127, 149, 158, 159, 164, 165, 169, 170, 171, 179, 180, 181, 191, 232, 240, 250, 261, 298, 299, 300, 301, 303, 362, 364, 369, 421, 432, 440, 487, 488, 489], "classifi": [3, 29, 33, 34, 37, 40, 43, 47, 53, 99, 100, 113, 146, 149, 150, 158, 165, 166, 167, 168, 169, 179, 180, 181, 264, 298, 300, 301, 302, 303, 343, 345, 350, 435, 440, 488, 489], "classification_accuraci": [34, 99], "classification_target": [31, 33], "classifier_nam": 31, "classifiers_data": 31, "classmethod": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 467], "claus": 0, "clean": [32, 42, 45, 51, 52, 54, 55, 58, 60, 70, 105, 115, 124, 125, 127, 129, 136, 142, 143, 146, 150, 151, 153, 158, 182, 185, 186, 232, 305, 306, 320, 338, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 420, 447, 449], "clean__": [338, 365, 366, 367, 368, 369, 370, 371], "clean__butterworth__": [338, 365, 366, 367, 368, 369, 370, 371], "clean__butterworth__padtyp": 60, "clean__sample_mask": [127, 158], "clean_arg": [372, 373, 374, 473], "clean_img": [70, 127, 136, 138, 143, 153, 158, 185, 461], "clean_kwarg": [34, 51, 54, 55, 58, 60], "clean_map": 6, "cleaned_sign": 461, "cleaner": [50, 67, 143, 158], "clear": [40, 95, 118, 124, 129, 146, 155, 158, 173, 298, 299, 300, 301, 305, 306, 367, 370, 447], "clearer": [44, 173], "clearli": [126, 153, 158, 173], "clever": [117, 172], "clf": [43, 140, 158], "cli": [177, 362], "click": [118, 175, 186, 270, 486], "clinic": [0, 53, 100, 166, 181], "clip": [60, 85, 353, 354], "cllip": 354, "clock": 172, "clone": 173, "close": [16, 24, 38, 42, 51, 87, 153, 158, 159, 166, 172, 173, 175, 179, 266, 298, 299, 300, 301, 376, 377, 378, 379, 380, 381, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439, 454, 486], "closer": [42, 51, 172, 458], "closest": [85, 353], "cluster": [6, 20, 32, 33, 34, 41, 48, 61, 64, 75, 80, 82, 83, 87, 92, 110, 113, 115, 124, 125, 146, 149, 153, 154, 155, 158, 161, 167, 168, 170, 175, 178, 179, 180, 181, 193, 199, 244, 245, 261, 270, 300, 301, 315, 320, 329, 333, 335, 336, 343, 345, 350, 357, 368, 384, 404, 425, 432, 434, 435, 440, 446, 447, 448, 452, 454, 455, 458, 459, 472, 473, 488, 489], "cluster_level_infer": [77, 153, 158, 178], "cluster_percentil": [300, 301], "cluster_roi": [199, 245], "cluster_s": [154, 158], "cluster_threshold": [6, 63, 70, 82, 153, 158, 320, 333, 336, 357, 360, 458, 459], "clustering_percentil": [33, 300, 301], "cm": [13, 20, 21, 39, 40, 43, 46, 52, 60, 126, 143, 158, 163, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 425, 431, 433, 434, 441, 486], "cma": 211, "cmap": [3, 6, 10, 13, 15, 20, 21, 23, 24, 32, 34, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 51, 52, 54, 55, 56, 58, 70, 77, 78, 80, 81, 82, 87, 88, 90, 92, 93, 95, 104, 107, 108, 111, 126, 144, 146, 155, 158, 163, 186, 198, 268, 269, 270, 366, 367, 368, 369, 370, 372, 373, 374, 419, 420, 424, 425, 426, 427, 428, 430, 432, 433, 434, 435, 436, 437, 438, 439, 442, 443, 445, 473, 486], "cmap_filenam": [82, 108], "cmap_label": [155, 158, 420], "cmaps_leftauditoryclick": [78, 107], "cmrmap_r": [51, 54, 55, 56, 58, 92, 366, 367, 368, 369, 473], "cn2h9c": [115, 159, 232], "cnr": [0, 193, 242], "co": [5, 25, 85, 115, 174, 192, 205, 206, 207, 208, 209, 230, 255, 283], "coactiv": 164, "coalson": [60, 115, 203, 258], "coars": 38, "cobr": [126, 134, 138, 158], "code": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 159, 163, 164, 166, 168, 172, 174, 179, 186, 240, 302, 306, 320, 333, 366, 369, 371, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 431, 449, 457, 459, 472, 473, 481, 483, 487], "codebas": [126, 158, 173], "codecov": [138, 158], "coef": [32, 46, 99, 320, 329], "coef_": [3, 42, 46, 99, 111, 117, 173, 298, 299, 300, 301, 303, 304], "coef_img": [3, 31, 45, 111, 117], "coef_img_": [3, 30, 31, 32, 41, 44, 45, 111, 165, 186, 298, 299, 300, 301, 303, 304], "coeffici": [3, 6, 24, 40, 41, 42, 46, 53, 99, 100, 139, 155, 158, 159, 165, 166, 167, 171, 172, 173, 175, 179, 232, 234, 299, 303, 304, 309, 311, 314, 320, 329, 333, 459], "coerc": [12, 284], "coffei": [115, 221], "cognit": [0, 40, 73, 101, 105, 115, 165, 175, 179, 186, 198, 217, 222, 227, 228, 253, 262, 270, 280], "cognitive_paradigm_cogatla": 109, "cohen": [60, 115, 203, 224, 258, 259], "coher": [179, 181], "cohort": [53, 100], "coil": 70, "coimbra": 0, "col": [40, 310, 312, 313], "colcomb": [115, 221], "cold_hot": [44, 45, 142, 158], "colin": [0, 146, 158], "colin27": 214, "colinear": 67, "collaps": [76, 110], "collect": [60, 101, 105, 109, 115, 116, 173, 179, 191, 195, 199, 218, 220, 275, 276, 277, 278, 361, 465, 466, 489], "collection_1257": 105, "collection_1952": 105, "collection_4008": 105, "collection_413": [105, 109], "collection_42": [105, 109], "collection_423": [105, 109], "collection_658": [2, 105], "collection_79": 105, "collection_98": [105, 109], "collection_filt": [118, 275], "collection_id": [105, 109, 118, 275, 277], "collection_metadata": [118, 275], "collection_term": [118, 275], "collections_meta": [118, 220, 275, 276, 277, 278], "colleg": [0, 179], "collin": [115, 193, 196, 213, 242], "color": [10, 15, 16, 19, 22, 25, 31, 33, 35, 40, 51, 52, 53, 70, 87, 89, 127, 128, 130, 144, 146, 149, 151, 155, 158, 162, 163, 173, 175, 182, 231, 366, 368, 369, 370, 372, 373, 374, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 486], "colorado": 0, "colorbar": [2, 6, 10, 15, 21, 22, 23, 24, 26, 27, 37, 38, 40, 42, 50, 52, 53, 56, 59, 60, 64, 69, 70, 76, 77, 78, 80, 81, 87, 88, 89, 95, 102, 105, 107, 109, 110, 111, 122, 124, 127, 128, 135, 138, 143, 144, 146, 150, 151, 152, 153, 154, 158, 163, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 425, 427, 428, 430, 431, 432, 433, 434, 435, 436, 438, 439, 441, 442, 443, 445, 486], "colorbar_fonts": [441, 443, 445], "colorbar_height": [441, 443, 445], "colormap": [6, 9, 15, 20, 22, 24, 28, 87, 113, 128, 138, 141, 142, 143, 144, 146, 151, 156, 158, 256, 366, 368, 369, 370, 372, 373, 374, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 419, 420, 421, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 488, 489], "colors_17": [231, 256], "colors_7": [231, 256], "column": [3, 6, 40, 58, 64, 65, 66, 67, 69, 70, 71, 72, 73, 76, 77, 78, 80, 81, 82, 99, 101, 102, 107, 108, 110, 118, 126, 127, 150, 158, 175, 233, 234, 236, 242, 244, 246, 248, 249, 251, 252, 254, 255, 298, 299, 300, 301, 307, 310, 311, 312, 313, 318, 320, 327, 333, 334, 335, 338, 353, 361, 362, 363, 368, 384, 395, 397, 400, 414, 419, 422, 423, 425, 426, 428, 432, 433, 434, 435, 456, 458, 460, 461, 462], "column_nam": [64, 363], "column_or_1d": [107, 108], "com": [0, 20, 155, 158, 173, 213, 221, 225, 226, 244, 252, 362, 486, 487], "combin": [6, 7, 16, 42, 43, 72, 104, 106, 115, 124, 127, 152, 158, 165, 170, 175, 179, 186, 192, 196, 211, 214, 218, 226, 240, 274, 298, 299, 300, 301, 303, 304, 305, 306, 320, 333, 335, 361, 403, 404, 407, 408, 409, 410, 422], "come": [2, 3, 17, 44, 54, 56, 60, 76, 81, 95, 117, 125, 128, 158, 160, 165, 166, 172, 173, 181, 182, 185, 186, 261, 486], "comer": 181, "comfort": [117, 173], "comma": 184, "command": [173, 181, 182, 487], "comment": [102, 173, 186], "commerci": [191, 194, 196, 198, 199, 201, 202, 219, 245], "commit": 182, "commit_sha": 182, "committe": 192, "commod": 172, "common": [12, 51, 67, 68, 71, 95, 101, 138, 146, 152, 154, 158, 159, 165, 168, 170, 172, 173, 175, 178, 183, 185, 191, 196, 199, 229, 236, 245, 345, 353, 354, 358, 367, 379, 381, 489], "commonli": [53, 162, 174, 179, 181, 186, 362], "commun": [0, 115, 173, 180, 182, 191, 201, 261, 487], "comp": [50, 195, 243], "compact": [2, 95, 185, 266], "compar": [3, 6, 31, 32, 34, 36, 41, 43, 48, 53, 58, 60, 61, 65, 67, 78, 80, 81, 84, 87, 95, 97, 100, 103, 113, 115, 118, 120, 146, 158, 160, 161, 164, 165, 166, 167, 168, 169, 172, 174, 175, 177, 179, 186, 199, 219, 232, 234, 247, 250, 256, 261, 340, 343, 349, 350, 351, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 396, 416, 417, 421, 429, 435, 440, 461, 473, 486, 488, 489], "comparison": [44, 51, 53, 59, 64, 67, 82, 94, 100, 101, 104, 115, 118, 159, 162, 169, 170, 171, 176, 179, 195, 199, 243, 489], "compat": [12, 37, 73, 80, 87, 95, 125, 127, 133, 153, 155, 158, 168, 173, 174, 248, 249, 320, 333, 335, 345, 360, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 422, 449, 457, 461], "compcor": [58, 67, 115, 127, 153, 158, 160, 261, 344, 361, 362, 462], "complementari": [115, 217], "complet": [35, 62, 74, 95, 113, 117, 118, 146, 158, 159, 165, 167, 173, 174, 182, 185, 186, 262, 264, 280, 297, 320, 323, 360, 363, 370, 384, 419, 420, 421, 422, 425, 427, 428, 429, 431, 432, 433, 434, 435, 447, 457, 458, 459, 472, 488], "complex": [67, 78, 88, 115, 118, 165, 167, 170, 173, 178, 181, 186], "compli": [173, 192, 361, 364], "complianc": [126, 158, 173], "compliant": [101, 125, 158, 173, 186, 280, 296, 362], "complic": [172, 184, 310, 312, 313], "compon": [7, 50, 52, 56, 67, 93, 95, 98, 112, 113, 115, 131, 138, 139, 141, 149, 158, 160, 161, 162, 163, 175, 179, 184, 185, 195, 196, 232, 233, 234, 243, 253, 261, 272, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 312, 313, 320, 333, 345, 347, 350, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 418, 435, 440, 446, 447, 448, 449, 450, 451, 462, 473, 488, 489], "component_img": 106, "components_": [105, 141, 158, 305, 306], "components_img": [50, 52, 163], "components_img_": [50, 52, 141, 158, 163, 164, 305, 306], "components_mask": [93, 106], "compos": [21, 99, 179, 185, 186, 191, 259, 298, 299, 300, 301], "composit": [35, 40], "comprehens": [115, 173, 181, 196, 198, 270, 296], "compress": [50, 115, 143, 158, 161, 164, 184, 306, 489], "compressed_img_rena": 51, "compris": [65, 67, 87, 450, 458], "compromis": [175, 362], "comptat": 67, "comput": [0, 3, 6, 10, 16, 17, 23, 24, 26, 30, 31, 32, 34, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 63, 64, 65, 66, 67, 68, 69, 71, 73, 76, 78, 80, 82, 84, 86, 91, 93, 96, 99, 100, 101, 102, 104, 105, 106, 110, 111, 113, 115, 116, 118, 126, 129, 131, 143, 149, 150, 151, 153, 158, 161, 162, 164, 165, 166, 167, 168, 170, 171, 172, 175, 176, 177, 179, 180, 181, 183, 184, 187, 232, 234, 236, 250, 261, 264, 274, 283, 286, 287, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 310, 312, 313, 316, 317, 319, 320, 322, 327, 329, 333, 335, 336, 343, 344, 345, 348, 349, 350, 351, 355, 357, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 416, 418, 421, 424, 425, 432, 433, 434, 435, 440, 441, 443, 446, 447, 448, 449, 457, 459, 460, 462, 471, 472, 479, 486, 489], "computation": [67, 166, 170], "computationnali": 166, "compute_alpha_max": 172, "compute_background_mask": [185, 298, 299, 300, 301, 305, 306, 367, 370, 447], "compute_brain_mask": [50, 149, 152, 158, 185, 298, 299, 300, 301, 305, 306, 370, 380, 447], "compute_contrast": [6, 34, 63, 64, 66, 67, 69, 70, 71, 72, 76, 77, 78, 80, 81, 82, 101, 102, 110, 124, 127, 128, 129, 158, 174, 177, 320, 333, 335, 459], "compute_epi_mask": [12, 26, 70, 90, 185, 186, 298, 299, 300, 301, 305, 306, 367, 370, 447], "compute_fixed_effect": [72, 177], "compute_gray_matter_mask": [149, 153, 158], "compute_multi_background_mask": [129, 158, 185, 367], "compute_multi_brain_mask": [124, 152, 158, 367], "compute_multi_epi_mask": [124, 158, 185, 367], "compute_multi_gray_matter_mask": [124, 158], "compute_multi_grey_matter_mask": [152, 158], "compute_regressor": [68, 125, 153, 158, 174], "computed_regressor": 322, "con": 316, "con_id": [68, 322], "con_val": [72, 316], "concat_img": [2, 12, 71, 101, 137, 158, 185, 345], "concat_niimg": [127, 158], "concaten": [38, 40, 49, 51, 55, 59, 101, 159, 185, 339, 345, 361, 449], "concentr": [45, 173, 175, 179], "concept": [67, 99, 146, 158, 165, 166, 173, 179, 183, 214, 489], "conceptu": 175, "concern": [173, 179], "concis": 275, "concordia": 0, "concret": [66, 173, 175], "concurr": [32, 36, 37, 38, 44, 45, 46, 50, 52, 55, 59, 60, 99, 102, 104, 107], "cond": [95, 101, 322], "cond_": 64, "cond_id": [153, 158], "cond_map": 95, "conda": [173, 487], "condit": [3, 6, 30, 31, 32, 34, 36, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 81, 95, 99, 102, 104, 110, 117, 129, 150, 153, 155, 158, 159, 165, 172, 177, 179, 182, 185, 202, 204, 212, 228, 229, 247, 320, 322, 327, 333, 335, 422], "condition_": 34, "condition_count": 101, "condition_effect": 81, "condition_id": 73, "condition_mask": [3, 30, 31, 32, 35, 37, 38, 99, 104, 117], "condition_mask_test": 32, "condition_mask_train": 32, "condition_nam": [95, 101], "conditions_encod": 104, "conditions_label": 34, "conditions_per_run": 104, "conditions_run": 34, "conditions_test": 3, "conditions_to_modul": 73, "conditions_train": 3, "conduct": [33, 118, 128, 158, 175, 228], "conenctivitymeasur": 49, "conf_int": [310, 312, 313], "confer": [142, 158], "confid": [298, 299, 300, 301, 303, 304, 310, 312, 313], "confidence_interv": [310, 312, 313], "configur": [10, 16, 125, 126, 158, 173, 182, 185, 186, 232, 302, 305, 306, 320, 333, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 449], "confirm": [2, 30, 126, 158, 173], "conform": [155, 158, 175], "confound": [34, 49, 51, 52, 53, 54, 55, 56, 57, 60, 64, 78, 79, 100, 101, 102, 107, 110, 115, 117, 122, 125, 126, 127, 129, 130, 133, 143, 149, 150, 151, 153, 155, 158, 160, 163, 164, 165, 172, 179, 183, 185, 194, 201, 232, 241, 261, 305, 306, 320, 323, 333, 334, 335, 338, 344, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 384, 447, 449, 461, 462, 477, 489], "confound_fil": 53, "confound_filenam": [55, 57], "confounding_var": 384, "confounds_": 323, "confounds_datafram": 160, "confounds_fd_threshold": 323, "confounds_filenam": 60, "confounds_minimal_no_gsr": 58, "confounds_mot": 323, "confounds_scrub": [58, 323], "confounds_simpl": 58, "confounds_std_dvars_threshold": 323, "confounds_strategi": 323, "confounds_wm_csf": 323, "conftest": 173, "confus": [125, 158, 166, 356], "confusion_matrix": [32, 36, 166], "congdon": [115, 262, 280], "congruent": 177, "conjunct": 95, "connect": [7, 9, 23, 27, 28, 51, 52, 60, 61, 89, 95, 98, 112, 115, 127, 128, 129, 131, 136, 138, 139, 146, 149, 154, 158, 160, 162, 164, 173, 174, 175, 179, 180, 181, 185, 191, 192, 196, 225, 227, 231, 232, 233, 234, 240, 244, 250, 252, 253, 254, 256, 261, 267, 272, 286, 287, 294, 320, 323, 336, 339, 347, 357, 361, 362, 364, 369, 370, 371, 372, 376, 377, 378, 379, 380, 381, 382, 397, 398, 418, 421, 423, 432, 435, 438, 439, 440, 441, 447, 450, 451, 463, 465, 466, 467, 486, 487, 488, 489], "connect_diag": [87, 450], "connected_compon": [449, 451], "connected_label_region": [87, 138, 158, 162, 185, 449, 451], "connected_region": [89, 131, 144, 158, 163, 185, 449, 450], "connection": 181, "connectivity_": 447, "connectivity__kind": 100, "connectivity_measur": 60, "connectivitymatrix": 232, "connectivitymeasur": [49, 52, 53, 56, 58, 60, 100, 111, 126, 131, 133, 136, 139, 149, 158, 159, 160, 163], "connectom": [0, 9, 13, 28, 48, 50, 51, 53, 56, 58, 59, 61, 100, 111, 113, 115, 120, 131, 135, 136, 140, 143, 144, 146, 149, 151, 158, 161, 163, 164, 179, 180, 181, 186, 191, 192, 194, 196, 219, 240, 247, 250, 256, 258, 259, 261, 272, 305, 306, 340, 343, 345, 351, 362, 364, 365, 366, 368, 369, 371, 396, 397, 416, 417, 418, 419, 421, 431, 432, 433, 435, 440, 441, 442, 444, 449, 457, 473, 488, 489], "connectome_measur": [49, 52, 111, 163], "connectomedb": 192, "connectomeview": [441, 444], "connor": [0, 155, 158], "conscious": 0, "consecut": [128, 158, 193, 242, 244, 246, 252, 255, 256, 446], "consensu": [164, 173, 196], "consequ": [3, 16, 87, 186], "conserv": [6, 78, 80, 104, 170, 175, 196, 233, 238], "consid": [6, 33, 41, 55, 56, 57, 67, 68, 81, 93, 95, 104, 106, 117, 133, 146, 153, 158, 170, 173, 192, 214, 231, 240, 256, 298, 299, 300, 301, 303, 304, 305, 306, 307, 311, 320, 322, 323, 327, 333, 335, 342, 348, 359, 366, 367, 369, 370, 372, 373, 378, 381, 384, 388, 434, 447, 450, 452, 453, 473], "consider": [160, 166, 226, 240, 335, 384], "consist": [3, 7, 35, 42, 46, 67, 117, 125, 126, 136, 142, 143, 144, 153, 158, 165, 166, 169, 170, 172, 173, 175, 179, 191, 196, 201, 228, 234, 244, 272, 299, 304, 323, 365, 368, 372, 373, 446, 448, 451], "consolid": [95, 154, 158], "conson": [102, 215], "consortium": [262, 280], "constant": [67, 111, 172, 185, 298, 299, 300, 301, 303, 304, 335, 384, 424, 460, 486], "constant_features_idx": 111, "constitut": [21, 164], "constrain": [51, 52, 115, 162, 180, 199, 212, 219, 226, 227, 245, 250, 264, 447], "constrained_layout": [31, 33, 50, 53, 57, 60, 65, 70, 76, 79, 81, 100, 110], "constraint": [51, 162, 172, 358], "constrast_fig_fil": 76, "construct": [10, 42, 54, 56, 99, 115, 161, 164, 170, 173, 174, 180, 181, 193, 307, 311, 334, 457], "constructor": [2, 118, 129, 158, 312, 313, 345], "consult": [102, 192], "consum": [144, 158, 168, 172, 182, 184, 371], "consumpt": [185, 320, 333, 366, 369, 460], "contact": 228, "contain": [2, 3, 4, 6, 12, 23, 24, 37, 42, 51, 54, 57, 64, 65, 69, 72, 73, 80, 85, 87, 92, 95, 102, 103, 108, 109, 110, 117, 118, 125, 126, 127, 128, 130, 133, 138, 143, 146, 155, 156, 158, 159, 165, 166, 169, 172, 173, 175, 179, 182, 184, 186, 192, 193, 194, 195, 196, 199, 201, 204, 211, 212, 214, 218, 220, 221, 222, 223, 232, 233, 234, 236, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 264, 274, 275, 276, 277, 278, 279, 284, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 312, 313, 314, 320, 323, 333, 334, 335, 338, 339, 347, 353, 357, 358, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 384, 430, 431, 436, 437, 438, 439, 443, 445, 446, 447, 448, 449, 450, 452, 453, 457, 459, 461, 465, 466, 467, 469, 470, 471, 478, 489], "contast": 72, "content": [67, 69, 85, 126, 158, 169, 173, 181, 320, 426], "contest": 204, "context": [7, 95, 101, 115, 126, 127, 158, 173, 179], "contigu": [162, 172, 228, 384], "continu": [22, 24, 41, 45, 54, 58, 160, 165, 166, 167, 171, 179, 186, 275, 348, 352, 353, 354, 365, 366, 367, 368, 369, 370, 371, 427, 428, 433, 434, 435, 442, 450, 451], "contour": [10, 16, 19, 22, 50, 52, 88, 89, 126, 129, 138, 146, 149, 151, 155, 158, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 433, 434, 437, 489], "contour_fil": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "contourf": [16, 22, 50, 52, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "contrari": [179, 359, 365, 366, 473], "contrarili": [56, 92, 368, 369, 473], "contrast": [2, 6, 9, 15, 16, 28, 34, 66, 68, 71, 76, 77, 78, 79, 80, 81, 82, 89, 91, 94, 102, 107, 108, 110, 113, 125, 126, 127, 129, 136, 140, 141, 150, 153, 158, 164, 170, 175, 176, 177, 178, 179, 193, 198, 218, 268, 269, 270, 276, 278, 309, 310, 312, 313, 314, 316, 317, 318, 320, 333, 335, 360, 419, 422, 433, 434, 435, 440, 442, 446, 459, 472, 486, 488, 489], "contrast_": [71, 72], "contrast_def": [6, 320, 333, 422, 459], "contrast_definit": 109, "contrast_dim": 308, "contrast_id": [66, 67, 69, 71, 72], "contrast_img": [72, 317], "contrast_map_filenam": [78, 107], "contrast_matrix": [66, 67, 69, 71], "contrast_plot": 76, "contrast_typ": [64, 127, 158, 308, 316, 360], "contrast_v": [66, 67, 69, 71, 72], "contribut": [124, 140, 143, 144, 145, 146, 147, 148, 152, 153, 155, 158, 166, 175, 182, 223, 487], "contributor": [119, 120, 122, 123, 173, 182], "control": [6, 9, 10, 12, 15, 16, 21, 24, 28, 34, 39, 42, 50, 58, 77, 80, 99, 113, 115, 125, 127, 129, 131, 139, 140, 144, 146, 150, 158, 159, 163, 164, 165, 166, 169, 170, 172, 173, 175, 179, 183, 191, 194, 196, 232, 240, 268, 275, 277, 306, 315, 319, 320, 333, 336, 357, 361, 362, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 425, 427, 428, 430, 434, 435, 436, 438, 439, 440, 446, 459, 471, 472, 486, 488, 489], "controversi": 240, "convei": [173, 384], "conveni": [118, 185, 186, 201, 261], "convent": [23, 73, 124, 126, 155, 158, 173, 182, 296, 356, 358, 359, 419, 425, 427, 435, 446, 448], "converg": [35, 93, 106, 172, 233, 236, 303, 304, 446], "convergencewarn": [35, 41, 93, 106], "convers": [40, 186, 193], "convert": [3, 6, 12, 21, 37, 44, 50, 52, 67, 80, 87, 95, 109, 117, 146, 151, 153, 155, 158, 163, 165, 170, 179, 185, 302, 318, 339, 340, 348, 365, 366, 367, 368, 369, 370, 371], "convex": 172, "convolut": [68, 175, 322, 327], "convolv": [174, 322], "coord": [16, 42, 52, 54, 56, 60, 70, 88, 101, 144, 146, 158, 163, 385, 387, 388, 416, 417, 421, 436, 437, 438, 439, 445, 486], "coord_transform": [42, 49, 140, 158], "coordin": [7, 17, 20, 23, 38, 42, 51, 54, 56, 70, 95, 101, 115, 117, 123, 127, 135, 138, 140, 141, 143, 149, 153, 155, 158, 161, 163, 172, 174, 175, 179, 186, 193, 194, 200, 203, 205, 206, 207, 208, 209, 214, 224, 226, 227, 250, 258, 259, 260, 283, 306, 340, 353, 371, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 418, 419, 420, 421, 425, 427, 428, 431, 433, 434, 435, 436, 437, 438, 439, 441, 442, 444, 445, 458, 459, 463, 464, 468, 470, 471, 473, 486, 489], "coords_connectom": [52, 163], "copenhagen": 0, "copi": [3, 21, 34, 37, 40, 42, 49, 50, 52, 55, 89, 98, 101, 112, 113, 117, 128, 129, 146, 158, 172, 173, 184, 192, 222, 241, 280, 305, 306, 337, 341, 342, 343, 348, 349, 350, 351, 352, 353, 354, 357, 364, 367, 370, 460, 488], "copy_head": [3, 6, 16, 17, 19, 26, 31, 32, 34, 37, 42, 51, 54, 67, 70, 71, 72, 76, 82, 85, 89, 90, 93, 94, 95, 96, 103, 104, 106, 337, 342, 350, 351, 352, 353, 354, 357], "copy_header_from": [103, 129, 158, 349], "copy_img": [127, 131, 158], "corbetta": [115, 362], "core": [3, 17, 21, 30, 44, 45, 50, 52, 60, 172, 173, 182, 487], "coregist": [38, 69, 196], "coregistr": [16, 135, 158, 179, 196], "corei": [115, 195, 243], "corner": [46, 136, 158, 173, 355], "coron": [15, 95, 320, 333, 385, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 419, 421, 425, 427, 428, 431, 433, 434, 435, 459], "corr": [23, 429], "corrcoef": 49, "correct": [6, 44, 45, 50, 58, 76, 78, 80, 82, 93, 102, 104, 107, 108, 115, 124, 125, 146, 149, 155, 158, 159, 170, 173, 175, 176, 179, 182, 196, 280, 296, 298, 299, 300, 301, 303, 304, 335, 336, 357, 361, 362, 384, 420, 462, 489], "correctli": [58, 67, 94, 127, 144, 146, 147, 155, 158, 168, 175, 182, 298, 320, 361, 362, 487], "correl": [24, 27, 44, 45, 48, 49, 54, 61, 63, 71, 100, 101, 111, 113, 115, 129, 158, 163, 165, 172, 175, 179, 181, 186, 192, 196, 212, 218, 232, 235, 237, 239, 261, 272, 305, 361, 362, 364, 370, 371, 397, 424, 429, 435, 486, 488], "correlation_matric": [27, 49, 53, 192, 272], "correlation_matrix": [56, 58, 486], "correlation_measur": [53, 56, 58], "correspond": [2, 3, 6, 7, 15, 25, 30, 31, 34, 35, 37, 40, 41, 42, 46, 51, 57, 58, 65, 66, 67, 70, 73, 78, 79, 80, 81, 82, 87, 92, 93, 95, 102, 104, 110, 115, 126, 148, 150, 158, 160, 165, 166, 168, 170, 172, 173, 175, 179, 180, 182, 186, 193, 196, 198, 222, 227, 230, 232, 242, 247, 250, 253, 260, 266, 270, 277, 288, 289, 292, 298, 299, 300, 301, 302, 303, 304, 305, 306, 316, 317, 320, 322, 323, 327, 329, 333, 334, 335, 349, 350, 353, 358, 365, 367, 368, 369, 370, 372, 376, 377, 378, 379, 380, 381, 382, 384, 398, 413, 414, 419, 420, 425, 428, 429, 431, 433, 434, 435, 437, 447, 449, 450, 452, 453, 455, 458, 459, 471], "cort": [11, 22, 58, 92, 160, 248, 249], "cortex": [3, 7, 24, 32, 33, 34, 39, 40, 57, 60, 63, 69, 71, 76, 80, 81, 92, 99, 115, 163, 165, 170, 174, 175, 192, 193, 200, 203, 211, 212, 218, 225, 231, 246, 252, 256, 258, 264, 274], "cortexl": 260, "cortexmid": 260, "cortexr": 260, "cortic": [9, 10, 24, 25, 28, 29, 47, 57, 58, 69, 72, 92, 113, 115, 129, 138, 140, 143, 149, 158, 160, 174, 180, 200, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 225, 226, 231, 246, 254, 256, 260, 264, 283, 286, 287, 345, 421, 438, 439, 440, 441, 442, 443, 444, 445, 467, 471, 488, 489], "corticalparcellation_yeo2011": [231, 256], "cortl": 248, "cosin": [6, 34, 67, 69, 70, 71, 110, 124, 126, 151, 158, 196, 320, 323, 327, 361, 461, 472], "cosine00": 58, "cosine01": 58, "cosine02": 58, "cosine03": 58, "cosmo": [0, 126, 158], "cost": [32, 41, 55, 80, 149, 158, 162, 166, 167, 171, 172, 173, 179, 186, 300, 301], "costli": [166, 170, 335, 384], "could": [4, 6, 37, 51, 60, 67, 69, 70, 80, 86, 87, 94, 101, 103, 107, 117, 118, 133, 149, 153, 154, 158, 165, 168, 170, 172, 173, 175, 177, 181, 186, 308, 434, 471], "couldn": 172, "counfound": 49, "count": [51, 102, 126, 158, 275, 277], "counterpart": [129, 158, 166], "countvector": [275, 277], "coupl": [68, 159, 182], "cours": [69, 162, 175, 179, 366, 369, 373], "courtnei": [115, 221], "cov": [55, 310, 312, 313, 487], "cov_estim": 232, "cov_estimator_": 232, "cov_to_corr": [138, 158], "covari": [6, 44, 48, 59, 60, 61, 63, 69, 104, 113, 115, 139, 158, 160, 161, 163, 180, 192, 232, 233, 234, 235, 236, 250, 261, 307, 309, 310, 311, 312, 313, 364, 369, 384, 417, 421, 432, 440, 441, 488, 489], "covariance_": [54, 55, 60, 159], "covariance_estim": 60, "covariances_": [55, 159, 233, 234], "cover": [58, 173, 186, 203, 211, 258, 260, 415], "coverag": [129, 158, 173, 487], "coveral": [138, 158], "covertli": 215, "cox": [115, 221], "cpac": 240, "cpu": [3, 44, 104, 107, 168, 234, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 329, 333, 335, 350, 365, 366, 367, 379, 381, 384, 447], "cr": [115, 213], "craddock": [58, 115, 155, 158, 159, 160, 188, 219, 221, 240, 245, 250], "crash": [146, 158], "creat": [2, 3, 4, 6, 10, 11, 12, 16, 18, 19, 20, 21, 22, 23, 24, 27, 31, 34, 37, 38, 40, 41, 42, 43, 44, 45, 49, 50, 51, 57, 64, 66, 67, 69, 71, 72, 73, 76, 80, 85, 87, 88, 95, 99, 101, 102, 104, 108, 109, 111, 116, 117, 124, 129, 135, 143, 155, 158, 159, 160, 164, 165, 166, 168, 173, 174, 175, 177, 179, 180, 182, 183, 184, 186, 275, 277, 297, 305, 306, 320, 323, 333, 334, 345, 351, 360, 386, 395, 396, 397, 400, 419, 420, 421, 422, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 455, 456, 458, 465, 467, 486, 487, 489], "create_fake_bids_dataset": [125, 158], "create_simulation_data": 46, "creation": [124, 146, 158, 305, 306, 320, 333, 459], "creativ": [196, 199, 245], "creativecommon": 245, "credit": 0, "criteo": 0, "criteria": [118, 173, 179, 226, 240, 275], "criterion": [196, 384, 448], "critic": [130, 158, 170, 172], "criugm": 0, "crivello": [115, 193, 242], "crop": [185, 186, 342], "crop_img": 353, "croppabl": 342, "cross": [29, 33, 34, 37, 38, 42, 44, 46, 47, 53, 57, 98, 100, 112, 113, 115, 118, 125, 126, 149, 158, 159, 166, 169, 222, 234, 264, 275, 279, 288, 298, 299, 300, 301, 302, 303, 304, 345, 355, 364, 370, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 425, 428, 433, 434, 435, 440, 442, 486, 488, 489], "cross_val_scor": [36, 99, 168], "cross_valid": [35, 99, 143, 158, 168, 298, 299, 300, 301], "crossbar": [395, 397, 400, 402, 404, 406, 408, 410, 412], "crowd": 223, "crucial": 170, "csernanski": [115, 222], "csf": [12, 22, 58, 213, 261, 265, 323, 361, 362], "css": [128, 158, 240], "csv": [3, 6, 30, 42, 49, 57, 117, 133, 158, 160, 165, 194, 202, 216, 219, 222, 240, 241, 271, 279, 305, 306, 320, 327, 333, 338, 364, 365, 366, 367, 368, 369, 370, 371, 447, 449, 461], "csv_file": 160, "csv_to_arrai": [133, 158], "ctan": 182, "cube": [52, 186, 458], "cubic": [124, 158, 186, 236, 461], "cubicsplin": [127, 158], "cue": [78, 107, 269, 270], "cumbersom": 175, "cumsum": 65, "cumul": [150, 158, 308], "cuneal": 92, "cur_img": [50, 88], "current": [2, 16, 19, 31, 37, 42, 44, 45, 49, 50, 51, 54, 56, 68, 72, 88, 104, 108, 155, 158, 170, 172, 173, 179, 182, 186, 222, 236, 244, 245, 251, 253, 280, 308, 358, 360, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 436, 438, 439, 442, 449], "current_collect": 109, "currentmodul": 182, "curs": 95, "curv": [40, 151, 158, 165, 166, 168, 172, 179, 436, 437, 438, 439, 445, 469], "curv_left": [205, 206, 207, 208, 209, 210, 283], "curv_right": [205, 206, 207, 208, 209, 210, 283], "curv_sign": 10, "curvatur": [10, 24, 110, 125, 129, 158, 205, 206, 207, 208, 209, 210, 283, 287], "custom": [10, 15, 16, 24, 40, 49, 58, 68, 125, 143, 151, 153, 158, 160, 170, 183, 298, 299, 320, 322, 327, 362, 398, 436, 438, 439, 457, 486, 489], "custom_funct": [436, 438, 439], "customis": 362, "customiz": 362, "cut": [15, 51, 67, 95, 127, 128, 131, 141, 143, 144, 155, 158, 180, 196, 320, 333, 377, 380, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 419, 421, 425, 427, 428, 431, 433, 434, 435, 442, 459, 486], "cut_coord": [2, 6, 10, 16, 17, 18, 19, 21, 31, 32, 37, 41, 42, 44, 45, 50, 51, 52, 57, 63, 66, 67, 70, 71, 72, 76, 78, 80, 82, 87, 88, 89, 91, 93, 94, 95, 101, 104, 108, 109, 124, 131, 158, 163, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 425, 428, 433, 434, 435, 442, 459, 486], "cut_scor": 42, "cutax": [402, 404, 406, 408, 410, 412], "cutoff": [6, 67, 69, 71, 90, 151, 158, 183, 298, 299, 300, 301, 303, 304, 305, 306, 338, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 447, 449, 460, 461, 489], "cv": [3, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 46, 53, 60, 99, 100, 111, 140, 158, 165, 170, 234, 298, 299, 300, 301, 302, 303, 304], "cv_": [298, 299, 300, 301, 303, 304], "cv_alphas_": 234, "cv_params_": [3, 35, 125, 126, 158, 298, 299, 300, 301], "cv_results_": 100, "cv_score": [35, 99], "cv_scores_": [3, 30, 31, 33, 34, 35, 40, 44, 111, 165, 234, 298, 299, 300, 301, 303, 304], "cv_scores_ova": 36, "cv_scores_ovo": 36, "cwd": [3, 4, 6, 7, 16, 24, 30, 34, 43, 50, 51, 57, 63, 64, 72, 73, 76, 87, 95], "cyan": 486, "cycl": [125, 126, 158], "cytoarchitecton": 214, "cytoarchitectur": 115, "czarina": [0, 126, 158], "c\u00e9line": [0, 146, 158], "d": [0, 27, 43, 53, 58, 60, 71, 77, 101, 115, 118, 159, 172, 173, 181, 193, 196, 202, 203, 213, 220, 224, 227, 242, 253, 258, 259, 262, 275, 277, 280, 308, 315, 338, 361, 362, 420, 432, 461, 475], "d_i": [312, 313], "daan": [115, 361, 362], "daddi": [0, 122, 131, 133, 136, 140, 141, 143, 146, 150, 158], "dadi": [53, 100, 115, 202, 247], "daejeon": 0, "dai": 182, "dale": [23, 115, 200, 205, 206, 207, 208, 209, 211, 246, 254, 283], "dalenberg": [0, 124, 125, 158], "damaraju": [115, 195, 243], "damien": [60, 115, 203, 258], "dan": [0, 115, 143, 146, 158, 230, 255], "danger": [173, 175], "danial": [115, 225, 231, 252, 256], "daniel": [0, 58, 115, 118, 143, 146, 152, 155, 158, 192, 220, 221, 222, 275, 277, 361, 362], "danilo": [0, 119, 120, 122, 123, 131, 133, 158], "danish": 0, "daphn": [115, 172], "dark": [23, 24, 126, 158, 173, 182, 436, 438, 439, 443, 445], "dartel": [222, 279], "dartel_vers": [222, 279], "dartmouth": 0, "darya": [53, 100, 115], "data": [0, 1, 2, 8, 19, 20, 21, 22, 25, 27, 29, 32, 35, 37, 38, 39, 40, 45, 47, 48, 52, 53, 55, 60, 61, 62, 65, 66, 68, 70, 72, 73, 74, 77, 78, 79, 80, 81, 82, 85, 87, 88, 89, 91, 92, 93, 96, 100, 102, 103, 106, 107, 108, 110, 111, 113, 115, 116, 118, 124, 125, 126, 127, 129, 130, 133, 136, 137, 138, 139, 140, 141, 143, 144, 146, 149, 150, 151, 153, 154, 155, 158, 160, 161, 163, 166, 167, 169, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 183, 191, 192, 193, 194, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 218, 219, 220, 221, 223, 226, 227, 228, 229, 232, 233, 234, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 320, 323, 327, 328, 329, 333, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 420, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 459, 461, 465, 467, 469, 471, 472, 473, 474, 475, 477, 486, 488, 489], "data_2d": [385, 387, 388], "data_bound": [385, 387, 388], "data_dir": [64, 101, 102, 110, 152, 158, 184, 215, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 294], "data_figure_run01": [43, 90], "data_fil": 32, "data_gen": [59, 125, 155, 158, 172], "data_img": [376, 379], "data_mask": [67, 106], "data_nam": [281, 282], "data_softwar": 226, "data_typ": [10, 23, 24, 38, 58, 69, 92, 103, 110, 111, 287], "data_usage_agr": [222, 279], "databas": [73, 105, 115, 198, 227, 270, 275], "dataconversionwarn": [107, 108], "datad": 13, "datadb": [212, 264], "datafram": [34, 64, 65, 67, 72, 73, 76, 77, 78, 79, 80, 81, 82, 101, 102, 110, 118, 126, 149, 153, 154, 158, 232, 240, 242, 244, 246, 247, 248, 249, 251, 252, 254, 255, 258, 259, 260, 279, 302, 305, 306, 320, 321, 323, 327, 333, 334, 335, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 422, 423, 424, 426, 446, 447, 448, 449, 458, 461], "dataia": 0, "dataset": [1, 3, 4, 7, 8, 10, 11, 14, 15, 20, 21, 22, 23, 24, 25, 26, 27, 29, 42, 47, 49, 54, 56, 57, 58, 59, 62, 67, 69, 70, 71, 72, 74, 75, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 103, 105, 106, 109, 111, 112, 113, 115, 117, 118, 125, 126, 127, 128, 129, 133, 134, 138, 142, 143, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 164, 165, 166, 169, 171, 174, 178, 179, 180, 181, 182, 183, 186, 192, 193, 195, 196, 197, 198, 199, 200, 202, 203, 205, 206, 207, 208, 209, 211, 213, 214, 217, 219, 222, 223, 224, 225, 226, 227, 230, 231, 298, 299, 300, 301, 304, 305, 320, 323, 327, 333, 336, 337, 340, 343, 345, 349, 350, 354, 358, 360, 361, 362, 363, 364, 370, 371, 384, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 422, 423, 427, 428, 429, 430, 432, 435, 436, 437, 438, 439, 440, 442, 443, 450, 457, 458, 459, 467, 471, 472, 473, 486, 488, 489], "dataset_descript": [64, 76, 360], "dataset_fil": 45, "dataset_ho": 11, "dataset_ju": 11, "dataset_path": [101, 110, 323], "dataset_vers": 280, "datatyp": [58, 92, 103], "date": [0, 110, 152, 158, 243, 246, 265, 275, 277, 472], "davatziko": [58, 115, 361, 362], "david": [0, 58, 115, 118, 155, 158, 181, 192, 200, 211, 220, 221, 227, 246, 253, 275, 277, 361, 362, 384], "davidson": [115, 312, 313], "dawn": [115, 221], "db": [46, 192, 272], "db_name": [58, 92, 103], "dc": [115, 192], "ddof": [365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 461], "de": [0, 143, 146, 158, 192, 328], "deactiv": [6, 72, 472], "deal": [12, 37, 68, 80, 87, 95, 117, 122, 149, 158, 175, 367, 473], "deanna": [60, 115, 192, 203, 226, 258, 260], "debat": 162, "debia": [303, 304], "debian": [123, 158], "debias": [303, 304], "deborah": [115, 211], "debug": [172, 173, 181, 234, 236], "decai": 460, "decemb": [115, 130, 131, 132, 146, 158, 196, 262, 280], "decent": 182, "decid": 175, "decim": [149, 158, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 428], "decis": [101, 115, 166, 170, 298, 299, 300, 301, 303, 304, 308], "decision_funct": [298, 299, 300, 301, 303, 304], "declar": [6, 173, 175, 233, 236], "decod": [1, 8, 37, 41, 42, 44, 46, 47, 51, 98, 105, 112, 115, 117, 118, 125, 126, 127, 129, 138, 139, 143, 146, 149, 150, 151, 152, 153, 154, 158, 166, 170, 174, 179, 180, 181, 186, 218, 220, 264, 267, 274, 286, 287, 320, 323, 339, 343, 345, 348, 350, 364, 370, 371, 397, 423, 425, 432, 434, 435, 439, 440, 442, 457, 459, 467, 487, 488, 489], "decoderregressor": [44, 129, 146, 149, 150, 158, 166, 298, 301], "decompos": [52, 159, 163, 175, 449], "decomposit": [50, 51, 52, 93, 98, 105, 112, 113, 115, 125, 131, 138, 141, 149, 155, 158, 163, 164, 180, 227, 261, 344, 345, 350, 364, 367, 370, 435, 440, 449, 462, 473, 488], "decompositionestim": [305, 306, 447], "decompress": 184, "deconvolv": [101, 115, 165], "decor": [126, 152, 158, 173], "decorrel": 172, "decreas": [55, 67, 96, 115, 172, 173, 211, 419, 433, 434, 435, 442], "ded3a": 41, "dedic": [173, 222], "deem": [124, 158], "deep": [70, 232, 233, 234, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 449], "deephealth": 0, "def": [42, 43, 46, 49, 55, 67, 68, 101, 109, 173, 182, 436, 438, 439], "def_dofmax": 308, "def_tini": 308, "default": [3, 9, 10, 15, 16, 24, 26, 28, 30, 31, 33, 34, 35, 36, 37, 38, 40, 44, 57, 58, 62, 64, 65, 67, 74, 80, 84, 90, 95, 97, 103, 104, 105, 111, 113, 118, 124, 125, 126, 127, 129, 130, 131, 133, 136, 137, 142, 143, 144, 146, 149, 150, 151, 152, 153, 155, 156, 158, 165, 166, 170, 172, 173, 174, 182, 184, 185, 186, 213, 232, 233, 234, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 344, 345, 348, 349, 350, 351, 352, 353, 354, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 467, 471, 472, 473, 486, 488], "default_rng": [7, 65, 173], "defaultmod": 260, "defin": [3, 6, 7, 10, 22, 30, 31, 33, 34, 37, 38, 40, 44, 49, 51, 56, 60, 63, 67, 69, 71, 72, 73, 77, 78, 81, 82, 92, 99, 102, 115, 124, 125, 150, 151, 152, 153, 158, 160, 162, 163, 164, 165, 170, 173, 174, 175, 178, 179, 182, 185, 186, 192, 193, 214, 218, 226, 240, 242, 246, 260, 274, 298, 299, 300, 301, 303, 304, 307, 311, 315, 320, 322, 323, 327, 353, 361, 372, 373, 398, 419, 420, 421, 425, 427, 428, 430, 431, 433, 434, 435, 449, 450, 451, 452, 453, 455, 456, 473, 480], "definit": [56, 64, 92, 95, 126, 158, 160, 168, 169, 172, 173, 174, 175, 179, 183, 202, 219, 223, 247, 360, 365, 366, 368, 369, 371, 372, 422, 452, 453, 455, 456, 473, 489], "deg_of_freedom": 109, "degre": [58, 68, 101, 109, 175, 240, 308, 311, 317, 362, 436, 438, 439], "degree_binar": 240, "degree_weight": 240, "dehaen": [72, 73, 115, 181, 198, 204, 270], "del": [0, 46], "delai": [68, 128, 158, 182, 320, 322, 327], "delcroix": [115, 193, 242], "deleg": [155, 158], "delettr": [0, 146, 158], "delimit": [3, 42, 43, 99, 101, 117, 184], "delin": 22, "deliv": [175, 179], "delta": [65, 174, 327, 426], "demand": 222, "demean": [153, 158, 361, 362], "dement": [115, 222], "dementia": 222, "demian": [0, 115, 122, 143, 158, 202, 247], "demo": [38, 98, 101, 102, 110, 112, 113, 117, 129, 149, 153, 158, 173, 188, 197, 232, 254, 267, 286, 287, 294, 298, 372, 374, 432, 436, 440, 467, 488], "demograph": [115, 192], "demonstr": [15, 40, 41, 42, 58, 64, 66, 95, 106, 129, 154, 158, 164, 165, 226, 384, 486], "den": 323, "denghien": [72, 115, 204], "deni": [72, 73, 115, 165, 198, 204, 270], "denmark": 0, "denois": [110, 362], "denoise_strategi": [58, 127, 158, 362], "denot": [3, 6, 16, 143, 158, 175, 184, 185, 186, 218, 361, 362, 395, 417, 434, 449, 450, 451, 452], "dens": [54, 56, 159, 172, 378], "densiti": [44, 59, 76, 172, 178, 180, 213, 222, 240, 265, 279], "denver": 0, "deoxi": 175, "deoxyhaemoglobin": [175, 179], "depart": [0, 179, 228], "depend": [6, 15, 16, 40, 41, 67, 72, 90, 96, 101, 103, 104, 107, 115, 124, 127, 133, 138, 143, 146, 158, 166, 170, 172, 173, 175, 179, 182, 184, 240, 244, 245, 248, 249, 253, 256, 261, 272, 298, 299, 300, 301, 303, 304, 305, 306, 307, 311, 320, 333, 335, 336, 343, 367, 370, 383, 384, 433, 447, 458, 459, 486], "depict": [57, 173, 185], "deploi": [124, 158], "deploy": 173, "deploy_doc": 182, "deploy_typ": 182, "deprec": [124, 125, 126, 127, 129, 133, 137, 138, 139, 140, 141, 143, 144, 146, 148, 149, 151, 153, 155, 156, 158, 173, 182, 197, 232, 244, 245, 253, 257, 298, 299, 300, 301, 305, 306, 308, 316, 323, 324, 325, 326, 330, 331, 332, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 384, 420, 447, 449, 452, 453, 457], "deprecated_cal": [129, 158], "deprecated_cmap": 13, "deprecationwarn": [129, 158, 242, 244, 245, 251, 253, 317, 364, 365, 366, 367, 368, 369, 370, 371, 449], "dept": 0, "depth": [3, 23, 24, 25, 115, 149, 158, 200, 205, 206, 207, 208, 209, 210, 246, 283, 430, 436, 438, 439, 443, 445, 471], "der": [115, 200, 246], "derek": [0, 146, 158], "deriv": [6, 48, 61, 64, 68, 69, 71, 76, 101, 102, 106, 110, 113, 126, 150, 152, 153, 158, 164, 172, 174, 179, 180, 186, 196, 199, 211, 213, 215, 227, 240, 261, 305, 306, 320, 322, 323, 324, 326, 327, 330, 332, 333, 335, 346, 358, 359, 360, 361, 362, 385, 386, 413, 420, 433, 435, 436, 438, 439, 440, 447, 488], "derivatives_fold": [64, 323], "derived_response_funct": 68, "desc": [101, 102, 110, 323, 361, 362], "descent": [172, 306], "describ": [0, 6, 19, 38, 40, 65, 67, 73, 116, 117, 118, 127, 156, 158, 166, 172, 173, 175, 181, 182, 186, 198, 216, 226, 233, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 270, 271, 315, 318, 321, 323, 327, 335, 362, 384, 423], "descrip": [58, 92, 103], "descript": [6, 24, 27, 41, 44, 45, 60, 76, 111, 116, 118, 124, 126, 127, 128, 149, 153, 158, 173, 182, 184, 185, 196, 204, 216, 225, 228, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 263, 265, 266, 267, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 284, 286, 288, 289, 290, 291, 292, 293, 294, 322, 335, 338, 342, 350, 355, 356, 362, 384, 489], "descriptor": [170, 321, 384], "deserv": [0, 186], "design": [6, 34, 43, 46, 62, 63, 64, 66, 69, 70, 71, 72, 74, 75, 76, 77, 80, 81, 82, 83, 102, 107, 110, 113, 115, 125, 129, 130, 149, 150, 151, 153, 158, 165, 168, 172, 173, 175, 176, 177, 178, 179, 181, 193, 204, 216, 263, 270, 307, 310, 311, 312, 313, 318, 320, 321, 327, 329, 333, 334, 335, 336, 343, 349, 360, 363, 422, 423, 424, 435, 440, 459, 472, 488, 489], "design_column": [64, 318], "design_fil": 72, "design_matric": [63, 64, 71, 72, 101, 174, 320], "design_matrices_": [6, 66, 67, 69, 101], "design_matrix": [6, 43, 63, 64, 65, 66, 67, 69, 71, 76, 77, 78, 79, 80, 81, 82, 110, 321, 327, 333, 334, 335, 363, 422, 423, 424], "design_matrix1": [72, 204, 263], "design_matrix2": [72, 204, 263], "desikan": [115, 211], "desir": [2, 64, 182, 186, 305, 306, 319, 320, 322, 327, 333, 336, 358, 413, 414, 447], "despit": 181, "destin": [427, 428, 434, 435, 442], "destination_path": 459, "destri": 10, "destrieux": [10, 24, 111, 115, 123, 126, 138, 149, 158, 188, 246, 254, 486], "destrieux2009": 10, "destrieux_2009": 10, "destrieux_atla": [10, 23, 24], "destrieux_surfac": [10, 23, 24, 111], "det": [146, 158, 251], "detail": [2, 3, 7, 9, 10, 13, 15, 16, 17, 20, 23, 24, 27, 29, 30, 32, 34, 41, 48, 50, 52, 54, 56, 60, 62, 64, 71, 72, 73, 75, 82, 84, 92, 96, 101, 102, 104, 105, 109, 110, 113, 117, 118, 120, 138, 143, 146, 155, 158, 159, 162, 163, 165, 166, 167, 168, 170, 171, 172, 173, 176, 182, 183, 184, 186, 188, 204, 211, 214, 229, 232, 240, 248, 249, 252, 261, 266, 270, 288, 289, 290, 291, 292, 293, 298, 299, 300, 301, 305, 306, 313, 320, 323, 333, 338, 342, 350, 355, 356, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 384, 426, 443, 446, 447, 449, 451, 472, 473, 478, 479, 486, 487], "details": 50, "detect": [44, 68, 78, 80, 90, 101, 104, 108, 115, 159, 170, 175, 179, 186, 232, 361, 362, 446, 486], "determin": [63, 80, 95, 101, 102, 104, 109, 170, 172, 173, 199, 214, 234, 299, 304, 323, 334, 358, 376, 377, 378, 379, 380, 381, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 427, 428, 430, 434, 435, 442, 446, 471], "determinist": [128, 154, 156, 158, 173, 179, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 446], "detrend": [34, 42, 43, 51, 53, 54, 55, 56, 57, 58, 60, 63, 90, 92, 93, 95, 100, 101, 117, 122, 143, 151, 153, 158, 185, 186, 305, 306, 338, 344, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 420, 447, 449, 461, 462, 473], "detrended_data": 90, "detriment": [44, 362], "dev": [173, 182, 212, 264, 490], "dev85": [472, 473], "develop": [49, 57, 58, 86, 90, 92, 93, 115, 127, 141, 146, 158, 159, 160, 162, 164, 172, 173, 181, 182, 188, 211, 223, 230, 234, 255, 261, 420], "development_dataset": [53, 100], "development_fmri": [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 86, 90, 92, 93, 96, 100, 106], "developmental_fmri": [147, 158], "deviat": [53, 159, 298, 299, 300, 301, 303, 304], "devis": 172, "df": [72, 101, 109], "df_den": [309, 310, 312, 313, 314], "df_model": [307, 311], "df_num": [309, 310, 312, 313], "df_resid": [155, 158], "df_residu": 311, "dhrf": [324, 326, 330, 332], "di": 115, "diag": [65, 185, 424, 432], "diagnosi": [179, 181], "diagnost": [165, 169, 194], "diagon": [55, 56, 58, 60, 87, 136, 158, 172, 185, 232, 236, 238, 239, 352, 353, 415, 424, 432, 450], "diagram": [31, 175], "diamagnet": [175, 179], "diamet": 179, "diamond": 85, "dickerson": [115, 211], "dict": [101, 107, 118, 126, 129, 158, 193, 195, 232, 233, 234, 243, 244, 245, 253, 275, 276, 277, 278, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 316, 320, 323, 329, 333, 335, 338, 359, 360, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 420, 421, 430, 431, 438, 439, 443, 446, 447, 448, 449, 457, 459, 461, 465, 467], "dict_init": [50, 52, 306], "dict_kei": 60, "dict_learn": [50, 52, 163], "dict_learning_onlin": [50, 52], "dictionari": [7, 22, 34, 38, 48, 61, 67, 69, 102, 106, 113, 115, 118, 150, 158, 161, 165, 166, 179, 180, 186, 193, 202, 219, 220, 232, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 286, 298, 299, 300, 301, 305, 306, 320, 333, 335, 345, 346, 359, 360, 364, 368, 369, 384, 395, 397, 417, 418, 419, 420, 421, 430, 432, 433, 435, 440, 443, 449, 465, 466, 467, 488, 489], "dictionary_learning_resting_st": 50, "dictlearn": [50, 52, 125, 131, 141, 158, 163, 164], "dictlearning_components_img": 50, "did": [58, 93, 106, 137, 153, 158, 175], "didact": [3, 136, 158, 166, 168, 173], "didn": 173, "diego": [0, 115, 192], "dieterich": [115, 211], "diff": [155, 158], "differ": [2, 7, 10, 16, 20, 21, 22, 24, 29, 30, 40, 47, 48, 53, 54, 56, 57, 60, 61, 65, 67, 68, 69, 70, 71, 72, 73, 76, 80, 81, 82, 90, 92, 95, 99, 100, 101, 103, 104, 105, 113, 115, 117, 124, 126, 127, 144, 150, 152, 158, 160, 161, 163, 164, 165, 167, 168, 169, 170, 172, 173, 174, 175, 176, 179, 183, 184, 192, 196, 202, 204, 212, 225, 232, 234, 247, 256, 261, 264, 288, 289, 290, 291, 292, 293, 298, 300, 301, 303, 304, 312, 313, 316, 320, 322, 323, 327, 329, 333, 339, 340, 343, 345, 349, 350, 351, 358, 361, 364, 365, 366, 368, 369, 370, 383, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 419, 421, 425, 427, 428, 432, 433, 434, 435, 440, 447, 449, 458, 459, 471, 473, 488, 489], "differenti": [40, 67, 71], "difficult": [40, 87, 159, 166, 171, 186], "difficulti": 35, "diffus": [115, 165, 179], "difumo": [22, 49, 150, 158, 188, 247], "difumo_atlas": [49, 473], "digicosm": 0, "digit": [115, 193], "dil_bin_p_values_and_vt": 95, "dil_bin_p_values_and_vt_img": 95, "dilat": [90, 95, 179, 185, 266, 289, 292, 376, 377, 378, 379, 380, 381], "dillon": [143, 158], "dim": [3, 22, 24, 30, 49, 58, 92, 103, 134, 136, 140, 158, 165, 308, 310, 312, 313, 419, 433, 434, 435, 442], "dim_info": [58, 92, 103], "dimartino": [115, 221], "dimens": [2, 16, 22, 30, 34, 35, 40, 42, 49, 51, 67, 88, 95, 117, 127, 151, 158, 169, 175, 179, 185, 186, 192, 222, 232, 238, 239, 247, 253, 272, 298, 299, 300, 301, 305, 306, 308, 310, 312, 313, 320, 335, 338, 339, 345, 346, 349, 350, 355, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 417, 420, 432, 433, 447, 449, 461, 489], "dimension": [6, 27, 51, 71, 95, 129, 133, 150, 155, 158, 172, 181, 194, 202, 238, 239, 247, 253, 272, 305, 306, 308, 339, 383, 446, 447, 448, 467], "dimitri": [0, 115, 124, 131, 143, 158, 163, 172, 173, 198, 233, 236, 270, 449], "dimitripapadopoulo": 173, "diogo": [0, 155, 158], "dir": [323, 358], "dirac": [320, 322, 327], "direct": [16, 42, 53, 95, 99, 140, 149, 158, 160, 161, 173, 182, 186, 202, 221, 228, 247, 298, 299, 320, 333, 355, 357, 358, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 401, 403, 404, 405, 407, 408, 409, 410, 411, 414, 415, 419, 421, 425, 427, 428, 431, 433, 434, 435, 450, 459, 486, 489], "directli": [3, 6, 33, 34, 40, 49, 50, 53, 69, 72, 87, 90, 111, 129, 135, 139, 141, 143, 158, 162, 165, 168, 173, 175, 184, 186, 275, 323, 384, 398, 433], "directori": [3, 6, 64, 72, 95, 102, 110, 113, 162, 173, 184, 233, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 294, 297, 298, 299, 300, 301, 303, 304, 305, 306, 320, 323, 333, 339, 358, 360, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 429, 447, 448, 449], "disabl": [118, 126, 127, 144, 146, 150, 158, 172, 446], "disadvantag": 186, "discard": [6, 118, 175, 239, 275, 297, 323, 358, 378, 381, 461, 471], "discard_diagon": [232, 238], "discount": 67, "discourag": 173, "discov": [2, 173, 180], "discoveri": [6, 77, 78, 80, 82, 115, 175, 179, 181, 221, 315], "discrep": [67, 172], "discret": [67, 71, 124, 150, 151, 158, 196, 320, 329, 348, 361, 365, 366, 367, 368, 369, 370, 371, 372, 461], "discrete_atlas_img": 12, "discrete_vers": 12, "discrimin": [3, 30, 32, 53, 95, 100, 115, 117, 165, 180, 181], "discriminant_analysi": 99, "discuss": [51, 58, 143, 158, 162, 165, 168, 170, 175, 178, 182, 185, 362, 384, 487], "diseas": 222, "disk": [2, 3, 4, 6, 102, 105, 109, 110, 117, 118, 124, 129, 143, 149, 150, 155, 158, 165, 173, 184, 185, 186, 215, 257, 267, 275, 277, 280, 298, 299, 320, 333, 375, 436, 438, 439, 457, 459, 463, 464, 468], "disord": [115, 179, 181, 211], "dispers": [6, 67, 68, 174, 310, 312, 313, 320, 322, 324, 327, 330], "displac": [58, 196, 261, 361], "displai": [2, 3, 4, 6, 11, 12, 14, 17, 18, 19, 21, 22, 26, 27, 31, 37, 41, 42, 44, 45, 49, 50, 51, 52, 53, 57, 63, 64, 66, 67, 68, 69, 70, 71, 72, 76, 81, 82, 85, 87, 88, 89, 90, 92, 93, 94, 95, 99, 100, 101, 104, 107, 108, 124, 127, 128, 129, 135, 140, 141, 143, 144, 146, 150, 151, 153, 155, 158, 160, 163, 164, 170, 175, 180, 185, 320, 327, 333, 366, 369, 371, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 449, 457, 459, 473, 489], "display_mod": [2, 6, 10, 14, 15, 16, 19, 31, 32, 37, 41, 42, 44, 45, 50, 51, 55, 60, 64, 66, 67, 70, 71, 76, 77, 80, 88, 89, 93, 102, 104, 107, 108, 109, 117, 136, 153, 158, 320, 333, 360, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 419, 421, 425, 427, 428, 431, 433, 434, 435, 459, 486], "displayed_map": [56, 366, 369, 449], "displayed_spher": [60, 371], "disregard": [299, 304], "dist": 182, "distanc": [34, 303, 304, 320, 333, 415, 458, 459, 471, 472], "distinct": [81, 101, 115, 172, 192, 246], "distinguish": [53, 95, 99, 100, 166, 170, 175, 180, 184], "distort": [155, 158, 361], "distribut": [3, 6, 15, 16, 23, 32, 33, 39, 50, 51, 57, 80, 95, 99, 115, 150, 154, 158, 165, 170, 172, 175, 179, 200, 205, 206, 207, 208, 209, 212, 220, 254, 264, 308, 335, 384, 429], "dive": 181, "diverg": [15, 424], "divid": [57, 77, 78, 80, 136, 158, 166, 175, 179, 238, 447], "divis": [0, 92, 226], "dl": [115, 213], "dm_titl": 101, "dmn": [21, 53, 63, 472], "dmn_contrast": 63, "dmn_coord": [60, 186, 486], "dmn_network": 88, "dmn_node": 21, "dmn_z_map": 63, "dni": 218, "do": [0, 3, 6, 10, 23, 24, 25, 26, 31, 32, 34, 35, 38, 40, 42, 44, 51, 52, 53, 59, 63, 66, 67, 68, 70, 76, 78, 80, 81, 95, 99, 101, 102, 103, 110, 111, 117, 128, 130, 140, 144, 149, 153, 158, 159, 163, 164, 165, 166, 168, 170, 172, 181, 182, 184, 185, 186, 193, 232, 234, 242, 266, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 329, 333, 335, 338, 350, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 379, 381, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 447, 461, 471, 486], "do_cca": 305, "doc": [2, 3, 4, 10, 11, 12, 15, 16, 17, 19, 21, 22, 30, 31, 33, 35, 37, 41, 42, 44, 45, 49, 50, 51, 52, 54, 56, 59, 60, 63, 65, 71, 72, 76, 78, 79, 80, 87, 88, 89, 93, 104, 105, 106, 107, 108, 110, 111, 124, 125, 126, 127, 128, 129, 130, 131, 136, 138, 139, 143, 146, 148, 149, 152, 153, 154, 155, 158, 173, 211, 214], "dock": [0, 126, 127, 129, 136, 140, 142, 143, 144, 146, 147, 155, 158], "docstr": [124, 125, 129, 144, 149, 152, 155, 158, 173, 182, 310, 312, 313], "doctest": [126, 158], "doctre": 173, "document": [0, 2, 3, 4, 20, 27, 45, 46, 51, 52, 54, 55, 58, 60, 99, 101, 105, 109, 116, 117, 120, 122, 125, 127, 128, 131, 133, 135, 136, 137, 138, 143, 146, 148, 153, 154, 158, 160, 162, 163, 164, 165, 166, 167, 168, 170, 171, 177, 180, 181, 184, 186, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 486, 487], "doe": [3, 6, 30, 40, 51, 67, 68, 76, 104, 117, 118, 128, 133, 142, 146, 155, 158, 165, 166, 170, 172, 173, 174, 175, 181, 186, 242, 264, 309, 311, 314, 323, 344, 356, 358, 360, 380, 388, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 446, 462, 486], "doesn": [105, 173], "dof": [175, 308, 317], "dofmax": 308, "dohmatob": [0, 51, 115, 119, 122, 131, 133, 136, 158, 162, 163, 171, 449], "doi": [0, 3, 23, 32, 33, 38, 39, 42, 43, 46, 50, 51, 53, 58, 60, 71, 77, 99, 100, 104, 115, 118, 159, 160, 162, 164, 166, 167, 170, 171, 179, 181, 191, 192, 193, 195, 196, 198, 199, 200, 202, 203, 205, 206, 207, 208, 209, 211, 212, 213, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 240, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 262, 264, 270, 274, 275, 277, 280, 283, 300, 301, 305, 306, 315, 335, 338, 361, 362, 384, 420, 448, 454, 461, 462], "domain": [40, 181, 306], "domin": [165, 284], "don": [10, 25, 34, 67, 82, 118, 127, 158, 173, 181, 182, 275, 277, 430, 471, 486], "donald": 115, "donder": 0, "done": [2, 3, 4, 6, 7, 10, 11, 18, 20, 22, 27, 32, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55, 59, 60, 66, 67, 71, 72, 73, 77, 78, 80, 81, 82, 95, 99, 100, 102, 103, 104, 105, 107, 117, 118, 153, 155, 158, 159, 160, 162, 165, 166, 168, 170, 172, 175, 182, 185, 233, 234, 298, 299, 300, 301, 303, 304, 305, 306, 320, 333, 338, 339, 347, 357, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 447, 448, 449, 461], "dor": 53, "dorsal": [24, 111, 436, 438, 439, 473], "dorsalattent": 260, "dosenbach": [115, 134, 158, 188, 226, 240, 258, 260], "dot": [43, 46, 57, 101, 105, 172, 310, 311, 312, 313, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "doubl": [173, 174, 248, 249], "dougla": [115, 312, 313], "down": [2, 70, 105, 162, 172, 173, 300], "downlo": 22, "download": [4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 115, 116, 133, 134, 136, 137, 139, 143, 146, 149, 150, 152, 158, 159, 160, 162, 165, 173, 181, 188, 192, 201, 202, 213, 215, 218, 219, 221, 222, 226, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 294, 297, 489], "download_new": [275, 277], "downloaded_fil": [215, 257, 267, 280], "downsampl": [110, 163, 185, 201, 261, 420], "downsid": [58, 67], "downsiz": 162, "downstream": [103, 126, 158], "dparsf": 240, "dpi": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "dr": 222, "draft": 173, "drag": 182, "draw": [15, 16, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 423, 471], "draw_2d": [385, 387, 388], "draw_cross": [78, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 425, 428, 433, 434, 435, 442], "draw_left_right": [385, 387, 388], "draw_posit": [385, 387, 388], "draw_scale_bar": [385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "drawback": 67, "drawn": [25, 67, 95, 320, 333, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 425, 428, 433, 434, 435, 442, 459, 471], "drf": 68, "drift": [6, 69, 70, 71, 101, 196, 320, 327, 361, 424, 461], "drift_model": [6, 34, 65, 67, 70, 71, 110, 174, 320, 323, 327, 472], "drift_ord": [65, 67, 174, 320, 323, 327], "drive": 57, "driven": [67, 164, 173, 181, 196, 244, 327], "drop": [67, 70, 101, 129, 138, 139, 140, 144, 158, 173, 181, 182], "ds000005": 217, "ds000030": [64, 262], "ds000030_r1": [64, 280], "ds000228": [201, 261], "dseg": [173, 242, 244, 246, 248, 249, 251, 252, 254, 255], "dsm_iv_tr": 240, "dsp": 204, "dsp_minus_ssp": [72, 472], "dsp_minus_ssp_for_dst": [72, 472], "dsst": 0, "dst": 204, "dst_minus_sst": [72, 472], "dst_minus_sst_for_dsp": [72, 472], "dstdsp": 204, "dstdsp_minus_sstssp": [72, 472], "dstssp": 204, "dt": 68, "dtseri": [361, 362], "dtype": [3, 12, 21, 34, 37, 42, 43, 46, 50, 51, 52, 54, 55, 56, 58, 60, 68, 78, 80, 87, 90, 92, 93, 95, 102, 105, 137, 138, 139, 143, 144, 158, 184, 321, 324, 325, 326, 330, 331, 332, 337, 339, 347, 348, 351, 353, 365, 366, 367, 368, 369, 370, 371, 375, 446, 448, 455, 473], "dtyulman": [143, 158], "dua": 222, "dual": [35, 53, 55, 99, 100, 115, 172, 233, 240, 298, 300], "dual_regress": 240, "dualiti": 236, "duan": [115, 221], "dubi": [60, 115, 203, 258], "dubnica": 0, "duchi": [115, 172], "due": [12, 15, 35, 37, 41, 67, 71, 80, 87, 95, 124, 128, 146, 152, 153, 154, 155, 156, 158, 162, 166, 168, 173, 175, 240, 303, 304, 486], "duff": [115, 192], "dugr\u00e9": [0, 126, 158], "duke": 0, "dummi": [3, 100, 111, 151, 158, 165, 166, 168, 173, 298, 299, 300, 301, 327], "dummy_classifi": [3, 33, 298, 300], "dummy_decod": 3, "dummy_output_": [298, 299, 300, 301], "dummy_regressor": [166, 299, 301], "dummyclassifi": [99, 100, 151, 158, 168, 298, 299, 300, 301], "dummyregressor": [298, 299, 300, 301], "duplic": [146, 158, 197], "dupr": [0, 140, 144, 146, 147, 148, 158], "duran": [0, 124, 158], "durat": [6, 34, 65, 67, 68, 73, 126, 158, 174, 175, 184, 322, 327, 426], "dure": [3, 6, 57, 58, 66, 95, 101, 102, 115, 117, 127, 143, 150, 158, 165, 166, 172, 173, 175, 179, 181, 182, 186, 215, 216, 227, 234, 236, 240, 253, 333, 335, 376, 377, 378, 379, 380, 381, 430, 446], "dutch": 0, "dvar": [58, 361], "dvipng": 182, "dviwar": 182, "dwi": 64, "dwindl": 172, "dx_group": 240, "dylan": [38, 115, 170, 221], "dynam": [30, 115, 165, 362], "e": [3, 6, 16, 23, 25, 30, 41, 42, 46, 49, 50, 58, 60, 67, 77, 89, 93, 95, 101, 104, 105, 107, 115, 117, 118, 125, 131, 149, 151, 152, 155, 158, 159, 160, 163, 165, 168, 170, 171, 172, 173, 174, 175, 178, 179, 181, 182, 185, 186, 192, 196, 199, 200, 202, 203, 211, 220, 224, 226, 227, 232, 233, 234, 236, 245, 246, 253, 258, 259, 260, 262, 275, 277, 280, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 312, 313, 320, 327, 333, 335, 336, 337, 338, 339, 340, 342, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 421, 430, 433, 436, 437, 438, 439, 441, 442, 443, 445, 446, 447, 448, 449, 452, 453, 455, 461, 471, 486], "e15ebc98c2f13c57d7605faf05fe3de3": 22, "e29482": [115, 181], "e_i": [312, 313], "each": [2, 3, 6, 7, 15, 16, 19, 21, 22, 23, 24, 25, 30, 31, 35, 37, 38, 40, 41, 42, 44, 45, 49, 50, 51, 52, 53, 57, 58, 60, 63, 64, 65, 70, 71, 72, 79, 81, 87, 88, 89, 95, 99, 100, 101, 102, 104, 107, 108, 110, 111, 118, 138, 143, 144, 146, 149, 151, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 177, 179, 181, 182, 184, 185, 186, 192, 193, 196, 198, 201, 202, 211, 214, 217, 220, 225, 226, 228, 232, 233, 234, 236, 240, 243, 254, 260, 261, 272, 275, 277, 284, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 312, 313, 320, 322, 323, 327, 333, 335, 338, 344, 350, 355, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 379, 381, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 419, 421, 425, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 446, 447, 448, 449, 450, 451, 452, 453, 455, 459, 461, 462, 463, 470, 471, 486], "each_index_of_map3": [52, 163], "earli": [41, 115, 171, 275, 277, 446], "earlier": [2, 16, 19, 31, 37, 42, 44, 45, 50, 88, 104, 108], "early_stop": [172, 234], "earlystopprob": 172, "eas": 173, "easi": [17, 63, 69, 76, 95, 117, 118, 163, 164, 166, 169, 173, 174, 179, 181, 186, 361, 489], "easier": [6, 24, 40, 67, 132, 137, 152, 158, 164, 165, 172, 173, 428], "easiest": [160, 165, 166], "easili": [2, 3, 10, 16, 24, 31, 32, 40, 41, 51, 60, 64, 95, 117, 118, 129, 153, 158, 165, 166, 168, 170, 171, 172, 173, 174, 179, 182, 248, 249, 270, 333, 335], "ec": 51, "eccentr": [448, 454], "echo": [179, 323], "econom": [115, 384], "econometr": [115, 307, 311, 312, 313], "econometricanalysi": [115, 307, 311], "ecosystem": 180, "ed": [115, 160, 312, 313], "edg": [16, 49, 54, 56, 60, 95, 146, 158, 159, 160, 179, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 421, 432, 441, 489], "edge_cmap": [144, 146, 158, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 441], "edge_kwarg": [389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421], "edge_threshold": [23, 49, 52, 55, 56, 60, 144, 146, 158, 163, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 441, 486], "edge_vmax": [55, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421], "edge_vmin": [55, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421], "edgecolor": [33, 42, 126, 158, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 421, 425, 427, 428, 431, 433, 434, 435], "edinburgh": 115, "edit": [115, 151, 158, 173, 182, 307, 311], "editor": [115, 159, 213, 232], "edmond": [0, 151, 158], "edu": [115, 222, 226, 231, 256, 279, 307, 311], "educ": [115, 222, 228, 272, 307, 311, 442], "edward": [115, 181], "ee9e0d5a40146477e9197f0d13da9b32": 39, "eeg": 179, "eff_map": 6, "effect": [51, 55, 63, 67, 69, 70, 71, 76, 80, 81, 90, 96, 101, 104, 115, 126, 127, 142, 158, 164, 166, 170, 172, 174, 175, 186, 211, 232, 233, 234, 248, 249, 276, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 313, 314, 316, 317, 320, 323, 333, 335, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 384, 419, 433, 434, 435, 440, 442, 446, 447, 448, 449, 457], "effect_s": [6, 72, 81, 101, 179, 308, 320, 333], "effect_statmap": [64, 76, 360], "effect_vari": [72, 81, 308, 320, 333], "effects_map_path": [333, 335], "effects_of_interest": [71, 72, 472], "effficieni": 65, "efficaci": [58, 115, 362], "effici": [30, 67, 115, 126, 158, 164, 166, 172, 173, 233, 236, 275, 300, 301], "effort": [173, 182], "eg": [87, 90, 140, 143, 149, 158, 159, 160, 165, 185, 186, 416, 417, 457], "eger": [46, 51, 115, 171], "eichel": [115, 195, 243], "eickenberg": [0, 115, 119, 158, 171], "eickhoff": [58, 115, 225, 227, 252, 253, 361, 362], "eigen": [27, 192, 272], "eigen_regress": [27, 272], "eigenvector": 240, "eigenvector_binar": 240, "eigenvector_weight": 240, "eileen": [115, 211], "either": [2, 4, 10, 36, 37, 41, 42, 43, 44, 49, 53, 54, 55, 56, 57, 58, 60, 63, 70, 90, 92, 93, 95, 99, 100, 101, 104, 105, 106, 107, 108, 117, 143, 150, 152, 158, 160, 162, 173, 174, 178, 179, 184, 186, 196, 253, 256, 264, 298, 299, 300, 301, 310, 312, 313, 320, 333, 336, 337, 366, 368, 369, 370, 372, 373, 374, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 419, 420, 421, 424, 425, 426, 427, 428, 430, 432, 433, 434, 435, 436, 437, 438, 439, 442, 443, 445, 447, 449, 459, 469, 470, 471, 486, 487], "ej": [115, 192], "ekman": [0, 119, 158], "elabor": [43, 131, 158, 486], "elaps": [32, 36, 37, 38, 44, 45, 46, 50, 52, 55, 59, 60, 99, 104, 107], "elapsed_tim": 46, "elast": 46, "elasticnetcv": 46, "electr": 179, "electroencephalographi": 179, "electrophysiolog": [71, 115], "element": [21, 50, 51, 52, 103, 136, 155, 158, 164, 170, 179, 232, 238, 239, 242, 298, 299, 300, 301, 302, 338, 355, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 380, 398, 430, 449, 455, 461, 471], "elementari": 117, "elena": [115, 195, 243], "elev": [23, 398, 436, 438, 439], "elicit": [65, 73, 80], "elif": [10, 111], "elimin": [46, 99, 168, 171, 433, 434], "elizabeth": [0, 115, 140, 144, 146, 147, 148, 158, 312, 313], "ell": [307, 311], "elli": [0, 155, 158], "elliott": [38, 58, 115, 361, 362], "els": [46, 49, 68, 71, 72, 73, 95, 101, 111, 273, 298, 299, 300, 301, 303, 304, 437], "elvi": [0, 51, 115, 119, 122, 131, 133, 136, 158, 162, 163, 171, 449], "emb": 486, "embed": [53, 100, 457], "emerg": 173, "emerton": 0, "emiliano": [115, 196], "emit": 440, "emma": [115, 192], "emot": 179, "emp_cov": 236, "emphas": [199, 245], "empir": [51, 162, 169, 170, 171, 172, 233, 236, 362, 489], "emploi": [64, 178, 179, 212, 458, 459], "empti": [15, 104, 110, 118, 126, 128, 129, 146, 154, 158, 173, 182, 193, 248, 249, 264, 298, 299, 300, 301, 358, 368, 369, 418, 432, 452, 453, 465, 466], "empty_filt": 275, "en": [0, 58, 175, 193, 218, 242, 362, 365], "enabl": [15, 80, 106, 126, 127, 149, 153, 158, 165, 168, 180, 186, 361, 389, 390, 391, 392, 393, 394, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 487], "enable_metadata_rout": [232, 233, 234, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 449], "encapsul": [67, 232, 233, 234, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 449], "enclos": 173, "encod": [29, 40, 43, 47, 71, 76, 85, 113, 115, 166, 167, 186, 274, 300, 301, 340, 357, 364, 367, 370, 412, 435, 440, 473, 488], "encompass": 239, "encount": [60, 78, 80, 111, 436, 438, 439], "encourag": [153, 158, 173], "end": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 127, 140, 150, 158, 170, 172, 173, 185, 196, 285, 359, 360, 460, 461], "endian": [58, 92, 103, 139, 158, 347, 353], "endswith": 13, "energi": [172, 196], "enet_cv": 46, "enforc": [51, 90, 155, 158, 159, 172, 173, 303, 304, 320], "engag": 487, "engemann": [115, 165], "engin": [0, 10, 126, 128, 153, 158, 181, 186, 398, 436, 438, 439, 486, 487], "enh": 173, "enhanc": [24, 67, 68, 72, 115, 179, 182, 188, 284, 294, 308, 335, 384], "enough": [15, 60, 165, 172, 181, 186, 353], "ensembl": [3, 32, 41, 44, 115, 165, 166, 169, 171, 179, 180, 213, 300, 301, 489], "ensur": [2, 16, 19, 31, 37, 42, 44, 45, 50, 58, 60, 88, 101, 104, 108, 111, 128, 130, 143, 150, 156, 158, 170, 172, 173, 175, 182, 280, 308, 333, 335, 368, 385, 387, 388, 452], "ensure_finit": [78, 80, 138, 158, 338, 375, 378, 461], "ensure_ndim": 339, "enter": 175, "entir": [165, 170, 186, 368, 452], "entiti": [126, 158], "entri": [85, 124, 126, 158, 173, 182, 298, 299, 300, 301, 310, 312, 313, 342, 398, 437, 471], "enumer": [3, 13, 23, 24, 35, 42, 49, 50, 53, 59, 66, 67, 68, 69, 71, 72, 73, 80, 95, 101, 102, 104, 105, 107, 110, 111], "env": 182, "environ": [37, 51, 54, 55, 60, 64, 76, 78, 115, 127, 143, 144, 146, 153, 158, 165, 181, 182, 184, 196, 285, 442, 487], "ep": [41, 303, 304], "epi": [3, 6, 12, 16, 26, 31, 32, 93, 95, 96, 106, 179, 181, 185, 186, 228, 298, 299, 300, 301, 305, 306, 367, 370, 378, 425, 428, 435, 447, 473, 486], "epi_filenam": [90, 186], "epi_img": [66, 67, 69, 90, 186, 216, 271, 378, 381, 425], "epoch": [67, 306], "equal": [78, 99, 105, 146, 153, 155, 158, 168, 177, 196, 245, 250, 256, 298, 299, 300, 301, 303, 304, 305, 306, 308, 320, 333, 350, 353, 357, 367, 370, 376, 378, 379, 381, 442, 443, 445, 447], "equip": 228, "equival": [15, 82, 107, 124, 158, 170, 172, 175, 182, 199, 270, 298, 299, 300, 301, 305, 306, 349, 365, 366, 367, 368, 369, 370, 372, 376, 377, 378, 379, 380, 381, 440, 447], "erhardt": [115, 195, 243], "eric": [0, 23, 60, 115, 128, 140, 143, 144, 146, 158, 200, 203, 246, 254, 258], "erik": [115, 195, 243], "erin": [115, 191, 240], "eros": [90, 179, 266, 289, 292, 376, 377, 378, 379, 380, 381], "erramuzp": [143, 158], "errant": [128, 158], "erron": [149, 158, 252], "error": [3, 6, 44, 45, 67, 77, 80, 82, 85, 95, 105, 124, 126, 129, 130, 133, 140, 143, 146, 155, 158, 160, 165, 166, 170, 173, 175, 179, 232, 233, 234, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 312, 320, 327, 333, 335, 336, 338, 339, 360, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 380, 446, 447, 448, 449, 487], "errorts_statmap": [64, 76, 360], "especi": [95, 144, 153, 158, 159, 165, 184, 443, 489], "esposito": [101, 115], "essen": [115, 118, 192, 220, 275, 277, 362], "essenc": 174, "essenti": [16, 40, 68, 81, 179], "establish": [95, 171, 173, 226], "esteban": [0, 143, 158], "estim": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 65, 66, 68, 70, 71, 72, 73, 76, 79, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117, 124, 126, 127, 141, 149, 150, 155, 158, 159, 164, 167, 169, 170, 175, 177, 178, 179, 181, 182, 192, 196, 222, 225, 231, 232, 233, 234, 236, 252, 256, 272, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 316, 317, 320, 333, 335, 339, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 432, 440, 446, 447, 448, 449, 480, 488, 489], "estimator_nam": 40, "est\u00e8v": [0, 119, 120, 122, 123, 131, 133, 136, 158], "eswar": [115, 195, 243], "et": [3, 23, 29, 32, 38, 40, 46, 47, 50, 51, 53, 58, 60, 67, 71, 72, 73, 77, 99, 100, 101, 104, 113, 118, 138, 143, 158, 159, 162, 165, 166, 167, 170, 171, 172, 181, 186, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 236, 240, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 264, 270, 272, 273, 274, 275, 277, 283, 298, 301, 304, 305, 306, 312, 313, 315, 338, 340, 345, 357, 361, 362, 364, 367, 370, 384, 412, 435, 440, 448, 449, 454, 461, 473, 488], "etard": [115, 193, 242], "etc": [7, 40, 44, 45, 81, 90, 93, 95, 103, 118, 171, 179, 184, 272, 298, 299, 300, 301, 303, 304, 312, 370, 473], "ethic": 192, "etzel": [115, 170], "eugen": [115, 192], "eux2009": 10, "eva": [115, 221], "eval": [320, 333, 335, 422], "evalu": [58, 115, 168, 172, 179, 199, 228, 230, 255, 298, 299, 300, 301, 307, 311, 362, 458, 459], "evan": [0, 115, 151, 158, 193, 196, 213, 225, 230, 244, 252, 255], "evanston": 0, "evelina": [115, 200, 246], "evelyn": [46, 51, 115, 171], "even": [32, 44, 51, 52, 60, 66, 80, 101, 118, 126, 129, 130, 146, 151, 158, 172, 173, 181, 275, 277, 460], "evenli": [172, 338, 461], "event": [6, 40, 62, 64, 65, 66, 67, 68, 69, 70, 71, 74, 101, 102, 110, 113, 115, 126, 129, 130, 149, 150, 158, 165, 175, 176, 216, 228, 271, 281, 320, 321, 322, 323, 327, 423, 426, 440, 487, 488, 489], "events_": 34, "events_df": 101, "events_fil": [66, 67], "eventu": [57, 486], "everi": [111, 118, 159, 160, 164, 165, 166, 170, 172, 173, 175, 182, 186, 234, 248, 249, 275, 366, 369, 398, 419, 425, 428, 433, 434, 435, 437, 452, 453, 459, 487], "everyon": [173, 192], "everyth": [101, 182], "everywher": 171, "evid": [115, 196], "ew": [115, 195, 243], "ex": [153, 158, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 425, 427, 428, 430, 434, 435, 436, 438, 439], "exact": [44, 170, 173, 175, 213, 265, 266, 288, 289, 290, 291, 292, 293, 486], "exactli": [6, 85, 95, 99, 127, 158, 172, 173, 298, 299, 300, 301, 302, 358, 442, 471], "examin": [3, 115, 179, 262, 280], "exampl": [1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 70, 71, 73, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 111, 112, 114, 116, 117, 125, 126, 127, 128, 131, 136, 137, 138, 139, 140, 143, 144, 146, 148, 149, 152, 153, 154, 156, 163, 166, 167, 168, 169, 172, 173, 174, 175, 177, 178, 182, 184, 193, 229, 240, 257, 303, 310, 312, 313, 329, 337, 358, 373, 446, 448, 475, 476, 478, 483, 487, 488, 489], "exce": 60, "exceed": [58, 140, 158], "excel": 35, "except": [5, 24, 40, 51, 73, 100, 101, 105, 150, 153, 158, 171, 173, 193, 299, 304, 348, 384], "excerpt": 186, "excess": [196, 361], "exchang": [104, 106, 191, 240], "exclud": [67, 118, 450], "exclude_this_vertex": 24, "exclude_zero": [129, 158, 378, 381], "excluded_label": 24, "exclus": [297, 303, 304], "exclusion_filt": [64, 297], "exclusion_pattern": 64, "exec": 182, "execut": [8, 22, 28, 47, 61, 74, 83, 88, 97, 112, 113, 114, 173, 186, 353, 436, 438, 439, 486, 487, 488], "executor": 45, "exemplarili": 57, "exercis": [4, 181], "exhaust": [173, 181], "exhibit": [50, 175, 186], "exist": [4, 21, 50, 104, 163, 170, 173, 185, 226, 232, 233, 234, 275, 277, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 347, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 432, 446, 447, 448, 449, 486], "exist_ok": [3, 4, 6, 7, 16, 24, 30, 34, 43, 50, 51, 57, 63, 64, 72, 73, 76, 87, 95], "existenti": 7, "exp": 46, "exp_condit": [68, 322], "expand": [130, 135, 158, 179, 184, 348, 446, 448], "expans": [183, 489], "expect": [6, 63, 65, 67, 79, 80, 82, 96, 102, 107, 108, 118, 131, 146, 155, 158, 163, 170, 173, 175, 179, 182, 185, 186, 299, 304, 320, 322, 327, 333, 335, 339, 358], "expens": 45, "experi": [3, 6, 30, 34, 35, 43, 67, 70, 72, 95, 115, 116, 169, 174, 175, 179, 204, 228, 489], "experiment": [3, 65, 66, 67, 69, 71, 72, 81, 95, 124, 126, 129, 149, 150, 153, 158, 165, 172, 175, 185, 202, 204, 229, 247, 320, 323, 327, 436, 438, 439], "experimental_paradigm": [126, 158], "expert": [173, 181], "explain": [6, 7, 42, 44, 50, 58, 67, 70, 130, 149, 158, 162, 165, 173, 175, 181, 186, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471], "explan": [35, 85, 104, 165, 166, 167, 168, 173, 184, 186, 194, 241], "explanatori": [335, 384], "explicit": [12, 50, 73, 146, 152, 158, 173, 179, 181, 277, 336, 362, 372, 373, 374, 461], "explicitli": [67, 103, 109, 127, 129, 143, 155, 158, 165, 173, 275, 360, 362, 447], "exploit": [64, 164, 172], "explor": [164, 168, 172, 174, 180, 181, 228, 234, 262, 275, 298, 299, 300, 301], "exploratori": 67, "export": [73, 182, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439], "expos": [46, 51, 118, 126, 127, 135, 139, 140, 158, 173, 184, 275, 276, 277, 278], "express": [118, 124, 131, 158, 179, 184, 275, 303, 304, 318, 320, 323, 348, 433], "ext_var": [44, 45, 76, 78, 80, 107, 222, 279], "extend": [23, 95, 126, 129, 149, 154, 158, 175, 186, 226, 353], "extens": [16, 138, 152, 158, 191, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439], "extent": [58, 92, 96, 103, 179, 397, 400], "extern": [45, 166, 169, 222], "extmath": [50, 52], "extra": [79, 118, 167, 182, 183, 240, 360, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 424, 425, 426, 427, 428, 432, 433, 434, 435, 437, 467, 486, 489], "extra_info_subject": 79, "extract": [4, 6, 10, 11, 20, 22, 23, 27, 29, 31, 32, 33, 39, 40, 41, 42, 45, 47, 48, 50, 51, 61, 62, 64, 66, 71, 73, 74, 84, 87, 93, 95, 97, 99, 101, 102, 103, 106, 111, 113, 118, 123, 124, 125, 127, 129, 130, 131, 138, 139, 141, 142, 143, 144, 150, 154, 155, 158, 161, 162, 165, 168, 176, 179, 181, 182, 183, 192, 195, 202, 222, 232, 241, 247, 248, 250, 253, 258, 259, 261, 264, 272, 276, 298, 299, 300, 301, 302, 305, 306, 320, 327, 333, 334, 335, 344, 345, 347, 350, 357, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 379, 381, 397, 416, 417, 418, 419, 421, 431, 432, 433, 435, 440, 441, 443, 447, 449, 450, 451, 452, 453, 455, 457, 459, 462, 471, 472, 473, 482, 486, 488, 489], "extract_typ": 451, "extractor": [52, 88, 163, 449], "extrapol": [127, 158, 353, 461], "extrem": [57, 122, 158, 458], "extremum": 193, "ey": [25, 43, 46, 66, 67, 69, 71, 72, 81, 85, 90, 115, 173, 181, 213, 265], "eye_mask": [213, 265], "ez": 240, "f": [2, 3, 4, 7, 10, 11, 12, 16, 17, 19, 22, 23, 24, 26, 30, 31, 32, 33, 34, 35, 36, 38, 40, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 67, 71, 72, 73, 76, 78, 79, 80, 81, 82, 86, 87, 89, 90, 92, 93, 94, 95, 96, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 126, 127, 158, 159, 163, 165, 168, 170, 171, 174, 192, 193, 203, 213, 226, 227, 242, 253, 258, 260, 262, 280, 298, 299, 300, 301, 308, 309, 310, 312, 313, 316, 320, 321, 333, 353, 354, 360, 361, 362, 375, 383, 452, 455], "f1": [43, 165, 298, 300], "f1_score": 43, "f1_score_to_print": 43, "f_classif": [36, 37, 40, 43, 95, 99, 168], "f_re": [310, 312, 313], "f_regress": [46, 104, 107, 108, 111], "f_score": [37, 169, 489], "f_score_img": 37, "fa": 165, "fabian": [0, 115, 119, 158, 219, 250], "face": [7, 19, 23, 24, 29, 33, 34, 39, 40, 47, 71, 95, 98, 99, 101, 112, 113, 115, 117, 125, 127, 138, 151, 158, 165, 170, 174, 179, 180, 184, 185, 186, 212, 213, 229, 264, 265, 282, 298, 300, 302, 343, 345, 348, 350, 351, 364, 370, 384, 398, 412, 428, 432, 435, 436, 437, 438, 439, 440, 442, 445, 463, 464, 468, 470, 471, 488], "face_mask": [213, 265], "facebook": 0, "facecolor": [19, 33, 42, 44, 108, 126, 158, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 421, 425, 427, 428, 431, 433, 434, 435], "facilit": [126, 129, 158, 181, 182, 186, 202], "fact": [172, 175, 179], "factor": [68, 70, 101, 106, 115, 140, 158, 167, 179, 196, 202, 204, 310, 312, 313, 322, 324, 325, 326, 327, 330, 331, 332, 336, 419, 433, 434, 435, 442], "faculti": 0, "fail": [35, 105, 124, 125, 127, 129, 146, 155, 158, 172, 173, 275, 277, 449], "failur": [105, 138, 158, 173, 378], "fair": [0, 60, 115, 164, 203, 258], "fairli": [46, 166, 175], "fake": 173, "falff": 240, "fall": [155, 158, 173, 430, 471], "fals": [2, 6, 10, 15, 16, 19, 21, 22, 23, 24, 34, 35, 37, 38, 42, 43, 44, 50, 51, 54, 56, 58, 59, 60, 64, 70, 73, 76, 78, 80, 81, 82, 87, 88, 89, 90, 92, 93, 95, 100, 101, 102, 104, 105, 108, 109, 110, 111, 118, 126, 146, 149, 150, 151, 153, 155, 158, 170, 174, 175, 179, 186, 222, 232, 233, 234, 236, 238, 240, 248, 249, 261, 264, 270, 273, 275, 277, 298, 299, 300, 301, 302, 303, 304, 305, 306, 317, 320, 323, 333, 335, 336, 337, 338, 339, 342, 350, 351, 352, 353, 354, 357, 358, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 419, 421, 422, 425, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 443, 445, 446, 447, 448, 449, 450, 452, 453, 455, 456, 458, 459, 460, 461, 472, 473, 486], "famili": [6, 82, 104, 124, 125, 140, 155, 158, 170, 173, 179, 335, 384, 449, 451], "familiar": [67, 173, 181], "fanci": 99, "far": [67, 172, 353, 359], "faraon": [115, 211], "farther": 398, "fashion": [196, 213], "fast": [3, 32, 41, 50, 51, 66, 67, 73, 101, 115, 146, 149, 158, 162, 164, 165, 166, 169, 172, 173, 179, 180, 198, 216, 270, 277, 300, 301, 306, 355, 447, 448, 454, 489], "fast_abs_percentil": [131, 158], "fast_ica": 105, "fast_svd": [138, 158], "faster": [40, 50, 51, 106, 140, 158, 171, 172, 173, 275, 306, 353, 354, 383, 427, 428, 434, 435, 442, 471], "fastest": 172, "fastica": [52, 93, 105, 106, 305], "faulti": [146, 158], "favor": [155, 158], "fc": 19, "fcon_1000": [194, 221, 241], "fcontrast": [310, 312, 313], "fcontrastresult": [310, 312, 313], "fd_threshold": [58, 127, 158, 361, 362], "fdr": [6, 76, 78, 82, 178, 179, 319, 320, 333, 336, 459, 472], "feasibl": 172, "feat": [64, 177], "featur": [30, 33, 34, 35, 36, 44, 46, 51, 53, 65, 67, 95, 100, 105, 106, 111, 115, 117, 129, 141, 143, 144, 149, 153, 166, 167, 168, 169, 170, 171, 172, 173, 181, 182, 186, 233, 234, 236, 298, 299, 300, 301, 302, 303, 304, 305, 308, 383, 446, 448, 449, 451, 461, 462, 473, 483, 484, 487, 489], "feature_select": [36, 37, 40, 43, 44, 46, 95, 99, 104, 107, 108, 111, 168], "feature_selector": 40, "februari": [46, 115, 119, 120, 125, 133, 134, 138, 148, 158, 171, 181], "feczko": [60, 115, 203, 258], "federico": [115, 196], "feedback": [143, 158, 173, 182], "feel": [143, 158, 173], "feldstein": [115, 195, 243], "femal": [211, 240], "fenna": [115, 225, 231, 252, 256], "fetch": [3, 4, 10, 15, 20, 25, 30, 31, 33, 35, 36, 37, 38, 40, 43, 60, 69, 71, 86, 87, 88, 89, 92, 95, 103, 105, 118, 125, 127, 129, 137, 138, 140, 142, 146, 158, 161, 164, 173, 183, 192, 222, 240, 242, 247, 253, 261, 262, 265, 268, 269, 270, 273, 275, 276, 277, 278, 281, 283, 286, 287, 294, 489], "fetch_abide_pcp": [127, 154, 158, 191], "fetch_adhd": [12, 63, 103, 133, 158, 194], "fetch_atlas_a": [129, 135, 154, 158, 193], "fetch_atlas_allen_2011": [22, 138, 158, 195], "fetch_atlas_basc_multiscale_2015": [20, 125, 126, 134, 158, 196], "fetch_atlas_craddock_2012": [125, 126, 158, 160, 199], "fetch_atlas_destrieux_2009": [10, 160, 200], "fetch_atlas_difumo": [22, 49, 150, 158, 202], "fetch_atlas_harvard_oxford": [11, 22, 58, 92, 133, 154, 158, 160, 173, 211, 249, 450], "fetch_atlas_juelich": [11, 152, 154, 158, 214, 248], "fetch_atlas_msdl": [21, 22, 53, 54, 55, 56, 100, 135, 158, 160, 219], "fetch_atlas_pauli_2017": [22, 143, 146, 158, 223], "fetch_atlas_schaefer_2018": [144, 146, 158, 225], "fetch_atlas_smith_2009": [2, 22, 88, 125, 126, 158, 227], "fetch_atlas_surf_destrieux": [10, 23, 24, 111, 126, 138, 158, 486], "fetch_atlas_talairach": [140, 158, 230], "fetch_atlas_yeo_2011": [49, 87, 160, 231], "fetch_bids_langloc_dataset": [127, 158], "fetch_cobr": [134, 138, 149, 153, 158], "fetch_coords_dosenbach_2010": [60, 134, 137, 158, 203], "fetch_coords_power_2011": [60, 224], "fetch_coords_seitzman_2018": [144, 158, 226], "fetch_development_fmri": [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 86, 90, 92, 93, 96, 100, 106, 146, 158, 159, 160, 162, 163, 181, 186, 201], "fetch_ds000030_url": [64, 155, 158, 280], "fetch_fiac_first_level": [72, 204], "fetch_fil": 173, "fetch_haxbi": [3, 4, 16, 17, 19, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 95, 99, 104, 117, 137, 158, 165, 173, 184, 212], "fetch_icbm152_2009": [12, 22, 76, 213, 266, 291], "fetch_icbm152_brain_gm_mask": [67, 76, 136, 158, 213, 265], "fetch_language_localizer_demo_dataset": [101, 102, 110, 127, 158, 174, 197, 215, 257], "fetch_localizer_button_task": [18, 129, 136, 158, 269, 270, 486], "fetch_localizer_calculation_task": [82, 108, 129, 158, 268, 270], "fetch_localizer_contrast": [77, 78, 80, 81, 107, 129, 136, 158, 198, 268, 269], "fetch_localizer_first_level": [66, 67, 69, 216], "fetch_megatrawls_netmat": [27, 192], "fetch_mixed_gambl": [41, 154, 158, 217], "fetch_miyawaki2008": [42, 43, 90, 218], "fetch_neurosynth_word": [105, 118, 275, 277], "fetch_neurovault": [105, 109, 118, 139, 146, 150, 158, 276, 277, 278], "fetch_neurovault_auditory_computation_task": [89, 143, 158, 278], "fetch_neurovault_id": [109, 118, 139, 158, 275, 276, 278], "fetch_neurovault_motor_task": [2, 15, 143, 158, 276, 486], "fetch_nyu_rest": [148, 151, 158], "fetch_oasis_vbm": [44, 45, 76, 222], "fetch_openneuro_dataset": 64, "fetch_openneuro_dataset_index": [155, 158], "fetch_single_fil": [2, 4, 6, 10, 11, 18, 20, 22, 27, 39, 41, 50, 55, 66, 71, 77, 78, 80, 81, 82, 100, 102, 103], "fetch_spm_auditori": [6, 70, 228], "fetch_spm_multimodal_fmri": [71, 174, 229], "fetch_stimuli": [39, 264], "fetch_surf_fsaverag": [125, 143, 149, 151, 155, 158, 174, 205, 206, 207, 208, 209, 254, 430, 436, 437, 438, 439, 443, 471, 486], "fetch_surf_fsaverage5": [138, 143, 158], "fetch_surf_nki_enhanc": [138, 146, 158, 221], "fetcher": [31, 33, 126, 127, 133, 134, 135, 138, 143, 146, 147, 150, 152, 153, 154, 155, 156, 158, 174, 222, 242, 257, 261, 282], "few": [2, 15, 16, 26, 40, 41, 42, 51, 78, 82, 92, 103, 104, 141, 142, 158, 164, 166, 169, 171, 173, 174, 182, 185, 447, 471, 489], "fewer": [127, 158, 172, 420], "fh": [2, 16, 19, 31, 37, 42, 44, 45, 50, 88, 104, 108], "fiac": [72, 188, 263, 483], "fiac_nilearn": 72, "field": [12, 46, 103, 118, 146, 158, 175, 179, 184, 275, 298, 299, 300, 301, 305, 306, 321, 323, 353, 358, 359, 367, 370, 447, 470], "fifth": [103, 115, 266, 307, 311], "fig": [10, 12, 19, 25, 39, 40, 42, 43, 51, 59, 63, 65, 66, 68, 73, 76, 79, 80, 92, 101, 102, 107, 110, 111, 430, 436, 486], "fig1": 70, "fig2": 70, "fig_kwarg": 426, "fight": 186, "figshar": [20, 244], "figsiz": [6, 12, 13, 16, 19, 26, 31, 35, 36, 40, 42, 44, 46, 50, 53, 59, 63, 64, 65, 66, 67, 68, 73, 76, 79, 80, 92, 95, 100, 101, 102, 107, 108, 111, 185, 432], "figur": [2, 4, 6, 10, 13, 15, 16, 19, 23, 24, 25, 26, 31, 33, 35, 36, 37, 42, 43, 44, 45, 46, 50, 51, 53, 54, 57, 58, 59, 60, 63, 64, 66, 67, 68, 70, 76, 80, 85, 92, 95, 100, 101, 102, 107, 108, 111, 126, 129, 140, 149, 150, 153, 154, 155, 158, 173, 174, 175, 185, 360, 366, 368, 369, 370, 372, 373, 374, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 486], "fil": [6, 71, 228, 229, 281, 282], "filbei": [115, 195, 243], "file": [3, 6, 7, 8, 10, 15, 20, 23, 24, 28, 34, 42, 47, 49, 50, 51, 53, 55, 57, 61, 62, 63, 64, 67, 72, 74, 76, 83, 86, 87, 92, 93, 95, 97, 101, 102, 105, 109, 110, 112, 113, 114, 115, 117, 118, 126, 129, 131, 133, 138, 142, 143, 144, 145, 146, 149, 153, 154, 155, 158, 159, 160, 162, 163, 165, 173, 174, 182, 183, 186, 193, 194, 195, 196, 201, 202, 204, 205, 206, 207, 208, 209, 210, 212, 215, 216, 218, 219, 222, 223, 229, 231, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 294, 296, 298, 299, 305, 306, 320, 323, 327, 333, 338, 348, 349, 351, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 447, 449, 457, 459, 461, 463, 464, 467, 468, 469, 470, 471, 472, 473, 487, 488, 489], "file_basenam": 359, "file_field": 359, "file_list": 296, "file_nam": [39, 457], "file_path": [359, 463], "file_tag": [358, 359], "file_typ": [358, 359], "filemesh": [23, 24], "filenam": [2, 3, 4, 11, 16, 52, 57, 63, 95, 117, 127, 136, 146, 153, 154, 158, 160, 163, 164, 173, 184, 185, 248, 249, 280, 296, 298, 299, 300, 301, 303, 304, 348, 360, 364, 367, 370, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 433, 463, 464, 465, 466, 468], "filename_pattern": 173, "filesystem": [155, 158], "filippini": [115, 192, 227, 253], "fill": [16, 22, 64, 68, 95, 102, 110, 138, 146, 152, 158, 172, 186, 196, 353, 354, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 433, 434, 457, 489], "fill_diagon": [56, 58], "fill_doc": [152, 158], "fill_valu": [353, 354], "fillard": [115, 159, 232], "filled_contour": [22, 52, 163, 433], "filter": [53, 57, 58, 60, 67, 68, 95, 105, 116, 117, 122, 124, 125, 143, 146, 151, 153, 155, 158, 165, 179, 183, 185, 222, 240, 275, 277, 297, 298, 299, 300, 301, 303, 304, 305, 306, 320, 323, 338, 355, 357, 358, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 447, 449, 460, 461, 489], "filter_and_extract": [51, 54, 55, 56, 58, 60], "filter_and_mask": 34, "filter_arg": 50, "filtered_img": 355, "filtered_sign": 460, "filterwarn": 3, "filtfilt": 460, "final": [3, 4, 6, 15, 16, 31, 43, 50, 55, 57, 58, 59, 65, 69, 85, 94, 95, 101, 151, 158, 159, 166, 172, 173, 174, 181, 182, 185, 186, 196, 211, 234, 333, 358, 365, 366, 368, 369, 486], "find": [4, 31, 33, 46, 52, 58, 71, 80, 101, 122, 158, 163, 164, 165, 167, 169, 172, 173, 175, 179, 182, 186, 196, 220, 229, 236, 244, 340, 378, 379, 381, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 418, 419, 442, 446, 448, 454, 486, 487, 489], "find_cut_coord": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "find_cut_slic": [131, 138, 158], "find_parcellation_cut_coord": [49, 60, 143, 153, 158, 160, 417, 421], "find_probabilistic_atlas_cut_coord": [49, 52, 55, 143, 158, 160, 163, 416, 421], "find_xyz_cut_coord": [52, 88, 133, 140, 158, 163], "fine": [10, 90, 115, 137, 158, 160, 186, 202, 247, 302, 305, 306, 361, 367, 370, 447, 486], "finer": [10, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "finish": [32, 36, 37, 38, 44, 45, 46, 50, 51, 52, 55, 59, 60, 99, 104, 107, 126, 158, 172, 173, 337, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 433, 441, 443, 445], "finit": [62, 74, 78, 80, 105, 113, 139, 158, 174, 179, 271, 320, 322, 327, 338, 355, 375, 378, 419, 422, 423, 434, 435, 461, 488], "fino": [77, 115, 315], "fir": [62, 65, 74, 113, 128, 158, 174, 179, 271, 320, 322, 327, 422, 423, 435, 488], "fir_delai": [64, 65, 66, 320, 322, 323, 327], "first": [2, 6, 7, 12, 15, 17, 19, 21, 26, 31, 33, 34, 36, 40, 42, 44, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 65, 66, 70, 72, 74, 76, 78, 81, 82, 85, 87, 90, 92, 93, 94, 95, 96, 98, 106, 107, 111, 112, 115, 117, 118, 119, 125, 127, 129, 143, 144, 146, 149, 151, 153, 154, 158, 159, 160, 162, 163, 164, 166, 168, 169, 172, 173, 175, 176, 177, 178, 182, 183, 184, 185, 188, 196, 234, 236, 262, 263, 266, 267, 271, 272, 275, 277, 280, 286, 287, 297, 298, 299, 300, 301, 305, 306, 320, 323, 333, 335, 339, 344, 345, 354, 355, 358, 360, 361, 363, 366, 369, 370, 371, 380, 384, 422, 423, 427, 429, 434, 435, 436, 437, 438, 439, 440, 445, 446, 447, 449, 457, 458, 459, 461, 467, 473, 483, 488, 489], "first_epi_fil": 96, "first_level": [6, 34, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 79, 101, 102, 110, 126, 130, 151, 153, 155, 158, 174, 426, 459], "first_level_contrast": [102, 153, 158, 333, 335], "first_level_from_bid": [64, 101, 102, 110, 125, 126, 127, 129, 158, 426], "first_level_glm": 110, "first_level_model": [63, 66, 67], "first_pipelin": 99, "first_plot": 51, "first_roi_data": 95, "first_roi_img": 95, "first_rsn": 2, "first_three_imag": 345, "firstlevelmodel": [6, 63, 66, 67, 69, 70, 71, 72, 101, 110, 129, 130, 151, 153, 155, 158, 174, 323, 333, 335, 360, 459], "firstlevelmodelifittedfirstlevelmodel": 64, "firstlevemodel": 67, "firstli": 58, "fischl": [23, 115, 200, 205, 206, 207, 208, 209, 211, 225, 231, 246, 252, 254, 256, 283], "fisher": [99, 115, 308], "fistlevelmodel": 174, "fit": [3, 6, 24, 29, 31, 33, 36, 37, 38, 40, 42, 43, 44, 46, 47, 50, 51, 52, 53, 54, 55, 56, 59, 60, 62, 63, 65, 66, 67, 69, 71, 74, 76, 77, 78, 80, 81, 82, 88, 90, 92, 93, 95, 99, 100, 101, 105, 110, 111, 113, 117, 126, 127, 129, 130, 143, 151, 153, 155, 158, 159, 161, 162, 163, 165, 166, 168, 170, 172, 173, 175, 176, 177, 179, 180, 181, 186, 232, 233, 234, 256, 263, 264, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 317, 320, 323, 329, 333, 335, 345, 350, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 380, 384, 397, 400, 422, 435, 440, 446, 447, 448, 449, 452, 457, 459, 472, 473, 488, 489], "fit_intercept": [303, 304], "fit_param": [302, 305, 306, 320, 333, 364, 367, 370, 446, 448], "fit_predict": [446, 448], "fit_transform": [36, 37, 40, 44, 49, 51, 52, 53, 54, 56, 57, 58, 60, 63, 70, 90, 93, 99, 100, 101, 104, 105, 106, 107, 108, 111, 117, 126, 130, 158, 160, 163, 174, 186, 232, 302, 305, 306, 320, 333, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 449], "fitted_pipelin": 99, "fitter": [126, 158], "five": [58, 67, 447], "five_mni_imag": 345, "fix": [17, 31, 50, 60, 71, 93, 103, 121, 172, 173, 182, 185, 307, 308, 311, 317, 320, 323], "fixed_fx_contrast": 72, "fixed_fx_contrast_img": 317, "fixed_fx_stat": 72, "fixed_fx_stat_img": 317, "fixed_fx_vari": 72, "fixed_fx_variance_img": 317, "fixed_fx_z_score_img": 317, "fixur": 173, "fl": 0, "flag": [129, 158, 174, 361, 362], "flake8": [129, 133, 155, 158], "flash": 67, "flat": [24, 43, 125, 158, 185, 205, 206, 207, 208, 209, 210, 283, 286, 287, 294], "flat_left": [205, 206, 207, 208, 209, 210, 283], "flat_right": [205, 206, 207, 208, 209, 210, 283], "flatiron": 0, "flatten": [25, 42, 43, 70, 115, 200, 232, 238, 239, 286], "flavor": [2, 196], "fletcher": [115, 191, 240], "flexibl": [66, 132, 158], "flexibli": 58, "fliem": 221, "flip": [17, 105, 137, 158, 196, 244], "flirt": 211, "flm": 472, "flm_object": [155, 158], "float": [3, 42, 43, 45, 50, 52, 68, 76, 128, 146, 149, 158, 233, 234, 236, 240, 266, 284, 288, 289, 292, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 319, 320, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 335, 336, 337, 338, 342, 344, 353, 354, 357, 361, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 418, 419, 420, 421, 425, 427, 428, 430, 431, 433, 434, 435, 436, 438, 439, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 454, 457, 458, 459, 460, 461, 462, 471], "float32": [12, 34, 85, 103, 186, 339, 348, 365, 366, 367, 368, 369, 370, 371], "float64": [78, 129, 158], "flore": [115, 159, 232], "florent": [0, 115, 128, 158, 200, 211, 246], "florida": 0, "flow": [151, 158, 175, 179], "fluctuat": [50, 67, 172, 175, 179, 240], "fluenci": 78, "fluid": [12, 58, 213, 265, 361], "fmr": 50, "fmri": [1, 8, 16, 26, 30, 31, 32, 33, 34, 37, 40, 42, 43, 46, 48, 57, 58, 61, 62, 63, 64, 65, 67, 70, 71, 73, 74, 75, 82, 83, 86, 90, 92, 95, 98, 101, 102, 103, 104, 110, 112, 113, 115, 117, 118, 129, 134, 141, 146, 158, 162, 163, 164, 166, 168, 171, 172, 174, 177, 178, 179, 180, 181, 184, 185, 186, 188, 194, 195, 196, 199, 202, 203, 212, 215, 218, 220, 221, 226, 244, 245, 247, 253, 258, 261, 263, 264, 270, 271, 281, 298, 302, 305, 306, 315, 317, 320, 329, 333, 335, 336, 338, 343, 345, 346, 349, 350, 361, 362, 364, 370, 378, 381, 384, 396, 404, 411, 419, 420, 422, 423, 425, 427, 428, 433, 434, 435, 440, 442, 447, 449, 457, 458, 461, 462, 472, 474, 488, 489], "fmri_compress": 51, "fmri_data": [42, 95, 320, 333], "fmri_fil": 101, "fmri_filenam": [3, 37, 38, 58, 95, 99, 117], "fmri_glm": [6, 70, 71, 72, 174], "fmri_glm_multirun": 72, "fmri_glm_run_1": 72, "fmri_glm_run_2": 72, "fmri_img": [6, 35, 37, 38, 40, 66, 67, 70, 71, 72, 95, 110, 174], "fmri_img_surf": 38, "fmri_mask": [37, 93, 99, 104, 107, 108, 117], "fmri_niimg": [3, 31, 35, 99, 165], "fmri_niimgs_condit": 31, "fmri_niimgs_test": 3, "fmri_niimgs_train": 3, "fmri_random_runs_filenam": 42, "fmri_reduc": 51, "fmri_reduced_rena": 51, "fmri_run": [34, 42], "fmrib": [2, 22, 176, 211, 214, 227, 253, 489], "fmriprep": [64, 67, 110, 126, 127, 129, 153, 155, 158, 160, 164, 175, 179, 186, 213, 261, 265, 266, 288, 289, 290, 291, 292, 293, 323], "fmt": 73, "fnhum": [115, 191, 240], "fnin": [51, 115, 162, 221], "fninf": [115, 118, 220, 275, 277], "fnsy": [115, 195, 243], "focu": [15, 80, 160, 162, 172, 449], "focus": [62, 75, 99, 113, 117, 135, 141, 158, 159, 166, 169, 170, 173], "fold": [3, 30, 32, 35, 37, 42, 53, 69, 95, 99, 100, 165, 166, 168, 170, 172, 186, 234, 298, 299, 300, 301, 302, 303, 304], "folder": [64, 95, 102, 110, 153, 158, 173, 182, 184, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 294, 323, 348, 358], "follow": [2, 4, 7, 10, 15, 19, 22, 23, 24, 30, 35, 36, 37, 38, 42, 43, 44, 49, 50, 51, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 70, 73, 90, 92, 93, 95, 99, 100, 101, 103, 104, 105, 106, 107, 108, 111, 113, 117, 118, 129, 140, 143, 144, 145, 146, 147, 148, 152, 158, 159, 160, 163, 164, 170, 173, 174, 175, 177, 179, 181, 182, 184, 196, 204, 216, 222, 283, 285, 286, 287, 294, 338, 344, 357, 358, 360, 361, 362, 366, 369, 371, 376, 377, 378, 379, 380, 381, 443, 449, 461, 462, 486, 487], "fonov": [115, 196, 213], "font": [385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 436, 438, 439], "fontproperti": [385, 387, 388], "fontsiz": [13, 26, 42, 51, 65, 79, 81, 107, 144, 146, 158, 185, 385, 387, 388, 441, 443, 444, 445], "footbibliographi": [151, 153, 155, 158], "footcit": [151, 153, 155, 158], "footer": [129, 158], "forc": [2, 95, 133, 158, 172, 173, 186, 196, 244, 253, 275, 277], "force_resampl": [54, 67, 71, 76, 85, 94, 129, 158, 353, 354], "ford": [115, 195, 243], "foreground": [89, 163], "forget": [95, 173], "fork": 173, "form": [6, 7, 34, 42, 46, 51, 73, 107, 127, 158, 159, 160, 162, 163, 175, 179, 184, 211, 232, 233, 234, 280, 298, 299, 300, 301, 302, 303, 304, 305, 306, 315, 320, 323, 327, 333, 335, 336, 358, 359, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 384, 429, 442, 446, 447, 448, 449, 458, 459], "formal": [6, 228], "format": [2, 40, 51, 57, 101, 117, 125, 126, 150, 153, 155, 158, 173, 174, 186, 196, 200, 202, 232, 240, 242, 244, 246, 248, 249, 251, 252, 254, 255, 302, 305, 306, 320, 333, 357, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 425, 427, 428, 430, 434, 435, 436, 437, 438, 439, 444, 445, 446, 447, 448, 449, 469, 470, 471, 477], "formatstrformatt": 50, "formatt": [129, 158], "former": [166, 172, 275, 427, 430, 435, 439], "formerli": [92, 143, 158], "formula": [2, 129, 134, 158, 172, 333, 335, 349, 422], "fornito": [58, 115, 160, 362], "forschungszentrum": 0, "fortran": [172, 353, 354, 383, 384], "fortun": [3, 68], "forum": 173, "forward": [115, 230, 255], "foucault": [143, 158], "found": [3, 6, 10, 11, 12, 16, 17, 19, 20, 21, 22, 23, 24, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 64, 65, 67, 69, 70, 72, 73, 76, 77, 78, 80, 81, 82, 86, 87, 88, 89, 90, 92, 93, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 117, 118, 143, 158, 159, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 181, 182, 185, 186, 196, 220, 222, 275, 277, 279, 338, 340, 358, 375, 378, 419, 434, 435, 461, 486], "four": [7, 42, 46, 67, 153, 158, 186, 231], "fourth": [82, 85, 151, 158, 320, 335, 345, 346, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 417, 449, 461], "fox": [115, 227, 230, 253, 255, 362], "fpr": [6, 34, 82, 178, 179, 320, 333, 336, 459, 472], "fr": [0, 4, 10, 11, 27, 41, 103, 193, 198, 219, 242, 250], "frac": [175, 299, 304, 307, 311], "frackowiak": [115, 338, 461], "fraction": [240, 320, 323, 378, 379, 381, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 471], "frame": [34, 65, 90, 186, 196, 322, 345, 361, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 457], "frame_ax": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "frame_tim": [34, 65, 68, 71, 174, 321, 322, 327], "frameon": [35, 385, 387, 388], "frames_tim": 327, "frametim": 63, "framewis": [58, 261, 361], "framework": [68, 159, 261], "fran": [60, 115, 224, 259], "franc": [0, 173], "francesca": [115, 195, 243], "francisco": [115, 221], "franz": [0, 57, 144, 146, 148, 158], "fran\u00e7oi": [0, 126, 158], "frau": [0, 131, 158], "frazier": [115, 211], "free": [0, 115, 166, 173, 175, 179, 335, 384], "freedman": [115, 384], "freedom": [58, 101, 109, 160, 175, 308, 311, 317, 362], "freeli": 228, "freesurf": [10, 23, 69, 110, 138, 143, 155, 158, 174, 200, 205, 206, 207, 208, 209, 214, 254, 283, 287, 398, 436, 437, 438, 439, 445, 463, 469, 470, 471], "freimer": [115, 262, 280], "freita": [115, 230, 255], "frem": [3, 29, 47, 113, 115, 125, 149, 158, 165, 166, 169, 171, 179, 180, 264, 273, 300, 301, 304, 345, 350, 432, 435, 440, 488, 489], "fremclassifi": [32, 129, 149, 150, 158, 166, 167, 298, 301], "fremregressor": [32, 41, 129, 149, 150, 158, 166, 167, 299, 300], "french": 0, "frequenc": [6, 67, 122, 158, 186, 240, 298, 299, 300, 301, 303, 304, 305, 306, 320, 327, 338, 361, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 447, 449, 460, 461], "frequent": 175, "frequentist": 175, "frequentist_infer": 175, "fri": [115, 195, 243], "friedman": [115, 159], "friendli": [124, 158, 487], "frisoni": [115, 192], "friston": [115, 228, 338, 461], "frith": [115, 338, 461], "fritsch": [0, 119, 158], "frmi_fil": 160, "from": [0, 4, 6, 7, 8, 9, 10, 11, 13, 14, 15, 18, 19, 20, 21, 22, 24, 26, 28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 53, 54, 55, 56, 57, 59, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 94, 96, 97, 98, 100, 102, 104, 105, 106, 109, 110, 111, 112, 114, 115, 116, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 136, 139, 140, 143, 144, 146, 151, 152, 153, 155, 156, 158, 159, 161, 162, 163, 164, 165, 166, 168, 170, 171, 172, 173, 174, 175, 179, 180, 181, 182, 183, 188, 191, 192, 193, 194, 195, 196, 199, 201, 202, 203, 204, 211, 212, 213, 214, 216, 218, 220, 225, 226, 227, 232, 233, 234, 236, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 260, 261, 262, 264, 266, 268, 269, 270, 272, 274, 275, 276, 277, 278, 279, 280, 284, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 317, 319, 320, 323, 327, 333, 334, 335, 337, 338, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 419, 420, 422, 424, 425, 426, 427, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 467, 471, 472, 473, 479, 481, 486, 487, 488, 489], "from_volum": [10, 38, 69, 110, 467], "fromkei": 101, "fromnumer": [3, 17, 30], "front": [307, 310], "frontal": [71, 92, 115, 170, 419, 425, 427, 428, 434, 435], "frontier": [51, 115, 118, 162, 191, 195, 202, 220, 221, 240, 243, 275, 277], "frontiersin": 195, "fronto": [60, 102], "frontopariet": 260, "frouin": [115, 198, 270], "frustrat": 173, "fsaverag": [10, 23, 24, 25, 38, 64, 69, 110, 111, 125, 126, 129, 143, 151, 158, 188, 206, 207, 208, 209, 210, 283, 286, 287, 294, 430, 443, 471, 486], "fsaverage3": [151, 158, 188, 283, 286, 287, 294, 443], "fsaverage4": [151, 158, 188, 283, 286, 287, 294, 443], "fsaverage5": [10, 23, 24, 25, 69, 110, 111, 129, 138, 143, 158, 188, 200, 221, 254, 283, 284, 286, 287, 294, 323, 430, 443, 471], "fsaverage5_spher": [155, 158], "fsaverage6": [151, 158, 188, 283, 286, 287, 294, 443], "fsaverage7": [283, 286, 287, 294, 443], "fsaverage_data": [38, 69, 110], "fsaverage_mesh": [10, 23, 24], "fsaverage_sulc": [10, 23, 24, 111], "fsavg": 467, "fsl": [11, 12, 37, 58, 64, 80, 87, 92, 95, 130, 152, 153, 155, 158, 176, 184, 211, 214, 248, 249, 349, 489], "fsl3": [58, 92], "fsl_design_matrix_path": [64, 363], "fsl_z_map": 64, "fslmath": 349, "fslview": 185, "fswiki": [231, 256], "ftp": [194, 241], "fulcher": [58, 115, 362], "full": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 122, 124, 127, 158, 162, 163, 164, 166, 168, 170, 172, 173, 174, 179, 185, 186, 192, 201, 212, 248, 249, 261, 272, 298, 299, 300, 301, 305, 306, 307, 310, 311, 312, 313, 320, 333, 335, 355, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 424, 432, 447, 449, 451, 457], "full_brain_info": [126, 158], "full_coef": 99, "full_correl": 272, "fullbrain": 264, "fulli": [115, 172, 175, 196, 487], "fun": 52, "func": [3, 6, 10, 12, 16, 17, 19, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 66, 67, 70, 72, 86, 90, 92, 93, 95, 96, 99, 100, 101, 102, 103, 104, 106, 110, 117, 127, 151, 158, 163, 173, 174, 184, 186, 194, 198, 201, 212, 218, 228, 241, 261, 264, 267, 274, 281, 358, 361, 362], "func1": [71, 72, 204, 229, 263, 282], "func2": [71, 72, 204, 229, 263, 282], "func_fil": 53, "func_filenam": [19, 26, 31, 32, 33, 34, 36, 50, 52, 55, 57, 60, 92, 93, 104, 106, 163, 185], "func_img": [30, 165], "func_left": [221, 284], "func_mask": 240, "func_mean": 240, "func_preproc": [154, 158, 240], "func_reduc": 104, "func_right": [221, 284], "function": [2, 3, 4, 6, 7, 9, 10, 12, 14, 15, 16, 18, 19, 22, 23, 26, 27, 28, 30, 31, 33, 35, 36, 37, 40, 50, 51, 54, 55, 57, 58, 60, 61, 62, 65, 66, 67, 69, 71, 72, 73, 74, 75, 86, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 104, 106, 110, 112, 115, 117, 118, 120, 122, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 162, 165, 166, 169, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 191, 192, 193, 194, 196, 198, 199, 201, 202, 204, 215, 219, 220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 469, 470, 471, 473, 476, 487, 488, 489], "functool": 50, "fundament": 179, "furei": [3, 32, 33, 39, 99, 115, 212, 264], "furo": [124, 155, 158], "further": [0, 15, 16, 24, 40, 57, 67, 70, 85, 95, 116, 159, 167, 169, 172, 182, 184, 188, 196, 226, 275, 320, 333, 361, 398, 478, 479, 486, 489], "furthermor": [6, 40, 44, 57], "fusifor": 473, "fusiform": [92, 170], "futur": [0, 2, 6, 16, 19, 31, 37, 42, 44, 45, 50, 88, 104, 108, 129, 137, 143, 149, 155, 158, 172, 179, 184, 186, 308, 457], "fwe": [107, 384], "fwer": [78, 82, 178, 179, 335], "fwhm": [4, 67, 95, 96, 105, 107, 140, 146, 158, 179, 181, 185, 186, 355], "g": [0, 6, 10, 15, 23, 25, 31, 32, 42, 44, 45, 49, 50, 57, 63, 68, 93, 95, 100, 101, 107, 115, 125, 151, 155, 158, 160, 170, 172, 173, 174, 175, 178, 179, 181, 185, 186, 192, 193, 199, 202, 222, 230, 232, 233, 234, 245, 255, 298, 299, 300, 301, 302, 303, 304, 305, 306, 312, 313, 320, 327, 333, 337, 340, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 421, 430, 433, 436, 437, 438, 439, 441, 442, 443, 445, 446, 447, 448, 449, 452, 453, 455, 471, 486], "g004": 195, "g68bf10490": [472, 473], "g_and_s_cingul": 473, "g_and_s_frontomargin": 473, "g_and_s_occipital_inf": 473, "g_and_s_paracentr": 473, "g_and_s_subcentr": 473, "g_and_s_transv_frontopol": 473, "g_cingul": [24, 473], "g_cuneu": 473, "g_front_inf": 473, "g_front_middl": 473, "g_front_sup": 473, "g_ins_lg_and_s_cent_in": 473, "g_insular_short": 473, "g_oc": 473, "g_occipital_middl": 473, "g_occipital_sup": 473, "g_orbit": 473, "g_pariet_inf": 473, "g_parietal_sup": 473, "g_postcentr": [10, 473], "g_precentr": [10, 473], "g_precuneu": 473, "g_rectu": 473, "g_subcallos": 473, "g_t_transv": 473, "g_temp_sup": 473, "g_temporal_inf": 473, "g_temporal_middl": 473, "ga": [46, 115, 165, 171, 181], "gabriel": [115, 118, 220, 275, 277], "gael": [0, 50, 51, 115, 118, 119, 120, 122, 123, 131, 133, 136, 140, 143, 144, 145, 146, 148, 158, 159, 163, 164, 219, 220, 232, 233, 250, 275, 277, 305, 306, 448, 449, 454], "gagan": [60, 115, 203, 224, 258, 259], "gain": [41, 67, 167, 172, 217, 273], "gale": [0, 143, 146, 158], "gallant": [115, 166], "galleri": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 126, 131, 133, 137, 138, 140, 158, 173, 486, 488], "gambl": [29, 47, 113, 169, 171, 188, 273, 301, 304, 435, 488, 489], "gamma": [68, 155, 158, 174], "ganel": [71, 115], "ganglia": 226, "gap": [55, 233, 236], "gather": [95, 173, 175], "gatsbi": 0, "gau": [0, 125, 126, 127, 128, 129, 130, 156, 158], "gaussian": [6, 46, 80, 95, 115, 159, 172, 175, 186, 187, 196, 233, 236, 355], "gaussian_filt": 46, "gazzalei": [101, 115], "ga\u00ebl": [51, 53, 58, 100, 115, 159, 160, 162, 167, 202, 219, 247, 250, 300, 301, 305], "gca": [50, 53, 100], "gcf": 42, "gee": 115, "gender": [201, 222, 261], "gener": [0, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 65, 66, 67, 68, 69, 70, 71, 74, 75, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 117, 124, 126, 127, 128, 129, 143, 144, 146, 148, 149, 151, 153, 158, 165, 166, 168, 170, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 186, 196, 199, 213, 218, 226, 244, 245, 270, 280, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 312, 313, 320, 327, 333, 335, 336, 337, 338, 343, 349, 350, 360, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 374, 382, 384, 426, 430, 435, 436, 437, 438, 439, 440, 446, 447, 449, 457, 461, 472, 473, 477, 486, 487, 488], "generate_group_sparse_gaussian_graph": [59, 172], "generate_report": [56, 60, 72, 90, 92, 93, 110, 126, 127, 153, 158, 186, 320, 333, 360, 365, 366, 367, 368, 369, 370, 371, 372, 374, 449], "genet": [115, 211], "geneva": 0, "genfromtxt": 165, "genom": 0, "gensollen": [0, 127, 150, 151, 152, 153, 154, 155, 158], "gentl": 181, "geoffrei": [115, 312, 313], "geometr": [159, 232], "geometri": [7, 69, 115, 179, 349, 430, 436, 437, 438, 439, 445, 470, 471], "geomspac": 40, "gerard": [104, 115, 384], "geriant": 228, "geriatr": 0, "gerloff": [0, 125, 158], "germani": [0, 115, 171], "germnai": 0, "gervai": [0, 119, 158], "get": [3, 4, 6, 10, 15, 22, 23, 24, 34, 36, 42, 43, 53, 54, 58, 60, 64, 67, 68, 69, 71, 76, 79, 82, 87, 89, 101, 102, 106, 109, 110, 111, 118, 138, 143, 158, 160, 163, 164, 165, 170, 172, 174, 177, 178, 180, 186, 193, 232, 233, 234, 248, 249, 277, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 312, 313, 320, 333, 335, 343, 348, 352, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 384, 385, 387, 388, 415, 446, 447, 448, 449, 457, 463, 487], "get_affin": [137, 158, 184, 340], "get_anat": 270, "get_bids_fil": [153, 158], "get_clusters_t": [6, 64, 70, 125, 150, 154, 155, 158], "get_cmap": 13, "get_data": [31, 37, 44, 49, 51, 78, 80, 85, 95, 104, 107, 108, 109, 138, 146, 158, 184, 348], "get_data_dir": [2, 4, 136, 158, 184, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 294], "get_dataset_dir": [2, 3, 4, 6, 10, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 64, 66, 67, 69, 70, 71, 72, 76, 77, 78, 80, 81, 82, 86, 87, 88, 89, 90, 92, 93, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 173], "get_design_from_fslmat": [64, 153, 158], "get_fdata": [12, 81, 103, 146, 158, 184], "get_head": 184, "get_ifram": 457, "get_mask": 270, "get_metadata_rout": [232, 233, 234, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 449], "get_object_bound": [385, 387, 388], "get_param": [101, 232, 233, 234, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 449], "get_standalon": 457, "get_support": 44, "get_tmap": [80, 270], "get_zoom": 420, "getattr": [11, 16, 19, 22, 50, 52, 88, 89], "geuter": [115, 338, 461], "gezici": [0, 127, 158], "gh": [126, 158, 173], "ghislain": [72, 115, 204], "gholamreza": [115, 159], "ghosh": [115, 118, 220, 275, 277], "giant": [146, 158], "gif": [0, 173], "gifti": [7, 126, 129, 158, 205, 206, 207, 208, 209, 210, 283, 284, 463, 464, 465, 466, 468], "gifti_fil": [463, 464, 468], "gigabyt": 173, "gii": [7, 361, 362, 398, 436, 437, 438, 439, 445, 469, 470, 471], "gili": [115, 196], "gill": [0, 143, 146, 158], "gilmor": [0, 151, 158], "gin": [193, 242], "giov": [115, 196], "giovanni": [115, 192], "gist_ncar": [23, 142, 158, 420, 434, 438, 486], "gist_rainbow": 433, "git": [119, 120, 122, 123, 131, 133, 136, 158, 173, 182], "github": [0, 34, 37, 51, 54, 55, 60, 64, 76, 78, 155, 158, 173, 181, 213, 221, 225, 252, 362, 443, 472, 473, 486, 487], "give": [2, 3, 4, 6, 10, 15, 16, 17, 25, 30, 34, 40, 44, 51, 54, 56, 57, 58, 60, 69, 85, 92, 95, 99, 105, 115, 117, 125, 136, 138, 153, 158, 159, 160, 162, 164, 165, 166, 167, 168, 170, 172, 181, 185, 186, 204, 228, 268, 269, 277, 298, 299, 300, 301, 302, 305, 306, 307, 315, 320, 322, 327, 333, 335, 355, 358, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 382, 398, 432, 437, 438, 446, 447, 449, 451, 455, 456, 471], "given": [2, 3, 10, 15, 17, 38, 40, 45, 46, 49, 52, 55, 56, 60, 65, 66, 67, 69, 71, 72, 73, 80, 85, 87, 95, 96, 101, 103, 106, 111, 125, 135, 137, 141, 146, 155, 158, 159, 162, 165, 166, 168, 170, 171, 172, 173, 175, 179, 182, 186, 192, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 248, 249, 269, 270, 272, 273, 279, 284, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 316, 317, 320, 323, 327, 333, 334, 335, 337, 339, 344, 347, 350, 353, 355, 357, 358, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 419, 420, 421, 425, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 459, 460, 462, 473], "gl": [55, 59], "glahn": [115, 227, 253], "glaser": [0, 142, 158], "glass": [9, 10, 28, 49, 63, 109, 113, 136, 137, 138, 140, 141, 146, 149, 158, 180, 278, 295, 320, 333, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 427, 431, 435, 440, 441, 444, 459, 486, 488], "glassbrainax": [389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411], "glasser": [115, 192], "glm": [1, 7, 8, 29, 33, 44, 47, 63, 64, 65, 66, 67, 68, 69, 70, 71, 76, 77, 78, 79, 80, 81, 82, 101, 102, 110, 124, 126, 127, 128, 129, 130, 149, 150, 151, 153, 155, 156, 158, 165, 174, 178, 179, 180, 181, 182, 264, 281, 298, 345, 350, 357, 360, 419, 422, 423, 426, 428, 435, 440, 457, 458, 459, 483, 487, 488, 489], "glm_paramet": 101, "glm_report": 72, "glmax": [58, 92, 103], "glmin": [58, 92, 103], "glob": [64, 76, 128, 131, 141, 158, 183, 339, 358, 489], "global": [9, 28, 113, 115, 149, 158, 172, 173, 184, 191, 196, 225, 240, 241, 252, 265, 285, 305, 306, 339, 351, 361, 362, 378, 420, 447, 488], "global_sign": [58, 127, 158, 361, 362], "global_signal_regress": 240, "glossari": [128, 154, 158, 175], "glover": [34, 65, 67, 68, 69, 110, 129, 158, 174, 320, 322, 323, 324, 325, 326, 327, 472], "glover_dispersion_deriv": [129, 158, 320, 322, 327], "glover_hrf": [129, 158, 320, 322, 327], "glover_time_deriv": [129, 158, 320, 322, 327], "gm": [12, 22, 90, 152, 158, 186, 213, 265, 266, 298, 299, 300, 301, 305, 306, 367, 370, 377, 380, 447], "gm_img": 45, "gm_imgs_test": [44, 45], "gm_imgs_train": [44, 45], "gm_maps_mask": 44, "gm_mask": 76, "gm_mask_img": [266, 289], "gm_mni152_templ": 290, "gmbh": 0, "go": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 116, 118, 139, 158, 159, 165, 169, 173, 178, 181, 182, 186, 277, 343, 348, 349, 351, 421, 427, 431, 435, 440, 442, 472, 488, 489], "goal": [7, 86, 91, 94, 117, 172, 173], "gobbini": [3, 32, 33, 39, 99, 115, 212, 264], "godfrei": [115, 195, 243], "goe": [0, 15, 42, 87, 95, 101, 172, 233, 236], "goebel": [115, 170, 181, 302], "goeman": [77, 115, 315], "goldstein": [115, 200, 211, 246], "golobal_sign": 362, "gomez": [0, 143, 146, 152, 155, 158], "goncalv": [0, 125, 158], "gonn": [115, 211], "gonzalez": [136, 143, 158], "good": [7, 51, 58, 66, 67, 115, 117, 138, 158, 159, 162, 164, 166, 167, 168, 169, 171, 172, 173, 174, 182, 184, 186, 275, 300, 301, 415, 489], "goodwin": [115, 192], "googl": 0, "gor": [0, 119, 143, 158], "gordon": [115, 225, 252], "gorgolewski": [0, 115, 118, 119, 131, 158, 202, 220, 247, 262, 275, 277, 280], "gorrono": [0, 148, 158], "goshen": [71, 115], "got": [165, 173], "gotim": 115, "gottstein": [71, 115], "gould": [115, 172], "gov": [50, 72, 115, 164, 166, 204, 305], "govern": 172, "grab": [34, 49, 50, 51, 66, 101, 118], "grace": [115, 201, 261], "gracefulli": 353, "grad": 489, "graham": [58, 115, 361, 362], "grai": [12, 34, 39, 42, 43, 44, 45, 67, 76, 90, 93, 128, 136, 143, 146, 152, 156, 158, 170, 178, 180, 186, 213, 222, 265, 266, 279, 298, 299, 300, 301, 305, 306, 367, 370, 419, 420, 425, 428, 431, 447, 471, 473], "grain": [10, 70, 115, 202, 247, 302], "gramfort": [0, 46, 51, 115, 119, 122, 145, 146, 158, 159, 171, 181, 219, 233, 250], "grand": [58, 320], "grant": 0, "graph": [45, 49, 55, 59, 159, 161, 171, 172, 179, 180, 298, 299, 303, 304, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 431, 489], "graph_net": 41, "graph_object": 398, "graphic": [60, 115, 159, 172, 173, 187, 233, 236], "graphical_lasso": 55, "graphicallasso": [55, 159], "graphicallassocv": [54, 55, 59, 60, 159, 172, 234], "graphicallassocvifittedgraphicallassocv": [54, 55, 60], "graphnet": [115, 171], "grass": 191, "gratton": [115, 226, 260], "gray_matter_map": [44, 45, 76, 222, 279], "gray_matter_map_filenam": [44, 76], "grayplot": [12, 149, 158, 420], "grayscal": [436, 438, 439, 445], "great": [143, 158], "greater": [67, 101, 151, 153, 158, 175, 196, 320, 329, 337, 344, 357, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 427, 430, 431, 435, 439, 441, 443, 445, 458, 462, 471], "greaterorequ": [118, 275], "greaterthan": [118, 275], "greatli": 181, "green": [42, 51, 115, 151, 158, 226, 260, 307, 311], "greenelab": 226, "greg": [0, 143, 146, 158], "gregori": [101, 115, 165], "grei": [67, 90, 152, 158, 185, 186, 266, 289, 290, 291, 293, 377, 380], "grew": 0, "greydon": [0, 151, 158], "grid": [7, 35, 40, 53, 68, 80, 85, 100, 166, 171, 179, 185, 234, 275, 277, 298, 299, 300, 301, 324, 325, 326, 330, 331, 332, 353, 395, 397, 400, 414, 419, 425, 428, 432, 433, 434, 435, 486], "grid_param": [126, 158], "grid_search": [143, 158, 298, 299, 300, 301], "gridsearchcv": [100, 168], "gridspec": [42, 151, 158], "gridspec_kw": [40, 51, 81, 101], "griffith": [140, 158], "grobler": [0, 119, 158], "groningen": 0, "grosenick": [115, 171], "gross": 222, "ground": [43, 46, 59, 165], "group": [2, 3, 30, 31, 33, 34, 40, 48, 59, 60, 61, 64, 75, 76, 77, 78, 79, 80, 81, 98, 99, 102, 106, 107, 112, 113, 115, 140, 146, 158, 160, 161, 164, 165, 170, 175, 177, 178, 179, 180, 181, 192, 196, 199, 201, 222, 228, 232, 233, 234, 244, 245, 250, 258, 260, 261, 272, 278, 298, 299, 300, 301, 302, 305, 306, 346, 358, 361, 364, 369, 384, 417, 420, 421, 432, 433, 435, 440, 454, 488, 489], "group_connect": 159, "group_mean": 245, "group_multiscale_functional_template_generated_with_basc_on_the_cambridge_sampl": 244, "group_sparse_cov": 59, "group_sparse_covari": [131, 158, 172, 234], "group_sparse_covariance_cost": 172, "grouped_conditions_encod": 104, "grouped_fmri_mask": 104, "groupsparsecovari": [55, 159, 172, 234], "groupsparsecovariancecv": [55, 59, 159, 172], "grow": [51, 159, 196], "grp_mask": 382, "grp_mean": 245, "grueschow": [115, 170], "gruner": [115, 195, 243], "gryal": 254, "gs1": 42, "gsc": [55, 59], "gsr": 58, "gt": [37, 76, 90, 92, 93, 110, 472, 473], "gtihub": 173, "guarante": [0, 6, 82, 166, 172, 283, 296, 348, 353, 354, 360, 367], "guess": [165, 172, 376, 442], "guevara": [0, 131, 136, 158], "gui": [115, 177, 192], "guid": [41, 124, 130, 158, 173, 178, 180, 181, 186, 188, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 476, 478, 479, 487], "guidelin": [58, 95, 115, 124, 152, 155, 158, 165, 182], "guidotti": [0, 136, 146, 158], "guillaum": [0, 72, 115, 143, 146, 158, 204], "gur": [58, 115, 361, 362], "gutman": [115, 221], "gyral": [115, 200, 211], "gyri": [23, 115, 200, 254], "gyru": [10, 92, 255], "gz": [2, 3, 4, 6, 11, 12, 15, 17, 19, 22, 26, 30, 31, 33, 35, 36, 37, 39, 43, 44, 45, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 64, 72, 76, 78, 86, 87, 90, 92, 93, 95, 96, 102, 103, 104, 105, 106, 107, 109, 110, 117, 181, 182, 184, 196, 202, 360, 361, 362, 398, 436, 445, 469, 470, 473], "g\u00f6z\u00fckan": [0, 129, 130, 156, 158], "h": [58, 66, 115, 200, 205, 206, 207, 208, 209, 222, 230, 246, 255, 262, 280, 283, 307, 311, 361, 362], "h0": [308, 384], "h0_fmax": [154, 158, 384], "h0_max_mass": 384, "h0_max_siz": 384, "h0_max_t": 384, "h0_max_tfc": 384, "h1": 92, "h2": 92, "h_shape": 473, "ha": [3, 6, 12, 24, 31, 34, 37, 38, 40, 44, 49, 51, 53, 54, 56, 60, 65, 67, 68, 70, 72, 73, 76, 80, 82, 87, 90, 92, 95, 101, 106, 118, 124, 125, 126, 127, 129, 131, 133, 137, 140, 143, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 164, 166, 167, 170, 172, 173, 175, 177, 178, 182, 186, 196, 228, 232, 233, 234, 242, 243, 244, 246, 251, 255, 275, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 327, 333, 335, 344, 347, 348, 353, 354, 358, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 384, 386, 427, 430, 435, 439, 440, 446, 447, 448, 449, 453, 457, 460, 462, 471, 472, 473, 486], "habib": [115, 196, 244], "had": [126, 142, 158], "haemodynam": [71, 115, 174, 175, 179], "haemoglobin": 175, "hahn": [0, 155, 158], "hairi": 66, "haitz": [0, 148, 158], "hajim": [42, 43, 115, 218, 274], "hal": [46, 115, 159, 163, 171, 202, 233, 247, 449], "halchenko": [0, 140, 143, 158], "half": [24, 51, 67, 95, 146, 158, 172, 179, 186, 298, 299, 300, 301, 305, 306, 320, 333, 335, 355, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 436, 438, 439, 443, 445, 447, 449, 451], "halfwai": 471, "halgren": [23, 115, 200, 246, 254], "hammond": [0, 146, 158], "hampshir": 0, "han": 115, "hand": [0, 2, 67, 69, 95, 129, 130, 156, 158, 172, 173, 184, 186, 284], "handbook": 181, "handed": [201, 261], "handedness_categori": 240, "handedness_scor": 240, "handi": [150, 158, 174], "handl": [1, 8, 51, 72, 113, 125, 126, 128, 129, 133, 139, 155, 158, 165, 181, 182, 184, 185, 186, 253, 278, 285, 308, 312, 339, 345, 346, 347, 348, 353, 359, 361, 423, 435, 440, 448, 454, 488], "hank": [0, 123, 131, 158], "hanov": 0, "hao": [0, 124, 125, 126, 127, 129, 150, 151, 153, 155, 158], "happen": [50, 93, 170, 173, 186, 471], "hard": [57, 160, 172, 179, 184], "hardcod": [73, 124, 158, 296], "harder": 166, "hardest": 172, "hardwar": 172, "harold": [115, 221], "harsh": 298, "hartmut": 115, "harvard": [0, 22, 92, 160, 188, 222, 231, 240, 248, 256, 416, 417], "harvard_oxford": 22, "harvard_oxford_sub": 22, "harvardoxford": 11, "hash": 50, "hasn": [3, 172], "hasti": [115, 159], "hat": [307, 311], "hatch": 182, "hatchl": [125, 158, 182], "have": [0, 2, 3, 6, 7, 10, 12, 16, 17, 19, 24, 25, 30, 32, 33, 34, 40, 41, 43, 44, 46, 51, 54, 56, 57, 58, 59, 63, 64, 65, 66, 67, 71, 72, 76, 86, 87, 94, 95, 99, 101, 102, 103, 105, 110, 111, 113, 117, 118, 124, 125, 126, 127, 129, 131, 133, 135, 136, 137, 140, 141, 142, 143, 146, 149, 150, 151, 153, 154, 158, 159, 162, 163, 164, 165, 166, 168, 171, 172, 173, 174, 175, 178, 179, 181, 182, 184, 185, 186, 192, 196, 199, 201, 215, 222, 229, 232, 233, 234, 236, 239, 244, 256, 260, 261, 275, 298, 299, 300, 301, 302, 303, 304, 305, 306, 312, 313, 320, 323, 327, 328, 333, 334, 335, 337, 338, 340, 349, 353, 354, 355, 358, 360, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 383, 420, 426, 436, 438, 439, 443, 446, 447, 448, 449, 455, 456, 458, 459, 461, 468, 486, 487], "haven": [67, 105], "havlicek": [115, 195, 243], "haxbi": [4, 9, 16, 17, 28, 29, 47, 95, 113, 115, 117, 137, 138, 158, 169, 171, 180, 184, 186, 188, 264, 298, 343, 345, 350, 364, 370, 412, 419, 432, 435, 440, 442, 486, 488, 489], "haxby2001": [3, 4, 16, 17, 19, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 95, 99, 104, 117, 184, 212, 264], "haxby_anat_filenam": [16, 17], "haxby_dataset": [3, 16, 17, 19, 26, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 95, 99, 104, 117, 165, 184, 186], "haxby_face_vs_hous": 30, "haxby_func_filenam": [16, 17], "haxby_label": 95, "haxby_mask_filenam": [16, 17], "haxby_svc_weight": 3, "hayn": [38, 115, 170], "hayward": 0, "hbm": [115, 199, 245, 338, 461], "hbm10": [115, 205, 206, 207, 208, 209, 283], "hbm30": [115, 230, 255], "hbm6": [115, 230, 255], "hcp": [13, 27, 115, 188, 272], "hcp500": [192, 272], "he": 173, "head": [70, 182, 320, 333, 361, 457, 459], "head_tpl": 457, "head_valu": 457, "header": [3, 12, 95, 98, 102, 112, 113, 122, 126, 128, 129, 144, 146, 154, 158, 184, 241, 337, 338, 341, 342, 348, 349, 350, 351, 352, 353, 354, 357, 420, 461, 488], "health": 0, "healthi": [115, 179, 181, 191, 195, 196, 211, 227, 244], "heart": 67, "heavi": [41, 44, 159, 173, 371], "heavier": 32, "heavili": 0, "hedden": [115, 196], "heidelberg": [0, 115, 159, 213, 219, 232, 250], "heidi": [115, 192], "height": [31, 34, 53, 73, 76, 100, 110, 146, 158, 320, 333, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 425, 427, 428, 431, 432, 433, 434, 435, 441, 443, 445, 457, 459, 472], "height_control": [6, 76, 78, 82, 320, 333, 336, 360, 459], "height_ratio": [40, 51], "height_tf": 43, "height_tf_i": 43, "heinzl": [38, 115], "held": [42, 170, 173, 298, 299, 300, 301, 487], "helen": [115, 199, 245], "help": [16, 34, 60, 95, 115, 139, 143, 144, 158, 160, 166, 174, 177, 186, 236, 487, 489], "helper": [25, 39, 42, 46, 51, 68, 72, 79, 92, 107, 108, 111, 125, 131, 138, 139, 158, 173, 188, 275], "helwegen": [0, 155, 158], "hemi": [7, 10, 23, 24, 38, 49, 69, 110, 111, 398, 436, 437, 438, 439, 445, 465, 466, 486], "hemispher": [7, 10, 23, 24, 38, 49, 60, 80, 87, 95, 110, 111, 129, 136, 137, 141, 156, 158, 163, 185, 200, 205, 206, 207, 208, 209, 210, 218, 221, 246, 254, 255, 283, 284, 286, 320, 333, 356, 372, 373, 374, 385, 393, 416, 419, 421, 425, 427, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439, 443, 445, 459, 466, 467, 473, 486], "hemispheres_to_analyz": 38, "hemodyam": 66, "hemodynam": [68, 71, 165, 179], "hemodynamic_model": [155, 158], "henc": [3, 40, 58, 60, 73, 76, 87, 149, 158, 170, 173, 175, 196], "henson": [71, 101, 115, 229], "herbert": [115, 211], "here": [2, 3, 4, 6, 7, 10, 15, 16, 20, 21, 24, 30, 31, 32, 33, 34, 35, 36, 37, 40, 44, 45, 46, 50, 51, 56, 57, 58, 60, 63, 65, 66, 67, 69, 70, 72, 73, 76, 89, 90, 93, 95, 96, 99, 101, 102, 103, 105, 106, 110, 111, 115, 117, 118, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 178, 181, 182, 185, 186, 226, 261, 303, 304, 310, 312, 313, 323, 335, 377, 384, 389, 390, 391, 392, 393, 394, 399, 403, 404, 407, 408, 409, 410, 436, 438, 439, 472, 473], "herebi": 170, "herholz": [0, 143, 158], "hertz": [34, 110, 298, 299, 300, 301, 303, 304, 305, 306, 338, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 447, 449, 460, 461, 472], "heschl": 92, "hesheng": [115, 196, 225, 231, 252, 256], "hesit": [117, 173], "heterogen": 159, "heurist": [138, 158, 171, 172, 234, 378, 419, 433, 434, 435, 442, 486], "hex": 444, "hhmi": 222, "hierarch": [162, 179, 180, 196, 446], "hierarchi": [115, 196, 244], "hierarchical_kmean": [51, 153, 158, 447], "hierarchical_kmeans_parcel": 51, "hierarchicalkmean": [51, 130, 153, 158], "high": [10, 32, 41, 51, 58, 66, 67, 90, 95, 115, 143, 149, 150, 151, 158, 166, 167, 172, 173, 175, 179, 181, 182, 185, 186, 192, 193, 196, 205, 206, 207, 208, 209, 223, 242, 251, 283, 286, 287, 294, 298, 299, 300, 301, 303, 304, 305, 306, 308, 320, 323, 327, 338, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 398, 430, 443, 447, 449, 460, 461], "high_pass": [6, 34, 51, 53, 54, 55, 56, 57, 58, 60, 63, 67, 71, 90, 92, 93, 100, 101, 110, 143, 158, 186, 298, 299, 300, 301, 303, 304, 305, 306, 320, 323, 327, 338, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 447, 449, 460, 461, 472, 473], "high_variance_confound": [34, 51, 54, 55, 56, 58, 60, 67, 90, 92, 93, 133, 150, 158, 186, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 473], "higher": [6, 72, 117, 138, 158, 159, 170, 175, 177, 233, 253, 298, 299, 300, 301, 303, 304, 305, 306, 320, 333, 339, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 398, 447, 448, 449, 460], "highest": [40, 54, 56, 298, 299, 300, 301, 323, 344, 462], "highli": [65, 172, 173], "highlight": [101, 182], "hilari": [115, 201, 261], "himanshu": [0, 128, 129, 130, 156, 158], "himanshupathak21061998": [143, 144, 158], "hint": [67, 159, 160], "hinz": [115, 221], "hippocampu": [226, 260], "hiroki": [42, 43, 115, 218, 274], "hist": [51, 70, 429], "histogram": [320, 329, 378, 381, 429], "histori": 172, "hkmean": 51, "hkmeans_count": 51, "hkmeans_labels_img": 51, "hoc": 172, "hochberg": [175, 319], "hocheberg": [153, 158], "hodg": [115, 211], "hold": [7, 42, 79, 129, 158, 172, 173, 182, 305, 306, 327, 384, 395, 447], "hole": 95, "holland": [0, 143, 146, 158], "hollinshead": [115, 225, 231, 252, 256], "holm": [115, 193, 225, 252, 338, 461], "holtzheim": [115, 199, 245], "home": [2, 3, 4, 6, 7, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 86, 87, 88, 89, 90, 92, 93, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 181, 184, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 294, 348, 472, 473], "homedir": [135, 158], "hommel": [153, 158], "homogen": [90, 127, 158, 162, 185, 199, 240, 245, 298, 299, 300, 301, 305, 306, 353, 367, 370, 447], "homotop": [196, 240, 244], "honorio": [115, 172, 233, 236], "hood": [40, 166, 171], "hook": 173, "hopefulli": 172, "hopkin": 0, "hoptman": [115, 221], "horea": [0, 140, 143, 158], "horizont": [67, 73, 81, 128, 158, 270, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 473], "horizontal_checkerboard": [66, 67, 216], "horton": [115, 192], "hospit": 0, "hospitali": 0, "host": 173, "hough": [115, 192], "hour": [173, 181, 182, 335, 384], "hous": [3, 19, 29, 33, 34, 40, 47, 95, 98, 112, 113, 125, 158, 170, 180, 184, 185, 211, 212, 264, 298, 300, 302, 343, 345, 348, 350, 351, 364, 370, 384, 412, 428, 432, 435, 440, 442, 488], "hover": 90, "how": [0, 1, 2, 3, 4, 5, 6, 7, 10, 15, 20, 22, 27, 35, 38, 40, 42, 46, 49, 50, 51, 52, 55, 57, 58, 60, 63, 64, 65, 67, 68, 70, 72, 73, 79, 80, 85, 87, 88, 89, 90, 92, 95, 96, 101, 103, 105, 108, 109, 111, 113, 117, 125, 129, 138, 149, 150, 153, 154, 158, 160, 162, 163, 164, 165, 166, 168, 170, 172, 175, 179, 180, 181, 183, 185, 201, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 487, 489], "howard": 222, "howev": [0, 49, 50, 51, 67, 70, 72, 87, 95, 101, 159, 165, 168, 172, 175, 186, 193, 353, 360, 362, 489], "hoyo": [0, 51, 115, 146, 158, 165, 167, 300, 301, 448, 454], "hrcku": 22, "hrf": [6, 66, 67, 68, 69, 129, 153, 155, 158, 165, 176, 179, 320, 322, 324, 325, 326, 327, 330, 331, 332, 489], "hrf_model": [6, 34, 63, 65, 66, 67, 69, 71, 110, 320, 322, 323, 327, 472], "hspace": [46, 51, 59], "hstack": [31, 78, 81, 310, 312, 313], "htdoc": [194, 241], "htm": [115, 307, 311], "html": [19, 30, 34, 35, 37, 51, 54, 55, 56, 58, 60, 63, 72, 76, 78, 99, 128, 143, 147, 151, 153, 158, 165, 176, 180, 182, 186, 192, 194, 195, 212, 230, 255, 264, 272, 298, 299, 300, 301, 320, 333, 362, 366, 369, 371, 441, 442, 443, 444, 445, 449, 457, 459, 486, 487], "html_document": 457, "html_report": [366, 369, 371, 449], "html_surfac": [126, 158], "html_view": [442, 486], "htmldocument": 457, "htmlreport": [320, 333, 366, 369, 371, 374, 449, 459], "http": [0, 2, 4, 6, 10, 11, 18, 19, 20, 22, 27, 35, 39, 41, 46, 50, 55, 58, 64, 66, 71, 72, 77, 78, 80, 81, 82, 100, 102, 103, 105, 109, 115, 118, 155, 158, 159, 163, 164, 166, 171, 173, 175, 181, 182, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 204, 211, 212, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 242, 243, 244, 245, 247, 250, 251, 252, 253, 255, 256, 261, 264, 265, 266, 270, 272, 276, 278, 279, 281, 282, 288, 289, 290, 291, 292, 293, 298, 299, 300, 301, 305, 307, 311, 362, 443, 444, 449, 486, 487], "httperror": [142, 158], "hu": [115, 199, 245], "huang": [0, 129, 158], "hubbard": [115, 181], "huge": [0, 67, 68, 143, 158, 202], "hugh": 222, "huguet": [0, 127, 158], "human": [0, 9, 23, 28, 33, 41, 42, 43, 45, 60, 68, 72, 113, 115, 118, 170, 173, 179, 191, 196, 199, 200, 204, 205, 206, 207, 208, 209, 211, 218, 220, 223, 224, 225, 230, 231, 240, 245, 246, 251, 252, 254, 255, 256, 259, 272, 274, 275, 277, 283, 338, 362, 432, 440, 461, 488], "humanconnectom": [115, 192, 272], "hunar": [101, 115], "hundr": [6, 51, 447], "huntenburg": [0, 131, 146, 158], "hutchison": [115, 195, 243], "hvidovr": 0, "hwbm2": 18, "hybrid": [303, 304], "hyman": [115, 211], "hyper": [166, 167], "hyperparamet": [35, 44], "hyperplan": [303, 304], "hypothalam": [115, 211], "hypothes": [65, 175, 179], "hypothesi": [170, 175, 302, 308, 335, 384], "hz": [6, 67, 71, 186, 196, 320, 327], "i": [0, 2, 4, 6, 10, 12, 15, 16, 17, 19, 21, 22, 23, 24, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 115, 116, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 182, 183, 185, 191, 192, 193, 194, 196, 197, 198, 200, 201, 202, 204, 205, 206, 207, 208, 209, 213, 216, 219, 220, 222, 223, 225, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 476, 486, 487, 489, 490], "i_ax": 101, "i_col": 107, "i_row": 80, "i_trial": 101, "iacovella": [115, 196], "ian": [0, 146, 158], "ic": [50, 105, 195], "ic_img": 105, "ic_map": 105, "ic_term": 105, "ic_threshold": 105, "ica": [22, 48, 52, 56, 61, 88, 93, 98, 106, 112, 113, 115, 118, 131, 158, 160, 161, 179, 180, 181, 190, 192, 195, 219, 227, 243, 253, 261, 272, 275, 288, 305, 306, 346, 355, 361, 362, 364, 366, 369, 370, 433, 435, 440, 453, 473, 486, 488, 489], "ica_aroma": [58, 153, 158, 361, 362], "ica_map": 105, "icbm": [22, 67, 76, 143, 158, 188, 265], "icbm152": [12, 152, 158, 179, 196, 213, 265, 266, 288, 289, 290, 291, 292, 293], "icbm152_2009": [12, 22, 67, 76], "icbm152nlin2009": 213, "icbm_mask": 67, "id": [6, 34, 64, 70, 71, 105, 109, 118, 125, 158, 193, 211, 214, 240, 242, 255, 275, 277, 284, 320, 368, 458, 472], "ida": [3, 32, 33, 39, 99, 115, 212, 264], "idea": [52, 89, 95, 165, 172, 175], "ideal": [80, 107, 162, 175, 182, 196, 244], "ident": [25, 40, 69, 81, 172, 196, 338, 355, 451, 461], "identif": [73, 95, 115, 179, 192, 198, 240, 270], "identifi": [0, 30, 31, 33, 34, 52, 60, 64, 95, 115, 124, 153, 158, 163, 171, 174, 175, 178, 192, 242, 316, 320, 322, 327, 329], "idp": 202, "idrissa": [0, 130, 158], "idrobo": [0, 51, 115, 146, 158, 165, 167, 300, 301, 448, 454], "idx": 71, "ie": [17, 155, 158, 159, 164, 184, 310, 312, 313, 366, 369, 371, 373], "ieee": [46, 50, 51, 115, 164, 171, 193, 202, 305, 306, 448, 454], "ignor": [3, 17, 22, 30, 50, 52, 71, 103, 144, 149, 158, 232, 233, 234, 275, 277, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 327, 333, 335, 358, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 430, 446, 447, 448, 449, 471], "ignorecas": 118, "ii": [115, 198, 200, 270, 362], "iii": [115, 199, 245], "ilinoi": 0, "ill": 166, "illustr": [9, 28, 51, 67, 68, 86, 91, 94, 102, 110, 113, 165, 173, 185, 186, 439, 471, 488], "im": [11, 16, 19, 22, 32, 50, 52, 88, 89, 109], "imag": [1, 2, 6, 8, 12, 13, 14, 15, 16, 19, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 64, 65, 67, 68, 70, 71, 72, 76, 77, 78, 79, 80, 81, 85, 87, 88, 89, 90, 92, 93, 95, 97, 99, 101, 102, 104, 106, 107, 108, 110, 112, 115, 116, 122, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 146, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 162, 163, 164, 165, 166, 170, 171, 173, 175, 177, 179, 181, 183, 191, 192, 193, 194, 196, 198, 201, 202, 204, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 225, 228, 229, 230, 231, 232, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 261, 264, 265, 266, 268, 270, 271, 272, 274, 275, 276, 277, 278, 281, 282, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 306, 315, 317, 320, 323, 333, 334, 335, 336, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 458, 459, 461, 462, 464, 466, 467, 468, 471, 473, 479, 488, 489], "image_10426": [2, 15], "image_11020": 105, "image_11021": 105, "image_151": 109, "image_17327": 105, "image_17328": 105, "image_17329": 105, "image_17330": 105, "image_17331": 105, "image_17332": 105, "image_17333": 105, "image_17334": 105, "image_17335": 105, "image_17336": 105, "image_17337": 105, "image_17338": 105, "image_17339": 105, "image_17340": 105, "image_17341": 105, "image_17342": 105, "image_17343": 105, "image_17344": 105, "image_2675": 109, "image_2676": 109, "image_2818": 109, "image_2834": 109, "image_3041": 109, "image_3042": 109, "image_65426": 105, "image_filt": [118, 275], "image_id": [109, 118, 277], "image_m": 195, "image_metadata": 275, "image_path": 105, "image_term": [118, 275], "images_meta": [105, 109, 118, 220, 275, 276, 277, 278], "images_to_plot": 107, "imbalanc": 165, "imcal": 349, "img": [2, 4, 49, 51, 52, 64, 71, 72, 78, 80, 85, 91, 102, 105, 107, 138, 146, 158, 163, 173, 184, 287, 302, 305, 306, 323, 333, 335, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 418, 420, 428, 429, 447, 449, 452, 453, 455, 456, 458, 467, 471, 486], "img1": [86, 103, 349], "img2": [86, 103, 349], "img_3d_affin": 85, "img_3d_affine_in_mm_spac": 85, "img_4d_affin": 85, "img_4d_affine_in_mm_spac": 85, "img_copi": 341, "img_count": 80, "img_fil": [361, 362], "img_filt": [101, 102, 110, 323], "img_in_mm_spac": 85, "img_length": 415, "img_path": [39, 359], "img_plot": [78, 80], "img_to_signals_label": [125, 127, 143, 146, 158, 453, 455], "img_to_signals_map": [125, 158, 452, 456], "img_valu": 449, "imgs_list": [364, 365, 366, 367, 370], "immedi": [95, 362], "impact": [44, 67, 79, 153, 158, 170, 173, 182, 186, 320, 333, 362], "imperfect": 160, "imperi": 0, "implement": [16, 50, 51, 58, 60, 67, 68, 99, 110, 129, 130, 131, 138, 140, 146, 149, 150, 153, 154, 158, 159, 162, 163, 164, 166, 168, 170, 171, 172, 173, 179, 181, 182, 187, 196, 248, 249, 298, 299, 302, 303, 304, 308, 310, 315, 320, 322, 324, 325, 326, 327, 330, 331, 332, 333, 335, 344, 361, 362, 372, 373, 374, 384, 385, 386, 388, 398, 436, 438, 439, 449, 461, 462, 472, 473, 483], "impli": [16, 150, 158, 172, 232, 353, 375, 398], "implic": [71, 101, 115], "implicit": [6, 32, 41, 149, 158, 167, 179, 300, 301], "implicitli": [67, 69, 81, 104, 165, 172], "implictili": 6, "import": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 117, 118, 136, 142, 143, 144, 146, 151, 153, 158, 159, 160, 163, 165, 166, 167, 168, 170, 172, 173, 174, 177, 178, 179, 181, 182, 184, 185, 186, 192, 218, 242, 308, 310, 312, 313, 320, 333, 337, 340, 345, 349, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 431, 459, 465, 467, 471, 486], "important_term": 105, "importantli": [166, 168, 173], "importerror": [5, 100, 146, 158], "impos": [41, 131, 158], "imposs": 352, "impress": 69, "improv": [32, 65, 76, 115, 124, 125, 126, 128, 129, 136, 139, 142, 143, 146, 153, 154, 155, 158, 165, 166, 167, 171, 172, 173, 175, 179, 184, 186, 213, 226, 260, 338, 365, 368, 372, 446, 461], "impul": [62, 74, 113, 271, 320, 422, 423, 435, 488], "impuls": [66, 68, 174, 175, 179, 320, 322, 327], "imput": [124, 158], "imread": 39, "imshow": [13, 39, 40, 42, 43, 46, 85, 160, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 425, 427, 428, 430, 432, 433, 434, 435, 436, 438, 439], "imt": 0, "inact": [6, 175], "inappropri": 38, "inbuilt": [298, 299, 300, 301], "inch": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "includ": [15, 38, 41, 44, 45, 56, 60, 65, 67, 70, 78, 80, 81, 92, 101, 102, 107, 110, 122, 125, 126, 127, 128, 129, 136, 146, 148, 149, 153, 155, 158, 163, 165, 170, 171, 173, 174, 177, 179, 181, 182, 184, 190, 192, 194, 195, 196, 204, 212, 216, 225, 226, 228, 232, 239, 243, 244, 261, 266, 280, 288, 289, 292, 298, 299, 300, 301, 302, 307, 311, 320, 333, 335, 345, 359, 360, 361, 365, 366, 367, 368, 369, 370, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 398, 421, 458, 477, 482], "inclus": [67, 297], "inclusion_filt": 297, "incompat": [140, 158, 320], "incomplet": [126, 158], "incongru": 177, "inconsist": [151, 158, 333, 335], "incorpor": [65, 101, 164], "incorrect": 179, "increas": [35, 46, 67, 70, 80, 90, 93, 105, 106, 125, 140, 158, 169, 170, 172, 175, 179, 185, 223, 236, 335, 362, 378, 384, 419, 433, 434, 435, 442, 447, 460, 489], "increment": [67, 96, 181, 182], "inde": [6, 44, 51, 87, 159, 160, 168, 175, 321, 486], "indent": 95, "independ": [42, 50, 67, 98, 112, 113, 131, 158, 162, 164, 165, 170, 172, 175, 179, 186, 218, 219, 261, 298, 299, 300, 301, 305, 338, 345, 350, 361, 362, 364, 370, 384, 435, 440, 461, 488], "index": [2, 6, 10, 13, 21, 23, 24, 34, 42, 43, 52, 57, 58, 66, 67, 72, 73, 88, 89, 101, 102, 105, 111, 127, 135, 153, 158, 163, 180, 193, 194, 242, 244, 246, 248, 249, 251, 252, 254, 255, 262, 297, 298, 299, 300, 301, 310, 312, 313, 327, 345, 353, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 398, 437, 449, 451, 461, 471], "index_": [52, 88, 163, 449], "index_img": [2, 3, 21, 30, 31, 32, 33, 34, 35, 37, 38, 40, 51, 52, 88, 90, 93, 99, 104, 106, 160, 163, 185, 186, 339, 346], "index_of_each_map": 451, "index_to_xy_coord": 42, "indexerror": [131, 153, 158], "indi": [194, 221, 241], "india": 0, "indian": 0, "indic": [10, 31, 33, 43, 52, 56, 60, 67, 73, 80, 87, 135, 138, 143, 158, 163, 170, 173, 179, 182, 184, 193, 195, 225, 230, 240, 242, 243, 246, 248, 249, 251, 252, 255, 256, 264, 275, 281, 282, 298, 299, 300, 301, 303, 304, 305, 320, 323, 339, 351, 353, 354, 356, 364, 366, 367, 368, 369, 370, 371, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 425, 428, 433, 434, 435, 436, 437, 438, 439, 442, 443, 445, 449, 451, 458], "indirect": [159, 160], "indirectli": [10, 110], "individu": [53, 60, 64, 67, 69, 73, 77, 79, 80, 81, 82, 95, 101, 102, 110, 115, 159, 164, 178, 179, 181, 183, 186, 191, 192, 196, 198, 203, 211, 214, 232, 233, 258, 270, 335, 382, 398, 437, 473, 489], "inertia": 446, "inf": [15, 56, 105, 338, 366, 369, 375, 378, 461, 472, 473], "infer": [12, 51, 64, 66, 77, 80, 85, 101, 104, 115, 173, 175, 178, 179, 315, 323, 335, 353, 360, 384, 420], "inferior": 92, "inferno": [6, 15, 21, 32, 36, 37, 42, 70, 77, 78, 80, 88, 95, 104, 107, 108, 111, 156, 158, 372, 373, 374, 473], "infin": 15, "infinit": 353, "infinitesim": 174, "infl_left": [205, 206, 207, 208, 209, 210, 283, 430, 443, 486], "infl_right": [205, 206, 207, 208, 209, 210, 283, 430, 443], "inflat": [10, 24, 38, 69, 110, 115, 200, 205, 206, 207, 208, 209, 210, 283, 286, 287, 294, 430, 436, 437, 438, 439, 443, 445, 470, 471], "influenc": [70, 172, 240, 299, 304], "info": [173, 182, 197, 275, 277, 430, 436, 437, 438, 439], "inform": [3, 6, 7, 12, 17, 19, 22, 24, 26, 30, 31, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 50, 51, 53, 54, 55, 56, 60, 63, 64, 67, 68, 73, 76, 78, 79, 90, 92, 93, 95, 96, 101, 102, 103, 104, 106, 107, 110, 111, 115, 117, 118, 122, 125, 128, 140, 144, 154, 158, 159, 160, 163, 164, 165, 167, 169, 172, 173, 174, 178, 179, 181, 182, 184, 186, 191, 192, 193, 194, 195, 198, 199, 201, 202, 212, 213, 217, 218, 219, 220, 222, 226, 227, 230, 231, 232, 233, 234, 240, 242, 243, 244, 245, 250, 252, 253, 255, 256, 264, 265, 266, 272, 273, 274, 275, 277, 279, 284, 288, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 313, 320, 333, 335, 347, 349, 353, 359, 360, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 449, 459, 460, 461, 473, 476, 487, 489], "informat": [0, 222], "infrastructur": [173, 182], "inglat": 286, "inher": [151, 158], "inherit": [15, 127, 158, 311, 457], "ini": 182, "init": [173, 446], "init_with_figur": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "initi": [0, 3, 13, 24, 38, 50, 51, 52, 69, 95, 101, 126, 158, 163, 171, 174, 184, 186, 191, 215, 234, 236, 305, 306, 307, 311, 365, 366, 368, 369, 371, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 446, 449], "inlin": [172, 457], "inmemorymesh": [7, 436, 437, 438, 439, 445, 463, 470, 471], "inner": [298, 299, 300, 301, 358, 467, 471], "inner_mesh": [25, 467, 471], "innermost": 172, "inplac": 460, "input": [2, 3, 4, 6, 10, 15, 16, 24, 33, 40, 50, 51, 56, 57, 59, 68, 69, 71, 72, 77, 78, 80, 81, 86, 89, 93, 95, 98, 99, 110, 112, 113, 117, 125, 126, 127, 129, 132, 133, 136, 137, 138, 139, 141, 142, 143, 146, 150, 152, 153, 154, 155, 158, 162, 165, 168, 170, 172, 173, 174, 179, 183, 185, 186, 192, 216, 229, 232, 233, 234, 235, 236, 237, 238, 239, 241, 244, 245, 253, 271, 272, 298, 299, 300, 301, 302, 303, 304, 305, 306, 315, 317, 319, 320, 322, 327, 328, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 364, 365, 366, 367, 368, 369, 370, 371, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 420, 427, 428, 430, 433, 434, 435, 442, 443, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 471, 473, 486, 488, 489], "input_data": [36, 37, 42, 43, 44, 49, 53, 54, 55, 56, 57, 58, 60, 63, 70, 90, 92, 93, 95, 99, 100, 101, 104, 105, 106, 107, 108, 117, 153, 158], "inria": [0, 46, 115, 159, 163, 171, 202, 219, 233, 247, 250, 449], "insect": [115, 213], "insensit": 166, "insert": [34, 320, 333, 441, 442, 443, 444, 445, 457, 459, 486], "insid": [15, 22, 25, 35, 51, 57, 99, 168, 173, 232, 233, 234, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 338, 344, 358, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 398, 420, 433, 434, 437, 438, 446, 447, 448, 449, 471], "insight": [0, 40, 58, 152, 158, 159], "inspect": [42, 50, 57, 67, 70, 72, 160, 165, 181, 194, 320, 333, 473], "inspir": [52, 171, 173, 182], "instabl": [59, 67, 172, 460], "instal": [10, 113, 124, 127, 129, 138, 143, 146, 153, 154, 158, 181, 182, 248, 249, 340, 366, 369, 371, 436, 438, 439, 449, 486], "instanc": [2, 3, 4, 6, 16, 19, 23, 24, 31, 32, 37, 42, 44, 45, 50, 51, 53, 67, 68, 69, 87, 88, 104, 108, 129, 130, 140, 146, 153, 158, 159, 160, 162, 164, 165, 173, 174, 175, 178, 179, 181, 184, 185, 232, 233, 234, 239, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 316, 317, 320, 327, 329, 333, 335, 339, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 419, 421, 425, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 445, 446, 447, 448, 449, 467, 487], "instant": [338, 461], "instantan": 73, "instanti": [52, 53, 56, 90, 92, 93, 129, 153, 156, 158, 302, 320, 395, 397, 400, 402, 404, 406, 408, 410, 412, 473], "instead": [10, 15, 36, 37, 42, 43, 44, 49, 51, 53, 54, 55, 56, 57, 58, 60, 63, 67, 70, 90, 92, 93, 95, 99, 100, 101, 104, 105, 106, 107, 108, 117, 124, 125, 127, 129, 131, 133, 136, 137, 139, 140, 141, 143, 146, 150, 152, 153, 154, 155, 158, 171, 172, 173, 174, 177, 185, 186, 197, 222, 232, 233, 234, 257, 279, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 316, 320, 324, 325, 326, 330, 331, 332, 333, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 384, 446, 447, 448, 449], "instens": 357, "institut": [0, 175, 179, 192, 193, 196, 221, 222, 242], "instruct": [67, 69, 73, 113, 124, 154, 158, 173, 180, 182, 276, 487], "insula": 105, "insular": [92, 115, 211], "int": [12, 37, 40, 42, 43, 44, 49, 50, 51, 52, 59, 64, 68, 78, 79, 80, 85, 87, 95, 96, 101, 102, 105, 107, 128, 155, 158, 163, 173, 195, 233, 234, 236, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 312, 313, 315, 320, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 337, 339, 344, 350, 361, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 416, 419, 420, 421, 425, 427, 428, 431, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 454, 457, 458, 459, 460, 462, 464, 465, 466, 467, 468, 471], "int32": [12, 37, 80, 87, 95, 129, 155, 158, 184, 348, 365, 366, 367, 368, 369, 370, 371], "int64": [12, 37, 51, 80, 87, 95, 102, 129, 155, 158, 184, 446, 448], "int8": [129, 155, 158, 351], "integ": [16, 60, 85, 95, 127, 133, 137, 146, 150, 153, 155, 158, 179, 184, 186, 193, 230, 236, 242, 244, 246, 248, 249, 251, 252, 255, 256, 275, 277, 303, 304, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 425, 427, 428, 433, 434, 435, 437, 438, 450, 455, 456, 459], "integr": [99, 131, 146, 158, 185, 367, 473], "intel": [51, 115, 448, 454], "intellig": [0, 85, 115, 194, 196], "intend": [186, 213, 313, 353, 354], "intens": [26, 52, 65, 70, 73, 82, 89, 95, 105, 184, 185, 305, 337, 357, 361, 419, 420, 427, 433, 434, 435, 442, 449, 471, 486], "intent": 173, "intent_cod": [58, 92, 103], "intent_nam": [58, 92, 103], "intent_p1": [58, 92, 103], "intent_p2": [58, 92, 103], "intent_p3": [58, 92, 103], "inter": [101, 107, 160, 185, 186, 196, 214, 379, 381], "interact": [10, 16, 23, 49, 54, 56, 60, 101, 127, 143, 144, 148, 153, 158, 161, 163, 173, 179, 180, 181, 441, 442, 444, 489], "intercept": [44, 76, 77, 78, 80, 81, 82, 104, 108, 110, 125, 158, 170, 298, 299, 300, 301, 303, 304, 334, 335, 384], "intercept_": [298, 299, 300, 301, 303, 304], "interchang": [149, 158], "interest": [3, 6, 15, 16, 17, 24, 36, 44, 51, 53, 57, 68, 70, 71, 72, 84, 97, 99, 100, 101, 102, 106, 109, 113, 115, 118, 131, 149, 158, 159, 165, 167, 168, 170, 172, 173, 174, 175, 179, 181, 185, 186, 199, 203, 211, 240, 241, 247, 250, 252, 261, 263, 264, 265, 267, 268, 269, 270, 273, 274, 279, 281, 282, 283, 284, 286, 310, 312, 313, 343, 348, 350, 351, 355, 358, 364, 368, 398, 425, 434, 435, 437, 440, 449, 488, 489], "interestingli": 67, "interfac": [40, 64, 76, 127, 128, 149, 153, 158, 164, 172, 173, 179, 298, 299], "intermedi": [45, 69, 168, 181], "intermediari": 49, "intern": [0, 35, 40, 50, 115, 129, 158, 164, 171, 172, 173, 175, 191, 196, 223, 234, 244, 305, 306, 347, 349], "internet": [3, 51, 164, 183, 188, 489], "interpol": [10, 25, 40, 42, 43, 46, 54, 67, 76, 85, 127, 129, 135, 158, 196, 275, 352, 353, 354, 427, 428, 434, 435, 442, 461, 471], "interpret": [16, 40, 53, 70, 115, 161, 170, 171, 172, 175, 192, 193, 227, 242, 246, 248, 249, 252, 253, 256, 349, 384, 486, 489], "interrupt": 175, "intersect": [95, 185, 193, 379, 381, 382, 453], "intersect_mask": 185, "intersubject": [115, 205, 206, 207, 208, 209, 283], "interv": [66, 67, 101, 298, 299, 300, 301, 303, 304, 310, 312, 313, 357, 448, 454, 471], "intervent": [115, 159, 232], "intra": [31, 33], "intracalcarin": 92, "intracrani": 222, "intrins": [37, 115, 162, 196, 225, 227, 231, 252, 253, 256, 362], "intro": [1, 8, 67, 113, 181, 281, 320, 336, 350, 419, 422, 423, 428, 435, 440, 458, 488], "introduc": [118, 129, 130, 136, 146, 155, 158, 165, 166, 170, 173, 186, 232, 233, 240, 302, 305, 306, 320, 333, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 449], "introduct": [1, 8, 30, 113, 115, 124, 143, 158, 166, 168, 169, 173, 176, 178, 180, 186, 264, 298, 312, 313, 345, 350, 425, 434, 440, 442, 488, 489], "introductori": [1, 113, 173], "inv": 49, "invalid": [60, 111, 124, 133, 158, 369, 453], "invcov": [310, 312, 313], "invers": [6, 48, 60, 61, 99, 113, 115, 148, 158, 160, 161, 165, 172, 180, 183, 234, 239, 250, 261, 310, 312, 313, 317, 364, 369, 417, 421, 431, 432, 440, 441, 446, 488, 489], "inverse_transform": [37, 42, 44, 51, 57, 93, 99, 101, 104, 105, 106, 107, 108, 111, 116, 125, 139, 146, 155, 158, 162, 232, 305, 306, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 449, 489], "invert": [99, 106, 126, 149, 158, 172, 186, 232, 310, 312, 313, 364, 367, 370, 385, 419, 421, 425, 427, 428, 431, 433, 434, 435], "invest": 0, "investig": [72, 95, 99, 164, 212, 218, 302], "investiss": 0, "invit": 223, "involv": [67, 69, 71, 101, 115, 175, 181, 191, 240], "inward": 471, "io": [10, 18, 22, 50, 55, 64, 66, 77, 78, 80, 81, 82, 100, 102, 163, 182, 197, 201, 202, 215, 223, 247, 251, 261, 270, 443, 487], "ion": [6, 71, 228, 229, 281, 282], "ip": 53, "ipynb": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111], "ipython": [2, 4, 17, 165, 181, 487], "iq": [179, 194, 298, 299, 300, 301], "irb": 192, "irrespect": [175, 433], "is_exclud": 24, "is_us": 105, "is_valid": [118, 146, 158], "isabel": [72, 115, 204], "isbi": [50, 115, 164, 305, 306], "isbn": [115, 307, 311, 312, 313], "isf": [64, 77, 80, 102, 109], "ishai": [3, 32, 33, 39, 99, 115, 212, 264], "isin": [3, 24, 30, 32, 35, 37, 38, 99, 104, 117, 118, 275], "isnan": [46, 78, 95, 104, 107, 108], "isnul": [118, 275], "isol": [6, 70, 71, 101, 165, 175, 398], "isort": [126, 129, 158], "isotrop": [163, 196], "isovoxel": 170, "israel": 0, "issu": [50, 68, 93, 129, 130, 138, 139, 140, 141, 142, 150, 152, 153, 155, 172, 173, 175, 178, 179, 284, 342, 347], "itali": 0, "item": [10, 22, 24, 34, 66, 67, 69, 71, 72, 101, 107, 118, 128, 158, 275, 276, 277, 278, 323, 367, 379, 381], "iter": [35, 55, 69, 71, 93, 106, 146, 158, 165, 170, 196, 233, 234, 236, 298, 299, 300, 301, 303, 304, 305, 306, 339, 343, 346, 347, 350, 355, 415, 447, 448, 454], "iter_img": [2, 50, 185, 345], "iterrow": 101, "itertool": 80, "its": [2, 3, 16, 20, 27, 32, 37, 40, 42, 46, 58, 60, 67, 69, 85, 89, 90, 91, 95, 99, 101, 117, 118, 129, 135, 138, 146, 149, 151, 153, 155, 158, 159, 162, 164, 165, 166, 168, 170, 171, 172, 173, 175, 178, 179, 182, 186, 212, 239, 252, 254, 264, 275, 276, 277, 278, 298, 299, 300, 301, 303, 304, 305, 306, 307, 311, 320, 322, 327, 333, 334, 335, 337, 348, 419, 420, 421, 425, 427, 428, 431, 433, 434, 435, 436, 437, 438, 439, 445, 446, 447, 448, 449, 473, 482], "itself": [20, 35, 67, 162, 196, 232, 233, 234, 305, 306, 343, 447, 471], "ivan": [136, 143, 158], "ixar_spac": [50, 51, 52], "j": [23, 38, 42, 43, 49, 50, 51, 53, 58, 60, 68, 71, 77, 85, 100, 101, 104, 115, 118, 140, 143, 152, 158, 159, 160, 164, 166, 167, 170, 171, 179, 192, 193, 196, 198, 200, 202, 211, 213, 217, 218, 219, 220, 223, 224, 225, 226, 230, 244, 246, 247, 250, 251, 252, 254, 255, 259, 260, 262, 270, 274, 275, 277, 280, 300, 301, 305, 315, 335, 338, 361, 362, 384, 420, 461, 462, 486], "j_col": 80, "jaakkola": [115, 172, 233, 236], "jack": [115, 166, 230, 255], "jahn": 7, "jain": [0, 129, 158], "jake": [0, 146, 158], "jakob": [38, 115], "jame": [3, 32, 33, 39, 99, 115, 199, 212, 245, 264, 312, 313], "jami": [115, 222], "jan": [0, 115, 119, 158, 361, 362], "janaina": [115, 171, 181, 196], "janet": [115, 191, 240], "jani": [115, 211], "januari": [115, 124, 147, 153, 158, 159], "jaqu": [0, 119, 158], "jare": [115, 191, 240], "jargon": 95, "jason": [0, 119, 129, 143, 158], "javier": [0, 151, 158], "javitt": [115, 221], "jawhar": [0, 155, 158], "jean": [0, 50, 51, 72, 73, 115, 118, 119, 140, 143, 158, 159, 162, 164, 172, 198, 204, 211, 220, 233, 236, 270, 275, 277, 305], "jeanett": [101, 115, 165, 179, 181], "jeff": [140, 158], "jeffrei": [115, 170, 191, 240], "jehan": [143, 158], "jell": [0, 77, 115, 124, 125, 158, 315], "jenkinson": [115, 192], "jennif": [3, 32, 33, 39, 99, 115, 212, 264], "jensen": 473, "jeremi": [0, 129, 151, 158], "jerom": [0, 126, 127, 129, 136, 140, 142, 143, 144, 146, 147, 155, 158], "jess": [101, 115], "jessica": [60, 115, 195, 203, 224, 227, 243, 253, 258, 259], "jiang": [115, 159, 232], "jill": [115, 192, 195, 200, 211, 243, 246], "jimura": [29, 47, 113, 115, 217, 273, 301, 304, 435, 488], "jimura_poldrack_2012_zmap": 41, "jitsi": 487, "jn": [115, 225, 231, 252, 256], "jneurosci": [115, 170], "job": [45, 80, 118, 320, 333, 335, 384], "jobert": [72, 73, 115, 198, 204, 270], "joblib": [12, 34, 45, 50, 51, 54, 55, 56, 58, 60, 93, 124, 127, 129, 146, 149, 153, 158, 162, 233, 298, 299, 300, 301, 303, 304, 305, 306, 320, 333, 339, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 447, 448, 449, 473], "jocn": [115, 222], "jocn_a_00077": [115, 227, 253], "joe": [140, 158], "johann": [0, 146, 158], "johansen": [115, 192], "john": [0, 38, 60, 104, 115, 140, 158, 170, 172, 195, 203, 221, 222, 243, 258, 384], "johnson": [0, 125, 158], "joi": [115, 361, 362, 462], "join": [64, 76, 105, 173, 471, 487], "joint_mni_imag": 345, "jointli": [65, 173, 430, 436, 438, 439, 443, 445], "joliot": [115, 193, 242], "jon": [0, 148, 158], "jona": [0, 51, 115, 140, 158, 448, 454], "jonathan": [58, 60, 77, 115, 171, 196, 203, 224, 225, 231, 252, 256, 258, 259, 315, 361, 362, 420], "jordan": [115, 225, 231, 252, 256], "jordi": [0, 127, 158], "jorg": [115, 196, 225, 231, 252, 256], "joseph": [60, 115, 159, 195, 203, 243, 258], "joset": [115, 170], "josh": [101, 115], "joshi": [0, 115, 129, 158], "joshua": [0, 115, 148, 158, 225, 231, 252, 256], "josien": [115, 159, 232], "joulot": [0, 155, 158], "journal": [104, 115, 170, 181, 196, 211, 222, 225, 227, 231, 252, 253, 256, 384], "jp": 218, "jpg": 195, "jqueri": [152, 158], "jr": [115, 211], "js_plotting_util": [143, 158], "json": [64, 76, 101, 102, 105, 110, 118, 128, 158, 323, 358, 360, 361, 362], "juan": [115, 195, 243], "judg": [35, 87], "judith": [115, 195, 243], "juelich": [152, 158, 188, 249], "juli": [115, 123, 158, 159, 362], "julia": [0, 131, 146, 158], "julich": [115, 214], "julien": [73, 115, 198, 270], "julio": [0, 125, 158], "junction": 60, "june": [115, 136, 139, 142, 151, 158, 171, 181], "jung": [115, 195, 243], "jupyt": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 144, 146, 158, 165, 181, 186, 320, 333, 441, 442, 443, 444, 445, 457, 459, 486], "just": [3, 4, 6, 15, 17, 22, 40, 42, 44, 46, 51, 52, 53, 58, 60, 66, 67, 71, 72, 76, 77, 78, 80, 82, 88, 92, 99, 101, 102, 103, 111, 117, 135, 158, 163, 165, 172, 175, 181, 182, 186, 320, 333, 338, 355, 358, 361, 433, 434, 435, 442, 459, 461, 471, 486], "justifi": 0, "justin": [115, 362], "juxtaposit": 92, "j\u00fclich": 0, "k": [0, 10, 19, 23, 31, 33, 35, 36, 43, 44, 51, 53, 68, 82, 85, 92, 99, 111, 115, 129, 158, 165, 168, 170, 172, 192, 211, 234, 262, 280, 298, 299, 300, 301, 303, 304, 312, 313, 320, 329, 338, 361, 362, 368, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 421, 425, 427, 428, 431, 433, 434, 435, 446, 461, 473], "k4jp8": 215, "k_init": 446, "kabani": [115, 193], "kahn": [51, 115, 448, 454], "kahnt": [115, 170], "kai": [0, 115, 129, 158, 166], "kaleido": [10, 153, 158, 436, 438, 439, 486, 487], "kalyanam": [115, 195, 243], "kamalak": [53, 100, 115, 202, 247], "kamalakar": [0, 122, 131, 133, 136, 140, 141, 143, 146, 150, 158], "kamiel": [115, 221], "kamil": [115, 192], "kamitani": [42, 43, 115, 218, 274], "kanaan": [0, 49, 136, 158], "kaplan": [115, 221], "kardiom": 0, "karl": [115, 228], "karla": [115, 159, 192, 227, 253], "karlsgodt": [115, 262, 280], "kate": [115, 221, 227, 253], "kathmandu": 0, "katovich": [115, 171], "katrin": 115, "keep": [3, 32, 34, 35, 37, 40, 52, 53, 56, 60, 67, 69, 70, 85, 87, 95, 99, 104, 105, 118, 122, 125, 127, 143, 150, 158, 163, 165, 166, 167, 170, 171, 173, 222, 275, 297, 299, 303, 304, 305, 338, 344, 357, 359, 376, 377, 378, 379, 380, 381, 382, 449, 450, 461, 462], "keep_masked_label": [51, 58, 92, 126, 158, 368, 452, 473], "keep_masked_map": [54, 55, 56, 126, 158, 369, 453, 473], "kei": [15, 56, 60, 67, 80, 103, 117, 118, 126, 158, 160, 173, 181, 184, 193, 240, 242, 243, 244, 245, 248, 249, 253, 256, 265, 271, 275, 298, 299, 300, 301, 307, 311, 316, 320, 327, 329, 333, 335, 359, 360, 384, 395, 398, 420, 430, 443, 459, 465, 466, 467], "keith": [101, 115], "keller": [115, 305], "kelli": [60, 115, 196, 203, 213, 221, 224, 258, 259, 361, 362], "kendrick": [115, 166], "kennedi": [115, 200, 211, 246], "kent": [115, 195, 243], "kept": [15, 118, 126, 158, 173, 238, 248, 249, 298, 299, 300, 301, 337, 338, 355, 373, 376, 377, 378, 379, 380, 381, 382, 449, 451, 457, 461], "keribin": [51, 115], "kern": 172, "kernel": [3, 30, 34, 35, 36, 46, 57, 95, 99, 165, 196, 299, 301, 304, 324, 325, 326, 330, 331, 332], "kevin": [0, 125, 158], "keyword": [16, 99, 118, 146, 158, 168, 172, 186, 234, 240, 275, 285, 323, 338, 349, 360, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 424, 425, 426, 427, 428, 430, 432, 433, 434, 435, 437, 438, 439, 443, 461], "kfold": [35, 37, 38, 42, 46, 303, 304], "khale": [115, 361, 362, 462], "khanuja": [115, 221], "khorshidi": [115, 159, 192], "kiar": [0, 146, 158], "kiefer": [115, 171], "kiehl": [115, 195, 243], "kiesling": [0, 125, 158], "kill": 67, "kim": [0, 129, 158], "kimberli": [115, 227, 253], "kind": [3, 17, 30, 49, 52, 56, 58, 60, 80, 111, 117, 139, 158, 159, 163, 166, 172, 179, 232, 471, 486], "kindli": [50, 93, 182, 211], "king": [0, 115, 140, 143, 158, 221], "kingston": 0, "kit": 196, "klass": 40, "klein": 115, "kleinschmidt": [50, 115, 159, 164, 232, 305], "kline": 221, "klingenberg": [115, 171], "kmean": [153, 155, 158, 162, 180, 185, 320, 329, 446, 447], "kmeans_count": 51, "kmeans_labels_img": 51, "kmeans_parcel": 51, "knive": 186, "knop": [115, 181], "know": [7, 22, 85, 118, 172, 173, 175, 179, 239, 277], "knowledg": [60, 116, 160, 175, 371, 473], "known": [7, 12, 23, 34, 35, 40, 101, 110, 149, 165, 166, 170, 173, 175, 177, 226, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 310, 312, 313, 320, 420], "knutson": [115, 171], "kochunov": [115, 230, 255], "kodibagkar": [0, 126, 158], "kodituwakku": [115, 195, 243], "koen": [0, 155, 158], "koji": [115, 217], "koller": [115, 172], "kollokian": [115, 193], "komesu": [115, 195, 243], "koneru": [115, 211], "kong": [115, 225, 252], "konrad": [0, 126, 158], "konstantin": [0, 119, 158], "koplewicz": [115, 221], "korea": 0, "kosha": [58, 115, 361, 362], "kossaifi": [0, 119, 158], "kouw": [115, 200, 246], "kr": 0, "krain": 115, "kriegeskort": [115, 170, 181, 302], "krienen": [115, 225, 231, 252, 256], "krish": [0, 127, 158], "kristin": 115, "krzysztof": [115, 118, 202, 220, 247, 275, 277], "kshitij": [0, 143, 144, 145, 146, 147, 148, 149, 158], "kth": [3, 17, 30], "kuba": [115, 213], "kumari": [0, 129, 158], "kun": [0, 129, 155, 158], "kwarg": [12, 19, 50, 60, 72, 125, 127, 128, 129, 146, 158, 240, 323, 338, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 380, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 421, 424, 425, 427, 428, 430, 431, 432, 433, 434, 435, 437, 438, 439, 446, 448, 461, 468], "kwarg_image_filt": 275, "kxm045": [115, 159], "l": [3, 7, 10, 15, 31, 32, 33, 38, 39, 43, 46, 53, 58, 60, 70, 71, 95, 99, 115, 126, 146, 153, 158, 159, 165, 166, 171, 181, 192, 193, 196, 203, 211, 212, 222, 224, 225, 226, 227, 230, 231, 240, 242, 252, 253, 255, 256, 258, 259, 260, 264, 320, 333, 361, 362, 385, 387, 388, 389, 390, 391, 392, 393, 394, 413, 419, 421, 425, 427, 428, 431, 433, 434, 435, 459, 465, 466, 486], "l1": [35, 45, 115, 166, 167, 171, 172, 233, 236, 298, 299, 300, 303, 304], "l1_ratio": [46, 303, 304], "l2": [32, 35, 40, 166, 167, 298, 300, 446, 447, 448], "la": 0, "la5c": [262, 280], "lab": 0, "label": [2, 6, 10, 16, 19, 23, 24, 30, 31, 32, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 49, 50, 51, 54, 55, 56, 60, 63, 66, 67, 68, 84, 88, 92, 95, 97, 99, 101, 104, 105, 108, 111, 113, 115, 117, 124, 125, 127, 128, 135, 138, 143, 146, 150, 151, 153, 155, 156, 158, 160, 162, 165, 166, 168, 170, 173, 179, 184, 185, 186, 193, 195, 202, 203, 211, 212, 214, 218, 219, 223, 225, 230, 231, 240, 242, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 258, 260, 264, 274, 298, 299, 300, 301, 302, 303, 304, 316, 320, 323, 327, 329, 334, 358, 361, 362, 365, 368, 372, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 419, 420, 421, 425, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 469, 478, 488], "label_": 72, "label_binar": 40, "label_hemispher": [49, 416], "label_idx": 92, "label_imag": 49, "label_image_left": 49, "label_image_right": 49, "label_map": 458, "label_multi": 40, "label_names_": 111, "label_seed_region": 24, "label_top": [385, 387, 388], "labelbinar": 40, "labelencod": [40, 100], "labelpad": 70, "labels_": [320, 446, 448], "labels_affin": 49, "labels_img": [24, 49, 51, 58, 87, 92, 95, 111, 160, 365, 368, 372, 416, 450, 452, 455, 473], "labels_img_": [51, 162, 365, 368, 447], "labels_list": 416, "labels_mask": [40, 111], "laboratori": 0, "laci": [115, 230, 255], "lack": [127, 158], "ladouceur": [115, 181], "lag": [6, 49, 66, 67], "lag_cor": 49, "lag_correl": 49, "lag_correlation_matrix": 49, "lainhart": [115, 191, 240], "laird": [115, 227, 253], "lambda": 118, "lambertz": [72, 115, 204], "lan": [0, 140, 143, 158], "lancast": [115, 230, 255], "landeau": [115, 193, 242], "lane": [0, 115, 155, 158, 384], "lang": [115, 191, 211, 240], "lang_beta_seri": 101, "lang_corr": 101, "lang_seed_beta_seri": 101, "languag": [53, 72, 101, 102, 110, 115, 118, 188, 198, 204, 257, 267, 270], "language_connectivity_img": 101, "languageloc": [101, 102, 110], "languagelocalizer_desc": [101, 102, 110], "lannuzel": [140, 143, 158], "lapack": [138, 158, 172], "lar": 306, "larg": [3, 31, 32, 37, 41, 43, 50, 51, 56, 58, 66, 70, 71, 73, 93, 115, 118, 144, 158, 162, 165, 166, 167, 168, 170, 172, 173, 175, 179, 180, 181, 184, 186, 198, 213, 220, 270, 275, 277, 320, 322, 327, 366, 369, 376, 377, 378, 379, 380, 381, 415, 447, 473], "larger": [53, 76, 81, 87, 100, 164, 166, 170, 172, 173, 175, 303, 304, 419, 433, 434, 435, 442], "largest": [139, 158, 172, 347, 376, 377, 378, 379, 380, 381, 382, 418], "largest_connected_compon": [139, 158], "largest_connected_component_img": [139, 158], "larri": [115, 200, 211, 246], "lars_path": 306, "larson": [0, 128, 140, 143, 144, 146, 158], "lashkari": [115, 225, 231, 252, 256], "lasso": [42, 59, 60, 115, 159, 166, 171, 172, 299, 301, 303, 304, 306], "lasso_regressor": [166, 299, 301], "lassocv": [126, 158, 298, 299, 300, 301], "lassolarscv": 42, "last": [3, 34, 36, 42, 57, 73, 145, 158, 175, 181, 182, 238, 239, 338, 345, 359, 465, 486, 487], "lat_fi": 473, "latent": [106, 179], "later": [3, 6, 10, 23, 24, 38, 40, 42, 64, 71, 92, 101, 102, 105, 111, 175, 184, 196, 246, 248, 249, 342, 416, 419, 425, 427, 428, 430, 434, 435, 436, 438, 439, 457, 473, 486], "latest": [129, 138, 158, 173, 182, 242, 362], "latex": [64, 124, 158, 182], "latter": [49, 166, 172, 232, 233, 234, 248, 249, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 449], "laumann": [60, 115, 224, 225, 252, 259, 361], "launch": [148, 158, 165], "laura": [115, 221], "lausann": 0, "law": 192, "lawrenc": [115, 230, 255], "layer": 90, "layout": [143, 158, 302, 386], "lda": 99, "le": [73, 115, 198, 270], "lead": [35, 49, 50, 59, 85, 124, 126, 127, 128, 129, 130, 149, 158, 171, 172, 173, 175, 179, 234, 308, 320, 366, 369, 460, 486], "leak": [45, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "learn": [3, 22, 35, 37, 46, 48, 58, 61, 95, 98, 104, 106, 112, 113, 115, 116, 118, 122, 124, 127, 129, 131, 136, 138, 139, 140, 141, 143, 146, 151, 153, 158, 159, 160, 161, 162, 165, 166, 167, 169, 170, 172, 173, 179, 180, 182, 187, 201, 219, 232, 233, 236, 250, 261, 264, 273, 298, 299, 300, 301, 302, 305, 306, 343, 345, 346, 350, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 397, 404, 417, 418, 419, 421, 425, 432, 433, 434, 435, 440, 447, 449, 487, 488, 489], "learner": [298, 299, 300, 301, 303, 304], "learnt": 41, "least": [67, 68, 76, 101, 104, 105, 107, 110, 115, 165, 171, 173, 242, 244, 246, 248, 249, 251, 252, 254, 255, 306, 307, 311, 320, 329, 333, 334, 335, 366, 369, 371, 373, 378, 384, 415, 487], "leav": [18, 30, 34, 40, 165, 170, 175, 342], "leave_spac": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "leaveonegroupout": [3, 30, 31, 33, 34, 40, 99, 140, 158, 165, 168, 170, 298, 299, 300, 301], "leavepgroupsout": [298, 299, 300, 301], "lebihan": [72, 115, 204], "lectur": [115, 159, 177, 181, 232], "ledoit": [60, 172], "ledoitwolf": 232, "lee": 115, "lefort": [0, 129, 151, 158], "left": [7, 10, 13, 21, 23, 24, 26, 35, 38, 42, 46, 49, 51, 52, 53, 60, 66, 67, 68, 69, 73, 77, 78, 80, 81, 87, 95, 102, 107, 110, 111, 115, 136, 137, 141, 146, 149, 151, 158, 163, 181, 185, 193, 200, 205, 206, 207, 208, 209, 210, 211, 218, 221, 240, 246, 248, 249, 254, 268, 270, 278, 283, 284, 286, 320, 333, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 419, 420, 421, 425, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 443, 445, 459, 465, 466, 473], "left_001": 101, "left_connectom": 49, "left_coord": 7, "left_data": 7, "left_fac": 7, "left_hemi": 49, "left_right": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "legaci": [267, 384], "legacy_format": [153, 156, 158], "legacy_output": [101, 102, 110, 267], "legarreta": [0, 148, 158], "legend": [10, 19, 31, 33, 35, 44, 45, 51, 60, 63, 68, 92, 128, 158, 437], "legend_guid": 19, "legibl": 111, "leipzig": 0, "lemaitr": [0, 143, 146, 158], "len": [3, 13, 23, 31, 33, 34, 35, 40, 49, 50, 53, 64, 65, 66, 67, 68, 72, 77, 80, 92, 95, 99, 102, 105, 110, 111, 118, 236, 298, 299, 300, 301, 303, 304, 305, 306, 310, 312, 313, 317, 320, 333, 350, 353, 367, 370, 376, 378, 379, 381, 447], "length": [3, 16, 57, 68, 72, 78, 129, 158, 163, 173, 247, 250, 298, 299, 300, 301, 303, 304, 307, 311, 312, 313, 324, 325, 326, 330, 331, 332, 339, 364, 367, 370, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 425, 428, 431, 432, 433, 434, 435, 447, 459, 467, 471], "leon": [0, 146, 158], "leonard": [0, 153, 158], "less": [6, 21, 40, 50, 51, 52, 58, 65, 67, 69, 72, 73, 78, 80, 89, 95, 101, 118, 143, 144, 151, 158, 170, 172, 173, 175, 182, 311, 357, 415, 489], "lessorequ": [118, 275], "lessov": [60, 115, 203, 258], "lessthan": [118, 275], "let": [2, 3, 4, 6, 7, 16, 24, 38, 40, 42, 51, 58, 65, 67, 69, 71, 73, 76, 78, 79, 80, 87, 94, 99, 103, 110, 111, 166, 173, 181, 182, 337, 349], "leticia": [115, 181], "letter": 458, "level": [6, 7, 10, 11, 15, 16, 19, 22, 34, 41, 50, 51, 52, 53, 58, 65, 70, 71, 74, 76, 83, 88, 89, 98, 106, 107, 112, 115, 124, 125, 126, 127, 128, 129, 130, 149, 150, 155, 158, 161, 162, 166, 169, 172, 173, 175, 176, 177, 179, 182, 184, 188, 190, 196, 198, 229, 232, 233, 234, 236, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 286, 287, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 312, 313, 315, 320, 323, 329, 333, 334, 335, 336, 338, 339, 343, 344, 349, 350, 354, 357, 358, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 421, 422, 423, 427, 428, 429, 433, 434, 435, 436, 437, 438, 439, 440, 442, 446, 447, 448, 449, 454, 457, 458, 459, 461, 467, 483, 486, 488, 489], "level_nam": 255, "leventh": [115, 221], "leverag": [21, 149, 158, 180, 181, 298, 299, 447, 487], "lfcd": 240, "lh": 218, "li": [90, 115, 221], "liam": [115, 211], "liau": [115, 361, 362, 462], "lib": [2, 3, 4, 10, 11, 12, 15, 16, 17, 19, 21, 22, 30, 31, 33, 35, 37, 41, 42, 44, 45, 49, 50, 51, 52, 54, 56, 59, 60, 63, 65, 71, 72, 76, 78, 79, 80, 87, 88, 89, 93, 104, 105, 106, 107, 108, 110, 111], "liber": [49, 80], "liblinear": [35, 40, 298, 300], "librari": [5, 95, 100, 117, 143, 158, 168, 173, 176, 181, 185, 477, 486, 487, 489], "licenc": [199, 245], "licens": [0, 126, 158, 242, 243, 245, 252, 256], "lie": [57, 233, 236, 368, 452], "liem": [0, 57, 144, 146, 148, 158], "life": [143, 158], "lifespan": 0, "lifetim": 194, "light": [38, 138, 144, 146, 158, 173, 335], "like": [6, 7, 10, 12, 17, 35, 37, 40, 42, 49, 51, 56, 58, 60, 67, 80, 82, 87, 90, 92, 93, 95, 101, 103, 118, 126, 146, 150, 153, 154, 155, 158, 171, 172, 173, 174, 175, 178, 179, 182, 183, 185, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 286, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 315, 317, 320, 322, 323, 333, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 364, 365, 366, 367, 368, 369, 370, 371, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 420, 425, 427, 428, 430, 431, 433, 434, 435, 436, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 467, 471, 473, 475, 486, 489], "likelihood": [55, 172, 175, 232, 307, 310, 311, 312, 313], "likelihoodmodel": [307, 310], "likelihoodmodelresult": [129, 155, 158, 312, 313], "likewis": 163, "lilla": [115, 225, 231, 252, 256], "limbic": [115, 211], "limegreen": 19, "limit": [15, 44, 76, 89, 105, 125, 158, 160, 170, 172, 173, 275, 362, 420], "linalg": [46, 49, 172], "linden": [58, 115, 362], "lindquist": [115, 143, 158, 338, 461], "line": [5, 10, 15, 22, 25, 38, 40, 50, 53, 92, 129, 158, 165, 172, 173, 182, 222, 338, 398, 441, 461, 471, 487], "line2d": [5, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421], "line_sample_point": 25, "linear": [3, 6, 30, 34, 35, 36, 38, 46, 67, 99, 104, 110, 115, 140, 158, 165, 169, 174, 175, 176, 179, 180, 185, 186, 196, 213, 236, 275, 298, 299, 300, 301, 303, 304, 305, 306, 310, 312, 313, 320, 333, 338, 352, 353, 354, 362, 384, 429, 461, 471, 472, 480, 487, 489], "linear_model": [38, 40, 42, 43, 46, 111, 306], "linear_svc": 99, "lineardiscriminantanalysi": 99, "linearli": [186, 196], "linearsegmentedcolormap": [389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 419, 420, 421, 425, 431, 433, 434, 441], "linearsvc": [53, 99, 100, 170, 298, 300], "linestyl": 53, "linewidth": [15, 19, 22, 44, 45, 50, 52, 63, 92, 433, 434, 441], "lingual": [92, 473], "lingual_l": 193, "link": [54, 115, 118, 126, 136, 143, 148, 158, 161, 165, 168, 173, 175, 179, 182, 192, 202, 221, 242, 247, 386, 396, 397, 421, 489], "linkag": 432, "linspac": [5, 51, 63, 68], "lint": [128, 158, 173, 182], "linter": [129, 158, 173], "linux": 182, "liotti": [115, 230, 255], "liquid": 0, "lisandrelli": [115, 201, 261], "list": [0, 2, 3, 6, 10, 15, 16, 17, 22, 24, 31, 34, 40, 46, 49, 50, 51, 53, 55, 57, 60, 63, 64, 71, 72, 73, 76, 77, 80, 81, 86, 95, 100, 101, 102, 105, 110, 111, 117, 118, 124, 126, 127, 128, 129, 130, 131, 134, 136, 137, 138, 142, 143, 146, 152, 153, 155, 156, 158, 159, 165, 173, 181, 182, 184, 185, 186, 193, 195, 211, 214, 218, 220, 225, 230, 232, 233, 234, 236, 238, 239, 240, 242, 243, 246, 248, 249, 250, 251, 252, 254, 255, 257, 258, 261, 262, 264, 267, 268, 269, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 285, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 315, 317, 318, 320, 322, 323, 327, 333, 334, 335, 336, 338, 339, 347, 348, 350, 353, 355, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 426, 429, 430, 432, 433, 436, 437, 438, 439, 444, 445, 447, 449, 450, 451, 452, 453, 458, 459, 461, 469, 470, 487, 490], "list_of_2d_arrai": 43, "listedcolormap": 40, "listen": [6, 67, 69, 70, 82, 270], "listening_gt_rest_eff_map": 6, "listening_gt_rest_z_map": 6, "liter": [333, 335], "literatur": [101, 160, 226, 240, 344, 362, 462], "littl": [76, 165, 166, 173], "liu": [115, 196, 225, 231, 252, 256, 361, 362, 462], "livio": [77, 115, 315], "ll": [2, 6, 51, 60, 303, 304], "llc": 0, "llera": [115, 361, 362], "llf": 310, "lloyd": [38, 115], "llrrrrl": 64, "lo": 0, "load": [2, 4, 6, 9, 10, 22, 24, 28, 51, 52, 54, 55, 56, 60, 63, 64, 69, 70, 72, 78, 89, 90, 92, 94, 105, 106, 107, 108, 109, 110, 111, 113, 116, 124, 125, 126, 129, 130, 136, 138, 141, 143, 152, 153, 155, 158, 161, 164, 168, 169, 172, 173, 181, 183, 185, 213, 222, 240, 241, 244, 246, 248, 249, 250, 253, 254, 258, 259, 260, 261, 264, 265, 266, 269, 270, 273, 274, 275, 277, 279, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 305, 306, 323, 337, 348, 349, 351, 361, 362, 421, 438, 440, 441, 445, 463, 467, 469, 470, 478, 486, 488, 489], "load_confound": [58, 67, 110, 125, 126, 127, 129, 153, 158, 160, 186, 323, 362], "load_confounds_strategi": [58, 127, 153, 158, 160, 186, 361], "load_fsaverag": [10, 23, 24, 38, 69, 110, 111, 129, 158, 205, 206, 207, 208, 209, 210, 283, 467], "load_fsaverage_data": [10, 23, 24, 38, 69, 110, 111, 129, 158, 205, 206, 207, 208, 209, 210, 283], "load_img": [2, 37, 40, 94, 95, 103, 109, 136, 158, 184, 185], "load_mni152_brain_mask": [105, 136, 152, 158, 213, 265], "load_mni152_gm_mask": [152, 158, 213, 265], "load_mni152_gm_templ": [152, 158, 213, 265, 289, 291, 293], "load_mni152_templ": [94, 152, 158, 213, 265, 266, 288, 290, 293, 337, 340, 345, 349, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 471], "load_mni152_wm_mask": [152, 158, 213, 265], "load_mni152_wm_templ": [152, 158, 213, 265, 290, 291, 292], "load_niimg": [144, 158], "load_nki": [24, 111, 129, 158, 221], "load_sample_motor_activation_imag": [10, 14, 15, 16, 17, 91, 94, 125, 158, 467], "load_surf_data": [138, 158], "load_surf_mesh": [138, 155, 158, 486], "loadtxt": [42, 43], "lobe": [71, 255], "lobul": [92, 115, 211], "loc": [19, 33, 35, 44, 45, 51, 63, 68, 70, 92, 101, 102, 385, 387, 388], "local": [22, 42, 43, 51, 62, 66, 67, 74, 77, 78, 80, 81, 82, 89, 98, 101, 102, 105, 109, 110, 112, 113, 115, 146, 147, 155, 158, 173, 174, 175, 179, 182, 184, 186, 188, 192, 218, 225, 240, 248, 249, 252, 257, 267, 268, 269, 270, 271, 274, 275, 277, 302, 343, 355, 358, 364, 370, 384, 412, 426, 427, 435, 440, 488], "local_region": [52, 163, 449, 451], "localis": [115, 179, 335, 384], "localizer_anat_filenam": 18, "localizer_dataset": [18, 78, 82, 107, 108], "localizer_ev": 73, "localizer_first_level": [66, 67, 69], "localizer_tmap_filenam": 18, "locat": [11, 16, 23, 24, 26, 30, 31, 33, 34, 35, 36, 37, 42, 43, 44, 49, 51, 54, 55, 56, 57, 58, 60, 64, 70, 76, 78, 86, 90, 92, 93, 95, 96, 102, 104, 107, 110, 143, 152, 158, 172, 175, 182, 184, 202, 236, 242, 258, 260, 261, 302, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 473, 486], "lock": [142, 158], "log": [46, 51, 55, 78, 80, 95, 129, 133, 158, 170, 172, 307, 310, 311, 312, 313, 349, 429], "log10": [37, 44, 46, 78, 80, 95, 104, 107, 108, 335, 384, 458], "log_": [44, 104, 107, 108], "log_img": 349, "log_p_valu": 95, "log_p_values_img": 95, "logan": [115, 171], "logarithm": [78, 80, 335], "logger": [129, 158], "logic": [95, 118, 173, 297], "logical_and": [95, 104], "logical_not": [31, 37, 78, 107], "logical_or": 31, "logilab": 0, "logist": [31, 32, 115, 166, 167, 171, 298, 300, 303, 304], "logistic_l1": [31, 166, 298, 300], "logistic_l2": [31, 40, 166, 298, 300], "logisticregressioncv": [40, 126, 158, 298, 299, 300, 301], "logl": [307, 310, 311, 312, 313], "loglf": [307, 311], "loglikelihood": [307, 311], "logo_cv": 40, "logp_max_mass": [80, 335, 384], "logp_max_s": [80, 335, 384], "logp_max_t": [80, 107, 335, 384], "logp_max_tfc": [107, 335, 384], "loic": [0, 119, 120, 122, 123, 131, 133, 136, 146, 158], "loki": 45, "lokybackend": [32, 37, 38, 44, 45, 46, 50, 104, 107], "london": [0, 115, 179, 262, 280], "long": [51, 118, 173, 175, 361, 362, 420], "longer": [45, 106, 122, 124, 125, 126, 127, 140, 144, 146, 149, 151, 153, 155, 158, 175], "longest": 67, "look": [1, 6, 8, 10, 23, 24, 30, 33, 42, 46, 58, 66, 67, 69, 70, 73, 103, 106, 111, 113, 118, 129, 143, 144, 154, 156, 158, 165, 173, 174, 175, 181, 182, 186, 201, 242, 244, 246, 248, 249, 251, 252, 254, 255, 264, 275, 277, 285, 355, 428, 440, 488], "loop": [35, 40, 46, 71, 101, 149, 158, 165, 172, 185, 298, 299, 300, 301], "loos": 172, "lorocv": 170, "lorrain": [115, 170], "lose": [15, 96, 486], "loss": [162, 167, 303, 362], "loss_pass": 186, "lost": 172, "lot": [66, 71, 72, 87, 122, 143, 146, 158, 159, 165, 166, 172, 173, 181, 236], "loui": [115, 196, 213], "love": 3, "low": [10, 44, 67, 71, 95, 106, 115, 130, 143, 149, 158, 165, 171, 172, 173, 175, 181, 182, 184, 185, 186, 229, 240, 283, 286, 287, 294, 298, 299, 300, 301, 303, 304, 305, 306, 338, 361, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 428, 430, 443, 447, 449, 460, 461], "low_pass": [34, 51, 53, 54, 55, 56, 57, 58, 60, 63, 90, 92, 93, 100, 101, 143, 158, 186, 298, 299, 300, 301, 303, 304, 305, 306, 338, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 447, 449, 460, 461, 473], "lower": [19, 32, 33, 40, 41, 53, 70, 78, 90, 95, 102, 133, 158, 164, 167, 171, 172, 179, 185, 232, 238, 239, 298, 299, 300, 301, 310, 312, 313, 378, 381, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 418, 419, 420, 424, 425, 427, 428, 430, 431, 432, 433, 434, 435, 436, 438, 439, 460], "lower_cutoff": [90, 378, 381], "lowest": [145, 158], "lprojector": [15, 399, 413], "lr": [15, 17, 320, 333, 390, 413, 421, 427, 431, 459, 486], "lrprojector": [15, 413], "lsa_beta_map": 101, "lsa_events_df": 101, "lsa_glm": 101, "lss": [127, 158], "lss_beta_map": 101, "lss_design_matric": 101, "lss_events_df": 101, "lss_glm": 101, "lss_transform": 101, "lt": [37, 76, 90, 92, 93, 110, 472, 473], "luc": [72, 115, 204], "luca": [115, 171, 196], "lucina": 115, "luisa": [0, 146, 150, 152, 158], "luke": [0, 151, 158], "lunch": 166, "lund": 0, "lut": [173, 242, 244, 246, 248, 249, 251, 252, 254, 255], "luz": 0, "lw": [42, 70], "ly": 449, "lyon": 0, "lyr": [15, 320, 333, 391, 413, 421, 427, 431, 459, 486], "lyrprojector": [15, 393, 413], "lyrz": [14, 15, 60, 320, 333, 392, 413, 421, 427, 431, 459, 486], "lyrzprojector": [15, 394, 413], "lyttelton": [115, 196, 244], "lzr": [15, 55, 320, 333, 393, 413, 421, 427, 431, 459, 486], "lzrprojector": [15, 391, 413], "lzry": [15, 320, 333, 394, 413, 421, 427, 431, 459, 486], "lzryprojector": [15, 392, 413], "m": [3, 13, 31, 32, 33, 39, 43, 51, 60, 67, 71, 76, 99, 101, 104, 115, 136, 158, 159, 170, 173, 179, 181, 182, 192, 193, 196, 200, 202, 203, 205, 206, 207, 208, 209, 211, 212, 223, 224, 225, 227, 230, 231, 242, 246, 251, 252, 253, 255, 256, 258, 259, 262, 264, 280, 283, 310, 312, 313, 335, 384, 487], "m_cmap": 13, "ma": [21, 37, 42, 50, 52, 108], "maarten": [115, 221, 361, 362], "mac": [133, 158], "macaluso": [115, 196], "macau": 0, "mach": [51, 115, 448, 454], "machin": [0, 30, 35, 46, 51, 95, 116, 150, 158, 166, 167, 168, 173, 179, 180, 201, 273, 487, 489], "machlouzarid": [115, 202, 247], "macintosh": [115, 192], "mackai": [115, 192, 227, 253], "mackinnon": [115, 312, 313], "maco": [129, 158], "macro": [115, 305], "macroscop": [115, 193, 242], "made": [0, 22, 40, 102, 110, 125, 149, 152, 153, 158, 169, 172, 173, 175, 179, 181, 182, 222, 228, 298, 299, 300, 301, 303, 304, 384, 442, 489], "madhyastha": [140, 143, 158], "magenta": [42, 70, 486], "magic": [58, 92, 103, 419, 427, 428, 430, 434, 435], "magnet": [0, 115, 175, 179, 191, 196, 211, 244, 270], "magnetoencephalographi": 179, "magnetom": 228, "magnitud": [179, 423], "maguir": [115, 211], "mai": [3, 18, 30, 45, 51, 58, 65, 67, 72, 73, 81, 87, 101, 105, 115, 117, 118, 122, 144, 146, 154, 158, 159, 165, 166, 168, 173, 175, 179, 184, 186, 192, 198, 232, 240, 270, 275, 284, 299, 304, 308, 323, 327, 335, 353, 360, 362, 366, 368, 369, 384, 436, 438, 439, 452, 458, 471], "main": [7, 31, 58, 64, 67, 68, 71, 95, 120, 155, 158, 165, 170, 173, 174, 179, 182, 184, 186, 242, 320, 322, 327, 358, 379, 381, 386], "main_deriv": 68, "main_path": 358, "mainli": 172, "maint": [123, 124, 125, 126, 127, 128, 129, 131, 133, 136, 137, 138, 140, 143, 146, 148, 151, 152, 153, 154, 155, 158, 173], "maintain": [0, 124, 146, 152, 158, 173, 182], "mainten": [153, 158], "mairal": 202, "major": [56, 95, 173, 181, 227], "make": [4, 6, 9, 16, 23, 24, 28, 31, 37, 40, 43, 49, 51, 53, 58, 60, 67, 68, 69, 70, 71, 76, 78, 80, 81, 85, 99, 106, 113, 115, 118, 124, 126, 127, 128, 129, 131, 132, 137, 143, 151, 152, 153, 155, 158, 163, 165, 166, 170, 171, 174, 178, 179, 180, 181, 184, 186, 222, 246, 254, 264, 275, 286, 287, 295, 298, 299, 300, 301, 303, 304, 308, 353, 388, 389, 390, 391, 392, 393, 394, 396, 398, 399, 401, 403, 405, 407, 409, 411, 427, 430, 435, 437, 439, 440, 441, 442, 443, 445, 446, 467, 471, 486, 487, 488], "make_first_level_design_matrix": [63, 65, 71, 130, 153, 158, 174, 320, 426], "make_glm_report": [34, 63, 64, 76, 124, 150, 153, 158, 360], "make_localizer_contrast": 67, "make_pipelin": [38, 42, 46, 111], "make_second_level_design_matrix": [79, 178], "make_xi": 273, "makri": [115, 200, 211, 246], "male": [67, 211, 240], "manag": [126, 127, 158, 173, 182, 487], "mandatori": [172, 338], "mani": [3, 4, 12, 16, 24, 37, 39, 41, 43, 44, 45, 50, 51, 53, 58, 71, 80, 87, 95, 99, 100, 101, 108, 118, 151, 158, 161, 162, 163, 165, 166, 167, 168, 171, 172, 173, 175, 179, 182, 185, 186, 234, 275, 277, 298, 299, 300, 301, 302, 335, 342, 371, 384, 430, 455, 456, 471, 486], "manipul": [1, 8, 40, 57, 67, 90, 117, 138, 158, 181, 184, 264, 285, 355, 428, 440, 488, 489], "manner": [181, 427], "mannheim": 0, "manon": [0, 155, 158], "manual": [16, 17, 20, 35, 36, 37, 42, 43, 44, 49, 53, 54, 55, 56, 57, 58, 60, 63, 70, 82, 84, 90, 92, 93, 97, 99, 100, 101, 104, 105, 106, 107, 108, 113, 117, 159, 165, 181, 183, 186, 264, 305, 306, 343, 348, 350, 351, 355, 364, 368, 425, 434, 435, 436, 438, 439, 440, 486, 488, 489], "map": [2, 3, 7, 9, 12, 15, 16, 20, 21, 23, 24, 28, 34, 38, 41, 46, 48, 52, 53, 54, 55, 56, 58, 61, 63, 64, 67, 69, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 84, 85, 88, 90, 91, 92, 93, 94, 97, 98, 100, 102, 104, 106, 110, 111, 112, 113, 115, 116, 125, 126, 127, 128, 129, 130, 131, 135, 138, 139, 143, 144, 146, 149, 150, 151, 153, 156, 158, 159, 160, 161, 164, 166, 168, 169, 170, 173, 174, 175, 176, 179, 180, 181, 184, 185, 186, 193, 195, 196, 198, 199, 202, 204, 205, 206, 207, 208, 209, 211, 213, 214, 219, 223, 225, 227, 230, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 261, 265, 268, 269, 270, 275, 276, 277, 278, 279, 283, 286, 287, 288, 295, 298, 299, 300, 301, 302, 303, 304, 305, 306, 315, 316, 320, 329, 333, 335, 336, 338, 340, 346, 355, 357, 360, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 418, 420, 427, 428, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 453, 456, 458, 459, 461, 467, 471, 472, 478, 482, 488, 489], "map_label": 12, "map_left": [10, 23, 24, 111, 200, 254, 486], "map_nam": [333, 335], "map_right": [10, 23, 24, 111, 200, 254], "map_typ": [109, 275], "maps_img": [49, 54, 55, 56, 160, 186, 365, 366, 368, 369, 373, 417, 433, 449, 451, 453, 456, 473], "maps_img_": [366, 369, 373], "maraviglia": [115, 196], "march": [121, 141, 150, 158, 302], "marcu": [115, 170, 192, 222, 362], "marek": [115, 226, 260], "margaret": [115, 221], "margeta": [0, 119, 158], "margin": [53, 353], "marginali": 473, "marguli": [115, 118, 220, 275, 277], "mari": [115, 181], "mariano": [72, 115, 204], "mario": [115, 230, 255], "marisa": [115, 225, 231, 252, 256], "mark": [42, 58, 101, 115, 159, 192, 361, 362], "markdown": 196, "marked_pixel": 42, "markedli": 70, "marker": [42, 128, 144, 146, 149, 151, 158, 173, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 421, 431, 441, 442, 444, 449, 451, 489], "marker_color": [16, 42, 57, 63, 101, 144, 146, 158, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 444, 486], "marker_coord": [57, 63, 101, 144, 146, 158, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 444], "marker_label": [151, 158, 444], "marker_s": [16, 42, 57, 63, 101, 144, 146, 158, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 444, 486], "markiewicz": [0, 146, 158], "marquand": [115, 181], "marseil": 0, "martha": [115, 211], "marti": [104, 115, 230, 255, 384], "martigni": 0, "martin": [0, 115, 131, 136, 150, 158, 195, 200, 205, 206, 207, 208, 209, 213, 243, 283, 338, 461], "martino": 115, "masa": [42, 43, 115, 218, 274], "mask": [3, 4, 9, 16, 21, 24, 28, 30, 31, 32, 34, 35, 36, 40, 41, 42, 44, 45, 46, 49, 50, 51, 52, 56, 57, 58, 60, 70, 72, 76, 78, 80, 84, 92, 93, 97, 106, 107, 108, 110, 113, 116, 118, 124, 125, 127, 129, 130, 136, 137, 138, 140, 143, 146, 149, 151, 152, 153, 158, 162, 166, 169, 171, 180, 181, 183, 184, 196, 198, 204, 212, 213, 218, 233, 240, 242, 261, 263, 264, 265, 266, 270, 274, 288, 289, 292, 298, 299, 300, 301, 302, 303, 304, 305, 306, 315, 317, 320, 333, 335, 336, 337, 338, 339, 343, 344, 345, 348, 350, 351, 355, 357, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 418, 419, 420, 425, 427, 429, 430, 434, 435, 440, 447, 448, 449, 451, 452, 453, 454, 457, 459, 461, 471, 472, 473, 478, 486, 488, 489], "mask_": [303, 304], "mask_arg": [90, 93, 186, 305, 306, 367, 370, 447, 473], "mask_atla": 95, "mask_chance_scor": 33, "mask_data": [24, 95], "mask_fac": [19, 33, 117, 184, 212, 264], "mask_face_filenam": 19, "mask_face_littl": [117, 184, 212, 264], "mask_filenam": [3, 31, 33, 36, 41, 99, 104, 117, 165], "mask_hous": [19, 33, 117, 184, 212, 264], "mask_house_filenam": 19, "mask_house_littl": [117, 184, 212, 264], "mask_img": [12, 26, 30, 33, 34, 35, 36, 37, 40, 41, 42, 43, 46, 51, 54, 55, 56, 58, 60, 67, 70, 72, 76, 80, 90, 92, 93, 99, 104, 105, 117, 126, 140, 144, 148, 149, 153, 158, 165, 170, 173, 185, 186, 288, 302, 315, 320, 323, 333, 336, 337, 338, 344, 357, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 382, 383, 418, 420, 430, 448, 449, 451, 452, 453, 454, 455, 456, 471, 473], "mask_img_": [51, 67, 78, 80, 90, 93, 117, 186, 298, 299, 300, 301, 303, 304, 305, 306, 365, 367, 368, 370, 374], "mask_label": [12, 420], "mask_nam": 33, "mask_quality_check": [78, 107], "mask_roi": 218, "mask_scor": 33, "mask_strategi": [50, 90, 93, 106, 146, 152, 158, 186, 298, 299, 300, 301, 305, 306, 367, 370, 447, 473], "mask_typ": [50, 377, 380], "mask_vt": [3, 16, 17, 19, 31, 33, 40, 95, 99, 117, 165, 184, 212, 264], "mask_vt_filenam": [19, 95], "mask_vt_load": 40, "masked_atla": [127, 158, 452], "masked_data": [26, 100, 111, 185], "masked_less": [42, 108], "masked_pv": 108, "masked_scores_": 302, "maskedarrai": [3, 17, 30], "masker": [33, 34, 36, 37, 40, 42, 43, 44, 49, 51, 53, 54, 55, 56, 57, 58, 60, 63, 70, 80, 90, 92, 93, 95, 98, 99, 100, 101, 104, 105, 106, 107, 108, 112, 113, 117, 123, 124, 125, 126, 127, 128, 129, 130, 131, 146, 149, 150, 151, 152, 153, 155, 158, 160, 162, 165, 168, 173, 174, 183, 185, 232, 254, 286, 287, 294, 298, 299, 300, 301, 303, 304, 305, 306, 320, 333, 335, 361, 362, 384, 429, 432, 436, 440, 447, 448, 449, 452, 453, 455, 456, 467, 488, 489], "masker_": [51, 64, 67, 78, 80, 298, 299, 300, 301, 303, 304, 305, 306, 447], "mason": 0, "mass": [0, 60, 80, 155, 158, 335, 384, 416, 458], "mass_univari": [44, 80, 104, 107, 149, 155, 158, 170, 178], "massachusett": 0, "massimiliano": [115, 171, 196], "massiv": [98, 112, 113, 169, 264, 269, 270, 343, 345, 350, 364, 370, 384, 412, 427, 435, 440, 480, 488, 489], "master": [182, 252], "mat": [64, 363, 432], "match": [2, 6, 16, 103, 105, 118, 125, 126, 127, 128, 146, 150, 151, 153, 158, 164, 170, 173, 179, 183, 186, 227, 242, 253, 275, 297, 298, 299, 300, 301, 303, 304, 305, 306, 320, 323, 333, 335, 339, 348, 350, 353, 358, 360, 361, 365, 366, 367, 368, 369, 370, 376, 378, 379, 381, 433, 447, 450, 489], "math": 102, "math_img": [78, 80, 84, 86, 97, 98, 109, 112, 113, 128, 129, 134, 158, 185, 241, 295, 348, 350, 351, 435, 440, 488], "mathbf": 46, "mathemat": [0, 134, 158, 179, 349, 475], "mathia": [0, 125, 158], "mathieu": [0, 126, 158], "matlotlib": 421, "matplolib": 10, "matplotlib": [5, 6, 9, 10, 12, 16, 19, 25, 26, 28, 31, 33, 36, 39, 40, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 70, 76, 79, 80, 81, 85, 92, 95, 100, 101, 102, 107, 108, 111, 113, 122, 126, 127, 128, 133, 138, 140, 141, 143, 146, 148, 153, 154, 158, 160, 165, 185, 366, 368, 369, 370, 371, 372, 373, 374, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 449, 486, 487, 488], "matplotlibdeprecationwarn": [2, 16, 19, 31, 37, 42, 44, 45, 50, 88, 104, 108], "matric": [3, 9, 28, 43, 49, 52, 53, 58, 62, 71, 72, 74, 81, 100, 113, 129, 131, 136, 139, 140, 150, 151, 153, 158, 159, 160, 161, 172, 174, 183, 184, 185, 187, 188, 196, 202, 232, 233, 234, 236, 239, 272, 310, 312, 313, 320, 327, 353, 423, 424, 432, 436, 438, 439, 440, 484, 488, 489], "matrix": [6, 23, 34, 38, 42, 43, 46, 49, 52, 53, 55, 63, 64, 65, 67, 69, 70, 71, 72, 75, 76, 77, 78, 80, 81, 82, 83, 85, 92, 93, 101, 102, 103, 105, 107, 110, 113, 124, 125, 129, 130, 141, 146, 149, 158, 162, 163, 165, 166, 172, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 204, 232, 233, 234, 235, 236, 237, 239, 263, 275, 277, 298, 299, 300, 301, 303, 304, 305, 306, 307, 310, 311, 312, 313, 318, 320, 321, 327, 329, 333, 334, 335, 340, 350, 351, 353, 356, 360, 363, 364, 367, 370, 376, 378, 379, 381, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 422, 423, 424, 432, 446, 447, 448, 459, 472, 488, 489], "matter": [12, 25, 44, 45, 58, 67, 76, 90, 136, 149, 152, 158, 165, 170, 172, 173, 178, 180, 185, 186, 196, 213, 222, 261, 265, 266, 279, 286, 289, 290, 291, 292, 293, 298, 299, 300, 301, 305, 306, 323, 361, 367, 370, 377, 380, 447, 471], "matthew": [104, 115, 159, 192, 221, 384], "matthia": [0, 119, 158], "matthieu": [0, 155, 158], "matur": [60, 115, 203, 258], "maumet": [115, 118, 220, 275, 277], "maura": [3, 32, 33, 39, 99, 115, 212, 264], "maurizio": [115, 362], "max": [0, 12, 31, 35, 44, 46, 50, 51, 52, 53, 55, 57, 59, 60, 70, 81, 85, 89, 104, 105, 107, 111, 115, 151, 158, 159, 172, 232, 353, 354, 384, 388, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 419, 420, 425, 427, 428, 430, 433, 434, 435, 436, 438, 439, 442, 443, 445], "max_imag": [105, 109, 118, 275], "max_it": [41, 42, 50, 52, 59, 233, 234, 236, 298, 299, 300, 301, 303, 304], "max_iter_cv": 234, "max_n_sampl": 59, "max_no_improv": 446, "max_precis": 59, "maxim": [35, 179, 310, 312, 313, 342, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "maximilian": [0, 126, 158], "maximum": [16, 67, 80, 90, 93, 95, 103, 106, 127, 128, 146, 158, 170, 179, 186, 214, 232, 233, 234, 236, 241, 248, 249, 275, 284, 294, 298, 299, 300, 301, 305, 306, 307, 308, 311, 320, 329, 333, 335, 337, 355, 357, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 388, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 427, 447, 449, 451, 452, 486], "maxixmum": [129, 158], "maxprob": [11, 58, 92, 161, 248, 249, 489], "mayb": [67, 118, 384], "mayberg": [115, 199, 245], "mayer": [115, 195, 243], "mazoy": [115, 193, 242], "mazziotta": [115, 230, 255], "mb": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 488], "mccarthi": [115, 192], "mcgill": [0, 213], "mcgovern": 0, "mckai": [115, 227, 253], "mckinstri": [115, 196, 213], "md": [0, 252], "md5sum": 4, "mean": [3, 6, 7, 15, 16, 17, 19, 22, 23, 26, 31, 32, 33, 34, 35, 36, 37, 40, 42, 43, 44, 45, 46, 49, 51, 52, 53, 57, 58, 60, 63, 67, 70, 71, 72, 78, 84, 90, 92, 93, 95, 96, 97, 99, 103, 104, 105, 106, 111, 113, 118, 130, 136, 140, 143, 146, 150, 152, 158, 159, 162, 163, 165, 172, 173, 176, 179, 181, 185, 186, 192, 199, 232, 233, 234, 236, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 312, 313, 320, 328, 329, 333, 335, 336, 337, 339, 344, 349, 350, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 419, 420, 433, 434, 435, 436, 438, 439, 440, 442, 446, 447, 448, 449, 451, 452, 454, 455, 456, 459, 461, 462, 473, 488, 489], "mean_": [49, 53, 111, 159, 232], "mean_correl": [52, 163], "mean_correlation_matrix": [49, 53], "mean_data": 111, "mean_epi_img": 31, "mean_fmri": 37, "mean_fmri_img": 104, "mean_func": 96, "mean_func_img": [51, 93], "mean_haxbi": [26, 185], "mean_haxby_img": [16, 17], "mean_imag": 71, "mean_img": [3, 6, 16, 17, 19, 26, 31, 32, 34, 37, 51, 70, 71, 72, 86, 90, 93, 95, 96, 104, 106, 111, 185, 349], "mean_img_": [34, 72], "mean_scal": 63, "mean_scor": [53, 100], "mean_test_scor": 100, "meaning": [99, 101, 111, 133, 143, 146, 158, 173, 175, 202, 215, 338, 461], "meaningless": [3, 165, 175, 336], "meant": [3, 6, 106, 239, 308, 457], "meanwhil": [2, 16, 19, 31, 37, 42, 44, 45, 50, 88, 104, 108, 126, 127, 158], "measur": [25, 35, 50, 51, 53, 60, 67, 78, 100, 101, 107, 115, 139, 149, 158, 159, 160, 162, 163, 169, 170, 172, 175, 179, 181, 186, 192, 194, 240, 272, 362, 429, 431, 446, 471, 486, 489], "mechan": [32, 165, 232, 233, 234, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 449], "med": 242, "media": [105, 109], "medial": [10, 24, 60, 92, 111, 115, 170, 430, 436, 438, 439], "medial_wal": [10, 24, 473], "medialtemporallob": 260, "median": [146, 158, 196, 365, 368, 436, 438, 439, 452], "medic": [0, 46, 115, 159, 163, 171, 193, 194, 213, 219, 222, 232, 250, 449], "medicin": 222, "medium": [182, 283, 286, 287, 294, 443], "meet": [115, 155, 158, 192, 196, 487], "meg": [175, 179], "megan": [115, 211], "megatrawl": [9, 28, 113, 115, 133, 158, 188, 272, 432, 440, 488], "meghana": [140, 143, 158], "mehdi": [0, 53, 100, 115, 119, 123, 131, 140, 146, 158], "meisler": [0, 125, 127, 158], "melbourn": 0, "melissa": [115, 221], "mem": [8, 28, 47, 61, 74, 83, 97, 112, 114, 488], "member": [173, 182, 487], "memor": [167, 175], "memori": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 135, 143, 144, 158, 162, 163, 172, 185, 186, 233, 283, 286, 287, 294, 298, 299, 300, 301, 303, 304, 305, 306, 308, 313, 320, 323, 333, 339, 343, 353, 354, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 443, 447, 448, 449, 460, 463, 464, 473, 486], "memory_": [303, 304], "memory_level": [34, 36, 37, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 90, 92, 93, 99, 100, 101, 104, 105, 106, 107, 108, 163, 186, 233, 298, 299, 300, 301, 303, 304, 305, 306, 320, 323, 333, 339, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 447, 448, 449, 473], "memory_usag": 105, "memoryerror": 184, "menn": [115, 221, 361, 362], "mensch": [0, 50, 115, 123, 131, 133, 136, 158, 164, 202, 247, 306], "mental": [0, 67, 69, 73, 82, 115, 181, 198, 270, 276], "mention": [101, 124, 126, 127, 158, 173, 174, 175], "menuet": [143, 158], "merg": [146, 158, 162, 173, 179, 182, 185, 448], "meriaux": [73, 115, 198, 270], "merlin": [115, 305], "mert": [115, 225, 231, 252, 256], "mesh": [23, 24, 38, 69, 110, 111, 125, 129, 138, 143, 146, 151, 155, 156, 158, 174, 179, 180, 205, 206, 207, 208, 209, 210, 283, 286, 287, 294, 305, 306, 372, 373, 374, 398, 430, 436, 437, 438, 439, 443, 445, 447, 463, 464, 465, 466, 467, 468, 469, 470, 471, 489], "mesh_coordin": 23, "mesh_typ": [10, 24, 38, 110, 287, 294], "mess": 37, "messag": [3, 85, 133, 158, 173, 182, 233, 234, 236, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 284, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 329, 333, 335, 339, 350, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 446, 447, 448, 449, 454], "met": [125, 158], "meta": [0, 3, 15, 98, 101, 105, 112, 113, 118, 203, 224, 232, 233, 234, 277, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 343, 348, 349, 351, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 427, 435, 440, 446, 447, 448, 449, 488], "meta_analysis_img": 109, "metabol": [68, 175, 179], "metadata": [58, 64, 92, 103, 118, 125, 146, 156, 158, 185, 220, 221, 232, 233, 234, 275, 276, 277, 278, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 360, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 449], "metadata_rout": [232, 233, 234, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 449], "metadatarequest": [232, 233, 234, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 449], "metaprior": 46, "method": [10, 15, 16, 27, 32, 37, 41, 46, 48, 50, 52, 60, 61, 87, 90, 92, 93, 95, 101, 107, 113, 115, 116, 118, 125, 126, 127, 129, 131, 135, 139, 143, 146, 149, 150, 151, 153, 155, 158, 159, 160, 162, 166, 167, 171, 172, 173, 177, 179, 180, 181, 184, 185, 186, 192, 193, 196, 220, 226, 228, 230, 232, 233, 234, 244, 255, 261, 272, 275, 277, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 311, 312, 313, 315, 320, 333, 335, 340, 343, 344, 345, 350, 353, 354, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 425, 434, 440, 441, 443, 444, 445, 446, 447, 448, 449, 457, 461, 462, 486, 488, 489], "methodolog": 199, "methodologi": 214, "metric": [32, 36, 40, 42, 43, 53, 80, 146, 158, 165, 166, 170, 179, 199, 298, 300, 301], "metric_map": 80, "meudec": [0, 124, 150, 151, 152, 153, 154, 155, 158], "mf": [76, 115, 192], "mgh": [58, 92, 231, 256], "mgrid": [25, 85], "mgz": [144, 145, 158, 398, 436, 437, 438, 439, 445, 469], "mi": 67, "mia": [0, 127, 158], "mialab": 243, "miami": 0, "miccai": [115, 159, 232], "micha": [0, 129, 158], "michael": [0, 38, 53, 100, 115, 119, 123, 131, 143, 158, 171, 181, 194, 195, 221, 223, 243, 251, 362], "michel": [0, 46, 51, 115, 119, 125, 126, 127, 129, 158, 171, 181, 198, 219, 221, 250, 270], "mickl": [115, 227, 253], "microarchitectur": 175, "mid": 473, "middl": [46, 67, 92, 115, 143, 151, 158, 222, 359], "midrul": 64, "midx": 102, "miezin": [60, 115, 224, 259], "might": [6, 35, 63, 103, 105, 106, 164, 168, 170, 175, 179, 182, 184, 192, 246, 261, 349, 356, 362, 371, 376, 377, 378, 379, 380, 381, 428], "migrat": [124, 158], "mikiten": [115, 230, 255], "mil": [115, 192], "mila": 0, "mild": 67, "milham": [53, 100, 115, 194, 221], "miller": [115, 159, 192, 227, 253], "millimet": [85, 170, 186, 288, 289, 290, 291, 292, 293, 298, 299, 300, 301, 302, 305, 306, 320, 333, 335, 355, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 447, 449, 451, 458], "mimic": [168, 248, 249], "min": [2, 4, 6, 10, 11, 18, 20, 22, 27, 39, 41, 50, 51, 52, 55, 57, 60, 66, 71, 77, 78, 80, 81, 82, 100, 102, 103, 104, 105, 151, 152, 158, 353, 354, 419, 420, 425, 427, 428, 430, 431, 433, 434, 435, 436, 438, 439, 442, 443, 445], "min_dist": [63, 320, 333, 360, 458, 459], "min_n_sampl": 59, "min_onset": [320, 322, 323, 327], "min_region_s": [52, 88, 89, 163, 449, 451], "min_siz": 450, "minc": 196, "minctracc": 196, "mind": [0, 53, 165, 166, 173, 179], "mine": [115, 181, 196, 244], "ming": [115, 211], "mini": 446, "minibatchkmean": [51, 446, 447], "miniconda": 487, "minim": [58, 64, 173, 179, 320, 322, 327, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 433], "minimalist": 3, "minimize_memori": [64, 70, 72, 76, 174, 320, 323, 333], "minimum": [34, 78, 80, 90, 103, 122, 124, 127, 129, 131, 136, 138, 139, 140, 143, 146, 149, 151, 153, 158, 163, 182, 196, 320, 333, 337, 357, 365, 368, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 415, 421, 442, 449, 450, 451, 452, 458, 459, 472], "minmaxscal": 41, "minnesota": 0, "minor": [122, 128, 139, 141, 158, 165], "minu": [118, 175], "minut": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 175, 216, 227, 228, 270], "mion": 68, "mion_response_funct": 68, "mion_time_deriv": 68, "miranda": [115, 171, 181, 196], "mirror": [182, 240, 241, 242, 243, 244, 245, 246, 250, 253, 254, 256, 264, 265, 273, 274, 279, 284, 294], "miscellan": [128, 158], "misclassif": [298, 299, 300, 301, 303, 304], "misconcept": 175, "misfit": 67, "mislabel": 182, "misleadingli": 165, "miss": [10, 23, 24, 56, 71, 78, 85, 111, 126, 129, 152, 158, 173, 179, 327, 366, 369, 378, 381, 473], "misspecif": 67, "mit": [0, 225, 252], "mitchel": 202, "mitig": [115, 420], "mitra": [115, 361], "mix": [29, 46, 47, 113, 169, 171, 188, 240, 273, 301, 303, 304, 435, 488, 489], "miyawaki": [29, 47, 113, 115, 186, 188, 274, 340, 357, 364, 367, 370, 412, 435, 440, 473, 488], "miyawaki2008": [42, 43, 90, 473], "miyawaki2008_reconstruction_": 43, "miyawaki_dataset": [43, 90], "miyawaki_filenam": [90, 186], "miyawaki_mean_img": [90, 186], "miykael": [143, 158], "mkdir": [3, 4, 6, 7, 16, 24, 30, 34, 43, 50, 51, 57, 63, 64, 72, 73, 76, 87, 95], "mm": [4, 16, 34, 38, 57, 60, 85, 88, 92, 96, 143, 158, 163, 185, 196, 225, 226, 247, 252, 260, 320, 333, 361, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 449, 450, 451, 459, 471, 472, 473], "mm3": [6, 34, 64, 92, 196, 449, 451, 458, 472], "mmface": [71, 229, 282], "mne": [144, 145, 158], "mni": [16, 50, 54, 56, 67, 69, 94, 102, 110, 115, 118, 136, 146, 149, 155, 158, 160, 178, 179, 181, 185, 186, 193, 196, 202, 203, 214, 215, 224, 226, 242, 244, 250, 258, 259, 260, 290, 291, 293, 298, 299, 300, 301, 323, 340, 371, 377, 380, 419, 421, 425, 427, 428, 433, 434, 435, 441, 442, 444, 459, 486], "mni152": [4, 40, 94, 124, 152, 158, 175, 211, 213, 214, 225, 231, 243, 245, 252, 256, 265, 266, 288, 289, 290, 291, 292, 293, 298, 299, 300, 301, 303, 304, 305, 306, 345, 367, 370, 377, 380, 433, 434, 435, 442, 447], "mni152_file_path": [4, 181], "mni152_templ": 291, "mni152nlin2009casym": [64, 129, 158, 213], "mni152nlin2009casym_desc": [49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 86, 92, 93, 96, 106], "mni152nlin2009csasym": [213, 265, 266, 288, 289, 290, 291, 292, 293], "mni152nlin2009csym": 213, "mni152nlin6asym": 362, "mni152templ": [92, 320, 333, 419, 433, 434, 435, 459], "mni305": 179, "mni_icbm152_nlin_sym_09a_nifti": 213, "mni_icbm152_t1_tal_nlin_sym_09a_convert": [4, 181], "mo": 3, "moaepilot": 6, "mock": 173, "modal": [118, 165, 173, 175, 229, 282, 358], "modality_fold": 358, "mode": [9, 15, 17, 22, 28, 57, 62, 74, 84, 95, 97, 113, 115, 136, 141, 144, 150, 155, 158, 173, 174, 180, 185, 186, 192, 202, 241, 247, 250, 253, 275, 277, 315, 320, 327, 345, 364, 369, 371, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 418, 430, 433, 435, 440, 449, 457, 459, 472, 473, 488, 489], "model": [6, 29, 32, 33, 34, 35, 41, 43, 46, 47, 50, 52, 53, 62, 63, 65, 69, 71, 73, 74, 75, 82, 83, 98, 99, 100, 104, 106, 107, 112, 113, 115, 124, 125, 127, 129, 140, 146, 149, 151, 153, 154, 155, 158, 159, 161, 163, 165, 169, 170, 171, 172, 173, 176, 177, 179, 180, 181, 186, 187, 192, 221, 231, 232, 233, 236, 263, 266, 267, 270, 271, 274, 298, 299, 300, 301, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 320, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 335, 336, 339, 340, 343, 344, 349, 350, 354, 357, 360, 361, 362, 364, 367, 370, 371, 384, 396, 397, 411, 412, 422, 423, 427, 434, 435, 440, 457, 459, 472, 473, 480, 487, 488, 489], "model_and_arg": 102, "model_ev": [130, 158, 426], "model_evalu": [298, 299, 300, 301], "model_intercept": [78, 80, 107, 335, 384], "model_select": [3, 30, 31, 33, 34, 35, 36, 37, 38, 40, 42, 44, 45, 46, 53, 99, 100, 143, 158, 165, 168, 298, 299, 300, 301], "model_titl": 68, "models_confound": [64, 101, 102, 323], "models_ev": [64, 102, 323], "models_run_img": [64, 101, 102, 323], "moder": 172, "modern": [131, 158], "modif": [173, 175, 179], "modifi": [18, 51, 60, 95, 105, 136, 153, 158, 173, 186, 228, 275, 277, 353, 354, 357, 436, 438, 439, 445, 460, 461], "modify_d": 275, "modul": [5, 7, 20, 27, 35, 36, 37, 42, 43, 44, 49, 52, 53, 54, 55, 56, 57, 58, 60, 63, 88, 89, 90, 92, 93, 94, 95, 99, 100, 101, 104, 105, 106, 107, 108, 115, 117, 118, 124, 125, 126, 127, 129, 131, 138, 140, 141, 149, 153, 155, 158, 168, 173, 176, 181, 182, 186, 190, 222, 275, 298, 299, 300, 301, 310, 312, 313, 327, 335, 337, 347, 349, 477, 481, 482, 483, 484, 486], "modular": [115, 173, 203, 338, 461], "modulated_ev": [65, 73], "mohammad": [0, 125, 126, 127, 129, 158], "mohlberg": 115, "moment": [24, 117], "monitor": 179, "monkei": 68, "montag": 430, "montgomeri": [115, 312, 313], "month": 182, "montreal": [175, 179, 193, 196, 242], "montr\u00e9al": 0, "mood": [115, 181], "moor": 311, "more": [2, 3, 4, 6, 7, 9, 10, 14, 15, 17, 20, 22, 23, 24, 27, 28, 29, 30, 32, 34, 41, 42, 44, 45, 48, 50, 51, 52, 54, 56, 57, 58, 60, 62, 63, 64, 67, 69, 70, 71, 72, 75, 76, 78, 80, 81, 84, 87, 90, 92, 95, 99, 101, 102, 104, 105, 107, 109, 110, 111, 113, 116, 117, 118, 120, 124, 125, 126, 129, 132, 136, 138, 140, 142, 143, 146, 148, 152, 153, 154, 158, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 177, 179, 181, 182, 184, 185, 186, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 204, 211, 212, 213, 214, 218, 219, 220, 222, 226, 227, 230, 231, 233, 240, 242, 243, 244, 245, 250, 252, 253, 255, 256, 261, 264, 265, 266, 270, 272, 273, 275, 277, 279, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 310, 312, 313, 320, 323, 333, 335, 339, 350, 358, 360, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 384, 395, 397, 400, 402, 404, 406, 408, 410, 412, 419, 428, 433, 434, 435, 440, 442, 443, 446, 447, 448, 449, 451, 458, 460, 471, 473, 476, 486, 487, 488, 489], "more_smooth_anat_img": 4, "moreno": [115, 198, 221, 270], "moreov": [64, 102, 129, 155, 158, 173, 181, 358], "morgan": [115, 192], "morito": [42, 43, 115, 218, 274], "moritz": [0, 140, 143, 146, 158], "morpholog": [95, 185, 376, 377, 378, 379, 380, 381], "morphologi": 179, "morphometr": 211, "morphometri": [29, 47, 75, 83, 113, 165, 176, 179, 180, 181, 188, 265, 266, 279, 299, 304, 333, 336, 343, 354, 360, 364, 370, 384, 412, 423, 435, 440, 457, 459, 472, 488, 489], "morri": [115, 222], "mortem": 214, "mosaic": [16, 128, 150, 158, 395, 414, 419, 425, 428, 433, 434, 435, 459, 486], "mosaicslic": [16, 397, 400, 414], "most": [7, 25, 34, 42, 44, 45, 51, 63, 76, 95, 101, 110, 126, 140, 143, 156, 158, 165, 166, 167, 168, 170, 172, 173, 175, 182, 185, 186, 192, 199, 214, 320, 322, 327, 428, 436, 438, 439, 445, 447, 449, 451, 465, 486], "most_frequ": 100, "mostli": [172, 357], "motion": [65, 67, 70, 102, 110, 115, 151, 158, 174, 196, 261, 320, 323, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 449, 461], "motiv": 95, "motor": [2, 15, 16, 17, 18, 53, 67, 69, 78, 80, 91, 92, 94, 98, 112, 113, 198, 270, 295, 343, 364, 370, 384, 427, 440, 486, 488], "motor_imag": [2, 486], "mountain": 0, "mourao": [115, 171, 196], "mour\u00e3o": [115, 181], "move": [72, 125, 126, 127, 129, 131, 138, 151, 158], "movement": [58, 115, 181, 186], "movi": [50, 51, 52, 54, 56, 57, 86, 90, 93, 106, 146, 158, 161, 180, 181, 186, 201, 261, 489], "mpl": [385, 387, 388], "mr": 175, "mrg": 173, "mri": [7, 12, 43, 58, 62, 74, 95, 101, 113, 115, 117, 153, 158, 173, 174, 175, 176, 179, 181, 184, 191, 193, 196, 201, 211, 213, 222, 225, 240, 242, 252, 261, 265, 279, 322, 361, 362, 488], "mriqc": 64, "ms_e": [312, 313], "msb": 111, "msdl": [9, 22, 28, 54, 56, 113, 160, 185, 188, 250, 345, 397, 416, 433, 435, 440, 486, 488], "msdl_atla": [21, 53, 54, 55, 56, 100, 473], "msdl_atlas_dataset": 55, "msdl_coord": [53, 100], "msdl_data": [53, 100], "msdl_roi": [54, 55, 56, 219, 250, 473], "mse": [45, 303, 304, 312], "mstep": [196, 244], "msw": 111, "much": [0, 3, 25, 42, 44, 53, 78, 80, 100, 101, 143, 158, 165, 172, 173, 175, 181, 203, 258, 342, 353, 471], "mudassir": [0, 129, 158], "multi": [22, 29, 43, 44, 45, 47, 48, 50, 60, 61, 101, 113, 115, 127, 158, 159, 160, 161, 163, 169, 172, 179, 181, 184, 185, 186, 187, 196, 219, 229, 233, 234, 236, 244, 250, 261, 264, 282, 298, 305, 320, 364, 367, 369, 370, 417, 421, 432, 440, 473, 488, 489], "multi_nifti_maps_mask": 49, "multi_plt": 40, "multi_scal": 43, "multiclass": [36, 166], "multimod": 188, "multimodal_fac": 71, "multimodal_fmri": 71, "multimodal_smri": 71, "multiniftilabelsmask": [49, 124, 126, 128, 158, 183, 473, 489], "multiniftimapsmask": [49, 124, 126, 128, 158, 183, 473, 489], "multiniftimask": [42, 43, 127, 150, 152, 158, 183, 298, 299, 300, 301, 303, 304, 305, 306, 333, 335, 384, 447, 473, 489], "multioutput": [42, 299, 304], "multioutputregressor": [299, 304], "multipca": [367, 473], "multipl": [2, 6, 20, 44, 49, 78, 80, 82, 102, 110, 115, 125, 149, 150, 158, 161, 166, 168, 170, 173, 176, 177, 179, 183, 184, 185, 192, 196, 214, 218, 244, 245, 253, 297, 310, 328, 333, 335, 345, 348, 349, 365, 366, 367, 384, 395, 397, 400, 414, 419, 425, 428, 430, 433, 434, 435, 442, 472, 473, 486, 489], "multiple_spatial_regress": 272, "multipli": [67, 85, 91, 136, 158, 170, 172, 239, 307, 310, 312, 313, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 430, 436, 438, 439, 443, 445], "multiscal": [9, 28, 42, 43, 113, 115, 125, 134, 158, 188, 218, 244, 274, 434, 440, 488], "multisit": [115, 191, 240], "multivari": [38, 98, 112, 113, 115, 164, 179, 180, 181, 195, 243, 261, 345, 350, 364, 370, 435, 440, 487, 488], "multivoxel": [101, 115, 165, 217], "mumford": [101, 115, 165, 179, 181, 262, 280], "murat": [58, 115, 362], "must": [6, 35, 73, 95, 155, 158, 165, 166, 168, 170, 172, 173, 174, 175, 182, 184, 186, 192, 233, 234, 236, 242, 264, 272, 287, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 320, 327, 333, 334, 335, 338, 344, 350, 353, 355, 360, 361, 364, 365, 367, 368, 370, 372, 376, 378, 379, 380, 381, 382, 383, 384, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 424, 426, 433, 435, 436, 437, 438, 439, 441, 443, 445, 447, 452, 455, 456, 458, 459, 461, 462, 465, 466, 471, 486], "mutabl": [130, 158], "mutual": [303, 304], "mvpa": [29, 113, 179, 181, 218, 489], "mw": [115, 192], "mwrc1oas1_0001_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0001_mr1_mpr_anon_fslswapdim_bet": [44, 76], "mwrc1oas1_0002_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0003_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0004_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0005_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0007_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0009_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0010_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0012_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0013_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0015_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0016_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0019_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0022_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0023_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0025_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0026_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0029_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0031_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0032_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0037_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0038_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0039_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0041_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0042_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0044_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0045_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0049_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0050_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0052_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0053_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0054_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0055_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0056_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0059_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0060_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0061_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0064_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0065_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0067_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0069_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0070_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0071_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0072_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0078_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0079_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0080_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0082_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0086_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0090_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0091_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0094_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0096_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0098_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0099_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0101_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0103_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0104_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0106_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0111_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0113_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0114_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0115_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0117_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0119_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0120_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0121_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0123_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0124_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0126_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0131_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0135_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0136_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0138_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0144_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0145_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0146_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0148_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0150_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0155_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0159_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0160_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0162_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0163_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0164_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0165_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0167_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0169_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0173_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0174_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0176_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0177_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0178_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0180_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0181_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0182_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0184_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0188_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0189_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0190_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0193_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0199_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0200_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0202_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0203_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0204_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0205_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0207_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0208_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0209_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0211_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0212_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0214_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0216_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0217_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0218_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0220_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0223_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0226_mr1_mpr_anon_fsl": 45, "mwrc1oas1_0227_mr1_mpr_anon_fsl": 45, "mwrc2oas1_0001_mr1_mpr_anon_fslswapdim_bet": [44, 76], "my_funct": 182, "my_numb": 173, "myeong": [0, 153, 158], "mzayek": [0, 124, 125, 126, 127, 129, 155, 158], "n": [15, 23, 27, 40, 43, 44, 51, 52, 53, 58, 59, 60, 64, 70, 71, 76, 78, 80, 81, 85, 92, 95, 100, 101, 103, 104, 105, 107, 108, 109, 114, 115, 119, 120, 122, 123, 131, 133, 136, 158, 163, 166, 172, 173, 175, 193, 203, 211, 223, 242, 251, 258, 261, 262, 272, 280, 305, 306, 307, 311, 312, 313, 320, 329, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 431, 449, 452, 453, 461, 487], "n_add_reg": 327, "n_alpha": [234, 303, 304], "n_class": [298, 299, 300, 301, 303, 304], "n_classes_": 303, "n_clf": 43, "n_cluster": [51, 446, 448, 454], "n_clusters_": 448, "n_col": [320, 333, 335, 360, 422], "n_column": [72, 175, 239], "n_compcor": [361, 362], "n_compon": [50, 52, 93, 105, 106, 163, 305, 306, 454], "n_cond": 95, "n_cond_img": 95, "n_condit": 99, "n_confound": [232, 344, 462], "n_covar": 384, "n_cut": [131, 158, 415], "n_descriptor": [335, 384], "n_detect": [44, 104, 107], "n_displai": 59, "n_elements_": [155, 158, 365, 366, 367, 368, 369, 370, 371, 372, 373], "n_epoch": [50, 306], "n_event": [321, 322, 327], "n_featur": [43, 49, 59, 130, 158, 172, 232, 233, 234, 236, 238, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 320, 333, 446, 448, 454], "n_features_new": [302, 305, 306, 320, 333, 364, 367, 370, 446, 448], "n_features_to_select": 99, "n_fold": [3, 234, 298, 299, 300, 301, 303, 304], "n_frame": [321, 327], "n_init": [51, 305, 446], "n_iter": [50, 51, 52, 266, 289, 292, 447, 448, 454], "n_job": [3, 32, 34, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 49, 50, 52, 55, 59, 60, 64, 76, 77, 78, 80, 81, 82, 99, 100, 101, 102, 104, 107, 110, 168, 234, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 323, 329, 333, 335, 350, 365, 366, 367, 379, 381, 384, 447, 473], "n_l1_ratio": [303, 304], "n_label": [40, 416], "n_left_vertic": 465, "n_map": 417, "n_marker": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "n_node": [441, 444], "n_nonzero_coef": 43, "n_onset": [320, 327], "n_output": [298, 299, 302, 304, 305, 306, 320, 333, 446, 448], "n_outputs_": [298, 299, 300, 301], "n_paramet": [303, 304], "n_parcel": [23, 51, 447], "n_parcels_hemi": 23, "n_perm": [44, 78, 80, 104, 107, 335, 384], "n_point": 25, "n_refin": 234, "n_reg": 322, "n_region": [53, 92, 372, 373], "n_regions_extract": [52, 163], "n_regressor": [6, 321, 329, 335, 384], "n_right_vertic": 465, "n_roi": 252, "n_run": 104, "n_sampl": [10, 46, 78, 82, 107, 108, 130, 158, 232, 233, 234, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 338, 364, 367, 370, 384, 446, 448, 454, 460, 461, 471], "n_samples_fit": [299, 304], "n_scan": [34, 63, 65, 71, 175, 322], "n_sourc": 460, "n_split": [3, 35, 37, 38, 42, 46, 53, 100], "n_subject": [12, 24, 41, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 76, 77, 78, 79, 80, 81, 82, 86, 90, 92, 93, 96, 100, 103, 106, 107, 108, 133, 137, 158, 163, 172, 186, 232, 233, 234, 236, 240, 241, 261, 269, 270, 273, 279, 284, 294, 297], "n_t": 25, "n_time_point": [92, 93, 111, 328, 329, 465], "n_timepoint": [99, 165, 168, 373, 465], "n_vertic": [7, 24, 38, 463, 464, 465, 466, 468], "n_vertices_per_hemispher": [372, 373], "n_volum": 57, "n_voxel": [6, 57, 78, 80, 93, 99, 165, 168, 175, 305, 308, 310, 312, 313, 316, 320, 328, 329, 449], "n_z": 25, "naiv": 172, "namburi": [38, 115], "name": [2, 3, 4, 6, 10, 15, 22, 23, 24, 27, 31, 33, 46, 53, 60, 64, 65, 66, 73, 76, 77, 78, 80, 81, 92, 95, 101, 102, 105, 110, 111, 117, 124, 126, 135, 144, 146, 151, 153, 155, 158, 162, 166, 170, 173, 174, 179, 181, 182, 183, 186, 192, 193, 195, 202, 203, 223, 226, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 260, 270, 275, 280, 281, 282, 283, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 318, 320, 321, 322, 323, 327, 333, 335, 338, 349, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 443, 445, 446, 447, 448, 449, 450, 452, 459, 461, 473, 489], "name_of_exampl": 173, "name_seed_region": 24, "named_step": [42, 46, 99], "namedtupl": 470, "nan": [21, 50, 52, 56, 58, 92, 95, 103, 105, 122, 126, 133, 138, 146, 150, 158, 222, 338, 353, 366, 369, 375, 378, 430, 436, 438, 439, 443, 445, 461, 471, 472, 473], "nanci": [115, 221], "nano": [115, 305], "nardo": [60, 115, 203, 258], "narend": [115, 192], "narr": [67, 82, 173], "narrai": [303, 304], "naselari": [115, 166], "nassir": [115, 159, 232], "natasha": [0, 124, 158], "nathan": 221, "nation": [0, 115, 170, 181, 192, 196, 227, 253, 302, 362], "nativ": [6, 62, 74, 113, 125, 139, 158, 174, 228, 229, 282, 320, 327, 339, 347, 350, 353, 371, 435, 440, 488], "natur": [50, 115, 118, 175, 179, 192, 201, 220, 261, 275, 277], "naturalist": [159, 160, 162, 163, 201], "navab": [115, 159, 232], "navi": 70, "navig": [143, 158], "naylor": [115, 201, 261], "nb": 49, "nbsp": [37, 51, 54, 55, 60, 64, 76, 78], "nbviewer": [37, 51, 54, 55, 60, 64, 76, 78], "nc": 245, "ncbi": [50, 72, 115, 164, 166, 204, 305], "nclass": [298, 299, 300, 301], "ncol": [31, 65, 80, 101, 102, 107, 111], "ncollect": 109, "ncolorbar": 16, "ncomput": 109, "ncut": 199, "ndarrai": [146, 158, 232, 233, 234, 235, 236, 237, 238, 239, 240, 254, 258, 260, 261, 272, 273, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 316, 320, 333, 335, 338, 340, 343, 344, 350, 351, 353, 355, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 381, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 422, 429, 432, 436, 437, 438, 439, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 463, 464, 465, 467, 469, 470, 471], "ndarray": 233, "ndim": 383, "ndimag": [46, 95, 185, 266, 289, 292, 347, 376, 377, 378, 379, 380, 381], "ndownload": 20, "nearbi": 38, "nearest": [10, 40, 42, 43, 46, 51, 67, 76, 85, 115, 129, 146, 155, 158, 179, 275, 352, 353, 354, 427, 428, 434, 435, 442, 448, 454, 458, 471], "nearest_neighbor_group": [124, 158], "nearestneighbor": 38, "nearli": [191, 303, 304], "nebraska": 0, "necessari": [4, 64, 90, 93, 102, 110, 124, 146, 153, 158, 159, 162, 165, 173, 174, 182, 186, 193, 242, 275, 277, 284, 298, 299, 300, 301, 313, 320, 333, 370, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 473], "necessarili": [70, 163, 175, 196], "necu": [140, 158], "need": [0, 2, 3, 5, 6, 7, 10, 17, 21, 31, 32, 34, 43, 44, 50, 51, 52, 53, 57, 67, 69, 72, 76, 78, 80, 81, 82, 85, 90, 92, 93, 99, 100, 101, 105, 106, 117, 118, 143, 146, 153, 158, 159, 163, 165, 166, 167, 168, 173, 175, 178, 179, 182, 184, 185, 186, 192, 239, 307, 310, 311, 355, 360, 361, 365, 366, 368, 380, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 421, 425, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 447, 471, 486, 487], "neelai": [0, 153, 158], "neg": [10, 15, 18, 44, 53, 60, 67, 78, 80, 81, 91, 104, 108, 115, 127, 150, 153, 158, 170, 175, 179, 192, 240, 299, 304, 335, 336, 353, 357, 384, 427, 430, 435, 439, 449, 458, 471, 486], "neg_label": 40, "neg_log10_vfwe_pvals_img": 335, "neg_log_pv": [44, 78, 80, 104], "neg_log_pvals_anova": [107, 108], "neg_log_pvals_anova_unmask": [107, 108], "neg_log_pvals_bonferroni": 104, "neg_log_pvals_bonferroni_data": 104, "neg_log_pvals_bonferroni_unmask": 104, "neg_log_pvals_permuted_ols_unmask": [78, 107], "neg_log_pvals_tfce_unmask": 107, "neg_mean_absolute_error": [44, 299, 301], "neg_mean_squared_error": [299, 301], "negat": [54, 84, 97, 113, 295, 349, 435, 440, 488], "negative_edg": 60, "negative_stat_img": 91, "neglig": [172, 342], "neighbor": [10, 38, 51, 95, 146, 158, 180, 302, 427, 428, 434, 435, 442, 447, 448, 454, 471], "neighborhood": 162, "neighbourhood": 471, "neither": [357, 465, 466], "nelson": [60, 115, 203, 224, 258, 259], "nepal": 0, "nest": [25, 30, 44, 149, 158, 168, 232, 233, 234, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 449, 471], "nested_cv_scor": 35, "nested_sample_point": 25, "net": [29, 46, 47, 113, 171, 279, 298, 299, 303, 304, 435, 440, 488], "netherland": 0, "netmat": [27, 133, 158], "neto": [115, 196, 244], "network": [2, 9, 20, 21, 22, 28, 48, 49, 50, 53, 56, 57, 62, 73, 74, 84, 87, 95, 97, 102, 113, 115, 118, 129, 135, 149, 155, 158, 159, 160, 161, 163, 173, 174, 179, 180, 181, 186, 188, 191, 195, 196, 198, 203, 222, 224, 225, 226, 227, 240, 241, 243, 244, 250, 252, 253, 256, 258, 259, 260, 270, 272, 320, 327, 345, 361, 362, 364, 366, 369, 371, 397, 418, 431, 432, 433, 435, 440, 449, 457, 459, 472, 473, 486, 488, 489], "network3": 88, "networks_197": 20, "networks_444": 20, "networks_64": 20, "neural": [68, 115, 159, 164, 175, 179, 181, 186, 198, 212, 233, 262, 280, 302], "neuro": [164, 179, 298, 356], "neuroanatomi": 186, "neurobiolog": 179, "neuroimag": [0, 2, 7, 9, 23, 28, 38, 50, 53, 58, 64, 77, 95, 100, 101, 102, 104, 113, 115, 116, 118, 143, 146, 158, 159, 160, 164, 165, 167, 169, 170, 171, 173, 179, 180, 183, 188, 193, 196, 198, 200, 202, 211, 213, 219, 220, 226, 242, 244, 246, 247, 250, 254, 260, 264, 270, 275, 277, 298, 299, 300, 301, 302, 303, 304, 305, 306, 315, 320, 333, 335, 338, 339, 342, 343, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 358, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 420, 425, 427, 428, 430, 433, 434, 435, 440, 442, 443, 447, 449, 452, 453, 455, 456, 459, 462, 471, 477, 486, 488, 489], "neuroinformat": [115, 118, 202, 220, 222, 275, 277], "neurolog": [105, 175, 179, 193, 196, 242], "neurologi": [0, 228], "neuromap": 173, "neuron": [42, 43, 60, 115, 170, 218, 224, 259, 274], "neuroparc": 173, "neurophysiologi": [115, 225, 231, 252, 256], "neuropsychiatr": [262, 280], "neuropsychologia": [115, 217], "neurosci": [0, 51, 67, 73, 115, 162, 170, 179, 181, 191, 192, 195, 198, 221, 222, 227, 240, 243, 253, 270, 489], "neurospin": [0, 62, 66, 74, 113, 173, 174, 216, 426, 440, 488], "neurostar": [173, 181, 182], "neurosynth": [101, 105, 116, 220, 275, 277, 489], "neurosynth_spectral_01": 105, "neurosynth_spectral_01_1": 105, "neurosynth_words_for_image_": 105, "neurosynth_words_for_image_1": 105, "neurosynth_words_for_image_11": 105, "neurosynth_words_for_image_15": 105, "neurosynth_words_for_image_2": 105, "neurosynth_words_for_image_30": 105, "neurosynth_words_vector": 105, "neurovault": [2, 89, 98, 112, 113, 115, 116, 139, 146, 151, 155, 158, 179, 188, 275, 276, 277, 278, 288, 343, 348, 349, 351, 355, 364, 370, 427, 435, 440, 488, 489], "never": [35, 165, 172, 181, 353, 354], "nevertheless": [152, 158], "new": [0, 2, 3, 12, 16, 19, 21, 31, 37, 40, 42, 44, 45, 50, 67, 72, 73, 80, 85, 87, 88, 95, 99, 104, 105, 108, 109, 115, 117, 123, 129, 137, 138, 139, 140, 141, 154, 165, 166, 167, 168, 173, 179, 181, 182, 185, 186, 228, 232, 234, 275, 277, 298, 299, 300, 301, 302, 303, 304, 305, 306, 312, 313, 320, 333, 347, 350, 351, 352, 353, 357, 367, 370, 376, 378, 379, 381, 384, 419, 420, 421, 422, 425, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 447, 450, 457, 486, 487], "new_img_lik": [12, 37, 49, 80, 87, 95, 103, 109, 126, 146, 155, 158, 185], "new_label": 450, "new_labels_data": 87, "new_labels_img": [87, 450], "new_titl": 107, "newaxi": [42, 46, 81, 85], "newer": [164, 275, 277], "newest": [154, 158, 275], "newli": 432, "newseg": [44, 76], "newton": 172, "next": [15, 56, 57, 60, 65, 66, 67, 69, 70, 72, 76, 79, 80, 81, 82, 141, 144, 153, 158, 160, 171, 172, 173, 175, 182, 473], "nguyen": [0, 146, 149, 151, 158], "niak": [196, 240], "nian": [115, 225, 252], "nib": 64, "nibabel": [4, 34, 37, 46, 49, 51, 54, 58, 64, 76, 82, 85, 92, 103, 124, 125, 127, 129, 137, 138, 140, 146, 151, 153, 155, 158, 172, 184, 185, 305, 306, 339, 340, 341, 348, 353, 354, 355, 365, 366, 367, 368, 369, 370, 371, 376, 377, 378, 379, 380, 381, 382, 383, 447, 449, 450, 451, 455, 456], "nice": [52, 163], "nicer": 24, "nichol": [104, 115, 118, 159, 179, 181, 192, 220, 275, 277, 335, 378, 384], "nichola": [115, 191, 211, 240], "nickerson": [115, 230, 255], "nico": [60, 115, 203, 226, 258, 260], "nicola": [0, 115, 127, 150, 151, 152, 153, 154, 155, 158, 192, 227, 253], "niconnect": 0, "nielsen": [115, 191, 240], "nifitmask": 361, "nifti": [2, 4, 10, 12, 17, 19, 26, 30, 31, 33, 35, 36, 37, 43, 49, 50, 51, 54, 55, 56, 58, 60, 78, 80, 85, 87, 90, 92, 93, 95, 96, 104, 106, 107, 110, 117, 127, 128, 129, 130, 131, 149, 155, 158, 160, 164, 165, 173, 183, 193, 194, 198, 201, 202, 204, 211, 212, 214, 218, 219, 220, 222, 223, 225, 230, 240, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 256, 261, 263, 264, 268, 269, 270, 273, 274, 279, 298, 299, 302, 303, 304, 305, 306, 339, 340, 343, 347, 348, 349, 353, 356, 447, 450, 471, 478, 486, 489], "nifti1": [4, 34, 37, 51, 54, 58, 76, 82, 92, 103, 146, 158, 355, 365, 366, 367, 368, 369, 370, 371, 376, 377, 378, 379, 380, 381, 382, 383, 447, 449, 450, 451, 455, 456], "nifti1head": [58, 92, 103, 349], "nifti1imag": [4, 32, 34, 37, 42, 45, 46, 51, 52, 54, 58, 76, 82, 85, 92, 138, 139, 141, 146, 158, 163, 184, 246, 248, 249, 251, 252, 255, 266, 273, 288, 289, 290, 291, 292, 293, 298, 299, 300, 301, 305, 306, 315, 317, 320, 333, 335, 336, 337, 339, 341, 345, 346, 348, 349, 350, 353, 354, 355, 356, 357, 365, 366, 367, 368, 369, 370, 371, 376, 377, 378, 379, 380, 381, 382, 383, 395, 400, 402, 406, 412, 416, 417, 418, 447, 449, 450, 451, 455, 456], "nifti2imag": [141, 158], "nifti_labels_mask": [51, 58], "nifti_lik": 429, "nifti_maps_mask": [54, 55], "nifti_maps_masker_": [305, 306, 447], "nifti_mask": [34, 36, 37, 44, 93, 104, 105, 107, 108, 117, 173], "nifti_spheres_mask": 60, "niftiimag": [3, 160, 173, 174, 184, 185], "niftilabelsmask": [56, 58, 84, 95, 97, 113, 126, 129, 143, 144, 146, 149, 150, 151, 153, 155, 158, 160, 183, 248, 261, 364, 365, 366, 369, 452, 455, 457, 473, 488, 489], "niftilablesmask": 92, "niftimapsmask": [53, 54, 55, 56, 92, 100, 121, 126, 143, 150, 153, 158, 160, 183, 365, 366, 368, 449, 453, 456, 473, 489], "niftimask": [12, 30, 33, 35, 36, 37, 40, 42, 43, 44, 49, 53, 54, 55, 56, 57, 58, 60, 63, 70, 84, 92, 95, 97, 99, 100, 101, 104, 105, 106, 107, 108, 113, 117, 125, 129, 143, 146, 149, 150, 151, 152, 153, 158, 165, 168, 183, 261, 274, 298, 299, 300, 301, 303, 304, 305, 306, 317, 320, 333, 335, 345, 350, 361, 362, 364, 365, 366, 368, 369, 371, 378, 384, 425, 429, 434, 435, 440, 447, 457, 473, 478, 488, 489], "niftispheresmask": [57, 60, 63, 70, 101, 123, 127, 128, 131, 133, 144, 148, 150, 158, 174, 183, 473, 489], "nightli": 173, "nih": [50, 72, 115, 164, 166, 204, 305], "nii": [2, 3, 4, 6, 11, 12, 15, 17, 19, 22, 26, 30, 31, 33, 35, 36, 37, 43, 44, 45, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 64, 72, 76, 78, 86, 87, 90, 92, 93, 95, 96, 102, 104, 105, 106, 107, 109, 110, 117, 181, 184, 196, 202, 323, 358, 360, 361, 362, 398, 436, 445, 469, 473], "nii_asym": 196, "nii_sym": 196, "niimg": [1, 8, 34, 56, 60, 90, 92, 93, 99, 113, 117, 125, 126, 127, 140, 143, 146, 151, 155, 158, 162, 181, 183, 185, 186, 253, 278, 285, 298, 299, 300, 301, 302, 303, 304, 305, 306, 315, 320, 323, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 420, 425, 427, 428, 430, 433, 434, 435, 440, 442, 443, 447, 448, 449, 451, 452, 453, 454, 455, 456, 458, 459, 461, 467, 471, 473, 475, 488, 489], "niimg_convers": [127, 158], "niimng": 320, "nijmegen": 0, "nikhil": [0, 127, 158], "niko": [115, 200, 211, 246], "nikolaidi": [143, 158], "nikolau": [115, 170, 181, 302], "nilearn": [1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 116, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 136, 137, 138, 141, 143, 144, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 182, 184, 185, 186, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 472, 473, 476, 486, 488, 489], "nilearn_cach": [34, 36, 37, 41, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 93, 99, 100, 101, 104, 105, 106, 107, 108, 163, 473], "nilearn_cmap": 13, "nilearn_data": [2, 3, 4, 6, 10, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 64, 66, 67, 69, 70, 71, 72, 76, 77, 78, 80, 81, 82, 86, 87, 88, 89, 90, 92, 93, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 294, 473], "nilearn_glm": [64, 76], "nilearn_shared_data": [184, 285], "nili": [115, 223, 251], "nimg": [115, 193, 200, 242], "nipi": [155, 158, 173, 180], "niprep": 362, "nipyp": 175, "nishimoto": [115, 166], "nistat": [124, 132, 149, 158], "nistats_migr": [124, 158], "nitrc": [4, 10, 11, 27, 41, 103, 194, 199, 221, 241, 245, 253], "nki": [24, 111, 115, 129, 138, 158, 188, 284, 294], "nki_enhanced_surfac": [24, 111], "nki_nilearn": 221, "nlm": [50, 72, 115, 164, 166, 204, 305], "nmap": 13, "nmr": [231, 256], "nn": 38, "nnn": 196, "nodal": [149, 158, 431, 486], "node": [21, 24, 25, 60, 110, 144, 146, 149, 151, 158, 160, 186, 192, 240, 251, 283, 286, 287, 294, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 430, 431, 441, 443, 444, 471, 486], "node_cmap": [60, 431], "node_color": [141, 151, 158, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 441], "node_coord": [23, 144, 146, 158, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 431, 441], "node_kwarg": [389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 431], "node_s": [60, 144, 146, 153, 158, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 431, 441], "node_strength": 60, "node_strength_neg": 60, "node_strength_posit": 60, "node_threshold": 431, "node_valu": 431, "node_vmax": 431, "node_vmin": 431, "nois": [3, 6, 35, 46, 58, 70, 72, 95, 96, 101, 105, 115, 124, 151, 158, 160, 166, 168, 172, 175, 179, 186, 310, 312, 313, 327, 361, 362, 420, 433, 434, 462], "noise_coef": 46, "noise_model": [6, 34, 67, 110, 320, 323, 329, 472], "noisi": [44, 93, 159], "noisier": [427, 428, 434, 435, 442], "nomenclatur": [23, 115, 200, 254], "nomin": 52, "non": [15, 16, 41, 44, 52, 58, 66, 67, 68, 78, 80, 92, 95, 104, 105, 116, 127, 128, 139, 143, 146, 150, 151, 153, 154, 158, 159, 163, 164, 170, 171, 172, 173, 178, 179, 181, 186, 191, 194, 196, 198, 199, 201, 202, 213, 219, 222, 245, 272, 298, 299, 300, 301, 305, 310, 312, 313, 320, 338, 342, 347, 353, 355, 357, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 373, 375, 378, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 430, 434, 435, 436, 438, 439, 443, 445, 449, 455, 461, 473, 486, 489], "non_parametric_infer": [78, 80, 124, 125, 153, 155, 158, 178], "non_rest": 36, "non_steady_st": 361, "nondement": [115, 222], "none": [3, 15, 16, 32, 33, 34, 37, 42, 46, 51, 52, 54, 55, 56, 58, 60, 64, 67, 68, 71, 72, 76, 78, 80, 90, 92, 93, 95, 96, 101, 103, 105, 109, 110, 118, 125, 129, 133, 143, 146, 150, 155, 158, 173, 186, 232, 233, 234, 236, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 320, 322, 323, 327, 329, 333, 334, 335, 336, 337, 338, 339, 344, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 465, 466, 467, 471, 472, 473, 486], "nonlinear": [115, 196, 213], "nonparametr": 80, "nonpres": 186, "nonstochast": [115, 384], "nonzero": [52, 355, 449], "nooner": [115, 221], "noplot": 173, "nor": [186, 357], "norihiro": [42, 43, 115, 218, 274], "norm": [46, 55, 57, 64, 77, 80, 102, 109, 232, 238, 298, 299, 300, 301, 303, 304, 305, 306, 320, 420, 446, 447, 448, 449], "norm_nois": 46, "norm_resid": [155, 158], "normal": [6, 25, 32, 38, 46, 57, 60, 69, 70, 102, 106, 110, 117, 127, 133, 158, 165, 172, 173, 174, 175, 179, 193, 213, 215, 222, 233, 236, 242, 268, 279, 312, 313, 355, 471], "normalized_cov_beta": 311, "normalized_residu": [312, 313], "northwestern": 0, "nose": [146, 158], "notabl": [51, 160, 214], "notat": [150, 153, 158, 177, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 425, 427, 428, 430, 434, 435, 436, 438, 439], "notcontain": [118, 275], "note": [2, 3, 4, 6, 15, 16, 21, 24, 40, 44, 45, 46, 49, 50, 51, 54, 56, 57, 58, 60, 66, 67, 70, 72, 76, 77, 80, 85, 87, 90, 92, 93, 95, 96, 102, 104, 106, 110, 115, 117, 118, 125, 153, 158, 159, 160, 164, 170, 171, 172, 173, 174, 175, 177, 182, 184, 185, 186, 196, 232, 233, 234, 239, 240, 242, 243, 244, 247, 252, 253, 256, 261, 264, 265, 266, 268, 269, 272, 274, 275, 276, 277, 278, 279, 280, 284, 285, 288, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 320, 333, 336, 338, 344, 347, 349, 350, 353, 356, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 380, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 420, 425, 427, 434, 435, 446, 447, 448, 449, 450, 461, 462, 471, 473, 486], "notebook": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 131, 143, 146, 158, 165, 181, 186, 320, 333, 362, 441, 442, 443, 444, 445, 457, 459, 486], "notequ": [118, 275], "noteworthi": [144, 158, 166], "noth": [4, 170, 309, 311, 314, 333, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 428, 430, 433, 434, 435, 442], "notic": [6, 51, 60, 67, 102, 110, 358], "notin": [118, 275], "notion": [165, 170, 359, 431], "notnul": [118, 275], "notter": [0, 143, 158], "nov": [60, 115, 224, 259], "nova": 0, "novel": 226, "novemb": [77, 115, 129, 140, 143, 146, 149, 158, 315], "now": [2, 3, 4, 6, 7, 15, 17, 21, 23, 26, 30, 40, 42, 46, 51, 52, 53, 57, 58, 64, 65, 66, 67, 69, 71, 73, 80, 82, 85, 87, 93, 94, 95, 101, 102, 103, 105, 106, 110, 111, 117, 122, 124, 125, 126, 127, 128, 129, 131, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 158, 165, 171, 173, 182, 185, 298, 299, 300, 301, 305, 306, 307, 310, 311, 312, 313, 337, 345, 349, 362, 365, 367, 368, 370, 447], "np": [5, 6, 7, 10, 12, 13, 15, 21, 23, 24, 25, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 63, 65, 66, 67, 68, 69, 71, 72, 76, 78, 80, 81, 85, 86, 88, 90, 95, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 129, 155, 158, 163, 173, 184, 185, 232, 305, 306, 309, 310, 311, 312, 313, 314, 335, 339, 349, 384, 446, 447, 448, 465], "nplot": 109, "npz": [204, 263], "nr": 172, "nreshap": 105, "nrg": 222, "nrow": [51, 65, 80, 101, 102, 111], "ntop": 105, "nuclei": [115, 223, 251], "nuisanc": [166, 179, 194, 196, 201, 241, 307, 310, 311, 312, 362, 461], "null": [65, 73, 80, 154, 158, 165, 170, 175, 179, 308, 335, 384], "null_cv_scor": 99, "null_duration_tri": 73, "number": [3, 30, 32, 34, 35, 40, 41, 44, 51, 52, 55, 56, 57, 60, 66, 67, 69, 72, 73, 78, 80, 87, 90, 93, 95, 99, 101, 105, 106, 107, 118, 127, 128, 131, 143, 146, 149, 150, 151, 153, 158, 159, 162, 163, 165, 166, 167, 170, 173, 175, 179, 181, 182, 186, 192, 193, 196, 199, 223, 225, 231, 232, 233, 234, 236, 240, 241, 244, 247, 248, 249, 252, 253, 255, 261, 264, 266, 269, 270, 273, 275, 279, 284, 289, 292, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 311, 316, 320, 329, 333, 335, 336, 338, 340, 342, 344, 349, 350, 357, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 379, 381, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 420, 421, 422, 425, 427, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 458, 459, 460, 461, 462, 464, 466, 468, 473, 486], "number_of_scan": 344, "number_of_subject": 109, "numer": [1, 8, 30, 34, 36, 59, 113, 150, 158, 173, 174, 186, 236, 308, 310, 312, 313, 321, 433, 434, 460, 488], "numpi": [3, 5, 6, 7, 10, 12, 13, 15, 17, 21, 23, 24, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 63, 65, 66, 67, 68, 69, 71, 72, 76, 78, 80, 81, 85, 87, 88, 90, 95, 99, 101, 102, 104, 105, 106, 107, 108, 111, 122, 124, 126, 127, 128, 129, 130, 134, 138, 140, 143, 146, 149, 151, 153, 158, 162, 163, 165, 172, 173, 182, 184, 185, 232, 233, 234, 235, 236, 237, 238, 239, 240, 254, 258, 260, 261, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 312, 313, 316, 320, 322, 327, 329, 333, 335, 338, 339, 340, 343, 344, 345, 349, 350, 351, 353, 355, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 381, 383, 384, 388, 389, 390, 391, 392, 393, 394, 396, 398, 399, 401, 403, 405, 407, 409, 411, 416, 417, 419, 421, 422, 425, 427, 429, 431, 432, 435, 436, 437, 438, 439, 441, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 463, 464, 465, 467, 469, 470, 471], "numpy_convers": [133, 158], "numpydoc": 173, "nunzio": [115, 221], "nutshel": 6, "nv_data": [105, 109], "ny": [115, 312, 313], "nyu": [115, 126, 158, 307, 311], "n\u00e1jera": [0, 119, 122, 131, 133, 158], "o": [60, 101, 115, 133, 158, 165, 173, 192, 193, 211, 224, 225, 240, 242, 252, 259, 361], "oas1_0001_mr1": [44, 45, 76], "oas1_0002_mr1": 45, "oas1_0003_mr1": 45, "oas1_0004_mr1": 45, "oas1_0005_mr1": 45, "oas1_0007_mr1": 45, "oas1_0009_mr1": 45, "oas1_0010_mr1": 45, "oas1_0012_mr1": 45, "oas1_0013_mr1": 45, "oas1_0015_mr1": 45, "oas1_0016_mr1": 45, "oas1_0019_mr1": 45, "oas1_0022_mr1": 45, "oas1_0023_mr1": 45, "oas1_0025_mr1": 45, "oas1_0026_mr1": 45, "oas1_0029_mr1": 45, "oas1_0031_mr1": 45, "oas1_0032_mr1": 45, "oas1_0037_mr1": 45, "oas1_0038_mr1": 45, "oas1_0039_mr1": 45, "oas1_0041_mr1": 45, "oas1_0042_mr1": 45, "oas1_0044_mr1": 45, "oas1_0045_mr1": 45, "oas1_0049_mr1": 45, "oas1_0050_mr1": 45, "oas1_0052_mr1": 45, "oas1_0053_mr1": 45, "oas1_0054_mr1": 45, "oas1_0055_mr1": 45, "oas1_0056_mr1": 45, "oas1_0059_mr1": 45, "oas1_0060_mr1": 45, "oas1_0061_mr1": 45, "oas1_0064_mr1": 45, "oas1_0065_mr1": 45, "oas1_0067_mr1": 45, "oas1_0069_mr1": 45, "oas1_0070_mr1": 45, "oas1_0071_mr1": 45, "oas1_0072_mr1": 45, "oas1_0078_mr1": 45, "oas1_0079_mr1": 45, "oas1_0080_mr1": 45, "oas1_0082_mr1": 45, "oas1_0086_mr1": 45, "oas1_0090_mr1": 45, "oas1_0091_mr1": 45, "oas1_0094_mr1": 45, "oas1_0096_mr1": 45, "oas1_0098_mr1": 45, "oas1_0099_mr1": 45, "oas1_0101_mr1": 45, "oas1_0103_mr1": 45, "oas1_0104_mr1": 45, "oas1_0106_mr1": 45, "oas1_0111_mr1": 45, "oas1_0113_mr1": 45, "oas1_0114_mr1": 45, "oas1_0115_mr1": 45, "oas1_0117_mr1": 45, "oas1_0119_mr1": 45, "oas1_0120_mr1": 45, "oas1_0121_mr1": 45, "oas1_0123_mr1": 45, "oas1_0124_mr1": 45, "oas1_0126_mr1": 45, "oas1_0131_mr1": 45, "oas1_0135_mr1": 45, "oas1_0136_mr1": 45, "oas1_0138_mr1": 45, "oas1_0144_mr1": 45, "oas1_0145_mr1": 45, "oas1_0146_mr1": 45, "oas1_0148_mr1": 45, "oas1_0150_mr1": 45, "oas1_0155_mr1": 45, "oas1_0159_mr1": 45, "oas1_0160_mr1": 45, "oas1_0162_mr1": 45, "oas1_0163_mr1": 45, "oas1_0164_mr1": 45, "oas1_0165_mr1": 45, "oas1_0167_mr1": 45, "oas1_0169_mr1": 45, "oas1_0173_mr1": 45, "oas1_0174_mr1": 45, "oas1_0176_mr1": 45, "oas1_0177_mr1": 45, "oas1_0178_mr1": 45, "oas1_0180_mr1": 45, "oas1_0181_mr1": 45, "oas1_0182_mr1": 45, "oas1_0184_mr1": 45, "oas1_0188_mr1": 45, "oas1_0189_mr1": 45, "oas1_0190_mr1": 45, "oas1_0193_mr1": 45, "oas1_0199_mr1": 45, "oas1_0200_mr1": 45, "oas1_0202_mr1": 45, "oas1_0203_mr1": 45, "oas1_0204_mr1": 45, "oas1_0205_mr1": 45, "oas1_0207_mr1": 45, "oas1_0208_mr1": 45, "oas1_0209_mr1": 45, "oas1_0211_mr1": 45, "oas1_0212_mr1": 45, "oas1_0214_mr1": 45, "oas1_0216_mr1": 45, "oas1_0217_mr1": 45, "oas1_0218_mr1": 45, "oas1_0220_mr1": 45, "oas1_0223_mr1": 45, "oas1_0226_mr1": 45, "oas1_0227_mr1": 45, "oasi": [29, 47, 75, 83, 113, 115, 171, 178, 180, 188, 265, 266, 279, 299, 304, 333, 336, 343, 354, 360, 364, 370, 384, 412, 423, 435, 440, 457, 459, 472, 488], "oasis1": [44, 45, 76], "oasis_dataset": [44, 76], "oasisbrain": [222, 279], "obei": [123, 158], "obj": [173, 305, 306, 373, 447, 448, 473], "object": [2, 3, 4, 5, 6, 7, 10, 11, 14, 15, 16, 17, 18, 23, 24, 26, 29, 31, 33, 34, 37, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 65, 69, 70, 72, 76, 82, 87, 89, 90, 92, 93, 95, 99, 103, 110, 113, 115, 117, 118, 125, 126, 129, 130, 135, 138, 146, 149, 152, 153, 155, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 170, 172, 174, 179, 180, 181, 183, 185, 212, 232, 233, 234, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 286, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 312, 313, 315, 320, 323, 333, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 467, 470, 471, 473, 475, 478, 481, 486, 488, 489], "observ": [41, 46, 60, 63, 65, 67, 71, 80, 81, 82, 104, 166, 170, 174, 175, 179, 181, 186, 311, 446], "observed_timeseri": 174, "obtain": [6, 16, 23, 44, 45, 51, 56, 60, 65, 67, 69, 76, 78, 92, 95, 104, 107, 110, 153, 158, 159, 160, 162, 164, 165, 167, 170, 172, 175, 179, 186, 192, 198, 203, 224, 234, 243, 245, 253, 265, 270, 288, 289, 292, 297, 303, 304, 337, 342, 353, 357, 366, 368, 369, 371, 384, 398, 426, 449, 473], "obviou": 67, "obvious": 69, "occ": 53, "occipit": [60, 92], "occur": [68, 131, 158, 175, 179, 240, 487], "occurr": [36, 37, 42, 43, 44, 49, 53, 54, 55, 56, 57, 58, 60, 63, 70, 90, 92, 93, 95, 99, 100, 101, 104, 105, 106, 107, 108, 117, 130, 158, 170], "octav": 196, "octob": [115, 143, 146, 158, 196], "odc": 215, "odd": 460, "off": [13, 15, 39, 42, 43, 67, 73, 116, 124, 136, 158, 172, 173, 196, 199, 300, 301, 320, 333, 376, 377, 378, 379, 380, 381, 433, 434, 435, 442, 459], "offer": [164, 174, 176, 486], "offici": 487, "offlin": [275, 277, 489], "offset": [42, 53, 85, 105, 149, 158, 185, 353], "often": [12, 31, 33, 36, 37, 50, 87, 93, 95, 117, 164, 165, 166, 170, 175, 179, 181, 184, 185, 186, 240, 310, 312, 313], "oftentim": 181, "ohbm": [115, 142, 158, 192], "ok": 181, "okito": [42, 43, 115, 218, 274], "ol": [107, 310, 312, 313, 320, 329, 384, 480], "old": [126, 146, 152, 153, 158], "oldenburg": 0, "older": [36, 37, 42, 43, 44, 49, 50, 53, 54, 55, 56, 57, 58, 60, 63, 70, 90, 92, 93, 95, 99, 100, 101, 104, 105, 106, 107, 108, 115, 117, 138, 139, 140, 141, 158, 173, 184, 222, 340], "olfact": 473, "oliv": [0, 70, 115, 126, 158, 170, 196, 244], "oliveira": [115, 181], "olivi": [0, 140, 158], "ols_output": 107, "olsmodel": [155, 158, 310, 312, 313], "omit": 424, "onc": [4, 37, 40, 51, 59, 72, 118, 153, 158, 159, 164, 165, 172, 174, 175, 178, 179, 182, 186, 446, 471], "one": [3, 4, 6, 7, 10, 15, 16, 17, 21, 25, 30, 31, 32, 34, 36, 37, 38, 40, 42, 46, 49, 50, 51, 57, 58, 59, 60, 65, 67, 69, 71, 72, 73, 75, 76, 78, 79, 81, 82, 83, 87, 92, 93, 95, 101, 102, 103, 105, 107, 110, 113, 117, 118, 124, 125, 127, 129, 135, 137, 140, 149, 151, 152, 153, 158, 159, 160, 163, 164, 165, 166, 170, 172, 173, 174, 175, 177, 178, 179, 181, 182, 183, 184, 186, 196, 215, 232, 234, 240, 244, 245, 253, 260, 266, 270, 273, 283, 286, 287, 294, 298, 299, 300, 301, 303, 305, 306, 308, 320, 322, 323, 327, 329, 333, 334, 335, 338, 339, 340, 342, 343, 345, 349, 353, 358, 365, 368, 370, 372, 383, 384, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 421, 422, 427, 430, 431, 432, 433, 437, 438, 440, 442, 443, 447, 451, 452, 458, 461, 467, 471, 487, 488, 489], "one_mesh_info": [126, 158], "one_minus_pvalu": [150, 158, 308], "ones": [13, 34, 40, 46, 65, 67, 76, 80, 82, 101, 105, 107, 108, 125, 158, 167, 168, 170, 172, 303, 304, 327, 384, 446, 465], "ones_lik": 78, "onevsoneclassifi": [36, 166], "onevsrestclassifi": [36, 166], "ongo": 173, "onli": [2, 3, 6, 14, 15, 20, 24, 30, 32, 33, 34, 35, 37, 38, 40, 42, 44, 45, 49, 51, 53, 54, 56, 57, 60, 67, 69, 76, 80, 82, 85, 87, 92, 95, 99, 100, 101, 102, 103, 105, 106, 110, 111, 117, 118, 125, 128, 129, 130, 136, 141, 146, 151, 153, 154, 156, 158, 159, 160, 162, 163, 165, 166, 167, 168, 170, 172, 173, 175, 178, 179, 182, 183, 184, 185, 222, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 486, 489], "onlin": [50, 115, 164, 173, 199, 306, 487], "onset": [6, 34, 65, 66, 67, 68, 73, 101, 126, 149, 158, 174, 229, 282, 320, 321, 322, 324, 325, 326, 327, 330, 331, 332, 426], "ontario": 0, "onto": [10, 17, 42, 52, 69, 138, 158, 163, 173, 180, 184, 377, 380, 423, 433, 486], "onward": [129, 158, 251], "opac": 442, "opaqu": 442, "open": [17, 23, 54, 56, 60, 90, 92, 93, 99, 115, 124, 158, 172, 173, 179, 180, 181, 183, 188, 191, 192, 202, 222, 261, 272, 308, 320, 333, 376, 377, 378, 379, 380, 381, 441, 442, 443, 444, 445, 448, 457, 459, 486, 487, 489], "open_in_brows": [10, 17, 23, 34, 54, 56, 60, 63, 64, 72, 76, 92, 93, 127, 143, 158, 186, 441, 442, 443, 444, 445, 457, 459, 486], "openfmri": 202, "openli": 222, "openneuro": [62, 74, 113, 174, 201, 217, 261, 262, 280, 297, 320, 323, 360, 363, 370, 422, 427, 429, 457, 458, 459, 472, 488], "oper": [40, 87, 90, 92, 95, 103, 106, 117, 151, 158, 165, 172, 173, 175, 179, 183, 184, 186, 232, 233, 266, 297, 320, 333, 335, 347, 349, 350, 376, 377, 378, 379, 380, 381, 422, 475, 479, 489], "opercular": [60, 92, 473], "operculari": 92, "operto": [143, 158], "opinion": 173, "opportun": 51, "oppos": [6, 7, 82, 185, 186], "opposit": [46, 71, 170], "optim": [55, 59, 101, 115, 146, 150, 158, 166, 168, 171, 172, 202, 234, 236, 247, 353, 354], "optimist": [35, 165], "optimum": 172, "option": [9, 10, 14, 16, 22, 24, 28, 44, 53, 58, 68, 73, 90, 104, 113, 117, 122, 124, 125, 126, 127, 129, 136, 138, 139, 140, 141, 146, 149, 150, 151, 152, 153, 155, 158, 160, 165, 167, 173, 174, 179, 182, 184, 186, 232, 233, 234, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 317, 320, 327, 333, 335, 336, 338, 351, 355, 357, 358, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 459, 461, 462, 471, 486, 488], "orang": 486, "orbit": [92, 473], "orcid": 173, "order": [0, 2, 3, 6, 16, 17, 24, 30, 31, 33, 36, 37, 42, 43, 44, 51, 56, 58, 72, 80, 81, 92, 101, 104, 109, 117, 124, 129, 137, 143, 146, 151, 153, 158, 164, 170, 172, 173, 174, 179, 180, 181, 182, 184, 185, 186, 236, 258, 260, 268, 269, 288, 289, 292, 307, 311, 320, 327, 329, 333, 334, 335, 338, 340, 342, 347, 348, 352, 353, 354, 365, 366, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 383, 384, 419, 425, 427, 428, 430, 434, 435, 442, 449, 450, 452, 455, 460, 461, 471, 486, 487], "ordered_region": [258, 260], "ordinari": [67, 104, 107, 311, 384], "orfano": [0, 115, 124, 131, 143, 158, 173, 198, 270], "org": [0, 4, 10, 11, 19, 27, 35, 37, 39, 41, 51, 54, 55, 58, 60, 64, 76, 78, 103, 105, 109, 115, 118, 173, 175, 181, 182, 191, 192, 194, 195, 199, 201, 212, 217, 220, 221, 230, 241, 243, 245, 255, 261, 264, 265, 266, 272, 275, 276, 277, 278, 288, 289, 290, 291, 292, 293, 298, 299, 300, 301, 362, 444], "organ": [6, 7, 40, 60, 115, 133, 146, 152, 154, 158, 173, 179, 181, 196, 224, 225, 226, 231, 252, 256, 259, 335, 362, 384, 400, 470, 487], "orient": [10, 146, 149, 158, 172, 173, 352], "orig": [436, 437, 438, 439, 445, 470, 471], "origami": 0, "origin": [0, 6, 37, 40, 42, 43, 45, 51, 52, 67, 70, 72, 85, 90, 94, 101, 125, 129, 137, 150, 152, 153, 158, 162, 170, 172, 182, 186, 196, 201, 213, 214, 222, 232, 233, 234, 253, 261, 270, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 337, 357, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 420, 436, 438, 439, 443, 445, 446, 447, 448, 449, 461], "original_affin": 94, "original_shap": 94, "original_voxel": 51, "ortho": [15, 16, 64, 320, 333, 396, 397, 413, 414, 419, 421, 425, 427, 428, 431, 433, 434, 435, 459, 486], "orthogon": [143, 158, 179, 320, 322, 327, 333, 338, 386, 395, 396, 397, 400, 414, 419, 421, 425, 427, 428, 431, 433, 434, 435, 459, 461], "orthogonalmatchingpursuit": 43, "orthoprojector": [14, 15, 17, 53, 54, 60, 153, 158, 413, 421, 427, 431], "orthoslic": [2, 4, 11, 16, 17, 18, 26, 50, 72, 76, 82, 87, 90, 95, 99, 153, 158, 395, 400, 402, 404, 406, 408, 410, 412, 414, 419, 425, 428, 433, 434, 435, 486], "oscar": [0, 143, 158], "oscil": [6, 67, 115], "osf": [10, 18, 22, 50, 55, 66, 77, 78, 80, 81, 82, 100, 102, 163, 197, 201, 202, 215, 223, 247, 251, 261, 270], "osram": 0, "ot": [23, 170], "other": [2, 4, 15, 24, 25, 32, 37, 40, 41, 42, 50, 58, 67, 69, 70, 72, 95, 99, 101, 105, 106, 115, 116, 117, 125, 143, 146, 150, 158, 159, 160, 165, 166, 167, 169, 170, 172, 173, 174, 179, 182, 184, 186, 204, 211, 214, 228, 232, 233, 234, 261, 275, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 312, 313, 320, 322, 327, 333, 335, 357, 358, 359, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 380, 384, 428, 440, 446, 447, 448, 449, 486, 489], "otherwis": [95, 104, 105, 143, 158, 175, 182, 232, 233, 234, 238, 272, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 323, 333, 348, 352, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 430, 433, 436, 438, 439, 442, 443, 445, 446, 447, 448, 449, 450, 461, 471], "otten": [71, 115], "our": [0, 2, 3, 15, 20, 24, 30, 35, 40, 42, 51, 53, 58, 60, 65, 67, 68, 69, 73, 95, 99, 102, 110, 111, 117, 118, 129, 143, 153, 158, 160, 165, 172, 173, 175, 182], "ourselv": 10, "out": [30, 32, 34, 35, 36, 37, 38, 40, 42, 44, 45, 46, 50, 52, 53, 55, 56, 57, 58, 59, 60, 72, 99, 101, 104, 107, 108, 117, 118, 127, 143, 146, 150, 158, 160, 165, 166, 168, 170, 172, 173, 174, 179, 185, 196, 220, 265, 298, 299, 300, 301, 303, 304, 305, 306, 338, 345, 353, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 430, 447, 449, 450, 460, 461, 471, 486], "out_dict": 80, "out_dir": [64, 76, 360], "outcom": [67, 179, 362], "outdat": [124, 137, 158], "outer": [13, 90, 179, 471], "outlier": [179, 222, 361, 362, 364, 367, 370], "outlin": [16, 50, 90, 164, 173, 398, 437, 473, 486], "outperform": [53, 100, 159, 164], "output": [3, 4, 6, 7, 10, 16, 17, 23, 24, 30, 34, 35, 37, 43, 46, 50, 51, 53, 54, 56, 57, 58, 60, 67, 72, 81, 87, 95, 116, 117, 124, 125, 127, 129, 135, 141, 146, 153, 155, 158, 159, 164, 169, 173, 179, 181, 182, 183, 185, 186, 232, 233, 235, 236, 237, 238, 239, 267, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 312, 313, 317, 320, 333, 335, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 357, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 420, 427, 428, 430, 433, 434, 435, 442, 443, 446, 447, 448, 449, 452, 453, 455, 456, 458, 459, 471, 486, 489], "output_dimension_": 374, "output_dir": [3, 4, 6, 7, 16, 24, 30, 34, 43, 50, 51, 57, 63, 64, 72, 73, 76, 87, 95, 429], "output_fil": [6, 16, 24, 398, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439, 486], "output_filepath": [92, 93, 186], "output_imag": 333, "output_typ": [6, 63, 66, 67, 70, 71, 72, 76, 77, 78, 80, 81, 82, 101, 107, 110, 320, 333, 384], "outsid": [2, 4, 17, 67, 127, 155, 158, 173, 181, 186, 353, 354, 368, 398, 436, 438, 439, 445, 452, 453, 458, 471], "ova": 36, "over": [3, 21, 40, 50, 51, 53, 69, 71, 90, 103, 117, 125, 149, 150, 158, 164, 165, 170, 171, 172, 178, 182, 185, 196, 202, 247, 306, 320, 346, 350, 361, 372, 385, 387, 388, 433, 437, 471, 473, 486], "overal": [36, 67, 70, 125, 158, 172, 173, 214, 303, 304, 372, 373], "overfit": [35, 166, 170], "overflow": [155, 158], "overhead": 172, "overlai": [16, 21, 22, 52, 163, 185, 442, 489], "overlaid": [17, 71, 149, 151, 158, 433, 473], "overlap": [3, 32, 33, 39, 56, 60, 92, 99, 115, 124, 126, 128, 158, 173, 179, 186, 192, 212, 264, 365, 366, 368, 369, 371, 373, 398, 433, 473], "overrid": [64, 101, 111, 150, 158, 240, 241, 242, 243, 244, 245, 246, 250, 253, 254, 256, 264, 265, 273, 274, 279, 284, 294, 447], "overridden": 173, "oversampl": [68, 320, 322, 324, 325, 326, 327, 330, 331, 332], "overview": [39, 40, 170, 172, 181], "overwhelm": 60, "overwrit": [12, 58, 275, 277, 385, 387, 388], "ovo": 36, "own": [4, 6, 7, 51, 60, 101, 116, 118, 165, 168, 173, 177, 266, 489], "owner": 275, "ox": [2, 22, 211, 214, 227, 253], "oxford": [0, 22, 92, 115, 160, 188, 240, 248, 312, 313, 416, 417], "oxi": 175, "oxygen": [67, 175, 179], "oxyhaemoglobin": [175, 179], "p": [6, 44, 50, 51, 52, 64, 72, 76, 77, 78, 80, 81, 82, 95, 102, 104, 107, 108, 115, 150, 158, 159, 170, 172, 175, 191, 192, 193, 194, 199, 202, 204, 213, 227, 230, 232, 233, 236, 240, 245, 253, 255, 307, 308, 316, 320, 333, 335, 336, 338, 360, 384, 458, 459, 461], "p001_unc": [80, 102], "p001_uncorrect": 77, "p_f": 19, "p_h": 19, "p_ma": 37, "p_statmap": [64, 76], "p_unmask": 37, "p_v": 19, "p_val": [77, 78, 80], "p_valu": [37, 46, 78, 80, 95, 109, 150, 158, 308, 320, 333], "pa": [0, 323], "pace": [115, 221], "packag": [0, 2, 3, 4, 10, 11, 12, 15, 16, 17, 19, 21, 22, 30, 31, 33, 35, 37, 41, 42, 44, 45, 49, 50, 51, 52, 54, 56, 59, 60, 63, 65, 71, 72, 76, 78, 79, 80, 87, 88, 89, 93, 95, 104, 105, 106, 107, 108, 110, 111, 122, 123, 124, 125, 127, 129, 143, 146, 151, 153, 158, 173, 175, 181, 182, 184, 248, 249, 486], "packagenam": 182, "packagevers": 182, "pad": [72, 127, 146, 158, 185, 186, 342, 353, 354, 378, 381, 385, 387, 388, 460], "padlen": 460, "padtyp": 460, "page": [37, 51, 54, 55, 60, 64, 76, 78, 115, 128, 130, 143, 147, 153, 154, 155, 158, 162, 166, 170, 172, 173, 175, 182, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471], "pai": [0, 66], "paid": 0, "pair": [3, 75, 83, 87, 99, 113, 118, 128, 129, 158, 165, 166, 178, 270, 273, 275, 298, 299, 300, 301, 303, 304, 333, 359, 360, 361, 362, 396, 423, 427, 432, 436, 438, 439, 440, 448, 459, 471, 488], "paired_design_matrix": 81, "pairwis": [53, 159], "panda": [3, 6, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 64, 65, 66, 67, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 95, 99, 101, 104, 110, 117, 118, 124, 127, 129, 140, 143, 149, 151, 153, 154, 158, 165, 232, 240, 242, 244, 246, 247, 248, 249, 251, 252, 254, 255, 258, 259, 260, 279, 302, 305, 306, 320, 321, 323, 327, 333, 334, 335, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 422, 423, 424, 426, 446, 447, 448, 449, 458, 461], "panek": [115, 221], "papadopoulo": [0, 115, 124, 131, 143, 158, 173, 198, 270], "papathanassi": [115, 193, 242], "paper": [0, 50, 51, 117, 118, 129, 158, 162, 172, 173, 175, 275], "par": 92, "paracingul": 92, "paradigm": [67, 71, 98, 112, 113, 118, 165, 175, 216, 229, 271, 277, 327, 343, 348, 349, 351, 427, 435, 440, 488], "paragraph": 172, "parahip": 473, "parahippocamp": 92, "parallel": [32, 36, 37, 38, 40, 44, 45, 46, 49, 50, 52, 55, 59, 60, 80, 99, 104, 107, 124, 158, 172, 175, 335, 367, 384], "param": [232, 233, 234, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 449], "param1": 182, "param2": 182, "param_connectivity__kind": 100, "param_grid": [35, 100, 111, 125, 158, 166, 298, 299, 300, 301], "param_valid": [40, 138, 158], "paramagnet": [175, 179], "paramet": [3, 6, 15, 16, 22, 24, 25, 29, 30, 33, 34, 40, 44, 46, 47, 51, 53, 56, 58, 60, 62, 71, 74, 90, 92, 93, 95, 96, 103, 106, 108, 110, 111, 113, 117, 118, 124, 125, 126, 127, 128, 129, 130, 137, 140, 143, 144, 146, 150, 151, 152, 153, 154, 155, 156, 158, 160, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 177, 179, 181, 182, 183, 184, 196, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 486, 488, 489], "parameter_plot": 64, "parametr": [44, 66, 67, 78, 80, 104, 107, 108, 115, 129, 158, 170, 176, 178, 179, 308, 309, 314, 338, 461, 489], "parcel": [9, 24, 28, 48, 61, 113, 115, 118, 125, 127, 128, 129, 130, 134, 138, 141, 142, 143, 146, 153, 155, 158, 161, 179, 180, 181, 186, 192, 193, 196, 199, 200, 214, 219, 220, 225, 231, 232, 242, 244, 245, 246, 248, 249, 250, 252, 254, 256, 261, 272, 343, 345, 350, 361, 362, 364, 368, 404, 416, 417, 421, 425, 432, 434, 440, 449, 450, 486, 488, 489], "parcellationsifittedparcel": 51, "parent": [3, 4, 6, 7, 16, 24, 30, 34, 43, 50, 51, 57, 63, 64, 72, 73, 76, 87, 95, 173], "pari": [0, 173], "pariet": [21, 60, 92, 105, 219, 250], "parietomedi": 260, "park": [58, 115, 362], "parker": [115, 222], "pars": [155, 158, 182, 359], "parse_bids_filenam": [153, 158], "parser": [359, 362], "parsimoni": 173, "parson": [115, 230, 255], "part": [7, 10, 15, 16, 23, 24, 38, 51, 53, 57, 69, 90, 92, 111, 115, 124, 128, 146, 152, 155, 158, 166, 172, 173, 174, 180, 185, 192, 194, 198, 232, 238, 239, 248, 249, 265, 270, 298, 299, 300, 301, 305, 306, 335, 336, 357, 358, 359, 361, 367, 370, 373, 376, 377, 378, 379, 380, 381, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 424, 432, 447, 449, 465, 466, 467, 473], "partial": [27, 50, 54, 100, 159, 163, 173, 192, 232, 237, 272, 362], "partial_correl": [27, 60, 237, 272], "partial_correlation_matric": 53, "partial_correlation_matrix": 60, "partial_correlation_measur": 53, "particip": [40, 42, 58, 67, 102, 115, 173, 175, 179, 194, 222, 361, 362], "participant_id": 80, "particular": [12, 16, 34, 67, 88, 99, 118, 132, 153, 158, 160, 168, 170, 172, 181, 182, 184, 277, 298, 299, 300, 301, 310, 312, 313, 327, 358, 471], "particularli": [266, 449], "partit": [3, 17, 30, 42, 226], "partli": [42, 44, 172, 175, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 256, 261, 264, 265, 266, 270, 272, 273, 274, 279, 284, 294], "pascual": [0, 131, 158], "pass": [2, 3, 4, 6, 10, 12, 16, 19, 25, 30, 31, 37, 42, 44, 45, 50, 53, 56, 57, 58, 60, 69, 80, 87, 88, 90, 95, 103, 104, 107, 108, 110, 117, 118, 124, 126, 127, 128, 129, 139, 141, 143, 146, 151, 153, 155, 158, 165, 166, 170, 172, 173, 174, 182, 184, 185, 186, 196, 232, 233, 234, 240, 275, 288, 289, 290, 291, 292, 293, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 322, 323, 327, 333, 335, 338, 352, 353, 354, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 378, 379, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 442, 443, 445, 446, 447, 448, 449, 451, 457, 459, 460, 461, 467, 471], "passiv": 67, "past": [0, 58, 117, 160, 362], "patalasingh": [0, 155, 158], "patch": [19, 42, 43, 51, 182], "patch_openneuro_dataset": 280, "patcog": [51, 115], "path": [3, 4, 6, 7, 16, 24, 30, 34, 43, 50, 51, 57, 63, 64, 72, 73, 76, 87, 95, 102, 110, 116, 117, 118, 126, 130, 135, 146, 152, 154, 155, 158, 165, 171, 172, 173, 182, 183, 186, 193, 204, 215, 218, 228, 229, 233, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 294, 295, 298, 299, 300, 301, 303, 304, 305, 306, 320, 323, 327, 333, 339, 348, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 398, 423, 424, 426, 430, 447, 448, 449, 457, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 489], "path_to_a_bids_dataset": 323, "path_to_edited_fil": 173, "path_to_new_env": 487, "pathlib": [3, 4, 6, 7, 16, 24, 30, 34, 43, 50, 51, 57, 63, 64, 72, 73, 76, 87, 95, 102, 110, 126, 152, 158, 184, 233, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 294, 298, 299, 300, 301, 303, 304, 305, 306, 320, 323, 327, 333, 339, 358, 360, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 423, 424, 426, 430, 447, 448, 449, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471], "pathlik": [130, 158], "patient": [115, 159, 179, 232], "patrick": [0, 126, 129, 158], "pattern": [0, 4, 9, 28, 29, 47, 51, 53, 101, 113, 115, 118, 141, 149, 158, 159, 164, 165, 168, 171, 172, 179, 181, 184, 192, 196, 200, 212, 217, 219, 234, 236, 241, 244, 254, 265, 275, 296, 302, 339, 351, 378, 383, 420, 440, 448, 454, 488], "paugam": [0, 126, 158], "paul": [0, 115, 124, 126, 130, 158, 192, 199, 211, 245], "paula": [0, 146, 158], "pauli": [22, 115, 188, 251], "pauli2017": 22, "paz": 0, "pb": 0, "pbellec": [143, 158], "pca": [56, 305, 366, 369, 473], "pcc": [21, 24, 53, 57], "pcc_coord": [57, 63, 174], "pcc_mask": 24, "pcc_seed": 63, "pcc_seed_correl": 57, "pcc_seed_correlation_z": 57, "pcp": [188, 240], "pd": [3, 6, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 65, 66, 67, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 95, 99, 104, 110, 117, 184, 213, 265], "pdf": [16, 57, 68, 126, 155, 158, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439], "pe": 179, "peak": [6, 34, 64, 70, 72, 166, 168, 172, 415, 449, 451, 458, 472], "pearlson": [115, 195, 243], "pearson": [24, 115, 307, 311, 429], "pearsonr": 24, "peck": [115, 312, 313], "pedagog": 38, "pediatr": [115, 196, 211, 213], "pedregosa": [0, 115, 119, 158, 219, 250], "pedro": [115, 196, 244], "peer": [0, 143, 158, 214], "peke": 0, "penal": [166, 172, 234, 303, 304], "penalti": [31, 35, 40, 41, 45, 166, 171, 179, 298, 299, 300, 303, 304], "pend": 80, "pennsylvania": 0, "penros": 311, "peopl": [0, 6, 140, 143, 144, 145, 146, 147, 148, 158, 172, 173], "pep8": [125, 126, 127, 158, 173, 182], "per": [3, 4, 31, 32, 34, 42, 50, 59, 67, 79, 95, 102, 104, 110, 151, 158, 159, 165, 173, 177, 186, 196, 201, 228, 234, 254, 273, 294, 298, 299, 300, 301, 303, 304, 306, 308, 317, 320, 321, 323, 327, 334, 358, 361, 365, 366, 367, 369, 373, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 460], "per_compon": [50, 149, 158, 305, 306, 447], "peraza": [0, 125, 158], "percent": [30, 35, 43, 44, 45, 146, 158, 165, 328, 337, 357, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 433, 441, 443, 445, 461], "percentag": [58, 165, 193, 298, 299, 300, 301], "percentil": [40, 45, 67, 88, 89, 99, 298, 299, 300, 301, 303, 304, 337, 344, 357, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 403, 405, 406, 407, 409, 411, 412, 418, 421, 433, 441, 442, 443, 445, 449, 462], "percept": [71, 115, 146, 158, 175, 198, 229, 270], "perceptu": [115, 170], "perez": [0, 131, 136, 158], "perfect": 172, "perfectli": 172, "perform": [3, 7, 31, 34, 35, 40, 46, 50, 53, 56, 64, 67, 71, 80, 81, 90, 92, 93, 95, 96, 100, 101, 102, 107, 108, 117, 118, 125, 149, 150, 151, 153, 158, 159, 164, 166, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 184, 185, 186, 193, 199, 220, 222, 228, 229, 236, 266, 289, 292, 298, 299, 300, 301, 303, 304, 305, 306, 320, 322, 329, 333, 335, 338, 352, 353, 354, 355, 356, 357, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 395, 397, 400, 402, 404, 406, 408, 410, 412, 414, 419, 421, 425, 427, 428, 431, 433, 434, 435, 442, 446, 447, 448, 449, 452, 454, 459, 460, 461, 471, 473, 489], "perfus": [115, 361, 362, 462], "period": [6, 43, 67, 69, 298, 299, 300, 301, 303, 304, 305, 306, 324, 325, 326, 330, 331, 332, 338, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 420, 447, 449, 461], "perirhin": [115, 170], "perm": [44, 45], "permiss": [113, 146, 158], "permut": [44, 78, 80, 107, 115, 124, 149, 158, 168, 170, 175, 335, 352, 384, 480], "permutation_test_scor": [99, 168], "permuted_least_squar": [80, 155, 158], "permuted_ol": [44, 80, 104, 107, 124, 125, 149, 154, 155, 158, 170, 178, 335], "persist": [50, 93], "person": 228, "pertin": [63, 76], "perturb": 53, "pescara": 0, "pet": 175, "peter": [115, 170, 181, 227, 230, 253, 255, 302], "petersburg": 0, "petersen": [60, 115, 196, 203, 224, 226, 258, 259, 260, 361, 362], "petkova": [115, 221], "phantom": [115, 193], "phase": 234, "pheno": 100, "phenom": [115, 262, 280], "phenomena": 67, "phenomenolog": 68, "phenomenon": 170, "phenotyp": [53, 64, 100, 154, 158, 165, 169, 183, 191, 194, 201, 221, 240, 241, 261, 284, 489], "philadelphia": [115, 171], "philip": [115, 221], "philipp": [0, 50, 72, 73, 115, 119, 158, 164, 198, 204, 270, 305], "phillip": [115, 181, 195, 243], "phlypo": [0, 119, 158], "php": [4, 10, 11, 27, 41, 103], "physic": [175, 385, 387, 388], "physio_plot": 64, "physiolog": [58, 67, 70, 362], "physiologi": 362, "pi": [25, 52, 54, 55, 58, 60, 85, 307, 311], "pial": [10, 24, 25, 38, 69, 110, 111, 149, 155, 158, 205, 206, 207, 208, 209, 210, 283, 286, 287, 294, 323, 430, 436, 437, 438, 439, 443, 445, 467, 470, 471], "pial_left": [205, 206, 207, 208, 209, 210, 283, 430, 443, 471], "pial_right": [205, 206, 207, 208, 209, 210, 283, 430, 443, 486], "pick": [22, 40, 163, 172, 175, 179, 266], "picked_slic": 37, "pictur": [51, 117, 162, 170, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471], "piec": [40, 51, 184, 489], "pierr": [0, 115, 140, 142, 143, 144, 158, 159, 196, 232, 244], "pietrantoni": [0, 155, 158], "pietrini": [3, 32, 33, 39, 99, 115, 212, 264], "pietro": [3, 32, 33, 39, 99, 115, 212, 264], "pinel": [50, 67, 73, 115, 164, 198, 270, 305], "ping": 182, "pinho": [0, 146, 150, 152, 158], "pip": [127, 138, 143, 146, 158, 173, 182, 487], "pipe": 100, "pipelin": [3, 36, 38, 41, 42, 43, 44, 46, 76, 99, 100, 115, 129, 149, 158, 164, 165, 166, 169, 170, 171, 179, 185, 196, 232, 233, 234, 240, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 338, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 449, 461, 489], "pisner": [0, 146, 158], "pitfal": [115, 165, 170], "pittsburgh": 0, "pix": [51, 52], "pixar001_task": [50, 52, 55, 86], "pixar002_task": [50, 52, 55], "pixar003_task": [50, 52, 55], "pixar004_task": [50, 52], "pixar005_task": [50, 52], "pixar006_task": [50, 52], "pixar007_task": [50, 52], "pixar008_task": [50, 52], "pixar009_task": [50, 52], "pixar010_task": [50, 52], "pixar011_task": [50, 52], "pixar012_task": [50, 52], "pixar013_task": [50, 52], "pixar014_task": [50, 52], "pixar015_task": [50, 52], "pixar016_task": [50, 52], "pixar017_task": 50, "pixar018_task": 50, "pixar019_task": 50, "pixar020_task": 50, "pixar021_task": 50, "pixar022_task": 50, "pixar023_task": 50, "pixar024_task": 50, "pixar123_task": [49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 86, 92, 93, 96, 106], "pixar124_task": [50, 52], "pixar125_task": [50, 52], "pixar126_task": [50, 52], "pixar127_task": 50, "pixar128_task": 50, "pixar_desc": [49, 54, 55, 57, 58, 60], "pixar_spac": [49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 86, 92, 93, 96, 106], "pixdim": [58, 92, 103], "pixel": [42, 43, 175, 320, 333, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 441, 442, 444, 459], "piyadasa": [115, 195, 243], "pkg": 182, "place": [30, 99, 140, 158, 275, 329, 357, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 420, 428, 471], "placehold": 386, "plai": [175, 186], "plain": 173, "plan_polar": 473, "plan_tempo": 473, "planar": 179, "planck": 0, "plane": 442, "planum": [92, 105], "platform": [118, 139, 158, 182, 220], "pleas": [0, 20, 30, 37, 51, 52, 54, 55, 60, 64, 71, 72, 73, 76, 78, 99, 101, 105, 107, 108, 138, 144, 153, 158, 163, 165, 168, 173, 179, 182, 186, 192, 204, 213, 214, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 476, 487], "plenti": 117, "plo": [115, 181], "plot": [1, 2, 4, 8, 9, 20, 21, 22, 24, 26, 27, 28, 30, 31, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 50, 51, 53, 54, 55, 56, 58, 59, 61, 63, 64, 65, 66, 69, 71, 72, 73, 76, 77, 78, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 101, 102, 104, 105, 106, 107, 108, 110, 113, 117, 120, 122, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 158, 160, 163, 164, 165, 170, 173, 174, 175, 178, 179, 180, 181, 182, 185, 186, 232, 241, 246, 248, 249, 254, 258, 259, 261, 264, 265, 268, 278, 286, 287, 295, 320, 333, 339, 350, 351, 364, 371, 378, 457, 459, 467, 471, 472, 483, 487, 488, 489], "plot_3d_and_4d_niimg": [2, 8, 488], "plot_3d_map_to_surface_project": [10, 28, 180, 443, 488], "plot_ab": [10, 15, 64, 80, 81, 102, 109, 388, 427, 486], "plot_adhd_dmn": [63, 74, 488], "plot_adhd_spher": [146, 158], "plot_advanced_decoding_scikit": [99, 112, 488], "plot_affine_transform": [85, 97, 488], "plot_age_group_prediction_cross_v": [100, 112, 146, 158, 488], "plot_anat": [6, 16, 19, 52, 153, 158, 163, 428, 435, 486], "plot_atla": [11, 28, 488], "plot_atlas_comparison": [49, 61, 488], "plot_beta_seri": [101, 112, 488], "plot_bids_analysi": [102, 112, 488], "plot_bids_featur": [64, 74, 488], "plot_canica_analysi": [146, 158], "plot_carpet": [12, 28, 126, 149, 150, 154, 155, 158, 486, 488], "plot_colormap": [13, 28, 488], "plot_compare_decomposit": [50, 61, 146, 158, 180, 488], "plot_compare_mean_imag": [86, 97, 488], "plot_connectivity_measur": [139, 158], "plot_connectom": [23, 49, 52, 53, 54, 55, 56, 60, 120, 122, 124, 135, 136, 141, 144, 146, 155, 158, 160, 163, 441, 444, 486], "plot_connectome_strength": [146, 149, 153, 158], "plot_contrast": 67, "plot_contrast_matrix": [6, 64, 66, 67, 129, 158], "plot_copy_headers_math_img": [103, 112, 488], "plot_data_driven_parcel": [51, 61, 180, 488], "plot_decoding_tutori": [3, 8, 146, 158, 173, 180, 488], "plot_demo_glass_brain": [14, 28, 180, 488], "plot_demo_glass_brain_extens": [15, 28, 488], "plot_demo_more_plot": [16, 28, 488], "plot_demo_plot": [17, 28, 488], "plot_design_matrix": [6, 65, 66, 67, 74, 76, 79, 81, 101, 129, 130, 158, 174, 178, 488], "plot_design_matrix_correl": [65, 129, 130, 158], "plot_dim_plot": [18, 28, 488], "plot_epi": [3, 26, 51, 90, 95, 96, 150, 153, 158, 428, 435, 486], "plot_ev": [73, 129, 130, 149, 158, 174], "plot_extract_regions_dictlearning_map": [52, 61, 488], "plot_extract_regions_labels_imag": [87, 97, 488], "plot_extract_rois_smith_atla": [88, 97, 488], "plot_extract_rois_statistical_map": [89, 97, 488], "plot_fiac_analysi": [127, 158], "plot_fir_model": [66, 74, 488], "plot_first_level_detail": [67, 74, 488], "plot_fixed_effect": [127, 158], "plot_glass_brain": [10, 14, 15, 64, 80, 81, 102, 107, 109, 127, 136, 146, 154, 155, 158, 178, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 435, 486], "plot_group_level_connect": [53, 61, 139, 146, 158, 488], "plot_haxby_anova_svm": [30, 47, 138, 158, 488], "plot_haxby_decod": [146, 158], "plot_haxby_different_estim": [31, 47, 146, 158, 488], "plot_haxby_frem": [32, 47, 180, 488], "plot_haxby_full_analysi": [33, 47, 146, 158, 488], "plot_haxby_glm_decod": [34, 47, 488], "plot_haxby_grid_search": [35, 47, 488], "plot_haxby_mask": [19, 28, 488], "plot_haxby_mass_univari": [104, 112, 488], "plot_haxby_multiclass": [36, 47, 488], "plot_haxby_searchlight": [37, 47, 180, 488], "plot_haxby_searchlight_surfac": [38, 47, 488], "plot_haxby_stimuli": [39, 47, 488], "plot_haxby_understand_decod": [40, 47, 488], "plot_hist": 429, "plot_hrf": [68, 74, 488], "plot_ica_neurovault": [105, 112, 488], "plot_ica_resting_st": [106, 112, 488], "plot_img": [4, 6, 37, 126, 146, 153, 158, 181, 395, 397, 400, 402, 404, 406, 408, 410, 412, 486], "plot_img_comparison": 64, "plot_img_on_surf": [10, 126, 130, 149, 151, 158], "plot_inverse_covariance_connectom": [54, 61, 180, 488], "plot_localizer_mass_univariate_method": [107, 108, 112, 488], "plot_localizer_simple_analysi": [108, 112, 488], "plot_localizer_surface_analysi": [69, 74, 488], "plot_mark": [60, 149, 153, 155, 158, 486], "plot_mask_comput": [90, 97, 186, 488], "plot_matric": 55, "plot_matrix": [27, 32, 36, 52, 53, 54, 55, 56, 58, 59, 60, 111, 140, 141, 146, 158, 163, 424], "plot_mixed_gambles_frem": [41, 47, 488], "plot_miyawaki_encod": [42, 47, 488], "plot_miyawaki_reconstruct": [43, 47, 488], "plot_multi_subject_connectom": [55, 61, 488], "plot_multiscale_parcel": [20, 28, 488], "plot_negate_imag": [91, 97, 488], "plot_neurovault_meta_analysi": [109, 112, 488], "plot_nifti_labels_simpl": [92, 97, 488], "plot_nifti_simpl": [93, 97, 186, 488], "plot_nilearn_101": [4, 8, 488], "plot_oasi": [76, 83, 488], "plot_oasis_vbm": [44, 47, 146, 158, 180, 488], "plot_oasis_vbm_space_net": [45, 47, 488], "plot_overlai": [21, 28, 488], "plot_predictions_residu": [70, 74, 488], "plot_prob_atla": [22, 28, 50, 52, 88, 89, 133, 140, 141, 150, 158, 163, 164, 428, 434, 486, 488], "plot_probabilistic_atlas_extract": [56, 61, 488], "plot_proportion_activated_voxel": [77, 83, 488], "plot_python_101": [5, 8, 488], "plot_resample_to_templ": [94, 97, 488], "plot_roi": [3, 11, 18, 20, 26, 51, 67, 87, 90, 93, 95, 142, 149, 150, 155, 158, 160, 185, 186, 428, 433, 486], "plot_roi_extract": [95, 97, 488], "plot_second_level_association_test": [78, 83, 488], "plot_second_level_design_matrix": [79, 83, 488], "plot_second_level_one_sample_test": [80, 83, 488], "plot_second_level_two_sample_test": [81, 83, 488], "plot_seed_to_voxel_correl": [57, 61, 144, 158, 488], "plot_signal_extract": [58, 61, 186, 488], "plot_simulated_connectom": [59, 61, 488], "plot_simulated_data": [46, 47, 488], "plot_single_subject_single_run": [6, 8, 488], "plot_slic": 46, "plot_smooth_mean_imag": [96, 97, 488], "plot_sphere_based_connectom": [60, 61, 146, 158, 488], "plot_spm_multimodal_fac": [71, 74, 488], "plot_stat_map": [2, 6, 10, 16, 18, 30, 31, 32, 37, 41, 42, 44, 45, 50, 52, 57, 63, 66, 67, 70, 71, 72, 76, 77, 78, 82, 86, 88, 89, 91, 93, 94, 95, 99, 101, 104, 105, 106, 108, 109, 117, 127, 131, 142, 143, 150, 151, 153, 154, 158, 163, 165, 178, 186, 442, 486], "plot_stat_map_from_displai": 16, "plot_surf": [111, 124, 128, 129, 138, 140, 146, 150, 151, 152, 153, 158, 173, 174, 437, 438, 439, 486], "plot_surf_atla": [23, 28, 488], "plot_surf_contour": [10, 126, 129, 149, 158], "plot_surf_roi": [23, 24, 126, 127, 129, 138, 140, 142, 146, 150, 158, 436, 486], "plot_surf_stat_map": [10, 24, 25, 28, 38, 69, 110, 128, 129, 138, 140, 142, 146, 149, 153, 154, 155, 158, 174, 430, 436, 437, 488, 489], "plot_surface_101": [7, 8, 488], "plot_surface_bids_analysi": [110, 112, 488], "plot_surface_image_and_mask": [111, 112, 488], "plot_surface_projection_strategi": [25, 28, 488], "plot_threshold": [82, 83, 488], "plot_trisurf": 25, "plot_two_runs_model": [72, 74, 127, 158, 488], "plot_typ": [63, 320, 333, 360, 459], "plot_visu": [26, 28, 488], "plot_visualize_megatrawls_netmat": [27, 28, 488], "plot_write_events_fil": [73, 74, 488], "plotli": [10, 126, 127, 128, 153, 158, 398, 436, 438, 439, 486, 487], "plotlysurfacefigur": [10, 129, 153, 158, 436], "plotted_slic": 108, "plotting_config": 6, "plt": [5, 6, 12, 13, 16, 19, 25, 26, 31, 33, 35, 36, 39, 40, 42, 43, 44, 45, 46, 50, 51, 53, 57, 59, 60, 63, 64, 65, 66, 67, 68, 70, 76, 79, 80, 81, 85, 92, 95, 100, 101, 102, 107, 108, 111, 185, 419, 420, 421, 425, 429, 431, 433, 434, 436, 437, 438, 439], "plu": [320, 322, 327], "plug": [174, 186, 307, 311], "pluim": [115, 159, 232], "plunkett": [143, 158], "plural": 179, "pmc": [72, 115, 204], "pmc6871319": [72, 115, 204], "pmid": [115, 166, 225, 231, 252, 256], "pna": [115, 170, 181, 192, 196, 227, 253, 362], "pnas_smith09_rsn10": 2, "png": [6, 10, 16, 24, 43, 63, 180, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439, 486], "point": [3, 4, 7, 9, 16, 23, 28, 56, 57, 85, 87, 92, 95, 111, 113, 117, 143, 146, 155, 158, 163, 165, 172, 175, 179, 181, 182, 183, 184, 234, 298, 299, 300, 301, 320, 353, 354, 364, 367, 370, 378, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 421, 425, 428, 431, 433, 434, 435, 439, 442, 452, 453, 459, 471, 488, 489], "pointer": [99, 168], "pokharel": [0, 127, 158], "pokropek": [115, 213], "polar": [92, 232, 302, 305, 306, 320, 333, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 449], "poldrack": [101, 115, 118, 165, 181, 202, 217, 220, 262, 275, 277, 280], "pole": 92, "pole_occipit": 473, "pole_tempor": 473, "polici": [153, 158, 191], "polimeni": [115, 225, 231, 252, 256], "polin": [50, 51, 73, 115, 118, 159, 162, 164, 198, 220, 233, 270, 275, 277, 305, 338, 461], "pollet": [0, 128, 158], "polydata": [24, 129, 158, 467], "polymesh": [7, 24, 129, 158, 286, 436, 437, 438, 439, 445, 467], "polynomi": [65, 67, 174, 320, 327], "pomara": [115, 221], "pone": [115, 181], "pontil": [115, 171, 196], "pool": [196, 204], "pooled_subject": 53, "poorli": [67, 95, 186], "popul": [115, 159, 174, 192, 211, 213, 233, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 461], "popular": [6, 50, 180, 184, 298, 299], "portabl": [63, 76, 186], "portion": 71, "portug": 0, "pos_label": 40, "posit": [6, 10, 15, 17, 18, 25, 50, 53, 60, 67, 71, 75, 80, 81, 82, 83, 85, 95, 100, 113, 115, 117, 128, 130, 149, 153, 158, 165, 170, 172, 175, 178, 179, 186, 192, 233, 236, 240, 270, 315, 320, 333, 335, 336, 357, 384, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 418, 419, 421, 425, 427, 428, 430, 431, 433, 434, 435, 439, 440, 442, 443, 449, 458, 459, 471, 473, 486, 488], "positive_edg": 60, "posixpath": 4, "possibl": [4, 6, 15, 16, 17, 46, 69, 71, 81, 82, 85, 95, 101, 117, 118, 136, 153, 155, 158, 159, 162, 165, 170, 172, 173, 175, 179, 181, 182, 185, 186, 220, 232, 233, 234, 240, 251, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 310, 312, 313, 320, 323, 333, 335, 342, 353, 358, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 414, 415, 421, 427, 431, 446, 447, 448, 449, 459, 486], "possibli": [6, 67, 186], "post": [24, 53, 67, 95, 115, 131, 158, 159, 173, 185, 214, 232, 266, 449, 473], "postcentr": [10, 92], "posterior": [23, 24, 57, 60, 63, 92, 105, 111, 140, 158, 174, 258, 260, 436, 438, 439], "potenti": [6, 56, 57, 90, 92, 93, 95, 101, 115, 152, 158, 170, 173, 179, 182, 253, 335, 366, 369, 373, 473], "power": [12, 58, 60, 76, 78, 80, 115, 117, 123, 137, 149, 158, 159, 166, 167, 171, 179, 184, 186, 188, 196, 203, 258, 259, 361, 362, 420], "power2": 361, "power2d": 361, "ppd": 240, "ppi": 101, "pqu9r": [202, 247], "pr": [155, 158, 182], "practic": [7, 33, 53, 69, 100, 159, 162, 166, 168, 170, 172, 173, 174, 175, 178, 181, 184, 185], "pradeep": [0, 115, 142, 158, 165], "prafulla": 0, "prakhar": [0, 129, 158], "praneeth": [38, 115], "pre": [41, 72, 95, 102, 125, 138, 143, 155, 158, 175, 186, 201, 311], "prec": [55, 172], "prec_to_parti": [138, 158], "preced": [38, 173, 186, 320], "precentr": [10, 92], "precentral_l": 193, "precis": [16, 43, 54, 59, 63, 92, 125, 158, 159, 162, 163, 172, 181, 186, 198, 223, 232, 233, 234, 236, 237, 270, 298, 300, 310, 312, 313, 335, 384], "precision_": [54, 55, 59, 159], "precision_scor": 43, "precision_to_print": 43, "precision_weight": 317, "precisions_": [55, 59, 159, 233, 234], "precisions_init": 236, "precomput": [3, 299, 304], "precun": 92, "pred": 40, "predefin": [125, 158], "predict": [31, 32, 34, 40, 41, 42, 46, 53, 60, 62, 65, 74, 98, 112, 115, 117, 150, 151, 153, 158, 167, 168, 170, 171, 173, 175, 176, 179, 180, 181, 192, 201, 203, 232, 250, 258, 261, 272, 281, 298, 299, 300, 301, 302, 303, 304, 312, 313, 320, 333, 338, 350, 355, 364, 369, 371, 378, 412, 435, 440, 458, 487, 488, 489], "predict_proba": 40, "predicted_timeseri": [70, 174], "prediction_scor": 44, "predicton_accuraci": 3, "predictor": [6, 42, 174, 175, 312, 313, 362], "prefer": [41, 53, 100, 156, 158, 162, 173, 184], "prefix": [64, 76, 323, 338, 360, 365, 366, 367, 368, 369, 370, 371, 461], "prefront": 60, "preliminari": [115, 194, 230, 255], "prematur": 236, "premrudeepreechacharn": [0, 130, 158], "premultipli": 303, "prepar": [44, 60, 95, 100, 102, 117, 133, 158, 169, 183, 365, 366, 367, 368, 369, 371, 372, 373, 374, 449, 489], "prepend": [359, 360], "preproc": [101, 102, 110, 323], "preproc_bold": [49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 86, 92, 93, 96, 101, 102, 106, 110], "preprocess": [6, 12, 30, 35, 38, 42, 43, 46, 72, 90, 93, 100, 102, 106, 110, 111, 115, 116, 125, 138, 158, 163, 164, 170, 171, 175, 179, 186, 191, 194, 215, 221, 222, 228, 240, 241, 261, 284, 320, 323, 338, 359, 361, 364, 365, 366, 367, 368, 369, 370, 371, 449, 461, 472, 473, 477, 489], "prescrib": 336, "preselect": 58, "presenc": [42, 67, 104, 449, 451], "present": [0, 3, 10, 23, 24, 40, 42, 43, 56, 58, 66, 70, 102, 111, 117, 125, 139, 158, 163, 164, 165, 172, 174, 175, 176, 182, 184, 186, 214, 215, 216, 228, 236, 240, 246, 264, 298, 299, 300, 301, 305, 306, 348, 361, 362, 364, 366, 367, 368, 369, 370, 446, 447, 448, 452, 473], "preserv": [53, 60, 100, 343, 355, 430, 446, 447, 448], "preset": [152, 153, 158, 362, 486], "prespecifi": 186, "press": [67, 69, 73, 77, 78, 80, 81, 107, 115, 175, 268, 270, 278, 312, 313], "presum": [315, 336], "pretti": [4, 105], "prettier": [4, 128, 158, 173], "pretty_brain": 486, "prevent": [126, 158, 353, 354, 376, 377, 378, 379, 380, 381], "previou": [2, 10, 15, 16, 19, 31, 37, 42, 43, 44, 45, 50, 51, 56, 60, 64, 65, 67, 73, 78, 88, 95, 104, 108, 129, 152, 153, 158, 159, 162, 166, 168, 172, 175, 236, 298, 299, 300, 301, 305, 306, 367, 370, 447, 473], "previous": [3, 99, 117, 146, 149, 153, 155, 158, 165, 175, 191, 226], "price": [66, 170], "primal": 172, "primari": [81, 173, 320, 333, 459], "primarili": 101, "primat": 68, "prime": [71, 115], "primer": [176, 489], "princip": [196, 272, 362], "principl": [99, 162, 165, 169, 171, 179, 302, 489], "print": [2, 3, 4, 6, 7, 10, 11, 12, 16, 17, 19, 21, 23, 24, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 49, 50, 51, 53, 54, 55, 56, 57, 58, 60, 63, 64, 65, 70, 71, 72, 73, 76, 78, 82, 86, 87, 90, 92, 93, 94, 95, 96, 99, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 117, 129, 158, 165, 173, 181, 184, 193, 242, 320, 333, 345], "print_changed_onli": 186, "prior": [29, 47, 50, 56, 60, 67, 92, 113, 115, 151, 158, 159, 171, 174, 233, 252, 279, 298, 299, 303, 304, 320, 333, 366, 368, 369, 371, 420, 435, 440, 473, 488], "priori": 50, "prioriti": [182, 184, 285], "privat": [124, 126, 127, 155, 158], "prni": [115, 171, 196, 244], "prob": [22, 248, 249, 251, 428, 433], "probabilist": [9, 28, 48, 53, 61, 100, 113, 115, 125, 126, 143, 154, 158, 161, 173, 179, 185, 186, 202, 211, 213, 219, 223, 232, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 261, 265, 345, 364, 369, 397, 416, 417, 421, 428, 432, 433, 434, 435, 440, 441, 453, 457, 473, 486, 488, 489], "probabilit": 251, "probabl": [6, 12, 22, 33, 41, 45, 50, 63, 67, 78, 80, 82, 93, 95, 160, 170, 172, 175, 179, 181, 182, 211, 214, 222, 248, 249, 279], "probe": [67, 69, 169, 179], "probe_funct": 236, "problem": [3, 6, 32, 34, 40, 41, 50, 93, 95, 115, 165, 166, 167, 170, 171, 172, 173, 175, 179, 181, 182, 236, 303, 304, 306, 307, 310, 311, 312, 313, 335, 384], "problemat": 67, "proce": [42, 57, 66, 117], "procedur": [6, 32, 77, 78, 80, 85, 88, 104, 160, 165, 170, 175, 178, 179, 193, 196, 270, 319, 335, 384, 461, 482], "proceed": [115, 170, 174, 181, 192, 196, 227, 253, 302, 362], "process": [16, 17, 33, 37, 40, 41, 44, 52, 55, 64, 92, 95, 102, 105, 115, 116, 117, 131, 158, 159, 160, 163, 164, 165, 168, 172, 173, 175, 178, 179, 181, 182, 184, 185, 186, 192, 196, 201, 202, 212, 213, 219, 233, 250, 266, 270, 298, 299, 300, 301, 303, 304, 305, 306, 320, 333, 338, 339, 344, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 447, 448, 449, 455, 456, 461], "process_executor": 45, "process_mask": [37, 46, 137, 158], "process_mask_": 302, "process_mask_img": [37, 46, 170, 302], "processor": [99, 168], "produc": [6, 15, 25, 48, 61, 64, 72, 80, 101, 107, 113, 153, 155, 158, 175, 179, 186, 261, 296, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 397, 435, 449, 471, 486, 488], "product": [24, 57, 80, 172], "profil": [6, 172, 173, 307, 311], "prognosi": [169, 181], "program": [172, 486], "progress": [37, 44, 104, 107, 133, 158, 320], "prohibit": 172, "project": [0, 9, 10, 16, 25, 28, 38, 44, 60, 76, 110, 111, 113, 115, 129, 136, 138, 140, 148, 152, 153, 158, 172, 174, 180, 191, 194, 196, 199, 202, 221, 222, 223, 240, 245, 272, 279, 284, 305, 306, 338, 373, 388, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 427, 430, 432, 436, 437, 438, 439, 440, 441, 444, 461, 467, 471, 486, 488], "projector": [153, 158, 413], "promis": [115, 170], "promot": [166, 167, 182], "prompt": 487, "pronounc": [419, 433, 434, 435, 442], "proper": [3, 35, 153, 158, 172, 487], "properli": [38, 128, 158, 170, 186, 421, 427], "properti": [51, 71, 168, 172, 175, 179, 186, 229, 302, 305, 306, 308, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 447, 463, 465, 467], "proport": [6, 51, 53, 70, 75, 83, 100, 113, 163, 175, 178, 179, 270, 312, 315, 333, 431, 435, 440, 488], "proportion": 175, "proportion_true_discoveries_img": [77, 315], "propos": [68, 101, 173, 174, 182, 193, 199, 378], "protocol": [73, 179, 198, 270], "proton": [213, 265], "prototyp": 173, "prove": [172, 186], "provid": [3, 5, 6, 10, 30, 35, 40, 46, 49, 50, 51, 54, 56, 58, 64, 67, 68, 71, 72, 76, 77, 78, 80, 81, 85, 90, 92, 93, 95, 99, 102, 105, 107, 110, 111, 116, 117, 118, 126, 127, 129, 133, 141, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 161, 162, 164, 165, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 184, 186, 191, 192, 193, 202, 211, 212, 222, 225, 227, 229, 231, 232, 233, 234, 236, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 264, 275, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 311, 320, 321, 322, 326, 327, 332, 333, 335, 338, 344, 353, 358, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 418, 420, 431, 433, 437, 446, 447, 448, 449, 450, 457, 461, 471, 472, 473, 486, 487], "proximal_oper": [127, 158], "pruett": [60, 115, 203, 258], "pruim": [115, 361, 362], "psc": [127, 146, 150, 158, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 461], "pseudo": [78, 107, 305, 306, 312, 335, 337, 384, 447], "pseudoinvers": 311, "psychiatr": 179, "psychiatri": [115, 211, 221], "psychoinformat": 0, "psycholog": 181, "psychologi": 0, "psychophysiolog": 101, "pth": [129, 158], "public": [0, 2, 64, 101, 118, 124, 126, 127, 153, 155, 158, 173, 179, 220, 222], "publicli": 163, "publish": [0, 228, 275, 344, 462], "pubm": [50, 115, 164, 166, 242, 305], "pubu": 60, "pull": [133, 155, 158, 179, 181], "pure": [99, 104, 303, 304], "purpl": 70, "purple_green": 486, "purpos": [64, 69, 71, 72, 80, 102, 110, 117, 172, 178, 186, 191, 194, 198, 201, 202, 219, 223, 228, 261, 320, 333, 386, 459, 486], "push": [172, 173, 182], "put": [7, 40, 55, 56, 71, 72, 99, 122, 158, 173, 177, 232, 298, 299, 300, 301, 305, 306, 320, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 420, 447, 449, 461, 473], "pval": 384, "pvals_anova": [107, 108], "pvals_bonferroni": 104, "px": [310, 312, 313], "py": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 125, 126, 146, 151, 152, 153, 155, 158, 165, 173, 182, 186, 488], "pylab": 432, "pymvpa": [4, 39, 212, 264], "pyplot": [5, 6, 12, 13, 16, 19, 25, 26, 31, 33, 35, 36, 39, 40, 42, 43, 44, 45, 46, 50, 51, 53, 57, 59, 60, 63, 64, 65, 66, 67, 68, 70, 76, 79, 80, 81, 85, 92, 95, 100, 101, 102, 107, 108, 111, 160, 185, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 425, 426, 427, 428, 430, 431, 433, 434, 435, 436, 438, 439, 440, 486], "pyproject": [125, 158, 173, 182, 487], "pyramid": 7, "pytest": [129, 158, 173, 182, 487], "python": [1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 117, 122, 124, 125, 127, 129, 130, 138, 144, 145, 146, 151, 153, 158, 165, 172, 173, 180, 181, 182, 349, 487, 488], "python2": [143, 144, 145, 146, 158], "python3": [2, 3, 4, 10, 11, 12, 15, 16, 17, 19, 21, 22, 30, 31, 33, 35, 37, 41, 42, 44, 45, 49, 50, 51, 52, 54, 56, 59, 60, 63, 65, 71, 72, 76, 78, 79, 80, 87, 88, 89, 93, 104, 105, 106, 107, 108, 110, 111, 144, 146, 158, 173, 487], "pythoncvers": 182, "pythonvers": 182, "q": [115, 175, 182, 316, 320, 333, 336, 459], "qform_cod": [58, 92, 103], "qi": [303, 304], "qingyang": [115, 221], "qoffset_i": [58, 92, 103], "qoffset_x": [58, 92, 103], "qoffset_z": [58, 92, 103], "quadrat": 361, "qualit": [138, 158], "qualiti": [12, 64, 70, 78, 107, 115, 143, 158, 173, 174, 175, 182, 186, 192, 194, 240, 365, 368, 372, 420, 447], "quality_check": 240, "quantif": [320, 329], "quantifi": 182, "quantil": 175, "quantiti": [172, 308], "quatern_b": [58, 92, 103], "quatern_c": [58, 92, 103], "quatern_d": [58, 92, 103], "quayl": [71, 115], "quebec": 0, "queen": 0, "queri": [105, 109, 275, 277, 297], "question": [3, 7, 53, 66, 67, 100, 162, 181, 182, 186, 194, 261, 487], "quick": [101, 181], "quicker": [162, 173], "quickli": [4, 34, 63, 64, 72, 76, 159, 162, 172, 173, 182], "quickstart": 180, "quinn": [115, 211], "quirion": [0, 140, 158], "quit": [3, 6, 67, 163, 172, 198, 270], "quot": 92, "quotient": 194, "qu\u00e9bec": 0, "r": [2, 4, 7, 10, 15, 16, 25, 31, 35, 42, 43, 49, 53, 58, 60, 71, 92, 95, 103, 104, 115, 126, 146, 153, 158, 159, 160, 174, 182, 199, 202, 203, 211, 219, 225, 227, 231, 240, 245, 250, 252, 253, 256, 258, 262, 280, 298, 299, 303, 304, 320, 333, 338, 360, 361, 362, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 419, 421, 425, 427, 428, 431, 433, 434, 435, 459, 461, 465, 466, 486], "r2": [46, 150, 158, 299, 301, 312], "r2_score": [42, 299, 304], "r2hvk": [223, 251], "r_": 43, "r_squar": [70, 153, 158, 312, 320, 333], "ra": 352, "raamana": [0, 115, 142, 158, 165], "rachakonda": [115, 195, 243], "rachlin": [115, 221], "radio": 356, "radiolog": [17, 126, 129, 158, 385, 387, 388, 419, 421, 425, 427, 428, 431, 433, 434, 435], "radiu": [10, 37, 38, 46, 57, 60, 63, 101, 133, 158, 169, 174, 179, 186, 226, 260, 302, 371, 471, 473, 489], "radius_neighbors_graph": 38, "rahim": [0, 53, 100, 115, 119, 123, 131, 140, 146, 158], "rahul": [0, 115, 126, 158, 211], "rai": [115, 227, 253], "raichl": [115, 362], "raimon": [115, 361, 362], "rainei": [115, 230, 255], "rainer": [115, 170, 181, 302], "rais": [5, 33, 95, 100, 124, 125, 126, 127, 133, 140, 142, 143, 146, 153, 155, 158, 184, 232, 233, 234, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 323, 327, 333, 335, 336, 339, 348, 352, 353, 357, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 380, 446, 447, 448, 449, 487], "rakuten": 0, "ramnani": [115, 192], "ramsei": [115, 159], "ran": 44, "randi": [115, 196, 211, 222, 225, 231, 252, 256], "randn": 46, "random": [3, 7, 42, 43, 46, 53, 57, 65, 99, 100, 104, 111, 115, 138, 150, 158, 162, 163, 164, 165, 172, 173, 175, 181, 199, 245, 305, 306, 310, 312, 313, 320, 329, 335, 384, 446, 447, 449, 451], "random_st": [34, 37, 44, 45, 46, 50, 51, 52, 53, 93, 100, 105, 106, 155, 158, 163, 298, 300, 305, 306, 320, 329, 335, 384, 446, 447], "randomized_svd": [50, 52], "randomli": [22, 170], "randomst": [111, 305, 306, 320, 329, 335, 384, 446, 447], "rang": [10, 11, 15, 16, 19, 22, 40, 43, 46, 49, 50, 51, 52, 55, 57, 59, 64, 68, 70, 79, 80, 81, 88, 89, 92, 96, 101, 104, 107, 111, 136, 140, 150, 158, 172, 173, 196, 202, 233, 236, 247, 337, 357, 427, 430, 435, 439, 441, 442, 443, 445], "ranjit": [115, 221], "rank": [129, 158, 170, 310, 311, 312, 313, 357, 384], "raphael": [0, 124, 150, 151, 152, 153, 154, 155, 158], "raphson": 172, "rapid": [101, 115, 215], "rapidli": 172, "raquel": [58, 115, 361, 362], "rare": 172, "rarr": [117, 186], "rasero": [0, 151, 158], "rastko": [58, 115, 361, 362], "rate": [3, 6, 67, 82, 133, 158, 172, 175, 179, 186, 228, 315, 335], "rater": 240, "rather": [16, 56, 67, 95, 101, 118, 136, 138, 140, 142, 146, 151, 153, 158, 159, 172, 184, 185, 219, 233, 242, 275, 277, 305, 306, 335, 366, 369, 458, 473], "ratio": [72, 95, 142, 158, 179, 261, 303, 305, 306, 447, 449], "ratio_n_voxel": [52, 163, 449], "rational": 175, "raut": [115, 226, 260], "ravel": [39, 43, 45, 46, 104, 107, 108], "ravi": [115, 195, 243], "raw": [82, 93, 102, 110, 150, 158, 165, 184, 186, 201, 202, 217, 228, 247, 298, 299, 300, 301, 305, 306, 367, 370, 428, 435, 447, 457], "raw_valu": 42, "rc": [115, 213], "rdbu_r": [46, 111, 156, 158, 424, 430, 432, 435, 439, 442, 443, 445], "rdpu": 42, "re": [2, 6, 22, 42, 66, 67, 71, 85, 118, 152, 158, 173, 175, 275, 288, 289, 290, 291, 292, 293, 310, 312, 313, 323, 450], "reach": [55, 172, 173, 175, 181, 275, 361], "reaction": 179, "read": [4, 24, 38, 46, 67, 69, 78, 82, 102, 105, 107, 109, 110, 115, 118, 149, 158, 173, 180, 181, 198, 215, 220, 268, 269, 270, 375, 463], "read_csv": [3, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 70, 95, 99, 104, 117, 184], "read_tabl": [6, 66, 67, 71], "readabl": [67, 125, 158], "reader": [67, 181, 489], "readi": [63, 76, 117, 137, 158, 164, 173, 182], "readili": [160, 165, 168, 181, 184, 185, 449], "readm": [149, 158, 201], "real": [42, 165, 170, 172, 175, 184, 186], "real_timeseri": 70, "realign": [71, 110, 215, 229, 273], "realist": [115, 193, 261, 436, 438, 439, 445], "realli": [3, 70, 144, 158, 165, 362], "realm": 95, "reason": [32, 38, 50, 67, 93, 118, 166, 168, 170, 172, 173, 175, 182, 471], "reassign": 446, "reassur": 67, "rebecca": [60, 115, 201, 203, 258, 261], "rec": 323, "recal": [43, 298, 300], "recall_scor": 43, "recall_to_print": 43, "recap": [2, 4], "recapitul": 226, "recarrai": [153, 158], "recast": 186, "receiv": [40, 70, 101, 165, 179, 429], "recent": [10, 137, 140, 141, 143, 153, 158, 164, 182, 465], "recip": 185, "recognit": [0, 3, 29, 31, 47, 51, 71, 98, 112, 113, 115, 125, 158, 168, 170, 171, 180, 181, 196, 244, 264, 300, 302, 343, 345, 348, 350, 351, 364, 370, 383, 384, 412, 428, 432, 435, 440, 488], "recogniz": 173, "recommend": [25, 101, 105, 124, 129, 144, 145, 146, 151, 153, 155, 158, 165, 170, 175, 181, 184, 186, 361, 449, 461, 471, 473, 487], "recomput": [67, 99, 170, 317], "reconstruct": [29, 42, 47, 113, 115, 186, 200, 218, 232, 239, 274, 305, 306, 364, 367, 370, 440, 455, 456, 488], "reconstructed_img": [305, 306], "record": [34, 42, 67, 165, 175, 179], "recov": [46, 60, 139, 158, 159], "recoveri": [115, 181, 305], "recruit": [115, 181], "rectangl": [19, 42, 51, 85], "recurs": [46, 51, 99, 115, 146, 158, 162, 168, 179, 180, 447, 448, 454], "recursive_neighbor_agglomer": [51, 124, 158], "red": [15, 16, 19, 42, 53, 128, 144, 158, 174, 175, 179, 486], "reddi": [0, 115, 122, 131, 133, 136, 140, 141, 142, 143, 146, 150, 158, 165], "redirect": 182, "reduc": [17, 30, 34, 35, 46, 51, 67, 80, 88, 95, 101, 129, 142, 143, 146, 150, 158, 167, 171, 172, 173, 179, 186, 196, 222, 234, 300, 301, 305, 306, 361, 362, 365, 368, 436, 438, 439, 443, 445, 446, 447, 448, 452], "reduce_confound": [58, 261], "reduced_confound": 58, "reducedconfounds_regressor": [49, 54, 55, 57, 58, 60], "reduct": [169, 306, 447, 489], "reduction_ratio": 306, "redund": [129, 146, 158, 173], "ree": 228, "rees": [115, 227, 253], "ref": [56, 92, 165, 473], "ref_img": 429, "ref_label": [64, 429], "ref_niimg": [103, 351], "refactor": [125, 126, 127, 129, 137, 151, 153, 155, 158, 182], "refer": [11, 20, 48, 61, 67, 69, 79, 94, 95, 108, 113, 115, 116, 117, 124, 125, 126, 131, 136, 144, 151, 153, 154, 155, 158, 161, 169, 173, 174, 175, 177, 178, 184, 185, 186, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 486, 488, 489], "referenc": 174, "refin": [55, 59, 60, 234], "refit": [40, 100], "reflect": [53, 102, 159, 173, 175, 196, 240, 244, 433, 434], "reformat": [80, 125, 158], "refresh": [133, 158], "reg": 72, "reg_i": 327, "reg_nam": 322, "regard": [65, 130, 149, 158, 171, 266, 291, 362], "regardless": [275, 277, 303], "regim": 51, "region": [6, 11, 16, 17, 20, 23, 24, 32, 42, 44, 45, 46, 48, 50, 51, 54, 57, 58, 60, 61, 67, 70, 71, 84, 97, 100, 111, 113, 115, 124, 126, 128, 130, 131, 135, 137, 138, 141, 146, 149, 151, 153, 158, 159, 161, 164, 165, 171, 173, 174, 175, 179, 181, 183, 185, 193, 196, 199, 202, 203, 211, 212, 214, 217, 219, 223, 226, 231, 232, 240, 242, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 260, 261, 264, 276, 302, 305, 306, 343, 345, 348, 350, 351, 355, 357, 362, 364, 365, 366, 368, 369, 371, 372, 373, 374, 397, 398, 415, 416, 417, 418, 419, 421, 425, 432, 433, 434, 435, 437, 438, 440, 441, 457, 473, 486, 488, 489], "region_atlas_": 368, "region_coord": [53, 54, 56, 100, 135, 158, 250], "region_extractor": [87, 153, 158], "region_id": [128, 158], "region_ids_": 368, "region_label": 87, "region_labels_min_s": 87, "region_labels_not_diag": 87, "region_names_": [128, 129, 158, 368], "region_sign": [93, 364, 365, 366, 367, 368, 369, 370, 371, 373, 447, 449, 453, 456], "region_t": 55, "regionextractor": [52, 88, 130, 131, 133, 139, 144, 158, 163, 450, 451], "regions_dict": 10, "regions_extracted_img": [52, 163, 451], "regions_img": [52, 88, 163], "regions_img_": [52, 88, 163, 449], "regions_index": [52, 163], "regions_indic": 10, "regions_indices_network3": 88, "regions_indices_of_map3": [52, 163], "regions_percentile_img": 89, "regions_value_img": 89, "regist": [175, 192, 196, 211, 244], "registr": [115, 160, 175, 196, 213, 354, 486], "regress": [27, 31, 32, 41, 42, 46, 57, 58, 115, 117, 126, 133, 143, 149, 150, 151, 155, 158, 160, 165, 169, 170, 171, 173, 174, 175, 179, 192, 196, 240, 298, 299, 300, 301, 304, 306, 307, 312, 313, 320, 333, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 461, 489], "regression_result": [72, 316], "regressionresult": [155, 158, 307, 311, 316, 320, 329], "regressor": [41, 45, 58, 63, 64, 67, 101, 102, 107, 110, 124, 129, 149, 150, 154, 158, 160, 166, 174, 272, 299, 301, 304, 316, 320, 322, 327, 335, 361, 362, 384, 424], "regul": 192, "regular": [3, 32, 40, 41, 46, 58, 67, 92, 95, 103, 115, 118, 149, 158, 165, 166, 169, 171, 172, 179, 180, 181, 185, 233, 234, 236, 300, 301, 303, 304, 348, 487, 489], "regularli": 471, "reho": 240, "reilli": [115, 192], "reiner": [0, 126, 158], "reining": [0, 146, 158], "reintroduc": [115, 338, 461], "reiss": [115, 221], "reject": [175, 179], "rel": [40, 42, 51, 60, 66, 67, 92, 173, 175, 179, 182, 298, 299, 300, 301, 302, 303, 304, 320, 322, 327, 342, 441, 443, 445, 473], "relabel": [101, 450], "relabeled_yeo_atla": 87, "relat": [7, 41, 48, 51, 52, 65, 66, 67, 68, 69, 71, 82, 101, 108, 113, 115, 118, 130, 137, 138, 158, 160, 161, 163, 165, 166, 169, 172, 173, 179, 180, 181, 182, 186, 216, 232, 261, 266, 288, 289, 292, 305, 306, 308, 320, 344, 358, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 447, 449, 462, 487, 489], "relationship": [42, 44, 76, 170, 178, 180, 181, 192, 272, 384], "relative_to": [64, 76, 110], "relax": [126, 158, 213], "relaxometri": 265, "releas": [27, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 192, 196, 199, 213, 251, 252, 265, 266, 272, 284, 288, 289, 290, 291, 292, 293, 338], "relev": [30, 35, 51, 58, 67, 69, 106, 118, 151, 155, 158, 165, 166, 172, 173, 182, 185, 186, 232, 233, 234, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 335, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 384, 446, 447, 448, 449], "reli": [0, 6, 31, 67, 93, 95, 126, 127, 129, 136, 152, 158, 162, 172, 175, 179, 184, 266, 323, 471, 486], "reliabl": [58, 115, 143, 158, 175, 198, 270, 362], "remain": [4, 6, 10, 22, 31, 33, 37, 38, 41, 42, 44, 46, 55, 58, 66, 71, 90, 101, 102, 103, 104, 107, 127, 149, 158, 170, 173, 471], "remark": 175, "rememb": 486, "remi": [143, 158], "remot": [173, 275, 277], "remov": [6, 31, 33, 34, 36, 42, 43, 44, 78, 87, 90, 105, 106, 107, 108, 115, 117, 122, 124, 126, 127, 128, 129, 133, 137, 138, 139, 141, 143, 144, 146, 148, 149, 151, 153, 156, 158, 166, 171, 172, 182, 183, 185, 196, 222, 232, 257, 281, 320, 336, 338, 342, 344, 355, 357, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 420, 433, 449, 450, 452, 453, 457, 460, 461, 462, 467, 489], "rena": [115, 146, 158, 162, 167, 179, 180, 300, 301, 447, 454], "rena_clust": [51, 124, 158], "rena_labels_img": 51, "rena_parcel": 51, "renam": [124, 127, 139, 143, 158, 182], "render": [37, 51, 54, 55, 60, 64, 76, 78, 126, 128, 144, 158, 173, 398, 427, 429, 436, 438, 439, 441, 443, 444, 445], "renew": [133, 158], "renn": 0, "reorder": [58, 129, 141, 158, 352, 415, 432], "reorgan": [153, 158, 173], "repeat": [60, 67, 68, 165, 175, 228], "repetit": [3, 6, 34, 65, 71, 72, 103, 115, 129, 142, 158, 175, 179, 204, 261, 266, 289, 292, 298, 299, 300, 301, 303, 304, 305, 306, 320, 323, 324, 325, 326, 330, 331, 332, 338, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 420, 447, 449, 461], "replac": [3, 4, 31, 36, 37, 42, 43, 44, 49, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 70, 78, 80, 90, 92, 93, 95, 99, 100, 101, 104, 105, 106, 107, 108, 111, 117, 124, 125, 126, 129, 137, 138, 143, 146, 149, 150, 151, 152, 153, 158, 168, 172, 173, 182, 222, 338, 355, 361, 375, 378, 461], "repli": 182, "replic": 196, "repo": [173, 182, 487], "repons": [212, 264], "report": [6, 51, 54, 55, 56, 58, 70, 90, 92, 93, 105, 110, 115, 127, 128, 129, 146, 151, 153, 155, 156, 158, 175, 176, 177, 182, 186, 202, 230, 255, 315, 320, 333, 360, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 384, 436, 438, 439, 449, 478, 487], "report_dim": [320, 333, 459], "report_flm": 110, "report_slm": 110, "report_text": [320, 333, 459], "repositori": [2, 115, 116, 173, 179, 182, 184, 213, 220, 275, 277, 489], "repres": [6, 7, 16, 21, 34, 36, 53, 54, 56, 57, 69, 77, 80, 95, 115, 129, 138, 150, 158, 159, 160, 163, 164, 173, 175, 178, 179, 184, 185, 186, 196, 202, 220, 240, 244, 247, 261, 290, 291, 293, 302, 320, 333, 342, 353, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 416, 421, 427, 431, 449, 452, 459, 469, 471, 486], "represenet": 186, "represent": [3, 7, 17, 32, 33, 34, 37, 39, 54, 55, 58, 60, 64, 76, 78, 85, 95, 99, 101, 106, 115, 117, 146, 158, 161, 164, 170, 179, 183, 185, 212, 226, 260, 264, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 338, 339, 342, 343, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 364, 365, 366, 367, 368, 369, 370, 371, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 420, 427, 428, 430, 433, 434, 435, 442, 443, 447, 449, 452, 453, 455, 456, 459, 471, 489], "reproduc": [3, 33, 42, 43, 50, 53, 73, 99, 101, 115, 180, 198, 270, 300, 301], "request": [34, 101, 129, 133, 146, 158, 162, 172, 179, 192, 232, 233, 234, 247, 248, 249, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 335, 358, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 384, 398, 413, 414, 442, 446, 447, 448, 449, 472, 473, 486, 487], "request_mock": 173, "requir": [10, 21, 37, 40, 44, 49, 57, 65, 68, 69, 73, 76, 79, 94, 118, 131, 136, 138, 140, 149, 153, 154, 158, 160, 163, 168, 170, 172, 173, 175, 179, 181, 182, 184, 185, 186, 196, 222, 234, 279, 298, 320, 327, 336, 356, 361, 362, 366, 369, 371, 384, 426, 449, 450, 486, 487], "rerun": [37, 51, 54, 55, 60, 64, 76, 78], "resampl": [10, 12, 32, 42, 43, 45, 49, 50, 51, 52, 54, 55, 56, 58, 67, 71, 76, 84, 92, 93, 97, 105, 113, 117, 125, 135, 136, 139, 140, 146, 150, 152, 153, 158, 183, 196, 215, 222, 229, 275, 277, 290, 291, 293, 295, 298, 299, 300, 301, 303, 304, 305, 306, 320, 333, 343, 348, 350, 352, 353, 354, 365, 366, 367, 368, 369, 370, 376, 378, 379, 380, 381, 427, 428, 434, 435, 440, 442, 447, 452, 471, 473, 488, 489], "resample_img": [54, 56, 71, 85, 90, 94, 125, 129, 140, 146, 155, 158, 185, 186, 275, 305, 306, 320, 333, 352, 354, 367, 370, 376, 378, 379, 381, 447], "resample_to_img": [67, 76, 94, 129, 135, 158, 185, 186, 353], "resampled_affin": 94, "resampled_icbm_mask": 67, "resampled_shap": 94, "resampled_stat_img": 94, "resampling_interpol": [140, 158, 427, 428, 434, 435, 442], "resampling_target": [53, 55, 56, 92, 95, 100, 186, 365, 366, 368, 369, 473], "rescal": [6, 24, 34, 42, 81, 125, 152, 158, 385, 387, 388, 423, 436, 438, 439, 445], "research": [0, 115, 179, 184, 186, 191, 192, 194, 196, 198, 201, 202, 211, 219, 222, 223, 261, 362], "resembl": 164, "reset": 103, "reshap": [40, 42, 43, 46, 52, 68, 78, 107, 127, 139, 158, 163, 232], "resid": [70, 155, 158, 361, 362], "residu": [62, 74, 113, 153, 158, 170, 176, 196, 281, 299, 304, 307, 308, 311, 312, 313, 320, 333, 338, 350, 355, 364, 371, 378, 412, 435, 440, 458, 488, 489], "resili": 67, "resiz": [129, 158, 183, 185, 298, 299, 300, 301, 303, 304, 305, 306, 320, 333, 350, 353, 367, 370, 376, 378, 379, 381, 441, 443, 444, 445, 447, 457, 489], "reslic": [378, 381], "resolut": [20, 22, 76, 77, 94, 105, 115, 117, 124, 125, 139, 151, 152, 158, 163, 183, 193, 196, 201, 202, 205, 206, 207, 208, 209, 223, 225, 242, 244, 247, 251, 252, 253, 261, 283, 286, 287, 288, 289, 290, 291, 292, 293, 294, 315, 370, 377, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 430, 443, 449, 489], "resolution_mm": [22, 49, 247, 252], "resolv": [137, 147, 158], "reson": [0, 115, 175, 179, 191, 196, 211, 244, 270], "resort": 69, "resourc": [0, 184, 223], "resp": 117, "respect": [3, 40, 64, 103, 129, 146, 155, 158, 159, 173, 175, 179, 182, 186, 258, 260, 298, 299, 300, 301, 320, 322, 323, 327, 333, 342, 353, 354, 449, 451], "respir": 67, "respond": 175, "respons": [6, 62, 65, 70, 71, 73, 74, 80, 81, 113, 153, 158, 165, 174, 175, 179, 181, 182, 212, 229, 271, 320, 322, 324, 325, 326, 327, 330, 332, 422, 423, 435, 488], "response_funct": 68, "rest": [2, 3, 6, 10, 22, 24, 31, 33, 34, 36, 40, 43, 50, 52, 53, 56, 57, 58, 64, 70, 72, 88, 90, 93, 99, 100, 101, 115, 126, 134, 138, 158, 162, 163, 164, 168, 172, 173, 179, 181, 184, 191, 192, 194, 195, 196, 199, 203, 219, 221, 226, 227, 228, 240, 241, 243, 244, 253, 284, 297, 306, 359, 361, 362, 370, 432, 449, 473, 489], "rest_dataset": [50, 52, 55, 163], "restart": [175, 305], "resting_st": 31, "restom": [115, 361, 362, 462], "restor": [125, 158], "restrict": [30, 31, 32, 90, 92, 95, 143, 158, 165, 170, 186, 192, 240, 297], "restructur": 185, "restructuredtext": 173, "result": [3, 6, 7, 10, 15, 16, 25, 31, 34, 37, 38, 42, 43, 44, 45, 46, 49, 50, 51, 53, 57, 59, 60, 63, 64, 66, 67, 69, 71, 72, 73, 76, 78, 79, 80, 85, 87, 88, 89, 93, 94, 95, 96, 100, 101, 102, 103, 105, 106, 107, 108, 110, 111, 115, 116, 118, 125, 126, 128, 136, 143, 146, 149, 154, 155, 158, 159, 161, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 179, 184, 185, 186, 191, 193, 198, 199, 202, 212, 218, 219, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 270, 275, 277, 283, 286, 287, 294, 298, 299, 302, 309, 310, 312, 313, 314, 320, 327, 329, 333, 335, 338, 348, 349, 350, 353, 360, 368, 369, 371, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 436, 438, 439, 443, 452, 453, 458, 471, 483, 486, 489], "result_img": [86, 103, 184, 349], "result_img_with_head": [103, 349], "result_t": 458, "resultfilt": [118, 275], "results_": 320, "resum": [241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 256, 261, 264, 265, 266, 270, 272, 273, 274, 279, 284, 294], "retain": [72, 153, 158, 165, 166, 175, 232, 233, 234, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 449, 452, 453], "retest": 115, "retinotop": 81, "retriev": [2, 21, 23, 46, 50, 91, 92, 93, 117, 153, 158, 160, 165, 168, 180, 184, 186, 220, 256, 281, 282, 285, 361, 362, 413, 414], "return": [2, 3, 4, 10, 12, 15, 16, 19, 31, 32, 34, 37, 41, 42, 43, 44, 45, 46, 49, 50, 54, 56, 58, 67, 68, 72, 80, 81, 85, 88, 95, 101, 104, 108, 109, 117, 118, 125, 126, 127, 129, 135, 139, 146, 149, 151, 153, 154, 155, 158, 160, 165, 167, 170, 172, 173, 179, 181, 182, 184, 221, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 469, 470, 471, 481, 486], "return_cod": [50, 52], "return_count": 51, "return_dist": 51, "return_estim": 99, "return_index": 36, "return_invers": 53, "return_label_map": 458, "return_label_nam": 416, "return_masked_atla": [127, 158, 452], "return_offset": 342, "return_raw_data": 273, "return_z_scor": 317, "reus": [2, 16, 19, 31, 37, 42, 44, 45, 50, 72, 88, 104, 108], "reusabl": [129, 158], "rev": 182, "reveal": [53, 102, 104, 170], "revers": [93, 139, 146, 158], "review": [146, 158, 170, 182, 192, 214], "revious": 71, "revis": 359, "rewamp": [122, 158], "reward": 260, "rework": [124, 133, 139, 146, 152, 158], "rewritten": 118, "rex": [115, 195, 243], "rf": [42, 68], "rf_model": 68, "rfe": [46, 99, 168], "rfe_svc": 99, "rfmri": [115, 192], "rgb": [33, 444], "rgba": [437, 444], "rgbcmyk": [52, 163], "rh": 218, "rho": 307, "rich": [129, 158, 165], "richard": [101, 115], "richardson": [115, 201, 261], "rid": [320, 333], "ridg": [32, 42, 46, 111, 166, 167, 171, 298, 299, 300, 301], "ridge_classifi": [31, 166, 298, 300], "ridge_cv": 46, "ridge_regressor": [166, 299, 301], "ridgeclassifi": 38, "ridgeclassifiercv": [125, 158, 298, 299, 300, 301], "ridgecv": [46, 125, 158, 298, 299, 300, 301], "ridgwai": [104, 115, 384], "riemannian": 115, "right": [7, 10, 13, 19, 21, 23, 24, 26, 33, 38, 42, 46, 49, 52, 60, 66, 67, 69, 73, 77, 80, 81, 87, 95, 99, 110, 111, 136, 141, 146, 149, 151, 158, 162, 163, 169, 173, 181, 185, 200, 205, 206, 207, 208, 209, 210, 218, 221, 240, 246, 248, 249, 254, 268, 270, 278, 283, 284, 286, 300, 301, 320, 333, 334, 352, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 419, 421, 422, 425, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 443, 445, 459, 465, 466, 473, 486, 489], "right_coord": 7, "right_data": 7, "right_fac": 7, "right_hemi": 49, "rigid": [65, 196], "rigor": 336, "ring": 460, "rint": 68, "riobueno": [115, 201, 261], "rise": 162, "risk": [6, 115, 181], "rissman": [101, 115], "rivera": [115, 118, 220, 275, 277], "rm": 182, "rng": [7, 45, 65, 111, 173], "roalf": [58, 115, 361, 362], "robert": [0, 115, 124, 125, 151, 158, 172, 195, 196, 213, 243], "roberto": [0, 115, 136, 146, 158, 227, 253], "robinson": [104, 115, 192, 384], "robust": [3, 32, 41, 95, 115, 148, 158, 163, 165, 169, 179, 300, 301, 361, 362, 489], "roc": [40, 165, 179], "roc_auc": [31, 33, 99, 168, 298, 300], "roc_auc_ovr": 40, "roc_auc_scor": 40, "rochel": [115, 221], "rockland": [115, 221], "roelof": [0, 124, 125, 158], "roffman": [115, 225, 231, 252, 256], "roger": [115, 195, 205, 206, 207, 208, 209, 243, 283], "roi": [10, 11, 18, 22, 26, 29, 34, 47, 58, 60, 84, 87, 89, 92, 97, 100, 113, 115, 118, 126, 138, 146, 149, 158, 165, 181, 183, 199, 203, 224, 225, 226, 246, 252, 258, 259, 260, 264, 298, 343, 345, 348, 350, 351, 355, 356, 364, 368, 370, 398, 425, 427, 434, 435, 437, 438, 440, 486, 488, 489], "roi_img": [70, 434], "roi_map": [10, 23, 24, 127, 158, 398, 437, 438], "roi_siz": 46, "rois_aal": 240, "rois_cc200": 240, "rois_cc400": 240, "rois_dosenbach160": 240, "rois_ez": 240, "rois_ho": 240, "rois_tt": 240, "rokem": [0, 131, 143, 158], "role": [6, 153, 158], "romuald": [143, 158], "ronald": [0, 119, 158], "rooij": [115, 361, 362], "room": 432, "roorke": 0, "root": [51, 172, 191, 232, 248, 249, 311, 361, 446, 447, 448], "rosa": [115, 196, 244], "rosen": [115, 200, 246], "rosenblatt": [77, 115, 315], "rot_i": 58, "rot_x": 58, "rot_z": 58, "rotat": [13, 33, 65, 85, 95, 186, 323, 361], "rotation_matrix": 85, "rothberg": [0, 140, 143, 158], "roti": 102, "rotx": 102, "rotz": 102, "rough": [233, 298, 299, 300, 301, 303, 304, 305, 306, 320, 333, 339, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 447, 448, 449], "roughli": [42, 166, 173, 175, 196], "round": [51, 436, 439], "rout": [232, 233, 234, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 449], "routin": [67, 90, 184, 273, 486], "row": [3, 6, 40, 42, 58, 67, 73, 99, 101, 118, 150, 158, 179, 275, 277, 310, 311, 312, 313, 320, 333, 334, 335, 395, 397, 400, 414, 419, 425, 428, 430, 432, 433, 434, 435, 446, 458, 471], "row_numb": 101, "ro\u00dfmanith": [0, 127, 158], "rprojector": [15, 389, 413], "rrid": 0, "rsn": [2, 22, 88, 138, 158, 195, 227, 243, 253], "rsn10": [227, 253], "rsn20": [227, 253], "rsn28": [22, 195, 243], "rsn70": [227, 253], "rsn_indic": [195, 243], "rsn_name": 195, "rsquared_statmap": [64, 76, 360], "rst": [124, 158, 173, 182], "rt": 228, "rtol": 342, "ru": [115, 225, 252], "ruben": [58, 115, 361, 362], "rudimentari": 31, "ruf012": [130, 158], "ruff": [129, 158, 173, 182], "rugg": [71, 115], "rule": [123, 158, 165, 166, 173, 192, 298, 299, 300, 301], "run": [1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 68, 69, 70, 73, 74, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 117, 127, 129, 130, 133, 137, 151, 153, 155, 158, 159, 160, 162, 165, 166, 169, 170, 171, 172, 173, 174, 177, 181, 182, 184, 185, 186, 196, 204, 212, 218, 229, 234, 236, 263, 264, 270, 274, 281, 282, 305, 306, 317, 320, 323, 327, 336, 338, 339, 350, 353, 362, 370, 379, 381, 384, 419, 422, 423, 428, 435, 440, 446, 457, 458, 461, 472, 473, 486, 487, 488, 489], "run_face_mask": 104, "run_glm": [34, 151, 155, 158], "run_house_mask": 104, "run_img": [63, 69, 102, 110, 320], "run_label": [3, 30, 31, 33, 34, 99, 165], "run_mask": 104, "run_seri": 375, "run_target": 95, "runnabl": 173, "runner": [2, 3, 4, 6, 7, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 86, 87, 88, 89, 90, 92, 93, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 473], "runtim": [45, 155, 158, 173, 303, 304], "runtimeerror": [5, 100], "runtimewarn": [60, 78, 80, 111], "ruparel": [58, 115, 361, 362], "russel": [58, 101, 115, 118, 165, 181, 217, 220, 221, 275, 277, 312, 313, 361, 362], "rv": 0, "rx": 65, "ry": 65, "ryan": [0, 115, 146, 158, 226, 260], "rz": 65, "r\u00e9mi": [0, 125, 126, 127, 128, 129, 130, 140, 156, 158], "s01": [78, 107], "s1": 81, "s102": [115, 213], "s1053": [115, 200, 213, 246], "s151": [115, 200, 246], "s2": 81, "s3": 64, "s_calcarin": 473, "s_central": 473, "s_cingul": 473, "s_circular_insula_": 473, "s_circular_insula_inf": 473, "s_circular_insula_sup": 473, "s_collat_transv_": 473, "s_collat_transv_post": 473, "s_front_inf": 473, "s_front_middl": 473, "s_front_sup": 473, "s_interm_prim": 473, "s_intrapariet_and_p_tran": 473, "s_oc": 473, "s_oc_middle_and_lunatu": 473, "s_oc_sup_and_transvers": 473, "s_occipital_": 473, "s_orbit": 473, "s_orbital_later": 473, "s_orbital_m": 473, "s_parieto_occipit": 473, "s_pericallos": 473, "s_postcentr": 473, "s_precentr": 473, "s_suborbit": 473, "s_subpariet": 473, "s_temporal_inf": 473, "s_temporal_sup": 473, "s_temporal_transvers": 473, "sa": [215, 245], "sabb": [115, 262, 280], "sabuncu": [115, 225, 231, 252, 256], "sachin": [0, 155, 158], "saclai": [0, 173], "sadaghiani": [50, 115, 164, 305], "sadato": [42, 43, 115, 218, 274], "sadek": [115, 195, 243], "sadil": [0, 126, 129, 158], "safe": [72, 103, 138, 158], "safe_get_data": [78, 80], "sage": [0, 155, 158], "sagit": 356, "sagitt": [15, 95, 320, 333, 393, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 419, 421, 425, 427, 428, 431, 433, 434, 435, 459], "sai": [6, 7, 66, 70, 99, 103, 118, 173, 175, 182, 310], "said": [51, 175], "sake": [24, 38, 67, 80, 107], "salat": [115, 200, 246], "salienc": [53, 260], "salimi": [115, 159, 192], "salma": [0, 119, 122, 131, 133, 140, 143, 144, 158], "salo": [0, 124, 125, 126, 127, 150, 153, 154, 155, 158], "salt": 70, "sam": [0, 125, 158], "samanta": [0, 126, 158], "samantha": [115, 221], "samara": [115, 163, 172, 233, 236, 449], "same": [2, 3, 6, 15, 16, 19, 22, 24, 31, 35, 37, 38, 40, 42, 43, 44, 45, 49, 50, 51, 52, 57, 60, 65, 67, 69, 70, 71, 72, 73, 85, 87, 88, 89, 95, 99, 101, 102, 104, 108, 110, 111, 118, 126, 131, 138, 143, 149, 150, 151, 152, 153, 158, 159, 160, 163, 164, 165, 166, 170, 172, 173, 175, 177, 178, 179, 182, 184, 185, 186, 204, 213, 229, 232, 233, 234, 236, 248, 249, 257, 258, 260, 265, 266, 283, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 303, 304, 305, 306, 320, 322, 323, 327, 333, 335, 338, 340, 349, 351, 353, 358, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 380, 382, 390, 391, 392, 393, 394, 403, 404, 407, 408, 409, 410, 415, 419, 421, 425, 427, 428, 432, 433, 434, 435, 443, 446, 447, 450, 455, 456, 458, 459, 461], "sami": [0, 155, 158], "sampl": [3, 9, 28, 32, 35, 37, 42, 51, 60, 65, 67, 69, 71, 75, 76, 78, 79, 82, 83, 85, 95, 102, 107, 110, 113, 115, 117, 129, 149, 151, 152, 158, 160, 165, 170, 172, 174, 175, 178, 181, 186, 191, 196, 202, 214, 221, 232, 233, 234, 236, 261, 270, 288, 289, 290, 291, 292, 293, 295, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 321, 322, 324, 325, 326, 327, 330, 331, 332, 333, 335, 338, 342, 343, 349, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 383, 384, 396, 411, 420, 423, 427, 430, 439, 440, 446, 447, 448, 449, 460, 461, 462, 471, 484, 488], "sample_horizont": 81, "sample_mask": [34, 51, 54, 55, 58, 60, 67, 124, 126, 129, 130, 151, 153, 155, 158, 320, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 449, 461], "sample_point": 25, "sample_vert": 81, "sample_weight": [298, 299, 300, 301, 303, 304], "sampling_r": 460, "san": 0, "sane": [303, 304], "sang": 115, "saniti": 186, "sanz": [0, 146, 158], "sarah": [115, 195, 243], "sarang": 115, "saroja": [115, 221], "sass": [0, 153, 158], "sassenhagen": [0, 140, 158], "satisfi": [172, 182], "sato": [42, 43, 115, 218, 274], "satrajit": [115, 118, 220, 275, 277], "satterthwait": [58, 115, 361, 362], "save": [3, 6, 10, 15, 22, 24, 30, 34, 43, 44, 45, 50, 51, 52, 53, 63, 67, 72, 73, 87, 92, 93, 95, 99, 100, 101, 105, 109, 118, 126, 128, 129, 144, 153, 158, 163, 172, 184, 185, 186, 215, 275, 277, 303, 304, 313, 320, 333, 360, 365, 366, 368, 369, 370, 371, 372, 373, 374, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 457, 459, 463, 464, 465, 466, 467, 468, 489], "save_as_html": [34, 63, 64, 72, 76, 92, 93, 186, 441, 442, 443, 444, 445, 457, 459, 486], "save_glm_to_bid": [64, 76, 124, 128, 155, 158], "savefig": [10, 16, 43, 57, 63, 76, 110, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 421, 425, 427, 428, 431, 433, 434, 435, 486], "savio": [0, 119, 158], "saw": 15, "sax": [115, 201, 261], "sayal": [0, 129, 158], "scalabl": [115, 167, 300, 301], "scalar": [102, 170, 186, 307, 308, 310, 311, 312, 313, 355, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 421, 431], "scalarformatt": 51, "scale": [6, 16, 40, 43, 51, 56, 63, 65, 68, 70, 71, 73, 95, 115, 118, 136, 143, 153, 158, 166, 170, 186, 196, 198, 218, 220, 244, 270, 275, 277, 290, 291, 293, 303, 304, 307, 310, 311, 312, 313, 315, 320, 328, 333, 335, 336, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 446, 447, 448, 458, 459, 461, 471, 473, 489], "scale007": [196, 244], "scale012": [196, 244], "scale020": [196, 244], "scale036": [196, 244], "scale064": [196, 244], "scale122": [196, 244], "scale197": [196, 244], "scale325": [196, 244], "scale444": [196, 244], "scale_": 16, "scale_loc": [386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "scale_s": [16, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "scale_unit": [16, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "scalebar": [16, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 486], "scaling_axi": [101, 153, 158, 320], "scan": [6, 34, 37, 57, 60, 65, 66, 67, 68, 71, 95, 101, 115, 151, 158, 162, 170, 175, 179, 184, 194, 196, 211, 215, 228, 270, 305, 306, 320, 322, 327, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 420, 447, 449, 452, 453, 455, 461], "scanner": [67, 103, 175, 179, 361], "scap": 64, "scatter": [25, 95, 155, 158, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 431], "scatter3d": 398, "scenario": [67, 174, 175, 186], "schaefer": [115, 188, 252], "schaefer2018_400parcels_7networks_order_fslmni152_1mm": 473, "schaefer2018_localglob": [225, 252], "schaefer_2018": 473, "schemat": [388, 421, 427, 431], "scheme": [9, 28, 30, 34, 37, 38, 40, 99, 113, 149, 158, 159, 165, 166, 168, 172, 234, 298, 299, 300, 301, 384, 439, 471, 488], "schizophrenia": [115, 138, 158, 179, 211], "schlachter": [115, 221], "schlaggar": [60, 115, 196, 203, 224, 226, 258, 259, 260, 361, 362], "school": [0, 222], "schouten": [3, 32, 33, 39, 99, 115, 212, 264], "schre": [115, 211], "schwartz": [115, 119, 158, 165, 167, 198, 270, 300, 301], "schwarz": [115, 118, 220, 275, 277], "scienc": [0, 3, 32, 33, 39, 46, 60, 99, 115, 159, 163, 170, 171, 181, 191, 192, 196, 202, 203, 212, 221, 227, 232, 233, 247, 253, 258, 261, 264, 302, 362, 449, 489], "scientif": [115, 150, 153, 158, 173, 181, 191, 198, 214, 223, 251, 262, 270, 280, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 425, 427, 428, 430, 434, 435, 436, 438, 439], "scientififc": 181, "scikit": [3, 35, 51, 95, 98, 104, 106, 112, 113, 116, 122, 124, 127, 129, 131, 136, 138, 139, 140, 143, 146, 151, 153, 158, 159, 162, 165, 166, 167, 169, 170, 172, 173, 180, 181, 182, 264, 298, 299, 300, 301, 302, 345, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 435, 447, 487, 488, 489], "scilifelab": 0, "scipi": [24, 46, 64, 68, 77, 80, 95, 102, 105, 109, 122, 124, 127, 136, 140, 141, 143, 146, 151, 153, 155, 158, 172, 185, 266, 289, 292, 347, 357, 376, 377, 378, 379, 380, 381, 432, 460], "scissor": [31, 33, 34, 40, 184], "scl": 43, "scl_inter": [58, 92, 103], "scl_scope": 103, "scl_slope": [58, 92, 103], "score": [31, 33, 38, 40, 43, 44, 46, 50, 53, 81, 99, 100, 104, 105, 107, 108, 109, 111, 128, 149, 150, 158, 165, 166, 168, 169, 171, 181, 222, 234, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 337, 357, 361, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 384, 420, 447, 449, 461, 489], "score_ch": 33, "score_func": 111, "score_img": 38, "score_map_img": 42, "score_mean": [31, 33], "score_orig_data": 384, "scoreatpercentil": [89, 105, 357], "scorer": [298, 299, 300, 301], "scorer_": [298, 299, 300, 301], "scores_": [46, 170, 302], "scores_img": 37, "scores_img_": [37, 302], "scores_nilearn": 40, "scores_sklearn": 40, "scores_std": [53, 100], "scorr_2level": [199, 245], "scorr_mean": [199, 245], "scott": [101, 115, 226, 260], "scr_001362": 0, "scrambl": [71, 95, 174, 229], "scrambledpix": [31, 33, 34, 40, 95, 184], "scratch": 117, "screen": [33, 40, 45, 115, 171, 215, 298, 299, 300, 301, 303, 304], "screen_perc": 40, "screening_percentil": [30, 33, 34, 35, 40, 44, 45, 111, 165, 298, 299, 300, 301, 303, 304], "screening_percentile_": [298, 299, 300, 301, 303, 304], "screening_percentile_rang": 35, "script": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 152, 158, 167, 173, 184, 185, 186, 199, 486, 487], "scroll": 105, "scrollabl": [128, 158], "scrub": [67, 124, 129, 151, 153, 158, 160, 196, 320, 323, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 449, 461], "sd": [310, 312, 313, 314], "sdata": [115, 223, 251, 262, 280], "sdist": 182, "se": 358, "search": [38, 90, 125, 158, 173, 182, 234, 298, 299, 300, 301, 358], "search_light": [38, 302], "searchlight": [29, 46, 47, 113, 115, 129, 137, 140, 143, 149, 158, 165, 169, 179, 180, 181, 264, 286, 287, 343, 345, 348, 350, 351, 364, 370, 428, 435, 439, 440, 467, 488, 489], "searchlightifittedsearchlight": 37, "seattl": 0, "sebastian": 115, "sec": [53, 261], "second": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 111, 112, 115, 126, 129, 158, 162, 163, 171, 172, 173, 174, 175, 176, 177, 179, 186, 228, 267, 269, 270, 286, 287, 298, 299, 300, 301, 303, 304, 305, 306, 315, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 338, 343, 349, 357, 360, 361, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 384, 396, 397, 411, 420, 423, 426, 427, 429, 435, 436, 437, 438, 439, 440, 445, 447, 449, 457, 458, 459, 460, 461, 467, 483, 488, 489], "second_level": [76, 77, 78, 79, 80, 81, 82, 102, 110, 130, 155, 158, 178, 459], "second_level_contrast": [76, 78, 80, 320, 333, 335, 459], "second_level_glm": 110, "second_level_input": [77, 80, 81, 102, 110, 153, 155, 158, 333, 335], "second_level_model": [76, 77, 80, 82, 102], "second_level_model_pair": 81, "second_level_model_unpair": 81, "second_level_stat_typ": 333, "second_roi_data": 95, "second_roi_img": 95, "secondari": 173, "secondlevelmodel": [76, 77, 78, 80, 81, 82, 102, 110, 127, 129, 130, 153, 158, 178, 320, 360, 459], "secondlevelmodelifittedsecondlevelmodel": [76, 78], "section": [2, 3, 4, 15, 41, 49, 50, 51, 56, 58, 70, 92, 95, 99, 101, 115, 116, 117, 125, 138, 143, 153, 158, 159, 160, 162, 163, 165, 166, 168, 170, 173, 175, 178, 182, 183, 186, 188, 222, 275, 279, 365, 366, 368, 369, 385, 415, 419, 421, 425, 427, 428, 431, 433, 434, 435, 446, 457, 473, 478, 479, 486], "see": [0, 3, 6, 7, 9, 10, 13, 14, 15, 16, 17, 21, 22, 23, 24, 27, 29, 31, 32, 35, 37, 40, 41, 42, 43, 44, 45, 48, 50, 51, 52, 53, 54, 56, 58, 60, 62, 71, 72, 73, 75, 76, 81, 84, 87, 90, 92, 100, 101, 104, 105, 108, 109, 111, 113, 117, 118, 120, 126, 129, 131, 137, 143, 144, 146, 150, 151, 153, 155, 158, 159, 160, 162, 163, 164, 165, 166, 168, 170, 171, 172, 173, 174, 175, 177, 179, 182, 184, 186, 188, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 310, 312, 313, 316, 320, 322, 324, 325, 326, 327, 330, 331, 332, 333, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 419, 420, 426, 427, 428, 430, 433, 434, 435, 442, 443, 444, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 459, 460, 461, 471, 473, 478, 479, 486, 487], "seed": [7, 9, 28, 48, 50, 61, 101, 113, 129, 143, 155, 158, 174, 183, 254, 261, 286, 287, 294, 300, 301, 320, 327, 329, 364, 370, 371, 372, 397, 435, 438, 439, 440, 441, 444, 449, 451, 463, 465, 466, 467, 473, 486, 488, 489], "seed_based_glm": [63, 472], "seed_mask": [57, 63, 101, 174], "seed_time_seri": [57, 63, 174], "seed_timeseri": 24, "seed_to_voxel_correl": 57, "seed_to_voxel_correlations_fisher_z": 57, "seed_to_voxel_correlations_fisher_z_img": 57, "seed_to_voxel_correlations_img": 57, "seed_vertic": 24, "seeds_": 371, "seek": [6, 78, 107, 164, 433], "seem": [67, 76, 99, 172], "seemingli": 165, "seen": [0, 3, 15, 43, 51, 117, 160, 162, 166, 168, 170, 175, 181, 182, 447, 486], "segal": [115, 195, 243], "segment": [58, 115, 163, 179, 196, 200, 211, 213, 219, 222, 250, 256, 265, 361, 449, 451, 471], "segment_half_width": 25, "segreg": [72, 115, 204], "seidman": [115, 200, 211, 246], "seismic": 111, "seismic_r": 424, "seitzman": [115, 146, 158, 188, 260], "select": [3, 6, 15, 16, 20, 21, 24, 30, 33, 34, 35, 36, 43, 44, 57, 58, 67, 77, 90, 95, 101, 107, 110, 115, 116, 126, 136, 137, 138, 140, 148, 149, 151, 153, 158, 160, 163, 166, 167, 168, 169, 170, 171, 172, 185, 186, 196, 218, 233, 234, 244, 261, 262, 272, 275, 277, 279, 297, 298, 299, 300, 301, 303, 304, 333, 335, 345, 357, 361, 362, 427, 430, 433, 435, 436, 438, 439, 446, 447, 449, 471, 486, 489], "select_from_index": 64, "selected_volum": 2, "selectkbest": [36, 43, 111, 138, 158], "selector": [33, 40, 41], "selectpercentil": [40, 99, 138, 158], "self": [12, 49, 50, 51, 52, 54, 56, 63, 95, 111, 173, 232, 233, 234, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 320, 333, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 449], "semant": [115, 151, 153, 158, 170], "semi": [172, 211], "semilogx": 51, "send": [173, 446, 448], "sender": 173, "sens": [106, 111, 165, 181, 298, 299, 300, 301, 310, 312, 313, 388, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411], "sensibl": [35, 165, 168, 233, 236], "sensit": [6, 42, 50, 58, 115, 175, 179, 338, 362, 384, 461], "sensori": 175, "sensorimotor": 60, "sent": [424, 432], "sentenc": [66, 67, 69, 72, 73, 82, 102, 115, 204, 215, 270], "sentence_listen": [66, 67, 69, 216], "sentence_read": [66, 67, 69, 216], "seop": [0, 153, 158], "sep": [30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 70, 73, 95, 104, 184, 385, 387, 388], "separ": [3, 7, 35, 40, 49, 50, 52, 67, 72, 84, 89, 95, 97, 101, 113, 136, 153, 155, 158, 163, 164, 166, 170, 173, 175, 179, 182, 184, 185, 192, 239, 256, 350, 361, 385, 387, 388, 415, 432, 434, 440, 449, 450, 451, 488], "sepideh": [50, 115, 164, 305], "septemb": [115, 126, 137, 152, 158, 163, 449], "sepulcr": [115, 196, 225, 231, 252, 256], "sequenc": [40, 60, 63, 67, 69, 80, 126, 158, 165, 174, 179, 184, 186, 270, 298, 299, 300, 301, 310, 312, 313, 320, 333, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 436, 438, 439, 441, 459, 460, 471], "sequenti": [6, 156, 158, 172, 184, 433], "sequentialbackend": [36, 52, 55, 59, 60, 99], "sereno": [115, 200, 205, 206, 207, 208, 209, 283], "seri": [6, 34, 48, 49, 53, 58, 62, 67, 74, 93, 95, 96, 98, 111, 112, 113, 115, 117, 124, 127, 129, 133, 150, 154, 158, 159, 161, 163, 165, 170, 175, 176, 183, 184, 185, 196, 222, 227, 232, 267, 280, 281, 284, 296, 305, 306, 307, 320, 323, 333, 335, 338, 339, 350, 355, 361, 364, 367, 368, 369, 370, 371, 375, 378, 397, 412, 420, 423, 435, 440, 451, 452, 453, 458, 462, 473, 478, 488, 489], "serial": [128, 158, 172, 215], "seriou": 182, "serr": [73, 115, 198, 270], "serv": [150, 158, 173, 182, 202, 247, 261], "server": [105, 173, 275, 277], "servic": 173, "servicesatlas": 213, "session": [30, 71, 117, 151, 153, 158, 165, 177, 181, 212, 306, 323, 338, 358, 487], "session_error": [58, 92, 103], "session_target": [3, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 95, 99, 104, 117, 184, 212, 264], "set": [3, 6, 15, 16, 17, 22, 29, 30, 31, 32, 34, 37, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 60, 66, 67, 70, 80, 81, 82, 90, 95, 96, 99, 100, 102, 103, 113, 115, 118, 124, 125, 126, 127, 129, 136, 140, 146, 149, 150, 152, 153, 155, 158, 159, 160, 163, 165, 167, 169, 172, 174, 175, 176, 177, 178, 179, 180, 182, 184, 186, 193, 196, 218, 226, 228, 232, 233, 234, 260, 264, 270, 275, 277, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 312, 313, 319, 320, 322, 323, 327, 333, 334, 336, 337, 338, 342, 345, 350, 352, 353, 354, 357, 358, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 445, 446, 447, 448, 449, 451, 454, 459, 461, 467, 471, 473, 486, 488, 489], "set_axis_bgcolor": [138, 158], "set_axisbelow": [53, 100], "set_config": [186, 232, 233, 234, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 449], "set_fit_request": [233, 234, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 447, 449], "set_index": 70, "set_inverse_transform_request": [232, 305, 306, 365, 366, 368, 369, 371, 372, 373, 374, 446, 447, 448, 449], "set_label_coord": 51, "set_major_formatt": [50, 51], "set_output": [232, 302, 305, 306, 320, 333, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 449], "set_param": [232, 233, 234, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 449], "set_score_request": [298, 299, 303, 304, 305, 306, 447], "set_size_inch": [42, 70, 111], "set_tick": 40, "set_ticklabel": 40, "set_titl": [63, 65, 70, 79, 80, 81, 92, 101, 107], "set_transform_request": [232, 302, 305, 306, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 447, 449], "set_xlabel": [32, 40, 45, 70], "set_xtick": 40, "set_ylabel": [32, 40, 45, 70, 76, 79], "set_ylim": 51, "set_ytick": 40, "setup": [63, 125, 154, 158, 178, 240, 241, 242, 243, 244, 245, 246, 250, 253, 254, 256, 264, 265, 273, 274, 279, 284, 294, 449, 487], "setuptool": [125, 158], "sever": [30, 32, 35, 40, 51, 53, 63, 64, 67, 72, 76, 87, 95, 100, 103, 105, 117, 125, 129, 137, 143, 156, 158, 159, 167, 169, 170, 172, 173, 175, 177, 179, 182, 184, 185, 186, 199, 214, 226, 234, 320, 338, 349, 366, 379, 381, 382, 433, 447, 461, 473, 489], "sex": [76, 79, 115, 178, 194, 211, 240, 272, 284, 298, 299, 300, 301, 303, 304, 472], "sex_design": 76, "sex_stat": 76, "sf": 109, "sform": [3, 155, 158], "sform_cod": [58, 92, 103], "sfvnmac": [140, 143, 158], "sh": 182, "shade": [23, 436, 438, 439, 445], "shah": [0, 153, 158], "shalit": [115, 202, 247], "shall": 67, "shallow": [465, 466], "shape": [2, 3, 4, 6, 21, 26, 32, 40, 42, 43, 45, 49, 51, 52, 53, 55, 56, 57, 58, 60, 63, 66, 67, 68, 69, 71, 72, 85, 92, 94, 95, 99, 101, 104, 105, 107, 108, 109, 111, 117, 130, 151, 152, 158, 160, 162, 163, 165, 168, 174, 175, 179, 181, 183, 186, 222, 232, 233, 234, 236, 238, 239, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 273, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 316, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 338, 339, 340, 343, 344, 345, 349, 350, 353, 354, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 421, 422, 431, 441, 444, 446, 447, 448, 449, 452, 453, 454, 455, 456, 461, 462, 465, 467, 489], "shaquanna": [115, 221], "sharad": [115, 221], "share": [102, 115, 118, 149, 158, 159, 164, 173, 184, 191, 192, 198, 199, 202, 220, 236, 245, 248, 249, 270, 275, 277], "sharex": 51, "sharp": [436, 438, 439, 486], "sharpen": 460, "shawn": [115, 230, 255], "shehzad": 115, "shell": [184, 297], "shevchenko": [0, 129, 158], "shift": [67, 149, 155, 158, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 461], "shinji": [115, 166], "shinohara": [58, 115, 361, 362], "ship": [4, 13, 95, 143, 158, 486], "shmelkov": [0, 119, 158], "shoe": [31, 33, 34, 35, 40, 184], "short": [45, 67, 98, 101, 112, 113, 118, 129, 158, 172, 173, 179, 225, 232, 254, 275, 276, 277, 278, 286, 287, 294, 298, 372, 374, 432, 436, 440, 467, 488], "shorten": [126, 155, 158], "shorter": [3, 67, 172, 361], "shortlog": [119, 120, 122, 123, 131, 133, 136, 158], "should": [4, 6, 15, 16, 36, 37, 42, 43, 44, 49, 51, 53, 54, 55, 56, 57, 58, 60, 63, 66, 67, 68, 69, 70, 72, 80, 89, 90, 92, 93, 95, 99, 100, 101, 104, 105, 106, 107, 108, 117, 118, 139, 140, 150, 153, 154, 158, 163, 164, 165, 166, 168, 172, 173, 175, 181, 182, 186, 193, 228, 232, 233, 234, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 317, 320, 322, 323, 327, 328, 333, 334, 336, 337, 338, 348, 349, 351, 354, 356, 357, 359, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 384, 385, 398, 418, 419, 421, 425, 427, 428, 430, 433, 434, 435, 436, 437, 439, 443, 446, 447, 448, 449, 450, 451, 455, 457, 458, 459, 461, 473, 484, 486, 487], "shouldn": [101, 182], "shout": [143, 158], "show": [2, 3, 4, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 117, 127, 129, 138, 144, 149, 151, 153, 158, 159, 160, 163, 165, 166, 168, 170, 173, 175, 177, 178, 185, 186, 212, 229, 264, 276, 295, 307, 320, 333, 395, 397, 398, 400, 402, 404, 406, 408, 410, 412, 437, 441, 444, 449, 459, 473, 486, 488], "showcas": [53, 62, 75, 77, 100, 113, 162, 167, 173], "shown": [16, 22, 40, 42, 56, 67, 70, 95, 118, 151, 158, 159, 164, 165, 174, 175, 253, 362, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 430, 431, 434, 441, 443, 445, 473], "shrunk": 232, "shuffl": [37, 38, 50, 52, 300, 301], "sici": [115, 205, 206, 207, 208, 209, 230, 255, 283], "side": [6, 52, 55, 65, 67, 95, 104, 124, 150, 158, 170, 275, 308, 376, 379, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 420, 429, 430, 458, 459], "sidti": [115, 221], "siemen": 228, "sig": 107, "sigma": [307, 310, 311, 312, 313], "sigman": [72, 115, 204], "sign": [10, 15, 24, 44, 104, 105, 125, 158, 170, 184, 192, 303, 304, 337, 357, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 427, 433, 441, 443, 445], "signal": [3, 6, 29, 32, 45, 46, 47, 48, 50, 51, 52, 54, 57, 59, 61, 63, 67, 68, 70, 71, 72, 79, 84, 87, 95, 97, 101, 109, 113, 115, 123, 124, 125, 126, 127, 130, 142, 144, 146, 150, 151, 155, 158, 159, 161, 162, 163, 164, 165, 167, 170, 172, 175, 179, 183, 185, 192, 196, 202, 232, 233, 234, 236, 240, 247, 248, 250, 258, 259, 261, 264, 272, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 323, 333, 335, 338, 344, 345, 350, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 384, 416, 420, 421, 431, 432, 440, 441, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 459, 473, 488, 489], "signal_sc": [34, 63, 70, 101, 110, 153, 158, 320, 323, 472], "signals_to_img_label": [125, 158, 452, 456], "signals_to_img_map": [125, 158, 453, 455], "signatur": [144, 158, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471], "signed_neg_log_pv": [44, 104], "signed_neg_log_pvals_unmask": [44, 104], "signifi": [179, 298, 299, 300, 301], "signific": [35, 51, 67, 76, 81, 115, 165, 170, 172, 175, 177, 179, 335, 384, 458], "significantli": [44, 67, 143, 158, 170, 172], "sigpro": 115, "sikka": [115, 221], "silent": [144, 153, 158], "silva": [115, 195, 243], "simexp": [0, 486], "similar": [10, 24, 25, 31, 50, 57, 80, 95, 101, 102, 117, 131, 143, 144, 146, 153, 158, 159, 162, 164, 166, 167, 170, 178, 179, 186, 300, 301, 362], "similarli": [16, 57, 95, 184], "simon": [0, 58, 115, 143, 148, 158, 225, 227, 252, 253, 361, 362], "simpl": [3, 5, 26, 30, 32, 36, 38, 40, 42, 49, 58, 62, 66, 71, 74, 76, 77, 78, 80, 81, 84, 85, 88, 90, 92, 95, 97, 99, 101, 102, 103, 113, 115, 117, 118, 136, 138, 143, 153, 158, 159, 160, 166, 168, 169, 172, 173, 174, 177, 178, 179, 181, 185, 186, 212, 229, 232, 233, 234, 261, 263, 270, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 311, 317, 320, 333, 345, 350, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 420, 434, 435, 440, 446, 447, 448, 449, 457, 472, 473, 488, 489], "simplefilt": 71, "simpler": 53, "simpleregressionresult": [127, 155, 158, 320], "simplest": [4, 71, 99, 118, 168, 172, 486], "simpli": [3, 67, 68, 69, 72, 90, 102, 103, 105, 107, 110, 118, 175, 182, 186, 196, 244, 337, 349, 355, 428, 433, 434, 435], "simplic": [40, 67, 69, 165], "simplifi": [102, 110, 117, 136, 146, 154, 158, 186, 268, 269], "simuilar": [127, 158], "simul": [29, 47, 48, 61, 65, 68, 101, 113, 129, 158, 161, 170, 234, 302, 383, 432, 440, 488, 489], "simultan": [50, 172, 236], "sin": [0, 25, 85, 129, 158], "sinc": [15, 20, 34, 41, 60, 67, 72, 76, 78, 82, 102, 110, 117, 124, 151, 158, 172, 175, 192, 232, 242, 248, 249, 257, 298, 308, 316, 323, 324, 325, 326, 330, 331, 332, 358, 359, 361, 368, 369, 384, 388, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 420, 452, 453, 457, 486], "singh": [0, 143, 158], "singl": [1, 3, 8, 15, 24, 31, 32, 48, 49, 51, 61, 62, 66, 67, 68, 74, 78, 80, 87, 95, 101, 106, 110, 113, 115, 118, 122, 127, 129, 149, 150, 151, 152, 155, 158, 159, 166, 170, 172, 173, 174, 177, 181, 184, 186, 193, 216, 228, 242, 261, 275, 281, 282, 295, 298, 299, 300, 301, 310, 312, 313, 320, 327, 333, 335, 336, 339, 350, 353, 364, 365, 366, 367, 368, 369, 370, 371, 397, 419, 422, 423, 428, 430, 432, 433, 435, 440, 442, 447, 449, 458, 472, 486, 488], "single_mni_imag": 345, "singleton": [51, 364, 365, 366, 367, 368, 369, 370, 371, 449], "singular": [79, 310, 312, 313, 344, 462], "siong": [38, 115], "site": [2, 3, 4, 10, 11, 12, 15, 16, 17, 19, 21, 22, 30, 31, 33, 35, 37, 41, 42, 44, 45, 49, 50, 51, 52, 54, 56, 59, 60, 63, 65, 71, 72, 76, 78, 79, 80, 87, 88, 89, 93, 104, 105, 106, 107, 108, 110, 111, 191, 194, 222, 240, 241, 279], "sitek": [0, 125, 158], "sitter": [0, 126, 158], "situat": [16, 60, 159, 165, 166, 184, 355], "six": [43, 196], "size": [6, 16, 23, 27, 33, 34, 42, 46, 50, 51, 55, 60, 64, 69, 78, 80, 81, 82, 85, 92, 95, 103, 104, 105, 107, 111, 126, 128, 133, 143, 144, 146, 153, 158, 163, 170, 171, 172, 175, 196, 215, 222, 272, 320, 333, 335, 336, 357, 365, 366, 368, 369, 376, 379, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 421, 431, 432, 436, 438, 439, 441, 444, 446, 447, 448, 449, 450, 451, 458, 459, 460, 471, 472, 473], "size_vert": [385, 387, 388], "sizeof_hdr": [58, 92, 103], "sizes_": [446, 448], "sketch": 46, "skim": 275, "skip": [39, 51, 58, 126, 129, 158, 173, 398, 437, 440], "sklearn": [3, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 59, 60, 93, 95, 99, 100, 104, 105, 106, 107, 108, 111, 127, 143, 146, 150, 151, 158, 159, 165, 166, 168, 172, 186, 232, 233, 234, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 263, 264, 265, 267, 271, 275, 277, 281, 282, 283, 284, 286, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 329, 333, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 449], "skull": [90, 265, 376, 377, 378, 379, 380, 381], "skullstrip": [152, 158, 179, 291], "sled": [115, 193], "sleep": 0, "slice": [2, 3, 10, 17, 37, 90, 95, 117, 125, 142, 149, 151, 158, 170, 184, 186, 195, 196, 228, 320, 323, 333, 345, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 428, 459, 489], "slice_cod": [58, 92, 103], "slice_dur": [58, 92, 103], "slice_end": [58, 92, 103], "slice_start": [58, 92, 103], "slice_time_ref": [34, 63, 67, 69, 71, 110, 125, 126, 158, 320, 323, 472], "slicer": [153, 158, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 486], "slight": [155, 158], "slightli": [24, 50, 51, 67, 85, 116, 140, 158, 166, 177, 232, 234, 353, 354, 383], "slovakia": 0, "slow": [6, 37, 46, 67, 171, 172, 173, 186, 196, 486], "slower": [99, 168, 172, 353], "slowest": 172, "slowli": 172, "sluggish": 175, "sm": [115, 192], "small": [6, 19, 51, 53, 60, 66, 87, 100, 104, 105, 115, 132, 134, 135, 158, 162, 163, 170, 172, 173, 174, 181, 182, 302, 308, 338, 433, 434, 447, 450, 461, 471, 486], "small_meta_imag": 118, "smaller": [3, 6, 33, 82, 133, 143, 151, 155, 158, 162, 170, 171, 172, 175, 179, 184, 248, 249, 304, 336, 349, 357, 446], "smallest": 172, "smart": 446, "smith": [2, 22, 84, 95, 97, 104, 113, 115, 159, 179, 188, 192, 253, 272, 335, 345, 364, 369, 384, 418, 433, 435, 440, 449, 488], "smith2009": 22, "smith_2009": [2, 22, 88], "smith_bm10": 22, "smith_bm20": 22, "smith_bm70": 22, "smith_rsn10": 22, "smith_rsn20": 22, "smith_rsn70": 22, "smoller": [115, 225, 231, 252, 256], "smooth": [6, 30, 35, 40, 44, 46, 51, 52, 57, 70, 76, 82, 84, 95, 97, 102, 107, 113, 115, 139, 140, 158, 162, 164, 165, 166, 172, 179, 181, 183, 184, 196, 227, 261, 298, 299, 300, 301, 305, 306, 320, 333, 335, 350, 355, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 384, 425, 436, 438, 439, 440, 446, 447, 449, 451, 488, 489], "smooth_anat_img": 4, "smooth_arrai": 451, "smooth_img": [4, 70, 95, 96, 105, 140, 146, 158, 184, 185, 186], "smooth_x": 46, "smootharomanonaggr_bold": [361, 362], "smoothed_img": [96, 184], "smoothen": 173, "smoother": 67, "smoothing_fwhm": [30, 34, 35, 36, 44, 51, 52, 54, 55, 56, 57, 58, 60, 64, 67, 72, 76, 77, 78, 80, 90, 92, 93, 99, 101, 102, 104, 106, 107, 108, 110, 139, 158, 163, 165, 186, 298, 299, 300, 301, 305, 306, 320, 323, 333, 335, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 447, 449, 451, 472, 473], "snapshot": 63, "snippet": 118, "snr": [46, 179, 338, 461], "snyder": [115, 196, 361, 362], "so": [3, 6, 7, 12, 15, 23, 34, 37, 40, 42, 45, 50, 51, 54, 67, 69, 70, 72, 73, 77, 80, 81, 82, 87, 90, 93, 95, 101, 102, 103, 105, 110, 118, 126, 151, 158, 170, 171, 172, 173, 175, 182, 184, 186, 192, 193, 232, 233, 234, 242, 248, 249, 256, 275, 280, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 323, 333, 335, 358, 359, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 384, 430, 436, 438, 439, 443, 445, 446, 447, 448, 449, 471], "sochat": [115, 118, 220, 275, 277], "social": [115, 201, 261], "socioeconom": 222, "soft": 179, "softwar": [0, 69, 73, 103, 130, 158, 175, 176, 179, 242, 360, 487, 489], "solari": [77, 115, 315], "sole": [67, 118, 172, 365, 366, 367, 368, 369, 370, 372, 373, 374], "solut": [6, 66, 67, 159, 160, 166, 171, 172, 181, 184, 225, 306], "solv": [32, 41, 172, 173, 181, 182, 306, 384], "solver": [40, 41, 115, 171, 298, 300, 303, 304], "somatomotordors": 260, "somatomotorlater": 260, "some": [0, 3, 6, 7, 10, 15, 16, 31, 42, 43, 45, 50, 51, 58, 67, 68, 69, 71, 81, 85, 87, 93, 99, 103, 105, 106, 111, 117, 118, 126, 130, 136, 143, 149, 152, 153, 155, 158, 165, 166, 168, 170, 172, 173, 175, 178, 181, 182, 184, 185, 186, 225, 231, 232, 233, 234, 240, 246, 248, 249, 275, 298, 299, 300, 301, 302, 303, 304, 305, 306, 310, 320, 333, 336, 338, 360, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 427, 428, 431, 434, 435, 442, 446, 447, 448, 449, 452, 458, 461, 486, 487], "some_high_valu": [44, 45], "someth": 67, "sometim": [60, 65, 67, 81, 118, 122, 126, 158, 165, 173, 179, 307, 311], "somewhat": 67, "son": [115, 312, 313], "song": [0, 153, 158], "soon": [38, 71, 115, 182], "sophi": [0, 125, 158], "sophist": [71, 99, 168], "sorri": 66, "sort": [13, 22, 31, 32, 36, 44, 45, 64, 76, 117, 129, 151, 158, 182, 184, 262, 297, 333, 335, 348, 384], "sought": [172, 179], "sound": [42, 175], "sourav": [0, 143, 158], "sourc": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 159, 160, 164, 172, 173, 182, 223, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 487], "source_affin": 85, "source_img": 354, "southern": 0, "sp": 35, "sp1": 43, "sp2": 43, "sp3": 43, "space": [3, 6, 7, 16, 23, 24, 29, 42, 47, 50, 53, 57, 62, 64, 67, 69, 74, 85, 100, 102, 110, 113, 117, 118, 125, 129, 136, 138, 140, 143, 146, 151, 156, 158, 160, 173, 174, 175, 178, 179, 186, 196, 200, 202, 203, 211, 214, 215, 224, 225, 226, 228, 229, 231, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 275, 277, 279, 282, 284, 304, 305, 306, 320, 323, 327, 338, 339, 340, 350, 353, 364, 367, 370, 371, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 416, 417, 419, 420, 421, 425, 427, 428, 431, 433, 434, 435, 440, 441, 442, 444, 446, 448, 461, 471, 488], "space_label": [64, 101, 102, 110, 323], "spacenet": [3, 136, 158, 165, 166, 167, 169, 179, 303, 304, 489], "spacenetclassifi": [171, 298, 299, 304], "spacenetregressor": [41, 45, 171, 303], "span": [55, 71, 175, 419, 433, 434, 435, 442], "spars": [31, 41, 42, 48, 50, 51, 59, 60, 61, 113, 115, 160, 161, 163, 164, 166, 171, 179, 180, 181, 187, 219, 233, 234, 236, 250, 261, 303, 304, 305, 306, 364, 369, 417, 421, 432, 436, 438, 439, 440, 441, 449, 488, 489], "sparser": [71, 95, 164, 303, 304, 449, 451], "sparsifi": [133, 158], "sparsiti": [42, 50, 115, 131, 158, 159, 163, 164, 166, 167, 171, 172, 179, 219, 234, 236, 303, 304, 306, 449], "spatial": [3, 6, 32, 41, 45, 48, 51, 52, 56, 61, 87, 95, 96, 99, 106, 110, 113, 115, 125, 149, 153, 158, 162, 164, 165, 168, 169, 175, 179, 180, 181, 183, 186, 192, 193, 196, 199, 212, 213, 215, 219, 225, 227, 228, 242, 245, 250, 252, 261, 264, 272, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 335, 346, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 433, 435, 440, 447, 449, 451, 473, 488, 489], "spatial_pattern": 219, "spatialimag": [125, 158, 184, 341], "spatiotempor": [101, 115], "speaker": 204, "special": [118, 125, 146, 158, 173], "specif": [6, 15, 16, 17, 18, 31, 33, 34, 40, 50, 51, 63, 64, 65, 66, 67, 69, 71, 77, 80, 81, 85, 95, 102, 110, 115, 116, 121, 127, 136, 149, 155, 158, 159, 162, 163, 164, 165, 166, 168, 170, 173, 175, 177, 178, 179, 181, 182, 183, 186, 192, 196, 218, 229, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 262, 272, 277, 280, 308, 310, 312, 313, 323, 334, 338, 349, 358, 360, 366, 369, 371, 384, 398, 416, 436, 437, 438, 439, 445, 449, 461, 469, 470, 471, 486, 489], "specifi": [10, 15, 16, 33, 58, 63, 64, 67, 69, 71, 72, 76, 79, 80, 81, 82, 85, 90, 95, 96, 102, 103, 109, 110, 118, 123, 126, 127, 128, 140, 143, 144, 146, 149, 150, 151, 152, 153, 155, 158, 159, 160, 170, 172, 174, 175, 182, 184, 185, 186, 202, 219, 248, 249, 253, 275, 280, 288, 289, 290, 291, 292, 293, 298, 299, 300, 301, 303, 304, 305, 306, 310, 312, 313, 316, 320, 323, 327, 328, 329, 333, 334, 338, 342, 350, 353, 355, 357, 361, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 381, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 425, 427, 428, 430, 432, 433, 434, 435, 436, 438, 439, 442, 443, 445, 447, 449, 459, 460, 461, 471, 486], "speck": [115, 170], "spectral": [13, 115, 199, 245], "spectrum": 172, "speed": [3, 24, 37, 38, 49, 78, 90, 99, 107, 115, 126, 158, 162, 168, 171, 172, 185, 186, 384, 446, 471], "speedup": 172, "spent": 172, "sphere": [16, 37, 38, 48, 57, 61, 113, 128, 148, 151, 158, 169, 186, 193, 205, 206, 207, 208, 209, 210, 232, 258, 259, 261, 283, 286, 287, 294, 364, 371, 416, 421, 431, 432, 436, 437, 438, 439, 440, 441, 445, 457, 470, 471, 478, 486, 488, 489], "sphere_left": [205, 206, 207, 208, 209, 210, 283], "sphere_right": [205, 206, 207, 208, 209, 210, 283], "spheres_mask": 60, "spheric": [60, 286], "sphinx": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 131, 133, 137, 138, 140, 158, 173], "sphinx_gallery_conf": 173, "sphinx_gallery_dummy_imag": [163, 185], "sphx_glr_auto_examples_00_tutorials_plot_decoding_tutori": 165, "spike": 67, "spline": [124, 158, 427, 428, 434, 435, 442, 461], "split": [3, 31, 32, 33, 35, 37, 40, 41, 42, 43, 44, 45, 46, 49, 51, 53, 87, 95, 100, 101, 149, 158, 163, 165, 167, 172, 173, 179, 185, 248, 249, 298, 299, 300, 301], "split_index": 43, "split_multi_scal": 43, "splitter": [298, 299], "spm": [6, 12, 37, 63, 67, 68, 71, 80, 87, 95, 115, 130, 154, 155, 158, 169, 174, 176, 179, 184, 188, 193, 242, 281, 282, 320, 322, 327, 330, 331, 332, 349, 489], "spm12": 242, "spm5": 242, "spm8": [44, 76, 222, 242, 279], "spm_auditori": [6, 70, 281], "spm_dispersion_deriv": [129, 158, 320, 322, 327], "spm_hrf": [129, 153, 158, 320, 322, 327], "spm_multimodal_fmri": [71, 174, 282], "spm_time_deriv": [129, 158, 320, 322, 327], "spmt_0001": 105, "spontan": [115, 219, 250], "sportingli": [143, 158], "spot": 67, "spread": [25, 99, 168, 375], "springer": [115, 159, 213, 219, 232, 250], "spuriou": [67, 115, 163, 173, 196, 361, 362, 450], "sqrt": [109, 136, 158, 238, 239, 312, 313], "squar": [43, 45, 51, 67, 101, 104, 107, 115, 160, 166, 171, 172, 174, 196, 232, 299, 304, 307, 310, 311, 312, 320, 333, 344, 360, 361, 366, 369, 373, 384, 446, 447, 448, 462], "squeez": [24, 305, 306, 447], "squeeze_on_sav": 467, "src_img": 429, "src_label": [64, 429], "sreen": 35, "sriniva": [115, 195, 243], "srow_i": [58, 92, 103], "srow_x": [58, 92, 103], "srow_z": [58, 92, 103], "sse": [307, 311, 312, 313], "ssp": 204, "sst": 204, "sstdsp": 204, "sstssp": 204, "sstssp_minus_dstdsp": [72, 472], "st": 0, "stabil": [150, 158, 164, 196, 300, 301, 308], "stabl": [35, 50, 58, 115, 124, 143, 158, 164, 166, 167, 172, 181, 244, 283, 298, 299, 300, 301, 305, 306, 361, 443, 444, 471, 487, 490], "stable_project": [225, 252], "stack": [42, 53, 60, 151, 158, 179, 239], "stage": [101, 115, 173, 181], "stall": 182, "stan": [310, 312, 313], "stand": [16, 46, 146, 158, 179, 185, 486], "standalon": [320, 333, 459], "standard": [3, 6, 10, 12, 23, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 64, 67, 69, 70, 73, 76, 90, 92, 93, 95, 99, 100, 102, 106, 107, 108, 110, 111, 115, 117, 125, 126, 143, 146, 150, 152, 153, 158, 160, 163, 165, 166, 170, 173, 174, 175, 179, 184, 185, 186, 200, 205, 206, 207, 208, 209, 232, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 279, 298, 299, 300, 301, 303, 304, 305, 306, 312, 313, 320, 322, 323, 327, 338, 358, 361, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 420, 447, 449, 461, 472, 473, 487], "standard_devi": [146, 158, 365, 368, 452], "standard_glm": 101, "standard_norm": [65, 310, 312, 313], "standardize_confound": [34, 49, 51, 52, 53, 54, 55, 56, 57, 58, 60, 90, 92, 93, 100, 153, 158, 163, 186, 305, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 449, 461, 473], "standardize_sign": [125, 127, 158], "standardscal": [38, 41, 42, 43, 46, 111], "stanford": [0, 115, 171], "stanisla": [72, 73, 115, 181, 198, 204, 270], "stanlei": [115, 221], "start": [2, 3, 7, 31, 42, 51, 58, 60, 71, 85, 92, 95, 155, 158, 165, 172, 173, 179, 180, 182, 186, 228, 242, 244, 245, 253, 255, 317, 320, 322, 327, 364, 365, 366, 367, 368, 369, 370, 371, 384, 449, 471], "starttim": [101, 102, 110], "stat": [6, 24, 34, 64, 68, 72, 77, 80, 95, 102, 105, 109, 155, 158, 176, 185, 308, 317, 320, 333, 357, 360, 439, 443, 445, 458, 459, 472, 486], "stat_img": [10, 14, 15, 16, 17, 91, 94, 315, 320, 333, 336, 458, 459], "stat_map": [10, 24, 38, 69, 110, 336, 430, 438, 439], "stat_map_img": [10, 78, 80, 427, 435, 442, 443], "stat_map_surf": 24, "stat_maps_pair": 81, "stat_maps_unpair": 81, "stat_threshold": [6, 70, 458], "stat_typ": [6, 69, 70, 110, 127, 128, 158, 308, 316, 320], "state": [0, 2, 24, 31, 33, 50, 51, 52, 53, 56, 58, 67, 88, 90, 93, 100, 101, 115, 126, 138, 149, 151, 158, 159, 160, 162, 163, 164, 166, 171, 175, 179, 181, 182, 191, 192, 194, 195, 196, 199, 203, 219, 221, 226, 227, 240, 241, 243, 244, 284, 298, 299, 300, 301, 302, 305, 306, 320, 329, 335, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 384, 447, 449, 461, 473, 489], "static": [10, 386, 442], "statist": [2, 7, 9, 15, 23, 24, 28, 34, 37, 42, 44, 51, 66, 67, 69, 71, 72, 75, 76, 83, 84, 97, 101, 102, 104, 105, 107, 110, 115, 116, 124, 127, 129, 131, 138, 139, 149, 151, 155, 158, 159, 164, 167, 170, 172, 173, 174, 176, 179, 180, 181, 185, 186, 199, 229, 233, 236, 246, 254, 269, 275, 276, 277, 286, 287, 295, 308, 309, 310, 312, 313, 314, 315, 316, 320, 333, 335, 336, 338, 357, 360, 384, 397, 398, 427, 430, 433, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 449, 451, 458, 459, 461, 467, 471, 472, 482, 487, 488, 489], "statistician": 170, "statmap": 360, "statstic": 82, "statu": [165, 179, 194, 222], "std": [31, 33, 46, 53, 90, 106, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 461], "std_coef_": [298, 299, 300, 301], "std_coef_img_": [298, 299, 300, 301], "std_dvars_threshold": [58, 127, 158, 361, 362], "std_test_scor": 100, "stderr": 43, "steadi": [58, 67, 151, 158, 320, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 449, 461], "steel": [101, 115], "steinkamp": [0, 143, 148, 158], "step": [3, 12, 21, 34, 36, 38, 40, 44, 46, 49, 51, 52, 57, 60, 63, 64, 66, 67, 69, 72, 80, 81, 90, 95, 99, 102, 110, 117, 124, 129, 141, 149, 155, 158, 159, 162, 163, 164, 165, 167, 168, 170, 172, 173, 179, 182, 183, 184, 185, 194, 201, 222, 234, 241, 266, 289, 292, 300, 301, 305, 306, 320, 323, 335, 362, 364, 367, 370, 376, 377, 378, 379, 380, 381, 447, 461, 489], "stephan": [115, 338, 461], "stephani": [115, 221], "stephen": [104, 115, 159, 172, 179, 192, 211, 221, 227, 253, 272, 335, 384], "stereotax": 196, "stern": [115, 307, 311], "steven": [0, 60, 115, 125, 127, 158, 195, 196, 203, 211, 224, 226, 243, 258, 259, 260, 361, 362], "stick": [67, 175], "still": [16, 51, 67, 80, 92, 103, 118, 126, 153, 158, 170, 172, 177, 182, 186, 275, 486], "stim": 68, "stim_typ": 39, "stimui": 175, "stimul": [6, 73, 165, 228], "stimuli": [29, 31, 33, 34, 40, 47, 67, 81, 99, 113, 159, 160, 162, 163, 165, 175, 181, 184, 186, 201, 212, 264, 274, 340, 357, 364, 367, 370, 412, 435, 440, 473, 488], "stimuli_random_runs_filenam": 42, "stimuli_run": 42, "stimulu": [40, 42, 43, 66, 101, 175], "stimulus_inform": 39, "stimulus_run": 42, "stimulus_shap": 42, "stipul": 99, "stochast": 202, "stop": [45, 55, 98, 112, 113, 115, 118, 171, 233, 236, 275, 277, 343, 348, 349, 351, 427, 435, 440, 446, 488], "stop_go_image_id": 109, "stopsign": 64, "stopsignal_contrast": 64, "stopsignal_design": 64, "stopsignal_report": 64, "stopsignal_stat": 64, "stopsignal_statmap": 64, "stopsuccess": [64, 472], "stopsuccessminusgo": 64, "stopsuccessminusgo_design": 64, "stopsuccessminusgo_stat": 64, "storag": 186, "store": [2, 3, 7, 27, 30, 46, 51, 52, 53, 54, 56, 70, 95, 102, 110, 118, 163, 165, 170, 173, 227, 248, 249, 285, 310, 312, 313, 351, 375, 384, 429, 463, 464], "store_precis": 232, "stori": [67, 69, 115, 217], "str": [23, 64, 76, 101, 128, 152, 158, 173, 193, 232, 233, 234, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 317, 318, 320, 322, 323, 327, 333, 334, 335, 336, 337, 338, 339, 349, 352, 353, 354, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 455, 457, 459, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471], "straightforward": [72, 172, 308], "strategi": [3, 25, 29, 47, 50, 51, 67, 89, 90, 92, 93, 100, 110, 113, 115, 125, 127, 129, 146, 150, 151, 153, 158, 163, 166, 169, 170, 172, 175, 183, 264, 298, 299, 300, 301, 302, 305, 306, 323, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 380, 420, 432, 433, 440, 447, 452, 461, 471, 473, 488, 489], "stratifi": [151, 158, 165, 298, 300, 302], "stratifiedkfold": [298, 299], "stratifiedshufflesplit": [53, 100], "stream": [3, 33, 117, 180, 186, 212], "strength": [49, 146, 149, 158, 240, 355, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 486], "stress": 172, "striat": 53, "strict": 173, "strictli": [248, 249], "string": [4, 16, 30, 34, 50, 57, 73, 78, 80, 89, 93, 101, 102, 110, 117, 128, 140, 141, 153, 155, 156, 158, 173, 184, 193, 195, 215, 242, 268, 269, 279, 282, 285, 297, 310, 312, 313, 318, 320, 322, 327, 333, 335, 337, 338, 348, 349, 357, 358, 360, 366, 368, 369, 370, 372, 373, 374, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 424, 425, 426, 427, 428, 430, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 450, 459, 461], "string_beta_seri": 101, "string_connectivity_img": 101, "string_corr": 101, "string_seed_beta_seri": 101, "strive": 3, "stroke": [115, 159, 232], "strong": [65, 67, 90, 172, 173], "stronger": 159, "strongest": 60, "strongli": [165, 173, 179], "struct": [151, 158], "structur": [3, 6, 24, 40, 41, 43, 45, 48, 51, 53, 60, 61, 65, 67, 113, 115, 159, 165, 167, 168, 169, 170, 172, 179, 184, 191, 193, 194, 195, 196, 198, 199, 202, 211, 212, 213, 218, 219, 222, 227, 228, 231, 234, 242, 244, 253, 256, 264, 270, 303, 304, 307, 358, 376, 377, 378, 379, 380, 381, 432, 440, 443, 448, 454, 488, 489], "student": [95, 175, 185, 223, 308, 489], "studi": [0, 2, 6, 32, 34, 42, 44, 58, 67, 71, 76, 98, 100, 112, 113, 115, 118, 161, 166, 168, 169, 171, 172, 175, 180, 184, 193, 196, 203, 212, 213, 218, 222, 229, 244, 275, 277, 288, 302, 343, 348, 349, 351, 355, 361, 362, 364, 370, 427, 435, 440, 488, 489], "stufflebeam": [115, 196], "style": [4, 131, 153, 158, 297], "sub": [6, 22, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 64, 79, 86, 92, 93, 96, 101, 102, 106, 110, 151, 158, 232, 233, 234, 248, 249, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 358, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 449, 459], "sub001": [71, 282], "sub_fold": 358, "sub_id": 240, "sub_label": [101, 102, 125, 158, 323, 358], "subcallos": 92, "subclass": [16, 173, 414], "subcompon": 179, "subcort": [22, 115, 143, 158, 211, 214, 223, 226, 248, 249, 251, 260], "subcortex": [22, 115, 226, 260], "subdivid": [115, 211, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412], "subfold": 182, "subgradi": [115, 172], "subgroup": 179, "subj": 4, "subj1": [4, 184], "subj1_img": 103, "subj2": [3, 4, 17, 19, 26, 30, 31, 33, 35, 36, 37, 95, 104, 117], "subj2_img": 103, "subject": [1, 3, 4, 8, 12, 16, 17, 18, 19, 22, 23, 24, 26, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 48, 49, 50, 51, 52, 54, 56, 58, 59, 60, 61, 62, 66, 67, 69, 72, 74, 76, 78, 79, 81, 86, 92, 95, 96, 100, 101, 102, 103, 104, 106, 107, 108, 111, 113, 115, 117, 118, 124, 125, 126, 127, 129, 134, 136, 137, 146, 149, 158, 160, 161, 162, 163, 165, 172, 174, 175, 177, 178, 181, 183, 184, 185, 187, 190, 192, 193, 195, 196, 198, 201, 211, 215, 216, 217, 219, 221, 222, 227, 228, 232, 233, 234, 236, 240, 241, 242, 244, 250, 261, 264, 269, 270, 272, 273, 279, 281, 282, 283, 284, 294, 297, 305, 306, 320, 323, 327, 333, 334, 336, 339, 350, 353, 358, 361, 362, 364, 365, 366, 367, 369, 370, 371, 379, 381, 397, 417, 419, 421, 422, 423, 428, 432, 435, 440, 447, 458, 472, 473, 486, 488, 489], "subject1": 184, "subject2": 184, "subject_": 184, "subject_01": 184, "subject_03": 184, "subject_data": [6, 70, 71, 174], "subject_effect": 81, "subject_id": [64, 102, 110, 281, 282], "subject_label": [34, 64, 79, 102, 110, 320, 333, 334, 335, 472], "subject_time_seri": 55, "subjects_label": [79, 334], "submit": [179, 182], "submodul": [153, 155, 158, 173], "subobject": [232, 233, 234, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 449], "subpart": [153, 158], "subpeak": [320, 333, 458, 459], "subplot": [12, 13, 25, 31, 39, 40, 42, 43, 45, 46, 51, 53, 59, 65, 66, 67, 68, 70, 76, 79, 80, 81, 95, 101, 102, 107, 111, 124, 158, 426, 436, 437, 438, 439], "subplot_kw": [111, 436, 437, 438, 439], "subplots_adjust": [13, 26, 42, 46, 51, 59, 68, 107, 185], "subsampl": 202, "subsequ": [51, 85, 186, 222, 275, 277, 361, 362], "subset": [37, 46, 95, 102, 110, 166, 170, 173, 196, 297, 298, 310, 323, 345, 361, 465, 466], "substitut": [101, 457], "subtract": [60, 67, 102, 181, 276], "succ": 109, "succeed": [105, 109], "success": [173, 175, 182, 186, 228], "successfulli": 173, "sufen": [115, 211], "suffer": 362, "suffix": 362, "suggest": [0, 6, 87, 153, 158, 162, 181, 184, 338, 376, 378, 379, 381, 461], "suit": [95, 101, 160, 166, 181, 196, 244], "suitabl": [58, 69, 143, 158, 166, 170, 186, 273, 362], "sulc": [436, 437, 438, 439, 445, 469], "sulc_left": [205, 206, 207, 208, 209, 210, 283, 430, 443], "sulc_right": [205, 206, 207, 208, 209, 210, 283, 430, 443, 486], "sulcal": [10, 23, 24, 38, 69, 110, 111, 115, 200, 205, 206, 207, 208, 209, 210, 246, 283, 287, 430, 436, 438, 439, 443, 445], "sulci": [23, 115, 200, 254], "sulco": [200, 254], "sum": [3, 43, 44, 51, 60, 66, 68, 78, 80, 85, 102, 104, 107, 108, 109, 146, 158, 172, 299, 303, 304, 307, 311, 312, 344, 365, 368, 452, 462], "summar": [56, 60, 92, 165, 173, 312, 366, 368, 369, 371, 458, 473], "summari": [34, 64, 72, 92, 151, 173, 308, 473], "summary_statistics_run_1": 72, "summary_statistics_run_2": 72, "summerlin": [115, 230, 255], "sup": 473, "superimpos": 429, "superior": [92, 105, 171, 352], "supervis": [51, 115, 166, 168, 169, 179, 181], "supplement": [115, 200, 213, 246], "supplementari": [92, 117, 170], "suppli": [60, 302, 303, 304, 327, 361, 368, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 452, 461], "support": [0, 4, 10, 16, 30, 33, 34, 35, 36, 40, 46, 99, 107, 117, 122, 124, 125, 127, 129, 130, 138, 139, 140, 143, 144, 145, 146, 150, 151, 153, 154, 155, 158, 165, 166, 168, 170, 175, 179, 180, 182, 298, 299, 300, 301, 308, 360, 361, 365, 368, 436, 438, 439, 455, 471, 487], "supported_loss": [303, 304], "supported_penalti": [303, 304], "suppos": [103, 118, 172, 182, 184, 186, 312, 313], "supposedli": [71, 229], "suppress": [2, 16, 19, 31, 37, 42, 44, 45, 50, 88, 104, 108, 115, 196], "supra": 175, "supracalcarin": 92, "supramar": 473, "supramargin": 92, "suptitl": [39, 42, 44, 45, 46, 67, 73, 76, 80, 101, 102, 107], "sur": [0, 173], "suramya": [0, 127, 158], "sure": [16, 24, 95, 113, 124, 127, 128, 129, 158, 170, 173, 182, 303, 304, 487], "surf_data": [430, 436, 438, 439, 443, 445, 469, 471], "surf_img_nki": [24, 111], "surf_map": [7, 10, 23, 111, 436, 438, 439, 445], "surf_mesh": [10, 23, 24, 69, 110, 129, 158, 398, 430, 436, 437, 438, 439, 443, 445, 470, 471, 486], "surf_plot": [126, 138, 158], "surfac": [1, 8, 9, 13, 28, 29, 47, 57, 62, 74, 98, 112, 113, 115, 117, 125, 126, 128, 130, 138, 140, 142, 143, 144, 146, 149, 150, 151, 153, 155, 156, 176, 179, 180, 181, 188, 200, 205, 206, 207, 208, 209, 210, 231, 232, 246, 254, 264, 267, 271, 283, 284, 286, 287, 294, 295, 298, 305, 306, 320, 323, 333, 345, 361, 372, 373, 374, 384, 398, 421, 427, 430, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 457, 478, 483, 488, 489], "surface_imag": [7, 10, 69], "surface_image_data": 7, "surface_image_data_hemi": 7, "surface_image_load": 7, "surface_image_mesh": 7, "surface_image_mesh_hemi": 7, "surface_mesh": 471, "surface_plot": 486, "surfaceimag": [7, 10, 23, 24, 38, 69, 110, 111, 129, 158, 205, 206, 207, 208, 209, 210, 283, 287, 294, 298, 299, 300, 301, 305, 306, 317, 320, 333, 335, 372, 373, 374, 398, 436, 437, 438, 439, 445, 447, 448, 454, 473], "surfacelabelsmask": [24, 129, 130, 158, 373, 473], "surfacemapsmask": [130, 158], "surfacemask": [111, 129, 130, 158, 298, 299, 300, 301, 317, 320, 333, 373, 447, 448, 473], "surfacemesh": [466, 467], "surfaceview": [443, 445], "surfer": [231, 256], "surpass": 175, "surrog": [37, 104], "surround": [151, 158, 471], "surviv": [52, 150, 158, 308, 449], "sustain": 173, "svc": [3, 30, 31, 32, 33, 34, 35, 36, 40, 117, 146, 158, 165, 166, 168, 298, 300, 302], "svc_coef": 99, "svc_l1": [31, 33, 40, 166, 298, 300], "svc_l2": [31, 40, 166, 298, 300], "svc_ova": 36, "svc_ovo": 36, "svd": [138, 158, 306, 344, 447, 462], "svf8k": 10, "svg": [16, 64, 76, 126, 158, 360, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439], "svm": [29, 35, 36, 40, 41, 44, 46, 47, 53, 100, 113, 117, 138, 158, 167, 169, 171, 179, 186, 264, 298, 345, 435, 440, 442, 488, 489], "svr": [41, 44, 46, 146, 158, 166, 299, 301, 302], "swap": [170, 185, 222, 356], "swap_img_hemispher": 185, "sweden": 0, "swiss": 186, "switch": [127, 138, 145, 158, 173, 182, 427], "switzerland": 0, "sy": [0, 43, 126, 158], "syllab": 228, "sylvain": [0, 140, 143, 146, 158], "sym": [20, 196, 239, 244], "sym_matrix_to_vec": [139, 158, 239], "sym_to_vec": [131, 136, 139, 151, 158], "symbol": [173, 174, 348], "symlink": [280, 296], "symmetr": [20, 49, 80, 139, 158, 172, 196, 213, 238, 239, 244, 248, 249, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421, 430, 435, 436, 439, 441, 442, 443, 445], "symmetri": [170, 172], "symmetric_cbar": [15, 70, 126, 158, 427, 430, 435, 439], "symmetric_cmap": [10, 23, 111, 126, 144, 158, 436, 441, 442, 443, 445, 486], "symmetric_split": [133, 158, 248, 249], "symposium": [50, 115, 164, 305, 306], "symptom": 194, "synchron": 356, "synonym": 175, "synthes": 172, "synthesi": [115, 118, 172, 220, 275, 277], "synthet": [23, 59, 85, 173], "system": [0, 44, 45, 115, 159, 165, 172, 173, 182, 184, 195, 200, 205, 206, 207, 208, 209, 211, 218, 228, 233, 243, 283, 285], "systemat": [101, 115, 133, 158, 196, 270, 361, 362], "s\u00e9gonn": [115, 200, 246], "t": [3, 5, 6, 10, 17, 23, 25, 34, 38, 40, 43, 57, 58, 60, 64, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 80, 81, 84, 91, 93, 94, 95, 97, 100, 101, 103, 104, 105, 106, 107, 109, 110, 113, 115, 118, 127, 129, 149, 158, 159, 170, 171, 172, 173, 175, 176, 178, 179, 181, 182, 184, 185, 195, 198, 211, 225, 227, 230, 231, 243, 252, 253, 255, 256, 262, 270, 275, 276, 277, 280, 298, 299, 303, 304, 308, 310, 311, 312, 313, 314, 316, 320, 333, 335, 357, 360, 361, 362, 378, 384, 430, 433, 435, 440, 451, 459, 462, 471, 486, 488], "t0": [31, 43], "t1": [46, 76, 152, 158, 193, 196, 211, 213, 242, 265, 288, 290, 291, 293, 419, 486], "t1w": 64, "t2": [213, 265, 425, 486], "t2_relax": [213, 265], "t_img": 109, "t_map": [320, 333], "t_map001": 184, "t_r": [6, 12, 34, 51, 53, 54, 55, 56, 57, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 90, 92, 93, 100, 101, 110, 129, 143, 154, 158, 186, 261, 298, 299, 300, 301, 303, 304, 305, 306, 320, 322, 323, 324, 325, 326, 327, 330, 331, 332, 338, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 420, 447, 449, 461, 472, 473], "t_score": 109, "t_scores_original_data": [44, 104], "t_statmap": [64, 76], "t_to_z": 109, "tab": [182, 186], "tab10": 40, "tab20": [10, 437], "tabl": [6, 10, 23, 24, 34, 64, 70, 92, 102, 110, 111, 125, 128, 154, 156, 158, 173, 177, 242, 244, 246, 248, 249, 251, 252, 254, 255, 362, 458, 472], "tabular": 64, "tackl": [166, 182], "tag": [31, 33, 118, 173, 182, 358, 359], "tail": [71, 310, 312, 313, 458], "tailor": [51, 69, 162], "take": [2, 3, 4, 6, 10, 25, 30, 34, 42, 44, 45, 51, 52, 66, 67, 68, 71, 73, 78, 80, 95, 99, 101, 103, 105, 110, 117, 125, 130, 140, 143, 146, 152, 158, 159, 160, 162, 165, 168, 170, 172, 173, 174, 175, 184, 186, 226, 232, 266, 275, 288, 289, 290, 291, 292, 293, 298, 299, 300, 301, 302, 306, 320, 322, 327, 335, 349, 368, 383, 384, 388, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 447, 449, 451, 471, 484, 486], "taken": [6, 67, 101, 166, 172, 173, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 323, 333, 335, 354, 365, 366, 368, 369, 371, 449], "takerkart": [0, 146, 158], "tal": [115, 118, 186, 220, 275, 277, 371], "talairach": [115, 140, 158, 178, 188, 240, 255], "tall": 43, "tamer": [0, 127, 158], "tanab": [42, 43, 115, 218, 274], "tangent": [53, 100, 139, 158, 163, 232], "tangent_matric": 53, "tangent_measur": 53, "tar": [4, 39, 138, 158, 182], "target": [3, 30, 34, 42, 85, 90, 95, 99, 101, 125, 143, 158, 165, 166, 170, 172, 173, 179, 182, 183, 196, 218, 264, 274, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 335, 353, 354, 364, 367, 370, 377, 380, 384, 446, 448, 449, 489], "target_affin": [34, 51, 54, 55, 58, 85, 90, 93, 105, 185, 186, 298, 299, 300, 301, 303, 304, 305, 306, 320, 323, 333, 350, 353, 367, 370, 376, 378, 379, 380, 381, 447, 472, 473], "target_affine_3x3": 85, "target_affine_4x4": 85, "target_affine_mm_space_offset_chang": 85, "target_img": [354, 377, 380], "target_shap": [34, 51, 54, 55, 58, 85, 90, 93, 185, 186, 298, 299, 300, 301, 303, 304, 305, 306, 320, 323, 333, 350, 353, 367, 370, 376, 378, 379, 381, 447, 472, 473], "target_var": 384, "targett": [132, 158], "tarun": [0, 126, 158], "task": [2, 3, 18, 30, 31, 32, 35, 41, 50, 51, 62, 64, 67, 69, 74, 78, 82, 90, 93, 98, 105, 112, 113, 115, 127, 143, 154, 158, 164, 165, 166, 169, 172, 174, 175, 179, 180, 181, 182, 186, 202, 227, 233, 236, 264, 267, 269, 270, 297, 320, 323, 339, 343, 358, 364, 370, 371, 384, 397, 412, 423, 426, 427, 435, 440, 473, 488], "task001_cope07_succstop_minus_go": 109, "task002_cope007_tstat1": 109, "task002_cope06_succ_stop_vs_go": 109, "task002_cope10_succstop_minus_go": 109, "task003_cope007_tstat1": 109, "task_data": 33, "task_label": [64, 101, 102, 110, 323], "task_mask": [31, 33], "tasknam": 323, "taylor": [0, 115, 124, 125, 126, 127, 150, 153, 154, 155, 158, 171], "tcontrast": [71, 72, 310, 312, 313], "tcontrastresult": [310, 312, 313], "tcorr_2level": [199, 245], "tcorr_mean": [199, 245], "teach": [1, 113, 135, 146, 158, 173, 201], "teal": 70, "team": [50, 93, 173, 181, 182, 219, 250, 487], "technic": [9, 28, 72, 101, 113, 159, 171, 172, 222, 307, 311, 439, 471, 488], "techniqu": [16, 46, 115, 163, 164, 165, 166, 167, 168, 172, 179, 181, 186, 228, 449], "technisch": 0, "technologi": 0, "tel": 0, "tell": [70, 87, 115, 172, 217], "temp_file_lifetim": [127, 158, 457], "temp_lat": 473, "temp_m": 473, "temp_med_and_lingu": 473, "templat": [4, 17, 23, 40, 50, 69, 76, 84, 97, 110, 113, 115, 124, 128, 131, 136, 141, 146, 149, 152, 155, 156, 158, 163, 175, 179, 181, 185, 186, 193, 195, 196, 222, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 265, 266, 288, 289, 290, 291, 292, 293, 295, 298, 299, 300, 301, 305, 306, 348, 353, 354, 362, 367, 370, 377, 380, 419, 433, 434, 435, 440, 442, 447, 457, 488], "template_affin": 94, "template_img": 94, "template_shap": 94, "templateflow": [173, 213, 265, 266, 288, 289, 290, 291, 292, 293], "tempor": [3, 6, 17, 32, 33, 34, 39, 40, 53, 57, 67, 68, 92, 95, 99, 102, 105, 115, 117, 143, 151, 158, 164, 165, 179, 183, 199, 212, 228, 245, 264, 306, 320, 324, 325, 326, 327, 329, 330, 331, 332, 338, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 449, 461, 489], "temporal": [92, 105], "temporal_anat_combin": 361, "temporal_anat_separ": 361, "temporari": 457, "temporarili": 173, "temporooccipit": 92, "temporopariet": 60, "ten": [6, 82, 447], "tend": [80, 101, 167, 172, 184], "tensor": 115, "term": [37, 56, 67, 90, 93, 110, 116, 154, 158, 164, 166, 172, 175, 179, 181, 184, 185, 275, 303, 304, 307, 327, 361, 461, 472, 473], "term_idx": 105, "term_weight": 105, "term_weights_for_compon": 105, "termin": [41, 165, 173, 487], "terminologi": [130, 158, 177], "test": [3, 30, 32, 35, 37, 40, 42, 44, 45, 46, 53, 55, 65, 67, 71, 75, 78, 79, 83, 100, 102, 104, 107, 108, 110, 113, 115, 124, 126, 127, 129, 142, 150, 153, 158, 165, 167, 168, 170, 171, 172, 175, 176, 177, 178, 179, 182, 185, 234, 240, 241, 242, 243, 244, 245, 246, 250, 253, 254, 256, 264, 265, 269, 270, 273, 274, 279, 284, 294, 298, 299, 300, 301, 302, 303, 304, 308, 333, 335, 336, 343, 349, 353, 354, 357, 360, 384, 396, 397, 411, 423, 427, 435, 440, 442, 480, 487, 488], "test_cluster_level_parameters_smok": [124, 158], "test_contrast": 182, "test_data_gen": 182, "test_imag": 173, "test_img_plot": [153, 158], "test_modul": 173, "test_nilearn_standard": [129, 158], "test_scor": 99, "test_sign": [126, 158], "test_siz": [53, 100], "test_someth": 173, "test_surf_plot": 173, "tested_var": [78, 107, 108, 384], "tetrahedron": 7, "tetrel": [0, 146, 158], "teuscher": [115, 195, 243], "teve": [0, 148, 158], "texa": 0, "texliv": 182, "text": [31, 36, 53, 57, 76, 95, 99, 115, 165, 173, 183, 196, 212, 218, 222, 223, 231, 256, 264, 274, 307, 311, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 489], "textquoteright": [115, 227, 253], "textur": 471, "tfce": [107, 124, 155, 158, 179, 335, 384], "tgz": [10, 11, 27, 103, 194, 241], "th": 442, "thalam": [115, 211], "thalamu": [193, 226, 260], "than": [3, 4, 6, 16, 32, 33, 36, 37, 40, 41, 42, 43, 44, 45, 49, 50, 51, 53, 54, 55, 56, 57, 58, 60, 63, 67, 69, 70, 72, 78, 80, 82, 87, 89, 90, 92, 93, 95, 99, 100, 101, 104, 105, 106, 107, 108, 116, 117, 118, 127, 133, 136, 137, 138, 139, 140, 142, 146, 151, 153, 158, 159, 162, 164, 165, 166, 167, 168, 170, 172, 173, 175, 177, 179, 182, 184, 185, 186, 196, 219, 248, 249, 275, 277, 298, 299, 300, 301, 305, 306, 320, 329, 335, 336, 337, 344, 349, 357, 358, 361, 362, 364, 366, 367, 369, 370, 384, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 415, 420, 421, 427, 430, 431, 435, 439, 440, 441, 443, 445, 449, 458, 460, 462, 471, 473], "thank": [143, 158, 173, 333, 334, 335], "tharun": [0, 129, 158], "thei": [3, 6, 7, 25, 41, 44, 46, 50, 51, 60, 66, 67, 71, 93, 95, 99, 110, 117, 118, 125, 128, 153, 155, 156, 158, 164, 167, 168, 170, 172, 173, 175, 179, 181, 182, 184, 186, 192, 193, 196, 203, 215, 256, 264, 275, 280, 320, 323, 333, 335, 339, 353, 371, 422, 450, 461, 473, 486], "them": [2, 3, 6, 7, 15, 20, 31, 33, 41, 44, 46, 51, 52, 56, 57, 60, 64, 66, 69, 71, 72, 73, 80, 81, 87, 90, 95, 101, 105, 106, 110, 113, 117, 118, 122, 126, 128, 131, 143, 149, 150, 152, 155, 158, 159, 160, 164, 166, 168, 173, 175, 179, 180, 181, 184, 186, 193, 242, 275, 277, 323, 383, 384, 447, 467, 486], "theme": [124, 155, 158], "themselv": [67, 118, 186], "theodor": [58, 115, 361, 362], "theoret": 170, "theori": [115, 179, 217, 312, 313], "therapanacea": 0, "therefor": [72, 153, 158, 164, 170, 172, 193, 196, 244], "theta": [310, 312, 313], "thithick": [7, 15, 49, 129, 151, 158, 205, 206, 207, 208, 209, 210, 231, 256, 283, 287, 433, 434, 436, 437, 438, 439, 445, 469, 471], "thick_17": [49, 231, 256], "thick_7": [87, 231, 256], "thick_left": [205, 206, 207, 208, 209, 210, 283], "thick_right": [205, 206, 207, 208, 209, 210, 283], "thin": [231, 256], "thin_17": [231, 256], "thin_7": [231, 256], "thing": [2, 3, 7, 40, 58, 67, 125, 158, 162, 171, 172, 173, 182, 186, 310, 338, 461, 486], "think": [173, 175, 186], "third": [16, 67, 82, 163, 177, 329], "thirion": [0, 46, 50, 51, 53, 73, 100, 115, 119, 122, 126, 129, 131, 136, 140, 143, 144, 146, 153, 154, 158, 159, 162, 163, 164, 165, 167, 171, 181, 198, 202, 219, 232, 233, 247, 250, 270, 300, 301, 305, 306, 448, 449, 454], "this_meta": 109, "thiti": [0, 130, 158], "thoma": [0, 104, 115, 118, 146, 149, 152, 153, 158, 159, 166, 179, 181, 192, 195, 220, 225, 231, 243, 252, 256, 275, 277, 335, 361, 362, 384, 462], "thomasyeolab": [225, 252], "thompsen": [115, 221], "thorough": 173, "thoroughli": 173, "thorsten": [115, 170], "those": [7, 24, 52, 64, 67, 71, 72, 81, 90, 110, 129, 153, 158, 164, 166, 168, 172, 173, 175, 182, 192, 227, 228, 229, 275, 360, 368, 420, 443, 449, 452, 455, 456, 465, 466, 471], "though": [101, 106, 165, 311, 436, 438, 439, 460], "thousand": [51, 186, 447], "thr0": [11, 248, 249], "thr25": [11, 58, 92, 160, 248, 249], "thr50": [248, 249], "thread": 37, "three": [6, 15, 20, 25, 33, 42, 51, 65, 66, 67, 76, 90, 95, 115, 144, 152, 158, 172, 173, 179, 182, 184, 193, 201, 226, 261, 320, 333, 353, 355, 395, 397, 400, 414, 419, 421, 425, 426, 427, 428, 431, 433, 434, 435, 459, 471], "threshold": [2, 10, 14, 15, 17, 18, 24, 31, 34, 37, 38, 40, 41, 42, 44, 50, 51, 52, 56, 57, 58, 63, 66, 67, 69, 70, 71, 72, 76, 77, 78, 80, 81, 82, 88, 89, 90, 91, 94, 95, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 115, 118, 126, 127, 128, 131, 144, 146, 150, 153, 155, 156, 158, 160, 163, 172, 175, 176, 179, 185, 266, 288, 289, 292, 305, 315, 319, 320, 333, 335, 336, 337, 357, 360, 361, 362, 377, 378, 379, 380, 381, 382, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 418, 419, 421, 427, 428, 430, 433, 434, 435, 436, 438, 439, 441, 442, 443, 445, 448, 449, 454, 458, 459, 472, 486, 489], "threshold1": 82, "threshold2": 82, "threshold3": 82, "threshold_img": [42, 82, 89, 125, 131, 153, 158, 336, 337], "threshold_percentile_img": 89, "threshold_stats_img": [6, 76, 78, 82, 178, 357], "threshold_value_img": 89, "thresholded_map": 336, "thresholded_map1": 82, "thresholded_map2": 82, "thresholded_map3": 82, "thresholded_score_map_img": 42, "thresholding_strategi": [52, 88, 163, 449], "threw": [153, 158], "through": [15, 32, 41, 44, 50, 53, 58, 72, 76, 92, 101, 124, 125, 150, 151, 153, 158, 159, 165, 166, 167, 170, 173, 179, 181, 192, 196, 222, 275, 279, 300, 301, 320, 333, 335, 361, 362, 365, 368, 372, 380, 385, 387, 388, 390, 391, 392, 393, 394, 401, 403, 405, 407, 409, 411, 446, 452, 457, 471], "throughout": 489, "throw": [126, 128, 129, 158, 371], "thu": [16, 32, 35, 41, 104, 106, 160, 165, 166, 167, 170, 171, 172, 177, 179, 185, 186, 300, 301, 302, 303, 304, 308, 342, 362, 384], "thual": [0, 124, 125, 151, 153, 155, 158], "thumb": [165, 173], "tianzi": [115, 159, 232], "tibshirani": [115, 159], "tick": [124, 127, 158, 173, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 425, 427, 428, 430, 434, 435, 436, 438, 439, 441, 443, 445], "tick_17": 256, "tick_7": 256, "tick_posit": [31, 33], "ticker": [50, 51], "ticklabel": [146, 158], "tight": [35, 172], "tighter": [139, 158, 172], "tile": [16, 144, 158, 400, 414, 419, 425, 428, 433, 434, 435, 459, 486], "tiledslic": [16, 395, 397, 414], "time": [0, 2, 3, 4, 5, 6, 7, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 58, 59, 62, 64, 65, 66, 68, 69, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117, 118, 124, 125, 126, 129, 133, 142, 143, 149, 150, 151, 153, 155, 158, 159, 161, 162, 163, 164, 165, 168, 170, 173, 175, 176, 179, 180, 182, 183, 184, 185, 196, 215, 227, 228, 232, 234, 236, 261, 281, 283, 284, 286, 287, 294, 298, 299, 300, 301, 303, 304, 305, 306, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 335, 338, 350, 353, 355, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 384, 412, 420, 433, 435, 440, 442, 443, 447, 449, 451, 452, 453, 458, 460, 461, 462, 471, 473, 478, 486, 489], "time_length": [68, 324, 325, 326, 330, 331, 332], "time_seri": [49, 53, 54, 56, 58, 60, 159, 160], "time_series_1": 159, "time_series_2": 159, "time_stamp": 68, "timecours": [174, 361], "timeout": 45, "timepoint": [26, 185, 323], "timeseri": [24, 27, 50, 52, 60, 90, 106, 137, 150, 158, 159, 163, 192, 194, 202, 247, 272, 338, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 461, 462], "timeseries_each_subject": [52, 163], "timon": 0, "timothi": [60, 115, 192, 224, 225, 252, 259, 361], "ting": [0, 124, 125, 126, 127, 129, 150, 151, 153, 155, 158], "tini": 308, "tinput": 103, "tip": [46, 181], "tissu": [22, 179, 255], "titl": [0, 3, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 27, 30, 31, 32, 33, 36, 37, 38, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 63, 64, 66, 67, 68, 69, 70, 71, 72, 76, 77, 78, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 99, 101, 102, 104, 105, 107, 108, 109, 110, 111, 117, 126, 146, 147, 152, 155, 158, 163, 165, 173, 182, 186, 320, 333, 360, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 425, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 457, 459, 486], "title_font_s": [436, 438, 439], "title_fonts": [441, 443, 444, 445], "tmap": [18, 80, 127, 158, 198, 268, 270, 486], "tmap_filenam": [2, 89], "tmap_img": 94, "tmi": [46, 115, 171], "tmp": 24, "to_csv": [6, 73], "to_filenam": [3, 4, 6, 7, 30, 50, 51, 57, 72, 87, 95, 185, 465, 466], "to_gifti": [463, 464, 468], "to_latex": 64, "to_numpi": [3, 32, 34, 40, 44, 70, 78, 99, 107], "tobe": [115, 221], "todd": [115, 170, 211, 213], "toffset": [58, 92, 103], "toga": [115, 230, 255], "togeth": [7, 34, 40, 50, 60, 68, 69, 70, 81, 156, 158, 159, 167, 168, 175, 179, 196, 258, 260, 297, 300, 301, 305, 323, 338, 449, 473], "toggl": 342, "toi": [25, 106], "tol": [233, 234, 236, 303, 304], "tol_cv": 234, "toler": [55, 93, 106, 172, 233, 234, 236, 303, 304, 342], "tolil": 38, "tolist": [80, 101], "toll": 159, "tom": [0, 115, 151, 158, 195, 243], "tomassini": [115, 192], "toml": [125, 158, 173, 182, 487], "tommaso": [115, 196], "tommi": [115, 172, 233, 236], "too": [25, 35, 39, 40, 42, 44, 45, 54, 56, 58, 71, 87, 118, 166, 172, 275, 277, 371, 486], "took": [50, 93, 103, 228], "tool": [4, 9, 12, 21, 24, 28, 33, 37, 50, 80, 87, 88, 95, 101, 106, 113, 117, 136, 155, 158, 161, 166, 173, 174, 177, 178, 180, 181, 183, 184, 186, 187, 189, 193, 211, 242, 264, 295, 350, 395, 397, 400, 402, 404, 406, 408, 410, 412, 419, 425, 427, 434, 435, 440, 442, 477, 486, 487, 488], "toolbox": [176, 180, 487, 489], "toolkit": [0, 196], "tootel": [115, 205, 206, 207, 208, 209, 283], "top": [6, 13, 16, 18, 26, 40, 46, 58, 105, 107, 149, 158, 173, 181, 185, 297, 421, 427, 428, 431, 433, 434, 435, 442, 486], "topic": [173, 182], "topologi": 172, "toprul": 64, "tor": [115, 118, 220, 275, 277, 338, 461], "torabi": [0, 125, 126, 127, 129, 158], "toro": [115, 227, 253], "toronto": 0, "total": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 161, 163, 165, 171, 192, 193, 211, 251, 261, 299, 304, 372, 374, 378, 379, 381, 433, 450, 473, 488, 489], "total_scor": 105, "touch": 342, "tour": 486, "toward": [95, 153, 158, 202, 232, 348, 365, 366, 367, 368, 369, 370, 371, 489], "tox": [2, 3, 4, 10, 11, 12, 15, 16, 17, 19, 21, 22, 30, 31, 33, 35, 37, 41, 42, 44, 45, 49, 50, 51, 52, 54, 56, 59, 60, 63, 65, 71, 72, 76, 78, 79, 80, 87, 88, 89, 93, 104, 105, 106, 107, 108, 110, 111, 127, 158], "tpami": [51, 115, 448, 454], "tpl": 213, "tpr": 179, "tr": [12, 26, 34, 68, 103, 125, 129, 142, 154, 158, 175, 179, 185, 221, 324, 325, 326, 330, 331, 332, 349], "trace": [104, 398], "traceback": 465, "traci": [115, 222], "track": [101, 105, 172, 182], "tracker": 182, "trade": [199, 300, 301], "tradition": 179, "trail": 173, "train": [3, 32, 33, 35, 41, 42, 43, 44, 45, 46, 53, 99, 100, 149, 158, 165, 166, 167, 170, 172, 179, 181, 186, 233, 298, 299, 300, 301, 303, 304, 446, 448, 454], "train_siz": [44, 45], "train_test_split": [44, 45], "trait": 166, "trajectori": 172, "tran": [51, 115, 242, 448, 454], "trans_i": 58, "trans_x": 58, "trans_z": 58, "transact": [46, 115, 171, 193, 202], "transfer": 181, "transform": [3, 24, 25, 40, 42, 43, 51, 52, 53, 55, 56, 67, 71, 85, 90, 92, 93, 95, 99, 100, 101, 105, 111, 115, 117, 129, 139, 140, 144, 146, 148, 149, 150, 151, 153, 155, 158, 162, 163, 168, 175, 179, 183, 184, 196, 211, 230, 232, 255, 273, 298, 299, 300, 301, 302, 305, 306, 317, 320, 333, 336, 340, 351, 353, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 385, 446, 447, 448, 449, 461, 471, 473, 489], "transform_img": [49, 126, 129, 158, 365, 366, 367], "transform_single_img": [54, 56, 128, 158, 364, 365, 366, 367, 368, 369, 370, 371, 449], "transform_to_2d": [385, 387, 388], "transient": 186, "translat": [65, 146, 158, 185, 320, 323, 333, 336, 361, 459], "transpar": [16, 24, 126, 146, 158, 186, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 421, 427, 428, 430, 431, 433, 434, 435, 436, 439, 441, 442, 443, 444, 445], "transpos": [50, 52, 149, 158, 172], "traor": [0, 130, 158], "treat": 118, "treatment": [179, 181], "tree": [162, 225, 252], "trei": [115, 196], "trend": [44, 45, 90, 129, 158, 186], "trended_data": 90, "trendscent": [195, 243], "tresult": 103, "tri": [25, 53, 65, 166, 275, 419, 424, 432, 446], "triag": [153, 158], "trial": [40, 65, 67, 73, 115, 126, 158, 165, 174, 179, 273], "trial_condit": 101, "trial_nam": 101, "trial_numb": 101, "trial_typ": [6, 34, 65, 66, 67, 73, 101, 102, 215, 327, 426], "trial_type_idx": 73, "trial_type_list": 101, "trial_type_seri": 101, "trials_ses1": [229, 282], "trials_ses2": [229, 282], "trialwise_condit": 101, "triangl": [25, 179, 398, 468, 471], "triangul": [25, 473], "triangular": [179, 232, 238, 239, 424, 432], "triangulari": 92, "tribhuvan": 0, "trick": [19, 181], "tricki": 172, "trigger": 182, "trilinear": 471, "trim": [369, 453], "triplet": [321, 322, 371, 444], "triplett": [115, 262, 280], "trivial": 82, "tronto": 0, "troubleshoot": 173, "true": [2, 3, 4, 6, 7, 10, 14, 15, 16, 17, 19, 22, 23, 24, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 64, 65, 67, 69, 70, 71, 72, 73, 75, 76, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 117, 118, 126, 129, 138, 141, 146, 153, 158, 160, 163, 165, 168, 170, 172, 175, 178, 179, 186, 232, 233, 234, 236, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 256, 258, 260, 261, 264, 265, 266, 267, 270, 272, 273, 274, 275, 277, 279, 284, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 315, 320, 323, 333, 335, 336, 337, 338, 339, 342, 344, 348, 350, 352, 353, 354, 357, 358, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 452, 453, 455, 458, 460, 461, 462, 467, 473, 486, 488], "true_divid": 111, "truli": [175, 213], "truncat": [146, 158], "trust": [37, 51, 54, 55, 60, 64, 76, 78, 175], "truth": [43, 46, 59, 165], "try": [3, 4, 5, 22, 37, 41, 42, 51, 54, 55, 58, 60, 64, 66, 67, 76, 78, 90, 99, 100, 105, 118, 130, 155, 158, 159, 160, 165, 166, 171, 172, 173, 175, 182, 186, 201, 487], "ts2": 192, "ts3": 192, "tsuang": [115, 211], "tsv": [6, 49, 54, 55, 57, 58, 60, 62, 64, 74, 76, 102, 110, 113, 126, 158, 173, 174, 201, 228, 242, 244, 246, 248, 249, 251, 252, 254, 255, 261, 281, 320, 323, 327, 333, 360, 361, 362, 423, 426, 440, 488], "tsvfile": 73, "ttest_ind": [95, 185], "tube": 117, "tunabl": 362, "tune": [22, 33, 35, 40, 41, 45, 90, 115, 137, 158, 160, 165, 166, 168, 172, 175, 305, 306, 361, 367, 370, 447, 486], "tupl": [16, 186, 243, 250, 264, 284, 298, 299, 300, 301, 303, 304, 305, 306, 310, 312, 313, 320, 323, 333, 342, 350, 353, 355, 358, 361, 367, 370, 372, 373, 374, 376, 378, 379, 381, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 425, 426, 427, 428, 431, 432, 433, 434, 435, 442, 447, 452, 459, 465, 470], "turn": [49, 67, 85, 160, 162, 172, 186, 320, 333, 376, 377, 378, 379, 380, 381, 433, 434, 435, 442, 459], "turner": [101, 115, 165, 195, 227, 243, 253], "tutori": [6, 7, 8, 30, 67, 99, 133, 143, 158, 165, 173, 177, 180, 181, 186, 212, 264, 298, 345, 350, 425, 434, 440, 442, 488], "tv": [45, 115, 171, 298, 299, 303, 304], "tv_l1": 41, "tvl1": 171, "tweak": [60, 90, 163], "twelv": [115, 201, 261], "twine": 182, "two": [6, 7, 15, 25, 26, 35, 42, 50, 57, 58, 60, 62, 67, 74, 75, 78, 83, 87, 89, 90, 95, 99, 101, 102, 104, 110, 113, 118, 124, 129, 138, 141, 146, 149, 150, 158, 159, 162, 164, 165, 167, 169, 170, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 184, 185, 186, 192, 196, 229, 234, 238, 244, 263, 270, 282, 298, 299, 300, 301, 305, 306, 310, 312, 313, 317, 320, 327, 333, 334, 335, 339, 345, 350, 353, 361, 362, 366, 369, 371, 373, 384, 396, 423, 427, 429, 430, 435, 436, 437, 438, 439, 440, 445, 447, 449, 450, 451, 457, 458, 459, 470, 471, 472, 486, 488, 489], "two_sid": [6, 82, 127, 130, 150, 153, 156, 158, 336, 337, 357, 449, 458, 459], "two_sided_test": [78, 80, 104, 170, 335, 384], "twpyb1pflj6vrlxgh3rohyqanxbdpelw": 226, "tx": 65, "txt": [95, 279], "ty": 65, "tyler": [115, 170], "type": [3, 6, 11, 16, 19, 22, 30, 35, 40, 44, 50, 51, 52, 65, 66, 67, 69, 73, 88, 89, 95, 101, 104, 118, 124, 126, 127, 129, 130, 132, 135, 137, 140, 143, 146, 152, 153, 154, 155, 158, 167, 170, 173, 174, 175, 179, 182, 184, 192, 216, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 272, 302, 308, 316, 320, 333, 338, 342, 343, 345, 347, 348, 350, 351, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 380, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 433, 434, 447, 449, 450, 451, 458, 459, 460, 461], "typeerror": [153, 158, 348, 357], "typic": [6, 7, 73, 79, 80, 101, 110, 162, 164, 166, 170, 173, 175, 177, 179, 184, 185, 186, 191, 285, 300, 301, 304, 310, 360, 371, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 433, 434, 435, 442, 447, 486], "typo": [128, 148, 158], "typograph": [155, 158], "tyszka": [115, 223, 251], "tz": 65, "tziona": [115, 221], "tzourio": [115, 193, 242], "u": [3, 4, 16, 25, 38, 40, 42, 57, 60, 65, 67, 78, 80, 90, 95, 115, 165, 166, 168, 173, 203, 226, 258, 260, 299, 304, 312, 313, 487], "u4": 3, "u5mzi": 197, "ubuntu": 172, "uc": 0, "ucc": 223, "uchida": [42, 43, 115, 218, 274], "ucl": [0, 6, 71, 228, 229, 281, 282], "ucla": [262, 280], "ucsd": 226, "uddin": 115, "ugli": 166, "ugurbil": [115, 192], "uint8": [46, 58, 92, 155, 158, 351], "uk": [0, 2, 6, 22, 71, 211, 214, 227, 228, 229, 253, 281, 282], "ultim": [173, 311, 419, 425, 427, 428, 433, 434, 435], "umask": 50, "unabl": [37, 51, 54, 55, 60, 64, 70, 76, 78, 146, 158], "unavail": [173, 264], "unbalanc": 51, "unbias": [115, 165, 196, 213], "unc": [64, 80, 81, 102], "uncach": 184, "uncertainti": [68, 77, 80, 172, 174, 175, 179], "unchang": [18, 67, 170, 232, 233, 234, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 449], "unclear": 99, "uncom": [10, 17, 23, 38, 54, 56, 60], "uncompress": [64, 138, 142, 158], "uncompress_fil": [4, 6, 10, 11, 20, 22, 27, 39, 41, 66, 71, 102, 103], "unconstrain": [115, 227], "uncontrol": 67, "uncorrect": [6, 64, 77, 80, 81, 82, 102], "under": [40, 104, 155, 158, 165, 166, 170, 171, 172, 173, 174, 175, 179, 182, 192, 196, 220, 222, 228, 302, 342, 353, 354, 359, 377, 380, 384], "underflow": 308, "underli": [0, 90, 129, 158, 175, 179, 181, 186, 398], "underneath": [436, 438, 439, 445], "underscor": [127, 158, 173], "undershoot": 67, "understand": [3, 29, 47, 62, 74, 84, 97, 113, 129, 137, 158, 166, 168, 173, 181, 183, 219, 261, 264, 266, 268, 269, 271, 274, 298, 320, 344, 345, 348, 350, 354, 361, 364, 370, 378, 422, 423, 425, 434, 435, 440, 457, 488, 489], "understood": [67, 275], "undirect": [389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 421], "unexpectedli": 72, "unfilt": [155, 158], "unfortun": [168, 172], "uniform": 90, "uniform_averag": [299, 304], "uniformli": [135, 158, 166, 430, 436, 438, 439, 443, 445], "uninterrupt": 175, "union": [85, 379, 381, 382], "uniqu": [2, 16, 19, 30, 31, 32, 33, 34, 36, 37, 40, 42, 44, 45, 50, 51, 53, 60, 66, 87, 88, 95, 101, 104, 108, 129, 138, 158, 159, 167, 184, 193, 242, 248, 249, 327, 365, 368, 372, 449, 450, 451], "unique_condit": 36, "unique_run": 34, "unit": [0, 6, 7, 16, 40, 57, 59, 115, 163, 165, 171, 172, 173, 186, 302, 312, 313, 335, 338, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 461], "uniti": [143, 158], "univ": [115, 312, 313], "univari": [30, 34, 35, 40, 98, 112, 113, 115, 167, 169, 171, 264, 269, 270, 298, 299, 300, 301, 303, 304, 343, 345, 350, 364, 370, 384, 412, 427, 435, 440, 488, 489], "univers": [0, 179, 222], "universitair": 0, "universiteit": 0, "universit\u00e4t": 0, "universit\u00e9": [0, 173], "unix": [184, 297], "unknown": [10, 23, 24, 58, 92, 103, 111, 129, 158, 165, 193, 195, 196, 200, 204, 205, 206, 207, 208, 209, 212, 213, 216, 217, 218, 221, 224, 226, 227, 229, 230, 231, 242, 243, 256, 473], "unlabel": 179, "unless": [118, 172, 173, 280, 335, 384, 430, 461], "unlik": [15, 21, 170, 175, 184, 362], "unmask": [33, 34, 46, 80, 116, 125, 138, 141, 158, 183, 185, 305, 306, 364, 367, 370, 489], "unmodul": [65, 73], "unnecessari": [3, 126, 129, 158, 313], "unpair": [75, 83, 113, 129, 158, 178, 270, 333, 396, 423, 427, 440, 488], "unpaired_design_matrix": 81, "unpen": 172, "unrealist": 172, "unrel": [173, 186], "unrestrict": [191, 194, 198, 201, 202, 219], "unscrub": 196, "unsign": [335, 384], "unstructur": 41, "unsuit": [146, 158], "unsupervis": [106, 179, 302, 305, 306, 320, 333, 446, 448], "unsurprisingli": 81, "unthreshold": [24, 82, 115, 118, 179, 195, 220, 243, 275, 277], "until": [275, 384], "unus": [128, 129, 158, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374], "unusu": 165, "unwant": [67, 115, 196], "unwarp": 179, "unzip": 182, "up": [0, 3, 6, 10, 23, 24, 34, 37, 49, 85, 87, 90, 95, 99, 105, 111, 115, 124, 126, 127, 129, 143, 144, 146, 151, 153, 156, 158, 162, 168, 169, 171, 172, 174, 175, 176, 179, 182, 186, 196, 228, 242, 244, 246, 248, 249, 251, 252, 254, 255, 280, 307, 334, 384, 420, 446, 471, 489], "updat": [42, 94, 101, 103, 124, 125, 126, 127, 128, 129, 130, 133, 137, 138, 143, 146, 152, 153, 155, 158, 182, 232, 233, 234, 252, 275, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 449], "update_20190916_readm": 252, "update_yeo2011_schaefer2018_labelnam": [225, 252], "upgrad": [36, 37, 42, 43, 44, 49, 53, 54, 55, 56, 57, 58, 60, 63, 70, 90, 92, 93, 95, 99, 100, 101, 104, 105, 106, 107, 108, 117, 124, 129, 138, 140, 146, 151, 153, 158], "upload": 118, "upon": [0, 103, 192, 194, 276, 320, 333, 419, 433, 434, 435, 442, 449, 451, 459], "upper": [15, 42, 172, 310, 312, 313, 378, 381, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 425, 427, 428, 430, 431, 433, 434, 435, 436, 438, 439, 443, 445], "upper_cutoff": [90, 129, 158, 378, 381], "upstream": [173, 182], "urgent": 182, "url": [0, 46, 50, 64, 72, 115, 129, 147, 155, 158, 159, 163, 164, 166, 171, 202, 204, 213, 233, 240, 241, 242, 243, 244, 245, 246, 247, 250, 252, 253, 254, 256, 262, 264, 265, 273, 274, 279, 280, 284, 294, 297, 305, 307, 311, 449], "urls_path": 262, "ursina": [115, 195, 243], "us": [0, 1, 2, 4, 6, 7, 12, 13, 15, 17, 18, 19, 20, 21, 23, 24, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 42, 43, 44, 45, 46, 48, 49, 51, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 90, 91, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 115, 116, 117, 124, 125, 126, 127, 128, 129, 130, 131, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 155, 156, 158, 159, 160, 161, 164, 166, 167, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 185, 186, 192, 193, 196, 197, 198, 199, 200, 201, 203, 211, 212, 213, 218, 219, 220, 222, 223, 228, 233, 235, 236, 237, 238, 239, 240, 242, 245, 251, 252, 255, 257, 260, 283, 284, 289, 290, 292, 293, 296, 303, 307, 308, 309, 310, 311, 312, 313, 314, 316, 318, 319, 321, 324, 325, 326, 328, 329, 330, 331, 332, 337, 341, 342, 347, 352, 356, 358, 359, 373, 376, 377, 379, 380, 381, 382, 385, 386, 387, 388, 413, 414, 415, 444, 446, 448, 452, 453, 454, 455, 456, 460, 461, 462, 469, 470, 472, 473, 474, 483, 487, 488, 489], "usa": 0, "usabl": [141, 158, 170, 172, 194, 274, 302], "usag": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 137, 146, 150, 155, 158, 159, 173, 174, 178, 181, 182, 183, 191, 194, 198, 201, 202, 219, 283, 286, 287, 294, 362, 443, 476, 489], "usecas": [99, 162, 166, 168, 173], "useless": 67, "user": [19, 30, 35, 41, 60, 67, 68, 101, 108, 118, 124, 125, 126, 127, 128, 129, 130, 140, 143, 144, 146, 147, 151, 153, 154, 155, 158, 172, 173, 174, 175, 177, 179, 180, 182, 183, 186, 188, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 476, 478, 479, 487], "userguid": 166, "userwarn": [3, 10, 11, 12, 16, 17, 19, 21, 22, 23, 24, 30, 33, 37, 41, 45, 49, 50, 51, 52, 54, 56, 59, 63, 64, 65, 71, 72, 73, 76, 78, 79, 80, 87, 88, 89, 92, 93, 95, 96, 101, 102, 105, 110, 111], "usr": [248, 249], "usual": [34, 50, 78, 80, 95, 153, 158, 164, 166, 167, 168, 173, 175, 179, 181, 182, 185, 193, 242, 300, 301, 307, 378, 431, 447], "utc": [173, 487], "util": [27, 45, 46, 50, 52, 76, 88, 89, 107, 108, 110, 127, 129, 131, 138, 142, 149, 153, 158, 163, 173, 232, 233, 234, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 358, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 449, 481], "u\u011furbil": [115, 192], "v": [3, 25, 29, 33, 34, 36, 39, 40, 47, 53, 66, 67, 77, 80, 81, 90, 98, 99, 112, 113, 115, 118, 125, 127, 158, 165, 166, 170, 172, 173, 180, 182, 193, 194, 204, 211, 212, 213, 220, 226, 230, 255, 260, 264, 268, 270, 275, 277, 278, 298, 299, 300, 302, 304, 343, 345, 348, 350, 351, 361, 364, 370, 384, 412, 428, 432, 435, 440, 442, 462, 488], "v0": [143, 146, 151, 153, 158, 225, 252], "v1": [124, 127, 143, 151, 153, 158], "v2": [146, 151, 158], "v3": [124, 158], "v4": [64, 127, 158], "va": 13, "val_scor": 35, "valentina": [115, 192], "valid": [6, 29, 33, 34, 37, 38, 42, 44, 46, 47, 53, 100, 107, 108, 109, 113, 115, 125, 126, 133, 136, 149, 153, 154, 156, 158, 159, 161, 166, 169, 173, 186, 196, 226, 234, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 264, 272, 298, 299, 300, 301, 302, 303, 304, 320, 321, 322, 327, 338, 342, 345, 350, 355, 356, 361, 362, 365, 368, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 445, 452, 458, 469, 470, 471, 488, 489], "valid_method": 447, "validationerror": 173, "valu": [4, 6, 10, 15, 16, 18, 24, 25, 31, 34, 40, 42, 44, 46, 49, 54, 56, 57, 60, 63, 67, 70, 73, 78, 80, 89, 90, 91, 92, 93, 95, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 118, 122, 124, 125, 127, 128, 129, 130, 131, 135, 138, 139, 143, 146, 150, 151, 153, 158, 159, 162, 163, 166, 167, 169, 170, 171, 173, 175, 178, 179, 181, 184, 186, 193, 222, 225, 230, 232, 233, 234, 236, 238, 240, 242, 244, 245, 246, 248, 249, 251, 252, 253, 255, 256, 266, 270, 275, 283, 286, 287, 288, 289, 292, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 316, 320, 321, 323, 329, 333, 335, 336, 337, 338, 339, 342, 344, 349, 353, 354, 355, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 416, 418, 419, 420, 421, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 442, 443, 445, 446, 447, 448, 449, 451, 452, 453, 457, 458, 459, 460, 461, 462, 463, 467, 471, 472, 473, 486], "valuabl": [67, 173], "value_count": 102, "valueerror": [124, 127, 158, 348, 352, 357, 365, 366, 368, 369, 465, 471], "vamsi": [115, 211], "van": [115, 118, 192, 200, 220, 246, 275, 277, 361, 362], "vanass": [0, 151, 158], "vanessa": [115, 118, 220, 275, 277], "var": 361, "vari": [15, 35, 67, 72, 95, 96, 103, 152, 158, 162, 168, 172, 181, 225, 233, 234, 236, 339], "variabl": [4, 6, 15, 41, 44, 45, 46, 58, 76, 78, 95, 101, 102, 115, 126, 135, 153, 155, 158, 160, 165, 166, 167, 169, 170, 172, 173, 175, 179, 184, 186, 194, 214, 241, 285, 298, 299, 300, 301, 302, 303, 304, 307, 311, 320, 333, 349, 361], "varianc": [6, 34, 40, 42, 44, 50, 52, 57, 58, 59, 60, 67, 70, 81, 146, 149, 150, 158, 165, 170, 172, 179, 186, 232, 236, 298, 299, 300, 301, 305, 306, 308, 310, 312, 313, 316, 317, 320, 329, 333, 338, 344, 360, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 420, 447, 449, 452, 461, 462], "variance_img": [72, 317], "variance_statmap": [64, 76, 360], "variance_threshold": 44, "variancethreshold": 44, "variant": [166, 190, 192, 219], "variat": [46, 55, 78, 102, 107, 108, 115, 125, 158, 170, 171, 179, 222, 319, 335, 384], "varieti": [65, 101, 164, 165, 166, 167, 168, 173, 179], "variou": [3, 21, 31, 32, 41, 50, 107, 108, 146, 149, 153, 158, 165, 167, 168, 173, 175, 179, 185, 244, 300, 301, 362, 447, 471], "varoquaux": [0, 46, 50, 51, 53, 58, 100, 115, 118, 119, 120, 122, 123, 131, 133, 136, 140, 143, 144, 145, 146, 148, 158, 159, 160, 162, 163, 164, 165, 167, 171, 181, 202, 219, 220, 232, 233, 247, 250, 275, 277, 300, 301, 305, 306, 448, 449, 454], "vasco": [0, 155, 158], "vastli": 101, "vaudois": 0, "vbm": [165, 179, 181], "vc": 182, "vcov": [310, 312, 313], "vec": 239, "vec_to_sym_matrix": [139, 158], "vector": [30, 33, 34, 35, 36, 40, 42, 46, 53, 72, 85, 99, 100, 107, 108, 117, 139, 158, 165, 166, 168, 179, 232, 298, 299, 300, 301, 307, 310, 311, 312, 313, 316, 318, 431, 471], "vectorize_word": [118, 275, 277], "vega10": 13, "vega20": 13, "vega20b": 13, "vega20c": 13, "ventral": [3, 17, 23, 32, 33, 34, 38, 39, 40, 95, 99, 111, 115, 117, 165, 180, 186, 212, 264, 436, 438, 439, 473], "ventralattent": 260, "ventricl": 196, "venv": [173, 487], "verbos": [32, 34, 36, 37, 38, 44, 46, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 63, 90, 92, 93, 99, 100, 101, 104, 107, 143, 158, 163, 186, 233, 234, 236, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 315, 320, 323, 329, 333, 335, 339, 350, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 446, 447, 448, 449, 454, 473], "veri": [4, 31, 32, 33, 36, 37, 41, 42, 44, 46, 51, 56, 67, 76, 77, 78, 80, 87, 95, 105, 117, 146, 158, 159, 160, 162, 165, 166, 167, 168, 171, 172, 173, 175, 179, 182, 186, 300, 301, 366, 369, 371, 415, 433, 460], "verifi": [67, 102, 173, 186], "vern": [115, 200, 211, 246], "versatil": [168, 180, 487], "version": [2, 10, 16, 19, 20, 21, 23, 31, 36, 37, 42, 43, 44, 45, 49, 50, 53, 54, 55, 56, 57, 58, 60, 63, 70, 71, 72, 88, 90, 92, 93, 95, 99, 100, 101, 104, 105, 106, 107, 108, 117, 122, 124, 127, 128, 129, 131, 133, 136, 137, 138, 139, 140, 141, 143, 145, 146, 149, 151, 152, 153, 154, 155, 156, 158, 171, 172, 173, 182, 184, 186, 191, 193, 196, 201, 212, 222, 225, 231, 232, 233, 234, 238, 239, 240, 242, 244, 245, 247, 248, 249, 252, 253, 254, 255, 256, 257, 260, 261, 262, 264, 266, 267, 275, 277, 280, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 316, 317, 320, 323, 324, 325, 326, 329, 330, 331, 332, 333, 335, 337, 338, 342, 347, 348, 349, 350, 351, 352, 353, 354, 357, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 377, 380, 384, 420, 424, 432, 433, 436, 437, 438, 439, 445, 446, 447, 448, 449, 451, 452, 453, 455, 457, 458, 461, 463, 464, 465, 466, 467, 468, 471, 472, 473, 486, 490], "versionad": [173, 182, 473], "versionchang": [173, 182], "versu": [6, 67, 69, 80, 81, 95, 99, 165, 166, 179, 212], "vertex": [7, 10, 25, 179, 254, 373, 398, 436, 437, 438, 439, 463, 468, 471], "vertex_sign": 373, "vertic": [7, 23, 24, 38, 43, 67, 73, 81, 126, 138, 158, 159, 179, 270, 372, 374, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 436, 437, 438, 439, 445, 463, 464, 466, 468, 473], "vertical_checkerboard": [66, 67, 216], "vetor": 232, "vfonov": 213, "vhtf6": 270, "vi": 53, "via": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 117, 120, 129, 130, 158, 160, 161, 165, 168, 171, 173, 174, 177, 184, 199, 226, 245, 303, 304, 320, 329, 373, 376, 377, 378, 379, 380, 381, 419, 425, 427, 428, 433, 434, 435], "victoria": [0, 129, 158], "vidaurr": [115, 192], "video": [66, 173, 179], "vienna": 0, "viergev": [115, 159, 232], "view": [0, 6, 14, 15, 17, 34, 38, 44, 54, 56, 60, 63, 64, 67, 71, 72, 76, 85, 104, 110, 111, 125, 126, 128, 129, 140, 149, 151, 155, 158, 165, 170, 172, 181, 182, 186, 229, 298, 299, 300, 301, 305, 306, 353, 367, 370, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 421, 425, 427, 428, 430, 431, 433, 434, 435, 436, 438, 439, 441, 442, 444, 447, 486, 489], "view_connectom": [23, 54, 56, 60, 143, 144, 146, 151, 158, 442, 444, 486], "view_img": [3, 30, 128, 129, 143, 144, 152, 155, 158, 165, 486], "view_img_on_surf": [10, 143, 144, 146, 151, 158, 441, 442, 444, 445, 489], "view_init": 25, "view_mark": [143, 144, 146, 151, 158, 441, 442, 486], "view_stat_map": [143, 158], "view_surf": [7, 10, 23, 129, 143, 146, 158, 441, 442, 443, 444, 489], "view_typ": [11, 52, 88, 89, 149, 158, 163, 433, 434], "viewabl": [146, 158], "viewer": [30, 143, 158, 165, 185, 442, 486], "viginia": 0, "vijayan": [0, 126, 158], "vinc": [115, 195, 243], "vincent": [0, 46, 51, 115, 119, 158, 171, 181, 195, 198, 219, 221, 243, 250, 270, 362], "vine": [115, 312, 313], "virgil": [0, 119, 158], "virginia": 0, "viridi": [151, 158], "virtual": [173, 182, 487], "visibl": [53, 80, 152, 158, 164, 353, 430, 436, 438, 439, 443, 445, 486], "vision": 228, "visual": [1, 6, 8, 13, 15, 28, 29, 33, 34, 40, 47, 49, 50, 52, 58, 67, 69, 71, 72, 73, 80, 81, 84, 87, 88, 89, 90, 92, 93, 95, 97, 102, 106, 107, 108, 115, 116, 125, 126, 138, 140, 143, 149, 151, 158, 159, 160, 161, 169, 173, 174, 178, 181, 183, 185, 194, 198, 212, 215, 218, 231, 241, 243, 244, 250, 253, 260, 264, 265, 269, 270, 272, 274, 278, 285, 339, 340, 343, 345, 346, 348, 350, 351, 353, 357, 364, 367, 370, 375, 378, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 423, 425, 426, 432, 433, 434, 435, 438, 439, 440, 473, 488, 489], "visual_comput": [66, 67, 69, 216], "visual_left_hand_button_press": [66, 67, 69, 216], "visual_right_hand_button_press": [66, 67, 69, 216], "vittorio": [115, 196], "vivo": [115, 223, 251], "vladimir": [115, 196, 213], "vmax": [15, 42, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 77, 80, 81, 85, 88, 91, 101, 102, 104, 107, 109, 111, 122, 124, 146, 158, 163, 419, 420, 425, 427, 428, 430, 433, 434, 435, 436, 438, 439, 441, 442, 443, 445, 486], "vmhc": 240, "vmin": [15, 32, 37, 42, 46, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 70, 78, 80, 81, 85, 102, 104, 107, 108, 109, 111, 122, 126, 127, 144, 146, 158, 163, 419, 420, 425, 427, 428, 430, 433, 434, 435, 436, 438, 439, 442, 443, 445], "vocabulari": [105, 118, 179, 181, 220, 275, 277], "vogel": [0, 60, 115, 146, 158, 203, 224, 258, 259], "voic": 67, "vol": 302, "vol_img": 467, "vol_to_surf": [10, 140, 149, 151, 158, 174, 430, 436, 437, 438, 439, 443, 467, 486], "vol_to_surf_kwarg": [10, 151, 158, 443, 467], "volum": [9, 17, 28, 37, 40, 45, 50, 56, 58, 63, 69, 80, 88, 92, 101, 111, 115, 117, 124, 126, 127, 129, 140, 143, 151, 158, 164, 170, 171, 179, 180, 181, 184, 188, 193, 196, 211, 218, 242, 244, 247, 264, 274, 298, 299, 300, 301, 303, 304, 305, 306, 320, 342, 350, 353, 354, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 378, 385, 387, 388, 420, 425, 430, 434, 439, 440, 442, 449, 450, 451, 455, 461, 467, 471, 473, 483, 486, 487, 488, 489], "volume_img": [10, 38, 69, 110, 467], "volumetr": [7, 10, 24, 129, 158, 174, 184, 384], "volumn": [58, 361], "volunt": 170, "vote": 166, "vox_offset": [58, 92, 103], "voxel": [3, 7, 16, 26, 29, 34, 37, 38, 40, 41, 42, 43, 46, 47, 48, 51, 52, 60, 61, 67, 70, 75, 80, 82, 83, 85, 88, 90, 91, 93, 99, 101, 103, 104, 107, 113, 115, 117, 125, 133, 136, 137, 138, 144, 153, 155, 158, 162, 163, 165, 167, 168, 169, 171, 174, 175, 176, 179, 180, 181, 184, 186, 193, 196, 214, 215, 218, 225, 228, 231, 240, 248, 249, 256, 261, 265, 266, 279, 299, 302, 303, 304, 305, 306, 308, 315, 316, 320, 329, 333, 335, 336, 337, 338, 340, 342, 343, 344, 353, 354, 357, 360, 361, 364, 365, 366, 367, 368, 369, 370, 371, 373, 375, 376, 379, 381, 384, 397, 412, 415, 420, 423, 429, 435, 440, 446, 447, 448, 449, 450, 451, 455, 456, 457, 458, 459, 471, 472, 473, 486, 488, 489], "voxel_ratio": 51, "voxel_sign": [366, 369, 371, 449], "voxel_wis": 17, "voxelwis": [320, 333], "vrije": 0, "vscode": [146, 158], "vstack": [42, 43, 60, 71, 76, 81, 105], "vt": [3, 19, 95], "vu": 0, "vulner": [115, 152, 158, 211], "vxxx": 218, "w": [38, 46, 60, 108, 115, 159, 192, 203, 225, 230, 231, 232, 234, 252, 255, 256, 258, 262, 280, 298, 299, 303, 304], "w_": [303, 304], "wa": [0, 3, 42, 56, 65, 69, 72, 73, 90, 92, 93, 107, 108, 117, 118, 124, 126, 143, 150, 151, 152, 153, 154, 156, 158, 165, 167, 170, 172, 175, 182, 194, 196, 228, 232, 302, 303, 304, 305, 306, 320, 327, 333, 335, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 420, 430, 436, 438, 439, 443, 445, 446, 447, 448, 449, 452, 472, 473], "wager": [115, 118, 220, 275, 277, 338, 461], "wagstyl": [0, 126, 158], "wai": [3, 6, 7, 40, 63, 64, 67, 72, 73, 76, 77, 85, 99, 115, 117, 118, 150, 151, 153, 158, 159, 161, 164, 165, 166, 168, 171, 172, 173, 174, 175, 179, 184, 186, 277, 300, 301, 310, 312, 313, 358, 420, 446, 486, 487], "wait": [118, 172], "wald": [310, 312, 313], "walk": 181, "walker": [163, 449, 451], "wall": [24, 172], "wang": [0, 115, 124, 125, 126, 127, 129, 150, 151, 153, 155, 158, 222], "want": [0, 2, 6, 10, 15, 16, 38, 44, 51, 56, 67, 71, 72, 73, 79, 87, 95, 99, 101, 105, 113, 117, 118, 159, 166, 168, 172, 173, 175, 185, 186, 277, 303, 304, 323, 353, 362, 424, 438, 486, 487], "wapdim_bet": 45, "ward": [92, 162, 179, 180, 196, 368, 447, 473], "ward_labels_img": 51, "ward_parcel": 51, "ward_tre": 51, "warn": [2, 3, 16, 17, 19, 21, 30, 31, 33, 35, 37, 41, 42, 44, 45, 50, 52, 59, 71, 79, 88, 93, 104, 105, 106, 107, 108, 111, 124, 125, 126, 127, 128, 129, 143, 144, 146, 151, 153, 155, 158, 165, 173, 242, 244, 245, 251, 253, 317, 323, 327, 364, 365, 366, 367, 368, 369, 370, 371, 398, 440, 449, 472], "warrington": [0, 126, 158], "washington": [0, 222], "waskom": [0, 119, 158], "wasn": 172, "wassermann": [0, 115, 122, 143, 158, 202, 247], "wast": 172, "watch": [50, 51, 52, 54, 56, 57, 86, 90, 93, 106, 146, 158, 161, 180, 181, 186, 201, 261, 489], "watkin": [115, 227, 253], "wdesign": [155, 158], "we": [0, 2, 3, 4, 6, 7, 10, 12, 15, 19, 20, 21, 23, 24, 25, 26, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 44, 45, 46, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 116, 117, 118, 124, 126, 129, 136, 144, 145, 146, 151, 153, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 172, 174, 179, 181, 182, 183, 184, 185, 186, 202, 223, 226, 239, 248, 249, 266, 275, 277, 303, 304, 305, 310, 312, 313, 333, 337, 345, 349, 357, 358, 359, 376, 378, 379, 381, 388, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 423, 449, 451, 473, 486, 487], "weaker": [53, 67, 80], "weakli": 172, "web": [17, 115, 118, 143, 146, 158, 173, 220, 275, 277, 320, 333, 441, 443, 444, 445, 459, 486, 490], "webpag": 118, "websit": [3, 44, 76, 131, 143, 158, 173, 192, 240, 253, 274], "webster": [104, 115, 159, 384], "wednesdai": [173, 487], "weeda": [77, 115, 315], "week": [173, 182], "weekli": [173, 181], "wegrzyn": [0, 150, 158], "weigh": 173, "weight": [6, 30, 44, 45, 46, 117, 118, 146, 158, 159, 166, 168, 169, 172, 173, 175, 186, 211, 213, 220, 240, 265, 275, 277, 298, 299, 300, 301, 303, 304, 317, 360, 441, 453, 489], "weight_img": [30, 44, 99, 165, 186], "weighted_connectivity_graph": [124, 158], "weird": 118, "welcom": [173, 182, 487], "well": [3, 6, 16, 40, 46, 50, 53, 60, 67, 68, 70, 80, 90, 101, 130, 136, 143, 150, 152, 158, 159, 160, 162, 163, 165, 166, 168, 171, 173, 175, 179, 181, 196, 199, 202, 213, 226, 227, 232, 233, 234, 247, 253, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 339, 353, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 446, 447, 448, 449, 473], "wellcom": [0, 179, 228], "went": 118, "were": [0, 6, 11, 16, 19, 22, 40, 42, 45, 50, 51, 52, 60, 64, 67, 72, 80, 88, 89, 92, 95, 99, 102, 109, 110, 117, 122, 124, 146, 149, 153, 154, 155, 158, 165, 172, 173, 175, 192, 196, 203, 211, 213, 215, 218, 227, 228, 275, 277, 338, 368, 371, 461, 473], "weren": 172, "western": 0, "wget": 182, "wgreen": [115, 307, 311], "what": [16, 58, 67, 72, 154, 166, 172, 176, 182, 184, 186, 233, 307, 311, 344, 358, 462, 486, 489], "whatev": [150, 158], "whats_new": 182, "whatsnew": [124, 158], "whatsoev": 172, "wheel": 182, "when": [2, 3, 4, 9, 10, 17, 25, 28, 56, 60, 65, 67, 68, 69, 73, 76, 90, 92, 93, 95, 101, 103, 107, 108, 110, 113, 117, 118, 124, 125, 126, 127, 128, 129, 130, 131, 133, 137, 138, 139, 141, 144, 146, 149, 150, 153, 154, 155, 156, 158, 159, 160, 162, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 178, 179, 182, 185, 193, 198, 199, 232, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 268, 270, 275, 277, 298, 299, 300, 301, 302, 303, 304, 308, 309, 313, 314, 317, 320, 333, 335, 353, 355, 357, 360, 361, 362, 365, 366, 367, 368, 369, 370, 371, 375, 384, 385, 387, 388, 398, 416, 427, 428, 433, 434, 435, 436, 438, 439, 440, 442, 443, 445, 447, 452, 459, 460, 461, 471, 473, 486, 488], "whenev": [68, 166, 336], "where": [2, 6, 10, 16, 17, 25, 40, 42, 46, 52, 70, 78, 85, 88, 95, 101, 107, 113, 126, 136, 150, 158, 159, 163, 165, 170, 171, 173, 175, 179, 182, 185, 186, 215, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 294, 298, 299, 300, 301, 303, 304, 307, 310, 311, 312, 313, 316, 320, 333, 335, 375, 395, 397, 400, 402, 404, 406, 408, 410, 412, 416, 419, 422, 425, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 445, 449, 451, 458, 459, 471, 486], "wherea": [16, 51, 152, 158, 162, 166, 185, 379, 381, 382, 447], "wherein": 65, "whether": [6, 10, 70, 90, 95, 104, 128, 144, 158, 165, 173, 175, 182, 186, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 256, 261, 264, 265, 266, 270, 272, 273, 274, 275, 277, 279, 284, 294, 305, 306, 317, 335, 336, 337, 342, 350, 352, 353, 354, 357, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 385, 387, 388, 427, 430, 435, 436, 437, 439, 447, 449, 458, 459, 461, 462], "which": [0, 3, 6, 7, 10, 13, 15, 16, 22, 24, 26, 30, 31, 33, 34, 35, 37, 38, 40, 42, 44, 46, 49, 51, 53, 60, 63, 67, 68, 69, 70, 76, 77, 80, 85, 90, 92, 95, 99, 101, 110, 115, 117, 118, 123, 124, 125, 127, 129, 131, 136, 137, 140, 141, 142, 143, 144, 146, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 163, 164, 165, 166, 168, 170, 171, 172, 173, 174, 175, 177, 179, 181, 182, 184, 185, 186, 192, 193, 196, 239, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 261, 275, 276, 277, 278, 281, 282, 283, 285, 286, 287, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 319, 320, 327, 328, 333, 335, 337, 342, 348, 353, 357, 359, 360, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 377, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 432, 433, 434, 435, 436, 437, 438, 439, 442, 443, 445, 447, 449, 450, 451, 459, 465, 466, 471, 486, 487], "whichev": 173, "while": [3, 4, 6, 7, 40, 45, 50, 57, 58, 67, 85, 95, 99, 101, 102, 105, 110, 117, 124, 126, 131, 141, 143, 158, 164, 165, 170, 172, 173, 174, 181, 185, 186, 196, 244, 298, 299, 300, 301, 327, 384], "white": [12, 25, 40, 42, 44, 58, 67, 76, 90, 134, 149, 151, 152, 158, 172, 185, 186, 196, 205, 206, 207, 208, 209, 210, 213, 222, 261, 265, 279, 283, 286, 290, 291, 292, 293, 298, 299, 300, 301, 305, 306, 323, 361, 367, 370, 377, 380, 436, 437, 438, 439, 442, 443, 445, 447, 470, 471], "white_left": [205, 206, 207, 208, 209, 210, 283, 471], "white_matt": [58, 286, 287, 294, 467], "white_matter_map": [44, 76, 222, 279], "white_right": [205, 206, 207, 208, 209, 210, 283], "whiten": [52, 307, 311, 312, 313], "whitened_design": 311, "whitened_i": 312, "whitened_residu": 312, "whitened_x": [307, 311], "whitening_": 232, "whitespac": [142, 158], "whl": 182, "who": [0, 118, 186, 192, 201, 362], "whole": [4, 15, 44, 50, 52, 70, 90, 95, 115, 118, 126, 152, 158, 170, 171, 173, 174, 180, 185, 186, 199, 213, 214, 228, 245, 265, 275, 277, 288, 291, 298, 299, 300, 301, 305, 306, 367, 370, 377, 380, 384, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 433, 447, 449, 486], "whose": [10, 69, 172, 179, 233, 234, 236, 311, 345, 424, 465, 466, 471], "why": [3, 7, 95, 172, 186], "wide": [57, 71, 107, 115, 165, 166, 168, 172, 173, 212, 262, 280, 302], "width": [10, 15, 33, 53, 67, 76, 95, 110, 129, 158, 179, 186, 298, 299, 300, 301, 305, 306, 320, 333, 335, 355, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 420, 421, 425, 427, 428, 431, 432, 433, 434, 435, 441, 442, 447, 449, 451, 457, 459], "width_ratio": [81, 101], "width_tf": 43, "width_tf_i": 43, "width_view": [129, 158, 442], "wiesner": [0, 146, 158], "wig": [60, 115, 203, 224, 258, 259], "wiki": 175, "wikipedia": 175, "wildcard": [4, 184, 185, 297, 348], "wilei": [115, 312, 313], "william": [115, 192, 195, 221, 243, 307, 311], "williamson": [0, 124, 125, 158], "wim": [115, 213], "window": [173, 320, 333, 459, 487], "winkler": [104, 115, 192, 384], "winner": 226, "wip": 173, "wisconsin": 0, "wise": [6, 16, 42, 49, 57, 82, 95, 101, 104, 124, 129, 155, 158, 170, 174, 179, 186, 298, 299, 300, 301, 335, 384], "wish": [67, 80, 107, 153, 158, 173, 179, 182, 213, 228, 265, 266, 288, 289, 290, 291, 292, 293, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 421, 425, 427, 428, 431, 433, 434, 435], "within": [7, 11, 16, 19, 22, 32, 38, 49, 50, 52, 57, 67, 68, 80, 88, 89, 101, 104, 146, 149, 155, 158, 162, 164, 170, 174, 177, 178, 196, 298, 299, 302, 317, 320, 322, 323, 327, 333, 337, 338, 357, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 382, 389, 390, 391, 392, 393, 394, 396, 399, 401, 403, 405, 407, 409, 411, 420, 421, 447, 450, 459, 461], "without": [3, 6, 15, 24, 50, 52, 67, 79, 82, 85, 95, 103, 118, 125, 126, 137, 146, 155, 158, 160, 163, 169, 171, 172, 175, 179, 184, 186, 245, 336, 342, 362, 364, 367, 370, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 420, 428, 433, 486, 489], "wjtyq": [201, 261], "wjvd5": [202, 247], "wlsmodel": 311, "wm": [12, 22, 58, 90, 152, 158, 186, 213, 265, 298, 299, 300, 301, 305, 306, 362, 367, 370, 377, 380, 447], "wm_csf": [58, 323, 361, 362], "wm_mask_img": 292, "wm_mni152_templ": 293, "wn": [155, 158], "woldorff": [115, 230, 255], "wolf": [58, 60, 115, 172, 361, 362], "wolfgang": [115, 223, 251], "women": 0, "wood": [115, 221], "woolrich": [115, 159, 192], "wor": 173, "word": [15, 78, 95, 105, 107, 118, 165, 166, 173, 215, 220, 228, 275, 277, 467], "word_frequ": [105, 118, 220, 275, 277], "work": [0, 1, 2, 3, 4, 6, 8, 10, 11, 12, 15, 16, 17, 19, 21, 22, 23, 24, 30, 31, 32, 33, 35, 37, 41, 42, 43, 44, 45, 49, 50, 51, 52, 54, 56, 57, 59, 60, 63, 64, 65, 71, 72, 73, 76, 78, 79, 80, 85, 87, 88, 89, 90, 92, 93, 95, 96, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 126, 129, 130, 138, 139, 146, 153, 154, 158, 159, 164, 165, 166, 168, 172, 173, 174, 175, 182, 184, 185, 186, 192, 196, 232, 233, 234, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 333, 360, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 415, 421, 427, 445, 446, 447, 448, 449, 458, 464, 466, 467, 468, 473, 475, 477, 488], "workaround": [139, 158], "workbench": 13, "worker": [32, 36, 37, 38, 44, 45, 46, 50, 52, 55, 59, 60, 99, 104, 107, 384], "workflow": [63, 173, 177, 182], "workshop": [115, 171, 196, 244], "workspac": 182, "world": [42, 184, 186, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 418, 421, 431], "worri": [6, 25, 117], "wors": [67, 299, 304], "worslei": [115, 338, 461], "worst": 165, "worth": 78, "would": [6, 10, 15, 44, 52, 60, 67, 76, 79, 105, 110, 118, 126, 128, 129, 151, 155, 158, 165, 172, 173, 174, 175, 182, 297, 298, 299, 300, 301, 303, 304, 306, 320, 322, 323, 327, 333, 335, 358, 372, 375, 380, 420], "wouter": [77, 115, 315], "wrap": [12, 50, 51, 52, 54, 55, 56, 58, 60, 93, 105, 165, 457], "wrapper": [298, 299, 335, 465, 466], "wresid": [155, 158], "write": [6, 43, 72, 113, 118, 124, 153, 155, 158, 172, 173, 182, 360, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 457, 463, 464, 468], "write_imgs_to_path": [127, 158], "write_tmp_img": [127, 158], "written": [172, 228, 457], "wrong": [136, 154, 158, 175], "wrt": 240, "wspace": [42, 46, 107], "wustl": [222, 226, 279], "www": [0, 2, 4, 6, 10, 11, 22, 27, 41, 71, 103, 118, 193, 194, 195, 199, 212, 213, 220, 227, 228, 229, 241, 242, 245, 253, 264, 265, 266, 281, 282, 288, 289, 290, 291, 292, 293], "wy": [155, 158], "x": [3, 6, 10, 14, 15, 16, 25, 32, 34, 36, 38, 40, 42, 43, 46, 49, 54, 56, 58, 60, 64, 67, 70, 72, 76, 85, 92, 93, 95, 102, 105, 111, 115, 126, 127, 130, 133, 138, 140, 146, 151, 153, 155, 158, 165, 170, 173, 179, 182, 185, 186, 192, 196, 204, 228, 232, 244, 250, 273, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 320, 329, 333, 340, 361, 364, 365, 367, 368, 370, 371, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 421, 425, 427, 428, 431, 433, 434, 435, 436, 437, 438, 439, 442, 445, 446, 448, 449, 450, 454, 458, 459, 460, 463, 472, 484, 486], "x1": [65, 95, 471], "x1_post": 342, "x1_pre": 342, "x2": [65, 95], "x20": 471, "x27": [51, 64, 90, 92, 473], "x2_post": 342, "x2_pre": 342, "x3": 65, "x4": 65, "x_figure_filenam": 43, "x_inv": [446, 448], "x_new": [302, 305, 306, 320, 333, 364, 367, 370, 446, 448], "x_random_filenam": 43, "x_red": [446, 448], "x_test": [32, 40, 43, 46, 298, 299, 300, 301, 302], "x_train": [32, 40, 43, 46], "xar_spac": [52, 54, 55, 58, 60], "xavier": 115, "xaxi": [50, 51], "xerr": [53, 100], "xi": [46, 115, 225, 252], "xiaop": [115, 199, 245], "xlabel": [6, 26, 31, 33, 35, 44, 50, 51, 53, 57, 60, 68, 100, 185], "xlim": [26, 31, 185], "xmean_": [303, 304], "xmin": [31, 419, 420, 421, 425, 427, 428, 431, 433, 434, 435], "xn_post": 342, "xn_pre": 342, "xor": 118, "xprojector": [15, 405, 411, 413], "xslicer": [10, 16, 406, 412, 414], "xstd_": [303, 304], "xtick": [33, 35, 36, 46, 95], "xu": [115, 192], "xx": 46, "xxxx": 173, "xy_indices_of_special_voxel": 42, "xyz": [16, 352, 395, 400, 402, 406, 412], "xyzt_unit": [58, 92, 103], "xz": [14, 15, 16, 51, 320, 333, 403, 404, 413, 414, 419, 421, 425, 427, 428, 431, 433, 434, 435, 459, 486], "xzprojector": [14, 15, 407, 409, 413], "xzslicer": [16, 408, 410, 414], "y": [6, 15, 16, 24, 25, 32, 34, 35, 36, 37, 38, 40, 42, 43, 46, 49, 54, 56, 60, 63, 64, 70, 71, 85, 93, 95, 102, 107, 108, 111, 115, 138, 140, 143, 155, 158, 165, 166, 170, 173, 179, 182, 185, 186, 217, 232, 233, 234, 250, 273, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 320, 328, 329, 333, 335, 340, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 421, 425, 427, 428, 431, 433, 434, 435, 436, 437, 438, 439, 442, 445, 446, 447, 448, 449, 450, 458, 459, 463, 472, 486], "y_binari": 40, "y_binary_": 40, "y_col": 43, "y_figure_filenam": 43, "y_multi": 40, "y_pred": [30, 32, 35, 43, 45, 165, 298, 299, 300, 301, 303, 304], "y_pred_big": 43, "y_pred_larg": 43, "y_pred_ova": 36, "y_pred_ovo": 36, "y_pred_tal": 43, "y_random_filenam": 43, "y_row": 43, "y_shape": 43, "y_test": [32, 35, 40, 43, 46, 298, 299, 300, 301, 302], "y_train": [32, 35, 40, 43, 46], "y_true": [299, 304], "yamashita": [42, 43, 115, 218, 274], "yan": [115, 221], "yannick": [115, 118, 119, 158, 165, 167, 198, 220, 270, 275, 277, 300, 301], "yarkoni": [115, 118, 220, 275, 277], "yaroslav": [0, 140, 143, 158], "yashar": [115, 361, 362, 462], "yasmin": [0, 124, 125, 126, 127, 129, 155, 158, 181], "yaxi": 51, "ye": [182, 298, 299, 300, 301], "year": [44, 45, 115, 172, 182, 201, 222, 261], "yellow": 16, "yeo": [115, 129, 158, 188, 225, 252, 256, 416], "yeo2011_17networks_mni152_freesurferconformed1mm_liberalmask": [49, 473], "yeo_2011": [49, 87, 473], "yeo_jneurophysiol11_mni152": [49, 473], "yeo_network": 252, "yet": [66, 81, 106, 115, 153, 158, 165, 173, 181, 372, 373, 374, 433, 472], "yh": 43, "yi": [38, 115], "yichun": [0, 129, 158], "yield": [24, 32, 41, 51, 78, 80, 85, 118, 146, 149, 153, 158, 164, 165, 166, 167, 170, 171, 174, 175, 191, 275, 302, 306, 316, 320, 322, 327, 336, 357, 446, 449], "ylabel": [26, 31, 33, 44, 50, 51, 57, 59, 60, 66, 67, 185], "ylim": 33, "ylorrd": 60, "ymean_": [303, 304], "ymin": [419, 420, 421, 425, 427, 428, 431, 433, 434, 435], "yml": 182, "yoichi": [42, 43, 115, 218, 274], "york": [0, 115, 312, 313], "you": [0, 2, 4, 6, 7, 10, 15, 16, 23, 24, 25, 36, 37, 38, 41, 42, 43, 44, 45, 46, 49, 50, 51, 53, 54, 55, 56, 57, 58, 60, 63, 67, 70, 72, 76, 80, 87, 90, 92, 93, 95, 99, 100, 101, 104, 105, 106, 107, 108, 110, 113, 115, 117, 118, 129, 138, 139, 143, 146, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 171, 173, 177, 178, 179, 181, 182, 184, 185, 186, 192, 193, 198, 213, 220, 232, 233, 234, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 253, 254, 256, 261, 264, 265, 266, 270, 272, 273, 274, 275, 279, 280, 284, 288, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 320, 322, 323, 327, 333, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 421, 424, 425, 427, 428, 431, 433, 434, 435, 436, 438, 439, 442, 443, 445, 446, 447, 448, 449, 471, 486, 487, 489], "young": [50, 115, 180, 192, 196, 201, 222, 244], "your": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 116, 118, 160, 164, 165, 166, 168, 170, 182, 184, 186, 192, 248, 249, 261, 266, 298, 299, 300, 301, 305, 306, 311, 367, 370, 447, 486, 489], "your_branch": 173, "your_fork": 173, "your_usernam": 173, "yprojector": [15, 401, 411, 413], "yslicer": [16, 93, 402, 412, 414], "yt_big": 43, "yt_larg": 43, "yt_tall": 43, "ytick": [31, 46, 50, 53, 100], "yukiyasu": [42, 43, 115, 218, 274], "yuko": [115, 195, 243], "yusuk": [42, 43, 115, 218, 274], "yvett": [0, 173], "yw": 43, "yx": [15, 16, 117, 320, 333, 407, 408, 413, 414, 419, 421, 425, 427, 428, 431, 433, 434, 435, 459, 486], "yxprojector": [15, 403, 409, 413], "yxslicer": [16, 404, 410], "yz": [15, 16, 32, 41, 320, 333, 409, 410, 413, 414, 419, 421, 425, 427, 428, 431, 433, 434, 435, 459, 486], "yzprojector": [15, 403, 407, 413], "yzslicer": [16, 41, 404, 408, 414], "y\u00fccel": [58, 115, 362], "z": [2, 14, 15, 16, 19, 25, 31, 34, 37, 40, 42, 44, 45, 49, 50, 52, 54, 56, 60, 63, 64, 66, 67, 70, 71, 76, 77, 80, 81, 82, 85, 88, 89, 95, 102, 104, 107, 108, 115, 128, 138, 140, 144, 155, 158, 173, 175, 179, 182, 185, 186, 196, 250, 275, 308, 315, 317, 319, 320, 333, 336, 340, 360, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 384, 385, 387, 388, 392, 393, 394, 395, 396, 403, 404, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 421, 425, 427, 428, 431, 433, 434, 435, 436, 437, 438, 439, 442, 445, 449, 450, 458, 459, 461, 463, 472, 486], "z_image_path": 72, "z_img": 109, "z_map": [6, 34, 63, 64, 66, 67, 70, 71, 72, 76, 77, 78, 80, 82, 102, 320, 333], "z_map_ftest": 70, "z_score": [6, 63, 66, 67, 69, 70, 71, 72, 76, 77, 78, 80, 81, 82, 110, 308, 320, 333], "z_scores_left": 110, "z_scores_right": 110, "z_slice": [19, 44], "z_statmap": [64, 76], "z_val": 319, "z_valu": 109, "zack": [115, 170], "zaleski": [115, 160], "zarrar": 115, "zavitz": [115, 221], "zealand": [104, 115, 384], "zenodo": 0, "zero": [6, 10, 15, 21, 23, 24, 37, 38, 40, 41, 46, 49, 55, 56, 72, 76, 78, 80, 95, 110, 122, 127, 146, 150, 154, 158, 159, 163, 165, 166, 170, 171, 172, 175, 179, 185, 186, 222, 232, 233, 234, 236, 298, 299, 300, 301, 303, 304, 305, 306, 307, 312, 313, 320, 333, 335, 338, 339, 342, 355, 357, 361, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 381, 384, 386, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 419, 434, 435, 437, 438, 447, 448, 449, 452, 453, 455, 456, 461, 473], "zero_divis": 43, "zeros_lik": [42, 68, 85, 104], "zielinski": [115, 191, 240], "zijdenbo": [115, 193, 213], "zill": 115, "zip": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 163, 182, 213, 219, 250], "zmap": [41, 102, 217, 273], "zmap_filenam": 41, "zmax": [50, 52], "zmin": [50, 52], "zone": [115, 192], "zoom": [151, 158], "zprojector": [15, 401, 405, 413], "zscore": [6, 125, 126, 146, 158, 232, 305, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 420, 461], "zscore_sampl": [3, 12, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 92, 93, 99, 100, 101, 106, 125, 158, 163, 165, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 461, 473], "zslicer": [16, 37, 70, 89, 402, 406, 414], "zstat12": 64, "zuckerberg": 0, "zuo": [115, 225, 252], "zurich": 0, "zvi": [0, 148, 158], "zwalli": [0, 127, 158], "z\u00f6llei": [115, 225, 231, 252, 256], "\u00e1": [115, 213], "\u00e2": [115, 192], "\u00e9": [73, 115, 165, 198, 211, 213, 270], "\u00eb": [46, 115, 165, 171, 181], "\u00eele": 0, "\u00f3scar": [0, 119, 122, 131, 133, 158], "\u00fc": [115, 171], "\u0161": [115, 213], "\u03b1": [34, 472], "\u03b54": [115, 192]}, "titles": ["Team", "Basic tutorials", "3D and 4D niimgs: handling and visualizing", "A introduction tutorial to fMRI decoding", "Basic nilearn example: manipulating and looking at data", "Basic numerics and plotting with Python", "Intro to GLM Analysis: a single-run, single-subject fMRI dataset", "Working with Surface images", "Computation times", "Visualization of brain images", "Making a surface plot of a 3D statistical map", "Basic Atlas plotting", "Visualizing global patterns with a carpet plot", "Matplotlib colormaps in Nilearn", "Glass brain plotting in nilearn", "Glass brain plotting in nilearn (all options)", "More plotting tools from nilearn", "Plotting tools in nilearn", "Controlling the contrast of the background when plotting", "Plot Haxby masks", "Visualizing multiscale functional brain parcellations", "Visualizing a probabilistic atlas: the default mode in the MSDL atlas", "Visualizing 4D probabilistic atlas maps", "Loading and plotting of a cortical surface atlas", "Seed-based connectivity on the surface", "Technical point: Illustration of the volume to surface sampling schemes", "NeuroImaging volumes visualization", "Visualizing Megatrawls Network Matrices from Human Connectome Project", "Computation times", "Decoding and predicting from brain images", "Decoding with ANOVA + SVM: face vs house in the Haxby dataset", "Different classifiers in decoding the Haxby dataset", "Decoding with FREM: face vs house vs chair object recognition", "ROI-based decoding analysis in Haxby et al. dataset", "Decoding of a dataset after GLM fit for signal extraction", "Setting a parameter by cross-validation", "The haxby dataset: different multi-class strategies", "Searchlight analysis of face vs house recognition", "Cortical surface-based searchlight decoding", "Show stimuli of Haxby et al. dataset", "Understanding <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Decoder</span></code>", "FREM on Jimura et al \u201cmixed gambles\u201d dataset", "Encoding models for visual stimuli from Miyawaki et al. 2008", "Reconstruction of visual stimuli from Miyawaki et al. 2008", "Voxel-Based Morphometry on Oasis dataset", "Voxel-Based Morphometry on Oasis dataset with Space-Net prior", "Example of pattern recognition on simulated data", "Computation times", "Functional connectivity", "Comparing connectomes on different reference atlases", "Deriving spatial maps from group fMRI data using ICA and Dictionary Learning", "Clustering methods to learn a brain parcellation from fMRI", "Regions extraction using dictionary learning and functional connectomes", "Classification of age groups using functional connectivity", "Computing a connectome with sparse inverse covariance", "Group Sparse inverse covariance for multi-subject connectome", "Extracting signals of a probabilistic atlas of functional regions", "Producing single subject maps of seed-to-voxel correlation", "Extracting signals from a brain parcellation", "Connectivity structure estimation on simulated data", "Extract signals on spheres and plot a connectome", "Computation times", "GLM: First level analysis", "Default Mode Network extraction of ADHD dataset", "First level analysis of a complete BIDS dataset from openneuro", "Examples of design matrices", "Analysis of an fMRI dataset with a Finite Impule Response (FIR) model", "Understanding parameters of the first-level model", "Example of MRI response functions", "Example of surface-based first-level analysis", "Predicted time series and residuals", "Single-subject data (two runs) in native space", "Simple example of two-runs fMRI model fitting", "Generate an events.tsv file for the NeuroSpin localizer task", "Computation times", "GLM: Second level analysis", "Voxel-Based Morphometry on OASIS dataset", "Second-level fMRI model: true positive proportion in clusters", "Example of generic design in second-level models", "Example of second level design matrix", "Second-level fMRI model: one sample test", "Second-level fMRI model: two-sample test, unpaired and paired", "Statistical testing of a second-level analysis", "Computation times", "Manipulating brain image volumes", "Visualization of affine resamplings", "Comparing the means of 2 images", "Breaking an atlas of labels in separated regions", "Regions Extraction of Default Mode Networks using Smith Atlas", "Region Extraction using a t-statistical map (3D)", "Understanding NiftiMasker and mask computation", "Negating an image with math_img", "Extracting signals from brain regions using the NiftiLabelsMasker", "Simple example of NiftiMasker use", "Resample an image to a template", "Computing a Region of Interest (ROI) mask manually", "Smoothing an image", "Computation times", "Advanced statistical analysis of brain images", "Advanced decoding using scikit learn", "Functional connectivity predicts age group", "Beta-Series Modeling for Task-Based Functional Connectivity and Decoding", "BIDS dataset first and second level analysis", "Copying headers from input images with <code class=\"docutils literal notranslate\"><span class=\"pre\">math_img</span></code>", "Massively univariate analysis of face vs house recognition", "NeuroVault cross-study ICA maps", "Multivariate decompositions: Independent component analysis of fMRI", "Massively univariate analysis of a motor task from the Localizer dataset", "Massively univariate analysis of a calculation task from the Localizer dataset", "NeuroVault meta-analysis of stop-go paradigm studies", "Surface-based dataset first and second level analysis of a dataset", "A short demo of the surface images &amp; maskers", "Computation times", "Examples", "Computation times", "General bibliography", "<span class=\"section-number\">10. </span>Advanced usage: manual pipelines and scaling up", "<span class=\"section-number\">10.1. </span>Building your own neuroimaging machine-learning pipeline", "<span class=\"section-number\">10.2. </span>Downloading statistical maps from the Neurovault repository", "0.1.0", "0.1.1", "0.1.2", "0.1.3", "0.1.4", "0.10.0", "0.10.1", "0.10.2", "0.10.3", "0.10.4", "0.11.0", "0.11.1", "0.2.0", "0.2.1", "0.2.2", "0.2.3", "0.2.4", "0.2.5.1", "0.2.6", "0.3.0", "0.3.1", "0.4.0", "0.4.1", "0.4.2", "0.5.0", "0.5.1", "0.5.2", "0.6.0", "0.6.1", "0.6.2", "0.7.0", "0.7.1", "0.8.0", "0.8.1", "0.9.0", "0.9.1", "0.9.2", "0.11.2.dev", "&lt;no title&gt;", "What\u2019s new", "<span class=\"section-number\">6.2. </span>Connectome extraction: inverse covariance for direct connections", "<span class=\"section-number\">6.1. </span>Extracting times series to build a functional connectome", "<span class=\"section-number\">6. </span>Functional connectivity and resting state", "<span class=\"section-number\">6.5. </span>Clustering to parcellate the brain in regions", "<span class=\"section-number\">6.4. </span>Region Extraction for better brain parcellations", "<span class=\"section-number\">6.3. </span>Extracting functional brain networks: ICA and related", "<span class=\"section-number\">5.1. </span>An introduction to decoding", "<span class=\"section-number\">5.2. </span>Choosing the right predictive model for neuroimaging", "<span class=\"section-number\">5.3. </span>FREM: fast ensembling of regularized models for robust decoding", "<span class=\"section-number\">5.6. </span>Running scikit-learn functions for more control on the analysis", "<span class=\"section-number\">5. </span>Decoding and MVPA: predicting from brain images", "<span class=\"section-number\">5.5. </span>Searchlight : finding voxels containing information", "<span class=\"section-number\">5.4. </span>SpaceNet: decoding with spatial structure for better maps", "<span class=\"section-number\">6.2.3.1. </span>Group-sparse covariance estimation", "Contributing", "<span class=\"section-number\">8.2. </span>First level models", "<span class=\"section-number\">8.1. </span>An introduction to GLMs in fMRI statistical analysis", "<span class=\"section-number\">8. </span>Analyzing fMRI using GLMs", "<span class=\"section-number\">8.4. </span>Difference in meanings between different toolboxes", "<span class=\"section-number\">8.3. </span>Second level models", "Glossary", "Nilearn", "<span class=\"section-number\">1. </span>Introduction", "Maintenance", "<span class=\"section-number\">9. </span>Manipulation brain volumes with nilearn", "<span class=\"section-number\">9.1. </span>Input and output: neuroimaging data representation", "<span class=\"section-number\">9.2. </span>Manipulating images: resampling, smoothing, masking, ROIs\u2026", "<span class=\"section-number\">9.3. </span>From neuroimaging volumes to data matrices: the masker objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.connectome</span></code>: Functional Connectivity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.datasets</span></code>: Automatic Dataset Fetching", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.decoding</span></code>: Decoding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.decomposition</span></code>: Multivariate Decompositions", "ABIDE PCP dataset", "MegaTrawls Network Matrices HCP", "AAL atlas", "ADHD dataset", "Allen 2011 atlas", "BASC multiscale atlas", "BIDS language localizer", "Brainomics Localizer", "Craddock 2012 atlas", "Destrieux atlas", "development fMRI dataset", "DiFuMo atlas", "Dosenbach 2010 atlas", "fiac first level dataset", "fsaverage template", "fsaverage3 template", "fsaverage4 template", "fsaverage5 template", "fsaverage6 template", "Content", "Harvard Oxford atlas", "Haxby dataset", "ICBM 152 template", "Juelich atlas", "language localizer demo dataset", "localizer first level dataset", "Mixed gambles statistical maps", "Miyawaki 2008 dataset", "MSDL atlas", "Neurovault statistical maps", "NKI enhanced surface dataset", "OASIS volume based morphometry maps", "Pauli 2007 atlas", "Power 2011 atlas", "Schaefer 2018 atlas", "Seitzman 2018 atlas", "Smith 2009 atlas", "SPM auditory dataset", "SPM multimodal dataset", "Talairach atlas", "Yeo 2011 atlas", "nilearn.connectome.ConnectivityMeasure", "nilearn.connectome.GroupSparseCovariance", "nilearn.connectome.GroupSparseCovarianceCV", "nilearn.connectome.cov_to_corr", "nilearn.connectome.group_sparse_covariance", "nilearn.connectome.prec_to_partial", "nilearn.connectome.sym_matrix_to_vec", "nilearn.connectome.vec_to_sym_matrix", "nilearn.datasets.fetch_abide_pcp", "nilearn.datasets.fetch_adhd", "nilearn.datasets.fetch_atlas_aal", "nilearn.datasets.fetch_atlas_allen_2011", "nilearn.datasets.fetch_atlas_basc_multiscale_2015", "nilearn.datasets.fetch_atlas_craddock_2012", "nilearn.datasets.fetch_atlas_destrieux_2009", "nilearn.datasets.fetch_atlas_difumo", "nilearn.datasets.fetch_atlas_harvard_oxford", "nilearn.datasets.fetch_atlas_juelich", "nilearn.datasets.fetch_atlas_msdl", "nilearn.datasets.fetch_atlas_pauli_2017", "nilearn.datasets.fetch_atlas_schaefer_2018", "nilearn.datasets.fetch_atlas_smith_2009", "nilearn.datasets.fetch_atlas_surf_destrieux", "nilearn.datasets.fetch_atlas_talairach", "nilearn.datasets.fetch_atlas_yeo_2011", "nilearn.datasets.fetch_bids_langloc_dataset", "nilearn.datasets.fetch_coords_dosenbach_2010", "nilearn.datasets.fetch_coords_power_2011", "nilearn.datasets.fetch_coords_seitzman_2018", "nilearn.datasets.fetch_development_fmri", "nilearn.datasets.fetch_ds000030_urls", "nilearn.datasets.fetch_fiac_first_level", "nilearn.datasets.fetch_haxby", "nilearn.datasets.fetch_icbm152_2009", "nilearn.datasets.fetch_icbm152_brain_gm_mask", "nilearn.datasets.fetch_language_localizer_demo_dataset", "nilearn.datasets.fetch_localizer_button_task", "nilearn.datasets.fetch_localizer_calculation_task", "nilearn.datasets.fetch_localizer_contrasts", "nilearn.datasets.fetch_localizer_first_level", "nilearn.datasets.fetch_megatrawls_netmats", "nilearn.datasets.fetch_mixed_gambles", "nilearn.datasets.fetch_miyawaki2008", "nilearn.datasets.fetch_neurovault", "nilearn.datasets.fetch_neurovault_auditory_computation_task", "nilearn.datasets.fetch_neurovault_ids", "nilearn.datasets.fetch_neurovault_motor_task", "nilearn.datasets.fetch_oasis_vbm", "nilearn.datasets.fetch_openneuro_dataset", "nilearn.datasets.fetch_spm_auditory", "nilearn.datasets.fetch_spm_multimodal_fmri", "nilearn.datasets.fetch_surf_fsaverage", "nilearn.datasets.fetch_surf_nki_enhanced", "nilearn.datasets.get_data_dirs", "nilearn.datasets.load_fsaverage", "nilearn.datasets.load_fsaverage_data", "nilearn.datasets.load_mni152_brain_mask", "nilearn.datasets.load_mni152_gm_mask", "nilearn.datasets.load_mni152_gm_template", "nilearn.datasets.load_mni152_template", "nilearn.datasets.load_mni152_wm_mask", "nilearn.datasets.load_mni152_wm_template", "nilearn.datasets.load_nki", "nilearn.datasets.load_sample_motor_activation_image", "nilearn.datasets.patch_openneuro_dataset", "nilearn.datasets.select_from_index", "nilearn.decoding.Decoder", "nilearn.decoding.DecoderRegressor", "nilearn.decoding.FREMClassifier", "nilearn.decoding.FREMRegressor", "nilearn.decoding.SearchLight", "nilearn.decoding.SpaceNetClassifier", "nilearn.decoding.SpaceNetRegressor", "nilearn.decomposition.CanICA", "nilearn.decomposition.DictLearning", "nilearn.glm.ARModel", "nilearn.glm.Contrast", "nilearn.glm.FContrastResults", "nilearn.glm.LikelihoodModelResults", "nilearn.glm.OLSModel", "nilearn.glm.RegressionResults", "nilearn.glm.SimpleRegressionResults", "nilearn.glm.TContrastResults", "nilearn.glm.cluster_level_inference", "nilearn.glm.compute_contrast", "nilearn.glm.compute_fixed_effects", "nilearn.glm.expression_to_contrast_vector", "nilearn.glm.fdr_threshold", "nilearn.glm.first_level.FirstLevelModel", "nilearn.glm.first_level.check_design_matrix", "nilearn.glm.first_level.compute_regressor", "nilearn.glm.first_level.first_level_from_bids", "nilearn.glm.first_level.glover_dispersion_derivative", "nilearn.glm.first_level.glover_hrf", "nilearn.glm.first_level.glover_time_derivative", "nilearn.glm.first_level.make_first_level_design_matrix", "nilearn.glm.first_level.mean_scaling", "nilearn.glm.first_level.run_glm", "nilearn.glm.first_level.spm_dispersion_derivative", "nilearn.glm.first_level.spm_hrf", "nilearn.glm.first_level.spm_time_derivative", "nilearn.glm.second_level.SecondLevelModel", "nilearn.glm.second_level.make_second_level_design_matrix", "nilearn.glm.second_level.non_parametric_inference", "nilearn.glm.threshold_stats_img", "nilearn.image.binarize_img", "nilearn.image.clean_img", "nilearn.image.concat_imgs", "nilearn.image.coord_transform", "nilearn.image.copy_img", "nilearn.image.crop_img", "nilearn.image.get_data", "nilearn.image.high_variance_confounds", "nilearn.image.index_img", "nilearn.image.iter_img", "nilearn.image.largest_connected_component_img", "nilearn.image.load_img", "nilearn.image.math_img", "nilearn.image.mean_img", "nilearn.image.new_img_like", "nilearn.image.reorder_img", "nilearn.image.resample_img", "nilearn.image.resample_to_img", "nilearn.image.smooth_img", "nilearn.image.swap_img_hemispheres", "nilearn.image.threshold_img", "nilearn.interfaces.bids.get_bids_files", "nilearn.interfaces.bids.parse_bids_filename", "nilearn.interfaces.bids.save_glm_to_bids", "nilearn.interfaces.fmriprep.load_confounds", "nilearn.interfaces.fmriprep.load_confounds_strategy", "nilearn.interfaces.fsl.get_design_from_fslmat", "nilearn.maskers.BaseMasker", "nilearn.maskers.MultiNiftiLabelsMasker", "nilearn.maskers.MultiNiftiMapsMasker", "nilearn.maskers.MultiNiftiMasker", "nilearn.maskers.NiftiLabelsMasker", "nilearn.maskers.NiftiMapsMasker", "nilearn.maskers.NiftiMasker", "nilearn.maskers.NiftiSpheresMasker", "nilearn.maskers.SurfaceLabelsMasker", "nilearn.maskers.SurfaceMapsMasker", "nilearn.maskers.SurfaceMasker", "nilearn.masking.apply_mask", "nilearn.masking.compute_background_mask", "nilearn.masking.compute_brain_mask", "nilearn.masking.compute_epi_mask", "nilearn.masking.compute_multi_background_mask", "nilearn.masking.compute_multi_brain_mask", "nilearn.masking.compute_multi_epi_mask", "nilearn.masking.intersect_masks", "nilearn.masking.unmask", "nilearn.mass_univariate.permuted_ols", "nilearn.plotting.displays.BaseAxes", "nilearn.plotting.displays.BaseSlicer", "nilearn.plotting.displays.CutAxes", "nilearn.plotting.displays.GlassBrainAxes", "nilearn.plotting.displays.LProjector", "nilearn.plotting.displays.LRProjector", "nilearn.plotting.displays.LYRProjector", "nilearn.plotting.displays.LYRZProjector", "nilearn.plotting.displays.LZRProjector", "nilearn.plotting.displays.LZRYProjector", "nilearn.plotting.displays.MosaicSlicer", "nilearn.plotting.displays.OrthoProjector", "nilearn.plotting.displays.OrthoSlicer", "nilearn.plotting.displays.PlotlySurfaceFigure", "nilearn.plotting.displays.RProjector", "nilearn.plotting.displays.TiledSlicer", "nilearn.plotting.displays.XProjector", "nilearn.plotting.displays.XSlicer", "nilearn.plotting.displays.XZProjector", "nilearn.plotting.displays.XZSlicer", "nilearn.plotting.displays.YProjector", "nilearn.plotting.displays.YSlicer", "nilearn.plotting.displays.YXProjector", "nilearn.plotting.displays.YXSlicer", "nilearn.plotting.displays.YZProjector", "nilearn.plotting.displays.YZSlicer", "nilearn.plotting.displays.ZProjector", "nilearn.plotting.displays.ZSlicer", "nilearn.plotting.displays.get_projector", "nilearn.plotting.displays.get_slicer", "nilearn.plotting.find_cut_slices", "nilearn.plotting.find_parcellation_cut_coords", "nilearn.plotting.find_probabilistic_atlas_cut_coords", "nilearn.plotting.find_xyz_cut_coords", "nilearn.plotting.plot_anat", "nilearn.plotting.plot_carpet", "nilearn.plotting.plot_connectome", "nilearn.plotting.plot_contrast_matrix", "nilearn.plotting.plot_design_matrix", "nilearn.plotting.plot_design_matrix_correlation", "nilearn.plotting.plot_epi", "nilearn.plotting.plot_event", "nilearn.plotting.plot_glass_brain", "nilearn.plotting.plot_img", "nilearn.plotting.plot_img_comparison", "nilearn.plotting.plot_img_on_surf", "nilearn.plotting.plot_markers", "nilearn.plotting.plot_matrix", "nilearn.plotting.plot_prob_atlas", "nilearn.plotting.plot_roi", "nilearn.plotting.plot_stat_map", "nilearn.plotting.plot_surf", "nilearn.plotting.plot_surf_contours", "nilearn.plotting.plot_surf_roi", "nilearn.plotting.plot_surf_stat_map", "nilearn.plotting.show", "nilearn.plotting.view_connectome", "nilearn.plotting.view_img", "nilearn.plotting.view_img_on_surf", "nilearn.plotting.view_markers", "nilearn.plotting.view_surf", "nilearn.regions.HierarchicalKMeans", "nilearn.regions.Parcellations", "nilearn.regions.ReNA", "nilearn.regions.RegionExtractor", "nilearn.regions.connected_label_regions", "nilearn.regions.connected_regions", "nilearn.regions.img_to_signals_labels", "nilearn.regions.img_to_signals_maps", "nilearn.regions.recursive_neighbor_agglomeration", "nilearn.regions.signals_to_img_labels", "nilearn.regions.signals_to_img_maps", "nilearn.reporting.HTMLReport", "nilearn.reporting.get_clusters_table", "nilearn.reporting.make_glm_report", "nilearn.signal.butterworth", "nilearn.signal.clean", "nilearn.signal.high_variance_confounds", "nilearn.surface.FileMesh", "nilearn.surface.InMemoryMesh", "nilearn.surface.PolyData", "nilearn.surface.PolyMesh", "nilearn.surface.SurfaceImage", "nilearn.surface.SurfaceMesh", "nilearn.surface.load_surf_data", "nilearn.surface.load_surf_mesh", "nilearn.surface.vol_to_surf", "Examples of GLM reports", "Examples masker reports", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.glm</span></code>: Generalized Linear Models", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.image</span></code>: Image Processing and Resampling Utilities", "API References", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.interfaces</span></code>: Loading components from interfaces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.maskers</span></code>: Extracting Signals from Brain Images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.masking</span></code>: Data Masking Utilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.mass_univariate</span></code>: Mass-Univariate Analysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.plotting</span></code>: Plotting Brain Data", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.regions</span></code>: Operating on Regions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.reporting</span></code>: Reporting Functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.signal</span></code>: Preprocessing Time Series", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.surface</span></code>: Manipulating Surface Data", "<span class=\"section-number\">7. </span>Plotting brain images", "Quickstart", "Computation times", "User guide", "Available documentation for Nilearn"], "titleterms": {"": [60, 63, 99, 158, 165], "0": [18, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 284], "0a0": [146, 158], "0b0": [146, 158], "0rc": [146, 158], "1": [18, 67, 119, 120, 121, 122, 123, 125, 130, 132, 136, 139, 141, 144, 147, 150, 152, 154, 158], "10": [124, 125, 126, 127, 128, 158], "100": 186, "11": [129, 130, 156, 158], "14": 284, "152": 213, "1rc1": [125, 158], "2": [86, 121, 126, 131, 132, 133, 134, 135, 136, 137, 142, 145, 148, 155, 156, 158], "2001": 165, "2007": 223, "2008": [42, 43, 218], "2009": 227, "2010": 203, "2011": [195, 224, 231], "2012": 199, "2018": [225, 226], "2d": [117, 185], "2x2": 16, "3": [122, 127, 134, 138, 139, 158], "3d": [2, 4, 10, 23, 54, 56, 60, 89, 184, 486], "4": [123, 128, 135, 140, 141, 142, 158], "4d": [2, 22, 117, 184, 185], "5": [16, 18, 136, 143, 144, 145, 158], "6": [70, 137, 146, 147, 148, 158], "7": [149, 150, 158], "8": [151, 152, 158], "9": [153, 154, 155, 158], "A": [3, 4, 46, 67, 111, 160, 165, 175], "And": [54, 56], "The": [36, 58, 67, 87, 165, 171, 186], "Then": 43, "aal": 193, "abid": 191, "access": [22, 185, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231], "accuraci": [3, 165], "across": 72, "actual": 70, "ad": [67, 173, 486], "add_contour": 16, "add_edg": 16, "add_mark": 16, "add_overlai": 21, "addit": 173, "adhd": [12, 63, 194, 472], "adjust": 25, "advanc": [98, 99, 113, 116, 186], "affin": [85, 184, 185], "after": [34, 90], "ag": [44, 53, 76, 100], "aggreg": 101, "agreement": [222, 279], "al": [33, 39, 41, 42, 43], "algorithm": 172, "all": [2, 15, 165], "allen": 195, "along": 16, "alpha": [143, 158, 172], "also": [205, 206, 207, 208, 209, 210, 213], "altern": 164, "an": [6, 10, 40, 46, 60, 66, 73, 87, 91, 94, 96, 164, 165, 173, 175, 486], "analys": 177, "analysi": [3, 6, 33, 37, 44, 57, 62, 63, 64, 66, 69, 75, 76, 82, 98, 101, 102, 104, 106, 107, 108, 109, 110, 113, 165, 168, 170, 174, 175, 196, 480], "analyz": [76, 176, 184], "anatom": 17, "angl": 23, "ani": 168, "annot": [16, 118], "anoth": [16, 185], "anova": [30, 35, 99, 165, 168], "answer": 173, "api": [129, 131, 158, 173, 181, 476], "appli": [26, 50, 117, 162, 185, 186], "applic": [101, 181], "apply_mask": 375, "approach": [101, 159], "ar": [16, 67], "argument": [64, 102, 186], "armodel": 307, "around": [10, 53, 60], "arrai": [117, 185], "asymmetr": 49, "atla": [10, 11, 21, 22, 23, 49, 53, 54, 56, 58, 60, 87, 88, 100, 111, 160, 173, 193, 195, 196, 199, 200, 202, 203, 211, 214, 219, 223, 224, 225, 226, 227, 230, 231], "atlas": [22, 49, 160, 173, 188, 486], "attribut": 173, "auditori": 228, "automat": [64, 102, 117, 188], "avail": [486, 490], "averag": 60, "ax": 481, "axial": 16, "background": [14, 18, 90], "bag": 166, "bar": [33, 486], "barplot": 36, "basc": 196, "base": [12, 24, 33, 38, 44, 45, 58, 69, 76, 101, 110, 163, 174, 178, 222], "baseax": 385, "basemask": 364, "baseslic": 386, "basic": [1, 4, 5, 11, 67, 113], "behavior": [3, 30, 34, 184], "beta": [101, 138, 143, 158, 165], "better": [163, 171, 186], "between": [65, 177], "bibliographi": 115, "bid": [64, 102, 110, 197, 358, 359, 360, 472, 477], "binari": 40, "binarize_img": 337, "bio": 44, "black": 14, "bold": [38, 175], "bootstrap": 196, "both": [15, 72], "bound": 172, "brain": [9, 14, 15, 17, 20, 26, 29, 42, 44, 49, 50, 51, 52, 53, 58, 60, 84, 92, 98, 100, 113, 160, 162, 163, 164, 169, 183, 185, 478, 481, 486], "brainom": 198, "break": 87, "browser": [10, 23, 54, 56, 60], "bug": [131, 134, 141, 158, 173], "build": [25, 34, 36, 42, 56, 95, 117, 160, 173, 182], "butterworth": 460, "calcul": [24, 70, 108], "canica": [50, 164, 305], "carpet": 12, "case": [173, 185], "cat": 3, "censor": 67, "chair": 32, "chanc": [3, 99, 165, 168], "chang": [16, 18, 67, 99, 124, 125, 126, 127, 128, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 149, 151, 152, 153, 154, 155, 156, 158, 186], "changelog": [119, 120, 121, 122, 131, 132, 134, 158, 173], "check": [102, 487], "check_design_matrix": 321, "children": 53, "choic": 165, "choos": [10, 101, 165, 166], "cite": 0, "class": [36, 40, 166, 187, 189, 190, 474, 478, 481, 482, 483, 485], "classif": [53, 100, 166], "classifi": [31, 170], "clean": 461, "clean_img": 338, "close": 182, "cluster": [51, 70, 77, 162, 196], "cluster_level_infer": 315, "code": [129, 158, 162, 165, 167, 170, 173, 182, 185, 486], "coeffici": 52, "collect": 118, "color": 13, "colorbar": 16, "colormap": [13, 486], "column": 16, "combin": 109, "commit": 173, "common": 186, "compar": [40, 49, 50, 51, 72, 86, 101, 159, 170], "comparison": [10, 167, 175, 178], "compat": 284, "complet": 64, "compon": [105, 106, 164, 477], "compress": [51, 162], "comput": [8, 28, 35, 36, 37, 38, 47, 52, 54, 55, 58, 60, 61, 72, 74, 83, 90, 95, 97, 109, 112, 114, 117, 159, 160, 163, 174, 185, 186, 488], "compute_background_mask": 376, "compute_brain_mask": 377, "compute_contrast": 316, "compute_epi_mask": 378, "compute_fixed_effect": 317, "compute_multi_background_mask": 379, "compute_multi_brain_mask": 380, "compute_multi_epi_mask": 381, "compute_regressor": 322, "concat_img": 339, "concept": 186, "conclus": 67, "condit": [101, 192, 272], "conduct": 173, "confound": [58, 67, 186], "confus": [32, 36], "connect": [24, 48, 49, 53, 58, 59, 87, 100, 101, 111, 113, 159, 161, 163, 187], "connected_label_region": 450, "connected_region": 451, "connectivitymeasur": 232, "connectom": [23, 27, 49, 52, 54, 55, 60, 159, 160, 187, 232, 233, 234, 235, 236, 237, 238, 239, 486], "contain": 170, "content": [191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 489], "continu": 173, "contour": [11, 15, 486], "contrast": [18, 63, 64, 67, 69, 70, 72, 174, 308], "contribut": 173, "contributor": [0, 131, 133, 136, 140, 143, 144, 145, 146, 147, 148, 158], "control": [18, 168, 186], "convert": 40, "coord_transform": 340, "coordin": [16, 49, 60, 160], "copi": 103, "copy_img": 341, "core": 0, "coron": 16, "correct": 178, "correl": [52, 53, 56, 57, 58, 60, 65, 159, 160], "correspond": [26, 54, 56], "cortic": [23, 38, 486], "cours": 63, "cov_to_corr": 235, "covari": [54, 55, 159, 172], "craddock": 199, "creat": [7, 46, 65, 79, 185], "criteria": 172, "criterion": 172, "crop_img": 342, "cross": [3, 30, 35, 36, 40, 99, 105, 165, 168, 170, 172], "css": 173, "csv": 184, "custom": [23, 186], "cut": [14, 16], "cutax": 387, "cutoff": 186, "cylind": 25, "data": [3, 4, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 23, 24, 26, 30, 31, 33, 34, 36, 41, 42, 43, 44, 46, 49, 50, 51, 54, 56, 57, 58, 59, 63, 67, 69, 71, 76, 90, 95, 99, 101, 104, 105, 109, 117, 159, 162, 164, 165, 168, 170, 175, 184, 185, 186, 222, 279, 479, 481, 485], "dataset": [2, 6, 12, 16, 17, 18, 19, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 50, 51, 52, 53, 55, 60, 63, 64, 66, 76, 77, 80, 81, 100, 102, 104, 107, 108, 110, 163, 167, 172, 173, 184, 188, 191, 194, 201, 204, 212, 215, 216, 218, 221, 228, 229, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297], "decid": 173, "decis": 173, "decod": [3, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 43, 45, 99, 101, 111, 113, 165, 167, 168, 169, 171, 189, 298, 299, 300, 301, 302, 303, 304], "decoderregressor": 299, "decomposit": [106, 190, 305, 306], "decreas": [18, 184], "default": [21, 60, 63, 88], "defin": [43, 58, 65, 68, 101], "definit": [165, 186], "demo": [15, 111, 215], "demonstr": 16, "depend": 487, "deploi": 182, "deriv": [12, 50, 67, 188], "descript": [117, 172, 188], "design": [65, 67, 78, 79, 101, 174, 186], "destrieux": [23, 200], "detail": [192, 272], "detect": 6, "determinist": 188, "dev": [156, 158], "develop": [0, 50, 51, 52, 53, 60, 100, 201, 487], "dictionari": [50, 52, 163, 164], "dictlearn": 306, "differ": [15, 23, 31, 33, 35, 36, 46, 49, 87, 159, 166, 177, 186, 486], "difumo": 202, "dim": 18, "dimens": [103, 165], "direct": [49, 159], "disclaim": 192, "discrimin": 99, "discuss": 173, "disk": [64, 76], "displai": [10, 15, 16, 23, 24, 54, 55, 56, 58, 60, 80, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 481, 486], "distribut": [70, 182], "dmn": 60, "do": [173, 175], "doc": 182, "document": [173, 182, 490], "dosenbach": [60, 203], "download": [2, 3, 51, 99, 117, 118, 184], "draw": 25, "drift": 67, "drop": 487, "dtype": 186, "dualiti": 172, "dummi": 99, "each": [10, 34], "easi": 165, "edg": 486, "effect": [6, 72, 177], "empir": 167, "encod": 42, "engin": 99, "enhanc": [18, 124, 125, 126, 127, 128, 129, 130, 131, 133, 137, 138, 139, 140, 141, 143, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 158, 173, 221], "ensembl": 167, "environ": 173, "epi": [17, 90], "error": 43, "estim": [42, 46, 59, 60, 63, 64, 67, 69, 77, 78, 80, 81, 99, 102, 165, 166, 168, 172, 173], "et": [33, 39, 41, 42, 43], "event": [34, 73, 174], "exampl": [4, 34, 41, 46, 65, 68, 69, 72, 78, 79, 93, 102, 110, 113, 118, 129, 158, 159, 160, 162, 164, 165, 170, 171, 180, 181, 185, 186, 232, 234, 241, 243, 244, 246, 247, 248, 249, 250, 253, 254, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 285, 286, 287, 288, 291, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 315, 317, 320, 322, 323, 327, 333, 334, 335, 336, 338, 339, 340, 343, 344, 345, 346, 348, 349, 350, 351, 353, 354, 355, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 378, 383, 384, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 447, 449, 450, 451, 457, 458, 459, 463, 464, 465, 466, 467, 468, 471, 472, 473, 486], "execut": 172, "exercis": [46, 159, 160, 186], "expans": 184, "experi": [41, 117, 165], "experiment": [6, 79], "explicitli": 23, "expression_to_contrast_vector": 318, "extra": 186, "extract": [3, 24, 26, 34, 49, 52, 53, 54, 55, 56, 57, 58, 60, 63, 70, 88, 89, 90, 92, 159, 160, 163, 164, 174, 185, 186, 478], "f": [6, 37, 70], "f_score": 170, "face": [3, 30, 31, 32, 37, 38, 104], "fashion": 16, "fast": 167, "fcontrastresult": 309, "fdr_threshold": 319, "featur": [3, 16, 40, 99, 131, 134, 158, 165, 180, 472], "fetch": [12, 21, 26, 27, 34, 49, 52, 55, 64, 77, 80, 81, 102, 109, 110, 163, 184, 188], "fetch_abide_pcp": 240, "fetch_adhd": 241, "fetch_atlas_a": 242, "fetch_atlas_allen_2011": 243, "fetch_atlas_basc_multiscale_2015": 244, "fetch_atlas_craddock_2012": 245, "fetch_atlas_destrieux_2009": 246, "fetch_atlas_difumo": 247, "fetch_atlas_harvard_oxford": 248, "fetch_atlas_juelich": 249, "fetch_atlas_msdl": 250, "fetch_atlas_pauli_2017": 251, "fetch_atlas_schaefer_2018": 252, "fetch_atlas_smith_2009": 253, "fetch_atlas_surf_destrieux": 254, "fetch_atlas_talairach": 255, "fetch_atlas_yeo_2011": 256, "fetch_bids_langloc_dataset": 257, "fetch_coords_dosenbach_2010": 258, "fetch_coords_power_2011": 259, "fetch_coords_seitzman_2018": 260, "fetch_development_fmri": 261, "fetch_ds000030_url": 262, "fetch_fiac_first_level": 263, "fetch_haxbi": 264, "fetch_icbm152_2009": 265, "fetch_icbm152_brain_gm_mask": 266, "fetch_language_localizer_demo_dataset": 267, "fetch_localizer_button_task": 268, "fetch_localizer_calculation_task": 269, "fetch_localizer_contrast": 270, "fetch_localizer_first_level": 271, "fetch_megatrawls_netmat": 272, "fetch_mixed_gambl": 273, "fetch_miyawaki2008": 274, "fetch_neurovault": 275, "fetch_neurovault_auditory_computation_task": 276, "fetch_neurovault_id": 277, "fetch_neurovault_motor_task": 278, "fetch_oasis_vbm": 279, "fetch_openneuro_dataset": 280, "fetch_spm_auditori": 281, "fetch_spm_multimodal_fmri": 282, "fetch_surf_fsaverag": 283, "fetch_surf_nki_enhanc": 284, "fetcher": [23, 173], "few": [101, 165], "fiac": [204, 472], "field": 42, "figur": [105, 481], "file": [2, 4, 16, 30, 58, 73, 184, 486], "filemesh": 463, "fill": [15, 486], "filter": [118, 186], "final": 165, "find": [95, 170, 181], "find_cut_slic": 415, "find_parcellation_cut_coord": 416, "find_probabilistic_atlas_cut_coord": 417, "find_xyz_cut_coord": 418, "finit": 66, "fir": 66, "first": [3, 4, 16, 43, 62, 63, 64, 67, 69, 99, 101, 102, 110, 113, 165, 174, 181, 186, 204, 216, 472], "first_level": [320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 474], "first_level_from_bid": 323, "firstlevelmodel": [34, 64, 102, 320], "fisher": 57, "fit": [30, 32, 34, 35, 41, 45, 64, 70, 72, 102, 164, 174, 178], "fix": [72, 122, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 177], "fixtur": 173, "flexibl": 58, "fmri": [3, 6, 36, 50, 51, 53, 60, 66, 69, 72, 77, 80, 81, 99, 100, 106, 159, 160, 165, 175, 176, 201], "fmrib": 177, "fmriprep": [58, 361, 362, 477], "format": [7, 184], "formula": 103, "frem": [32, 41, 167], "fremclassifi": 300, "fremregressor": 301, "from": [2, 3, 12, 16, 17, 23, 25, 27, 29, 34, 41, 42, 43, 50, 51, 52, 58, 60, 64, 90, 92, 95, 99, 101, 103, 107, 108, 113, 117, 118, 160, 169, 184, 185, 186, 477, 478], "fsaverag": 205, "fsaverage3": 206, "fsaverage4": 207, "fsaverage5": 208, "fsaverage6": 209, "fsl": [177, 363, 477], "full": [159, 160, 165], "function": [17, 20, 24, 43, 46, 48, 49, 52, 53, 56, 68, 100, 101, 113, 159, 160, 161, 163, 164, 168, 170, 173, 185, 187, 188, 474, 475, 477, 479, 480, 481, 482, 483, 484, 485, 486], "fund": 0, "further": [7, 46, 99, 117, 168, 170], "gambl": [41, 167, 217], "gap": 172, "gener": [16, 17, 34, 46, 63, 64, 72, 73, 76, 78, 105, 115, 188, 474], "get": [25, 57, 70, 105, 173], "get_bids_fil": 358, "get_clusters_t": 458, "get_data": 343, "get_data_dir": 285, "get_design_from_fslmat": 363, "get_projector": 413, "get_slic": 414, "github": 182, "given": [16, 185], "glass": [14, 15, 17], "glassbrainax": 388, "glm": [6, 34, 62, 72, 75, 113, 175, 176, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 472, 474], "glob": [4, 184], "global": [12, 58], "glossari": 179, "glover_dispersion_deriv": 324, "glover_hrf": 325, "glover_time_deriv": 326, "go": [46, 99, 109, 117, 168], "goe": 173, "good": 165, "graph": [54, 56, 60, 160], "grid": 172, "group": [20, 50, 53, 55, 100, 110, 159, 172], "group_sparse_covari": 236, "groupsparsecovari": 233, "groupsparsecovariancecv": 234, "guid": 489, "guidelin": 173, "handl": 2, "harvard": [11, 211], "haxbi": [3, 19, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 99, 104, 165, 167, 212], "hcp": 192, "header": 103, "help": [173, 181], "hemispher": [14, 15], "hemodynam": 67, "here": [17, 43], "hierarch": 51, "hierarchicalkmean": 446, "high_variance_confound": [344, 462], "higher": [10, 67], "highlight": [123, 124, 126, 127, 128, 129, 130, 138, 139, 140, 143, 146, 149, 150, 151, 152, 153, 155, 158], "hour": 487, "hous": [30, 31, 32, 37, 38, 104], "how": [16, 173, 182, 186], "hrf": 174, "html": [64, 173], "htmlreport": 457, "human": 27, "hyperparamet": 40, "i": [3, 7, 53, 100, 175, 181, 184, 186], "ica": [50, 105, 164], "icbm": 213, "idea": 173, "illustr": 25, "imag": [3, 4, 7, 9, 10, 17, 18, 29, 69, 82, 84, 86, 91, 94, 96, 98, 103, 105, 109, 111, 113, 117, 118, 169, 184, 185, 186, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 475, 478, 486], "img_to_signals_label": 452, "img_to_signals_map": 453, "impact": [10, 58], "implement": 3, "import": [70, 487], "improv": 95, "impul": 66, "increas": 167, "independ": 106, "index_img": 345, "individu": 185, "infer": 44, "inflat": 23, "inform": 170, "initi": [72, 172], "inmemorymesh": 464, "input": [103, 184], "inspect": [3, 6], "instal": [173, 487], "instanti": 34, "integr": 173, "interact": [17, 159, 160, 481, 486], "interest": [10, 95], "interfac": [58, 358, 359, 360, 361, 362, 363, 477], "internet": [2, 184], "interpret": 164, "intersect_mask": 382, "intro": 6, "introduct": [3, 165, 175, 181], "invers": [54, 55, 159, 186], "inverse_transform": 117, "issu": [144, 158, 182], "iter": [49, 172], "iter_img": 346, "its": 25, "itself": 43, "jimura": 41, "juelich": [11, 214], "kfold": 3, "kind": [53, 100], "kmean": 51, "known": [144, 158], "l1": 41, "label": [3, 12, 40, 58, 87, 182, 473], "languag": [197, 215], "largest": 70, "largest_connected_component_img": 347, "latest": 487, "lean": 99, "learn": [0, 36, 40, 50, 51, 52, 99, 111, 117, 163, 164, 168, 181, 186], "leav": 3, "left": 15, "let": 43, "level": [3, 62, 63, 64, 67, 69, 75, 77, 78, 79, 80, 81, 82, 99, 102, 110, 113, 159, 165, 168, 174, 178, 204, 216, 472], "librari": 177, "licens": [191, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231], "like": [109, 184], "likelihoodmodelresult": 310, "limit": 16, "linear": [166, 474], "link": [159, 487], "load": [3, 7, 14, 15, 19, 23, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 49, 50, 53, 58, 76, 95, 99, 100, 104, 117, 162, 165, 184, 186, 477], "load_confound": 361, "load_confounds_strategi": 362, "load_fsaverag": 286, "load_fsaverage_data": 287, "load_img": 348, "load_mni152_brain_mask": 288, "load_mni152_gm_mask": 289, "load_mni152_gm_templ": 290, "load_mni152_templ": 291, "load_mni152_wm_mask": 292, "load_mni152_wm_templ": 293, "load_nki": 294, "load_sample_motor_activation_imag": 295, "load_surf_data": 469, "load_surf_mesh": 470, "local": [18, 73, 107, 108, 197, 198, 215, 216], "locat": 25, "look": 4, "loop": [2, 3], "lprojector": 389, "lrprojector": 390, "lsa": 101, "lss": 101, "lyrprojector": 391, "lyrzprojector": 392, "lzrprojector": 393, "lzryprojector": 394, "machin": [3, 117, 181], "made": 165, "mainten": [173, 182], "make": [10, 17, 33, 173, 182], "make_first_level_design_matrix": 327, "make_glm_report": 459, "make_second_level_design_matrix": 334, "manipul": [4, 84, 113, 183, 185, 485], "manual": [3, 95, 116, 182, 185], "map": [6, 10, 13, 17, 18, 22, 31, 42, 44, 45, 49, 50, 57, 89, 95, 101, 105, 109, 118, 163, 165, 167, 171, 177, 178, 188, 217, 220, 222, 473, 486], "marker": [44, 486], "mask": [12, 17, 19, 26, 33, 37, 43, 67, 90, 95, 99, 104, 105, 111, 117, 165, 168, 170, 185, 186, 375, 376, 377, 378, 379, 380, 381, 382, 383, 479], "masker": [24, 111, 186, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 473, 478], "mass": [44, 480], "mass_univari": [384, 480], "massiv": [44, 104, 107, 108, 170], "match": [184, 185], "math_img": [91, 103, 349], "matplotlib": [13, 35], "matric": [27, 55, 65, 101, 163, 186, 192], "matrix": [3, 32, 36, 51, 54, 56, 58, 60, 79, 111, 159, 160, 174], "maximum": 172, "maxprob": 160, "mean": [86, 175, 177], "mean_img": 350, "mean_scal": 328, "measur": [3, 49, 99, 165, 168], "megatrawl": [27, 192], "memori": 184, "mesh": [7, 10, 25, 486], "meta": 109, "method": [51, 117], "min_siz": 87, "minu": 109, "mix": [41, 167, 217], "miyawaki": [42, 43, 218], "mni": [90, 213], "mode": [21, 60, 63, 87, 88, 486], "model": [3, 42, 44, 64, 66, 67, 68, 70, 72, 76, 77, 78, 80, 81, 101, 102, 110, 164, 166, 167, 168, 174, 175, 178, 474], "modifi": [103, 172], "modul": [65, 70, 73], "more": [16, 18, 168], "morphometri": [44, 45, 76, 178, 222], "mosaicslic": 395, "most": [53, 70, 100], "motion": 58, "motor": 107, "movi": [162, 163], "mri": 68, "msdl": [21, 53, 100, 219], "multi": [36, 40, 55, 164, 166], "multimod": 229, "multiniftilabelsmask": [186, 365], "multiniftimapsmask": [186, 366], "multiniftimask": [186, 367], "multipl": [4, 10, 16, 159, 175, 178, 186], "multiscal": [20, 196], "multivari": [106, 190], "mvpa": 169, "name": 184, "nativ": 71, "negat": 91, "nest": 35, "net": 45, "network": [27, 52, 60, 63, 88, 164, 192], "neuroimag": [26, 117, 166, 181, 184, 186], "neurospin": 73, "neurosynth": 118, "neurovault": [105, 109, 118, 220], "new": [124, 125, 126, 127, 131, 133, 134, 135, 136, 143, 144, 145, 146, 149, 150, 151, 152, 153, 155, 156, 158], "new_img_lik": 351, "nifti": [3, 57, 184, 185, 473], "niftilabelsmask": [92, 186, 368], "niftimapsmask": [186, 369], "niftimask": [90, 93, 186, 370], "niftispheresmask": [186, 371], "niimg": [2, 184], "nilearn": [0, 4, 13, 14, 15, 16, 17, 22, 164, 165, 173, 180, 181, 183, 187, 188, 189, 190, 213, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 490], "nilearn_data": 184, "nki": 221, "node": 10, "nois": 67, "non": 117, "non_parametric_infer": 335, "norm": 172, "note": [191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231], "now": [16, 36, 54, 56], "number": [16, 172], "numer": [5, 172], "oasi": [44, 45, 76, 222], "object": [21, 30, 32, 35, 64, 102, 164, 173, 184, 186], "obtain": [30, 64, 102], "ol": [67, 104], "olsmodel": 311, "one": [2, 52, 64, 80, 185], "onli": [16, 52, 64, 186], "open": [184, 186], "openneuro": 64, "oper": [185, 482], "optim": 40, "option": 15, "order": 67, "organ": 182, "origin": 87, "orthoprojector": 396, "orthoslic": 397, "other": [0, 22, 168], "our": [4, 43], "out": 3, "outlin": 10, "output": [64, 76, 118, 184], "over": [4, 12, 49], "overlai": 486, "own": 117, "oxford": [11, 211], "page": [159, 160, 163, 164, 174, 177, 178], "pair": 81, "panda": 184, "paradigm": [6, 79, 109], "paramet": [10, 35, 63, 65, 67, 68, 69, 87, 99, 101, 159, 166, 168, 186], "parametr": [65, 73, 177], "parcel": [20, 23, 49, 51, 58, 160, 162, 163, 447], "parse_bids_filenam": 359, "partial": [53, 60], "patch_openneuro_dataset": 296, "path": 184, "pattern": [12, 46], "pauli": 223, "pcp": 191, "percentil": 35, "perform": [6, 57, 63, 69, 82, 99, 104, 165, 167, 168], "permut": [99, 104], "permuted_ol": 384, "phenotyp": 184, "philosophi": 186, "pial": 23, "pipelin": [30, 34, 35, 40, 111, 116, 117, 167, 168, 186], "plot": [3, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 25, 32, 33, 35, 36, 46, 49, 52, 57, 60, 67, 68, 70, 81, 109, 111, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 481, 486], "plot_anat": [17, 419], "plot_carpet": 420, "plot_connectom": 421, "plot_contrast_matrix": 422, "plot_design_matrix": 423, "plot_design_matrix_correl": 424, "plot_epi": [17, 425], "plot_ev": 426, "plot_glass_brain": [17, 427], "plot_img": 428, "plot_img_comparison": 429, "plot_img_on_surf": 430, "plot_mark": 431, "plot_matrix": 432, "plot_prob_atla": [21, 433], "plot_roi": [17, 434], "plot_stat_map": [17, 21, 435], "plot_surf": 436, "plot_surf_contour": 437, "plot_surf_roi": 438, "plot_surf_stat_map": [439, 486], "plotlysurfacefigur": 398, "point": [25, 186], "polici": 182, "polydata": 465, "polymesh": 466, "posit": 77, "post": 182, "power": [53, 100, 224], "pr": 173, "pre": 173, "prec_to_parti": 237, "precis": 55, "predefin": 58, "predict": [3, 29, 30, 35, 36, 43, 44, 45, 70, 99, 100, 113, 165, 166, 169, 174], "prepar": [33, 36, 37, 43, 63, 69, 82, 101, 165, 170, 182, 185, 186], "preprocess": [40, 44, 117, 188, 196, 484], "primer": 175, "principl": [170, 172], "prior": 45, "privat": 173, "probabilist": [21, 22, 49, 56, 160, 188], "process": 475, "produc": 57, "project": [15, 27, 69, 173, 182], "projector": 481, "proper": 34, "proport": 77, "protocol": 109, "provid": [16, 17], "pull": [173, 182], "purpos": [16, 17], "put": 165, "pypi": 182, "python": [5, 184], "qualiti": [44, 45, 95], "quantifi": 43, "question": 173, "quick": 102, "quickstart": 487, "r": 70, "radiu": 170, "rang": 72, "raw": 90, "rc": [143, 158], "read": [7, 170, 184], "recept": 42, "recognit": [32, 37, 46, 104], "recommend": 173, "reconstruct": 43, "recursive_neighbor_agglomer": 454, "reduct": 165, "refer": [3, 23, 24, 32, 33, 38, 39, 42, 43, 46, 49, 50, 51, 53, 58, 60, 71, 72, 73, 77, 99, 100, 101, 104, 118, 159, 160, 162, 163, 164, 165, 166, 167, 170, 171, 172, 179, 181, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 476], "region": [10, 52, 53, 55, 56, 63, 87, 88, 89, 92, 95, 160, 162, 163, 186, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 482], "regionextractor": 449, "regress": 166, "regressionresult": 312, "regressor": 65, "regular": 167, "relabel": 87, "relat": [164, 171], "releas": [182, 487], "remov": [58, 67, 186], "rena": [51, 448], "reorder_img": 352, "report": [34, 60, 63, 64, 72, 76, 173, 457, 458, 459, 472, 473, 483], "repositori": 118, "represent": [51, 162, 184], "request": [173, 182], "resampl": [85, 90, 94, 185, 186, 475], "resample_img": 353, "resample_to_img": 354, "reshap": 105, "residu": [70, 174], "resiz": 186, "resolut": [10, 185, 186], "respons": [35, 38, 66, 67, 68], "rest": [159, 160, 161], "restart": 172, "restrict": [3, 37, 38, 104], "result": [4, 24, 30, 33, 40, 52, 55, 81, 82, 117, 162, 163, 164, 165], "retriev": [3, 6, 11, 16, 17, 18, 20, 24, 30, 54, 56, 58, 60, 67, 99], "review": 173, "right": [15, 16, 101, 166], "robust": 167, "roi": [17, 24, 33, 53, 95, 185], "row": 16, "rprojector": 399, "run": [6, 34, 43, 46, 67, 71, 72, 105, 168, 175], "run_glm": 329, "sagitt": [14, 16], "sampl": [10, 25, 68, 80, 81], "saniti": 102, "save": [4, 7, 16, 57, 64, 76, 486], "save_glm_to_bid": 360, "scale": [116, 486], "schaefer": 225, "scheme": 25, "scikit": [0, 36, 40, 99, 111, 117, 168, 186], "scipi": 284, "scope": 173, "score": [3, 6, 30, 35, 36, 37, 42, 170], "screen": 35, "script": 165, "scrub": 58, "search": 172, "searchlight": [37, 38, 170, 302], "second": [75, 77, 78, 79, 80, 81, 82, 102, 110, 113, 178, 472], "second_level": [333, 334, 335, 474], "secondlevelmodel": 333, "see": [205, 206, 207, 208, 209, 210, 213], "seed": [16, 24, 57, 60, 63, 173, 186], "seitzman": 226, "select": [2, 40, 99, 118, 159, 165], "select_from_index": 297, "separ": [12, 87], "seri": [24, 26, 54, 56, 57, 60, 70, 90, 101, 160, 174, 186, 484], "set": [23, 35, 72, 166, 168, 170, 173], "sever": 166, "shape": [184, 185], "short": 111, "show": [16, 39, 101, 440], "side": 16, "signal": [34, 53, 55, 56, 58, 60, 92, 160, 186, 460, 461, 462, 478, 484], "signals_to_img_label": 455, "signals_to_img_map": 456, "signific": [6, 70], "simpl": [4, 33, 46, 64, 72, 79, 82, 93, 165], "simpleregressionresult": 313, "simul": [46, 59, 159, 168], "singl": [6, 16, 57, 71], "size": 185, "slice": [16, 46, 486], "slicer": 481, "smith": [88, 227], "smooth": [4, 67, 96, 185, 186], "smooth_img": 355, "softwar": 177, "some": 82, "space": [45, 71, 159], "spacenet": [41, 45, 171], "spacenetclassifi": 303, "spacenetregressor": 304, "spars": [54, 55, 159, 172], "spatial": [50, 167, 171, 185], "special": 185, "specif": [52, 72, 118, 185], "specifi": 6, "sphere": [60, 170, 473], "spm": [170, 177, 228, 229], "spm_dispersion_deriv": 330, "spm_hrf": 331, "spm_time_deriv": 332, "squar": 70, "stabil": 172, "stabl": [182, 196], "standard": 101, "state": 161, "statist": [6, 10, 17, 64, 82, 89, 95, 98, 109, 113, 118, 175, 177, 178, 188, 217, 220, 486], "step": [4, 181, 186], "stimuli": [39, 42, 43], "stimulu": 68, "stop": [109, 172], "store": 184, "strategi": [36, 58, 165, 186], "strength": 60, "structur": [34, 59, 171, 173], "studi": [3, 53, 99, 105, 109, 167], "style": 173, "subject": [6, 53, 55, 57, 64, 71, 80, 110, 159, 164, 186], "success": 109, "summar": 33, "summari": [60, 131, 158, 159, 160, 163, 164, 174, 177, 178], "support": 3, "surfac": [7, 10, 23, 24, 25, 38, 69, 110, 111, 129, 158, 174, 221, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 485, 486], "surfaceimag": 467, "surfacelabelsmask": [111, 372], "surfacemapsmask": 373, "surfacemask": 374, "surfacemesh": 468, "svc": 99, "svm": [3, 30, 99, 165, 168], "swap_img_hemispher": 356, "sym_matrix_to_vec": 238, "synthet": 172, "t": [82, 89], "t_map": 80, "tabl": 489, "talairach": 230, "tangent": 159, "target": 185, "task": [73, 101, 107, 108], "tcontrastresult": 314, "team": 0, "technic": [25, 192, 272], "templat": [90, 94, 188, 205, 206, 207, 208, 209, 213], "tempor": 186, "term": [105, 192, 272], "test": [6, 70, 80, 81, 82, 95, 99, 173], "text": 184, "them": 182, "thi": 95, "those": 51, "three": [16, 101], "threshold": [6, 64, 178], "threshold_img": 357, "threshold_stats_img": 336, "through": 2, "tiledslic": 400, "time": [8, 12, 24, 26, 28, 47, 54, 56, 57, 60, 61, 63, 67, 70, 74, 83, 90, 97, 112, 114, 160, 172, 174, 181, 186, 484, 488], "tissu": 12, "togeth": 165, "tool": [16, 17], "toolbox": 177, "top": 10, "total": 159, "tox": 182, "train": [31, 40], "transform": [57, 185, 186], "trial": 101, "true": 77, "tsv": 73, "tune": 99, "turn": [3, 51], "tutori": [1, 2, 3, 113], "tv": 41, "two": [16, 71, 72, 81, 166], "type": 12, "u": 43, "understand": [40, 67, 90, 184, 186], "univari": [44, 104, 107, 108, 170, 480], "unmask": [117, 186, 383], "unpair": 81, "up": [72, 116, 170, 173], "upload": 182, "us": [3, 10, 16, 35, 36, 41, 50, 52, 53, 58, 88, 89, 92, 93, 99, 111, 118, 162, 163, 165, 168, 176, 181, 182, 184, 232, 234, 241, 243, 244, 246, 247, 248, 249, 250, 253, 254, 256, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 285, 286, 287, 288, 291, 294, 295, 297, 298, 299, 300, 301, 302, 304, 305, 306, 315, 317, 320, 322, 323, 327, 333, 334, 335, 336, 338, 339, 340, 343, 344, 345, 346, 348, 349, 350, 351, 353, 354, 355, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 378, 383, 384, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 447, 449, 450, 451, 457, 458, 459, 463, 464, 465, 466, 467, 468, 471, 486], "usag": [116, 186, 222, 279], "user": [184, 489], "util": [475, 479], "v": [30, 31, 32, 37, 104], "valid": [3, 30, 35, 36, 40, 99, 163, 165, 168, 170, 172], "valu": [35, 172], "variabl": 53, "variat": 172, "variou": 16, "vbm": [44, 45, 76], "vec_to_sym_matrix": 239, "vector": 3, "version": 487, "via": [30, 40], "view": [10, 16, 23, 24], "view_connectom": 441, "view_img": [17, 442], "view_img_on_surf": [443, 486], "view_mark": 444, "view_surf": [445, 486], "visual": [2, 3, 9, 10, 11, 12, 16, 17, 20, 21, 22, 23, 26, 27, 30, 31, 32, 37, 38, 41, 42, 43, 44, 45, 51, 54, 56, 60, 82, 85, 99, 104, 109, 110, 113, 117, 162, 163, 164, 165, 170, 186, 486], "vol_to_surf": [25, 471], "volum": [2, 3, 4, 10, 25, 26, 67, 84, 113, 183, 185, 186, 222, 472], "voxel": [6, 44, 45, 57, 76, 95, 170, 178, 185], "wai": 16, "ward": 51, "warm": 172, "watch": [162, 163], "we": [16, 33, 36, 43, 173, 175], "web": [10, 23, 54, 56, 60], "weight": [3, 32, 41, 99, 165], "what": [3, 7, 53, 100, 158, 173, 175, 181], "when": [18, 184], "where": 184, "which": [25, 162], "who": 173, "whole": 14, "within": 60, "without": [16, 58, 99, 165, 168], "work": 7, "would": 25, "xprojector": 401, "xslicer": 402, "xzprojector": 403, "xzslicer": 404, "yeo": [49, 87, 231], "your": [101, 117, 173], "yprojector": 405, "yslicer": 406, "yxprojector": 407, "yxslicer": 408, "yzprojector": 409, "yzslicer": 410, "z": [6, 57, 109], "zprojector": 411, "zslicer": 412}})