
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/04_glm_first_level/plot_spm_multimodal_faces.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_04_glm_first_level_plot_spm_multimodal_faces.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_04_glm_first_level_plot_spm_multimodal_faces.py:


Single-subject data (two runs) in native space
==============================================

The example shows the analysis of an :term:`SPM` dataset,
with two conditions: viewing a face image or a scrambled face image.

This example takes a lot of time because the input are lists of 3D images
sampled in different positions (encoded by different affine functions).

.. seealso::

    For more information
    see the :ref:`dataset description <spm_multimodal_dataset>`.

.. GENERATED FROM PYTHON SOURCE LINES 18-21

Fetch and inspect the data
--------------------------
Fetch the :term:`SPM` multimodal_faces data.

.. GENERATED FROM PYTHON SOURCE LINES 21-25

.. code-block:: Python

    from nilearn.datasets import fetch_spm_multimodal_fmri

    subject_data = fetch_spm_multimodal_fmri()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [fetch_spm_multimodal_fmri] Dataset created in 
    /home/runner/nilearn_data/spm_multimodal_fmri
    [fetch_spm_multimodal_fmri] Missing 390 functional scans for session 1.
    [fetch_spm_multimodal_fmri] Data absent, downloading...
    [fetch_spm_multimodal_fmri] Downloading data from 
    https://www.fil.ion.ucl.ac.uk/spm/download/data/mmfaces/multimodal_fmri.zip ...
    [fetch_spm_multimodal_fmri] Downloaded 1490944 of 134263085 bytes (1.1%%,  
    1.5min remaining)
    [fetch_spm_multimodal_fmri] Downloaded 3579904 of 134263085 bytes (2.7%%,  
    1.2min remaining)
    [fetch_spm_multimodal_fmri] Downloaded 5799936 of 134263085 bytes (4.3%%,  
    1.1min remaining)
    [fetch_spm_multimodal_fmri] Downloaded 8069120 of 134263085 bytes (6.0%%,  
    1.0min remaining)
    [fetch_spm_multimodal_fmri] Downloaded 10321920 of 134263085 bytes (7.7%%,  
    1.0min remaining)
    [fetch_spm_multimodal_fmri] Downloaded 12648448 of 134263085 bytes (9.4%%,   
    58.0s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 15073280 of 134263085 bytes (11.2%%,   
    55.6s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 17104896 of 134263085 bytes (12.7%%,   
    55.1s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 18882560 of 134263085 bytes (14.1%%,   
    55.4s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 20570112 of 134263085 bytes (15.3%%,   
    55.7s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 22405120 of 134263085 bytes (16.7%%,   
    55.3s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 23945216 of 134263085 bytes (17.8%%,   
    55.6s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 25477120 of 134263085 bytes (19.0%%,   
    55.8s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 27254784 of 134263085 bytes (20.3%%,   
    55.4s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 29032448 of 134263085 bytes (21.6%%,   
    54.7s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 30875648 of 134263085 bytes (23.0%%,   
    53.9s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 32743424 of 134263085 bytes (24.4%%,   
    53.1s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 34570240 of 134263085 bytes (25.7%%,   
    52.3s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 36552704 of 134263085 bytes (27.2%%,   
    51.2s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 38674432 of 134263085 bytes (28.8%%,   
    49.8s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 40706048 of 134263085 bytes (30.3%%,   
    48.6s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 42549248 of 134263085 bytes (31.7%%,   
    47.7s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 43876352 of 134263085 bytes (32.7%%,   
    47.8s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 44875776 of 134263085 bytes (33.4%%,   
    48.2s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 45858816 of 134263085 bytes (34.2%%,   
    48.6s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 46915584 of 134263085 bytes (34.9%%,   
    48.8s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 48119808 of 134263085 bytes (35.8%%,   
    48.8s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 49430528 of 134263085 bytes (36.8%%,   
    48.6s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 50839552 of 134263085 bytes (37.9%%,   
    48.1s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 52355072 of 134263085 bytes (39.0%%,   
    47.5s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 54001664 of 134263085 bytes (40.2%%,   
    46.7s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 56107008 of 134263085 bytes (41.8%%,   
    45.2s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 58925056 of 134263085 bytes (43.9%%,   
    42.8s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 62726144 of 134263085 bytes (46.7%%,   
    39.4s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 65282048 of 134263085 bytes (48.6%%,   
    37.5s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 66428928 of 134263085 bytes (49.5%%,   
    37.3s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 67485696 of 134263085 bytes (50.3%%,   
    37.2s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 68583424 of 134263085 bytes (51.1%%,   
    37.0s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 69746688 of 134263085 bytes (51.9%%,   
    36.7s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 71008256 of 134263085 bytes (52.9%%,   
    36.2s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 72376320 of 134263085 bytes (53.9%%,   
    35.7s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 73842688 of 134263085 bytes (55.0%%,   
    34.9s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 75341824 of 134263085 bytes (56.1%%,   
    34.2s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 77021184 of 134263085 bytes (57.4%%,   
    33.3s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 79159296 of 134263085 bytes (59.0%%,   
    31.9s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 81174528 of 134263085 bytes (60.5%%,   
    30.6s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 83410944 of 134263085 bytes (62.1%%,   
    29.2s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 85852160 of 134263085 bytes (63.9%%,   
    27.6s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 88383488 of 134263085 bytes (65.8%%,   
    25.9s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 90939392 of 134263085 bytes (67.7%%,   
    24.3s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 93495296 of 134263085 bytes (69.6%%,   
    22.7s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 96059392 of 134263085 bytes (71.5%%,   
    21.1s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 98713600 of 134263085 bytes (73.5%%,   
    19.5s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 101556224 of 134263085 bytes (75.6%%,   
    17.8s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 104235008 of 134263085 bytes (77.6%%,   
    16.2s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 106848256 of 134263085 bytes (79.6%%,   
    14.7s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 109772800 of 134263085 bytes (81.8%%,   
    13.0s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 112885760 of 134263085 bytes (84.1%%,   
    11.2s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 116047872 of 134263085 bytes (86.4%%,    
    9.5s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 119218176 of 134263085 bytes (88.8%%,    
    7.7s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 121864192 of 134263085 bytes (90.8%%,    
    6.3s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 124411904 of 134263085 bytes (92.7%%,    
    5.0s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 127262720 of 134263085 bytes (94.8%%,    
    3.5s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 130236416 of 134263085 bytes (97.0%%,    
    2.0s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 133111808 of 134263085 bytes (99.1%%,    
    0.6s remaining)
    [fetch_spm_multimodal_fmri]  ...done. (68 seconds, 1 min)

    [fetch_spm_multimodal_fmri] Extracting data from 
    /home/runner/nilearn_data/spm_multimodal_fmri/sub001/multimodal_fmri.zip...
    [fetch_spm_multimodal_fmri] .. done.

    [fetch_spm_multimodal_fmri] Downloading data from 
    https://www.fil.ion.ucl.ac.uk/spm/download/data/mmfaces/multimodal_smri.zip ...
    [fetch_spm_multimodal_fmri] Downloaded 1712128 of 6852766 bytes (25.0%%,    3.0s
    remaining)
    [fetch_spm_multimodal_fmri] Downloaded 3309568 of 6852766 bytes (48.3%%,    2.1s
    remaining)
    [fetch_spm_multimodal_fmri] Downloaded 5136384 of 6852766 bytes (75.0%%,    1.0s
    remaining)
    [fetch_spm_multimodal_fmri]  ...done. (4 seconds, 0 min)

    [fetch_spm_multimodal_fmri] Extracting data from 
    /home/runner/nilearn_data/spm_multimodal_fmri/sub001/multimodal_smri.zip...
    [fetch_spm_multimodal_fmri] .. done.





.. GENERATED FROM PYTHON SOURCE LINES 26-27

Let's inspect one of the event files before using them.

.. GENERATED FROM PYTHON SOURCE LINES 27-34

.. code-block:: Python

    import pandas as pd

    events = [subject_data.events1, subject_data.events2]

    events_dataframe = pd.read_csv(events[0], sep="\t")
    events_dataframe["trial_type"].value_counts()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    trial_type
    scrambled    86
    faces        64
    Name: count, dtype: int64



.. GENERATED FROM PYTHON SOURCE LINES 35-37

We can confirm there are only 2 conditions in the dataset.


.. GENERATED FROM PYTHON SOURCE LINES 37-43

.. code-block:: Python

    from nilearn.plotting import plot_event, show

    plot_event(events)

    show()




.. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_001.png
   :alt: plot spm multimodal faces
   :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 44-46

Resample the images:
this is achieved by the ``concat_imgs`` function of Nilearn.

.. GENERATED FROM PYTHON SOURCE LINES 46-61

.. code-block:: Python

    import warnings

    from nilearn.image import concat_imgs, mean_img, resample_img

    # Avoid getting too many warnings due to resampling
    with warnings.catch_warnings():
        warnings.simplefilter("ignore")
        fmri_img = [
            concat_imgs(subject_data.func1, auto_resample=True),
            concat_imgs(subject_data.func2, auto_resample=True),
        ]
    affine, shape = fmri_img[0].affine, fmri_img[0].shape
    print("Resampling the second image (this takes time)...")
    fmri_img[1] = resample_img(fmri_img[1], affine, shape[:3])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Resampling the second image (this takes time)...




.. GENERATED FROM PYTHON SOURCE LINES 62-63

Let's create mean image for display purposes.

.. GENERATED FROM PYTHON SOURCE LINES 63-65

.. code-block:: Python

    mean_image = mean_img(fmri_img)








.. GENERATED FROM PYTHON SOURCE LINES 66-70

Fit the model
-------------
Fit the :term:`GLM` for the 2 runs
by specifying a FirstLevelModel and then fitting it.

.. GENERATED FROM PYTHON SOURCE LINES 70-94

.. code-block:: Python


    # Sample at the beginning of each acquisition.
    slice_time_ref = 0.0
    # We use a discrete cosine transform to model signal drifts.
    drift_model = "cosine"
    # The cutoff for the drift model is 0.01 Hz.
    high_pass = 0.01
    # The hemodynamic response function
    hrf_model = "spm + derivative"

    from nilearn.glm.first_level import FirstLevelModel

    print("Fitting a GLM")
    fmri_glm = FirstLevelModel(
        smoothing_fwhm=None,
        t_r=subject_data.t_r,
        hrf_model=hrf_model,
        drift_model=drift_model,
        high_pass=high_pass,
    )


    fmri_glm = fmri_glm.fit(fmri_img, events=events)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Fitting a GLM




.. GENERATED FROM PYTHON SOURCE LINES 95-99

View the results
----------------
Now we can compute contrast-related statistical maps (in z-scale),
and plot them.

.. GENERATED FROM PYTHON SOURCE LINES 99-103

.. code-block:: Python

    from nilearn.plotting import plot_stat_map

    print("Computing contrasts")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computing contrasts




.. GENERATED FROM PYTHON SOURCE LINES 104-109

We actually want more interesting contrasts.
The simplest contrast just makes the difference
between the two main conditions.
We define the two opposite versions to run one-tailed t-tests.


.. GENERATED FROM PYTHON SOURCE LINES 109-112

.. code-block:: Python


    contrasts = ["faces - scrambled", "scrambled - faces"]








.. GENERATED FROM PYTHON SOURCE LINES 113-119

Let's store common parameters for all plots.

We plot the contrasts values overlaid on the mean fMRI image
and we will use the z-score values as transparency,
with any voxel with | Z-score | > 3 being fully opaque
and any voxel with 0 < | Z-score | < 1.96 being partly transparent.

.. GENERATED FROM PYTHON SOURCE LINES 119-142

.. code-block:: Python

    plot_param = {
        "vmin": 0,
        "display_mode": "z",
        "cut_coords": 3,
        "black_bg": True,
        "bg_img": mean_image,
        "cmap": "inferno",
        "transparency_range": [0, 3],
    }

    # Iterate on contrasts to compute and plot them.
    for contrast_id in contrasts:
        print(f"\tcontrast id: {contrast_id}")

        results = fmri_glm.compute_contrast(contrast_id, output_type="all")

        plot_stat_map(
            results["stat"],
            title=contrast_id,
            transparency=results["z_score"],
            **plot_param,
        )




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_002.png
         :alt: plot spm multimodal faces
         :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_003.png
         :alt: plot spm multimodal faces
         :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

            contrast id: faces - scrambled
    /home/runner/work/nilearn/nilearn/examples/04_glm_first_level/plot_spm_multimodal_faces.py:133: RuntimeWarning: The same contrast will be used for all 2 runs. If the design matrices are not the same for all runs, (for example with different column names or column order across runs) you should pass contrast as an expression using the name of the conditions as they appear in the design matrices.
      results = fmri_glm.compute_contrast(contrast_id, output_type="all")
            contrast id: scrambled - faces
    /home/runner/work/nilearn/nilearn/examples/04_glm_first_level/plot_spm_multimodal_faces.py:133: RuntimeWarning: The same contrast will be used for all 2 runs. If the design matrices are not the same for all runs, (for example with different column names or column order across runs) you should pass contrast as an expression using the name of the conditions as they appear in the design matrices.
      results = fmri_glm.compute_contrast(contrast_id, output_type="all")




.. GENERATED FROM PYTHON SOURCE LINES 143-146

We also define the effects of interest contrast,
a 2-dimensional contrasts spanning the two conditions.


.. GENERATED FROM PYTHON SOURCE LINES 146-161

.. code-block:: Python

    import numpy as np

    contrasts = np.eye(2)

    results = fmri_glm.compute_contrast(contrasts, output_type="all")

    plot_stat_map(
        results["stat"],
        title="effects of interest",
        transparency=results["z_score"],
        **plot_param,
    )

    show()




.. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_004.png
   :alt: plot spm multimodal faces
   :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/nilearn/nilearn/examples/04_glm_first_level/plot_spm_multimodal_faces.py:150: RuntimeWarning: The same contrast will be used for all 2 runs. If the design matrices are not the same for all runs, (for example with different column names or column order across runs) you should pass contrast as an expression using the name of the conditions as they appear in the design matrices.
      results = fmri_glm.compute_contrast(contrasts, output_type="all")
    /home/runner/work/nilearn/nilearn/examples/04_glm_first_level/plot_spm_multimodal_faces.py:150: UserWarning: F contrasts should have 20 columns, but it has only 2. The rest of the contrast was padded with zeros.
      results = fmri_glm.compute_contrast(contrasts, output_type="all")
    /home/runner/work/nilearn/nilearn/examples/04_glm_first_level/plot_spm_multimodal_faces.py:150: UserWarning: Running approximate fixed effects on F statistics.
      results = fmri_glm.compute_contrast(contrasts, output_type="all")




.. GENERATED FROM PYTHON SOURCE LINES 162-171

Based on the resulting maps we observe
that the analysis results in wide activity
for the 'effects of interest' contrast,
showing the implications of large portions of the visual cortex
in the conditions.
By contrast,
the differential effect between "faces" and "scrambled" involves sparser,
more anterior and lateral regions.
It also displays some responses in the frontal lobe.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (2 minutes 57.512 seconds)

**Estimated memory usage:**  967 MB


.. _sphx_glr_download_auto_examples_04_glm_first_level_plot_spm_multimodal_faces.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/04_glm_first_level/plot_spm_multimodal_faces.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_spm_multimodal_faces.ipynb <plot_spm_multimodal_faces.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_spm_multimodal_faces.py <plot_spm_multimodal_faces.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_spm_multimodal_faces.zip <plot_spm_multimodal_faces.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
