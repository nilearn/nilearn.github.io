
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/04_glm_first_level/plot_spm_multimodal_faces.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_04_glm_first_level_plot_spm_multimodal_faces.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_04_glm_first_level_plot_spm_multimodal_faces.py:


Single-subject data (two runs) in native space
==============================================

The example shows the analysis of an :term:`SPM` dataset,
with two conditions: viewing a face image or a scrambled face image.

This example takes a lot of time because the input are lists of 3D images
sampled in different positions (encoded by different affine functions).

.. seealso::

    For more information
    see the :ref:`dataset description <spm_multimodal_dataset>`.

.. GENERATED FROM PYTHON SOURCE LINES 18-21

Fetch and inspect the data
--------------------------
Fetch the :term:`SPM` multimodal_faces data.

.. GENERATED FROM PYTHON SOURCE LINES 21-25

.. code-block:: Python

    from nilearn.datasets import fetch_spm_multimodal_fmri

    subject_data = fetch_spm_multimodal_fmri()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [wrapper] Dataset created in /home/runner/nilearn_data/spm_multimodal_fmri
    [wrapper] Missing 390 functional scans for session 1.
    [wrapper] Data absent, downloading...
    [wrapper] Downloading data from 
    https://www.fil.ion.ucl.ac.uk/spm/download/data/mmfaces/multimodal_fmri.zip ...
    [wrapper] Downloaded 1499136 of 134263085 bytes (1.1%%,  1.5min remaining)
    [wrapper] Downloaded 6545408 of 134263085 bytes (4.9%%,   41.1s remaining)
    [wrapper] Downloaded 11280384 of 134263085 bytes (8.4%%,   34.5s remaining)
    [wrapper] Downloaded 16269312 of 134263085 bytes (12.1%%,   30.6s remaining)
    [wrapper] Downloaded 20946944 of 134263085 bytes (15.6%%,   28.6s remaining)
    [wrapper] Downloaded 24780800 of 134263085 bytes (18.5%%,   27.7s remaining)
    [wrapper] Downloaded 28631040 of 134263085 bytes (21.3%%,   26.9s remaining)
    [wrapper] Downloaded 32645120 of 134263085 bytes (24.3%%,   25.9s remaining)
    [wrapper] Downloaded 36929536 of 134263085 bytes (27.5%%,   24.6s remaining)
    [wrapper] Downloaded 41107456 of 134263085 bytes (30.6%%,   23.4s remaining)
    [wrapper] Downloaded 45146112 of 134263085 bytes (33.6%%,   22.4s remaining)
    [wrapper] Downloaded 49463296 of 134263085 bytes (36.8%%,   21.2s remaining)
    [wrapper] Downloaded 53370880 of 134263085 bytes (39.8%%,   20.2s remaining)
    [wrapper] Downloaded 57761792 of 134263085 bytes (43.0%%,   19.0s remaining)
    [wrapper] Downloaded 62160896 of 134263085 bytes (46.3%%,   17.8s remaining)
    [wrapper] Downloaded 66641920 of 134263085 bytes (49.6%%,   16.6s remaining)
    [wrapper] Downloaded 71761920 of 134263085 bytes (53.4%%,   15.1s remaining)
    [wrapper] Downloaded 75784192 of 134263085 bytes (56.4%%,   14.2s remaining)
    [wrapper] Downloaded 78684160 of 134263085 bytes (58.6%%,   13.7s remaining)
    [wrapper] Downloaded 81805312 of 134263085 bytes (60.9%%,   13.1s remaining)
    [wrapper] Downloaded 84795392 of 134263085 bytes (63.2%%,   12.5s remaining)
    [wrapper] Downloaded 88064000 of 134263085 bytes (65.6%%,   11.8s remaining)
    [wrapper] Downloaded 91373568 of 134263085 bytes (68.1%%,   11.0s remaining)
    [wrapper] Downloaded 94445568 of 134263085 bytes (70.3%%,   10.3s remaining)
    [wrapper] Downloaded 97714176 of 134263085 bytes (72.8%%,    9.5s remaining)
    [wrapper] Downloaded 101072896 of 134263085 bytes (75.3%%,    8.7s remaining)
    [wrapper] Downloaded 104275968 of 134263085 bytes (77.7%%,    7.9s remaining)
    [wrapper] Downloaded 107864064 of 134263085 bytes (80.3%%,    7.0s remaining)
    [wrapper] Downloaded 111771648 of 134263085 bytes (83.2%%,    5.9s remaining)
    [wrapper] Downloaded 115777536 of 134263085 bytes (86.2%%,    4.9s remaining)
    [wrapper] Downloaded 120561664 of 134263085 bytes (89.8%%,    3.6s remaining)
    [wrapper] Downloaded 126132224 of 134263085 bytes (93.9%%,    2.1s remaining)
    [wrapper] Downloaded 131153920 of 134263085 bytes (97.7%%,    0.8s remaining)
    [wrapper]  ...done. (35 seconds, 0 min)

    [wrapper] Extracting data from 
    /home/runner/nilearn_data/spm_multimodal_fmri/sub001/multimodal_fmri.zip...
    [wrapper] .. done.

    [wrapper] Downloading data from 
    https://www.fil.ion.ucl.ac.uk/spm/download/data/mmfaces/multimodal_smri.zip ...
    [wrapper] Downloaded 1400832 of 6852766 bytes (20.4%%,    4.0s remaining)
    [wrapper] Downloaded 6479872 of 6852766 bytes (94.6%%,    0.1s remaining)
    [wrapper]  ...done. (3 seconds, 0 min)

    [wrapper] Extracting data from 
    /home/runner/nilearn_data/spm_multimodal_fmri/sub001/multimodal_smri.zip...
    [wrapper] .. done.





.. GENERATED FROM PYTHON SOURCE LINES 26-27

Let's inspect one of the event files before using them.

.. GENERATED FROM PYTHON SOURCE LINES 27-34

.. code-block:: Python

    import pandas as pd

    events = [subject_data.events1, subject_data.events2]

    events_dataframe = pd.read_csv(events[0], sep="\t")
    events_dataframe["trial_type"].value_counts()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    trial_type
    scrambled    86
    faces        64
    Name: count, dtype: int64



.. GENERATED FROM PYTHON SOURCE LINES 35-37

We can confirm there are only 2 conditions in the dataset.


.. GENERATED FROM PYTHON SOURCE LINES 37-43

.. code-block:: Python

    from nilearn.plotting import plot_event, show

    plot_event(events)

    show()




.. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_001.png
   :alt: plot spm multimodal faces
   :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 44-46

Resample the images:
this is achieved by the ``concat_imgs`` function of Nilearn.

.. GENERATED FROM PYTHON SOURCE LINES 46-63

.. code-block:: Python

    import warnings

    from nilearn.image import concat_imgs, mean_img, resample_img

    # Avoid getting too many warnings due to resampling
    with warnings.catch_warnings():
        warnings.simplefilter("ignore")
        fmri_img = [
            concat_imgs(subject_data.func1, auto_resample=True),
            concat_imgs(subject_data.func2, auto_resample=True),
        ]
    affine, shape = fmri_img[0].affine, fmri_img[0].shape
    print("Resampling the second image (this takes time)...")
    fmri_img[1] = resample_img(
        fmri_img[1], affine, shape[:3], copy_header=True, force_resample=True
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Resampling the second image (this takes time)...




.. GENERATED FROM PYTHON SOURCE LINES 64-65

Let's create mean image for display purposes.

.. GENERATED FROM PYTHON SOURCE LINES 65-67

.. code-block:: Python

    mean_image = mean_img(fmri_img, copy_header=True)








.. GENERATED FROM PYTHON SOURCE LINES 68-72

Fit the model
-------------
Fit the :term:`GLM` for the 2 runs
by specifying a FirstLevelModel and then fitting it.

.. GENERATED FROM PYTHON SOURCE LINES 72-96

.. code-block:: Python


    # Sample at the beginning of each acquisition.
    slice_time_ref = 0.0
    # We use a discrete cosine transform to model signal drifts.
    drift_model = "cosine"
    # The cutoff for the drift model is 0.01 Hz.
    high_pass = 0.01
    # The hemodynamic response function
    hrf_model = "spm + derivative"

    from nilearn.glm.first_level import FirstLevelModel

    print("Fitting a GLM")
    fmri_glm = FirstLevelModel(
        smoothing_fwhm=None,
        t_r=subject_data.t_r,
        hrf_model=hrf_model,
        drift_model=drift_model,
        high_pass=high_pass,
    )


    fmri_glm = fmri_glm.fit(fmri_img, events=events)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Fitting a GLM




.. GENERATED FROM PYTHON SOURCE LINES 97-101

View the results
----------------
Now we can compute contrast-related statistical maps (in z-scale),
and plot them.

.. GENERATED FROM PYTHON SOURCE LINES 101-105

.. code-block:: Python

    from nilearn.plotting import plot_stat_map

    print("Computing contrasts")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computing contrasts




.. GENERATED FROM PYTHON SOURCE LINES 106-111

We actually want more interesting contrasts.
The simplest contrast just makes the difference
between the two main conditions.
We define the two opposite versions to run one-tailed t-tests.


.. GENERATED FROM PYTHON SOURCE LINES 111-114

.. code-block:: Python


    contrasts = ["faces - scrambled", "scrambled - faces"]








.. GENERATED FROM PYTHON SOURCE LINES 115-121

Let's store common parameters for all plots.

We plot the contrasts values overlaid on the mean fMRI image
and we will use the z-score values as transparency,
with any voxel with | Z-score | > 3 being fully opaque
and any voxel with 0 < | Z-score | < 1.96 being partly transparent.

.. GENERATED FROM PYTHON SOURCE LINES 121-144

.. code-block:: Python

    plot_param = {
        "vmin": 0,
        "display_mode": "z",
        "cut_coords": 3,
        "black_bg": True,
        "bg_img": mean_image,
        "cmap": "inferno",
        "transparency_range": [0, 3],
    }

    # Iterate on contrasts to compute and plot them.
    for contrast_id in contrasts:
        print(f"\tcontrast id: {contrast_id}")

        results = fmri_glm.compute_contrast(contrast_id, output_type="all")

        plot_stat_map(
            results["stat"],
            title=contrast_id,
            transparency=results["z_score"],
            **plot_param,
        )




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_002.png
         :alt: plot spm multimodal faces
         :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_003.png
         :alt: plot spm multimodal faces
         :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

            contrast id: faces - scrambled
    /home/runner/work/nilearn/nilearn/examples/04_glm_first_level/plot_spm_multimodal_faces.py:135: UserWarning: One contrast given, assuming it for all 2 runs
      results = fmri_glm.compute_contrast(contrast_id, output_type="all")
            contrast id: scrambled - faces
    /home/runner/work/nilearn/nilearn/examples/04_glm_first_level/plot_spm_multimodal_faces.py:135: UserWarning: One contrast given, assuming it for all 2 runs
      results = fmri_glm.compute_contrast(contrast_id, output_type="all")




.. GENERATED FROM PYTHON SOURCE LINES 145-148

We also define the effects of interest contrast,
a 2-dimensional contrasts spanning the two conditions.


.. GENERATED FROM PYTHON SOURCE LINES 148-163

.. code-block:: Python

    import numpy as np

    contrasts = np.eye(2)

    results = fmri_glm.compute_contrast(contrasts, output_type="all")

    plot_stat_map(
        results["stat"],
        title="effects of interest",
        transparency=results["z_score"],
        **plot_param,
    )

    show()




.. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_004.png
   :alt: plot spm multimodal faces
   :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/nilearn/nilearn/examples/04_glm_first_level/plot_spm_multimodal_faces.py:152: UserWarning: One contrast given, assuming it for all 2 runs
      results = fmri_glm.compute_contrast(contrasts, output_type="all")
    /home/runner/work/nilearn/nilearn/examples/04_glm_first_level/plot_spm_multimodal_faces.py:152: UserWarning: F contrasts should have 20 columns, but it has only 2. The rest of the contrast was padded with zeros.
      results = fmri_glm.compute_contrast(contrasts, output_type="all")
    /home/runner/work/nilearn/nilearn/examples/04_glm_first_level/plot_spm_multimodal_faces.py:152: UserWarning: Running approximate fixed effects on F statistics.
      results = fmri_glm.compute_contrast(contrasts, output_type="all")




.. GENERATED FROM PYTHON SOURCE LINES 164-173

Based on the resulting maps we observe
that the analysis results in wide activity
for the 'effects of interest' contrast,
showing the implications of large portions of the visual cortex
in the conditions.
By contrast,
the differential effect between "faces" and "scrambled" involves sparser,
more anterior and lateral regions.
It also displays some responses in the frontal lobe.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (2 minutes 24.033 seconds)

**Estimated memory usage:**  975 MB


.. _sphx_glr_download_auto_examples_04_glm_first_level_plot_spm_multimodal_faces.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/04_glm_first_level/plot_spm_multimodal_faces.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_spm_multimodal_faces.ipynb <plot_spm_multimodal_faces.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_spm_multimodal_faces.py <plot_spm_multimodal_faces.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_spm_multimodal_faces.zip <plot_spm_multimodal_faces.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
