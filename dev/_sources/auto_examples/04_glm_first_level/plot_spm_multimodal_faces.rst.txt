
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/04_glm_first_level/plot_spm_multimodal_faces.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_04_glm_first_level_plot_spm_multimodal_faces.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_04_glm_first_level_plot_spm_multimodal_faces.py:


Single-subject data (two runs) in native space
==============================================

The example shows the analysis of an :term:`SPM` dataset,
with two conditions: viewing a face image or a scrambled face image.

This example takes a lot of time because the input are lists of 3D images
sampled in different positions (encoded by different affine functions).

.. seealso::

    For more information
    see the :ref:`dataset description <spm_multimodal_dataset>`.

.. GENERATED FROM PYTHON SOURCE LINES 18-21

Fetch and inspect the data
--------------------------
Fetch the :term:`SPM` multimodal_faces data.

.. GENERATED FROM PYTHON SOURCE LINES 21-25

.. code-block:: Python

    from nilearn.datasets import fetch_spm_multimodal_fmri

    subject_data = fetch_spm_multimodal_fmri()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [fetch_spm_multimodal_fmri] Dataset created in 
    /home/runner/nilearn_data/spm_multimodal_fmri
    [fetch_spm_multimodal_fmri] Missing 390 functional scans for session 1.
    [fetch_spm_multimodal_fmri] Data absent, downloading...
    [fetch_spm_multimodal_fmri] Downloading data from 
    https://www.fil.ion.ucl.ac.uk/spm/download/data/mmfaces/multimodal_fmri.zip ...
    [fetch_spm_multimodal_fmri] Downloaded 1679360 of 134263085 bytes (1.3%%,  
    1.3min remaining)
    [fetch_spm_multimodal_fmri] Downloaded 3948544 of 134263085 bytes (2.9%%,  
    1.1min remaining)
    [fetch_spm_multimodal_fmri] Downloaded 6365184 of 134263085 bytes (4.7%%,  
    1.0min remaining)
    [fetch_spm_multimodal_fmri] Downloaded 8683520 of 134263085 bytes (6.5%%,   
    58.6s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 10960896 of 134263085 bytes (8.2%%,   
    56.8s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 12607488 of 134263085 bytes (9.4%%,   
    58.4s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 14057472 of 134263085 bytes (10.5%%,  
    1.0min remaining)
    [fetch_spm_multimodal_fmri] Downloaded 15638528 of 134263085 bytes (11.6%%,  
    1.0min remaining)
    [fetch_spm_multimodal_fmri] Downloaded 17244160 of 134263085 bytes (12.8%%,  
    1.0min remaining)
    [fetch_spm_multimodal_fmri] Downloaded 18882560 of 134263085 bytes (14.1%%,  
    1.0min remaining)
    [fetch_spm_multimodal_fmri] Downloaded 20717568 of 134263085 bytes (15.4%%,  
    1.0min remaining)
    [fetch_spm_multimodal_fmri] Downloaded 22667264 of 134263085 bytes (16.9%%,   
    59.8s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 24715264 of 134263085 bytes (18.4%%,   
    58.4s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 26796032 of 134263085 bytes (20.0%%,   
    56.9s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 29220864 of 134263085 bytes (21.8%%,   
    54.6s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 31342592 of 134263085 bytes (23.3%%,   
    53.2s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 33792000 of 134263085 bytes (25.2%%,   
    51.1s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 36429824 of 134263085 bytes (27.1%%,   
    48.9s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 39141376 of 134263085 bytes (29.2%%,   
    46.6s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 41492480 of 134263085 bytes (30.9%%,   
    45.1s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 43745280 of 134263085 bytes (32.6%%,   
    43.9s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 46104576 of 134263085 bytes (34.3%%,   
    42.4s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 48037888 of 134263085 bytes (35.8%%,   
    41.6s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 50176000 of 134263085 bytes (37.4%%,   
    40.6s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 52297728 of 134263085 bytes (39.0%%,   
    39.5s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 54501376 of 134263085 bytes (40.6%%,   
    38.3s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 56705024 of 134263085 bytes (42.2%%,   
    37.2s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 58834944 of 134263085 bytes (43.8%%,   
    36.2s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 60727296 of 134263085 bytes (45.2%%,   
    35.4s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 62930944 of 134263085 bytes (46.9%%,   
    34.3s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 65249280 of 134263085 bytes (48.6%%,   
    33.0s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 67584000 of 134263085 bytes (50.3%%,   
    31.8s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 69935104 of 134263085 bytes (52.1%%,   
    30.6s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 72302592 of 134263085 bytes (53.9%%,   
    29.4s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 74735616 of 134263085 bytes (55.7%%,   
    28.1s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 77242368 of 134263085 bytes (57.5%%,   
    26.8s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 79921152 of 134263085 bytes (59.5%%,   
    25.4s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 82780160 of 134263085 bytes (61.7%%,   
    23.8s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 85434368 of 134263085 bytes (63.6%%,   
    22.5s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 88301568 of 134263085 bytes (65.8%%,   
    21.0s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 91381760 of 134263085 bytes (68.1%%,   
    19.4s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 94568448 of 134263085 bytes (70.4%%,   
    17.8s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 96673792 of 134263085 bytes (72.0%%,   
    16.8s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 98541568 of 134263085 bytes (73.4%%,   
    16.1s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 100491264 of 134263085 bytes (74.8%%,   
    15.2s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 102555648 of 134263085 bytes (76.4%%,   
    14.3s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 104538112 of 134263085 bytes (77.9%%,   
    13.5s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 106717184 of 134263085 bytes (79.5%%,   
    12.5s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 108888064 of 134263085 bytes (81.1%%,   
    11.5s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 111271936 of 134263085 bytes (82.9%%,   
    10.4s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 113664000 of 134263085 bytes (84.7%%,    
    9.3s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 116506624 of 134263085 bytes (86.8%%,    
    8.0s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 119005184 of 134263085 bytes (88.6%%,    
    6.8s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 121782272 of 134263085 bytes (90.7%%,    
    5.6s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 124674048 of 134263085 bytes (92.9%%,    
    4.3s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 127401984 of 134263085 bytes (94.9%%,    
    3.0s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 129785856 of 134263085 bytes (96.7%%,    
    2.0s remaining)
    [fetch_spm_multimodal_fmri] Downloaded 132390912 of 134263085 bytes (98.6%%,    
    0.8s remaining)
    [fetch_spm_multimodal_fmri]  ...done. (60 seconds, 1 min)

    [fetch_spm_multimodal_fmri] Extracting data from 
    /home/runner/nilearn_data/spm_multimodal_fmri/sub001/multimodal_fmri.zip...
    [fetch_spm_multimodal_fmri] .. done.

    [fetch_spm_multimodal_fmri] Downloading data from 
    https://www.fil.ion.ucl.ac.uk/spm/download/data/mmfaces/multimodal_smri.zip ...
    [fetch_spm_multimodal_fmri] Downloaded 1957888 of 6852766 bytes (28.6%%,    2.5s
    remaining)
    [fetch_spm_multimodal_fmri] Downloaded 4366336 of 6852766 bytes (63.7%%,    1.2s
    remaining)
    [fetch_spm_multimodal_fmri] Downloaded 6094848 of 6852766 bytes (88.9%%,    0.4s
    remaining)
    [fetch_spm_multimodal_fmri]  ...done. (4 seconds, 0 min)

    [fetch_spm_multimodal_fmri] Extracting data from 
    /home/runner/nilearn_data/spm_multimodal_fmri/sub001/multimodal_smri.zip...
    [fetch_spm_multimodal_fmri] .. done.





.. GENERATED FROM PYTHON SOURCE LINES 26-27

Let's inspect one of the event files before using them.

.. GENERATED FROM PYTHON SOURCE LINES 27-34

.. code-block:: Python

    import pandas as pd

    events = [subject_data.events1, subject_data.events2]

    events_dataframe = pd.read_csv(events[0], sep="\t")
    events_dataframe["trial_type"].value_counts()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    trial_type
    scrambled    86
    faces        64
    Name: count, dtype: int64



.. GENERATED FROM PYTHON SOURCE LINES 35-37

We can confirm there are only 2 conditions in the dataset.


.. GENERATED FROM PYTHON SOURCE LINES 37-43

.. code-block:: Python

    from nilearn.plotting import plot_event, show

    plot_event(events)

    show()




.. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_001.png
   :alt: plot spm multimodal faces
   :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 44-46

Resample the images:
this is achieved by the ``concat_imgs`` function of Nilearn.

.. GENERATED FROM PYTHON SOURCE LINES 46-61

.. code-block:: Python

    import warnings

    from nilearn.image import concat_imgs, mean_img, resample_img

    # Avoid getting too many warnings due to resampling
    with warnings.catch_warnings():
        warnings.simplefilter("ignore")
        fmri_img = [
            concat_imgs(subject_data.func1, auto_resample=True),
            concat_imgs(subject_data.func2, auto_resample=True),
        ]
    affine, shape = fmri_img[0].affine, fmri_img[0].shape
    print("Resampling the second image (this takes time)...")
    fmri_img[1] = resample_img(fmri_img[1], affine, shape[:3])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Resampling the second image (this takes time)...




.. GENERATED FROM PYTHON SOURCE LINES 62-63

Let's create mean image for display purposes.

.. GENERATED FROM PYTHON SOURCE LINES 63-65

.. code-block:: Python

    mean_image = mean_img(fmri_img)








.. GENERATED FROM PYTHON SOURCE LINES 66-70

Fit the model
-------------
Fit the :term:`GLM` for the 2 runs
by specifying a FirstLevelModel and then fitting it.

.. GENERATED FROM PYTHON SOURCE LINES 70-94

.. code-block:: Python


    # Sample at the beginning of each acquisition.
    slice_time_ref = 0.0
    # We use a discrete cosine transform to model signal drifts.
    drift_model = "cosine"
    # The cutoff for the drift model is 0.01 Hz.
    high_pass = 0.01
    # The hemodynamic response function
    hrf_model = "spm + derivative"

    from nilearn.glm.first_level import FirstLevelModel

    print("Fitting a GLM")
    fmri_glm = FirstLevelModel(
        smoothing_fwhm=None,
        t_r=subject_data.t_r,
        hrf_model=hrf_model,
        drift_model=drift_model,
        high_pass=high_pass,
    )


    fmri_glm = fmri_glm.fit(fmri_img, events=events)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Fitting a GLM




.. GENERATED FROM PYTHON SOURCE LINES 95-99

View the results
----------------
Now we can compute contrast-related statistical maps (in z-scale),
and plot them.

.. GENERATED FROM PYTHON SOURCE LINES 99-103

.. code-block:: Python

    from nilearn.plotting import plot_stat_map

    print("Computing contrasts")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computing contrasts




.. GENERATED FROM PYTHON SOURCE LINES 104-109

We actually want more interesting contrasts.
The simplest contrast just makes the difference
between the two main conditions.
We define the two opposite versions to run one-tailed t-tests.


.. GENERATED FROM PYTHON SOURCE LINES 109-112

.. code-block:: Python


    contrasts = ["faces - scrambled", "scrambled - faces"]








.. GENERATED FROM PYTHON SOURCE LINES 113-119

Let's store common parameters for all plots.

We plot the contrasts values overlaid on the mean fMRI image
and we will use the z-score values as transparency,
with any voxel with | Z-score | > 3 being fully opaque
and any voxel with 0 < | Z-score | < 1.96 being partly transparent.

.. GENERATED FROM PYTHON SOURCE LINES 119-142

.. code-block:: Python

    plot_param = {
        "vmin": 0,
        "display_mode": "z",
        "cut_coords": 3,
        "black_bg": True,
        "bg_img": mean_image,
        "cmap": "inferno",
        "transparency_range": [0, 3],
    }

    # Iterate on contrasts to compute and plot them.
    for contrast_id in contrasts:
        print(f"\tcontrast id: {contrast_id}")

        results = fmri_glm.compute_contrast(contrast_id, output_type="all")

        plot_stat_map(
            results["stat"],
            title=contrast_id,
            transparency=results["z_score"],
            **plot_param,
        )




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_002.png
         :alt: plot spm multimodal faces
         :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_003.png
         :alt: plot spm multimodal faces
         :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

            contrast id: faces - scrambled
    /home/runner/work/nilearn/nilearn/examples/04_glm_first_level/plot_spm_multimodal_faces.py:133: RuntimeWarning: The same contrast will be used for all 2 runs. If the design matrices are not the same for all runs, (for example with different column names or column order across runs) you should pass contrast as an expression using the name of the conditions as they appear in the design matrices.
      results = fmri_glm.compute_contrast(contrast_id, output_type="all")
            contrast id: scrambled - faces
    /home/runner/work/nilearn/nilearn/examples/04_glm_first_level/plot_spm_multimodal_faces.py:133: RuntimeWarning: The same contrast will be used for all 2 runs. If the design matrices are not the same for all runs, (for example with different column names or column order across runs) you should pass contrast as an expression using the name of the conditions as they appear in the design matrices.
      results = fmri_glm.compute_contrast(contrast_id, output_type="all")




.. GENERATED FROM PYTHON SOURCE LINES 143-146

We also define the effects of interest contrast,
a 2-dimensional contrasts spanning the two conditions.


.. GENERATED FROM PYTHON SOURCE LINES 146-161

.. code-block:: Python

    import numpy as np

    contrasts = np.eye(2)

    results = fmri_glm.compute_contrast(contrasts, output_type="all")

    plot_stat_map(
        results["stat"],
        title="effects of interest",
        transparency=results["z_score"],
        **plot_param,
    )

    show()




.. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_004.png
   :alt: plot spm multimodal faces
   :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/nilearn/nilearn/examples/04_glm_first_level/plot_spm_multimodal_faces.py:150: RuntimeWarning: The same contrast will be used for all 2 runs. If the design matrices are not the same for all runs, (for example with different column names or column order across runs) you should pass contrast as an expression using the name of the conditions as they appear in the design matrices.
      results = fmri_glm.compute_contrast(contrasts, output_type="all")
    /home/runner/work/nilearn/nilearn/examples/04_glm_first_level/plot_spm_multimodal_faces.py:150: UserWarning: F contrasts should have 20 columns, but it has only 2. The rest of the contrast was padded with zeros.
      results = fmri_glm.compute_contrast(contrasts, output_type="all")
    /home/runner/work/nilearn/nilearn/examples/04_glm_first_level/plot_spm_multimodal_faces.py:150: UserWarning: Running approximate fixed effects on F statistics.
      results = fmri_glm.compute_contrast(contrasts, output_type="all")




.. GENERATED FROM PYTHON SOURCE LINES 162-171

Based on the resulting maps we observe
that the analysis results in wide activity
for the 'effects of interest' contrast,
showing the implications of large portions of the visual cortex
in the conditions.
By contrast,
the differential effect between "faces" and "scrambled" involves sparser,
more anterior and lateral regions.
It also displays some responses in the frontal lobe.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (2 minutes 49.735 seconds)

**Estimated memory usage:**  1026 MB


.. _sphx_glr_download_auto_examples_04_glm_first_level_plot_spm_multimodal_faces.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/04_glm_first_level/plot_spm_multimodal_faces.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_spm_multimodal_faces.ipynb <plot_spm_multimodal_faces.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_spm_multimodal_faces.py <plot_spm_multimodal_faces.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_spm_multimodal_faces.zip <plot_spm_multimodal_faces.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
