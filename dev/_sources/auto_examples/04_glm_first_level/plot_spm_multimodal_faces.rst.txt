
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/04_glm_first_level/plot_spm_multimodal_faces.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_04_glm_first_level_plot_spm_multimodal_faces.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_04_glm_first_level_plot_spm_multimodal_faces.py:


Single-subject data (two runs) in native space
==============================================

The example shows the analysis of an :term:`SPM` dataset,
with two conditions: viewing a face image or a scrambled face image.

This example takes a lot of time because the input are lists of 3D images
sampled in different positions (encoded by different affine functions).

.. seealso::

    For more information
    see the :ref:`dataset description <spm_multimodal_dataset>`.

.. GENERATED FROM PYTHON SOURCE LINES 18-21

Fetch and inspect the data
--------------------------
Fetch the :term:`SPM` multimodal_faces data.

.. GENERATED FROM PYTHON SOURCE LINES 21-25

.. code-block:: Python

    from nilearn.datasets import fetch_spm_multimodal_fmri

    subject_data = fetch_spm_multimodal_fmri()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [wrapper] Dataset created in /home/runner/nilearn_data/spm_multimodal_fmri
    [wrapper] Missing 390 functional scans for session 1.
    [wrapper] Data absent, downloading...
    [wrapper] Downloading data from 
    https://www.fil.ion.ucl.ac.uk/spm/download/data/mmfaces/multimodal_fmri.zip ...
    [wrapper] Downloaded 1671168 of 134263085 bytes (1.2%%,  1.4min remaining)
    [wrapper] Downloaded 6430720 of 134263085 bytes (4.8%%,   42.5s remaining)
    [wrapper] Downloaded 8519680 of 134263085 bytes (6.3%%,   48.3s remaining)
    [wrapper] Downloaded 9216000 of 134263085 bytes (6.9%%,   58.3s remaining)
    [wrapper] Downloaded 9863168 of 134263085 bytes (7.3%%,  1.1min remaining)
    [wrapper] Downloaded 10403840 of 134263085 bytes (7.7%%,  1.3min remaining)
    [wrapper] Downloaded 10993664 of 134263085 bytes (8.2%%,  1.4min remaining)
    [wrapper] Downloaded 11583488 of 134263085 bytes (8.6%%,  1.5min remaining)
    [wrapper] Downloaded 12206080 of 134263085 bytes (9.1%%,  1.6min remaining)
    [wrapper] Downloaded 12738560 of 134263085 bytes (9.5%%,  1.7min remaining)
    [wrapper] Downloaded 13312000 of 134263085 bytes (9.9%%,  1.7min remaining)
    [wrapper] Downloaded 13770752 of 134263085 bytes (10.3%%,  1.8min remaining)
    [wrapper] Downloaded 14278656 of 134263085 bytes (10.6%%,  1.9min remaining)
    [wrapper] Downloaded 14778368 of 134263085 bytes (11.0%%,  1.9min remaining)
    [wrapper] Downloaded 15310848 of 134263085 bytes (11.4%%,  2.0min remaining)
    [wrapper] Downloaded 15867904 of 134263085 bytes (11.8%%,  2.0min remaining)
    [wrapper] Downloaded 16359424 of 134263085 bytes (12.2%%,  2.1min remaining)
    [wrapper] Downloaded 16883712 of 134263085 bytes (12.6%%,  2.1min remaining)
    [wrapper] Downloaded 17457152 of 134263085 bytes (13.0%%,  2.2min remaining)
    [wrapper] Downloaded 17940480 of 134263085 bytes (13.4%%,  2.2min remaining)
    [wrapper] Downloaded 18456576 of 134263085 bytes (13.7%%,  2.2min remaining)
    [wrapper] Downloaded 19046400 of 134263085 bytes (14.2%%,  2.3min remaining)
    [wrapper] Downloaded 19521536 of 134263085 bytes (14.5%%,  2.3min remaining)
    [wrapper] Downloaded 20062208 of 134263085 bytes (14.9%%,  2.3min remaining)
    [wrapper] Downloaded 20643840 of 134263085 bytes (15.4%%,  2.3min remaining)
    [wrapper] Downloaded 21225472 of 134263085 bytes (15.8%%,  2.4min remaining)
    [wrapper] Downloaded 21815296 of 134263085 bytes (16.2%%,  2.4min remaining)
    [wrapper] Downloaded 22413312 of 134263085 bytes (16.7%%,  2.4min remaining)
    [wrapper] Downloaded 23060480 of 134263085 bytes (17.2%%,  2.4min remaining)
    [wrapper] Downloaded 23633920 of 134263085 bytes (17.6%%,  2.4min remaining)
    [wrapper] Downloaded 24272896 of 134263085 bytes (18.1%%,  2.4min remaining)
    [wrapper] Downloaded 24846336 of 134263085 bytes (18.5%%,  2.4min remaining)
    [wrapper] Downloaded 25395200 of 134263085 bytes (18.9%%,  2.4min remaining)
    [wrapper] Downloaded 25976832 of 134263085 bytes (19.3%%,  2.4min remaining)
    [wrapper] Downloaded 26566656 of 134263085 bytes (19.8%%,  2.4min remaining)
    [wrapper] Downloaded 27172864 of 134263085 bytes (20.2%%,  2.4min remaining)
    [wrapper] Downloaded 27820032 of 134263085 bytes (20.7%%,  2.4min remaining)
    [wrapper] Downloaded 28499968 of 134263085 bytes (21.2%%,  2.4min remaining)
    [wrapper] Downloaded 29237248 of 134263085 bytes (21.8%%,  2.4min remaining)
    [wrapper] Downloaded 29843456 of 134263085 bytes (22.2%%,  2.4min remaining)
    [wrapper] Downloaded 30236672 of 134263085 bytes (22.5%%,  2.4min remaining)
    [wrapper] Downloaded 30547968 of 134263085 bytes (22.8%%,  2.4min remaining)
    [wrapper] Downloaded 30785536 of 134263085 bytes (22.9%%,  2.5min remaining)
    [wrapper] Downloaded 31047680 of 134263085 bytes (23.1%%,  2.5min remaining)
    [wrapper] Downloaded 31334400 of 134263085 bytes (23.3%%,  2.5min remaining)
    [wrapper] Downloaded 31662080 of 134263085 bytes (23.6%%,  2.5min remaining)
    [wrapper] Downloaded 32038912 of 134263085 bytes (23.9%%,  2.5min remaining)
    [wrapper] Downloaded 32448512 of 134263085 bytes (24.2%%,  2.6min remaining)
    [wrapper] Downloaded 32940032 of 134263085 bytes (24.5%%,  2.6min remaining)
    [wrapper] Downloaded 33431552 of 134263085 bytes (24.9%%,  2.6min remaining)
    [wrapper] Downloaded 34013184 of 134263085 bytes (25.3%%,  2.5min remaining)
    [wrapper] Downloaded 34578432 of 134263085 bytes (25.8%%,  2.5min remaining)
    [wrapper] Downloaded 35184640 of 134263085 bytes (26.2%%,  2.5min remaining)
    [wrapper] Downloaded 35799040 of 134263085 bytes (26.7%%,  2.5min remaining)
    [wrapper] Downloaded 36421632 of 134263085 bytes (27.1%%,  2.5min remaining)
    [wrapper] Downloaded 37158912 of 134263085 bytes (27.7%%,  2.5min remaining)
    [wrapper] Downloaded 38051840 of 134263085 bytes (28.3%%,  2.4min remaining)
    [wrapper] Downloaded 39206912 of 134263085 bytes (29.2%%,  2.4min remaining)
    [wrapper] Downloaded 40747008 of 134263085 bytes (30.3%%,  2.3min remaining)
    [wrapper] Downloaded 42090496 of 134263085 bytes (31.3%%,  2.2min remaining)
    [wrapper] Downloaded 43188224 of 134263085 bytes (32.2%%,  2.2min remaining)
    [wrapper] Downloaded 44269568 of 134263085 bytes (33.0%%,  2.1min remaining)
    [wrapper] Downloaded 45473792 of 134263085 bytes (33.9%%,  2.1min remaining)
    [wrapper] Downloaded 46653440 of 134263085 bytes (34.7%%,  2.0min remaining)
    [wrapper] Downloaded 47800320 of 134263085 bytes (35.6%%,  2.0min remaining)
    [wrapper] Downloaded 49053696 of 134263085 bytes (36.5%%,  1.9min remaining)
    [wrapper] Downloaded 50331648 of 134263085 bytes (37.5%%,  1.9min remaining)
    [wrapper] Downloaded 51716096 of 134263085 bytes (38.5%%,  1.8min remaining)
    [wrapper] Downloaded 53346304 of 134263085 bytes (39.7%%,  1.8min remaining)
    [wrapper] Downloaded 54886400 of 134263085 bytes (40.9%%,  1.7min remaining)
    [wrapper] Downloaded 55959552 of 134263085 bytes (41.7%%,  1.7min remaining)
    [wrapper] Downloaded 57040896 of 134263085 bytes (42.5%%,  1.7min remaining)
    [wrapper] Downloaded 58253312 of 134263085 bytes (43.4%%,  1.6min remaining)
    [wrapper] Downloaded 59383808 of 134263085 bytes (44.2%%,  1.6min remaining)
    [wrapper] Downloaded 60596224 of 134263085 bytes (45.1%%,  1.5min remaining)
    [wrapper] Downloaded 61734912 of 134263085 bytes (46.0%%,  1.5min remaining)
    [wrapper] Downloaded 63021056 of 134263085 bytes (46.9%%,  1.5min remaining)
    [wrapper] Downloaded 64323584 of 134263085 bytes (47.9%%,  1.4min remaining)
    [wrapper] Downloaded 65921024 of 134263085 bytes (49.1%%,  1.4min remaining)
    [wrapper] Downloaded 67690496 of 134263085 bytes (50.4%%,  1.3min remaining)
    [wrapper] Downloaded 70041600 of 134263085 bytes (52.2%%,  1.3min remaining)
    [wrapper] Downloaded 72753152 of 134263085 bytes (54.2%%,  1.2min remaining)
    [wrapper] Downloaded 76455936 of 134263085 bytes (56.9%%,  1.1min remaining)
    [wrapper] Downloaded 80764928 of 134263085 bytes (60.2%%,   56.6s remaining)
    [wrapper] Downloaded 86564864 of 134263085 bytes (64.5%%,   47.6s remaining)
    [wrapper] Downloaded 93315072 of 134263085 bytes (69.5%%,   38.4s remaining)
    [wrapper] Downloaded 99540992 of 134263085 bytes (74.1%%,   30.9s remaining)
    [wrapper] Downloaded 102735872 of 134263085 bytes (76.5%%,   27.5s remaining)
    [wrapper] Downloaded 105963520 of 134263085 bytes (78.9%%,   24.2s remaining)
    [wrapper] Downloaded 109428736 of 134263085 bytes (81.5%%,   20.8s remaining)
    [wrapper] Downloaded 112975872 of 134263085 bytes (84.1%%,   17.4s remaining)
    [wrapper] Downloaded 116662272 of 134263085 bytes (86.9%%,   14.1s remaining)
    [wrapper] Downloaded 120111104 of 134263085 bytes (89.5%%,   11.1s remaining)
    [wrapper] Downloaded 123682816 of 134263085 bytes (92.1%%,    8.2s remaining)
    [wrapper] Downloaded 127180800 of 134263085 bytes (94.7%%,    5.4s remaining)
    [wrapper] Downloaded 129114112 of 134263085 bytes (96.2%%,    3.9s remaining)
    [wrapper] Downloaded 130482176 of 134263085 bytes (97.2%%,    2.9s remaining)
    [wrapper] Downloaded 131579904 of 134263085 bytes (98.0%%,    2.0s remaining)
    [wrapper] Downloaded 132808704 of 134263085 bytes (98.9%%,    1.1s remaining)
    [wrapper] Downloaded 133890048 of 134263085 bytes (99.7%%,    0.3s remaining)
    [wrapper]  ...done. (104 seconds, 1 min)

    [wrapper] Extracting data from 
    /home/runner/nilearn_data/spm_multimodal_fmri/sub001/multimodal_fmri.zip...
    [wrapper] .. done.

    [wrapper] Downloading data from 
    https://www.fil.ion.ucl.ac.uk/spm/download/data/mmfaces/multimodal_smri.zip ...
    [wrapper] Downloaded 1957888 of 6852766 bytes (28.6%%,    2.6s remaining)
    [wrapper]  ...done. (2 seconds, 0 min)

    [wrapper] Extracting data from 
    /home/runner/nilearn_data/spm_multimodal_fmri/sub001/multimodal_smri.zip...
    [wrapper] .. done.





.. GENERATED FROM PYTHON SOURCE LINES 26-27

Let's inspect one of the event files before using them.

.. GENERATED FROM PYTHON SOURCE LINES 27-34

.. code-block:: Python

    import pandas as pd

    events = [subject_data.events1, subject_data.events2]

    events_dataframe = pd.read_csv(events[0], sep="\t")
    events_dataframe["trial_type"].value_counts()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    trial_type
    scrambled    86
    faces        64
    Name: count, dtype: int64



.. GENERATED FROM PYTHON SOURCE LINES 35-37

We can confirm there are only 2 conditions in the dataset.


.. GENERATED FROM PYTHON SOURCE LINES 37-43

.. code-block:: Python

    from nilearn.plotting import plot_event, show

    plot_event(events)

    show()




.. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_001.png
   :alt: plot spm multimodal faces
   :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 44-46

Resample the images:
this is achieved by the ``concat_imgs`` function of Nilearn.

.. GENERATED FROM PYTHON SOURCE LINES 46-63

.. code-block:: Python

    import warnings

    from nilearn.image import concat_imgs, mean_img, resample_img

    # Avoid getting too many warnings due to resampling
    with warnings.catch_warnings():
        warnings.simplefilter("ignore")
        fmri_img = [
            concat_imgs(subject_data.func1, auto_resample=True),
            concat_imgs(subject_data.func2, auto_resample=True),
        ]
    affine, shape = fmri_img[0].affine, fmri_img[0].shape
    print("Resampling the second image (this takes time)...")
    fmri_img[1] = resample_img(
        fmri_img[1], affine, shape[:3], copy_header=True, force_resample=True
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Resampling the second image (this takes time)...




.. GENERATED FROM PYTHON SOURCE LINES 64-65

Let's create mean image for display purposes.

.. GENERATED FROM PYTHON SOURCE LINES 65-67

.. code-block:: Python

    mean_image = mean_img(fmri_img, copy_header=True)








.. GENERATED FROM PYTHON SOURCE LINES 68-72

Fit the model
-------------
Fit the :term:`GLM` for the 2 runs
by specifying a FirstLevelModel and then fitting it.

.. GENERATED FROM PYTHON SOURCE LINES 72-96

.. code-block:: Python


    # Sample at the beginning of each acquisition.
    slice_time_ref = 0.0
    # We use a discrete cosine transform to model signal drifts.
    drift_model = "cosine"
    # The cutoff for the drift model is 0.01 Hz.
    high_pass = 0.01
    # The hemodynamic response function
    hrf_model = "spm + derivative"

    from nilearn.glm.first_level import FirstLevelModel

    print("Fitting a GLM")
    fmri_glm = FirstLevelModel(
        smoothing_fwhm=None,
        t_r=subject_data.t_r,
        hrf_model=hrf_model,
        drift_model=drift_model,
        high_pass=high_pass,
    )


    fmri_glm = fmri_glm.fit(fmri_img, events=events)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Fitting a GLM




.. GENERATED FROM PYTHON SOURCE LINES 97-101

View the results
----------------
Now we can compute contrast-related statistical maps (in z-scale),
and plot them.

.. GENERATED FROM PYTHON SOURCE LINES 101-105

.. code-block:: Python

    from nilearn.plotting import plot_stat_map

    print("Computing contrasts")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computing contrasts




.. GENERATED FROM PYTHON SOURCE LINES 106-111

We actually want more interesting contrasts.
The simplest contrast just makes the difference
between the two main conditions.
We define the two opposite versions to run one-tailed t-tests.


.. GENERATED FROM PYTHON SOURCE LINES 111-114

.. code-block:: Python


    contrasts = ["faces - scrambled", "scrambled - faces"]








.. GENERATED FROM PYTHON SOURCE LINES 115-121

Let's store common parameters for all plots.

We plot the contrasts values overlaid on the mean fMRI image
and we will use the z-score values as transparency,
with any voxel with | Z-score | > 3 being fully opaque
and any voxel with 0 < | Z-score | < 1.96 being partly transparent.

.. GENERATED FROM PYTHON SOURCE LINES 121-144

.. code-block:: Python

    plot_param = {
        "vmin": 0,
        "display_mode": "z",
        "cut_coords": 3,
        "black_bg": True,
        "bg_img": mean_image,
        "cmap": "inferno",
        "transparency_range": [0, 3],
    }

    # Iterate on contrasts to compute and plot them.
    for contrast_id in contrasts:
        print(f"\tcontrast id: {contrast_id}")

        results = fmri_glm.compute_contrast(contrast_id, output_type="all")

        plot_stat_map(
            results["stat"],
            title=contrast_id,
            transparency=results["z_score"],
            **plot_param,
        )




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_002.png
         :alt: plot spm multimodal faces
         :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_003.png
         :alt: plot spm multimodal faces
         :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

            contrast id: faces - scrambled
    /home/runner/work/nilearn/nilearn/examples/04_glm_first_level/plot_spm_multimodal_faces.py:135: RuntimeWarning: The same contrast will be used for all 2 runs. If the design matrices are not the same for all runs, (for example with different column names or column order across runs) you should pass contrast as an expression using the name of the conditions as they appear in the design matrices.
      results = fmri_glm.compute_contrast(contrast_id, output_type="all")
            contrast id: scrambled - faces
    /home/runner/work/nilearn/nilearn/examples/04_glm_first_level/plot_spm_multimodal_faces.py:135: RuntimeWarning: The same contrast will be used for all 2 runs. If the design matrices are not the same for all runs, (for example with different column names or column order across runs) you should pass contrast as an expression using the name of the conditions as they appear in the design matrices.
      results = fmri_glm.compute_contrast(contrast_id, output_type="all")




.. GENERATED FROM PYTHON SOURCE LINES 145-148

We also define the effects of interest contrast,
a 2-dimensional contrasts spanning the two conditions.


.. GENERATED FROM PYTHON SOURCE LINES 148-163

.. code-block:: Python

    import numpy as np

    contrasts = np.eye(2)

    results = fmri_glm.compute_contrast(contrasts, output_type="all")

    plot_stat_map(
        results["stat"],
        title="effects of interest",
        transparency=results["z_score"],
        **plot_param,
    )

    show()




.. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_004.png
   :alt: plot spm multimodal faces
   :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_spm_multimodal_faces_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/nilearn/nilearn/examples/04_glm_first_level/plot_spm_multimodal_faces.py:152: RuntimeWarning: The same contrast will be used for all 2 runs. If the design matrices are not the same for all runs, (for example with different column names or column order across runs) you should pass contrast as an expression using the name of the conditions as they appear in the design matrices.
      results = fmri_glm.compute_contrast(contrasts, output_type="all")
    /home/runner/work/nilearn/nilearn/examples/04_glm_first_level/plot_spm_multimodal_faces.py:152: UserWarning: F contrasts should have 20 columns, but it has only 2. The rest of the contrast was padded with zeros.
      results = fmri_glm.compute_contrast(contrasts, output_type="all")
    /home/runner/work/nilearn/nilearn/examples/04_glm_first_level/plot_spm_multimodal_faces.py:152: UserWarning: Running approximate fixed effects on F statistics.
      results = fmri_glm.compute_contrast(contrasts, output_type="all")




.. GENERATED FROM PYTHON SOURCE LINES 164-173

Based on the resulting maps we observe
that the analysis results in wide activity
for the 'effects of interest' contrast,
showing the implications of large portions of the visual cortex
in the conditions.
By contrast,
the differential effect between "faces" and "scrambled" involves sparser,
more anterior and lateral regions.
It also displays some responses in the frontal lobe.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (3 minutes 33.272 seconds)

**Estimated memory usage:**  975 MB


.. _sphx_glr_download_auto_examples_04_glm_first_level_plot_spm_multimodal_faces.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/04_glm_first_level/plot_spm_multimodal_faces.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_spm_multimodal_faces.ipynb <plot_spm_multimodal_faces.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_spm_multimodal_faces.py <plot_spm_multimodal_faces.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_spm_multimodal_faces.zip <plot_spm_multimodal_faces.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
