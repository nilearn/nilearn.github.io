
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/06_manipulating_images/plot_threshold_image.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_06_manipulating_images_plot_threshold_image.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_06_manipulating_images_plot_threshold_image.py:


Image thresholding
==================

The goal of this example is to illustrate the use of the function
:func:`~nilearn.image.threshold_img` together with ``threshold`` and
``two_sided`` parameters to view certain values in image data.

The ``threshold`` parameter can take both positive and negative values.
``two_sided`` parameter is complementary to ``threshold`` effecting its
behavior.

.. GENERATED FROM PYTHON SOURCE LINES 16-20

Image without threshold
-----------------------

We will first load the dataset and display the image without manipulation.

.. GENERATED FROM PYTHON SOURCE LINES 20-34

.. code-block:: Python


    from nilearn import datasets
    from nilearn.plotting import plot_stat_map

    image = datasets.load_sample_motor_activation_image()

    plot_param = {
        "display_mode": "ortho",
        "cut_coords": [5, -26, 21],
        "draw_cross": False,
    }

    plot_stat_map(image, title="image without threshold", **plot_param)




.. image-sg:: /auto_examples/06_manipulating_images/images/sphx_glr_plot_threshold_image_001.png
   :alt: plot threshold image
   :srcset: /auto_examples/06_manipulating_images/images/sphx_glr_plot_threshold_image_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <nilearn.plotting.displays._slicers.OrthoSlicer object at 0x7f68f91c5d00>



.. GENERATED FROM PYTHON SOURCE LINES 35-52

Image thresholded at 2 when two_sided=True
------------------------------------------

Now we will use ``threshold=2`` together with ``two_sided=True``
to threshold the image.
When ``two_sided=True``,
we can only use positive values for ``threshold``.

This will set all image values between -2 and 2 to 0.

.. note::

  You can get a similar result by passing threshold
  directly when plotting.
  In this case the colorbar will adapt to show
  which part of the image was masked.


.. GENERATED FROM PYTHON SOURCE LINES 52-93

.. code-block:: Python


    import matplotlib.pyplot as plt

    from nilearn.image import threshold_img

    thresholded_img = threshold_img(
        image,
        threshold=2,
        cluster_threshold=0,
        two_sided=True,
        copy=True,
        copy_header=True,
    )

    figure_width = 8

    fig, axes = plt.subplots(
        3,
        1,
        figsize=(figure_width, 13),
    )

    plot_stat_map(
        image, title="image without threshold", axes=axes[0], **plot_param
    )

    plot_stat_map(
        thresholded_img,
        title="image thresholded at 2 before plotting with two_sided=True",
        axes=axes[1],
        **plot_param,
    )

    plot_stat_map(
        image,
        title="image thresholded during plotting",
        threshold=2,
        axes=axes[2],
        **plot_param,
    )




.. image-sg:: /auto_examples/06_manipulating_images/images/sphx_glr_plot_threshold_image_002.png
   :alt: plot threshold image
   :srcset: /auto_examples/06_manipulating_images/images/sphx_glr_plot_threshold_image_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <nilearn.plotting.displays._slicers.OrthoSlicer object at 0x7f68fd2172e0>



.. GENERATED FROM PYTHON SOURCE LINES 94-101

Image thresholded at 2 when two_sided=False
-------------------------------------------

Now we will use ``threshold=2`` together with ``two_sided=False``
to see the effect.

This will set all image values below 2 to 0.

.. GENERATED FROM PYTHON SOURCE LINES 101-131

.. code-block:: Python


    thresholded_img = threshold_img(
        image,
        threshold=2,
        cluster_threshold=0,
        two_sided=False,
        copy=True,
        copy_header=True,
    )


    fig, axes = plt.subplots(
        2,
        1,
        figsize=(figure_width, 8),
    )


    plot_stat_map(
        image, title="image without threshold", axes=axes[0], **plot_param
    )

    plot_stat_map(
        thresholded_img,
        cmap="Reds",
        title="image thresholded at 2 with two_sided=False",
        axes=axes[1],
        **plot_param,
    )




.. image-sg:: /auto_examples/06_manipulating_images/images/sphx_glr_plot_threshold_image_003.png
   :alt: plot threshold image
   :srcset: /auto_examples/06_manipulating_images/images/sphx_glr_plot_threshold_image_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <nilearn.plotting.displays._slicers.OrthoSlicer object at 0x7f68cfa32940>



.. GENERATED FROM PYTHON SOURCE LINES 132-139

Image thresholded at -2 when two_sided=False
--------------------------------------------

Now we will use ``threshold=-2`` together with ``two_sided=False`` to
see the effect.

This will set all image values above -2 to 0.

.. GENERATED FROM PYTHON SOURCE LINES 139-167

.. code-block:: Python


    thresholded_img = threshold_img(
        image,
        threshold=-2,
        cluster_threshold=0,
        two_sided=False,
        copy=True,
        copy_header=True,
    )


    fig, axes = plt.subplots(
        2,
        1,
        figsize=(figure_width, 8),
    )

    plot_stat_map(
        image, title="image without threshold", axes=axes[0], **plot_param
    )

    plot_stat_map(
        thresholded_img,
        cmap="Blues_r",
        title="image thresholded at -2 with two_sided=False",
        axes=axes[1],
        **plot_param,
    )



.. image-sg:: /auto_examples/06_manipulating_images/images/sphx_glr_plot_threshold_image_004.png
   :alt: plot threshold image
   :srcset: /auto_examples/06_manipulating_images/images/sphx_glr_plot_threshold_image_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <nilearn.plotting.displays._slicers.OrthoSlicer object at 0x7f68f94a9a30>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 10.104 seconds)

**Estimated memory usage:**  107 MB


.. _sphx_glr_download_auto_examples_06_manipulating_images_plot_threshold_image.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/06_manipulating_images/plot_threshold_image.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_threshold_image.ipynb <plot_threshold_image.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_threshold_image.py <plot_threshold_image.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_threshold_image.zip <plot_threshold_image.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
