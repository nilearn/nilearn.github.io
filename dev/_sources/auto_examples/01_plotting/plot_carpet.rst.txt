
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/01_plotting/plot_carpet.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_01_plotting_plot_carpet.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_01_plotting_plot_carpet.py:


Visualizing global patterns with a carpet plot
==============================================

A common quality control step for functional MRI data is to visualize the data
over time in a carpet plot (also known as a Power plot or a grayplot).

The :func:`~nilearn.plotting.plot_carpet()` function generates a carpet plot
from a 4D functional image.

.. GENERATED FROM PYTHON SOURCE LINES 13-15

Fetching data from ADHD dataset
-------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 15-30

.. code-block:: Python

    from nilearn.datasets import fetch_adhd
    from nilearn.plotting import plot_carpet

    adhd_dataset = fetch_adhd(n_subjects=1)

    # plot_carpet can infer TR from the image header,
    # but preprocessing can often overwrite that particular header field,
    # so we will be explicit.
    t_r = 2.0

    # Print basic information on the dataset
    print(
        f"First subject functional nifti image (4D) is at: {adhd_dataset.func[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [fetch_adhd] Dataset found in /home/runner/nilearn_data/adhd
    First subject functional nifti image (4D) is at: /home/runner/nilearn_data/adhd/data/0010042/0010042_rest_tshift_RPI_voreg_mni.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 31-33

Deriving a mask
---------------

.. GENERATED FROM PYTHON SOURCE LINES 33-38

.. code-block:: Python

    from nilearn import masking

    # Build an EPI-based mask because we have no anatomical data
    mask_img = masking.compute_epi_mask(adhd_dataset.func[0])








.. GENERATED FROM PYTHON SOURCE LINES 39-41

Visualizing global patterns over time
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 41-53

.. code-block:: Python

    import matplotlib.pyplot as plt

    display = plot_carpet(
        adhd_dataset.func[0],
        mask_img,
        t_r=t_r,
        standardize="zscore_sample",
        title="global patterns over time",
    )

    display.show()




.. image-sg:: /auto_examples/01_plotting/images/sphx_glr_plot_carpet_001.png
   :alt: global patterns over time
   :srcset: /auto_examples/01_plotting/images/sphx_glr_plot_carpet_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 54-58

Deriving a label-based mask
---------------------------
Create a gray matter/white matter/cerebrospinal fluid mask from
ICBM152 tissue probability maps.

.. GENERATED FROM PYTHON SOURCE LINES 58-75

.. code-block:: Python

    import numpy as np

    from nilearn import image
    from nilearn.datasets import fetch_icbm152_2009

    atlas = fetch_icbm152_2009()
    atlas_img = image.concat_imgs((atlas["gm"], atlas["wm"], atlas["csf"]))
    map_labels = {"Gray Matter": 1, "White Matter": 2, "Cerebrospinal Fluid": 3}

    atlas_data = atlas_img.get_fdata()
    discrete_version = np.argmax(atlas_data, axis=3) + 1
    discrete_version[np.max(atlas_data, axis=3) == 0] = 0
    discrete_atlas_img = image.new_img_like(
        atlas_img, discrete_version.astype(np.float32)
    )






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [fetch_icbm152_2009] Dataset found in /home/runner/nilearn_data/icbm152_2009




.. GENERATED FROM PYTHON SOURCE LINES 76-78

Visualizing global patterns, separated by tissue type
-----------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 78-92

.. code-block:: Python

    fig, ax = plt.subplots(figsize=(10, 10))

    display = plot_carpet(
        adhd_dataset.func[0],
        discrete_atlas_img,
        t_r=t_r,
        mask_labels=map_labels,
        axes=ax,
        standardize="zscore_sample",
        title="global patterns over time separated by tissue type",
    )

    plt.show()




.. image-sg:: /auto_examples/01_plotting/images/sphx_glr_plot_carpet_002.png
   :alt: global patterns over time separated by tissue type
   :srcset: /auto_examples/01_plotting/images/sphx_glr_plot_carpet_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [NiftiMasker.wrapped] Resampling images
    [NiftiMasker.wrapped] Resampling images
    [plot_carpet] Coercing atlas_values to int





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 22.715 seconds)

**Estimated memory usage:**  1077 MB


.. _sphx_glr_download_auto_examples_01_plotting_plot_carpet.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/main?urlpath=lab/tree/notebooks/auto_examples/01_plotting/plot_carpet.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_carpet.ipynb <plot_carpet.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_carpet.py <plot_carpet.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_carpet.zip <plot_carpet.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
