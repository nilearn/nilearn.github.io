
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/01_plotting/plot_carpet.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_01_plotting_plot_carpet.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_01_plotting_plot_carpet.py:


Visualizing global patterns with a carpet plot
==============================================

A common quality control step for functional MRI data is to visualize the data
over time in a carpet plot (also known as a Power plot or a grayplot).

The :func:`nilearn.plotting.plot_carpet()` function generates a carpet plot
from a 4D functional image.

.. GENERATED FROM PYTHON SOURCE LINES 13-15

Fetching data from ADHD dataset
-------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 15-28

.. code-block:: default

    from nilearn import datasets

    adhd_dataset = datasets.fetch_adhd(n_subjects=1)

    # plot_carpet can infer TR from the image header, but preprocessing can often
    # overwrite that particular header field, so we will be explicit.
    t_r = 2.0

    # Print basic information on the dataset
    print(
        f"First subject functional nifti image (4D) is at: {adhd_dataset.func[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First subject functional nifti image (4D) is at: /home/yasmin/nilearn/nilearn_data/adhd/data/0010042/0010042_rest_tshift_RPI_voreg_mni.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 29-31

Deriving a mask
---------------

.. GENERATED FROM PYTHON SOURCE LINES 31-36

.. code-block:: default

    from nilearn import masking

    # Build an EPI-based mask because we have no anatomical data
    mask_img = masking.compute_epi_mask(adhd_dataset.func[0])








.. GENERATED FROM PYTHON SOURCE LINES 37-39

Visualizing global patterns over time
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 39-46

.. code-block:: default

    import matplotlib.pyplot as plt
    from nilearn.plotting import plot_carpet

    display = plot_carpet(adhd_dataset.func[0], mask_img, t_r=t_r)

    display.show()




.. image-sg:: /auto_examples/01_plotting/images/sphx_glr_plot_carpet_001.png
   :alt: plot carpet
   :srcset: /auto_examples/01_plotting/images/sphx_glr_plot_carpet_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/yasmin/nilearn/nilearn/nilearn/plotting/img_plotting.py:1426: FutureWarning: The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.
      data = clean(data, t_r=t_r, detrend=True, standardize='zscore')




.. GENERATED FROM PYTHON SOURCE LINES 47-51

Deriving a label-based mask
---------------------------
Create a gray matter/white matter/cerebrospinal fluid mask from
ICBM152 tissue probability maps.

.. GENERATED FROM PYTHON SOURCE LINES 51-64

.. code-block:: default

    import numpy as np
    from nilearn import image

    atlas = datasets.fetch_icbm152_2009()
    atlas_img = image.concat_imgs((atlas["gm"], atlas["wm"], atlas["csf"]))
    map_labels = {"Gray Matter": 1, "White Matter": 2, "Cerebrospinal Fluid": 3}

    atlas_data = atlas_img.get_fdata()
    discrete_version = np.argmax(atlas_data, axis=3) + 1
    discrete_version[np.max(atlas_data, axis=3) == 0] = 0
    discrete_atlas_img = image.new_img_like(atlas_img, discrete_version)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/yasmin/nilearn/nilearn/examples/01_plotting/plot_carpet.py:61: UserWarning: Data array used to create a new image contains 64-bit ints. This is likely due to creating the array with numpy and passing `int` as the `dtype`. Many tools such as FSL and SPM cannot deal with int64 in Nifti images, so for compatibility the data has been converted to int32.
      discrete_atlas_img = image.new_img_like(atlas_img, discrete_version)




.. GENERATED FROM PYTHON SOURCE LINES 65-67

Visualizing global patterns, separated by tissue type
-----------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 67-81

.. code-block:: default

    from nilearn.plotting import plot_carpet

    fig, ax = plt.subplots(figsize=(10, 10))

    display = plot_carpet(
        adhd_dataset.func[0],
        discrete_atlas_img,
        t_r=t_r,
        mask_labels=map_labels,
        axes=ax,
        cmap="gray",
    )

    fig.show()



.. image-sg:: /auto_examples/01_plotting/images/sphx_glr_plot_carpet_002.png
   :alt: plot carpet
   :srcset: /auto_examples/01_plotting/images/sphx_glr_plot_carpet_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/yasmin/nilearn/nilearn/nilearn/image/resampling.py:597: UserWarning: Casting data from int32 to float32
      warnings.warn(f"Casting data from {data.dtype.name} to {aux}")
    Coercing atlas_values to <class 'int'>
    /home/yasmin/nilearn/nilearn/nilearn/plotting/img_plotting.py:1426: FutureWarning: The default strategy for standardize is currently 'zscore' which incorrectly uses population std to calculate sample zscores. The new strategy 'zscore_sample' corrects this behavior by using the sample std. In release 0.13, the default strategy will be replaced by the new strategy and the 'zscore' option will be removed. Please use 'zscore_sample' instead.
      data = clean(data, t_r=t_r, detrend=True, standardize='zscore')





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  11.300 seconds)

**Estimated memory usage:**  1057 MB


.. _sphx_glr_download_auto_examples_01_plotting_plot_carpet.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/0.10.1?urlpath=lab/tree/notebooks/auto_examples/01_plotting/plot_carpet.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_carpet.py <plot_carpet.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_carpet.ipynb <plot_carpet.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
