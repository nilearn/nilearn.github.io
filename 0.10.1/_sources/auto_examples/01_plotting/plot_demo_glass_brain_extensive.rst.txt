
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/01_plotting/plot_demo_glass_brain_extensive.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_01_plotting_plot_demo_glass_brain_extensive.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_01_plotting_plot_demo_glass_brain_extensive.py:


Glass brain plotting in nilearn (all options)
=============================================

The first part of this example goes through different options of the
:func:`~nilearn.plotting.plot_glass_brain` function (including plotting
negative values).

The second part goes through same options but selected of the same glass brain
function but plotting is seen with contours.

See :ref:`plotting` for more plotting functionalities and
:ref:`Section 4.3 <display_modules>` for more details about display objects
in Nilearn.

Also, see :func:`nilearn.datasets.fetch_neurovault_motor_task` for details
about the plotting data and associated meta-data.

.. GENERATED FROM PYTHON SOURCE LINES 22-26

Load the data
------------------

We will use a motor activation contrast map distributed with Nilearn.

.. GENERATED FROM PYTHON SOURCE LINES 26-33

.. code-block:: default

    from nilearn import datasets

    stat_img = datasets.load_sample_motor_activation_image()

    # stat_img is just the name of the image file
    stat_img





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    '/home/yasmin/nilearn/nilearn/nilearn/datasets/data/image_10426.nii.gz'



.. GENERATED FROM PYTHON SOURCE LINES 34-43

Demo glass brain plotting
-------------------------

By default, :func:`~nilearn.plotting.plot_glass_brain` uses a display mode
called 'ortho' which results in three projections. It is equivalent to
specify ``display_mode='ortho'`` in
:func:`~nilearn.plotting.plot_glass_brain`. Note that depending on the
value of ``display_mode``, different display objects are returned. Here,
a :class:`~nilearn.plotting.displays.OrthoProjector` is returned.

.. GENERATED FROM PYTHON SOURCE LINES 43-51

.. code-block:: default


    from nilearn import plotting
    from nilearn.plotting import plot_glass_brain

    # Whole brain sagittal cuts and map is thresholded at 3
    plot_glass_brain(stat_img, threshold=3)





.. image-sg:: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_001.png
   :alt: plot demo glass brain extensive
   :srcset: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <nilearn.plotting.displays._projectors.OrthoProjector object at 0x7fb57c89db10>



.. GENERATED FROM PYTHON SOURCE LINES 52-54

The same figure, with a colorbar, can be produced by
setting ``colorbar=True``.

.. GENERATED FROM PYTHON SOURCE LINES 54-58

.. code-block:: default


    plot_glass_brain(stat_img, threshold=3, colorbar=True)





.. image-sg:: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_002.png
   :alt: plot demo glass brain extensive
   :srcset: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <nilearn.plotting.displays._projectors.OrthoProjector object at 0x7fb585ad16f0>



.. GENERATED FROM PYTHON SOURCE LINES 59-62

Here, we show how to set a black background, and we only view sagittal and
axial projections by setting ``display_mode='xz'``, which returns a
:class:`~nilearn.plotting.displays.XZProjector`.

.. GENERATED FROM PYTHON SOURCE LINES 62-69

.. code-block:: default


    plot_glass_brain(
        stat_img, title='plot_glass_brain', black_bg=True,
        display_mode='xz', threshold=3
    )





.. image-sg:: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_003.png
   :alt: plot demo glass brain extensive
   :srcset: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <nilearn.plotting.displays._projectors.XZProjector object at 0x7fb58debca60>



.. GENERATED FROM PYTHON SOURCE LINES 70-74

We can also plot the sign of the activation by setting ``plot_abs=False``.
Additionally, we only visualize coronal and axial projections by setting
``display_mode='yz'`` which returns a
:class:`~nilearn.plotting.displays.YZProjector`.

.. GENERATED FROM PYTHON SOURCE LINES 74-80

.. code-block:: default


    plot_glass_brain(
        stat_img, threshold=0, colorbar=True, plot_abs=False, display_mode='yz'
    )





.. image-sg:: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_004.png
   :alt: plot demo glass brain extensive
   :srcset: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <nilearn.plotting.displays._projectors.YZProjector object at 0x7fb590762d10>



.. GENERATED FROM PYTHON SOURCE LINES 81-83

Setting ``plot_abs=True`` and ``display_mode='yx'`` (returns a
:class:`~nilearn.plotting.displays.YXProjector`).

.. GENERATED FROM PYTHON SOURCE LINES 83-89

.. code-block:: default


    plot_glass_brain(
        stat_img, threshold=3, colorbar=True, plot_abs=False, display_mode='yx'
    )





.. image-sg:: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_005.png
   :alt: plot demo glass brain extensive
   :srcset: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <nilearn.plotting.displays._projectors.YXProjector object at 0x7fb57d25bfd0>



.. GENERATED FROM PYTHON SOURCE LINES 90-99

Different projections for the left and right hemispheres
--------------------------------------------------------

In the previous section we saw a few projection modes, which are controlled
by setting the argument ``display_mode`` of
:func:`~nilearn.plotting.plot_glass_brain`. In this section, we will show
some additional possibilities. For example, setting ``display_mode='lzr'``
enables an hemispheric sagittal view. The display object returned is then a
:class:`~nilearn.plotting.displays.LZRProjector`.

.. GENERATED FROM PYTHON SOURCE LINES 99-106

.. code-block:: default


    plot_glass_brain(
        stat_img, title='plot_glass_brain with display_mode="lzr"',
        black_bg=True, display_mode='lzr', threshold=3
    )





.. image-sg:: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_006.png
   :alt: plot demo glass brain extensive
   :srcset: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <nilearn.plotting.displays._projectors.LZRProjector object at 0x7fb5906bc340>



.. GENERATED FROM PYTHON SOURCE LINES 107-109

``display_mode='lyrz'`` returns a
:class:`~nilearn.plotting.displays.LYRZProjector` object.

.. GENERATED FROM PYTHON SOURCE LINES 109-117

.. code-block:: default


    plot_glass_brain(
        stat_img, threshold=0, colorbar=True,
        title='plot_glass_brain with display_mode="lyrz"',
        plot_abs=False, display_mode='lyrz'
    )





.. image-sg:: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_007.png
   :alt: plot demo glass brain extensive
   :srcset: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_007.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <nilearn.plotting.displays._projectors.LYRZProjector object at 0x7fb5acc04f10>



.. GENERATED FROM PYTHON SOURCE LINES 118-125

If you are only interested in single projections, you can set
``display_mode`` to 'x' (returns a
:class:`~nilearn.plotting.displays.XProjector`), 'y' (returns a
:class:`~nilearn.plotting.displays.YProjector`), 'z' (returns a
:class:`~nilearn.plotting.displays.ZProjector`), 'l' (returns a
:class:`~nilearn.plotting.displays.LProjector`), or 'r' (returns a
:class:`~nilearn.plotting.displays.RProjector`).

.. GENERATED FROM PYTHON SOURCE LINES 125-132

.. code-block:: default


    plot_glass_brain(
        stat_img, threshold=0, colorbar=True, title='display_mode="x"',
        plot_abs=False, display_mode='x'
    )





.. image-sg:: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_008.png
   :alt: plot demo glass brain extensive
   :srcset: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_008.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <nilearn.plotting.displays._projectors.XProjector object at 0x7fb596a26ec0>



.. GENERATED FROM PYTHON SOURCE LINES 133-148

Demo glass brain plotting with contours and with fillings
---------------------------------------------------------

The display objects returned by :func:`~nilearn.plotting.plot_glass_brain`
all inherit from the :class:`~nilearn.plotting.displays.OrthoProjector`
and enable further customisation of the figures.

In this example, we focus on using methods
:meth:`~nilearn.plotting.displays.OrthoProjector.add_contours` and
:meth:`~nilearn.plotting.displays.OrthoProjector.title`. First, we
save the display object (here a
:class:`~nilearn.plotting.displays.LZRYProjector`) into a variable named
``display``. Note that we set the first argument to ``None`` since we
want an empty glass brain to plot the statistical maps with
:meth:`~nilearn.plotting.displays.OrthoProjector.add_contours`.

.. GENERATED FROM PYTHON SOURCE LINES 148-156

.. code-block:: default


    display = plot_glass_brain(None, display_mode='lzry')
    # Here, we project statistical maps
    display.add_contours(stat_img)
    # and add a title
    display.title('"stat_img" on glass brain without threshold')





.. image-sg:: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_009.png
   :alt: plot demo glass brain extensive
   :srcset: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_009.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 157-159

We can fill the contours by setting ``filled=True``. Note that we are not
specifying levels here

.. GENERATED FROM PYTHON SOURCE LINES 159-167

.. code-block:: default


    display = plot_glass_brain(None, display_mode='lzry')
    # Here, we project statistical maps with filled=True
    display.add_contours(stat_img, filled=True)
    # and add a title
    display.title('Same map but with fillings in the contours')





.. image-sg:: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_010.png
   :alt: plot demo glass brain extensive
   :srcset: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_010.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 168-174

Here, we input a specific level (cut-off) in the statistical map.
In other words, we are thresholding our statistical map.

We set the threshold using a parameter of method
:meth:`~nilearn.plotting.displays.OrthoProjector.add_contours` called
``levels`` which value is given as a list and we choose the color to be red.

.. GENERATED FROM PYTHON SOURCE LINES 174-180

.. code-block:: default


    display = plot_glass_brain(None, display_mode='lzry')
    display.add_contours(stat_img, levels=[3.], colors='r')
    display.title('"stat_img" on glass brain with threshold')





.. image-sg:: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_011.png
   :alt: plot demo glass brain extensive
   :srcset: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_011.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 181-183

Plotting with same demonstration but fill the contours (by setting
``filled=True``).

.. GENERATED FROM PYTHON SOURCE LINES 183-189

.. code-block:: default


    display = plot_glass_brain(None, display_mode='lzry')
    display.add_contours(stat_img, filled=True, levels=[3.], colors='r')
    display.title('Same demonstration but using fillings inside contours')





.. image-sg:: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_012.png
   :alt: plot demo glass brain extensive
   :srcset: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_012.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 190-192

Plotting with black background, ``black_bg`` should be set to ``True``
through :func:`~nilearn.plotting.plot_glass_brain`.

.. GENERATED FROM PYTHON SOURCE LINES 192-199

.. code-block:: default


    # We can set black background using black_bg=True
    display = plot_glass_brain(None, black_bg=True)
    display.add_contours(stat_img, levels=[3.], colors='g')
    display.title('"stat_img" on glass brain with black background')





.. image-sg:: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_013.png
   :alt: plot demo glass brain extensive
   :srcset: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_013.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 200-201

Black background plotting with filled in contours.

.. GENERATED FROM PYTHON SOURCE LINES 201-207

.. code-block:: default


    display = plot_glass_brain(None, black_bg=True)
    display.add_contours(stat_img, filled=True, levels=[3.], colors='g')
    display.title('Glass brain with black background and filled in contours')





.. image-sg:: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_014.png
   :alt: plot demo glass brain extensive
   :srcset: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_014.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 208-214

Display contour projections in both hemispheres
-----------------------------------------------

The key argument to vary here is ``display_mode`` for hemispheric plotting.
Here, we set ``display_mode='lr'`` for both hemispheric plots. Note that a
:class:`~nilearn.plotting.displays.LRProjector` is returned.

.. GENERATED FROM PYTHON SOURCE LINES 214-220

.. code-block:: default


    display = plot_glass_brain(None, display_mode='lr')
    display.add_contours(stat_img, levels=[3.], colors='r')
    display.title('"stat_img" on glass brain only "l" "r" hemispheres')





.. image-sg:: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_015.png
   :alt: plot demo glass brain extensive
   :srcset: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_015.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 221-222

Filled contours in both hemispheric plotting, by adding ``filled=True``.

.. GENERATED FROM PYTHON SOURCE LINES 222-228

.. code-block:: default


    display = plot_glass_brain(None, display_mode='lr')
    display.add_contours(stat_img, filled=True, levels=[3.], colors='r')
    display.title('Filled contours on glass brain only "l" "r" hemispheres')





.. image-sg:: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_016.png
   :alt: plot demo glass brain extensive
   :srcset: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_016.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 229-236

With positive and negative signs of activations with ``plot_abs`` in
:func:`~nilearn.plotting.plot_glass_brain`.

By default parameter ``plot_abs`` is ``True`` and sign of activations
can be displayed by changing ``plot_abs`` to ``False``. Note that we also
specify ``display_mode='lyr'`` which returns a
:class:`~nilearn.plotting.displays.LYRProjector` display object.

.. GENERATED FROM PYTHON SOURCE LINES 236-242

.. code-block:: default


    display = plot_glass_brain(None, plot_abs=False, display_mode='lyr')
    display.add_contours(stat_img)
    display.title("Contours with both sign of activations without threshold")





.. image-sg:: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_017.png
   :alt: plot demo glass brain extensive
   :srcset: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_017.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 243-245

Now, adding ``filled=True`` to get positive and negative sign activations
with fillings in the contours.

.. GENERATED FROM PYTHON SOURCE LINES 245-253

.. code-block:: default


    display = plot_glass_brain(None, plot_abs=False, display_mode='lyr')
    display.add_contours(stat_img, filled=True)
    display.title(
        "Filled contours with both sign of activations without threshold"
    )





.. image-sg:: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_018.png
   :alt: plot demo glass brain extensive
   :srcset: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_018.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 254-264

Displaying both signs (positive and negative) of activations with threshold
meaning thresholding by adding an argument ``levels`` in method
:meth:`~nilearn.plotting.displays.OrthoProjector.add_contours`.

We give two values through the argument ``levels`` which corresponds to the
thresholds of the contour we want to draw: One is positive and the other one
is negative. We give a list of ``colors`` as argument to associate a
different color to each contour. Additionally, we also choose to plot
contours with thick line widths. For ``linewidths``, one value would be
enough so that same value is used for both contours.

.. GENERATED FROM PYTHON SOURCE LINES 264-274

.. code-block:: default


    import numpy as np

    display = plot_glass_brain(None, plot_abs=False, display_mode='lzry')
    display.add_contours(
        stat_img, levels=[-2.8, 3.], colors=['b', 'r'], linewidths=4.
    )
    display.title('Contours with sign of activations with threshold')





.. image-sg:: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_019.png
   :alt: plot demo glass brain extensive
   :srcset: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_019.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 275-285

Same display demonstration as above but adding ``filled=True`` to get
fillings inside the contours.

Unlike in previous plot, here we specify each sign at a time. We call
negative values display first followed by positive values display.

First, we fetch our display object with same parameters used as above.
Then, we plot negative sign of activation with levels given as negative
activation value in a list. Upper bound should be kept to -infinity.
Next, using the same display object, we plot positive sign of activation.

.. GENERATED FROM PYTHON SOURCE LINES 285-296

.. code-block:: default


    display = plot_glass_brain(None, plot_abs=False, display_mode='lzry')
    display.add_contours(
        stat_img, filled=True, levels=[-np.inf, -2.8], colors='b'
    )
    display.add_contours(
        stat_img, filled=True, levels=[3.], colors='r'
    )
    display.title('Now same plotting but with filled contours')
    # Finally, displaying them
    plotting.show()



.. image-sg:: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_020.png
   :alt: plot demo glass brain extensive
   :srcset: /auto_examples/01_plotting/images/sphx_glr_plot_demo_glass_brain_extensive_020.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  22.513 seconds)

**Estimated memory usage:**  9 MB


.. _sphx_glr_download_auto_examples_01_plotting_plot_demo_glass_brain_extensive.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/0.10.1?urlpath=lab/tree/notebooks/auto_examples/01_plotting/plot_demo_glass_brain_extensive.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_demo_glass_brain_extensive.py <plot_demo_glass_brain_extensive.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_demo_glass_brain_extensive.ipynb <plot_demo_glass_brain_extensive.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
