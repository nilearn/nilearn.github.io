
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/02_decoding/plot_oasis_vbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_02_decoding_plot_oasis_vbm.py:


Voxel-Based Morphometry on Oasis dataset
========================================

This example uses Voxel-Based Morphometry (VBM) to study the relationship
between aging and gray matter density.

The data come from the `OASIS <http://www.oasis-brains.org/>`_ project.
If you use it, you need to agree with the data usage agreement available
on the website.

It has been run through a standard VBM pipeline (using SPM8 and
NewSegment) to create VBM maps, which we study here.

Predictive modeling analysis: VBM bio-markers of aging?
-------------------------------------------------------

We run a standard SVM-ANOVA nilearn pipeline to predict age from the VBM
data. We use only 100 subjects from the OASIS dataset to limit the memory
usage.

Note that for an actual predictive modeling study of aging, the study
should be ran on the full set of subjects. Also, all parameters should be set
by cross-validation. This includes the smoothing applied to the data and the
number of features selected by the ANOVA step. Indeed, even these
data-preparation parameter impact significantly the prediction score.


Also, parameters such as the smoothing should be applied to the data and the
number of features selected by the ANOVA step should be set by nested
cross-validation, as they impact significantly the prediction score.

Brain mapping with mass univariate
----------------------------------

SVM weights are very noisy, partly because heavy smoothing is detrimental
for the prediction here. A standard analysis using mass-univariate GLM
(here permuted to have exact correction for multiple comparisons) gives a
much clearer view of the important regions.

____

.. include:: ../../../examples/masker_note.rst

.. GENERATED FROM PYTHON SOURCE LINES 46-59

.. code-block:: default

    # Authors: Elvis Dhomatob, <elvis.dohmatob@inria.fr>, Apr. 2014
    #          Virgile Fritsch, <virgile.fritsch@inria.fr>, Apr 2014
    #          Gael Varoquaux, Apr 2014
    #          Andres Hoyos-Idrobo, Apr 2017

    import matplotlib.pyplot as plt
    import numpy as np
    from nilearn import datasets
    from nilearn.image import get_data
    from nilearn.maskers import NiftiMasker

    n_subjects = 100  # more subjects requires more memory








.. GENERATED FROM PYTHON SOURCE LINES 60-62

Load Oasis dataset
------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-85

.. code-block:: default

    oasis_dataset = datasets.fetch_oasis_vbm(
        n_subjects=n_subjects, legacy_format=False
    )
    gray_matter_map_filenames = oasis_dataset.gray_matter_maps
    age = oasis_dataset.ext_vars["age"].values

    # Split data into training set and test set
    from sklearn.model_selection import train_test_split

    gm_imgs_train, gm_imgs_test, age_train, age_test = train_test_split(
        gray_matter_map_filenames, age, train_size=0.6, random_state=0
    )

    # print basic information on the dataset
    print(
        "First gray-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.gray_matter_maps[0]}"
    )
    print(
        "First white-matter anatomy image (3D) is located at: "
        f"{oasis_dataset.white_matter_maps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First gray-matter anatomy image (3D) is located at: /home/yasmin/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc1OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz
    First white-matter anatomy image (3D) is located at: /home/yasmin/nilearn/nilearn_data/oasis1/OAS1_0001_MR1/mwrc2OAS1_0001_MR1_mpr_anon_fslswapdim_bet.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 86-88

Preprocess data
---------------

.. GENERATED FROM PYTHON SOURCE LINES 88-104

.. code-block:: default

    nifti_masker = NiftiMasker(
        standardize=False, smoothing_fwhm=2, memory="nilearn_cache"
    )  # cache options
    gm_maps_masked = nifti_masker.fit_transform(gm_imgs_train)

    # The features with too low between-subject variance are removed using
    # :class:`sklearn.feature_selection.VarianceThreshold`.
    from sklearn.feature_selection import VarianceThreshold

    variance_threshold = VarianceThreshold(threshold=0.01)
    variance_threshold.fit_transform(gm_maps_masked)

    # Then we convert the data back to the mask image in order to use it for
    # decoding process
    mask = nifti_masker.inverse_transform(variance_threshold.get_support())








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Prediction pipeline with ANOVA and SVR using
:class:`nilearn.decoding.DecoderRegressor` Object

.. GENERATED FROM PYTHON SOURCE LINES 107-142

.. code-block:: default


    # In nilearn we can benefit from the built-in DecoderRegressor object to
    # do ANOVA with SVR instead of manually defining the whole pipeline.
    # This estimator also uses Cross Validation to select best models and ensemble
    # them. Furthermore, you can pass n_jobs=<some_high_value> to the
    # DecoderRegressor class to take advantage of a multi-core system.
    # To save time (because these are anat images with many voxels), we include
    # only the 1-percent voxels most correlated with the age variable to fit. We
    # also want to set mask hyperparameter to be the mask we just obtained above.

    from nilearn.decoding import DecoderRegressor

    decoder = DecoderRegressor(
        estimator="svr",
        mask=mask,
        scoring="neg_mean_absolute_error",
        screening_percentile=1,
        n_jobs=1,
        standardize="zscore_sample",
    )
    # Fit and predict with the decoder
    decoder.fit(gm_imgs_train, age_train)

    # Sort test data for better visualization (trend, etc.)
    perm = np.argsort(age_test)[::-1]
    age_test = age_test[perm]
    gm_imgs_test = np.array(gm_imgs_test)[perm]
    age_pred = decoder.predict(gm_imgs_test)

    prediction_score = -np.mean(decoder.cv_scores_["beta"])

    print("=== DECODER ===")
    print(f"explained variance for the cross-validation: {prediction_score:f}")
    print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    === DECODER ===
    explained variance for the cross-validation: 10.670599





.. GENERATED FROM PYTHON SOURCE LINES 143-145

Visualization
-------------

.. GENERATED FROM PYTHON SOURCE LINES 145-158

.. code-block:: default

    weight_img = decoder.coef_img_["beta"]

    # Create the figure
    from nilearn.plotting import plot_stat_map, show

    bg_filename = gray_matter_map_filenames[0]
    z_slice = 0
    display = plot_stat_map(
        weight_img, bg_img=bg_filename, display_mode="z", cut_coords=[z_slice]
    )
    display.title("SVM weights")
    show()




.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 159-161

Visualize the quality of predictions
------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 161-176

.. code-block:: default

    plt.figure(figsize=(6, 4.5))
    plt.suptitle(f"Decoder: Mean Absolute Error {prediction_score:.2f} years")
    linewidth = 3
    plt.plot(age_test, label="True age", linewidth=linewidth)
    plt.plot(age_pred, "--", c="g", label="Predicted age", linewidth=linewidth)
    plt.ylabel("age")
    plt.xlabel("subject")
    plt.legend(loc="best")
    plt.figure(figsize=(6, 4.5))
    plt.plot(
        age_test - age_pred, label="True age - predicted age", linewidth=linewidth
    )
    plt.xlabel("subject")
    plt.legend(loc="best")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :alt: Decoder: Mean Absolute Error 10.67 years
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :alt: plot oasis vbm
         :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fb5780eb940>



.. GENERATED FROM PYTHON SOURCE LINES 177-179

Inference with massively univariate model
-----------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 179-223

.. code-block:: default

    print("Massively univariate model")

    gm_maps_masked = NiftiMasker().fit_transform(gray_matter_map_filenames)
    data = variance_threshold.fit_transform(gm_maps_masked)

    # Statistical inference
    from nilearn.mass_univariate import permuted_ols

    # This can be changed to use more CPUs.
    neg_log_pvals, t_scores_original_data, _ = permuted_ols(
        age,
        data,  # + intercept as a covariate by default
        n_perm=2000,  # 1,000 in the interest of time; 10000 would be better
        verbose=1,  # display progress bar
        n_jobs=1,
    )
    signed_neg_log_pvals = neg_log_pvals * np.sign(t_scores_original_data)
    signed_neg_log_pvals_unmasked = nifti_masker.inverse_transform(
        variance_threshold.inverse_transform(signed_neg_log_pvals)
    )

    # Show results
    threshold = -np.log10(0.1)  # 10% corrected

    fig = plt.figure(figsize=(5.5, 7.5), facecolor="k")

    display = plot_stat_map(
        signed_neg_log_pvals_unmasked,
        bg_img=bg_filename,
        threshold=threshold,
        cmap=plt.cm.RdBu_r,
        display_mode="z",
        cut_coords=[z_slice],
        figure=fig,
    )
    title = (
        "Negative $\\log_{10}$ p-values" "\n(Non-parametric + max-type correction)"
    )
    display.title(title, y=1.2)

    n_detections = (get_data(signed_neg_log_pvals_unmasked) > threshold).sum()
    print(f"\n{int(n_detections)} detections")

    show()



.. image-sg:: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :alt: plot oasis vbm
   :srcset: /auto_examples/02_decoding/images/sphx_glr_plot_oasis_vbm_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Massively univariate model
    [Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.
    Job #1, processed 0/2000 permutations (0.00%, 389.02997970581055 seconds remaining)
    Job #1, processed 10/2000 permutations (0.50%, 52.25440001487732 seconds remaining)
    Job #1, processed 20/2000 permutations (1.00%, 47.91011953353882 seconds remaining)
    Job #1, processed 30/2000 permutations (1.50%, 46.64267118771871 seconds remaining)
    Job #1, processed 40/2000 permutations (2.00%, 45.57814598083496 seconds remaining)
    Job #1, processed 50/2000 permutations (2.50%, 44.790327072143555 seconds remaining)
    Job #1, processed 60/2000 permutations (3.00%, 44.38576976458232 seconds remaining)
    Job #1, processed 70/2000 permutations (3.50%, 44.18578348840986 seconds remaining)
    Job #1, processed 80/2000 permutations (4.00%, 43.720401763916016 seconds remaining)
    Job #1, processed 90/2000 permutations (4.50%, 43.35076093673706 seconds remaining)
    Job #1, processed 100/2000 permutations (5.00%, 43.01557755470276 seconds remaining)
    Job #1, processed 110/2000 permutations (5.50%, 42.94343993880533 seconds remaining)
    Job #1, processed 120/2000 permutations (6.00%, 42.738661766052246 seconds remaining)
    Job #1, processed 130/2000 permutations (6.50%, 42.415990132551926 seconds remaining)
    Job #1, processed 140/2000 permutations (7.00%, 42.157647473471506 seconds remaining)
    Job #1, processed 150/2000 permutations (7.50%, 41.85519083340963 seconds remaining)
    Job #1, processed 160/2000 permutations (8.00%, 41.578614354133606 seconds remaining)
    Job #1, processed 170/2000 permutations (8.50%, 41.329463103238275 seconds remaining)
    Job #1, processed 180/2000 permutations (9.00%, 41.05768444803026 seconds remaining)
    Job #1, processed 190/2000 permutations (9.50%, 40.835688038876185 seconds remaining)
    Job #1, processed 200/2000 permutations (10.00%, 40.611685037612915 seconds remaining)
    Job #1, processed 210/2000 permutations (10.50%, 40.41467670031956 seconds remaining)
    Job #1, processed 220/2000 permutations (11.00%, 40.21932617100803 seconds remaining)
    Job #1, processed 230/2000 permutations (11.50%, 39.98773601780767 seconds remaining)
    Job #1, processed 240/2000 permutations (12.00%, 39.799017906188965 seconds remaining)
    Job #1, processed 250/2000 permutations (12.50%, 39.576050996780396 seconds remaining)
    Job #1, processed 260/2000 permutations (13.00%, 39.35301975103525 seconds remaining)
    Job #1, processed 270/2000 permutations (13.50%, 39.14746207661099 seconds remaining)
    Job #1, processed 280/2000 permutations (14.00%, 38.92464590072632 seconds remaining)
    Job #1, processed 290/2000 permutations (14.50%, 38.68989137945504 seconds remaining)
    Job #1, processed 300/2000 permutations (15.00%, 38.51707736651103 seconds remaining)
    Job #1, processed 310/2000 permutations (15.50%, 38.30167672711034 seconds remaining)
    Job #1, processed 320/2000 permutations (16.00%, 38.095579862594604 seconds remaining)
    Job #1, processed 330/2000 permutations (16.50%, 37.84955815835433 seconds remaining)
    Job #1, processed 340/2000 permutations (17.00%, 37.67620041791131 seconds remaining)
    Job #1, processed 350/2000 permutations (17.50%, 37.423721756253926 seconds remaining)
    Job #1, processed 360/2000 permutations (18.00%, 37.17913473976983 seconds remaining)
    Job #1, processed 370/2000 permutations (18.50%, 36.94617558814384 seconds remaining)
    Job #1, processed 380/2000 permutations (19.00%, 36.71842104510257 seconds remaining)
    Job #1, processed 390/2000 permutations (19.50%, 36.50788301076645 seconds remaining)
    Job #1, processed 400/2000 permutations (20.00%, 36.280181884765625 seconds remaining)
    Job #1, processed 410/2000 permutations (20.50%, 36.04767863343402 seconds remaining)
    Job #1, processed 420/2000 permutations (21.00%, 35.80209769521441 seconds remaining)
    Job #1, processed 430/2000 permutations (21.50%, 35.57112119918646 seconds remaining)
    Job #1, processed 440/2000 permutations (22.00%, 35.33786838704889 seconds remaining)
    Job #1, processed 450/2000 permutations (22.50%, 35.102674908108185 seconds remaining)
    Job #1, processed 460/2000 permutations (23.00%, 34.89794195216635 seconds remaining)
    Job #1, processed 470/2000 permutations (23.50%, 34.677988574859945 seconds remaining)
    Job #1, processed 480/2000 permutations (24.00%, 34.49101308981577 seconds remaining)
    Job #1, processed 490/2000 permutations (24.50%, 34.25698891951114 seconds remaining)
    Job #1, processed 500/2000 permutations (25.00%, 34.02270483970642 seconds remaining)
    Job #1, processed 510/2000 permutations (25.50%, 33.80121909870821 seconds remaining)
    Job #1, processed 520/2000 permutations (26.00%, 33.59481492409339 seconds remaining)
    Job #1, processed 530/2000 permutations (26.50%, 33.35620274183885 seconds remaining)
    Job #1, processed 540/2000 permutations (27.00%, 33.12367659144931 seconds remaining)
    Job #1, processed 550/2000 permutations (27.50%, 32.8860728523948 seconds remaining)
    Job #1, processed 560/2000 permutations (28.00%, 32.65360062462943 seconds remaining)
    Job #1, processed 570/2000 permutations (28.50%, 32.42904361507349 seconds remaining)
    Job #1, processed 580/2000 permutations (29.00%, 32.19355824075896 seconds remaining)
    Job #1, processed 590/2000 permutations (29.50%, 31.979597301806432 seconds remaining)
    Job #1, processed 600/2000 permutations (30.00%, 31.741212685902916 seconds remaining)
    Job #1, processed 610/2000 permutations (30.50%, 31.533258508463376 seconds remaining)
    Job #1, processed 620/2000 permutations (31.00%, 31.29515380244101 seconds remaining)
    Job #1, processed 630/2000 permutations (31.50%, 31.067611819221856 seconds remaining)
    Job #1, processed 640/2000 permutations (32.00%, 30.831705182790756 seconds remaining)
    Job #1, processed 650/2000 permutations (32.50%, 30.609046917695267 seconds remaining)
    Job #1, processed 660/2000 permutations (33.00%, 30.38358439098705 seconds remaining)
    Job #1, processed 670/2000 permutations (33.50%, 30.157284320290408 seconds remaining)
    Job #1, processed 680/2000 permutations (34.00%, 29.953811855877145 seconds remaining)
    Job #1, processed 690/2000 permutations (34.50%, 29.721563035163328 seconds remaining)
    Job #1, processed 700/2000 permutations (35.00%, 29.5013655935015 seconds remaining)
    Job #1, processed 710/2000 permutations (35.50%, 29.264472081627645 seconds remaining)
    Job #1, processed 720/2000 permutations (36.00%, 29.036717732747395 seconds remaining)
    Job #1, processed 730/2000 permutations (36.50%, 28.803029778885517 seconds remaining)
    Job #1, processed 740/2000 permutations (37.00%, 28.56667063042924 seconds remaining)
    Job #1, processed 750/2000 permutations (37.50%, 28.3461860815684 seconds remaining)
    Job #1, processed 760/2000 permutations (38.00%, 28.125735420929757 seconds remaining)
    Job #1, processed 770/2000 permutations (38.50%, 27.894142191131394 seconds remaining)
    Job #1, processed 780/2000 permutations (39.00%, 27.66657476547437 seconds remaining)
    Job #1, processed 790/2000 permutations (39.50%, 27.45312722121613 seconds remaining)
    Job #1, processed 800/2000 permutations (40.00%, 27.231661319732666 seconds remaining)
    Job #1, processed 810/2000 permutations (40.50%, 27.006401750776504 seconds remaining)
    Job #1, processed 820/2000 permutations (41.00%, 26.774961878613727 seconds remaining)
    Job #1, processed 830/2000 permutations (41.50%, 26.54454648351095 seconds remaining)
    Job #1, processed 840/2000 permutations (42.00%, 26.328775156111945 seconds remaining)
    Job #1, processed 850/2000 permutations (42.50%, 26.097991704940796 seconds remaining)
    Job #1, processed 860/2000 permutations (43.00%, 25.86744551880415 seconds remaining)
    Job #1, processed 870/2000 permutations (43.50%, 25.638328702970483 seconds remaining)
    Job #1, processed 880/2000 permutations (44.00%, 25.43141438744285 seconds remaining)
    Job #1, processed 890/2000 permutations (44.50%, 25.20454186268067 seconds remaining)
    Job #1, processed 900/2000 permutations (45.00%, 24.981059312820438 seconds remaining)
    Job #1, processed 910/2000 permutations (45.50%, 24.755437012557145 seconds remaining)
    Job #1, processed 920/2000 permutations (46.00%, 24.53343340624934 seconds remaining)
    Job #1, processed 930/2000 permutations (46.50%, 24.32455442797753 seconds remaining)
    Job #1, processed 940/2000 permutations (47.00%, 24.102508448539897 seconds remaining)
    Job #1, processed 950/2000 permutations (47.50%, 23.87175886254562 seconds remaining)
    Job #1, processed 960/2000 permutations (48.00%, 23.652547299861908 seconds remaining)
    Job #1, processed 970/2000 permutations (48.50%, 23.439832825021647 seconds remaining)
    Job #1, processed 980/2000 permutations (49.00%, 23.20733889268369 seconds remaining)
    Job #1, processed 990/2000 permutations (49.50%, 22.987281982344808 seconds remaining)
    Job #1, processed 1000/2000 permutations (50.00%, 22.76302194595337 seconds remaining)
    Job #1, processed 1010/2000 permutations (50.50%, 22.543270288127484 seconds remaining)
    Job #1, processed 1020/2000 permutations (51.00%, 22.330455887551402 seconds remaining)
    Job #1, processed 1030/2000 permutations (51.50%, 22.09742122483485 seconds remaining)
    Job #1, processed 1040/2000 permutations (52.00%, 21.875400836651142 seconds remaining)
    Job #1, processed 1050/2000 permutations (52.50%, 21.658303907939366 seconds remaining)
    Job #1, processed 1060/2000 permutations (53.00%, 21.422375580049913 seconds remaining)
    Job #1, processed 1070/2000 permutations (53.50%, 21.19186013881291 seconds remaining)
    Job #1, processed 1080/2000 permutations (54.00%, 20.962797111935085 seconds remaining)
    Job #1, processed 1090/2000 permutations (54.50%, 20.73106749342122 seconds remaining)
    Job #1, processed 1100/2000 permutations (55.00%, 20.511101440949876 seconds remaining)
    Job #1, processed 1110/2000 permutations (55.50%, 20.282150322252566 seconds remaining)
    Job #1, processed 1120/2000 permutations (56.00%, 20.063659821237835 seconds remaining)
    Job #1, processed 1130/2000 permutations (56.50%, 19.83710627640243 seconds remaining)
    Job #1, processed 1140/2000 permutations (57.00%, 19.61031648987218 seconds remaining)
    Job #1, processed 1150/2000 permutations (57.50%, 19.387812313826185 seconds remaining)
    Job #1, processed 1160/2000 permutations (58.00%, 19.15770408202862 seconds remaining)
    Job #1, processed 1170/2000 permutations (58.50%, 18.92913179519849 seconds remaining)
    Job #1, processed 1180/2000 permutations (59.00%, 18.700113219729925 seconds remaining)
    Job #1, processed 1190/2000 permutations (59.50%, 18.468936850042905 seconds remaining)
    Job #1, processed 1200/2000 permutations (60.00%, 18.23857529958089 seconds remaining)
    Job #1, processed 1210/2000 permutations (60.50%, 18.005813263664564 seconds remaining)
    Job #1, processed 1220/2000 permutations (61.00%, 17.779697000003253 seconds remaining)
    Job #1, processed 1230/2000 permutations (61.50%, 17.54682291813982 seconds remaining)
    Job #1, processed 1240/2000 permutations (62.00%, 17.318922312028945 seconds remaining)
    Job #1, processed 1250/2000 permutations (62.50%, 17.089945220947264 seconds remaining)
    Job #1, processed 1260/2000 permutations (63.00%, 16.862696227573213 seconds remaining)
    Job #1, processed 1270/2000 permutations (63.50%, 16.635670669435516 seconds remaining)
    Job #1, processed 1280/2000 permutations (64.00%, 16.40939372777939 seconds remaining)
    Job #1, processed 1290/2000 permutations (64.50%, 16.179878467737243 seconds remaining)
    Job #1, processed 1300/2000 permutations (65.00%, 15.950399087025568 seconds remaining)
    Job #1, processed 1310/2000 permutations (65.50%, 15.721860496142439 seconds remaining)
    Job #1, processed 1320/2000 permutations (66.00%, 15.49109215447397 seconds remaining)
    Job #1, processed 1330/2000 permutations (66.50%, 15.267628460002125 seconds remaining)
    Job #1, processed 1340/2000 permutations (67.00%, 15.035231736168932 seconds remaining)
    Job #1, processed 1350/2000 permutations (67.50%, 14.806355555852253 seconds remaining)
    Job #1, processed 1360/2000 permutations (68.00%, 14.577330308801987 seconds remaining)
    Job #1, processed 1370/2000 permutations (68.50%, 14.351794825853222 seconds remaining)
    Job #1, processed 1380/2000 permutations (69.00%, 14.120767299679743 seconds remaining)
    Job #1, processed 1390/2000 permutations (69.50%, 13.893106023184687 seconds remaining)
    Job #1, processed 1400/2000 permutations (70.00%, 13.664386204310825 seconds remaining)
    Job #1, processed 1410/2000 permutations (70.50%, 13.43615760870859 seconds remaining)
    Job #1, processed 1420/2000 permutations (71.00%, 13.211230919394694 seconds remaining)
    Job #1, processed 1430/2000 permutations (71.50%, 12.982281026306685 seconds remaining)
    Job #1, processed 1440/2000 permutations (72.00%, 12.753834313816494 seconds remaining)
    Job #1, processed 1450/2000 permutations (72.50%, 12.524422974422059 seconds remaining)
    Job #1, processed 1460/2000 permutations (73.00%, 12.297969102859497 seconds remaining)
    Job #1, processed 1470/2000 permutations (73.50%, 12.07026465085088 seconds remaining)
    Job #1, processed 1480/2000 permutations (74.00%, 11.842802982072573 seconds remaining)
    Job #1, processed 1490/2000 permutations (74.50%, 11.614145403740391 seconds remaining)
    Job #1, processed 1500/2000 permutations (75.00%, 11.38534418741862 seconds remaining)
    Job #1, processed 1510/2000 permutations (75.50%, 11.158758910286505 seconds remaining)
    Job #1, processed 1520/2000 permutations (76.00%, 10.929328792973568 seconds remaining)
    Job #1, processed 1530/2000 permutations (76.50%, 10.698167105905371 seconds remaining)
    Job #1, processed 1540/2000 permutations (77.00%, 10.469102419816053 seconds remaining)
    Job #1, processed 1550/2000 permutations (77.50%, 10.24337076371716 seconds remaining)
    Job #1, processed 1560/2000 permutations (78.00%, 10.01381246248881 seconds remaining)
    Job #1, processed 1570/2000 permutations (78.50%, 9.784339866820414 seconds remaining)
    Job #1, processed 1580/2000 permutations (79.00%, 9.556616605082644 seconds remaining)
    Job #1, processed 1590/2000 permutations (79.50%, 9.327869830641356 seconds remaining)
    Job #1, processed 1600/2000 permutations (80.00%, 9.101372480392456 seconds remaining)
    Job #1, processed 1610/2000 permutations (80.50%, 8.87237821158415 seconds remaining)
    Job #1, processed 1620/2000 permutations (81.00%, 8.644011691764549 seconds remaining)
    Job #1, processed 1630/2000 permutations (81.50%, 8.41802360236279 seconds remaining)
    Job #1, processed 1640/2000 permutations (82.00%, 8.192912159896478 seconds remaining)
    Job #1, processed 1650/2000 permutations (82.50%, 7.964276429378625 seconds remaining)
    Job #1, processed 1660/2000 permutations (83.00%, 7.73676107590457 seconds remaining)
    Job #1, processed 1670/2000 permutations (83.50%, 7.509637702724891 seconds remaining)
    Job #1, processed 1680/2000 permutations (84.00%, 7.281175340924944 seconds remaining)
    Job #1, processed 1690/2000 permutations (84.50%, 7.053886352911503 seconds remaining)
    Job #1, processed 1700/2000 permutations (85.00%, 6.825683607774622 seconds remaining)
    Job #1, processed 1710/2000 permutations (85.50%, 6.59826017680921 seconds remaining)
    Job #1, processed 1720/2000 permutations (86.00%, 6.3696061511372415 seconds remaining)
    Job #1, processed 1730/2000 permutations (86.50%, 6.143362089388632 seconds remaining)
    Job #1, processed 1740/2000 permutations (87.00%, 5.91571077533152 seconds remaining)
    Job #1, processed 1750/2000 permutations (87.50%, 5.68746474811009 seconds remaining)
    Job #1, processed 1760/2000 permutations (88.00%, 5.460232745517383 seconds remaining)
    Job #1, processed 1770/2000 permutations (88.50%, 5.232554454587947 seconds remaining)
    Job #1, processed 1780/2000 permutations (89.00%, 5.005523946847808 seconds remaining)
    Job #1, processed 1790/2000 permutations (89.50%, 4.778068966039732 seconds remaining)
    Job #1, processed 1800/2000 permutations (90.00%, 4.55039037598504 seconds remaining)
    Job #1, processed 1810/2000 permutations (90.50%, 4.322490540657254 seconds remaining)
    Job #1, processed 1820/2000 permutations (91.00%, 4.096281656852135 seconds remaining)
    Job #1, processed 1830/2000 permutations (91.50%, 3.868208225958986 seconds remaining)
    Job #1, processed 1840/2000 permutations (92.00%, 3.6405696868896484 seconds remaining)
    Job #1, processed 1850/2000 permutations (92.50%, 3.4126769078744426 seconds remaining)
    Job #1, processed 1860/2000 permutations (93.00%, 3.184808920788509 seconds remaining)
    Job #1, processed 1870/2000 permutations (93.50%, 2.958250149048586 seconds remaining)
    Job #1, processed 1880/2000 permutations (94.00%, 2.730524996493725 seconds remaining)
    Job #1, processed 1890/2000 permutations (94.50%, 2.5027553745047753 seconds remaining)
    Job #1, processed 1900/2000 permutations (95.00%, 2.275049473109998 seconds remaining)
    Job #1, processed 1910/2000 permutations (95.50%, 2.047951795667878 seconds remaining)
    Job #1, processed 1920/2000 permutations (96.00%, 1.8202945093313851 seconds remaining)
    Job #1, processed 1930/2000 permutations (96.50%, 1.592596703860426 seconds remaining)
    Job #1, processed 1940/2000 permutations (97.00%, 1.364885765252654 seconds remaining)
    Job #1, processed 1950/2000 permutations (97.50%, 1.1376777245448186 seconds remaining)
    Job #1, processed 1960/2000 permutations (98.00%, 0.9100576663503841 seconds remaining)
    Job #1, processed 1970/2000 permutations (98.50%, 0.6825030443026935 seconds remaining)
    Job #1, processed 1980/2000 permutations (99.00%, 0.4550110137823857 seconds remaining)
    Job #1, processed 1990/2000 permutations (99.50%, 0.22751615993940652 seconds remaining)
    [Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   45.5s finished

    1965 detections





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  29.107 seconds)

**Estimated memory usage:**  1902 MB


.. _sphx_glr_download_auto_examples_02_decoding_plot_oasis_vbm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/0.10.1?urlpath=lab/tree/notebooks/auto_examples/02_decoding/plot_oasis_vbm.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_oasis_vbm.py <plot_oasis_vbm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_oasis_vbm.ipynb <plot_oasis_vbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
