
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/04_glm_first_level/plot_write_events_file.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_04_glm_first_level_plot_write_events_file.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_04_glm_first_level_plot_write_events_file.py:


Generate an events.tsv file for the NeuroSpin localizer task
============================================================

Create a :term:`BIDS`-compatible events.tsv file from onset/trial-type
information.

The protocol described is the so-called "ARCHI Standard" functional localizer
task.

For details on the task, please see:

Pinel, P., Thirion, B., Meriaux, S. et al.
Fast reproducible identification and large-scale databasing of individual
functional cognitive networks.
BMC Neurosci 8, 91 (2007). https://doi.org/10.1186/1471-2202-8-91

.. GENERATED FROM PYTHON SOURCE LINES 18-22

.. code-block:: default



    print(__doc__)








.. GENERATED FROM PYTHON SOURCE LINES 23-26

Define the onset times in seconds. These are typically extracted from
the stimulation software used, but we will use hardcoded values in this
example.

.. GENERATED FROM PYTHON SOURCE LINES 26-42

.. code-block:: default

    import numpy as np

    # fmt: off
    onsets = [
        0.0,   2.4,   8.7,   11.4,  15.0,  18.0,  20.7,  23.7,  26.7,  29.7, # noqa
        33.0,  35.4,  39.0,  41.7,  44.7,  48.0,  56.4,  59.7,  62.4,  69.0, # noqa
        71.4,  75.0,  83.4,  87.0,  89.7,  96.0,  108.0, 116.7, 119.4, 122.7, # noqa
        125.4, 131.4, 135.0, 137.7, 140.4, 143.4, 146.7, 149.4, 153.0, 156.0,
        159.0, 162.0, 164.4, 167.7, 170.4, 173.7, 176.7, 188.4, 191.7, 195.0,
        198.0, 201.0, 203.7, 207.0, 210.0, 212.7, 215.7, 218.7, 221.4, 224.7,
        227.7, 230.7, 234.0, 236.7, 246.0, 248.4, 251.7, 254.7, 257.4, 260.4,
        264.0, 266.7, 269.7, 275.4, 278.4, 284.4, 288.0, 291.0, 293.4, 296.7,
    ]
    # fmt: on
    onsets = np.array(onsets)








.. GENERATED FROM PYTHON SOURCE LINES 43-45

Associated trial types: these are numbered between 0 and 9, hence
corresponding to 10 different conditions.

.. GENERATED FROM PYTHON SOURCE LINES 45-56

.. code-block:: default


    # fmt: off
    trial_type_idx = [
        7, 7, 0, 2, 9, 4, 9, 3, 5, 9, 1, 6, 8, 8, 6, 6, 8, 0, 3, 4, 5, 8, 6,
        2, 9, 1, 6, 5, 9, 1, 7, 8, 6, 6, 1, 2, 9, 0, 7, 1, 8, 2, 7, 8, 3, 6,
        0, 0, 6, 8, 7, 7, 1, 1, 1, 5, 5, 0, 7, 0, 4, 2, 7, 9, 8, 0, 6, 3, 3,
        7, 1, 0, 0, 4, 1, 9, 8, 4, 9, 9
    ]
    # fmt: on
    trial_type_idx = np.array(trial_type_idx)








.. GENERATED FROM PYTHON SOURCE LINES 57-59

We may want to map these indices to explicit condition names.
For that, we define a list of 10 strings.

.. GENERATED FROM PYTHON SOURCE LINES 59-74

.. code-block:: default

    condition_ids = [
        "horizontal checkerboard",
        "vertical checkerboard",
        "right button press, auditory instructions",
        "left button press, auditory instructions",
        "right button press, visual instructions",
        "left button press, visual instructions",
        "mental computation, auditory instructions",
        "mental computation, visual instructions",
        "visual sentence",
        "auditory sentence",
    ]

    trial_types = [condition_ids[i] for i in trial_type_idx]








.. GENERATED FROM PYTHON SOURCE LINES 75-77

We must also define a duration (required by :term:`BIDS` conventions).
In this case, all trials lasted one second.

.. GENERATED FROM PYTHON SOURCE LINES 77-80

.. code-block:: default


    durations = np.ones_like(onsets)








.. GENERATED FROM PYTHON SOURCE LINES 81-82

Form a pandas DataFrame from this information.

.. GENERATED FROM PYTHON SOURCE LINES 82-92

.. code-block:: default

    import pandas as pd

    events = pd.DataFrame(
        {
            "trial_type": trial_types,
            "onset": onsets,
            "duration": durations,
        }
    )








.. GENERATED FROM PYTHON SOURCE LINES 93-94

Take a look at the new DataFrame

.. GENERATED FROM PYTHON SOURCE LINES 94-96

.. code-block:: default

    events






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>trial_type</th>
          <th>onset</th>
          <th>duration</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>mental computation, visual instructions</td>
          <td>0.0</td>
          <td>1.0</td>
        </tr>
        <tr>
          <th>1</th>
          <td>mental computation, visual instructions</td>
          <td>2.4</td>
          <td>1.0</td>
        </tr>
        <tr>
          <th>2</th>
          <td>horizontal checkerboard</td>
          <td>8.7</td>
          <td>1.0</td>
        </tr>
        <tr>
          <th>3</th>
          <td>right button press, auditory instructions</td>
          <td>11.4</td>
          <td>1.0</td>
        </tr>
        <tr>
          <th>4</th>
          <td>auditory sentence</td>
          <td>15.0</td>
          <td>1.0</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>75</th>
          <td>auditory sentence</td>
          <td>284.4</td>
          <td>1.0</td>
        </tr>
        <tr>
          <th>76</th>
          <td>visual sentence</td>
          <td>288.0</td>
          <td>1.0</td>
        </tr>
        <tr>
          <th>77</th>
          <td>right button press, visual instructions</td>
          <td>291.0</td>
          <td>1.0</td>
        </tr>
        <tr>
          <th>78</th>
          <td>auditory sentence</td>
          <td>293.4</td>
          <td>1.0</td>
        </tr>
        <tr>
          <th>79</th>
          <td>auditory sentence</td>
          <td>296.7</td>
          <td>1.0</td>
        </tr>
      </tbody>
    </table>
    <p>80 rows Ã— 3 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 97-98

Export them to a tsv file.

.. GENERATED FROM PYTHON SOURCE LINES 98-107

.. code-block:: default

    from pathlib import Path

    outdir = Path("results")
    if not outdir.exists():
        outdir.mkdir()
    tsvfile = outdir / "localizer_events.tsv"
    events.to_csv(tsvfile, sep="\t", index=False)
    print(f"The event information has been saved to {tsvfile}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The event information has been saved to results/localizer_events.tsv




.. GENERATED FROM PYTHON SOURCE LINES 108-110

Optionally, the events can be visualized using the
:func:`~nilearn.plotting.plot_event` function.

.. GENERATED FROM PYTHON SOURCE LINES 110-115

.. code-block:: default

    import matplotlib.pyplot as plt
    from nilearn.plotting import plot_event

    plot_event(events, figsize=(15, 5))
    plt.show()



.. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_write_events_file_001.png
   :alt: plot write events file
   :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_write_events_file_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  6.034 seconds)

**Estimated memory usage:**  9 MB


.. _sphx_glr_download_auto_examples_04_glm_first_level_plot_write_events_file.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/0.10.1?urlpath=lab/tree/notebooks/auto_examples/04_glm_first_level/plot_write_events_file.ipynb
        :alt: Launch binder
        :width: 150 px



    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_write_events_file.py <plot_write_events_file.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_write_events_file.ipynb <plot_write_events_file.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
