Search.setIndex({"docnames": ["authors", "auto_examples/00_tutorials/index", "auto_examples/00_tutorials/plot_3d_and_4d_niimg", "auto_examples/00_tutorials/plot_decoding_tutorial", "auto_examples/00_tutorials/plot_nilearn_101", "auto_examples/00_tutorials/plot_python_101", "auto_examples/00_tutorials/plot_single_subject_single_run", "auto_examples/00_tutorials/sg_execution_times", "auto_examples/01_plotting/index", "auto_examples/01_plotting/plot_3d_map_to_surface_projection", "auto_examples/01_plotting/plot_atlas", "auto_examples/01_plotting/plot_carpet", "auto_examples/01_plotting/plot_colormaps", "auto_examples/01_plotting/plot_demo_glass_brain", "auto_examples/01_plotting/plot_demo_glass_brain_extensive", "auto_examples/01_plotting/plot_demo_more_plotting", "auto_examples/01_plotting/plot_demo_plotting", "auto_examples/01_plotting/plot_dim_plotting", "auto_examples/01_plotting/plot_haxby_masks", "auto_examples/01_plotting/plot_multiscale_parcellations", "auto_examples/01_plotting/plot_overlay", "auto_examples/01_plotting/plot_prob_atlas", "auto_examples/01_plotting/plot_surf_atlas", "auto_examples/01_plotting/plot_surf_stat_map", "auto_examples/01_plotting/plot_surface_projection_strategies", "auto_examples/01_plotting/plot_visualization", "auto_examples/01_plotting/plot_visualize_megatrawls_netmats", "auto_examples/01_plotting/sg_execution_times", "auto_examples/02_decoding/index", "auto_examples/02_decoding/plot_haxby_anova_svm", "auto_examples/02_decoding/plot_haxby_different_estimators", "auto_examples/02_decoding/plot_haxby_frem", "auto_examples/02_decoding/plot_haxby_full_analysis", "auto_examples/02_decoding/plot_haxby_glm_decoding", "auto_examples/02_decoding/plot_haxby_grid_search", "auto_examples/02_decoding/plot_haxby_multiclass", "auto_examples/02_decoding/plot_haxby_searchlight", "auto_examples/02_decoding/plot_haxby_searchlight_surface", "auto_examples/02_decoding/plot_haxby_stimuli", "auto_examples/02_decoding/plot_mixed_gambles_frem", "auto_examples/02_decoding/plot_miyawaki_encoding", "auto_examples/02_decoding/plot_miyawaki_reconstruction", "auto_examples/02_decoding/plot_oasis_vbm", "auto_examples/02_decoding/plot_oasis_vbm_space_net", "auto_examples/02_decoding/plot_simulated_data", "auto_examples/02_decoding/sg_execution_times", "auto_examples/03_connectivity/index", "auto_examples/03_connectivity/plot_atlas_comparison", "auto_examples/03_connectivity/plot_compare_decomposition", "auto_examples/03_connectivity/plot_data_driven_parcellations", "auto_examples/03_connectivity/plot_extract_regions_dictlearning_maps", "auto_examples/03_connectivity/plot_group_level_connectivity", "auto_examples/03_connectivity/plot_inverse_covariance_connectome", "auto_examples/03_connectivity/plot_multi_subject_connectome", "auto_examples/03_connectivity/plot_probabilistic_atlas_extraction", "auto_examples/03_connectivity/plot_seed_to_voxel_correlation", "auto_examples/03_connectivity/plot_signal_extraction", "auto_examples/03_connectivity/plot_simulated_connectome", "auto_examples/03_connectivity/plot_sphere_based_connectome", "auto_examples/03_connectivity/sg_execution_times", "auto_examples/04_glm_first_level/index", "auto_examples/04_glm_first_level/plot_adhd_dmn", "auto_examples/04_glm_first_level/plot_bids_features", "auto_examples/04_glm_first_level/plot_design_matrix", "auto_examples/04_glm_first_level/plot_fiac_analysis", "auto_examples/04_glm_first_level/plot_fir_model", "auto_examples/04_glm_first_level/plot_first_level_details", "auto_examples/04_glm_first_level/plot_fixed_effects", "auto_examples/04_glm_first_level/plot_hrf", "auto_examples/04_glm_first_level/plot_localizer_surface_analysis", "auto_examples/04_glm_first_level/plot_predictions_residuals", "auto_examples/04_glm_first_level/plot_spm_multimodal_faces", "auto_examples/04_glm_first_level/plot_write_events_file", "auto_examples/04_glm_first_level/sg_execution_times", "auto_examples/05_glm_second_level/index", "auto_examples/05_glm_second_level/plot_oasis", "auto_examples/05_glm_second_level/plot_proportion_activated_voxels", "auto_examples/05_glm_second_level/plot_second_level_association_test", "auto_examples/05_glm_second_level/plot_second_level_design_matrix", "auto_examples/05_glm_second_level/plot_second_level_one_sample_test", "auto_examples/05_glm_second_level/plot_second_level_two_sample_test", "auto_examples/05_glm_second_level/plot_thresholding", "auto_examples/05_glm_second_level/sg_execution_times", "auto_examples/06_manipulating_images/index", "auto_examples/06_manipulating_images/plot_affine_transformation", "auto_examples/06_manipulating_images/plot_compare_mean_image", "auto_examples/06_manipulating_images/plot_extract_regions_labels_image", "auto_examples/06_manipulating_images/plot_extract_rois_smith_atlas", "auto_examples/06_manipulating_images/plot_extract_rois_statistical_maps", "auto_examples/06_manipulating_images/plot_mask_computation", "auto_examples/06_manipulating_images/plot_negate_image", "auto_examples/06_manipulating_images/plot_nifti_labels_simple", "auto_examples/06_manipulating_images/plot_nifti_simple", "auto_examples/06_manipulating_images/plot_resample_to_template", "auto_examples/06_manipulating_images/plot_roi_extraction", "auto_examples/06_manipulating_images/plot_smooth_mean_image", "auto_examples/06_manipulating_images/sg_execution_times", "auto_examples/07_advanced/index", "auto_examples/07_advanced/plot_advanced_decoding_scikit", "auto_examples/07_advanced/plot_age_group_prediction_cross_val", "auto_examples/07_advanced/plot_beta_series", "auto_examples/07_advanced/plot_bids_analysis", "auto_examples/07_advanced/plot_haxby_mass_univariate", "auto_examples/07_advanced/plot_ica_neurovault", "auto_examples/07_advanced/plot_ica_resting_state", "auto_examples/07_advanced/plot_localizer_mass_univariate_methods", "auto_examples/07_advanced/plot_localizer_simple_analysis", "auto_examples/07_advanced/plot_neurovault_meta_analysis", "auto_examples/07_advanced/plot_surface_bids_analysis", "auto_examples/07_advanced/sg_execution_times", "auto_examples/08_experimental/index", "auto_examples/08_experimental/plot_surface_image_and_maskers", "auto_examples/08_experimental/sg_execution_times", "auto_examples/index", "bibliography", "building_blocks/index", "building_blocks/manual_pipeline", "building_blocks/neurovault", "changes/0.1.0", "changes/0.1.1", "changes/0.1.2", "changes/0.1.3", "changes/0.1.4", "changes/0.10.0", "changes/0.10.1", "changes/0.10.2", "changes/0.2.0", "changes/0.2.1", "changes/0.2.2", "changes/0.2.3", "changes/0.2.4", "changes/0.2.5", "changes/0.2.6", "changes/0.3.0", "changes/0.3.1", "changes/0.4.0", "changes/0.4.1", "changes/0.4.2", "changes/0.5.0", "changes/0.5.1", "changes/0.5.2", "changes/0.6.0", "changes/0.6.1", "changes/0.6.2", "changes/0.7.0", "changes/0.7.1", "changes/0.8.0", "changes/0.8.1", "changes/0.9.0", "changes/0.9.1", "changes/0.9.2", "changes/names", "changes/whats_new", "connectivity/connectome_extraction", "connectivity/functional_connectomes", "connectivity/index", "connectivity/parcellating", "connectivity/region_extraction", "connectivity/resting_state_networks", "decoding/decoding_intro", "decoding/estimator_choice", "decoding/frem", "decoding/going_further", "decoding/index", "decoding/searchlight", "decoding/space_net", "developers/group_sparse_covariance", "development", "glm/first_level_model", "glm/glm_intro", "glm/index", "glm/second_level_model", "glossary", "index", "introduction", "maintenance", "manipulating_images/index", "manipulating_images/input_output", "manipulating_images/manipulating_images", "manipulating_images/masker_objects", "modules/connectome", "modules/datasets", "modules/decoding", "modules/decomposition", "modules/experimental", "modules/generated/nilearn.connectome.ConnectivityMeasure", "modules/generated/nilearn.connectome.GroupSparseCovariance", "modules/generated/nilearn.connectome.GroupSparseCovarianceCV", "modules/generated/nilearn.connectome.cov_to_corr", "modules/generated/nilearn.connectome.group_sparse_covariance", "modules/generated/nilearn.connectome.prec_to_partial", "modules/generated/nilearn.connectome.sym_matrix_to_vec", "modules/generated/nilearn.connectome.vec_to_sym_matrix", "modules/generated/nilearn.datasets.fetch_abide_pcp", "modules/generated/nilearn.datasets.fetch_adhd", "modules/generated/nilearn.datasets.fetch_atlas_aal", "modules/generated/nilearn.datasets.fetch_atlas_allen_2011", "modules/generated/nilearn.datasets.fetch_atlas_basc_multiscale_2015", "modules/generated/nilearn.datasets.fetch_atlas_craddock_2012", "modules/generated/nilearn.datasets.fetch_atlas_destrieux_2009", "modules/generated/nilearn.datasets.fetch_atlas_difumo", "modules/generated/nilearn.datasets.fetch_atlas_harvard_oxford", "modules/generated/nilearn.datasets.fetch_atlas_juelich", "modules/generated/nilearn.datasets.fetch_atlas_msdl", "modules/generated/nilearn.datasets.fetch_atlas_pauli_2017", "modules/generated/nilearn.datasets.fetch_atlas_schaefer_2018", "modules/generated/nilearn.datasets.fetch_atlas_smith_2009", "modules/generated/nilearn.datasets.fetch_atlas_surf_destrieux", "modules/generated/nilearn.datasets.fetch_atlas_talairach", "modules/generated/nilearn.datasets.fetch_atlas_yeo_2011", "modules/generated/nilearn.datasets.fetch_bids_langloc_dataset", "modules/generated/nilearn.datasets.fetch_coords_dosenbach_2010", "modules/generated/nilearn.datasets.fetch_coords_power_2011", "modules/generated/nilearn.datasets.fetch_coords_seitzman_2018", "modules/generated/nilearn.datasets.fetch_development_fmri", "modules/generated/nilearn.datasets.fetch_ds000030_urls", "modules/generated/nilearn.datasets.fetch_fiac_first_level", "modules/generated/nilearn.datasets.fetch_haxby", "modules/generated/nilearn.datasets.fetch_icbm152_2009", "modules/generated/nilearn.datasets.fetch_icbm152_brain_gm_mask", "modules/generated/nilearn.datasets.fetch_language_localizer_demo_dataset", "modules/generated/nilearn.datasets.fetch_localizer_button_task", "modules/generated/nilearn.datasets.fetch_localizer_calculation_task", "modules/generated/nilearn.datasets.fetch_localizer_contrasts", "modules/generated/nilearn.datasets.fetch_localizer_first_level", "modules/generated/nilearn.datasets.fetch_megatrawls_netmats", "modules/generated/nilearn.datasets.fetch_mixed_gambles", "modules/generated/nilearn.datasets.fetch_miyawaki2008", "modules/generated/nilearn.datasets.fetch_neurovault", "modules/generated/nilearn.datasets.fetch_neurovault_auditory_computation_task", "modules/generated/nilearn.datasets.fetch_neurovault_ids", "modules/generated/nilearn.datasets.fetch_neurovault_motor_task", "modules/generated/nilearn.datasets.fetch_oasis_vbm", "modules/generated/nilearn.datasets.fetch_openneuro_dataset", "modules/generated/nilearn.datasets.fetch_openneuro_dataset_index", "modules/generated/nilearn.datasets.fetch_spm_auditory", "modules/generated/nilearn.datasets.fetch_spm_multimodal_fmri", "modules/generated/nilearn.datasets.fetch_surf_fsaverage", "modules/generated/nilearn.datasets.fetch_surf_nki_enhanced", "modules/generated/nilearn.datasets.get_data_dirs", "modules/generated/nilearn.datasets.load_mni152_brain_mask", "modules/generated/nilearn.datasets.load_mni152_gm_mask", "modules/generated/nilearn.datasets.load_mni152_gm_template", "modules/generated/nilearn.datasets.load_mni152_template", "modules/generated/nilearn.datasets.load_mni152_wm_mask", "modules/generated/nilearn.datasets.load_mni152_wm_template", "modules/generated/nilearn.datasets.load_sample_motor_activation_image", "modules/generated/nilearn.datasets.patch_openneuro_dataset", "modules/generated/nilearn.datasets.select_from_index", "modules/generated/nilearn.decoding.Decoder", "modules/generated/nilearn.decoding.DecoderRegressor", "modules/generated/nilearn.decoding.FREMClassifier", "modules/generated/nilearn.decoding.FREMRegressor", "modules/generated/nilearn.decoding.SearchLight", "modules/generated/nilearn.decoding.SpaceNetClassifier", "modules/generated/nilearn.decoding.SpaceNetRegressor", "modules/generated/nilearn.decomposition.CanICA", "modules/generated/nilearn.decomposition.DictLearning", "modules/generated/nilearn.experimental.surface.FileMesh", "modules/generated/nilearn.experimental.surface.InMemoryMesh", "modules/generated/nilearn.experimental.surface.Mesh", "modules/generated/nilearn.experimental.surface.PolyMesh", "modules/generated/nilearn.experimental.surface.SurfaceImage", "modules/generated/nilearn.experimental.surface.SurfaceLabelsMasker", "modules/generated/nilearn.experimental.surface.SurfaceMasker", "modules/generated/nilearn.experimental.surface.fetch_destrieux", "modules/generated/nilearn.experimental.surface.fetch_nki", "modules/generated/nilearn.experimental.surface.load_fsaverage", "modules/generated/nilearn.glm.ARModel", "modules/generated/nilearn.glm.Contrast", "modules/generated/nilearn.glm.FContrastResults", "modules/generated/nilearn.glm.LikelihoodModelResults", "modules/generated/nilearn.glm.OLSModel", "modules/generated/nilearn.glm.RegressionResults", "modules/generated/nilearn.glm.SimpleRegressionResults", "modules/generated/nilearn.glm.TContrastResults", "modules/generated/nilearn.glm.cluster_level_inference", "modules/generated/nilearn.glm.compute_contrast", "modules/generated/nilearn.glm.compute_fixed_effects", "modules/generated/nilearn.glm.expression_to_contrast_vector", "modules/generated/nilearn.glm.fdr_threshold", "modules/generated/nilearn.glm.first_level.FirstLevelModel", "modules/generated/nilearn.glm.first_level.check_design_matrix", "modules/generated/nilearn.glm.first_level.compute_regressor", "modules/generated/nilearn.glm.first_level.first_level_from_bids", "modules/generated/nilearn.glm.first_level.glover_dispersion_derivative", "modules/generated/nilearn.glm.first_level.glover_hrf", "modules/generated/nilearn.glm.first_level.glover_time_derivative", "modules/generated/nilearn.glm.first_level.make_first_level_design_matrix", "modules/generated/nilearn.glm.first_level.mean_scaling", "modules/generated/nilearn.glm.first_level.run_glm", "modules/generated/nilearn.glm.first_level.spm_dispersion_derivative", "modules/generated/nilearn.glm.first_level.spm_hrf", "modules/generated/nilearn.glm.first_level.spm_time_derivative", "modules/generated/nilearn.glm.second_level.SecondLevelModel", "modules/generated/nilearn.glm.second_level.make_second_level_design_matrix", "modules/generated/nilearn.glm.second_level.non_parametric_inference", "modules/generated/nilearn.glm.threshold_stats_img", "modules/generated/nilearn.image.binarize_img", "modules/generated/nilearn.image.clean_img", "modules/generated/nilearn.image.concat_imgs", "modules/generated/nilearn.image.coord_transform", "modules/generated/nilearn.image.copy_img", "modules/generated/nilearn.image.crop_img", "modules/generated/nilearn.image.get_data", "modules/generated/nilearn.image.high_variance_confounds", "modules/generated/nilearn.image.index_img", "modules/generated/nilearn.image.iter_img", "modules/generated/nilearn.image.largest_connected_component_img", "modules/generated/nilearn.image.load_img", "modules/generated/nilearn.image.math_img", "modules/generated/nilearn.image.mean_img", "modules/generated/nilearn.image.new_img_like", "modules/generated/nilearn.image.reorder_img", "modules/generated/nilearn.image.resample_img", "modules/generated/nilearn.image.resample_to_img", "modules/generated/nilearn.image.smooth_img", "modules/generated/nilearn.image.swap_img_hemispheres", "modules/generated/nilearn.image.threshold_img", "modules/generated/nilearn.interfaces.bids.get_bids_files", "modules/generated/nilearn.interfaces.bids.parse_bids_filename", "modules/generated/nilearn.interfaces.bids.save_glm_to_bids", "modules/generated/nilearn.interfaces.fmriprep.load_confounds", "modules/generated/nilearn.interfaces.fmriprep.load_confounds_strategy", "modules/generated/nilearn.interfaces.fsl.get_design_from_fslmat", "modules/generated/nilearn.maskers.BaseMasker", "modules/generated/nilearn.maskers.MultiNiftiLabelsMasker", "modules/generated/nilearn.maskers.MultiNiftiMapsMasker", "modules/generated/nilearn.maskers.MultiNiftiMasker", "modules/generated/nilearn.maskers.NiftiLabelsMasker", "modules/generated/nilearn.maskers.NiftiMapsMasker", "modules/generated/nilearn.maskers.NiftiMasker", "modules/generated/nilearn.maskers.NiftiSpheresMasker", "modules/generated/nilearn.masking.apply_mask", "modules/generated/nilearn.masking.compute_background_mask", "modules/generated/nilearn.masking.compute_brain_mask", "modules/generated/nilearn.masking.compute_epi_mask", "modules/generated/nilearn.masking.compute_multi_background_mask", "modules/generated/nilearn.masking.compute_multi_brain_mask", "modules/generated/nilearn.masking.compute_multi_epi_mask", "modules/generated/nilearn.masking.intersect_masks", "modules/generated/nilearn.masking.unmask", "modules/generated/nilearn.mass_univariate.permuted_ols", "modules/generated/nilearn.plotting.displays.BaseAxes", "modules/generated/nilearn.plotting.displays.BaseSlicer", "modules/generated/nilearn.plotting.displays.CutAxes", "modules/generated/nilearn.plotting.displays.GlassBrainAxes", "modules/generated/nilearn.plotting.displays.LProjector", "modules/generated/nilearn.plotting.displays.LRProjector", "modules/generated/nilearn.plotting.displays.LYRProjector", "modules/generated/nilearn.plotting.displays.LYRZProjector", "modules/generated/nilearn.plotting.displays.LZRProjector", "modules/generated/nilearn.plotting.displays.LZRYProjector", "modules/generated/nilearn.plotting.displays.MosaicSlicer", "modules/generated/nilearn.plotting.displays.OrthoProjector", "modules/generated/nilearn.plotting.displays.OrthoSlicer", "modules/generated/nilearn.plotting.displays.PlotlySurfaceFigure", "modules/generated/nilearn.plotting.displays.RProjector", "modules/generated/nilearn.plotting.displays.TiledSlicer", "modules/generated/nilearn.plotting.displays.XProjector", "modules/generated/nilearn.plotting.displays.XSlicer", "modules/generated/nilearn.plotting.displays.XZProjector", "modules/generated/nilearn.plotting.displays.XZSlicer", "modules/generated/nilearn.plotting.displays.YProjector", "modules/generated/nilearn.plotting.displays.YSlicer", "modules/generated/nilearn.plotting.displays.YXProjector", "modules/generated/nilearn.plotting.displays.YXSlicer", "modules/generated/nilearn.plotting.displays.YZProjector", "modules/generated/nilearn.plotting.displays.YZSlicer", "modules/generated/nilearn.plotting.displays.ZProjector", "modules/generated/nilearn.plotting.displays.ZSlicer", "modules/generated/nilearn.plotting.displays.get_projector", "modules/generated/nilearn.plotting.displays.get_slicer", "modules/generated/nilearn.plotting.find_cut_slices", "modules/generated/nilearn.plotting.find_parcellation_cut_coords", "modules/generated/nilearn.plotting.find_probabilistic_atlas_cut_coords", "modules/generated/nilearn.plotting.find_xyz_cut_coords", "modules/generated/nilearn.plotting.plot_anat", "modules/generated/nilearn.plotting.plot_carpet", "modules/generated/nilearn.plotting.plot_connectome", "modules/generated/nilearn.plotting.plot_contrast_matrix", "modules/generated/nilearn.plotting.plot_design_matrix", "modules/generated/nilearn.plotting.plot_epi", "modules/generated/nilearn.plotting.plot_event", "modules/generated/nilearn.plotting.plot_glass_brain", "modules/generated/nilearn.plotting.plot_img", "modules/generated/nilearn.plotting.plot_img_comparison", "modules/generated/nilearn.plotting.plot_img_on_surf", "modules/generated/nilearn.plotting.plot_markers", "modules/generated/nilearn.plotting.plot_matrix", "modules/generated/nilearn.plotting.plot_prob_atlas", "modules/generated/nilearn.plotting.plot_roi", "modules/generated/nilearn.plotting.plot_stat_map", "modules/generated/nilearn.plotting.plot_surf", "modules/generated/nilearn.plotting.plot_surf_contours", "modules/generated/nilearn.plotting.plot_surf_roi", "modules/generated/nilearn.plotting.plot_surf_stat_map", "modules/generated/nilearn.plotting.show", "modules/generated/nilearn.plotting.view_connectome", "modules/generated/nilearn.plotting.view_img", "modules/generated/nilearn.plotting.view_img_on_surf", "modules/generated/nilearn.plotting.view_markers", "modules/generated/nilearn.plotting.view_surf", "modules/generated/nilearn.regions.HierarchicalKMeans", "modules/generated/nilearn.regions.Parcellations", "modules/generated/nilearn.regions.ReNA", "modules/generated/nilearn.regions.RegionExtractor", "modules/generated/nilearn.regions.connected_label_regions", "modules/generated/nilearn.regions.connected_regions", "modules/generated/nilearn.regions.img_to_signals_labels", "modules/generated/nilearn.regions.img_to_signals_maps", "modules/generated/nilearn.regions.recursive_neighbor_agglomeration", "modules/generated/nilearn.regions.signals_to_img_labels", "modules/generated/nilearn.regions.signals_to_img_maps", "modules/generated/nilearn.reporting.HTMLReport", "modules/generated/nilearn.reporting.get_clusters_table", "modules/generated/nilearn.reporting.make_glm_report", "modules/generated/nilearn.signal.butterworth", "modules/generated/nilearn.signal.clean", "modules/generated/nilearn.signal.high_variance_confounds", "modules/generated/nilearn.surface.load_surf_data", "modules/generated/nilearn.surface.load_surf_mesh", "modules/generated/nilearn.surface.vol_to_surf", "modules/glm", "modules/image", "modules/index", "modules/interfaces", "modules/maskers", "modules/masking", "modules/mass_univariate", "modules/plotting", "modules/regions", "modules/reporting", "modules/signal", "modules/surface", "plotting/index", "quickstart", "user_guide"], "filenames": ["authors.rst", "auto_examples/00_tutorials/index.rst", "auto_examples/00_tutorials/plot_3d_and_4d_niimg.rst", "auto_examples/00_tutorials/plot_decoding_tutorial.rst", "auto_examples/00_tutorials/plot_nilearn_101.rst", "auto_examples/00_tutorials/plot_python_101.rst", "auto_examples/00_tutorials/plot_single_subject_single_run.rst", "auto_examples/00_tutorials/sg_execution_times.rst", "auto_examples/01_plotting/index.rst", "auto_examples/01_plotting/plot_3d_map_to_surface_projection.rst", "auto_examples/01_plotting/plot_atlas.rst", "auto_examples/01_plotting/plot_carpet.rst", "auto_examples/01_plotting/plot_colormaps.rst", "auto_examples/01_plotting/plot_demo_glass_brain.rst", "auto_examples/01_plotting/plot_demo_glass_brain_extensive.rst", "auto_examples/01_plotting/plot_demo_more_plotting.rst", "auto_examples/01_plotting/plot_demo_plotting.rst", "auto_examples/01_plotting/plot_dim_plotting.rst", "auto_examples/01_plotting/plot_haxby_masks.rst", "auto_examples/01_plotting/plot_multiscale_parcellations.rst", "auto_examples/01_plotting/plot_overlay.rst", "auto_examples/01_plotting/plot_prob_atlas.rst", "auto_examples/01_plotting/plot_surf_atlas.rst", "auto_examples/01_plotting/plot_surf_stat_map.rst", "auto_examples/01_plotting/plot_surface_projection_strategies.rst", "auto_examples/01_plotting/plot_visualization.rst", "auto_examples/01_plotting/plot_visualize_megatrawls_netmats.rst", "auto_examples/01_plotting/sg_execution_times.rst", "auto_examples/02_decoding/index.rst", "auto_examples/02_decoding/plot_haxby_anova_svm.rst", "auto_examples/02_decoding/plot_haxby_different_estimators.rst", "auto_examples/02_decoding/plot_haxby_frem.rst", "auto_examples/02_decoding/plot_haxby_full_analysis.rst", "auto_examples/02_decoding/plot_haxby_glm_decoding.rst", "auto_examples/02_decoding/plot_haxby_grid_search.rst", "auto_examples/02_decoding/plot_haxby_multiclass.rst", "auto_examples/02_decoding/plot_haxby_searchlight.rst", "auto_examples/02_decoding/plot_haxby_searchlight_surface.rst", "auto_examples/02_decoding/plot_haxby_stimuli.rst", "auto_examples/02_decoding/plot_mixed_gambles_frem.rst", "auto_examples/02_decoding/plot_miyawaki_encoding.rst", "auto_examples/02_decoding/plot_miyawaki_reconstruction.rst", "auto_examples/02_decoding/plot_oasis_vbm.rst", "auto_examples/02_decoding/plot_oasis_vbm_space_net.rst", "auto_examples/02_decoding/plot_simulated_data.rst", "auto_examples/02_decoding/sg_execution_times.rst", "auto_examples/03_connectivity/index.rst", "auto_examples/03_connectivity/plot_atlas_comparison.rst", "auto_examples/03_connectivity/plot_compare_decomposition.rst", "auto_examples/03_connectivity/plot_data_driven_parcellations.rst", "auto_examples/03_connectivity/plot_extract_regions_dictlearning_maps.rst", "auto_examples/03_connectivity/plot_group_level_connectivity.rst", "auto_examples/03_connectivity/plot_inverse_covariance_connectome.rst", "auto_examples/03_connectivity/plot_multi_subject_connectome.rst", "auto_examples/03_connectivity/plot_probabilistic_atlas_extraction.rst", "auto_examples/03_connectivity/plot_seed_to_voxel_correlation.rst", "auto_examples/03_connectivity/plot_signal_extraction.rst", "auto_examples/03_connectivity/plot_simulated_connectome.rst", "auto_examples/03_connectivity/plot_sphere_based_connectome.rst", "auto_examples/03_connectivity/sg_execution_times.rst", "auto_examples/04_glm_first_level/index.rst", "auto_examples/04_glm_first_level/plot_adhd_dmn.rst", "auto_examples/04_glm_first_level/plot_bids_features.rst", "auto_examples/04_glm_first_level/plot_design_matrix.rst", "auto_examples/04_glm_first_level/plot_fiac_analysis.rst", "auto_examples/04_glm_first_level/plot_fir_model.rst", "auto_examples/04_glm_first_level/plot_first_level_details.rst", "auto_examples/04_glm_first_level/plot_fixed_effects.rst", "auto_examples/04_glm_first_level/plot_hrf.rst", "auto_examples/04_glm_first_level/plot_localizer_surface_analysis.rst", "auto_examples/04_glm_first_level/plot_predictions_residuals.rst", "auto_examples/04_glm_first_level/plot_spm_multimodal_faces.rst", "auto_examples/04_glm_first_level/plot_write_events_file.rst", "auto_examples/04_glm_first_level/sg_execution_times.rst", "auto_examples/05_glm_second_level/index.rst", "auto_examples/05_glm_second_level/plot_oasis.rst", "auto_examples/05_glm_second_level/plot_proportion_activated_voxels.rst", "auto_examples/05_glm_second_level/plot_second_level_association_test.rst", "auto_examples/05_glm_second_level/plot_second_level_design_matrix.rst", "auto_examples/05_glm_second_level/plot_second_level_one_sample_test.rst", "auto_examples/05_glm_second_level/plot_second_level_two_sample_test.rst", "auto_examples/05_glm_second_level/plot_thresholding.rst", "auto_examples/05_glm_second_level/sg_execution_times.rst", "auto_examples/06_manipulating_images/index.rst", "auto_examples/06_manipulating_images/plot_affine_transformation.rst", "auto_examples/06_manipulating_images/plot_compare_mean_image.rst", "auto_examples/06_manipulating_images/plot_extract_regions_labels_image.rst", "auto_examples/06_manipulating_images/plot_extract_rois_smith_atlas.rst", "auto_examples/06_manipulating_images/plot_extract_rois_statistical_maps.rst", "auto_examples/06_manipulating_images/plot_mask_computation.rst", "auto_examples/06_manipulating_images/plot_negate_image.rst", "auto_examples/06_manipulating_images/plot_nifti_labels_simple.rst", "auto_examples/06_manipulating_images/plot_nifti_simple.rst", "auto_examples/06_manipulating_images/plot_resample_to_template.rst", "auto_examples/06_manipulating_images/plot_roi_extraction.rst", "auto_examples/06_manipulating_images/plot_smooth_mean_image.rst", "auto_examples/06_manipulating_images/sg_execution_times.rst", "auto_examples/07_advanced/index.rst", "auto_examples/07_advanced/plot_advanced_decoding_scikit.rst", "auto_examples/07_advanced/plot_age_group_prediction_cross_val.rst", "auto_examples/07_advanced/plot_beta_series.rst", "auto_examples/07_advanced/plot_bids_analysis.rst", "auto_examples/07_advanced/plot_haxby_mass_univariate.rst", "auto_examples/07_advanced/plot_ica_neurovault.rst", "auto_examples/07_advanced/plot_ica_resting_state.rst", "auto_examples/07_advanced/plot_localizer_mass_univariate_methods.rst", "auto_examples/07_advanced/plot_localizer_simple_analysis.rst", "auto_examples/07_advanced/plot_neurovault_meta_analysis.rst", "auto_examples/07_advanced/plot_surface_bids_analysis.rst", "auto_examples/07_advanced/sg_execution_times.rst", "auto_examples/08_experimental/index.rst", "auto_examples/08_experimental/plot_surface_image_and_maskers.rst", "auto_examples/08_experimental/sg_execution_times.rst", "auto_examples/index.rst", "bibliography.rst", "building_blocks/index.rst", "building_blocks/manual_pipeline.rst", "building_blocks/neurovault.rst", "changes/0.1.0.rst", "changes/0.1.1.rst", "changes/0.1.2.rst", "changes/0.1.3.rst", "changes/0.1.4.rst", "changes/0.10.0.rst", "changes/0.10.1.rst", "changes/0.10.2.rst", "changes/0.2.0.rst", "changes/0.2.1.rst", "changes/0.2.2.rst", "changes/0.2.3.rst", "changes/0.2.4.rst", "changes/0.2.5.rst", "changes/0.2.6.rst", "changes/0.3.0.rst", "changes/0.3.1.rst", "changes/0.4.0.rst", "changes/0.4.1.rst", "changes/0.4.2.rst", "changes/0.5.0.rst", "changes/0.5.1.rst", "changes/0.5.2.rst", "changes/0.6.0.rst", "changes/0.6.1.rst", "changes/0.6.2.rst", "changes/0.7.0.rst", "changes/0.7.1.rst", "changes/0.8.0.rst", "changes/0.8.1.rst", "changes/0.9.0.rst", "changes/0.9.1.rst", "changes/0.9.2.rst", "changes/names.rst", "changes/whats_new.rst", "connectivity/connectome_extraction.rst", "connectivity/functional_connectomes.rst", "connectivity/index.rst", "connectivity/parcellating.rst", "connectivity/region_extraction.rst", "connectivity/resting_state_networks.rst", "decoding/decoding_intro.rst", "decoding/estimator_choice.rst", "decoding/frem.rst", "decoding/going_further.rst", "decoding/index.rst", "decoding/searchlight.rst", "decoding/space_net.rst", "developers/group_sparse_covariance.rst", "development.rst", "glm/first_level_model.rst", "glm/glm_intro.rst", "glm/index.rst", "glm/second_level_model.rst", "glossary.rst", "index.rst", "introduction.rst", "maintenance.rst", "manipulating_images/index.rst", "manipulating_images/input_output.rst", "manipulating_images/manipulating_images.rst", "manipulating_images/masker_objects.rst", "modules/connectome.rst", "modules/datasets.rst", "modules/decoding.rst", "modules/decomposition.rst", "modules/experimental.rst", "modules/generated/nilearn.connectome.ConnectivityMeasure.rst", "modules/generated/nilearn.connectome.GroupSparseCovariance.rst", "modules/generated/nilearn.connectome.GroupSparseCovarianceCV.rst", "modules/generated/nilearn.connectome.cov_to_corr.rst", "modules/generated/nilearn.connectome.group_sparse_covariance.rst", "modules/generated/nilearn.connectome.prec_to_partial.rst", "modules/generated/nilearn.connectome.sym_matrix_to_vec.rst", "modules/generated/nilearn.connectome.vec_to_sym_matrix.rst", "modules/generated/nilearn.datasets.fetch_abide_pcp.rst", "modules/generated/nilearn.datasets.fetch_adhd.rst", "modules/generated/nilearn.datasets.fetch_atlas_aal.rst", "modules/generated/nilearn.datasets.fetch_atlas_allen_2011.rst", "modules/generated/nilearn.datasets.fetch_atlas_basc_multiscale_2015.rst", "modules/generated/nilearn.datasets.fetch_atlas_craddock_2012.rst", "modules/generated/nilearn.datasets.fetch_atlas_destrieux_2009.rst", "modules/generated/nilearn.datasets.fetch_atlas_difumo.rst", "modules/generated/nilearn.datasets.fetch_atlas_harvard_oxford.rst", "modules/generated/nilearn.datasets.fetch_atlas_juelich.rst", "modules/generated/nilearn.datasets.fetch_atlas_msdl.rst", "modules/generated/nilearn.datasets.fetch_atlas_pauli_2017.rst", "modules/generated/nilearn.datasets.fetch_atlas_schaefer_2018.rst", "modules/generated/nilearn.datasets.fetch_atlas_smith_2009.rst", "modules/generated/nilearn.datasets.fetch_atlas_surf_destrieux.rst", "modules/generated/nilearn.datasets.fetch_atlas_talairach.rst", "modules/generated/nilearn.datasets.fetch_atlas_yeo_2011.rst", "modules/generated/nilearn.datasets.fetch_bids_langloc_dataset.rst", "modules/generated/nilearn.datasets.fetch_coords_dosenbach_2010.rst", "modules/generated/nilearn.datasets.fetch_coords_power_2011.rst", "modules/generated/nilearn.datasets.fetch_coords_seitzman_2018.rst", "modules/generated/nilearn.datasets.fetch_development_fmri.rst", "modules/generated/nilearn.datasets.fetch_ds000030_urls.rst", "modules/generated/nilearn.datasets.fetch_fiac_first_level.rst", "modules/generated/nilearn.datasets.fetch_haxby.rst", "modules/generated/nilearn.datasets.fetch_icbm152_2009.rst", "modules/generated/nilearn.datasets.fetch_icbm152_brain_gm_mask.rst", "modules/generated/nilearn.datasets.fetch_language_localizer_demo_dataset.rst", "modules/generated/nilearn.datasets.fetch_localizer_button_task.rst", "modules/generated/nilearn.datasets.fetch_localizer_calculation_task.rst", "modules/generated/nilearn.datasets.fetch_localizer_contrasts.rst", "modules/generated/nilearn.datasets.fetch_localizer_first_level.rst", "modules/generated/nilearn.datasets.fetch_megatrawls_netmats.rst", "modules/generated/nilearn.datasets.fetch_mixed_gambles.rst", "modules/generated/nilearn.datasets.fetch_miyawaki2008.rst", "modules/generated/nilearn.datasets.fetch_neurovault.rst", "modules/generated/nilearn.datasets.fetch_neurovault_auditory_computation_task.rst", "modules/generated/nilearn.datasets.fetch_neurovault_ids.rst", "modules/generated/nilearn.datasets.fetch_neurovault_motor_task.rst", "modules/generated/nilearn.datasets.fetch_oasis_vbm.rst", "modules/generated/nilearn.datasets.fetch_openneuro_dataset.rst", "modules/generated/nilearn.datasets.fetch_openneuro_dataset_index.rst", "modules/generated/nilearn.datasets.fetch_spm_auditory.rst", "modules/generated/nilearn.datasets.fetch_spm_multimodal_fmri.rst", "modules/generated/nilearn.datasets.fetch_surf_fsaverage.rst", "modules/generated/nilearn.datasets.fetch_surf_nki_enhanced.rst", "modules/generated/nilearn.datasets.get_data_dirs.rst", "modules/generated/nilearn.datasets.load_mni152_brain_mask.rst", "modules/generated/nilearn.datasets.load_mni152_gm_mask.rst", "modules/generated/nilearn.datasets.load_mni152_gm_template.rst", "modules/generated/nilearn.datasets.load_mni152_template.rst", "modules/generated/nilearn.datasets.load_mni152_wm_mask.rst", "modules/generated/nilearn.datasets.load_mni152_wm_template.rst", "modules/generated/nilearn.datasets.load_sample_motor_activation_image.rst", "modules/generated/nilearn.datasets.patch_openneuro_dataset.rst", "modules/generated/nilearn.datasets.select_from_index.rst", "modules/generated/nilearn.decoding.Decoder.rst", "modules/generated/nilearn.decoding.DecoderRegressor.rst", "modules/generated/nilearn.decoding.FREMClassifier.rst", "modules/generated/nilearn.decoding.FREMRegressor.rst", "modules/generated/nilearn.decoding.SearchLight.rst", "modules/generated/nilearn.decoding.SpaceNetClassifier.rst", "modules/generated/nilearn.decoding.SpaceNetRegressor.rst", "modules/generated/nilearn.decomposition.CanICA.rst", "modules/generated/nilearn.decomposition.DictLearning.rst", "modules/generated/nilearn.experimental.surface.FileMesh.rst", "modules/generated/nilearn.experimental.surface.InMemoryMesh.rst", "modules/generated/nilearn.experimental.surface.Mesh.rst", "modules/generated/nilearn.experimental.surface.PolyMesh.rst", "modules/generated/nilearn.experimental.surface.SurfaceImage.rst", "modules/generated/nilearn.experimental.surface.SurfaceLabelsMasker.rst", "modules/generated/nilearn.experimental.surface.SurfaceMasker.rst", "modules/generated/nilearn.experimental.surface.fetch_destrieux.rst", "modules/generated/nilearn.experimental.surface.fetch_nki.rst", "modules/generated/nilearn.experimental.surface.load_fsaverage.rst", "modules/generated/nilearn.glm.ARModel.rst", "modules/generated/nilearn.glm.Contrast.rst", "modules/generated/nilearn.glm.FContrastResults.rst", "modules/generated/nilearn.glm.LikelihoodModelResults.rst", "modules/generated/nilearn.glm.OLSModel.rst", "modules/generated/nilearn.glm.RegressionResults.rst", "modules/generated/nilearn.glm.SimpleRegressionResults.rst", "modules/generated/nilearn.glm.TContrastResults.rst", "modules/generated/nilearn.glm.cluster_level_inference.rst", "modules/generated/nilearn.glm.compute_contrast.rst", "modules/generated/nilearn.glm.compute_fixed_effects.rst", "modules/generated/nilearn.glm.expression_to_contrast_vector.rst", "modules/generated/nilearn.glm.fdr_threshold.rst", "modules/generated/nilearn.glm.first_level.FirstLevelModel.rst", "modules/generated/nilearn.glm.first_level.check_design_matrix.rst", "modules/generated/nilearn.glm.first_level.compute_regressor.rst", "modules/generated/nilearn.glm.first_level.first_level_from_bids.rst", "modules/generated/nilearn.glm.first_level.glover_dispersion_derivative.rst", "modules/generated/nilearn.glm.first_level.glover_hrf.rst", "modules/generated/nilearn.glm.first_level.glover_time_derivative.rst", "modules/generated/nilearn.glm.first_level.make_first_level_design_matrix.rst", "modules/generated/nilearn.glm.first_level.mean_scaling.rst", "modules/generated/nilearn.glm.first_level.run_glm.rst", "modules/generated/nilearn.glm.first_level.spm_dispersion_derivative.rst", "modules/generated/nilearn.glm.first_level.spm_hrf.rst", "modules/generated/nilearn.glm.first_level.spm_time_derivative.rst", "modules/generated/nilearn.glm.second_level.SecondLevelModel.rst", "modules/generated/nilearn.glm.second_level.make_second_level_design_matrix.rst", "modules/generated/nilearn.glm.second_level.non_parametric_inference.rst", "modules/generated/nilearn.glm.threshold_stats_img.rst", "modules/generated/nilearn.image.binarize_img.rst", "modules/generated/nilearn.image.clean_img.rst", "modules/generated/nilearn.image.concat_imgs.rst", "modules/generated/nilearn.image.coord_transform.rst", "modules/generated/nilearn.image.copy_img.rst", "modules/generated/nilearn.image.crop_img.rst", "modules/generated/nilearn.image.get_data.rst", "modules/generated/nilearn.image.high_variance_confounds.rst", "modules/generated/nilearn.image.index_img.rst", "modules/generated/nilearn.image.iter_img.rst", "modules/generated/nilearn.image.largest_connected_component_img.rst", "modules/generated/nilearn.image.load_img.rst", "modules/generated/nilearn.image.math_img.rst", "modules/generated/nilearn.image.mean_img.rst", "modules/generated/nilearn.image.new_img_like.rst", "modules/generated/nilearn.image.reorder_img.rst", "modules/generated/nilearn.image.resample_img.rst", "modules/generated/nilearn.image.resample_to_img.rst", "modules/generated/nilearn.image.smooth_img.rst", "modules/generated/nilearn.image.swap_img_hemispheres.rst", "modules/generated/nilearn.image.threshold_img.rst", "modules/generated/nilearn.interfaces.bids.get_bids_files.rst", "modules/generated/nilearn.interfaces.bids.parse_bids_filename.rst", "modules/generated/nilearn.interfaces.bids.save_glm_to_bids.rst", "modules/generated/nilearn.interfaces.fmriprep.load_confounds.rst", "modules/generated/nilearn.interfaces.fmriprep.load_confounds_strategy.rst", "modules/generated/nilearn.interfaces.fsl.get_design_from_fslmat.rst", "modules/generated/nilearn.maskers.BaseMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiLabelsMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiMapsMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiMasker.rst", "modules/generated/nilearn.maskers.NiftiLabelsMasker.rst", "modules/generated/nilearn.maskers.NiftiMapsMasker.rst", "modules/generated/nilearn.maskers.NiftiMasker.rst", "modules/generated/nilearn.maskers.NiftiSpheresMasker.rst", "modules/generated/nilearn.masking.apply_mask.rst", "modules/generated/nilearn.masking.compute_background_mask.rst", "modules/generated/nilearn.masking.compute_brain_mask.rst", "modules/generated/nilearn.masking.compute_epi_mask.rst", "modules/generated/nilearn.masking.compute_multi_background_mask.rst", "modules/generated/nilearn.masking.compute_multi_brain_mask.rst", "modules/generated/nilearn.masking.compute_multi_epi_mask.rst", "modules/generated/nilearn.masking.intersect_masks.rst", "modules/generated/nilearn.masking.unmask.rst", "modules/generated/nilearn.mass_univariate.permuted_ols.rst", "modules/generated/nilearn.plotting.displays.BaseAxes.rst", "modules/generated/nilearn.plotting.displays.BaseSlicer.rst", "modules/generated/nilearn.plotting.displays.CutAxes.rst", "modules/generated/nilearn.plotting.displays.GlassBrainAxes.rst", "modules/generated/nilearn.plotting.displays.LProjector.rst", "modules/generated/nilearn.plotting.displays.LRProjector.rst", "modules/generated/nilearn.plotting.displays.LYRProjector.rst", "modules/generated/nilearn.plotting.displays.LYRZProjector.rst", "modules/generated/nilearn.plotting.displays.LZRProjector.rst", "modules/generated/nilearn.plotting.displays.LZRYProjector.rst", "modules/generated/nilearn.plotting.displays.MosaicSlicer.rst", "modules/generated/nilearn.plotting.displays.OrthoProjector.rst", "modules/generated/nilearn.plotting.displays.OrthoSlicer.rst", "modules/generated/nilearn.plotting.displays.PlotlySurfaceFigure.rst", "modules/generated/nilearn.plotting.displays.RProjector.rst", "modules/generated/nilearn.plotting.displays.TiledSlicer.rst", "modules/generated/nilearn.plotting.displays.XProjector.rst", "modules/generated/nilearn.plotting.displays.XSlicer.rst", "modules/generated/nilearn.plotting.displays.XZProjector.rst", "modules/generated/nilearn.plotting.displays.XZSlicer.rst", "modules/generated/nilearn.plotting.displays.YProjector.rst", "modules/generated/nilearn.plotting.displays.YSlicer.rst", "modules/generated/nilearn.plotting.displays.YXProjector.rst", "modules/generated/nilearn.plotting.displays.YXSlicer.rst", "modules/generated/nilearn.plotting.displays.YZProjector.rst", "modules/generated/nilearn.plotting.displays.YZSlicer.rst", "modules/generated/nilearn.plotting.displays.ZProjector.rst", "modules/generated/nilearn.plotting.displays.ZSlicer.rst", "modules/generated/nilearn.plotting.displays.get_projector.rst", "modules/generated/nilearn.plotting.displays.get_slicer.rst", "modules/generated/nilearn.plotting.find_cut_slices.rst", "modules/generated/nilearn.plotting.find_parcellation_cut_coords.rst", "modules/generated/nilearn.plotting.find_probabilistic_atlas_cut_coords.rst", "modules/generated/nilearn.plotting.find_xyz_cut_coords.rst", "modules/generated/nilearn.plotting.plot_anat.rst", "modules/generated/nilearn.plotting.plot_carpet.rst", "modules/generated/nilearn.plotting.plot_connectome.rst", "modules/generated/nilearn.plotting.plot_contrast_matrix.rst", "modules/generated/nilearn.plotting.plot_design_matrix.rst", "modules/generated/nilearn.plotting.plot_epi.rst", "modules/generated/nilearn.plotting.plot_event.rst", "modules/generated/nilearn.plotting.plot_glass_brain.rst", "modules/generated/nilearn.plotting.plot_img.rst", "modules/generated/nilearn.plotting.plot_img_comparison.rst", "modules/generated/nilearn.plotting.plot_img_on_surf.rst", "modules/generated/nilearn.plotting.plot_markers.rst", "modules/generated/nilearn.plotting.plot_matrix.rst", "modules/generated/nilearn.plotting.plot_prob_atlas.rst", "modules/generated/nilearn.plotting.plot_roi.rst", "modules/generated/nilearn.plotting.plot_stat_map.rst", "modules/generated/nilearn.plotting.plot_surf.rst", "modules/generated/nilearn.plotting.plot_surf_contours.rst", "modules/generated/nilearn.plotting.plot_surf_roi.rst", "modules/generated/nilearn.plotting.plot_surf_stat_map.rst", "modules/generated/nilearn.plotting.show.rst", "modules/generated/nilearn.plotting.view_connectome.rst", "modules/generated/nilearn.plotting.view_img.rst", "modules/generated/nilearn.plotting.view_img_on_surf.rst", "modules/generated/nilearn.plotting.view_markers.rst", "modules/generated/nilearn.plotting.view_surf.rst", "modules/generated/nilearn.regions.HierarchicalKMeans.rst", "modules/generated/nilearn.regions.Parcellations.rst", "modules/generated/nilearn.regions.ReNA.rst", "modules/generated/nilearn.regions.RegionExtractor.rst", "modules/generated/nilearn.regions.connected_label_regions.rst", "modules/generated/nilearn.regions.connected_regions.rst", "modules/generated/nilearn.regions.img_to_signals_labels.rst", "modules/generated/nilearn.regions.img_to_signals_maps.rst", "modules/generated/nilearn.regions.recursive_neighbor_agglomeration.rst", "modules/generated/nilearn.regions.signals_to_img_labels.rst", "modules/generated/nilearn.regions.signals_to_img_maps.rst", "modules/generated/nilearn.reporting.HTMLReport.rst", "modules/generated/nilearn.reporting.get_clusters_table.rst", "modules/generated/nilearn.reporting.make_glm_report.rst", "modules/generated/nilearn.signal.butterworth.rst", "modules/generated/nilearn.signal.clean.rst", "modules/generated/nilearn.signal.high_variance_confounds.rst", "modules/generated/nilearn.surface.load_surf_data.rst", "modules/generated/nilearn.surface.load_surf_mesh.rst", "modules/generated/nilearn.surface.vol_to_surf.rst", "modules/glm.rst", "modules/image.rst", "modules/index.rst", "modules/interfaces.rst", "modules/maskers.rst", "modules/masking.rst", "modules/mass_univariate.rst", "modules/plotting.rst", "modules/regions.rst", "modules/reporting.rst", "modules/signal.rst", "modules/surface.rst", "plotting/index.rst", "quickstart.md", "user_guide.rst"], "titles": ["Team", "Basic tutorials", "3D and 4D niimgs: handling and visualizing", "A introduction tutorial to fMRI decoding", "Basic nilearn example: manipulating and looking at data", "Basic numerics and plotting with Python", "Intro to GLM Analysis: a single-session, single-subject fMRI dataset", "Computation times", "Visualization of brain images", "Making a surface plot of a 3D statistical map", "Basic Atlas plotting", "Visualizing global patterns with a carpet plot", "Matplotlib colormaps in Nilearn", "Glass brain plotting in nilearn", "Glass brain plotting in nilearn (all options)", "More plotting tools from nilearn", "Plotting tools in nilearn", "Controlling the contrast of the background when plotting", "Plot Haxby masks", "Visualizing multiscale functional brain parcellations", "Visualizing a probabilistic atlas: the default mode in the MSDL atlas", "Visualizing 4D probabilistic atlas maps", "Loading and plotting of a cortical surface atlas", "Seed-based connectivity on the surface", "Technical point: Illustration of the volume to surface sampling schemes", "NeuroImaging volumes visualization", "Visualizing Megatrawls Network Matrices from Human Connectome Project", "Computation times", "Decoding and predicting from brain images", "Decoding with ANOVA + SVM: face vs house in the Haxby dataset", "Different classifiers in decoding the Haxby dataset", "Decoding with FREM: face vs house vs chair object recognition", "ROI-based decoding analysis in Haxby et al. dataset", "Decoding of a dataset after GLM fit for signal extraction", "Setting a parameter by cross-validation", "The haxby dataset: different multi-class strategies", "Searchlight analysis of face vs house recognition", "Cortical surface-based searchlight decoding", "Show stimuli of Haxby et al. dataset", "FREM on Jimura et al \u201cmixed gambles\u201d dataset", "Encoding models for visual stimuli from Miyawaki et al. 2008", "Reconstruction of visual stimuli from Miyawaki et al. 2008", "Voxel-Based Morphometry on Oasis dataset", "Voxel-Based Morphometry on Oasis dataset with Space-Net prior", "Example of pattern recognition on simulated data", "Computation times", "Functional connectivity", "Comparing connectomes on different reference atlases", "Deriving spatial maps from group fMRI data using ICA and Dictionary Learning", "Clustering methods to learn a brain parcellation from fMRI", "Regions extraction using dictionary learning and functional connectomes", "Classification of age groups using functional connectivity", "Computing a connectome with sparse inverse covariance", "Group Sparse inverse covariance for multi-subject connectome", "Extracting signals of a probabilistic atlas of functional regions", "Producing single subject maps of seed-to-voxel correlation", "Extracting signals from a brain parcellation", "Connectivity structure estimation on simulated data", "Extract signals on spheres and plot a connectome", "Computation times", "GLM: First level analysis", "Default Mode Network extraction of ADHD dataset", "First level analysis of a complete BIDS dataset from openneuro", "Examples of design matrices", "Simple example of two-session fMRI model fitting", "Analysis of an fMRI dataset with a Finite Impule Response (FIR) model", "Understanding parameters of the first-level model", "Example of explicit fixed effects fMRI model fitting", "Example of MRI response functions", "Example of surface-based first-level analysis", "Predicted time series and residuals", "Single-subject data (two sessions) in native space", "Generate an events.tsv file for the NeuroSpin localizer task", "Computation times", "GLM: Second level analysis", "Voxel-Based Morphometry on OASIS dataset", "Second-level fMRI model: true positive proportion in clusters", "Example of generic design in second-level models", "Example of second level design matrix", "Second-level fMRI model: one sample test", "Second-level fMRI model: two-sample test, unpaired and paired", "Statistical testing of a second-level analysis", "Computation times", "Manipulating brain image volumes", "Visualization of affine resamplings", "Comparing the means of 2 images", "Breaking an atlas of labels in separated regions", "Regions Extraction of Default Mode Networks using Smith Atlas", "Region Extraction using a t-statistical map (3D)", "Understanding NiftiMasker and mask computation", "Negating an image with math_img", "Extracting signals from brain regions using the NiftiLabelsMasker", "Simple example of NiftiMasker use", "Resample an image to a template", "Computing a Region of Interest (ROI) mask manually", "Smoothing an image", "Computation times", "Advanced statistical analysis of brain images", "Advanced decoding using scikit learn", "Functional connectivity predicts age group", "Beta-Series Modeling for Task-Based Functional Connectivity and Decoding", "BIDS dataset first and second level analysis", "Massively univariate analysis of face vs house recognition", "NeuroVault cross-study ICA maps", "Multivariate decompositions: Independent component analysis of fMRI", "Massively univariate analysis of a motor task from the Localizer dataset", "Massively univariate analysis of a calculation task from the Localizer dataset", "NeuroVault meta-analysis of stop-go paradigm studies", "Surface-based dataset first and second level analysis of a dataset", "Computation times", "Examples for experimental modules", "A short demo of the surface images &amp; maskers", "Computation times", "Examples", "General bibliography", "<span class=\"section-number\">10. </span>Advanced usage: manual pipelines and scaling up", "<span class=\"section-number\">10.1. </span>Building your own neuroimaging machine-learning pipeline", "<span class=\"section-number\">10.2. </span>Downloading statistical maps from the Neurovault repository", "0.1.0", "0.1.1", "0.1.2", "0.1.3", "0.1.4", "0.10.0", "0.10.1", "0.10.2", "0.2.0", "0.2.1", "0.2.2", "0.2.3", "0.2.4", "0.2.5.1", "0.2.6", "0.3.0", "0.3.1", "0.4.0", "0.4.1", "0.4.2", "0.5.0", "0.5.1", "0.5.2", "0.6.0", "0.6.1", "0.6.2", "0.7.0", "0.7.1", "0.8.0", "0.8.1", "0.9.0", "0.9.1", "0.9.2", "&lt;no title&gt;", "What\u2019s new", "<span class=\"section-number\">6.2. </span>Connectome extraction: inverse covariance for direct connections", "<span class=\"section-number\">6.1. </span>Extracting times series to build a functional connectome", "<span class=\"section-number\">6. </span>Functional connectivity and resting state", "<span class=\"section-number\">6.5. </span>Clustering to parcellate the brain in regions", "<span class=\"section-number\">6.4. </span>Region Extraction for better brain parcellations", "<span class=\"section-number\">6.3. </span>Extracting functional brain networks: ICA and related", "<span class=\"section-number\">5.1. </span>An introduction to decoding", "<span class=\"section-number\">5.2. </span>Choosing the right predictive model for neuroimaging", "<span class=\"section-number\">5.3. </span>FREM: fast ensembling of regularized models for robust decoding", "<span class=\"section-number\">5.6. </span>Running scikit-learn functions for more control on the analysis", "<span class=\"section-number\">5. </span>Decoding and MVPA: predicting from brain images", "<span class=\"section-number\">5.5. </span>Searchlight : finding voxels containing information", "<span class=\"section-number\">5.4. </span>SpaceNet: decoding with spatial structure for better maps", "<span class=\"section-number\">6.2.3.1. </span>Group-sparse covariance estimation", "Contributing", "<span class=\"section-number\">8.2. </span>First level models", "<span class=\"section-number\">8.1. </span>An introduction to GLMs in fMRI statistical analysis", "<span class=\"section-number\">8. </span>Analyzing fMRI using GLMs", "<span class=\"section-number\">8.3. </span>Second level models", "Glossary", "Nilearn", "<span class=\"section-number\">1. </span>Introduction", "Maintenance", "<span class=\"section-number\">9. </span>Manipulation brain volumes with nilearn", "<span class=\"section-number\">9.1. </span>Input and output: neuroimaging data representation", "<span class=\"section-number\">9.2. </span>Manipulating images: resampling, smoothing, masking, ROIs\u2026", "<span class=\"section-number\">9.3. </span>From neuroimaging volumes to data matrices: the masker objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.connectome</span></code>: Functional Connectivity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.datasets</span></code>: Automatic Dataset Fetching", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.decoding</span></code>: Decoding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.decomposition</span></code>: Multivariate Decompositions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.experimental</span></code>: Experimental Modules", "nilearn.connectome.ConnectivityMeasure", "nilearn.connectome.GroupSparseCovariance", "nilearn.connectome.GroupSparseCovarianceCV", "nilearn.connectome.cov_to_corr", "nilearn.connectome.group_sparse_covariance", "nilearn.connectome.prec_to_partial", "nilearn.connectome.sym_matrix_to_vec", "nilearn.connectome.vec_to_sym_matrix", "nilearn.datasets.fetch_abide_pcp", "nilearn.datasets.fetch_adhd", "nilearn.datasets.fetch_atlas_aal", "nilearn.datasets.fetch_atlas_allen_2011", "nilearn.datasets.fetch_atlas_basc_multiscale_2015", "nilearn.datasets.fetch_atlas_craddock_2012", "nilearn.datasets.fetch_atlas_destrieux_2009", "nilearn.datasets.fetch_atlas_difumo", "nilearn.datasets.fetch_atlas_harvard_oxford", "nilearn.datasets.fetch_atlas_juelich", "nilearn.datasets.fetch_atlas_msdl", "nilearn.datasets.fetch_atlas_pauli_2017", "nilearn.datasets.fetch_atlas_schaefer_2018", "nilearn.datasets.fetch_atlas_smith_2009", "nilearn.datasets.fetch_atlas_surf_destrieux", "nilearn.datasets.fetch_atlas_talairach", "nilearn.datasets.fetch_atlas_yeo_2011", "nilearn.datasets.fetch_bids_langloc_dataset", "nilearn.datasets.fetch_coords_dosenbach_2010", "nilearn.datasets.fetch_coords_power_2011", "nilearn.datasets.fetch_coords_seitzman_2018", "nilearn.datasets.fetch_development_fmri", "nilearn.datasets.fetch_ds000030_urls", "nilearn.datasets.fetch_fiac_first_level", "nilearn.datasets.fetch_haxby", "nilearn.datasets.fetch_icbm152_2009", "nilearn.datasets.fetch_icbm152_brain_gm_mask", "nilearn.datasets.fetch_language_localizer_demo_dataset", "nilearn.datasets.fetch_localizer_button_task", "nilearn.datasets.fetch_localizer_calculation_task", "nilearn.datasets.fetch_localizer_contrasts", "nilearn.datasets.fetch_localizer_first_level", "nilearn.datasets.fetch_megatrawls_netmats", "nilearn.datasets.fetch_mixed_gambles", "nilearn.datasets.fetch_miyawaki2008", "nilearn.datasets.fetch_neurovault", "nilearn.datasets.fetch_neurovault_auditory_computation_task", "nilearn.datasets.fetch_neurovault_ids", "nilearn.datasets.fetch_neurovault_motor_task", "nilearn.datasets.fetch_oasis_vbm", "nilearn.datasets.fetch_openneuro_dataset", "nilearn.datasets.fetch_openneuro_dataset_index", "nilearn.datasets.fetch_spm_auditory", "nilearn.datasets.fetch_spm_multimodal_fmri", "nilearn.datasets.fetch_surf_fsaverage", "nilearn.datasets.fetch_surf_nki_enhanced", "nilearn.datasets.get_data_dirs", "nilearn.datasets.load_mni152_brain_mask", "nilearn.datasets.load_mni152_gm_mask", "nilearn.datasets.load_mni152_gm_template", "nilearn.datasets.load_mni152_template", "nilearn.datasets.load_mni152_wm_mask", "nilearn.datasets.load_mni152_wm_template", "nilearn.datasets.load_sample_motor_activation_image", "nilearn.datasets.patch_openneuro_dataset", "nilearn.datasets.select_from_index", "nilearn.decoding.Decoder", "nilearn.decoding.DecoderRegressor", "nilearn.decoding.FREMClassifier", "nilearn.decoding.FREMRegressor", "nilearn.decoding.SearchLight", "nilearn.decoding.SpaceNetClassifier", "nilearn.decoding.SpaceNetRegressor", "nilearn.decomposition.CanICA", "nilearn.decomposition.DictLearning", "nilearn.experimental.surface.FileMesh", "nilearn.experimental.surface.InMemoryMesh", "nilearn.experimental.surface.Mesh", "nilearn.experimental.surface.PolyMesh", "nilearn.experimental.surface.SurfaceImage", "nilearn.experimental.surface.SurfaceLabelsMasker", "nilearn.experimental.surface.SurfaceMasker", "nilearn.experimental.surface.fetch_destrieux", "nilearn.experimental.surface.fetch_nki", "nilearn.experimental.surface.load_fsaverage", "nilearn.glm.ARModel", "nilearn.glm.Contrast", "nilearn.glm.FContrastResults", "nilearn.glm.LikelihoodModelResults", "nilearn.glm.OLSModel", "nilearn.glm.RegressionResults", "nilearn.glm.SimpleRegressionResults", "nilearn.glm.TContrastResults", "nilearn.glm.cluster_level_inference", "nilearn.glm.compute_contrast", "nilearn.glm.compute_fixed_effects", "nilearn.glm.expression_to_contrast_vector", "nilearn.glm.fdr_threshold", "nilearn.glm.first_level.FirstLevelModel", "nilearn.glm.first_level.check_design_matrix", "nilearn.glm.first_level.compute_regressor", "nilearn.glm.first_level.first_level_from_bids", "nilearn.glm.first_level.glover_dispersion_derivative", "nilearn.glm.first_level.glover_hrf", "nilearn.glm.first_level.glover_time_derivative", "nilearn.glm.first_level.make_first_level_design_matrix", "nilearn.glm.first_level.mean_scaling", "nilearn.glm.first_level.run_glm", "nilearn.glm.first_level.spm_dispersion_derivative", "nilearn.glm.first_level.spm_hrf", "nilearn.glm.first_level.spm_time_derivative", "nilearn.glm.second_level.SecondLevelModel", "nilearn.glm.second_level.make_second_level_design_matrix", "nilearn.glm.second_level.non_parametric_inference", "nilearn.glm.threshold_stats_img", "nilearn.image.binarize_img", "nilearn.image.clean_img", "nilearn.image.concat_imgs", "nilearn.image.coord_transform", "nilearn.image.copy_img", "nilearn.image.crop_img", "nilearn.image.get_data", "nilearn.image.high_variance_confounds", "nilearn.image.index_img", "nilearn.image.iter_img", "nilearn.image.largest_connected_component_img", "nilearn.image.load_img", "nilearn.image.math_img", "nilearn.image.mean_img", "nilearn.image.new_img_like", "nilearn.image.reorder_img", "nilearn.image.resample_img", "nilearn.image.resample_to_img", "nilearn.image.smooth_img", "nilearn.image.swap_img_hemispheres", "nilearn.image.threshold_img", "nilearn.interfaces.bids.get_bids_files", "nilearn.interfaces.bids.parse_bids_filename", "nilearn.interfaces.bids.save_glm_to_bids", "nilearn.interfaces.fmriprep.load_confounds", "nilearn.interfaces.fmriprep.load_confounds_strategy", "nilearn.interfaces.fsl.get_design_from_fslmat", "nilearn.maskers.BaseMasker", "nilearn.maskers.MultiNiftiLabelsMasker", "nilearn.maskers.MultiNiftiMapsMasker", "nilearn.maskers.MultiNiftiMasker", "nilearn.maskers.NiftiLabelsMasker", "nilearn.maskers.NiftiMapsMasker", "nilearn.maskers.NiftiMasker", "nilearn.maskers.NiftiSpheresMasker", "nilearn.masking.apply_mask", "nilearn.masking.compute_background_mask", "nilearn.masking.compute_brain_mask", "nilearn.masking.compute_epi_mask", "nilearn.masking.compute_multi_background_mask", "nilearn.masking.compute_multi_brain_mask", "nilearn.masking.compute_multi_epi_mask", "nilearn.masking.intersect_masks", "nilearn.masking.unmask", "nilearn.mass_univariate.permuted_ols", "nilearn.plotting.displays.BaseAxes", "nilearn.plotting.displays.BaseSlicer", "nilearn.plotting.displays.CutAxes", "nilearn.plotting.displays.GlassBrainAxes", "nilearn.plotting.displays.LProjector", "nilearn.plotting.displays.LRProjector", "nilearn.plotting.displays.LYRProjector", "nilearn.plotting.displays.LYRZProjector", "nilearn.plotting.displays.LZRProjector", "nilearn.plotting.displays.LZRYProjector", "nilearn.plotting.displays.MosaicSlicer", "nilearn.plotting.displays.OrthoProjector", "nilearn.plotting.displays.OrthoSlicer", "nilearn.plotting.displays.PlotlySurfaceFigure", "nilearn.plotting.displays.RProjector", "nilearn.plotting.displays.TiledSlicer", "nilearn.plotting.displays.XProjector", "nilearn.plotting.displays.XSlicer", "nilearn.plotting.displays.XZProjector", "nilearn.plotting.displays.XZSlicer", "nilearn.plotting.displays.YProjector", "nilearn.plotting.displays.YSlicer", "nilearn.plotting.displays.YXProjector", "nilearn.plotting.displays.YXSlicer", "nilearn.plotting.displays.YZProjector", "nilearn.plotting.displays.YZSlicer", "nilearn.plotting.displays.ZProjector", "nilearn.plotting.displays.ZSlicer", "nilearn.plotting.displays.get_projector", "nilearn.plotting.displays.get_slicer", "nilearn.plotting.find_cut_slices", "nilearn.plotting.find_parcellation_cut_coords", "nilearn.plotting.find_probabilistic_atlas_cut_coords", "nilearn.plotting.find_xyz_cut_coords", "nilearn.plotting.plot_anat", "nilearn.plotting.plot_carpet", "nilearn.plotting.plot_connectome", "nilearn.plotting.plot_contrast_matrix", "nilearn.plotting.plot_design_matrix", "nilearn.plotting.plot_epi", "nilearn.plotting.plot_event", "nilearn.plotting.plot_glass_brain", "nilearn.plotting.plot_img", "nilearn.plotting.plot_img_comparison", "nilearn.plotting.plot_img_on_surf", "nilearn.plotting.plot_markers", "nilearn.plotting.plot_matrix", "nilearn.plotting.plot_prob_atlas", "nilearn.plotting.plot_roi", "nilearn.plotting.plot_stat_map", "nilearn.plotting.plot_surf", "nilearn.plotting.plot_surf_contours", "nilearn.plotting.plot_surf_roi", "nilearn.plotting.plot_surf_stat_map", "nilearn.plotting.show", "nilearn.plotting.view_connectome", "nilearn.plotting.view_img", "nilearn.plotting.view_img_on_surf", "nilearn.plotting.view_markers", "nilearn.plotting.view_surf", "nilearn.regions.HierarchicalKMeans", "nilearn.regions.Parcellations", "nilearn.regions.ReNA", "nilearn.regions.RegionExtractor", "nilearn.regions.connected_label_regions", "nilearn.regions.connected_regions", "nilearn.regions.img_to_signals_labels", "nilearn.regions.img_to_signals_maps", "nilearn.regions.recursive_neighbor_agglomeration", "nilearn.regions.signals_to_img_labels", "nilearn.regions.signals_to_img_maps", "nilearn.reporting.HTMLReport", "nilearn.reporting.get_clusters_table", "nilearn.reporting.make_glm_report", "nilearn.signal.butterworth", "nilearn.signal.clean", "nilearn.signal.high_variance_confounds", "nilearn.surface.load_surf_data", "nilearn.surface.load_surf_mesh", "nilearn.surface.vol_to_surf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.glm</span></code>: Generalized Linear Models", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.image</span></code>: Image Processing and Resampling Utilities", "API References", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.interfaces</span></code>: Loading components from interfaces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.maskers</span></code>: Extracting Signals from Brain Images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.masking</span></code>: Data Masking Utilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.mass_univariate</span></code>: Mass-Univariate Analysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.plotting</span></code>: Plotting Brain Data", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.regions</span></code>: Operating on Regions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.reporting</span></code>: Reporting Functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.signal</span></code>: Preprocessing Time Series", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.surface</span></code>: Manipulating Surface Data", "<span class=\"section-number\">7. </span>Plotting brain images", "Quickstart", "User guide"], "terms": {"thi": [0, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 115, 116, 117, 124, 125, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 174, 175, 176, 177, 178, 179, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 432, 433, 435, 437], "work": [0, 2, 3, 20, 30, 31, 32, 34, 39, 48, 55, 61, 64, 84, 89, 92, 98, 125, 133, 134, 141, 148, 149, 152, 153, 158, 159, 160, 162, 166, 167, 168, 169, 175, 177, 178, 179, 185, 186, 187, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 321, 325, 326, 327, 328, 329, 330, 331, 332, 373, 379, 384, 403, 404, 405, 406, 415, 424, 426], "i": [0, 2, 4, 6, 9, 10, 11, 14, 15, 16, 18, 20, 21, 22, 23, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 98, 100, 101, 102, 103, 104, 105, 106, 108, 111, 114, 115, 116, 117, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 178, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 435, 436, 437], "made": [0, 21, 101, 108, 124, 144, 147, 148, 152, 163, 166, 167, 169, 172, 174, 175, 249, 250, 251, 252, 254, 255, 342, 399, 437], "avail": [0, 3, 15, 23, 24, 31, 39, 42, 62, 75, 80, 89, 94, 101, 106, 108, 117, 124, 141, 146, 152, 154, 157, 160, 162, 166, 168, 171, 174, 175, 193, 197, 200, 206, 214, 223, 225, 227, 232, 254, 255, 389, 394, 422, 436, 437], "commun": [0, 114, 167, 173, 175, 214, 436], "peopl": [0, 6, 135, 138, 139, 140, 141, 142, 143, 152, 166, 167], "which": [0, 3, 6, 9, 12, 14, 15, 21, 22, 23, 25, 29, 30, 32, 33, 34, 36, 37, 40, 42, 44, 47, 49, 51, 58, 61, 66, 68, 69, 70, 75, 76, 79, 84, 89, 91, 94, 98, 100, 108, 111, 116, 117, 122, 123, 124, 126, 131, 132, 135, 136, 137, 138, 139, 141, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 157, 158, 159, 160, 162, 164, 165, 166, 167, 168, 169, 172, 174, 175, 177, 178, 179, 192, 199, 201, 202, 204, 205, 208, 209, 214, 228, 229, 230, 231, 235, 236, 237, 239, 249, 250, 251, 252, 253, 254, 255, 256, 257, 268, 271, 272, 273, 274, 280, 281, 284, 288, 289, 294, 296, 298, 303, 309, 314, 318, 320, 321, 326, 327, 328, 329, 330, 331, 332, 335, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 389, 390, 391, 392, 393, 394, 395, 396, 399, 404, 406, 407, 408, 414, 416, 422, 435, 436], "origin": [0, 6, 36, 40, 41, 49, 50, 66, 70, 84, 89, 93, 100, 124, 132, 145, 147, 148, 152, 156, 164, 166, 175, 179, 185, 186, 187, 206, 214, 218, 223, 232, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 318, 325, 326, 327, 328, 329, 330, 331, 332, 378, 393, 395, 396, 400, 402, 403, 404, 405, 406, 418], "from": [0, 4, 6, 8, 9, 10, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 92, 93, 95, 96, 97, 99, 101, 102, 103, 104, 107, 108, 109, 111, 114, 115, 118, 119, 121, 122, 123, 124, 125, 126, 128, 131, 134, 135, 138, 139, 141, 146, 147, 148, 150, 152, 153, 155, 156, 157, 158, 159, 160, 162, 164, 165, 166, 167, 168, 169, 172, 173, 174, 175, 176, 181, 185, 186, 187, 189, 194, 195, 197, 199, 200, 201, 202, 204, 205, 206, 208, 209, 211, 213, 214, 215, 217, 218, 219, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 238, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 263, 264, 270, 271, 272, 273, 274, 275, 278, 280, 281, 284, 288, 294, 295, 296, 298, 299, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 377, 378, 380, 382, 383, 384, 386, 387, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 402, 403, 404, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 422, 428, 430, 435, 436, 437], "inria": [0, 20, 114, 165, 203, 406], "mind": [0, 51, 159, 160, 167, 172], "project": [0, 8, 9, 15, 23, 24, 27, 42, 58, 75, 108, 111, 113, 114, 131, 133, 135, 143, 147, 148, 152, 166, 168, 173, 193, 198, 225, 232, 238, 256, 257, 299, 346, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379, 384, 387, 389, 393, 394, 395, 396, 397, 398, 401, 418, 422, 435], "grew": 0, "much": [0, 3, 24, 40, 42, 51, 77, 79, 99, 100, 138, 152, 159, 166, 167, 169, 174, 211, 303, 314, 422], "further": [0, 14, 15, 55, 66, 70, 84, 94, 115, 153, 161, 163, 166, 175, 177, 181, 228, 281, 294, 322, 356, 427, 428, 435, 437], "an": [0, 2, 3, 4, 11, 14, 15, 16, 20, 21, 22, 23, 25, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 54, 55, 56, 60, 62, 63, 66, 67, 68, 69, 70, 71, 73, 75, 79, 80, 83, 84, 88, 89, 91, 92, 94, 96, 100, 101, 102, 103, 105, 108, 113, 114, 116, 117, 123, 124, 125, 126, 129, 130, 131, 133, 134, 135, 136, 138, 141, 143, 144, 145, 146, 148, 150, 152, 153, 154, 155, 157, 160, 161, 162, 163, 164, 165, 166, 168, 170, 171, 172, 174, 175, 177, 178, 179, 185, 186, 187, 191, 195, 198, 199, 203, 209, 214, 223, 224, 226, 228, 230, 232, 233, 243, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 268, 270, 271, 272, 273, 274, 277, 281, 288, 290, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 308, 309, 310, 311, 313, 314, 315, 316, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 414, 416, 418, 419, 420, 422, 424, 437], "up": [0, 3, 6, 33, 36, 47, 84, 86, 89, 94, 98, 103, 114, 123, 125, 138, 139, 141, 146, 148, 152, 156, 162, 163, 165, 166, 168, 169, 170, 172, 179, 233, 268, 271, 295, 342, 378, 403, 422, 437], "date": [0, 147, 152, 196, 199, 218, 228, 230], "list": [0, 2, 3, 6, 9, 14, 15, 16, 21, 30, 33, 44, 47, 48, 49, 51, 53, 55, 61, 62, 64, 67, 71, 72, 75, 76, 79, 80, 85, 94, 99, 100, 101, 103, 108, 111, 116, 117, 123, 125, 126, 129, 131, 132, 133, 137, 138, 141, 147, 148, 150, 152, 153, 159, 167, 174, 177, 178, 179, 185, 186, 187, 189, 191, 192, 193, 195, 196, 199, 201, 202, 203, 204, 205, 207, 208, 210, 211, 214, 215, 217, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 239, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 263, 276, 278, 279, 281, 283, 284, 288, 294, 295, 296, 297, 299, 300, 308, 309, 311, 314, 316, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 374, 380, 383, 386, 387, 389, 390, 393, 394, 395, 396, 401, 402, 404, 406, 407, 408, 409, 410, 415, 416, 418, 420, 421, 422, 436], "can": [0, 2, 3, 4, 6, 9, 11, 12, 14, 15, 20, 21, 22, 23, 24, 25, 29, 30, 32, 33, 34, 39, 40, 42, 43, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 61, 62, 64, 65, 66, 68, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 86, 88, 89, 91, 92, 93, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 111, 114, 115, 116, 117, 123, 124, 126, 129, 131, 133, 138, 139, 141, 144, 145, 146, 147, 148, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 174, 175, 177, 178, 179, 186, 187, 189, 192, 193, 196, 199, 200, 201, 202, 203, 204, 205, 209, 223, 225, 228, 232, 249, 250, 251, 252, 253, 254, 255, 271, 273, 274, 281, 283, 284, 288, 294, 296, 299, 300, 301, 306, 309, 310, 311, 314, 315, 318, 319, 322, 323, 328, 331, 334, 335, 336, 337, 338, 339, 341, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 378, 379, 380, 382, 383, 384, 385, 386, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 404, 406, 407, 408, 414, 415, 416, 417, 418, 422, 435, 436, 437], "seen": [0, 3, 14, 41, 49, 116, 154, 156, 160, 162, 164, 169, 174, 175, 404, 435], "github": [0, 3, 4, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 53, 54, 57, 58, 61, 62, 64, 67, 71, 72, 75, 77, 78, 79, 84, 86, 91, 92, 94, 95, 98, 100, 101, 102, 104, 105, 106, 108, 111, 146, 150, 152, 167, 174, 175, 193, 205, 218, 323, 400, 435, 436], "addit": [0, 14, 15, 55, 63, 66, 69, 70, 79, 86, 89, 101, 116, 117, 119, 124, 133, 138, 144, 152, 159, 162, 166, 168, 172, 174, 175, 195, 217, 227, 249, 250, 251, 252, 256, 257, 269, 281, 288, 294, 296, 319, 322, 323, 325, 328, 331, 403, 404, 405, 414, 435], "credit": 0, "goe": [0, 14, 40, 86, 94, 100, 166, 186, 189], "michael": [0, 114, 118, 122, 126, 138, 152, 165, 196, 204, 238, 323], "hank": [0, 122, 126, 152], "yaroslav": [0, 135, 138, 152], "halchenko": [0, 135, 138, 152], "data": [0, 1, 2, 7, 18, 19, 20, 21, 24, 26, 28, 31, 34, 36, 38, 43, 45, 46, 50, 51, 53, 58, 59, 60, 62, 63, 65, 68, 70, 73, 76, 77, 78, 79, 80, 81, 84, 86, 90, 91, 92, 95, 99, 101, 102, 104, 105, 106, 108, 111, 113, 114, 115, 117, 123, 124, 125, 128, 131, 132, 133, 134, 135, 136, 138, 139, 141, 144, 145, 146, 148, 149, 150, 152, 154, 155, 157, 160, 161, 163, 165, 166, 167, 168, 170, 171, 172, 173, 174, 176, 185, 186, 187, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 249, 250, 251, 252, 253, 254, 255, 256, 257, 262, 263, 264, 266, 268, 271, 272, 281, 288, 289, 290, 294, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 377, 378, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 416, 418, 420, 422, 423, 424, 426, 435, 437], "packag": [0, 3, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 67, 71, 72, 77, 78, 79, 84, 86, 91, 92, 94, 95, 98, 100, 101, 102, 104, 105, 106, 108, 111, 121, 122, 123, 124, 138, 141, 146, 148, 152, 167, 169, 174, 175, 177, 201, 202, 435], "The": [0, 2, 3, 11, 14, 15, 17, 18, 19, 20, 21, 22, 23, 28, 29, 30, 32, 33, 34, 36, 40, 41, 42, 43, 45, 47, 48, 49, 51, 52, 54, 55, 58, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 75, 76, 77, 79, 80, 81, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 104, 106, 108, 111, 113, 114, 116, 117, 119, 120, 121, 123, 124, 126, 128, 129, 130, 131, 132, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 156, 157, 158, 160, 161, 162, 163, 164, 166, 167, 168, 169, 171, 172, 174, 175, 176, 177, 178, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 204, 205, 206, 208, 209, 214, 215, 217, 218, 219, 221, 222, 223, 225, 226, 228, 229, 230, 231, 232, 233, 234, 237, 238, 249, 250, 251, 252, 253, 254, 255, 256, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 283, 284, 288, 289, 290, 294, 295, 296, 297, 298, 299, 300, 301, 305, 309, 310, 311, 312, 313, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 422, 426, 427, 431, 435, 436, 437], "ar": [0, 2, 3, 4, 6, 9, 10, 14, 19, 20, 21, 23, 24, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 74, 77, 78, 79, 80, 81, 84, 86, 87, 89, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 116, 117, 121, 123, 124, 125, 131, 133, 134, 136, 138, 139, 141, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 174, 175, 177, 178, 179, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 232, 233, 234, 235, 236, 237, 238, 239, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 268, 271, 272, 273, 274, 277, 278, 281, 283, 284, 288, 290, 294, 296, 298, 299, 303, 305, 311, 313, 314, 315, 316, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 412, 413, 414, 415, 416, 418, 420, 421, 422, 430, 435, 436], "alexi": [0, 114, 123, 124, 138, 141, 146, 148, 150, 152, 238], "thual": [0, 123, 124, 146, 148, 150, 152], "bertrand": [0, 49, 114, 118, 121, 125, 126, 131, 135, 138, 139, 141, 148, 149, 152, 161, 165, 185, 186, 200, 203, 223, 251, 252, 256, 257, 405, 406, 411], "thirion": [0, 49, 72, 114, 118, 121, 125, 126, 131, 135, 138, 139, 141, 148, 149, 152, 156, 161, 165, 185, 186, 200, 203, 223, 251, 252, 256, 257, 405, 406, 411], "elizabeth": [0, 114, 135, 139, 141, 142, 143, 152, 273, 274], "dupr": [0, 135, 139, 141, 142, 143, 152], "hao": [0, 123, 124, 125, 145, 146, 148, 150, 152], "ting": [0, 123, 124, 125, 145, 146, 148, 150, 152], "wang": [0, 114, 123, 124, 125, 145, 146, 148, 150, 152, 232], "jerom": [0, 125, 131, 135, 137, 138, 139, 141, 142, 150, 152], "dock": [0, 125, 131, 135, 137, 138, 139, 141, 142, 150, 152], "nicola": [0, 114, 145, 146, 147, 148, 149, 150, 152, 206, 225], "gensollen": [0, 145, 146, 147, 148, 149, 150, 152], "r\u00e9mi": [0, 124, 125, 135, 152], "gau": [0, 124, 125, 152], "taylor": [0, 114, 123, 124, 125, 145, 148, 149, 150, 152, 165], "salo": [0, 123, 124, 125, 145, 148, 149, 150, 152], "yasmin": [0, 123, 124, 125, 150, 152, 174], "mzayek": [0, 123, 124, 125, 150, 152], "some": [0, 3, 6, 14, 15, 30, 40, 41, 43, 48, 49, 56, 66, 68, 69, 71, 80, 84, 86, 92, 98, 103, 104, 111, 116, 117, 125, 131, 138, 144, 147, 148, 150, 152, 159, 160, 162, 164, 166, 167, 169, 171, 174, 175, 177, 178, 179, 185, 186, 187, 193, 199, 201, 202, 204, 205, 208, 228, 249, 250, 251, 252, 253, 254, 255, 256, 257, 271, 281, 294, 297, 299, 321, 325, 326, 327, 328, 329, 330, 331, 332, 384, 385, 388, 391, 392, 399, 403, 404, 405, 406, 409, 415, 418, 435, 436], "past": [0, 56, 116, 154, 323], "present": [0, 3, 6, 40, 41, 54, 56, 65, 69, 70, 101, 108, 116, 124, 134, 152, 157, 158, 159, 166, 168, 169, 170, 175, 177, 179, 189, 199, 217, 249, 250, 251, 252, 256, 257, 309, 322, 323, 327, 328, 329, 330, 331, 403, 404, 405, 409], "ahmad": [0, 123, 124, 125, 147, 148, 150, 152], "chamma": [0, 123, 124, 125, 147, 148, 150, 152], "saclai": [0, 167], "franc": [0, 167], "aina": [0, 126, 152], "frau": [0, 126, 152], "pascual": [0, 126, 152], "alex": [0, 56, 114, 135, 138, 152, 164, 218, 323], "rothberg": [0, 135, 138, 152], "free": [0, 114, 160, 167, 169, 172, 296, 342], "agenc": 0, "new": [0, 2, 3, 10, 11, 20, 36, 49, 66, 72, 79, 84, 86, 94, 98, 102, 103, 107, 111, 114, 116, 122, 132, 133, 134, 135, 136, 149, 159, 160, 161, 162, 167, 172, 174, 175, 178, 179, 185, 186, 187, 191, 192, 197, 200, 202, 205, 207, 208, 213, 214, 215, 219, 228, 230, 238, 240, 241, 242, 243, 244, 245, 249, 250, 251, 252, 253, 254, 255, 256, 257, 273, 274, 281, 290, 294, 296, 298, 299, 308, 309, 310, 311, 312, 313, 314, 315, 318, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 342, 377, 378, 379, 380, 382, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 403, 404, 405, 406, 407, 408, 414, 415, 418, 422, 435, 436], "york": [0, 114, 273, 274], "usa": 0, "alexandr": [0, 49, 114, 118, 119, 121, 122, 125, 126, 128, 131, 138, 140, 141, 152, 165, 186, 203, 406], "abadi": [0, 126, 128, 131, 138, 152], "pari": [0, 167], "abraham": [0, 114, 118, 119, 121, 122, 126, 128, 131, 141, 152, 157, 322, 323, 406], "bazemont": 0, "\u00eele": 0, "de": [0, 114, 138, 141, 152, 273, 274, 289], "gramfort": [0, 49, 114, 118, 121, 140, 141, 152, 165, 186, 203], "meta": [0, 3, 14, 97, 100, 103, 109, 113, 117, 185, 186, 187, 230, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 304, 309, 310, 312, 325, 326, 327, 328, 329, 330, 331, 332, 384, 392, 397, 403, 404, 405, 406], "savio": [0, 118, 152], "cionca": [0, 125, 152], "centr": 0, "hospitali": 0, "universitair": 0, "vaudois": 0, "lausann": 0, "switzerland": 0, "alisha": [0, 125, 152], "kodibagkar": [0, 125, 152], "mit": [0, 114, 205, 206, 232], "mcgovern": 0, "institut": [0, 169, 172, 195], "cambridg": 0, "massachusett": 0, "unit": [0, 6, 15, 55, 57, 114, 157, 159, 165, 166, 167, 179, 253, 273, 274, 296, 299, 326, 327, 328, 329, 330, 331, 332, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 418], "state": [0, 2, 23, 30, 32, 48, 49, 50, 54, 56, 66, 85, 87, 89, 92, 100, 114, 125, 133, 144, 146, 152, 153, 154, 156, 157, 158, 160, 165, 169, 172, 174, 175, 194, 196, 197, 225, 238, 249, 250, 251, 252, 253, 256, 257, 281, 290, 296, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 404, 406, 418, 437], "amadeu": [0, 47, 131, 152], "kanaan": [0, 47, 131, 152], "ana": [0, 141, 145, 147, 152], "luisa": [0, 141, 145, 147, 152], "pinho": [0, 141, 145, 147, 152], "western": 0, "univers": [0, 172, 174], "london": [0, 114, 172, 215, 233], "ontario": 0, "canada": 0, "andr\u00e9": [0, 114, 141, 152, 161, 199, 251, 252], "hoyo": [0, 49, 114, 141, 152, 161, 251, 252, 405, 411], "idrobo": [0, 49, 114, 141, 152, 161, 251, 252, 405, 411], "rakuten": 0, "ann": [0, 114, 124, 152, 211, 212], "sophi": [0, 124, 152], "kiesling": [0, 124, 152], "max": [0, 11, 30, 34, 42, 44, 49, 53, 55, 57, 58, 70, 80, 84, 88, 102, 103, 105, 111, 114, 146, 152, 166, 185, 314, 315, 342, 346, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 377, 378, 382, 384, 385, 387, 390, 391, 392, 393, 395, 396, 399, 400, 402], "planck": 0, "human": [0, 8, 22, 23, 27, 31, 32, 39, 40, 41, 43, 58, 68, 113, 114, 117, 164, 167, 172, 193, 198, 199, 204, 205, 207, 208, 209, 212, 225, 227, 228, 230, 237, 299, 323, 389, 397, 418], "cognit": [0, 72, 100, 103, 114, 159, 169, 172, 174, 179, 206, 215, 223, 226, 232, 233], "brain": [0, 2, 3, 4, 6, 9, 12, 15, 20, 21, 22, 23, 27, 31, 32, 36, 39, 41, 43, 44, 46, 52, 54, 55, 59, 64, 66, 67, 69, 70, 76, 78, 79, 80, 85, 89, 92, 94, 96, 98, 100, 104, 107, 114, 116, 117, 124, 126, 129, 131, 132, 133, 135, 136, 138, 139, 141, 144, 146, 147, 152, 153, 155, 159, 160, 161, 162, 164, 165, 167, 168, 169, 172, 173, 174, 177, 179, 185, 186, 193, 195, 197, 198, 200, 201, 203, 204, 206, 208, 211, 212, 213, 214, 218, 219, 225, 227, 228, 230, 231, 232, 237, 240, 243, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 276, 299, 301, 304, 306, 311, 322, 323, 325, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 342, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 374, 375, 376, 379, 382, 384, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 406, 407, 408, 409, 414, 418, 428, 436, 437], "scienc": [0, 3, 23, 38, 48, 58, 98, 114, 158, 161, 164, 165, 174, 185, 195, 197, 200, 203, 206, 207, 211, 213, 214, 217, 218, 223, 225, 226, 227, 238, 243, 251, 252, 253, 322, 323, 342, 378, 419, 437], "leipzig": 0, "germnai": 0, "ariel": [0, 126, 138, 152], "rokem": [0, 126, 138, 152], "washington": 0, "psychologi": 0, "seattl": 0, "98107": 0, "arthur": [0, 48, 114, 122, 126, 128, 131, 152, 158, 200, 257], "mensch": [0, 48, 114, 122, 126, 128, 131, 152, 158, 200, 257], "aswin": [0, 125, 152], "vijayan": [0, 125, 152], "audrei": [0, 123, 152], "duran": [0, 123, 152], "therapanacea": 0, "ben": [0, 56, 114, 118, 119, 121, 126, 128, 152, 323], "cipollini": [0, 118, 119, 121, 126, 128, 152], "facebook": 0, "hayward": 0, "california": 0, "binh": [0, 141, 144, 146, 152], "nguyen": [0, 141, 144, 146, 152], "caglar": [0, 150, 152], "cakan": [0, 150, 152], "technisch": 0, "universit\u00e4t": 0, "berlin": [0, 114, 185, 203, 218], "germani": [0, 114, 165], "chri": [0, 118, 126, 141, 152], "gorgolewski": [0, 114, 117, 118, 126, 152, 200, 215, 228, 230, 233], "googl": 0, "llc": 0, "markiewicz": [0, 141, 152], "stanford": [0, 114, 165], "christian": [0, 114, 124, 135, 138, 152, 206, 225, 322, 323], "horea": [0, 135, 138, 152], "dartmouth": 0, "colleg": [0, 172], "pb": 0, "hanov": 0, "hampshir": 0, "gerloff": [0, 124, 152], "colin": [0, 141, 152], "reining": [0, 141, 152], "denver": 0, "colorado": 0, "connor": [0, 150, 152], "lane": [0, 114, 150, 152, 342], "child": [0, 51, 214], "baltimor": 0, "md": [0, 205], "czarina": [0, 125, 152], "sy": [0, 41, 125, 152], "c\u00e9line": [0, 141, 152], "delettr": [0, 141, 152], "dan": [0, 114, 138, 141, 152, 208], "gale": [0, 138, 141, 152], "neurosci": [0, 23, 49, 66, 72, 114, 156, 164, 172, 174, 193, 196, 206, 223, 225, 232, 238, 437], "studi": [0, 2, 6, 9, 31, 33, 40, 42, 56, 66, 71, 75, 97, 99, 109, 113, 114, 117, 155, 160, 162, 163, 165, 166, 169, 173, 177, 197, 218, 228, 230, 232, 240, 243, 253, 304, 309, 310, 312, 316, 322, 323, 325, 331, 384, 392, 397, 437], "queen": 0, "kingston": 0, "daniel": [0, 56, 114, 138, 141, 147, 150, 152, 225, 228, 230, 232, 238, 322, 323], "gomez": [0, 138, 141, 147, 150, 152], "danilo": [0, 118, 119, 121, 122, 126, 128, 152], "bzdok": [0, 118, 119, 121, 122, 126, 128, 152], "mcgill": [0, 218], "mila": 0, "quebec": 0, "ai": 0, "montr\u00e9al": [0, 174], "david": [0, 56, 114, 117, 150, 152, 199, 206, 225, 228, 230, 238, 322, 323, 342], "g": [0, 6, 9, 14, 22, 24, 30, 31, 40, 42, 43, 47, 48, 49, 55, 61, 64, 67, 68, 94, 99, 100, 105, 114, 117, 124, 146, 150, 152, 154, 158, 164, 166, 167, 168, 169, 171, 172, 174, 178, 179, 185, 186, 187, 198, 208, 225, 232, 249, 250, 251, 252, 253, 254, 255, 256, 257, 273, 274, 281, 288, 294, 298, 301, 318, 322, 325, 326, 327, 328, 329, 330, 331, 332, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 379, 387, 390, 393, 394, 395, 396, 398, 399, 400, 402, 403, 404, 405, 406, 409, 410, 412, 422, 435], "elli": [0, 150, 152], "nebraska": 0, "medic": [0, 114, 157, 165, 185, 203, 218, 406], "center": [0, 36, 47, 50, 51, 55, 58, 61, 79, 99, 105, 106, 139, 150, 152, 154, 157, 179, 185, 187, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 374, 375, 376, 378, 403, 404, 406, 415, 422], "demian": [0, 114, 121, 138, 152, 200], "wassermann": [0, 114, 121, 138, 152, 200], "derek": [0, 141, 152], "pisner": [0, 141, 152], "st": 0, "petersburg": 0, "fl": 0, "dimitri": [0, 114, 123, 126, 138, 152, 166, 167, 186, 189, 223, 406], "papadopoulo": [0, 114, 123, 126, 138, 152, 167, 223], "orfano": [0, 114, 123, 126, 138, 152, 167, 223], "neurospin": [0, 60, 65, 73, 113, 167, 168, 383], "cea": 0, "universit\u00e9": [0, 167], "gif": [0, 62, 167], "sur": [0, 167], "yvett": [0, 167], "elvi": [0, 49, 114, 118, 121, 126, 128, 131, 152, 165, 406, 432], "dohmatob": [0, 49, 114, 118, 121, 126, 128, 131, 152, 165, 406, 432], "research": [0, 172, 177, 179, 214, 323], "fair": [0, 114, 158, 211], "eric": [0, 114, 135, 138, 139, 141, 152, 199, 207, 211], "larson": [0, 135, 138, 139, 141, 152], "evan": [0, 114, 146, 152, 197, 205, 208, 218, 243], "edmond": [0, 146, 152], "oxford": [0, 21, 91, 114, 154, 201, 273, 274, 374, 375], "uk": [0, 6, 21, 71, 114, 165, 206, 235, 236], "fabian": [0, 114, 118, 152, 203], "pedregosa": [0, 114, 118, 152, 203], "geneva": 0, "franz": [0, 55, 139, 141, 143, 152], "liem": [0, 55, 139, 141, 143, 152], "fran\u00e7oi": [0, 125, 152], "paugam": [0, 125, 152], "gael": [0, 49, 114, 118, 119, 121, 122, 126, 128, 131, 135, 138, 139, 140, 141, 143, 152, 185, 186, 203, 228, 230, 256, 257, 405, 406, 411], "varoquaux": [0, 48, 49, 56, 114, 117, 118, 119, 121, 122, 126, 128, 131, 135, 138, 139, 140, 141, 143, 152, 153, 154, 158, 159, 161, 165, 174, 185, 186, 200, 203, 228, 230, 251, 252, 256, 257, 405, 406, 411], "gill": [0, 138, 141, 152], "holland": [0, 138, 141, 152], "vrije": 0, "universiteit": 0, "amsterdam": 0, "netherland": 0, "greg": [0, 138, 141, 152], "kiar": [0, 141, 152], "greydon": [0, 146, 152], "gilmor": [0, 146, 152], "depart": [0, 172], "mathemat": [0, 129, 152, 172, 310, 424], "toronto": 0, "guillaum": [0, 138, 141, 152], "lemaitr": [0, 138, 141, 152], "geriatr": 0, "criugm": 0, "himanshu": 0, "aggarw": 0, "ian": [0, 141, 152], "aben": [0, 141, 152], "jake": [0, 141, 152], "vogel": [0, 114, 141, 152, 211, 212], "clinic": [0, 51, 99, 160, 174], "scilifelab": 0, "lund": 0, "sweden": 0, "jan": [0, 114, 118, 152, 322, 323], "margeta": [0, 118, 152], "kardiom": 0, "nova": 0, "dubnica": 0, "slovakia": 0, "jaqu": [0, 118, 152], "grobler": [0, 118, 152], "anylin": 0, "gmbh": 0, "vienna": 0, "austria": 0, "jason": [0, 118, 138, 152], "gor": [0, 118, 138, 152], "insight": [0, 56, 147, 152, 153], "mountain": 0, "view": [0, 6, 13, 14, 16, 22, 23, 33, 37, 42, 52, 54, 58, 61, 62, 64, 66, 71, 75, 84, 102, 124, 125, 135, 144, 146, 150, 152, 159, 164, 166, 174, 179, 249, 250, 251, 252, 256, 257, 314, 328, 331, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 379, 382, 384, 385, 387, 388, 390, 391, 392, 393, 395, 396, 398, 399, 401, 404, 435, 437], "javier": [0, 146, 152], "rasero": [0, 146, 152], "school": 0, "virginia": 0, "viginia": 0, "jean": [0, 49, 114, 118, 135, 138, 152, 166, 186, 189, 223, 228, 230, 256], "kossaifi": [0, 118, 152], "imperi": 0, "king": [0, 114, 135, 138, 152, 238], "cnr": [0, 195], "jell": [0, 114, 123, 124, 152, 276], "roelof": [0, 123, 124, 152], "dalenberg": [0, 123, 124, 152], "groningen": 0, "jeremi": [0, 146, 152], "lefort": [0, 146, 152], "besnard": [0, 146, 152], "renn": 0, "origami": 0, "lab": 0, "chevali": [0, 138, 141, 152], "emerton": 0, "johann": [0, 141, 152], "wiesner": [0, 141, 152], "central": [0, 91], "mental": [0, 66, 69, 72, 81, 223, 229], "health": 0, "mannheim": 0, "jon": [0, 143, 152], "haitz": [0, 143, 152], "legarreta": [0, 143, 152], "gorrono": [0, 143, 152], "brigham": 0, "women": 0, "": [0, 2, 3, 4, 6, 9, 16, 23, 29, 30, 33, 34, 37, 40, 41, 44, 49, 50, 55, 56, 64, 65, 66, 67, 68, 69, 71, 72, 75, 77, 78, 79, 80, 86, 91, 93, 94, 100, 102, 103, 108, 114, 117, 131, 138, 148, 149, 153, 156, 160, 163, 164, 166, 167, 169, 170, 171, 172, 174, 175, 177, 178, 179, 185, 186, 187, 195, 197, 198, 206, 208, 209, 211, 212, 218, 223, 225, 228, 230, 232, 249, 250, 251, 252, 253, 254, 255, 256, 257, 271, 273, 274, 281, 294, 298, 299, 308, 310, 314, 315, 316, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 378, 379, 387, 388, 393, 394, 395, 396, 398, 400, 402, 403, 404, 405, 406, 416, 418, 435, 437], "hospit": 0, "mass": [0, 58, 79, 150, 152, 296, 342, 374, 415], "gener": [0, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 111, 113, 116, 123, 125, 138, 139, 141, 143, 144, 146, 148, 152, 159, 160, 162, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 179, 197, 198, 200, 223, 233, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 271, 273, 274, 281, 288, 294, 296, 297, 298, 299, 304, 310, 311, 321, 322, 323, 326, 327, 328, 329, 330, 331, 340, 342, 383, 387, 392, 393, 394, 395, 396, 397, 403, 404, 406, 414, 418, 426, 435, 436], "harvard": [0, 21, 47, 91, 154, 201, 209, 374, 375], "boston": 0, "jona": [0, 114, 135, 152, 405, 411], "sassenhagen": [0, 135, 152], "joshua": [0, 114, 143, 152, 205, 209], "teve": [0, 143, 152], "julia": [0, 126, 141, 152], "huntenburg": [0, 126, 141, 152], "intern": [0, 34, 114, 165, 166, 167, 169, 187, 197, 256, 257, 308, 310], "laboratori": 0, "julio": [0, 124, 152], "A": [0, 1, 5, 6, 7, 11, 15, 16, 21, 23, 40, 41, 42, 47, 48, 49, 56, 61, 64, 67, 69, 71, 75, 76, 79, 80, 84, 86, 89, 98, 100, 102, 105, 106, 110, 112, 113, 114, 117, 124, 133, 134, 138, 141, 147, 152, 153, 155, 156, 158, 160, 162, 163, 164, 166, 167, 168, 170, 172, 174, 175, 177, 178, 179, 185, 186, 187, 196, 198, 199, 204, 206, 208, 211, 212, 213, 215, 217, 225, 226, 228, 229, 230, 231, 233, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 272, 273, 274, 277, 280, 281, 284, 290, 294, 299, 300, 306, 311, 312, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 342, 353, 354, 358, 374, 375, 378, 382, 387, 389, 391, 393, 394, 397, 399, 403, 404, 405, 406, 407, 408, 413, 414, 416, 417, 418, 419, 435, 437], "peraza": [0, 124, 152], "florida": 0, "miami": 0, "kamalakar": [0, 121, 126, 128, 131, 135, 136, 138, 141, 145, 152], "reddi": [0, 121, 126, 128, 131, 135, 136, 137, 138, 141, 145, 152], "daddi": [0, 121, 126, 128, 131, 135, 136, 138, 141, 145, 152], "kevin": [0, 124, 152], "sitek": [0, 124, 152], "northwestern": 0, "evanston": 0, "ilinoi": 0, "koen": [0, 150, 152], "helwegen": [0, 150, 152], "dutch": 0, "connectom": [0, 8, 12, 22, 27, 46, 48, 49, 51, 54, 56, 57, 59, 99, 111, 113, 114, 119, 126, 130, 131, 135, 138, 139, 141, 144, 146, 152, 155, 157, 158, 172, 173, 174, 179, 193, 200, 203, 209, 211, 212, 214, 225, 256, 257, 306, 323, 325, 326, 327, 329, 330, 332, 355, 374, 375, 376, 377, 379, 388, 389, 390, 392, 397, 398, 399, 401, 406, 437], "vu": 0, "konrad": [0, 125, 152], "wagstyl": [0, 125, 152], "konstantin": [0, 118, 152], "shmelkov": [0, 118, 152], "kshitij": [0, 138, 139, 140, 141, 142, 143, 144, 152], "chawla": [0, 138, 139, 140, 141, 142, 143, 144, 152], "duke": 0, "system": [0, 6, 23, 42, 43, 114, 159, 166, 167, 175, 177, 196, 237, 239], "kun": [0, 150, 152], "chen": [0, 37, 114, 150, 152, 225], "macau": 0, "china": 0, "leonard": [0, 148, 152], "sass": [0, 148, 152], "loic": [0, 118, 119, 121, 122, 126, 128, 131, 141, 152], "est\u00e8v": [0, 118, 119, 121, 122, 126, 128, 131, 152], "tetrel": [0, 141, 152], "luz": 0, "paz": 0, "manon": [0, 150, 152], "pietrantoni": [0, 150, 152], "martin": [0, 114, 126, 131, 145, 152, 196, 218, 237, 299, 418, 432], "perez": [0, 126, 131, 152, 432], "guevara": [0, 126, 131, 152, 432], "criteo": 0, "wegrzyn": [0, 145, 152], "bielefeld": 0, "mathia": [0, 124, 152], "goncalv": [0, 124, 152], "mathieu": [0, 125, 152], "dugr\u00e9": [0, 125, 152], "concordia": 0, "matthia": [0, 118, 152], "ekman": [0, 118, 152], "donder": 0, "nijmegen": 0, "matthieu": [0, 150, 152], "joulot": [0, 150, 152], "arami": 0, "maximilian": [0, 125, 152], "cosmo": [0, 125, 152], "sitter": [0, 125, 152], "mehdi": [0, 118, 122, 126, 135, 141, 152], "rahim": [0, 118, 122, 126, 135, 141, 152], "air": 0, "liquid": 0, "eickenberg": [0, 114, 118, 152, 165], "flatiron": 0, "psychoinformat": 0, "forschungszentrum": 0, "j\u00fclich": 0, "notter": [0, 138, 152], "am": [0, 114, 199], "osram": 0, "martigni": 0, "waskom": [0, 118, 152], "michel": [0, 44, 49, 114, 118, 124, 125, 152, 165, 203, 223, 238], "mohammad": [0, 124, 125, 152], "torabi": [0, 124, 125, 152], "moritz": [0, 135, 138, 141, 152], "boo": [0, 135, 138, 141, 152], "myeong": [0, 148, 152], "seop": [0, 148, 152], "song": [0, 148, 152], "natasha": [0, 123, 152], "clark": [0, 114, 123, 152, 164, 196], "simexp": [0, 435], "neelai": [0, 148, 152], "shah": [0, 148, 152], "intellig": [0, 49, 84], "oliv": [0, 70, 114, 125, 152, 164, 197], "warrington": [0, 125, 152], "wellcom": [0, 172], "neuroimag": [0, 2, 8, 22, 23, 27, 37, 48, 56, 62, 76, 94, 100, 101, 102, 113, 114, 115, 117, 138, 152, 153, 154, 158, 159, 161, 163, 164, 165, 167, 172, 173, 176, 181, 195, 197, 199, 200, 203, 207, 213, 217, 218, 223, 228, 230, 243, 249, 250, 251, 252, 253, 254, 255, 256, 257, 276, 281, 294, 296, 299, 300, 303, 304, 305, 306, 307, 308, 309, 311, 313, 314, 315, 316, 317, 319, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 377, 378, 382, 384, 385, 387, 390, 391, 392, 397, 399, 400, 404, 406, 409, 410, 412, 413, 416, 419, 422, 426, 435, 437], "ucl": [0, 6, 71, 114, 165, 235, 236], "oscar": [0, 138, 152], "esteban": [0, 138, 152], "patrick": [0, 125, 152], "sadil": [0, 125, 152], "biostatist": [0, 153], "john": [0, 114, 135, 152, 164, 166, 196, 211, 232, 238, 342], "hopkin": 0, "bloomberg": 0, "public": [0, 2, 62, 100, 117, 123, 125, 148, 150, 152, 167, 172, 232], "paul": [0, 114, 123, 152, 198, 225], "bogdan": [0, 123, 152], "paula": [0, 141, 152], "sanz": [0, 141, 152], "leon": [0, 141, 152], "brisban": 0, "australia": 0, "peer": [0, 138, 152], "herholz": [0, 138, 152], "philipp": [0, 114, 118, 152, 223, 256], "gervai": [0, 118, 152], "zurich": 0, "pierr": [0, 114, 135, 137, 138, 139, 152, 185, 197], "bellec": [0, 114, 138, 139, 152, 197], "glaser": [0, 137, 152], "gatsbi": 0, "comput": [0, 3, 6, 9, 15, 16, 22, 25, 29, 30, 31, 33, 39, 40, 41, 43, 44, 46, 47, 48, 49, 51, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 75, 77, 79, 81, 83, 85, 90, 92, 95, 98, 99, 100, 101, 102, 103, 104, 108, 113, 114, 115, 117, 125, 126, 138, 144, 145, 146, 148, 152, 155, 156, 158, 159, 160, 161, 162, 164, 165, 166, 169, 170, 172, 173, 174, 176, 177, 180, 185, 187, 189, 203, 214, 217, 227, 237, 249, 250, 251, 252, 253, 254, 255, 256, 257, 269, 271, 273, 274, 277, 278, 280, 281, 283, 288, 290, 294, 296, 297, 304, 305, 306, 309, 310, 311, 312, 316, 318, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 374, 376, 379, 382, 389, 390, 391, 392, 397, 398, 400, 403, 404, 405, 406, 414, 416, 417, 419, 422, 428, 435, 437], "olivi": [0, 135, 152], "quirion": [0, 135, 152], "canadian": 0, "genom": 0, "calcul": [0, 3, 31, 41, 47, 48, 58, 92, 97, 109, 111, 113, 124, 139, 152, 168, 222, 223, 249, 250, 251, 252, 256, 257, 271, 273, 274, 289, 296, 304, 322, 325, 328, 331, 335, 338, 342, 353, 370, 377, 382, 385, 390, 391, 392, 397, 399, 404, 416], "qu\u00e9bec": 0, "pradeep": [0, 137, 152], "raamana": [0, 137, 152], "pittsburgh": 0, "pa": [0, 284], "rahul": [0, 125, 152], "brito": [0, 125, 152], "raphael": [0, 123, 145, 146, 147, 148, 149, 150, 152], "meudec": [0, 123, 145, 146, 147, 148, 149, 150, 152], "robert": [0, 114, 123, 124, 146, 152, 166, 196, 218, 243], "luke": [0, 146, 152], "agencyenterpris": 0, "melbourn": 0, "williamson": [0, 123, 124, 152], "roberto": [0, 114, 131, 141, 152, 206], "guidotti": [0, 131, 141, 152], "d": [0, 26, 37, 41, 50, 51, 56, 58, 64, 67, 71, 100, 114, 117, 157, 166, 167, 195, 206, 211, 212, 215, 218, 228, 230, 233, 243, 269, 276, 299, 322, 323, 378, 389, 418, 424], "annunzio": 0, "chieti": 0, "pescara": 0, "san": 0, "benedetto": 0, "del": [0, 44], "tronto": 0, "itali": 0, "ronald": [0, 118, 152], "phlypo": [0, 118, 152], "lyon": 0, "area": [0, 23, 32, 64, 67, 80, 94, 146, 152, 157, 159, 164, 168, 169, 172, 173, 179, 208, 218, 237, 303, 343, 345, 346, 355, 358, 393, 396, 402], "ryan": [0, 114, 141, 152, 213], "hammond": [0, 141, 152], "uc": 0, "diego": [0, 114, 225], "sachin": [0, 150, 152], "patalasingh": [0, 150, 152], "sage": [0, 150, 152], "hahn": [0, 150, 152], "deephealth": 0, "salma": [0, 118, 121, 126, 128, 135, 138, 139, 152], "bougacha": [0, 118, 121, 126, 128, 135, 138, 139, 152], "sam": [0, 124, 152], "buck": [0, 124, 152], "johnson": [0, 124, 152], "sami": [0, 150, 152], "jawhar": [0, 150, 152], "simon": [0, 56, 114, 138, 143, 152, 205, 206, 322, 323], "steinkamp": [0, 138, 143, 152], "danish": 0, "magnet": [0, 169, 172, 197, 223], "reson": [0, 169, 172, 197, 223], "copenhagen": 0, "amag": 0, "hvidovr": 0, "denmark": 0, "sourav": [0, 138, 152], "singh": [0, 138, 152], "steven": [0, 114, 124, 152, 196, 211, 212, 213, 322, 323], "meisler": [0, 124, 152], "divis": [0, 91], "technologi": 0, "sylvain": [0, 135, 138, 141, 152], "lan": [0, 135, 138, 152], "takerkart": [0, 141, 152], "la": 0, "timon": 0, "marseil": 0, "tarun": [0, 125, 152], "samanta": [0, 125, 152], "acharya": 0, "prafulla": 0, "chandra": 0, "lifespan": 0, "informat": 0, "pennsylvania": 0, "thoma": [0, 114, 117, 141, 144, 147, 148, 152, 160, 174, 196, 205, 209, 225, 228, 230, 296, 322, 323, 342, 419], "bazeil": [0, 141, 144, 147, 148, 152], "tom": [0, 114, 146, 152, 196], "vanass": [0, 146, 152], "wisconsin": 0, "sleep": 0, "conscious": 0, "vasco": [0, 150, 152], "diogo": [0, 150, 152], "vincent": [0, 49, 114, 118, 152, 165, 196, 203, 223, 238, 323], "http": [0, 6, 9, 10, 11, 17, 18, 19, 20, 21, 22, 23, 26, 34, 38, 39, 40, 43, 47, 48, 49, 52, 56, 62, 64, 65, 67, 71, 72, 76, 77, 80, 81, 98, 99, 101, 102, 103, 107, 114, 117, 146, 150, 152, 157, 160, 161, 164, 165, 166, 167, 169, 174, 175, 186, 189, 193, 195, 196, 197, 198, 199, 200, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 217, 218, 219, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 243, 249, 250, 251, 252, 256, 268, 272, 273, 274, 296, 299, 322, 323, 342, 378, 400, 401, 405, 406, 411, 418, 419, 435, 436], "www": [0, 6, 9, 10, 11, 21, 22, 23, 26, 39, 40, 43, 64, 67, 71, 114, 117, 161, 164, 165, 193, 194, 195, 196, 197, 198, 200, 203, 206, 207, 213, 217, 218, 219, 223, 225, 226, 227, 228, 230, 232, 235, 236, 238, 243, 251, 252, 299, 322, 323, 342, 378, 418, 419], "logilab": 0, "fr": [0, 9, 10, 11, 20, 22, 23, 26, 39, 40, 43, 49, 114, 165, 195, 203, 406], "virgil": [0, 118, 152], "fritsch": [0, 118, 152], "zvi": [0, 143, 152], "baratz": [0, 143, 152], "tel": 0, "aviv": 0, "israel": 0, "\u00f3scar": [0, 118, 121, 126, 128, 152], "n\u00e1jera": [0, 118, 121, 126, 128, 152], "checkmk": 0, "paid": 0, "grant": 0, "chan": 0, "zuckerberg": 0, "initi": [0, 3, 12, 48, 49, 50, 67, 69, 94, 100, 125, 152, 157, 165, 168, 177, 179, 187, 189, 256, 257, 268, 272, 326, 327, 329, 330, 332, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 403, 406], "were": [0, 6, 18, 23, 40, 49, 62, 64, 66, 67, 79, 91, 94, 98, 101, 107, 108, 116, 121, 123, 141, 144, 148, 149, 150, 152, 159, 166, 167, 169, 228, 230, 299, 329, 332, 418], "niconnect": 0, "french": [0, 174], "investiss": 0, "avenir": 0, "wa": [0, 3, 40, 64, 67, 69, 91, 102, 105, 106, 116, 117, 123, 125, 138, 145, 146, 147, 148, 149, 152, 159, 161, 164, 166, 169, 204, 205, 254, 255, 256, 257, 288, 294, 296, 378, 387, 393, 395, 396, 400, 402, 409], "previous": [0, 3, 23, 98, 116, 141, 144, 148, 150, 152, 159, 169], "hbp": 0, "also": [0, 3, 4, 11, 14, 15, 16, 17, 22, 23, 29, 31, 34, 39, 40, 41, 42, 43, 49, 50, 51, 55, 56, 62, 63, 66, 68, 70, 71, 72, 75, 77, 79, 86, 89, 91, 93, 94, 95, 98, 108, 116, 117, 121, 123, 125, 126, 131, 132, 134, 138, 141, 144, 147, 148, 150, 152, 153, 154, 157, 158, 160, 161, 162, 164, 166, 167, 168, 169, 171, 172, 174, 175, 177, 178, 179, 180, 187, 201, 202, 203, 228, 230, 233, 249, 250, 251, 252, 254, 255, 281, 283, 288, 294, 306, 310, 314, 319, 320, 322, 333, 334, 335, 336, 337, 338, 339, 377, 378, 382, 383, 385, 390, 391, 392, 393, 395, 404, 407, 408, 412, 413, 416, 435, 437], "support": [0, 9, 15, 29, 32, 33, 34, 35, 44, 98, 105, 111, 116, 121, 123, 124, 133, 134, 135, 138, 139, 140, 141, 145, 146, 148, 149, 150, 152, 159, 160, 162, 164, 169, 172, 173, 249, 250, 251, 252, 269, 321, 322, 326, 329, 393, 395, 396, 412, 422, 436], "digicosm": 0, "dataia": 0, "There": [0, 4, 21, 66, 156, 159, 160, 161, 167, 172, 203, 271, 273, 274, 295, 322, 413, 435], "paper": [0, 48, 49, 116, 117, 156, 166, 167, 169, 228], "publish": [0, 228, 305, 419], "yet": [0, 65, 80, 104, 114, 148, 152, 159, 167, 174, 390], "about": [0, 2, 3, 6, 14, 19, 24, 49, 62, 76, 78, 79, 94, 100, 101, 108, 111, 116, 117, 123, 124, 125, 126, 141, 149, 152, 156, 159, 160, 162, 164, 166, 167, 168, 169, 172, 173, 174, 177, 197, 206, 208, 217, 218, 219, 232, 240, 241, 242, 243, 244, 245, 323, 417, 422], "we": [0, 2, 3, 4, 6, 9, 11, 14, 18, 19, 20, 22, 23, 24, 25, 29, 30, 31, 33, 34, 36, 37, 38, 39, 40, 42, 43, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 115, 116, 117, 123, 125, 131, 139, 140, 141, 146, 148, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 166, 168, 169, 172, 174, 175, 176, 177, 178, 179, 192, 201, 202, 219, 228, 230, 254, 255, 256, 271, 273, 274, 294, 298, 306, 310, 318, 319, 320, 334, 336, 337, 339, 346, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 381, 406, 408, 435, 436], "wait": [0, 117, 166], "matur": [0, 58, 114, 211], "bit": [0, 10, 11, 36, 41, 49, 65, 66, 75, 79, 86, 94, 102, 126, 139, 150, 152, 153, 165, 177, 178, 219], "howev": [0, 48, 49, 66, 67, 70, 86, 94, 100, 153, 159, 162, 166, 169, 179, 195, 314, 321, 323, 437], "pattern": [0, 8, 27, 28, 45, 49, 51, 100, 113, 114, 117, 136, 144, 152, 153, 158, 159, 162, 165, 166, 172, 174, 177, 187, 189, 194, 197, 207, 218, 225, 226, 228, 247, 253, 300, 312, 336, 341, 378, 397, 405, 411], "underli": [0, 89, 169, 172, 174, 179, 356], "have": [0, 2, 3, 6, 9, 11, 15, 16, 18, 24, 29, 31, 32, 33, 39, 41, 42, 43, 44, 49, 52, 54, 55, 56, 57, 61, 62, 64, 65, 66, 67, 71, 75, 85, 86, 93, 94, 98, 100, 101, 103, 108, 111, 113, 116, 117, 123, 124, 125, 126, 128, 130, 131, 132, 135, 136, 137, 138, 141, 144, 145, 146, 148, 149, 152, 153, 156, 157, 158, 159, 160, 162, 165, 166, 167, 168, 169, 171, 172, 174, 175, 177, 178, 179, 185, 186, 187, 189, 192, 197, 204, 205, 209, 213, 214, 228, 232, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 273, 274, 281, 284, 288, 289, 294, 295, 296, 298, 299, 301, 310, 314, 315, 316, 319, 321, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 338, 339, 341, 342, 378, 383, 393, 395, 396, 400, 403, 404, 405, 406, 412, 413, 415, 416, 418, 435, 436], "been": [0, 6, 10, 11, 32, 36, 39, 42, 47, 49, 52, 54, 55, 61, 66, 71, 72, 75, 79, 81, 85, 86, 89, 91, 93, 94, 104, 108, 111, 123, 124, 126, 128, 131, 132, 138, 140, 141, 143, 144, 146, 147, 148, 149, 150, 152, 158, 165, 166, 167, 168, 171, 172, 175, 179, 186, 197, 228, 232, 281, 294, 296, 305, 334, 335, 336, 338, 339, 342, 410, 419, 422], "describ": [0, 6, 18, 37, 63, 64, 66, 69, 72, 115, 116, 117, 160, 166, 167, 169, 174, 175, 179, 186, 223, 224, 276, 279, 282, 288, 296, 323, 342, 381], "machin": [0, 29, 34, 44, 49, 94, 115, 145, 152, 160, 161, 162, 167, 172, 173, 226, 436, 437], "suggest": [0, 6, 86, 148, 152, 156, 174, 177, 299, 334, 336, 337, 339, 418], "you": [0, 2, 4, 6, 9, 14, 15, 22, 23, 24, 32, 35, 36, 39, 40, 41, 42, 43, 44, 47, 49, 51, 52, 53, 54, 55, 56, 58, 61, 66, 70, 75, 79, 86, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 114, 116, 117, 133, 134, 138, 141, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 165, 167, 171, 172, 174, 175, 177, 178, 179, 185, 186, 187, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 209, 214, 217, 218, 219, 221, 222, 223, 226, 227, 228, 232, 233, 238, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 283, 288, 294, 325, 326, 327, 328, 329, 330, 331, 332, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 379, 382, 384, 385, 388, 390, 391, 392, 393, 395, 396, 399, 400, 402, 403, 404, 405, 406, 422, 435, 436, 437], "read": [0, 23, 44, 66, 69, 77, 81, 101, 103, 105, 107, 114, 117, 144, 152, 165, 167, 173, 174, 221, 222, 223, 333], "thank": [0, 138, 152, 167, 294, 295, 296], "huge": [0, 66, 68, 138, 152], "amount": [0, 24, 34, 36, 50, 66, 95, 160, 162, 167, 173, 174, 175, 228, 249, 250, 251, 252, 254, 255, 256, 257, 281, 294, 300, 311, 326, 327, 328, 329, 330, 331, 332, 404, 405, 406], "upon": [0, 229, 281, 294, 377, 390, 391, 392, 399, 406, 408, 416], "reli": [0, 6, 30, 66, 92, 94, 125, 131, 147, 152, 156, 166, 169, 172, 177, 219, 422, 435], "heavili": 0, "who": [0, 117, 179, 323], "invest": 0, "time": [0, 2, 3, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 56, 57, 60, 62, 63, 64, 65, 67, 68, 69, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 114, 116, 117, 123, 124, 125, 128, 137, 138, 144, 145, 146, 148, 150, 152, 153, 155, 156, 157, 158, 159, 162, 164, 167, 169, 170, 172, 173, 175, 176, 177, 178, 185, 187, 189, 214, 235, 237, 238, 249, 250, 251, 252, 254, 255, 256, 257, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 296, 299, 300, 311, 314, 316, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 342, 370, 378, 390, 392, 399, 400, 404, 406, 408, 409, 410, 414, 415, 417, 418, 419, 422, 427, 435, 437], "maintain": [0, 123, 141, 147, 152, 167, 175], "deserv": [0, 179], "recognit": [0, 3, 28, 30, 45, 49, 71, 97, 109, 113, 114, 124, 152, 162, 164, 165, 173, 197, 217, 251, 253, 304, 306, 309, 311, 312, 325, 331, 341, 342, 370, 385, 389, 392, 397], "citat": [0, 167], "In": [0, 4, 6, 9, 14, 15, 16, 22, 24, 32, 33, 36, 38, 39, 40, 42, 47, 49, 50, 51, 52, 53, 54, 58, 62, 65, 66, 68, 72, 75, 77, 79, 81, 86, 87, 89, 91, 94, 95, 99, 100, 111, 114, 115, 116, 117, 123, 124, 133, 138, 148, 150, 152, 153, 154, 156, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 172, 174, 175, 176, 177, 178, 179, 185, 192, 195, 197, 201, 202, 203, 218, 225, 228, 230, 232, 249, 250, 251, 252, 254, 255, 256, 257, 268, 271, 273, 274, 281, 283, 288, 294, 296, 297, 314, 315, 316, 318, 336, 342, 378, 379, 390, 403, 412, 415, 422, 435, 436], "need": [0, 2, 3, 6, 9, 16, 20, 30, 31, 33, 41, 42, 48, 49, 50, 51, 55, 56, 63, 66, 69, 75, 77, 78, 79, 80, 81, 84, 89, 91, 92, 98, 99, 100, 103, 104, 108, 116, 117, 138, 141, 148, 152, 153, 157, 159, 160, 161, 162, 167, 169, 171, 172, 175, 177, 178, 179, 192, 268, 271, 272, 316, 321, 322, 326, 327, 329, 338, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 379, 382, 384, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 404, 422, 435, 436], "order": [0, 2, 3, 6, 15, 16, 23, 30, 32, 35, 36, 40, 41, 42, 49, 54, 56, 79, 80, 91, 100, 102, 107, 116, 123, 132, 138, 141, 146, 148, 152, 158, 164, 166, 167, 168, 172, 173, 174, 175, 177, 178, 179, 189, 211, 213, 221, 222, 240, 241, 244, 268, 272, 281, 288, 290, 294, 295, 296, 299, 301, 303, 308, 309, 313, 314, 315, 326, 327, 329, 330, 331, 334, 335, 336, 338, 339, 341, 342, 377, 382, 384, 385, 387, 391, 392, 399, 406, 407, 409, 412, 417, 418, 422, 435, 436], "justifi": 0, "pai": [0, 65], "softwar": [0, 6, 69, 72, 169, 172, 321, 436], "engin": [0, 9, 125, 148, 152, 174, 179, 356, 393, 395, 396, 435, 436], "To": [0, 2, 3, 4, 6, 15, 21, 22, 23, 31, 33, 37, 39, 40, 42, 43, 48, 49, 50, 51, 52, 54, 55, 62, 66, 68, 70, 76, 77, 79, 80, 87, 89, 94, 98, 101, 104, 108, 116, 117, 133, 138, 150, 152, 153, 154, 156, 159, 160, 161, 162, 164, 167, 168, 169, 171, 175, 177, 178, 204, 205, 228, 271, 273, 274, 281, 290, 294, 298, 310, 322, 390, 391, 392, 393, 395, 396, 399, 403, 416, 435], "guarante": [0, 6, 81, 160, 166, 237, 247, 309, 314, 315, 321, 328], "futur": [0, 6, 132, 138, 144, 150, 152, 166, 172, 177, 179, 269], "toolkit": 0, "us": [0, 1, 2, 4, 6, 10, 11, 12, 14, 16, 17, 18, 19, 20, 22, 23, 26, 29, 30, 31, 32, 33, 36, 38, 40, 41, 42, 43, 44, 46, 47, 49, 52, 53, 54, 55, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 89, 90, 93, 94, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 111, 113, 114, 115, 116, 123, 124, 125, 126, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 145, 146, 147, 148, 150, 152, 153, 154, 155, 158, 160, 161, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 175, 178, 179, 184, 186, 188, 189, 190, 191, 192, 193, 195, 198, 205, 208, 210, 213, 234, 241, 242, 244, 245, 247, 254, 258, 259, 260, 267, 268, 270, 271, 272, 273, 274, 275, 279, 280, 282, 285, 286, 287, 289, 291, 292, 293, 298, 302, 303, 308, 313, 317, 319, 320, 334, 335, 337, 338, 339, 340, 343, 344, 345, 346, 371, 372, 373, 401, 403, 405, 409, 410, 411, 412, 413, 417, 418, 419, 423, 432, 436, 437], "pleas": [0, 3, 19, 29, 30, 32, 33, 34, 35, 36, 49, 50, 52, 53, 58, 62, 64, 67, 71, 72, 75, 77, 98, 100, 102, 103, 105, 106, 111, 133, 139, 148, 152, 157, 159, 162, 167, 172, 179, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 436], "see": [0, 3, 6, 8, 9, 12, 13, 14, 15, 16, 20, 21, 22, 23, 26, 28, 30, 31, 34, 36, 39, 40, 41, 43, 46, 48, 49, 50, 51, 52, 54, 55, 56, 60, 64, 67, 71, 72, 74, 80, 83, 86, 89, 94, 99, 100, 102, 103, 106, 107, 113, 116, 117, 119, 125, 126, 132, 138, 139, 141, 145, 146, 148, 150, 152, 153, 154, 156, 157, 158, 159, 160, 162, 164, 165, 166, 167, 168, 169, 172, 175, 177, 179, 181, 185, 186, 187, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 217, 218, 223, 225, 226, 227, 228, 230, 232, 235, 236, 237, 238, 243, 249, 250, 251, 252, 253, 254, 255, 256, 257, 271, 273, 274, 281, 283, 288, 294, 299, 300, 303, 304, 305, 306, 307, 308, 309, 311, 313, 314, 315, 316, 317, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 377, 378, 384, 385, 387, 390, 391, 392, 399, 400, 401, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 416, 417, 418, 422, 427, 428, 435, 436], "document": [0, 2, 3, 4, 6, 19, 26, 43, 44, 49, 50, 56, 98, 100, 103, 107, 114, 115, 116, 119, 121, 124, 126, 128, 130, 131, 132, 133, 138, 141, 143, 148, 149, 152, 154, 156, 157, 158, 159, 160, 161, 162, 164, 165, 173, 174, 177, 179, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 435, 436], "how": [0, 1, 2, 3, 4, 5, 6, 9, 14, 19, 21, 26, 34, 40, 44, 47, 48, 49, 50, 53, 55, 56, 58, 61, 62, 64, 66, 67, 68, 70, 78, 79, 84, 86, 87, 88, 89, 91, 94, 95, 100, 103, 106, 107, 113, 116, 124, 133, 144, 145, 148, 149, 152, 154, 156, 157, 158, 159, 160, 162, 164, 166, 169, 172, 173, 174, 176, 178, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 436, 437], "introductori": [1, 113, 167], "exampl": [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 65, 66, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 111, 115, 116, 124, 125, 126, 131, 132, 133, 134, 135, 138, 139, 141, 143, 144, 147, 148, 149, 152, 157, 160, 161, 162, 163, 166, 167, 168, 169, 171, 175, 177, 193, 195, 210, 254, 271, 273, 274, 298, 319, 403, 405, 424, 425, 436, 437], "teach": [1, 113, 130, 141, 152, 167], "nilearn": [1, 2, 3, 6, 7, 8, 9, 10, 11, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 115, 116, 117, 118, 122, 123, 124, 125, 126, 128, 129, 131, 132, 133, 136, 138, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 175, 177, 178, 179, 425, 435, 437], "numer": [1, 7, 29, 33, 35, 57, 113, 145, 152, 167, 168, 179, 189, 269, 271, 273, 274, 282, 390, 391, 417], "plot": [1, 2, 4, 7, 8, 19, 20, 21, 23, 25, 26, 27, 29, 30, 33, 36, 37, 38, 39, 40, 41, 42, 43, 46, 48, 49, 51, 52, 53, 54, 56, 57, 59, 61, 62, 63, 64, 65, 67, 69, 71, 72, 75, 76, 77, 78, 79, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 100, 101, 102, 103, 104, 105, 106, 108, 111, 113, 116, 119, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 152, 154, 157, 158, 159, 164, 167, 168, 169, 171, 172, 173, 174, 175, 178, 179, 185, 194, 199, 201, 202, 207, 211, 212, 214, 217, 218, 221, 231, 237, 246, 281, 294, 300, 311, 312, 325, 332, 336, 414, 416, 420, 421, 422, 432, 436, 437], "python": [1, 2, 3, 4, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 116, 121, 123, 124, 133, 139, 140, 141, 146, 148, 152, 159, 166, 167, 173, 174, 175, 310, 436], "manipul": [1, 7, 55, 66, 89, 116, 133, 152, 174, 177, 437], "look": [1, 6, 7, 23, 29, 32, 40, 44, 56, 65, 66, 69, 70, 72, 104, 113, 117, 138, 139, 149, 152, 159, 167, 168, 169, 174, 175, 179, 228, 230, 239], "3d": [1, 3, 4, 6, 7, 8, 15, 16, 18, 19, 23, 24, 25, 27, 29, 30, 32, 34, 36, 37, 42, 44, 47, 71, 75, 77, 83, 84, 94, 96, 100, 102, 104, 105, 111, 113, 116, 121, 124, 128, 135, 137, 138, 139, 141, 145, 146, 150, 152, 169, 172, 173, 174, 176, 178, 179, 199, 201, 202, 205, 206, 207, 208, 229, 231, 237, 239, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 296, 298, 300, 301, 304, 306, 307, 308, 309, 318, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 374, 375, 376, 378, 379, 384, 387, 388, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 406, 407, 408, 412, 420, 422, 437], "4d": [1, 3, 4, 6, 7, 8, 11, 16, 18, 20, 25, 27, 29, 30, 31, 32, 34, 36, 41, 47, 48, 49, 52, 53, 54, 56, 58, 84, 85, 87, 89, 91, 92, 94, 95, 98, 100, 102, 104, 113, 115, 123, 124, 125, 128, 135, 138, 139, 144, 152, 154, 157, 158, 159, 162, 172, 174, 176, 179, 196, 198, 200, 201, 202, 204, 206, 214, 218, 224, 231, 239, 253, 256, 257, 296, 298, 299, 300, 304, 305, 306, 307, 309, 311, 318, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 374, 375, 378, 390, 391, 392, 397, 399, 406, 408, 422, 428, 431, 435, 437], "niimg": [1, 7, 33, 54, 77, 79, 89, 91, 92, 98, 113, 116, 124, 125, 135, 138, 141, 146, 150, 152, 156, 174, 176, 178, 179, 206, 231, 239, 249, 250, 251, 252, 253, 254, 255, 256, 257, 276, 281, 284, 294, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 377, 378, 384, 385, 387, 390, 391, 392, 397, 399, 400, 404, 405, 406, 408, 409, 410, 411, 412, 413, 415, 416, 418, 422, 424, 437], "handl": [1, 7, 49, 64, 113, 124, 125, 128, 134, 150, 152, 159, 174, 177, 178, 179, 206, 231, 239, 269, 273, 300, 306, 307, 308, 309, 314, 320, 322, 381, 392, 397, 405, 411], "visual": [1, 7, 12, 14, 27, 28, 32, 33, 39, 45, 47, 48, 50, 56, 64, 66, 69, 71, 72, 79, 80, 83, 86, 87, 88, 89, 91, 92, 94, 96, 101, 102, 104, 105, 106, 108, 114, 115, 124, 125, 133, 135, 138, 144, 146, 152, 153, 154, 155, 163, 167, 168, 171, 174, 176, 178, 194, 196, 197, 203, 204, 206, 213, 217, 218, 222, 223, 225, 227, 231, 239, 300, 301, 304, 306, 307, 309, 311, 312, 314, 318, 325, 328, 331, 333, 336, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 378, 381, 382, 383, 389, 390, 391, 392, 395, 396, 397, 437], "introduct": [1, 7, 113, 114, 123, 138, 152, 160, 162, 163, 167, 170, 171, 173, 179, 217, 249, 273, 274, 306, 311, 382, 391, 399, 437], "fmri": [1, 7, 15, 23, 25, 30, 31, 32, 33, 36, 40, 41, 44, 46, 55, 56, 59, 60, 61, 62, 63, 66, 70, 71, 73, 74, 81, 82, 85, 89, 91, 94, 97, 100, 101, 102, 108, 109, 113, 114, 116, 117, 129, 136, 141, 152, 156, 157, 158, 160, 162, 165, 166, 168, 171, 172, 173, 174, 177, 178, 179, 197, 198, 200, 206, 211, 214, 216, 217, 223, 224, 235, 249, 253, 256, 257, 276, 278, 281, 290, 294, 296, 297, 299, 300, 304, 306, 307, 310, 311, 322, 323, 325, 331, 336, 339, 342, 354, 362, 369, 377, 378, 380, 381, 382, 384, 385, 390, 391, 392, 397, 399, 404, 406, 414, 415, 416, 418, 419, 423, 437], "decod": [1, 7, 36, 39, 40, 42, 44, 45, 97, 103, 109, 111, 114, 116, 117, 124, 125, 133, 134, 138, 141, 144, 145, 146, 147, 148, 149, 152, 160, 164, 168, 172, 173, 174, 179, 217, 220, 227, 237, 281, 284, 300, 304, 306, 311, 325, 331, 332, 355, 381, 382, 389, 391, 392, 396, 397, 399, 414, 416, 421, 422, 436, 437], "intro": [1, 7, 66, 113, 174, 235, 281, 297, 300, 311, 377, 380, 381, 385, 392, 415], "glm": [1, 7, 28, 32, 42, 45, 61, 62, 63, 65, 66, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 100, 101, 108, 123, 125, 144, 145, 146, 148, 150, 152, 159, 168, 171, 172, 173, 174, 175, 217, 235, 249, 300, 306, 311, 318, 321, 377, 380, 381, 383, 385, 392, 414, 415, 416, 436, 437], "analysi": [1, 7, 15, 23, 28, 29, 34, 45, 48, 49, 63, 66, 68, 71, 73, 77, 78, 79, 80, 82, 95, 98, 109, 114, 115, 117, 153, 154, 158, 160, 163, 165, 170, 171, 172, 173, 174, 178, 179, 197, 200, 214, 215, 217, 220, 222, 223, 224, 226, 230, 233, 235, 237, 248, 249, 253, 256, 268, 269, 272, 273, 274, 277, 281, 284, 288, 290, 294, 297, 300, 304, 306, 309, 310, 311, 312, 318, 321, 322, 323, 324, 325, 331, 342, 355, 370, 377, 380, 381, 384, 385, 386, 387, 391, 392, 396, 397, 406, 414, 415, 416, 422, 432, 436, 437], "singl": [1, 3, 7, 14, 23, 30, 31, 46, 49, 59, 60, 64, 65, 66, 67, 68, 73, 77, 79, 86, 94, 100, 104, 113, 114, 117, 121, 144, 145, 146, 147, 150, 152, 153, 160, 164, 166, 167, 168, 174, 177, 179, 195, 214, 228, 235, 236, 246, 249, 250, 251, 252, 271, 273, 274, 281, 288, 294, 296, 297, 300, 311, 314, 325, 326, 327, 328, 329, 330, 331, 332, 355, 377, 380, 381, 385, 387, 389, 390, 392, 397, 399, 404, 406, 415, 435], "session": [1, 3, 7, 29, 34, 35, 36, 37, 60, 66, 67, 73, 102, 113, 116, 146, 148, 152, 153, 159, 160, 168, 169, 174, 177, 178, 216, 217, 227, 235, 236, 257, 281, 284, 288, 297, 299, 300, 311, 314, 319, 337, 339, 377, 380, 381, 385, 392, 397, 414, 415, 416, 436], "subject": [1, 3, 7, 11, 15, 16, 17, 18, 21, 22, 23, 25, 29, 30, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 46, 47, 48, 49, 50, 52, 54, 56, 57, 58, 59, 60, 64, 65, 66, 69, 73, 75, 77, 78, 80, 85, 91, 94, 95, 99, 100, 101, 102, 104, 105, 106, 108, 110, 111, 113, 114, 116, 117, 123, 124, 125, 129, 131, 132, 141, 144, 152, 154, 155, 156, 157, 159, 166, 168, 169, 171, 174, 176, 177, 178, 180, 183, 184, 185, 186, 187, 189, 193, 194, 195, 197, 203, 214, 217, 222, 223, 225, 226, 232, 235, 236, 237, 238, 248, 256, 257, 281, 284, 288, 294, 295, 297, 300, 311, 314, 319, 322, 323, 325, 326, 327, 328, 330, 331, 332, 337, 339, 355, 375, 377, 379, 380, 381, 385, 389, 392, 397, 404, 415, 435, 437], "dataset": [1, 3, 4, 7, 9, 10, 13, 14, 19, 20, 21, 22, 23, 24, 25, 26, 28, 40, 45, 47, 52, 54, 55, 56, 57, 60, 64, 66, 67, 69, 70, 71, 73, 74, 77, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 100, 102, 103, 104, 107, 109, 113, 114, 116, 117, 124, 125, 128, 129, 133, 137, 138, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 154, 155, 158, 159, 160, 163, 165, 168, 171, 172, 173, 174, 175, 176, 179, 249, 250, 251, 252, 255, 256, 269, 277, 281, 284, 288, 290, 294, 297, 298, 300, 301, 304, 306, 310, 311, 315, 319, 321, 323, 324, 325, 331, 332, 342, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 380, 381, 384, 385, 386, 387, 389, 392, 393, 394, 395, 396, 397, 399, 400, 407, 414, 415, 416, 422, 435, 437], "go": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 111, 113, 115, 117, 134, 152, 153, 159, 163, 167, 171, 174, 175, 179, 230, 304, 309, 310, 312, 379, 384, 388, 392, 397, 399, 437], "end": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 135, 145, 152, 164, 166, 167, 178, 239, 320, 321, 417], "full": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 114, 121, 123, 152, 156, 157, 158, 160, 162, 164, 166, 167, 168, 172, 178, 179, 201, 202, 206, 211, 214, 217, 225, 249, 250, 251, 252, 256, 257, 263, 268, 271, 272, 273, 274, 281, 294, 296, 299, 316, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 389, 404, 406, 408, 414, 418], "code": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 114, 116, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 145, 146, 147, 148, 149, 150, 152, 153, 157, 158, 160, 162, 166, 168, 172, 179, 193, 253, 257, 281, 294, 327, 330, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 388, 406, 414, 416, 430, 432, 436], "run": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 111, 113, 116, 128, 132, 146, 148, 150, 152, 153, 154, 156, 160, 163, 164, 165, 166, 167, 168, 174, 175, 177, 179, 187, 189, 217, 223, 256, 257, 281, 284, 299, 323, 331, 342, 380, 403, 418, 435, 436, 437], "your": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 111, 115, 117, 154, 158, 159, 160, 162, 164, 175, 177, 179, 184, 201, 202, 214, 219, 249, 250, 251, 252, 256, 257, 272, 328, 331, 404, 435, 437], "browser": [2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 53, 55, 56, 57, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 138, 141, 143, 152, 179, 281, 294, 356, 398, 399, 400, 401, 402, 414, 416, 435], "via": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 114, 116, 119, 152, 154, 155, 159, 162, 165, 168, 177, 198, 254, 255, 281, 290, 334, 335, 336, 338, 339], "binder": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 143, 152], "here": [2, 3, 4, 6, 9, 14, 15, 19, 20, 23, 29, 30, 31, 32, 33, 34, 35, 36, 42, 43, 44, 48, 49, 54, 55, 56, 58, 61, 63, 64, 65, 66, 67, 69, 70, 75, 88, 89, 92, 94, 95, 98, 100, 101, 103, 104, 108, 114, 116, 117, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 166, 167, 168, 169, 171, 174, 175, 178, 179, 214, 254, 255, 271, 273, 274, 296, 335, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 357, 361, 362, 365, 366, 367, 368, 393, 395], "discov": [2, 167, 173], "come": [2, 3, 6, 16, 42, 52, 54, 58, 75, 80, 94, 116, 124, 152, 154, 159, 160, 166, 167, 174, 175, 178, 179, 214, 435], "function": [2, 3, 4, 6, 8, 9, 11, 13, 14, 15, 17, 18, 21, 22, 25, 26, 27, 29, 30, 32, 34, 35, 36, 43, 48, 49, 52, 53, 55, 56, 58, 59, 60, 64, 65, 66, 67, 69, 71, 72, 73, 74, 85, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 102, 104, 108, 109, 111, 114, 116, 117, 119, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 156, 159, 160, 163, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 265, 266, 267, 268, 269, 272, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 433, 434, 436, 437], "let": [2, 3, 4, 6, 15, 40, 49, 56, 64, 66, 69, 71, 75, 77, 78, 79, 86, 93, 98, 160, 174, 298, 310], "first": [2, 6, 11, 14, 16, 18, 20, 23, 25, 30, 32, 33, 35, 40, 42, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 63, 64, 65, 67, 70, 73, 75, 77, 80, 81, 84, 86, 89, 91, 92, 93, 94, 95, 97, 104, 105, 109, 114, 116, 117, 118, 124, 138, 139, 141, 144, 146, 148, 149, 152, 153, 154, 156, 157, 158, 160, 162, 163, 166, 167, 169, 170, 171, 175, 176, 177, 178, 187, 189, 215, 216, 219, 220, 224, 225, 228, 230, 233, 237, 240, 241, 244, 248, 249, 250, 251, 252, 256, 257, 269, 277, 281, 284, 288, 290, 294, 296, 300, 305, 306, 315, 316, 319, 321, 322, 324, 327, 330, 331, 338, 342, 380, 381, 384, 386, 391, 392, 393, 394, 395, 396, 397, 402, 403, 404, 406, 414, 415, 416, 418, 422, 437], "check": [2, 3, 15, 29, 30, 32, 33, 34, 35, 36, 77, 93, 94, 98, 105, 111, 116, 124, 128, 131, 152, 154, 159, 162, 166, 167, 174, 175, 177, 179, 185, 186, 187, 189, 219, 239, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 282, 294, 309, 322, 325, 326, 327, 328, 329, 330, 331, 332, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 403, 404, 405, 406, 435], "where": [2, 6, 9, 15, 16, 23, 24, 40, 44, 50, 70, 77, 84, 87, 94, 100, 105, 113, 125, 131, 145, 152, 153, 157, 159, 164, 165, 167, 169, 172, 175, 178, 179, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 236, 237, 238, 239, 249, 250, 251, 252, 254, 255, 268, 271, 272, 273, 274, 277, 281, 294, 296, 333, 353, 355, 358, 360, 362, 364, 366, 368, 370, 374, 377, 380, 382, 385, 386, 387, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 402, 406, 408, 415, 416, 422, 435], "our": [2, 3, 14, 19, 29, 34, 40, 49, 51, 56, 58, 66, 68, 94, 98, 101, 116, 117, 138, 148, 152, 154, 159, 166, 167, 169], "disk": [2, 3, 4, 6, 101, 103, 107, 108, 116, 117, 123, 138, 144, 145, 150, 152, 159, 167, 177, 178, 179, 210, 220, 228, 230, 233, 249, 250, 258, 259, 260, 281, 294, 333, 393, 395, 396, 414, 416], "import": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 116, 117, 131, 137, 138, 139, 141, 146, 148, 152, 153, 154, 157, 159, 160, 161, 162, 164, 166, 167, 168, 171, 172, 174, 175, 177, 178, 179, 184, 269, 271, 273, 274, 281, 294, 298, 301, 306, 310, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 388, 416, 422, 435], "print": [2, 3, 4, 6, 9, 10, 11, 16, 18, 20, 22, 23, 25, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 62, 64, 69, 70, 71, 72, 75, 77, 81, 85, 89, 91, 92, 93, 94, 95, 98, 101, 102, 103, 104, 105, 107, 108, 111, 116, 159, 166, 167, 174, 177, 187, 195, 256, 257, 281, 294, 306], "f": [2, 3, 4, 9, 10, 11, 16, 18, 21, 22, 23, 25, 29, 30, 31, 32, 33, 34, 35, 37, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 64, 66, 67, 69, 71, 72, 75, 77, 78, 79, 80, 81, 85, 88, 89, 91, 92, 93, 94, 95, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 114, 125, 152, 157, 159, 162, 164, 165, 168, 195, 206, 211, 213, 215, 218, 225, 233, 249, 250, 251, 252, 269, 270, 271, 273, 274, 277, 281, 282, 294, 314, 315, 321, 322, 323, 333, 341, 409, 412], "store": [2, 3, 26, 29, 44, 49, 50, 51, 52, 54, 70, 94, 101, 108, 117, 157, 159, 164, 167, 201, 202, 239, 258, 259, 271, 273, 274, 312, 333, 342, 386], "get_data_dir": [2, 131, 152, 177], "r": [2, 4, 9, 14, 15, 24, 30, 34, 40, 41, 47, 51, 56, 62, 71, 94, 108, 114, 125, 141, 148, 152, 168, 175, 193, 198, 203, 205, 206, 209, 211, 215, 233, 254, 255, 281, 294, 299, 321, 322, 323, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 377, 379, 382, 384, 385, 388, 390, 391, 392, 416, 418, 435], "now": [2, 3, 6, 14, 16, 20, 22, 25, 29, 40, 44, 49, 50, 51, 55, 56, 63, 65, 66, 71, 79, 81, 84, 86, 92, 93, 94, 100, 101, 103, 104, 108, 111, 116, 121, 123, 124, 125, 126, 128, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 159, 165, 167, 175, 178, 249, 250, 251, 252, 256, 257, 268, 271, 272, 273, 274, 298, 306, 310, 326, 328, 329, 331, 404], "retriev": [2, 20, 22, 44, 48, 90, 91, 92, 116, 148, 152, 154, 159, 162, 173, 177, 179, 209, 235, 236, 239, 322, 323, 371, 372], "motor": [2, 14, 15, 16, 17, 51, 66, 69, 77, 79, 90, 91, 93, 97, 109, 113, 223, 246, 304, 325, 331, 342, 384, 435], "contrast": [2, 6, 8, 14, 15, 27, 33, 64, 65, 67, 68, 71, 75, 76, 77, 78, 79, 80, 81, 88, 90, 93, 101, 105, 106, 108, 113, 124, 125, 131, 135, 136, 145, 148, 152, 158, 164, 169, 170, 171, 172, 221, 222, 223, 229, 231, 270, 271, 273, 274, 275, 277, 278, 279, 281, 294, 296, 321, 377, 380, 390, 391, 392, 397, 399, 403, 416, 435, 437], "neurovault": [2, 97, 109, 113, 114, 115, 134, 141, 146, 150, 152, 172, 228, 229, 230, 231, 240, 304, 309, 310, 312, 316, 325, 331, 384, 392, 397, 437], "repositori": [2, 114, 115, 167, 172, 175, 177, 218, 228, 230, 437], "motor_imag": [2, 435], "fetch_neurovault_motor_task": [2, 14, 138, 152, 229, 435], "imag": [2, 6, 10, 11, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 58, 62, 63, 64, 66, 67, 68, 70, 71, 75, 76, 77, 78, 79, 80, 84, 86, 87, 88, 89, 91, 92, 94, 96, 98, 100, 101, 102, 104, 105, 106, 108, 110, 112, 114, 115, 121, 123, 124, 125, 126, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 145, 146, 147, 148, 149, 150, 152, 154, 156, 157, 158, 159, 160, 164, 165, 167, 169, 172, 174, 176, 185, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 214, 217, 218, 219, 221, 223, 224, 225, 227, 228, 229, 230, 231, 232, 235, 236, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 262, 263, 264, 265, 266, 276, 278, 281, 284, 294, 295, 296, 297, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 415, 416, 418, 419, 422, 428, 437], "filenam": [2, 3, 4, 10, 15, 50, 55, 61, 94, 116, 131, 141, 148, 149, 152, 154, 157, 158, 167, 177, 178, 201, 202, 233, 247, 249, 250, 251, 252, 254, 255, 258, 259, 260, 309, 321, 325, 328, 331, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 382, 390], "take": [2, 3, 4, 6, 9, 24, 29, 33, 40, 42, 43, 49, 50, 65, 66, 68, 69, 71, 72, 77, 79, 94, 98, 100, 103, 108, 116, 124, 135, 138, 141, 147, 152, 153, 154, 156, 159, 162, 164, 166, 167, 168, 169, 177, 179, 185, 219, 228, 240, 241, 242, 243, 244, 245, 249, 250, 251, 252, 253, 257, 281, 283, 288, 296, 341, 342, 346, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 404, 406, 408, 422, 433, 435], "tmap_filenam": [2, 88], "0": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 114, 116, 153, 154, 157, 159, 165, 166, 167, 168, 169, 177, 178, 179, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 249, 250, 251, 252, 253, 254, 255, 256, 257, 268, 269, 271, 272, 273, 274, 276, 278, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 305, 306, 308, 309, 310, 311, 312, 314, 315, 316, 318, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 374, 377, 378, 379, 384, 388, 389, 390, 391, 392, 393, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 415, 416, 418, 419, 422, 435, 436], "contain": [2, 3, 4, 6, 10, 11, 22, 23, 36, 40, 49, 52, 55, 62, 64, 69, 72, 79, 84, 86, 91, 94, 101, 106, 107, 108, 116, 117, 124, 125, 128, 133, 138, 141, 150, 152, 153, 159, 160, 163, 166, 167, 169, 172, 175, 177, 179, 185, 186, 187, 189, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 217, 227, 228, 229, 230, 231, 232, 238, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 262, 270, 271, 273, 274, 275, 281, 284, 294, 295, 296, 299, 300, 308, 314, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 342, 387, 388, 393, 394, 395, 396, 400, 402, 403, 404, 405, 406, 407, 409, 410, 414, 416, 418, 420, 421, 422, 427, 437], "easili": [2, 3, 9, 15, 23, 30, 31, 39, 49, 58, 94, 116, 117, 148, 152, 159, 160, 162, 164, 165, 166, 167, 168, 172, 175, 201, 202, 223, 294, 296], "statist": [2, 6, 8, 14, 22, 23, 27, 33, 36, 40, 42, 49, 64, 65, 66, 67, 69, 71, 74, 75, 82, 83, 96, 100, 101, 102, 103, 105, 108, 114, 115, 123, 126, 133, 134, 144, 146, 150, 152, 153, 158, 161, 164, 167, 168, 170, 172, 173, 174, 178, 179, 186, 189, 199, 207, 222, 228, 229, 230, 237, 246, 269, 270, 271, 273, 274, 275, 276, 277, 281, 294, 296, 297, 299, 318, 321, 342, 355, 356, 384, 387, 390, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 406, 408, 415, 416, 418, 420, 422, 431, 436, 437], "map": [2, 3, 8, 11, 14, 15, 19, 20, 22, 23, 27, 33, 37, 39, 44, 46, 50, 51, 52, 53, 54, 56, 59, 61, 62, 64, 66, 67, 69, 71, 72, 75, 76, 77, 78, 79, 80, 81, 83, 84, 87, 89, 90, 91, 92, 93, 96, 97, 99, 101, 102, 104, 108, 109, 113, 114, 115, 124, 125, 126, 130, 133, 134, 138, 139, 141, 144, 145, 148, 152, 154, 155, 158, 160, 162, 163, 164, 167, 168, 169, 170, 172, 173, 174, 177, 178, 179, 185, 186, 187, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 218, 221, 222, 223, 228, 229, 230, 231, 232, 237, 240, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 276, 277, 281, 290, 294, 296, 297, 299, 301, 307, 316, 318, 321, 325, 326, 327, 328, 329, 330, 331, 332, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 376, 378, 384, 385, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 410, 413, 415, 416, 418, 420, 422, 431, 437], "plot_stat_map": [2, 6, 9, 15, 17, 29, 30, 31, 36, 39, 40, 42, 43, 48, 50, 55, 61, 64, 65, 66, 67, 70, 71, 75, 76, 77, 81, 85, 87, 88, 90, 92, 93, 94, 98, 100, 102, 103, 104, 106, 107, 116, 126, 137, 138, 145, 146, 148, 149, 152, 157, 159, 171, 179, 399, 435], "better": [2, 3, 30, 33, 42, 43, 49, 66, 94, 100, 103, 114, 122, 124, 125, 129, 132, 138, 146, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 166, 168, 178, 186, 390, 406, 422, 437], "threshold": [2, 3, 9, 13, 14, 16, 17, 23, 30, 33, 36, 37, 39, 40, 42, 48, 49, 50, 54, 55, 56, 61, 64, 65, 66, 67, 69, 70, 71, 75, 76, 77, 79, 80, 81, 87, 88, 89, 90, 93, 94, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 114, 117, 125, 126, 139, 141, 145, 148, 150, 152, 154, 157, 166, 169, 170, 172, 178, 219, 240, 241, 244, 256, 276, 280, 281, 294, 296, 297, 298, 318, 322, 323, 335, 336, 337, 338, 339, 340, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 376, 377, 379, 384, 385, 387, 390, 391, 392, 393, 395, 396, 398, 399, 400, 402, 405, 406, 411, 415, 416, 435, 437], "3": [2, 3, 4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 25, 26, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 76, 77, 78, 80, 81, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 98, 99, 100, 101, 102, 103, 105, 107, 108, 111, 114, 118, 122, 123, 128, 131, 132, 135, 138, 139, 140, 141, 146, 147, 148, 149, 157, 164, 165, 168, 169, 178, 179, 185, 186, 187, 189, 191, 192, 193, 197, 198, 200, 203, 204, 205, 207, 208, 209, 214, 215, 218, 225, 228, 230, 233, 237, 238, 249, 250, 251, 252, 253, 254, 255, 256, 257, 271, 273, 274, 276, 281, 283, 288, 294, 297, 306, 308, 310, 311, 314, 316, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 336, 337, 339, 341, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 374, 375, 377, 379, 382, 384, 385, 388, 390, 391, 392, 393, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 411, 416, 422, 424, 435, 436], "rest": [2, 3, 6, 21, 23, 30, 32, 33, 35, 41, 48, 50, 54, 55, 56, 62, 70, 85, 87, 89, 92, 98, 100, 111, 114, 125, 129, 133, 152, 156, 157, 158, 162, 166, 167, 172, 174, 177, 194, 196, 197, 206, 225, 238, 248, 257, 320, 322, 323, 331, 389, 406, 437], "network": [2, 8, 19, 20, 21, 27, 46, 47, 48, 51, 54, 55, 60, 72, 73, 83, 86, 94, 96, 101, 113, 114, 117, 130, 144, 150, 152, 153, 154, 155, 157, 167, 168, 172, 173, 174, 179, 194, 196, 197, 203, 205, 206, 209, 211, 212, 213, 223, 225, 281, 288, 306, 322, 323, 325, 330, 332, 355, 376, 388, 389, 390, 392, 397, 406, 414, 416, 435, 437], "smith": [2, 21, 83, 94, 96, 113, 114, 153, 172, 206, 225, 296, 306, 325, 330, 342, 376, 390, 392, 397, 406], "2009": [2, 21, 114, 122, 144, 147, 152, 172, 174, 199, 206, 218, 219, 225, 243, 296, 342], "correspond": [2, 3, 6, 14, 24, 29, 30, 33, 34, 36, 39, 40, 44, 49, 55, 56, 63, 65, 66, 69, 70, 72, 77, 78, 79, 80, 81, 86, 91, 92, 94, 101, 102, 108, 114, 125, 143, 145, 152, 154, 159, 160, 162, 164, 166, 167, 169, 172, 173, 175, 179, 185, 195, 200, 203, 206, 213, 219, 223, 230, 232, 240, 241, 244, 249, 250, 251, 252, 254, 255, 256, 257, 263, 277, 278, 281, 283, 284, 288, 290, 294, 295, 296, 310, 311, 314, 319, 326, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 342, 371, 372, 377, 378, 382, 385, 386, 388, 390, 391, 392, 394, 404, 406, 407, 409, 410, 412, 415, 416, 422], "between": [2, 6, 9, 22, 23, 24, 30, 40, 42, 49, 50, 51, 55, 62, 66, 69, 71, 72, 75, 77, 79, 80, 86, 89, 92, 99, 100, 102, 105, 126, 133, 138, 141, 144, 147, 152, 153, 154, 155, 157, 159, 160, 164, 166, 167, 168, 169, 171, 172, 173, 174, 175, 193, 205, 225, 243, 251, 252, 257, 281, 284, 294, 299, 336, 342, 343, 345, 346, 373, 377, 379, 384, 386, 388, 390, 391, 392, 393, 395, 396, 399, 400, 402, 404, 415, 416, 418, 422], "task": [2, 3, 17, 29, 30, 31, 34, 39, 48, 49, 60, 62, 66, 69, 73, 77, 81, 89, 92, 97, 103, 109, 113, 114, 138, 149, 152, 158, 159, 160, 163, 166, 168, 169, 172, 173, 174, 175, 179, 186, 189, 217, 220, 222, 223, 248, 281, 284, 300, 304, 319, 325, 331, 332, 342, 355, 370, 381, 383, 384, 392, 397], "rsn": [2, 21, 87, 133, 152, 196, 206], "fetch_atlas_smith_2009": [2, 21, 87, 124, 125, 152], "true": [2, 6, 9, 13, 14, 15, 16, 21, 22, 23, 25, 26, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62, 64, 67, 69, 70, 71, 74, 75, 77, 79, 80, 81, 82, 86, 87, 89, 91, 92, 94, 98, 99, 100, 101, 102, 103, 105, 108, 111, 113, 116, 117, 125, 133, 136, 141, 148, 152, 154, 157, 159, 162, 164, 166, 169, 171, 172, 179, 185, 186, 187, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 209, 211, 212, 213, 214, 217, 218, 219, 221, 222, 223, 225, 226, 227, 228, 230, 232, 238, 249, 250, 251, 252, 253, 254, 255, 256, 257, 276, 281, 284, 294, 296, 297, 299, 300, 303, 305, 309, 314, 315, 318, 319, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 374, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 409, 410, 412, 415, 417, 418, 419, 435], "dimens": [2, 15, 21, 29, 33, 34, 40, 47, 49, 66, 87, 94, 116, 146, 152, 163, 169, 172, 178, 179, 185, 191, 192, 200, 206, 225, 232, 249, 250, 251, 252, 256, 257, 269, 271, 273, 274, 281, 296, 299, 300, 306, 307, 310, 311, 316, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 375, 378, 389, 390, 404, 406, 418, 437], "10": [2, 5, 6, 9, 10, 11, 12, 15, 20, 21, 22, 23, 24, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 53, 55, 56, 57, 58, 59, 61, 62, 63, 66, 71, 72, 76, 77, 79, 81, 87, 89, 91, 92, 94, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 111, 114, 117, 122, 138, 148, 153, 156, 159, 160, 161, 164, 165, 166, 168, 169, 185, 186, 189, 193, 195, 196, 197, 198, 199, 200, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 215, 217, 218, 223, 225, 226, 227, 228, 230, 232, 233, 237, 238, 243, 249, 250, 251, 252, 253, 254, 255, 256, 257, 276, 284, 296, 299, 322, 323, 327, 329, 330, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 378, 403, 404, 405, 406, 409, 410, 411, 415, 418, 419, 422, 435], "It": [2, 3, 6, 9, 14, 15, 16, 22, 34, 41, 42, 44, 48, 51, 61, 65, 66, 71, 75, 77, 81, 86, 89, 94, 98, 100, 101, 108, 115, 116, 117, 121, 128, 131, 132, 134, 145, 146, 147, 148, 152, 153, 154, 159, 160, 162, 163, 164, 166, 167, 169, 172, 173, 174, 175, 177, 178, 179, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 436], "nifti": [2, 4, 10, 11, 16, 18, 25, 29, 30, 32, 34, 35, 36, 41, 47, 48, 49, 52, 53, 54, 56, 58, 77, 79, 84, 86, 89, 91, 92, 94, 95, 102, 104, 105, 116, 126, 144, 150, 152, 154, 158, 159, 167, 176, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 209, 214, 217, 221, 222, 223, 226, 227, 232, 249, 250, 254, 255, 256, 257, 300, 301, 304, 308, 309, 310, 314, 317, 382, 404, 407, 422, 435, 437], "load": [2, 4, 6, 8, 9, 21, 23, 27, 49, 52, 53, 54, 58, 61, 62, 64, 67, 69, 70, 77, 88, 89, 91, 93, 102, 103, 104, 105, 106, 107, 108, 113, 115, 123, 124, 125, 131, 133, 136, 138, 147, 148, 150, 152, 155, 158, 162, 163, 166, 167, 174, 176, 178, 193, 194, 197, 199, 201, 202, 203, 206, 207, 211, 212, 213, 214, 217, 218, 219, 222, 223, 226, 227, 228, 230, 232, 237, 238, 240, 241, 242, 243, 244, 245, 246, 256, 257, 258, 265, 266, 267, 284, 298, 309, 310, 312, 322, 323, 379, 395, 397, 398, 402, 420, 421, 427, 435, 437], "memori": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 130, 138, 139, 152, 156, 157, 166, 178, 179, 186, 237, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 269, 274, 281, 284, 294, 300, 304, 314, 315, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 400, 404, 405, 406, 417, 435], "its": [2, 3, 15, 19, 26, 29, 30, 31, 32, 33, 34, 35, 36, 40, 44, 56, 66, 69, 84, 88, 89, 90, 92, 94, 98, 100, 108, 116, 117, 130, 133, 141, 144, 146, 148, 150, 152, 153, 156, 158, 159, 160, 162, 164, 165, 166, 167, 169, 171, 172, 175, 179, 192, 205, 207, 217, 228, 229, 230, 231, 249, 250, 251, 252, 254, 255, 256, 257, 268, 272, 281, 283, 288, 294, 295, 296, 298, 309, 377, 378, 379, 382, 384, 385, 388, 390, 391, 392, 393, 394, 395, 396, 403, 404, 405, 406, 431], "shape": [2, 3, 20, 23, 25, 40, 41, 43, 47, 49, 50, 51, 53, 54, 55, 56, 58, 61, 64, 65, 66, 67, 68, 69, 71, 84, 91, 93, 94, 98, 100, 102, 103, 105, 106, 107, 108, 111, 116, 146, 147, 152, 154, 156, 157, 159, 162, 168, 169, 172, 174, 176, 179, 185, 186, 187, 189, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 226, 232, 249, 250, 251, 252, 254, 255, 256, 257, 262, 263, 264, 268, 269, 271, 272, 273, 274, 277, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 299, 300, 301, 304, 305, 306, 310, 311, 314, 315, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 374, 375, 379, 380, 388, 398, 401, 403, 404, 405, 406, 409, 410, 411, 412, 413, 418, 419, 437], "load_img": [2, 36, 93, 94, 107, 131, 152, 177, 178], "note": [2, 3, 4, 6, 14, 15, 20, 23, 42, 43, 44, 48, 49, 52, 54, 55, 56, 58, 64, 65, 66, 67, 69, 70, 75, 76, 79, 84, 86, 91, 94, 95, 101, 102, 104, 108, 111, 114, 116, 117, 124, 148, 152, 153, 154, 158, 164, 165, 166, 167, 168, 169, 174, 175, 177, 178, 179, 185, 186, 187, 192, 193, 195, 196, 197, 200, 205, 206, 209, 214, 217, 218, 219, 221, 222, 225, 227, 228, 229, 230, 231, 232, 233, 239, 240, 241, 244, 249, 250, 251, 252, 253, 254, 255, 256, 257, 268, 271, 272, 273, 274, 281, 294, 297, 299, 305, 308, 310, 311, 314, 317, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 377, 378, 382, 384, 391, 392, 403, 404, 405, 406, 407, 418, 419, 422, 435], "index": [2, 6, 12, 20, 22, 23, 33, 40, 41, 50, 55, 56, 62, 64, 65, 66, 69, 72, 87, 88, 100, 101, 103, 130, 148, 152, 157, 195, 196, 204, 205, 207, 215, 234, 248, 249, 250, 251, 252, 271, 273, 274, 288, 306, 314, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 394, 406, 408, 418, 422], "start": [2, 3, 6, 30, 40, 49, 56, 58, 69, 71, 84, 91, 94, 150, 152, 159, 166, 167, 172, 173, 175, 179, 197, 198, 206, 208, 278, 281, 283, 288, 325, 326, 327, 328, 329, 330, 331, 332, 342, 406, 422], "first_rsn": 2, "index_img": [2, 3, 20, 29, 30, 31, 32, 33, 34, 36, 37, 49, 50, 87, 89, 92, 98, 102, 104, 154, 157, 178, 179, 300, 307], "If": [2, 9, 14, 15, 24, 32, 34, 35, 36, 40, 41, 42, 43, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 70, 75, 79, 84, 86, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 113, 116, 117, 125, 138, 145, 146, 148, 152, 153, 157, 159, 160, 162, 164, 166, 167, 169, 172, 174, 175, 177, 178, 179, 185, 186, 187, 189, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 204, 206, 211, 212, 213, 214, 218, 219, 221, 222, 223, 226, 228, 230, 232, 233, 238, 240, 241, 242, 243, 244, 245, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 268, 271, 272, 273, 274, 277, 278, 281, 284, 288, 290, 294, 295, 296, 297, 298, 299, 300, 304, 305, 309, 311, 312, 313, 314, 315, 316, 318, 319, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 414, 415, 416, 417, 418, 422, 435, 436], "want": [2, 6, 9, 14, 15, 42, 49, 54, 66, 71, 72, 78, 86, 94, 98, 100, 113, 116, 117, 153, 160, 162, 166, 167, 169, 178, 179, 228, 230, 254, 255, 314, 323, 395, 402, 435, 436], "iter_img": [2, 48, 178, 306], "them": [2, 3, 6, 14, 19, 30, 32, 39, 42, 44, 49, 50, 54, 55, 58, 62, 64, 65, 67, 69, 71, 72, 79, 80, 86, 89, 94, 100, 103, 104, 108, 113, 116, 117, 121, 125, 126, 138, 144, 145, 147, 150, 152, 153, 154, 158, 160, 162, 167, 169, 172, 173, 174, 177, 179, 184, 195, 228, 230, 284, 341, 342, 404, 435], "Then": [2, 3, 14, 30, 40, 42, 50, 51, 55, 62, 63, 69, 94, 95, 157, 159, 161, 162, 167, 178, 179, 185, 187, 219, 403], "give": [2, 3, 4, 9, 14, 15, 16, 24, 29, 33, 42, 49, 52, 54, 55, 56, 58, 69, 84, 91, 94, 98, 103, 116, 124, 131, 133, 148, 152, 153, 154, 156, 158, 159, 160, 161, 162, 164, 166, 174, 178, 179, 221, 222, 230, 249, 250, 251, 252, 253, 256, 257, 268, 276, 281, 283, 288, 294, 296, 311, 316, 319, 326, 327, 328, 329, 330, 331, 332, 333, 340, 389, 394, 395, 403, 404, 406, 408, 412, 413, 422], "few": [2, 14, 15, 25, 39, 40, 49, 77, 81, 91, 102, 136, 137, 152, 158, 160, 163, 165, 167, 168, 175, 178, 404, 422, 437], "argument": [2, 6, 9, 14, 15, 17, 43, 48, 55, 68, 70, 80, 89, 92, 94, 117, 124, 125, 130, 131, 133, 134, 135, 136, 138, 139, 141, 144, 145, 146, 147, 148, 150, 152, 159, 160, 162, 164, 166, 167, 168, 171, 177, 189, 193, 201, 202, 228, 239, 249, 250, 251, 252, 253, 284, 294, 296, 299, 310, 313, 323, 326, 327, 328, 329, 330, 331, 332, 338, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 383, 385, 387, 389, 395, 396, 400, 418, 435], "more": [2, 3, 4, 6, 8, 9, 13, 14, 16, 19, 21, 22, 23, 26, 27, 28, 29, 31, 33, 39, 40, 42, 43, 46, 48, 49, 50, 52, 54, 55, 56, 58, 60, 61, 62, 64, 66, 69, 70, 71, 74, 75, 77, 79, 80, 83, 86, 89, 91, 94, 98, 100, 101, 102, 103, 105, 107, 108, 113, 115, 116, 117, 119, 123, 124, 125, 127, 131, 133, 135, 137, 138, 141, 143, 147, 148, 149, 152, 153, 154, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 172, 174, 175, 177, 178, 179, 186, 193, 195, 196, 197, 198, 203, 205, 206, 208, 209, 214, 217, 218, 219, 223, 225, 228, 230, 232, 237, 240, 241, 243, 244, 246, 248, 249, 250, 251, 252, 254, 255, 256, 257, 269, 271, 273, 274, 281, 294, 296, 300, 311, 319, 323, 326, 327, 328, 329, 330, 331, 332, 342, 353, 355, 358, 360, 362, 364, 366, 368, 370, 377, 390, 391, 392, 397, 399, 400, 403, 404, 405, 406, 408, 415, 417, 422, 425, 435, 436, 437], "compact": [2, 94, 178, 219], "displai": [2, 3, 4, 6, 10, 11, 13, 16, 17, 18, 20, 21, 22, 23, 25, 26, 39, 40, 42, 47, 48, 49, 50, 51, 55, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 75, 80, 81, 84, 86, 87, 88, 89, 91, 92, 93, 94, 98, 99, 100, 102, 105, 106, 123, 130, 135, 136, 138, 139, 141, 145, 146, 148, 150, 152, 154, 157, 158, 164, 169, 173, 178, 281, 288, 294, 327, 330, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 406, 414, 416, 437], "img": [2, 4, 6, 10, 50, 62, 71, 77, 79, 84, 90, 101, 105, 111, 133, 141, 152, 157, 167, 177, 253, 256, 257, 263, 264, 294, 296, 298, 299, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 325, 326, 327, 328, 329, 330, 331, 332, 333, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 376, 378, 385, 386, 404, 406, 409, 410, 412, 413, 415, 422, 435], "display_mod": [2, 6, 9, 13, 14, 15, 18, 30, 31, 36, 39, 40, 42, 43, 48, 49, 53, 58, 62, 65, 66, 70, 71, 75, 76, 79, 87, 88, 92, 101, 102, 105, 106, 107, 116, 131, 148, 152, 281, 294, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 377, 379, 382, 384, 385, 388, 390, 391, 392, 416, 435], "z": [2, 13, 14, 15, 18, 24, 30, 33, 36, 40, 42, 43, 48, 52, 54, 58, 61, 62, 65, 66, 67, 69, 70, 71, 75, 76, 79, 80, 81, 84, 87, 88, 94, 101, 102, 105, 106, 108, 114, 133, 135, 139, 150, 152, 167, 169, 172, 175, 178, 179, 203, 228, 258, 269, 276, 278, 280, 281, 294, 297, 301, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 342, 343, 345, 346, 350, 351, 352, 353, 354, 361, 362, 367, 368, 369, 370, 371, 372, 373, 376, 377, 378, 379, 382, 384, 385, 388, 390, 391, 392, 393, 394, 395, 396, 399, 402, 406, 407, 415, 416, 418, 435], "cut_coord": [2, 6, 9, 15, 16, 17, 18, 20, 30, 31, 36, 39, 40, 42, 43, 48, 49, 50, 55, 61, 65, 66, 67, 70, 71, 75, 77, 79, 81, 86, 87, 88, 90, 92, 93, 94, 100, 102, 105, 106, 107, 123, 126, 152, 157, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 377, 382, 385, 390, 391, 392, 399, 416, 435], "1": [2, 3, 5, 6, 9, 10, 11, 12, 15, 18, 19, 20, 21, 22, 23, 24, 26, 27, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 114, 116, 117, 123, 125, 126, 128, 132, 133, 135, 138, 140, 141, 148, 150, 153, 157, 159, 160, 161, 162, 164, 165, 166, 167, 169, 175, 177, 179, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 249, 250, 251, 252, 253, 254, 255, 256, 257, 266, 268, 269, 271, 272, 273, 274, 276, 281, 284, 288, 290, 294, 296, 298, 299, 303, 306, 308, 311, 314, 316, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 378, 379, 384, 386, 388, 389, 390, 391, 393, 395, 396, 399, 400, 402, 403, 404, 405, 406, 411, 413, 415, 418, 419, 422, 435, 436], "colorbar": [2, 6, 9, 14, 20, 21, 23, 25, 26, 36, 37, 40, 48, 50, 51, 54, 57, 58, 62, 69, 70, 75, 76, 77, 79, 80, 86, 87, 88, 94, 101, 103, 105, 108, 121, 123, 130, 133, 138, 139, 141, 145, 146, 147, 148, 149, 152, 157, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 378, 379, 380, 382, 384, 385, 387, 388, 389, 390, 391, 392, 393, 395, 396, 398, 399, 400, 402, 435], "fals": [2, 6, 9, 14, 15, 17, 18, 20, 21, 22, 33, 34, 36, 37, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 62, 70, 72, 75, 76, 77, 79, 80, 81, 86, 87, 88, 89, 91, 92, 94, 99, 101, 102, 103, 105, 106, 117, 125, 141, 144, 145, 146, 148, 150, 152, 157, 164, 168, 169, 172, 179, 185, 186, 187, 189, 191, 193, 199, 200, 201, 202, 211, 212, 213, 214, 217, 223, 226, 228, 230, 232, 249, 250, 251, 252, 253, 254, 255, 256, 257, 276, 278, 281, 284, 294, 296, 297, 299, 300, 303, 312, 314, 315, 318, 319, 322, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 374, 377, 379, 380, 382, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 402, 403, 404, 405, 406, 407, 409, 410, 412, 413, 415, 416, 417, 418, 435], "slice": [2, 3, 6, 9, 16, 36, 89, 94, 105, 116, 124, 137, 144, 146, 152, 164, 177, 179, 281, 284, 294, 306, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 385, 416, 437], "constructor": [2, 117, 273, 274, 306], "desir": [2, 62, 175, 179, 256, 257, 280, 281, 283, 288, 294, 297, 319, 371, 372, 380, 404], "afterward": [2, 166, 175], "ll": [2, 6, 49, 58, 254, 255], "follow": [2, 4, 9, 14, 18, 21, 22, 29, 32, 34, 35, 36, 40, 41, 42, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 65, 66, 70, 72, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 111, 113, 116, 117, 135, 138, 139, 140, 141, 142, 143, 147, 152, 153, 154, 157, 158, 164, 167, 168, 169, 172, 174, 175, 177, 232, 237, 239, 299, 305, 319, 321, 322, 323, 327, 330, 334, 335, 336, 338, 339, 400, 406, 418, 419, 435, 436], "same": [2, 3, 6, 14, 15, 21, 23, 34, 37, 40, 41, 47, 49, 50, 55, 58, 63, 64, 66, 69, 70, 71, 84, 86, 88, 94, 98, 100, 101, 102, 108, 117, 125, 126, 133, 138, 144, 145, 146, 147, 148, 152, 153, 154, 157, 158, 159, 160, 164, 166, 167, 169, 171, 172, 177, 178, 179, 185, 186, 187, 189, 201, 202, 211, 213, 218, 219, 237, 249, 250, 251, 252, 254, 255, 256, 257, 281, 284, 294, 296, 299, 301, 310, 312, 314, 319, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 338, 340, 342, 348, 349, 350, 351, 352, 361, 362, 365, 366, 367, 368, 373, 377, 379, 380, 382, 384, 385, 389, 390, 391, 392, 400, 403, 404, 407, 412, 413, 415, 416, 418], "formula": [2, 129, 152, 166, 294, 296, 310, 380], "befor": [2, 15, 49, 55, 56, 89, 94, 98, 103, 116, 123, 125, 138, 141, 144, 146, 148, 150, 152, 156, 157, 159, 160, 162, 167, 168, 169, 171, 174, 175, 177, 178, 179, 189, 228, 230, 256, 257, 281, 283, 288, 299, 303, 305, 322, 323, 326, 327, 329, 330, 332, 378, 393, 395, 396, 400, 402, 404, 409, 410, 418, 419, 435], "selected_volum": 2, "5": [2, 3, 6, 10, 11, 12, 18, 20, 21, 22, 23, 24, 25, 27, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 79, 81, 82, 88, 89, 91, 94, 95, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 114, 123, 128, 135, 141, 146, 147, 148, 149, 153, 157, 159, 164, 165, 166, 169, 178, 179, 196, 198, 201, 202, 204, 205, 208, 213, 214, 217, 218, 219, 223, 225, 227, 240, 243, 254, 255, 271, 273, 274, 299, 305, 306, 309, 322, 323, 335, 337, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 390, 391, 393, 395, 396, 398, 400, 401, 402, 417, 418, 419, 422, 435], "re": [2, 6, 21, 23, 40, 65, 66, 69, 71, 84, 117, 147, 152, 167, 228, 240, 241, 242, 243, 244, 245, 271, 273, 274, 284, 407], "thing": [2, 3, 56, 66, 124, 152, 156, 165, 166, 167, 175, 179, 271, 299, 418, 435], "base": [2, 8, 20, 27, 28, 29, 34, 45, 47, 48, 49, 55, 60, 61, 66, 67, 71, 73, 74, 81, 82, 88, 89, 91, 92, 97, 98, 105, 109, 113, 114, 117, 123, 125, 129, 133, 141, 144, 146, 149, 152, 153, 154, 155, 156, 158, 159, 162, 164, 165, 166, 167, 169, 170, 172, 173, 174, 175, 179, 186, 189, 194, 199, 205, 207, 214, 217, 218, 219, 220, 223, 224, 225, 228, 230, 232, 235, 236, 237, 238, 249, 250, 251, 252, 253, 255, 256, 257, 269, 277, 281, 284, 288, 290, 294, 296, 297, 298, 299, 300, 304, 306, 310, 315, 318, 321, 322, 323, 325, 331, 332, 336, 342, 343, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 381, 390, 391, 392, 395, 396, 397, 399, 403, 404, 406, 407, 408, 414, 416, 418, 419, 420, 421, 422, 435, 436, 437], "confirm": [2, 29, 125, 152, 167], "match": [2, 6, 15, 117, 124, 125, 141, 145, 146, 148, 152, 158, 164, 167, 172, 176, 179, 195, 206, 228, 248, 249, 250, 251, 252, 254, 255, 256, 257, 281, 284, 294, 296, 300, 309, 311, 314, 319, 321, 326, 327, 329, 330, 334, 336, 337, 339, 390, 404, 407, 437], "previou": [2, 9, 14, 41, 49, 54, 62, 66, 77, 94, 147, 148, 152, 153, 156, 160, 162, 166, 169, 189, 249, 250, 251, 252, 256, 257, 328, 331, 404], "abov": [2, 3, 4, 14, 21, 33, 42, 48, 49, 56, 66, 69, 86, 94, 100, 117, 133, 152, 153, 154, 156, 158, 159, 164, 166, 167, 168, 172, 177, 178, 179, 195, 219, 240, 241, 244, 249, 250, 251, 252, 254, 255, 268, 271, 272, 273, 274, 314, 315, 322, 326, 327, 328, 329, 330, 331, 332, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379, 390, 398, 400, 402, 404, 406, 417, 418], "show": [2, 4, 6, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 99, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 116, 133, 139, 144, 146, 148, 152, 153, 154, 157, 159, 160, 162, 164, 167, 169, 171, 178, 179, 217, 229, 246, 268, 281, 294, 353, 355, 356, 358, 360, 362, 364, 366, 368, 370, 394, 398, 401, 406, 416, 435], "forc": [2, 94, 111, 128, 152, 166, 179, 197, 206, 228, 229, 230, 231], "figur": [2, 4, 9, 12, 14, 15, 18, 22, 23, 24, 25, 30, 31, 32, 34, 35, 36, 40, 41, 42, 43, 44, 48, 49, 51, 52, 56, 57, 61, 62, 65, 66, 68, 70, 79, 84, 91, 94, 99, 100, 101, 105, 106, 108, 111, 125, 135, 144, 145, 148, 149, 150, 152, 167, 168, 169, 178, 321, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 435], "when": [2, 3, 4, 8, 9, 16, 24, 27, 54, 66, 67, 68, 69, 75, 89, 91, 92, 94, 100, 102, 105, 106, 113, 116, 117, 123, 124, 125, 126, 128, 132, 133, 134, 136, 139, 141, 144, 145, 148, 149, 150, 152, 153, 154, 156, 158, 159, 160, 161, 162, 164, 166, 167, 168, 169, 171, 172, 175, 178, 185, 195, 198, 204, 205, 221, 223, 228, 230, 249, 250, 251, 252, 253, 254, 255, 269, 270, 274, 275, 278, 281, 294, 296, 314, 316, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 342, 343, 345, 346, 374, 380, 384, 385, 390, 391, 392, 393, 395, 396, 397, 399, 400, 402, 404, 409, 416, 417, 418, 422, 435], "outsid": [2, 4, 16, 66, 150, 152, 167, 174, 179, 314, 315, 329, 393, 395, 396, 402, 409, 410, 415, 422], "ipython": [2, 4, 16, 159, 174, 436], "recap": [2, 4], "call": [2, 4, 6, 14, 15, 16, 33, 43, 48, 49, 50, 52, 53, 56, 58, 66, 69, 72, 76, 81, 87, 89, 91, 94, 98, 104, 116, 117, 141, 152, 153, 154, 156, 157, 159, 160, 164, 166, 167, 168, 169, 171, 172, 177, 179, 183, 185, 187, 189, 197, 209, 228, 230, 233, 255, 257, 270, 275, 281, 294, 299, 309, 326, 327, 328, 329, 330, 331, 332, 338, 378, 379, 388, 404, 418, 435], "differ": [2, 6, 9, 15, 19, 20, 21, 22, 23, 28, 29, 45, 46, 51, 52, 54, 55, 58, 59, 63, 66, 67, 68, 69, 70, 71, 72, 75, 79, 80, 81, 89, 91, 94, 98, 99, 100, 102, 103, 113, 114, 116, 123, 125, 139, 145, 147, 152, 154, 155, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 172, 176, 177, 185, 187, 200, 209, 214, 217, 240, 241, 242, 243, 244, 245, 249, 251, 252, 254, 255, 273, 274, 277, 281, 283, 284, 288, 290, 294, 300, 304, 306, 311, 319, 322, 325, 326, 327, 329, 330, 331, 341, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 374, 375, 377, 379, 382, 384, 385, 389, 390, 391, 392, 397, 404, 406, 415, 416, 422, 437], "flavor": 2, "onli": [2, 3, 6, 13, 14, 19, 29, 31, 32, 33, 34, 36, 37, 40, 42, 43, 49, 51, 52, 54, 55, 58, 66, 69, 75, 79, 81, 84, 86, 91, 94, 98, 99, 100, 101, 103, 104, 108, 116, 117, 124, 131, 136, 141, 146, 148, 149, 152, 153, 154, 156, 157, 159, 160, 161, 162, 164, 166, 167, 169, 171, 172, 176, 177, 178, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 435, 437], "multipl": [2, 6, 19, 42, 47, 77, 79, 81, 101, 124, 144, 145, 152, 155, 160, 162, 164, 167, 170, 172, 176, 177, 178, 197, 198, 206, 248, 271, 289, 294, 296, 306, 309, 310, 328, 342, 353, 355, 358, 372, 377, 382, 385, 387, 390, 391, 392, 399, 435, 437], "detail": [2, 3, 8, 9, 12, 14, 15, 16, 19, 22, 23, 26, 28, 29, 31, 33, 39, 46, 48, 50, 52, 54, 58, 60, 62, 64, 67, 71, 72, 74, 81, 83, 95, 100, 101, 102, 103, 107, 113, 116, 117, 119, 133, 138, 141, 150, 152, 153, 156, 157, 159, 160, 161, 162, 164, 165, 166, 167, 170, 175, 176, 177, 179, 181, 185, 193, 197, 201, 202, 205, 214, 219, 223, 225, 240, 241, 242, 243, 244, 245, 249, 250, 251, 252, 256, 257, 274, 281, 294, 299, 303, 311, 316, 317, 323, 325, 326, 327, 328, 329, 330, 331, 332, 342, 400, 403, 404, 406, 408, 427, 428, 435, 436], "input": [2, 3, 4, 6, 9, 14, 15, 23, 32, 43, 48, 49, 54, 55, 57, 64, 67, 68, 71, 76, 77, 79, 80, 85, 88, 89, 92, 94, 98, 108, 116, 124, 125, 127, 128, 131, 132, 133, 134, 136, 137, 138, 141, 145, 147, 148, 149, 150, 152, 156, 159, 162, 164, 166, 167, 168, 172, 176, 178, 179, 185, 186, 187, 188, 189, 190, 191, 192, 197, 198, 206, 224, 225, 249, 250, 251, 252, 253, 254, 255, 256, 257, 276, 278, 280, 281, 283, 288, 289, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 377, 378, 384, 385, 387, 390, 391, 392, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 418, 422, 435, 437], "format": [2, 49, 100, 116, 124, 125, 145, 148, 150, 152, 167, 168, 179, 185, 256, 257, 281, 294, 325, 326, 327, 328, 329, 330, 331, 332, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 382, 384, 385, 391, 392, 393, 394, 395, 396, 401, 402, 403, 404, 405, 406, 420, 421, 422, 426], "given": [2, 3, 9, 14, 16, 44, 47, 50, 53, 54, 64, 65, 66, 69, 71, 79, 84, 86, 94, 95, 100, 104, 124, 130, 132, 136, 141, 150, 152, 153, 156, 159, 160, 162, 164, 165, 166, 167, 169, 172, 174, 175, 179, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 201, 202, 222, 223, 225, 226, 232, 238, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 268, 269, 271, 272, 273, 274, 277, 278, 281, 284, 288, 294, 295, 296, 298, 300, 305, 308, 311, 314, 316, 318, 319, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 377, 378, 379, 382, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 416, 417, 419], "section": [2, 3, 4, 14, 39, 47, 48, 49, 56, 70, 94, 98, 100, 114, 115, 116, 124, 133, 138, 148, 152, 153, 154, 156, 157, 159, 160, 162, 164, 167, 169, 171, 175, 176, 179, 181, 228, 232, 343, 373, 377, 379, 382, 384, 385, 388, 390, 391, 392, 403, 414, 427, 428, 435], "name": [2, 3, 4, 6, 11, 14, 21, 22, 23, 26, 30, 32, 44, 51, 58, 62, 65, 72, 75, 76, 77, 79, 80, 91, 94, 100, 101, 103, 108, 116, 123, 125, 130, 139, 141, 146, 148, 150, 152, 156, 160, 164, 167, 168, 172, 174, 175, 176, 179, 185, 186, 187, 195, 196, 198, 199, 201, 202, 203, 204, 205, 207, 208, 209, 211, 213, 223, 228, 230, 233, 234, 235, 236, 237, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 279, 281, 282, 283, 284, 288, 294, 296, 299, 310, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 403, 404, 405, 406, 407, 409, 416, 418, 437], "object": [2, 3, 4, 5, 6, 9, 10, 13, 14, 15, 16, 17, 25, 28, 30, 32, 33, 36, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 63, 64, 67, 70, 75, 81, 86, 88, 89, 91, 92, 94, 98, 113, 114, 116, 117, 124, 125, 130, 133, 141, 144, 147, 148, 150, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 164, 166, 167, 168, 172, 173, 174, 176, 178, 185, 186, 187, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 217, 218, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238, 249, 250, 251, 252, 253, 254, 255, 256, 257, 263, 264, 265, 266, 271, 273, 274, 276, 281, 284, 294, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 421, 422, 424, 427, 430, 435, 437], "accept": [2, 3, 47, 65, 123, 124, 132, 133, 135, 138, 139, 141, 144, 145, 146, 147, 148, 149, 150, 152, 167, 168, 177, 294, 296, 297, 319, 333, 334, 335, 336, 337, 338, 339, 377, 387, 389, 390, 391, 392, 399, 401, 412, 413], "either": [2, 4, 9, 32, 35, 36, 39, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 116, 138, 145, 147, 152, 154, 156, 167, 168, 171, 172, 177, 179, 204, 205, 206, 209, 217, 271, 273, 274, 281, 294, 297, 298, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 377, 378, 379, 382, 383, 384, 387, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 402, 406, 416, 420, 421, 422, 435, 436], "hand": [2, 66, 69, 94, 166, 167, 177, 179, 238], "break": [2, 83, 96, 111, 113, 133, 152, 156, 164, 167, 209, 391, 397, 407], "down": [2, 70, 103, 156, 166, 167, 251], "other": [2, 4, 14, 23, 24, 31, 33, 36, 39, 40, 48, 56, 66, 69, 70, 94, 98, 100, 103, 104, 115, 116, 124, 138, 141, 145, 152, 153, 154, 159, 160, 161, 163, 164, 166, 167, 168, 172, 175, 177, 179, 185, 186, 187, 214, 228, 234, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 271, 273, 274, 281, 283, 284, 288, 294, 296, 319, 320, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 338, 342, 397, 403, 404, 405, 406, 435, 437], "concat_img": [2, 6, 11, 70, 71, 100, 132, 152, 178, 306], "group": [2, 3, 6, 29, 30, 32, 33, 46, 57, 58, 59, 62, 74, 76, 77, 78, 79, 80, 97, 98, 101, 104, 105, 109, 113, 114, 135, 141, 152, 154, 155, 158, 159, 164, 169, 171, 172, 173, 174, 185, 186, 187, 197, 198, 203, 211, 213, 214, 225, 231, 249, 250, 251, 252, 253, 256, 257, 307, 319, 322, 325, 330, 342, 375, 378, 379, 389, 390, 392, 397, 411, 437], "total": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 114, 155, 157, 159, 165, 204, 214, 255, 263, 264, 336, 337, 339, 390, 407, 437], "script": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 147, 152, 161, 167, 177, 178, 179, 435, 436], "minut": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 169, 223], "000": [7, 34, 42, 79, 94, 164], "second": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 111, 114, 125, 152, 156, 157, 165, 166, 167, 169, 170, 172, 179, 220, 222, 223, 237, 249, 250, 251, 252, 254, 255, 269, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 299, 304, 310, 318, 321, 326, 327, 328, 329, 330, 331, 332, 342, 354, 355, 369, 378, 381, 384, 386, 392, 393, 394, 395, 396, 397, 402, 404, 406, 414, 415, 416, 417, 418, 422, 437], "estim": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 63, 65, 68, 70, 71, 72, 75, 78, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 99, 100, 102, 103, 104, 105, 106, 107, 108, 111, 113, 114, 116, 123, 125, 136, 144, 145, 150, 152, 153, 158, 161, 163, 164, 167, 169, 171, 172, 174, 175, 184, 185, 186, 187, 189, 205, 209, 225, 232, 249, 250, 251, 252, 253, 254, 255, 256, 257, 268, 269, 271, 272, 273, 274, 277, 278, 281, 294, 296, 300, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 338, 339, 342, 389, 397, 403, 404, 405, 406, 429, 437], "usag": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 132, 141, 145, 150, 152, 153, 167, 168, 171, 174, 175, 176, 225, 232, 237, 400, 425, 437], "mb": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112], "sourc": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 153, 154, 158, 166, 167, 175, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 436], "plot_3d_and_4d_niimg": [2, 7], "py": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 124, 125, 141, 146, 147, 148, 150, 152, 167, 175, 179], "jupyt": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 139, 141, 152, 159, 174, 179, 281, 294, 398, 399, 400, 401, 402, 414, 416, 435], "notebook": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 126, 138, 141, 152, 159, 174, 179, 281, 294, 323, 398, 399, 400, 401, 402, 414, 416, 435], "ipynb": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111], "galleri": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 125, 126, 128, 132, 133, 135, 152, 167, 435], "sphinx": [2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 126, 128, 132, 133, 135, 152, 167], "simpl": [3, 5, 25, 29, 31, 35, 37, 40, 47, 56, 60, 65, 67, 71, 73, 75, 76, 77, 79, 80, 83, 84, 87, 89, 91, 94, 96, 98, 100, 101, 113, 114, 116, 117, 131, 133, 138, 148, 152, 153, 154, 160, 162, 163, 166, 167, 168, 171, 172, 174, 178, 179, 185, 186, 187, 214, 216, 223, 249, 250, 251, 252, 253, 254, 255, 256, 257, 269, 272, 281, 294, 306, 311, 323, 325, 326, 327, 328, 329, 330, 331, 332, 378, 391, 392, 397, 403, 404, 405, 406, 414, 416, 437], "reproduc": [3, 32, 40, 41, 48, 51, 72, 98, 100, 114, 173, 223, 251, 252], "2001": [3, 31, 38, 98, 102, 114, 116, 163, 173, 177, 195, 217, 342, 437], "v": [3, 6, 24, 28, 35, 45, 51, 65, 66, 76, 79, 80, 89, 97, 98, 109, 113, 114, 124, 152, 159, 160, 164, 166, 167, 173, 175, 208, 213, 217, 218, 221, 223, 228, 230, 231, 243, 249, 251, 253, 255, 304, 306, 309, 311, 312, 322, 325, 331, 342, 370, 385, 389, 392, 397, 399, 419], "discrimin": [3, 29, 31, 51, 94, 99, 116, 159, 173, 174], "mask": [3, 8, 15, 20, 23, 27, 29, 30, 31, 33, 34, 35, 39, 40, 42, 43, 44, 47, 48, 49, 50, 54, 55, 56, 62, 64, 67, 70, 75, 77, 79, 83, 91, 92, 96, 102, 104, 105, 106, 111, 113, 115, 117, 123, 124, 131, 132, 133, 135, 138, 141, 144, 146, 147, 148, 152, 156, 160, 163, 165, 173, 174, 176, 177, 186, 214, 217, 218, 219, 223, 227, 228, 240, 241, 244, 249, 250, 251, 252, 254, 255, 256, 257, 276, 278, 281, 294, 296, 297, 298, 299, 304, 305, 306, 309, 311, 312, 316, 318, 322, 325, 326, 327, 328, 329, 330, 331, 332, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 374, 375, 376, 377, 378, 382, 384, 386, 387, 391, 392, 397, 404, 405, 406, 408, 409, 410, 411, 414, 416, 418, 422, 427, 435, 437], "ventral": [3, 16, 22, 32, 33, 38, 94, 98, 114, 116, 159, 173, 179, 217, 393, 395, 396], "stream": [3, 32, 116, 173, 179], "j": [3, 22, 23, 37, 41, 47, 49, 56, 68, 71, 76, 84, 98, 100, 102, 114, 117, 135, 138, 147, 152, 160, 161, 164, 165, 197, 199, 200, 203, 204, 205, 207, 208, 212, 213, 215, 218, 223, 225, 226, 227, 228, 230, 233, 243, 251, 252, 256, 276, 296, 299, 322, 323, 342, 378, 418, 419, 435], "et": [3, 22, 23, 28, 44, 45, 48, 51, 58, 66, 72, 98, 99, 100, 102, 113, 133, 138, 152, 153, 154, 156, 157, 158, 159, 160, 161, 164, 165, 179, 195, 204, 207, 211, 212, 213, 217, 226, 227, 249, 252, 255, 299, 301, 306, 318, 325, 328, 331, 342, 370, 392, 397], "al": [3, 22, 23, 28, 44, 45, 48, 51, 58, 66, 72, 98, 99, 100, 102, 113, 133, 138, 152, 153, 154, 156, 157, 158, 159, 160, 161, 164, 165, 179, 195, 204, 207, 211, 212, 213, 217, 226, 227, 249, 252, 255, 299, 301, 306, 318, 325, 328, 331, 342, 370, 392, 397], "distribut": [3, 6, 14, 15, 22, 23, 32, 38, 48, 49, 55, 79, 94, 98, 114, 145, 149, 152, 159, 164, 166, 169, 172, 207, 217, 269, 296, 342, 386], "overlap": [3, 32, 38, 54, 58, 89, 91, 92, 98, 114, 123, 125, 152, 167, 172, 179, 217, 225, 326, 327, 329, 330, 332, 390], "represent": [3, 16, 32, 33, 36, 38, 52, 53, 56, 58, 62, 75, 77, 84, 94, 98, 100, 104, 114, 116, 155, 158, 164, 172, 176, 178, 213, 217, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 299, 300, 303, 304, 305, 306, 307, 308, 309, 311, 313, 314, 315, 316, 317, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 377, 378, 384, 385, 387, 390, 391, 392, 399, 400, 404, 406, 409, 410, 412, 413, 416, 422, 437], "tempor": [3, 6, 16, 32, 33, 38, 51, 55, 66, 68, 91, 94, 98, 101, 103, 114, 116, 138, 146, 152, 158, 159, 172, 176, 198, 217, 257, 281, 285, 286, 287, 288, 290, 291, 292, 293, 299, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 406, 418, 437], "cortex": [3, 23, 32, 33, 38, 55, 58, 61, 69, 71, 75, 79, 80, 91, 98, 114, 157, 159, 164, 168, 169, 199, 205, 209, 211, 217, 225, 227], "vol": [3, 48, 49, 98, 158, 253], "293": [3, 33, 41, 66, 72, 98, 114, 217], "p": [3, 6, 37, 42, 48, 62, 64, 67, 72, 75, 76, 77, 79, 80, 81, 94, 98, 101, 102, 105, 106, 108, 114, 145, 152, 158, 164, 166, 169, 185, 186, 189, 193, 198, 206, 208, 218, 225, 268, 269, 277, 281, 294, 296, 297, 299, 321, 342, 415, 416, 418], "2425": [3, 98, 114, 217], "2430": [3, 98, 102, 114, 217], "meant": [3, 6, 104, 111, 192, 269, 414], "variou": [3, 20, 30, 31, 39, 48, 105, 106, 141, 144, 148, 152, 159, 161, 162, 167, 169, 172, 178, 197, 251, 252, 323, 404, 422], "step": [3, 11, 20, 33, 35, 37, 42, 44, 47, 49, 50, 55, 58, 61, 62, 64, 65, 66, 69, 79, 80, 89, 94, 98, 101, 108, 116, 123, 136, 144, 150, 152, 153, 156, 157, 158, 159, 161, 162, 164, 166, 167, 172, 175, 176, 177, 178, 187, 194, 219, 232, 241, 244, 251, 252, 256, 257, 281, 284, 296, 323, 325, 328, 331, 334, 335, 336, 338, 339, 404, 418, 437], "minimalist": 3, "strive": 3, "didact": [3, 131, 152, 160, 162, 167], "copi": [3, 20, 33, 36, 40, 53, 88, 100, 111, 113, 116, 141, 152, 166, 167, 177, 232, 233, 256, 257, 302, 303, 304, 314, 315, 318, 325, 328, 331, 417], "analyz": [3, 33, 49, 60, 74, 94, 113, 158, 167, 169, 172, 174, 176, 342, 437], "mani": [3, 10, 11, 15, 23, 36, 38, 39, 41, 42, 43, 48, 49, 51, 56, 71, 79, 86, 94, 98, 99, 100, 106, 117, 146, 152, 155, 156, 157, 159, 160, 161, 162, 165, 166, 167, 169, 172, 175, 178, 179, 187, 228, 230, 249, 250, 251, 252, 253, 296, 303, 342, 387, 412, 413, 422, 435], "unnecessari": [3, 274], "fetch_haxbi": [3, 15, 16, 18, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 94, 98, 102, 116, 132, 152, 159, 167, 177], "directori": [3, 6, 62, 64, 94, 101, 108, 113, 156, 167, 177, 186, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 249, 250, 251, 252, 254, 255, 256, 257, 281, 284, 294, 300, 319, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 386, 404, 405, 406], "while": [3, 4, 6, 48, 55, 56, 66, 84, 94, 98, 100, 101, 103, 108, 116, 123, 125, 126, 136, 138, 152, 158, 159, 164, 166, 167, 168, 174, 178, 179, 197, 249, 250, 251, 252, 288, 342], "310": [3, 33, 36, 41, 42, 44, 89, 96, 102], "mo": 3, "internet": [3, 49, 158, 176, 181, 437], "By": [3, 14, 15, 25, 29, 33, 35, 70, 71, 145, 152, 160, 167, 175, 179, 185, 186, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 236, 237, 238, 239, 249, 250, 251, 252, 254, 255, 256, 257, 281, 294, 300, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 377, 382, 385, 386, 388, 390, 391, 392, 399, 404, 405, 406, 409, 435], "default": [3, 8, 9, 14, 15, 23, 25, 27, 29, 30, 32, 33, 34, 35, 36, 37, 42, 55, 56, 60, 62, 66, 67, 73, 79, 83, 89, 94, 96, 102, 103, 111, 113, 117, 123, 124, 125, 126, 128, 131, 132, 137, 138, 139, 141, 144, 145, 146, 147, 148, 150, 152, 159, 160, 164, 166, 167, 168, 177, 178, 179, 185, 186, 187, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 263, 268, 269, 271, 272, 273, 274, 276, 277, 278, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 305, 306, 309, 311, 312, 313, 314, 315, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 374, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 422, 435], "2nd": [3, 25, 29, 30, 32, 33, 34, 35, 36, 37, 217], "fetch": [3, 9, 14, 19, 24, 29, 30, 32, 34, 35, 36, 37, 41, 58, 71, 85, 86, 87, 88, 91, 94, 103, 117, 124, 132, 133, 135, 137, 141, 152, 155, 158, 167, 176, 193, 200, 206, 214, 215, 218, 221, 222, 223, 226, 228, 229, 230, 231, 232, 235, 237, 437], "haxby_dataset": [3, 15, 16, 18, 25, 29, 30, 32, 33, 34, 35, 36, 37, 38, 94, 98, 102, 116, 159, 177, 179], "func": [3, 6, 11, 15, 16, 18, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62, 64, 65, 66, 67, 70, 85, 89, 91, 92, 94, 95, 98, 99, 100, 101, 102, 104, 108, 116, 146, 152, 157, 167, 168, 177, 179, 194, 214, 217, 227, 235, 319, 322, 323], "one": [3, 4, 6, 9, 14, 15, 16, 20, 24, 29, 30, 31, 33, 35, 36, 40, 44, 47, 48, 49, 55, 56, 57, 58, 64, 66, 69, 70, 71, 72, 74, 77, 78, 80, 81, 82, 86, 91, 92, 94, 100, 101, 103, 105, 108, 113, 116, 117, 123, 124, 130, 132, 135, 144, 146, 147, 148, 152, 153, 154, 157, 158, 159, 160, 164, 166, 167, 168, 169, 171, 172, 174, 175, 176, 177, 179, 185, 187, 193, 197, 198, 204, 205, 206, 213, 219, 223, 226, 237, 249, 250, 251, 252, 254, 256, 257, 263, 269, 281, 283, 284, 288, 290, 294, 295, 296, 299, 300, 301, 303, 304, 306, 310, 314, 319, 321, 326, 329, 331, 341, 342, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 379, 380, 384, 387, 388, 389, 390, 394, 395, 397, 399, 400, 404, 408, 409, 415, 418, 422, 436, 437], "each": [3, 6, 14, 15, 20, 21, 22, 24, 29, 34, 36, 37, 39, 40, 47, 48, 49, 50, 51, 55, 56, 58, 61, 62, 64, 70, 71, 78, 80, 86, 88, 94, 98, 99, 100, 101, 102, 105, 108, 117, 133, 138, 139, 141, 144, 146, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 166, 167, 168, 169, 172, 174, 175, 177, 178, 179, 185, 186, 187, 189, 196, 207, 213, 214, 225, 228, 230, 238, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 263, 264, 271, 273, 274, 281, 283, 284, 288, 294, 296, 299, 305, 311, 316, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 337, 339, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 374, 377, 379, 382, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 403, 404, 405, 406, 407, 408, 409, 410, 412, 416, 418, 419, 421, 422, 435], "fmri_filenam": [3, 36, 37, 56, 94, 98, 116], "basic": [3, 7, 8, 11, 15, 16, 18, 25, 27, 29, 30, 32, 34, 35, 36, 41, 42, 48, 49, 52, 53, 56, 58, 69, 71, 75, 77, 85, 89, 91, 92, 94, 95, 98, 100, 102, 104, 105, 106, 166, 168, 169, 172, 174, 175, 179, 201, 202, 294, 296, 322, 323, 380, 391, 397], "inform": [3, 6, 9, 11, 16, 18, 21, 23, 25, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 48, 49, 51, 52, 53, 58, 61, 62, 66, 68, 72, 75, 77, 78, 85, 89, 91, 92, 94, 95, 100, 101, 102, 104, 105, 108, 114, 116, 117, 121, 124, 135, 139, 149, 152, 153, 154, 157, 158, 159, 161, 163, 166, 167, 168, 171, 172, 174, 175, 177, 179, 185, 186, 187, 195, 196, 197, 198, 203, 205, 206, 208, 209, 217, 218, 225, 226, 227, 228, 230, 232, 240, 241, 243, 244, 249, 250, 251, 252, 253, 254, 255, 256, 257, 274, 281, 294, 296, 308, 314, 320, 321, 325, 326, 327, 328, 329, 330, 331, 332, 403, 404, 405, 406, 416, 417, 418, 425, 436, 437], "One": [3, 6, 14, 34, 35, 48, 49, 56, 64, 71, 79, 146, 152, 153, 154, 159, 160, 164, 166, 168, 169, 171, 175, 177, 179, 281, 314, 323, 327, 328, 330, 409], "wai": [3, 6, 33, 61, 62, 64, 66, 75, 76, 84, 98, 108, 114, 116, 117, 145, 146, 148, 152, 153, 155, 158, 159, 160, 162, 165, 166, 167, 168, 169, 172, 177, 179, 230, 251, 252, 271, 273, 274, 319, 378, 403, 435, 436], "plot_epi": [3, 25, 49, 89, 94, 95, 145, 148, 152, 392, 435], "becaus": [3, 6, 11, 15, 18, 30, 31, 32, 36, 39, 42, 43, 44, 54, 66, 70, 71, 79, 84, 101, 102, 123, 141, 152, 154, 159, 164, 166, 167, 169, 175, 228, 254, 255, 387, 393, 395, 396, 400, 402, 422], "thei": [3, 6, 24, 39, 42, 44, 49, 65, 66, 69, 71, 94, 98, 108, 111, 116, 117, 124, 148, 150, 152, 158, 161, 162, 164, 166, 167, 169, 172, 174, 175, 177, 179, 209, 217, 228, 233, 281, 284, 294, 296, 300, 314, 332, 380, 407, 435], "consist": [3, 6, 34, 40, 44, 66, 69, 108, 116, 124, 125, 131, 137, 138, 139, 148, 152, 159, 160, 163, 164, 166, 167, 169, 172, 187, 197, 225, 255, 284, 326, 329, 403, 405, 408], "epi": [3, 6, 11, 15, 25, 30, 31, 92, 94, 95, 104, 172, 174, 178, 179, 249, 250, 251, 252, 256, 257, 328, 331, 336, 382, 392, 404, 435], "cannot": [3, 9, 10, 11, 36, 48, 49, 51, 56, 79, 86, 92, 94, 102, 117, 138, 150, 152, 153, 159, 162, 167, 179, 187, 399, 400, 402], "directli": [3, 6, 32, 33, 47, 48, 51, 64, 86, 89, 108, 130, 134, 136, 138, 152, 156, 159, 162, 167, 169, 177, 179, 228, 284, 342, 390], "just": [3, 4, 6, 14, 16, 21, 40, 42, 44, 49, 50, 51, 56, 58, 65, 66, 71, 75, 76, 77, 79, 81, 87, 91, 98, 100, 101, 111, 116, 130, 152, 157, 159, 166, 169, 174, 175, 179, 281, 294, 299, 316, 319, 322, 390, 391, 392, 399, 416, 418, 422, 435], "mean_img": [3, 6, 15, 16, 18, 25, 30, 31, 33, 36, 49, 64, 67, 70, 71, 85, 89, 92, 94, 95, 102, 104, 111, 178, 310], "view_img": [3, 29, 138, 139, 147, 150, 152, 159, 435], "none": [3, 14, 15, 32, 33, 36, 40, 43, 44, 49, 52, 53, 54, 56, 58, 62, 66, 68, 77, 79, 89, 91, 92, 94, 95, 100, 103, 107, 111, 117, 124, 128, 138, 141, 145, 150, 152, 167, 179, 185, 186, 187, 189, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 283, 284, 288, 290, 294, 295, 296, 297, 298, 299, 300, 305, 309, 311, 312, 313, 314, 316, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 422, 435], "These": [3, 4, 6, 15, 55, 58, 60, 72, 74, 77, 79, 81, 89, 94, 107, 110, 113, 116, 141, 144, 145, 148, 152, 159, 162, 163, 165, 166, 167, 171, 172, 179, 200, 211, 213, 247, 430, 435, 436], "realli": [3, 70, 139, 152, 159, 323], "love": 3, "learn": [3, 21, 34, 36, 44, 46, 52, 53, 56, 57, 58, 59, 94, 97, 102, 104, 109, 111, 113, 114, 115, 117, 121, 123, 126, 131, 133, 134, 135, 136, 138, 141, 146, 148, 152, 153, 154, 155, 156, 159, 160, 161, 163, 164, 166, 167, 172, 173, 175, 180, 185, 186, 189, 203, 214, 217, 226, 249, 250, 251, 252, 253, 256, 257, 263, 264, 304, 306, 307, 311, 325, 326, 327, 328, 329, 330, 331, 332, 355, 362, 375, 376, 377, 379, 382, 389, 390, 391, 392, 397, 404, 406, 436, 437], "matric": [3, 8, 27, 41, 47, 50, 51, 56, 60, 64, 67, 71, 73, 80, 99, 113, 126, 131, 134, 135, 145, 146, 148, 152, 153, 154, 155, 166, 168, 176, 177, 178, 180, 185, 186, 187, 189, 192, 225, 271, 273, 274, 281, 288, 314, 381, 389, 393, 395, 397, 433, 437], "actual": [3, 6, 42, 66, 68, 71, 77, 86, 105, 125, 152, 166, 167, 169, 172, 177, 187, 232, 281, 294, 297, 416], "fortun": [3, 68], "later": [3, 6, 9, 22, 23, 40, 62, 69, 71, 91, 100, 101, 103, 169, 177, 199, 201, 202, 303, 374, 377, 382, 384, 385, 387, 391, 392, 393, 395, 396, 414, 435], "automat": [3, 15, 16, 19, 22, 23, 33, 34, 40, 54, 89, 92, 94, 114, 115, 121, 124, 131, 133, 145, 146, 147, 152, 157, 164, 167, 177, 178, 179, 199, 207, 249, 250, 251, 252, 254, 255, 256, 257, 281, 294, 296, 314, 321, 327, 330, 342, 353, 373, 377, 382, 385, 390, 391, 392, 399, 404, 406, 408, 416, 435, 437], "transform": [3, 23, 24, 40, 41, 48, 49, 50, 51, 53, 54, 66, 69, 71, 84, 91, 92, 94, 98, 99, 100, 103, 108, 111, 114, 116, 134, 135, 139, 141, 143, 144, 145, 146, 148, 150, 152, 156, 157, 162, 169, 172, 176, 177, 185, 208, 226, 249, 250, 251, 252, 256, 257, 263, 264, 278, 281, 294, 297, 301, 312, 314, 322, 325, 326, 327, 328, 329, 330, 331, 332, 343, 403, 404, 405, 406, 418, 422, 437], "all": [3, 4, 6, 8, 15, 19, 23, 27, 30, 32, 35, 36, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 64, 66, 67, 69, 70, 71, 72, 76, 77, 79, 80, 87, 89, 91, 92, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 116, 117, 123, 124, 125, 126, 131, 138, 141, 144, 146, 148, 149, 152, 153, 154, 156, 157, 158, 160, 162, 164, 166, 167, 169, 171, 174, 175, 177, 178, 179, 186, 187, 189, 193, 194, 196, 197, 198, 214, 222, 223, 226, 228, 231, 232, 233, 238, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 271, 273, 274, 276, 281, 284, 290, 294, 295, 296, 299, 300, 305, 310, 311, 314, 315, 316, 319, 320, 321, 322, 323, 326, 327, 328, 330, 331, 332, 337, 338, 339, 340, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 377, 379, 380, 382, 384, 385, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 402, 404, 406, 409, 416, 418, 422, 433, 435, 436], "do": [3, 6, 9, 22, 24, 25, 30, 31, 34, 40, 42, 49, 50, 51, 57, 61, 64, 65, 66, 67, 68, 70, 75, 77, 79, 80, 94, 98, 100, 101, 108, 111, 116, 135, 139, 144, 148, 152, 153, 157, 158, 159, 160, 162, 164, 166, 169, 174, 175, 177, 178, 179, 185, 195, 219, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 290, 294, 296, 299, 311, 326, 327, 328, 329, 330, 331, 332, 337, 338, 339, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 404, 418, 422, 435], "defin": [3, 6, 9, 21, 23, 29, 30, 32, 33, 36, 37, 42, 47, 49, 54, 58, 61, 64, 66, 67, 69, 71, 72, 76, 77, 80, 81, 91, 98, 101, 114, 123, 124, 145, 146, 147, 148, 152, 154, 156, 157, 158, 159, 164, 167, 168, 169, 171, 172, 175, 178, 179, 195, 199, 213, 225, 227, 249, 250, 251, 252, 254, 255, 268, 272, 276, 281, 283, 288, 314, 322, 378, 387, 406, 407, 408, 409, 410, 412, 413, 429], "vt": [3, 18, 94], "mask_filenam": [3, 30, 32, 35, 39, 98, 102, 116, 159], "mask_vt": [3, 15, 16, 18, 30, 32, 94, 98, 116, 159, 177, 217], "anatom": [3, 6, 9, 11, 15, 17, 18, 22, 23, 25, 30, 32, 36, 94, 102, 114, 117, 134, 152, 157, 164, 172, 179, 195, 197, 199, 207, 214, 217, 218, 221, 223, 228, 322, 377, 390, 392, 399, 435], "background": [3, 6, 8, 14, 15, 16, 22, 23, 27, 30, 31, 40, 44, 49, 56, 69, 91, 92, 94, 104, 113, 116, 124, 129, 131, 133, 134, 135, 136, 138, 141, 144, 150, 152, 167, 172, 178, 179, 195, 201, 202, 204, 205, 208, 209, 221, 227, 249, 250, 251, 252, 256, 257, 281, 294, 326, 328, 329, 331, 334, 337, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 374, 377, 379, 382, 384, 385, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 402, 404, 407, 409, 410, 416, 435, 437], "plot_roi": [3, 10, 17, 19, 25, 49, 66, 86, 89, 92, 94, 137, 144, 145, 150, 152, 154, 178, 179, 390, 435], "bg_img": [3, 6, 16, 17, 29, 30, 33, 36, 40, 42, 64, 67, 70, 71, 75, 88, 93, 116, 135, 141, 147, 152, 159, 179, 281, 294, 385, 390, 391, 392, 399, 416], "anat": [3, 6, 15, 16, 17, 18, 25, 29, 30, 32, 42, 43, 62, 94, 116, 159, 177, 179, 209, 217, 221, 223, 235, 236, 319], "cmap": [3, 9, 11, 12, 19, 20, 22, 23, 31, 35, 36, 38, 40, 41, 42, 44, 50, 53, 76, 77, 79, 80, 81, 86, 102, 105, 106, 111, 125, 139, 141, 150, 152, 157, 221, 222, 223, 377, 378, 382, 383, 384, 387, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 402, 435], "pair": [3, 74, 82, 86, 98, 113, 117, 159, 160, 171, 223, 226, 228, 249, 250, 251, 252, 254, 255, 294, 320, 321, 322, 323, 354, 381, 384, 389, 393, 395, 396, 397, 405, 422], "convert": [3, 6, 10, 11, 20, 36, 42, 48, 49, 50, 54, 66, 79, 86, 94, 98, 107, 108, 116, 141, 146, 148, 150, 152, 157, 159, 164, 172, 178, 279, 300, 301, 309, 326, 327, 328, 329, 330, 331, 332], "appli": [3, 29, 31, 32, 42, 44, 50, 56, 61, 64, 66, 69, 79, 80, 89, 92, 94, 98, 100, 101, 103, 104, 115, 117, 123, 125, 129, 131, 135, 138, 141, 146, 147, 148, 152, 153, 154, 155, 158, 160, 161, 162, 164, 168, 171, 172, 176, 185, 193, 228, 248, 249, 250, 251, 252, 256, 257, 272, 281, 294, 296, 297, 298, 299, 310, 316, 318, 319, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 341, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 374, 377, 387, 390, 391, 392, 393, 395, 396, 399, 400, 402, 403, 404, 405, 406, 408, 409, 410, 415, 417, 418, 422, 427, 437], "instanc": [3, 4, 6, 15, 31, 49, 51, 66, 68, 86, 135, 141, 148, 152, 153, 154, 156, 158, 159, 167, 168, 169, 171, 172, 174, 177, 178, 185, 186, 187, 192, 249, 250, 251, 252, 253, 254, 255, 256, 257, 268, 269, 271, 272, 273, 274, 277, 278, 281, 288, 290, 294, 296, 300, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 389, 393, 394, 395, 396, 403, 404, 405, 406, 436], "csv": [3, 6, 23, 29, 40, 47, 55, 116, 128, 152, 154, 159, 193, 194, 224, 232, 256, 257, 281, 299, 325, 326, 327, 328, 329, 330, 331, 332, 404, 406, 418], "file": [3, 6, 7, 9, 14, 19, 20, 22, 23, 27, 30, 32, 33, 34, 35, 36, 40, 45, 47, 48, 49, 51, 53, 55, 59, 60, 62, 64, 66, 73, 82, 86, 91, 92, 94, 96, 98, 100, 101, 103, 107, 108, 109, 112, 113, 114, 116, 117, 125, 126, 128, 133, 137, 138, 139, 140, 141, 144, 148, 149, 150, 152, 153, 154, 156, 157, 159, 167, 168, 175, 176, 179, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 247, 249, 250, 256, 257, 258, 259, 260, 281, 284, 294, 299, 309, 310, 312, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 390, 391, 392, 393, 394, 395, 396, 398, 400, 401, 402, 404, 406, 414, 416, 418, 420, 421, 422, 436, 437], "separ": [3, 34, 48, 50, 64, 66, 67, 83, 88, 94, 96, 100, 113, 131, 148, 150, 152, 157, 158, 160, 164, 167, 169, 172, 175, 177, 178, 192, 209, 311, 322, 343, 345, 346, 373, 389, 391, 397, 406, 407, 408], "space": [3, 6, 15, 22, 23, 28, 40, 45, 48, 51, 55, 60, 62, 66, 69, 73, 84, 99, 101, 108, 113, 116, 117, 124, 131, 133, 135, 138, 141, 146, 152, 154, 167, 168, 169, 171, 172, 179, 196, 198, 203, 205, 207, 209, 211, 212, 213, 228, 230, 232, 236, 238, 255, 256, 257, 281, 284, 288, 299, 300, 301, 311, 314, 325, 328, 331, 332, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 374, 375, 377, 378, 379, 382, 384, 385, 388, 390, 391, 392, 397, 398, 399, 401, 403, 405, 418, 422], "panda": [3, 6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 94, 98, 100, 102, 116, 117, 123, 135, 138, 144, 146, 148, 149, 152, 159, 185, 193, 199, 200, 211, 212, 213, 221, 222, 223, 232, 256, 257, 281, 282, 284, 288, 294, 295, 296, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 380, 381, 383, 403, 404, 405, 406, 415, 418], "arrai": [3, 5, 9, 10, 11, 20, 22, 23, 26, 33, 34, 36, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 55, 56, 58, 61, 68, 70, 79, 84, 86, 87, 89, 94, 98, 102, 105, 106, 108, 115, 133, 135, 141, 144, 147, 148, 150, 152, 153, 156, 157, 159, 162, 166, 176, 177, 179, 185, 186, 187, 189, 191, 192, 199, 200, 205, 211, 212, 213, 225, 226, 238, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 268, 269, 271, 272, 273, 274, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 299, 304, 306, 314, 315, 318, 321, 325, 326, 327, 328, 329, 330, 331, 332, 333, 337, 339, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 377, 379, 380, 382, 384, 388, 392, 393, 394, 395, 396, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 416, 418, 419, 420, 421, 422, 428, 437], "pd": [3, 6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 63, 64, 65, 66, 67, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 94, 98, 102, 116, 177, 218], "read_csv": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 94, 98, 102, 116, 177], "session_target": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 94, 98, 102, 116, 177, 217], "delimit": [3, 40, 41, 98, 100, 116, 177], "denot": [3, 6, 15, 138, 152, 169, 177, 178, 179, 322, 323, 353, 375, 391, 406, 407, 408, 409], "experiment": [3, 63, 64, 65, 66, 69, 71, 80, 94, 111, 123, 125, 144, 145, 148, 152, 159, 166, 169, 178, 200, 281, 284, 288, 393, 395, 396], "condit": [3, 6, 29, 30, 31, 33, 35, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 80, 94, 98, 101, 102, 108, 116, 145, 148, 150, 152, 153, 159, 166, 172, 175, 178, 200, 225, 281, 283, 288, 294, 296, 380], "type": [3, 6, 15, 18, 21, 29, 34, 42, 49, 63, 65, 66, 69, 72, 88, 94, 100, 102, 111, 117, 123, 125, 127, 130, 132, 135, 138, 141, 147, 148, 149, 150, 152, 161, 164, 167, 168, 169, 172, 177, 193, 197, 201, 202, 208, 225, 253, 267, 269, 277, 281, 294, 299, 303, 304, 306, 308, 309, 311, 312, 316, 317, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 338, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 390, 391, 404, 406, 407, 408, 415, 416, 417, 418], "try": [3, 4, 9, 21, 36, 39, 40, 49, 52, 53, 56, 57, 58, 62, 63, 65, 66, 75, 77, 78, 89, 98, 103, 117, 150, 152, 153, 154, 159, 160, 165, 166, 167, 175, 179, 436], "As": [3, 15, 34, 36, 44, 49, 52, 54, 66, 79, 81, 92, 94, 95, 98, 101, 103, 116, 123, 141, 152, 153, 154, 156, 158, 159, 160, 164, 166, 167, 169, 171, 177, 284, 322, 323], "target": [3, 29, 33, 40, 84, 89, 94, 98, 100, 124, 138, 152, 159, 160, 164, 166, 167, 172, 175, 176, 217, 227, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 296, 314, 315, 325, 328, 331, 335, 338, 342, 403, 405, 406, 437], "experi": [3, 6, 29, 33, 34, 41, 66, 70, 94, 114, 115, 163, 168, 169, 172, 437], "consequ": [3, 15, 86, 179], "quit": [3, 6, 66, 157, 166, 223], "big": [3, 41, 49, 62, 138, 152, 156, 159, 167, 177, 179, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422], "Not": [3, 64, 66, 67, 201, 202, 346, 403, 405], "ha": [3, 6, 10, 11, 29, 30, 32, 33, 34, 35, 36, 42, 47, 49, 51, 52, 54, 58, 66, 68, 70, 72, 75, 79, 81, 86, 89, 91, 94, 98, 100, 104, 117, 123, 124, 125, 126, 128, 132, 135, 138, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 158, 160, 161, 164, 166, 167, 169, 171, 175, 179, 185, 186, 187, 195, 196, 197, 199, 204, 208, 228, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 288, 294, 296, 305, 308, 309, 311, 314, 315, 319, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 342, 344, 397, 403, 404, 405, 406, 410, 417, 419, 422, 435], "interest": [3, 6, 14, 15, 16, 23, 35, 42, 49, 51, 55, 68, 70, 71, 83, 96, 98, 99, 100, 101, 104, 107, 113, 117, 126, 144, 152, 153, 159, 161, 162, 164, 166, 167, 168, 169, 172, 174, 178, 179, 194, 200, 203, 205, 214, 217, 218, 221, 222, 223, 226, 227, 232, 235, 236, 237, 238, 271, 273, 274, 304, 309, 311, 312, 316, 319, 325, 329, 382, 391, 392, 394, 397, 406, 437], "u": [3, 4, 15, 24, 40, 55, 58, 63, 66, 77, 79, 89, 94, 111, 114, 159, 160, 162, 167, 211, 213, 255, 273, 274, 436], "so": [3, 6, 10, 11, 14, 22, 33, 36, 40, 43, 49, 52, 64, 66, 67, 69, 70, 72, 76, 79, 80, 81, 86, 89, 94, 100, 101, 103, 108, 117, 125, 146, 152, 164, 165, 166, 167, 169, 175, 177, 179, 185, 186, 187, 195, 201, 202, 209, 228, 233, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 284, 294, 296, 319, 320, 325, 326, 327, 328, 329, 330, 331, 332, 342, 387, 393, 395, 396, 400, 402, 403, 404, 405, 406, 422], "keep": [3, 31, 33, 34, 36, 50, 51, 54, 58, 66, 69, 70, 84, 86, 94, 98, 102, 103, 117, 121, 124, 138, 145, 152, 157, 159, 160, 161, 164, 165, 167, 228, 232, 248, 254, 255, 256, 299, 305, 318, 320, 334, 335, 336, 337, 338, 339, 340, 406, 407, 418, 419], "signal": [3, 6, 28, 43, 44, 45, 46, 48, 49, 50, 52, 55, 57, 59, 61, 64, 66, 67, 68, 70, 71, 78, 83, 86, 94, 96, 100, 107, 113, 114, 122, 123, 124, 125, 137, 139, 141, 145, 146, 150, 152, 153, 155, 156, 157, 158, 159, 161, 164, 166, 169, 172, 176, 178, 185, 186, 187, 189, 193, 200, 201, 203, 211, 212, 214, 217, 225, 249, 250, 251, 252, 253, 254, 255, 256, 257, 263, 264, 281, 294, 296, 299, 305, 306, 311, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 342, 374, 378, 379, 388, 389, 397, 398, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 416, 437], "creat": [3, 6, 9, 10, 11, 17, 19, 20, 21, 22, 23, 26, 33, 36, 39, 40, 41, 42, 43, 47, 48, 49, 52, 55, 62, 64, 65, 66, 67, 69, 71, 72, 75, 79, 84, 86, 94, 98, 100, 101, 107, 108, 115, 116, 123, 130, 138, 150, 152, 153, 154, 158, 159, 160, 162, 167, 168, 169, 172, 173, 175, 176, 177, 179, 228, 230, 248, 256, 257, 281, 284, 294, 295, 306, 312, 321, 344, 353, 354, 355, 358, 377, 378, 379, 380, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 412, 413, 414, 415, 435, 436, 437], "sampl": [3, 8, 23, 27, 31, 34, 36, 40, 49, 58, 63, 66, 69, 71, 74, 75, 77, 78, 81, 82, 84, 94, 101, 105, 108, 111, 113, 114, 116, 144, 146, 147, 152, 154, 159, 164, 166, 168, 169, 171, 179, 185, 186, 187, 189, 214, 223, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 282, 283, 285, 286, 287, 288, 291, 292, 293, 294, 296, 299, 303, 304, 310, 326, 327, 328, 329, 330, 331, 332, 341, 342, 354, 369, 378, 381, 384, 387, 396, 397, 403, 404, 405, 406, 417, 418, 419, 422, 433], "belong": [3, 30, 32, 148, 152, 159, 172, 179], "classif": [3, 30, 31, 32, 33, 35, 43, 46, 49, 59, 98, 100, 113, 114, 116, 144, 152, 153, 158, 159, 163, 164, 165, 172, 173, 174, 185, 193, 203, 214, 249, 250, 251, 252, 254, 323, 325, 330, 379, 389, 397, 436, 437], "becom": [3, 66, 117, 160, 161, 162, 169], "smaller": [3, 6, 32, 81, 128, 138, 146, 150, 152, 156, 164, 165, 166, 169, 172, 177, 201, 202, 255, 297, 310, 318, 403], "e": [3, 6, 15, 22, 24, 29, 39, 40, 44, 47, 48, 56, 66, 76, 86, 88, 94, 100, 102, 103, 105, 114, 116, 117, 124, 126, 144, 146, 147, 150, 152, 154, 157, 159, 162, 164, 165, 166, 167, 168, 169, 171, 172, 174, 178, 179, 185, 186, 187, 189, 198, 199, 206, 211, 212, 213, 215, 225, 228, 230, 233, 249, 250, 251, 252, 253, 254, 255, 256, 257, 271, 273, 274, 281, 288, 294, 296, 297, 298, 299, 300, 301, 303, 318, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 379, 387, 390, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 410, 412, 418, 422, 435], "shorter": [3, 66, 166, 322], "condition_mask": [3, 29, 30, 31, 34, 36, 37, 98, 102, 116], "isin": [3, 29, 31, 34, 36, 37, 98, 102, 116, 117, 228], "larg": [3, 30, 31, 36, 39, 41, 43, 48, 49, 54, 56, 65, 70, 71, 72, 92, 114, 117, 139, 152, 156, 159, 160, 161, 162, 164, 166, 167, 169, 172, 173, 174, 177, 179, 223, 228, 230, 281, 283, 288, 327, 330, 334, 335, 336, 338, 339, 373, 404], "split": [3, 30, 31, 32, 34, 36, 39, 40, 41, 42, 43, 44, 49, 51, 86, 94, 99, 100, 144, 152, 157, 159, 161, 166, 167, 172, 178, 201, 202, 249, 250, 251, 252], "fmri_niimg": [3, 30, 34, 98, 159], "numpi": [3, 5, 6, 9, 10, 11, 12, 14, 16, 20, 22, 23, 24, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 75, 77, 79, 80, 84, 86, 87, 89, 94, 98, 100, 102, 103, 104, 105, 106, 108, 111, 121, 123, 125, 129, 133, 135, 138, 141, 144, 146, 148, 152, 156, 157, 159, 166, 167, 175, 177, 178, 185, 186, 187, 188, 189, 190, 191, 192, 199, 200, 205, 207, 211, 212, 213, 214, 249, 250, 251, 252, 254, 255, 256, 257, 259, 263, 264, 271, 273, 274, 277, 281, 283, 288, 290, 294, 296, 299, 300, 301, 304, 305, 306, 310, 311, 312, 314, 316, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 339, 341, 342, 346, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 374, 375, 377, 379, 380, 382, 384, 386, 388, 389, 392, 393, 394, 395, 396, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 417, 418, 419, 420, 421, 422], "valu": [3, 4, 6, 9, 14, 15, 17, 23, 24, 30, 31, 33, 40, 42, 44, 47, 52, 54, 55, 58, 61, 66, 67, 69, 70, 72, 77, 79, 88, 89, 90, 91, 92, 94, 98, 100, 101, 102, 103, 105, 106, 107, 108, 111, 117, 121, 123, 124, 126, 130, 133, 134, 138, 141, 145, 146, 148, 152, 153, 156, 157, 160, 161, 163, 164, 165, 167, 169, 171, 172, 174, 177, 179, 185, 186, 187, 189, 191, 193, 195, 197, 198, 199, 201, 202, 204, 205, 206, 208, 209, 219, 223, 228, 232, 234, 237, 240, 241, 244, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 268, 269, 271, 272, 273, 274, 277, 281, 282, 284, 290, 294, 296, 297, 298, 299, 300, 303, 305, 314, 315, 316, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 374, 376, 377, 378, 379, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 399, 400, 402, 403, 404, 405, 406, 408, 409, 410, 414, 415, 416, 417, 418, 419, 422, 435], "classifi": [3, 28, 32, 33, 36, 41, 45, 51, 98, 99, 113, 141, 144, 145, 152, 159, 160, 161, 162, 163, 172, 173, 174, 217, 249, 251, 252, 253, 254, 304, 306, 311, 392, 397, 437], "linear": [3, 6, 29, 33, 34, 35, 37, 44, 66, 69, 98, 102, 114, 135, 152, 159, 163, 168, 169, 170, 172, 173, 178, 179, 189, 228, 249, 250, 251, 252, 254, 255, 256, 257, 271, 273, 274, 281, 294, 299, 313, 314, 315, 323, 342, 386, 418, 422, 429, 436, 437], "kernel": [3, 29, 33, 34, 35, 44, 55, 94, 98, 159, 250, 252, 255, 285, 286, 287, 291, 292, 293], "svc": [3, 29, 30, 31, 32, 33, 34, 35, 116, 141, 152, 159, 160, 162, 249, 251, 253], "standard": [3, 6, 9, 11, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 62, 66, 69, 70, 72, 75, 89, 91, 92, 94, 98, 99, 101, 104, 105, 106, 108, 111, 114, 116, 124, 125, 138, 141, 145, 147, 148, 152, 154, 157, 159, 160, 164, 167, 168, 169, 172, 177, 178, 179, 185, 207, 232, 249, 250, 251, 252, 254, 255, 256, 257, 273, 274, 281, 283, 284, 288, 299, 319, 322, 326, 327, 328, 329, 330, 331, 332, 378, 404, 406, 418, 436], "zscore_sampl": [3, 11, 29, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 91, 92, 98, 99, 100, 104, 111, 124, 152, 157, 159, 326, 327, 328, 329, 330, 331, 332, 418], "fit": [3, 6, 28, 30, 32, 35, 36, 37, 40, 41, 42, 44, 45, 48, 49, 50, 51, 52, 53, 54, 57, 58, 60, 61, 65, 66, 69, 71, 73, 75, 76, 77, 79, 80, 81, 87, 89, 91, 92, 94, 98, 99, 100, 103, 111, 113, 116, 125, 138, 146, 148, 150, 152, 153, 155, 156, 157, 159, 160, 162, 164, 166, 169, 170, 172, 173, 174, 179, 185, 186, 187, 209, 216, 217, 249, 250, 251, 252, 253, 254, 255, 256, 257, 263, 264, 268, 271, 272, 273, 274, 278, 281, 284, 290, 294, 296, 306, 311, 325, 326, 327, 328, 329, 330, 331, 332, 338, 342, 355, 358, 380, 392, 397, 403, 404, 405, 406, 409, 414, 416, 437], "train": [3, 31, 32, 34, 39, 40, 41, 42, 43, 44, 51, 98, 99, 144, 152, 159, 160, 161, 164, 166, 172, 174, 179, 186, 249, 250, 251, 252, 254, 255, 403, 405, 411], "without": [3, 6, 14, 23, 48, 50, 66, 78, 81, 84, 94, 110, 111, 113, 117, 124, 125, 132, 141, 150, 152, 154, 157, 163, 165, 166, 172, 177, 179, 198, 297, 303, 323, 325, 328, 331, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 378, 385, 390, 435, 437], "both": [3, 9, 15, 24, 39, 47, 49, 51, 58, 69, 79, 80, 89, 94, 100, 105, 108, 117, 125, 141, 148, 152, 153, 156, 158, 164, 165, 167, 168, 172, 177, 178, 179, 185, 192, 204, 214, 262, 263, 264, 267, 281, 283, 288, 296, 297, 299, 318, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379, 389, 408, 418, 422, 436], "class": [3, 11, 28, 32, 42, 43, 45, 49, 51, 54, 56, 91, 94, 98, 99, 113, 122, 123, 124, 126, 128, 134, 135, 136, 139, 141, 144, 146, 147, 148, 150, 152, 158, 159, 163, 166, 167, 168, 171, 179, 180, 182, 183, 184, 185, 186, 187, 217, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 281, 294, 300, 312, 322, 325, 326, 327, 328, 329, 330, 331, 332, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 389, 397, 403, 404, 405, 406, 407, 408, 414, 423, 425, 427, 430, 431, 432, 437], "number": [3, 6, 29, 31, 33, 34, 39, 42, 43, 48, 49, 50, 53, 54, 55, 58, 65, 66, 69, 72, 77, 79, 86, 89, 92, 94, 98, 100, 103, 104, 105, 117, 126, 138, 141, 144, 145, 146, 148, 152, 153, 156, 157, 159, 160, 161, 164, 167, 169, 172, 174, 175, 179, 185, 186, 187, 189, 193, 194, 197, 200, 201, 202, 205, 206, 208, 214, 217, 219, 222, 223, 226, 228, 232, 238, 241, 244, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 263, 264, 272, 277, 281, 290, 294, 296, 297, 299, 301, 303, 305, 311, 318, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 337, 338, 339, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 377, 378, 379, 380, 382, 384, 385, 387, 388, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 415, 416, 417, 418, 419, 435], "problem": [3, 6, 31, 33, 39, 43, 48, 92, 94, 114, 159, 160, 161, 164, 165, 166, 167, 169, 172, 174, 175, 189, 254, 255, 257, 268, 271, 272, 273, 274, 296, 342], "balanc": [3, 49, 148, 152, 156], "perform": [3, 30, 33, 34, 43, 44, 48, 51, 62, 66, 71, 79, 80, 89, 91, 92, 94, 95, 99, 100, 101, 102, 105, 106, 111, 116, 117, 124, 144, 145, 146, 148, 152, 153, 158, 160, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 177, 178, 179, 189, 219, 232, 241, 244, 249, 250, 251, 252, 254, 255, 256, 257, 263, 264, 281, 283, 290, 294, 296, 313, 314, 315, 316, 317, 318, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 338, 339, 342, 353, 355, 358, 360, 362, 364, 366, 368, 370, 372, 377, 379, 382, 384, 385, 388, 390, 391, 392, 399, 403, 404, 405, 406, 409, 411, 416, 417, 418, 422, 437], "done": [3, 6, 9, 10, 11, 17, 19, 20, 21, 22, 23, 26, 34, 38, 39, 40, 41, 43, 47, 48, 49, 51, 52, 53, 57, 58, 62, 64, 65, 66, 67, 71, 76, 77, 80, 81, 94, 99, 101, 103, 116, 117, 148, 150, 152, 153, 154, 156, 159, 160, 162, 164, 166, 169, 175, 178, 186, 187, 249, 250, 251, 252, 254, 255, 256, 257, 281, 294, 299, 300, 308, 318, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 404, 405, 406, 418], "sum": [3, 41, 42, 49, 58, 65, 68, 77, 79, 84, 101, 102, 105, 106, 107, 141, 152, 166, 254, 255, 268, 272, 273, 305, 326, 329, 409, 419], "float": [3, 40, 41, 43, 68, 75, 141, 144, 152, 186, 187, 189, 193, 219, 240, 241, 244, 249, 250, 251, 252, 253, 254, 255, 256, 257, 268, 269, 271, 272, 273, 274, 276, 280, 281, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 296, 297, 298, 299, 303, 305, 314, 315, 318, 322, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 376, 377, 378, 379, 382, 384, 385, 387, 388, 390, 391, 392, 393, 395, 396, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 411, 414, 415, 416, 417, 418, 419, 422], "len": [3, 12, 22, 30, 32, 33, 34, 47, 48, 51, 62, 63, 64, 65, 66, 68, 69, 76, 79, 91, 94, 98, 103, 111, 117, 189, 249, 250, 251, 252, 254, 255, 271, 273, 274, 278, 294, 311, 314, 334, 336, 337, 339, 404], "meaningless": [3, 159, 169, 297], "why": [3, 94, 166, 179], "proper": [3, 34, 148, 152, 166, 204, 205, 436], "error": [3, 6, 42, 43, 66, 76, 79, 81, 84, 94, 103, 123, 125, 128, 135, 138, 141, 150, 152, 154, 159, 160, 164, 167, 169, 172, 185, 186, 187, 249, 250, 251, 252, 253, 254, 255, 256, 257, 271, 273, 281, 288, 294, 296, 297, 299, 300, 321, 325, 326, 327, 328, 329, 330, 331, 332, 338, 403, 404, 405, 406, 436], "rate": [3, 6, 66, 81, 128, 152, 166, 169, 172, 179, 276, 296], "test": [3, 29, 31, 34, 36, 40, 42, 43, 44, 51, 53, 66, 71, 74, 77, 78, 82, 99, 101, 102, 105, 106, 111, 113, 114, 123, 125, 137, 145, 148, 152, 159, 161, 162, 164, 165, 166, 169, 170, 171, 172, 175, 178, 187, 193, 194, 195, 196, 197, 198, 199, 203, 206, 207, 209, 217, 218, 221, 222, 223, 226, 227, 232, 238, 249, 250, 251, 252, 253, 254, 255, 269, 294, 296, 297, 304, 310, 314, 315, 318, 321, 342, 354, 355, 369, 381, 384, 392, 397, 399, 429, 436], "30": [3, 6, 11, 14, 23, 27, 32, 33, 36, 39, 40, 42, 43, 44, 48, 51, 57, 62, 63, 68, 71, 91, 99, 101, 102, 103, 105, 107, 109, 114, 128, 138, 152, 165, 194, 251, 252, 271, 273, 274, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 414], "last": [3, 6, 33, 35, 40, 55, 72, 140, 152, 169, 174, 175, 191, 192, 299, 306, 320, 435, 436], "point": [3, 4, 8, 15, 22, 23, 27, 54, 55, 84, 86, 91, 94, 113, 116, 138, 141, 150, 152, 157, 159, 166, 169, 174, 175, 176, 177, 187, 249, 250, 251, 252, 281, 314, 315, 325, 328, 331, 336, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 379, 382, 385, 388, 390, 391, 392, 396, 397, 399, 409, 410, 416, 422, 437], "dure": [3, 6, 55, 56, 65, 94, 100, 101, 114, 116, 138, 145, 152, 159, 160, 166, 167, 169, 172, 179, 187, 189, 206, 294, 296, 334, 335, 336, 338, 339, 387, 403], "fmri_niimgs_train": 3, "fmri_niimgs_test": 3, "conditions_train": 3, "conditions_test": 3, "hasn": [3, 166], "t": [3, 5, 6, 9, 16, 22, 24, 33, 37, 41, 55, 56, 58, 62, 66, 67, 68, 69, 71, 72, 75, 76, 77, 79, 80, 83, 90, 92, 93, 94, 96, 99, 100, 102, 103, 104, 105, 107, 108, 113, 114, 117, 144, 152, 164, 165, 166, 167, 169, 170, 171, 172, 174, 175, 177, 178, 184, 195, 196, 205, 206, 208, 209, 215, 223, 228, 229, 230, 233, 254, 255, 269, 271, 272, 273, 274, 275, 277, 281, 294, 296, 318, 321, 322, 323, 336, 342, 387, 390, 392, 397, 408, 416, 419, 422, 435], "examin": [3, 114, 172, 215, 233], "well": [3, 6, 15, 44, 48, 51, 58, 66, 68, 70, 79, 89, 100, 131, 138, 145, 147, 152, 153, 154, 156, 157, 159, 160, 162, 165, 167, 169, 172, 174, 185, 186, 187, 200, 206, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 300, 314, 323, 325, 326, 327, 328, 329, 330, 331, 332, 403, 404, 405, 406], "predicton_accuraci": 3, "3f": [3, 6, 34, 44, 48, 55, 98], "set": [3, 6, 14, 15, 16, 21, 22, 28, 29, 30, 31, 33, 36, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 65, 66, 67, 70, 79, 80, 81, 89, 94, 95, 98, 99, 101, 113, 114, 117, 123, 124, 125, 131, 135, 141, 144, 145, 147, 148, 150, 152, 153, 154, 157, 159, 161, 163, 166, 168, 169, 170, 171, 172, 173, 177, 179, 185, 186, 187, 193, 199, 200, 211, 212, 213, 217, 221, 222, 223, 228, 230, 232, 249, 250, 251, 252, 253, 254, 255, 256, 257, 271, 273, 274, 280, 281, 283, 288, 294, 295, 297, 299, 306, 318, 319, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 378, 379, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 399, 400, 402, 403, 404, 405, 406, 408, 411, 416, 418, 422, 435, 437], "repetit": [3, 6, 33, 63, 64, 67, 71, 137, 152, 169, 172, 214, 219, 241, 244, 249, 250, 251, 252, 254, 255, 281, 284, 299, 326, 327, 328, 329, 330, 331, 332, 378, 404, 406, 418], "strategi": [3, 24, 28, 45, 48, 49, 66, 88, 89, 91, 92, 99, 111, 113, 114, 124, 141, 145, 146, 148, 152, 157, 160, 163, 164, 166, 169, 176, 187, 217, 249, 250, 251, 252, 253, 256, 257, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 338, 378, 389, 390, 397, 404, 409, 418, 422, 437], "scikit": [3, 34, 49, 94, 97, 102, 104, 109, 111, 113, 115, 121, 123, 126, 131, 133, 134, 135, 138, 141, 146, 148, 152, 153, 156, 159, 160, 161, 163, 164, 166, 167, 173, 174, 175, 217, 249, 250, 251, 252, 253, 263, 264, 306, 325, 326, 327, 328, 329, 330, 331, 332, 392, 404, 436, 437], "sklearn": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 57, 58, 92, 94, 98, 99, 102, 103, 104, 105, 106, 111, 138, 141, 145, 146, 152, 153, 159, 160, 162, 166, 179, 185, 186, 187, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 217, 218, 224, 228, 230, 235, 236, 237, 238, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 290, 294, 325, 326, 327, 328, 329, 330, 331, 332, 403, 404, 405, 406], "model_select": [3, 29, 30, 32, 33, 34, 35, 36, 37, 40, 42, 43, 44, 51, 98, 99, 138, 152, 159, 162, 249, 250, 251, 252], "cv": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 44, 51, 58, 98, 99, 111, 135, 152, 159, 164, 187, 249, 250, 251, 252, 253, 254, 255], "n_split": [3, 34, 36, 37, 40, 44, 51, 99], "fold": [3, 29, 31, 34, 36, 40, 51, 69, 94, 98, 99, 159, 160, 162, 164, 166, 179, 187, 249, 250, 251, 252, 253, 254, 255], "enumer": [3, 12, 22, 34, 40, 47, 48, 51, 57, 64, 65, 66, 68, 69, 71, 79, 94, 100, 101, 102, 103, 105], "01d": 3, "return": [3, 4, 9, 14, 15, 31, 33, 39, 40, 41, 44, 47, 56, 64, 66, 68, 80, 84, 94, 100, 107, 111, 116, 117, 124, 125, 130, 134, 141, 144, 146, 148, 149, 150, 152, 154, 159, 161, 164, 166, 167, 172, 174, 175, 177, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 380, 381, 383, 386, 387, 389, 393, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 430, 435], "paramet": [3, 6, 14, 15, 21, 23, 24, 28, 29, 32, 42, 44, 45, 49, 51, 54, 56, 60, 71, 73, 89, 91, 92, 94, 95, 104, 105, 106, 108, 113, 116, 117, 123, 124, 125, 132, 135, 138, 139, 141, 145, 146, 147, 148, 149, 150, 152, 154, 156, 157, 158, 159, 161, 163, 164, 165, 166, 167, 168, 169, 172, 174, 176, 177, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 263, 264, 268, 269, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 435, 437], "n_fold": [3, 187, 249, 250, 251, 252, 254, 255], "pipelin": [3, 35, 37, 39, 40, 41, 42, 44, 75, 98, 99, 111, 114, 144, 152, 158, 159, 160, 163, 164, 165, 172, 178, 185, 186, 187, 193, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 299, 325, 326, 327, 328, 329, 330, 331, 332, 403, 404, 405, 406, 418, 437], "found": [3, 6, 49, 52, 55, 81, 100, 101, 103, 107, 108, 116, 117, 138, 152, 153, 156, 157, 158, 159, 160, 161, 162, 164, 166, 167, 174, 175, 178, 179, 228, 230, 232, 299, 301, 319, 333, 336, 377, 391, 392, 418, 435], "websit": [3, 42, 75, 126, 138, 152, 167, 193, 206, 227], "best": [3, 34, 42, 43, 44, 95, 144, 150, 152, 159, 160, 161, 164, 166, 167, 169, 178, 249, 250, 251, 252, 254, 255, 321, 355, 358, 403, 404], "per": [3, 6, 30, 31, 33, 40, 48, 57, 66, 78, 94, 101, 102, 108, 146, 152, 153, 159, 167, 179, 187, 207, 226, 249, 250, 251, 252, 254, 255, 257, 269, 278, 281, 282, 284, 288, 295, 319, 322, 326, 327, 328, 330, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 380, 417], "cv_params_": [3, 34, 124, 125, 152, 249, 250, 251, 252], "speed": [3, 36, 37, 47, 77, 89, 98, 105, 114, 125, 152, 156, 162, 165, 166, 178, 179, 342, 403, 422], "cpu": [3, 42, 102, 105, 162, 187, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 290, 294, 296, 311, 326, 327, 328, 337, 338, 339, 342, 404], "n_job": [3, 33, 36, 37, 42, 43, 44, 47, 48, 77, 79, 98, 99, 102, 105, 162, 187, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 284, 290, 294, 296, 311, 326, 327, 328, 337, 338, 339, 342, 404], "respect": [3, 62, 108, 141, 150, 152, 153, 167, 169, 172, 175, 179, 211, 213, 249, 250, 251, 252, 281, 283, 284, 288, 294, 303, 314, 315, 406, 408], "structur": [3, 6, 23, 39, 41, 43, 46, 49, 51, 58, 59, 63, 66, 113, 114, 153, 159, 161, 162, 163, 164, 166, 172, 177, 187, 195, 197, 206, 209, 217, 218, 223, 232, 254, 255, 268, 271, 319, 334, 335, 336, 338, 339, 389, 397, 400, 405, 411, 437], "acquisit": [3, 6, 30, 32, 63, 66, 71, 101, 114, 164, 169, 172, 223, 288, 378], "select": [3, 6, 14, 15, 19, 20, 23, 29, 32, 33, 34, 35, 41, 42, 55, 56, 66, 76, 89, 94, 100, 105, 114, 115, 125, 131, 132, 133, 135, 143, 144, 146, 148, 152, 154, 157, 160, 161, 162, 163, 164, 165, 166, 178, 179, 186, 187, 197, 214, 215, 225, 228, 230, 232, 234, 248, 249, 250, 251, 252, 254, 255, 294, 296, 306, 318, 322, 323, 384, 390, 392, 393, 395, 396, 403, 404, 406, 422, 435, 437], "session_label": [3, 29, 30, 32, 33, 98, 159], "chunk": [3, 29, 30, 31, 32, 33, 34, 35, 36, 37, 98, 102], "acquir": [3, 6, 66, 68, 116, 169, 172, 174], "nois": [3, 6, 34, 44, 56, 64, 67, 69, 70, 94, 95, 100, 103, 108, 114, 123, 146, 152, 154, 160, 162, 166, 169, 172, 179, 271, 273, 274, 288, 322, 323, 378, 390, 391, 419], "autocorrel": [3, 69, 108], "henc": [3, 56, 58, 72, 75, 86, 144, 152, 164, 167, 169], "across": [3, 6, 15, 16, 47, 50, 51, 56, 64, 65, 66, 80, 94, 98, 99, 100, 103, 114, 124, 141, 147, 152, 153, 154, 157, 158, 159, 160, 162, 164, 169, 172, 185, 203, 237, 249, 250, 251, 252, 254, 255, 256, 257, 317, 333, 378, 404, 406, 422, 435], "pass": [3, 4, 9, 10, 11, 24, 29, 36, 42, 43, 49, 51, 54, 55, 56, 58, 79, 86, 89, 94, 102, 105, 106, 116, 117, 123, 125, 134, 136, 138, 141, 146, 148, 150, 152, 159, 160, 164, 166, 167, 168, 177, 178, 179, 185, 186, 187, 193, 228, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 283, 288, 294, 296, 299, 313, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 336, 337, 339, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 378, 379, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 399, 400, 403, 404, 405, 406, 408, 416, 417, 418, 422], "leaveonegroupout": [3, 29, 30, 32, 33, 98, 135, 152, 159, 162, 164, 249, 250, 251, 252], "cv_scores_": [3, 29, 30, 32, 33, 34, 42, 111, 159, 187, 249, 250, 251, 252, 254, 255], "final": [3, 4, 6, 14, 15, 30, 41, 48, 53, 55, 56, 57, 63, 69, 84, 93, 94, 100, 146, 152, 153, 160, 166, 167, 168, 174, 175, 178, 179, 187, 294, 319, 326, 327, 329, 330, 435], "mai": [3, 17, 29, 30, 32, 33, 34, 35, 36, 43, 49, 56, 66, 72, 80, 86, 98, 100, 103, 111, 114, 116, 117, 121, 139, 141, 149, 152, 153, 159, 160, 162, 167, 169, 172, 177, 179, 185, 223, 228, 255, 269, 284, 296, 314, 321, 323, 327, 329, 330, 342, 393, 395, 396, 409, 415, 422], "coef_": [3, 40, 44, 98, 111, 116, 249, 250, 251, 252, 254, 255], "coeffici": [3, 6, 23, 39, 40, 44, 51, 98, 99, 134, 150, 152, 153, 159, 160, 161, 165, 166, 169, 172, 185, 187, 254, 255, 270, 272, 275, 281, 290, 294, 416], "voxel": [3, 15, 25, 28, 33, 36, 37, 39, 40, 41, 44, 45, 46, 49, 50, 59, 66, 69, 70, 74, 79, 81, 82, 84, 87, 89, 90, 92, 98, 100, 102, 105, 108, 113, 114, 116, 124, 128, 131, 132, 133, 139, 148, 150, 152, 156, 157, 159, 161, 162, 163, 165, 168, 169, 170, 172, 173, 174, 177, 179, 201, 202, 209, 214, 218, 219, 232, 250, 253, 254, 255, 256, 257, 269, 276, 277, 281, 290, 294, 296, 297, 298, 299, 301, 303, 304, 305, 314, 315, 318, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 339, 342, 355, 370, 373, 378, 381, 386, 392, 397, 403, 404, 405, 406, 407, 408, 412, 413, 414, 415, 416, 422, 435, 437], "get": [3, 6, 14, 21, 22, 33, 35, 40, 41, 51, 52, 56, 58, 62, 66, 68, 69, 71, 75, 78, 81, 86, 88, 100, 101, 104, 107, 108, 117, 133, 138, 152, 154, 157, 158, 159, 164, 166, 168, 171, 173, 179, 185, 186, 187, 195, 201, 202, 204, 205, 230, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 271, 273, 274, 281, 294, 296, 304, 309, 313, 325, 326, 327, 328, 329, 330, 331, 332, 342, 343, 345, 346, 373, 403, 404, 405, 406, 414, 436], "coef_img_": [3, 29, 30, 31, 39, 42, 43, 111, 159, 179, 249, 250, 251, 252, 254, 255], "coef_img": [3, 30, 43, 111, 116], "niftiimag": [3, 154, 167, 168, 177, 178], "save": [3, 6, 9, 14, 21, 23, 29, 42, 43, 48, 49, 50, 51, 61, 66, 72, 86, 91, 92, 94, 98, 99, 100, 103, 107, 117, 125, 139, 148, 152, 157, 166, 177, 178, 179, 228, 230, 254, 255, 258, 259, 260, 274, 281, 294, 321, 326, 327, 329, 330, 331, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 414, 416, 437], "nii": [2, 3, 4, 6, 10, 11, 14, 16, 18, 21, 25, 29, 30, 32, 34, 35, 36, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 64, 75, 77, 85, 86, 89, 91, 92, 94, 95, 101, 102, 103, 104, 105, 107, 108, 116, 174, 177, 284, 319, 321, 322, 323, 393, 394, 395, 396, 402, 420], "gz": [2, 3, 4, 6, 10, 11, 14, 16, 18, 21, 22, 23, 25, 29, 30, 32, 34, 35, 36, 38, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 64, 67, 75, 77, 85, 86, 89, 91, 92, 94, 95, 101, 102, 103, 104, 105, 107, 116, 174, 175, 177, 321, 322, 323, 393, 394, 395, 396, 402, 420, 421], "to_filenam": [3, 4, 6, 29, 48, 49, 55, 64, 86, 94, 178], "haxby_svc_weight": 3, "titl": [3, 6, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 26, 29, 30, 31, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 61, 62, 64, 65, 66, 67, 68, 69, 71, 75, 76, 77, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 98, 100, 101, 102, 103, 105, 106, 107, 108, 111, 116, 125, 141, 142, 147, 150, 152, 157, 159, 167, 175, 179, 281, 294, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 378, 379, 382, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 414, 416, 435], "dim": [3, 21, 23, 29, 47, 56, 91, 129, 131, 135, 152, 159, 269, 271, 273, 274, 377, 390, 391, 392, 399], "doe": [3, 6, 29, 49, 66, 68, 75, 102, 116, 117, 128, 137, 141, 150, 152, 159, 160, 164, 166, 167, 168, 169, 174, 179, 195, 205, 217, 270, 272, 275, 284, 305, 317, 319, 321, 338, 346, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 403, 419, 435], "than": [3, 4, 6, 15, 31, 32, 35, 36, 39, 40, 41, 42, 43, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 61, 64, 66, 67, 69, 70, 77, 79, 81, 86, 88, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 111, 115, 116, 117, 128, 131, 132, 133, 134, 135, 137, 141, 146, 148, 152, 153, 156, 158, 159, 160, 161, 162, 164, 166, 167, 169, 172, 175, 177, 178, 179, 201, 202, 228, 230, 234, 249, 250, 251, 252, 256, 257, 281, 290, 296, 297, 298, 305, 310, 318, 319, 322, 323, 325, 327, 328, 330, 331, 342, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 373, 378, 379, 387, 388, 397, 398, 400, 402, 406, 415, 417, 419, 422], "answer": [3, 436], "question": [3, 51, 65, 66, 99, 156, 174, 175, 179, 214, 436], "random": [3, 40, 41, 44, 51, 55, 63, 98, 99, 102, 111, 133, 145, 152, 156, 157, 158, 159, 166, 167, 198, 256, 257, 271, 273, 274, 281, 290, 296, 342, 403, 404, 406, 408], "compar": [3, 6, 30, 31, 33, 35, 39, 41, 46, 51, 56, 58, 59, 64, 66, 77, 79, 80, 83, 86, 94, 96, 99, 113, 114, 117, 119, 141, 152, 154, 155, 158, 159, 160, 161, 162, 163, 166, 168, 169, 172, 179, 185, 187, 200, 203, 209, 214, 310, 311, 325, 326, 327, 328, 329, 330, 331, 332, 374, 375, 379, 386, 392, 397, 418, 435, 437], "dummi": [3, 99, 146, 152, 159, 160, 162, 167, 249, 250, 251, 252, 288], "replac": [3, 4, 30, 32, 35, 36, 40, 41, 42, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 70, 77, 79, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 111, 116, 123, 124, 125, 132, 133, 138, 141, 144, 145, 146, 147, 148, 152, 162, 166, 167, 175, 232, 299, 316, 322, 333, 336, 418], "dummy_decod": 3, "dummy_classifi": [3, 32, 249, 251], "simpli": [3, 64, 66, 67, 68, 69, 89, 101, 103, 105, 108, 117, 169, 179, 197, 298, 310, 316, 390, 391, 392], "mean": [3, 6, 14, 15, 16, 18, 21, 22, 23, 25, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 49, 50, 51, 55, 56, 58, 61, 64, 66, 67, 70, 71, 77, 83, 89, 91, 92, 94, 95, 96, 98, 102, 103, 104, 111, 113, 117, 131, 135, 138, 141, 145, 147, 152, 153, 156, 157, 159, 166, 167, 169, 172, 174, 178, 179, 185, 186, 187, 189, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 249, 250, 251, 252, 253, 254, 255, 256, 257, 271, 273, 274, 281, 289, 290, 294, 296, 297, 298, 300, 305, 310, 311, 322, 323, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 342, 377, 378, 390, 391, 392, 393, 395, 397, 399, 403, 404, 405, 406, 408, 409, 412, 413, 416, 418, 419], "over": [3, 20, 48, 49, 51, 69, 71, 89, 116, 124, 144, 145, 152, 158, 159, 164, 165, 166, 171, 175, 178, 200, 257, 263, 281, 307, 311, 322, 343, 345, 346, 390, 394, 422, 435], "anova": [3, 28, 35, 42, 45, 105, 106, 113, 133, 152, 163, 164, 165, 172, 179, 217, 249, 250, 251, 252, 254, 255, 306, 392, 397, 399, 437], "hous": [3, 18, 28, 32, 33, 45, 94, 97, 109, 113, 124, 152, 164, 173, 177, 178, 217, 249, 251, 253, 304, 306, 309, 311, 312, 325, 331, 342, 370, 385, 389, 392, 397, 399], "For": [3, 6, 9, 14, 15, 19, 23, 24, 29, 30, 32, 34, 35, 36, 40, 41, 48, 50, 51, 63, 64, 66, 67, 69, 71, 72, 79, 80, 86, 89, 98, 100, 103, 105, 108, 116, 117, 138, 148, 152, 153, 154, 156, 158, 159, 160, 161, 162, 164, 166, 167, 168, 169, 171, 172, 174, 177, 178, 179, 185, 192, 195, 196, 197, 201, 202, 204, 205, 206, 208, 209, 218, 228, 230, 232, 243, 248, 249, 250, 251, 252, 254, 255, 256, 257, 271, 272, 273, 274, 281, 288, 294, 296, 311, 319, 322, 323, 327, 329, 330, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 374, 375, 377, 382, 385, 387, 390, 391, 392, 393, 394, 395, 396, 404, 406, 407, 408, 414, 415, 416, 417, 422, 435, 436], "precomput": [3, 255], "frem": [3, 28, 45, 113, 114, 124, 144, 152, 159, 160, 163, 165, 172, 173, 217, 226, 251, 252, 255, 306, 311, 389, 392, 397, 437], "fast": [3, 31, 39, 48, 49, 65, 66, 72, 100, 114, 141, 144, 152, 156, 158, 159, 160, 163, 166, 167, 172, 173, 223, 230, 251, 252, 257, 316, 404, 405, 411, 437], "ensembl": [3, 31, 39, 42, 114, 159, 160, 163, 165, 172, 173, 251, 252, 437], "regular": [3, 31, 39, 56, 66, 91, 94, 114, 117, 144, 152, 159, 160, 163, 165, 166, 172, 173, 174, 178, 186, 187, 189, 251, 252, 254, 255, 309, 436, 437], "robust": [3, 31, 39, 94, 114, 143, 152, 157, 159, 163, 172, 251, 252, 322, 323, 437], "spacenet": [3, 131, 152, 159, 160, 161, 163, 172, 254, 255, 437], "spatial": [3, 6, 31, 39, 43, 46, 49, 50, 54, 59, 69, 86, 94, 95, 98, 104, 108, 113, 114, 124, 144, 148, 152, 156, 158, 159, 162, 163, 169, 172, 173, 176, 179, 195, 198, 203, 205, 214, 225, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 296, 307, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 390, 392, 397, 404, 406, 408, 437], "plot_decoding_tutori": [3, 7, 141, 152, 159, 167], "download": [4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 114, 115, 128, 129, 131, 132, 134, 138, 141, 144, 145, 147, 152, 153, 154, 156, 159, 167, 174, 181, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 248, 437], "exist": [4, 6, 20, 48, 64, 72, 102, 157, 164, 167, 178, 185, 186, 187, 228, 230, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 308, 325, 326, 327, 328, 329, 330, 331, 332, 389, 403, 404, 405, 406, 435], "ship": [4, 12, 94, 138, 152, 435], "mni152_file_path": [4, 174], "variabl": [4, 6, 14, 39, 42, 43, 44, 56, 69, 75, 77, 94, 100, 101, 108, 114, 125, 130, 148, 150, 152, 154, 159, 160, 161, 163, 164, 166, 167, 169, 172, 177, 179, 194, 239, 249, 250, 251, 252, 253, 254, 255, 268, 272, 281, 294, 310, 322], "path": [4, 6, 15, 62, 64, 72, 86, 94, 101, 108, 115, 116, 117, 125, 130, 141, 147, 149, 150, 152, 159, 165, 166, 167, 175, 176, 179, 186, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 246, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 281, 284, 294, 300, 309, 319, 320, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 356, 404, 405, 406, 414, 418, 420, 421, 422, 437], "mni152": [4, 93, 123, 147, 152, 169, 196, 198, 205, 209, 218, 219, 240, 241, 242, 243, 244, 245, 249, 250, 251, 252, 254, 255, 256, 257, 281, 294, 306, 328, 331, 335, 338, 390, 391, 392, 399, 404], "templat": [4, 16, 22, 23, 48, 69, 75, 83, 96, 108, 113, 114, 123, 126, 131, 136, 141, 144, 147, 150, 152, 157, 169, 172, 174, 178, 179, 195, 197, 209, 218, 219, 232, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 256, 257, 281, 294, 309, 314, 315, 323, 328, 331, 335, 338, 377, 390, 391, 392, 397, 399, 404, 414], "quickli": [4, 33, 61, 62, 64, 75, 153, 156, 166, 167, 175], "plot_img": [4, 6, 36, 125, 141, 148, 152, 174, 353, 355, 358, 360, 362, 364, 366, 368, 370, 435], "veri": [4, 30, 31, 32, 35, 36, 39, 40, 42, 44, 49, 54, 66, 75, 76, 77, 79, 86, 94, 103, 116, 141, 152, 153, 154, 156, 159, 160, 161, 162, 165, 166, 167, 169, 172, 175, 179, 251, 252, 327, 330, 373, 390, 417], "pretti": [4, 103], "simplest": [4, 71, 98, 117, 162, 166, 435], "possibl": [4, 6, 14, 15, 16, 44, 69, 71, 80, 81, 84, 86, 94, 100, 116, 117, 131, 148, 150, 152, 153, 156, 159, 164, 166, 167, 169, 172, 174, 175, 178, 179, 185, 186, 187, 193, 249, 250, 251, 252, 253, 254, 255, 256, 257, 269, 271, 273, 274, 281, 284, 294, 296, 303, 314, 319, 322, 325, 326, 327, 328, 329, 330, 331, 332, 372, 373, 379, 384, 388, 403, 404, 405, 406, 416, 435], "whole": [4, 6, 14, 42, 48, 50, 70, 89, 94, 114, 117, 125, 147, 152, 164, 165, 167, 168, 173, 178, 179, 198, 218, 228, 230, 240, 243, 249, 250, 251, 252, 256, 257, 328, 331, 335, 338, 342, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 384, 390, 392, 396, 404, 406, 435], "make": [4, 6, 8, 15, 22, 23, 27, 30, 31, 36, 41, 47, 49, 51, 56, 58, 66, 68, 69, 70, 71, 75, 77, 79, 80, 84, 98, 104, 113, 114, 117, 123, 125, 126, 127, 132, 138, 147, 148, 150, 152, 157, 159, 160, 164, 165, 168, 171, 172, 173, 174, 177, 179, 199, 207, 217, 228, 232, 237, 246, 249, 250, 251, 252, 254, 255, 269, 314, 346, 347, 348, 349, 350, 351, 352, 354, 356, 357, 359, 361, 363, 365, 367, 369, 384, 387, 392, 394, 396, 397, 398, 399, 400, 402, 403, 420, 422, 435, 436], "prettier": 4, "exercis": [4, 174], "own": [4, 6, 49, 58, 100, 115, 117, 159, 162, 167, 184, 219, 437], "noth": [4, 164, 187, 256, 257, 270, 272, 275, 281, 294, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 385, 387, 390, 391, 392, 399], "stringshould": [4, 6, 14, 15, 32, 35, 36, 40, 41, 42, 47, 49, 51, 52, 53, 54, 55, 56, 58, 61, 65, 66, 68, 69, 70, 79, 88, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 116, 117, 134, 135, 145, 148, 149, 152, 157, 158, 159, 160, 162, 166, 167, 169, 174, 175, 179, 185, 186, 187, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 236, 237, 238, 239, 249, 250, 251, 252, 253, 254, 255, 256, 257, 278, 281, 283, 284, 288, 289, 294, 295, 297, 298, 299, 309, 310, 312, 315, 317, 318, 320, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 342, 343, 376, 377, 379, 382, 384, 385, 387, 390, 391, 392, 393, 394, 396, 400, 403, 404, 405, 406, 407, 408, 412, 414, 415, 416, 418, 433, 435, 436], "volum": [4, 8, 16, 27, 31, 32, 36, 39, 43, 54, 56, 61, 64, 69, 79, 87, 91, 100, 111, 114, 116, 123, 125, 135, 138, 146, 152, 164, 165, 172, 173, 174, 177, 195, 197, 200, 217, 227, 232, 249, 250, 251, 252, 254, 255, 256, 257, 281, 303, 311, 314, 315, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 343, 345, 346, 378, 382, 387, 391, 396, 397, 399, 406, 407, 408, 412, 418, 422, 435, 436, 437], "smooth_img": [4, 70, 94, 95, 103, 135, 141, 152, 177, 178, 179], "mm": [4, 15, 33, 37, 55, 84, 87, 91, 95, 138, 152, 157, 178, 200, 205, 213, 281, 294, 322, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 374, 375, 406, 407, 408, 416, 422], "smooth_anat_img": 4, "fwhm": [4, 66, 94, 95, 103, 105, 135, 141, 152, 172, 174, 178, 179, 316], "could": [4, 6, 36, 49, 58, 66, 69, 70, 79, 85, 86, 93, 100, 105, 116, 117, 128, 144, 148, 149, 152, 159, 162, 164, 166, 167, 169, 174, 179, 269, 391, 422], "more_smooth_anat_img": 4, "ani": [4, 6, 49, 56, 58, 75, 80, 81, 100, 103, 104, 110, 113, 116, 123, 142, 144, 150, 152, 154, 156, 159, 160, 163, 164, 166, 167, 168, 169, 172, 179, 193, 217, 228, 230, 234, 301, 306, 310, 316, 319, 320, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 387, 390, 406, 410, 415, 418, 422, 435, 436, 437], "necessari": [4, 62, 89, 92, 101, 108, 123, 141, 148, 152, 153, 156, 159, 167, 168, 175, 179, 195, 228, 230, 249, 250, 251, 252, 274, 281, 294, 331, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 414], "tool": [4, 8, 10, 11, 20, 23, 27, 32, 36, 48, 49, 79, 86, 87, 94, 100, 104, 113, 116, 131, 150, 152, 155, 160, 167, 168, 171, 173, 174, 176, 177, 179, 180, 182, 217, 246, 311, 353, 355, 358, 360, 362, 364, 366, 368, 370, 377, 382, 384, 391, 392, 397, 399, 426, 435, 436], "plot_nilearn_101": [4, 7], "modul": [5, 19, 26, 32, 34, 35, 36, 40, 41, 42, 47, 50, 51, 52, 53, 54, 55, 56, 58, 61, 87, 88, 89, 91, 92, 93, 94, 98, 99, 100, 102, 103, 104, 105, 106, 111, 114, 116, 117, 123, 124, 125, 126, 133, 135, 136, 144, 148, 150, 152, 162, 167, 170, 174, 175, 179, 183, 228, 232, 249, 250, 251, 252, 271, 273, 274, 288, 296, 298, 308, 310, 426, 430, 431, 432, 433, 435], "provid": [3, 5, 6, 9, 29, 30, 32, 33, 34, 35, 36, 44, 47, 48, 49, 52, 54, 56, 62, 64, 66, 67, 68, 71, 75, 76, 77, 79, 80, 84, 91, 94, 98, 101, 105, 111, 115, 116, 117, 125, 128, 136, 139, 141, 142, 144, 145, 146, 147, 148, 149, 150, 152, 153, 155, 156, 158, 159, 166, 167, 168, 169, 171, 172, 173, 174, 175, 177, 179, 184, 185, 186, 187, 189, 192, 193, 195, 196, 197, 198, 205, 206, 209, 217, 228, 232, 249, 250, 251, 252, 253, 254, 255, 256, 257, 268, 272, 281, 282, 283, 287, 288, 293, 294, 296, 299, 305, 314, 319, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 376, 378, 380, 381, 388, 390, 394, 403, 404, 405, 406, 407, 414, 418, 422, 435, 436], "np": [5, 6, 9, 11, 12, 14, 20, 22, 23, 24, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 75, 77, 79, 80, 84, 85, 87, 89, 94, 98, 100, 102, 103, 104, 105, 106, 107, 108, 111, 150, 152, 157, 167, 177, 178, 185, 205, 232, 270, 271, 272, 273, 274, 275, 300, 310, 403, 405], "linspac": [5, 49, 61, 68], "2000": [5, 42, 49, 102, 114, 141, 144, 152, 156, 177, 208], "matplotlib": [5, 6, 8, 9, 11, 15, 18, 24, 25, 27, 30, 32, 35, 38, 40, 41, 42, 43, 44, 48, 49, 51, 52, 54, 55, 56, 57, 58, 61, 62, 63, 65, 66, 68, 70, 72, 78, 79, 80, 84, 91, 94, 99, 100, 101, 102, 105, 106, 111, 113, 121, 125, 128, 133, 135, 136, 138, 141, 143, 148, 149, 152, 154, 159, 178, 327, 330, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 406, 435, 436], "pyplot": [5, 6, 11, 12, 15, 18, 24, 25, 30, 32, 34, 35, 38, 41, 42, 43, 44, 48, 49, 51, 55, 57, 58, 61, 62, 63, 65, 66, 68, 70, 72, 78, 79, 80, 84, 91, 94, 99, 100, 101, 102, 105, 106, 111, 154, 178, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 378, 379, 382, 383, 384, 385, 387, 388, 390, 391, 392, 393, 396, 397, 435], "scientif": [5, 114, 145, 148, 152, 167, 174, 204, 215, 223, 233, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 382, 384, 385, 391, 392, 393, 395, 396], "plt": [5, 6, 11, 12, 15, 18, 24, 25, 30, 32, 34, 35, 38, 40, 41, 42, 43, 44, 48, 49, 51, 55, 57, 58, 61, 62, 63, 65, 66, 68, 70, 72, 78, 79, 80, 84, 91, 94, 99, 100, 101, 102, 105, 106, 111, 178, 377, 378, 379, 382, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399], "co": [5, 24, 84, 114, 168, 208, 237], "plot_python_101": [5, 7], "tutori": [6, 7, 66, 98, 128, 138, 152, 159, 167, 172, 173, 174, 179, 217, 249, 306, 311, 382, 391, 399], "model": [6, 23, 28, 31, 32, 33, 34, 39, 41, 44, 45, 48, 50, 51, 60, 61, 63, 69, 71, 72, 73, 74, 75, 81, 82, 97, 98, 102, 104, 105, 108, 109, 113, 114, 123, 124, 135, 141, 144, 146, 148, 149, 150, 152, 153, 155, 157, 159, 163, 164, 165, 166, 167, 170, 172, 173, 174, 179, 180, 185, 186, 189, 216, 219, 220, 223, 224, 225, 227, 238, 249, 250, 251, 252, 254, 255, 256, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 296, 297, 300, 301, 304, 305, 310, 311, 315, 318, 321, 322, 323, 325, 328, 331, 332, 342, 354, 355, 369, 370, 380, 381, 384, 391, 392, 397, 414, 416, 429, 436, 437], "period": [6, 41, 66, 69, 108, 249, 250, 251, 252, 254, 255, 299, 326, 327, 328, 329, 330, 331, 332, 378, 404, 406, 418], "auditori": [6, 66, 69, 72, 77, 103, 105, 169, 213, 222, 223, 229, 235], "stimul": [6, 72, 159], "versu": [6, 66, 69, 79, 80, 94, 98, 159, 160, 172], "analys": [6, 100, 114, 125, 152, 159, 164, 168, 169, 170, 171, 172, 173, 177, 179, 226, 423, 436], "nativ": [6, 60, 73, 113, 124, 134, 152, 168, 236, 281, 288, 300, 308, 311, 314, 332, 392, 397], "scan": [6, 23, 33, 36, 55, 58, 63, 65, 66, 67, 68, 71, 94, 100, 114, 146, 152, 156, 164, 172, 177, 223, 256, 257, 281, 283, 285, 286, 287, 288, 291, 292, 293, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 378, 404, 406, 409, 410, 412, 418], "preprocess": [6, 11, 23, 29, 34, 37, 40, 41, 44, 89, 92, 99, 101, 104, 108, 111, 114, 115, 124, 133, 152, 157, 158, 164, 165, 169, 172, 179, 193, 194, 214, 232, 238, 281, 284, 299, 320, 322, 325, 326, 327, 328, 329, 330, 331, 332, 406, 418, 426, 437], "sensit": [6, 40, 48, 56, 114, 169, 172, 299, 323, 342, 418], "result": [3, 6, 14, 15, 23, 24, 30, 33, 34, 35, 36, 40, 42, 43, 44, 48, 49, 51, 55, 57, 58, 61, 62, 64, 65, 66, 67, 69, 71, 72, 75, 77, 78, 79, 84, 86, 87, 88, 92, 93, 94, 95, 98, 99, 100, 101, 103, 104, 105, 106, 108, 114, 115, 117, 124, 125, 131, 138, 141, 144, 149, 150, 152, 153, 155, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 177, 178, 179, 193, 195, 205, 223, 228, 230, 237, 249, 250, 253, 270, 271, 273, 274, 275, 281, 290, 294, 296, 299, 309, 310, 311, 314, 321, 329, 330, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379, 393, 395, 400, 409, 410, 415, 422, 432, 435, 437], "would": [6, 9, 14, 42, 50, 58, 64, 66, 67, 75, 78, 103, 111, 117, 125, 146, 150, 152, 159, 166, 167, 168, 169, 175, 248, 249, 250, 251, 252, 254, 255, 257, 281, 283, 284, 288, 294, 296, 319, 333, 338, 378], "like": [6, 10, 11, 16, 34, 36, 40, 47, 49, 54, 56, 66, 79, 81, 86, 89, 91, 92, 94, 100, 117, 125, 141, 145, 148, 149, 150, 152, 165, 166, 167, 168, 169, 171, 172, 175, 176, 178, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 217, 218, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 268, 271, 272, 273, 274, 276, 278, 281, 283, 284, 294, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 377, 378, 382, 384, 385, 387, 388, 390, 391, 392, 393, 395, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 422, 424, 435, 437], "obtain": [6, 15, 22, 42, 43, 49, 54, 58, 63, 66, 69, 75, 77, 91, 94, 102, 105, 148, 152, 153, 154, 156, 158, 159, 161, 164, 166, 169, 172, 179, 187, 196, 198, 206, 218, 223, 240, 241, 244, 248, 254, 255, 298, 303, 314, 318, 329, 330, 332, 342, 356, 383, 406], "correct": [6, 42, 43, 48, 56, 75, 77, 79, 81, 92, 101, 102, 105, 106, 111, 114, 123, 124, 141, 144, 150, 152, 153, 164, 167, 169, 170, 172, 175, 233, 247, 249, 250, 251, 252, 254, 255, 296, 297, 322, 323, 342, 378, 419, 437], "normal": [6, 24, 31, 37, 44, 55, 58, 69, 70, 101, 104, 108, 111, 116, 128, 152, 159, 166, 167, 168, 169, 172, 186, 189, 195, 221, 232, 273, 274, 422], "smooth": [6, 29, 34, 42, 44, 48, 49, 55, 62, 70, 75, 81, 83, 94, 96, 101, 105, 113, 114, 134, 135, 152, 156, 158, 159, 160, 166, 174, 176, 177, 214, 249, 250, 251, 252, 256, 257, 281, 294, 296, 311, 316, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 342, 382, 393, 395, 397, 403, 404, 406, 408, 437], "conduct": [6, 32, 117, 169], "fil": [6, 71, 235, 236], "geraint": 6, "ree": 6, "under": [6, 9, 102, 150, 152, 159, 160, 164, 165, 166, 167, 168, 169, 172, 175, 253, 303, 314, 315, 320, 335, 338, 342], "direct": [6, 15, 40, 51, 94, 98, 114, 135, 144, 152, 154, 155, 167, 175, 179, 200, 206, 232, 238, 249, 250, 281, 294, 316, 318, 319, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 359, 361, 362, 363, 365, 366, 367, 368, 369, 372, 373, 377, 379, 382, 384, 385, 388, 390, 391, 392, 407, 416, 435, 437], "karl": 6, "friston": [6, 114, 299, 418], "method": [6, 14, 15, 26, 31, 36, 39, 44, 46, 48, 58, 59, 86, 89, 91, 92, 94, 100, 105, 113, 114, 115, 117, 124, 125, 126, 130, 134, 138, 141, 144, 145, 146, 148, 150, 152, 153, 154, 156, 160, 161, 165, 166, 167, 172, 173, 174, 177, 178, 179, 185, 186, 187, 197, 208, 214, 225, 228, 230, 249, 250, 251, 252, 253, 254, 255, 256, 257, 271, 272, 273, 274, 276, 281, 294, 296, 301, 304, 305, 306, 311, 314, 315, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 382, 391, 398, 400, 401, 402, 403, 404, 405, 406, 414, 418, 419, 435, 437], "develop": [6, 47, 55, 56, 85, 89, 91, 92, 114, 136, 141, 152, 153, 154, 156, 158, 166, 167, 174, 175, 187, 208, 214, 378], "spm": [6, 10, 11, 36, 49, 61, 66, 68, 71, 79, 86, 94, 114, 149, 150, 152, 163, 168, 172, 177, 195, 235, 236, 281, 283, 288, 291, 292, 293, 310, 437], "accord": [6, 41, 44, 69, 94, 100, 108, 123, 133, 134, 135, 138, 144, 146, 150, 152, 157, 164, 167, 186, 193, 205, 247, 249, 250, 251, 252, 254, 255, 268, 299, 319, 342, 387, 388, 393, 395, 396, 400, 402, 405, 406, 417, 418, 435], "96": [6, 23, 30, 32, 33, 36, 39, 40, 42, 43, 44, 49, 52, 62, 71, 72, 84, 101, 102], "tr": [6, 11, 23, 25, 33, 63, 68, 71, 108, 124, 137, 149, 152, 169, 172, 178, 214, 285, 286, 287, 291, 292, 293], "7": [3, 6, 7, 9, 10, 11, 15, 17, 21, 23, 24, 25, 26, 31, 33, 36, 38, 39, 40, 42, 43, 44, 45, 48, 49, 52, 53, 54, 57, 58, 59, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 86, 91, 94, 96, 99, 101, 102, 103, 107, 109, 114, 117, 118, 121, 123, 126, 128, 133, 135, 138, 139, 141, 146, 148, 165, 177, 178, 193, 197, 199, 200, 205, 209, 271, 273, 274, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 379, 384, 388, 390, 391, 393, 395, 396, 400, 402, 405, 411, 435], "altern": [6, 9, 16, 20, 22, 52, 54, 58, 66, 155, 156, 164, 172, 179, 271, 273, 274, 342, 437], "42": [6, 11, 24, 33, 36, 39, 40, 42, 43, 62, 67, 71, 73, 91, 92, 100, 101, 102, 104, 107, 435], "6": [3, 6, 7, 9, 10, 11, 17, 20, 21, 23, 24, 27, 30, 31, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 53, 54, 55, 58, 59, 62, 63, 64, 65, 66, 67, 71, 72, 73, 80, 82, 91, 94, 99, 100, 101, 102, 103, 106, 107, 111, 114, 118, 121, 123, 131, 133, 135, 138, 139, 140, 146, 147, 148, 157, 164, 165, 166, 168, 178, 193, 211, 214, 217, 238, 256, 322, 323, 327, 330, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 392, 398, 399, 406, 408, 436], "block": [6, 33, 51, 56, 58, 63, 100, 101, 115, 125, 152, 159, 166, 178, 389, 424], "bi": 6, "syllab": 6, "word": [6, 14, 77, 94, 103, 105, 117, 159, 160, 167, 228, 230], "binaur": 6, "60": [6, 15, 33, 36, 39, 40, 41, 42, 43, 44, 62, 63, 67, 71, 99, 101, 102, 105, 114, 227, 435], "4": [3, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24, 26, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 56, 57, 58, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 75, 76, 77, 79, 80, 81, 84, 85, 86, 87, 91, 92, 93, 98, 99, 100, 101, 102, 103, 106, 107, 108, 111, 114, 118, 126, 131, 134, 138, 139, 140, 141, 146, 157, 159, 164, 165, 166, 174, 187, 193, 208, 212, 215, 225, 226, 232, 233, 234, 237, 249, 250, 251, 252, 254, 255, 256, 257, 294, 299, 314, 315, 322, 323, 334, 336, 337, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 378, 379, 382, 384, 385, 388, 389, 390, 391, 392, 404, 418, 422, 435], "fm00223_004": 6, "bold": [3, 6, 16, 18, 25, 29, 30, 32, 34, 35, 36, 48, 65, 66, 76, 79, 94, 100, 101, 102, 108, 114, 116, 117, 125, 141, 145, 152, 158, 159, 168, 170, 172, 177, 200, 217, 227, 284, 319, 322, 323, 419, 437], "2t": 6, "siemen": 6, "magnetom": 6, "vision": 6, "64": [6, 10, 11, 19, 21, 23, 30, 33, 34, 36, 38, 39, 40, 42, 43, 44, 47, 48, 49, 62, 66, 71, 79, 84, 86, 94, 101, 102, 145, 150, 152, 177, 193, 196, 197, 200], "contigu": [6, 156, 166, 342], "64x64x64": 6, "3mm": 6, "x": [3, 6, 9, 13, 14, 15, 24, 31, 33, 35, 37, 40, 41, 44, 52, 54, 58, 62, 64, 66, 67, 70, 84, 91, 92, 94, 101, 103, 114, 125, 128, 133, 135, 141, 146, 148, 150, 152, 159, 164, 167, 172, 175, 178, 179, 185, 197, 203, 225, 226, 249, 250, 251, 252, 254, 255, 256, 257, 258, 268, 271, 272, 273, 274, 281, 290, 294, 301, 322, 325, 326, 328, 329, 331, 332, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 376, 377, 379, 382, 384, 385, 388, 390, 391, 392, 393, 394, 395, 396, 399, 402, 403, 405, 406, 407, 411, 415, 416, 417, 433, 435], "took": [6, 43, 48, 92], "05": [6, 12, 27, 30, 32, 33, 44, 51, 53, 59, 75, 76, 77, 79, 81, 99, 169, 194, 195, 198, 203, 204, 205, 208, 209, 232, 235, 236, 238, 271, 273, 274, 276], "repeat": [6, 58, 66, 68, 159, 169, 285, 286, 287, 291, 292, 293], "arbitrarili": [6, 255], "subject_data": [6, 70, 71, 168], "abid": [6, 114, 132, 152, 167, 193], "bid": [6, 60, 72, 73, 97, 100, 109, 113, 123, 125, 141, 144, 146, 148, 150, 152, 168, 172, 210, 215, 220, 233, 234, 247, 248, 281, 284, 294, 322, 323, 324, 331, 380, 384, 386, 397, 414, 415, 416], "organ": [6, 58, 114, 128, 141, 147, 149, 152, 167, 172, 174, 205, 209, 212, 296, 323, 342, 358, 421, 422, 436], "fetch_spm_auditori": [6, 70], "sep": [6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 72, 94, 102, 157, 177, 343, 345, 346], "n": [6, 14, 26, 41, 42, 49, 51, 56, 57, 58, 62, 70, 71, 77, 79, 80, 84, 91, 94, 99, 100, 102, 103, 105, 106, 107, 114, 118, 119, 121, 122, 126, 128, 131, 152, 160, 166, 167, 169, 195, 204, 211, 214, 215, 225, 233, 256, 257, 268, 272, 273, 274, 281, 290, 322, 323, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 338, 339, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379, 388, 406, 409, 410, 418, 436], "anatomi": [6, 42, 69, 75, 209], "plot_anat": [6, 15, 18, 50, 148, 152, 157, 392, 435], "cbar_tick_format": [6, 25, 145, 148, 152, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 382, 384, 385, 391, 392, 393, 395, 396], "next": [6, 14, 54, 55, 58, 63, 64, 65, 66, 69, 70, 75, 78, 79, 80, 81, 108, 136, 139, 148, 152, 154, 165, 166, 167, 169, 175], "concaten": [6, 37, 47, 49, 53, 57, 100, 153, 178, 300, 306, 322, 406], "averag": [6, 9, 24, 30, 37, 49, 51, 70, 94, 114, 144, 147, 152, 156, 160, 161, 171, 172, 218, 226, 237, 243, 249, 250, 263, 311, 316, 322, 389, 393, 395, 404, 422], "activ": [6, 14, 15, 16, 30, 32, 40, 41, 49, 64, 66, 69, 70, 71, 76, 77, 79, 80, 81, 100, 108, 114, 116, 153, 154, 157, 158, 159, 163, 164, 166, 167, 168, 169, 171, 172, 174, 175, 179, 187, 195, 203, 206, 225, 226, 227, 246, 276, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 376, 406, 408, 436], "fmri_img": [6, 34, 36, 37, 64, 65, 66, 67, 69, 70, 71, 94, 108, 168], "must": [6, 34, 72, 94, 150, 152, 159, 160, 162, 164, 166, 167, 168, 169, 175, 177, 179, 186, 187, 189, 195, 217, 249, 250, 251, 252, 253, 254, 255, 256, 268, 272, 281, 294, 295, 296, 299, 305, 311, 314, 316, 321, 322, 325, 326, 328, 329, 331, 334, 336, 337, 338, 339, 340, 341, 342, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379, 383, 390, 392, 393, 394, 395, 396, 398, 400, 402, 404, 409, 412, 413, 415, 416, 418, 419, 422, 435], "descript": [6, 58, 115, 117, 123, 125, 144, 148, 152, 167, 175, 177, 178, 193, 195, 196, 197, 198, 199, 200, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 225, 228, 229, 230, 231, 238, 283, 296, 299, 303, 311, 316, 317, 323, 342, 437], "typic": [6, 72, 78, 79, 100, 156, 158, 160, 164, 167, 169, 172, 177, 178, 179, 239, 251, 252, 255, 271, 321, 332, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 390, 391, 392, 399, 404, 435], "event": [6, 60, 62, 63, 65, 66, 68, 69, 70, 71, 73, 100, 101, 108, 113, 114, 125, 144, 145, 152, 159, 169, 170, 224, 281, 282, 283, 288, 383, 436, 437], "tsv": [6, 47, 52, 53, 55, 56, 58, 60, 62, 73, 101, 108, 113, 125, 152, 168, 214, 321, 322, 323, 383], "read_tabl": [6, 65, 66, 69, 70, 71], "firstlevelmodel": [6, 61, 64, 65, 66, 67, 70, 71, 100, 146, 148, 150, 152, 168, 284, 294, 296, 321, 416], "design": [6, 33, 41, 44, 60, 61, 62, 64, 65, 67, 69, 70, 71, 73, 74, 75, 76, 79, 80, 81, 82, 101, 105, 108, 113, 114, 124, 144, 145, 146, 148, 152, 159, 162, 166, 167, 169, 170, 171, 172, 223, 268, 271, 272, 273, 274, 279, 281, 282, 288, 290, 294, 295, 296, 297, 304, 310, 321, 324, 380, 381, 392, 397, 416, 437], "matrix": [6, 22, 33, 37, 40, 41, 44, 47, 50, 51, 53, 61, 62, 63, 64, 66, 69, 70, 71, 74, 75, 76, 77, 79, 80, 81, 82, 84, 91, 92, 100, 101, 103, 105, 108, 113, 123, 124, 136, 141, 144, 152, 156, 157, 159, 160, 166, 169, 170, 171, 172, 173, 174, 177, 178, 179, 185, 186, 187, 188, 189, 190, 192, 228, 230, 249, 250, 251, 252, 254, 255, 256, 257, 268, 271, 272, 273, 274, 279, 281, 282, 288, 290, 294, 295, 296, 301, 311, 312, 314, 317, 321, 324, 325, 328, 331, 334, 336, 337, 339, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379, 380, 381, 389, 403, 404, 405, 416, 437], "first_level": [6, 33, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 78, 100, 101, 108, 125, 146, 148, 150, 152, 168, 383, 416], "level": [6, 9, 14, 15, 18, 33, 39, 48, 49, 51, 56, 63, 70, 71, 73, 75, 82, 97, 104, 105, 109, 114, 123, 124, 125, 144, 145, 150, 152, 155, 156, 160, 163, 166, 167, 169, 170, 172, 175, 177, 183, 185, 186, 187, 189, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 269, 271, 273, 274, 276, 277, 281, 284, 288, 290, 294, 295, 296, 297, 299, 304, 305, 310, 315, 318, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 338, 340, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 379, 380, 381, 384, 386, 390, 391, 392, 393, 394, 395, 396, 397, 399, 403, 404, 405, 406, 411, 414, 415, 416, 418, 422, 435, 437], "t_r": [6, 11, 33, 49, 51, 52, 53, 54, 55, 56, 58, 61, 62, 65, 66, 69, 70, 89, 91, 92, 99, 100, 108, 138, 149, 152, 179, 249, 250, 251, 252, 254, 255, 256, 257, 281, 283, 284, 288, 299, 326, 327, 328, 329, 330, 331, 332, 378, 404, 406, 418], "noise_model": [6, 33, 66, 281, 284, 290], "ar1": [6, 33, 66, 281, 284, 290], "covari": [6, 42, 46, 57, 58, 59, 61, 64, 69, 102, 113, 114, 134, 152, 154, 155, 157, 173, 185, 186, 187, 188, 189, 203, 214, 225, 268, 270, 271, 272, 273, 274, 325, 330, 342, 375, 379, 389, 397, 398, 437], "lag": [6, 47, 65, 66], "depend": [6, 14, 15, 39, 66, 89, 95, 100, 102, 105, 114, 123, 128, 133, 138, 141, 152, 160, 164, 166, 167, 169, 172, 175, 177, 193, 197, 198, 201, 202, 206, 209, 214, 225, 249, 250, 251, 252, 254, 255, 256, 257, 268, 272, 281, 294, 296, 297, 304, 328, 331, 341, 342, 390, 404, 415, 416, 435], "rescal": [6, 23, 33, 40, 80, 124, 147, 152, 343, 345, 346, 381, 393, 395, 396, 402], "seri": [6, 33, 46, 47, 51, 56, 60, 66, 73, 92, 94, 95, 97, 109, 113, 114, 116, 123, 128, 145, 149, 152, 153, 155, 157, 159, 164, 169, 170, 176, 177, 178, 185, 220, 232, 233, 235, 238, 247, 256, 257, 268, 281, 284, 299, 300, 311, 316, 322, 325, 329, 330, 331, 332, 333, 336, 355, 370, 378, 381, 392, 408, 409, 410, 415, 419, 427, 437], "varianc": [6, 33, 40, 42, 48, 55, 56, 57, 58, 66, 70, 80, 141, 144, 145, 152, 159, 164, 166, 172, 179, 185, 189, 249, 250, 251, 252, 256, 257, 269, 271, 273, 274, 277, 278, 281, 290, 294, 299, 305, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 378, 404, 406, 409, 418, 419], "hrf_model": [6, 33, 61, 63, 65, 66, 69, 71, 108, 281, 283, 284, 288], "canon": [6, 50, 66, 71, 84, 131, 152, 172, 183, 256], "hrf": [6, 65, 66, 68, 69, 108, 148, 150, 152, 159, 170, 172, 281, 283, 285, 286, 287, 288, 291, 292, 293, 437], "dispers": [6, 66, 68, 168, 271, 273, 274, 281, 283, 285, 288, 291], "deriv": [6, 46, 59, 62, 68, 69, 71, 100, 101, 104, 108, 113, 125, 145, 147, 148, 152, 158, 166, 168, 172, 173, 179, 193, 214, 256, 257, 281, 283, 284, 285, 287, 288, 291, 293, 294, 296, 307, 319, 320, 321, 322, 323, 343, 344, 371, 378, 390, 392, 393, 395, 397, 404], "drift_model": [6, 33, 63, 66, 70, 71, 168, 281, 284, 288], "cosin": [6, 33, 66, 69, 70, 71, 108, 123, 125, 146, 152, 281, 284, 288, 322, 418], "drift": [6, 69, 70, 71, 100, 108, 281, 288, 322, 418], "slow": [6, 36, 44, 66, 165, 166, 167, 179, 435], "oscil": [6, 66, 114], "high_pass": [6, 33, 49, 51, 52, 53, 54, 55, 56, 58, 61, 66, 71, 89, 91, 92, 99, 100, 138, 152, 179, 249, 250, 251, 252, 254, 255, 256, 257, 281, 284, 288, 299, 322, 323, 326, 327, 328, 329, 330, 331, 332, 404, 406, 417, 418], "01": [3, 6, 7, 12, 20, 27, 30, 32, 33, 36, 38, 42, 44, 45, 48, 51, 53, 55, 58, 59, 61, 71, 99, 100, 101, 108, 109, 111, 114, 187, 199, 203, 281, 284, 288, 319, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370], "hz": [6, 33, 66, 71, 179, 281, 288], "cutoff": [6, 66, 69, 71, 89, 108, 146, 152, 176, 249, 250, 251, 252, 254, 255, 299, 326, 327, 328, 329, 330, 331, 332, 404, 406, 417, 418, 437], "frequenc": [6, 66, 121, 152, 179, 249, 250, 251, 252, 254, 255, 281, 288, 299, 322, 326, 327, 328, 329, 330, 331, 332, 404, 406, 417, 418], "invers": [6, 46, 58, 59, 98, 113, 143, 152, 154, 155, 159, 166, 173, 176, 187, 192, 203, 214, 271, 273, 274, 278, 325, 330, 375, 379, 388, 389, 397, 398, 403, 437], "fmri_glm": [6, 64, 67, 70, 71, 168], "inspect": [6, 40, 48, 55, 66, 67, 70, 89, 92, 154, 159, 174, 281, 294], "row": [3, 6, 40, 66, 72, 98, 100, 117, 145, 152, 172, 228, 230, 271, 272, 273, 274, 281, 294, 295, 296, 353, 355, 358, 372, 377, 382, 385, 387, 389, 390, 391, 392, 403, 415, 422], "repres": [6, 15, 20, 33, 35, 51, 52, 54, 55, 69, 76, 79, 94, 114, 133, 145, 152, 153, 154, 157, 158, 167, 169, 171, 172, 177, 178, 179, 197, 200, 214, 242, 243, 245, 281, 294, 303, 314, 325, 326, 327, 328, 329, 330, 331, 332, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 374, 379, 384, 388, 406, 409, 416, 420, 422, 435], "column": [3, 6, 56, 62, 65, 66, 69, 70, 71, 72, 75, 76, 77, 79, 80, 81, 98, 100, 101, 102, 105, 106, 108, 117, 125, 145, 152, 169, 186, 187, 189, 249, 250, 251, 252, 268, 271, 272, 273, 274, 279, 281, 288, 294, 295, 296, 299, 314, 322, 323, 324, 342, 353, 355, 358, 372, 377, 380, 381, 382, 383, 385, 389, 390, 391, 392, 413, 415, 417, 418, 419], "predictor": [6, 40, 168, 169, 273, 274, 323], "design_matrix": [6, 41, 61, 62, 65, 66, 69, 70, 71, 75, 76, 77, 78, 79, 80, 81, 108, 282, 288, 294, 295, 296, 324, 380, 381], "design_matrices_": [6, 65, 66, 70, 100], "formal": 6, "taken": [6, 66, 100, 160, 166, 284, 294, 296, 315, 326, 327, 329, 330, 332, 406], "implictili": 6, "plot_design_matrix": [6, 63, 65, 66, 73, 75, 78, 80, 100, 168, 171], "write": [6, 41, 64, 113, 117, 123, 148, 150, 152, 166, 167, 175, 258, 259, 260, 321, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 414], "o": [6, 40, 41, 62, 64, 86, 100, 101, 108, 114, 128, 152, 167, 193, 195, 205, 212, 225, 322], "outdir": [6, 72], "mkdir": [6, 64, 72], "join": [6, 62, 64, 86, 103, 108, 167, 422, 436], "output_fil": [6, 15, 23, 356, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 390, 391, 392, 393, 394, 395, 396, 435], "png": [6, 9, 15, 23, 61, 62, 173, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 390, 391, 392, 393, 394, 395, 396, 435], "expect": [3, 6, 29, 30, 32, 33, 34, 35, 36, 61, 66, 78, 79, 81, 95, 98, 101, 102, 105, 106, 117, 126, 141, 150, 152, 157, 164, 167, 169, 172, 175, 178, 179, 255, 281, 283, 288, 294, 296, 300, 319], "respons": [6, 60, 70, 71, 72, 73, 79, 80, 113, 148, 152, 159, 168, 169, 172, 174, 175, 224, 281, 283, 285, 286, 287, 288, 291, 293, 380, 381, 392], "profil": [6, 166, 167, 268, 272], "region": [6, 10, 15, 16, 19, 23, 40, 42, 43, 44, 46, 48, 49, 52, 55, 56, 58, 59, 66, 70, 71, 83, 96, 99, 113, 114, 123, 125, 126, 130, 132, 133, 136, 141, 144, 146, 148, 152, 153, 155, 158, 159, 165, 168, 169, 172, 174, 176, 178, 185, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 213, 214, 217, 226, 229, 256, 257, 263, 264, 304, 306, 309, 311, 312, 316, 318, 323, 325, 326, 327, 329, 330, 332, 355, 373, 374, 375, 376, 377, 379, 382, 389, 390, 391, 392, 394, 395, 397, 398, 414, 435, 437], "xlabel": [6, 25, 30, 32, 34, 42, 48, 49, 51, 55, 58, 68, 99, 178], "access": [6, 33, 48, 56, 61, 62, 64, 66, 75, 114, 116, 124, 148, 152, 154, 158, 166, 167, 168, 176, 177, 179, 194, 195, 198, 203, 204, 205, 208, 209, 232, 235, 236, 238, 269, 356, 426, 437], "beta": [6, 26, 39, 42, 66, 71, 97, 109, 113, 114, 149, 168, 172, 220, 225, 249, 250, 251, 252, 268, 271, 272, 273, 274, 281, 284, 300, 325, 331, 332, 355, 381, 392], "role": [6, 148, 152], "potenti": [6, 55, 91, 94, 100, 114, 147, 152, 164, 167, 172, 175, 206, 296], "weight": [6, 29, 39, 42, 43, 44, 116, 117, 141, 152, 153, 160, 162, 163, 166, 167, 169, 179, 218, 228, 230, 249, 250, 251, 252, 254, 255, 278, 321, 398, 410, 437], "associ": [6, 14, 47, 72, 75, 77, 105, 123, 152, 159, 164, 167, 169, 171, 172, 195, 233, 253, 269, 296, 322, 323, 342, 415, 422], "nutshel": 6, "combin": [6, 15, 40, 41, 102, 104, 114, 123, 147, 152, 159, 164, 169, 172, 179, 227, 249, 250, 251, 252, 254, 255, 256, 257, 281, 294, 296, 322, 361, 362, 365, 366, 367, 368, 380], "consid": [6, 32, 39, 48, 53, 54, 55, 66, 68, 80, 92, 94, 102, 104, 116, 128, 141, 148, 152, 164, 167, 209, 249, 250, 251, 252, 254, 255, 256, 257, 268, 272, 281, 283, 284, 288, 294, 296, 303, 309, 320, 327, 328, 330, 331, 336, 339, 342, 346, 391, 404, 407, 409, 410], "two": [6, 14, 24, 25, 34, 40, 48, 55, 56, 58, 60, 66, 67, 73, 74, 77, 82, 86, 88, 89, 94, 98, 100, 101, 102, 108, 113, 117, 123, 133, 136, 141, 144, 145, 152, 153, 156, 158, 159, 161, 163, 164, 166, 167, 168, 169, 171, 172, 173, 174, 175, 177, 178, 179, 187, 191, 197, 216, 223, 236, 249, 250, 251, 252, 256, 257, 271, 273, 274, 281, 288, 294, 295, 296, 300, 306, 311, 314, 322, 323, 327, 330, 332, 342, 354, 381, 384, 386, 387, 392, 393, 394, 395, 396, 397, 402, 404, 406, 407, 408, 414, 415, 416, 421, 422, 435, 437], "isol": [6, 70, 71, 100, 159, 169], "zero": [6, 9, 20, 22, 23, 31, 36, 39, 44, 47, 53, 54, 64, 67, 70, 77, 79, 94, 121, 141, 145, 149, 152, 153, 157, 159, 160, 164, 165, 166, 169, 172, 178, 179, 185, 186, 187, 189, 232, 249, 250, 251, 252, 254, 255, 256, 268, 273, 274, 288, 294, 296, 299, 303, 316, 318, 322, 326, 327, 328, 329, 330, 331, 332, 333, 336, 339, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 391, 392, 394, 395, 404, 405, 406, 409, 410, 412, 413, 418], "16": [6, 10, 11, 23, 25, 30, 32, 33, 34, 36, 38, 39, 40, 42, 43, 44, 45, 48, 49, 54, 62, 66, 68, 71, 76, 77, 79, 80, 84, 89, 91, 96, 101, 102, 103, 105, 109, 139, 146, 152, 166, 178, 204, 327, 330, 406, 435], "active_minus_rest": 6, "plot_contrast_matrix": [6, 62, 65, 66], "below": [6, 9, 16, 20, 22, 39, 44, 49, 52, 54, 58, 65, 70, 94, 114, 133, 152, 156, 159, 160, 164, 166, 167, 168, 169, 171, 175, 178, 179, 186, 187, 189, 193, 214, 249, 250, 251, 252, 254, 255, 257, 319, 326, 327, 328, 329, 330, 331, 332, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 384, 385, 387, 391, 392, 393, 396, 399, 404, 406, 417, 418, 435], "account": [6, 66, 76, 94, 164, 175, 179, 322, 326, 327, 329, 330, 332, 406], "eff_map": 6, "compute_contrast": [6, 33, 61, 62, 64, 65, 66, 67, 69, 70, 71, 75, 76, 77, 79, 80, 81, 100, 101, 108, 123, 152, 168, 281, 294, 296, 416], "output_typ": [6, 61, 64, 65, 66, 67, 70, 71, 75, 76, 77, 79, 80, 81, 100, 105, 281, 294, 342], "effect_s": [6, 67, 80, 100, 172, 269, 281, 294], "form": [6, 33, 40, 44, 49, 72, 105, 153, 154, 156, 157, 169, 172, 177, 185, 186, 187, 233, 234, 249, 250, 251, 252, 253, 254, 255, 256, 257, 276, 281, 284, 288, 294, 296, 297, 319, 320, 325, 326, 327, 328, 329, 330, 331, 332, 342, 386, 399, 403, 404, 405, 406, 415, 416], "scale": [6, 15, 41, 49, 54, 61, 68, 70, 71, 72, 94, 114, 117, 131, 138, 148, 152, 160, 164, 179, 197, 223, 228, 230, 242, 243, 245, 254, 255, 268, 271, 272, 273, 274, 276, 281, 289, 294, 296, 297, 326, 327, 328, 329, 330, 331, 332, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 403, 404, 405, 415, 416, 418, 422, 437], "gaussian": [6, 44, 79, 94, 114, 153, 166, 169, 179, 180, 186, 189, 316], "z_map": [6, 33, 61, 62, 64, 65, 66, 70, 71, 75, 76, 77, 79, 81, 101, 281, 294], "z_score": [6, 61, 64, 65, 66, 67, 69, 70, 71, 75, 76, 77, 79, 80, 81, 108, 269, 281, 294], "top": [6, 12, 15, 17, 25, 44, 56, 103, 144, 152, 167, 174, 178, 248, 379, 384, 385, 388, 390, 391, 392, 399, 435], "axial": [6, 14, 94, 281, 294, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 377, 379, 382, 384, 385, 388, 390, 391, 392, 416], "black_bg": [6, 13, 14, 36, 71, 147, 152, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 379, 382, 384, 385, 388, 390, 391, 392, 399, 400, 402], "minu": [6, 117, 169], "worri": [6, 24, 116], "valid": [6, 28, 32, 33, 36, 37, 40, 42, 44, 45, 51, 99, 102, 105, 106, 107, 113, 124, 125, 128, 131, 144, 148, 149, 152, 153, 155, 160, 163, 167, 179, 187, 197, 200, 206, 217, 225, 249, 250, 251, 252, 253, 254, 255, 281, 282, 283, 288, 299, 303, 306, 311, 316, 317, 322, 323, 326, 329, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 402, 409, 415, 420, 421, 422, 437], "procedur": [6, 31, 76, 77, 79, 84, 87, 102, 154, 159, 164, 169, 171, 172, 223, 280, 296, 342, 418, 431], "arbitrari": [6, 48, 65, 76, 169, 253, 294, 296], "risk": [6, 184], "aka": [6, 66, 108, 156, 169, 276], "control": [6, 8, 9, 11, 14, 15, 20, 23, 27, 33, 38, 40, 48, 56, 76, 79, 98, 113, 114, 124, 126, 134, 135, 139, 141, 145, 152, 153, 157, 158, 159, 160, 163, 164, 166, 167, 169, 172, 176, 185, 193, 221, 228, 230, 257, 276, 280, 281, 294, 297, 300, 311, 318, 322, 323, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 378, 382, 384, 385, 391, 392, 393, 395, 396, 397, 403, 416, 422, 435, 437], "posit": [6, 9, 14, 16, 17, 24, 48, 51, 58, 66, 71, 74, 79, 80, 81, 82, 84, 94, 99, 113, 114, 116, 144, 148, 152, 159, 164, 166, 169, 171, 172, 179, 186, 189, 193, 223, 225, 276, 281, 294, 296, 297, 318, 342, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 376, 377, 379, 382, 384, 385, 388, 390, 391, 392, 396, 397, 399, 400, 415, 416, 422, 435], "fpr": [6, 33, 81, 171, 172, 281, 294, 297, 416], "alpha": [6, 15, 23, 24, 37, 39, 40, 44, 48, 57, 68, 75, 76, 77, 81, 106, 150, 153, 158, 165, 169, 186, 187, 189, 254, 255, 257, 271, 273, 274, 276, 280, 281, 294, 297, 318, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 379, 384, 388, 390, 391, 393, 395, 396, 416, 435], "certain": [6, 56, 138, 152, 159, 167, 169, 228, 314, 390], "001": [6, 41, 43, 44, 62, 76, 79, 80, 81, 101, 169, 186, 187, 189, 254, 255, 281, 294, 297, 416], "chanc": [6, 33, 37, 51, 77, 79, 145, 152, 163, 164, 169, 437], "declar": [6, 167, 169, 186, 189], "inact": [6, 169, 175], "threshold_stats_img": [6, 75, 77, 81, 171, 318], "_": [6, 22, 30, 36, 37, 42, 44, 49, 51, 57, 62, 67, 75, 77, 80, 94, 98, 100, 101, 102, 105, 106, 108, 123, 146, 150, 152, 159, 167, 233, 234, 284, 321], "height_control": [6, 75, 77, 81, 281, 294, 297, 416], "uncorrect": [6, 62, 76, 79, 80, 81, 101], "n_voxel": [6, 55, 77, 79, 92, 98, 159, 162, 169, 256, 269, 271, 273, 274, 277, 281, 289, 290, 406], "ten": [6, 81, 404], "hundr": [6, 49, 404], "conserv": [6, 77, 79, 102, 164, 169, 186, 191], "solut": [6, 65, 66, 153, 154, 160, 165, 166, 174, 177, 257], "famili": [6, 81, 102, 123, 124, 135, 150, 152, 164, 167, 172, 296, 342, 406, 408], "wise": [6, 15, 40, 47, 55, 81, 94, 100, 102, 123, 150, 152, 164, 168, 172, 179, 249, 250, 251, 252, 296, 342], "probabl": [6, 11, 21, 31, 32, 39, 43, 48, 61, 66, 77, 79, 81, 92, 94, 154, 164, 166, 169, 172, 174, 175, 201, 202, 232], "sai": [6, 65, 70, 98, 117, 167, 169, 271], "bonferroni": [6, 81, 102, 105, 106, 164, 169, 172, 281, 294, 297, 416], "inde": [6, 42, 49, 86, 153, 154, 162, 169, 282, 435], "popular": [6, 48, 173, 177, 249, 250], "proport": [6, 49, 51, 70, 74, 82, 99, 113, 157, 169, 171, 172, 223, 273, 276, 294, 388, 392, 397], "discoveri": [6, 23, 76, 77, 79, 81, 114, 169, 172, 174, 238], "among": [6, 79, 124, 152, 169, 172, 197, 249, 250, 251, 252], "fdr": [6, 75, 77, 81, 171, 172, 280, 281, 294, 297, 416], "discard": [6, 117, 169, 192, 228, 248, 284, 319, 336, 339, 422], "small": [6, 18, 49, 51, 58, 65, 86, 99, 102, 103, 127, 129, 130, 152, 156, 157, 164, 166, 167, 174, 175, 253, 269, 299, 390, 391, 404, 407, 418, 422, 435], "cluster": [6, 19, 31, 32, 33, 39, 46, 59, 62, 74, 79, 81, 82, 86, 91, 113, 114, 123, 124, 141, 144, 148, 149, 150, 152, 155, 161, 162, 164, 169, 171, 172, 173, 174, 197, 198, 214, 223, 251, 252, 276, 281, 290, 294, 296, 297, 304, 306, 311, 318, 329, 342, 362, 382, 389, 391, 392, 397, 403, 404, 405, 409, 411, 412, 415, 416, 437], "remov": [6, 30, 32, 33, 35, 40, 41, 42, 48, 50, 77, 86, 89, 103, 104, 105, 106, 111, 114, 116, 121, 123, 125, 128, 132, 133, 134, 136, 138, 139, 141, 143, 144, 146, 148, 152, 160, 165, 166, 175, 176, 178, 185, 232, 234, 281, 297, 299, 303, 305, 316, 318, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 338, 339, 342, 378, 390, 406, 407, 409, 410, 414, 417, 418, 419, 437], "cluster_threshold": [6, 61, 70, 81, 148, 152, 281, 294, 297, 318, 415, 416], "clean_map": 6, "zscore": [6, 111, 124, 125, 141, 152, 185, 256, 326, 327, 328, 329, 330, 331, 332, 378, 418], "active_vs_rest_z_map": 6, "active_vs_rest_eff_map": 6, "furthermor": [6, 42, 55], "extract": [6, 9, 10, 11, 19, 20, 21, 22, 26, 28, 30, 32, 38, 39, 40, 43, 45, 46, 48, 49, 59, 60, 62, 65, 67, 71, 72, 73, 83, 86, 92, 94, 96, 98, 100, 101, 104, 113, 117, 122, 123, 124, 126, 133, 134, 136, 137, 138, 139, 145, 149, 150, 152, 155, 156, 159, 162, 170, 172, 174, 175, 176, 185, 194, 200, 201, 203, 206, 211, 212, 214, 217, 225, 229, 232, 249, 250, 251, 252, 253, 256, 257, 263, 264, 281, 288, 294, 295, 296, 305, 306, 308, 311, 318, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 337, 339, 355, 374, 375, 376, 377, 379, 388, 389, 390, 392, 397, 398, 400, 404, 406, 407, 408, 409, 410, 412, 414, 416, 419, 422, 431, 435, 437], "report": [6, 49, 52, 53, 54, 56, 70, 89, 91, 92, 103, 114, 141, 146, 148, 150, 152, 169, 170, 175, 179, 208, 276, 281, 294, 326, 327, 328, 329, 330, 331, 342, 393, 395, 396, 406, 436], "tabl": [6, 33, 62, 70, 91, 101, 124, 149, 152, 323, 415], "get_clusters_t": [6, 62, 70, 124, 145, 149, 150, 152], "stat_threshold": [6, 70, 415], "20": [6, 11, 21, 23, 24, 33, 36, 39, 40, 42, 43, 44, 48, 50, 52, 53, 54, 57, 58, 62, 70, 71, 72, 73, 78, 81, 91, 92, 94, 96, 100, 101, 102, 103, 105, 106, 114, 121, 126, 131, 152, 153, 157, 159, 197, 206, 225, 249, 250, 251, 252, 254, 255, 256, 257, 422], "to_csv": [6, 72], "baselin": [6, 30, 32, 114, 144, 145, 152, 160, 162, 196, 269, 289], "anoth": [6, 39, 66, 69, 79, 89, 130, 135, 152, 159, 166, 167, 169, 174, 176, 177, 185, 254, 255, 300, 301, 320, 414, 435, 437], "seek": [6, 77, 105, 158, 390], "whether": [6, 9, 70, 89, 94, 102, 139, 152, 159, 167, 169, 175, 179, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 209, 214, 217, 218, 219, 223, 225, 226, 227, 228, 230, 232, 238, 256, 257, 278, 296, 297, 303, 318, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 338, 339, 342, 343, 345, 346, 384, 387, 392, 393, 394, 396, 404, 406, 415, 416, 418, 419], "possibli": [6, 66, 179], "three": [6, 14, 19, 24, 32, 40, 49, 63, 65, 66, 75, 89, 94, 114, 139, 147, 152, 166, 167, 175, 177, 214, 281, 294, 314, 316, 353, 355, 358, 372, 377, 379, 382, 383, 384, 385, 388, 390, 391, 392, 416, 422], "higher": [6, 64, 67, 116, 133, 152, 153, 164, 169, 186, 206, 249, 250, 251, 252, 254, 255, 256, 257, 281, 294, 300, 311, 326, 327, 328, 329, 330, 331, 332, 404, 405, 406, 417], "dimension": [6, 26, 49, 71, 94, 128, 145, 150, 152, 166, 174, 191, 192, 200, 206, 225, 256, 257, 269, 300, 341, 403, 404, 405], "explain": [6, 40, 42, 48, 56, 66, 70, 144, 152, 156, 159, 167, 169, 174, 179, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422], "might": [6, 34, 61, 104, 158, 162, 164, 169, 172, 175, 177, 199, 214, 288, 317, 323, 334, 335, 336, 338, 339, 402], "specif": [6, 14, 15, 16, 17, 30, 32, 33, 48, 49, 61, 62, 63, 64, 65, 66, 67, 69, 71, 76, 79, 80, 84, 94, 101, 108, 114, 115, 120, 131, 144, 150, 152, 153, 156, 157, 158, 159, 160, 162, 164, 167, 169, 171, 172, 174, 175, 176, 179, 215, 225, 230, 233, 234, 269, 271, 273, 274, 295, 299, 319, 321, 327, 330, 342, 374, 393, 394, 395, 396, 402, 406, 418, 420, 421, 422, 435, 437], "exactli": [6, 84, 94, 98, 108, 166, 167, 249, 250, 251, 252, 253, 319, 399, 422], "effects_of_interest": [6, 64, 70, 71], "vstack": [6, 40, 41, 58, 70, 71, 75, 80, 103], "easier": [6, 23, 66, 127, 132, 147, 152, 158, 159, 166, 167], "oop": 6, "lot": [6, 65, 71, 86, 121, 138, 141, 152, 153, 159, 160, 166, 167, 174, 189], "non": [6, 15, 39, 42, 50, 56, 65, 66, 68, 77, 79, 91, 94, 102, 103, 115, 134, 138, 141, 145, 146, 148, 149, 152, 153, 157, 158, 164, 165, 166, 167, 171, 172, 174, 179, 198, 225, 232, 249, 250, 251, 252, 256, 271, 273, 274, 281, 299, 303, 308, 314, 316, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 377, 387, 391, 392, 393, 395, 396, 400, 402, 406, 412, 418, 435, 437], "neural": [6, 68, 114, 158, 169, 172, 174, 179, 215, 233, 253], "ventricl": 6, "arteri": 6, "plot_single_subject_single_run": [6, 7], "53": [22, 23, 33, 36, 38, 39, 40, 42, 43, 44, 61, 62, 71, 73, 76, 82, 91, 93, 101, 102, 114, 196, 197, 207], "020": [41, 56, 114, 322, 323], "execut": [7, 21, 27, 45, 59, 73, 82, 87, 96, 109, 112, 113, 167, 179, 314, 393, 395, 435, 436], "auto_examples_00_tutori": 7, "02": [3, 27, 30, 33, 36, 44, 45, 53, 59, 62, 73, 78, 82, 96, 109, 114, 164, 197, 256, 322, 323], "738": 33, "915": [40, 41, 45, 109, 114, 227], "45": [6, 11, 30, 32, 33, 39, 40, 42, 43, 55, 62, 71, 91, 101, 102, 105, 106], "835": [], "125": [33, 40, 41, 72, 100, 105, 114], "41": [21, 23, 33, 36, 39, 40, 42, 43, 44, 49, 62, 71, 72, 91, 101, 102, 105, 114, 405, 411], "168": [6, 33, 41, 54, 55, 56, 58, 89, 91, 157], "326": [6, 7, 27, 33, 41], "00": [7, 27, 30, 32, 33, 36, 42, 44, 45, 48, 53, 59, 73, 82, 89, 96, 102, 105, 109, 112], "14": [6, 11, 18, 21, 23, 30, 33, 36, 38, 39, 40, 42, 43, 45, 48, 62, 67, 70, 71, 77, 91, 101, 102, 103, 114, 119, 121, 131, 133, 134, 135, 138, 141, 152, 164, 199, 205, 395], "331": [33, 41], "262": [33, 41, 114], "8": [3, 6, 9, 10, 11, 12, 14, 17, 19, 21, 23, 24, 26, 27, 30, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 76, 78, 79, 80, 81, 82, 84, 86, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 111, 114, 117, 121, 126, 131, 139, 141, 143, 149, 156, 157, 165, 198, 202, 208, 217, 219, 228, 230, 237, 240, 241, 242, 243, 244, 245, 249, 250, 251, 252, 254, 255, 256, 257, 281, 294, 298, 303, 322, 325, 326, 327, 328, 329, 330, 331, 332, 335, 338, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 404, 406, 415, 416, 418], "947": [], "9": [3, 5, 6, 9, 10, 11, 15, 17, 21, 23, 24, 26, 27, 32, 33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 58, 59, 61, 62, 65, 67, 68, 70, 71, 72, 73, 79, 80, 82, 86, 89, 90, 91, 92, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 114, 116, 117, 118, 121, 135, 144, 146, 172, 205, 214, 215, 228, 230, 232, 234, 268, 272, 281, 290, 296, 312, 318, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 378, 393, 395, 396, 412, 415, 435, 436], "glass": [8, 9, 27, 47, 61, 107, 113, 131, 132, 133, 135, 136, 141, 144, 152, 173, 231, 246, 281, 294, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379, 384, 388, 392, 397, 398, 401, 416, 435], "megatrawl": [8, 27, 113, 114, 128, 152, 225, 389, 397], "probabilist": [8, 27, 46, 51, 59, 99, 113, 114, 124, 125, 138, 149, 152, 155, 172, 178, 179, 185, 196, 198, 200, 201, 202, 203, 204, 206, 214, 218, 306, 325, 330, 355, 374, 375, 379, 389, 390, 391, 392, 397, 398, 410, 414, 435, 437], "atla": [8, 11, 27, 46, 48, 50, 59, 83, 91, 94, 96, 111, 113, 114, 117, 122, 124, 125, 129, 130, 132, 133, 134, 135, 138, 141, 144, 145, 146, 147, 149, 150, 152, 155, 157, 166, 172, 178, 179, 185, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 214, 218, 228, 237, 263, 265, 306, 318, 325, 326, 327, 329, 330, 355, 374, 375, 376, 378, 379, 389, 390, 391, 392, 395, 397, 398, 399, 400, 402, 406, 407, 408, 409, 410, 414, 421, 431, 435, 437], "mode": [8, 14, 16, 21, 27, 55, 60, 73, 83, 94, 96, 113, 114, 131, 136, 139, 145, 150, 152, 167, 168, 173, 178, 179, 194, 200, 203, 206, 225, 228, 230, 276, 281, 288, 306, 325, 330, 332, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 376, 387, 390, 392, 397, 406, 414, 416, 437], "msdl": [8, 21, 27, 52, 54, 113, 154, 178, 203, 306, 355, 374, 390, 392, 397, 435], "multiscal": [8, 27, 40, 41, 113, 114, 124, 129, 152, 197, 227, 391, 397], "parcel": [8, 9, 22, 23, 27, 46, 59, 113, 114, 117, 124, 129, 133, 136, 137, 138, 141, 148, 150, 152, 155, 172, 173, 174, 179, 185, 195, 197, 198, 199, 201, 202, 203, 205, 207, 209, 214, 225, 228, 304, 306, 311, 322, 323, 325, 329, 362, 374, 375, 379, 382, 389, 391, 397, 406, 407, 435, 437], "colormap": [8, 19, 21, 23, 27, 86, 113, 133, 136, 137, 138, 139, 141, 146, 152, 209, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 377, 378, 379, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 437], "global": [8, 27, 113, 114, 144, 152, 166, 167, 177, 193, 194, 205, 218, 239, 256, 257, 300, 312, 322, 323, 336, 378, 404], "carpet": [8, 27, 113, 144, 152, 194, 218, 300, 312, 336, 378], "haxbi": [8, 15, 16, 27, 28, 45, 94, 102, 113, 114, 116, 132, 133, 152, 163, 165, 173, 177, 179, 217, 249, 304, 306, 311, 325, 331, 370, 377, 389, 392, 397, 399, 435, 437], "technic": [8, 27, 64, 67, 100, 113, 153, 165, 166, 225, 232, 268, 272, 396, 397, 422], "illustr": [8, 27, 49, 66, 67, 68, 85, 90, 93, 101, 108, 113, 159, 167, 178, 179, 396, 397, 422], "surfac": [8, 12, 27, 28, 45, 55, 60, 73, 97, 109, 110, 112, 113, 114, 116, 124, 125, 133, 135, 137, 138, 139, 141, 144, 145, 148, 150, 152, 170, 172, 173, 174, 185, 199, 207, 217, 220, 224, 237, 238, 246, 249, 269, 277, 284, 288, 290, 306, 342, 356, 379, 384, 387, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 437], "scheme": [8, 27, 29, 33, 36, 37, 98, 113, 144, 152, 153, 159, 160, 162, 166, 187, 249, 250, 251, 252, 342, 396, 397, 422], "cortic": [8, 23, 24, 27, 28, 45, 55, 64, 67, 69, 113, 114, 133, 135, 138, 144, 152, 154, 168, 173, 199, 207, 209, 213, 217, 218, 237, 306, 379, 395, 396, 397, 398, 399, 400, 401, 402, 421, 422, 437], "option": [8, 9, 13, 15, 21, 23, 27, 42, 51, 56, 68, 72, 89, 102, 111, 113, 116, 121, 123, 124, 125, 131, 133, 134, 135, 136, 141, 144, 145, 146, 147, 148, 150, 152, 154, 159, 161, 167, 168, 172, 175, 177, 179, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 268, 269, 271, 272, 273, 274, 276, 277, 278, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 303, 305, 309, 311, 312, 313, 314, 315, 316, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 422, 435], "seed": [8, 27, 46, 48, 59, 100, 113, 138, 150, 152, 168, 176, 207, 214, 237, 238, 251, 252, 281, 288, 290, 325, 331, 332, 342, 355, 392, 395, 396, 397, 398, 401, 406, 408, 420, 435, 437], "connect": [8, 22, 26, 27, 49, 50, 58, 59, 88, 94, 97, 109, 111, 114, 126, 131, 133, 134, 141, 144, 149, 152, 154, 156, 158, 167, 168, 169, 172, 173, 174, 178, 185, 186, 187, 193, 197, 203, 205, 206, 207, 209, 214, 220, 225, 237, 238, 281, 284, 297, 300, 308, 318, 322, 323, 325, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 355, 376, 379, 381, 389, 392, 395, 396, 397, 398, 404, 407, 408, 420, 435, 436, 437], "onto": [9, 16, 23, 40, 50, 69, 133, 152, 157, 167, 173, 177, 335, 338, 381, 390, 435], "vol_to_surf": [9, 37, 69, 108, 135, 144, 146, 152, 168, 387, 393, 394, 395, 396, 400, 435], "plot_surf_stat_map": [9, 23, 24, 27, 37, 69, 108, 133, 135, 137, 141, 144, 148, 149, 150, 152, 168, 387, 393, 394, 437], "add": [9, 14, 15, 20, 31, 40, 41, 50, 56, 63, 69, 102, 117, 122, 123, 124, 125, 131, 133, 134, 136, 138, 141, 146, 150, 152, 157, 159, 162, 164, 167, 172, 175, 187, 204, 205, 228, 230, 247, 299, 322, 331, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 398, 400, 402, 417, 418, 435], "contour": [9, 15, 18, 21, 87, 88, 125, 133, 141, 144, 146, 150, 152, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 390, 391, 394, 437], "plot_surf_contour": [9, 125, 144, 152], "stat_img": [9, 13, 14, 15, 16, 90, 93, 276, 281, 294, 297, 415, 416], "load_sample_motor_activation_imag": [9, 13, 14, 15, 16, 90, 93, 124, 152], "fsaverag": [9, 22, 23, 24, 37, 62, 69, 108, 124, 125, 138, 146, 152, 237, 267, 387, 400, 422, 435], "fetch_surf_fsaverag": [9, 22, 23, 37, 69, 108, 124, 138, 144, 146, 150, 152, 168, 207, 387, 393, 394, 395, 396, 400, 422, 435], "curvatur": [9, 23, 124, 152, 237], "inflat": [9, 22, 23, 37, 69, 237, 387, 393, 394, 395, 396, 400, 402, 421, 422], "hemispher": [9, 22, 23, 37, 58, 79, 86, 94, 108, 131, 132, 136, 152, 157, 178, 199, 207, 208, 237, 238, 262, 263, 264, 267, 281, 294, 317, 343, 351, 374, 377, 379, 382, 384, 385, 387, 388, 390, 391, 392, 393, 395, 396, 400, 416, 435], "whose": [9, 69, 166, 172, 186, 187, 189, 272, 306, 422], "vertex": [9, 24, 207, 258, 260, 393, 394, 395, 396, 422], "neg": [9, 14, 17, 42, 51, 58, 66, 77, 79, 80, 90, 102, 106, 114, 145, 148, 152, 164, 169, 172, 193, 225, 255, 296, 297, 314, 318, 342, 384, 392, 396, 415, 422, 435], "curv_right": [9, 237], "load_surf_data": [9, 23, 133, 152], "curv_right_sign": 9, "sign": [9, 14, 23, 42, 102, 103, 124, 152, 164, 177, 254, 255, 298, 318, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379, 384, 390, 398, 400, 402], "textur": [9, 69, 108, 422], "pial_right": [9, 69, 108, 237, 387, 400, 435], "fig": [9, 11, 18, 24, 38, 40, 41, 42, 49, 57, 61, 63, 65, 68, 79, 91, 100, 101, 105, 106, 111, 387, 393, 435], "infl_right": [9, 69, 108, 237, 387, 400], "hemi": [9, 22, 23, 37, 69, 108, 393, 395, 396, 435], "right": [9, 12, 18, 20, 22, 25, 32, 40, 44, 50, 58, 65, 66, 69, 72, 76, 79, 80, 86, 94, 98, 108, 131, 136, 141, 144, 146, 152, 156, 157, 163, 167, 174, 178, 193, 199, 201, 202, 207, 221, 223, 231, 237, 238, 251, 252, 281, 294, 295, 313, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 374, 377, 379, 380, 382, 384, 385, 387, 388, 389, 390, 391, 392, 393, 395, 396, 400, 416, 435, 437], "bg_map": [9, 22, 23, 37, 69, 108, 387, 393, 395, 396, 400, 402, 435], "recent": [9, 132, 135, 136, 138, 148, 152, 158, 175], "version": [9, 19, 20, 22, 32, 35, 36, 40, 41, 42, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 61, 64, 67, 70, 71, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 116, 121, 123, 126, 128, 131, 132, 133, 134, 135, 136, 138, 140, 141, 144, 146, 147, 148, 149, 150, 152, 165, 166, 167, 175, 177, 179, 185, 186, 187, 191, 192, 193, 195, 197, 198, 200, 202, 204, 205, 206, 207, 208, 209, 213, 214, 215, 219, 228, 230, 232, 233, 234, 237, 238, 240, 241, 242, 243, 244, 245, 249, 250, 251, 252, 253, 254, 255, 256, 257, 278, 281, 284, 290, 294, 296, 298, 299, 303, 308, 309, 310, 315, 318, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 335, 338, 342, 378, 389, 390, 393, 395, 396, 403, 404, 405, 406, 408, 409, 410, 412, 415, 418, 422, 435], "2": [3, 6, 9, 10, 11, 12, 14, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 87, 88, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 105, 107, 108, 113, 114, 117, 119, 121, 122, 123, 133, 135, 136, 138, 139, 146, 147, 148, 157, 160, 164, 165, 166, 167, 169, 174, 175, 178, 179, 185, 186, 187, 191, 192, 193, 195, 196, 197, 198, 199, 200, 203, 204, 205, 206, 208, 209, 214, 215, 216, 217, 218, 219, 223, 225, 228, 230, 232, 234, 236, 237, 238, 240, 241, 243, 244, 249, 250, 251, 252, 253, 254, 255, 256, 257, 268, 271, 272, 273, 274, 281, 283, 288, 290, 294, 296, 297, 299, 305, 306, 309, 310, 311, 312, 315, 316, 318, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 379, 386, 388, 389, 390, 391, 392, 393, 395, 397, 399, 405, 406, 408, 409, 410, 412, 415, 418, 419, 422, 435, 436], "instal": [9, 113, 123, 133, 138, 141, 148, 149, 152, 174, 175, 201, 202, 301, 327, 330, 393, 395, 396, 406, 435], "configur": [9, 15, 124, 125, 152, 167, 175, 178, 179, 185, 256, 257, 281, 294, 323, 325, 326, 327, 328, 329, 330, 331, 332, 403, 404, 405, 406], "instead": [9, 32, 35, 36, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 66, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 111, 116, 123, 124, 126, 128, 131, 132, 134, 135, 136, 138, 141, 145, 147, 148, 149, 150, 152, 165, 166, 167, 168, 178, 179, 185, 186, 187, 232, 249, 250, 251, 252, 253, 254, 255, 256, 257, 271, 281, 294, 325, 326, 327, 328, 329, 330, 331, 332, 342, 403, 404, 405, 406], "graph_object": 9, "noqa": [9, 58, 72, 98, 205, 249, 251, 384], "f401": 9, "except": [9, 49, 52, 53, 57, 58, 63, 72, 78, 100, 103, 145, 148, 152, 165, 167, 255, 309, 342], "importerror": [9, 52, 53, 57, 58, 63, 78, 141, 152], "bg_on_data": [9, 22, 23, 387, 393, 395, 396, 400, 402], "specifi": [9, 14, 15, 32, 56, 61, 62, 66, 69, 71, 75, 78, 79, 80, 81, 84, 86, 89, 94, 95, 101, 107, 108, 117, 122, 125, 135, 138, 139, 141, 144, 145, 146, 147, 148, 150, 152, 153, 154, 164, 166, 168, 169, 175, 177, 178, 179, 201, 202, 206, 228, 229, 231, 233, 240, 241, 242, 243, 244, 245, 249, 250, 251, 252, 254, 255, 256, 257, 271, 273, 274, 277, 281, 284, 288, 289, 290, 294, 295, 299, 303, 311, 314, 316, 322, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 339, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 378, 382, 384, 385, 387, 389, 390, 391, 392, 393, 395, 396, 399, 400, 401, 402, 404, 406, 416, 417, 418, 422, 435], "matplolib": 9, "With": [9, 14, 32, 56, 78, 89, 162, 166, 169, 186, 189, 277, 323, 418, 421, 436], "custom": [9, 15, 22, 23, 47, 68, 124, 138, 146, 148, 152, 164, 176, 281, 283, 288, 356, 393, 395, 396, 414, 435, 437], "plotlysurfacefigur": [9, 148, 152, 393], "similar": [9, 23, 24, 30, 48, 55, 79, 94, 100, 101, 116, 126, 138, 139, 141, 148, 152, 153, 156, 158, 160, 161, 164, 171, 172, 179, 251, 252, 323], "api": [9, 44, 103, 104, 107, 111, 121, 122, 123, 124, 125, 128, 130, 131, 132, 133, 134, 135, 136, 138, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 167, 175, 185, 256, 257, 281, 294, 325, 326, 327, 328, 329, 330, 331, 332, 338, 403, 404, 405, 406, 437], "static": [9, 344, 399], "requir": [9, 20, 36, 42, 47, 55, 63, 68, 69, 72, 75, 78, 93, 117, 126, 131, 133, 135, 144, 148, 149, 152, 154, 157, 162, 164, 166, 167, 169, 172, 174, 175, 177, 178, 179, 187, 232, 297, 317, 322, 323, 327, 330, 342, 406, 407, 435, 436], "kaleido": [9, 148, 152, 393, 395, 396, 435, 436], "uncom": [9, 16, 22, 52, 54, 58], "line": [5, 9, 14, 21, 24, 48, 51, 91, 159, 166, 167, 232, 299, 398, 418, 422, 436], "savefig": [9, 15, 41, 55, 61, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 379, 382, 384, 385, 388, 390, 391, 392, 435], "right_hemispher": 9, "plot_glass_brain": [9, 13, 14, 62, 79, 80, 101, 105, 107, 131, 141, 149, 150, 152, 171, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 392, 435], "plot_ab": [9, 14, 62, 79, 80, 101, 105, 346, 384, 435], "rang": [9, 23, 41, 44, 47, 49, 53, 55, 57, 62, 68, 70, 78, 79, 80, 91, 95, 100, 102, 105, 131, 135, 145, 152, 166, 167, 186, 189, 200, 298, 318, 384, 387, 392, 396, 398, 399, 400, 402], "51": [6, 9, 11, 17, 30, 33, 36, 39, 40, 42, 43, 48, 53, 62, 64, 73, 101, 102, 105, 107, 108, 109, 114, 158, 197, 256], "destrieux_atla": [9, 22, 23], "fetch_atlas_surf_destrieux": [9, 22, 23, 125, 133, 152, 435], "map_right": [9, 207], "regions_dict": 9, "b": [9, 14, 15, 23, 30, 40, 41, 49, 56, 58, 72, 91, 114, 117, 167, 175, 195, 199, 205, 206, 209, 215, 225, 233, 237, 272, 322, 323, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 435], "g_postcentr": 9, "postcentr": [9, 91], "gyru": [9, 91, 208], "g_precentr": 9, "precentr": [9, 91], "indic": [9, 23, 30, 32, 41, 50, 54, 66, 72, 79, 86, 130, 133, 138, 152, 157, 164, 167, 172, 175, 177, 193, 195, 196, 199, 201, 202, 204, 205, 208, 209, 217, 228, 235, 236, 249, 250, 251, 252, 254, 255, 256, 257, 281, 284, 300, 312, 314, 315, 317, 325, 327, 328, 330, 331, 332, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 382, 385, 390, 391, 392, 393, 394, 395, 396, 399, 400, 402, 406, 408, 415], "label": [6, 9, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 47, 49, 52, 53, 54, 58, 61, 65, 66, 68, 69, 83, 91, 94, 96, 98, 100, 102, 103, 108, 111, 113, 114, 116, 123, 124, 130, 133, 138, 141, 145, 146, 148, 150, 152, 154, 156, 159, 160, 162, 164, 167, 172, 177, 178, 179, 195, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 213, 217, 227, 249, 250, 251, 252, 253, 254, 255, 263, 277, 281, 284, 288, 290, 295, 319, 322, 323, 326, 329, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 374, 375, 377, 378, 379, 382, 384, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 415, 420], "regions_indic": 9, "sulc_right": [9, 69, 108, 237, 387, 400, 435], "legend": [9, 18, 30, 32, 34, 42, 43, 49, 58, 61, 68, 91, 394], "color": [9, 14, 15, 18, 21, 24, 30, 32, 34, 49, 50, 51, 70, 86, 88, 139, 141, 144, 146, 150, 152, 156, 157, 167, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 378, 379, 382, 383, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 435], "k": [9, 18, 22, 30, 32, 34, 35, 41, 42, 49, 51, 68, 81, 84, 91, 98, 111, 114, 159, 162, 164, 166, 187, 215, 225, 233, 249, 250, 251, 252, 254, 255, 273, 274, 281, 290, 299, 322, 323, 329, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 379, 382, 384, 385, 388, 390, 391, 392, 403, 418], "low": [9, 42, 66, 71, 94, 104, 138, 144, 152, 159, 165, 166, 167, 169, 175, 177, 178, 179, 237, 249, 250, 251, 252, 254, 255, 299, 322, 326, 327, 328, 329, 330, 331, 332, 387, 400, 404, 406, 417, 418], "fsaverage5": [9, 22, 23, 24, 37, 69, 108, 133, 138, 152, 207, 237, 238, 267, 387, 400, 422], "high": [9, 31, 39, 49, 56, 65, 66, 89, 94, 114, 138, 144, 145, 146, 152, 160, 161, 166, 167, 169, 172, 174, 175, 178, 179, 195, 204, 225, 237, 249, 250, 251, 252, 254, 255, 269, 281, 288, 299, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 387, 400, 404, 406, 417, 418], "finer": [9, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370], "big_fsaverag": 9, "big_textur": 9, "fine": [9, 89, 114, 132, 152, 154, 179, 200, 253, 256, 257, 322, 328, 331, 404, 435], "plot_img_on_surf": [9, 125, 144, 146, 152], "choic": [9, 19, 66, 68, 71, 111, 128, 152, 153, 154, 160, 162, 163, 166, 167, 187, 198, 254, 255, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 374, 406, 437], "orient": [9, 141, 144, 152, 166, 167, 313], "surf_mesh": [9, 387, 393, 394, 395, 396, 400, 402, 421, 422, 435], "freesurf": [9, 22, 23, 69, 108, 133, 138, 150, 152, 168, 207, 237, 258, 393, 394, 395, 396, 402, 420, 421, 422], "medial": [9, 23, 37, 58, 91, 114, 164, 387, 393, 395, 396], "left": [9, 12, 20, 22, 23, 25, 34, 37, 40, 44, 49, 50, 51, 58, 65, 66, 68, 72, 76, 77, 79, 80, 86, 94, 101, 105, 108, 131, 132, 136, 141, 144, 146, 152, 157, 174, 178, 193, 199, 201, 202, 207, 221, 223, 231, 237, 238, 281, 294, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 374, 377, 378, 379, 382, 384, 385, 387, 388, 389, 390, 391, 392, 393, 395, 396, 400, 416], "view_surf": [9, 22, 138, 141, 152, 398, 399, 400, 401, 437], "view_img_on_surf": [9, 138, 139, 141, 146, 152, 398, 399, 401, 402, 437], "atlas": [9, 10, 22, 46, 58, 59, 113, 114, 117, 145, 146, 152, 155, 158, 167, 169, 172, 177, 178, 179, 185, 200, 201, 202, 209, 214, 218, 243, 325, 326, 327, 329, 330, 374, 375, 379, 390, 391, 394, 395, 397, 398, 399, 401, 437], "90": [6, 9, 12, 22, 23, 30, 32, 33, 36, 39, 40, 42, 43, 44, 47, 50, 53, 56, 62, 63, 71, 77, 79, 91, 99, 101, 102, 103, 105, 114, 126, 139, 147, 152, 157, 322, 323, 393, 395, 396, 399, 419, 435], "output": [9, 16, 22, 33, 34, 36, 41, 44, 51, 52, 54, 56, 58, 66, 67, 69, 80, 94, 108, 115, 116, 123, 124, 130, 136, 148, 150, 152, 153, 158, 163, 167, 172, 174, 176, 178, 179, 185, 186, 188, 189, 190, 191, 192, 249, 250, 251, 252, 253, 254, 255, 256, 257, 263, 264, 271, 273, 274, 278, 281, 294, 296, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 311, 313, 314, 315, 316, 317, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 377, 378, 384, 385, 387, 390, 391, 392, 399, 400, 403, 404, 405, 406, 409, 410, 412, 413, 415, 416, 422, 435, 437], "cell": [9, 16, 22, 36, 49, 52, 53, 54, 58, 62, 75, 77, 169, 172], "open": [9, 16, 22, 52, 54, 58, 89, 91, 92, 98, 108, 114, 123, 152, 166, 167, 172, 173, 174, 176, 181, 214, 232, 269, 281, 294, 334, 335, 336, 337, 338, 339, 398, 399, 400, 401, 402, 405, 414, 416, 435, 436, 437], "open_in_brows": [9, 16, 22, 33, 52, 54, 58, 61, 62, 64, 75, 91, 92, 138, 152, 179, 398, 399, 400, 401, 402, 414, 416, 435], "don": [9, 24, 33, 66, 81, 117, 167, 174, 175, 228, 230, 387, 422, 435], "ourselv": 9, "vol_to_surf_kwarg": [9, 146, 152, 400], "allow": [9, 20, 24, 40, 48, 51, 58, 63, 89, 99, 100, 101, 102, 116, 124, 125, 132, 134, 139, 141, 145, 146, 149, 150, 152, 153, 159, 166, 167, 168, 170, 172, 179, 185, 186, 187, 215, 223, 234, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 284, 294, 296, 319, 322, 325, 326, 327, 328, 329, 330, 331, 332, 389, 403, 404, 405, 406], "grain": [9, 70, 114, 200, 253], "resampl": [3, 9, 11, 29, 30, 32, 33, 34, 35, 36, 43, 48, 49, 52, 53, 54, 56, 66, 71, 75, 83, 91, 92, 96, 98, 113, 116, 124, 130, 131, 134, 135, 141, 145, 147, 148, 152, 176, 228, 230, 232, 242, 243, 245, 246, 249, 250, 251, 252, 254, 255, 256, 257, 294, 300, 304, 309, 311, 313, 314, 315, 326, 327, 328, 329, 330, 331, 334, 336, 337, 338, 339, 384, 385, 391, 392, 397, 399, 404, 409, 422, 437], "interpol": [9, 24, 40, 41, 44, 52, 66, 75, 84, 130, 152, 228, 313, 314, 315, 384, 385, 391, 392, 399, 418, 422], "volumetr": [9, 23, 168, 177, 342], "avoid": [9, 52, 53, 54, 58, 71, 136, 141, 150, 152, 164, 166, 167, 169, 177, 249, 250, 251, 252, 269, 294, 296, 303, 308, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 417, 435], "neighbor": [9, 37, 49, 94, 141, 152, 173, 253, 384, 385, 391, 392, 399, 404, 405, 411, 422], "nearest": [9, 40, 41, 44, 49, 66, 75, 84, 114, 141, 150, 152, 172, 228, 313, 314, 315, 384, 385, 391, 392, 399, 405, 411, 415, 422], "radiu": [9, 36, 37, 44, 55, 58, 61, 100, 128, 152, 163, 168, 172, 179, 213, 253, 332, 422, 437], "achiev": [9, 15, 55, 71, 93, 159, 166, 174, 178, 179, 189], "destrieux": [9, 22, 23, 111, 114, 122, 125, 133, 144, 152, 199, 207, 265, 435], "fetch_atlas_destrieux_2009": [9, 154], "legacy_format": [9, 17, 21, 42, 43, 47, 58, 75, 76, 77, 79, 80, 81, 105, 106, 148, 152, 193, 199, 200, 211, 212, 213, 221, 222, 223, 232], "n_sampl": [9, 44, 47, 77, 81, 102, 105, 106, 185, 186, 187, 249, 250, 251, 252, 254, 255, 256, 257, 281, 294, 299, 325, 328, 331, 342, 403, 405, 411, 417, 418, 422], "symmetric_cmap": [9, 22, 125, 139, 152, 393, 398, 399, 400, 402, 435], "plot_3d_map_to_surface_project": [9, 27, 146, 152, 400], "refer": [10, 19, 46, 48, 59, 66, 69, 78, 93, 94, 98, 106, 113, 114, 115, 116, 123, 124, 125, 126, 131, 139, 146, 148, 149, 150, 152, 159, 163, 167, 168, 169, 171, 172, 177, 178, 179, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 435, 437], "dataset_ho": 10, "fetch_atlas_harvard_oxford": [10, 21, 56, 91, 128, 149, 152, 154, 167, 202, 407], "cort": [10, 21, 56, 91, 154, 201, 202], "maxprob": [10, 56, 91, 155, 201, 202, 437], "thr25": [10, 56, 91, 154, 201, 202], "2mm": [10, 21, 56, 91, 123, 147, 152, 154, 164, 200, 201, 202], "dataset_ju": 10, "fetch_atlas_juelich": [10, 147, 149, 152, 201], "thr0": [10, 201, 202], "1mm": [10, 123, 147, 152, 201, 202, 205, 242, 243, 245, 335], "atlas_ho_filenam": 10, "atlas_ju_filenam": 10, "roi": [10, 17, 21, 23, 25, 28, 33, 45, 56, 58, 83, 86, 88, 91, 96, 99, 113, 114, 117, 125, 133, 141, 144, 152, 159, 174, 176, 199, 205, 211, 212, 213, 217, 228, 249, 304, 306, 309, 311, 312, 316, 317, 325, 329, 331, 382, 384, 391, 392, 394, 395, 397, 435, 437], "locat": [10, 15, 22, 23, 25, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 47, 49, 52, 53, 54, 55, 56, 58, 70, 75, 77, 89, 91, 92, 94, 95, 101, 102, 105, 108, 138, 147, 152, 166, 169, 175, 177, 179, 186, 189, 195, 211, 213, 214, 229, 231, 253, 254, 255, 256, 257, 281, 284, 294, 300, 326, 327, 328, 329, 330, 331, 332, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 404, 406, 435], "view_typ": [10, 50, 87, 88, 144, 152, 157, 390, 391], "plot_atla": [10, 27], "common": [11, 49, 66, 68, 71, 94, 100, 133, 141, 147, 149, 152, 153, 159, 162, 164, 166, 167, 169, 171, 176, 178, 189, 198, 306, 314, 315, 319, 328, 337, 339, 437], "qualiti": [11, 62, 70, 77, 105, 114, 138, 152, 167, 168, 169, 175, 179, 193, 225, 326, 329, 378, 404], "mri": [11, 41, 56, 60, 73, 94, 100, 113, 114, 116, 148, 152, 167, 168, 169, 170, 172, 174, 177, 193, 195, 205, 214, 218, 232, 283, 322, 323], "known": [11, 33, 34, 100, 144, 159, 160, 164, 167, 169, 205, 271, 273, 274, 281, 378], "power": [11, 56, 58, 75, 77, 79, 114, 116, 122, 132, 144, 152, 153, 160, 161, 165, 172, 177, 179, 211, 212, 322, 323, 378], "grayplot": [11, 144, 152, 378], "plot_carpet": [11, 27, 125, 144, 145, 149, 150, 152, 435], "adhd_dataset": [11, 61, 168], "fetch_adhd": [11, 61, 128, 152], "n_subject": [11, 23, 39, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 75, 76, 77, 78, 79, 80, 81, 85, 89, 91, 92, 95, 99, 104, 105, 106, 128, 132, 152, 157, 166, 179, 185, 186, 187, 189, 193, 194, 214, 222, 223, 226, 232, 238, 248, 266], "infer": [11, 49, 62, 65, 76, 79, 84, 100, 102, 114, 167, 169, 171, 172, 276, 284, 296, 314, 321, 342, 378], "header": [3, 11, 29, 30, 32, 33, 34, 35, 36, 94, 98, 101, 121, 125, 139, 141, 149, 152, 177, 299, 302, 312, 378, 418], "often": [11, 30, 32, 35, 36, 43, 48, 86, 92, 94, 116, 158, 159, 160, 164, 169, 172, 174, 177, 178, 179, 271, 273, 274], "overwrit": [11, 56, 228, 230, 343, 345, 346], "particular": [11, 15, 33, 66, 87, 98, 117, 127, 148, 152, 154, 162, 164, 166, 174, 175, 177, 230, 249, 250, 251, 252, 271, 273, 274, 288, 319, 422], "field": [11, 44, 117, 141, 152, 169, 172, 177, 228, 249, 250, 251, 252, 256, 257, 282, 284, 314, 319, 320, 328, 331, 404, 421, 422], "explicit": [11, 48, 60, 72, 73, 113, 141, 147, 152, 167, 172, 174, 216, 230, 278, 281, 297, 311, 323, 392, 397, 418], "build": [11, 18, 21, 41, 46, 49, 50, 51, 58, 71, 100, 113, 115, 123, 124, 125, 133, 152, 155, 160, 162, 164, 169, 177, 179, 281, 404, 437], "mask_img": [11, 25, 29, 32, 33, 34, 35, 36, 39, 40, 41, 44, 49, 52, 53, 54, 56, 58, 64, 66, 67, 70, 75, 89, 91, 92, 98, 102, 103, 116, 125, 135, 139, 143, 144, 148, 152, 159, 164, 167, 178, 179, 240, 253, 264, 276, 281, 284, 294, 297, 298, 299, 305, 318, 326, 327, 328, 329, 330, 331, 332, 333, 340, 341, 376, 378, 387, 405, 406, 408, 409, 410, 411, 412, 413, 422], "compute_epi_mask": [11, 25, 70, 89, 178, 179, 249, 250, 251, 252, 256, 257, 328, 331, 404], "grai": [11, 38, 40, 41, 42, 43, 75, 89, 138, 152, 164, 171, 173, 232, 249, 250, 251, 252, 256, 257, 328, 331, 377, 378, 404, 422], "matter": [11, 24, 42, 43, 56, 66, 75, 89, 131, 144, 147, 152, 159, 164, 166, 167, 171, 173, 178, 179, 214, 218, 219, 232, 241, 242, 243, 244, 245, 249, 250, 251, 252, 256, 257, 322, 328, 331, 335, 338, 404, 422], "white": [11, 24, 40, 42, 56, 66, 75, 89, 129, 144, 146, 147, 152, 166, 178, 179, 214, 218, 232, 237, 242, 243, 244, 245, 249, 250, 251, 252, 256, 257, 322, 328, 331, 335, 338, 393, 394, 395, 396, 399, 400, 402, 404, 421, 422], "cerebrospin": [11, 56, 218, 322], "fluid": [11, 56, 218, 322], "icbm152": [11, 147, 152, 172, 218, 219, 242, 243, 245], "fetch_icbm152_2009": [11, 21, 75, 219, 243], "atlas_img": [11, 53], "gm": [11, 21, 89, 147, 152, 179, 218, 219, 249, 250, 251, 252, 256, 257, 328, 331, 335, 338, 404], "wm": [11, 21, 56, 89, 147, 152, 179, 218, 249, 250, 251, 252, 256, 257, 323, 328, 331, 335, 338, 404], "csf": [11, 21, 56, 214, 218, 322, 323], "map_label": 11, "atlas_data": [11, 20], "get_fdata": [11, 80, 141, 152, 177], "discrete_vers": 11, "argmax": 11, "axi": [3, 11, 12, 16, 22, 23, 25, 30, 31, 34, 38, 40, 41, 44, 47, 50, 58, 84, 85, 94, 103, 104, 107, 111, 125, 148, 150, 152, 157, 178, 197, 249, 250, 251, 252, 254, 255, 281, 289, 314, 316, 343, 345, 346, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 373, 377, 379, 380, 382, 384, 385, 388, 390, 391, 392], "discrete_atlas_img": 11, "new_img_lik": [10, 11, 36, 94, 107, 125, 141, 150, 152, 178], "ax": [6, 9, 11, 18, 21, 22, 23, 24, 31, 38, 40, 49, 51, 57, 61, 63, 65, 66, 70, 75, 78, 79, 80, 84, 91, 100, 101, 105, 108, 111, 135, 145, 146, 152, 313, 314, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396], "subplot": [11, 12, 24, 38, 40, 41, 43, 44, 49, 51, 57, 63, 65, 66, 68, 70, 79, 80, 94, 100, 101, 105, 111, 123, 152, 383, 393, 394, 395, 396], "figsiz": [11, 12, 15, 18, 25, 30, 34, 35, 40, 42, 44, 48, 51, 57, 61, 62, 63, 65, 66, 68, 72, 79, 91, 94, 99, 100, 101, 105, 106, 111, 178, 389], "mask_label": [11, 378], "hcp": [12, 26, 114, 225], "workbench": 12, "cm": [12, 19, 20, 38, 41, 42, 44, 50, 53, 58, 102, 125, 138, 152, 157, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 378, 379, 382, 388, 389, 390, 391, 392, 398, 399, 400, 402, 435], "_cmap_d": 12, "nilearn_cmap": 12, "nmap": 12, "outer": [12, 89, 422], "arang": [12, 22, 30, 32, 33, 34, 48, 51, 63, 66, 69, 71, 94, 108], "ones": [12, 33, 44, 63, 66, 75, 79, 81, 100, 103, 105, 106, 124, 152, 161, 162, 164, 166, 254, 255, 288, 342, 403], "subplots_adjust": [12, 25, 40, 44, 49, 57, 68, 178], "bottom": [12, 15, 25, 40, 68, 178, 389], "99": [6, 10, 11, 12, 21, 23, 26, 30, 32, 33, 39, 40, 42, 43, 44, 58, 62, 71, 93, 101, 102, 105, 147, 152, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370], "imshow": [12, 38, 40, 41, 44, 84, 154, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 378, 382, 384, 385, 387, 389, 390, 391, 392, 393, 396], "off": [12, 14, 38, 40, 41, 66, 72, 115, 123, 131, 152, 166, 167, 251, 252, 281, 294, 334, 335, 336, 338, 339, 390, 391, 392, 399, 416], "fontsiz": [12, 25, 40, 49, 63, 75, 78, 80, 105, 139, 141, 152, 178, 343, 345, 346, 398, 400, 401, 402], "va": 12, "rotat": [12, 32, 63, 84, 94, 179, 322], "deprecated_cmap": 12, "vega10": 12, "vega20": 12, "vega20b": 12, "vega20c": 12, "spectral": [12, 23, 114, 198], "m_cmap": 12, "m": [12, 30, 37, 40, 41, 49, 64, 66, 67, 71, 75, 100, 102, 114, 131, 152, 164, 165, 167, 175, 195, 199, 204, 205, 206, 208, 209, 211, 212, 215, 217, 225, 233, 237, 271, 273, 274, 296, 342, 436], "datad": 12, "endswith": 12, "_r": 12, "sort": [12, 21, 30, 31, 35, 42, 43, 62, 116, 146, 152, 167, 175, 177, 215, 234, 248, 294, 296, 309, 342], "get_cmap": 12, "aspect": [12, 40, 137, 152, 162, 166, 179, 281, 294, 322, 416], "auto": [12, 131, 146, 152, 179, 256, 257, 309, 326, 327, 328, 329, 330, 331, 332, 344, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 373, 377, 379, 382, 384, 385, 387, 388, 390, 391, 392, 393, 395, 396, 398, 399, 401, 422], "plot_colormap": [12, 27], "_projector": [13, 14, 16, 47, 50, 51, 52, 58, 148, 152], "orthoprojector": [13, 14, 16, 47, 50, 51, 52, 58, 148, 152, 371], "0x7eff4bc541d0": [], "On": [13, 36, 49, 52, 53, 56, 58, 62, 66, 69, 75, 77, 103, 114, 139, 152, 154, 166, 174, 178, 179, 186, 189], "xz": [13, 14, 15, 49, 281, 294, 361, 362, 371, 372, 377, 379, 382, 384, 385, 388, 390, 391, 392, 416, 435], "xzprojector": [13, 14, 365, 367, 371], "0x7eff4d63e590": [], "lyrz": [13, 14, 58, 281, 294, 350, 371, 379, 384, 388, 416, 435], "053": 41, "plot_demo_glass_brain": [13, 27], "part": [14, 15, 49, 51, 55, 69, 89, 91, 111, 114, 123, 141, 147, 150, 152, 160, 166, 167, 168, 173, 178, 185, 191, 192, 201, 202, 218, 223, 249, 250, 251, 252, 256, 257, 296, 297, 318, 319, 320, 322, 328, 331, 334, 335, 336, 338, 339, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 389, 404], "through": [14, 31, 39, 42, 48, 51, 56, 64, 75, 91, 100, 123, 124, 145, 146, 148, 152, 153, 159, 160, 161, 164, 167, 172, 174, 228, 232, 251, 252, 281, 294, 296, 322, 323, 326, 329, 338, 343, 345, 346, 348, 349, 350, 351, 352, 359, 361, 363, 365, 367, 369, 403, 409, 414, 422], "includ": [14, 37, 39, 42, 43, 54, 58, 63, 66, 70, 77, 79, 80, 91, 100, 101, 105, 108, 111, 121, 124, 125, 131, 141, 143, 144, 148, 150, 152, 157, 159, 164, 165, 167, 168, 172, 174, 175, 177, 183, 185, 192, 195, 196, 197, 204, 205, 214, 219, 233, 240, 241, 244, 249, 250, 251, 252, 263, 264, 268, 272, 281, 294, 296, 306, 320, 321, 322, 326, 327, 328, 329, 330, 331, 334, 335, 336, 338, 339, 342, 379, 415, 426, 431], "ortho": [14, 15, 62, 281, 294, 354, 355, 371, 372, 377, 379, 382, 384, 385, 388, 390, 391, 392, 416, 435], "equival": [14, 81, 105, 123, 152, 164, 166, 169, 175, 223, 249, 250, 251, 252, 256, 257, 310, 326, 327, 328, 329, 330, 331, 334, 335, 336, 338, 339, 397, 404], "sagitt": [14, 94, 281, 294, 351, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 377, 379, 382, 384, 385, 388, 390, 391, 392, 416], "cut": [14, 49, 66, 94, 126, 136, 138, 139, 150, 152, 173, 281, 294, 335, 338, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 377, 379, 382, 384, 385, 388, 390, 391, 392, 399, 416, 435], "produc": [14, 24, 46, 59, 62, 64, 79, 100, 105, 113, 148, 150, 152, 169, 172, 179, 214, 247, 323, 325, 326, 327, 328, 329, 330, 331, 332, 355, 392, 406, 422, 435], "black": [14, 40, 104, 124, 125, 152, 167, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 379, 382, 384, 385, 388, 390, 391, 392, 399, 400, 402], "addition": [14, 15, 58, 70, 147, 152, 167, 171, 175, 178, 179, 342, 415], "coron": [14, 94, 281, 294, 343, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 377, 379, 382, 384, 385, 388, 390, 391, 392, 416], "yz": [14, 15, 31, 39, 281, 294, 367, 368, 371, 372, 377, 379, 382, 384, 385, 388, 390, 391, 392, 416, 435], "yzprojector": [14, 361, 365, 371], "yx": [14, 15, 116, 281, 294, 365, 366, 371, 372, 377, 379, 382, 384, 385, 388, 390, 391, 392, 416, 435], "yxprojector": [14, 361, 367, 371], "saw": 14, "lzr": [14, 53, 281, 294, 351, 371, 379, 384, 388, 416, 435], "enabl": [14, 79, 104, 125, 144, 148, 152, 159, 162, 173, 179, 184, 322, 347, 348, 349, 350, 351, 352, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 436], "lzrprojector": [14, 349, 371], "lyrzprojector": [14, 352, 371], "xprojector": [14, 363, 369, 371], "y": [6, 14, 15, 24, 31, 33, 34, 35, 36, 37, 40, 41, 44, 52, 54, 58, 62, 70, 71, 84, 92, 94, 101, 102, 105, 106, 111, 117, 133, 135, 138, 150, 152, 159, 160, 164, 167, 172, 175, 178, 179, 185, 186, 187, 203, 226, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 263, 264, 268, 271, 272, 273, 274, 281, 289, 290, 294, 296, 301, 325, 326, 327, 328, 329, 330, 331, 332, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 376, 377, 379, 382, 384, 385, 388, 390, 391, 392, 393, 394, 395, 396, 399, 402, 403, 404, 405, 406, 407, 415, 416, 435], "yprojector": [14, 359, 369, 371], "zprojector": [14, 359, 363, 371], "l": [14, 37, 41, 51, 56, 62, 70, 71, 76, 94, 114, 125, 141, 148, 152, 160, 165, 193, 195, 205, 206, 208, 209, 211, 212, 213, 217, 225, 232, 281, 294, 322, 323, 343, 345, 346, 347, 348, 349, 350, 351, 352, 371, 377, 379, 382, 384, 385, 388, 390, 391, 392, 416, 435], "lprojector": [14, 357, 371], "rprojector": [14, 347, 371], "inherit": [14, 272, 414], "customis": [14, 56, 154, 323], "focu": [14, 79, 154, 156, 166, 406], "add_contour": [14, 18, 134, 141, 152, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 435], "lzryprojector": [14, 350, 371], "sinc": [14, 19, 33, 39, 58, 64, 66, 75, 77, 81, 101, 108, 116, 123, 146, 152, 166, 169, 185, 195, 201, 202, 234, 284, 319, 320, 329, 330, 342, 346, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 378, 409, 410, 435], "empti": [14, 102, 108, 117, 125, 141, 149, 152, 167, 201, 202, 217, 249, 250, 251, 252, 319, 329, 330, 376, 389, 409, 410], "lzry": [14, 281, 294, 352, 371, 379, 384, 388, 416, 435], "choos": [14, 15, 24, 33, 34, 44, 47, 87, 162, 163, 169, 179, 249, 250, 251, 252, 281, 294, 323, 377, 379, 382, 384, 385, 388, 390, 391, 392, 403, 404, 416, 422, 437], "red": [14, 15, 18, 40, 51, 139, 152, 168, 169, 172, 435], "demonstr": [14, 39, 40, 56, 62, 65, 94, 104, 149, 152, 158, 159, 342, 435], "insid": [14, 21, 24, 34, 49, 55, 98, 162, 167, 185, 186, 187, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 299, 305, 319, 325, 326, 327, 328, 329, 330, 331, 332, 378, 390, 391, 394, 395, 403, 404, 405, 406, 422], "kei": [14, 43, 54, 58, 66, 79, 111, 116, 117, 125, 152, 154, 167, 174, 177, 195, 196, 197, 198, 201, 202, 206, 209, 218, 224, 228, 249, 250, 251, 252, 268, 272, 277, 281, 288, 290, 294, 296, 320, 321, 342, 353, 378, 387, 400], "vari": [14, 34, 66, 94, 95, 147, 152, 156, 162, 166, 174, 186, 187, 189, 300], "lr": [14, 16, 281, 294, 348, 371, 379, 384, 388, 416, 435], "lrprojector": [14, 371], "ad": [14, 15, 20, 21, 30, 40, 68, 69, 84, 123, 124, 125, 134, 135, 145, 147, 148, 149, 150, 152, 162, 166, 167, 168, 175, 185, 204, 205, 249, 250, 251, 252, 254, 255, 296, 303, 314, 318, 320, 321, 325, 326, 327, 328, 329, 330, 331, 332, 342, 343, 345, 346, 377, 378, 379, 382, 384, 385, 388, 390, 391, 392, 399, 406, 437], "chang": [14, 19, 40, 42, 51, 62, 67, 68, 102, 105, 106, 110, 111, 113, 119, 160, 162, 166, 167, 169, 175, 176, 185, 186, 187, 237, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 284, 289, 294, 308, 312, 314, 317, 318, 325, 326, 327, 328, 329, 330, 331, 332, 333, 342, 387, 393, 395, 396, 400, 402, 403, 404, 405, 406, 409, 410, 412, 415, 418, 436, 437], "lyr": [14, 281, 294, 349, 371, 379, 384, 388, 416, 435], "lyrprojector": [14, 351, 371], "draw": [14, 15, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 381, 422], "thick": [14, 47, 146, 152, 209, 237, 390, 391, 393, 396, 402, 420, 422], "width": [14, 32, 51, 66, 94, 172, 179, 249, 250, 251, 252, 256, 257, 281, 294, 296, 316, 326, 327, 328, 329, 330, 331, 332, 333, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 378, 379, 382, 384, 385, 388, 389, 390, 391, 392, 398, 404, 406, 408, 414, 416], "linewidth": [14, 18, 21, 42, 43, 48, 50, 61, 91, 390, 391, 398], "enough": [14, 58, 159, 166, 174, 179, 314], "unlik": [14, 20, 164, 169, 177, 323], "upper": [14, 40, 166, 271, 273, 274, 336, 339, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 378, 382, 384, 385, 387, 388, 390, 391, 392, 393, 396, 400, 402], "bound": [14, 84, 89, 134, 141, 152, 178, 256, 314, 343, 345, 346, 377, 378, 382, 384, 385, 387, 388, 390, 391, 392, 393, 396, 400, 402], "kept": [14, 117, 125, 152, 167, 191, 201, 202, 249, 250, 251, 252, 298, 299, 316, 334, 335, 336, 337, 338, 339, 340, 406, 408, 418], "infin": 14, "inf": [14, 54, 103, 299, 327, 330, 333, 336, 418], "plot_demo_glass_brain_extens": [14, 27], "techniqu": [15, 44, 114, 157, 158, 159, 160, 161, 162, 166, 172, 174, 179, 406], "essenti": [15, 68, 80, 172], "what": [15, 56, 66, 108, 149, 160, 166, 170, 175, 177, 179, 186, 268, 272, 305, 319, 419, 435, 437], "shown": [15, 21, 40, 54, 66, 70, 94, 117, 146, 152, 153, 158, 159, 168, 169, 206, 323, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379, 387, 388, 391, 398, 400, 402], "subclass": [15, 167, 372], "orthoslic": [2, 3, 4, 6, 10, 15, 16, 17, 25, 48, 50, 64, 67, 70, 75, 81, 86, 89, 94, 98, 148, 152, 353, 358, 360, 362, 364, 366, 368, 370, 372, 435], "implement": [15, 48, 49, 56, 66, 68, 98, 126, 133, 135, 141, 144, 145, 148, 149, 152, 153, 156, 157, 158, 160, 162, 164, 165, 166, 167, 172, 174, 175, 180, 201, 202, 249, 250, 253, 254, 255, 269, 271, 276, 281, 283, 285, 286, 287, 288, 291, 292, 293, 294, 296, 305, 322, 323, 342, 343, 344, 346, 356, 393, 395, 396, 406, 418, 419, 432], "interact": [15, 22, 47, 52, 54, 58, 100, 138, 139, 143, 148, 152, 155, 157, 167, 172, 173, 174, 398, 399, 401, 437], "precis": [15, 41, 52, 57, 61, 91, 124, 152, 153, 156, 157, 166, 174, 179, 185, 186, 187, 189, 190, 223, 249, 251, 271, 273, 274, 296, 342], "overlai": [15, 20, 21, 50, 157, 178, 399, 437], "tile": [15, 139, 152, 358, 372, 377, 382, 385, 390, 391, 392, 416, 435], "mosaic": [15, 145, 152, 353, 372, 377, 382, 385, 390, 391, 392, 416, 435], "wherea": [15, 49, 147, 152, 156, 160, 178, 337, 339, 340, 404], "mni": [15, 48, 52, 54, 66, 69, 93, 101, 108, 114, 117, 131, 141, 144, 150, 152, 154, 171, 172, 174, 178, 179, 195, 197, 203, 211, 212, 213, 218, 242, 243, 245, 249, 250, 251, 252, 301, 332, 335, 338, 377, 379, 382, 384, 385, 390, 391, 392, 398, 399, 401, 416, 435], "accordingli": [15, 148, 152, 319], "help": [15, 33, 58, 67, 94, 134, 138, 139, 152, 154, 160, 168, 179, 189, 436, 437], "haxby_anat_filenam": [15, 16], "haxby_mask_filenam": [15, 16], "haxby_func_filenam": [15, 16], "xyz": [15, 313, 353, 358, 360, 364, 370], "integ": [15, 84, 94, 128, 132, 141, 145, 148, 150, 152, 172, 177, 179, 187, 189, 193, 195, 197, 199, 201, 202, 204, 205, 208, 209, 228, 230, 254, 255, 256, 257, 281, 300, 334, 335, 336, 338, 339, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 382, 384, 385, 390, 391, 392, 394, 395, 407, 412, 413, 416], "36": [6, 11, 15, 16, 17, 23, 33, 36, 39, 40, 42, 43, 62, 71, 90, 91, 93, 100, 101, 102, 109, 111, 135, 138, 152, 197, 435], "27": [6, 10, 11, 15, 16, 17, 23, 33, 36, 39, 40, 42, 43, 44, 62, 64, 67, 90, 91, 93, 98, 101, 102, 103, 109, 114, 323, 406, 408, 435], "zslicer": [15, 70, 88, 360, 364, 372], "rather": [15, 54, 66, 94, 100, 117, 131, 133, 135, 137, 141, 146, 148, 152, 153, 166, 167, 177, 178, 186, 195, 228, 230, 256, 257, 296, 327, 330, 415], "impli": [15, 145, 152, 166, 185, 314, 333], "maximum": [15, 48, 66, 79, 89, 92, 94, 104, 141, 152, 164, 172, 179, 185, 186, 187, 189, 194, 201, 202, 228, 238, 249, 250, 251, 252, 256, 257, 268, 269, 272, 281, 290, 294, 296, 298, 316, 318, 326, 327, 328, 329, 330, 331, 332, 333, 346, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379, 384, 404, 406, 408, 409, 435], "xslicer": [9, 15, 364, 370, 372], "yslicer": [15, 92, 360, 370, 372], "again": [15, 49, 91, 103, 116, 167, 171, 174, 228, 230], "ncolorbar": 15, "stand": [15, 44, 141, 152, 172, 178, 435], "thu": [15, 31, 34, 39, 102, 104, 154, 159, 160, 161, 164, 165, 166, 172, 178, 179, 251, 252, 253, 254, 255, 269, 303, 323, 342], "xzslicer": [15, 49, 366, 368, 372], "similarli": [15, 55, 94, 177], "yxslicer": [15, 362, 368], "assign": [15, 86, 94, 156, 157, 169, 201, 202, 211, 213, 406, 407, 411], "yzslicer": [15, 39, 362, 366, 372], "case": [15, 23, 34, 40, 43, 48, 49, 50, 54, 62, 65, 66, 68, 72, 84, 89, 91, 92, 101, 108, 117, 131, 141, 144, 152, 153, 154, 156, 159, 160, 164, 166, 174, 175, 177, 192, 195, 199, 201, 202, 249, 250, 251, 252, 254, 255, 281, 283, 288, 294, 296, 297, 306, 314, 315, 316, 317, 320, 328, 329, 330, 331, 332, 336, 374, 377, 378, 379, 382, 384, 385, 387, 390, 391, 392, 399, 415, 416, 422, 435], "tiledslic": [15, 353, 355, 372], "situat": [15, 58, 153, 159, 160, 177, 316], "mosaicslic": [15, 355, 358, 372], "still": [15, 49, 66, 79, 91, 111, 117, 125, 148, 152, 164, 166, 175, 179, 228, 435], "tupl": [15, 179, 196, 203, 238, 249, 250, 251, 252, 254, 255, 256, 257, 271, 273, 274, 281, 284, 294, 303, 311, 314, 316, 319, 322, 328, 331, 334, 336, 337, 339, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 382, 385, 389, 390, 391, 392, 399, 404, 409, 416, 421, 422], "length": [3, 15, 55, 68, 77, 157, 167, 200, 203, 249, 250, 251, 252, 254, 255, 268, 272, 273, 274, 285, 286, 287, 291, 292, 293, 300, 325, 328, 331, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 377, 382, 385, 388, 389, 390, 391, 392, 404, 416, 422], "interpret": [15, 51, 70, 114, 155, 164, 165, 166, 169, 195, 199, 201, 202, 205, 206, 209, 310, 342, 435, 437], "process": [15, 16, 32, 36, 39, 42, 44, 50, 53, 62, 91, 94, 101, 102, 105, 114, 115, 116, 126, 152, 154, 157, 158, 159, 162, 166, 167, 169, 171, 172, 174, 175, 177, 178, 179, 186, 203, 218, 219, 223, 249, 250, 251, 252, 254, 255, 256, 257, 281, 294, 299, 300, 305, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 404, 405, 406, 412, 413, 418], "mean_haxby_img": [15, 16], "coregistr": [15, 130, 152, 172], "edg": [15, 47, 52, 54, 58, 94, 141, 152, 153, 154, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 379, 389, 398, 437], "being": [15, 89, 94, 123, 124, 125, 138, 141, 148, 152, 153, 166, 167, 169, 172, 175, 256, 288, 321, 327, 330, 337, 339, 378, 393, 395, 396, 400, 402, 406], "outlin": [15, 48, 89, 92, 158, 167, 394, 435], "manual": [15, 16, 19, 32, 34, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 81, 83, 89, 91, 92, 96, 98, 99, 100, 102, 103, 104, 105, 106, 113, 116, 153, 159, 174, 176, 179, 204, 205, 217, 256, 257, 304, 309, 311, 312, 316, 325, 329, 382, 391, 392, 393, 395, 396, 397, 435, 437], "34": [15, 23, 33, 36, 38, 39, 40, 42, 43, 44, 45, 62, 71, 87, 91, 96, 101, 102, 114, 164], "39": [6, 11, 15, 21, 23, 33, 36, 39, 40, 42, 43, 44, 51, 54, 59, 62, 71, 72, 91, 101, 102, 126, 128, 131, 152, 196, 203, 214], "blue": [15, 18, 40, 49, 70, 86], "fill": [15, 21, 62, 68, 94, 101, 108, 133, 141, 147, 152, 166, 179, 314, 315, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 390, 391, 414, 437], "transpar": [15, 23, 125, 141, 152, 179, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 379, 384, 385, 387, 388, 390, 391, 392, 393, 396, 398, 399, 400, 401, 402], "contourf": [15, 21, 48, 50, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370], "sphere": [15, 36, 37, 46, 55, 59, 113, 143, 146, 152, 163, 179, 185, 211, 212, 214, 237, 325, 332, 374, 379, 388, 389, 393, 394, 395, 396, 397, 398, 402, 421, 422, 435, 437], "marker_color": [15, 40, 55, 61, 100, 139, 141, 152, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 401, 435], "yellow": 15, "third": [15, 66, 81, 157, 290], "marker_s": [15, 40, 55, 61, 100, 139, 141, 152, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 401, 435], "size": [6, 9, 15, 22, 23, 26, 33, 40, 44, 48, 49, 53, 62, 69, 77, 79, 80, 81, 84, 91, 94, 102, 103, 105, 108, 111, 125, 128, 138, 139, 141, 148, 152, 157, 164, 165, 166, 169, 225, 232, 281, 294, 296, 297, 318, 326, 327, 329, 330, 334, 337, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 379, 388, 389, 393, 395, 396, 398, 401, 403, 404, 405, 406, 407, 408, 415, 416, 417, 422], "coord": [15, 37, 40, 50, 52, 54, 58, 70, 87, 100, 139, 141, 152, 157, 343, 345, 346, 374, 375, 379, 393, 394, 395, 396, 402, 435], "100": [3, 15, 31, 33, 34, 36, 39, 40, 41, 42, 43, 44, 49, 55, 62, 63, 75, 86, 89, 102, 103, 105, 117, 160, 169, 176, 187, 193, 205, 225, 228, 249, 250, 251, 252, 254, 255, 278, 281, 289, 290, 298, 305, 318, 419, 435, 437], "alter": [15, 145, 152], "bar": [15, 42, 102, 105, 138, 152, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 437], "scalebar": [15, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 435], "scale_": 15, "keyword": [15, 98, 117, 141, 152, 162, 166, 179, 187, 193, 228, 239, 299, 310, 323, 326, 327, 328, 329, 330, 331, 332, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 383, 385, 387, 389, 395, 396, 400, 418], "arg": [15, 111, 249, 250, 251, 252, 260, 325], "scale_s": [15, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370], "25": [6, 10, 11, 15, 21, 23, 27, 30, 32, 33, 36, 39, 40, 41, 42, 43, 44, 47, 59, 62, 71, 73, 77, 91, 94, 95, 98, 101, 102, 103, 105, 118, 152, 154, 225, 271, 273, 274, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379, 390, 398, 400, 401, 402], "scale_unit": [15, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370], "built": [15, 33, 42, 48, 124, 152, 169, 175, 249, 250, 251, 252, 404], "extens": [15, 133, 147, 152, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 390, 391, 392, 393, 394, 395, 396], "pdf": [15, 55, 68, 102, 114, 125, 150, 152, 164, 165, 198, 199, 205, 206, 208, 211, 217, 225, 232, 237, 299, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 390, 391, 392, 393, 394, 395, 396, 418], "svg": [15, 62, 125, 152, 321, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 390, 391, 392, 393, 394, 395, 396], "plot_stat_map_from_displai": 15, "sure": [15, 94, 113, 123, 152, 164, 167, 175, 254, 255, 436], "close": [15, 23, 37, 40, 49, 86, 148, 152, 153, 160, 166, 167, 169, 172, 219, 249, 250, 251, 252, 334, 335, 336, 338, 339, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 390, 391, 392, 393, 394, 395, 396, 411, 435], "plot_demo_more_plot": [15, 27], "easi": [16, 61, 69, 75, 94, 116, 117, 157, 158, 160, 163, 167, 168, 172, 174, 179, 322, 437], "coordin": [16, 19, 22, 23, 40, 49, 52, 54, 70, 94, 100, 114, 116, 122, 130, 133, 135, 136, 138, 144, 148, 150, 152, 155, 157, 166, 168, 169, 179, 203, 211, 212, 213, 237, 257, 258, 259, 260, 301, 314, 332, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 374, 375, 376, 377, 378, 379, 382, 384, 385, 388, 390, 391, 392, 393, 394, 395, 396, 398, 399, 401, 402, 415, 416, 421, 422, 435, 437], "66": [6, 10, 16, 17, 21, 33, 36, 39, 40, 42, 43, 62, 65, 71, 90, 93, 101, 102, 105], "web": [16, 114, 117, 138, 141, 152, 167, 228, 230, 281, 294, 398, 400, 401, 402, 416, 435], "alwai": [16, 100, 159, 162, 166, 167, 169, 179, 255, 271, 273, 274, 278, 322, 384, 392, 396, 399, 400, 402, 435], "fix": [16, 30, 58, 60, 64, 71, 73, 113, 120, 166, 167, 175, 178, 216, 268, 269, 272, 278, 281, 284, 311, 392, 397], "overlaid": [16, 71, 89, 92, 144, 146, 152, 390], "voxel_wis": 16, "reduc": [16, 29, 33, 34, 44, 49, 66, 79, 87, 94, 100, 137, 138, 141, 145, 152, 161, 165, 166, 167, 172, 179, 187, 232, 251, 252, 256, 257, 322, 323, 326, 329, 393, 395, 396, 400, 402, 403, 404, 405, 409], "flip": [16, 103, 132, 152, 197], "radiolog": [16, 125, 152, 343, 345, 346, 377, 379, 382, 384, 385, 388, 390, 391, 392], "ie": [16, 150, 152, 153, 158, 177, 271, 273, 274, 327, 330, 332], "plot_demo_plot": [16, 27], "modifi": [17, 49, 58, 94, 103, 131, 148, 152, 167, 179, 228, 230, 314, 315, 318, 393, 395, 396, 402, 417, 418], "leav": [17, 29, 33, 159, 164, 303], "unchang": [17, 66, 164, 185, 186, 187, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 325, 326, 327, 328, 329, 330, 331, 332, 403, 404, 405, 406], "localizer_dataset": [17, 77, 81, 105, 106], "fetch_localizer_button_task": [17, 131, 152, 222, 223, 435], "localizer_tmap_filenam": 17, "tmap": [17, 79, 221, 223, 435], "localizer_anat_filenam": 17, "plot_dim_plot": [17, 27], "func_filenam": [18, 25, 30, 31, 32, 33, 35, 48, 50, 53, 55, 58, 91, 92, 102, 104, 157, 178], "z_slice": [18, 42, 105], "facecolor": [18, 32, 40, 42, 106, 125, 152, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 379, 382, 384, 385, 388, 390, 391, 392], "mask_vt_filenam": [18, 94], "mask_house_filenam": 18, "mask_hous": [18, 32, 116, 177, 217], "mask_face_filenam": 18, "mask_fac": [18, 32, 116, 177, 217], "limegreen": 18, "zip": [6, 18, 20, 30, 32, 34, 38, 39, 41, 47, 50, 51, 53, 58, 71, 88, 99, 101, 103, 108, 111, 113, 157, 175, 203, 218], "antialias": 18, "trick": [18, 174], "sourceforg": 18, "net": [18, 28, 44, 45, 113, 165, 232, 249, 250, 254, 255, 392, 397], "user": [18, 29, 34, 39, 58, 66, 68, 100, 106, 111, 117, 123, 124, 125, 135, 138, 139, 141, 142, 146, 148, 149, 150, 152, 166, 167, 168, 169, 172, 173, 175, 176, 179, 181, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 436], "legend_guid": 18, "httpml": 18, "proxi": 18, "artist": 18, "patch": [18, 40, 41, 49, 175], "rectangl": [18, 40, 49, 84], "p_v": 18, "fc": 18, "p_h": 18, "p_f": 18, "face": [18, 28, 32, 33, 38, 45, 71, 94, 97, 98, 100, 109, 113, 114, 116, 124, 133, 146, 152, 159, 164, 168, 173, 177, 178, 179, 217, 218, 236, 249, 251, 253, 258, 259, 260, 304, 306, 309, 311, 312, 325, 331, 342, 370, 385, 389, 392, 393, 394, 395, 396, 397, 399, 402, 421, 422], "loc": [18, 32, 34, 42, 43, 49, 61, 68, 70, 91, 100, 343, 345, 346], "lower": [18, 31, 32, 39, 51, 70, 77, 89, 94, 128, 152, 158, 161, 165, 166, 172, 178, 185, 191, 192, 249, 250, 251, 252, 271, 273, 274, 336, 339, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 376, 377, 378, 382, 384, 385, 387, 388, 389, 390, 391, 392, 393, 396, 417], "plot_haxby_mask": [18, 27], "fetch_atlas_basc_multiscale_2015": [19, 124, 125, 129, 152], "symmetr": [9, 19, 47, 79, 134, 152, 166, 191, 192, 197, 201, 202, 218, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379, 387, 392, 393, 396, 398, 399, 400, 402], "sym": [19, 192, 197], "resolut": [19, 21, 75, 76, 93, 103, 114, 116, 123, 124, 134, 146, 147, 152, 157, 176, 195, 197, 200, 204, 205, 206, 214, 237, 240, 241, 242, 243, 244, 245, 276, 331, 335, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 387, 400, 406, 437], "197": [19, 33, 41, 96, 106, 109, 197, 306], "444": [19, 33, 85, 96, 197], "networks_64": 19, "networks_197": 19, "networks_444": 19, "itself": [19, 34, 66, 156, 185, 186, 187, 256, 257, 304, 404, 422], "bwr": [19, 53, 139, 152, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379, 398], "bwr_r": 19, "plot_multiscale_parcel": [19, 27], "compos": [20, 98, 172, 178, 179, 212, 249, 250, 251, 252], "node": [20, 23, 24, 58, 108, 139, 141, 144, 146, 152, 154, 179, 204, 237, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379, 387, 388, 398, 400, 401, 422, 435], "constitut": [20, 158], "leverag": [20, 144, 152, 173, 174, 249, 250, 404, 436], "less": [20, 48, 49, 50, 56, 66, 69, 77, 79, 88, 94, 100, 111, 117, 138, 139, 146, 152, 164, 166, 167, 169, 175, 272, 318, 373, 437], "fetch_atlas_msdl": [20, 21, 51, 52, 53, 54, 99, 130, 152, 154], "atlas_filenam": [20, 52, 54, 56, 154], "pcc": [20, 23, 51, 55], "dmn": [20, 51, 61], "acc": 20, "pariet": [20, 58, 91, 103, 203], "black_blu": 20, "black_green": 20, "black_pink": 20, "3rd": [20, 384, 385, 391, 392, 399], "4th": [20, 94, 114, 165, 172, 178, 273, 274, 311, 314, 390], "5th": 20, "6th": 20, "dmn_node": 20, "55": [20, 23, 33, 36, 39, 40, 42, 43, 44, 48, 62, 68, 101, 102, 105, 131, 152], "29": [11, 20, 23, 33, 36, 39, 40, 42, 43, 58, 62, 71, 72, 75, 81, 91, 101, 102, 103, 126, 152], "plot_overlai": [20, 27], "delin": 21, "filled_contour": [21, 50, 157, 390], "continu": [21, 39, 43, 52, 56, 154, 159, 160, 161, 165, 167, 172, 179, 228, 309, 313, 314, 315, 326, 327, 328, 329, 330, 331, 332, 384, 385, 390, 391, 392, 399, 407, 408], "plot_prob_atla": [21, 27, 48, 50, 87, 88, 128, 135, 136, 145, 152, 157, 158, 391, 435], "pick": [21, 157, 166, 169, 172, 219], "randomli": [21, 164], "alreadi": [21, 22, 33, 34, 49, 64, 89, 94, 101, 103, 107, 108, 117, 141, 148, 152, 157, 159, 160, 167, 174, 179, 228, 230, 294, 296, 315, 342, 406], "know": [21, 84, 117, 166, 169, 172, 192, 230], "tune": [21, 31, 32, 34, 39, 43, 89, 132, 152, 154, 159, 160, 162, 166, 169, 256, 257, 322, 328, 331, 404, 435], "allen": [21, 114, 133, 152, 196], "fetch_atlas_allen_2011": [21, 133, 152], "icbm": [21, 66, 75, 138, 152, 218], "tissu": [21, 172, 208], "ica": [21, 46, 50, 54, 59, 87, 92, 97, 104, 109, 113, 114, 117, 126, 152, 154, 155, 172, 173, 174, 183, 196, 206, 214, 225, 228, 240, 256, 257, 307, 316, 322, 323, 325, 330, 331, 390, 392, 397, 410, 435, 437], "brainmap": [21, 206], "smith_bm20": 21, "rsn28": [21, 196], "allen2011": 21, "smith2009": 21, "local": [21, 40, 41, 49, 60, 65, 66, 73, 76, 77, 79, 80, 81, 88, 97, 100, 101, 103, 107, 108, 109, 113, 114, 141, 142, 150, 152, 167, 168, 169, 172, 175, 177, 179, 201, 202, 205, 210, 220, 221, 222, 223, 224, 227, 228, 230, 253, 304, 316, 319, 325, 331, 342, 370, 383, 384, 392, 397], "harvard_oxford": 21, "prob": [21, 201, 202, 204, 390], "harvard_oxford_sub": 21, "sub": [21, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 78, 85, 91, 92, 95, 100, 101, 104, 108, 146, 152, 185, 186, 187, 201, 202, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 319, 325, 326, 327, 328, 329, 330, 331, 332, 403, 404, 405, 406, 416], "smith_rsn10": 21, "smith_rsn20": 21, "smith_rsn70": 21, "70": [10, 21, 23, 30, 32, 33, 36, 39, 40, 42, 43, 44, 62, 63, 67, 80, 99, 102, 105, 114, 164, 206], "smith_bm10": 21, "smith_bm70": 21, "multi": [21, 28, 41, 42, 43, 45, 46, 48, 58, 59, 100, 113, 114, 153, 154, 155, 157, 163, 166, 174, 177, 178, 179, 180, 186, 187, 189, 197, 203, 214, 217, 236, 256, 281, 325, 328, 330, 331, 375, 379, 389, 397, 437], "dictionari": [21, 23, 33, 46, 59, 66, 69, 101, 104, 108, 113, 114, 117, 145, 152, 155, 159, 160, 172, 173, 179, 185, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 217, 218, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238, 249, 250, 251, 252, 256, 257, 281, 294, 296, 306, 307, 320, 321, 325, 330, 342, 353, 355, 375, 376, 377, 378, 379, 387, 389, 390, 392, 397, 400, 406, 437], "pauli": [21, 114, 204], "subcort": [21, 114, 138, 152, 201, 202, 204, 213], "subcortex": [21, 114, 213], "fetch_atlas_pauli_2017": [21, 138, 141, 152], "difumo": [21, 47, 145, 152, 200], "fetch_atlas_difumo": [21, 47, 145, 152], "resolution_mm": [21, 47, 200, 205], "atlas_typ": 21, "pauli2017": 21, "item": [21, 64, 65, 66, 69, 71, 100, 105, 117, 228, 229, 230, 231, 284, 328, 337, 339], "2010": [22, 23, 38, 48, 58, 102, 114, 133, 152, 153, 158, 160, 185, 186, 197, 207, 211, 218, 243, 256], "chosen": [9, 22, 34, 66, 100, 166, 185, 393, 396, 399, 400, 402, 422], "plot_surf_roi": [22, 23, 125, 133, 135, 137, 141, 145, 152, 393, 435], "pial": [22, 23, 24, 37, 144, 150, 152, 237, 387, 393, 394, 395, 396, 400, 402, 421, 422], "gyri": [22, 23, 114, 207], "sulci": [22, 23, 114, 207], "nomenclatur": [22, 23, 114, 207], "url": [22, 23, 62, 114, 142, 150, 152, 160, 161, 164, 165, 186, 189, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 215, 217, 218, 221, 222, 223, 225, 226, 227, 228, 230, 232, 233, 234, 237, 238, 243, 248, 251, 252, 256, 268, 272, 273, 274, 296, 299, 322, 323, 342, 378, 405, 406, 411, 418, 419], "dx": [22, 23, 71], "doi": [22, 23, 56, 71, 72, 76, 114, 117, 160, 161, 164, 165, 185, 193, 195, 196, 197, 198, 199, 200, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 215, 217, 218, 223, 225, 226, 227, 228, 230, 232, 233, 237, 238, 243, 251, 252, 256, 257, 276, 296, 299, 322, 323, 342, 378, 405, 411, 418, 419], "org": [9, 10, 11, 22, 23, 26, 34, 36, 38, 39, 40, 43, 49, 52, 53, 56, 58, 62, 67, 71, 72, 75, 77, 98, 103, 107, 114, 117, 161, 164, 165, 166, 167, 169, 174, 175, 186, 189, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 217, 218, 219, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 237, 238, 243, 249, 250, 251, 252, 296, 299, 322, 323, 342, 378, 401, 405, 411, 418, 419], "1016": [22, 23, 56, 76, 114, 160, 161, 164, 165, 197, 199, 200, 203, 207, 212, 213, 218, 223, 226, 227, 243, 251, 252, 256, 273, 274, 276, 296, 322, 323, 342, 378, 419], "06": [22, 23, 27, 32, 33, 36, 73, 91, 96, 114, 197, 207, 253, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 392, 399], "010": [22, 23, 41, 114, 207, 256], "map_left": [22, 23, 207, 435], "sulcal": [22, 23, 114, 199, 237, 387, 393, 395, 396, 400, 402], "depth": [22, 23, 24, 114, 144, 152, 199, 237, 387, 393, 395, 396, 400, 402, 422], "shade": [22, 393, 395, 396, 402], "pial_left": [22, 23, 69, 108, 237, 387, 400, 422], "infl_left": [22, 23, 69, 108, 237, 387, 400, 435], "sulc_left": [22, 23, 69, 108, 237, 387, 400], "roi_map": [22, 23, 394, 395], "dark": [22, 23, 125, 152, 167, 393, 395, 396, 400, 402], "posterior": [22, 23, 55, 58, 61, 91, 103, 135, 152, 168, 211, 213, 393, 395, 396], "explicitli": [22, 66, 67, 107, 138, 150, 152, 159, 167, 228, 321, 323, 404], "angl": [22, 24, 84, 124, 152, 257, 393, 395, 396], "elev": [22, 393, 395, 396], "azim": [22, 393, 395, 396], "210": [6, 22, 33, 36, 41, 42, 44, 72, 95, 102, 114, 218, 299, 418], "appropri": [22, 100, 111, 114, 167, 179, 195, 214, 218, 243, 281, 283, 288, 321, 407], "ot": [22, 164], "convent": [22, 72, 123, 125, 150, 152, 167, 175, 247, 317, 319, 320, 377, 382, 384, 392, 403, 405], "vertic": [22, 37, 41, 66, 72, 80, 125, 133, 152, 153, 223, 258, 263, 264, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 393, 394, 395, 396, 402], "vert": 22, "map_": 22, "rr": 22, "load_surf_mesh": [22, 37, 133, 150, 152, 435], "pial_": [22, 37], "unknown": [22, 56, 91, 159, 195, 196, 209], "str": [22, 77, 79, 100, 111, 147, 152, 167, 185, 186, 187, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 232, 233, 234, 235, 236, 237, 238, 239, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 281, 283, 284, 288, 294, 295, 296, 298, 299, 310, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 412, 414, 418, 420, 421, 422], "omit": 22, "append": [22, 33, 34, 40, 41, 44, 50, 51, 53, 64, 71, 72, 100, 103, 107, 108, 157], "synthet": [22, 57, 84, 167], "n_parcel": [22, 49, 404], "corr": [22, 386], "n_parcels_hemi": 22, "plot_connectom": [22, 47, 50, 51, 52, 53, 54, 58, 119, 121, 123, 130, 131, 136, 139, 141, 150, 152, 154, 157, 398, 401, 435], "edge_threshold": [22, 47, 50, 53, 54, 58, 139, 141, 152, 157, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379, 398, 435], "gist_ncar": [22, 111, 137, 152, 378, 391, 395, 435], "view_connectom": [22, 52, 54, 58, 138, 139, 141, 146, 152, 399, 401, 435], "plot_surf_atla": [22, 27], "subset": [23, 36, 44, 94, 160, 164, 167, 248, 271, 284, 306, 322], "enhanc": [23, 64, 66, 67, 68, 114, 172, 175, 238, 266, 269, 296, 342], "nki": [23, 111, 114, 133, 152, 238, 266], "rockland": [23, 114, 238], "fcon_1000": [23, 194, 238], "nitrc": [9, 10, 11, 22, 23, 26, 39, 40, 43, 194, 198, 206, 238], "indi": [23, 194, 238], "nooner": [23, 114, 238], "2012": [23, 44, 100, 114, 150, 152, 154, 159, 165, 166, 174, 198, 226, 238, 322, 323], "645m": 23, "102": [23, 33, 40, 41, 43, 114, 238, 323], "com": [19, 23, 62, 114, 150, 152, 161, 164, 165, 167, 195, 197, 198, 199, 200, 203, 205, 207, 208, 213, 218, 223, 225, 226, 227, 237, 243, 251, 252, 299, 322, 323, 342, 378, 418, 419, 435, 436], "fliem": 23, "nki_nilearn": 23, "dale": [23, 114, 199, 207, 237], "1999": [23, 114, 218, 237], "fischl": [23, 114, 199, 205, 207, 209, 237], "cingul": [23, 55, 58, 61, 91, 168], "pearson": [23, 114, 268, 272, 386], "product": [23, 55, 79, 166], "moment": [23, 116], "correl": [23, 26, 42, 43, 46, 47, 52, 59, 61, 71, 99, 100, 111, 113, 114, 157, 159, 166, 169, 172, 179, 185, 188, 190, 192, 214, 225, 256, 322, 323, 325, 331, 332, 355, 386, 392, 435], "acceler": [23, 114, 238], "pace": [23, 114, 238], "psychiatri": [23, 114, 238], "frontier": [23, 49, 114, 156, 193, 196, 228, 230, 238], "152": [23, 33, 41, 56, 114, 172, 238], "3389": [23, 114, 117, 193, 196, 228, 230, 238], "fnin": [23, 114, 238], "00152": [23, 114, 238], "segment": [23, 56, 114, 157, 172, 203, 209, 218, 232, 322, 406, 408, 422], "reconstruct": [23, 28, 40, 45, 113, 114, 179, 185, 192, 227, 256, 257, 325, 328, 331, 397, 412, 413], "1006": [23, 114, 195], "nimg": [23, 114, 195], "1998": [23, 195], "0395": 23, "ii": [23, 114, 223, 323], "flatten": [23, 24, 40, 41, 70, 185, 191, 192], "0396": 23, "nki_dataset": 23, "fetch_surf_nki_enhanc": [23, 133, 141, 152], "fsaverag5": 23, "func_left": [23, 238], "flat_left": [23, 237], "curv_left": [23, 237], "timeseri": [23, 26, 48, 50, 58, 89, 104, 132, 145, 152, 153, 157, 200, 225, 299, 323, 326, 327, 328, 329, 330, 331, 332, 418, 419], "pcc_region": 23, "g_cingul": 23, "post": [23, 51, 66, 94, 114, 126, 152, 178, 185, 219, 406], "dorsal": [23, 393, 395, 396], "pcc_label": 23, "seed_timeseri": 23, "scipi": [23, 44, 56, 62, 68, 76, 79, 94, 101, 103, 107, 108, 121, 123, 131, 135, 136, 138, 141, 146, 148, 150, 152, 166, 174, 178, 219, 241, 244, 308, 318, 334, 335, 336, 338, 339, 389, 417], "stat": [6, 23, 33, 62, 64, 68, 76, 79, 94, 101, 103, 107, 108, 114, 150, 152, 170, 178, 186, 189, 269, 278, 281, 294, 318, 321, 396, 400, 402, 415, 416, 435], "stat_map": [23, 297, 387, 395, 396], "pearsonr": 23, "wall": [23, 166], "pcc_map": 23, "dtype": [3, 10, 11, 20, 23, 33, 36, 40, 41, 44, 49, 52, 53, 54, 56, 58, 68, 77, 79, 86, 89, 91, 92, 94, 101, 103, 132, 133, 134, 138, 139, 152, 177, 282, 285, 286, 287, 291, 292, 293, 298, 300, 308, 309, 312, 314, 326, 327, 328, 329, 330, 331, 332, 333, 403, 405, 412], "int": [10, 11, 23, 36, 40, 41, 42, 48, 49, 50, 57, 62, 68, 77, 78, 79, 84, 86, 94, 95, 100, 101, 103, 105, 150, 152, 157, 167, 186, 189, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 240, 241, 242, 243, 244, 245, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 268, 269, 271, 273, 274, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 300, 305, 311, 322, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 374, 377, 378, 379, 382, 384, 385, 388, 390, 391, 392, 393, 394, 395, 396, 398, 400, 401, 402, 403, 404, 405, 406, 411, 414, 415, 416, 417, 419, 422], "flat": [23, 41, 124, 152, 178, 237], "mesh": [23, 37, 69, 108, 111, 124, 133, 138, 141, 146, 150, 152, 168, 173, 237, 258, 259, 261, 262, 263, 264, 267, 387, 393, 394, 395, 396, 400, 402, 420, 421, 422, 437], "yield": [23, 31, 39, 49, 77, 79, 84, 117, 141, 144, 148, 152, 158, 159, 160, 161, 164, 165, 168, 169, 228, 253, 257, 277, 281, 283, 288, 297, 318, 403], "75": [21, 23, 33, 36, 38, 39, 40, 42, 43, 62, 66, 71, 72, 91, 99, 101, 102, 105, 111, 114, 196, 342], "nicer": 23, "bg_map_resc": 23, "unthreshold": [23, 81, 114, 117, 172, 196, 228, 230], "slightli": [23, 48, 49, 66, 84, 115, 135, 152, 160, 185, 187, 314, 315], "captur": [23, 51, 58, 66, 103, 154, 155, 156, 159, 185, 223], "half": [23, 49, 66, 94, 141, 152, 166, 172, 179, 249, 250, 251, 252, 256, 257, 281, 294, 296, 316, 326, 327, 328, 329, 330, 331, 332, 333, 393, 395, 396, 400, 402, 404, 406, 408], "after": [23, 28, 32, 34, 40, 45, 50, 56, 66, 67, 77, 94, 98, 100, 105, 113, 149, 152, 156, 157, 159, 164, 166, 167, 169, 172, 175, 178, 179, 189, 217, 249, 250, 251, 252, 256, 281, 289, 290, 294, 299, 303, 306, 311, 322, 323, 330, 331, 407, 410, 414, 415, 416], "measur": [24, 29, 34, 48, 49, 51, 58, 66, 77, 99, 100, 105, 114, 134, 144, 152, 153, 154, 156, 157, 163, 164, 166, 169, 172, 174, 179, 225, 323, 386, 388, 403, 422, 435, 437], "toi": [24, 104], "drawn": [24, 66, 94, 281, 294, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 382, 385, 390, 391, 392, 399, 416, 422], "around": [24, 34, 84, 86, 111, 137, 139, 152, 166, 167, 187, 296, 303, 314, 332, 343, 345, 346, 422], "spread": [24, 98, 162, 333], "nest": [24, 29, 42, 144, 152, 162, 185, 186, 187, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 325, 326, 327, 328, 329, 330, 331, 332, 403, 404, 405, 406, 422], "along": [24, 25, 66, 84, 86, 100, 124, 141, 146, 152, 158, 165, 167, 172, 178, 179, 254, 255, 281, 289, 314, 316, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 343, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 357, 358, 359, 361, 363, 365, 367, 369, 372, 373, 377, 382, 385, 386, 390, 391, 392, 406, 407, 418, 422, 435], "ball": [24, 122, 152, 164, 166, 172, 253, 422], "too": [24, 34, 38, 40, 42, 52, 54, 56, 71, 86, 117, 160, 166, 228, 230, 435], "almost": [24, 39, 49, 104, 166, 179], "ident": [24, 69, 80, 166, 299, 316, 408, 418], "most": [24, 33, 40, 42, 43, 49, 61, 75, 94, 100, 125, 135, 138, 152, 159, 160, 161, 162, 164, 166, 167, 169, 175, 178, 179, 281, 283, 288, 393, 395, 396, 402, 404, 406, 408, 435], "recommend": [24, 89, 92, 100, 103, 123, 139, 140, 141, 146, 148, 150, 152, 159, 164, 169, 174, 177, 179, 322, 406, 418, 422, 436], "n_z": 24, "n_t": 24, "mgrid": [24, 84], "triangul": 24, "tri": [24, 51, 160, 228, 377, 389, 403], "pi": [24, 84, 268, 272], "sin": [24, 84], "asarrai": [24, 41, 51, 103, 270, 275], "triangl": [24, 260, 422], "inner_mesh": [24, 422], "nested_sample_point": 24, "_sample_locations_between_surfac": 24, "ey": [24, 41, 44, 64, 65, 66, 69, 71, 80, 84, 89, 167, 174, 218], "line_sample_point": 24, "_line_sample_loc": 24, "segment_half_width": 24, "n_point": 24, "ball_sample_point": 24, "_ball_sample_loc": 24, "ball_radiu": 24, "15": [4, 6, 9, 10, 11, 13, 16, 21, 23, 24, 27, 30, 33, 36, 39, 40, 42, 43, 44, 48, 49, 51, 56, 59, 61, 62, 65, 66, 70, 71, 72, 75, 77, 78, 82, 84, 91, 94, 101, 102, 103, 105, 107, 114, 118, 122, 125, 134, 138, 148, 152, 185, 195, 207, 329, 330, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 378, 409, 410], "view_init": 24, "67": [9, 10, 11, 23, 24, 33, 36, 39, 40, 42, 43, 44, 62, 71, 99, 101, 102, 121, 152, 196], "plot_trisurf": 24, "scatter": [24, 94, 150, 152, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379, 388], "sample_point": 24, "plot_surface_projection_strategi": [24, 27], "mean_haxbi": [25, 178], "apply_mask": [25, 178, 328, 331], "masked_data": [25, 99, 111, 178], "timepoint": [25, 178], "150": [25, 33, 36, 41, 42, 44, 102, 105, 114, 178, 378], "And": [25, 41, 153, 168, 175, 178], "ylabel": [25, 30, 32, 42, 48, 49, 55, 57, 58, 65, 66, 178], "intens": [25, 50, 70, 81, 88, 94, 177, 178, 256, 298, 318, 322, 377, 378, 384, 390, 391, 392, 399, 406, 422, 435], "xlim": [25, 30, 178], "12": [6, 10, 11, 21, 23, 25, 27, 30, 32, 33, 36, 38, 39, 40, 41, 42, 43, 44, 48, 49, 56, 62, 63, 67, 68, 70, 71, 75, 77, 78, 80, 88, 91, 96, 101, 102, 103, 104, 105, 107, 109, 114, 118, 121, 123, 124, 126, 128, 144, 149, 150, 152, 165, 166, 178, 179, 195, 197, 204, 206, 214, 284, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 406], "95": [6, 21, 25, 30, 33, 36, 39, 40, 42, 43, 44, 62, 91, 93, 101, 102, 105, 147, 152, 178, 271, 273, 274], "plot_visu": [25, 27], "releas": [26, 67, 111, 114, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 197, 205, 218, 219, 225, 238, 299], "fetch_megatrawls_netmat": 26, "partial": [26, 48, 52, 99, 153, 157, 185, 190, 225, 323], "300": [26, 33, 36, 41, 42, 44, 55, 61, 70, 100, 102, 205, 213, 225], "eigen": [26, 225], "regress": [26, 30, 31, 39, 40, 44, 55, 56, 114, 116, 125, 128, 138, 144, 145, 146, 150, 152, 154, 159, 163, 164, 165, 167, 168, 169, 172, 193, 249, 250, 251, 252, 255, 257, 268, 273, 274, 281, 294, 322, 323, 326, 327, 328, 329, 330, 331, 332, 418, 437], "netmat": [26, 128, 152], "eigen_regress": [26, 225], "partial_correl": [26, 58, 190, 225], "correlation_matric": [26, 47, 51, 225], "home": [2, 3, 4, 6, 9, 10, 11, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 61, 62, 64, 65, 67, 71, 72, 75, 77, 78, 79, 84, 85, 86, 89, 91, 92, 94, 95, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 174, 177, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 236, 237, 238, 239, 309], "remi": [2, 3, 4, 6, 9, 10, 11, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 61, 62, 64, 65, 67, 71, 72, 75, 77, 78, 79, 84, 85, 86, 89, 91, 92, 94, 95, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 138, 152], "nilearn_data": [2, 3, 6, 9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 29, 30, 32, 34, 35, 36, 38, 39, 40, 41, 42, 43, 47, 48, 49, 52, 53, 54, 55, 56, 58, 62, 65, 67, 71, 75, 77, 85, 89, 91, 92, 94, 95, 100, 101, 102, 103, 104, 105, 107, 108, 201, 202, 239], "php": [9, 10, 11, 22, 23, 26, 39, 40, 43], "8037": 26, "tgz": [9, 10, 11, 26, 40, 43, 194], "min": [6, 9, 10, 11, 17, 19, 20, 21, 22, 23, 26, 38, 39, 40, 43, 47, 48, 49, 52, 53, 55, 58, 62, 65, 67, 71, 76, 77, 80, 81, 99, 101, 102, 103, 146, 147, 152, 314, 315, 377, 378, 382, 384, 385, 387, 388, 390, 391, 392, 393, 395, 396, 399, 400, 402], "68c41934c6cf43be91dd107f913ffd01": 26, "util": [26, 43, 44, 48, 50, 87, 88, 102, 105, 106, 126, 133, 137, 144, 148, 152, 157, 167, 185, 186, 187, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 319, 325, 326, 327, 328, 329, 330, 331, 332, 403, 404, 405, 406, 430], "plot_matrix": [26, 31, 35, 50, 51, 52, 53, 54, 56, 57, 58, 111, 135, 136, 141, 152, 157], "551": 33, "plot_visualize_megatrawls_netmat": [26, 27], "mvpa": [28, 113, 172, 174, 437], "stimuli": [28, 30, 32, 33, 45, 66, 80, 98, 113, 153, 154, 156, 157, 159, 169, 174, 177, 179, 217, 227, 301, 318, 325, 328, 331, 370, 392, 397], "jimura": [28, 45, 113, 114, 226, 252, 255, 392], "mix": [28, 44, 45, 113, 163, 165, 193, 226, 252, 254, 255, 392, 437], "gambl": [28, 45, 113, 163, 165, 226, 252, 255, 392, 437], "morphometri": [28, 45, 74, 82, 113, 159, 170, 172, 173, 174, 218, 219, 232, 250, 255, 294, 297, 304, 315, 325, 331, 342, 370, 381, 392, 397, 414, 416, 437], "oasi": [28, 45, 74, 82, 113, 114, 165, 171, 173, 218, 219, 232, 250, 255, 294, 297, 304, 315, 325, 331, 342, 370, 381, 392, 397, 414, 416], "prior": [28, 45, 48, 54, 66, 91, 111, 113, 114, 146, 152, 153, 165, 168, 186, 205, 232, 249, 250, 254, 255, 281, 294, 329, 330, 332, 378, 392, 397], "searchlight": [28, 44, 45, 113, 114, 132, 135, 138, 144, 152, 159, 163, 172, 173, 174, 217, 237, 304, 306, 309, 311, 312, 325, 331, 385, 392, 396, 397, 421, 422, 437], "svm": [28, 34, 35, 39, 42, 44, 45, 51, 99, 113, 116, 133, 152, 161, 163, 165, 172, 179, 217, 249, 306, 392, 397, 399, 437], "chair": [28, 30, 32, 33, 45, 113, 124, 152, 177, 217, 251, 306, 311, 389, 392, 397], "cross": [28, 32, 33, 36, 37, 40, 42, 44, 45, 51, 55, 97, 99, 109, 113, 114, 117, 124, 125, 144, 152, 153, 160, 163, 187, 217, 228, 232, 240, 249, 250, 251, 252, 253, 254, 255, 306, 316, 325, 331, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 377, 382, 385, 390, 391, 392, 397, 399, 435, 437], "simul": [28, 45, 46, 59, 63, 68, 100, 113, 155, 164, 187, 253, 341, 389, 397, 437], "encod": [28, 41, 45, 71, 75, 84, 113, 114, 160, 161, 179, 227, 251, 252, 301, 318, 325, 328, 331, 370, 392], "miyawaki": [28, 45, 113, 114, 179, 227, 301, 318, 325, 328, 331, 370, 392, 397], "2008": [28, 45, 113, 114, 179, 227, 296, 301, 318, 325, 328, 331, 342, 370, 392, 397], "effici": [29, 66, 114, 125, 152, 158, 160, 166, 167, 186, 189, 228, 251, 252], "featur": [29, 31, 32, 33, 34, 35, 42, 44, 49, 51, 66, 94, 99, 103, 104, 110, 111, 113, 114, 116, 136, 138, 139, 144, 148, 160, 161, 162, 163, 164, 165, 166, 167, 174, 175, 179, 184, 186, 187, 189, 249, 250, 251, 252, 253, 254, 255, 256, 269, 341, 403, 405, 406, 408, 418, 419, 433, 436, 437], "func_img": [29, 159], "identifi": [29, 30, 32, 33, 50, 58, 62, 94, 114, 123, 148, 152, 157, 165, 168, 169, 171, 195, 277, 281, 283, 288, 290], "restrict": [29, 30, 31, 89, 91, 94, 102, 138, 152, 159, 164, 179, 193, 248], "place": [29, 98, 135, 152, 228, 290, 318, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 378, 385, 422], "uniqu": [29, 30, 31, 32, 33, 35, 49, 51, 58, 65, 86, 94, 100, 102, 133, 152, 153, 161, 177, 195, 201, 202, 288, 326, 329, 406, 407, 408], "aim": [29, 34, 128, 152, 159, 167, 172, 254, 255], "act": [29, 34, 114, 134, 152, 172, 191, 192, 273, 274, 344], "sever": [29, 31, 33, 34, 49, 51, 61, 62, 64, 66, 75, 86, 94, 99, 103, 116, 124, 132, 138, 152, 153, 161, 163, 164, 166, 167, 169, 172, 175, 177, 178, 179, 187, 267, 281, 299, 310, 337, 339, 340, 380, 390, 404, 418, 437], "niftimask": [29, 32, 34, 35, 36, 40, 41, 42, 43, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 83, 91, 94, 96, 98, 99, 100, 102, 103, 104, 105, 106, 111, 113, 116, 124, 138, 141, 144, 145, 146, 147, 148, 152, 159, 162, 176, 214, 227, 249, 250, 251, 252, 254, 255, 256, 257, 278, 281, 294, 296, 306, 311, 322, 323, 325, 326, 327, 329, 330, 332, 336, 342, 382, 386, 391, 392, 397, 404, 414, 427, 437], "relev": [29, 34, 49, 56, 66, 69, 104, 117, 146, 150, 152, 159, 160, 166, 167, 175, 178, 179, 185, 186, 187, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 296, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 342, 403, 404, 405, 406], "classic": [29, 34, 94, 160, 177], "univari": [29, 33, 34, 97, 109, 113, 114, 161, 163, 165, 217, 222, 223, 249, 250, 251, 252, 254, 255, 304, 306, 311, 325, 331, 342, 370, 384, 392, 397, 437], "vector": [29, 32, 33, 34, 35, 40, 44, 51, 64, 84, 98, 99, 102, 105, 106, 116, 134, 152, 159, 160, 162, 172, 185, 249, 250, 251, 252, 268, 271, 272, 273, 274, 277, 279, 388, 422], "screening_percentil": [29, 32, 33, 34, 42, 43, 111, 159, 249, 250, 251, 252, 254, 255], "percent": [29, 34, 41, 42, 43, 141, 152, 159, 289, 298, 318, 326, 327, 328, 329, 330, 331, 332, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379, 390, 398, 400, 402, 418], "smoothing_fwhm": [29, 33, 34, 35, 42, 49, 50, 52, 53, 54, 55, 56, 58, 62, 66, 67, 75, 76, 77, 79, 89, 91, 92, 98, 100, 101, 102, 104, 105, 106, 134, 152, 157, 159, 179, 249, 250, 251, 252, 256, 257, 281, 284, 294, 296, 326, 327, 328, 329, 330, 331, 332, 333, 404, 406, 408], "accuraci": [29, 30, 31, 32, 33, 35, 37, 41, 51, 98, 99, 145, 152, 163, 164, 172, 174, 249, 251, 253, 254, 437], "y_pred": [29, 31, 34, 41, 43, 159, 249, 250, 251, 252, 254, 255], "out": [29, 33, 34, 40, 44, 51, 53, 54, 55, 56, 57, 58, 64, 69, 100, 106, 116, 117, 138, 141, 145, 152, 154, 159, 160, 162, 164, 166, 167, 168, 172, 178, 218, 249, 250, 251, 252, 254, 255, 306, 314, 326, 327, 328, 329, 330, 331, 332, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 387, 404, 406, 407, 417, 418, 422, 435], "weight_img": [29, 42, 98, 159, 179], "Or": [29, 117, 159, 204, 205, 435], "dynam": [29, 114, 159, 323], "html": [29, 33, 34, 36, 49, 52, 53, 54, 56, 58, 61, 62, 64, 75, 77, 98, 138, 142, 146, 148, 152, 159, 167, 170, 179, 196, 208, 217, 249, 250, 251, 252, 281, 294, 323, 327, 330, 398, 399, 400, 401, 402, 406, 414, 416, 435, 436], "viewer": [29, 138, 152, 159, 178, 399, 435], "haxby_face_vs_hous": 29, "plot_haxby_anova_svm": [29, 45, 133, 152], "fetcher": [30, 32, 125, 128, 129, 130, 133, 138, 141, 142, 145, 147, 148, 149, 150, 152, 168, 193, 199, 200, 211, 212, 213, 214, 221, 222, 223, 232, 236], "get_data": [30, 36, 42, 49, 77, 79, 84, 94, 102, 105, 106, 107, 133, 141, 152, 177, 309], "abl": [30, 32, 167, 175, 319, 393, 395, 396, 435], "resting_st": 30, "task_mask": [30, 32], "logical_not": [30, 36, 77, 105], "find": [30, 32, 44, 50, 56, 71, 79, 100, 121, 152, 157, 158, 159, 161, 163, 166, 167, 169, 172, 175, 179, 189, 197, 301, 336, 337, 339, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 376, 377, 399, 403, 405, 411, 435, 436, 437], "remain": [6, 9, 10, 11, 17, 21, 23, 26, 30, 32, 36, 38, 39, 40, 42, 43, 44, 47, 48, 52, 56, 62, 65, 67, 71, 80, 89, 99, 100, 101, 102, 105, 144, 152, 164, 167, 422], "categori": [30, 32, 33, 98, 102, 116, 159, 161, 167, 177, 217], "tag": [30, 32, 69, 108, 117, 167, 175, 319, 320], "classification_target": [30, 32], "svc_l2": [30, 160, 249, 251], "svc_l1": [30, 32, 160, 249, 251], "logistic_l1": [30, 160, 249, 251], "logistic_l2": [30, 160, 249, 251], "ridge_classifi": [30, 160, 249, 251], "predict": [30, 31, 33, 39, 40, 44, 51, 58, 60, 73, 97, 109, 114, 116, 145, 146, 148, 152, 161, 162, 164, 165, 167, 169, 170, 172, 173, 174, 185, 203, 211, 214, 225, 235, 249, 250, 251, 252, 253, 254, 255, 273, 274, 281, 294, 299, 300, 311, 316, 325, 330, 332, 336, 370, 392, 415, 436, 437], "score": [30, 32, 37, 41, 42, 44, 48, 51, 80, 98, 99, 102, 103, 105, 106, 107, 111, 144, 145, 152, 159, 160, 162, 163, 165, 174, 187, 232, 249, 250, 251, 252, 253, 254, 255, 256, 257, 269, 294, 298, 318, 322, 326, 327, 328, 329, 330, 331, 332, 342, 378, 404, 406, 418, 437], "classifiers_data": 30, "classifier_nam": 30, "roc_auc": [30, 32, 98, 162, 249, 251], "t0": [30, 41], "2f": [30, 32, 41, 42, 43, 44, 49, 57, 89], "std": [30, 32, 44, 51, 89, 104, 111, 326, 327, 328, 329, 330, 331, 332, 418], "auc": [30, 32, 159, 172], "rudimentari": 30, "diagram": [30, 169], "all_categori": 30, "hstack": [30, 64, 67, 77, 80, 271, 273, 274], "tick_posit": [30, 32], "ytick": [30, 44, 48, 51, 99], "height": [30, 33, 51, 99, 141, 152, 281, 294, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 378, 379, 382, 384, 385, 388, 389, 390, 391, 392, 398, 400, 402, 414, 416], "score_mean": [30, 32], "barh": [30, 48, 51, 99], "xmin": [30, 377, 378, 379, 382, 384, 385, 388, 390, 391, 392], "ncol": [30, 63, 79, 100, 101, 105], "bbox_to_anchor": 30, "tight_layout": [30, 31, 32, 48, 51, 55, 58, 70, 78, 80, 99], "penalti": [30, 34, 39, 43, 160, 165, 172, 249, 250, 251, 254, 255], "logist": [30, 31, 114, 160, 161, 165, 249, 251, 254, 255], "main": [30, 56, 66, 67, 68, 71, 94, 119, 150, 152, 159, 164, 167, 168, 172, 175, 177, 179, 195, 281, 283, 288, 319, 337, 339, 344], "ell_1": 30, "ell_2": 30, "spars": [30, 39, 40, 46, 48, 49, 57, 58, 59, 113, 114, 154, 155, 157, 158, 160, 165, 172, 173, 180, 186, 187, 189, 203, 214, 249, 250, 251, 252, 254, 255, 256, 257, 325, 330, 375, 379, 389, 393, 395, 397, 398, 406, 437], "intra": [30, 32], "logical_or": 30, "assert": [30, 111], "216": [3, 30, 33, 41], "fmri_niimgs_condit": 30, "mean_epi_img": 30, "ab": [30, 43, 44, 53, 58, 81, 84, 102, 103, 104, 114, 166, 186, 189, 198, 208, 237, 299, 342, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379, 418], "1e": [30, 39, 40, 49, 111, 186, 187, 189, 232, 254, 255, 269, 303, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 392, 395, 399, 405, 411], "plot_haxby_different_estim": [30, 45, 141, 152], "implicit": [31, 39, 144, 152, 161, 172, 251, 252], "aggreg": [31, 39, 58, 144, 152, 161, 172, 196, 251, 252], "cost": [31, 39, 53, 79, 144, 152, 156, 160, 161, 165, 166, 167, 172, 179, 251, 252], "data_fil": 31, "behavior": [31, 34, 35, 67, 75, 77, 98, 111, 114, 116, 124, 125, 128, 135, 145, 150, 152, 159, 160, 162, 163, 167, 172, 176, 179, 185, 197, 198, 206, 225, 325, 326, 327, 328, 329, 330, 331, 332, 378, 406, 437], "condition_mask_train": 31, "condition_mask_test": 31, "x_train": [31, 41, 44], "x_test": [31, 41, 44, 249, 250, 251, 252, 253], "y_train": [31, 34, 41, 44], "y_test": [31, 34, 41, 44, 249, 250, 251, 252, 253], "background_img": [31, 43], "fremclassifi": [31, 144, 145, 152, 160, 161, 249, 252], "metric": [31, 35, 40, 41, 51, 79, 141, 152, 159, 160, 164, 172, 249, 250, 251, 252], "confusion_matrix": [31, 35, 160], "im": [18, 21, 31, 107], "vmin": [9, 31, 36, 40, 44, 49, 50, 52, 53, 54, 56, 57, 58, 80, 84, 111, 121, 125, 139, 141, 152, 157, 377, 378, 382, 384, 385, 387, 390, 391, 392, 393, 395, 396, 399, 400, 402], "hot_r": [31, 35], "set_ylabel": [31, 43, 70, 75, 78], "set_xlabel": [31, 43, 70], "adjust": [31, 66, 68, 123, 136, 152, 323, 344, 355, 358], "get_figur": 31, "coef": [31, 44, 98, 281, 290], "50": [21, 23, 30, 31, 33, 36, 39, 40, 42, 43, 44, 48, 49, 52, 57, 58, 62, 66, 67, 71, 93, 98, 101, 102, 105, 114, 117, 164, 166, 179, 187, 189, 225, 226, 251, 252, 269, 283, 285, 286, 287, 288, 291, 292, 293, 301, 322, 323, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379, 404, 406, 408, 435], "improv": [31, 75, 114, 123, 124, 125, 131, 134, 137, 138, 141, 148, 149, 150, 152, 159, 160, 161, 165, 166, 167, 169, 172, 177, 179, 213, 218, 299, 326, 329, 403, 418], "mechan": [31, 159, 185, 186, 187, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 325, 326, 327, 328, 329, 330, 331, 332, 403, 404, 405, 406], "reason": [31, 43, 48, 66, 92, 117, 160, 162, 164, 166, 167, 169, 175, 422], "even": [31, 42, 49, 50, 58, 65, 79, 100, 117, 125, 141, 146, 152, 166, 167, 174, 228, 230, 417], "heavier": 31, "l2": [31, 34, 160, 161, 249, 251, 403, 404, 405], "ridg": [31, 40, 44, 111, 160, 161, 165, 249, 250, 251, 252], "fremregressor": [31, 39, 144, 145, 152, 160, 161, 250, 251], "solv": [31, 39, 166, 167, 174, 175, 257, 342], "plot_haxby_frem": [31, 45], "older": [32, 35, 36, 40, 41, 42, 47, 48, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 114, 116, 133, 134, 135, 136, 152, 167, 177, 232, 301], "upgrad": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 116, 123, 133, 135, 141, 146, 148, 152], "masker": [32, 33, 35, 36, 40, 41, 42, 47, 49, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 110, 112, 113, 116, 122, 123, 124, 125, 126, 141, 144, 145, 146, 147, 148, 150, 152, 154, 156, 159, 162, 167, 168, 176, 178, 185, 249, 250, 251, 252, 254, 255, 256, 257, 261, 262, 263, 264, 265, 266, 281, 294, 296, 322, 323, 342, 386, 389, 393, 397, 404, 406, 409, 410, 412, 413, 437], "input_data": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 116, 148, 152], "That": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 116, 145, 152, 172, 268, 272, 281, 283, 288], "occurr": [32, 35, 36, 40, 41, 42, 47, 51, 52, 53, 54, 55, 56, 58, 61, 70, 89, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 106, 116, 164], "practic": [32, 51, 69, 99, 153, 156, 160, 162, 164, 166, 167, 168, 169, 171, 174, 177, 178], "unmask": [32, 33, 44, 115, 124, 133, 136, 152, 176, 178, 256, 257, 325, 328, 331, 437], "task_data": 32, "mask_nam": 32, "mask_scor": 32, "mask_chance_scor": 32, "xtick": [32, 34, 35, 44, 94], "rgb": [32, 401], "score_ch": 32, "edgecolor": [32, 40, 125, 152, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 379, 382, 384, 385, 388, 390, 391, 392], "ylim": 32, "plot_haxby_full_analysi": [32, 45, 141, 152], "record": [33, 40, 66, 159, 169, 172], "unique_sess": 33, "datafram": [33, 62, 63, 64, 66, 67, 72, 75, 76, 77, 78, 79, 80, 81, 100, 101, 117, 125, 144, 148, 149, 152, 185, 193, 199, 200, 211, 212, 213, 221, 222, 223, 232, 256, 257, 281, 282, 284, 288, 294, 295, 296, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 380, 381, 383, 403, 404, 405, 406, 415, 418], "conditions_sess": 33, "frame": [33, 63, 69, 89, 179, 283, 306, 322, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 414], "n_scan": [33, 61, 63, 69, 71, 108, 169, 283], "frame_tim": [33, 63, 68, 69, 71, 108, 168, 282, 283, 288], "durat": [6, 33, 63, 66, 68, 72, 125, 152, 168, 169, 177, 283, 288, 383], "events_": 33, "onset": [6, 33, 63, 65, 66, 68, 72, 100, 125, 144, 152, 168, 236, 281, 282, 283, 285, 286, 287, 288, 291, 292, 293, 383], "trial_typ": [6, 33, 63, 65, 66, 72, 100, 101, 288, 383], "insert": [33, 204, 205, 281, 294, 398, 399, 400, 401, 402, 414, 416, 435], "togeth": [33, 48, 68, 69, 70, 80, 153, 161, 162, 169, 172, 211, 213, 248, 251, 252, 256, 284, 299, 406], "conditions_label": 33, "008": [33, 41], "nilearn_cach": [33, 35, 36, 39, 42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 92, 98, 99, 100, 102, 103, 104, 105, 106, 157], "grab": [33, 47, 48, 49, 65, 100, 117], "fmri_sess": 33, "condition_": 33, "summari": [33, 62, 64, 91, 146, 167, 269], "make_glm_report": [33, 61, 62, 64, 75, 123, 145, 148, 152], "mean_img_": [33, 64, 67], "save_as_html": [33, 61, 62, 64, 75, 91, 92, 179, 398, 399, 400, 401, 402, 414, 416, 435], "although": [33, 39, 49, 79, 160, 172, 175, 179], "usual": [33, 48, 77, 79, 94, 148, 152, 158, 160, 161, 162, 167, 169, 172, 174, 175, 178, 195, 251, 252, 262, 268, 271, 336, 388, 404], "classification_accuraci": [33, 98], "chance_level": 33, "4f": [33, 34, 98], "plot_haxby_glm_decod": [33, 45], "approach": [34, 40, 41, 48, 49, 66, 69, 114, 138, 152, 155, 158, 159, 160, 164, 166, 167, 168, 169, 173, 253, 299, 322, 323, 418, 422, 436, 437], "maxim": [34, 172, 271, 273, 274, 303, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370], "signific": [34, 49, 66, 75, 80, 114, 159, 164, 166, 169, 172, 296, 342, 415], "due": [10, 11, 34, 36, 39, 49, 66, 71, 79, 86, 94, 123, 141, 147, 148, 149, 150, 152, 156, 160, 162, 167, 169, 175, 193, 254, 255, 435], "optimist": [34, 159], "lead": [34, 47, 48, 57, 84, 123, 125, 144, 152, 165, 166, 167, 169, 172, 187, 269, 327, 330, 417, 435], "overfit": [34, 160, 164], "loop": [34, 44, 71, 100, 144, 152, 159, 166, 178, 249, 250, 251, 252], "judg": [34, 86], "never": [34, 159, 166, 174, 314, 315, 414], "grid": [34, 51, 68, 79, 84, 99, 160, 165, 172, 178, 187, 228, 230, 249, 250, 251, 252, 285, 286, 287, 291, 292, 293, 314, 353, 355, 358, 372, 377, 382, 385, 389, 390, 391, 392, 435], "difficulti": 34, "composit": 34, "shoe": [30, 32, 33, 34, 177], "bottl": [30, 32, 33, 34, 177], "hyperparamet": [34, 42], "param_grid": [34, 99, 111, 124, 152, 160, 249, 250, 251, 252], "sensibl": [34, 159, 162, 186, 189], "dual": [34, 51, 53, 98, 99, 114, 166, 186, 249, 251], "c": [3, 34, 37, 40, 41, 42, 43, 44, 49, 56, 64, 67, 70, 98, 99, 100, 102, 111, 114, 117, 160, 164, 165, 167, 186, 189, 197, 199, 206, 208, 211, 212, 218, 219, 225, 227, 228, 230, 232, 243, 273, 274, 299, 314, 315, 322, 323, 342, 409, 412, 418], "1000": [34, 42, 49, 77, 94, 102, 156, 169, 205, 403], "l1": [34, 43, 114, 160, 161, 165, 186, 189, 249, 250, 251, 254, 255], "800": [34, 42, 87, 102, 205, 281, 294, 378, 416], "complet": [34, 60, 73, 94, 113, 116, 117, 141, 152, 153, 159, 161, 168, 175, 178, 179, 215, 217, 233, 248, 281, 284, 321, 324, 331, 342, 377, 378, 379, 380, 382, 384, 385, 386, 388, 389, 390, 391, 392, 404, 414, 415, 416], "stabl": [34, 48, 56, 98, 114, 123, 138, 152, 158, 160, 161, 166, 174, 197, 237, 249, 250, 251, 252, 256, 257, 322, 400, 422, 436], "cross_valid": [34, 98, 138, 152, 162, 249, 250, 251, 252], "excel": 34, "explan": [34, 84, 102, 159, 160, 161, 162, 167, 177, 179, 194], "best_c": [34, 249, 250, 251, 252], "best_penalti": 34, "best_dual": 34, "cv_score": [34, 98], "screening_percentile_rang": 34, "32": [21, 23, 26, 27, 33, 34, 36, 39, 40, 42, 43, 44, 58, 62, 66, 71, 84, 91, 94, 96, 101, 102, 111, 112, 179, 285, 286, 287, 291, 292, 293, 435], "val_scor": 34, "sp": 34, "sreen": 34, "kfold": [34, 36, 37, 40, 44, 254, 255], "nested_cv_scor": 34, "tight": [34, 166], "axhlin": [34, 353, 355, 358, 360, 362, 364, 366, 368, 370], "frameon": [34, 343, 345, 346], "plot_haxby_grid_search": [34, 45], "overal": [35, 66, 70, 124, 152, 166, 167, 254, 255], "non_rest": 35, "unique_condit": 35, "return_index": 35, "appear": [35, 54, 89, 281, 294, 296, 380, 415], "argsort": [35, 42, 43, 103], "nifti_mask": [33, 35, 36, 42, 92, 102, 105, 106, 116, 167], "memory_level": [33, 35, 36, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 61, 89, 91, 92, 98, 99, 100, 102, 103, 104, 105, 106, 157, 179, 186, 249, 250, 251, 252, 254, 255, 256, 257, 281, 284, 294, 300, 326, 327, 328, 329, 330, 331, 332, 404, 405, 406], "fit_transform": [35, 36, 42, 47, 49, 50, 51, 52, 54, 55, 56, 58, 61, 70, 89, 92, 98, 99, 100, 102, 103, 104, 105, 106, 111, 116, 125, 152, 154, 157, 168, 179, 185, 256, 257, 263, 264, 281, 294, 325, 326, 327, 328, 329, 330, 331, 332, 403, 404, 405, 406], "feature_select": [31, 35, 36, 41, 42, 44, 94, 98, 102, 105, 106, 111, 162], "selectkbest": [35, 41, 111, 133, 152], "f_classif": [35, 36, 41, 94, 98, 162], "multiclass": [35, 160], "onevsoneclassifi": [35, 160], "onevsrestclassifi": [35, 160], "svc_ovo": 35, "500": [33, 35, 36, 41, 42, 49, 79, 98, 102, 111, 205], "svc_ova": 35, "cross_val_scor": [35, 98, 162], "cv_scores_ovo": 35, "verbos": [33, 35, 36, 42, 43, 44, 48, 49, 52, 53, 54, 55, 56, 57, 58, 61, 89, 91, 92, 98, 99, 100, 102, 105, 138, 152, 179, 186, 187, 189, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 249, 250, 251, 252, 253, 254, 255, 256, 257, 276, 281, 284, 290, 294, 296, 300, 311, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 342, 403, 404, 405, 406, 411], "cv_scores_ova": 35, "ovo": 35, "ova": 35, "boxplot": [35, 94], "y_pred_ovo": 35, "y_pred_ova": 35, "plot_haxby_multiclass": [35, 45], "intrins": [36, 114, 156, 205, 206, 209, 323], "process_mask_img": [36, 44, 164, 253], "back": [36, 41, 42, 48, 55, 98, 100, 102, 104, 116, 126, 134, 135, 152, 156, 164, 167, 179, 256, 257, 263, 264, 325, 328, 331, 341, 373, 403, 404, 405], "astyp": [36, 40, 41, 43, 44, 68, 75, 84, 94], "process_mask": [36, 44, 132, 152], "picked_slic": 36, "parallel": [36, 43, 47, 48, 79, 123, 152, 166, 169, 296, 328, 342], "thread": 36, "progress": [36, 42, 102, 105, 128, 152, 281], "mess": 36, "onc": [36, 49, 57, 117, 148, 152, 153, 158, 159, 166, 168, 169, 171, 172, 175, 179, 403, 422], "fmri_mask": [36, 92, 98, 102, 105, 106, 116], "p_valu": [36, 44, 77, 79, 94, 107, 145, 152, 269, 281, 294], "log10": [36, 42, 44, 77, 79, 94, 102, 105, 106, 296, 342, 415], "p_unmask": 36, "inverse_transform": [36, 40, 42, 49, 55, 92, 98, 100, 102, 103, 104, 105, 106, 111, 115, 124, 134, 141, 150, 152, 156, 185, 256, 257, 263, 264, 325, 326, 327, 328, 329, 330, 331, 332, 403, 404, 405, 406, 437], "surrog": [36, 102], "mean_fmri": 36, "searchlight_img": 36, "scores_": [36, 44, 164], "hot": 36, "f_score": [36, 163, 437], "p_ma": 36, "ma": [20, 36, 40, 48, 50, 54, 64, 106], "f_score_img": 36, "plot_haxby_searchlight": [36, 45], "demo": [37, 100, 101, 108, 110, 112, 113, 116, 144, 148, 152, 167, 185, 220, 249, 261, 262, 263, 264, 265, 266, 389, 393, 397], "namburi": 37, "elliott": [37, 56, 114, 322, 323], "heinzl": 37, "soon": [37, 71, 175], "chee": 37, "w": [37, 44, 106, 114, 185, 187, 205, 208, 209, 211, 215, 225, 233, 254, 255], "hayn": [37, 114, 164], "2011": [37, 49, 58, 114, 117, 122, 133, 152, 153, 160, 164, 165, 196, 203, 205, 206, 209, 212, 218, 226, 228, 230, 243, 322, 323], "56": [11, 23, 33, 36, 37, 39, 40, 42, 43, 44, 48, 62, 71, 72, 101, 102, 109, 114, 160, 198], "582": [33, 37], "592": [33, 37], "coars": 37, "pial_mesh": 37, "term": [37, 54, 66, 89, 92, 115, 149, 152, 158, 160, 166, 169, 172, 174, 177, 178, 225, 228, 254, 255, 268, 288, 322, 418], "within": [37, 47, 55, 66, 68, 79, 88, 100, 102, 141, 144, 150, 152, 156, 158, 164, 168, 171, 249, 250, 253, 278, 281, 283, 288, 294, 298, 299, 318, 326, 327, 328, 329, 330, 331, 332, 340, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 378, 379, 404, 407, 416, 418], "adjac": [37, 141, 152, 258], "nearbi": 37, "infl_mesh": 37, "infl_": 37, "nn": 37, "nearestneighbor": 37, "radius_neighbors_graph": 37, "tolil": 37, "linear_model": [37, 40, 41, 44, 111, 257], "ridgeclassifi": 37, "make_pipelin": [37, 40, 44, 111], "standardscal": [37, 39, 40, 41, 44, 111], "search_light": [37, 253], "preced": [37, 167, 179, 281], "shuffl": [36, 37, 48, 251, 252], "search": [37, 89, 124, 152, 167, 175, 187, 249, 250, 251, 252, 319], "light": [37, 133, 139, 141, 152, 167, 296], "sulc_": 37, "plot_haxby_searchlight_surfac": [37, 45], "overview": [38, 164, 166, 174], "fetch_stimuli": [38, 217], "stimulus_inform": 38, "stim_typ": 38, "skip": [38, 49, 56, 125, 152, 394, 397], "file_nam": [38, 414], "suptitl": [38, 40, 42, 43, 44, 66, 79, 100, 101, 105], "img_path": [38, 320], "ravel": [38, 41, 43, 44, 102, 105, 106], "imread": 38, "plot_haxby_stimuli": [38, 45], "gain": [39, 66, 161, 166, 226], "fetch_mixed_gambl": [39, 149, 152], "zmap_filenam": 39, "zmap": [39, 101, 226], "behavioral_target": 39, "svr": [39, 42, 44, 141, 152, 160, 250, 252, 253], "observ": [39, 44, 58, 61, 63, 66, 71, 79, 80, 81, 102, 160, 164, 168, 169, 172, 174, 179, 272, 403], "learnt": 39, "impos": [39, 126, 152], "relat": [39, 46, 49, 50, 63, 64, 65, 66, 67, 68, 69, 71, 81, 100, 106, 113, 114, 117, 132, 133, 152, 154, 155, 157, 159, 160, 163, 166, 167, 172, 173, 174, 175, 179, 185, 214, 219, 240, 241, 244, 256, 257, 269, 281, 305, 319, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 404, 406, 419, 436, 437], "guid": [39, 123, 152, 167, 171, 173, 174, 179, 181, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 427, 428, 436], "unstructur": 39, "graph_net": 39, "heavi": [39, 42, 153, 167], "spacenetregressor": [39, 43, 165, 254], "regressor": [39, 43, 56, 61, 62, 63, 66, 100, 101, 105, 108, 123, 144, 145, 149, 152, 154, 160, 168, 225, 250, 252, 255, 277, 281, 283, 288, 296, 322, 323, 342], "tv_l1": 39, "ep": [39, 43, 254, 255], "prefer": [39, 51, 99, 156, 167, 177], "plot_mixed_gambles_frem": [39, 45], "partli": [40, 42, 166, 169, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 209, 214, 217, 218, 219, 223, 225, 226, 227, 232, 238], "uchida": [40, 41, 114, 227], "h": [40, 41, 56, 65, 114, 199, 208, 215, 232, 233, 237, 268, 272, 322, 323], "yamashita": [40, 41, 114, 227], "sato": [40, 41, 114, 227], "morito": [40, 41, 114, 227], "tanab": [40, 41, 114, 227], "kamitani": [40, 41, 114, 227], "neuron": [40, 41, 58, 114, 164, 212, 227], "929": [40, 41, 114, 227], "sound": [40, 169], "real": [40, 159, 164, 166, 169, 177, 179], "world": [40, 177, 179, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 376, 379, 388], "stimulu": [40, 41, 65, 100, 169], "particip": [40, 56, 62, 66, 111, 114, 167, 169, 172, 322, 323], "10x10": [40, 41], "binari": [40, 41, 66, 75, 123, 150, 152, 172, 175, 179, 219, 249, 250, 251, 252, 254, 255, 391, 415, 418], "pixel": [40, 41, 169, 281, 294, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 398, 401, 416], "fetch_miyawaki2008": [40, 41, 89], "fmri_random_runs_filenam": 40, "stimuli_random_runs_filenam": 40, "multiniftimask": [40, 41, 48, 49, 145, 147, 152, 176, 249, 250, 251, 252, 254, 255, 256, 257, 294, 296, 342, 404, 437], "clean": [40, 43, 48, 49, 52, 53, 56, 58, 70, 103, 114, 123, 124, 131, 137, 138, 141, 145, 146, 148, 152, 175, 178, 179, 185, 256, 257, 281, 299, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 378, 404, 406], "detrend": [33, 40, 41, 49, 51, 52, 53, 54, 55, 56, 58, 61, 89, 91, 92, 94, 99, 100, 116, 121, 138, 146, 148, 152, 178, 179, 256, 257, 299, 305, 326, 327, 328, 329, 330, 331, 332, 378, 404, 406, 418, 419], "fmri_data": [40, 94, 281, 294], "wiht": 40, "stimulus_shap": 40, "stimulus_run": 40, "reshap": [40, 41, 44, 50, 68, 77, 105, 134, 152, 157, 185], "loadtxt": [40, 41], "pylab": [40, 389], "124": [33, 40, 41], "101": [33, 40, 41, 43, 101, 114, 322, 323, 419], "wspace": [40, 44], "stack": [40, 51, 58, 146, 152, 172, 192], "offset": [40, 51, 84, 103, 144, 152, 178, 204, 205, 314], "begin": [40, 62, 66, 71, 144, 152, 167, 172, 417], "fmri_run": 40, "stimuli_run": 40, "proce": [40, 55, 65, 116], "independ": [40, 48, 66, 97, 109, 113, 126, 152, 156, 158, 159, 164, 166, 169, 172, 179, 214, 249, 250, 251, 252, 256, 299, 306, 311, 322, 323, 325, 331, 342, 392, 397, 418], "partit": [3, 16, 29, 40], "hold": [40, 78, 166, 167, 175, 256, 257, 288, 342, 353, 404], "held": [40, 164, 167, 249, 250, 251, 252, 436], "10th": 40, "r2_score": [40, 255], "multioutput": [40, 255], "raw_valu": 40, "nifti1imag": [4, 33, 36, 40, 43, 44, 48, 49, 52, 56, 75, 81, 84, 91, 133, 134, 136, 141, 152, 157, 177, 199, 201, 202, 204, 205, 208, 219, 226, 240, 241, 242, 243, 244, 245, 249, 250, 251, 252, 256, 257, 276, 278, 281, 294, 296, 297, 298, 300, 302, 306, 307, 309, 310, 311, 314, 315, 316, 317, 318, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 353, 358, 360, 364, 370, 374, 375, 376, 404, 406, 407, 408, 412, 413], "threshold_img": [40, 81, 88, 124, 126, 148, 152, 297, 298], "cut_scor": 40, "bring": [40, 48, 161, 167, 174, 341], "score_map_img": 40, "thresholded_score_map_img": 40, "mark": [40, 56, 100, 114, 225, 322, 323], "four": [40, 44, 66, 148, 152, 179], "coord_transform": [40, 135, 152], "def": [40, 41, 44, 47, 53, 64, 66, 68, 100, 107, 111, 167, 393, 395], "index_to_xy_coord": 40, "affin": [10, 40, 43, 49, 56, 71, 83, 89, 91, 93, 94, 96, 113, 132, 147, 152, 172, 176, 179, 249, 250, 251, 252, 254, 255, 256, 257, 281, 294, 299, 300, 301, 302, 304, 309, 310, 311, 312, 313, 314, 315, 317, 326, 327, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 343, 345, 346, 397, 404, 409, 412, 413, 422, 424, 437], "newaxi": [40, 44, 80, 84], "xy_indices_of_special_voxel": 40, "31": [23, 29, 33, 36, 39, 40, 41, 42, 43, 44, 45, 62, 65, 71, 91, 101, 102, 114, 165, 206], "marker": [40, 139, 141, 144, 146, 152, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 379, 388, 398, 399, 401, 406, 408, 437], "add_mark": [40, 55, 61, 70, 100, 130, 136, 139, 152, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 435], "magenta": [40, 70, 435], "140": [33, 36, 40, 41, 42, 44, 72, 102, 105], "lw": [40, 70], "construct": [40, 52, 54, 98, 155, 158, 164, 167, 168, 173, 174, 268, 269, 272, 295, 414], "gcf": 40, "set_size_inch": [40, 70], "closer": [40, 49, 166, 415], "presenc": [40, 66, 102, 406, 408], "lasso": [40, 57, 58, 153, 160, 165, 166, 250, 252, 254, 255, 257], "lassolarscv": 40, "sparsiti": [40, 48, 114, 126, 152, 153, 157, 158, 160, 161, 165, 166, 172, 187, 189, 254, 255, 257, 406], "max_it": [39, 40, 43, 48, 50, 57, 186, 187, 189, 249, 250, 251, 252, 254, 255], "marked_pixel": 40, "gridspec": [40, 146, 152], "gs1": 40, "1780": [40, 42, 102], "1951": [40, 141, 152], "2131": [40, 141, 152], "rf": [40, 68], "named_step": [40, 44, 98], "zeros_lik": [40, 68, 84, 102], "vmax": [40, 44, 49, 50, 52, 53, 54, 55, 56, 57, 58, 76, 79, 80, 84, 90, 100, 102, 105, 107, 111, 121, 123, 141, 152, 157, 377, 378, 382, 384, 385, 387, 390, 391, 392, 393, 395, 396, 398, 399, 400, 402, 435], "ax_im": 40, "masked_less": [40, 106], "green": [40, 49, 89, 92, 114, 146, 152, 213, 268, 272], "add_patch": 40, "updat": [40, 93, 100, 123, 124, 125, 128, 132, 133, 138, 141, 147, 148, 150, 152, 175, 185, 186, 187, 205, 228, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 325, 326, 327, 328, 329, 330, 331, 332, 403, 404, 405, 406], "1935": [40, 114], "rdpu": 40, "rel": [40, 49, 65, 66, 91, 167, 169, 172, 175, 249, 250, 251, 252, 253, 254, 255, 281, 283, 288, 303, 398, 400, 402], "roughli": [40, 160, 167, 169], "relationship": [40, 42, 75, 164, 171, 173, 174, 225, 342], "plot_miyawaki_encod": [40, 45], "elabor": [41, 126, 152, 435], "articl": [41, 114, 161, 164, 165, 166, 174, 193, 195, 196, 197, 199, 200, 203, 205, 206, 207, 213, 218, 223, 225, 226, 227, 228, 230, 232, 238, 243, 251, 252, 322, 323, 342, 378, 419], "stderr": 41, "miyawaki_dataset": [41, 89], "x_random_filenam": 41, "x_figure_filenam": 41, "y_random_filenam": 41, "y_figure_filenam": 41, "y_shape": 41, "n_featur": [41, 47, 57, 166, 185, 186, 187, 189, 191, 249, 250, 251, 252, 254, 255, 256, 257, 268, 281, 294, 403, 405, 411], "list_of_2d_arrai": 41, "squar": [41, 43, 49, 66, 100, 102, 105, 114, 154, 160, 165, 166, 168, 185, 255, 268, 271, 272, 273, 281, 294, 305, 321, 322, 327, 330, 342, 403, 404, 405, 419], "y_row": 41, "y_col": 41, "height_tf": 41, "width_tf": 41, "yt_tall": 41, "dot": [41, 44, 55, 100, 103, 166, 271, 272, 273, 274, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370], "yt_larg": 41, "yt_big": 41, "r_": 41, "orthogonalmatchingpursuit": 41, "omp": 41, "clf": [41, 135, 152], "n_clf": 41, "03": [3, 27, 30, 32, 33, 41, 44, 45, 53, 56, 82, 91, 96, 109, 114, 164, 296, 322, 323, 342], "scl": 41, "n_nonzero_coef": 41, "03d": [41, 100], "split_multi_scal": 41, "multi_scal": 41, "yw": 41, "yh": 41, "split_index": 41, "tall": 41, "y_pred_tal": 41, "1x2": 41, "applic": [41, 146, 152, 154, 160, 166, 173, 281, 294, 328, 342, 409, 410, 416, 435, 436, 437], "calculu": 41, "height_tf_i": 41, "y_pred_larg": 41, "2x1": 41, "width_tf_i": 41, "y_pred_big": 41, "2x2": [41, 139, 152, 353, 355, 358, 372, 377, 382, 385, 390, 391, 392, 435], "accuracy_scor": [41, 51], "f1_score": 41, "precision_scor": 41, "recall_scor": 41, "recal": [41, 249, 251], "zero_divis": 41, "f1": [41, 159, 249, 251], "six": 41, "ground": [41, 44, 57, 159], "truth": [41, 44, 57, 159], "sp1": 41, "131": [33, 41, 72, 114, 208], "sp2": 41, "132": [33, 41, 49, 52], "sp3": 41, "133": [33, 41], "binar": [41, 94, 147, 152, 298], "miyawaki2008_reconstruction_": 41, "plot_miyawaki_reconstruct": [41, 45], "densiti": [42, 57, 75, 166, 171, 173, 218, 232], "agre": [42, 75, 167, 232, 294, 296], "agreement": [42, 62, 75, 232], "spm8": [42, 75, 195, 232], "newseg": [42, 75], "limit": [42, 75, 88, 103, 124, 152, 154, 164, 166, 167, 228, 323, 378], "ran": 42, "prepar": [42, 58, 94, 99, 101, 108, 116, 128, 152, 163, 176, 263, 264, 326, 327, 328, 329, 330, 332, 406, 437], "impact": [42, 66, 78, 148, 152, 164, 167, 175, 179, 281, 294, 323], "significantli": [42, 66, 138, 152, 164, 166], "noisi": [42, 92, 153], "detriment": [42, 323], "permut": [42, 77, 79, 102, 105, 114, 123, 144, 152, 162, 164, 169, 296, 313, 342, 429], "exact": [42, 164, 167, 169, 218, 219, 435], "comparison": [42, 49, 51, 57, 62, 66, 81, 93, 99, 100, 102, 114, 117, 153, 156, 163, 164, 165, 170, 172, 196, 437], "clearer": [42, 167], "oasis_dataset": [42, 75], "fetch_oasis_vbm": [42, 43, 75], "gray_matter_map_filenam": [42, 75], "gray_matter_map": [42, 43, 75, 232], "ext_var": [42, 43, 75, 77, 79, 105, 232], "train_test_split": [42, 43], "gm_imgs_train": [42, 43], "gm_imgs_test": [42, 43], "age_train": [42, 43], "age_test": [42, 43], "train_siz": [42, 43], "random_st": [33, 36, 42, 43, 44, 48, 49, 50, 51, 92, 99, 103, 104, 150, 152, 157, 249, 251, 256, 257, 281, 290, 296, 342, 403, 404], "white_matter_map": [42, 75, 232], "cach": [42, 43, 49, 54, 56, 102, 122, 126, 152, 156, 186, 249, 250, 251, 252, 254, 255, 256, 257, 281, 294, 300, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 404, 405, 406, 422], "gm_maps_mask": 42, "variancethreshold": 42, "variance_threshold": 42, "get_support": 42, "decoderregressor": [42, 141, 144, 145, 152, 160, 249, 252], "benefit": [42, 49, 56, 66, 141, 152, 167, 178], "some_high_valu": [42, 43], "advantag": [42, 43, 69, 166, 179], "core": [3, 16, 20, 29, 42, 43, 48, 50, 54, 58, 166, 167, 175, 187, 436], "neg_mean_absolute_error": [42, 250, 252], "trend": [42, 43, 89, 179], "etc": [42, 43, 80, 89, 92, 94, 117, 165, 168, 172, 177, 225, 249, 250, 251, 252, 254, 255, 273, 331], "perm": [42, 43], "age_pr": 42, "prediction_scor": 42, "bg_filenam": 42, "absolut": [42, 43, 58, 111, 141, 152, 164, 166, 167, 210, 220, 233, 303, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 376, 377, 379, 384, 385, 387, 391, 392, 393, 396, 399, 400, 402, 435], "year": [42, 43, 114, 166, 175, 214, 232], "mass_univari": [42, 79, 102, 105, 144, 150, 152, 164, 171], "permuted_ol": [42, 79, 102, 105, 123, 124, 144, 149, 150, 152, 164, 171, 296], "neg_log_pv": [42, 77, 79, 102], "t_scores_original_data": [42, 102], "intercept": [42, 75, 76, 77, 79, 80, 81, 102, 106, 124, 152, 164, 249, 250, 251, 252, 254, 255, 295, 296, 342], "n_perm": [42, 77, 79, 102, 105, 296, 342], "10000": [39, 42, 49, 55, 102, 105, 296, 342], "signed_neg_log_pv": [42, 102], "signed_neg_log_pvals_unmask": [42, 102], "rdbu_r": [42, 44, 102, 389], "log_": [42, 102, 105, 106], "parametr": [42, 65, 66, 77, 79, 102, 105, 106, 114, 164, 171, 172, 269, 270, 275, 299, 418], "n_detect": [42, 102, 105], "detect": [42, 68, 77, 79, 89, 100, 102, 106, 114, 164, 169, 172, 179, 185, 322, 323, 403, 435], "plot_oasis_vbm": [42, 45, 141, 152], "ag": [43, 46, 59, 78, 97, 109, 113, 114, 141, 152, 153, 160, 161, 165, 171, 172, 173, 174, 185, 193, 203, 214, 218, 225, 232, 238, 243, 249, 250, 251, 252, 254, 255, 325, 330, 379, 389, 397], "concentr": [43, 167, 169, 172], "200": [33, 36, 41, 42, 43, 44, 94, 102, 103, 105, 114, 185, 197, 205, 225, 254, 255], "increas": [34, 43, 44, 48, 66, 70, 79, 89, 92, 103, 104, 124, 135, 152, 163, 164, 166, 169, 172, 178, 189, 296, 323, 336, 342, 377, 390, 391, 392, 399, 404, 417, 437], "ram": 43, "box": [43, 84, 98, 104, 134, 152, 160, 167, 178, 314], "dataset_fil": 43, "gm_img": 43, "check_random_st": [43, 44], "rng": [43, 167], "intermedi": [43, 69, 162, 174], "graph": [43, 47, 53, 57, 153, 155, 165, 166, 172, 173, 249, 250, 254, 255, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379, 388, 437], "beauti": 43, "tv": [43, 114, 165, 249, 250, 254, 255], "expens": 43, "longer": [43, 104, 121, 123, 124, 125, 135, 139, 141, 144, 146, 148, 150, 152, 169], "runtim": [43, 150, 152, 167, 254, 255], "mse": [43, 254, 255, 273], "ax1": [43, 63, 386], "211": [33, 41, 43], "ax2": [43, 63, 386], "212": [33, 41, 43, 72, 204], "plot_oasis_vbm_space_net": [43, 45], "sketch": 44, "mathbf": 44, "opposit": [44, 71, 164], "corner": [44, 131, 152, 167, 316], "middl": [44, 66, 91, 114, 138, 146, 152, 232, 320], "__doc__": [44, 71, 72], "nibabel": [4, 33, 36, 44, 49, 52, 56, 62, 75, 81, 84, 91, 123, 124, 132, 133, 135, 141, 146, 148, 150, 152, 166, 177, 178, 256, 257, 300, 301, 302, 309, 314, 315, 316, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 404, 406, 407, 408, 412, 413], "linalg": [44, 166], "ndimag": [44, 94, 178, 219, 241, 244, 308, 334, 335, 336, 338, 339], "gaussian_filt": 44, "f_regress": [44, 102, 105, 106, 111], "create_simulation_data": 44, "snr": [44, 172, 299, 418], "roi_siz": 44, "smooth_x": 44, "xx": 44, "randn": [44, 63], "xi": [44, 114, 205], "norm_nois": 44, "norm": [44, 55, 62, 76, 79, 101, 107, 108, 185, 191, 249, 250, 251, 252, 254, 255, 256, 257, 281, 378, 403, 404, 405, 406], "exp": 44, "noise_coef": 44, "log": [44, 49, 53, 62, 77, 79, 94, 128, 152, 164, 166, 268, 271, 272, 273, 274, 310, 386], "1f": [44, 393, 396], "db": [44, 114, 273, 274], "plot_slic": 44, "11": [3, 6, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 71, 72, 77, 78, 79, 82, 84, 86, 91, 92, 95, 98, 100, 101, 102, 103, 104, 105, 106, 108, 111, 114, 118, 126, 135, 138, 139, 140, 148, 152, 186, 198, 199, 225, 226, 227, 234], "hspace": [44, 49, 57], "97": [11, 30, 33, 36, 39, 40, 42, 43, 44, 62, 71, 88, 102], "bool": [44, 94, 103, 185, 186, 187, 189, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 209, 211, 212, 213, 214, 217, 218, 219, 221, 222, 223, 225, 226, 227, 228, 230, 232, 238, 249, 250, 251, 252, 253, 254, 255, 256, 257, 276, 278, 281, 294, 296, 297, 299, 303, 305, 309, 312, 314, 315, 318, 319, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 374, 377, 378, 379, 380, 381, 382, 384, 385, 387, 388, 389, 390, 391, 392, 393, 395, 396, 398, 399, 400, 402, 403, 404, 405, 406, 407, 409, 410, 415, 416, 417, 418, 419], "uint8": [44, 56, 91, 150, 152, 312], "recov": [44, 58, 134, 152, 153], "elast": 44, "bayesian": [44, 169], "metaprior": 44, "ridgecv": [44, 124, 152, 249, 250, 251, 252], "elasticnetcv": 44, "bayesian_ridg": 44, "bayesianridg": 44, "enet_cv": 44, "l1_ratio": [44, 254, 255], "ridge_cv": 44, "r2": [44, 145, 152, 250, 252, 273], "expos": [44, 49, 117, 125, 130, 134, 135, 152, 167, 177, 228, 229, 230, 231], "fairli": [44, 160, 169], "attribut": [44, 48, 49, 50, 84, 89, 116, 117, 125, 136, 145, 146, 148, 149, 150, 152, 153, 156, 157, 158, 164, 167, 177, 179, 185, 186, 187, 194, 198, 200, 203, 214, 217, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238, 249, 250, 251, 252, 254, 255, 256, 257, 263, 271, 272, 273, 274, 281, 301, 309, 322, 323, 326, 327, 328, 329, 330, 331, 332, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 393, 395, 396, 403, 404, 405, 406, 421, 422], "t1": [44, 75, 147, 152, 195, 218, 240, 242, 243, 245, 377, 435], "els": [44, 47, 68, 70, 72, 94, 100, 226, 249, 250, 251, 252, 254, 255, 394], "elapsed_tim": 44, "__class__": [44, 48, 49], "__name__": [44, 48, 49], "isnan": [44, 77, 94, 102, 105, 106], "exercic": 44, "recurs": [44, 49, 98, 114, 141, 152, 156, 162, 172, 173, 404, 405, 411], "elimin": [44, 98, 162, 165, 390, 391], "rfe": [44, 98, 162], "tip": [44, 174], "plot_simulated_data": [44, 45], "turn": [47, 66, 84, 154, 156, 166, 179, 281, 294, 334, 335, 336, 338, 339, 390, 391, 392, 399, 416], "find_parcellation_cut_coord": [47, 58, 138, 148, 152, 154, 375, 379], "find_probabilistic_atlas_cut_coord": [47, 50, 53, 138, 152, 154, 157, 374, 379], "intermediari": 47, "multiniftilabelsmask": [47, 123, 125, 152, 176, 437], "multiniftimapsmask": [47, 123, 125, 152, 176, 437], "connectivitymeasur": [47, 50, 51, 54, 56, 58, 99, 111, 125, 126, 128, 131, 134, 144, 152, 153, 154, 157], "author": [47, 55, 114, 166, 167, 175, 432], "fetch_atlas_yeo_2011": [47, 86, 154], "17": [6, 11, 21, 23, 25, 27, 30, 32, 33, 34, 36, 39, 40, 42, 43, 45, 47, 62, 69, 71, 73, 77, 80, 91, 101, 102, 103, 109, 114, 138, 152, 166, 195, 205, 209, 225], "liber": [47, 79], "thick_17": [47, 209], "fetch_development_fmri": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 85, 89, 91, 92, 95, 99, 104, 141, 152, 153, 154, 156, 157, 174, 179], "counfound": 47, "confound": [33, 47, 49, 50, 51, 52, 53, 54, 55, 58, 62, 77, 78, 99, 100, 101, 105, 108, 114, 116, 121, 124, 125, 128, 138, 144, 145, 146, 148, 150, 152, 154, 157, 158, 159, 166, 172, 176, 178, 185, 194, 214, 256, 257, 281, 294, 295, 296, 299, 305, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 342, 404, 406, 418, 419, 426, 437], "conenctivitymeasur": 47, "connectome_measur": [47, 50, 157], "kind": [3, 16, 47, 50, 54, 56, 58, 79, 111, 116, 134, 152, 153, 157, 160, 166, 172, 185, 422, 435], "labels_img": [47, 49, 56, 91, 94, 111, 154, 263, 326, 329, 374, 407, 409, 412], "standardize_confound": [33, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 89, 91, 92, 99, 148, 152, 157, 179, 256, 326, 327, 328, 329, 330, 331, 332, 406, 418], "time_seri": [47, 51, 52, 54, 56, 58, 153, 154], "mean_correlation_matrix": [47, 51], "mean_": [47, 51, 111, 153, 185], "80": [6, 11, 33, 36, 40, 42, 43, 44, 47, 54, 62, 65, 66, 67, 71, 72, 84, 101, 102, 103, 105, 114, 167, 203, 298, 318, 353, 358, 360, 364, 370, 376, 422], "strength": [47, 141, 144, 152, 316, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379, 435], "latter": [47, 160, 166, 185, 186, 187, 201, 202, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 325, 326, 327, 328, 329, 330, 331, 332, 384, 392, 396, 403, 404, 405, 406], "lag_correl": 47, "lag_cor": 47, "corrcoef": 47, "lag_correlation_matrix": 47, "maps_img": [47, 52, 53, 54, 154, 179, 326, 327, 329, 330, 375, 390, 406, 408, 410, 413], "85": [6, 21, 23, 33, 36, 39, 40, 42, 43, 44, 47, 49, 62, 91, 101, 102, 105, 126, 152, 336, 337, 339], "plot_atlas_comparison": [47, 59], "fmr": 48, "exhibit": [48, 169, 179], "fluctuat": [48, 66, 166, 169, 172], "decomposit": [48, 50, 92, 97, 103, 109, 113, 114, 124, 126, 133, 136, 144, 150, 152, 157, 158, 173, 214, 305, 306, 311, 325, 328, 331, 392, 397, 406, 419], "simultan": [48, 166, 189], "priori": 48, "children": [48, 99, 141, 152, 173, 214], "young": [48, 114, 173, 197, 225, 232], "adult": [48, 51, 99, 114, 141, 152, 173, 214, 232], "watch": [48, 49, 50, 52, 54, 55, 85, 89, 92, 104, 141, 152, 155, 173, 174, 179, 214, 437], "movi": [48, 49, 50, 52, 54, 55, 85, 89, 92, 104, 141, 152, 155, 173, 174, 179, 214, 437], "algorithm": [48, 49, 89, 92, 94, 102, 104, 105, 116, 153, 156, 157, 158, 161, 162, 164, 172, 179, 180, 182, 186, 189, 232, 256, 257, 305, 337, 339, 403, 406, 408, 419], "288": [33, 41, 48, 66, 72, 114, 158, 256], "299": [33, 41, 48, 114, 158, 256], "preprint": 48, "rest_dataset": [48, 50, 53, 157], "faster": [48, 49, 104, 135, 152, 165, 166, 167, 228, 257, 314, 315, 384, 385, 391, 392, 399, 422], "n_compon": [48, 50, 92, 103, 104, 157, 256, 257, 411], "mask_strategi": [48, 89, 92, 104, 141, 147, 152, 179, 249, 250, 251, 252, 256, 257, 328, 331, 404], "compon": [48, 50, 54, 66, 92, 94, 97, 109, 113, 114, 126, 133, 134, 136, 144, 152, 154, 155, 156, 157, 169, 172, 177, 178, 185, 186, 187, 196, 206, 214, 225, 249, 250, 251, 252, 253, 254, 255, 256, 257, 271, 273, 274, 281, 294, 306, 308, 311, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 376, 392, 397, 403, 404, 405, 406, 407, 408, 419, 437], "components_img_": [48, 50, 136, 152, 157, 158, 256, 257], "canica_components_img": 48, "components_img": [48, 50, 157], "canica_resting_st": 48, "cur_img": [48, 87], "ic": [48, 103], "natur": [48, 114, 117, 172, 214, 225, 228, 230], "cleaner": [48, 66, 138, 152], "compress": [48, 114, 138, 152, 155, 158, 177, 257, 437], "onlin": [48, 114, 158, 167, 257, 436], "isbi": [48, 114, 158, 256, 257], "2016": [48, 100, 114, 128, 129, 130, 131, 132, 152, 158, 215, 233, 257, 378], "lectur": [48, 114, 158, 174, 185], "dictlearn": [48, 50, 124, 126, 136, 152, 157, 158], "dict_learn": [48, 50, 157], "n_epoch": [48, 257], "umask": 48, "dictlearning_components_img": 48, "dictionary_learning_resting_st": 48, "comp": [48, 196], "per_compon": [48, 144, 152, 256, 257, 404], "ticker": [48, 49], "formatstrformatt": 48, "gca": [48, 51, 99], "xaxi": [48, 49], "set_major_formatt": [48, 49], "plot_compare_decomposit": [48, 59, 141, 152], "constrain": [49, 50, 114, 156, 173, 198, 203, 404], "agglomer": [49, 114, 172, 173, 251, 252, 403, 404, 405, 411], "regim": 49, "subsequ": [49, 84, 179, 228, 230, 232, 322, 323], "empir": [49, 156, 163, 164, 165, 166, 186, 189, 323, 437], "baptist": [49, 114, 186, 223, 228, 230, 256], "polin": [49, 64, 67, 114, 117, 186, 223, 228, 230, 256, 299, 418], "good": [49, 56, 65, 66, 116, 133, 152, 153, 156, 158, 160, 161, 162, 163, 165, 166, 167, 168, 175, 177, 179, 228, 251, 252, 373, 437], "2014": [49, 100, 102, 114, 156, 157, 164, 165, 225, 322, 342, 406], "supervis": [49, 160, 162, 163, 172, 174], "evelyn": [49, 114, 165], "eger": [49, 114, 165], "christin": [49, 114, 238], "keribin": 49, "elsevi": 49, "pictur": [49, 116, 156, 164, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422], "discuss": [49, 56, 111, 138, 152, 156, 159, 162, 164, 169, 171, 175, 178, 323, 342, 436], "long": [49, 117, 167, 169, 322, 323, 378], "agglom": [49, 141, 152, 156, 404], "labels_img_": [49, 156, 326, 329, 404], "ward_labels_img": 49, "ward_parcel": 49, "first_plot": 49, "effect": [49, 53, 60, 61, 64, 66, 69, 70, 71, 73, 75, 79, 80, 89, 95, 100, 102, 113, 114, 125, 137, 152, 158, 160, 164, 166, 168, 169, 179, 185, 186, 187, 201, 202, 216, 229, 249, 250, 251, 252, 253, 254, 255, 256, 257, 269, 270, 271, 273, 274, 275, 277, 278, 281, 284, 294, 296, 311, 323, 325, 326, 327, 328, 329, 330, 331, 332, 342, 377, 390, 391, 392, 397, 399, 403, 404, 405, 406], "approxim": [49, 64, 71, 114, 156, 273, 274, 321, 405, 411], "mask_img_": [49, 66, 77, 79, 89, 92, 116, 179, 249, 250, 251, 252, 254, 255, 256, 257, 264, 326, 328, 329, 331], "original_voxel": 49, "mean_func_img": [49, 92], "opportun": 49, "fmri_reduc": 49, "fmri_compress": 49, "60000": 49, "But": [49, 80, 98, 157, 166, 169, 179], "10mm": 49, "ON": 49, "kmeans_labels_img": 49, "kmeans_parcel": 49, "grow": [49, 153], "caus": [43, 48, 49, 84, 92, 126, 152, 317], "unbalanc": 49, "singleton": [49, 325, 326, 327, 328, 329, 330, 331, 332, 406], "tailor": [49, 69, 156], "enforc": [49, 89, 150, 152, 153, 166, 167, 254, 255, 281], "root": [49, 166, 185, 201, 202, 272, 322, 403, 404, 405], "piec": [49, 177, 437], "adapt": [49, 65, 116, 157, 160, 167, 281, 290, 322], "hierarchical_kmean": [49, 148, 152, 404], "hkmean": 49, "hkmeans_labels_img": 49, "nifti1": [4, 33, 36, 49, 52, 56, 75, 81, 91, 141, 152, 316, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 404, 406, 407, 408, 412, 413], "hierarchical_kmeans_parcel": 49, "count": [49, 101, 125, 152, 228, 230, 271], "600": [33, 36, 42, 49, 102, 118, 152, 205], "kmeans_count": 49, "return_count": 49, "hkmeans_count": 49, "voxel_ratio": 49, "round": [49, 393, 396], "bin": [33, 49, 167, 281, 290, 436], "3000": [49, 102], "nrow": [49, 63, 79, 100, 101], "sharex": 49, "gridspec_kw": [49, 80, 100], "height_ratio": 49, "semilogx": 49, "hist": [49, 70, 386], "set_ylim": 49, "scalarformatt": 49, "yaxi": 49, "set_label_coord": 49, "08": [27, 30, 32, 33, 36, 49, 114, 225, 303, 322, 378], "ec": 49, "thousand": [49, 179, 404], "properti": [49, 71, 162, 166, 169, 172, 179, 258, 281, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370], "notabl": [49, 154], "constraint": [49, 156, 166, 319], "kahn": [49, 114, 405, 411], "ieee": [49, 114, 165, 256, 257, 405, 411], "transact": [49, 114, 165], "pp": 49, "669": [33, 49, 114, 405, 411], "681": [33, 49, 114, 405, 411], "march": [49, 120, 136, 145, 152, 253], "2019": [49, 51, 99, 114, 139, 140, 141, 152, 213, 405, 411], "hal": [49, 114, 165, 406], "archiv": [49, 232], "ouvert": 49, "01366651": 49, "5000": [34, 49, 55, 98, 102], "rena_labels_img": 49, "rena_parcel": 49, "fmri_reduced_rena": 49, "compressed_img_rena": 49, "notic": [49, 58, 66, 101, 108, 110, 111, 113, 319], "accur": [49, 58, 66, 69, 141, 149, 152, 164, 168, 169], "said": [49, 169], "plot_data_driven_parcel": [49, 59], "regionextractor": [50, 87, 126, 128, 134, 139, 152, 157, 407, 408], "decompos": [50, 153, 157, 169, 406], "inspir": [50, 165, 167, 175], "idea": [50, 88, 94, 159, 166, 169], "canica": [50, 123, 124, 136, 147, 152, 155, 172, 257, 328, 437], "instanti": [50, 51, 91, 148, 152, 253, 353, 355, 358, 360, 362, 364, 366, 368, 370], "nomin": 50, "nonzero": [50, 316, 406], "surviv": [50, 145, 152, 269, 406], "extractor": [50, 87, 157, 406, 408], "thresholding_strategi": [50, 87, 157, 406], "ratio_n_voxel": [50, 157, 406], "local_region": [50, 157, 406, 408], "min_region_s": [50, 87, 88, 157, 406, 408], "1350": [42, 50, 102, 157, 406, 408], "regions_img_": [50, 87, 157, 406], "regions_extracted_img": [50, 157, 408], "index_": [50, 87, 157, 406], "regions_index": [50, 157], "n_regions_extract": [50, 157], "neach": [50, 157], "those": [50, 62, 66, 69, 71, 80, 89, 108, 148, 152, 158, 160, 162, 166, 167, 169, 175, 228, 318, 321, 329, 378, 400, 406, 409, 412, 413, 422], "timeseries_each_subject": [50, 157], "mean_correl": [50, 157], "regions_img": [50, 87, 157], "coords_connectom": [50, 157], "find_xyz_cut_coord": [50, 87, 128, 135, 152, 157], "side": [50, 53, 63, 66, 94, 102, 123, 145, 152, 164, 228, 269, 334, 337, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 378, 386, 387, 415, 416], "nice": [50, 157], "regions_indices_of_map3": [50, 157], "rgbcmyk": [50, 157], "each_index_of_map3": [50, 157], "add_overlai": [50, 121, 152, 157, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 435], "alpha_cmap": [50, 157], "plot_extract_regions_dictlearning_map": [50, 59], "tangent": [51, 99, 134, 152, 157, 185], "embed": [51, 99, 414], "outperform": [51, 99, 153, 158], "dadi": [51, 99, 114, 200], "care": [51, 99, 116, 159, 160, 162, 166, 204, 205, 268], "development_dataset": [51, 99], "msdl_data": [51, 99], "msdl_coord": [51, 99], "region_coord": [51, 52, 54, 99, 130, 152, 203], "n_region": [51, 91], "niftimapsmask": [51, 52, 53, 54, 91, 99, 120, 125, 138, 145, 148, 152, 154, 176, 327, 329, 406, 410, 413, 437], "filter": [51, 55, 56, 58, 66, 68, 94, 103, 115, 116, 121, 123, 124, 138, 141, 146, 148, 150, 152, 159, 172, 176, 178, 193, 228, 230, 232, 248, 249, 250, 251, 252, 254, 255, 256, 257, 281, 284, 299, 316, 318, 319, 322, 325, 326, 327, 328, 329, 330, 331, 332, 404, 406, 417, 418, 437], "band": [51, 58, 150, 152, 193, 322, 417], "resampling_target": [51, 53, 54, 91, 94, 99, 179, 326, 327, 329, 330], "low_pass": [33, 49, 51, 52, 53, 54, 55, 56, 58, 61, 89, 91, 92, 99, 100, 138, 152, 179, 249, 250, 251, 252, 254, 255, 256, 257, 299, 326, 327, 328, 329, 330, 331, 332, 404, 406, 417, 418], "phenotyp": [51, 62, 99, 149, 152, 159, 163, 176, 193, 194, 214, 238, 437], "pooled_subject": 51, "func_fil": 51, "confound_fil": 51, "child_adult": [51, 99], "simpler": 51, "commonli": [51, 156, 168, 172, 174, 175, 179, 323], "margin": [51, 314], "pairwis": [51, 153], "correlation_measur": [51, 54, 56], "individu": [51, 58, 62, 66, 69, 72, 76, 78, 79, 80, 81, 94, 100, 101, 108, 114, 153, 158, 171, 172, 174, 176, 179, 185, 186, 211, 223, 296, 340, 394, 437], "2d": [51, 54, 84, 91, 92, 98, 103, 115, 150, 152, 159, 162, 176, 179, 186, 187, 188, 189, 190, 256, 257, 268, 277, 301, 321, 325, 326, 327, 328, 329, 330, 331, 332, 333, 343, 345, 346, 347, 348, 349, 350, 351, 352, 357, 359, 361, 363, 365, 367, 369, 384, 403, 404, 405, 406, 412, 413, 420, 422, 428, 437], "reflect": [51, 101, 153, 167, 169, 197, 390, 391], "visibl": [51, 79, 147, 152, 158, 314, 387, 393, 395, 396, 400, 402, 435], "reveal": [51, 101, 102, 164], "partial_correlation_measur": 51, "partial_correlation_matric": 51, "weaker": [51, 66, 79], "tangent_measur": 51, "deviat": [51, 153, 249, 250, 251, 252, 254, 255], "tangent_matric": 51, "perturb": 51, "anticorrel": [51, 114, 323], "distinguish": [51, 94, 98, 99, 160, 164, 169, 173, 177], "stratifiedshufflesplit": [51, 99], "preserv": [51, 58, 99, 304, 316, 387, 403, 404, 405], "linearsvc": [51, 98, 99, 164, 249, 251], "return_invers": 51, "test_siz": [51, 99], "1d": [51, 102, 105, 106, 116, 150, 152, 177, 179, 185, 253, 271, 273, 274, 277, 283, 299, 321, 325, 326, 327, 328, 329, 330, 331, 332, 353, 360, 364, 370, 373, 406, 407, 412, 417, 418, 420, 422], "mean_scor": [51, 99], "scores_std": [51, 99], "align": [51, 56, 91, 99, 315, 317, 384], "xerr": [51, 99], "set_axisbelow": [51, 99], "axvlin": 51, "linestyl": 51, "showcas": [51, 60, 74, 76, 99, 110, 113, 156, 161, 167], "larger": [51, 75, 80, 86, 99, 158, 160, 164, 166, 167, 169, 254, 255, 377, 390, 391, 392, 399], "cohort": [51, 99], "plot_group_level_connect": [51, 59, 134, 141, 152], "link": [52, 114, 117, 125, 131, 138, 143, 152, 155, 159, 162, 167, 169, 172, 175, 195, 200, 225, 238, 344, 354, 355, 379, 437], "negat": [52, 83, 96, 113, 246, 310, 392, 397], "dens": [52, 54, 153, 166, 336], "highest": [52, 54, 249, 250, 251, 252, 284, 305, 419], "graphicallassocv": [52, 53, 57, 58, 153, 166, 187], "scitkit": [52, 53, 57, 58], "v0": [52, 53, 57, 58, 138, 141, 146, 148, 152, 205], "graphlassocv": [52, 53, 57, 58], "covariance_": [52, 53, 58, 153], "precision_": [52, 53, 57, 153], "plot_inverse_covariance_connectom": [52, 59], "40": [3, 7, 17, 20, 33, 36, 39, 40, 42, 43, 44, 53, 62, 63, 67, 71, 82, 91, 94, 101, 102, 105, 194, 203, 228, 422], "plot_matric": 53, "cov": [53, 271, 273, 274, 436], "prec": [53, 166], "put": [53, 54, 64, 67, 71, 98, 121, 152, 167, 185, 249, 250, 251, 252, 256, 257, 281, 326, 327, 328, 329, 330, 331, 332, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 378, 404, 406, 418], "diagon": [53, 54, 56, 58, 86, 131, 152, 166, 178, 185, 189, 191, 192, 313, 314, 373, 389, 407], "clariti": 53, "span": [53, 71, 169, 377, 390, 391, 392, 399], "msdl_atlas_dataset": 53, "high_variance_confound": [33, 49, 52, 53, 54, 56, 58, 66, 89, 91, 92, 128, 145, 152, 179, 326, 327, 328, 329, 330, 331, 332], "subject_time_seri": 53, "confound_filenam": [53, 55], "region_t": 53, "groupsparsecovariancecv": [53, 57, 153, 166], "gsc": [53, 57], "gl": [53, 57], "atlas_region_coord": [53, 154], "graphicallasso": [53, 153], "edge_vmax": [53, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379], "edge_vmin": [53, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379], "groupsparsecovari": [53, 153, 166, 187], "precisions_": [53, 57, 153, 186, 187], "covariances_": [53, 153, 186, 187], "plot_multi_subject_connectom": [53, 59], "21": [6, 9, 10, 11, 17, 23, 33, 36, 39, 40, 42, 43, 54, 62, 65, 66, 67, 71, 73, 77, 91, 101, 102, 103, 128, 146, 152, 238], "generate_report": [54, 89, 91, 92, 125, 148, 152, 179, 281, 294, 326, 327, 328, 329, 330, 331, 406], "displayed_map": [54, 327, 330, 406], "correlation_matrix": [54, 56, 435], "major": [54, 94, 167, 174], "fill_diagon": [54, 56], "plot_probabilistic_atlas_extract": [54, 59], "depict": [55, 167, 178], "advanc": [55, 109, 114, 159, 161, 162, 167, 168, 174, 178, 217, 249, 251, 252, 306, 325, 331, 378, 392, 437], "lie": [55, 186, 189, 329, 409], "1st": 55, "hard": [55, 154, 166, 172, 177], "drive": 55, "wide": [55, 71, 105, 114, 159, 160, 162, 166, 167, 215, 233, 253], "pcc_coord": [55, 61, 168], "52": [6, 21, 23, 30, 33, 36, 39, 40, 42, 43, 44, 45, 48, 55, 58, 62, 65, 91, 96, 101, 102, 179, 197, 435], "18": [2, 6, 7, 10, 11, 12, 23, 33, 36, 39, 40, 42, 43, 44, 55, 58, 62, 71, 72, 91, 101, 102, 103, 107, 114, 119, 131, 138, 148, 152, 179, 214, 225, 253, 393, 395, 396, 435], "niftispheresmask": [55, 58, 61, 70, 100, 122, 126, 128, 139, 143, 145, 152, 168, 176, 437], "bandpass": 55, "seed_mask": [55, 61, 100, 168], "seed_time_seri": [55, 61, 168], "brain_mask": [55, 100], "brain_time_seri": 55, "n_volum": 55, "exemplarili": 55, "divid": [31, 55, 76, 77, 79, 111, 131, 152, 160, 169, 172, 191, 404], "seed_to_voxel_correl": 55, "extrem": [55, 121, 152, 415], "seed_to_voxel_correlations_img": 55, "marker_coord": [55, 61, 100, 139, 141, 152, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 401], "At": [55, 63, 65, 69, 77, 80, 91, 157, 174, 175, 294, 296], "pcc_seed_correl": 55, "seed_to_voxel_correlations_fisher_z": 55, "arctanh": 55, "eventu": [55, 435], "seed_to_voxel_correlations_fisher_z_img": 55, "pcc_seed_correlation_z": 55, "plot_seed_to_voxel_correl": [55, 59, 139, 152], "movement": [56, 174, 179], "load_confound": [56, 66, 124, 125, 148, 152, 154, 179, 323], "flexibli": 56, "guidelin": [56, 94, 123, 147, 150, 152, 159, 175], "en": [56, 169, 195, 323, 326], "craddock": [56, 114, 150, 152, 153, 154, 198, 203, 238], "2013": [56, 114, 141, 152, 153, 154, 164, 165, 193, 197, 203, 322], "reorder": [56, 136, 152, 313, 373, 389], "reduce_confound": [56, 214], "reduced_confound": 56, "preselect": 56, "niftilabelsmask": [49, 54, 56, 83, 94, 96, 113, 125, 138, 139, 141, 144, 145, 146, 148, 150, 152, 154, 176, 201, 214, 325, 326, 327, 330, 409, 412, 414, 437], "cover": [56, 167, 179, 211, 213, 373], "firstli": 56, "did": [48, 56, 92, 104, 132, 148, 152, 169], "bad": [56, 105, 166, 167], "No": [56, 66, 77, 91, 105, 107, 166, 167, 315], "ensur": [56, 58, 100, 138, 145, 152, 164, 166, 167, 169, 233, 269, 294, 296, 329, 343, 345, 346, 409], "steadi": [56, 66, 146, 152, 281, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 406, 418], "correctli": [56, 66, 93, 139, 141, 142, 150, 152, 162, 169, 175, 281, 322, 323, 436], "confounds_simpl": 56, "sample_mask": [33, 49, 52, 53, 56, 58, 66, 123, 125, 146, 148, 150, 152, 281, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 406, 418], "wm_csf": [56, 322, 323], "exceed": [56, 135, 152], "framewis": [56, 214, 322], "displac": [56, 214, 322], "standardis": 56, "dvar": [56, 322], "five": [56, 66, 404], "percentag": [56, 159, 249, 250, 251, 252], "volumn": [56, 322], "suitabl": [56, 69, 138, 152, 160, 164, 179, 226, 323], "confounds_scrub": 56, "fd_threshold": [56, 322, 323], "std_dvars_threshold": [56, 322, 323], "grand": [56, 281], "physiolog": [56, 66, 70, 323], "artifact": [56, 114, 179, 299, 322, 323, 418], "minim": [56, 62, 167, 172, 281, 283, 288, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 390], "degre": [56, 68, 100, 107, 169, 269, 272, 278, 323, 393, 395, 396], "freedom": [56, 100, 107, 154, 169, 269, 272, 278, 323], "downsid": [56, 66], "confounds_minimal_no_gsr": 56, "global_sign": [56, 322, 323], "gsr": 56, "load_confounds_strategi": [56, 148, 152, 154, 179, 322], "benchmark": [56, 114, 165, 322, 323], "compcor": [56, 66, 114, 148, 152, 154, 214, 305, 322, 323, 419], "ica_aroma": [56, 148, 152, 322, 323], "denoise_strategi": [56, 323], "rastko": [56, 114, 322, 323], "ciric": [56, 114, 322, 323], "wolf": [56, 58, 114, 166, 322, 323], "jonathan": [56, 58, 114, 165, 205, 209, 211, 212, 276, 322, 323, 378], "roalf": [56, 114, 322, 323], "graham": [56, 114, 322, 323], "baum": [56, 114, 322, 323], "kosha": [56, 114, 322, 323], "ruparel": [56, 114, 322, 323], "russel": [56, 100, 114, 117, 174, 226, 228, 230, 238, 273, 274, 322, 323], "shinohara": [56, 114, 322, 323], "eickhoff": [56, 114, 205, 206, 322, 323], "christo": [56, 114, 322, 323], "davatziko": [56, 114, 322, 323], "ruben": [56, 114, 322, 323], "gur": [56, 114, 322, 323], "raquel": [56, 114, 322, 323], "bassett": [56, 114, 322, 323], "theodor": [56, 114, 322, 323], "satterthwait": [56, 114, 322, 323], "154": [33, 41, 56, 114, 322, 323, 378], "174": [33, 41, 56, 114, 322, 323], "187": [33, 41, 56, 109, 114, 322, 323], "2017": [31, 45, 56, 114, 133, 134, 135, 152, 159, 161, 204, 205, 223, 251, 252, 322, 323, 378, 432], "linden": [56, 114, 323], "park": [56, 114, 323], "fulcher": [56, 114, 323], "murat": [56, 114, 323], "y\u00fccel": [56, 114, 323], "fornito": [56, 114, 323], "evalu": [56, 114, 162, 166, 172, 208, 249, 250, 251, 252, 268, 272, 323, 415, 416], "efficaci": [56, 114, 323], "reliabl": [56, 114, 138, 152, 169, 223, 323], "171": [33, 41, 56, 114, 323], "415": [31, 33, 45, 56, 114, 203, 323], "436": [33, 56, 114, 323], "2018": [56, 76, 114, 136, 137, 138, 152, 161, 204, 205, 214, 251, 252, 276, 299, 323, 405, 411, 418], "073": [29, 41, 45, 56, 114, 160, 323], "plot_signal_extract": [56, 59, 179], "_util": [31, 32, 39, 47, 49, 52, 54, 57, 62, 77, 79, 111, 124, 128, 147, 150, 152, 166, 167], "data_gen": [57, 124, 150, 152, 166], "generate_group_sparse_gaussian_graph": [57, 166], "n_displai": 57, "min_n_sampl": 57, "max_n_sampl": 57, "max_precis": 57, "alpha_": [57, 187], "plot_simulated_connectom": [57, 59], "spheric": 58, "264": [33, 41, 58, 72, 212], "160": [33, 36, 41, 42, 44, 58, 84, 102, 105, 114, 161, 211, 251, 252, 422], "72": [11, 21, 23, 26, 33, 36, 39, 40, 42, 43, 44, 56, 58, 62, 71, 91, 93, 101, 102, 114, 147, 152, 165, 212], "665": [33, 58, 114, 117, 212, 228, 230], "678": [33, 58, 114, 212], "nardo": [58, 114, 211], "329": [33, 41, 58, 114, 211], "1358": [58, 114, 211], "1361": [25, 58, 114, 211], "dmn_coord": [58, 179, 435], "46": [30, 33, 36, 39, 40, 42, 43, 44, 48, 58, 62, 71, 91, 93, 101, 102, 107, 118, 152, 179, 196, 198, 435], "68": [11, 32, 33, 39, 42, 43, 58, 62, 92, 99, 101, 102, 179, 435], "temporopariet": 58, "junction": 58, "prefront": 58, "sequenc": [58, 61, 64, 66, 69, 79, 111, 125, 152, 159, 168, 172, 177, 179, 223, 249, 250, 251, 252, 271, 273, 274, 281, 294, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379, 393, 395, 396, 398, 416, 417, 422], "clean__butterworth__padtyp": 58, "kwarg": [18, 58, 111, 124, 141, 152, 193, 260, 299, 323, 325, 326, 327, 328, 329, 330, 331, 332, 338, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 379, 382, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 418], "butterworth": [58, 123, 124, 146, 150, 152, 299, 326, 327, 328, 329, 330, 331, 332, 418], "confounds_filenam": 58, "Its": [58, 153, 161, 166, 253, 274, 281, 294, 297, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 416], "ledoit": [58, 166], "connectivity_measur": 58, "partial_correlation_matrix": 58, "suppli": [58, 253, 254, 255, 288, 322, 329, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379, 409, 418], "fetch_coords_power_2011": 58, "collect": [58, 100, 103, 107, 114, 115, 167, 172, 228, 229, 230, 231, 322, 437], "spheres_mask": 58, "exce": [58, 187], "graphic": [58, 114, 153, 166, 167, 180, 186, 189], "covariance_estim": 58, "tweak": [58, 89, 157], "strongest": 58, "node_s": [58, 139, 141, 148, 152, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379, 388, 398], "sometim": [58, 66, 80, 117, 121, 125, 152, 159, 167, 172, 268, 272], "overwhelm": 58, "plot_mark": [58, 144, 148, 150, 152, 435], "node_strength": 58, "clip": [58, 84, 314, 315], "positive_edg": 58, "negative_edg": 58, "node_strength_posit": 58, "node_strength_neg": 58, "node_cmap": [58, 388], "ylorrd": 58, "pubu": 58, "fetch_coords_dosenbach_2010": [58, 129, 132, 152], "plot_sphere_based_connectom": [58, 59, 141, 152], "focus": [60, 74, 98, 110, 113, 116, 130, 136, 152, 160, 163, 164, 167], "adhd": [60, 73, 85, 113, 141, 150, 152, 153, 168, 194, 281, 288, 325, 332, 355, 392, 414, 416], "finit": [60, 73, 77, 79, 103, 113, 134, 152, 168, 172, 224, 281, 283, 288, 299, 316, 333, 336, 377, 380, 381, 391, 392, 418], "impul": [60, 73, 113, 224, 281, 380, 381, 392], "fir": [60, 63, 73, 113, 168, 172, 224, 281, 283, 288, 380, 381, 392], "residu": [60, 62, 73, 113, 148, 152, 164, 170, 235, 255, 268, 269, 272, 273, 274, 281, 294, 299, 300, 311, 316, 325, 332, 336, 370, 392, 415, 437], "openneuro": [60, 73, 113, 168, 214, 215, 233, 234, 248, 281, 284, 321, 324, 331, 380, 384, 386, 414, 415, 416], "understand": [60, 73, 83, 96, 113, 132, 152, 160, 162, 167, 174, 176, 214, 219, 221, 222, 224, 227, 281, 305, 306, 311, 315, 322, 325, 331, 336, 380, 381, 382, 391, 392, 397, 414, 437], "workflow": [61, 167, 323], "determin": [61, 79, 94, 100, 101, 102, 107, 164, 166, 167, 187, 255, 284, 295, 319, 334, 335, 336, 337, 338, 339, 342, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 384, 385, 387, 391, 392, 399, 403, 422], "make_first_level_design_matrix": [61, 63, 69, 71, 108, 148, 152, 168], "slice_time_ref": [33, 61, 66, 69, 71, 124, 125, 152, 281, 284], "176": [33, 41, 61, 72], "26": [6, 9, 11, 23, 33, 36, 39, 40, 42, 43, 44, 50, 58, 59, 61, 62, 66, 67, 70, 71, 72, 73, 75, 91, 101, 102, 103, 131, 152, 407], "frametim": 61, "add_subplot": [61, 91], "111": [33, 41, 43, 53, 61, 91], "set_titl": [61, 63, 70, 75, 78, 79, 80, 91, 100, 105], "add_reg": [61, 63, 108, 168, 288], "add_reg_nam": [61, 63, 288], "pcc_seed": 61, "dmn_contrast": 61, "seed_based_glm": 61, "setup": [61, 69, 108, 124, 149, 152, 171, 193, 194, 195, 196, 197, 198, 199, 203, 206, 207, 209, 217, 218, 221, 222, 223, 226, 227, 232, 238, 406, 436], "first_level_model": [61, 65, 66], "run_img": [61, 101, 108, 281], "design_matric": [61, 62, 64, 67, 71, 100, 168, 281], "snapshot": [61, 62], "dmn_z_map": 61, "portabl": [61, 75, 179], "readi": [61, 75, 116, 132, 152, 158, 167, 175], "pertin": [61, 75], "min_dist": [61, 281, 294, 415, 416], "plot_typ": [61, 281, 294, 416], "plot_adhd_dmn": [61, 73], "exploit": [62, 158, 166], "io": [9, 17, 21, 47, 48, 52, 62, 65, 76, 77, 80, 81, 99, 101, 146, 152, 157, 193, 200, 204, 214, 223, 400, 436], "s3": 62, "bucket": 62, "assur": 62, "nistat": [62, 123, 127, 144, 152], "against": [62, 159, 168, 172, 228, 296, 342, 389], "fsl": [10, 11, 36, 49, 62, 79, 86, 94, 147, 148, 150, 152, 177, 201, 202, 310], "stopsign": 62, "ds000030": [62, 215], "v4": 62, "emploi": [62, 171, 172, 415, 416], "fetch_ds000030_url": [62, 150, 152, 233], "fetch_openneuro_dataset": 62, "select_from_index": 62, "exclusion_pattern": 62, "mriqc": 62, "parameter_plot": 62, "physio_plot": 62, "t1w": 62, "dwi": 62, "beh": 62, "bart": 62, "scap": 62, "exclusion_filt": [62, 248], "data_dir": [62, 100, 101, 108, 147, 152, 177, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239], "subject_id": [62, 101, 108, 235, 236], "moreov": [62, 101, 108, 111, 150, 152, 167, 174, 319], "task_label": [62, 101, 108, 284], "space_label": [62, 284], "folder": [62, 86, 94, 101, 108, 148, 152, 167, 175, 177, 201, 202, 239, 284, 309, 319], "fmriprep": [62, 66, 125, 148, 150, 152, 154, 158, 169, 172, 179, 214, 218, 219, 243, 284], "app": [62, 114, 225, 232, 284], "first_level_from_bid": [62, 100, 101, 108, 124, 125, 152, 383], "mni152nlin2009casym": 62, "derivatives_fold": [62, 284], "models_run_img": [62, 100, 101, 108, 284], "models_ev": [62, 101, 108, 284], "models_confound": [62, 100, 101, 108, 284], "subject_label": [33, 62, 78, 101, 281, 294, 295, 296], "minimize_memori": [62, 64, 67, 70, 168, 281, 284, 294], "overrid": [62, 100, 145, 152, 193, 194, 195, 196, 197, 198, 199, 203, 206, 207, 209, 217, 218, 221, 222, 223, 226, 227, 232, 238, 404], "interfac": [62, 100, 101, 108, 144, 148, 152, 158, 166, 167, 172, 249, 250], "get_design_from_fslmat": [62, 148, 152], "fsl_design_matrix_path": [62, 324], "feat": 62, "mat": [62, 324, 389], "column_nam": [62, 324], "stopsuccess": 62, "definit": [62, 94, 125, 152, 154, 162, 163, 166, 167, 168, 172, 176, 200, 263, 321, 326, 329, 332, 380, 409, 410, 412, 413, 437], "design_column": [62, 279], "cond_": 62, "nib": 62, "fsl_z_map": 62, "zstat12": 62, "isf": [62, 76, 79, 101, 107, 108], "unc": [62, 79, 80, 101], "plot_img_comparison": 62, "masker_": [62, 66, 77, 79, 249, 250, 251, 252, 254, 255, 256, 257, 404], "ref_label": [62, 386], "src_label": [62, 386], "latex": [62, 123, 152, 175], "purpos": [62, 64, 67, 69, 71, 79, 101, 108, 116, 166, 171, 179, 214, 281, 294, 344, 416, 435], "to_latex": 62, "save_glm_to_bid": [62, 123, 150, 152], "contrast_typ": [62, 69, 108, 269, 277, 321], "out_dir": [62, 321], "nilearn_glm": 62, "prefix": [62, 299, 321, 326, 327, 328, 329, 330, 331, 332, 418], "_task": [62, 284], "glob": [62, 126, 136, 152, 176, 300, 319, 437], "plot_bids_featur": [62, 73], "rais": [32, 63, 78, 94, 123, 124, 125, 128, 135, 137, 138, 141, 148, 150, 152, 177, 185, 186, 187, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 284, 288, 294, 296, 297, 300, 309, 313, 314, 325, 326, 327, 328, 329, 330, 331, 332, 338, 403, 404, 405, 406, 436], "runtimeerror": [63, 78], "librari": [63, 78, 94, 111, 116, 138, 152, 162, 167, 174, 178, 426, 435, 436], "128": [33, 41, 48, 63, 66, 69, 84, 92, 104, 108, 145, 152, 200], "compris": [63, 66, 86, 407, 415], "trial": [63, 66, 72, 114, 125, 152, 159, 168, 172, 226], "c0": 63, "c1": 63, "c3": 63, "motion": [63, 66, 70, 101, 114, 146, 152, 168, 214, 281, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 406, 418], "jointli": [63, 167, 311, 387, 393, 395, 396, 400, 402], "cumsum": 63, "translat": [63, 141, 152, 178, 281, 294, 297, 322, 416], "rigid": 63, "bodi": [63, 414], "tx": 63, "ty": 63, "tz": 63, "rx": 63, "ry": 63, "rz": 63, "varieti": [63, 100, 158, 159, 160, 161, 162, 167, 172], "glover": [33, 63, 66, 68, 69, 108, 168, 281, 283, 284, 285, 286, 287, 288], "x1": [63, 94, 422], "polynomi": [63, 66, 168, 281, 288], "drift_ord": [33, 63, 66, 168, 281, 284, 288], "x2": [63, 94], "x3": 63, "fir_delai": [33, 63, 65, 281, 283, 284, 288], "ax3": 63, "fiac": [64, 216], "dehaen": [64, 67, 114, 223], "lambertz": [64, 67], "anton": [64, 67], "jl": [64, 67], "campagn": [64, 67], "ciuciu": [64, 67, 114, 256], "denghien": [64, 67], "jobert": [64, 67, 114, 223], "lebihan": [64, 67], "sigman": [64, 67], "pallier": [64, 67], "jb": [64, 67], "segreg": [64, 67], "languag": [51, 64, 67, 100, 101, 108, 117, 210, 220, 223], "sentenc": [64, 65, 66, 67, 69, 72, 81, 101, 223], "hum": [64, 67], "mapp": [64, 67], "2006": [64, 67, 114, 164, 174, 253, 273, 274], "360": [33, 36, 41, 42, 44, 62, 64, 67, 102], "371": [33, 64, 67], "pubmedcentr": [64, 67, 114, 322, 323], "nih": [64, 67, 114, 160, 256, 322, 323], "gov": [64, 67, 114, 160, 256, 322, 323], "articlerend": [64, 67, 114, 322, 323], "fcgi": [64, 67, 114, 322, 323], "artid": [64, 67, 114, 322, 323], "2653076": [64, 67], "r11": [64, 67], "subdirectori": [64, 228, 230], "current": [47, 49, 52, 54, 64, 68, 86, 111, 150, 152, 164, 166, 167, 172, 175, 179, 189, 197, 198, 206, 232, 233, 269, 319, 321, 325, 326, 327, 328, 329, 330, 331, 332, 393, 395, 396, 399, 406], "getcwd": 64, "write_dir": 64, "fetch_fiac_first_level": [64, 67], "func1": [64, 67, 71, 236], "func2": [64, 67, 71, 236], "pre": [39, 64, 67, 94, 101, 124, 133, 138, 150, 152, 169, 179, 272], "design_fil": [64, 67], "design_matrix1": [64, 67], "design_matrix2": [64, 67], "df": [64, 67, 100, 107, 415], "n_column": [64, 67, 169, 192], "pad_vector": 64, "contrast_": 64, "sstssp_minus_dstdsp": 64, "dstdsp_minus_sstssp": 64, "dst_minus_sst": [64, 67], "dsp_minus_ssp": 64, "dst_minus_sst_for_dsp": 64, "dsp_minus_ssp_for_dst": 64, "deactiv": 64, "contrast_id": [64, 65, 66, 67, 69, 71], "contrast_v": [64, 65, 66, 67, 69, 71], "contast": 64, "implicitli": [64, 66, 69, 80, 102, 108, 159, 166], "z_image_path": 64, "_z_map": 64, "unexpectedli": [64, 67], "peak": [6, 33, 62, 64, 67, 70, 160, 162, 166, 373, 406, 408, 415], "ratio": [64, 67, 94, 137, 152, 172, 214, 254, 256, 257, 404, 406], "plot_fiac_analysi": [64, 73], "hemodyam": 65, "audio_comput": [65, 66, 69], "audio_left_hand_button_press": [65, 66, 69], "audio_right_hand_button_press": [65, 66, 69], "horizontal_checkerboard": [65, 66], "sentence_listen": [65, 66, 69], "sentence_read": [65, 66, 69], "vertical_checkerboard": [65, 66], "visual_comput": [65, 66, 69], "visual_left_hand_button_press": [65, 66, 69], "visual_right_hand_button_press": [65, 66, 69], "fetch_localizer_first_level": [65, 66, 69], "epi_img": [65, 66, 69, 89, 179, 224, 336, 339, 382], "events_fil": [65, 66, 69], "impuls": [65, 68, 168, 169, 172, 281, 283, 288], "behind": 65, "concret": [65, 167, 169], "interv": [65, 66, 100, 249, 250, 251, 252, 254, 255, 271, 273, 274, 405, 411, 422], "character": [65, 66, 114, 174, 322], "hairi": 65, "sorri": 65, "price": [65, 164], "flexibl": [65, 127, 152], "contrast_matrix": [65, 66, 69, 71], "audio": [65, 66, 69], "video": [65, 167], "breath": [65, 66], "ask": [65, 117, 138, 141, 152, 167, 175], "plot_fir_model": [65, 73], "clarifi": [66, 146, 152], "exploratori": 66, "increment": [66, 95, 174, 175], "outcom": [66, 172, 323], "reader": [66, 174, 437], "familiar": [66, 167, 174], "concept": [66, 98, 141, 152, 159, 160, 167, 172, 176, 437], "paradigm": [66, 69, 71, 97, 109, 113, 117, 159, 169, 230, 288, 304, 309, 310, 312, 384, 392, 397], "pinel": [66, 72, 114, 223, 256], "bmc": [66, 72, 114, 223], "2007": [66, 72, 114, 153, 223, 232, 305, 322, 323, 419], "probe": [66, 69, 163, 172], "button": [66, 69, 72, 76, 77, 79, 80, 105, 148, 152, 167, 169, 221, 223, 231], "press": [66, 69, 72, 76, 77, 79, 80, 105, 114, 169, 221, 223, 231, 273, 274], "horizont": [66, 72, 80, 223, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370], "checkerboard": [66, 72, 80, 223], "listen": [66, 69, 81, 223], "short": [66, 100, 110, 112, 113, 117, 166, 167, 172, 185, 204, 205, 208, 228, 229, 230, 231, 249, 261, 262, 263, 264, 265, 266, 389, 393, 397], "subract": 66, "250": [33, 36, 41, 42, 44, 66, 102, 114], "epoch": [66, 257], "100m": 66, "male": [66, 193], "voic": 66, "instruct": [66, 69, 72, 113, 123, 149, 152, 167, 173, 229, 436], "subtract": [58, 66, 101, 174, 229], "passiv": 66, "verifi": [66, 101, 167, 179], "understood": [66, 228], "flash": 66, "narr": [66, 81, 167], "constant": [23, 31, 66, 111, 166, 178, 249, 250, 251, 252, 254, 255, 296, 342, 417, 435], "make_localizer_contrast": 66, "involv": [66, 69, 71, 100, 169], "differenti": [66, 71], "content": [66, 69, 84, 114, 125, 152, 163, 164, 167, 174, 206, 211, 217, 225, 299, 418], "stori": [66, 69, 114, 226], "comptat": 66, "encapsul": [66, 185, 186, 187, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 325, 326, 327, 328, 329, 330, 331, 332, 403, 404, 405, 406], "plot_contrast": 66, "discret": [66, 71, 123, 145, 146, 152, 281, 290, 309, 322, 326, 327, 328, 329, 330, 331, 332, 418], "spuriou": [66, 114, 157, 167, 322, 323, 407], "heart": 66, "scanner": [66, 169, 172, 322], "01hz": [66, 193], "longest": 66, "multipli": [66, 84, 90, 131, 152, 164, 166, 192, 268, 271, 273, 274, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379, 387, 393, 395, 396, 400, 402], "shall": 66, "016": [41, 66], "wors": [66, 255], "poorli": [66, 94, 179], "mayb": [66, 117, 342], "useless": 66, "haven": [66, 103], "basi": [66, 69, 108, 168, 281, 283, 288, 322], "undershoot": 66, "strong": [66, 89, 166, 167], "seem": [66, 75, 98, 166], "someth": 66, "inclus": [66, 248], "sole": [66, 117, 166, 263, 264, 326, 327, 328, 329, 330, 331], "discount": 66, "misspecif": 66, "decreas": [53, 66, 95, 166, 167, 377, 390, 391, 392, 399], "hint": [66, 153, 154], "misfit": 66, "valuabl": [66, 167], "shift": [66, 144, 150, 152, 326, 327, 328, 329, 330, 331, 332, 418], "mi": 66, "sake": [66, 79, 105], "simplic": [66, 69, 159], "readabl": [66, 124, 152], "drop": [66, 70, 100, 133, 134, 135, 139, 152, 167, 174, 175], "far": [66, 108, 166, 314, 320], "autoregress": [66, 281, 290], "ordinari": [66, 102, 105, 272, 342], "least": [66, 68, 100, 102, 103, 105, 114, 159, 165, 167, 257, 268, 272, 281, 290, 294, 295, 296, 327, 330, 332, 336, 342, 373, 436], "assum": [64, 66, 71, 78, 79, 164, 169, 175, 192, 233, 234, 271, 272, 273, 274, 278, 281, 294, 296, 299, 314, 317, 341, 380, 389, 417, 418], "recomput": [66, 98, 164, 278], "obviou": 66, "stick": 66, "arguabl": 66, "greater": [66, 100, 146, 148, 152, 169, 281, 290, 298, 305, 318, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379, 387, 388, 398, 400, 402, 415, 419, 422], "complex": [66, 77, 87, 114, 117, 159, 161, 164, 167, 171, 174, 179], "ar3": [66, 290], "wish": [66, 79, 105, 148, 152, 167, 172, 175, 218, 219, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 379, 382, 384, 385, 388, 390, 391, 392], "computation": [66, 160, 164], "problemat": 66, "uncontrol": 66, "instabl": [57, 66, 166, 417], "spike": 66, "phenomena": 66, "respir": 66, "blood": [66, 169, 172], "oxygen": [66, 169, 172], "themselv": [66, 117, 179], "routin": [66, 89, 177, 226, 435], "percentil": [66, 87, 88, 98, 249, 250, 251, 252, 254, 255, 298, 305, 318, 347, 348, 349, 350, 351, 352, 353, 354, 357, 358, 359, 360, 361, 363, 364, 365, 367, 369, 370, 376, 379, 390, 398, 399, 400, 402, 406, 419], "kill": 66, "somewhat": 66, "colinear": 66, "scrub": [66, 123, 146, 148, 152, 154, 281, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 406, 418], "scenario": [66, 168, 169, 179], "exclud": [66, 117, 407], "unwant": 66, "wecan": 66, "discrep": [66, 166], "drawback": 66, "bias": 66, "mild": 66, "5mm": [66, 95, 174], "smoother": 66, "firstlevemodel": 66, "grei": [66, 89, 131, 141, 147, 152, 178, 179, 218, 219, 241, 242, 243, 245, 335, 338], "fetch_icbm152_brain_gm_mask": [66, 75, 131, 152, 218], "data_mask": [66, 104], "icbm_mask": 66, "121": [33, 41, 66], "122": [33, 41, 66, 72, 92, 118, 152, 197, 214], "driven": [66, 158, 167, 174, 197, 288], "resample_to_img": [66, 75, 93, 130, 152, 178, 179, 314], "resampled_icbm_mask": 66, "spot": 66, "interestingli": 66, "resili": 66, "reassur": 66, "plot_first_level_detail": [66, 73], "129": [33, 41, 67, 121, 152], "126": [6, 33, 41, 43, 56, 67, 91, 147, 152], "49": [10, 23, 33, 39, 40, 42, 43, 53, 59, 62, 67, 86, 91, 100, 101, 102, 105, 108, 114, 138, 152], "summary_statistics_session1": 67, "summary_statistics_session2": 67, "compute_fixed_effect": 67, "contrast_img": [67, 278], "variance_img": [67, 278], "effect_vari": [67, 80, 269, 281, 294], "fixed_fx_stat": 67, "plot_fixed_effect": [67, 73], "hemodynam": [68, 71, 159, 172], "propos": [68, 100, 167, 168, 175, 336], "deal": [10, 11, 36, 49, 68, 79, 86, 94, 116, 121, 144, 152, 169, 328], "primat": 68, "agent": 68, "mion": 68, "monkei": 68, "coupl": [68, 111, 153, 175], "metabol": [68, 169, 172], "phenomenolog": 68, "framework": [68, 153, 214], "whenev": [68, 160, 297], "uncertainti": [68, 76, 79, 166, 168, 169, 172], "issu": [68, 133, 134, 135, 136, 137, 145, 147, 148, 150, 166, 167, 169, 171, 172, 303, 308], "occur": [68, 126, 152, 169, 172, 436], "time_length": [68, 285, 286, 287, 291, 292, 293], "61": [11, 33, 36, 39, 40, 42, 43, 44, 62, 68, 71, 77, 79, 101, 102], "amplitud": [68, 283, 288, 398, 400, 402], "exp_condit": [68, 283], "stim": 68, "oversampl": [68, 281, 283, 285, 286, 287, 288, 291, 292, 293], "gamma": [68, 150, 152, 168], "mion_response_funct": 68, "factor": [68, 70, 100, 104, 135, 152, 161, 172, 271, 273, 274, 283, 285, 286, 287, 288, 291, 292, 293, 297, 377, 390, 391, 392, 399], "response_funct": 68, "dt": 68, "time_stamp": 68, "rint": 68, "delai": [68, 175, 281, 283, 288], "mion_time_deriv": 68, "drf": 68, "derived_response_funct": 68, "rf_model": 68, "main_deriv": 68, "compute_regressor": [68, 124, 148, 152, 168], "model_titl": 68, "convolut": [68, 169, 283, 288], "_label": 68, "con_id": [68, 283], "plot_hrf": [68, 73], "capabl": [69, 148, 152, 179], "coregist": 69, "obvious": 69, "geometri": [69, 114, 310, 387, 393, 394, 395, 396, 402, 421, 422], "resort": 69, "run_glm": [33, 69, 108, 146, 150, 152], "basic_contrast": [69, 71, 168], "dict": [69, 89, 105, 117, 125, 152, 185, 186, 187, 196, 197, 198, 206, 228, 229, 230, 231, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 268, 272, 277, 281, 290, 294, 296, 299, 320, 321, 325, 326, 327, 328, 329, 330, 331, 332, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 378, 379, 387, 388, 395, 396, 400, 403, 404, 405, 406, 414, 416, 418], "Of": 69, "cours": [69, 156, 169, 172, 327, 330], "iter": [34, 48, 53, 69, 71, 92, 104, 141, 152, 159, 164, 186, 187, 189, 249, 250, 251, 252, 254, 255, 256, 257, 300, 304, 307, 308, 311, 316, 373, 404, 405, 411], "impress": 69, "littl": [69, 75, 159, 160, 167], "plot_localizer_surface_analysi": [69, 73], "assess": [70, 78, 114, 159, 166, 167, 168, 193, 253, 342, 378], "clean_img": [70, 131, 133, 138, 148, 152, 178, 418], "signal_sc": [33, 70, 100, 148, 152, 281, 284], "set_index": 70, "id": [6, 33, 62, 70, 71, 103, 107, 117, 124, 152, 193, 195, 204, 205, 208, 228, 230, 238, 281, 415], "head": [70, 281, 294, 322, 414, 416], "real_timeseri": 70, "predicted_timeseri": [70, 168], "navi": 70, "purpl": 70, "teal": 70, "fig1": 70, "axs1": 70, "labelpad": 70, "roi_img": [10, 70, 391], "24": [6, 10, 11, 22, 23, 27, 33, 36, 38, 39, 40, 42, 43, 44, 51, 62, 67, 70, 71, 91, 101, 102, 103, 105, 125, 146, 152, 281, 283, 284, 288, 322], "resid": [70, 150, 152, 322, 323], "fig2": 70, "axs2": 70, "markedli": 70, "deep": [70, 185, 186, 187, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 325, 326, 327, 328, 329, 330, 331, 332, 403, 404, 405, 406], "awai": [70, 166, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370], "receiv": [70, 100, 159, 172, 386], "coil": 70, "salt": 70, "necessarili": [70, 157, 169], "unabl": [36, 49, 52, 53, 58, 62, 70, 75, 77, 141, 152], "influenc": [70, 166, 255], "r_squar": [62, 70, 148, 152, 273, 281, 294], "tell": [70, 86, 114, 166, 226], "everywher": [70, 165], "z_map_ftest": 70, "stat_typ": [70, 281], "plot_predictions_residu": [70, 73], "percept": [71, 141, 152, 169, 223], "realign": [71, 226], "scrambl": [71, 94, 168], "supposedli": 71, "henson": [71, 100, 114], "goshen": 71, "gottstein": 71, "ganel": 71, "otten": 71, "quayl": 71, "rugg": 71, "electrophysiolog": 71, "haemodynam": [71, 168, 169, 172], "prime": 71, "cereb": [51, 71], "2003": [71, 114, 268, 272], "jul": 71, "13": [6, 10, 11, 21, 22, 23, 27, 33, 36, 39, 40, 41, 42, 43, 44, 48, 56, 62, 67, 71, 77, 91, 101, 102, 103, 107, 111, 114, 118, 124, 126, 152, 156, 164, 185, 197, 198, 206, 213, 232, 268, 272, 278, 329, 330, 342, 378, 409, 410], "793": [71, 126, 152], "805": 71, "1093": [71, 114, 199, 205, 225], "cercor": [71, 114, 199, 205, 225], "multimodal_fac": 71, "fetch_spm_multimodal_fmri": [71, 168], "specfii": 71, "warn": [3, 9, 11, 16, 20, 29, 48, 50, 54, 71, 103, 123, 124, 125, 138, 139, 141, 146, 148, 150, 152, 159, 167, 197, 198, 206, 278, 284, 288, 301, 325, 326, 327, 328, 329, 330, 331, 332, 397, 406], "resample_img": [52, 54, 71, 84, 89, 93, 124, 135, 141, 150, 152, 178, 179, 228, 256, 257, 281, 294, 313, 315, 328, 331, 334, 336, 337, 339, 404], "catch_warn": [71, 103], "simplefilt": [71, 103], "ignor": [3, 16, 21, 29, 48, 50, 71, 103, 139, 144, 152, 185, 186, 187, 228, 230, 234, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 288, 294, 296, 319, 322, 325, 326, 327, 328, 329, 330, 331, 332, 387, 403, 404, 405, 406, 422], "auto_resampl": [71, 300], "mean_imag": 71, "idx": [71, 205], "revious": 71, "tail": [71, 271, 273, 274, 415], "tcontrast": [71, 271, 273, 274], "sophist": [71, 98, 162], "implic": [71, 100, 114], "portion": 71, "sparser": [71, 94, 158, 254, 255, 406, 408], "anterior": [71, 91, 103, 135, 152, 211, 213, 313, 393, 395, 396], "frontal": [71, 91, 114, 164, 377, 382, 384, 385, 391, 392], "lobe": [71, 208], "plot_spm_multimodal_fac": [71, 73], "compat": [10, 11, 36, 49, 72, 79, 86, 94, 111, 124, 128, 148, 150, 152, 162, 167, 168, 201, 202, 263, 264, 281, 294, 296, 306, 321, 325, 326, 327, 328, 329, 330, 331, 332, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 380, 406, 418], "protocol": [72, 172, 223], "archi": 72, "meriaux": [72, 114, 223], "identif": [72, 94, 114, 172, 223], "databas": [72, 103, 114, 223, 228], "91": [2, 10, 11, 30, 33, 39, 40, 42, 43, 44, 56, 62, 71, 72, 77, 91, 99, 101, 102, 147, 152, 195, 206], "1186": [59, 72, 109], "1471": 72, "2202": 72, "hardcod": [72, 123, 152, 247], "fmt": 72, "23": [6, 11, 17, 21, 23, 27, 33, 36, 39, 40, 42, 43, 44, 45, 62, 71, 72, 91, 100, 101, 102, 103, 114, 197, 206, 255], "33": [6, 10, 11, 21, 23, 33, 36, 39, 40, 42, 43, 44, 45, 48, 52, 59, 62, 67, 71, 72, 91, 101, 102, 105, 114, 198, 214], "35": [9, 11, 15, 20, 27, 30, 33, 36, 39, 40, 41, 42, 43, 44, 45, 49, 53, 62, 71, 72, 91, 101, 102, 105, 118, 152, 203, 228], "44": [6, 7, 10, 11, 23, 27, 33, 36, 39, 40, 42, 43, 44, 62, 71, 72, 73, 91, 101, 102, 114, 121, 152, 296, 342], "48": [6, 9, 11, 20, 27, 33, 36, 39, 40, 41, 42, 43, 44, 48, 53, 62, 71, 72, 81, 82, 91, 101, 102, 196, 201, 203, 226, 301], "59": [10, 11, 23, 33, 36, 39, 40, 42, 43, 44, 45, 48, 49, 52, 62, 71, 72, 91, 99, 100, 101, 102, 114, 118, 152, 196, 322, 323], "62": [10, 21, 23, 33, 36, 39, 40, 42, 43, 44, 48, 62, 72, 100, 101, 102, 107, 114, 135, 152, 202], "69": [6, 11, 23, 33, 36, 39, 40, 42, 43, 44, 62, 71, 72, 79, 99, 101, 102], "71": [6, 32, 33, 36, 39, 40, 42, 43, 44, 62, 71, 72, 99, 101, 102], "83": [9, 32, 33, 36, 39, 40, 42, 43, 44, 62, 72, 101, 102, 114, 118, 152, 296, 342], "87": [6, 10, 23, 30, 32, 33, 36, 39, 40, 42, 43, 44, 62, 65, 72, 91, 101, 102, 114], "89": [6, 30, 32, 33, 36, 38, 39, 40, 42, 43, 44, 49, 62, 67, 71, 72, 77, 101, 102, 105], "108": [33, 41, 43, 72], "116": [33, 41, 43, 72, 105, 195], "119": [33, 41, 43, 56, 72, 126, 152], "135": [33, 41, 72], "137": [33, 41, 72], "143": [33, 41, 72], "146": [33, 41, 72, 129, 152], "149": [33, 41, 72], "153": [33, 41, 72], "156": [33, 41, 72, 105], "159": [33, 41, 72], "162": [33, 41, 72], "164": [33, 41, 72], "167": [33, 41, 72, 156], "170": [33, 36, 41, 42, 44, 63, 72, 73, 102, 103, 105, 109], "173": [33, 41, 58, 72, 75, 82], "188": [33, 41, 72, 100, 101, 109], "191": [33, 41, 72], "195": [33, 41, 72], "198": [33, 41, 45, 72, 95, 104, 204], "201": [33, 41, 72], "203": [7, 33, 41, 72], "207": [33, 41, 72], "215": [33, 41, 72], "218": [33, 41, 72, 201, 202, 205], "221": [33, 41, 72, 89, 96, 114, 200], "224": [33, 41, 72], "227": [33, 41, 72], "230": [33, 36, 41, 42, 44, 72, 102], "234": [33, 41, 72], "236": [33, 41, 72], "246": [20, 27, 33, 41, 72], "248": [33, 41, 72], "251": [33, 41, 72, 94], "254": [33, 41, 45, 72, 118, 152], "257": [33, 41, 72], "260": [33, 36, 41, 42, 44, 72, 102], "266": [33, 41, 72], "269": [23, 27, 33, 41, 57, 72, 114, 164], "275": [33, 41, 72], "278": [33, 41, 72], "284": [33, 41, 66, 72, 114, 237], "291": [6, 33, 41, 66, 72], "296": [33, 41, 66, 72], "trial_type_idx": 72, "condition_id": 72, "instantan": 72, "null_duration_tri": 72, "export": [72, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 390, 391, 392, 393, 394, 395, 396], "pathlib": [72, 125, 147, 152, 177, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 236, 237, 238, 239, 249, 250, 251, 252, 254, 255, 281, 284, 294, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 404, 405, 406, 418, 420, 421, 422], "tsvfile": 72, "localizer_ev": 72, "plot_ev": [72, 144, 152, 168], "plot_write_events_fil": [72, 73], "unpair": [74, 82, 113, 171, 223, 294, 354, 381, 384, 397], "sex": [75, 78, 171, 193, 225, 238, 249, 250, 251, 252, 254, 255], "mf": [75, 114, 225], "gm_mask": 75, "adequ": 75, "second_level": [75, 76, 77, 78, 79, 80, 81, 101, 150, 152, 171, 416], "secondlevelmodel": [75, 76, 77, 79, 80, 81, 101, 148, 152, 171, 281, 321, 416], "second_level_model": [75, 76, 79, 81, 101], "second_level_contrast": [75, 77, 79, 281, 294, 296, 416], "03g": 75, "icbm152_2009": [21, 75], "plot_oasi": [75, 82], "circular": 76, "rosenblatt": [76, 114, 276], "jd": 76, "fino": [76, 114, 276], "weeda": [76, 114, 276], "wd": 76, "solari": [76, 114, 276], "goeman": [76, 114, 276], "jj": 76, "nov": [76, 114, 212], "181": [33, 41, 76, 114, 276], "786": [76, 114, 276], "796": [76, 114, 276], "07": [30, 32, 33, 36, 44, 45, 49, 76, 91, 114, 160, 205, 218, 243, 276, 405, 411], "060": [41, 76, 114, 276, 342], "fetch_localizer_contrast": [76, 77, 79, 80, 105, 131, 152, 221, 222], "get_tmap": [76, 79, 80, 223], "second_level_input": [76, 79, 80, 101, 148, 150, 152, 294, 296], "p_val": [76, 77, 79], "p001_uncorrect": 76, "cluster_level_infer": [76, 148, 152, 171], "proportion_true_discoveries_img": [76, 276], "plot_proportion_activated_voxel": [76, 82], "cue": [77, 105, 222, 223], "variat": [77, 101, 105, 106, 114, 124, 152, 164, 165, 172, 232, 280, 296, 342], "pseudo": [77, 105, 256, 257, 273, 296, 298, 404], "94": [11, 30, 33, 36, 39, 40, 42, 43, 44, 62, 71, 77, 91, 101, 102, 105, 106, 222, 223], "tested_var": [77, 105, 106, 342], "worth": 77, "aualiti": 77, "miss": [54, 67, 71, 77, 84, 125, 147, 152, 167, 172, 288, 327, 330, 336, 339], "mask_quality_check": [77, 105], "contrast_map_filenam": [77, 105], "ones_lik": 77, "fluenci": 77, "math_img": [77, 79, 83, 85, 96, 107, 113, 129, 152, 178, 246, 311, 392, 397], "logarithm": [77, 79, 296], "minimum": [33, 77, 79, 89, 121, 123, 126, 131, 133, 134, 135, 138, 141, 144, 146, 148, 152, 157, 281, 294, 298, 318, 326, 329, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 373, 379, 399, 406, 407, 408, 409, 415, 416], "38": [6, 10, 23, 33, 39, 40, 42, 43, 62, 71, 77, 91, 101, 102, 111, 138, 152], "equal": [77, 98, 141, 148, 150, 152, 162, 198, 203, 204, 205, 209, 249, 250, 251, 252, 254, 255, 269, 294, 311, 314, 318, 334, 336, 337, 339, 399, 400, 402, 404], "fwer": [77, 81, 171, 172, 296], "non_parametric_infer": [77, 79, 123, 124, 148, 150, 152, 171], "neg_log_pvals_permuted_ols_unmask": [77, 105], "model_intercept": [77, 79, 105, 296, 342], "two_sided_test": [77, 79, 102, 164, 296, 342], "cap": [77, 79], "1e3": 77, "plot_second_level_association_test": [77, 82], "characterist": [78, 159, 172, 323], "subjects_label": [78, 295], "extra": [78, 117, 161, 175, 176, 193, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 383, 385, 389, 435, 437], "extra_info_subject": 78, "make_second_level_design_matrix": [78, 171], "plot_second_level_design_matrix": [78, 82], "elicit": 79, "participant_id": 79, "tolist": [79, 100], "cidx": 79, "p001_unc": [79, 101], "nonparametr": 79, "pend": 79, "reformat": [79, 124, 152], "assumpt": [79, 164, 169], "null": [72, 79, 149, 152, 159, 164, 169, 172, 269, 296, 342], "job": [36, 42, 44, 79, 102, 105, 117, 281, 294, 296, 342], "out_dict": 79, "ideal": [79, 105, 156, 169, 175, 197], "tend": [79, 100, 161, 166, 177], "itertool": 79, "logp_max_t": [79, 105, 296, 342], "logp_max_s": [79, 296, 342], "logp_max_mass": [79, 296, 342], "img_count": 79, "i_row": 79, "j_col": 79, "plot_second_level_one_sample_test": [79, 82], "retinotop": 80, "distinct": [80, 100, 114, 166, 199, 225], "border": [80, 303, 334, 337, 343, 345, 346], "primari": [80, 167, 281, 294, 416], "sample_vert": 80, "sample_horizont": 80, "s1": 80, "s2": 80, "condition_effect": 80, "doesn": [80, 103, 167], "subject_effect": 80, "02d": 80, "assembl": [80, 115, 169], "unpaired_design_matrix": 80, "paired_design_matrix": 80, "ax_unpair": 80, "ax_pair": 80, "width_ratio": [80, 100], "second_level_model_unpair": 80, "second_level_model_pair": 80, "stat_maps_unpair": 80, "stat_maps_pair": 80, "unsurprisingli": 80, "plot_second_level_two_sample_test": [80, 82], "bunch": [81, 116, 133, 152, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 217, 218, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238], "oppos": [81, 178, 179], "fetch_localizer_calculation_task": [81, 106, 221, 223], "statstic": 81, "cmap_filenam": [81, 106], "trivial": 81, "two_sid": [81, 145, 148, 152, 297, 318, 415, 416], "thresholded_map1": 81, "threshold1": 81, "thresholded_map2": 81, "threshold2": 81, "3g": 81, "thresholded_map3": 81, "threshold3": 81, "raw": [81, 92, 101, 108, 145, 152, 159, 177, 179, 200, 249, 250, 251, 252, 256, 257, 328, 331, 392, 404, 414], "fourth": [81, 84, 146, 152, 281, 296, 306, 307, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 375, 406, 418], "plot_threshold": [81, 82], "4x4": [84, 178, 249, 250, 251, 252, 254, 255, 256, 257, 281, 294, 301, 311, 312, 314, 328, 331, 334, 336, 337, 339, 345, 346, 404], "millimet": [84, 164, 179, 249, 250, 251, 252, 253, 256, 257, 281, 294, 296, 316, 326, 327, 328, 329, 330, 331, 332, 333, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 404, 406, 408, 415], "entri": [84, 123, 125, 152, 167, 249, 250, 251, 252, 271, 273, 274, 303, 394, 422], "3x3": [84, 178, 249, 250, 251, 252, 254, 255, 256, 257, 281, 294, 311, 314, 328, 331, 334, 336, 337, 339, 404], "closest": [84, 314], "union": [84, 337, 339, 340], "messag": [84, 128, 152, 175, 186, 189, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 238, 249, 250, 251, 252, 253, 254, 255, 294, 296, 300, 311, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 338, 342, 404, 405, 406], "192": [33, 41, 84], "circl": 84, "256": [33, 41, 84, 145, 152, 200, 209], "diamond": 84, "120": [33, 36, 41, 42, 43, 44, 84, 99, 102, 105, 114, 208], "source_affin": 84, "180": [33, 36, 41, 42, 44, 84, 102, 105, 114, 138, 152, 161, 251, 252, 393, 395, 396], "rotation_matrix": 84, "0mm": [84, 174], "int32": [10, 11, 36, 49, 79, 84, 86, 94, 150, 152, 177, 309, 326, 327, 328, 329, 330, 331, 332], "img_in_mm_spac": 84, "target_affin": [33, 49, 52, 53, 56, 84, 89, 92, 178, 179, 249, 250, 251, 252, 254, 255, 256, 257, 281, 284, 294, 311, 314, 328, 331, 334, 336, 337, 338, 339, 404], "target_shap": [33, 49, 52, 53, 56, 84, 89, 92, 178, 179, 249, 250, 251, 252, 254, 255, 256, 257, 281, 284, 294, 311, 314, 328, 331, 334, 336, 337, 339, 404], "512": [33, 84, 145, 152, 200], "target_affine_3x3": 84, "target_affine_4x4": 84, "img_3d_affin": 84, "img_4d_affin": 84, "target_affine_mm_space_offset_chang": 84, "img_3d_affine_in_mm_spac": 84, "img_4d_affine_in_mm_spac": 84, "anchor": 84, "plot_affine_transform": [84, 96], "goal": [85, 90, 93, 116, 166, 167], "result_img": [85, 177, 310], "img1": [85, 310], "img2": [85, 310], "plot_compare_mean_imag": [85, 96], "connected_label_region": [86, 133, 152, 156, 178, 406, 408], "oper": [86, 89, 91, 94, 104, 116, 146, 152, 159, 166, 167, 169, 172, 176, 177, 179, 185, 186, 219, 248, 281, 294, 296, 308, 310, 311, 334, 335, 336, 338, 339, 380, 424, 428, 437], "atlas_yeo_2011": 86, "atlas_yeo": 86, "thick_7": [86, 209], "apart": [86, 133, 152, 156, 157, 166], "region_label": 86, "difficult": [86, 153, 160, 165, 179], "eg": [86, 89, 135, 138, 144, 152, 153, 154, 159, 178, 179, 374, 375, 414], "broken": [86, 131, 139, 152, 164], "relabeled_yeo_atla": 86, "folder_path": 86, "connect_diag": [86, 407], "region_labels_not_diag": 86, "110": [33, 36, 41, 42, 43, 44, 86, 102, 105, 114, 208, 215, 233], "100mm": 86, "region_labels_min_s": 86, "plot_extract_regions_labels_imag": [86, 96], "smith_atla": [], "atlas_network": 87, "rsn10": 206, "98": [21, 23, 30, 32, 33, 36, 39, 40, 42, 43, 44, 62, 67, 87, 91, 93, 101, 102, 107, 114, 147, 152, 296, 342], "dmn_network": 87, "regions_indices_network3": 87, "blob": [87, 94, 158, 178, 205], "network3": 87, "plot_extract_rois_smith_atla": [87, 96], "fetch_neurovault_auditory_computation_task": [88, 138, 152, 231], "foreground": [88, 157], "connected_region": [88, 126, 139, 152, 157, 178, 406, 407], "scoreatpercentil": [88, 103, 318], "threshold_percentile_img": 88, "threshold_value_img": 88, "regions_percentile_img": 88, "1500": [42, 88, 102], "regions_value_img": 88, "plot_extract_rois_statistical_map": [88, 96], "li": [89, 114, 238], "homogen": [89, 156, 178, 198, 249, 250, 251, 252, 256, 257, 314, 328, 331, 404], "miyawaki_filenam": [89, 179], "miyawaki_mean_img": [89, 179], "uniform": 89, "epi_filenam": [89, 179], "mask_arg": [89, 92, 179, 256, 257, 328, 331, 404], "eros": [89, 172, 219, 241, 244, 334, 335, 336, 338, 339], "dilat": [89, 94, 172, 178, 219, 241, 244, 334, 335, 336, 338, 339], "layer": 89, "skull": [89, 218, 334, 335, 336, 338, 339], "lower_cutoff": [89, 336, 339], "upper_cutoff": [89, 336, 337, 339], "bright": 89, "hover": 89, "trended_data": 89, "detrended_data": 89, "plot_mask_comput": [89, 96, 179], "negative_stat_img": 90, "plot_negate_imag": [90, 96], "output_filepath": [91, 92, 179], "mm3": [6, 33, 62, 91, 406, 408, 415], "niftilablesmask": 91, "n_time_point": [91, 92, 289, 290], "label_idx": 91, "plot_nifti_labels_simpl": [91, 96], "fastica": [48, 92, 103, 104, 256], "components_mask": [92, 104], "revers": [92, 134, 141, 152], "plot_nifti_simpl": [92, 96, 179], "load_mni152_templ": [93, 147, 152, 218, 219, 240, 242, 245, 298, 301, 306, 310, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 422], "resampled_stat_img": 93, "tmap_img": 93, "original_shap": 93, "original_affin": 93, "resampled_shap": 93, "resampled_affin": 93, "template_img": 93, "template_shap": 93, "template_affin": 93, "plot_resample_to_templ": [93, 96], "allevi": 94, "curs": 94, "aris": [94, 114, 169, 322, 323], "context": [94, 100, 114, 125, 152, 167, 172], "chain": [94, 178, 185, 186], "clear": [94, 117, 123, 141, 150, 152, 167, 249, 250, 251, 252, 256, 257, 328, 331, 404], "37": [23, 30, 33, 36, 39, 40, 42, 43, 44, 45, 62, 71, 81, 91, 94, 101, 102, 114, 121, 152, 322, 323, 419], "text": [35, 75, 94, 98, 105, 114, 159, 167, 176, 209, 217, 227, 268, 272, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 437], "student": [94, 169, 178, 269, 437], "haxby_label": 94, "especi": [94, 139, 148, 152, 153, 159, 177, 400, 437], "Such": [94, 153, 319], "4mm": [94, 157, 164, 214, 257], "12mm": 94, "anisotropi": 94, "indent": 94, "analog": 94, "brief": [94, 167, 169], "motiv": 94, "realm": 94, "ttest_ind": [94, 178], "establish": [94, 165, 167], "log_p_valu": 94, "nan": [20, 48, 50, 54, 56, 91, 94, 103, 121, 125, 128, 133, 141, 145, 152, 232, 299, 314, 327, 330, 333, 336, 387, 393, 395, 396, 400, 402, 418, 422], "log_p_values_img": 94, "extend": [94, 125, 144, 149, 152, 169, 179, 314], "annot": [22, 94, 115, 125, 133, 144, 152, 205, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 379, 382, 384, 385, 388, 390, 391, 392, 393, 394, 395, 396, 399, 402, 420, 435, 437], "intersect": [94, 178, 337, 339, 340, 410], "investig": [94, 98, 158, 175, 253], "self": [48, 49, 94, 167, 185, 186, 187, 249, 250, 251, 252, 253, 254, 255, 256, 257, 268, 271, 272, 273, 274, 281, 294, 325, 326, 327, 328, 329, 330, 331, 332, 403, 404, 405, 406], "bin_p_valu": 94, "boolean": [94, 117, 145, 150, 152, 191, 193, 217, 223, 232, 253, 256, 257, 281, 300, 312, 325, 334, 335, 336, 338, 339, 377, 382, 384, 386, 391, 394, 399, 412, 413, 418], "logic": [94, 117, 167, 248], "logical_and": [94, 102], "jargon": 94, "AND": [94, 117], "conjunct": 94, "bin_p_values_and_vt": 94, "otherwis": [94, 102, 103, 138, 152, 169, 175, 185, 186, 187, 191, 193, 199, 200, 211, 212, 213, 221, 222, 223, 225, 232, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 284, 294, 309, 313, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 387, 390, 393, 395, 396, 399, 400, 402, 403, 404, 405, 406, 407, 422], "bin_p_values_and_vt_img": 94, "consolid": [94, 149, 152], "toward": [94, 148, 152, 185, 309, 326, 327, 328, 329, 330, 331, 332, 437], "morpholog": [94, 178, 334, 335, 336, 338, 339], "forget": [94, 167], "hole": 94, "binary_dil": [94, 178, 334, 335, 336, 338, 339], "dil_bin_p_values_and_vt": 94, "dil_bin_p_values_and_vt_img": 94, "immedi": [94, 323], "first_roi_data": 94, "second_roi_data": 94, "first_roi_img": 94, "second_roi_img": 94, "suit": [94, 100, 154, 160, 174, 197], "condition_nam": [94, 100], "n_cond_img": 94, "n_cond": 94, "gather": [94, 111, 167, 169], "cond": [94, 100, 283], "cond_map": 94, "mask_data": 94, "scrambledpix": [30, 32, 33, 94, 177], "mask_atla": 94, "plot_roi_extract": [94, 96], "lose": [95, 435], "extent": [56, 91, 95, 172, 355, 358], "first_epi_fil": 95, "mean_func": [62, 95], "20mm": [95, 174], "smoothed_img": [95, 177], "plot_smooth_mean_imag": [95, 96], "massiv": [97, 109, 113, 163, 217, 222, 223, 304, 306, 311, 325, 331, 342, 370, 384, 392, 397, 429, 437], "multivari": [97, 109, 113, 114, 158, 172, 173, 174, 196, 214, 306, 311, 325, 331, 392, 397, 436], "stop": [53, 97, 109, 113, 114, 117, 165, 186, 189, 228, 230, 304, 309, 310, 312, 384, 392, 397, 403], "bridg": 98, "integr": [98, 126, 141, 152, 167, 178, 328], "usecas": [98, 156, 160, 162, 167], "pointer": [98, 162], "unclear": 98, "cat": [30, 32, 33, 98, 116, 159, 173, 177], "n_timepoint": [98, 159, 162], "meaning": [98, 100, 128, 138, 141, 152, 167, 169, 299, 418], "stipul": 98, "processor": [98, 162], "dummyclassifi": [98, 99, 146, 152, 162, 249, 250, 251, 252], "pure": [98, 102, 254, 255], "slower": [98, 162, 166, 314], "permutation_test_scor": [98, 162], "null_cv_scor": 98, "selectpercentil": [98, 133, 152], "linear_svc": 98, "anova_svc": 98, "return_estim": 98, "fitted_pipelin": 98, "test_scor": 98, "first_pipelin": 98, "svc_coef": 98, "invert": [98, 104, 125, 144, 152, 166, 179, 185, 271, 273, 274, 325, 328, 331, 343, 377, 379, 382, 384, 385, 388, 390, 391, 392], "full_coef": 98, "fisher": [98, 114, 269], "lda": 98, "discriminant_analysi": 98, "lineardiscriminantanalysi": 98, "anova_lda": 98, "n_condit": 98, "principl": [98, 156, 159, 163, 165, 172, 253, 437], "fanci": 98, "n_features_to_select": 98, "rfe_svc": 98, "awar": [98, 187, 417], "plot_advanced_decoding_scikit": [98, 109], "gridsearchcv": [99, 162], "pipe": 99, "most_frequ": 99, "connectivity__kind": 99, "labelencod": 99, "pheno": 99, "refit": 99, "cv_results_": 99, "mean_test_scor": 99, "std_test_scor": 99, "param_connectivity__kind": 99, "plot_age_group_prediction_cross_v": [99, 109, 141, 152], "substitut": [100, 414], "psychophysiolog": 100, "ppi": 100, "cisler": [100, 114], "everyth": [100, 175], "systemat": [100, 114, 128, 152, 223, 322, 323], "incorpor": [100, 158], "literatur": [100, 154, 193, 305, 323, 419], "mention": [100, 123, 125, 152, 167, 168, 169], "abdulrahman": [100, 114], "decis": [100, 114, 160, 164, 249, 250, 251, 252, 254, 255, 269], "inter": [100, 105, 154, 178, 179, 337, 339], "mumford": [100, 114, 159, 174, 215, 233], "primarili": 100, "fetch_language_localizer_demo_dataset": [100, 101, 108, 168], "events_df": 100, "languageloc": [100, 101, 108], "img_filt": [100, 101, 108, 284], "desc": [100, 101, 108, 284, 322, 323], "preproc": [100, 101, 108, 284], "standard_glm": 100, "fmri_fil": 100, "glm_paramet": 100, "get_param": [100, 185, 186, 187, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 325, 326, 327, 328, 329, 330, 331, 332, 403, 404, 405, 406], "scaling_axi": [33, 100, 148, 152, 281], "highlight": [100, 175], "lsa_events_df": 100, "condition_count": 100, "i_trial": 100, "iterrow": 100, "trial_condit": 100, "__": [100, 185, 186, 187, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 325, 326, 327, 328, 329, 330, 331, 332, 403, 404, 405, 406], "shouldn": [100, 175, 195], "trial_nam": 100, "lsa_glm": 100, "lsa_beta_map": 100, "trialwise_condit": 100, "beta_map": 100, "relabel": [100, 407], "lss_transform": 100, "row_numb": 100, "compliant": [100, 124, 152, 167, 179, 233, 247, 323], "trial_type_seri": 100, "trial_type_list": 100, "trial_numb": 100, "request": [33, 100, 128, 141, 152, 156, 166, 172, 185, 186, 187, 200, 201, 202, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 296, 318, 319, 325, 326, 327, 328, 329, 330, 331, 332, 342, 371, 372, 399, 403, 404, 405, 406, 435, 436], "left_001": 100, "track": [100, 103, 166, 175], "lss_beta_map": 100, "lss_design_matric": 100, "lss_events_df": 100, "lss_glm": 100, "dm_titl": 100, "i_ax": 100, "though": [100, 104, 159, 272, 393, 395, 417], "vastli": 100, "quick": [100, 174], "neurosynth": [100, 103, 115, 228, 230, 437], "54": [6, 10, 11, 21, 27, 32, 33, 36, 39, 40, 41, 42, 43, 44, 45, 48, 62, 71, 91, 100, 101, 102, 114, 197, 218, 243], "lang_seed_beta_seri": 100, "lang_beta_seri": 100, "lang_corr": 100, "language_connectivity_img": 100, "string_seed_beta_seri": 100, "string_beta_seri": 100, "string_corr": 100, "string_connectivity_img": 100, "josh": [100, 114], "keith": [100, 114], "bush": [100, 114], "scott": [100, 114, 213], "steel": [100, 114], "84": [6, 11, 17, 23, 33, 36, 39, 40, 42, 43, 47, 62, 71, 91, 100, 101, 102, 114, 301, 322], "1042": [100, 114], "1052": [100, 114], "jess": [100, 114], "rissman": [100, 114], "adam": [100, 114], "gazzalei": [100, 114], "esposito": [100, 114], "stage": [100, 114, 167, 174], "752": [100, 114], "763": [100, 114], "2004": [100, 114, 199, 273, 274], "jeanett": [100, 114, 174], "benjamin": [100, 114, 213], "turner": [100, 114, 196, 206], "gregori": [100, 114], "ashbi": [100, 114], "poldrack": [100, 114, 117, 174, 215, 226, 228, 230, 233], "deconvolv": [100, 114, 159], "multivoxel": [100, 114, 159, 226], "2636": [100, 114], "2643": [100, 114, 145, 152], "spatiotempor": [100, 114], "rapid": [100, 114], "1429": [100, 114], "1438": [100, 114], "hunar": [100, 114], "richard": [100, 114], "optim": [53, 57, 100, 114, 141, 145, 152, 160, 162, 165, 166, 187, 189, 200, 314, 315], "756": [32, 62, 100, 114], "766": [100, 114], "plot_beta_seri": [100, 109], "consult": 101, "simplifi": [101, 108, 116, 131, 141, 149, 152, 179, 221, 222], "json": [62, 100, 101, 103, 108, 117, 284, 319, 321, 322, 323], "basenam": 101, "conson": 101, "value_count": 101, "scalar": [101, 164, 179, 268, 269, 271, 272, 273, 274, 316, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 379, 388], "concurr": [101, 108], "model_and_arg": 101, "midx": 101, "share": [101, 114, 117, 144, 152, 153, 158, 167, 177, 189, 198, 201, 202, 223, 228, 230], "8mm": [101, 281, 294, 416], "first_level_contrast": [101, 148, 152, 294, 296], "fronto": [58, 101], "plot_bids_analysi": [101, 109], "behav": [102, 281, 283, 288], "exchang": [102, 104, 193], "winkler": [102, 114, 225, 342], "anderson": [102, 114, 193, 225, 342], "robinson": [102, 114, 225, 342], "australian": [102, 114, 342], "zealand": [102, 114, 342], "journal": [102, 114, 164, 205, 206, 209, 232, 342], "43": [10, 21, 33, 35, 36, 38, 39, 40, 42, 43, 44, 45, 48, 62, 65, 71, 91, 101, 102, 114, 126, 152, 198, 342], "88": [11, 33, 36, 39, 40, 42, 43, 62, 71, 81, 89, 91, 101, 102, 114, 342], "avesbiodiv": 102, "mncn": 102, "csic": 102, "estadistica": 102, "permut2": 102, "conditions_encod": 102, "func_reduc": 102, "n_session": 102, "conditions_per_sess": 102, "grouped_fmri_mask": 102, "grouped_conditions_encod": 102, "session_mask": 102, "session_house_mask": 102, "session_face_mask": 102, "ol": [102, 105, 271, 273, 274, 281, 290, 342, 429], "trace": 102, "pvals_bonferroni": 102, "neg_log_pvals_bonferroni": 102, "neg_log_pvals_bonferroni_unmask": 102, "mean_fmri_img": 102, "neg_log_pvals_bonferroni_data": 102, "plot_haxby_mass_univari": [102, 109], "fetch_neurovault": [103, 107, 117, 134, 141, 145, 152, 229, 230, 231], "load_mni152_brain_mask": [103, 131, 147, 152, 218], "nv_data": [103, 107], "max_imag": [103, 107, 117, 228], "fetch_neurosynth_word": [103, 117, 228, 230], "term_weight": 103, "word_frequ": [103, 117, 228, 230], "vocabulari": [103, 117, 172, 174, 228, 230], "total_scor": 103, "ntop": 103, "term_idx": 103, "nreshap": 103, "userwarn": [3, 9, 10, 11, 16, 18, 20, 21, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 61, 62, 64, 71, 72, 77, 78, 79, 84, 86, 91, 92, 94, 95, 98, 100, 101, 103, 108, 111], "deprecationwarn": [103, 197, 198, 206, 325, 326, 327, 328, 329, 330, 331, 332, 406], "fail": [34, 103, 123, 124, 141, 150, 152, 166, 167, 228, 230, 406], "failur": [103, 133, 152, 167, 336], "is_us": 103, "image_path": 103, "images_meta": [103, 107, 117, 228, 229, 230, 231], "collection_id": [103, 107, 117, 228, 230], "fast_ica": 103, "ica_map": 103, "term_weights_for_compon": 103, "components_": [103, 136, 152, 256, 257], "ic_map": 103, "ic_term": 103, "ic_threshold": 103, "ic_img": 103, "important_term": 103, "neurolog": [103, 169, 172, 195], "plot_ica_neurovault": [103, 109], "advis": [104, 167, 177, 219, 336, 404], "unsupervis": [104, 172, 256, 257, 281, 294, 403, 405], "latent": [104, 172], "sens": [104, 159, 174, 249, 250, 251, 252, 271, 273, 274, 346, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369], "component_img": 104, "plot_ica_resting_st": [104, 109], "pvals_anova": [105, 106], "neg_log_pvals_anova": [105, 106], "neg_log_pvals_anova_unmask": [105, 106], "fwe": [105, 342], "tfce": [105, 123, 150, 152, 172, 296, 342], "ols_output": 105, "neg_log_pvals_tfce_unmask": 105, "logp_max_tfc": [105, 296, 342], "amax": 105, "images_to_plot": 105, "i_col": 105, "new_titl": 105, "sig": 105, "plot_localizer_mass_univariate_method": [105, 106, 109], "plotted_slic": 106, "masked_pv": 106, "plot_localizer_simple_analysi": [106, 109], "fetch_neurovault_id": [107, 117, 134, 152, 228, 229, 231], "stop_go_image_id": 107, "151": [33, 41, 103, 107], "3041": [103, 107], "3042": [103, 107, 148, 152], "2676": [103, 107], "2675": [103, 107], "2818": [103, 107], "2834": [103, 107], "queri": [100, 101, 103, 107, 108, 228, 230, 248], "cognitive_paradigm_cogatla": 107, "contrast_definit": 107, "succ": 107, "map_typ": [107, 228], "image_id": [107, 117, 230], "nplot": 107, "absolute_path": 107, "t_to_z": 107, "t_score": 107, "deg_of_freedom": 107, "sf": 107, "z_valu": 107, "z_img": 107, "current_collect": 107, "ncomput": 107, "this_meta": 107, "ncollect": 107, "t_img": 107, "number_of_subject": 107, "meta_analysis_img": 107, "sqrt": [107, 131, 152, 191, 192, 273, 274], "plot_neurovault_meta_analysi": [107, 109], "downsampl": [108, 157, 178, 214, 378], "10k": 108, "sidecar": 108, "json_fil": 108, "01_task": [100, 101, 108], "languagelocalizer_desc": [100, 101, 108], "preproc_bold": [47, 48, 49, 52, 53, 54, 55, 56, 58, 85, 91, 92, 95, 100, 101, 104, 108], "repetitiontim": 108, "z_scores_right": 108, "z_scores_left": 108, "contrast_valu": 108, "accumul": [108, 435], "z_score_left": 108, "az_scores_right": 108, "popul": [108, 111, 114, 153, 168, 186, 225, 326, 327, 328, 329, 330, 331, 332, 418], "ttest_1samp": 108, "pval_left": 108, "pval_right": 108, "z_val_left": 108, "z_val_right": 108, "plot_surface_bids_analysi": [108, 109], "permiss": [113, 141, 152], "auto_examples_python": 113, "auto_examples_jupyt": 113, "arrang": [114, 139, 152, 353, 355, 358, 372, 377, 382, 385, 390, 391, 392, 435], "alphabet": [114, 141, 152, 177], "bib": 114, "samara": [114, 166, 186, 189, 406], "septemb": [114, 125, 132, 147, 152, 406], "01093944": [114, 406], "elena": [114, 196], "erik": [114, 196], "erhardt": [114, 196], "eswar": [114, 196], "damaraju": [114, 196], "william": [114, 196, 225, 238, 268, 272], "gruner": [114, 196], "judith": [114, 196], "segal": [114, 196], "roger": [114, 196, 237], "silva": [114, 196], "havlicek": [114, 196], "sriniva": [114, 196], "rachakonda": [114, 196], "jill": [114, 196, 199, 225], "fri": [114, 196], "ravi": [114, 196], "kalyanam": [114, 196], "andrew": [114, 193, 196, 198, 218], "arvind": [114, 196], "caprihan": [114, 196], "jessica": [114, 196, 206, 211, 212], "eichel": [114, 196], "adelsheim": [114, 196], "angela": [114, 196, 206], "bryan": [114, 196], "juan": [114, 196], "bustillo": [114, 196], "sarah": [114, 196], "feldstein": [114, 196], "ew": [114, 196], "francesca": [114, 196], "filbei": [114, 196], "corei": [114, 196], "ford": [114, 196], "kent": [114, 196], "hutchison": [114, 196], "rex": [114, 196], "jung": [114, 196], "kiehl": [114, 196], "piyadasa": [114, 196], "kodituwakku": [114, 196], "yuko": [114, 196], "komesu": [114, 196], "mayer": [114, 196], "godfrei": [114, 196], "pearlson": [114, 196], "phillip": [114, 196], "joseph": [114, 196, 211], "sadek": [114, 196], "ursina": [114, 196], "teuscher": [114, 196], "vinc": [114, 196], "calhoun": [114, 196, 238], "frontiersin": [114, 193, 196, 228, 230, 238], "fnsy": [114, 196], "00002": [114, 196], "marti": [114, 208, 342], "onlinelibrari": [114, 198, 208, 237, 299, 342, 418], "wilei": [114, 198, 208, 237, 273, 274, 299, 342, 418], "1111": [114, 342], "1467": [114, 342], "842x": [114, 342], "00156": [114, 342], "arxiv": [114, 164, 166, 186, 189, 198, 199, 205, 206, 208, 209, 211, 217, 225, 232, 237, 299, 342, 418], "luca": [114, 165], "baldassarr": [114, 165], "janaina": [114, 165], "mourao": [114, 165, 174], "miranda": [114, 165, 174], "massimiliano": [114, 165], "pontil": [114, 165], "workshop": [114, 165, 197], "www0": [114, 165], "ac": [6, 21, 71, 114, 165, 206, 218, 235, 236, 243], "staff": [114, 165], "neurosparse_prni": [114, 165], "1109": [114, 165, 197, 256, 257, 405, 411], "prni": [114, 165, 197], "yashar": [114, 322, 323, 419], "behzadi": [114, 305, 322, 323, 419], "khale": [114, 322, 323, 419], "restom": [114, 322, 323, 419], "joi": [114, 322, 323, 419], "liau": [114, 322, 323, 419], "liu": [114, 205, 209, 322, 323, 419], "perfus": [114, 322, 323, 419], "sciencedirect": [114, 161, 164, 165, 195, 197, 200, 203, 207, 213, 218, 223, 226, 227, 243, 251, 252, 322, 323, 342, 378, 419], "pii": [114, 161, 164, 165, 195, 197, 200, 203, 207, 213, 218, 223, 226, 227, 243, 251, 252, 322, 323, 342, 378, 419], "s1053811907003837": [114, 322, 323, 419], "04": [3, 27, 30, 32, 33, 44, 45, 53, 59, 73, 96, 109, 114, 166, 203, 299, 322, 323, 418, 419], "042": [7, 41, 114, 322, 323, 419], "mine": [114, 174, 197], "hierarchi": [114, 197], "57": [6, 30, 31, 33, 39, 40, 42, 43, 44, 59, 62, 71, 91, 99, 101, 102, 105, 107, 109, 114, 118, 121, 138, 152, 197], "pedro": [114, 197], "rosa": [114, 197], "neto": [114, 197], "lyttelton": [114, 197], "habib": [114, 197], "benali": [114, 197], "alan": [114, 197, 218, 243], "bootstrap": [114, 197], "1126": [114, 197, 211, 217], "1139": [114, 197], "s1053811910002697": [114, 197], "082": [41, 114, 197], "lorrain": [114, 164], "tyler": [114, 164], "semant": [114, 146, 148, 152, 164], "perirhin": [114, 164], "4766": [114, 164], "4775": [114, 164], "jneurosci": [114, 164], "1523": [114, 135, 152, 164], "2828": [114, 164], "loui": [114, 218, 243], "collin": [114, 195, 218, 243], "zijdenbo": [114, 218], "wim": [114, 218], "baar": [114, 218], "\u00e9": [114, 218, 223], "anim": [114, 218], "insect": [114, 218], "attila": [114, 218], "kuba": [114, 218], "\u0161": [114, 218], "\u00e1": [114, 218], "amal": [114, 218], "todd": [114, 164, 218], "pokropek": [114, 218], "editor": [114, 185, 218], "223": [33, 41, 114, 218], "heidelberg": [114, 185, 203, 218], "springer": [114, 185, 203, 218], "cameron": [114, 198, 203, 238], "jame": [114, 198, 217, 273, 274], "holtzheim": [114, 198], "iii": [114, 198], "xiaop": [114, 198], "hu": [114, 198], "helen": [114, 198], "mayberg": [114, 198], "1914": [114, 198], "1928": [114, 198], "1002": [114, 198, 208, 237, 299, 418], "hbm": [114, 198, 299, 418], "21333": [114, 198], "kamalak": [114, 200], "ga\u00ebl": [114, 161, 200, 203, 251, 252, 256], "antonia": [114, 200], "machlouzarid": [114, 200], "shalit": [114, 200], "krzysztof": [114, 200, 228, 230], "117126": [114, 200], "2020": [102, 114, 142, 143, 144, 152, 200, 213], "s1053811920306121": [114, 200], "davidson": [114, 273, 274], "mackinnon": [114, 273, 274], "econometr": [114, 268, 272, 273, 274], "theori": [114, 172, 226, 273, 274], "univ": [114, 273, 274], "ny": [114, 273, 274], "isbn": [114, 268, 272, 273, 274], "978": [114, 273, 274], "19": [6, 11, 23, 33, 36, 39, 40, 42, 43, 44, 45, 48, 53, 55, 59, 61, 62, 71, 73, 77, 79, 82, 91, 101, 102, 103, 114, 123, 126, 128, 141, 152, 194, 195, 203, 204, 205, 208, 209, 232, 235, 236, 273, 274], "512372": [114, 273, 274], "gso": [114, 273, 274], "gbv": [114, 273, 274], "cmd": [114, 273, 274], "srcha": [114, 273, 274], "srt": [114, 273, 274], "yop": [114, 273, 274], "ikt": [114, 273, 274], "trm": [114, 273, 274], "ppn": [114, 273, 274], "393847152": [114, 273, 274], "sourceid": [114, 273, 274], "fbw_bibsonomi": [114, 273, 274], "halgren": [114, 199, 207], "cerebr": [114, 169, 199, 205, 209, 211, 223, 225], "47": [23, 31, 33, 36, 39, 40, 42, 43, 45, 48, 62, 91, 98, 101, 102, 114, 193, 198, 199, 218, 243], "supplement": [114, 199, 218, 243], "s151": [114, 199], "s1053": [114, 199, 218, 243], "8119": [114, 199, 218, 243], "09": [30, 32, 33, 44, 114, 199, 212, 218, 223, 232, 243, 281, 294, 299, 416, 418], "71561": [114, 199], "christoph": [114, 135, 138, 152, 199, 207], "bruce": [114, 199, 205, 207, 209, 237], "ander": [114, 199, 207, 237], "s1053811910008542": [114, 207], "ga": [114, 165], "\u00eb": [114, 165], "graphnet": [114, 165], "earli": [39, 111, 114, 165, 228, 230, 299, 403, 418], "screen": [32, 114, 165, 249, 250, 251, 252, 254, 255], "june": [114, 131, 134, 137, 146, 152, 165, 166], "2015": [20, 114, 117, 118, 119, 120, 121, 122, 126, 127, 152, 165, 186, 189, 203, 223, 225, 228, 230, 322, 323], "01147731": [114, 165], "solver": [39, 114, 165, 249, 251, 254, 255], "\u00fc": [114, 165], "bingen": [114, 165], "00991743": [114, 165], "nico": [114, 211, 213], "dosenbach": [114, 129, 152, 211, 213], "binyam": [114, 211], "alexand": [114, 193, 205, 211, 212], "cohen": [114, 211, 212], "damien": [114, 211], "church": [114, 211, 212], "nelson": [114, 211, 212], "gagan": [114, 211, 212], "wig": [114, 211, 212], "alecia": [114, 211, 212], "christina": [114, 211], "lessov": [114, 211], "schlaggar": [114, 211, 212, 213, 322, 323], "kelli": [114, 211, 212, 218, 238, 243, 322, 323], "barn": [114, 211, 212, 322, 323], "dubi": [114, 211], "feczko": [114, 211], "rebecca": [114, 211, 214], "coalson": [114, 211], "pruett": [114, 211], "deanna": [114, 211, 213, 225], "barch": [114, 211, 225], "petersen": [114, 211, 212, 213, 322, 323], "bradlei": [114, 211, 212, 213, 225, 322, 323], "5997": [114, 211], "sciencemag": [114, 211, 217], "1194144": [114, 211], "duchi": [114, 166], "stephen": [114, 166, 206, 225, 238, 296, 342], "gould": [114, 166], "daphn": [114, 166], "koller": [114, 166], "subgradi": [114, 166], "1206": [114, 166], "3249": [114, 166], "joset": [114, 164], "etzel": [114, 164], "jeffrei": [114, 164, 193], "zack": [114, 164], "braver": [114, 164], "promis": [114, 164], "pitfal": [114, 159, 164], "78": [10, 33, 36, 39, 40, 42, 43, 44, 49, 52, 53, 62, 66, 72, 93, 99, 101, 102, 114, 164], "261": [33, 41, 114, 164], "s1053811913002917": [114, 164], "041": [41, 114, 164], "filippini": [114, 206, 225], "macintosh": [114, 225], "morgan": [114, 225], "hough": [114, 225], "gui": [114, 225], "goodwin": [114, 225], "giovanni": [114, 225], "frisoni": [114, 225], "matthew": [114, 225, 238, 342], "beckmann": [114, 206, 225, 322, 323], "clare": [114, 206, 225, 238], "mackai": [114, 206, 225], "carrier": [114, 225], "apo": [114, 225], "\u03b54": [114, 225], "allel": [114, 225], "proceed": [114, 164, 168, 206, 225, 253, 323], "nation": [114, 164, 206, 225, 253, 323], "academi": [114, 164, 206, 225, 253, 323], "106": [33, 41, 43, 114, 205, 206, 209, 225], "7209": [114, 225], "7214": [114, 225], "pna": [114, 164, 206, 225, 323], "1073": [114, 164, 206, 225, 323], "0811879106": [114, 225], "sereno": [114, 237], "tootel": [114, 237], "intersubject": [114, 237], "272": [33, 41, 114, 237], "28sici": [114, 208, 237], "291097": [114, 208, 237], "0193": [114, 208, 237], "281999": [114, 237], "298": [33, 41, 114, 237, 342], "3a4": [114, 208, 237], "3c272": [114, 237], "3a": [6, 62, 114, 208, 237], "3aaid": [114, 208, 237], "hbm10": [114, 237], "3e3": [114, 208, 237], "3b2": [114, 208, 237], "sici": [114, 208, 237], "1097": [114, 208, 237], "aid": [114, 208, 237], "van": [114, 117, 199, 225, 228, 230, 322, 323], "der": [114, 199], "kouw": [114, 199], "florent": [114, 199], "s\u00e9gonn": [114, 199], "salat": [114, 199], "evelina": [114, 199], "busa": [114, 199], "larri": [114, 199], "seidman": [114, 199], "goldstein": [114, 199], "kennedi": [114, 199], "vern": [114, 199], "cavi": [114, 199], "niko": [114, 199], "makri": [114, 199], "rosen": [114, 199], "22": [6, 10, 11, 23, 33, 36, 39, 40, 42, 43, 44, 62, 71, 91, 101, 102, 103, 107, 114, 128, 139, 148, 152, 199, 301], "bhg087": [114, 199], "academ": [114, 199, 205, 225], "oup": [114, 199, 205, 225], "1193353": [114, 199], "boyd": 114, "edinburgh": 114, "fletcher": [114, 193], "sarang": 114, "joshi": 114, "riemannian": 114, "diffus": [114, 159, 172], "tensor": 114, "s0165168406001691": 114, "sigpro": 114, "2005": [114, 323], "018": [41, 114, 322, 323], "vladimir": [114, 218, 243], "fonov": [114, 218, 243], "botteron": [114, 218, 243], "almli": [114, 218, 243], "mckinstri": [114, 218, 243], "unbias": [114, 159, 218, 243], "pediatr": [114, 218, 243], "313": [33, 41, 114, 218, 243], "327": [9, 33, 41, 114, 218, 243], "s1053811910010062": [114, 218, 243], "033": [41, 114, 218, 243], "rc": [114, 218, 243], "cr": [114, 218, 243], "dl": [114, 218, 243], "nonlinear": [114, 218, 243], "birth": [114, 218, 243], "adulthood": [114, 218, 243], "s102": [114, 218, 243], "70884": [114, 218, 243], "fox": [114, 206, 208, 323], "snyder": [114, 322, 323], "justin": [114, 323], "maurizio": [114, 323], "corbetta": [114, 323], "essen": [114, 117, 225, 228, 230, 323], "marcu": [114, 164, 225, 232, 323], "raichl": [114, 323], "9673": [114, 323], "9678": [114, 323], "juli": [114, 122, 152, 166, 323], "0504136102": [114, 323], "freedman": [114, 342], "nonstochast": [114, 342], "busi": [114, 342], "econom": [114, 342], "292": [33, 41, 114, 342], "1983": [114, 342], "tandfonlin": [114, 342], "1080": [42, 102, 114, 342], "07350015": [114, 342], "10509354": [114, 342], "holm": [114, 205, 299, 418], "worslei": [114, 299, 418], "frith": [114, 299, 418], "frackowiak": [114, 299, 418], "189": [33, 41, 114, 299, 306, 418], "1994": [114, 299, 418], "460020402": [114, 299, 418], "gabriel": [114, 228, 230], "rivera": [114, 117, 228, 230], "yannick": [114, 118, 152, 161, 223, 228, 230, 251, 252], "schwarz": [114, 228, 230], "satrajit": [114, 228, 230], "ghosh": [114, 117, 228, 230], "camil": [114, 228, 230], "maumet": [114, 117, 228, 230], "vanessa": [114, 228, 230], "sochat": [114, 117, 228, 230], "nichol": [114, 117, 172, 174, 225, 228, 230, 296, 336, 342], "tal": [114, 117, 179, 228, 230, 332], "yarkoni": [114, 117, 228, 230], "marguli": [114, 117, 228, 230], "neuroinformat": [114, 228, 230], "fninf": [114, 117, 228, 230], "00008": [114, 117, 228, 230], "philadelphia": [114, 165], "00839984": [114, 165], "educ": [114, 225, 232, 268, 272, 399], "fifth": [114, 219, 268, 272], "edit": [114, 146, 152, 167, 175, 268, 272], "066189": [114, 268, 272], "page": [36, 49, 52, 53, 58, 62, 75, 77, 114, 138, 142, 148, 149, 150, 152, 156, 160, 164, 166, 167, 169, 175, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422], "stern": [114, 268, 272], "nyu": [114, 125, 152, 268, 272], "edu": [47, 114, 206, 209, 232, 268, 272], "wgreen": [114, 268, 272], "econometricanalysi": [114, 268, 272], "htm": [114, 268, 272], "logan": [114, 165], "grosenick": [114, 165], "brad": [114, 165], "klingenberg": [114, 165], "kiefer": [114, 165], "katovich": [114, 165], "brian": [114, 165, 238, 299, 418], "knutson": [114, 165], "304": [33, 41, 114, 165], "321": [33, 41, 114, 165], "s1053811912012487": [114, 165], "062": [41, 114, 165], "ida": [114, 217], "gobbini": [114, 217], "maura": [114, 217], "furei": [114, 217], "alumit": [114, 217], "ishai": [114, 217], "jennif": [114, 217], "schouten": [114, 217], "pietro": [114, 217], "pietrini": [114, 217], "5539": [114, 217], "1063736": [114, 217], "honorio": [114, 166, 186, 189], "tommi": [114, 186, 189], "jaakkola": [114, 186, 189], "1207": [114, 166, 186, 189], "4255": [114, 166, 186, 189], "andr": [114, 405, 411], "rena": [114, 141, 152, 156, 161, 172, 173, 251, 252, 404, 411], "tran": [114, 195, 405, 411], "anal": [114, 405, 411], "mach": [114, 405, 411], "intel": [114, 405, 411], "tpami": [114, 405, 411], "2815524": [114, 405, 411], "schwartz": [114, 117, 118, 152, 161, 223, 251, 252], "scalabl": [114, 161, 251, 252], "172": [33, 41, 114, 161, 208, 251, 252], "s1053811917308182": [114, 161, 251, 252], "005": [41, 114, 161, 251, 252], "koji": [114, 226], "complementari": [114, 226], "neuropsychologia": [114, 226], "544": [33, 62, 73, 114, 226], "552": [33, 89, 114, 226], "s0028393211005070": [114, 226], "007": [41, 114, 203, 226], "thorsten": [114, 164], "kahnt": [114, 164], "grueschow": [114, 164], "speck": [114, 164], "dylan": [114, 164, 238], "perceptu": [114, 164], "549": [33, 114, 164], "559": [33, 114, 164], "s0896627311002960": [114, 164], "054": [41, 114, 164], "nikolau": [114, 164, 253], "kriegeskort": [114, 164, 174, 253], "rainer": [114, 164, 253], "goebel": [114, 164, 253], "peter": [114, 164, 206, 208, 253], "bandettini": [114, 164, 253], "103": [33, 41, 43, 114, 164, 253], "3863": [114, 164, 253], "3868": [114, 164, 253], "0600244103": [114, 164], "laird": [114, 206], "mickl": [114, 206], "kimberli": [114, 206], "rai": [114, 206], "rees": [114, 206], "mckai": [114, 206], "glahn": [114, 206], "4022": [114, 206], "4037": [114, 206], "1162": [114, 206, 232], "jocn": [114, 206, 232], "_a": [114, 206], "_00077": [114, 206], "1777164": [114, 206], "jocn_a_00077": [114, 206], "lancast": [114, 208], "rainei": [114, 208], "summerlin": [114, 208], "freita": [114, 208], "toga": [114, 208], "mazziotta": [114, 208], "autom": [114, 117, 195, 208, 228, 230], "preliminari": [114, 208], "forward": [114, 208], "238": [33, 41, 104, 109, 114, 208], "242": [33, 41, 114, 208], "1997": [114, 141, 152, 208], "281997": [114, 208], "295": [33, 41, 114, 208], "3c238": [114, 208], "hbm6": [114, 208], "jack": [114, 160, 208], "woldorff": [114, 208], "lawrenc": [114, 208], "parson": [114, 208], "mario": [114, 208], "liotti": [114, 208], "catarina": [114, 208], "laci": [114, 208], "kochunov": [114, 208], "nickerson": [114, 208], "shawn": [114, 208], "mikiten": [114, 208], "talairach": [114, 135, 152, 171, 208], "28200007": [114, 208], "2910": [102, 114, 208], "3a3": [114, 208], "3c120": [114, 208], "hbm30": [114, 208], "200007": [114, 208], "lindquist": [114, 138, 152, 299, 418], "stephan": [114, 299, 418], "geuter": [114, 299, 418], "tor": [114, 117, 228, 230, 299, 418], "wager": [114, 117, 228, 230, 299, 418], "caffo": [114, 299, 418], "modular": [114, 167, 299, 418], "reintroduc": [114, 299, 418], "biorxiv": [114, 299, 418], "407676": [114, 299, 418], "1101": [114, 299, 418], "traci": [114, 232], "jami": [114, 232], "parker": [114, 232], "csernanski": [114, 232], "morri": [114, 232], "randi": [114, 205, 209, 232], "buckner": [114, 205, 209, 232], "nondement": [114, 232], "dement": [114, 232], "1498": [114, 232], "1507": [114, 232], "1756878": [114, 232], "13th": [114, 257], "symposium": [114, 256, 257], "biomed": [114, 256, 257], "1282": [114, 257], "1285": [114, 257], "7493501": [114, 257], "behaviour": [114, 126, 138, 145, 150, 152, 165, 179, 225], "1328": [114, 165], "1340": [42, 102, 114, 165], "februari": [114, 118, 119, 124, 128, 129, 133, 143, 152, 165], "00563468": [114, 165], "tmi": [114, 165], "2113378": [114, 165], "yoichi": [114, 227], "hajim": [114, 227], "okito": [114, 227], "masa": [114, 227], "aki": [114, 138, 152, 227], "yusuk": [114, 227], "hiroki": [114, 227], "norihiro": [114, 227], "sadato": [114, 227], "yukiyasu": [114, 227], "s0896627308009586": [114, 227], "004": [41, 114, 227], "dougla": [114, 273, 274], "montgomeri": [114, 273, 274], "peck": [114, 273, 274], "geoffrei": [114, 273, 274], "vine": [114, 273, 274], "ed": [114, 273, 274], "son": [114, 273, 274], "0471754951": [114, 273, 274], "naselari": [114, 160], "kendrick": [114, 160], "kai": [114, 160], "shinji": [114, 160], "nishimoto": [114, 160], "gallant": [114, 160], "400": [33, 36, 42, 44, 102, 114, 160, 205], "410": [33, 36, 42, 44, 102, 114, 160], "20691790": [114, 160], "pmid": [114, 160, 205, 209], "pubm": [114, 160, 195, 256, 322, 323], "ncbi": [114, 160, 256, 322, 323], "nlm": [114, 160, 256, 322, 323], "jare": [114, 193], "nielsen": [114, 193], "brandon": [114, 193], "zielinski": [114, 193], "nichola": [114, 193], "lang": [114, 193, 195], "erin": [114, 193], "bigler": [114, 193], "janet": [114, 193], "lainhart": [114, 193], "multisit": [114, 193], "autism": [114, 193], "599": [33, 114, 193], "fnhum": [114, 193], "00599": [114, 193], "kate": [114, 206, 238], "stanlei": [114, 238], "colcomb": [114, 238], "tobe": [114, 238], "maarten": [114, 238, 322, 323], "menn": [114, 238, 322, 323], "melissa": [114, 238], "benedict": [114, 238], "moreno": [114, 223, 238], "laura": [114, 238], "panek": [114, 238], "shaquanna": [114, 238], "brown": [114, 238], "zavitz": [114, 238], "qingyang": [114, 238], "sharad": [114, 238], "sikka": [114, 238], "gutman": [114, 238], "saroja": [114, 238], "bangaru": [114, 238], "rochel": [114, 238], "tziona": [114, 238], "schlachter": [114, 238], "stephani": [114, 238], "kamiel": [114, 238], "ayesha": [114, 238], "anwar": [114, 238], "caitlin": [114, 238], "hinz": [114, 238], "kaplan": [114, 238], "anna": [114, 238], "rachlin": [114, 238], "samantha": [114, 238], "adelsberg": [114, 238], "cheung": [114, 238], "ranjit": [114, 238], "khanuja": [114, 238], "chaogan": [114, 238], "yan": [114, 238], "courtnei": [114, 238], "margaret": [114, 238], "wood": [114, 238], "cox": [114, 238], "adriana": [114, 238], "dimartino": [114, 238], "eva": [114, 238], "petkova": [114, 238], "philip": [114, 238], "reiss": [114, 238], "nanci": [114, 238], "duan": [114, 238], "dawn": [114, 238], "thompsen": [114, 238], "bharat": [114, 238], "biswal": [114, 238], "barbara": [114, 238], "coffei": [114, 238], "hoptman": [114, 238], "javitt": [114, 238], "nunzio": [114, 238], "pomara": [114, 238], "sidti": [114, 238], "harold": [114, 238], "koplewicz": [114, 238], "francisco": [114, 238], "castellano": [114, 238], "bennett": [114, 238], "leventh": [114, 238], "milham": [114, 238], "reilli": [114, 225], "valentina": [114, 225], "tomassini": [114, 225], "narend": [114, 225], "ramnani": [114, 225], "heidi": [114, 225], "johansen": [114, 225], "berg": [114, 225], "zone": [114, 225], "cerebellum": [58, 114, 211, 213, 225], "953": [114, 225], "965": [114, 225], "bhp157": [114, 225], "17303287": [114, 225], "wolfgang": [114, 204], "amanda": [114, 204], "nili": [114, 204], "tyszka": [114, 204], "vivo": [114, 204], "nuclei": [114, 204], "180063": [114, 204], "apr": [114, 204], "1038": [114, 204, 215, 233], "sdata": [114, 204, 215, 233], "63": [6, 17, 32, 33, 36, 39, 40, 42, 43, 44, 45, 62, 71, 93, 101, 102, 114, 196, 204], "bastien": [114, 223], "antoinett": [114, 223], "julien": [114, 223], "serr": [114, 223], "deni": [114, 223], "le": [114, 223], "bihan": [114, 223], "stanisla": [114, 223], "congdon": [114, 215, 233], "triplett": [114, 215, 233], "karlsgodt": [114, 215, 233], "sabb": [114, 215, 233], "freimer": [114, 215, 233], "cannon": [114, 215, 233], "bilder": [114, 215, 233], "phenom": [114, 215, 233], "160110": [114, 215, 233], "decemb": [114, 126, 127, 141, 152, 215, 233], "158": [33, 41, 114, 378], "mitig": [114, 378], "s1053811916303871": [114, 378], "009": [41, 114, 378], "2142": [114, 322, 323], "2154": [114, 322, 323], "22019881": [114, 322, 323], "pmc3254728": [114, 322, 323], "timothi": [114, 205, 212, 225, 322], "laumann": [114, 205, 212, 322], "fran": [114, 212], "miezin": [114, 212], "006": [41, 114, 212], "anish": [114, 322], "mitra": [114, 322], "320": [33, 36, 41, 42, 44, 102, 114, 322], "341": [33, 41, 114, 322], "s1053811913009117": [114, 322], "048": [41, 114, 322], "raimon": [114, 322, 323], "pruim": [114, 322, 323], "daan": [114, 322, 323], "rooij": [114, 322, 323], "alberto": [114, 322, 323], "llera": [114, 322, 323], "buitelaar": [114, 322, 323], "aroma": [114, 154, 322, 323], "112": [31, 33, 39, 41, 43, 82, 93, 109, 111, 114, 322, 323], "267": [33, 41, 114, 322, 323], "277": [33, 41, 114, 322, 323], "064": [41, 114, 322, 323], "hilari": [114, 214], "richardson": [114, 214], "grace": [114, 214], "lisandrelli": [114, 214], "alexa": [114, 214], "riobueno": [114, 214], "naylor": [114, 214], "sax": [114, 214], "social": [114, 214], "twelv": [114, 214], "livio": [114, 276], "wouter": [114, 276], "aldo": [114, 276], "novemb": [114, 135, 138, 141, 144, 152, 276], "schaefer": [114, 205], "ru": [114, 205], "kong": [114, 205], "gordon": [114, 205], "nian": [114, 205], "zuo": [114, 205], "avram": [114, 205], "yeo": [114, 205, 209, 374], "28": [11, 23, 33, 36, 39, 40, 41, 42, 43, 44, 62, 71, 73, 86, 89, 91, 96, 101, 102, 103, 114, 118, 138, 152, 196, 205], "3095": [114, 205], "3114": [114, 205], "bhx179": [114, 205], "25696344": [114, 205], "_schaeferfullsupp": [114, 205], "seitzman": [114, 141, 152, 213], "caterina": [114, 213], "gratton": [114, 213], "marek": [114, 213], "raut": [114, 213], "206": [33, 41, 114, 213], "116290": [114, 213], "s105381191930881x": [114, 213], "zarrar": 114, "shehzad": 114, "gee": 114, "kristin": 114, "gotim": 114, "lucina": 114, "q": [114, 169, 175, 186, 277, 281, 294, 297, 416], "uddin": 114, "sang": 114, "han": 114, "lee": 114, "ami": 114, "krain": 114, "xavier": 114, "unconstrain": 114, "2209": 114, "2229": 114, "bhn256": 114, "17300841": 114, "sm": [114, 225], "glasser": [114, 225], "salimi": [114, 225], "khorshidi": [114, 225], "duff": [114, 225], "dc": [114, 225], "mw": [114, 225], "woolrich": [114, 225], "jenkinson": [114, 225], "cf": [114, 179, 225], "rfmri": [114, 225], "ohbm": [114, 137, 152, 225], "annual": [114, 225], "meet": [114, 150, 152, 225, 436], "address": [114, 169, 171, 175, 296, 342], "localis": [114, 296, 342], "061": [41, 44, 45, 114, 296, 342], "vidaurr": [114, 225], "ej": [114, 225], "behren": [114, 225], "kamil": [114, 225], "ugurbil": [114, 225], "karla": [114, 206, 225], "miller": [114, 206, 225], "demograph": [114, 225], "1565": [114, 225], "1567": [114, 225], "watkin": [114, 206], "toro": [114, 206], "textquoteright": [114, 206], "architectur": [114, 156, 206], "13040": [114, 206], "13045": [114, 206], "0905267106": [114, 206], "mccarthi": [114, 225], "emma": [114, 225], "clair": [114, 225], "xu": [114, 225], "horton": [114, 225], "eugen": [114, 225], "\u00e2": [114, 225], "mil": [114, 225], "u\u011furbil": [114, 225], "humanconnectom": [114, 225], "storag": [114, 179, 225, 229, 231], "media": [103, 107, 114, 225], "s500": [114, 225], "hcp500_megatrawl_april2015": [114, 225], "fenna": [114, 205, 209], "krienen": [114, 205, 209], "jorg": [114, 205, 209], "sepulcr": [114, 205, 209], "mert": [114, 205, 209], "sabuncu": [114, 205, 209], "danial": [114, 205, 209], "lashkari": [114, 205, 209], "marisa": [114, 205, 209], "hollinshead": [114, 205, 209], "roffman": [114, 205, 209], "jordan": [114, 205, 209], "smoller": [114, 205, 209], "lilla": [114, 205, 209], "z\u00f6llei": [114, 205, 209], "polimeni": [114, 205, 209], "hesheng": [114, 205, 209], "neurophysiologi": [114, 205, 209], "1125": [114, 205, 209], "1165": [114, 205, 209], "21653723": [114, 205, 209], "1152": [114, 205, 209], "jn": [114, 205, 209], "00338": [114, 205, 209], "tzourio": [114, 195], "mazoy": [114, 195], "landeau": [114, 195], "papathanassi": [114, 195], "crivello": [114, 195], "etard": [114, 195], "delcroix": [114, 195], "joliot": [114, 195], "macroscop": [114, 195], "273": [33, 41, 114, 195], "289": [33, 41, 114, 195], "2002": [114, 195], "s1053811901909784": [114, 195], "0978": [114, 195], "flore": [114, 185], "baronnet": [114, 185], "andrea": [114, 185, 256], "kleinschmidt": [114, 185, 256], "fillard": [114, 185], "stroke": [114, 185], "patient": [114, 172, 185], "tianzi": [114, 185], "jiang": [114, 185], "nassir": [114, 185], "navab": [114, 185], "josien": [114, 185], "pluim": [114, 185], "viergev": [114, 185], "assist": [114, 185], "intervent": [114, 185], "miccai": [114, 153, 185], "208": [33, 41, 58, 59, 73, 114, 185], "cn2h9c": [114, 185], "spontan": [114, 203], "562": [12, 27, 33, 114, 203], "573": [33, 114, 203], "1008": [114, 186], "5071": [114, 186], "bio": [114, 186], "sepideh": [114, 256], "sadaghiani": [114, 256], "20153834": [114, 256], "405": [33, 114, 203], "s1053811913003340": [114, 203], "merlin": [114, 256], "keller": [114, 256], "recoveri": [114, 256], "nano": [114, 256], "macro": [114, 256], "1177": [114, 256], "1180": [42, 102, 114, 256], "5490204": [114, 256], "gerard": [114, 342], "ridgwai": [114, 342], "webster": [114, 342], "92": [10, 21, 30, 32, 33, 36, 39, 40, 42, 43, 44, 62, 71, 77, 101, 102, 114, 342], "381": [33, 64, 71, 114, 342], "397": [33, 114, 342], "s1053811914000913": [114, 342], "synthesi": [114, 117, 166, 228, 230], "670": [33, 36, 42, 102, 114, 117, 228, 230], "adelstein": 114, "donald": 114, "klein": 114, "retest": 114, "2163": 114, "2177": [114, 141, 152], "s1053811909011525": 114, "080": [41, 114], "di": 114, "martino": 114, "1432": 114, "1445": 114, "s1053811909010167": 114, "037": [41, 114], "antonio": [114, 223], "frouin": [114, 223], "brainom": [114, 138, 152, 223], "144": [33, 37, 41, 45, 105, 114, 223], "309": [33, 41, 114, 223], "314": [33, 41, 114, 223], "s1053811915008745": [114, 223], "052": [41, 114, 223], "abstract": [115, 325], "knowledg": [115, 154, 169, 332], "beaten": 115, "mask_face_littl": [116, 177, 217], "mask_house_littl": [116, 177, 217], "haxby2001": [3, 16, 18, 25, 29, 30, 32, 34, 35, 36, 38, 94, 102, 116, 177, 217], "subj2": [3, 16, 18, 25, 29, 30, 32, 34, 35, 36, 94, 102, 116], "supplementari": [91, 116, 164], "comfort": [116, 167], "plenti": 116, "hesit": [116, 167], "rarr": [116, 179], "tube": 116, "clever": [116, 166], "resp": 116, "brighter": 116, "scratch": 116, "elementari": 116, "brows": [117, 148, 152], "introduc": [117, 131, 141, 150, 152, 159, 160, 164, 167, 179, 185, 186, 256, 257, 281, 294, 325, 326, 327, 328, 329, 330, 331, 332, 403, 404, 405, 406], "upload": 117, "modal": [117, 159, 167, 236, 319], "metadata": [56, 91, 117, 124, 141, 152, 178, 185, 186, 187, 228, 229, 230, 231, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 321, 325, 326, 327, 328, 329, 330, 331, 332, 403, 404, 405, 406], "went": 117, "webpag": 117, "click": [117, 169, 179, 223, 435], "brainpedia": 117, "1952": [117, 141, 152], "brainpedia_subset": 117, "32015": 117, "32016": 117, "criteria": [117, 167, 172, 193, 228], "collection_term": [117, 228], "collection_metadata": [117, 228], "everi": [117, 153, 154, 158, 159, 160, 164, 166, 167, 169, 179, 187, 201, 202, 228, 327, 330, 377, 382, 385, 390, 391, 392, 394, 409, 410, 416, 436], "image_term": [117, 228], "snippet": 117, "is_valid": [117, 141, 152], "treat": 117, "cbf": 117, "cbv": 117, "express": [117, 123, 126, 152, 172, 177, 228, 254, 255, 279, 281, 284, 309, 390], "ignorecas": 117, "special": [117, 124, 141, 152, 167], "isnul": [117, 228], "notnul": [117, 228], "notequ": [117, 228], "greaterorequ": [117, 228], "greaterthan": [117, 228], "lessorequ": [117, 228], "lessthan": [117, 228], "notin": [117, 228], "notcontain": [117, 228], "resultfilt": [117, 228], "OR": 117, "xor": 117, "NOT": 117, "conveni": [117, 178, 179, 214], "collection_filt": [117, 228], "callabl": [117, 148, 152, 189, 228, 249, 250, 251, 252, 253], "image_filt": [117, 228], "anyth": [117, 166, 167], "lambda": 117, "disabl": [111, 117, 125, 139, 141, 145, 152, 166, 403], "rewritten": 117, "suppos": [117, 166, 175, 177, 179, 273, 274], "weird": 117, "small_meta_imag": 117, "collections_meta": [117, 228, 229, 230, 231], "platform": [117, 134, 152, 175], "unless": [117, 166, 167, 233, 296, 342, 387, 418], "vectorize_word": [117, 228, 230], "kj": 117, "ss": 117, "vv": 117, "te": 117, "ra": [117, 313], "front": [117, 268, 271], "neuroinform": 117, "contributor": [118, 119, 121, 122, 167, 175], "git": [118, 119, 121, 122, 126, 128, 131, 152, 167, 175], "shortlog": [118, 119, 121, 122, 126, 128, 131, 152], "483": [33, 118, 152], "302": [33, 41, 118, 152], "81": [9, 21, 33, 36, 39, 40, 42, 43, 44, 52, 62, 99, 101, 102, 119, 152], "bugfix": [120, 121, 127, 128, 131, 149, 152, 167], "minor": [121, 134, 136, 152, 159], "bug": [33, 121, 124, 125, 131, 132, 133, 137, 150, 174, 175, 393, 395, 396], "rewamp": [121, 152], "brok": [121, 152], "maint": [122, 123, 124, 125, 126, 128, 131, 132, 133, 135, 138, 141, 143, 146, 147, 148, 149, 150, 152, 167], "obei": [122, 152], "debian": [122, 152], "rule": [122, 152, 159, 160, 167, 249, 250, 251, 252], "141": [33, 41, 72, 122, 152, 208], "januari": [123, 142, 148, 152], "2023": [123, 124, 125, 152], "deprec": [48, 50, 111, 123, 124, 125, 128, 132, 133, 134, 135, 136, 138, 139, 141, 143, 144, 146, 148, 150, 152, 167, 175, 184, 185, 197, 198, 206, 234, 249, 250, 251, 252, 256, 257, 284, 325, 326, 327, 328, 329, 330, 331, 332, 342, 378, 404, 406, 409, 410], "bump": [123, 138, 141, 146, 147, 148, 152, 160, 162, 175], "v1": [123, 138, 146, 148, 152], "v3": [123, 152], "joblib": [33, 43, 48, 49, 52, 53, 54, 56, 58, 92, 123, 141, 144, 148, 152, 156, 186, 249, 250, 251, 252, 254, 255, 256, 257, 281, 294, 300, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 404, 405, 406], "3237": [123, 152], "doc": [123, 124, 125, 126, 131, 133, 134, 138, 141, 143, 144, 147, 148, 149, 150, 152, 167, 175], "theme": [123, 150, 152], "furo": [123, 150, 152], "3125": [123, 150, 152], "3196": [123, 150, 152], "3181": [123, 150, 152], "2715": [123, 150, 152], "tick": [62, 123, 152, 167, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 382, 384, 385, 391, 392, 393, 395, 396, 398, 400, 402], "plot_surf": [111, 123, 133, 135, 141, 145, 146, 147, 148, 152, 167, 168, 395, 396, 435], "3105": [123, 152, 167], "invalid": [31, 58, 111, 123, 128, 152, 330, 410], "3374": [123, 152], "valueerror": [123, 152, 309, 313, 326, 327, 329, 330, 422], "3390": [102, 123, 152], "3385": [123, 152], "compute_multi_epi_mask": [123, 152, 178, 328], "3412": [123, 152], "3403": [123, 152], "3430": [102, 123, 152], "test_cluster_level_parameters_smok": [123, 152], "3436": [123, 152], "creation": [123, 141, 152, 256, 257, 281, 294, 416], "3453": [123, 152], "imput": [123, 152], "cubic": [123, 152, 179, 189, 418], "spline": [123, 152, 384, 385, 391, 392, 399, 418], "friendli": [123, 152, 436], "rework": [123, 128, 134, 141, 147, 152], "3380": [102, 123, 152], "deploi": [123, 152], "3426": [123, 152], "3439": [123, 152], "contribut": [123, 135, 138, 139, 140, 141, 142, 143, 147, 148, 150, 152, 160, 169, 175, 436], "changelog": [123, 133], "whatsnew": [123, 152], "3446": [123, 152], "3452": [123, 152], "privat": [123, 125, 150, 152], "rena_clust": [49, 123, 152], "weighted_connectivity_graph": [123, 152], "nearest_neighbor_group": [123, 152], "renam": [123, 134, 138, 152, 175], "recursive_neighbor_agglomer": [49, 123, 152], "3347": [123, 152], "alias": [123, 152], "builtin": [123, 152], "3422": [123, 152], "compute_multi_gray_matter_mask": [123, 152], "compute_multi_brain_mask": [48, 123, 147, 152, 328], "3427": [123, 152], "3424": [123, 152], "3429": [123, 152], "_safe_cach": [123, 152], "deem": [123, 152], "outdat": [123, 132, 152], "anymor": [123, 150, 152], "3375": [123, 152], "3440": [102, 123, 152], "3433": [123, 152], "docstr": [123, 124, 139, 144, 147, 150, 152, 167, 271, 273, 274], "migrat": [123, 152], "nistats_migr": [123, 152], "rst": [123, 152, 167, 175], "3449": [123, 152], "april": [124, 130, 133, 139, 140, 149, 152], "3498": [124, 152], "3444": [124, 152], "predefin": [124, 152], "3259": [124, 152], "3605": [124, 152], "refactor": [124, 125, 132, 146, 148, 150, 152, 175], "create_fake_bids_dataset": [124, 152], "3525": [124, 152], "3362": [124, 152], "3531": [124, 152], "3600": [102, 124, 152], "_standard": [124, 152], "3474": [124, 152], "3563": [124, 152], "confus": [124, 152, 160, 317], "3483": [124, 152], "3173": [124, 152], "sub_label": [124, 152, 284, 319], "3351": [124, 152], "ridgeclassifiercv": [124, 152, 249, 250, 251, 252], "3626": [124, 152], "3631": [124, 152], "3414": [124, 152], "fetch_atlas_craddock_2012": [124, 125, 152, 154], "cycl": [111, 124, 125, 152, 184], "3353": [124, 152], "3548": [124, 125, 152], "pep8": [124, 125, 152, 167, 175], "3549": [124, 152], "3550": [102, 124, 152], "3551": [124, 152], "3552": [124, 152], "3553": [124, 152], "3554": [124, 152], "3555": [124, 152], "helper": [124, 126, 133, 134, 152, 167, 181, 228], "img_to_signals_label": [124, 138, 141, 152, 410, 412], "signals_to_img_label": [124, 152, 409, 413], "img_to_signals_map": [124, 152, 409, 413], "signals_to_img_map": [124, 152, 410, 412], "3523": [124, 152], "move": [124, 125, 126, 133, 146, 152], "setuptool": [124, 152], "backend": [124, 128, 138, 143, 148, 152, 257, 397], "pyproject": [124, 152, 167, 175, 436], "toml": [124, 152, 167, 175, 436], "hatchl": [124, 152, 175], "met": [124, 152], "3635": [124, 152], "3557": [124, 152], "bibtex": [124, 150, 152], "3558": [124, 152], "restor": [124, 152], "spatialimag": [124, 152, 177, 302], "3462": [124, 152], "3465": [124, 152], "3445": [124, 152], "3478": [124, 152], "3477": [124, 152], "3485": [124, 152], "3491": [124, 152], "3484": [124, 152], "sym_to_vec": [126, 131, 134, 146, 152], "modernis": [126, 152], "style": [126, 148, 152, 248], "784": [126, 152], "copy_img": [126, 152], "indexerror": [126, 148, 152], "fast_abs_percentil": [126, 152], "875": [126, 152], "group_sparse_covari": [126, 152, 166, 187], "n_cut": [126, 152, 373], "find_cut_slic": [126, 133, 152], "822": [126, 152], "142": [33, 41, 126, 152], "65": [6, 23, 33, 36, 39, 40, 42, 43, 44, 48, 62, 91, 99, 101, 102, 105, 126, 152], "targett": [127, 152], "renew": [128, 152], "flake8": [128, 150, 152, 167], "pull": [128, 150, 152, 172, 174], "symmetric_split": [128, 152, 201, 202], "cast": [11, 84, 128, 141, 152, 179, 195, 312], "mac": [128, 152], "numpy_convers": [128, 152], "csv_to_arrai": [128, 152], "refresh": [128, 152], "sparsifi": [128, 152], "circleci": [128, 133, 152], "brainhack": [129, 134, 152], "cobr": [125, 129, 133, 152], "fetch_cobr": [129, 133, 144, 148, 152], "basc": [129, 152, 197], "expand": [130, 152, 172, 177, 309, 403, 405], "homedir": [130, 152], "uniformli": [130, 152, 160, 387, 393, 395, 396, 400, 402], "aal": [130, 152, 195], "fetch_atlas_a": [130, 149, 152], "august": [131, 138, 150, 152], "element": [20, 48, 49, 50, 54, 131, 150, 152, 158, 164, 172, 185, 191, 192, 195, 249, 250, 251, 252, 253, 263, 264, 299, 316, 325, 326, 327, 328, 329, 330, 331, 332, 338, 387, 406, 412, 418, 422], "wrong": [131, 149, 152, 169], "ivan": [131, 138, 152], "gonzalez": [131, 138, 152], "resolv": [132, 142, 152], "1238": [132, 152], "get_affin": [132, 152, 177, 301], "checkout": [133, 152, 167, 175], "latest": [133, 152, 167, 175, 323], "_get_mask_volum": [133, 152], "_adjust_screening_percentil": [111, 133, 152], "param_valid": [31, 32, 39, 111, 133, 152], "uncompress": [62, 133, 137, 152], "tar": [38, 67, 133, 152, 175], "set_axis_bgcolor": [133, 152], "fast_svd": [133, 152], "switch": [133, 140, 152, 167, 175, 384], "lapack": [133, 152, 166], "svd": [133, 152, 257, 305, 404, 419], "heurist": [133, 152, 165, 166, 187, 336, 377, 390, 391, 392, 399, 435], "pip": [133, 138, 141, 152, 167, 175, 436], "_safe_get_data": [133, 152], "safe": [133, 152], "ensure_finit": [133, 152, 299, 333, 336, 418], "cov_to_corr": [133, 152], "prec_to_parti": [133, 152], "qualit": [133, 152], "fetch_surf_fsaverage5": [133, 138, 152], "surf_plot": [125, 133, 152], "schizophrenia": [133, 152, 172], "coveral": [133, 152], "codecov": [133, 152], "sym_matrix_to_vec": [134, 152, 192], "largest_connected_compon": [134, 152], "workaround": [134, 152], "endian": [56, 91, 134, 152, 308, 314], "vec_to_sym_matrix": [134, 152], "plot_connectivity_measur": [134, 152], "tighter": [134, 152, 166], "largest_connected_component_img": [134, 152], "largest": [134, 152, 166, 308, 334, 335, 336, 337, 338, 339, 340, 376], "joe": [135, 152], "necu": [135, 152], "fetch_atlas_talairach": [135, 152], "resampling_interpol": [135, 152, 384, 385, 391, 392, 399], "backward": [111, 135, 148, 152, 167, 201, 202], "incompat": [135, 152, 281], "cautious": [135, 152], "anat_img": [135, 152, 377], "127": [33, 41, 135, 152], "jeff": [135, 152], "chiang": [135, 152], "analu": [135, 138, 152], "madhyastha": [135, 138, 152], "meghana": [135, 138, 152], "sfvnmac": [135, 138, 152], "bedetti": [135, 138, 152], "griffith": [135, 152], "lannuzel": [135, 138, 152], "1536": [136, 152], "1370": [42, 102, 136, 152], "usabl": [136, 152, 164, 166, 227, 253], "node_color": [136, 146, 152, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379, 398], "1595": [136, 152], "nifti2imag": [136, 152], "confer": [137, 152], "cold_hot": [111, 137, 152, 387, 392, 396, 399, 400, 402], "lock": [137, 152], "whitespac": [137, 152], "had": [125, 137, 152], "attributeerror": [137, 152], "httperror": [137, 152], "view_mark": [138, 139, 141, 146, 152, 398, 399, 435], "orthogon": [138, 152, 172, 281, 283, 288, 294, 299, 344, 353, 354, 355, 358, 372, 377, 379, 382, 384, 385, 388, 390, 391, 392, 416, 418], "view_stat_map": [138, 152], "python2": [138, 139, 140, 141, 152], "environ": [36, 49, 52, 53, 58, 62, 75, 77, 138, 139, 141, 148, 152, 159, 174, 177, 239, 399, 436], "layout": [138, 152, 253, 344], "navig": [138, 152], "anaconda": [138, 152, 436], "formerli": [91, 138, 152], "feel": [138, 152, 167], "shout": [138, 152], "pbellec": [138, 152], "great": [138, 152], "awesom": [138, 152], "sportingli": [138, 152], "accommod": [138, 152], "feedback": [111, 138, 152, 167, 175], "miykael": [138, 152], "brainsprit": [138, 139, 152, 435], "114": [30, 33, 41, 43, 44, 138, 152], "himanshupathak21061998": [138, 139, 152], "octob": [138, 141, 152], "uniti": [138, 152], "channel": [138, 152], "life": [138, 152], "js_plotting_util": [9, 138, 152], "58": [6, 21, 23, 33, 36, 39, 40, 41, 42, 43, 48, 62, 91, 101, 102, 138, 152], "115": [33, 41, 43, 138, 152], "akshai": [138, 152], "erramuzp": [138, 152], "foucault": [138, 152], "jehan": [138, 152], "nikolaidi": [138, 152], "dillon": [138, 152], "plunkett": [138, 152], "operto": [138, 152], "dtyulman": [138, 152], "0a0": 138, "1705": [138, 152], "grid_search": [138, 152, 249, 250, 251, 252], "menuet": [138, 152], "romuald": [138, 152], "python3": [3, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 67, 71, 72, 77, 78, 79, 84, 86, 91, 92, 95, 98, 100, 101, 102, 104, 105, 106, 108, 111, 139, 141, 152, 167, 436], "consum": [139, 152, 162, 166, 175, 177], "noteworthi": [139, 152, 160], "fetch_atlas_schaefer_2018": [139, 141, 152], "fetch_coords_seitzman_2018": [139, 152], "node_coord": [139, 141, 152, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379, 388, 398], "edge_cmap": [139, 141, 152, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379, 398], "load_niimg": [139, 152], "silent": [139, 148, 152], "render": [36, 49, 52, 53, 58, 62, 75, 77, 125, 139, 152, 167, 356, 384, 386, 393, 395, 396, 398, 400, 401, 402], "book": [139, 152], "signatur": [139, 152, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422], "mgz": [139, 140, 152, 393, 394, 395, 396, 402, 420], "mne": [139, 140, 152], "lowest": [140, 152], "broke": [140, 152], "2214": [33, 141, 152], "v2": [141, 146, 152], "viewabl": [141, 152], "vscode": [141, 152], "biap8": [141, 152], "input_output": [141, 152], "2172": [141, 152], "giant": [141, 152], "1336": [141, 152], "plot_connectome_strength": [141, 144, 148, 152], "2028": [141, 152], "pad": [141, 152, 178, 179, 303, 314, 315, 336, 339, 343, 345, 346, 417], "2025": [141, 152], "1953": [141, 152], "ticklabel": [141, 152], "psc": [141, 145, 152, 326, 327, 328, 329, 330, 331, 332, 418], "median": [111, 141, 152, 326, 329, 393, 395, 409], "standard_devi": [141, 152, 326, 329, 409], "2221": [141, 152], "2057": [141, 152], "2157": [141, 152], "truncat": [141, 152], "2195": [141, 152], "det": [141, 152, 204], "2235": [141, 152], "old": [125, 141, 147, 148, 152], "2255": [141, 152], "2240": [102, 141, 152], "ndarrai": [141, 152, 185, 186, 187, 188, 189, 190, 191, 192, 205, 207, 211, 213, 214, 225, 226, 249, 250, 251, 252, 254, 255, 256, 257, 263, 264, 268, 271, 272, 273, 274, 277, 281, 294, 296, 299, 301, 304, 305, 311, 312, 314, 316, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 339, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 374, 375, 380, 386, 389, 393, 394, 395, 396, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 417, 418, 419, 420, 421, 422], "2107": [141, 152], "attempt": [141, 152, 284], "2212": [141, 152], "nose": [141, 152], "2231": [141, 152], "2248": [141, 152], "2169": [141, 152], "2090": [102, 141, 152], "05_advanc": [141, 152], "03_connect": [141, 152], "2063": [141, 152], "merg": [141, 152, 156, 167, 172, 175, 178, 405], "plot_adhd_spher": [141, 152], "duplic": [141, 152], "review": [141, 152, 164, 175], "plot_canica_analysi": [141, 152], "plot_haxby_decod": [141, 152], "2166": [141, 152], "unsuit": [141, 152], "redund": [141, 152, 167], "crash": [141, 152], "1888": [141, 152], "2083": [141, 152], "2052": [141, 152], "2118": [141, 152], "700": [33, 36, 42, 55, 66, 67, 73, 102, 141, 152, 205], "900": [42, 102, 141, 152, 205], "2138": [141, 152], "faulti": [141, 152], "2272": [142, 152], "developmental_fmri": [142, 152], "2290": [102, 142, 152], "launch": [143, 152, 159], "2300": [102, 143, 152], "2429": [143, 152], "2302": [143, 152], "typo": [143, 152], "2312": [143, 152], "fetch_nyu_rest": [143, 146, 152], "2308": [143, 152], "2299": [144, 152], "2304": [144, 152], "2307": [144, 152], "2509": [144, 152], "2327": [144, 152], "art": [144, 152, 160, 249, 250, 251, 252], "nodal": [144, 152, 388, 435], "decim": [144, 152, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 385], "interchang": [144, 152], "compute_brain_mask": [144, 147, 152, 178, 249, 250, 251, 252, 256, 257, 331, 338, 404], "compute_gray_matter_mask": [144, 148, 152], "regard": [144, 152, 165, 219, 243, 323], "erron": [144, 152, 205], "transpos": [48, 144, 152, 166], "readm": [62, 144, 152], "2021": [145, 146, 147, 152, 194, 195, 198, 203, 204, 205, 208, 209, 232, 235, 236, 238], "serv": [145, 152, 167, 175, 200, 214], "1024": [145, 152, 200], "2619": [145, 152], "2622": [145, 152], "2684": [145, 152], "2702": [145, 152], "one_minus_pvalu": [145, 152, 269], "stabil": [145, 152, 158, 251, 252, 269], "cumul": [145, 152, 269], "2567": [145, 152], "2674": [145, 152], "2553": [145, 152], "arm": [145, 152], "2606": [145, 152], "whatev": [145, 152], "2669": [145, 152], "notat": [145, 148, 152, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 382, 384, 385, 391, 392, 393, 395, 396], "2697": [145, 152], "2712": [145, 152], "handi": [145, 152, 168], "2696": [145, 152], "2714": [145, 152], "2719": [145, 152], "2707": [146, 152], "2858": [146, 152], "inher": [146, 152], "basemask": [146, 152], "fsaverage3": [146, 152, 237, 400], "fsaverage4": [146, 152, 237, 400], "fsaverage6": [146, 152, 237, 400], "2815": [146, 152], "curv": [146, 152, 159, 160, 162, 166, 172, 393, 396, 402, 420], "2532": [146, 152], "struct": [146, 152], "footcit": [146, 148, 150, 152], "footbibliographi": [146, 148, 150, 152], "2806": [146, 152], "2730": [102, 146, 152], "2732": [146, 152], "_get_voxelwise_model_attribut": [146, 152], "2792": [146, 152], "ascend": [146, 152, 309], "1155": [146, 152], "2831": [146, 152], "zoom": [146, 152], "surround": [146, 152, 422], "2798": [146, 152], "inconsist": [146, 152, 294, 296], "2767": [146, 152], "2826": [146, 152], "marker_label": [146, 152, 401], "2745": [146, 152], "avg_method": [111, 125, 146, 152, 393, 395], "2790": [102, 146, 152], "auto_exampl": [146, 152, 167, 400], "01_plot": [11, 146, 152, 400], "2805": [146, 152], "viridi": [146, 152], "2810": [102, 146, 152], "flow": [146, 152, 169, 172], "2821": [146, 148, 152], "butterwoth": [146, 152], "stratifi": [146, 152, 159, 249, 251, 253], "2869": [146, 152], "2867": [146, 152], "2868": [146, 152], "juelich": [147, 152, 202], "2723": [147, 152], "load_mni152_gm_templ": [147, 152, 218, 241, 243, 244, 245], "load_mni152_wm_templ": [147, 152, 218, 242, 243, 244], "load_mni152_gm_mask": [147, 152, 218], "load_mni152_wm_mask": [147, 152, 218], "2738": [147, 152], "2755": [147, 152], "binarize_img": [147, 152], "2900": [102, 147, 152], "skullstrip": [147, 152, 172, 243], "2904": [147, 152], "compute_multi_grey_matter_mask": [147, 152], "2876": [147, 152], "2941": [147, 152], "preset": [147, 148, 152, 323, 435], "nevertheless": [147, 152], "109": [2, 33, 41, 43, 56, 91, 102, 147, 152, 195, 206], "117": [33, 41, 43, 93, 147, 152, 195], "134": [33, 41, 93, 105, 147, 152], "8339": [147, 152], "255": [33, 41, 147, 152], "decor": [125, 147, 152, 167], "fill_doc": [147, 152], "2875": [147, 152], "affect": [147, 152, 169, 172], "2928": [147, 152], "jqueri": [147, 152], "vulner": [147, 152], "2944": [147, 152], "2022": [148, 149, 150, 152], "plotli": [125, 148, 152, 356, 393, 395, 396, 435, 436], "2902": [148, 152], "3061": [148, 152], "2946": [148, 152], "3016": [148, 152], "hierarchicalkmean": [49, 148, 152], "kmean": [148, 150, 152, 156, 173, 178, 281, 290, 403, 404], "2282": [148, 152], "3065": [148, 152], "2880": [102, 148, 152], "mainten": [148, 152], "3010": [102, 148, 152], "encourag": [148, 152, 167], "3026": [148, 152], "submodul": [148, 150, 152, 167], "3126": [148, 152], "get_bids_fil": [148, 152], "parse_bids_filenam": [148, 152], "subpart": [148, 152], "3036": [148, 152], "3009": [148, 152], "3013": [148, 152], "threw": [148, 152], "typeerror": [148, 152, 309], "3035": [148, 152], "3078": [148, 152], "region_extractor": [86, 148, 152], "3111": [148, 152], "hommel": [148, 152], "3109": [148, 152], "benjamini": [148, 152, 169, 280], "hocheberg": [148, 152], "3137": [148, 152], "3135": [148, 152], "retain": [148, 152, 159, 160, 169, 185, 186, 187, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 322, 325, 326, 327, 328, 329, 330, 331, 332, 403, 404, 405, 406, 409, 410], "2965": [148, 152], "demean": [148, 152, 322, 323], "3003": [148, 152], "triag": [148, 152], "clearli": [125, 148, 152, 167], "polici": [148, 152], "spm_hrf": [148, 152, 281, 283, 288], "2942": [148, 152], "3008": [148, 152], "test_img_plot": [148, 152], "reorgan": [148, 152, 167], "3015": [148, 152], "3033": [148, 152], "3077": [148, 152], "2859": [148, 152], "3106": [148, 152], "3081": [148, 152], "3082": [148, 152], "3090": [102, 148, 152], "3093": [148, 152], "3133": [148, 152], "cond_id": [148, 152], "ex": [148, 152, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 382, 384, 385, 391, 392, 393, 395, 396], "3025": [148, 152], "3039": [148, 152], "slicer": [148, 152, 344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 435], "_slicer": [2, 3, 4, 6, 9, 10, 15, 16, 17, 25, 39, 48, 49, 50, 64, 67, 70, 75, 81, 86, 88, 89, 92, 94, 98, 148, 152], "projector": [148, 152, 371], "3073": [148, 152], "byte": [6, 9, 10, 11, 17, 21, 23, 26, 38, 39, 40, 43, 47, 48, 52, 62, 65, 67, 71, 80, 99, 101, 148, 152, 167, 308, 314], "therefor": [148, 152, 158, 164, 166, 195, 197], "2655": [148, 152], "recarrai": [148, 152, 193, 199, 200, 211, 212, 213, 221, 222, 223, 232], "2829": [148, 152], "h0_fmax": [149, 152, 342], "3184": [149, 152], "fetch_abide_pcp": [149, 152], "func_preproc": [149, 152, 193], "3174": [149, 152], "3179": [149, 152], "_apply_cluster_size_threshold": [149, 152], "cluster_s": [149, 152], "3201": [149, 152], "beyond": [149, 152], "newest": [149, 152, 228], "3188": [149, 152], "3098": [149, 152], "3127": [149, 152], "3165": [149, 152], "determinist": [149, 152, 172, 195, 197, 199, 201, 202, 204, 205, 207, 208, 209, 403], "glossari": [149, 152], "3152": [149, 152], "3207": [149, 152], "3178": [149, 152], "cfg": [149, 152], "2953": [149, 152], "_neurovault_base_url": [150, 152], "_neurosynth_fetch_words_url": [150, 152], "3281": [150, 152], "permuted_least_squar": [79, 150, 152], "3222": [150, 152], "3233": [150, 152], "3241": [150, 152], "3255": [150, 152], "3220": [102, 150, 152], "c_ra": [150, 152], "3235": [150, 152], "_check_second_level_input": [150, 152], "flm_object": [150, 152], "3283": [150, 152], "sform": [3, 29, 30, 32, 33, 34, 35, 36, 98, 150, 152], "3284": [150, 152], "_gamma_difference_hrf": [150, 152], "hemodynamic_model": [150, 152], "slight": [150, 152], "distort": [150, 152, 322], "3297": [150, 152], "0rc1": [150, 152], "wn": [150, 152], "unfilt": [150, 152], "3293": [150, 152], "3306": [150, 152], "3312": [150, 152], "typograph": [150, 152], "3337": [150, 152], "censor": [150, 152, 418], "3193": [150, 152], "3185": [150, 152], "conform": [150, 152, 169], "3262": [150, 152], "3030": [102, 150, 152], "fall": [150, 152, 167, 387, 422], "3292": [150, 152], "n_elements_": [150, 152, 326, 327, 328, 329, 330, 331, 332], "3311": [150, 152], "filesystem": [150, 152], "3300": [102, 150, 152], "branch": [150, 152, 167, 175], "diff": [150, 152], "3317": [150, 152], "3333": [150, 152], "3322": [150, 152], "carpet_plot": [150, 152], "deleg": [150, 152], "cmap_label": [150, 152, 378], "3209": [150, 152], "fsaverage5_spher": [150, 152], "3229": [150, 152], "regressionresult": [150, 152, 268, 272, 277, 281, 290], "simpleregressionresult": [150, 152, 281], "olsmodel": [150, 152, 271, 273, 274], "likelihoodmodelresult": [150, 152, 273, 274], "shorten": [125, 150, 152], "df_resid": [150, 152], "wdesign": [150, 152], "wresid": [150, 152], "norm_resid": [150, 152], "wy": [150, 152], "fetch_openneuro_dataset_index": [150, 152], "favor": [150, 152], "3216": [150, 152], "afni": [150, 152], "nipi": [67, 150, 152, 167, 173], "1046": [150, 152], "pr": [150, 152, 175], "1082": [150, 152], "int64": [10, 11, 36, 49, 79, 86, 94, 101, 150, 152, 177, 403, 405], "overflow": [150, 152], "3227": [150, 152], "pars": [150, 152, 320], "3274": [150, 152], "charact": [150, 152, 290], "3141": [150, 152], "3302": [150, 152], "int8": [150, 152, 312], "3286": [150, 152], "3172": [125, 152], "transform_img": [125, 152, 326, 327, 328], "3971": [125, 152], "_plot_surf_matplotlib": [125, 152], "3860": [102, 125, 152], "prevent": [125, 152, 314, 315, 334, 335, 336, 338, 339], "3942": [125, 152], "gifti": [125, 152, 237, 238, 258, 259, 260], "3819": [125, 152], "3879": [125, 152], "entiti": [125, 152], "3742": [125, 152], "throw": [125, 152, 332], "3811": [125, 152], "fitter": [125, 152], "grid_param": [125, 152], "3733": [125, 152], "3794": [125, 152], "3797": [125, 152], "2804": [125, 152], "relax": [125, 152], "3816": [125, 152], "3723": [125, 152], "3897": [125, 152], "3945": [125, 152], "3973": [125, 152], "3857": [125, 152], "logisticregressioncv": [125, 152, 249, 250, 251, 252], "3736": [125, 152], "3597": [125, 152], "3774": [125, 152], "lassocv": [125, 152, 249, 250, 251, 252], "gh": [125, 152, 167], "3781": [125, 152], "symmetric_cbar": [125, 152, 384, 387, 392, 396], "3873": [125, 152], "experimental_paradigm": [72, 125, 152], "check_ev": [125, 152], "3943": [125, 152], "3743": [125, 152], "isort": [125, 152, 167], "complianc": [125, 152, 167], "codebas": [125, 152, 167], "3538": [125, 152], "3566": [125, 152], "3556": [125, 152], "3601": [125, 152], "3609": [125, 152], "3646": [125, 152], "3650": [102, 125, 152], "3647": [125, 152], "3640": [102, 125, 152], "3615": [125, 152], "3614": [125, 152], "3648": [125, 152], "3651": [125, 152], "finish": [125, 152, 166, 167, 298, 318, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379, 390, 398, 400, 402], "3836": [125, 152], "3833": [125, 152], "3827": [125, 152], "3810": [102, 125, 152], "3803": [125, 152], "3802": [125, 152], "3795": [125, 152], "3790": [102, 125, 152], "3783": [125, 152], "3777": [125, 152], "meanwhil": [125, 152], "keep_masked_label": [49, 56, 91, 125, 152, 329, 409], "3722": [125, 152], "keep_masked_map": [52, 53, 54, 125, 152, 330, 410], "3732": [125, 152], "licens": [125, 152, 198], "3838": [125, 152], "3753": [125, 152], "one_mesh_info": [125, 152], "full_brain_info": [125, 152], "_one_mesh_info": [125, 152], "_full_brain_info": [125, 152], "3847": [125, 152], "manag": [125, 152, 167, 175, 436], "3854": [125, 152], "BY": [125, 152], "_compute_facecolors_matplotlib": [125, 152], "html_surfac": [125, 152], "_get_vertexcolor": [125, 152], "3855": [125, 152], "doctest": [125, 152], "3681": [125, 152], "_mix_colormap": [125, 152], "3919": [125, 152], "3921": [125, 152], "3927": [125, 152], "3934": [125, 152], "focuss": 153, "naturalist": [153, 154, 156, 157], "indirect": [153, 154], "friedman": 153, "time_series_1": 153, "time_series_2": 153, "challeng": 153, "toll": 153, "stronger": 153, "nip": 153, "geometr": [153, 185], "group_connect": 153, "heterogen": 153, "easiest": [154, 159, 160], "frmi_fil": 154, "confounds_datafram": 154, "imperfect": 154, "boundari": [154, 164, 178, 390, 391, 393, 395], "registr": [154, 169, 315, 435], "csv_file": 154, "consider": [154, 160, 296, 342], "readili": [154, 159, 162, 174, 177, 178, 406], "zaleski": 154, "rise": 156, "debat": 156, "cite": [156, 203, 214, 223], "ward": [91, 156, 172, 173, 329, 404], "quicker": [156, 167], "loss": [156, 161, 254, 323], "downsiz": 156, "hierarch": [156, 172, 173, 403], "neighborhood": 156, "tree": [156, 205], "admittedli": 156, "isotrop": 157, "publicli": 157, "osf": [9, 17, 21, 47, 48, 52, 62, 65, 76, 77, 80, 81, 99, 101, 157, 200, 204, 214, 223], "5hju4": [157, 214], "walker": [157, 406, 408], "likewis": 157, "sphinx_gallery_dummy_imag": [157, 178], "newer": [158, 228, 230], "arriv": 158, "consensu": [158, 167], "explor": [158, 162, 166, 168, 173, 174, 187, 215, 228, 234, 249, 250, 251, 252], "resembl": 158, "coactiv": 158, "neuro": [158, 172, 249, 317], "offer": [158, 168, 170, 435], "articul": 159, "diagnost": [159, 163], "statu": [159, 172, 232], "vbm": [159, 172, 174], "fa": 159, "unusu": 159, "rich": 159, "strongli": [159, 167, 172], "termin": [39, 159, 167, 436], "recfromcsv": 159, "seemingli": 159, "misleadingli": 159, "chose": 159, "Be": [159, 160, 167, 187, 268, 417], "got": [159, 167], "thumb": [159, 167], "advic": 159, "worst": 159, "caveat": 159, "entir": [159, 164, 179, 329, 409], "summar": [54, 91, 159, 167, 273, 329, 330, 332, 415], "imbalanc": 159, "domin": [159, 238], "roc": [159, 172], "guess": [159, 166, 334, 399], "wrap": [43, 48, 49, 52, 56, 92, 159, 414], "notion": [159, 164, 320, 388], "00_tutori": 159, "tackl": [160, 175], "extern": [160, 163, 232], "trait": 160, "userguid": 160, "categor": [160, 175], "harder": 160, "vote": 160, "costli": [160, 164, 296, 342], "former": [160, 166, 228], "penal": [160, 166, 187, 254, 255], "variant": [160, 183], "counterpart": 160, "ridge_regressor": [160, 250, 252], "lasso_regressor": [160, 250, 252], "dummy_regressor": [160, 250, 252], "lunch": 160, "insensit": 160, "cheap": 160, "ill": 160, "importantli": [160, 162, 167], "ugli": 160, "nuisanc": [160, 172, 194, 268, 271, 272, 273, 323, 418], "hyper": [160, 161], "computationnali": 160, "bia": [160, 249, 250, 251, 252, 254, 255], "cancel": 160, "hood": [160, 165], "promot": [160, 161, 175], "memor": [161, 169], "versatil": [162, 173, 436], "mimic": [162, 201, 202], "unfortun": [162, 166], "prognosi": [163, 174], "reduct": [163, 257, 404, 437], "bag": [163, 254, 255, 437], "briefli": 164, "critic": [164, 166], "lorocv": 164, "properli": [164, 179, 379, 384], "isovoxel": 164, "volunt": 164, "theoret": 164, "hypothesi": [164, 169, 253, 269, 296, 342], "swap": [164, 178, 232, 317], "descriptor": [164, 282, 342], "herebi": 164, "rank": [164, 271, 272, 273, 274, 318, 342], "phenomenon": 164, "statistician": 164, "crucial": 164, "fusiform": [91, 164], "happen": [43, 48, 92, 164, 179, 422], "symmetri": [164, 166], "adopt": [164, 172], "spacenetclassifi": [165, 249, 250, 255], "tvl1": 165, "blobbi": 165, "superior": [91, 103, 165, 313], "mainli": 166, "likelihood": [53, 166, 169, 185, 268, 271, 272, 273, 274], "devis": 166, "descent": [166, 257], "innermost": 166, "hoc": 166, "histori": 166, "prove": [166, 179], "amplifi": 166, "mandatori": [166, 299], "_update_submatrix": 166, "perfect": 166, "newton": 166, "raphson": 166, "toler": [48, 53, 92, 104, 166, 186, 187, 189, 254, 255, 303], "debug": [166, 167, 174, 187, 189], "kern": 166, "bottleneck": 166, "overhead": 166, "neglig": [166, 303], "evenli": [166, 299, 418], "highli": [166, 167], "serial": 166, "reach": [53, 166, 167, 169, 174, 228, 322], "boil": 166, "written": [166, 414], "inlin": [166, 414], "naiv": 166, "clock": 166, "nr": 166, "loos": 166, "converg": [34, 48, 92, 104, 166, 186, 189, 254, 255, 403], "fortran": [166, 314, 315, 342], "couldn": 166, "weren": 166, "ubuntu": 166, "synthes": 166, "wasn": 166, "hopefulli": 166, "topologi": 166, "govern": 166, "hardest": 166, "unrealist": 166, "perfectli": 166, "spectrum": 166, "decorrel": 166, "whatsoev": 166, "mostli": [166, 318], "weakli": 166, "optimum": 166, "wast": 166, "convex": 166, "group_sparse_covariance_cost": 166, "feasibl": 166, "semi": 166, "primal": 166, "satisfi": [166, 175], "quantiti": [166, 269], "lost": 166, "rapidli": 166, "prohibit": 166, "slowli": 166, "tricki": 166, "paragraph": 166, "fewer": [166, 378], "dwindl": 166, "speedup": 166, "complic": [166, 177, 271, 273, 274], "program": [166, 435], "earlystopprob": 166, "unpen": 166, "fastest": 166, "fulli": [166, 169, 436], "compute_alpha_max": 166, "straightforward": [166, 269], "sequenti": [166, 177, 390], "trajectori": 166, "smallest": 166, "fact": [166, 169, 172], "energi": 166, "brute": 166, "slowest": 166, "hardwar": 166, "commod": 166, "moder": 166, "sought": [166, 172], "push": [166, 167, 175], "stress": 166, "rare": 166, "spent": 166, "early_stop": [166, 187], "team": [20, 167, 174, 175, 203, 436], "neurostar": [167, 174, 175], "forum": 167, "weekli": [167, 174], "hour": [167, 174, 175, 296, 342], "wednesdai": [167, 436], "4pm": [167, 436], "5pm": [167, 436], "utc": [167, 436], "troubleshoot": 167, "appreci": [167, 177], "topic": [167, 175], "burn": 167, "board": 167, "welcom": [167, 175, 436], "think": [167, 169, 179], "runnabl": 167, "ongo": 167, "comment": [167, 179], "opinion": 167, "approv": 167, "burden": 167, "member": [167, 175, 436], "expert": [167, 174], "eas": 167, "prototyp": [111, 167], "beginn": [167, 174], "parsimoni": 167, "concern": [167, 172], "sustain": 167, "weigh": 167, "thoroughli": [111, 167], "discourag": 167, "exhaust": [167, 174], "modif": [167, 169, 172], "ultim": [167, 272], "emerg": 167, "host": 167, "effort": [167, 175], "everyon": 167, "send": [167, 403, 405], "infrastructur": [167, 175], "gigabyt": 167, "deploy": 167, "xxxx": 167, "unrel": [167, 179], "numpydoc": 167, "versionad": [167, 175, 284], "versionchang": [167, 175, 312], "dev": [167, 175, 217], "coverag": [167, 436], "mock": 167, "atom": [167, 172], "convei": [167, 342], "smoothen": 167, "wip": 167, "draft": 167, "mrg": 167, "enh": 167, "adher": 167, "cff": 167, "dimitripapadopoulo": 167, "affili": 167, "orcid": 167, "0000": 167, "0002": 167, "1242": 167, "8990": [102, 167], "underscor": 167, "a_nice_funct": 167, "parent": 167, "init": [167, 403], "camelcas": 167, "statement": 167, "obj": [167, 198, 206, 404], "enclos": 167, "__all__": 167, "__init__": [111, 167, 185, 186, 187, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 281, 294, 325, 326, 327, 328, 329, 330, 331, 332, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 403, 404, 405, 406, 414], "_valid": 167, "check_mask_img": 167, "validationerror": 167, "symbol": [167, 168, 309], "_check_mask_shap": 167, "_check_mask_valu": 167, "_validate_shap": 167, "doubl": [167, 168, 201, 202], "alon": [167, 169, 435], "linter": 167, "autoformatt": 167, "hook": 167, "pytest": [167, 436], "test_imag": 167, "didn": 167, "test_modul": 167, "recogniz": 167, "conftest": 167, "fixur": 167, "default_rng": 167, "test_someth": 167, "my_numb": 167, "he": 167, "plain": 167, "repo": [167, 175, 436], "fork": 167, "clone": 167, "your_usernam": 167, "virtual": [167, 436], "wor": 167, "whichev": 167, "venv": [167, 436], "conda": [167, 436], "__version__": 167, "command": [167, 174, 175, 436], "upstream": [167, 175], "remot": [167, 228, 230], "your_branch": 167, "lint": 167, "path_to_edited_fil": 167, "test_surf_plot": 167, "your_fork": 167, "restructuredtext": 167, "strict": 167, "window": [167, 281, 294, 416, 436], "_build": 167, "doctre": 167, "noplot": 167, "ci": [167, 175, 271, 273, 274], "filename_pattern": 167, "sphinx_gallery_conf": 167, "thorough": 167, "comprehens": [167, 174, 223, 247], "servic": 167, "temporarili": 167, "unavail": [167, 217], "frustrat": 167, "successfulli": 167, "_get_dataset_dir": 167, "_fetch_fil": 167, "server": [103, 167, 228, 230], "fake": 167, "request_mock": 167, "_test": 167, "sender": 167, "essenc": 168, "timecours": [168, 322], "convolv": [168, 283], "plug": [168, 179, 268, 272], "ascertain": 168, "spm_multimodal_fmri": [71, 168, 236], "referenc": 168, "fistlevelmodel": 168, "flag": [168, 322, 323], "observed_timeseri": 168, "oxyhaemoglobin": [169, 172], "carri": [169, 172], "deoxyhaemoglobin": [169, 172], "deliv": [169, 172], "diamagnet": [169, 172], "paramagnet": [169, 172], "success": [167, 169, 179], "mr": 169, "irrespect": [169, 390], "microarchitectur": 169, "regist": [169, 197], "montreal": [169, 172, 195], "nipyp": 169, "action": [169, 223], "sensori": 169, "stimui": 169, "hypothes": [169, 172], "oxi": 169, "deoxi": 169, "haemoglobin": 169, "sluggish": 169, "plai": [169, 179], "remark": 169, "respond": 169, "colour": 169, "enter": 169, "conceptu": 169, "physic": [169, 343, 345, 346], "decid": 169, "dof": [62, 169, 269, 278], "_scan": 169, "_column": 169, "quantil": 169, "reject": [169, 172], "frequent": 169, "misconcept": 169, "frequentist": 169, "wikipedia": 169, "wiki": 169, "frequentist_infer": 169, "cumbersom": 169, "absenc": [169, 175, 409], "_voxel": 169, "danger": [167, 169], "trust": [36, 49, 52, 53, 58, 62, 75, 77, 169], "frac": [169, 255, 268, 272], "truli": 169, "surpass": 169, "proportion": 169, "compromis": [169, 323], "hochberg": [169, 280], "supra": 169, "rational": 169, "primer": [170, 437], "broader": 171, "morphologi": 172, "treatment": [172, 174], "contrari": [172, 320, 326, 327], "fundament": 172, "eeg": 172, "electroencephalographi": 172, "monitor": 172, "electr": 172, "echo": [172, 284], "planar": 172, "incorrect": 172, "unwarp": 172, "submit": [172, 175], "diamet": 172, "tradition": 172, "subcompon": 172, "meg": 172, "magnetoencephalographi": 172, "mni305": 172, "mutli": 172, "pe": 172, "signifi": [172, 249, 250, 251, 252], "soft": 172, "tpr": 172, "unlabel": 172, "emot": 172, "reaction": 172, "iq": [172, 249, 250, 251, 252], "diagnosi": [172, 174], "healthi": [172, 197], "outlier": [172, 232, 322, 323, 325, 328, 331], "magnitud": [172, 381], "benedikt": 172, "ehing": 172, "coher": [172, 174], "neurobiolog": 172, "subgroup": 172, "psychiatr": 172, "disord": 172, "toolbox": [173, 436], "quickstart": 173, "ecosystem": 173, "domain": [174, 257], "ok": 174, "walk": 174, "manner": [174, 384], "dive": 174, "mni_icbm152_t1_tal_nlin_sym_09a_convert": [4, 174], "oftentim": 174, "comer": 174, "gentl": 174, "greatli": 174, "facilit": [125, 152, 174, 179], "visualis": 174, "besid": 174, "transfer": 174, "psycholog": 174, "knop": 174, "despit": 174, "connection": 174, "tracker": 175, "mislabel": 175, "seriou": 175, "dai": 175, "decent": 175, "quantifi": 175, "prioriti": [175, 177, 239], "urgent": 175, "month": 175, "medium": [175, 237, 400], "cd": [48, 175, 257], "stall": 175, "kindli": 175, "repli": 175, "week": 175, "redirect": 175, "ping": 175, "hatch": 175, "vc": 175, "sdist": 175, "wheel": 175, "beforehand": 175, "currentmodul": 175, "whats_new": 175, "_latest": 175, "_vx": 175, "commit": 175, "master": [175, 205], "_version": 175, "workspac": 175, "dist": 175, "rm": 175, "twine": 175, "subfold": 175, "packagenam": 175, "packagevers": 175, "pythonvers": 175, "pythoncvers": 175, "whl": 175, "tab": [175, 179], "drag": 175, "dvipng": 175, "texliv": 175, "wget": 175, "mirror": [175, 193, 194, 195, 196, 197, 198, 199, 203, 206, 207, 209, 217, 218, 221, 222, 223, 226, 227, 232, 238], "ctan": 175, "dviwar": 175, "unzip": 175, "linux": 175, "pkg": 175, "bewar": [175, 177], "expans": [176, 437], "resiz": [176, 178, 249, 250, 251, 252, 254, 255, 294, 311, 314, 334, 336, 337, 339, 398, 400, 401, 402, 404, 414, 437], "t_map001": 177, "abbrevi": 177, "subject1": 177, "subject2": 177, "wildcard": [177, 178, 248, 309], "unix": [177, 248], "shell": [177, 248], "subject_01": 177, "subject_03": 177, "subject_": 177, "subj1": 177, "resourc": 177, "nilearn_shared_data": [177, 239], "get_head": 177, "memoryerror": 177, "decompress": 177, "uncach": 177, "comma": 177, "aren": [177, 184], "scissor": [30, 32, 33, 177], "chapter": [178, 179], "swap_img_hemispher": 178, "fslview": 178, "crop": [178, 179, 303], "consumpt": [178, 281, 294, 327, 330, 417], "3x3x3": [178, 228, 230, 406, 408], "diag": [178, 389], "compute_background_mask": [178, 249, 250, 251, 252, 256, 257, 328, 331, 404], "compute_multi_background_mask": [178, 328], "intersect_mask": 178, "restructur": 178, "recip": 178, "cube": [48, 179, 415], "swiss": 179, "armi": 179, "knive": 179, "intend": [179, 274, 314, 315], "set_config": [179, 185, 186, 187, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 325, 326, 327, 328, 329, 330, 331, 332, 403, 404, 405, 406], "print_changed_onli": 179, "float32": [11, 33, 84, 179, 300, 309, 326, 327, 328, 329, 330, 331, 332], "fight": 179, "neuroanatomi": 179, "anisotrop": 179, "convers": [179, 195], "loss_pass": 179, "prespecifi": 179, "abrupt": 179, "transient": 179, "acquis": 179, "saniti": 179, "recast": 179, "brought": 179, "represenet": 179, "excerpt": 179, "disadvantag": 179, "nonpres": 179, "linearli": 179, "background_label": [49, 56, 91, 179, 326, 329, 374, 409, 412], "nor": 179, "5d": 179, "cov_estim": 185, "ledoitwolf": 185, "store_precis": 185, "discard_diagon": [185, 191], "shrunk": 185, "triangular": [185, 191, 192, 389], "cov_estimator_": 185, "whitening_": 185, "connectivitymatrix": 185, "n_confound": [185, 305, 419], "vetor": 185, "get_metadata_rout": [185, 186, 187, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 325, 326, 327, 328, 329, 330, 331, 332, 403, 404, 405, 406], "rout": [185, 186, 187, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 325, 326, 327, 328, 329, 330, 331, 332, 403, 404, 405, 406], "metadatarequest": [185, 186, 187, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 325, 326, 327, 328, 329, 330, 331, 332, 403, 404, 405, 406], "subobject": [185, 186, 187, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 325, 326, 327, 328, 329, 330, 331, 332, 403, 404, 405, 406], "param": [185, 186, 187, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 325, 326, 327, 328, 329, 330, 331, 332, 403, 404, 405, 406], "set_inverse_transform_request": [185, 256, 257, 326, 327, 329, 330, 332, 403, 404, 405, 406], "enable_metadata_rout": [185, 186, 187, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 325, 326, 327, 328, 329, 330, 331, 332, 403, 404, 405, 406], "alia": [185, 186, 187, 249, 250, 251, 252, 253, 254, 255, 256, 257, 261, 281, 294, 325, 326, 327, 328, 329, 330, 331, 332, 403, 404, 405, 406, 435], "metadata_rout": [185, 186, 187, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 325, 326, 327, 328, 329, 330, 331, 332, 403, 404, 405, 406], "set_output": [185, 256, 257, 281, 294, 325, 326, 327, 328, 329, 330, 331, 332, 403, 404, 405, 406], "set_param": [185, 186, 187, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 325, 326, 327, 328, 329, 330, 331, 332, 403, 404, 405, 406], "set_transform_request": [185, 256, 257, 325, 326, 327, 328, 329, 330, 331, 332, 404, 406], "tol": [43, 186, 187, 189, 254, 255], "gap": [53, 186, 189], "aggress": [186, 323], "ndarray": 186, "set_fit_request": [186, 187, 249, 250, 251, 252, 253, 254, 255, 256, 257, 281, 294, 326, 327, 328, 329, 330, 331, 404, 406], "n_refin": 187, "tol_cv": 187, "max_iter_cv": 187, "phase": 187, "refin": [53, 57, 58, 187], "cv_alphas_": 187, "n_alpha": [43, 187, 254, 255], "probe_funct": 189, "precisions_init": 189, "dualiti": 189, "prematur": 189, "emp_cov": 189, "vec": 192, "encompass": 192, "cpac": 193, "band_pass_filt": 193, "global_signal_regress": 193, "quality_check": 193, "wrt": 193, "pcp": 193, "css": [62, 193], "dparsf": 193, "niak": 193, "cc": 193, "controversi": 193, "1hz": 193, "alff": 193, "degree_binar": 193, "degree_weight": 193, "dual_regress": 193, "eigenvector_binar": 193, "eigenvector_weight": 193, "falff": 193, "func_mask": 193, "func_mean": 193, "lfcd": 193, "reho": 193, "rois_aal": 193, "rois_cc200": 193, "rois_cc400": 193, "rois_dosenbach160": 193, "rois_ez": 193, "rois_ho": 193, "rois_tt": 193, "vmhc": 193, "site": [3, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 67, 71, 72, 77, 78, 79, 84, 86, 91, 92, 95, 98, 100, 101, 102, 104, 105, 106, 108, 111, 193, 194], "rater": 193, "sub_id": 193, "50001": 193, "50607": 193, "dx_group": 193, "dsm_iv_tr": 193, "asperg": 193, "ppd": 193, "NOS": 193, "age_at_scan": 193, "femal": 193, "handedness_categori": 193, "ambi": 193, "ambidextr": 193, "handedness_scor": 193, "resum": [194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 209, 214, 217, 218, 219, 223, 225, 226, 227, 232, 238], "ftp": [47, 194], "htdoc": 194, "adhd200": 194, "adhd200_40sub_preprocess": 194, "spm12": 195, "med": 195, "463": [33, 195], "468": [33, 62, 67, 195], "consecut": [195, 197, 199, 205, 208, 209, 403], "5021": 195, "lingual_l": 195, "precentral_l": 195, "spm5": 195, "licenc": [195, 196, 198, 205, 209], "gin": 195, "217": [33, 41, 195], "mialab": 196, "rsn_indic": 196, "mrn": 196, "325": [33, 41, 197], "mstep": 197, "asym": 197, "asymmetr": [197, 218, 219], "homotop": 197, "ob": 197, "scale007": 197, "scale012": 197, "scale020": 197, "scale036": 197, "scale064": 197, "scale122": 197, "scale197": 197, "scale325": 197, "scale444": 197, "futurewarn": [48, 50, 67, 111, 278], "figshar": [19, 197], "1285615": 197, "grp_mean": 198, "group_mean": 198, "scorr_mean": 198, "emphas": 198, "tcorr_mean": 198, "scorr_2level": 198, "tcorr_2level": 198, "creativ": 198, "commerci": 198, "alik": 198, "creativecommon": 198, "nc": 198, "sa": 198, "cluster_roi": 198, "76": [11, 23, 30, 32, 33, 39, 40, 42, 43, 44, 48, 61, 62, 66, 72, 99, 101, 102, 199, 207], "93": [6, 23, 30, 32, 33, 36, 39, 40, 42, 43, 44, 62, 77, 91, 102, 199], "rec": [199, 211, 212, 213, 284], "104": [33, 41, 43, 200], "123": [33, 41, 200], "pqu9r": [47, 200], "wjvd5": 200, "3vrct": 200, "9b76y": 200, "34792": 200, "atlas_nam": [201, 202], "cortl": 201, "182": [33, 41, 84, 96, 201, 202, 205], "thr50": [201, 202], "usr": [201, 202], "strictli": [201, 202], "msdl_roi": [20, 52, 53, 54, 203], "193": [33, 41, 73, 204], "229": [33, 41, 204], "263": [33, 41, 204], "probabilit": 204, "prepend": [204, 205, 320, 321], "nac": 204, "idx_nac": 204, "r2hvk": 204, "n_roi": 205, "yeo_network": 205, "base_url": 205, "7networks_lh_vis_3": 205, "thomasyeolab": 205, "cbig": 205, "stable_project": 205, "brain_parcel": 205, "schaefer2018_localglob": 205, "update_20190916_readm": 205, "e501": 205, "update_yeo2011_schaefer2018_labelnam": 205, "bandwidth": 206, "rsn20": 206, "bm20": [21, 206], "bm10": 206, "rsn70": 206, "bm70": 206, "fmrib": [21, 206], "ox": [21, 206], "sulco": 207, "gryal": 207, "level_nam": 208, "ba": 208, "brodmann": 208, "thin_7": 209, "thin": 209, "colors_7": 209, "thin_17": 209, "colors_17": 209, "tick_7": 209, "tick_17": 209, "surfer": [47, 209], "nmr": [47, 209], "mgh": [47, 209], "fswiki": 209, "corticalparcellation_yeo2011": 209, "downloaded_fil": [210, 220, 233], "ordered_region": [211, 213], "cerebellar": 213, "cinguloopercular": 213, "defaultmod": 213, "dorsalattent": 213, "frontopariet": 213, "medialtemporallob": 213, "parietomedi": 213, "reward": 213, "salienc": [51, 213], "somatomotordors": 213, "somatomotorlater": 213, "ventralattent": 213, "cortexl": 213, "cortexr": 213, "thalamu": 213, "hippocampu": 213, "basalganglia": 213, "amygdala": 213, "cortexmid": 213, "age_group": 214, "sec": [51, 214], "155": [33, 41, 214], "realist": [214, 393, 395, 396, 402], "gender": [214, 232], "handed": 214, "ds000228": 214, "wjtyq": 214, "ucla": [215, 233], "consortium": [215, 233], "neuropsychiatr": [215, 233], "la5c": [215, 233], "urls_path": [215, 234], "fullbrain": 217, "pymvpa": [38, 217], "datadb": 217, "mni152nlin2009csasym": [218, 219], "templateflow": [218, 219], "t2": [218, 382, 435], "t2_relax": 218, "relaxometri": 218, "proton": 218, "eye_mask": 218, "face_mask": 218, "bic": [218, 271], "ca": 218, "servicesatlas": 218, "icbm152nlin2009": 218, "vfonov": 218, "mni_icbm152_nlin_sym_09a_nifti": 218, "tpl": 218, "mni152nlin2009csym": 218, "n_iter": [48, 49, 50, 219, 241, 244, 404, 405, 411], "binary_clos": [219, 241, 244], "gm_mask_img": [219, 241], "particularli": [219, 406], "caller": [221, 222], "get_mask": 223, "get_anat": 223, "vhtf6": 223, "paardigm": 224, "461": [33, 225], "multiple_spatial_regress": 225, "princip": [225, 323], "full_correl": 225, "return_raw_data": 226, "betamap": 226, "make_xi": 226, "153mb": 227, "brainlin": 227, "number_of_imag": 228, "_empty_filt": 228, "image_typ": 228, "is_threshold": 228, "not_mni": 228, "download_new": [228, 230], "kwarg_image_filt": 228, "until": [228, 342], "skim": 228, "basic_collection_term": 228, "empty_filt": 228, "image_metadata": 228, "basic_image_term": 228, "offlin": [228, 230, 437], "regardless": [228, 230, 254], "countvector": [228, 230], "info": [167, 228, 230, 387, 393, 394, 395, 396], "concis": 228, "_col_filters_available_on_serv": 228, "owner": 228, "modify_d": 228, "auditory_calculation_vs_baselin": 229, "32980": [103, 229], "10426": [103, 231], "dartel_vers": 232, "416": [33, 40, 41, 45, 232], "dartel": 232, "data_usage_agr": 232, "txt": [62, 94, 232], "gross": 232, "intracrani": 232, "socioeconom": 232, "dementia": 232, "demand": 232, "dedic": 232, "openli": 232, "usageagr": 232, "vm": 232, "dataset_vers": [233, 234], "ds000030_r1": [62, 233, 234], "patch_openneuro_dataset": 233, "symlink": [233, 247], "data_nam": [235, 236], "spm_auditori": [6, 235], "sub001": [6, 71, 235, 236], "ion": [6, 71, 235, 236], "trials_ses1": 236, "trials_ses2": 236, "mmface": [71, 236], "642": [33, 55, 237, 400], "2562": [237, 400], "10242": [237, 387, 400], "40962": [237, 400], "fsaverage7": [237, 400], "163842": [237, 387, 400], "area_left": 237, "area_right": 237, "flat_right": 237, "sphere_left": 237, "sphere_right": 237, "thick_left": 237, "thick_right": 237, "white_left": [237, 422], "white_right": 237, "func_right": 238, "gm_mni152_templ": 242, "mni152_templ": 243, "wm_mask_img": 244, "wm_mni152_templ": 245, "file_list": 247, "inclusion_filt": 248, "exclus": [248, 254, 255], "wrapper": [249, 250, 296], "1e4": [249, 250, 251, 252], "logisticregress": [249, 251], "liblinear": [34, 249, 251], "inbuilt": [249, 250, 251, 252], "model_evalu": [249, 250, 251, 252], "scorer": [249, 250, 251, 252], "hertz": [249, 250, 251, 252, 254, 255, 299, 326, 327, 328, 329, 330, 331, 332, 404, 406, 417, 418], "rough": [249, 250, 251, 252, 254, 255, 256, 257, 281, 294, 300, 326, 327, 328, 329, 330, 331, 332, 404, 405, 406], "decision_funct": [249, 250, 251, 252, 254, 255], "learner": [249, 250, 251, 252, 254, 255], "ye": [249, 250, 251, 252], "leavepgroupsout": [249, 250, 251, 252], "classes_": [249, 250, 251, 252, 254, 255], "screening_percentile_": [249, 250, 251, 252, 254, 255], "n_class": [249, 250, 251, 252, 254, 255], "intercept_": [249, 250, 251, 252, 254, 255], "nclass": [249, 250, 251, 252], "cv_": [249, 250, 251, 252, 254, 255], "std_coef_": [249, 250, 251, 252], "std_coef_img_": [249, 250, 251, 252], "inner": [249, 250, 251, 252, 319, 422], "best_alpha": [249, 250, 251, 252], "scorer_": [249, 250, 251, 252], "misclassif": [249, 250, 251, 252, 254, 255], "n_outputs_": [249, 250, 251, 252], "dummy_output_": [249, 250, 251, 252], "class_prior": [249, 250, 251, 252], "dummyregressor": [249, 250, 251, 252], "confid": [249, 250, 251, 252, 254, 255, 271, 273, 274], "sample_weight": [249, 250, 251, 252, 254, 255], "set_score_request": [249, 250, 251, 252, 254, 255, 256, 257, 404], "neg_mean_squared_error": [250, 252], "clustering_percentil": [32, 251, 252], "trade": [251, 252], "cluster_percentil": [251, 252], "america": 253, "0001": [43, 254, 255], "fit_intercept": [254, 255], "debia": [43, 254, 255], "hybrid": [254, 255], "mutual": [254, 255], "alpha_min": [254, 255], "alpha_max": [254, 255], "premultipli": 254, "nearli": [254, 255], "debias": [254, 255], "all_coef_": [254, 255], "n_l1_ratio": [254, 255], "alpha_grids_": [254, 255], "best_model_params_": [254, 255], "n_paramet": [254, 255], "n_classes_": 254, "mask_": [254, 255], "memory_": [254, 255], "narrai": [254, 255], "w_": [254, 255], "ymean_": [254, 255], "xmean_": [254, 255], "xstd_": [254, 255], "supported_loss": [254, 255], "supported_penalti": [254, 255], "check_param": [254, 255], "sane": [254, 255], "distanc": [33, 254, 255, 281, 294, 373, 415, 416, 422], "hyperplan": [254, 255], "qi": [254, 255], "y_true": 255, "disregard": 255, "n_samples_fit": 255, "n_output": [255, 256, 257, 281, 294, 403, 405], "uniform_averag": 255, "multioutputregressor": 255, "do_cca": 256, "n_init": [49, 256, 403], "6mm": [256, 406], "pca": [54, 256, 330], "restart": 256, "randomst": [111, 256, 257, 281, 290, 296, 403, 404], "fit_param": [256, 257, 281, 294, 325, 328, 331, 403, 405], "x_new": [256, 257, 281, 294, 325, 328, 331, 403, 405], "n_features_new": [256, 257, 281, 294, 325, 328, 331, 403, 405], "reconstructed_img": [256, 257], "decompositionestim": [256, 257, 404], "squeez": [256, 257, 404], "reduction_ratio": 257, "dict_init": [48, 257], "batch_siz": [48, 257, 403], "batch": [103, 107, 257, 403], "lar": 257, "lars_path": 257, "rho": 268, "likelihoodmodel": [268, 271], "sigma": [268, 271, 272, 273, 274], "whiten": [48, 268, 272, 273, 274], "whitened_x": [268, 272], "logl": [268, 271, 272, 273, 274], "loglikelihood": [268, 272], "df_model": [268, 271, 272], "loglf": [268, 272], "ell": [268, 272], "hat": [268, 272], "sse": [268, 272, 273, 274], "10000000000": 269, "tini": 269, "dofmax": 269, "breakag": 269, "contrast_dim": 269, "def_dofmax": 269, "underflow": 269, "def_tini": 269, "h0": [269, 342], "df_num": [270, 271, 273, 274], "df_den": [270, 271, 273, 274, 275], "theta": [271, 273, 274], "aic": 271, "llf": 271, "wald": [271, 273, 274], "vcov": [271, 273, 274], "sd": [271, 273, 274, 275], "tcontrastresult": [271, 273, 274], "fcontrast": [271, 273, 274], "invcov": [271, 273, 274], "singular": [78, 271, 273, 274, 305, 419], "px": [271, 273, 274], "f_re": [271, 273, 274], "fcontrastresult": [271, 273, 274], "conf_int": [271, 273, 274], "col": [271, 273, 274], "standard_norm": [271, 273, 274], "stan": [271, 273, 274], "confidence_interv": [271, 273, 274], "whitened_design": 272, "calc_beta": 272, "moor": 272, "penros": 272, "pseudoinvers": 272, "normalized_cov_beta": 272, "df_residu": 272, "__init___": 272, "wlsmodel": 272, "armodel": 272, "whitened_i": 273, "whitened_residu": 273, "normalized_residu": [273, 274], "stanard": [273, 274], "d_i": [273, 274], "e_i": [273, 274], "ms_e": [273, 274], "presum": [276, 297], "dsicoveri": 276, "regression_result": 277, "con_val": 277, "con": [62, 277], "precision_weight": 278, "fixed_fx_contrast_img": 278, "fixed_fx_variance_img": 278, "fixed_fx_t_img": [], "z_val": 280, "min_onset": [281, 283, 284, 288], "fraction": [281, 284, 336, 337, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 422], "plu": [281, 283, 288], "spm_time_deriv": [281, 283, 288], "idem": [281, 283, 288], "spm_dispersion_deriv": [281, 283, 288], "glover_hrf": [281, 283, 288], "glover_time_deriv": [281, 283, 288], "glover_dispersion_deriv": [281, 283, 288], "dirac": [281, 283, 288], "n_onset": [281, 288], "rid": [281, 294], "labels_": [263, 281, 403, 405], "results_": 281, "array_lik": [281, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379, 388], "histogram": [281, 290, 336, 339, 386], "quantif": [281, 290], "contrast_def": [281, 294, 380, 416], "t_map": [281, 294], "n_col": [281, 294, 296, 321, 380], "eval": [281, 294, 296, 380], "mni152templ": [91, 281, 294, 377, 390, 391, 392, 416], "report_dim": [281, 294, 416], "1600": [42, 102, 281, 294, 416], "htmlreport": [281, 294, 327, 330, 406, 416], "standalon": [281, 294, 416], "ce": [281, 284, 294, 416], "autogener": [281, 294, 416], "subpeak": [281, 294, 415, 416], "report_text": [281, 294, 416], "voxelwis": [281, 294], "triplet": [282, 283, 332, 401], "n_frame": [282, 288], "n_regressor": [282, 290, 296, 342], "n_event": [282, 283, 288], "computed_regressor": 283, "n_reg": 283, "reg_nam": 283, "dataset_path": 284, "_space": 284, "acq": 284, "dir": [284, 319], "den": 284, "dhrf": [285, 287, 291, 293], "attent": [78, 288], "n_add_reg": 288, "reg_i": 288, "frames_tim": 288, "map_nam": [294, 296], "effects_map_path": [294, 296], "liter": [294, 296], "second_level_stat_typ": 294, "output_imag": 294, "unsign": [296, 342], "neg_log10_vfwe_pvals_img": 296, "explanatori": [296, 342], "n_descriptor": [296, 342], "thresholded_map": 297, "prescrib": 297, "rigor": 297, "anatomical_imag": [298, 310], "brainmask": 298, "instant": [299, 418], "clean__": [299, 326, 327, 328, 329, 330, 331, 332], "butterworth__": [299, 326, 327, 328, 329, 330, 331, 332, 418], "clean__butterworth__": [299, 326, 327, 328, 329, 330, 331, 332], "ensure_ndim": 300, "img_copi": 302, "rtol": 303, "return_offset": 303, "Will": [303, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379], "touch": 303, "croppabl": 303, "toggl": 303, "x1_pre": 303, "x1_post": 303, "x2_pre": 303, "x2_post": 303, "xn_pre": 303, "xn_post": 303, "number_of_scan": 305, "joint_mni_imag": 306, "233": [33, 41, 306], "single_mni_imag": 306, "five_mni_imag": 306, "first_three_imag": 306, "imcal": 310, "fslmath": 310, "log_img": 310, "ref_niimg": 312, "copy_head": 312, "imposs": 313, "fill_valu": [314, 315], "force_resampl": [314, 315], "extrapol": 314, "boundingboxerror": 314, "crop_img": 314, "infinit": 314, "gracefulli": 314, "source_img": 315, "target_img": [315, 335, 338], "cllip": 315, "arr": 316, "normalis": 316, "filtered_img": 316, "synchron": 317, "sagit": 317, "caution": 317, "radio": 317, "main_path": 319, "file_tag": [319, 320], "file_typ": [319, 320], "modality_fold": 319, "sub_fold": 319, "se": 319, "ap": 319, "file_path": [258, 320], "file_basenam": 320, "file_field": 320, "_tag": 320, "revis": 320, "parser": 320, "dataset_descript": [62, 321], "statmap": 321, "errorts_statmap": [62, 321], "rsquare_statmap": [62, 321], "_stat": 321, "effect_statmap": [62, 321], "variance_statmap": [62, 321], "_statmap": 321, "_design": 321, "img_fil": [322, 323], "anat_combin": [322, 323], "n_compcor": [322, 323], "dtseri": [322, 323], "gii": [22, 23, 62, 322, 323, 393, 394, 395, 396, 402, 420, 421, 422], "compli": 322, "non_steady_st": 322, "power2": 322, "quadrat": 322, "power2d": 322, "excess": 322, "var": 322, "anat_separ": 322, "temporal_anat_combin": 322, "temporal_anat_separ": 322, "acompcor_combin": 322, "smootharomanonaggr_bold": [322, 323], "nifitmask": 322, "denois": 323, "srub": 323, "physiologi": 323, "suffer": 323, "aggres": 323, "suffix": 323, "mni152nlin6asym": 323, "niprep": 323, "transform_single_img": [43, 48, 49, 52, 53, 56, 58, 325, 326, 327, 328, 329, 330, 331, 332, 406], "region_sign": [325, 326, 327, 328, 329, 330, 331, 332, 404, 406, 410, 413], "imgs_list": [325, 326, 327, 328, 331], "ddof": [326, 327, 328, 329, 330, 331, 332, 418], "unus": [263, 264, 326, 327, 328, 329, 330, 331, 332], "allow_overlap": [52, 53, 54, 58, 327, 330, 332], "maps_img_": [327, 330], "html_report": [327, 330, 406], "voxel_sign": [327, 330, 332, 406], "multipca": 328, "affine_": [328, 331], "contrarili": [54, 91, 329, 330], "trim": [330, 410], "seeds_": 332, "session_seri": 333, "data_img": [334, 337], "border_s": [334, 337], "binary_eros": [334, 335, 336, 338, 339], "mask_typ": [48, 335, 338], "exclude_zero": [336, 337, 339], "reslic": [336, 339], "grp_mask": 340, "ndim": 341, "target_var": 342, "confounding_var": 342, "legaci": 342, "criterion": [342, 405], "amongst": [342, 435], "n_covar": 342, "worker": 342, "pval": 342, "score_orig_data": 342, "h0_max_t": 342, "h0_max_tfc": 342, "h0_max_siz": 342, "h0_max_mass": 342, "mpl": [343, 345, 346], "transform_to_2d": [343, 345, 346], "add_object_bound": [343, 345, 346], "draw_2d": [343, 345, 346], "data_2d": [343, 345, 346], "data_bound": [343, 345, 346], "bounding_box": [343, 345, 346], "get_object_bound": [343, 345, 346], "draw_left_right": [343, 345, 346], "bg_color": [343, 345, 346], "draw_scale_bar": [343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370], "fontproperti": [343, 345, 346], "borderpad": [343, 345, 346], "size_vert": [343, 345, 346], "label_top": [343, 345, 346], "font": [343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 393, 395, 396], "anchoredoffsetbox": [343, 345, 346], "draw_posit": [343, 345, 346], "brain_color": [344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370], "frame_ax": [344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370], "subdivid": [344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370], "find_cut_coord": [344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370], "placehold": 344, "classmethod": [344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370], "init_with_figur": [344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370], "leave_spac": [344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370], "bgcolor": [344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370], "2g": [344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 382, 384, 385, 391, 392, 393, 395, 396], "cbar_vmin": [344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 393], "cbar_vmax": [344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 393], "contour_fil": [344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370], "add_edg": [344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 435], "n_marker": [344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370], "left_right": [344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370], "scale_loc": [344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370], "leak": [344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370], "dpi": [344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370], "inch": [344, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370], "schemat": [346, 379, 384, 388], "glassbrainax": [347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369], "add_graph": [347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369], "adjacency_matrix": [47, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379, 398], "linearsegmentedcolormap": [347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 377, 378, 379, 382, 389, 390, 391, 392, 398, 399, 400, 402], "edge_kwarg": [347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379], "node_kwarg": [347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379, 388], "undirect": [347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379], "line2d": [5, 347, 348, 349, 350, 351, 352, 354, 357, 359, 361, 363, 365, 367, 369, 379], "draw_cross": [347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 377, 382, 385, 390, 391, 392, 399], "crossbar": [353, 355, 358, 360, 362, 364, 366, 368, 370], "cutax": [360, 362, 364, 366, 368, 370], "baseslic": 372, "img_length": 373, "return_label_nam": 374, "label_hemispher": 374, "n_label": 374, "labels_list": 374, "n_map": 375, "activation_threshold": 376, "tupleof": [377, 378, 379, 382, 384, 385, 388, 390, 391, 392], "ymin": [377, 378, 379, 382, 384, 385, 388, 390, 391, 392], "magic": [56, 91, 377, 384, 385, 387, 391, 392], "pronounc": [377, 390, 391, 392, 399], "get_zoom": 378, "matlotlib": 379, "nipy_spectr": 382, "model_ev": 383, "fig_kwarg": 383, "stat_map_img": [384, 392, 399, 400], "destin": [384, 385, 391, 392, 399], "noisier": [384, 385, 391, 392, 399], "ref_img": 386, "src_img": 386, "plot_hist": 386, "output_dir": 386, "superimpos": 386, "nifti_lik": 386, "surf_data": [387, 393, 395, 396, 400, 402, 420, 422], "montag": 387, "node_valu": 388, "listedcolormap": 388, "node_vmin": 388, "node_vmax": 388, "node_threshold": 388, "viridis_r": 388, "auto_fit": 389, "newli": 389, "room": 389, "linkag": 389, "sent": 389, "gist_rainbow": 390, "surf_map": [393, 402], "title_font_s": [393, 395, 396], "orig": [393, 394, 395, 396, 402, 421, 422], "sulc": [393, 396, 402, 420], "underneath": [393, 395, 396, 402], "greyscal": [393, 395, 396, 402], "270": [33, 36, 41, 42, 44, 102, 393, 395, 396], "encount": [31, 58, 77, 79, 111, 393, 395, 396], "sharp": [393, 395, 435], "apply_along_axi": [393, 395], "custom_funct": [393, 395], "subplot_kw": [111, 393, 394, 395, 396], "tab20": 394, "rgba": [394, 401], "agg": 397, "emit": 397, "colorbar_height": [398, 400, 402], "colorbar_fonts": [398, 400, 402], "title_fonts": [398, 400, 401, 402], "n_node": [398, 401], "connectomeview": [398, 401], "opac": 399, "th": 399, "opaqu": 399, "html_view": [399, 435], "plane": 399, "surfaceview": [400, 402], "hex": 401, "gnist_ncar": 402, "n_cluster": [49, 403, 405, 411], "max_no_improv": 403, "smart": 403, "k_init": 403, "centroid": 403, "mini": 403, "minibatchkmean": [49, 403, 404], "inertia": 403, "reassign": 403, "sizes_": [403, 405], "x_red": [403, 405], "x_inv": [403, 405], "fit_predict": [403, 405], "agglomerativeclust": [49, 404], "connectivity_": 404, "valid_method": 404, "eccentr": [405, 411], "n_clusters_": 405, "27mm": [406, 408], "1350mm": [406, 408], "img_valu": 406, "connected_compon": [406, 408], "ly": 406, "min_siz": 407, "new_labels_img": 407, "new_label": 407, "extract_typ": 408, "_smooth_arrai": 408, "index_of_each_map": 408, "head_tpl": 414, "head_valu": 414, "html_document": 414, "htmldocument": 414, "get_ifram": 414, "get_standalon": 414, "temp_file_lifetim": 414, "temporari": 414, "remove_temp_fil": 414, "return_label_map": 415, "letter": 415, "label_map": 415, "destination_path": 416, "sampling_r": 417, "padtyp": 417, "odd": 417, "padlen": 417, "n_sourc": 417, "decai": 417, "ring": 417, "sharpen": 417, "filtfilt": 417, "inplac": 417, "filtered_sign": 417, "cleaned_sign": 418, "namedtupl": [421, 422], "neighbourhood": 422, "trilinear": 422, "x20": 422, "regularli": 422, "halfwai": 422, "inward": 422, "surface_mesh": 422, "neighbour": 422, "tour": 435, "canni": 435, "purple_green": 435, "pretty_brain": 435, "rememb": 435, "emb": 435, "surface_plot": 435, "cyan": 435, "orang": 435, "offici": 436, "miniconda": 436, "path_to_new_env": 436, "bat": 436, "prompt": 436, "jitsi": 436, "anyon": 436, "engag": 436, "grad": 437, "biologi": 437, "throughout": 437, "fsaverage_opt": [], "3644": [125, 152], "3987": [125, 152], "3994": [125, 152], "badg": 167, "corresp": [], "bdg": 167, "secondari": 167, "3203": [125, 152], "downstream": [125, 152], "incomplet": [111, 125, 152], "3856": [125, 152], "return_z_scor": [67, 278], "fixed_fx_z_score_img": [67, 278], "fixed_fx_stat_img": 278, "sandbox": 111, "tent": 111, "plot_surf_img": 111, "surfaceimag": [111, 263, 264], "polymesh": 111, "mesh_part": 111, "isinst": 111, "fetch_nki": 111, "surfacemask": 111, "mean_data": 111, "surfacelabelsmask": 111, "label_nam": [111, 263], "fetch_destrieux": 111, "labels_mask": 111, "label_names_": [111, 263], "monkeypatch_masker_check": 111, "adjust_screening_percentil": 111, "check_embedded_nifti_mask": 111, "_check_embedded_nifti_mask": 111, "score_func": 111, "atleast_2d": 111, "dp": 111, "plot_surface_image_and_mask": [111, 112], "filemesh": [], "n_vertic": [258, 259, 260], "inmemorymesh": [], "to_gifti": [258, 259, 260], "gifti_fil": [258, 259, 260], "labels_data_": 263, "masked_img": [263, 264], "output_dimension_": 264, "load_fsaverag": [], "mesh_nam": 267, "0x7f5a6ccc9c10": 4, "0x7f5a6c64b790": 4, "0x7f5a6c936950": 4, "0x7f5a6c59ead0": 4, "884": 4, "232": [4, 33, 41], "0x7f5a710ae690": 5, "972": [5, 6], "collection_658": [2, 103], "image_10426": [2, 14], "0x7fd1e358d790": 2, "0x7fd1e32ea510": 2, "smith_2009": 2, "pnas_smith09_rsn10": 2, "0x7fd1f295c410": 2, "666": [2, 7, 33], "204": [2, 33, 41], "env": [3, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 67, 71, 72, 77, 78, 79, 84, 86, 91, 92, 95, 98, 100, 101, 102, 104, 105, 106, 108, 111], "lib": [3, 9, 10, 11, 14, 16, 18, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 39, 43, 47, 48, 49, 50, 52, 54, 57, 58, 61, 62, 64, 67, 71, 72, 77, 78, 79, 84, 86, 91, 92, 95, 98, 100, 101, 102, 104, 105, 106, 108, 111], "fromnumer": [3, 16, 29], "771": [3, 16, 29], "maskedarrai": [3, 16, 29], "kth": [3, 16], "0x7fd1f29dc810": 3, "1447": [3, 98], "1448": [3, 98], "1449": [3, 98], "1450": [3, 42, 98, 102], "1451": [3, 98], "1452": [3, 94, 98], "493": [3, 29, 30, 32, 33, 34, 35, 36, 98], "767": 3, "886": 3, "698": [3, 33], "744": [3, 33], "9629629629629629": 3, "8518518518518519": 3, "9753086419753086": 3, "40740740740740744": 3, "9876543209876543": 3, "9259259259259259": 3, "8765432098765432": 3, "89376583e": 3, "87166975e": 3, "23026937e": 3, "88746991e": 3, "18696095e": 3, "10743812e": 3, "69998171e": 3, "50954931e": 3, "94205184e": 3, "51226489e": 3, "08511154e": 3, "28797723e": 3, "54676456e": 3, "78907891e": 3, "69168021e": 3, "28086736e": 3, "56421413e": 3, "65764489e": 3, "67106198e": 3, "02157291e": 3, "29515080e": 3, "17595160e": 3, "36991645e": 3, "41326035e": 3, "59875952e": 3, "22602975e": 3, "77309227e": 3, "22197516e": 3, "53193786e": 3, "76046271e": 3, "14299983e": 3, "14225618e": 3, "03672886e": 3, "89275416e": 3, "89030127e": 3, "35114839e": 3, "21393507e": 3, "73123730e": 3, "37415310e": 3, "41274512e": 3, "81648588e": 3, "65406426e": 3, "70784059e": 3, "56837061e": 3, "21663057e": 3, "47673781e": 3, "13270170e": 3, "60954746e": 3, "52762534e": 3, "02914739e": 3, "28098999e": 3, "08007305e": 3, "09949199e": 3, "72430045e": 3, "77394583e": 3, "03857871e": 3, "38237142e": 3, "48880623e": 3, "43027378e": 3, "47419221e": 3, "34043038e": 3, "87116138e": 3, "65858896e": 3, "07604165e": 3, "22035048e": 3, "95642141e": 3, "22092319e": 3, "04053589e": 3, "15345628e": 3, "12250101e": 3, "93776864e": 3, "30540545e": 3, "42976314e": 3, "23065439e": 3, "88146985e": 3, "69390804e": 3, "78947340e": 3, "00276211e": 3, "99186587e": 3, "52170942e": 3, "06153489e": 3, "31952555e": 3, "21511623e": 3, "23349110e": 3, "42560812e": 3, "53123547e": 3, "98226887e": 3, "32637986e": 3, "55125591e": 3, "41589853e": 3, "79199314e": 3, "80909312e": 3, "70159214e": 3, "71451399e": 3, "98949537e": 3, "20169320e": 3, "35443606e": 3, "37626947e": 3, "04261335e": 3, "68462106e": 3, "19388141e": 3, "94178861e": 3, "07300539e": 3, "48931664e": 3, "43559832e": 3, "09027313e": 3, "67698809e": 3, "73787603e": 3, "96431828e": 3, "09421718e": 3, "57928422e": 3, "16720883e": 3, "00106343e": 3, "40262239e": 3, "82612816e": 3, "12100341e": 3, "45402562e": 3, "32177456e": 3, "49997877e": 3, "47549050e": 3, "56644690e": 3, "83882429e": 3, "19956750e": 3, "72172562e": 3, "25525680e": 3, "58656373e": 3, "79166721e": 3, "51832112e": 3, "31721278e": 3, "35324243e": 3, "76994683e": 3, "40836926e": 3, "20590699e": 3, "35708806e": 3, "68303045e": 3, "92570117e": 3, "24495458e": 3, "30210719e": 3, "00013642e": 3, "17134657e": 3, "92620200e": 3, "33221177e": 3, "80299053e": 3, "75293461e": 3, "17812536e": 3, "09945673e": 3, "43033641e": 3, "06830675e": 3, "84813503e": 3, "71507760e": 3, "72568950e": 3, "76641581e": 3, "09217354e": 3, "00769098e": 3, "53994273e": 3, "25608131e": 3, "82604952e": 3, "50555020e": 3, "61201766e": 3, "16494655e": 3, "95405853e": 3, "57884030e": 3, "89306563e": 3, "82973384e": 3, "23919379e": 3, "13674826e": 3, "68750710e": 3, "66514372e": 3, "35523146e": 3, "80212922e": 3, "46411269e": 3, "53244714e": 3, "67293610e": 3, "62255192e": 3, "86828467e": 3, "39667058e": 3, "21720730e": 3, "73611586e": 3, "01698058e": 3, "17097608e": 3, "91412591e": 3, "37776678e": 3, "84699024e": 3, "22622342e": 3, "82637573e": 3, "13781520e": 3, "80787191e": 3, "79688536e": 3, "78902213e": 3, "11430891e": 3, "65019809e": 3, "89090638e": 3, "42849900e": 3, "22346107e": 3, "92870063e": 3, "89844517e": 3, "39533227e": 3, "65279565e": 3, "65324226e": 3, "58043485e": 3, "93381560e": 3, "13630641e": 3, "09407439e": 3, "50178141e": 3, "38816646e": 3, "12619242e": 3, "41484974e": 3, "10216158e": 3, "33811618e": 3, "12339685e": 3, "37422548e": 3, "13075501e": 3, "64225368e": 3, "22399007e": 3, "31920665e": 3, "98654343e": 3, "29727838e": 3, "28090166e": 3, "89712003e": 3, "13466759e": 3, "28725595e": 3, "71052243e": 3, "34906143e": 3, "04382591e": 3, "26796430e": 3, "71215031e": 3, "29133493e": 3, "33451367e": 3, "77914354e": 3, "74667810e": 3, "76498903e": 3, "38277270e": 3, "28050095e": 3, "78033532e": 3, "32696569e": 3, "22688509e": 3, "28028639e": 3, "57415334e": 3, "03623294e": 3, "90242634e": 3, "15034780e": 3, "81420633e": 3, "12320024e": 3, "17430869e": 3, "23480102e": 3, "54679796e": 3, "73679205e": 3, "53965630e": 3, "06521865e": 3, "21983657e": 3, "98727684e": 3, "85518889e": 3, "05703440e": 3, "02838292e": 3, "10050645e": 3, "42458332e": 3, "93849341e": 3, "01770030e": 3, "09406786e": 3, "49253788e": 3, "92748296e": 3, "05305557e": 3, "07535910e": 3, "84056391e": 3, "48743626e": 3, "00654728e": 3, "63089618e": 3, "64689163e": 3, "90209734e": 3, "04857646e": 3, "68081062e": 3, "36719189e": 3, "08856170e": 3, "10240550e": 3, "41965130e": 3, "16484533e": 3, "98670650e": 3, "61628904e": 3, "96235313e": 3, "03921453e": 3, "56495098e": 3, "98919957e": 3, "13035794e": 3, "21952359e": 3, "14991056e": 3, "31276114e": 3, "67256274e": 3, "14428106e": 3, "67105847e": 3, "28703529e": 3, "20150738e": 3, "68523923e": 3, "25603511e": 3, "04617177e": 3, "10344709e": 3, "85356525e": 3, "81664240e": 3, "48431992e": 3, "18826165e": 3, "18499425e": 3, "10845543e": 3, "11777715e": 3, "63467524e": 3, "25906053e": 3, "12227123e": 3, "57634771e": 3, "70208192e": 3, "32373193e": 3, "06446931e": 3, "23402170e": 3, "27356077e": 3, "33883644e": 3, "75530885e": 3, "88832395e": 3, "45133177e": 3, "03299587e": 3, "16785207e": 3, "32232196e": 3, "17563478e": 3, "40062395e": 3, "31138749e": 3, "17557284e": 3, "75889026e": 3, "18128803e": 3, "15887312e": 3, "34028904e": 3, "22781241e": 3, "00231146e": 3, "74913161e": 3, "12758109e": 3, "98718170e": 3, "04068832e": 3, "65060586e": 3, "03005061e": 3, "05805137e": 3, "80743698e": 3, "75451566e": 3, "72589639e": 3, "00662678e": 3, "46106676e": 3, "46870158e": 3, "13410852e": 3, "81704773e": 3, "40977850e": 3, "14637885e": 3, "63834153e": 3, "66533446e": 3, "15678969e": 3, "45092977e": 3, "35867507e": 3, "34599425e": 3, "81062660e": 3, "15345981e": 3, "39361619e": 3, "07246269e": 3, "15467835e": 3, "15424061e": 3, "88766804e": 3, "60263766e": 3, "09702364e": 3, "29173711e": 3, "59461238e": 3, "60400674e": 3, "64629293e": 3, "12882350e": 3, "17268223e": 3, "51637455e": 3, "82895461e": 3, "42549747e": 3, "47013782e": 3, "63033825e": 3, "17295056e": 3, "24179854e": 3, "17987374e": 3, "85680729e": 3, "23647042e": 3, "86600785e": 3, "54628639e": 3, "50537550e": 3, "20601719e": 3, "19789300e": 3, "59526560e": 3, "12134316e": 3, "93191356e": 3, "54339776e": 3, "23478376e": 3, "03927889e": 3, "37294719e": 3, "82792554e": 3, "98745113e": 3, "66896735e": 3, "23291615e": 3, "10332222e": 3, "18105688e": 3, "18719680e": 3, "63538079e": 3, "05280542e": 3, "84617917e": 3, "36117139e": 3, "65208867e": 3, "49397058e": 3, "49353365e": 3, "11598953e": 3, "69104747e": 3, "00059175e": 3, "99014579e": 3, "01871886e": 3, "09866870e": 3, "11780848e": 3, "72053120e": 3, "16425622e": 3, "55502886e": 3, "27700394e": 3, "95493999e": 3, "48725575e": 3, "19936236e": 3, "88672147e": 3, "61420651e": 3, "77021010e": 3, "90074747e": 3, "58286188e": 3, "31738757e": 3, "24914027e": 3, "36174836e": 3, "07355183e": 3, "08861151e": 3, "12810869e": 3, "63144367e": 3, "04801405e": 3, "07013246e": 3, "89177500e": 3, "71609557e": 3, "13384551e": 3, "10363750e": 3, "23262809e": 3, "50403609e": 3, "85905155e": 3, "04965644e": 3, "41704552e": 3, "18519849e": 3, "83202812e": 3, "82245279e": 3, "17683533e": 3, "03260166e": 3, "09191964e": 3, "23390921e": 3, "19386248e": 3, "53770334e": 3, "21212578e": 3, "55620124e": 3, "93484270e": 3, "92527440e": 3, "76694066e": 3, "67991459e": 3, "76553638e": 3, "38162951e": 3, "60399969e": 3, "50400293e": 3, "27424365e": 3, "29244202e": 3, "06664825e": 3, "81931761e": 3, "77512112e": 3, "64243041e": 3, "464": [3, 33, 98], "38888888888888895": 3, "6111111111111112": [3, 29], "614": [3, 7, 33, 53, 59], "926": 3, "absent": [6, 67, 71], "moaepilot": 6, "3203072": 6, "34212021": 6, "5799936": 6, "8249344": 6, "10518528": 6, "13205504": 6, "15417344": 6, "17809408": 6, "20021248": 6, "22470656": 6, "24420352": 6, "26361856": [6, 39], "77": [6, 23, 33, 36, 39, 40, 42, 43, 62, 66, 71, 72, 99, 101, 102], "27623424": 6, "28295168": [6, 62], "82": [6, 10, 21, 23, 30, 32, 33, 36, 39, 40, 42, 43, 62, 71, 89, 101, 102, 105], "28770304": 6, "29220864": 6, "29499392": 6, "86": [6, 32, 33, 36, 39, 40, 42, 43, 62, 71, 101, 102], "30007296": 6, "30433280": 6, "32489472": 6, "fm00223": 6, "fm00223_005": 6, "fm00223_006": 6, "fm00223_007": 6, "fm00223_008": 6, "0x7fd1f2951310": 6, "252": [6, 33, 41], "294": [6, 33, 41], "336": [6, 33, 41], "378": [6, 33], "420": [6, 33, 36, 42, 44, 102], "462": [6, 33], "504": [6, 33, 62, 67], "546": [6, 33], "588": [6, 33], "630": [6, 33, 36, 42, 102], "934": 6, "904": 6, "811979": 6, "4050": [6, 102], "1a": [6, 33, 62], "601922": 6, "1b": [6, 62], "435063": 6, "1c": [6, 62], "364058": 6, "605128": 6, "1512": 6, "2a": [6, 62], "590200": 6, "253889": 6, "968355": 6, "3b": 6, "565609": 6, "087451": 6, "1188": 6, "807510": 6, "594": [6, 33], "5a": [6, 33, 62], "646352": 6, "5b": [6, 33, 62], "416271": 6, "710963": 6, "702": [6, 33], "6a": [6, 62], "633746": 6, "6b": 6, "796135": 6, "6c": 6, "254544": 6, "522477": 6, "621": [6, 33, 38, 45], "7a": [6, 33, 62], "713852": 6, "7b": 6, "270733": 6, "7c": 6, "085568": 6, "331806": 6, "648": [6, 33, 62], "8a": [6, 33], "700088": 6, "8b": 6, "037845": 6, "8c": 6, "527477": 6, "835099": 6, "837": 6, "9a": 6, "615642": 6, "9b": 6, "091568": 6, "761": [6, 7, 71, 73], "925": 7, "0x7fd1f2715b50": 9, "svf8k": 9, "1245184": 9, "34242788": 9, "3866624": 9, "7405568": 9, "12025856": 9, "17547264": 9, "22953984": 9, "28459008": 9, "735bf0f211246c83396b5f21f706c224": 9, "470x400": [9, 23, 108], "destrieux_2009": 9, "11942": 9, "destrieux2009": 9, "2a2e5a5707983d509d9319c692c867ab": 9, "584": [9, 27, 33], "9902": 10, "harvardoxford": 10, "917504": [10, 47, 62], "25716861": 10, "2498560": 10, "4268032": [10, 101], "5890048": 10, "7118848": 10, "8495104": 10, "9838592": [10, 23], "11223040": 10, "12599296": 10, "14024704": 10, "15294464": 10, "16138240": 10, "17072128": 10, "18055168": [10, 39], "19062784": 10, "74": [10, 18, 21, 33, 36, 39, 40, 42, 43, 44, 48, 50, 62, 71, 91, 101, 102, 105], "20111360": 10, "21225472": 10, "22405120": 10, "23797760": [10, 23], "25518080": 10, "c4d84bbdf5c3325f23e304cdea1e9706": 10, "12096": 10, "901120": 10, "3740787": 10, "1679360": 10, "2523136": [10, 38], "3407872": 10, "ab1b53038e13028e55f691a69003c208": 10, "0x7fd1f296e910": 10, "0x7fd1e32e8f90": 10, "img_plot": 10, "608": [10, 33, 86], "432": [10, 27, 33, 44, 62], "435": [10, 33], "7781": 11, "adhd40_metadata": 11, "fbef5baff0b388a8c913a08e1d84e059": 11, "7782": 11, "adhd40_0010042": 11, "1507328": 11, "44414948": 11, "2818048": 11, "4333568": 11, "5840896": 11, "7159808": [11, 62], "8151040": 11, "9134080": 11, "10207232": 11, "11272192": 11, "12427264": 11, "13631488": 11, "14901248": 11, "16277504": 11, "17391616": 11, "18694144": 11, "20144128": [11, 43], "21618688": 11, "22986752": [11, 62], "24223744": 11, "25280512": 11, "26386432": 11, "27492352": 11, "28622848": 11, "29777920": 11, "31031296": 11, "32382976": [11, 40], "33857536": 11, "35618816": 11, "37363712": 11, "39182336": [11, 62], "40787968": 11, "42131456": 11, "43261952": 11, "44302336": 11, "e7ff5670bd594dcd9453e57b55d69dc9": 11, "0010042": 11, "0010042_rest_tshift_rpi_voreg_mni": 11, "591": [11, 33, 84], "aux": 11, "coerc": 11, "atlas_valu": 11, "510": [11, 27, 33, 36, 42, 102], "1020": [11, 27, 42, 102], "0x7fd1f27b5e90": 13, "0x7fd1f285e190": 13, "979": [13, 27], "0x7fd1f296ec90": 14, "0x7fd1f01da510": 14, "0x7fd1f23d2790": 14, "0x7fd1e346fd50": 14, "0x7fd1efb6dbd0": 14, "0x7fd1e3595250": 14, "0x7fd1effc2a10": 14, "0x7fd1f299fd50": 14, "441": [14, 27, 33], "0x7fd1efd03850": 15, "0x7fd1ed44a510": 15, "0x7fd1cf12ccd0": 15, "0x7fd1f2689f90": 15, "0x7fd1c371fa90": 15, "0x7fd1c4002010": 15, "0x7fd1efd55fd0": 15, "0x7fd1f22a4450": 15, "0x7fd1fbaa15d0": 15, "0x7fd1efc8d550": 15, "0x7fd1f000f5d0": 15, "0x7fd1f27a2410": 15, "136": [15, 27, 33, 41], "914": [15, 16, 18, 27], "0x7fd1ed456d10": 16, "0x7fd1f4cbcb50": 16, "0x7fd20108c050": 16, "0x7fd1f4cedf10": 16, "0x7fd1f231c810": 16, "658": [16, 27, 33, 48, 50], "brainomics_loc": [17, 77, 105], "hwbm2": 17, "778240": 17, "1508563": 17, "5d27ddc91c5b4a001b9ef9d0": 17, "5d27d29145253a001c3e284f": 17, "5d275ede1c5b4a001aa00c26": 17, "2990080": 17, "13951266": 17, "5693440": 17, "8822784": 17, "11821056": 17, "5d27037f45253a001c3d4563": 17, "5d7b8948fcbf44001c44e695": 17, "0x7fd1f246bd90": 17, "0x7fd1e33a2510": 17, "0x7fd1f26a5a50": 17, "722": [17, 27, 33, 109], "_ax": [18, 21, 48, 50], "getattr": [18, 21], "996": [18, 27], "basc_multiscale_2015": 19, "ndownload": 19, "1861819": 19, "2c2b9f74a3bd6dfaf33a74dc23d61d78": 19, "819": [19, 27], "msdl_atla": [20, 52, 53, 54], "8eaecb9e05c478f565847000d9902a25": 20, "2820": [20, 48, 50, 54, 102], "_data": 20, "allen_rsn_2011": 21, "hrcku": 21, "2064384": 21, "32347736": 21, "7585792": 21, "12910592": 21, "16826368": 21, "21561344": 21, "26263552": 21, "32030720": 21, "5f8f4a26df3a57a30ddc4285d4d5c6c2": 21, "7pj92": 21, "3989504": [21, 62], "63027871": 21, "9461760": 21, "14983168": 21, "21307392": 21, "27598848": 21, "33185792": 21, "39411712": 21, "45785088": 21, "52125696": 21, "58236928": 21, "61775872": 21, "e05b733c275cab0eec856067143c9dc9": 21, "1531904": [21, 43], "19114114": 21, "3268608": 21, "4808704": 21, "6225920": 21, "7954432": 21, "9625600": 21, "11214848": 21, "12754944": 21, "14376960": 21, "16343040": 21, "18276352": 21, "183": [21, 27, 33, 36, 41, 45, 59], "342": [21, 27, 33, 41], "destrieux_surfac": 22, "9343": 22, "lh": 22, "aparc": 22, "a2009": 22, "9342": 22, "rh": 22, "400x400": [22, 23], "231": [22, 27, 33, 41], "nki_enhanced_surfac": 23, "8470": [23, 102], "pheno_nki_nilearn": 23, "8261": 23, "a00028185_rh_preprocessed_fsaverage5_fwhm6": 23, "1368064": 23, "42412120": 23, "2465792": 23, "3530752": 23, "4612096": [23, 48], "5668864": 23, "6578176": 23, "7602176": 23, "8716288": 23, "10854400": 23, "11460608": [23, 62], "12132352": 23, "12845056": [23, 40], "13623296": 23, "14458880": 23, "15351808": [23, 43], "16310272": [23, 43], "17489920": 23, "19038208": [23, 39], "20832256": 23, "22208512": 23, "23560192": 23, "24903680": 23, "26288128": [23, 62], "27394048": 23, "28598272": 23, "29696000": 23, "30736384": 23, "31842304": 23, "32743424": 23, "33759232": 23, "79": [23, 33, 36, 39, 40, 42, 43, 62, 66, 71, 72, 91, 99, 101, 102, 103], "34914304": [23, 62], "36069376": [23, 43], "37224448": 23, "38379520": 23, "39583744": 23, "40886272": 23, "42385408": 23, "8260": [23, 102], "a00028185_lh_preprocessed_fsaverage5_fwhm6": 23, "1359872": [23, 62], "42402060": 23, "2744320": 23, "4169728": 23, "5398528": 23, "7831552": 23, "9084928": 23, "10330112": 23, "11665408": 23, "13058048": 23, "14540800": [23, 39], "16039936": 23, "17539072": 23, "18841600": 23, "20185088": 23, "21372928": 23, "22577152": 23, "25149440": 23, "26509312": 23, "27901952": 23, "29261824": 23, "30703616": 23, "32243712": 23, "33783808": 23, "34816000": 23, "35938304": 23, "37101568": 23, "38256640": 23, "39477248": 23, "40755200": [23, 62], "41549824": 23, "42311680": 23, "a00028185": 23, "a00028185_left_preprocessed_fwhm6": 23, "_stats_pi": 23, "4781": 23, "constantinputwarn": 23, "856": [23, 27], "676": [24, 27, 33], "0x7fd1f2203e10": 25, "0x7fd1ed44a5d0": 25, "758": [25, 27], "991232": 26, "3066300": 26, "2228224": [26, 62], "3039232": [26, 48, 71], "779": [26, 27], "569": [27, 33, 61, 73], "auto_examples_01_plot": 27, "434": [27, 33, 49, 59], "913": [27, 34, 45], "1360": [27, 30, 42, 102], "9444444444444444": 29, "916": [29, 36, 37, 45, 98], "______________________________________________________________________": 30, "161": [30, 33, 41], "430": [30, 33, 36, 42, 44, 57, 59, 102], "107": [30, 33, 41, 43, 45, 58, 87, 96, 105], "213": [31, 32, 33, 39, 41], "bigger": [31, 39, 43], "_univariate_select": [31, 111], "15809": 31, "113": [31, 33, 41, 43, 77, 105, 111], "runtimewarn": [31, 58, 77, 79, 111], "7778": 31, "73": [32, 33, 36, 39, 40, 42, 43, 48, 62, 91, 99, 101, 102], "873": [32, 45], "1354": 32, "________________________________________________________________________________": [33, 43, 48, 49, 52, 53, 56, 58], "_filter_and_mask": 33, "0x7fd1f00de6d0": 33, "0x7fd1f00dddd0": 33, "clean_kwarg": [33, 49, 52, 53, 56, 58], "__________________________________________________filter_and_mask": 33, "0min": [33, 39, 40, 43, 48, 49, 52, 53, 54, 56, 58, 62, 101], "114769": 33, "149296": 33, "367151": 33, "779998": 33, "__________________________________________________________run_glm": 33, "44475": 33, "379275": 33, "___________________________________________________________unmask": 33, "013524": 33, "844135": 33, "217486": 33, "430348": 33, "106474": 33, "182434": 33, "747494": 33, "660679": 33, "080159": 33, "32614": 33, "253894": 33, "452682": 33, "240914": 33, "244136": 33, "0x7fd1e32c8f50": 33, "0x7fd1ed781190": 33, "660587": 33, "536042": 33, "254408": 33, "842804": 33, "871458": 33, "990755": 33, "627194": 33, "290147": 33, "153013": 33, "320123": 33, "15748": 33, "082416": 33, "997775": 33, "754066": 33, "109412": 33, "330079": 33, "030863": 33, "731439": 33, "559734": 33, "720924": 33, "0x7fd1efefc890": 33, "0x7fd1efcb2c50": 33, "205584": 33, "587189": 33, "836576": 33, "676956": 33, "695564": 33, "455092": 33, "457214": 33, "537178": 33, "803925": 33, "570463": 33, "614932": 33, "232909": 33, "527175": 33, "062723": 33, "126756": 33, "274819": 33, "635166": 33, "395548": 33, "250365": 33, "364311": 33, "0x7fd1f2297d50": 33, "0x7fd1f225e2d0": 33, "026206": 33, "974948": 33, "616334": 33, "104535": 33, "503142": 33, "639351": 33, "271132": 33, "047089": 33, "318104": 33, "724813": 33, "073279": 33, "316956": 33, "380183": 33, "690685": 33, "631912": 33, "753286": 33, "155784": 33, "065658": 33, "186135": 33, "69267": 33, "0x7fd1f2930f50": 33, "0x7fd1e33e3890": 33, "033577": 33, "45955": 33, "57195": 33, "994713": 33, "158342": 33, "068131": 33, "396497": 33, "424937": 33, "091867": 33, "463109": 33, "054041": 33, "122921": 33, "025223": 33, "562991": 33, "001653": 33, "968729": 33, "274665": 33, "667": 33, "564329": 33, "496068": 33, "0x7fd1efe9fe50": 33, "0x7fd1f26af510": 33, "150482": 33, "81308": 33, "204891": 33, "417917": 33, "987059": 33, "41717": 33, "24774": 33, "674399": 33, "731234": 33, "341998": 33, "714869": 33, "182988": 33, "222674": 33, "480354": 33, "366899": 33, "091153": 33, "2708": 33, "247146": 33, "251249": 33, "413063": 33, "0x7fd1e3426b10": 33, "0x7fd1f2294290": 33, "51173": 33, "279282": 33, "911755": 33, "839058": 33, "290412": 33, "609221": 33, "090297": 33, "822602": 33, "747918": 33, "108861": 33, "095788": 33, "376995": 33, "807425": 33, "826947": 33, "017351": 33, "622242": 33, "625042": 33, "231224": 33, "056424": 33, "672737": 33, "0x7fd1f292a2d0": 33, "0x7fd1b20b3050": 33, "915996": 33, "07737": 33, "981215": 33, "372383": 33, "200737": 33, "008536": 33, "066075": 33, "168487": 33, "636238": 33, "145684": 33, "932773": 33, "580823": 33, "455655": 33, "685537": 33, "715791": 33, "245273": 33, "099707": 33, "79538": 33, "913842": 33, "519925": 33, "629218": 33, "0x7fd1f240aa10": 33, "0x7fd1f240b050": 33, "292987": 33, "392956": 33, "935719": 33, "602484": 33, "425611": 33, "348025": 33, "31867": 33, "408223": 33, "534932": 33, "150519": 33, "149007": 33, "640215": 33, "640699": 33, "50369": 33, "246384": 33, "346316": 33, "162243": 33, "519251": 33, "203695": 33, "335337": 33, "0x7fd1f227f290": 33, "0x7fd1f27a1d90": 33, "223948": 33, "959582": 33, "677519": 33, "024363": 33, "034515": 33, "612397": 33, "62798": 33, "160445": 33, "506632": 33, "459388": 33, "261016": 33, "747236": 33, "231796": 33, "098904": 33, "148582": 33, "999934": 33, "548262": 33, "09934": 33, "222824": 33, "318977": 33, "0x7fd1efefced0": 33, "0x7fd1ed34fe10": 33, "66533": 33, "299562": 33, "647343": 33, "331865": 33, "175763": 33, "429485": 33, "146358": 33, "947626": 33, "806852": 33, "720554": 33, "008926": 33, "4544": 33, "279543": 33, "828183": 33, "463642": 33, "26599": 33, "058735": 33, "191442": 33, "390268": 33, "112207": 33, "0x7fd1f2932b10": 33, "0x7fd1e33e0850": 33, "095605": 33, "449202": 33, "59974": 33, "179998": 33, "340751": 33, "056108": 33, "043261": 33, "144442": 33, "517954": 33, "611394": 33, "797134e": 33, "317655e": 33, "398581": 33, "488427": 33, "714396": 33, "869941": 33, "924894": 33, "723724": 33, "145297": 33, "821272": 33, "\u03b1": 33, "147": [33, 41], "393": 33, "196": [33, 41], "2264": 33, "541": 33, "344": [33, 41], "492": 33, "12a": 33, "1132": 33, "639": 33, "984": 33, "16a": 33, "787": 33, "23a": 33, "27a": 33, "590": [33, 36, 42, 102], "31a": 33, "31b": 33, "41a": 33, "42a": 33, "42b": 33, "442": 33, "43a": 33, "58a": 33, "64a": 33, "67a": 33, "96a": 33, "105": [33, 41, 43], "118": [33, 41, 43], "124a": 33, "130": [33, 36, 40, 41, 42, 44, 102, 105], "138": [33, 41, 47, 59], "139": [33, 41], "144a": 33, "145": [33, 41], "146a": 33, "148": [33, 41], "157": [33, 41], "163": [33, 41], "165": [33, 41], "166": [33, 41], "169": [33, 41], "175": [33, 41], "177": [33, 41], "178": [33, 41], "179": [33, 41], "184": [33, 41], "185": [33, 41], "186": [33, 41], "190": [33, 36, 41, 42, 44, 47, 102, 105], "194": [33, 41, 65, 66, 73], "199": [33, 41], "202": [33, 41], "204a": 33, "205": [33, 41], "209": [33, 41, 69], "214": [33, 41], "219": [33, 41, 44], "220": [33, 36, 41, 42, 44, 102], "222": [33, 41, 42], "225": [33, 41], "226": [33, 41], "228": [33, 41], "235": [33, 41], "237": [33, 41], "239": [33, 41], "240": [33, 36, 41, 42, 44, 80, 82, 102], "241": [33, 41, 47, 49, 52, 54], "243": [33, 41], "244": [33, 41], "245": [33, 41], "247": [33, 41], "249": [33, 41], "253": [33, 41], "258": [33, 41], "259": [33, 41], "265": [33, 41], "268": [33, 41], "271": [33, 41], "274": [33, 41], "276": [33, 41], "279": [33, 41], "280": [33, 36, 41, 42, 44, 94, 102], "281": [33, 41], "282": [33, 41], "283": [33, 41], "285": [33, 41], "286": [33, 41], "287": [33, 41], "290": [33, 36, 41, 42, 44, 102, 109], "297": [33, 39, 41], "297a": 33, "301": [33, 41], "303": [33, 41], "305": [33, 41, 100, 109], "306": [33, 41], "307": [33, 41], "308": [33, 41], "311": [33, 41, 94], "312": [33, 41], "315": [33, 41], "316": [33, 41], "317": [33, 41, 91, 94], "318": [33, 41], "319": [33, 41], "322": [33, 41], "323": [33, 41], "324": [33, 41], "328": [33, 41, 44], "330": [33, 36, 41, 42, 44, 102], "332": [33, 41], "333": [33, 41], "334": [33, 41], "335": [33, 41], "337": [33, 41], "338": [33, 41, 70, 73], "339": [33, 41, 55, 59], "340": [33, 36, 41, 42, 44, 102], "343": [33, 41, 81, 82], "345": [33, 41, 44], "346": [33, 41], "347": [33, 41], "348": [33, 41, 56, 91], "349": [33, 41], "350": [33, 36, 41, 42, 44, 102], "351": [33, 41], "352": [33, 41], "353": [33, 41], "354": [33, 41], "355": [33, 41], "356": [33, 41, 59], "357": [33, 41, 54], "358": [33, 41], "359": [33, 41], "361": [33, 41], "362": 33, "363": 33, "364": 33, "365": 33, "366": [33, 73], "367": [33, 64], "368": 33, "369": 33, "370": [33, 36, 42, 44, 102], "372": 33, "373": 33, "373a": 33, "374": 33, "375": 33, "376": 33, "377": 33, "379": 33, "380": [33, 36, 42, 44, 102], "382": 33, "383": [33, 43], "384": 33, "385": 33, "386": 33, "387": 33, "388": 33, "389": 33, "390": [33, 36, 39, 42, 44, 45, 71, 96, 102], "391": [33, 87], "392": 33, "394": [33, 36], "395": 33, "396": 33, "398": 33, "399": 33, "401": 33, "402": 33, "403": 33, "404": 33, "406": 33, "407": 33, "408": 33, "409": 33, "411": 33, "412": 33, "413": [33, 107], "414": 33, "417": 33, "418": 33, "419": 33, "421": 33, "422": 33, "423": [33, 107], "424": 33, "425": 33, "426": 33, "427": 33, "428": 33, "429": [33, 95, 96], "431": 33, "433": 33, "437": 33, "438": 33, "439": 33, "440": [33, 36, 42, 102, 103], "443": 33, "445": [33, 96], "446": [33, 91], "447": 33, "448": 33, "449": 33, "450": [33, 36, 42, 102], "451": 33, "452": 33, "453": 33, "454": 33, "455": 33, "456": [33, 35, 45, 108, 109], "457": 33, "458": 33, "459": 33, "460": [33, 36, 42, 102], "465": 33, "466": 33, "467": [33, 73], "469": 33, "470": [33, 36, 42, 102], "471": 33, "472": 33, "473": [33, 34, 45], "474": 33, "475": 33, "476": 33, "477": 33, "478": 33, "479": 33, "480": [33, 36, 42, 102], "481": 33, "482": [33, 56, 59], "484": 33, "485": [33, 49], "486": 33, "487": 33, "488": 33, "489": 33, "490": [33, 36, 42, 102], "491": 33, "494": 33, "495": 33, "496": [33, 103], "497": 33, "498": 33, "499": 33, "501": 33, "502": [33, 98], "503": 33, "505": 33, "506": 33, "507": 33, "508": 33, "509": [33, 111], "511": [33, 78], "513": 33, "514": 33, "515": 33, "516": 33, "517": 33, "518": 33, "519": 33, "520": [33, 36, 42, 51, 59, 102], "521": 33, "522": 33, "523": [33, 65, 73], "524": 33, "525": 33, "526": 33, "527": 33, "528": [33, 44], "529": 33, "530": [33, 36, 42, 102], "531": 33, "532": 33, "533": 33, "534": 33, "535": [33, 73], "536": [33, 70], "537": 33, "538": 33, "539": [33, 101, 109], "540": [33, 36, 42, 62, 102], "542": [33, 53, 59, 88, 96], "543": [33, 48], "545": 33, "547": 33, "548": 33, "550": [33, 36, 42, 102], "553": 33, "554": 33, "555": 33, "556": 33, "557": 33, "558": 33, "560": [33, 36, 42, 102], "561": 33, "563": 33, "564": 33, "565": 33, "566": 33, "567": 33, "568": 33, "570": [33, 36, 42, 102], "571": 33, "572": 33, "574": 33, "575": [33, 96], "576": [33, 58, 59, 92], "577": 33, "578": 33, "579": 33, "580": [33, 36, 42, 102], "581": 33, "583": 33, "585": 33, "586": 33, "587": 33, "589": 33, "593": 33, "595": 33, "596": 33, "597": 33, "598": 33, "601": [33, 73], "602": 33, "603": 33, "604": 33, "605": 33, "606": 33, "607": 33, "609": 33, "610": [33, 36, 42, 102, 105, 109], "611": 33, "612": 33, "613": 33, "615": 33, "616": 33, "617": 33, "618": 33, "619": 33, "620": [33, 36, 42, 102], "622": 33, "623": 33, "624": 33, "625": 33, "626": 33, "627": 33, "628": 33, "629": 33, "631": 33, "632": 33, "633": 33, "634": 33, "635": 33, "636": 33, "637": 33, "638": 33, "640": [33, 36, 42, 102], "641": 33, "643": 33, "644": 33, "645": 33, "646": 33, "647": 33, "649": 33, "650": [33, 36, 42, 102], "651": 33, "652": 33, "653": 33, "654": 33, "655": [33, 40, 45], "656": 33, "657": 33, "659": 33, "660": [33, 36, 41, 42, 45, 102], "661": 33, "662": 33, "663": 33, "664": 33, "668": 33, "671": 33, "672": 33, "673": 33, "674": [33, 94, 96], "675": 33, "677": 33, "679": 33, "680": [33, 36, 42, 102], "682": 33, "683": 33, "684": 33, "685": 33, "686": [33, 79, 82], "687": 33, "688": 33, "689": 33, "690": [33, 36, 42, 102], "691": 33, "692": [33, 56, 59], "693": [33, 48], "694": [33, 98, 109], "695": 33, "696": 33, "697": 33, "699": [33, 59], "701": 33, "703": [33, 96], "704": 33, "705": 33, "706": 33, "707": 33, "708": 33, "709": 33, "710": [33, 36, 42, 102], "711": 33, "712": 33, "713": 33, "714": 33, "715": 33, "716": 33, "717": 33, "718": 33, "719": [33, 86, 96], "720": [33, 36, 42, 102], "721": 33, "723": 33, "724": [33, 78, 82], "725": [33, 76, 82], "726": 33, "727": 33, "728": 33, "729": 33, "730": [33, 36, 42, 102], "731": 33, "732": 33, "733": [33, 69, 73], "734": 33, "735": 33, "736": 33, "737": 33, "739": [33, 36], "740": [33, 42, 102], "741": 33, "742": 33, "743": 33, "745": 33, "746": 33, "13a": 33, "32a": 33, "7173": 33, "917": [33, 45], "9504132231404958": 34, "9177489177489176": 34, "7532467532467533": 34, "7619047619047619": 34, "735930735930736": 34, "8100": [34, 102], "6111": 34, "8930": [34, 102], "4444": 34, "8807": 34, "8411": 34, "8737": 34, "8674": 34, "_base": [34, 39, 48], "1250": [34, 42, 102], "convergencewarn": [34, 39, 48, 92, 104], "6574": 34, "601855088049469": 35, "6712058072321548": 35, "3140": [35, 45, 102], "02_decod": 36, "6805000305176": 36, "19982921635663": 36, "32425674565164": 36, "82048243019969": 36, "325744743047494": 36, "15307764006859": 36, "82167647742286": 36, "69358360477838": 36, "383759954079146": 36, "96018652258248": 36, "61083063547117": 36, "20825507051202": 36, "78989291191102": 36, "312918256940726": 36, "876384488128934": 36, "392492546823814": 36, "956117873379046": 36, "475629381511524": 36, "97595790258574": 36, "459447584000134": 36, "96624471836414": 36, "407312530769918": 36, "913570028044933": 36, "373167058802508": 36, "864236646097872": 36, "33643079825911": 36, "85276778114323": 36, "319397836678917": 36, "76775706346068": 36, "238038330146175": 36, "698341667945748": 36, "17926028857498": 36, "637880469579898": 36, "114281682124467": 36, "579574473239475": 36, "1208773335895": 36, "592186138043044": 36, "058024949600817": 36, "52268700338161": 36, "98019071589461": 36, "451418633076038": 36, "902469576909205": 36, "369069905342318": 36, "830301906710577": 36, "28861418529609": 36, "745893307400955": 36, "188196071180474": 36, "643115572959372": 36, "092821963664841": 36, "554127044149912": 36, "007487939865042": 36, "469213908486667": 36, "922642923848132": 36, "382490086409211": 36, "838600798933557": 36, "305298511586628": 36, "77713370858034": 36, "23812255540371": 36, "700636695041323": 36, "158766645228932": 36, "619109745168939": 36, "069467388402179": 36, "5213206527628085": 36, "974829568191708": 36, "433205116153041": 36, "880327299759032": 36, "333472875234808": 36, "785630978786892": 36, "2334104671449273": 36, "6869610994751": 36, "1374500901312445": 36, "585375245663646": 36, "0387314192558401": 36, "4921157237947115": 36, "lt": [36, 75, 89, 91, 92], "0x7fd1f265a3d0": 36, "gt": [36, 75, 89, 91, 92], "0x7fd1efc7a2d0": 36, "rerun": [36, 49, 52, 53, 58, 62, 75, 77], "nbviewer": [36, 49, 52, 53, 58, 62, 75, 77], "searchlightsearchlight": 36, "622592": 38, "10463676": 38, "1523712": 38, "3571712": [38, 62], "4562944": 38, "5619712": 38, "6709248": 38, "7929856": 38, "9314304": [38, 62], "5cd78c74b711572c7f41a5bddb69abca": 38, "jimura_poldrack_2012_zmap": 39, "7229": 39, "868352": 39, "104293434": 39, "1957888": 39, "8min": [39, 40, 43, 48, 62, 101], "3129344": 39, "6min": [39, 40, 43, 62, 101], "4292608": [39, 99], "5521408": 39, "5min": [39, 40, 43, 48, 62, 101], "6840320": 39, "4min": [39, 40, 43, 62, 101], "8101888": 39, "9183232": 39, "10461184": 39, "11812864": 39, "3min": [39, 40, 43, 48, 62, 101], "13164544": 39, "2min": [39, 40, 43, 48, 56, 62, 101], "15515648": 39, "16375808": 39, "17195008": 39, "20054016": 39, "21168128": 39, "22061056": 39, "23019520": 39, "24100864": 39, "25255936": 39, "27541504": 39, "28745728": 39, "30048256": [39, 62], "1min": [39, 40, 43, 49, 52, 53, 62, 101], "31522816": 39, "33316864": 39, "35520512": 39, "37249024": 39, "38305792": 39, "39526400": 39, "40566784": 39, "41639936": 39, "42459136": 39, "43417600": 39, "44400640": 39, "45383680": 39, "46243840": 39, "47226880": 39, "48283648": 39, "49364992": 39, "50397184": 39, "51478528": 39, "52633600": 39, "53911552": 39, "55451648": 39, "57401344": 39, "59678720": 39, "61186048": 39, "62308352": 39, "63029248": 39, "63520768": 39, "64077824": 39, "64651264": [39, 43], "65331200": 39, "66052096": 39, "66519040": 39, "67182592": 39, "67616768": 39, "67796992": 39, "68091904": 39, "68354048": 39, "68608000": 39, "68829184": 39, "68927488": 39, "69246976": [39, 43], "69664768": 39, "70148096": 39, "70664192": 39, "71041024": 39, "71434240": 39, "71876608": 39, "72359936": 39, "72867840": 39, "73498624": 39, "74186752": 39, "74866688": 39, "75554816": 39, "76300288": 39, "77086720": [39, 40, 43], "77864960": 39, "78659584": 39, "79544320": 39, "80429056": 39, "81534976": 39, "82984960": 39, "84500480": 39, "85925888": 39, "87203840": 39, "88317952": 39, "89497600": 39, "90669056": 39, "91512832": 39, "92545024": 39, "93429760": 39, "94158848": 39, "94830592": 39, "95567872": 39, "96354304": 39, "97189888": 39, "98140160": 39, "99098624": 39, "100261888": 39, "101662720": 39, "102694912": 39, "103432192": 39, "104243200": 39, "a4c8868ab5c651b8594da6f3204ded3a": 39, "minmaxscal": 39, "0x7fd1b21e3050": 39, "1716": [39, 45], "miyawaki2008": [40, 41, 89], "8486": 40, "1441792": 40, "161069109": 40, "3432448": [40, 48], "5570560": 40, "7266304": 40, "8658944": 40, "10043392": 40, "11411456": 40, "14295040": 40, "15818752": 40, "17416192": 40, "19087360": 40, "20652032": 40, "21905408": 40, "23166976": 40, "24444928": 40, "25403392": 40, "26312704": 40, "27238400": 40, "28196864": 40, "29089792": 40, "29851648": 40, "30711808": 40, "7min": [40, 43, 62, 101], "31293440": 40, "31891456": 40, "32923648": 40, "33529856": 40, "34127872": 40, "34783232": 40, "9min": [40, 43, 62, 101], "35504128": 40, "36290560": 40, "37150720": 40, "38297600": 40, "39501824": 40, "40763392": 40, "42180608": 40, "43147264": 40, "44032000": 40, "44933120": 40, "45817856": 40, "46759936": 40, "47759360": 40, "48848896": 40, "49995776": 40, "51232768": 40, "52830208": [40, 43], "54763520": 40, "56197120": 40, "57499648": 40, "58695680": 40, "59588608": 40, "60276736": 40, "61030400": 40, "61816832": 40, "62660608": 40, "63569920": 40, "64544768": 40, "65413120": 40, "66314240": 40, "67297280": 40, "68313088": 40, "69369856": 40, "70418432": 40, "71499776": 40, "72704000": 40, "74113024": 40, "75882496": 40, "78209024": 40, "79486976": [40, 62], "80576512": 40, "81649664": 40, "82493440": 40, "83451904": 40, "84410368": 40, "85434368": 40, "86499328": 40, "87678976": 40, "88907776": 40, "90324992": [40, 43], "92102656": 40, "93945856": 40, "95248384": 40, "96649216": 40, "97894400": 40, "99106816": 40, "100360192": 40, "101629952": 40, "102932480": 40, "104292352": [40, 62], "105717760": 40, "107331584": 40, "109232128": 40, "111214592": 40, "112959488": 40, "114532352": 40, "116162560": 40, "117891072": 40, "119480320": 40, "120946688": 40, "122183680": 40, "123387904": 40, "124649472": 40, "125919232": 40, "127221760": 40, "128622592": 40, "130048000": 40, "131620864": 40, "133193728": 40, "134914048": 40, "136658944": 40, "138100736": 40, "139583488": 40, "141156352": 40, "142704640": 40, "144252928": 40, "145850368": 40, "147537920": 40, "148897792": 40, "150462464": 40, "152141824": 40, "153862144": 40, "155238400": 40, "156762112": 40, "158425088": 40, "160104448": 40, "18b67c55cebe5e71427c5ffdcfafd948": 40, "2860": [40, 102], "5438": 40, "0x7fd1e3426ed0": 40, "data_figure_run01": [41, 89], "002": 41, "003": 41, "011": 41, "012": 41, "013": 41, "014": 41, "015": [41, 52, 59], "017": 41, "019": 41, "021": 41, "022": 41, "023": 41, "024": 41, "025": 41, "026": 41, "027": [41, 92, 96], "028": 41, "029": 41, "030": 41, "031": 41, "032": 41, "034": 41, "035": 41, "036": 41, "038": 41, "039": 41, "040": 41, "043": [41, 64, 73], "044": 41, "045": 41, "046": [41, 107, 109], "047": 41, "049": 41, "050": 41, "051": 41, "055": 41, "056": 41, "057": [41, 54, 59], "058": [41, 68, 73, 86, 96], "059": [41, 91, 96], "063": 41, "065": 41, "066": 41, "067": 41, "068": 41, "069": 41, "070": 41, "071": 41, "072": 41, "074": 41, "075": 41, "076": 41, "077": 41, "078": 41, "079": 41, "081": 41, "083": 41, "084": 41, "085": 41, "086": 41, "087": 41, "088": 41, "089": 41, "090": 41, "091": 41, "092": 41, "093": 41, "094": 41, "095": 41, "096": 41, "097": 41, "098": 41, "099": 41, "801208": 41, "413969": 41, "572388": 41, "465973": 41, "oasis1": [42, 43, 75], "oas1_0001_mr1": [42, 43, 75], "mwrc1oas1_0001_mr1_mpr_anon_fslswapdim_bet": [42, 43, 75], "mwrc2oas1_0001_mr1_mpr_anon_fslswapdim_bet": [42, 75], "670599": 42, "0x7fd1f23ec590": 42, "47552871704102": 42, "82723426818848": 42, "08793115615845": 42, "42307798067729": 42, "57533049583435": 42, "26395106315613": 42, "239974180857345": 42, "93145905222212": 42, "52055358886719": 42, "488787439134384": 42, "501522064208984": 42, "315023465590045": 42, "62662124633789": 42, "82316875457764": 42, "38646858079093": 42, "485080560048424": 42, "63966464996338": 42, "68716784084545": 42, "26353780428568": 42, "46540970551341": 42, "91712713241577": 42, "40350529125759": 42, "905873927203096": 42, "35661475554757": 42, "87558968861897": 42, "726048707962036": 42, "30427602621225": 42, "028435936680545": 42, "717721939086914": 42, "43798942401491": 42, "19881661732992": 42, "73886401422562": 42, "290353775024414": 42, "34405930114515": 42, "13338990772472": 42, "629641090120586": 42, "21443120638529": 42, "17431671554978": 42, "77507064217016": 42, "31381817353078": 42, "894636154174805": 42, "61044844185434": 42, "19186277616592": 42, "81711612191311": 42, "43071599440141": 42, "169065184063385": 42, "10783467085465": 42, "89416057505506": 42, "52923520406087": 42, "18472890951195": 42, "08070921897888": 42, "76232425839293": 42, "42762593122629": 42, "29309591707194": 42, "17676902700354": 42, "80693130059676": 42, "477959973471506": 42, "16201495287711": 42, "875569129812305": 42, "60451561717664": 42, "30487394332886": 42, "117158878045004": 42, "942975259596295": 42, "63791586860778": 42, "33260229229927": 42, "021045409716095": 42, "82380658207518": 42, "839505056836714": 42, "568795709049": 42, "27129797659058": 42, "98634151050023": 42, "749444854091593": 42, "448559231228298": 42, "141046697146272": 42, "88237616822526": 42, "750": [42, 102], "622330109278362": 42, "760": [42, 102], "382966706627293": 42, "770": [42, 102], "14768842907695": 42, "780": [42, 102], "938228429892124": 42, "790": [42, 102], "685675892648817": 42, "42202115058899": 42, "810": [42, 102], "156523713359128": 42, "820": [42, 102], "912662942235063": 42, "830": [42, 102], "750437653208355": 42, "840": [42, 61, 73, 102], "64367195538112": 42, "850": [42, 102], "43370050542495": 42, "860": [42, 102], "20147314737009": 42, "870": [42, 102], "976664724021123": 42, "880": [42, 102, 111, 112], "800689393823795": 42, "890": [42, 102], "614770760696924": 42, "380835559633045": 42, "910": [42, 102], "19955801963806": 42, "920": [42, 102], "981257656346198": 42, "930": [42, 102], "719771636429655": 42, "940": [42, 102], "470411970260294": 42, "950": [42, 102], "244568686736258": 42, "960": [42, 102], "008816878000893": 42, "970": [42, 102], "772832292871378": 42, "980": [42, 102], "534941994414037": 42, "990": [42, 102], "275560118935324": 42, "03720235824585": 42, "1010": [42, 102], "852299175640145": 42, "614781809788123": 42, "1030": [42, 102], "333482094181395": 42, "1040": [42, 102], "10169946230375": 42, "1050": [42, 102], "90081852958316": 42, "1060": [42, 102], "669113694496875": 42, "1070": [42, 102], "453102154152415": 42, "202997384247958": 42, "1090": [42, 48, 102], "987424898585047": 42, "1100": [42, 102], "706706242127854": 42, "1110": [42, 102], "466782967249554": 42, "1120": [42, 102], "22477012021201": 42, "1130": [42, 102], "987447434822013": 42, "1140": [42, 102], "73218367392557": 42, "1150": [42, 102], "47715035728786": 42, "1160": [42, 102], "22246687987755": 42, "1170": [42, 102], "977281651945198": 42, "79321376347946": 42, "1190": [42, 102], "587281445495222": 42, "1200": [42, 102], "363059361775715": 42, "1210": [42, 102], "09590788715142": 42, "1220": [42, 102], "848372553215654": 42, "1230": [42, 102], "611074455385285": 42, "1240": [42, 102], "35900564347544": 42, "101172971725465": 42, "1260": [42, 102], "83039284887768": 42, "1270": [42, 102], "588445849306": 42, "1280": [42, 102], "36214891076088": 42, "1290": [42, 102], "09680513633314": 42, "1300": [42, 102], "853067031273476": 42, "1310": [42, 102], "596222498944698": 42, "1320": [42, 102], "39253911105069": 42, "1330": [42, 102], "13880380652005": 42, "88910481111327": 42, "712102280722725": 42, "46072073543773": 42, "228189940000103": 42, "1380": [42, 102], "98424710398135": 42, "1390": [42, 102], "732615225606684": 42, "1400": [42, 102], "481214250837052": 42, "1410": [42, 102], "237010769810237": 42, "1420": [42, 102], "993096318043454": 42, "1430": [42, 102], "76049906223804": 42, "1440": [42, 102], "532062782181635": 42, "313832447446625": 42, "1460": [42, 102], "07124570624469": 42, "1470": [42, 102], "826089333514778": 42, "1480": [42, 102], "603852884189504": 42, "1490": [42, 102], "34370119779702": 42, "09323755900065": 42, "1510": [42, 102], "83035245478548": 42, "1520": [42, 102], "58322178690057": 42, "1530": [42, 102], "327862359339896": 42, "1540": [42, 102], "065250666110547": 42, "1550": [42, 102], "804288979499571": 42, "1560": [42, 102], "54022913101392": 42, "1570": [42, 102], "290385474065307": 42, "1580": [42, 102], "032663849335682": 42, "1590": [42, 102], "776618456690565": 42, "513851702213287": 42, "1610": [42, 102], "244842569280115": 42, "1620": [42, 102], "988933990031112": 42, "1630": [42, 102], "71748790711713": 42, "1640": [42, 102], "460117648287516": 42, "1650": [42, 102], "201263565005679": 42, "1660": [42, 102], "938064618283008": 42, "1670": [42, 102], "67335877875368": 42, "1680": [42, 102], "40919744400751": 42, "1690": [42, 102], "161847877784593": 42, "1700": [42, 102], "899367795271033": 42, "1710": [42, 59, 102], "642558721073886": 42, "1720": [42, 102], "383287291194118": 42, "1730": [42, 102], "121414852969219": 42, "1740": [42, 102], "857476903104234": 42, "1750": [42, 102], "598994459424699": 42, "1760": [42, 102], "33606108752164": 42, "1770": [42, 102], "07301024797946": 42, "816065552529325": 42, "1790": [42, 102], "558963118984712": 42, "1800": [42, 102], "3029722107781305": 42, "1810": [42, 102], "039848267044151": 42, "1820": [42, 102], "775380336321317": 42, "1830": [42, 102], "512631629985538": 42, "1840": [42, 102], "247497620789901": 42, "1850": [42, 102], "9807005379651046": 42, "1860": [42, 102], "721448103586833": 42, "1870": [42, 102], "45413659473154": 42, "1880": [42, 102], "187204675471529": 42, "1890": [42, 102], "9219843584393694": 42, "1900": [42, 102], "659018918087608": 42, "1910": [42, 102], "393983103217879": 42, "1920": [42, 102], "1309022804101305": 42, "1930": [42, 102], "8656492171509895": 42, "1940": [42, 102], "599018522144593": 42, "1950": [42, 102], "3320516500717554": 42, "1960": [42, 102], "0653705256325856": 42, "1970": [42, 102], "7998007481473351": 42, "1980": [42, 102], "5330767679696131": 42, "1990": [42, 102], "26655306768177744": 42, "896": [42, 45], "1922": [42, 45], "6364": 43, "archive_dartel": 43, "450560": 43, "905208634": 43, "1015808": 43, "2097152": 43, "2711552": 43, "3350528": [43, 48], "4022272": [43, 99], "4800512": 43, "5316608": [43, 62], "6086656": 43, "6897664": 43, "7708672": 43, "8544256": 43, "9371648": 43, "10108928": 43, "10977280": 43, "11837440": 43, "12574720": [43, 62], "13434880": 43, "14417920": 43, "17342464": 43, "18202624": 43, "19136512": 43, "21233664": 43, "22331392": 43, "23429120": 43, "24543232": 43, "25739264": 43, "26927104": 43, "28155904": 43, "29474816": 43, "30900224": 43, "32325632": 43, "33513472": 43, "34742272": 43, "37527552": 43, "38936576": 43, "40361984": 43, "41844736": 43, "43393024": [43, 62], "45137920": 43, "46784512": 43, "47841280": 43, "48750592": 43, "49750016": 43, "50765824": 43, "51798016": 43, "53714944": 43, "54476800": 43, "55287808": 43, "56123392": 43, "57024512": 43, "57966592": 43, "59023360": [43, 71], "60104704": 43, "61382656": 43, "63021056": 43, "66396160": 43, "68009984": 43, "70590464": 43, "71860224": 43, "73154560": 43, "73965568": 43, "75063296": 43, "76079104": 43, "78159872": 43, "79216640": 43, "80347136": 43, "81551360": 43, "82567168": 43, "83353600": 43, "84230144": 43, "85123072": 43, "86081536": 43, "87072768": 43, "88121344": 43, "89268224": 43, "91488256": 43, "92717056": 43, "94068736": 43, "95469568": 43, "96772096": 43, "98115584": 43, "99328000": 43, "100622336": 43, "101728256": 43, "102785024": 43, "103727104": 43, "104652800": 43, "105545728": 43, "106430464": 43, "107429888": 43, "108462080": 43, "109445120": 43, "110166016": 43, "111091712": 43, "112058368": 43, "113065984": 43, "114098176": 43, "115130368": 43, "116260864": 43, "117481472": 43, "118890496": 43, "120242176": 43, "121733120": 43, "123330560": 43, "124985344": 43, "126648320": 43, "128303104": 43, "130015232": 43, "131817472": 43, "133758976": 43, "135774208": 43, "137560064": 43, "139018240": 43, "140591104": 43, "141942784": 43, "143220736": 43, "144695296": 43, "146210816": 43, "147595264": 43, "148873216": 43, "150323200": 43, "151863296": 43, "153395200": 43, "154935296": 43, "156442624": 43, "158089216": 43, "159809536": 43, "161521664": 43, "163348480": 43, "165060608": 43, "166518784": 43, "167944192": 43, "169312256": 43, "170622976": 43, "171728896": 43, "172851200": 43, "173965312": 43, "175161344": 43, "176373760": 43, "177651712": 43, "178978816": 43, "180453376": 43, "182288384": 43, "184041472": 43, "185876480": 43, "187203584": 43, "188317696": 43, "189538304": 43, "190726144": 43, "191971328": 43, "193306624": 43, "194732032": 43, "195952640": 43, "197206016": 43, "198541312": 43, "199966720": 43, "201416704": 43, "202858496": 43, "204333056": 43, "205864960": 43, "207609856": 43, "209625088": 43, "211075072": 43, "212672512": 43, "214171648": 43, "215252992": 43, "216211456": 43, "217186304": 43, "218226688": 43, "219283456": 43, "220413952": 43, "221642752": 43, "222920704": 43, "224411648": 43, "225845248": 43, "227418112": 43, "229138432": 43, "230514688": 43, "231940096": 43, "233439232": 43, "234954752": 43, "236265472": 43, "237518848": 43, "238968832": 43, "240459776": 43, "241942528": 43, "243269632": 43, "244350976": 43, "245432320": 43, "246489088": 43, "247570432": 43, "248676352": 43, "249831424": 43, "251076608": 43, "252387328": 43, "253878272": 43, "255500288": 43, "257073152": 43, "258850816": 43, "260710400": 43, "262119424": 43, "262955008": 43, "263348224": 43, "263716864": 43, "263987200": 43, "264257536": 43, "264601600": 43, "265207808": 43, "265871360": 43, "266592256": 43, "267370496": 43, "268361728": 43, "269705216": 43, "271384576": 43, "273268736": 43, "274874368": 43, "276152320": 43, "277381120": 43, "278585344": 43, "279707648": 43, "280797184": 43, "282042368": 43, "283271168": 43, "284508160": 43, "285777920": 43, "287113216": 43, "288604160": 43, "290177024": 43, "291479552": 43, "292831232": 43, "294141952": 43, "295444480": 43, "296796160": 43, "298188800": 43, "299646976": 43, "301170688": 43, "302866432": 43, "304775168": 43, "306741248": 43, "308346880": 43, "309936128": 43, "311246848": 43, "312426496": 43, "313622528": 43, "314761216": 43, "315957248": 43, "317145088": 43, "318390272": 43, "319676416": 43, "321101824": 43, "322527232": 43, "323829760": 43, "325296128": 43, "326746112": 43, "327958528": 43, "329236480": 43, "330588160": 43, "331964416": 43, "333340672": 43, "334831616": 43, "336388096": 43, "337731584": 43, "339189760": 43, "340762624": 43, "342384640": 43, "343687168": 43, "345161728": 43, "346734592": 43, "348209152": 43, "348913664": 43, "349609984": 43, "350339072": 43, "351109120": 43, "351961088": 43, "352845824": 43, "353837056": 43, "354942976": 43, "356073472": 43, "357326848": 43, "358547456": 43, "359489536": 43, "360349696": 43, "361234432": 43, "362119168": 43, "363126784": 43, "364158976": 43, "365240320": 43, "366166016": 43, "367222784": 43, "368041984": 43, "368967680": 43, "369934336": 43, "370933760": 43, "371990528": 43, "373022720": 43, "374038528": 43, "375119872": 43, "376274944": 43, "377430016": 43, "378585088": 43, "379805696": 43, "381042688": 43, "382222336": 43, "383082496": 43, "383991808": 43, "384876544": 43, "385884160": 43, "386916352": 43, "388022272": 43, "389193728": 43, "390504448": 43, "392003584": 43, "393314304": 43, "394428416": 43, "395616256": 43, "396787712": 43, "398024704": 43, "399343616": 43, "400752640": 43, "402128896": 43, "403456000": 43, "404881408": 43, "406134784": 43, "407388160": 43, "408690688": 43, "410042368": 43, "411361280": 43, "412475392": 43, "413777920": 43, "415154176": 43, "416530432": 43, "417865728": 43, "418938880": 43, "420241408": 43, "421593088": 43, "422985728": 43, "424345600": 43, "425746432": 43, "427212800": 43, "428539904": 43, "429965312": 43, "431472640": 43, "432791552": 43, "434126848": 43, "435478528": 43, "436674560": 43, "437633024": 43, "438550528": 43, "439582720": 43, "440590336": 43, "441696256": 43, "442851328": 43, "444096512": 43, "445407232": 43, "447045632": 43, "449093632": 43, "451010560": 43, "452673536": 43, "454328320": 43, "455827456": 43, "457220096": 43, "458645504": 43, "459800576": 43, "461135872": 43, "462610432": 43, "464011264": 43, "465092608": 43, "466018304": 43, "466984960": 43, "467992576": 43, "469049344": 43, "470155264": 43, "471326720": 43, "472489984": 43, "473587712": 43, "474791936": 43, "475635712": 43, "476372992": 43, "477184000": 43, "477995008": 43, "478879744": 43, "479838208": 43, "480935936": 43, "482099200": 43, "483147776": 43, "484089856": 43, "485097472": 43, "486195200": 43, "487284736": 43, "488439808": 43, "489668608": 43, "490946560": 43, "492052480": 43, "493207552": 43, "494362624": 43, "495394816": 43, "496476160": 43, "497426432": 43, "498417664": 43, "499474432": 43, "500555776": 43, "501661696": 43, "502792192": 43, "503939072": 43, "505200640": 43, "506552320": 43, "507510784": 43, "508477440": [43, 101], "509280256": 43, "510132224": 43, "511000576": 43, "511950848": 43, "512942080": 43, "513974272": 43, "514883584": 43, "515866624": 43, "516923392": 43, "517758976": 43, "518668288": 43, "519749632": 43, "520847360": 43, "521977856": 43, "523067392": 43, "524222464": 43, "525467648": 43, "526868480": 43, "528400384": 43, "529891328": 43, "531202048": 43, "532496384": 43, "533880832": 43, "535298048": 43, "536723456": 43, "538247168": 43, "539811840": 43, "541417472": 43, "542777344": 43, "544423936": 43, "545824768": 43, "547176448": 43, "548577280": 43, "550002688": 43, "551075840": 43, "552337408": 43, "553517056": 43, "554598400": 43, "555769856": 43, "556933120": 43, "557842432": 43, "558923776": 43, "560128000": 43, "561356800": 43, "562552832": 43, "563765248": 43, "565067776": 43, "566468608": 43, "568074240": 43, "569532416": 43, "571080704": 43, "572637184": 43, "574005248": 43, "575209472": 43, "576348160": 43, "577576960": 43, "578764800": 43, "580034560": 43, "581263360": 43, "582393856": 43, "583614464": 43, "584581120": 43, "585687040": 43, "586784768": 43, "587898880": 43, "589070336": 43, "590331904": 43, "591634432": 43, "593158144": 43, "594624512": 43, "596058112": 43, "597303296": 43, "598663168": 43, "600039424": 43, "601415680": 43, "602857472": 43, "604364800": 43, "605937664": 43, "607657984": 43, "609771520": 43, "611786752": 43, "613187584": 43, "614514688": 43, "615415808": 43, "616079360": 43, "616701952": 43, "617291776": 43, "617971712": 43, "618708992": 43, "619454464": 43, "620331008": 43, "621240320": 43, "622256128": 43, "623583232": 43, "625197056": 43, "626376704": 43, "626802688": 43, "627089408": 43, "627294208": 43, "627580928": 43, "627949568": 43, "628514816": 43, "629080064": 43, "629719040": 43, "630382592": 43, "631193600": 43, "632209408": 43, "633675776": 43, "635699200": 43, "637362176": 43, "638820352": 43, "639926272": 43, "640811008": 43, "641720320": 43, "642719744": 43, "643735552": 43, "644833280": 43, "645971968": 43, "647200768": 43, "648675328": 43, "650190848": 43, "651698176": 43, "653049856": 43, "654401536": 43, "655826944": 43, "657227776": 43, "658505728": 43, "659759104": 43, "661135360": 43, "662560768": 43, "664027136": 43, "665460736": 43, "666935296": 43, "668311552": 43, "669597696": 43, "671055872": 43, "672587776": 43, "674029568": 43, "675315712": 43, "676741120": 43, "678289408": 43, "679837696": 43, "681385984": 43, "682926080": 43, "684359680": 43, "685735936": 43, "686940160": 43, "688168960": 43, "689446912": 43, "690724864": 43, "692092928": 43, "693477376": 43, "694902784": 43, "696475648": 43, "698261504": 43, "699498496": 43, "700702720": 43, "702005248": 43, "703184896": 43, "704233472": 43, "705437696": 43, "706699264": 43, "708018176": 43, "709279744": 43, "710582272": 43, "711974912": 43, "713457664": 43, "715227136": 43, "717381632": 43, "719921152": 43, "721666048": 43, "722870272": 43, "723746816": 43, "724516864": 43, "725303296": 43, "726188032": 43, "727146496": 43, "728129536": 43, "729202688": 43, "730365952": 43, "731840512": 43, "733315072": 43, "734814208": 43, "736182272": 43, "737542144": 43, "738893824": 43, "740319232": 43, "741785600": 43, "743317504": 43, "744865792": 43, "746168320": 43, "747225088": 43, "748404736": 43, "749608960": 43, "750764032": 43, "752017408": 43, "753065984": 43, "754204672": 43, "755474432": 43, "756531200": 43, "757694464": 43, "758923264": 43, "759537664": 43, "760299520": 43, "761110528": 43, "761970688": 43, "762871808": 43, "763781120": 43, "764772352": 43, "765853696": 43, "767074304": 43, "767991808": 43, "768925696": 43, "769875968": 43, "770867200": 43, "771940352": 43, "773046272": 43, "774258688": 43, "775659520": 43, "777109504": 43, "778584064": 43, "780025856": 43, "781115392": 43, "782123008": 43, "783179776": 43, "784252928": 43, "785416192": 43, "786620416": 43, "787939328": 43, "789291008": 43, "790839296": 43, "792150016": 43, "793329664": 43, "794533888": 43, "795762688": 43, "797032448": 43, "798367744": 43, "799784960": 43, "801267712": 43, "803004416": 43, "804651008": 43, "806445056": 43, "808370176": 43, "810311680": 43, "811638784": 43, "812843008": 43, "814170112": 43, "815521792": 43, "816603136": 43, "817758208": 43, "819003392": 43, "820084736": 43, "821149696": 43, "822296576": 43, "823402496": 43, "824590336": 43, "825892864": 43, "827244544": 43, "828219392": 43, "829038592": 43, "829915136": 43, "830783488": 43, "831766528": 43, "832798720": 43, "833929216": 43, "835125248": 43, "836608000": 43, "838131712": 43, "839753728": 43, "841564160": 43, "843481088": 43, "845373440": 43, "847290368": 43, "848871424": 43, "850468864": 43, "852262912": 43, "854130688": 43, "855678976": 43, "856784896": 43, "857743360": 43, "858750976": 43, "859758592": 43, "860856320": 43, "861970432": 43, "863215616": 43, "864501760": 43, "865951744": 43, "867475456": 43, "868966400": 43, "870154240": 43, "871481344": 43, "872800256": 43, "874176512": 43, "875536384": 43, "877035520": 43, "878559232": 43, "880173056": 43, "881213440": 43, "882147328": 43, "883007488": 43, "883695616": 43, "884547584": 43, "885481472": 43, "886374400": 43, "887308288": 43, "888315904": 43, "889364480": 43, "890527744": 43, "891969536": 43, "893861888": 43, "895934464": 43, "897974272": 43, "899645440": 43, "901439488": 43, "903233536": 43, "904798208": 43, "747": 43, "ca50951394ea282f76278201a3c0415c": 43, "oas1_0003_mr1": 43, "mwrc1oas1_0003_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0086_mr1": 43, "mwrc1oas1_0086_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0052_mr1": 43, "mwrc1oas1_0052_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0211_mr1": 43, "mwrc1oas1_0211_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0216_mr1": 43, "mwrc1oas1_0216_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0096_mr1": 43, "mwrc1oas1_0096_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0182_mr1": 43, "mwrc1oas1_0182_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0041_mr1": 43, "mwrc1oas1_0041_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0214_mr1": 43, "mwrc1oas1_0214_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0069_mr1": 43, "mwrc1oas1_0069_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0025_mr1": 43, "mwrc1oas1_0025_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0159_mr1": 43, "mwrc1oas1_0159_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0113_mr1": 43, "mwrc1oas1_0113_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0038_mr1": 43, "mwrc1oas1_0038_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0013_mr1": 43, "mwrc1oas1_0013_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0220_mr1": 43, "mwrc1oas1_0220_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0180_mr1": 43, "mwrc1oas1_0180_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0007_mr1": 43, "mwrc1oas1_0007_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0031_mr1": 43, "mwrc1oas1_0031_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0135_mr1": 43, "mwrc1oas1_0135_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0005_mr1": 43, "mwrc1oas1_0005_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0037_mr1": 43, "mwrc1oas1_0037_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0160_mr1": 43, "mwrc1oas1_0160_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0163_mr1": 43, "mwrc1oas1_0163_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0123_mr1": 43, "mwrc1oas1_0123_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0162_mr1": 43, "mwrc1oas1_0162_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0012_mr1": 43, "mwrc1oas1_0012_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0070_mr1": 43, "mwrc1oas1_0070_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0126_mr1": 43, "mwrc1oas1_0126_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0164_mr1": 43, "mwrc1oas1_0164_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0188_mr1": 43, "mwrc1oas1_0188_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0226_mr1": 43, "mwrc1oas1_0226_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0173_mr1": 43, "mwrc1oas1_0173_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0078_mr1": 43, "mwrc1oas1_0078_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0138_mr1": 43, "mwrc1oas1_0138_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0072_mr1": 43, "mwrc1oas1_0072_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0050_mr1": 43, "mwrc1oas1_0050_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0184_mr1": 43, "mwrc1oas1_0184_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0032_mr1": 43, "mwrc1oas1_0032_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0045_mr1": 43, "mwrc1oas1_0045_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0121_mr1": 43, "mwrc1oas1_0121_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0176_mr1": 43, "mwrc1oas1_0176_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0177_mr1": 43, "mwrc1oas1_0177_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0029_mr1": 43, "mwrc1oas1_0029_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0026_mr1": 43, "mwrc1oas1_0026_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0208_mr1": 43, "mwrc1oas1_0208_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0165_mr1": 43, "mwrc1oas1_0165_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0091_mr1": 43, "mwrc1oas1_0091_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0044_mr1": 43, "mwrc1oas1_0044_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0190_mr1": 43, "mwrc1oas1_0190_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0053_mr1": 43, "mwrc1oas1_0053_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0106_mr1": 43, "mwrc1oas1_0106_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0174_mr1": 43, "mwrc1oas1_0174_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0049_mr1": 43, "mwrc1oas1_0049_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0155_mr1": 43, "mwrc1oas1_0155_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0004_mr1": 43, "mwrc1oas1_0004_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0117_mr1": 43, "mwrc1oas1_0117_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0060_mr1": 43, "mwrc1oas1_0060_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0148_mr1": 43, "mwrc1oas1_0148_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0204_mr1": 43, "mwrc1oas1_0204_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0202_mr1": 43, "mwrc1oas1_0202_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0209_mr1": 43, "mwrc1oas1_0209_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0055_mr1": 43, "mwrc1oas1_0055_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0090_mr1": 43, "mwrc1oas1_0090_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0039_mr1": 43, "mwrc1oas1_0039_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0009_mr1": 43, "mwrc1oas1_0009_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0124_mr1": 43, "mwrc1oas1_0124_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0103_mr1": 43, "mwrc1oas1_0103_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0094_mr1": 43, "mwrc1oas1_0094_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0200_mr1": 43, "mwrc1oas1_0200_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0205_mr1": 43, "mwrc1oas1_0205_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0101_mr1": 43, "mwrc1oas1_0101_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0010_mr1": 43, "mwrc1oas1_0010_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0015_mr1": 43, "mwrc1oas1_0015_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0067_mr1": 43, "mwrc1oas1_0067_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0193_mr1": 43, "mwrc1oas1_0193_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0146_mr1": 43, "mwrc1oas1_0146_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0019_mr1": 43, "mwrc1oas1_0019_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0080_mr1": 43, "mwrc1oas1_0080_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0199_mr1": 43, "mwrc1oas1_0199_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0150_mr1": 43, "mwrc1oas1_0150_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0189_mr1": 43, "mwrc1oas1_0189_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0207_mr1": 43, "mwrc1oas1_0207_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0071_mr1": 43, "mwrc1oas1_0071_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0061_mr1": 43, "mwrc1oas1_0061_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0120_mr1": 43, "mwrc1oas1_0120_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0056_mr1": 43, "mwrc1oas1_0056_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0223_mr1": 43, "mwrc1oas1_0223_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0065_mr1": 43, "mwrc1oas1_0065_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0054_mr1": 43, "mwrc1oas1_0054_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0099_mr1": 43, "mwrc1oas1_0099_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0023_mr1": 43, "mwrc1oas1_0023_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0064_mr1": 43, "mwrc1oas1_0064_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0181_mr1": 43, "mwrc1oas1_0181_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0217_mr1": 43, "mwrc1oas1_0217_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0144_mr1": 43, "mwrc1oas1_0144_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0042_mr1": 43, "mwrc1oas1_0042_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0178_mr1": 43, "mwrc1oas1_0178_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0218_mr1": 43, "mwrc1oas1_0218_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0002_mr1": 43, "mwrc1oas1_0002_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0059_mr1": 43, "mwrc1oas1_0059_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0167_mr1": 43, "mwrc1oas1_0167_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0145_mr1": 43, "mwrc1oas1_0145_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0169_mr1": 43, "mwrc1oas1_0169_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0115_mr1": 43, "mwrc1oas1_0115_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0111_mr1": 43, "mwrc1oas1_0111_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0131_mr1": 43, "mwrc1oas1_0131_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0098_mr1": 43, "mwrc1oas1_0098_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0082_mr1": 43, "mwrc1oas1_0082_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0136_mr1": 43, "mwrc1oas1_0136_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0227_mr1": 43, "mwrc1oas1_0227_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0022_mr1": 43, "mwrc1oas1_0022_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0212_mr1": 43, "mwrc1oas1_0212_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0079_mr1": 43, "mwrc1oas1_0079_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0119_mr1": 43, "mwrc1oas1_0119_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0016_mr1": 43, "mwrc1oas1_0016_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0104_mr1": 43, "mwrc1oas1_0104_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0203_mr1": 43, "mwrc1oas1_0203_mr1_mpr_anon_fslswapdim_bet": 43, "oas1_0114_mr1": 43, "mwrc1oas1_0114_mr1_mpr_anon_fslswapdim_bet": 43, "space_net": 43, "941": 43, "path_scor": 43, "_graph_net_squared_loss": 43, "0x7fd1e3298e00": 43, "is_classif": 43, "2652228933482088": 43, "1792": 43, "persist": [43, 48, 92], "_____________________________________________________path_scor": 43, "elaps": [43, 48], "1805408000946": 43, "386342346668243": 43, "937": [43, 45], "2487": 43, "94590759277344": 44, "481922838078948": 44, "540979136658539": 44, "471739346424508": 44, "496690857745143": 44, "52042126367086": 44, "01930719661232": 44, "985643951981157": 44, "855918270980307": 44, "453287905131289": 44, "080981565088226": 44, "878148724877355": 44, "570692860882775": 44, "200613364938804": 44, "912669879424283": 44, "624798946116926": 44, "336682027668469": 44, "0940711171078705": 44, "8375970154664545": 44, "555652014284364": 44, "24655993659347": 44, "98031183854711": 44, "7408361562736": 44, "500827424065856": 44, "2516254923856875": 44, "017661877940804": 44, "779810918567783": 44, "540756368637085": 44, "302069993431857": 44, "072703605115139": 44, "857491480590012": 44, "6327577910428586": 44, "4166159502999967": 44, "211113126728294": 44, "002267358263687": 44, "797072631816634": 44, "5859084864931923": 44, "3764553218992976": 44, "156150191954561": 44, "9423678324821515": 44, "7180512699739423": 44, "49643090650236765": 44, "27031527853531995": 44, "04466648472584117": 44, "auto_examples_02_decod": 45, "2486": 45, "1359": 45, "1353": 45, "yeo_2011": 47, "pub": 47, "yeo_jneurophysiol11_mni152": 47, "196608": [47, 62], "458752": 47, "786432": 47, "1163264": 47, "1630208": 47, "2170880": 47, "d7a5390bfb7686fb41fa64cc2ba058d0": 47, "yeo2011_17networks_mni152_freesurferconformed1mm_liberalmask": 47, "development_fmri": [47, 48, 49, 52, 53, 54, 55, 56, 58, 85, 91, 92, 95, 104], "pixar123_task": [47, 48, 49, 52, 53, 54, 55, 56, 58, 85, 91, 92, 95, 104], "pixar_spac": [47, 48, 49, 52, 53, 54, 55, 56, 58, 85, 91, 92, 95, 104], "mni152nlin2009casym_desc": [47, 48, 49, 52, 53, 54, 55, 56, 58, 85, 91, 92, 95, 104], "pixar_desc": [47, 52, 53, 55, 56, 58], "reducedconfounds_regressor": [47, 52, 53, 55, 56, 58], "0x7fd1ed633e10": 47, "difumo_atlas": 47, "1080837": 47, "0fd53859aa9fed124e741c85ec45c705": 47, "4k9bf": 47, "cache_mixin": [47, 49, 52, 54], "1711": 47, "5c8ff3e14712b400183b7097": 48, "5c8ff3e32286e80018c3e42c": 48, "3629056": 48, "4946416": 48, "5c8ff3e4a743a9001760814f": 48, "5c8ff3e54712b400183b70a5": 48, "5c8ff3e52286e80018c3e439": 48, "5c8ff3e72286e80017c41b3d": 48, "5845425": 48, "5c8ff3e9a743a90017608158": 48, "5c8ff3e82286e80018c3e443": 48, "4186112": [48, 99], "6522229": 48, "5c8ff3ea4712b400183b70b7": 48, "5c8ff3eb2286e80019c3c194": 48, "3661824": [48, 99], "6139107": 48, "5c8ff37da743a90018606df1": 48, "5c8ff37c2286e80019c3c102": 48, "4841472": 48, "6293165": 48, "5cb4701e3992690018133d4f": 48, "5cb46e6b353c58001b9cb34f": 48, "3399680": 48, "6136523": 48, "5c8ff37d4712b400193b5b54": 48, "5c8ff37d4712b400183b7011": 48, "3317760": 48, "5837641": 48, "5c8ff37e2286e80016c3c2cb": 48, "5c8ff3832286e80019c3c10f": 48, "4005888": 48, "6118892": 48, "5c8ff3822286e80018c3e37b": 48, "5c8ff382a743a90018606df8": 48, "3235840": 48, "6453693": 48, "5c8ff3814712b4001a3b5561": 48, "5c8ff3832286e80016c3c2d1": 48, "3858432": 48, "6176491": 48, "5c8ff3842286e80017c419e0": 48, "5c8ff3854712b4001a3b5568": 48, "4579328": [48, 62, 99], "6225801": 48, "5cb4702f39926900171090ee": 48, "5cb46e8b353c58001c9abe98": 48, "3465216": 48, "6232787": 48, "5c8ff3872286e80017c419ea": 48, "5c8ff3872286e80017c419e9": 48, "7361169": 48, "5c8ff3884712b400183b7023": 48, "5c8ff3884712b400193b5b5c": 48, "4243456": 48, "6586819": 48, "5c8ff389a743a9001660a016": 48, "5c8ff38c2286e80016c3c2da": 48, "3596288": 48, "6111716": 48, "5c8ff38ca743a90018606df": 48, "5c8ff38ca743a9001760809": 48, "6067448": 48, "5cb47056353c58001c9ac064": 48, "5cb46e5af2be3c001801f799": 48, "6122113": 48, "5cb4703bf2be3c001801fa49": 48, "5cb46e92a3bc970019f0717f": 48, "3579904": 48, "6295931": 48, "5c8ff38c4712b4001a3b5573": 48, "5c8ff38da743a900176080a2": 48, "3121152": 48, "6384587": 48, "5cb47016a3bc970017efe44f": 48, "5cb46e43f2be3c0017056b8a": 48, "2826240": 48, "5934622": 48, "5cb470413992690018133d8c": 48, "5cb46e9a353c58001c9abeac": 48, "3301376": 48, "6316470": 48, "5c8ff38f2286e80018c3e38d": 48, "5c8ff3914712b4001a3b5579": 48, "3153920": 48, "6020576": 48, "5cb4702a353c58001b9cb5a": 48, "5cb46e9b39926900190fad5c": 48, "3563520": 48, "6551822": 48, "5c8ff391a743a900176080a9": 48, "5c8ff3914712b400173b5329": 48, "6116459": 48, "5cb47023353c58001c9ac02b": 48, "5cb46eaa39926900160f69af": 48, "6752586": 48, "5c8ff3912286e80018c3e393": 48, "5c8ff3952286e80017c41a1b": 48, "2613248": 48, "6023997": 48, "5cb47045a3bc970019f073a0": 48, "5cb46e913992690018133b1c": 48, "3710976": [48, 62], "6312316": 48, "5cb47052f2be3c0017057069": 48, "5cb46e5c353c5800199ac79f": 48, "3743744": 48, "6031594": 48, "pixar124_task": 48, "pixar125_task": 48, "pixar126_task": 48, "pixar127_task": 48, "pixar128_task": 48, "pixar001_task": [48, 53, 85], "pixar002_task": [48, 53], "pixar003_task": [48, 53], "pixar004_task": 48, "pixar005_task": 48, "pixar006_task": 48, "pixar007_task": 48, "pixar008_task": 48, "pixar009_task": 48, "pixar010_task": 48, "pixar011_task": 48, "pixar012_task": 48, "pixar013_task": 48, "pixar014_task": 48, "pixar015_task": 48, "pixar016_task": 48, "pixar017_task": 48, "pixar018_task": 48, "pixar019_task": 48, "pixar020_task": 48, "pixar021_task": 48, "pixar022_task": 48, "pixar023_task": 48, "pixar024_task": 48, "functool": 48, "0x7fd1e38cc680": 48, "887": [48, 96], "extmath": 48, "randomized_svd": 48, "003659": 48, "013254": 48, "012477": 48, "002881": 48, "___________________________________________________randomized_svd": 48, "_fastica": [48, 92, 104], "004071": 48, "000497": 48, "005856": 48, "004765": 48, "fun": 48, "209652396": 48, "_________________________________________________________fastica": 48, "398764591": 48, "924231285": 48, "1478610112": 48, "441365315": 48, "1537364731": 48, "192771779": 48, "1491434855": 48, "1819583497": 48, "530702035": 48, "0x7fd1eff89210": 48, "001315": 48, "004387": 48, "011243": 48, "004194": 48, "00289": 48, "002135": 48, "005107": 48, "012507": 48, "_compute_load": 48, "007157": 48, "008323": 48, "00533": 48, "00277": 48, "622651": 48, "322742": 48, "777205": 48, "743122": 48, "_________________________________________________compute_load": 48, "_dict_learn": [48, 50], "dict_learning_onlin": 48, "13408": 48, "021705": 48, "113004": 48, "380214": 48, "return_cod": 48, "____________________________________________dict_learning_onlin": 48, "0x7fd1f230e490": 48, "_explained_vari": 48, "227098e": 48, "322679e": 48, "384569e": 48, "084734e": 48, "______________________________________________explained_vari": 48, "922": [48, 59], "2536": 48, "_estimator_fit": 49, "015617": 49, "000716": 49, "002017": 49, "000423": 49, "24256x24256": 49, "162682": 49, "_agglom": 49, "ward_tre": 49, "return_dist": 49, "________________________________________________________ward_tre": 49, "____________________________________________________estimator_fit": 49, "974": [49, 79], "base_mask": [49, 52, 53, 56, 58, 92], "_filter_and_extract": [49, 52, 53, 54, 56, 58], "0x7fd1b37f6490": 49, "nifti_labels_mask": [49, 56, 91], "_extractionfunctor": [49, 52, 53, 56, 58], "0x7fd1f258fa50": 49, "0x7fd1b2ec4bd0": 49, "0x7fd1b4954410": 49, "_______________________________________________filter_and_extract": [49, 52, 53, 56, 58], "0x7fd1b26775d0": 49, "006183": 49, "010417": 49, "011582": 49, "000419": 49, "x27": [49, 62, 89, 91], "parcellationsparcel": 49, "0x7fd1efd20f50": 49, "0x7fd1cf1bcc90": 49, "_________________________________recursive_neighbor_agglomer": 49, "0x7fd1f00094d0": 49, "0x7fd1b2e49010": 49, "0x7fd1f258ea90": 49, "0x7fd1b3426290": 49, "0x7fd1ecf25d10": 49, "0x7fd1b54359d0": 49, "0x7fd1b38980d0": 49, "0x7fd1b3743190": 49, "0x7fd1b31a2ed0": 49, "0x7fd1cf1bdd90": 49, "1978": 49, "0x7fd1ecdaf9d0": 50, "0x7fd1b230df50": 50, "0x7fd1b38b9250": 50, "813": [50, 59], "1148": 50, "aud": 51, "striat": 51, "occ": 51, "att": 51, "basal": 51, "vi": 51, "dor": 51, "cing": 51, "Ins": 51, "ant": 51, "ip": 51, "0x7fd1ed5a2510": 51, "0x7fd1af3b3fd0": 51, "1187": [51, 99], "yr3av": 52, "5c8ff3df4712b400183b7092": 52, "5c8ff3e04712b400193b5bdf": 52, "4571136": 52, "5642698": 52, "0x7fd1e33249d0": 52, "_____________________________________________________resample_img": 52, "nifti_maps_mask": [52, 53], "0x7fd1ecea8c50": 52, "graphicallassocvgraphicallassocv": [52, 53, 58], "axesimag": [52, 54, 56], "0x7fd1e33e0350": 52, "0x7fd1efcd9810": 52, "0x7fd1ed8d1950": 52, "1143": [52, 59], "__________________________________________high_variance_confound": 53, "0x7fd1b5b51490": 53, "174325": 53, "048779": 53, "044073": 53, "155444": 53, "0x7fd1f01437d0": 53, "151677": 53, "057023": 53, "206928": 53, "102714": 53, "0x7fd1f2668dd0": 53, "127944": 53, "087084": 53, "015679": 53, "02587": 53, "0x7fd1c4001210": 53, "089762": 53, "062316": 53, "065223": 53, "022868": 53, "841e": 53, "graphical_lasso": 53, "68e": 53, "123e": 53, "664e": 53, "158e": 53, "389e": 53, "530e": 53, "318e": 53, "844e": 53, "________________________________________resample_img": 54, "__________________________________filter_and_extract": [54, 56], "0x7fd1f29dacd0": 54, "32504": 55, "954": 55, "762": 55, "874f": 55, "nifti1head": [56, 91], "sizeof_hdr": [56, 91], "data_typ": [56, 91], "db_name": [56, 91], "session_error": [56, 91], "dim_info": [56, 91], "intent_p1": [56, 91], "intent_p2": [56, 91], "intent_p3": [56, 91], "intent_cod": [56, 91], "datatyp": [56, 91], "bitpix": [56, 91], "slice_start": [56, 91], "pixdim": [56, 91], "vox_offset": [56, 91], "scl_slope": [56, 91], "scl_inter": [56, 91], "slice_end": [56, 91], "slice_cod": [56, 91], "xyzt_unit": [56, 91], "cal_max": [56, 91], "cal_min": [56, 91], "slice_dur": [56, 91], "toffset": [56, 91], "glmax": [56, 91], "glmin": [56, 91], "descrip": [56, 91], "aux_fil": [56, 91], "qform_cod": [56, 91], "sform_cod": [56, 91], "quatern_b": [56, 91], "quatern_c": [56, 91], "quatern_d": [56, 91], "qoffset_x": [56, 91], "qoffset_i": [56, 91], "qoffset_z": [56, 91], "srow_x": [56, 91], "srow_i": [56, 91], "srow_z": [56, 91], "intent_nam": [56, 91], "0x7fd1b2f5d350": 56, "0x7fd1b2f90590": 56, "0x7fd1b2fbc450": 56, "0x7fd1b4f71fd0": 56, "0x7fd1ecf25950": 56, "cosine00": 56, "cosine01": 56, "cosine02": 56, "cosine03": 56, "rot_x": 56, "rot_i": 56, "rot_z": 56, "trans_x": 56, "trans_i": 56, "trans_z": 56, "white_matt": 56, "0x7fd1b6ea43d0": 56, "109104": 56, "109090": 56, "109066": 56, "109033": 56, "675004": 56, "000304": 56, "000583": 56, "000201": 56, "006621": 56, "026078": 56, "055006": 56, "876886": 56, "108937": 56, "108723": 56, "108423": 56, "902773": 56, "000316": 56, "000418": 56, "000135": 56, "000668": 56, "027587": 56, "049458": 56, "418909": 56, "108990": 56, "108632": 56, "108038": 56, "107207": 56, "629915": 56, "000285": 56, "000595": 56, "000076": 56, "006628": 56, "019085": 56, "075787": 56, "540842": 56, "108875": 56, "108176": 56, "107012": 56, "105391": 56, "601793": 56, "000226": 56, "001049": 56, "000041": 56, "009347": 56, "023900": 56, "053022": 56, "922085": 56, "107567": 56, "105651": 56, "102986": 56, "258970": 56, "0x7fd1b2fdc1d0": 56, "0x7fd1b1d6aa90": 56, "097319": 56, "110228": 56, "100980": 56, "127209": 56, "568192": 56, "000305": 56, "000586": 56, "000279": 56, "005385": 56, "024472": 56, "048861": 56, "796008": 56, "097281": 56, "110075": 56, "100637": 56, "126600": 56, "795961": 56, "000315": 56, "000422": 56, "000213": 56, "000568": 56, "025982": 56, "043313": 56, "338031": 56, "097205": 56, "109770": 56, "099952": 56, "125384": 56, "523103": 56, "000284": 56, "000598": 56, "000154": 56, "005391": 56, "017480": 56, "069643": 56, "459963": 56, "097090": 56, "109313": 56, "098926": 56, "123568": 56, "494981": 56, "001053": 56, "000119": 56, "008110": 56, "022294": 56, "046877": 56, "841207": 56, "096938": 56, "108705": 56, "097565": 56, "121163": 56, "152159": 56, "0x7fd1d1920610": 56, "0x7fd1b2b9acd0": 56, "997517": 56, "229693": 56, "059988": 56, "778077": 56, "0530": 56, "0x7fd1b1d05d90": 56, "group_sparse_cov": 57, "nifti_spheres_mask": 58, "0x7fd1b7a83c90": 58, "butterworth__padtyp": 58, "0x7fd1b5445f50": 58, "dict_kei": 58, "_method": 58, "0x7fd1e3366c90": 58, "0x7fd1c10a1510": 58, "0x7fd1ed3b8d50": 58, "0x7fd1efd40850": 58, "cingulo": 58, "opercular": [58, 91], "occipit": [58, 91], "sensorimotor": 58, "auto_examples_03_connect": 59, "2535": 59, "1147": 59, "1977": 59, "86xj7": 62, "6479872": 62, "58172802": 62, "14671872": 62, "22716416": 62, "30482432": 62, "36790272": 62, "52912128": 62, "amazonaw": 62, "10159": 62, "417792": 62, "15055201": 62, "1130496": 62, "6168576": 62, "7995392": 62, "10674176": 62, "12173312": 62, "13598720": 62, "15040512": 62, "10159_t1w_brainmask": 62, "10159_t1w_dtissu": 62, "10159_t1w_inflat": 62, "surf": 62, "1236992": 62, "2593699": 62, "1032192": 62, "2794836": 62, "10159_t1w_midthick": 62, "909312": 62, "2586189": 62, "2056192": 62, "942080": 62, "2788694": 62, "2072576": 62, "10159_t1w_pial": 62, "999424": 62, "2590285": 62, "2285568": 62, "696320": 62, "2793106": 62, "1933312": 62, "10159_t1w_preproc": 62, "1007616": 62, "40628750": 62, "2195456": 62, "3522560": 62, "4915200": 62, "6062080": 62, "7208960": 62, "8511488": 62, "9871360": 62, "11247616": 62, "12591104": 62, "13983744": 62, "15458304": 62, "17113088": 62, "19013632": 62, "21413888": 62, "23904256": 62, "28188672": 62, "29597696": 62, "30777344": 62, "31809536": 62, "32849920": 62, "33898496": 62, "35004416": 62, "36126720": 62, "37306368": 62, "38592512": 62, "40075264": 62, "10159_t1w_smoothwm": 62, "2581722": 62, "2080768": 62, "925696": 62, "2783579": 62, "2023424": 62, "10159_t1w_space": 62, "mni152nlin2009casym_brainmask": 62, "mni152nlin2009casym_class": 62, "csf_probtissu": 62, "7247027": 62, "2318336": 62, "3416064": 62, "5767168": 62, "6963200": 62, "gm_probtissu": 62, "753664": 62, "7392069": 62, "1794048": 62, "2703360": 62, "3694592": 62, "4669440": 62, "5726208": 62, "6807552": 62, "wm_probtissu": 62, "1171456": 62, "7447835": 62, "2392064": 62, "4513792": 62, "5627904": 62, "6774784": 62, "mni152nlin2009casym_preproc": 62, "8309334": 62, "3293184": 62, "4546560": 62, "5783552": 62, "7102464": 62, "mni152nlin2009casym_warp": 62, "h5": 62, "425984": 62, "102374780": 62, "1105920": 62, "2187264": 62, "3891200": 62, "6275072": 62, "8536064": 62, "10780672": 62, "12820480": 62, "14974976": 62, "17047552": 62, "18825216": 62, "20807680": 62, "24723456": 62, "26492928": 62, "30195712": 62, "32055296": 62, "33660928": 62, "36143104": 62, "37453824": 62, "38739968": 62, "40042496": 62, "41418752": 62, "42885120": 62, "44384256": 62, "46153728": 62, "47931392": 62, "49725440": 62, "51675136": 62, "53190656": 62, "54894592": 62, "56614912": 62, "58327040": 62, "60080128": 62, "61890560": 62, "63758336": 62, "65757184": 62, "68018176": 62, "70541312": 62, "72794112": 62, "75038720": 62, "77012992": 62, "79151104": 62, "81289216": 62, "83255296": 62, "85098496": 62, "86859776": 62, "88145920": 62, "89415680": 62, "90734592": 62, "92061696": 62, "93421568": 62, "94846976": 62, "96305152": 62, "97878016": 62, "99647488": 62, "101621760": 62, "10159_task": 62, "stopsignal_bold_confound": 62, "stopsignal_bold_spac": 62, "57344": 62, "120927302": 62, "352256": 62, "1204224": 62, "1777664": 62, "2424832": 62, "3137536": 62, "3923968": 62, "4775936": 62, "5742592": 62, "8740864": 62, "10240000": 62, "11542528": 62, "12935168": 62, "14344192": 62, "15826944": 62, "17309696": 62, "18489344": 62, "19800064": 62, "21266432": 62, "22700032": 62, "23994368": 62, "25452544": 62, "27000832": 62, "28606464": 62, "31424512": 62, "34349056": 62, "35930112": 62, "37519360": 62, "39100416": 62, "40738816": 62, "42426368": 62, "44007424": 62, "45629440": 62, "47407104": 62, "48906240": 62, "50348032": 62, "51912704": 62, "53460992": 62, "55066624": 62, "56705024": 62, "58425344": 62, "60219392": 62, "62291968": 62, "64135168": 62, "65945600": 62, "67526656": 62, "69271552": 62, "70991872": 62, "72736768": 62, "74317824": 62, "75505664": 62, "76546048": 62, "77488128": [62, 71], "78512128": 62, "80584704": 62, "81731584": 62, "82952192": 62, "84254720": 62, "85786624": 62, "87736320": 62, "89899008": 62, "91480064": 62, "93069312": 62, "94773248": 62, "96272384": 62, "97665024": 62, "99278848": 62, "100917248": 62, "102637568": 62, "105979904": 62, "107446272": 62, "109068288": 62, "110755840": 62, "112492544": 62, "114180096": 62, "115613696": 62, "116899840": 62, "118120448": 62, "119373824": 62, "120643584": 62, "1r": 62, "jpg": 62, "flirt": 62, "bg": 62, "logo": 62, "maco": 62, "tiff": 62, "fslstart": 62, "49152": 62, "215724": 62, "172032": 62, "fugu": 62, "vert2": 62, "ramp": 62, "absbrainthresh": 62, "custom_timing_fil": 62, "ev1": 62, "ev10": 62, "ev11": 62, "ev12": 62, "ev13": 62, "ev14": 62, "ev15": 62, "ev16": 62, "ev17": 62, "ev18": 62, "ev19": 62, "ev2": 62, "ev3": 62, "ev4": 62, "ev5": 62, "ev6": 62, "ev7": 62, "ev8": 62, "ev9": 62, "frf": 62, "fsf": 62, "ppm": 62, "892928": 62, "2062059": 62, "trg": 62, "design_cov": 62, "106496": 62, "1285140": 62, "319488": 62, "598016": 62, "example_func": 62, "filtered_func_data": 62, "1187840": 62, "55009731": 62, "3031040": 62, "5070848": 62, "6791168": 62, "8273920": 62, "9715712": 62, "11124736": 62, "14016512": 62, "15441920": 62, "16556032": 62, "17620992": 62, "18702336": 62, "20873216": 62, "22003712": 62, "23224320": 62, "24535040": 62, "26009600": 62, "27754496": 62, "29999104": 62, "31997952": 62, "34103296": 62, "35897344": 62, "37658624": 62, "39116800": 62, "42409984": 62, "44064768": 62, "45457408": 62, "46931968": 62, "48553984": 62, "50118656": 62, "51527680": 62, "53043200": 62, "54648832": 62, "feat0": 62, "feat0_init": 62, "e60127": 62, "o60127": 62, "feat1": 62, "feat1a_init": 62, "feat2_pr": 62, "e60564": 62, "o60564": 62, "feat3_film": 62, "e61431": 62, "o61431": 62, "feat3_stat": 62, "feat4_post": 62, "e120148": 62, "o120148": 62, "feat5_stop": 62, "e134343": 62, "o134343": 62, "feat9": 62, "report_log": 62, "report_poststat": 62, "report_prestat": 62, "report_reg": 62, "report_stat": 62, "cope1": 62, "cope10": 62, "cope11": 62, "cope12": 62, "cope13": 62, "cope14": 62, "cope15": 62, "cope16": 62, "cope17": 62, "221387": 62, "cope18": 62, "122880": 62, "221391": 62, "cope19": 62, "cope2": 62, "cope20": 62, "212992": 62, "221701": 62, "cope21": 62, "cope22": 62, "cope23": 62, "cope24": 62, "cope3": 62, "cope4": 62, "cope5": 62, "cope6": 62, "cope7": 62, "cope8": 62, "cope9": 62, "logfil": 62, "pe1": 62, "pe10": 62, "pe11": 62, "pe12": 62, "pe13": 62, "pe14": 62, "pe15": 62, "pe16": 62, "pe17": 62, "pe18": 62, "pe19": 62, "pe2": 62, "pe20": 62, "pe21": 62, "pe22": 62, "pe23": 62, "pe24": 62, "pe25": 62, "pe26": 62, "pe27": 62, "pe28": 62, "pe3": 62, "pe4": 62, "pe5": 62, "pe6": 62, "pe7": 62, "pe8": 62, "pe9": 62, "res4d": 62, "1253376": 62, "59250229": 62, "2924544": 62, "4530176": 62, "5873664": 62, "7192576": 62, "8617984": 62, "9994240": 62, "14311424": 62, "15597568": 62, "17129472": 62, "18644992": 62, "20234240": 62, "21798912": 62, "23379968": 62, "25034752": 62, "26796032": 62, "28811264": 62, "30638080": 62, "32677888": 62, "34299904": 62, "35414016": 62, "36282368": 62, "37134336": 62, "37986304": 62, "38879232": 62, "39780352": 62, "40804352": 62, "41852928": 62, "43016192": 62, "44359680": [62, 71], "45891584": 62, "47374336": 62, "48832512": 62, "50192384": 62, "51601408": 62, "53059584": 62, "54525952": 62, "55984128": 62, "57589760": 62, "sigmasquar": 62, "threshac1": 62, "966656": 62, "2971012": 62, "2154496": 62, "tstat1": 62, "tstat10": 62, "tstat11": 62, "tstat12": 62, "tstat13": 62, "220502": 62, "tstat14": 62, "220506": 62, "tstat15": 62, "tstat16": 62, "tstat17": 62, "tstat18": 62, "tstat19": 62, "tstat2": 62, "tstat20": 62, "tstat21": 62, "tstat22": 62, "tstat23": 62, "tstat24": 62, "tstat3": 62, "tstat4": 62, "tstat5": 62, "tstat6": 62, "tstat7": 62, "tstat8": 62, "tstat9": 62, "varcope1": 62, "varcope10": 62, "varcope11": 62, "varcope12": 62, "varcope13": 62, "varcope14": 62, "varcope15": 62, "varcope16": 62, "varcope17": 62, "varcope18": 62, "varcope19": 62, "varcope2": 62, "varcope20": 62, "varcope21": 62, "varcope22": 62, "varcope23": 62, "varcope24": 62, "varcope3": 62, "varcope4": 62, "varcope5": 62, "varcope6": 62, "varcope7": 62, "varcope8": 62, "varcope9": 62, "zstat1": 62, "zstat10": 62, "zstat11": 62, "zstat13": 62, "zstat14": 62, "zstat15": 62, "zstat16": 62, "zstat17": 62, "zstat18": 62, "zstat19": 62, "zstat2": 62, "zstat20": 62, "zstat21": 62, "zstat22": 62, "zstat23": 62, "zstat24": 62, "zstat3": 62, "zstat4": 62, "zstat5": 62, "zstat6": 62, "zstat7": 62, "zstat8": 62, "zstat9": 62, "1024000": 62, "1897521": 62, "37482590": 62, "3506176": 62, "4825088": 62, "6152192": 62, "7503872": 62, "8912896": 62, "10395648": 62, "11943936": 62, "13549568": 62, "16244736": 62, "17530880": 62, "18890752": 62, "20267008": 62, "21676032": 62, "23134208": 62, "24707072": 62, "26460160": 62, "28516352": 62, "31006720": 62, "33169408": 62, "35651584": 62, "e3328": 62, "o3328": 62, "e4486": 62, "o4486": 62, "e8788": 62, "o8788": 62, "e22680": 62, "o22680": 62, "e58254": 62, "o58254": 62, "40353955": 62, "2334720": 62, "5177344": 62, "6569984": 62, "8028160": 62, "9297920": 62, "10641408": 62, "12034048": 62, "13271040": 62, "14524416": 62, "15810560": 62, "18456576": 62, "19865600": 62, "21364736": 62, "22142976": 62, "22822912": 62, "23535616": 62, "24305664": 62, "25141248": 62, "26968064": 62, "27992064": 62, "29270016": 62, "30941184": 62, "33234944": 62, "35291136": 62, "36577280": 62, "37847040": 62, "1417216": 62, "2348847": 62, "217894": 62, "taskswitch": 62, "ev20": 62, "ev21": 62, "ev22": 62, "ev23": 62, "ev24": 62, "ev25": 62, "ev26": 62, "3553697": 62, "491520": 62, "647168": 62, "1884160": 62, "2441216": 62, "3063808": 62, "2154535": 62, "1097728": 62, "42963299": 62, "2408448": 62, "3833856": 62, "8323072": 62, "9822208": 62, "11091968": 62, "12558336": 62, "14106624": 62, "15671296": 62, "17252352": 62, "18857984": 62, "20217856": 62, "21569536": 62, "23085056": 62, "26378240": 62, "27975680": 62, "29614080": 62, "30973952": 62, "32153600": 62, "33325056": 62, "34521088": 62, "35725312": 62, "37011456": 62, "38322176": 62, "39690240": 62, "41197568": 62, "42893312": 62, "e182384": 62, "o182384": 62, "e183363": 62, "o183363": 62, "e183962": 62, "o183962": 62, "e194150": 62, "o194150": 62, "e52571": 62, "o52571": 62, "221603": 62, "cope25": 62, "cope26": 62, "cope27": 62, "cope28": 62, "cope29": 62, "cope30": 62, "cope31": 62, "cope32": 62, "cope33": 62, "cope34": 62, "cope35": 62, "cope36": 62, "cope37": 62, "cope38": 62, "cope39": 62, "cope40": 62, "cope41": 62, "cope42": 62, "cope43": 62, "cope44": 62, "cope45": 62, "cope46": 62, "cope47": 62, "cope48": 62, "pe29": 62, "pe30": 62, "pe31": 62, "pe32": 62, "pe33": 62, "pe34": 62, "pe35": 62, "pe36": 62, "pe37": 62, "pe38": 62, "pe39": 62, "pe40": 62, "pe41": 62, "pe42": 62, "46149990": 62, "2875392": 62, "4456448": 62, "6045696": 62, "7331840": 62, "10166272": 62, "11616256": 62, "13090816": 62, "14622720": 62, "15687680": 62, "16588800": 62, "17604608": 62, "18612224": 62, "19709952": 62, "20840448": 62, "22044672": 62, "23298048": 62, "24772608": 62, "26673152": 62, "28729344": 62, "30121984": 62, "31653888": 62, "33202176": 62, "34734080": 62, "37879808": 62, "39567360": 62, "41451520": 62, "43384832": 62, "45195264": 62, "1466368": 62, "2553312": 62, "220916": 62, "tstat25": 62, "tstat26": 62, "tstat27": 62, "tstat28": 62, "tstat29": 62, "tstat30": 62, "tstat31": 62, "tstat32": 62, "tstat33": 62, "tstat34": 62, "tstat35": 62, "tstat36": 62, "tstat37": 62, "tstat38": 62, "tstat39": 62, "tstat40": 62, "tstat41": 62, "tstat42": 62, "tstat43": 62, "220951": 62, "tstat44": 62, "tstat45": 62, "204800": 62, "220338": 62, "tstat46": 62, "tstat47": 62, "tstat48": 62, "213567": 62, "varcope25": 62, "varcope26": 62, "varcope27": 62, "varcope28": 62, "varcope29": 62, "varcope30": 62, "varcope31": 62, "varcope32": 62, "varcope33": 62, "varcope34": 62, "varcope35": 62, "varcope36": 62, "varcope37": 62, "varcope38": 62, "varcope39": 62, "213651": 62, "varcope40": 62, "varcope41": 62, "varcope42": 62, "varcope43": 62, "varcope44": 62, "varcope45": 62, "varcope46": 62, "varcope47": 62, "varcope48": 62, "213564": 62, "zstat25": 62, "zstat26": 62, "zstat27": 62, "zstat28": 62, "zstat29": 62, "zstat30": 62, "zstat31": 62, "zstat32": 62, "zstat33": 62, "zstat34": 62, "zstat35": 62, "zstat36": 62, "zstat37": 62, "zstat38": 62, "zstat39": 62, "zstat40": 62, "zstat41": 62, "zstat42": 62, "zstat43": 62, "zstat44": 62, "zstat45": 62, "zstat46": 62, "zstat47": 62, "zstat48": 62, "10159_t1w": 62, "851968": 62, "11637742": 62, "1826816": 62, "2662400": 62, "4497408": [62, 99], "5472256": 62, "6512640": 62, "7610368": 62, "8830976": 62, "10321920": 62, "stopsignal_bold": 62, "1155072": 62, "28934676": 62, "4423680": 62, "5832704": 62, "7053312": 62, "8429568": 62, "9781248": 62, "11141120": 62, "14065664": 62, "15286272": 62, "16711680": 62, "18178048": 62, "19693568": 62, "21258240": 62, "22773760": 62, "24371200": 62, "26025984": 62, "27926528": 62, "stopsignal_ev": 62, "bht_bold": 62, "pamenc_bold": 62, "pamret_bold": 62, "firstlevelmodelfirstlevelmodel": 62, "tabular": 62, "llrrrrl": 62, "toprul": 62, "midrul": 62, "000000": [62, 66], "307532": 62, "6300": [62, 102], "668929": 62, "534376": 62, "254210": 62, "918703": 62, "2520": [62, 102], "715845": 62, "2b": 62, "683343": 62, "2c": 62, "587956": 62, "692869": 62, "664250": 62, "461193": 62, "257986": 62, "078390": 62, "815609": 62, "5c": 62, "798387": 62, "208105": 62, "348351": 62, "190472": 62, "385929": 62, "163956": 62, "079389": 62, "056165": 62, "792": [62, 82], "10a": 62, "726486": 62, "10b": 62, "710553": 62, "043724": 62, "950054": 62, "937283": 62, "906274": 62, "14a": 62, "882906": 62, "776293": 62, "bottomrul": 62, "stopsuccessminusgo": 62, "stopsignal_contrast": 62, "stopsuccessminusgo_design": 62, "stopsuccessminusgo_stat": 62, "p_statmap": 62, "t_statmap": 62, "z_statmap": 62, "stopsignal_design": 62, "stopsignal_stat": 62, "stopsignal_statmap": 62, "903": [62, 71, 73], "799": [64, 71], "0x7fd1b7087110": 64, "0x7fd1ed809990": 64, "localizer_first_level": 65, "2bqxn": 65, "5169152": 65, "34532740": 65, "11018240": 65, "15081472": 65, "18243584": 65, "22945792": 65, "30253056": 65, "62d16779cfae29f3623d6a194141d263": 65, "400000": 66, "700000": 66, "399994": 66, "700012": 66, "fiac_nilearn": 67, "3588096": 67, "81515168": 67, "11386880": 67, "19546112": 67, "27484160": 67, "32735232": 67, "41123840": 67, "49012736": 67, "57188352": 67, "65282048": 67, "72523776": 67, "79962112": 67, "0x7fd1b29a3d10": 67, "0x7fd1f292a510": 67, "additionalreturn": 67, "0x7fd1b2353e10": 67, "0x7fd1b217e290": 70, "0023749453300866787": 70, "0016934773463517239": 70, "018509907565882628": 70, "07049870657346953": 70, "031008074173867566": 70, "62193288008469e": 70, "0x7fd1f27b5f50": 70, "0x7fd1b7117cd0": 70, "multimodal_fmri": 71, "134263085": 71, "5898240": 71, "9142272": 71, "11575296": 71, "13910016": 71, "16023552": 71, "18112512": 71, "20365312": 71, "23060480": 71, "25542656": 71, "28221440": 71, "30367744": 71, "32415744": 71, "33628160": 71, "35667968": 71, "38076416": 71, "40222720": 71, "42049536": 71, "46448640": 71, "48816128": 71, "50954240": 71, "53485568": 71, "56483840": 71, "61087744": 71, "62955520": 71, "65314816": 71, "68149248": 71, "71385088": 71, "73318400": 71, "75448320": 71, "80003072": 71, "82673664": 71, "84869120": 71, "86573056": 71, "88571904": 71, "90972160": 71, "93200384": 71, "95617024": 71, "97697792": 71, "99631104": 71, "101851136": 71, "104013824": 71, "106225664": 71, "108322816": 71, "110862336": 71, "113475584": 71, "116064256": 71, "118439936": 71, "120315904": 71, "122535936": 71, "124608512": 71, "127098880": 71, "129441792": 71, "131481600": 71, "133562368": 71, "multimodal_smri": 71, "2088960": 71, "6852766": 71, "3948544": 71, "6184960": 71, "833": [72, 73], "auto_examples_04_glm_first_level": 73, "000000000000007": 75, "0x7fd1efe8dc10": 75, "secondlevelmodelsecondlevelmodel": [75, 77], "40175": 75, "0x7fd1efce5d90": 75, "1478": [75, 82], "5d27cb281c5b4a001aa07e29": 76, "5d27ca3d1c5b4a001b9eeddb": 76, "5d27e787114a420016059c22": 76, "5d27eba2114a420016059fbf": 76, "5d27efab1c5b4a001aa0a0c2": 76, "5d27f296114a42001704a5d9": 76, "5d28095545253a001c3e59a2": 76, "5d280608a26b3400180868d1": 76, "5d28144c114a42001804739": 76, "5d2811d0114a42001704b988": 76, "5d281e3d114a42001605cb02": 76, "5d281f851c5b4a001b9f2315": 76, "5d28375345253a001c3e90a2": 76, "5d282d9045253a001c3e80a1": 76, "5d283f021c5b4a001aa100cb": 76, "5d283ee0a26b34001609f58": 76, "5d2852caa26b340018089ae5": 76, "5d285263114a4200160602c6": 76, "5d28660b1c5b4a001aa122c7": 76, "5d285d61114a42001904a343": 76, "5d2868f9114a42001704f6a5": 76, "5d28709e114a420016061aa1": 76, "5d28847d114a42001904b87b": 76, "5d287b3a45253a00193d145": 76, "5d289736114a4200170518d7": 76, "5d28966345253a00193d2e27": 76, "5d28b135a26b3400160a648": 76, "5d28a431a26b340019090fa2": 76, "5d28c0a81c5b4a001b9fb89a": 76, "5d28b761a26b3400160a6ba8": 76, "5d27c31345253a001a3c25fb": 77, "5d27da3a114a4200190453ab": 77, "5d27ebc3114a42001704a18d": 77, "5d27f1f0114a42001804603": 77, "5d28092e45253a001c3e597f": 77, "5d281a531c5b4a001c9ea662": 77, "5d28295aa26b340018087ef4": 77, "5d283473a26b34001609ed88": 77, "5d284374114a42001605f4d2": 77, "5d28590d114a4200160607da": 77, "5d285a53114a4200160608b": 77, "5d286f35a26b34001908e5c1": 77, "5d2888ce1c5b4a001b9f789c": 77, "5d289b2945253a00193d32ac": 77, "5d28a00245253a001c3efac9": 77, "5d28bc0145253a00193d53ab": 77, "5d28cfd91c5b4a001c9f404d": 77, "5d28db3ba26b34001808f444": 77, "5d28f0bc1c5b4a001b9fd7f3": 77, "5d28ffc245253a00193d7dac": 77, "5d2909cd1c5b4a001b9fe6c5": 77, "5d2919e2114a42001606b46c": 77, "5d2928bc45253a001b3cf010": 77, "5d293a50a26b34001909682a": 77, "5d29492fa26b34001709070f": 77, "5d295328114a42001606dd9a": 77, "5d2c37031c5b4a001ca0da2b": 77, "5d2c442e114a420017071134": 77, "5d2c5c431c5b4a001da257a5": 77, "5d2c6c2645253a001c42460f": 77, "5d2ec286251f0e001604a189": 77, "5d2ed2875d2cdc001702b4c5": 77, "5d341711a667db0017fc816f": 77, "5d34294d835aff001958add9": 77, "5d2ef8925d2cdc001702e0a5": 77, "5d2f0851251f0e0018044fe4": 77, "5d2f26e4a667db0017f72ae9": 77, "5d2f358c251f0e001704a76a": 77, "5d2f41d2835aff001a52da0c": 77, "5d2f5acc835aff0018532004": 77, "5d2f692d835aff00175372e9": 77, "5d2f7456835aff0017537992": 77, "5d2f8881a667db0018f6b634": 77, "5d2f9552251f0e001605bb64": 77, "5d2faf785d2cdc0017039bb1": 77, "5d2fbffd835aff0018535ef5": 77, "5d2fc225a667db001af6222a": 77, "5d2fdd77835aff00195494d4": 77, "5d2fe5d5a667db0017f80f32": 77, "5d2ff3ea835aff0018538140": 77, "5d301049a667db0019f67ca0": 77, "5d3021b65d2cdc00190344d6": 77, "5d302afe5d2cdc0018030034": 77, "5d303ad4835aff001853bca4": 77, "5d304f845d2cdc001a032801": 77, "5d3058cd835aff001853d4c7": 77, "5d306f15a667db0018f78b4d": 77, "5d307f8b251f0e00190519ca": 77, "5d309cb5251f0e001606fe4b": 77, "5d30a667251f0e00190534dc": 77, "5d30bb07251f0e001705df42": 77, "5d30df37251f0e001705fd72": 77, "5d30e232a667db0018f7f2a9": 77, "5d30f7ec251f0e001805e3cd": 77, "5d3116dca667db0018f81c29": 77, "5d312688251f0e0016079f29": 77, "5d3134fe5d2cdc001705393d": 77, "5d3143f9835aff00195630c": 77, "5d315ac0835aff001754e139": 77, "5d3160bc835aff00195649cf": 77, "5d317bb2251f0e001608002": 77, "5d318a6c251f0e001905b6": 77, "5d31962da667db0017fa303d": 77, "5d31abe45d2cdc0019046202": 77, "5d31cdeea667db001af75ab9": 77, "5d31dc83835aff001956e6c5": 77, "5d31fefea667db0018f8ea9f": 77, "5d32072b5d2cdc0018043969": 77, "5d3219b4a667db0018f8ff1f": 77, "5d3234f3835aff00175590f0": 77, "5d323d06251f0e001706f0b": 77, "5d324e77251f0e001806e5e7": 77, "5d326b70835aff00195762f8": 77, "5d32731a5d2cdc001a0472bb": 77, "5d3286b7251f0e001906427f": 77, "5d3298815d2cdc001804700c": 77, "5d32ab6ea667db0017fb59e8": 77, "5d32bb275d2cdc001a049841": 77, "5d32d901a667db0018f9684f": 77, "5d32e9d3835aff001957cd79": 77, "5d32f34f835aff001755ee97": 77, "5d3306db5d2cdc001706c36f": 77, "5d332373251f0e001609acbd": 77, "5d332b7e835aff001957feec": 77, "brainomics_data": [77, 105], "s01": [77, 105], "cmaps_leftauditoryclick": [77, 105], "float64": 77, "901": [77, 82], "aberr": 78, "994": 79, "5d27c2c41c5b4a001d9f4e7": 80, "5d27ce321c5b4a001aa080fc": 80, "5d27d3c3114a42001804500a": 80, "5d27d175a26b340018084d23": 80, "5d27e5fa1c5b4a001aa09681": 80, "5d27e900a26b340017083df6": 80, "5d27f18945253a00193cb2dd": 80, "5d27f8a845253a001b3c3280": 80, "5d2808401c5b4a001d9f83b2": 80, "5d280aab45253a001b3c3d51": 80, "5d2811fba26b340017085492": 80, "5d280d0a114a42001704b6a7": 80, "5d282b2345253a001c3e7d09": 80, "5d2829f7a26b34001708642d": 80, "5d28318445253a00193ce6d7": 80, "5d28399545253a001c3e9288": 80, "5d2848581c5b4a001aa10aac": 80, "5d2849cc114a42001804994": 80, "5d28545ca26b340018089ba7": 80, "5d2852861c5b4a001c9ed5bf": 80, "5d285cd945253a001a3c8509": 80, "5d285c8b45253a00193d0295": 80, "5d286e49114a42001904ab90": 80, "5d286b6b45253a001c3ec067": 80, "5d288af11c5b4a001d9ff0cb": 80, "5d2881cd1c5b4a001d9fe799": 80, "5d289be945253a001c3ef5e2": 80, "5d288c4c114a42001804bfb6": 80, "5d28a1c91c5b4a001da00bd9": 80, "5d28ad481c5b4a001aa17d00": 80, "5d28bb90a26b3400190925d2": 80, "5d28c24f114a42001904ea5b": 80, "5d27ccde1c5b4a001d9f5602": 80, "5d27c7f01c5b4a001c9e778": 80, "5d27d9c6114a420019045370": 80, "5d27d99fa26b340018085146": 80, "5d27de38a26b340016099771": 80, "5d27ec4d45253a001c3e3f47": 80, "5d27fb651c5b4a001d9f7938": 80, "5d27fb1e1c5b4a001aa0ab78": 80, "5d280057a26b340019089965": 80, "5d27ff2645253a001c3e4fb9": 80, "5d2814d145253a001c3e6404": 80, "5d280e3945253a001a3c4f15": 80, "5d28244745253a001b3c4afa": 80, "5d2827ff114a420018047f9a": 80, "5d28309645253a001a3c6a8d": 80, "5d282ef61c5b4a001b9f3747": 80, "5d284a3445253a001c3ea2d1": 80, "5d284636114a42001704e0f6": 80, "5d28564b1c5b4a001d9fc9d6": 80, "5d28516e45253a001a3c7e03": 80, "5d285b6c1c5b4a001c9edada": 80, "163840": 80, "234089": 80, "5d285cffa26b34001908db9c": 80, "5d28765645253a001b3c8106": 80, "5d287486114a42001804af82": 80, "5d287eeb45253a001c3ed1ba": 80, "5d287f8f114a4200170503d0": 80, "5d2896fb45253a001a3cabe0": 80, "5d288e101c5b4a001aa14e0f": 80, "5d28af541c5b4a001da01caa": 80, "5d28aa701c5b4a001aa1794c": 80, "5d28b9af45253a001a3ccb85": 80, "5d28b579114a42001804e2cd": 80, "881784197001252e": 80, "5d27cbbd45253a00193c9b70": 81, "5d27dbce45253a001a3c32fd": 81, "5d27e0221c5b4a001b9efb25": 81, "5d27ed481c5b4a001aa09e83": 81, "5d28000845253a001c3e507a": 81, "5d281a2a45253a001c3e684c": 81, "5d282aa5114a42001605db5a": 81, "5d28335545253a00193ce806": 81, "5d28453a1c5b4a001c9eca": 81, "5d284daf1c5b4a001d9fc4e5": 81, "5d2866c0a26b340017088827": 81, "5d28781945253a00193d1237": 81, "5d2889a7a26b3400160a368f": 81, "5d288fb11c5b4a001d9ff738": 81, "5d28a4c0114a420016064fa2": 81, "5d28b6171c5b4a001c9f2ebd": 81, "5d28d2bb114a420017054715": 81, "5d28e056a26b340019093c95": 81, "5d28e50945253a00193d6e09": 81, "5d28ff54114a42001705610c": 81, "0x7fd1f019d250": 81, "0x7fd1b710c4d0": 81, "0x7fd1c35b8210": 81, "0x7fd1f24f5890": 81, "auto_examples_05_glm_second_level": 82, "888": 85, "0x7fd1b7cdb2d0": 86, "0x7fd1ed061710": 86, "0x7fd1e3325e10": 86, "0x7fd1b2b34cd0": 88, "0x7fd1e34571d0": 89, "0x7fd1b0f19210": 89, "0x7fd1f29dfc10": 89, "987": [90, 96], "pole": 91, "123176": 91, "insular": 91, "18728": 91, "40640": 91, "42528": 91, "inferior": 91, "par": 91, "triangulari": 91, "8824": 91, "operculari": 91, "11072": 91, "68584": 91, "37688": 91, "4168": 91, "14640": 91, "6784": 91, "20200": 91, "temporooccipit": 91, "16032": 91, "5176": 91, "15536": 91, "11760": 91, "55160": 91, "lobul": 91, "23264": 91, "supramargin": 91, "13936": 91, "18072": 91, "angular": 91, "19272": 91, "78232": 91, "32712": 91, "intracalcarin": 91, "11208": 91, "7808": 91, "juxtaposit": 91, "11872": 91, "subcallos": 91, "9136": 91, "paracingul": 91, "23552": 91, "20736": 91, "19296": 91, "precun": 91, "44984": 91, "cuneal": 91, "9816": 91, "orbit": 91, "25184": 91, "parahippocamp": 91, "9984": 91, "5680": [91, 102], "lingual": 91, "27048": 91, "4880": [91, 102], "12752": 91, "11752": 91, "14448": 91, "operculum": 91, "5496": 91, "15088": 91, "8952": 91, "planum": [91, 103], "polar": 91, "5992": 91, "heschl": 91, "h1": 91, "h2": 91, "4832": 91, "temporal": [91, 103], "7616": 91, "supracalcarin": 91, "2088": 91, "42208": 91, "quot": 91, "0x7fd1b29cbd50": 92, "973": [93, 96], "0x7fd1f250c7d0": 94, "0x7fd1f2765450": 94, "0x7fd1cedb70d0": 94, "06_manipulating_imag": 94, "0x7fd1efe6f710": 94, "0x7fd1b01c3750": 94, "0x7fd1b31b3bd0": 94, "2252": 94, "auto_examples_06_manipulating_imag": 96, "2251": 96, "823": 98, "858": 98, "801": 98, "0x7fd1b1fb3f50": 98, "8009": 98, "5c8ff3eb2286e80019c3c198": 99, "5c8ff3ed2286e80017c41b56": 99, "5919127": 99, "5c8ff3ee2286e80016c3c379": 99, "5c8ff3ee4712b400183b70c3": 99, "4349952": 99, "5642114": 99, "5c8ff3efa743a9001660a0d5": 99, "5c8ff3f14712b4001a3b560": 99, "3981312": 99, "6081959": 99, "5c8ff3f1a743a90017608164": 99, "5c8ff3f12286e80016c3c37": 99, "5373952": 99, "5880763": 99, "5c8ff3f34712b4001a3b5612": 99, "5c8ff3f7a743a90019606cdf": 99, "6432694": 99, "5c8ff3f6a743a90017608171": 99, "5c8ff3f64712b400183b70d8": 99, "5606383": 99, "5c8ff3f72286e80019c3c1af": 99, "5c8ff3f92286e80018c3e463": 99, "4972544": 99, "6274191": 99, "5cb47057f2be3c0019030a1f": 99, "5cb46e63f2be3c0017056ba9": 99, "6123172": 99, "5cb4704af2be3c001705703b": 99, "5cb46e7a353c58001a9b3324": 99, "4734976": 99, "6203305": 99, "5c8ff3952286e80016c3c2e7": 99, "5c8ff3954712b400193b5b79": 99, "4227072": 99, "6253721": 99, "5cb47016a3bc970018f1fc88": 99, "5cb46e6ba3bc970019f07152": 99, "4653056": 99, "6168810": 99, "5c8ff395a743a900176080af": 99, "5c8ff3964712b400193b5b7d": 99, "3776512": 99, "6287468": 99, "5c8ff399a743a9001660a031": 99, "5c8ff3982286e80017c41a29": 99, "4218880": 99, "6146235": 99, "5c8ff39aa743a90018606e21": 99, "5c8ff39aa743a900176080ba": 99, "4472832": 99, "6358784": 99, "5cb470153992690018133d3b": 99, "5cb46e793992690017108eb9": 99, "4259840": 99, "6199206": 99, "5cb47038353c5800199ac9a2": 99, "5cb46e85a3bc97001aeff750": 99, "4341760": 99, "6249029": 99, "5cb4701c3992690018133d49": 99, "5cb46e1c3992690018133a9": 99, "4481024": 99, "5741735": 99, "5c8ff39aa743a900176080bf": 99, "5c8ff39d4712b400193b5b89": 99, "5950135": 99, "5cb4703039926900160f6b3e": 99, "5cb46e4d353c58001b9cb325": 99, "5967515": 99, "5cb4700af2be3c0017056f69": 99, "5cb46e0cf2be3c001801f757": 99, "5527830": 99, "5cb4702b39926900171090e4": 99, "5cb46e35f2be3c00190305ff": 99, "4505600": 99, "5894024": 99, "5c8ff39ca743a90019606c50": 99, "5c8ff3a2a743a9001660a048": 99, "5021696": 99, "6131100": 99, "5cb4701ff2be3c0017056fad": 99, "5cb46e0339926900160f6930": 99, "5c8ff3a12286e80017c41a48": 99, "5c8ff3a12286e80016c3c2fc": 99, "5652480": 99, "6235792": 99, "5c8ff39fa743a90018606e2f": 99, "5c8ff3a34712b4001a3b55a3": 99, "5cb4703439926900160f6b43": 99, "5cb46e40f2be3c001801f77f": 99, "4136960": 99, "5926863": 99, "5c8ff3a34712b400193b5b92": 99, "5c8ff3a84712b400183b7048": 99, "4055040": 99, "5552738": 99, "5cb47020f2be3c0019030968": 99, "5cb46e6f353c58001a9b3311": 99, "6178036": 99, "5c8ff3a72286e80017c41a54": 99, "5c8ff3a7a743a90018606e42": 99, "4366336": 99, "5978758": 99, "5cb4702639926900190faf1d": 99, "5cb46e3f353c5800199ac787": 99, "4087808": 99, "5920556": 99, "candid": 99, "897": [99, 109], "starttim": [100, 101, 108], "3dj2a": 101, "749503182": 101, "9846784": 101, "15532032": 101, "23887872": 101, "31604736": 101, "38174720": 101, "45924352": 101, "53493760": 101, "61079552": 101, "68657152": 101, "75530240": 101, "83279872": 101, "90849280": 101, "98631680": 101, "106266624": 101, "112820224": 101, "120225792": 101, "128253952": 101, "136511488": 101, "144539648": 101, "151191552": 101, "158941184": 101, "166592512": 101, "174505984": 101, "182009856": 101, "189431808": 101, "196329472": 101, "203915264": 101, "211566592": 101, "219037696": 101, "226500608": 101, "233144320": 101, "240762880": 101, "248086528": 101, "255442944": 101, "262897664": 101, "269680640": 101, "277495808": 101, "285310976": 101, "293076992": 101, "300908544": 101, "307445760": 101, "315179008": 101, "323010560": 101, "330792960": 101, "338681856": 101, "346406912": 101, "353435648": 101, "361398272": 101, "369016832": 101, "376979456": 101, "384892928": 101, "391626752": 101, "400048128": 101, "407961600": 101, "415842304": 101, "423690240": 101, "430571520": 101, "438534144": 101, "446767104": 101, "455049216": 101, "462454784": 101, "468631552": 101, "476250112": 101, "483844096": 101, "491749376": 101, "500121600": 101, "515555328": 101, "523714560": 101, "532185088": 101, "540614656": 101, "548421632": 101, "555237376": 101, "563331072": 101, "571064320": 101, "579567616": 101, "587710464": 101, "594755584": 101, "602800128": 101, "610942976": 101, "618938368": 101, "626982912": 101, "633372672": 101, "641171456": 101, "649019392": 101, "657014784": 101, "665108480": 101, "673185792": 101, "680574976": 101, "688373760": 101, "696434688": 101, "704593920": 101, "712556544": 101, "719650816": 101, "726589440": 101, "735854592": 101, "743817216": 101, "05_task": 101, "rotx": 101, "roti": 101, "rotzdataconversionwarn": [102, 105, 106], "949": [102, 109], "succeed": [103, 107], "neurosynth_words_for_image_10426": 103, "collection_423": [103, 107], "neurosynth_words_for_image_2834": 103, "neurosynth_words_for_image_2818": 103, "collection_413": [103, 107], "neurosynth_words_for_image_2676": 103, "neurosynth_words_for_image_2675": 103, "collection_98": [103, 107], "neurosynth_words_for_image_3042": 103, "collection_1952": 103, "neurosynth_words_for_image_32980": 103, "collection_42": [103, 107], "neurosynth_words_for_image_151": 103, "neurosynth_words_for_image_3041": 103, "scroll": 103, "921": 103, "imagematch": 103, "4008": 103, "spmt_0001": 103, "collection_4008": 103, "image_65426": 103, "65426": 103, "neurosynth_words_for_image_65426": 103, "neurosynth_spectral_01": 103, "collection_79": 103, "image_11020": 103, "11020": 103, "neurosynth_words_for_image_11020": 103, "neurosynth_spectral_01_1": 103, "image_11021": 103, "11021": 103, "neurosynth_words_for_image_11021": 103, "imagesmatch": 103, "1257": 103, "abstract_knowledge_regparam": 103, "collection_1257": 103, "image_17327": 103, "17327": 103, "neurosynth_words_for_image_17327": 103, "acoustic_processing_regparam": 103, "image_17328": 103, "17328": 103, "neurosynth_words_for_image_17328": 103, "action_perception_regparam": 103, "image_17329": 103, "17329": 103, "neurosynth_words_for_image_17329": 103, "action_regparam": 103, "image_17330": 103, "17330": 103, "neurosynth_words_for_image_17330": 103, "activation_level_regparam": 103, "image_17331": 103, "17331": 103, "neurosynth_words_for_image_17331": 103, "activation_regparam": 103, "image_17332": 103, "17332": 103, "neurosynth_words_for_image_17332": 103, "active_maintenance_regparam": 103, "image_17333": 103, "17333": 103, "neurosynth_words_for_image_17333": 103, "active_retrieval_regparam": 103, "image_17334": 103, "17334": 103, "neurosynth_words_for_image_17334": 103, "acuity_regparam": 103, "image_17335": 103, "17335": 103, "neurosynth_words_for_image_17335": 103, "adaptation_regparam": 103, "image_17336": 103, "17336": 103, "neurosynth_words_for_image_17336": 103, "adaptive_control_regparam": 103, "image_17337": 103, "17337": 103, "neurosynth_words_for_image_17337": 103, "addiction_regparam": 103, "image_17338": 103, "17338": 103, "neurosynth_words_for_image_17338": 103, "affect_perception_regparam": 103, "image_17339": 103, "17339": 103, "neurosynth_words_for_image_17339": 103, "affect_recognition_regparam": 103, "image_17340": 103, "17340": 103, "neurosynth_words_for_image_17340": 103, "agency_regparam": 103, "image_17341": 103, "17341": 103, "neurosynth_words_for_image_17341": 103, "agreeableness_regparam": 103, "image_17342": 103, "17342": 103, "neurosynth_words_for_image_17342": 103, "altruism_regparam": 103, "image_17343": 103, "17343": 103, "neurosynth_words_for_image_17343": 103, "altruistic_motivation_regparam": 103, "image_17344": 103, "17344": 103, "neurosynth_words_for_image_17344": 103, "1307": 103, "insula": 103, "955": [103, 109], "8112": 105, "633228302002": 105, "8743028640747": 105, "21001195907593": 105, "9058209260305": 105, "78252983093262": 105, "1693377494812": 105, "42987108230592": 105, "68958316530501": 105, "17948019504547": 105, "83794350094266": 105, "58638072013855": 105, "26968390291388": 105, "0030574798584": 105, "80410645558283": 105, "63994857243129": 105, "3626803557078": 105, "01704651117325": 105, "688108584460092": 105, "427134010526867": 105, "200877101797806": 105, "task002_cope10_succstop_minus_go": 107, "image_3041": 107, "task002_cope06_succ_stop_vs_go": 107, "image_3042": 107, "task002_cope007_tstat1": 107, "image_2818": 107, "task003_cope007_tstat1": 107, "image_2834": 107, "a_model001_task002_cope011_tstat1": 107, "image_2675": 107, "b_model001_task002_cope011_tstat1": 107, "image_2676": 107, "task001_cope07_succstop_minus_go": 107, "image_151": 107, "952": [108, 109], "auto_examples_07_advanc": 109, "895": 111, "20484": 111, "connectivity_matric": 111, "incorrectli": 111, "20206": 111, "20207": 111, "20208": 111, "4991939095387371": 111, "5115891053391053": 111, "4847132034632034": 111, "1433": [111, 112], "auto_examples_08_experiment": 112}, "objects": {"nilearn": [[180, 0, 0, "-", "connectome"], [181, 0, 0, "-", "datasets"], [182, 0, 0, "-", "decoding"], [183, 0, 0, "-", "decomposition"], [184, 0, 0, "-", "experimental"], [423, 0, 0, "-", "glm"], [424, 0, 0, "-", "image"], [426, 0, 0, "-", "interfaces"], [427, 0, 0, "-", "maskers"], [428, 0, 0, "-", "masking"], [429, 0, 0, "-", "mass_univariate"], [430, 0, 0, "-", "plotting"], [431, 0, 0, "-", "regions"], [432, 0, 0, "-", "reporting"], [433, 0, 0, "-", "signal"], [434, 0, 0, "-", "surface"]], "nilearn.connectome": [[185, 1, 1, "", "ConnectivityMeasure"], [186, 1, 1, "", "GroupSparseCovariance"], [187, 1, 1, "", "GroupSparseCovarianceCV"], [188, 3, 1, "", "cov_to_corr"], [189, 3, 1, "", "group_sparse_covariance"], [190, 3, 1, "", "prec_to_partial"], [191, 3, 1, "", "sym_matrix_to_vec"], [192, 3, 1, "", "vec_to_sym_matrix"]], "nilearn.connectome.ConnectivityMeasure": [[185, 2, 1, "", "__init__"], [185, 2, 1, "", "fit"], [185, 2, 1, "", "fit_transform"], [185, 2, 1, "", "get_metadata_routing"], [185, 2, 1, "", "get_params"], [185, 2, 1, "", "inverse_transform"], [185, 2, 1, "", "set_inverse_transform_request"], [185, 2, 1, "", "set_output"], [185, 2, 1, "", "set_params"], [185, 2, 1, "", "set_transform_request"], [185, 2, 1, "", "transform"]], "nilearn.connectome.GroupSparseCovariance": [[186, 2, 1, "", "__init__"], [186, 2, 1, "", "fit"], [186, 2, 1, "", "get_metadata_routing"], [186, 2, 1, "", "get_params"], [186, 2, 1, "", "set_fit_request"], [186, 2, 1, "", "set_params"]], "nilearn.connectome.GroupSparseCovarianceCV": [[187, 2, 1, "", "__init__"], [187, 2, 1, "", "fit"], [187, 2, 1, "", "get_metadata_routing"], [187, 2, 1, "", "get_params"], [187, 2, 1, "", "set_fit_request"], [187, 2, 1, "", "set_params"]], "nilearn.datasets": [[193, 3, 1, "", "fetch_abide_pcp"], [194, 3, 1, "", "fetch_adhd"], [195, 3, 1, "", "fetch_atlas_aal"], [196, 3, 1, "", "fetch_atlas_allen_2011"], [197, 3, 1, "", "fetch_atlas_basc_multiscale_2015"], [198, 3, 1, "", "fetch_atlas_craddock_2012"], [199, 3, 1, "", "fetch_atlas_destrieux_2009"], [200, 3, 1, "", "fetch_atlas_difumo"], [201, 3, 1, "", "fetch_atlas_harvard_oxford"], [202, 3, 1, "", "fetch_atlas_juelich"], [203, 3, 1, "", "fetch_atlas_msdl"], [204, 3, 1, "", "fetch_atlas_pauli_2017"], [205, 3, 1, "", "fetch_atlas_schaefer_2018"], [206, 3, 1, "", "fetch_atlas_smith_2009"], [207, 3, 1, "", "fetch_atlas_surf_destrieux"], [208, 3, 1, "", "fetch_atlas_talairach"], [209, 3, 1, "", "fetch_atlas_yeo_2011"], [210, 3, 1, "", "fetch_bids_langloc_dataset"], [211, 3, 1, "", "fetch_coords_dosenbach_2010"], [212, 3, 1, "", "fetch_coords_power_2011"], [213, 3, 1, "", "fetch_coords_seitzman_2018"], [214, 3, 1, "", "fetch_development_fmri"], [215, 3, 1, "", "fetch_ds000030_urls"], [216, 3, 1, "", "fetch_fiac_first_level"], [217, 3, 1, "", "fetch_haxby"], [218, 3, 1, "", "fetch_icbm152_2009"], [219, 3, 1, "", "fetch_icbm152_brain_gm_mask"], [220, 3, 1, "", "fetch_language_localizer_demo_dataset"], [221, 3, 1, "", "fetch_localizer_button_task"], [222, 3, 1, "", "fetch_localizer_calculation_task"], [223, 3, 1, "", "fetch_localizer_contrasts"], [224, 3, 1, "", "fetch_localizer_first_level"], [225, 3, 1, "", "fetch_megatrawls_netmats"], [226, 3, 1, "", "fetch_mixed_gambles"], [227, 3, 1, "", "fetch_miyawaki2008"], [228, 3, 1, "", "fetch_neurovault"], [229, 3, 1, "", "fetch_neurovault_auditory_computation_task"], [230, 3, 1, "", "fetch_neurovault_ids"], [231, 3, 1, "", "fetch_neurovault_motor_task"], [232, 3, 1, "", "fetch_oasis_vbm"], [233, 3, 1, "", "fetch_openneuro_dataset"], [234, 3, 1, "", "fetch_openneuro_dataset_index"], [235, 3, 1, "", "fetch_spm_auditory"], [236, 3, 1, "", "fetch_spm_multimodal_fmri"], [237, 3, 1, "", "fetch_surf_fsaverage"], [238, 3, 1, "", "fetch_surf_nki_enhanced"], [239, 3, 1, "", "get_data_dirs"], [240, 3, 1, "", "load_mni152_brain_mask"], [241, 3, 1, "", "load_mni152_gm_mask"], [242, 3, 1, "", "load_mni152_gm_template"], [243, 3, 1, "", "load_mni152_template"], [244, 3, 1, "", "load_mni152_wm_mask"], [245, 3, 1, "", "load_mni152_wm_template"], [246, 3, 1, "", "load_sample_motor_activation_image"], [247, 3, 1, "", "patch_openneuro_dataset"], [248, 3, 1, "", "select_from_index"]], "nilearn.decoding": [[249, 1, 1, "", "Decoder"], [250, 1, 1, "", "DecoderRegressor"], [251, 1, 1, "", "FREMClassifier"], [252, 1, 1, "", "FREMRegressor"], [253, 1, 1, "", "SearchLight"], [254, 1, 1, "", "SpaceNetClassifier"], [255, 1, 1, "", "SpaceNetRegressor"]], "nilearn.decoding.Decoder": [[249, 2, 1, "", "__init__"], [249, 2, 1, "", "decision_function"], [249, 2, 1, "", "fit"], [249, 2, 1, "", "get_metadata_routing"], [249, 2, 1, "", "get_params"], [249, 2, 1, "", "predict"], [249, 2, 1, "", "score"], [249, 2, 1, "", "set_fit_request"], [249, 2, 1, "", "set_params"], [249, 2, 1, "", "set_score_request"]], "nilearn.decoding.DecoderRegressor": [[250, 2, 1, "", "__init__"], [250, 2, 1, "", "decision_function"], [250, 2, 1, "", "fit"], [250, 2, 1, "", "get_metadata_routing"], [250, 2, 1, "", "get_params"], [250, 2, 1, "", "predict"], [250, 2, 1, "", "score"], [250, 2, 1, "", "set_fit_request"], [250, 2, 1, "", "set_params"], [250, 2, 1, "", "set_score_request"]], "nilearn.decoding.FREMClassifier": [[251, 2, 1, "", "__init__"], [251, 2, 1, "", "decision_function"], [251, 2, 1, "", "fit"], [251, 2, 1, "", "get_metadata_routing"], [251, 2, 1, "", "get_params"], [251, 2, 1, "", "predict"], [251, 2, 1, "", "score"], [251, 2, 1, "", "set_fit_request"], [251, 2, 1, "", "set_params"], [251, 2, 1, "", "set_score_request"]], "nilearn.decoding.FREMRegressor": [[252, 2, 1, "", "__init__"], [252, 2, 1, "", "decision_function"], [252, 2, 1, "", "fit"], [252, 2, 1, "", "get_metadata_routing"], [252, 2, 1, "", "get_params"], [252, 2, 1, "", "predict"], [252, 2, 1, "", "score"], [252, 2, 1, "", "set_fit_request"], [252, 2, 1, "", "set_params"], [252, 2, 1, "", "set_score_request"]], "nilearn.decoding.SearchLight": [[253, 2, 1, "", "__init__"], [253, 2, 1, "", "fit"], [253, 2, 1, "", "get_metadata_routing"], [253, 2, 1, "", "get_params"], [253, 2, 1, "", "set_fit_request"], [253, 2, 1, "", "set_params"]], "nilearn.decoding.SpaceNetClassifier": [[254, 4, 1, "", "SUPPORTED_LOSSES"], [254, 4, 1, "", "SUPPORTED_PENALTIES"], [254, 2, 1, "", "__init__"], [254, 2, 1, "", "check_params"], [254, 2, 1, "", "decision_function"], [254, 2, 1, "", "fit"], [254, 2, 1, "", "get_metadata_routing"], [254, 2, 1, "", "get_params"], [254, 2, 1, "", "predict"], [254, 2, 1, "", "score"], [254, 2, 1, "", "set_fit_request"], [254, 2, 1, "", "set_params"], [254, 2, 1, "", "set_score_request"]], "nilearn.decoding.SpaceNetRegressor": [[255, 4, 1, "", "SUPPORTED_LOSSES"], [255, 4, 1, "", "SUPPORTED_PENALTIES"], [255, 2, 1, "", "__init__"], [255, 2, 1, "", "check_params"], [255, 2, 1, "", "decision_function"], [255, 2, 1, "", "fit"], [255, 2, 1, "", "get_metadata_routing"], [255, 2, 1, "", "get_params"], [255, 2, 1, "", "predict"], [255, 2, 1, "", "score"], [255, 2, 1, "", "set_fit_request"], [255, 2, 1, "", "set_params"], [255, 2, 1, "", "set_score_request"]], "nilearn.decomposition": [[256, 1, 1, "", "CanICA"], [257, 1, 1, "", "DictLearning"]], "nilearn.decomposition.CanICA": [[256, 2, 1, "", "__init__"], [256, 2, 1, "", "fit"], [256, 2, 1, "", "fit_transform"], [256, 2, 1, "", "get_metadata_routing"], [256, 2, 1, "", "get_params"], [256, 2, 1, "", "inverse_transform"], [256, 2, 1, "", "score"], [256, 2, 1, "", "set_fit_request"], [256, 2, 1, "", "set_inverse_transform_request"], [256, 2, 1, "", "set_output"], [256, 2, 1, "", "set_params"], [256, 2, 1, "", "set_score_request"], [256, 2, 1, "", "set_transform_request"], [256, 2, 1, "", "transform"]], "nilearn.decomposition.DictLearning": [[257, 2, 1, "", "__init__"], [257, 2, 1, "", "fit"], [257, 2, 1, "", "fit_transform"], [257, 2, 1, "", "get_metadata_routing"], [257, 2, 1, "", "get_params"], [257, 2, 1, "", "inverse_transform"], [257, 2, 1, "", "score"], [257, 2, 1, "", "set_fit_request"], [257, 2, 1, "", "set_inverse_transform_request"], [257, 2, 1, "", "set_output"], [257, 2, 1, "", "set_params"], [257, 2, 1, "", "set_score_request"], [257, 2, 1, "", "set_transform_request"], [257, 2, 1, "", "transform"]], "nilearn.experimental.surface": [[258, 1, 1, "", "FileMesh"], [259, 1, 1, "", "InMemoryMesh"], [260, 1, 1, "", "Mesh"], [261, 4, 1, "", "PolyMesh"], [262, 1, 1, "", "SurfaceImage"], [263, 1, 1, "", "SurfaceLabelsMasker"], [264, 1, 1, "", "SurfaceMasker"], [265, 3, 1, "", "fetch_destrieux"], [266, 3, 1, "", "fetch_nki"], [267, 3, 1, "", "load_fsaverage"]], "nilearn.experimental.surface.FileMesh": [[258, 2, 1, "", "__init__"], [258, 5, 1, "", "coordinates"], [258, 5, 1, "", "faces"], [258, 4, 1, "", "file_path"], [258, 2, 1, "", "loaded"], [258, 4, 1, "", "n_vertices"], [258, 2, 1, "", "to_gifti"]], "nilearn.experimental.surface.InMemoryMesh": [[259, 2, 1, "", "__init__"], [259, 4, 1, "", "coordinates"], [259, 4, 1, "", "faces"], [259, 4, 1, "", "n_vertices"], [259, 2, 1, "", "to_gifti"]], "nilearn.experimental.surface.Mesh": [[260, 2, 1, "", "__init__"], [260, 4, 1, "", "coordinates"], [260, 4, 1, "", "faces"], [260, 4, 1, "", "n_vertices"], [260, 2, 1, "", "to_gifti"]], "nilearn.experimental.surface.SurfaceImage": [[262, 2, 1, "", "__init__"], [262, 4, 1, "", "data"], [262, 4, 1, "", "mesh"], [262, 4, 1, "", "shape"]], "nilearn.experimental.surface.SurfaceLabelsMasker": [[263, 2, 1, "", "__init__"], [263, 2, 1, "", "fit"], [263, 2, 1, "", "fit_transform"], [263, 2, 1, "", "inverse_transform"], [263, 4, 1, "", "label_names"], [263, 4, 1, "", "label_names_"], [263, 4, 1, "", "labels_"], [263, 4, 1, "", "labels_data_"], [263, 4, 1, "", "labels_img"], [263, 2, 1, "", "transform"]], "nilearn.experimental.surface.SurfaceMasker": [[264, 2, 1, "", "__init__"], [264, 2, 1, "", "fit"], [264, 2, 1, "", "fit_transform"], [264, 2, 1, "", "inverse_transform"], [264, 4, 1, "", "mask_img"], [264, 4, 1, "", "mask_img_"], [264, 4, 1, "", "output_dimension_"], [264, 2, 1, "", "transform"]], "nilearn.glm": [[268, 1, 1, "", "ARModel"], [269, 1, 1, "", "Contrast"], [270, 1, 1, "", "FContrastResults"], [271, 1, 1, "", "LikelihoodModelResults"], [272, 1, 1, "", "OLSModel"], [273, 1, 1, "", "RegressionResults"], [274, 1, 1, "", "SimpleRegressionResults"], [275, 1, 1, "", "TContrastResults"], [276, 3, 1, "", "cluster_level_inference"], [277, 3, 1, "", "compute_contrast"], [278, 3, 1, "", "compute_fixed_effects"], [279, 3, 1, "", "expression_to_contrast_vector"], [280, 3, 1, "", "fdr_threshold"], [423, 0, 0, "-", "first_level"], [423, 0, 0, "-", "second_level"], [297, 3, 1, "", "threshold_stats_img"]], "nilearn.glm.ARModel": [[268, 2, 1, "", "__init__"], [268, 2, 1, "", "fit"], [268, 2, 1, "", "initialize"], [268, 2, 1, "", "logL"], [268, 2, 1, "", "whiten"]], "nilearn.glm.Contrast": [[269, 2, 1, "", "__init__"], [269, 2, 1, "", "effect_size"], [269, 2, 1, "", "effect_variance"], [269, 2, 1, "", "one_minus_pvalue"], [269, 2, 1, "", "p_value"], [269, 2, 1, "", "stat"], [269, 2, 1, "", "z_score"]], "nilearn.glm.FContrastResults": [[270, 2, 1, "", "__init__"]], "nilearn.glm.LikelihoodModelResults": [[271, 2, 1, "", "Fcontrast"], [271, 2, 1, "", "Tcontrast"], [271, 2, 1, "", "__init__"], [271, 2, 1, "", "conf_int"], [271, 2, 1, "", "logL"], [271, 2, 1, "", "t"], [271, 2, 1, "", "vcov"]], "nilearn.glm.OLSModel": [[272, 2, 1, "", "__init__"], [272, 2, 1, "", "fit"], [272, 2, 1, "", "initialize"], [272, 2, 1, "", "logL"], [272, 2, 1, "", "whiten"]], "nilearn.glm.RegressionResults": [[273, 2, 1, "", "Fcontrast"], [273, 2, 1, "", "MSE"], [273, 2, 1, "", "SSE"], [273, 2, 1, "", "Tcontrast"], [273, 2, 1, "", "__init__"], [273, 2, 1, "", "conf_int"], [273, 2, 1, "", "logL"], [273, 2, 1, "", "normalized_residuals"], [273, 2, 1, "", "predicted"], [273, 2, 1, "", "r_square"], [273, 2, 1, "", "residuals"], [273, 2, 1, "", "t"], [273, 2, 1, "", "vcov"]], "nilearn.glm.SimpleRegressionResults": [[274, 2, 1, "", "Fcontrast"], [274, 2, 1, "", "Tcontrast"], [274, 2, 1, "", "__init__"], [274, 2, 1, "", "conf_int"], [274, 2, 1, "", "logL"], [274, 2, 1, "", "normalized_residuals"], [274, 2, 1, "", "predicted"], [274, 2, 1, "", "residuals"], [274, 2, 1, "", "t"], [274, 2, 1, "", "vcov"]], "nilearn.glm.TContrastResults": [[275, 2, 1, "", "__init__"]], "nilearn.glm.first_level": [[281, 1, 1, "", "FirstLevelModel"], [282, 3, 1, "", "check_design_matrix"], [283, 3, 1, "", "compute_regressor"], [284, 3, 1, "", "first_level_from_bids"], [285, 3, 1, "", "glover_dispersion_derivative"], [286, 3, 1, "", "glover_hrf"], [287, 3, 1, "", "glover_time_derivative"], [288, 3, 1, "", "make_first_level_design_matrix"], [289, 3, 1, "", "mean_scaling"], [290, 3, 1, "", "run_glm"], [291, 3, 1, "", "spm_dispersion_derivative"], [292, 3, 1, "", "spm_hrf"], [293, 3, 1, "", "spm_time_derivative"]], "nilearn.glm.first_level.FirstLevelModel": [[281, 2, 1, "", "__init__"], [281, 2, 1, "", "compute_contrast"], [281, 2, 1, "", "fit"], [281, 2, 1, "", "fit_transform"], [281, 2, 1, "", "generate_report"], [281, 2, 1, "", "get_metadata_routing"], [281, 2, 1, "", "get_params"], [281, 2, 1, "", "predicted"], [281, 2, 1, "", "r_square"], [281, 2, 1, "", "residuals"], [281, 5, 1, "", "scaling_axis"], [281, 2, 1, "", "set_fit_request"], [281, 2, 1, "", "set_output"], [281, 2, 1, "", "set_params"]], "nilearn.glm.second_level": [[294, 1, 1, "", "SecondLevelModel"], [295, 3, 1, "", "make_second_level_design_matrix"], [296, 3, 1, "", "non_parametric_inference"]], "nilearn.glm.second_level.SecondLevelModel": [[294, 2, 1, "", "__init__"], [294, 2, 1, "", "compute_contrast"], [294, 2, 1, "", "fit"], [294, 2, 1, "", "fit_transform"], [294, 2, 1, "", "generate_report"], [294, 2, 1, "", "get_metadata_routing"], [294, 2, 1, "", "get_params"], [294, 2, 1, "", "predicted"], [294, 2, 1, "", "r_square"], [294, 2, 1, "", "residuals"], [294, 2, 1, "", "set_fit_request"], [294, 2, 1, "", "set_output"], [294, 2, 1, "", "set_params"]], "nilearn.image": [[298, 3, 1, "", "binarize_img"], [299, 3, 1, "", "clean_img"], [300, 3, 1, "", "concat_imgs"], [301, 3, 1, "", "coord_transform"], [302, 3, 1, "", "copy_img"], [303, 3, 1, "", "crop_img"], [304, 3, 1, "", "get_data"], [305, 3, 1, "", "high_variance_confounds"], [306, 3, 1, "", "index_img"], [307, 3, 1, "", "iter_img"], [308, 3, 1, "", "largest_connected_component_img"], [309, 3, 1, "", "load_img"], [310, 3, 1, "", "math_img"], [311, 3, 1, "", "mean_img"], [312, 3, 1, "", "new_img_like"], [313, 3, 1, "", "reorder_img"], [314, 3, 1, "", "resample_img"], [315, 3, 1, "", "resample_to_img"], [316, 3, 1, "", "smooth_img"], [317, 3, 1, "", "swap_img_hemispheres"], [318, 3, 1, "", "threshold_img"]], "nilearn.interfaces": [[426, 0, 0, "-", "bids"], [426, 0, 0, "-", "fmriprep"], [426, 0, 0, "-", "fsl"]], "nilearn.interfaces.bids": [[319, 3, 1, "", "get_bids_files"], [320, 3, 1, "", "parse_bids_filename"], [321, 3, 1, "", "save_glm_to_bids"]], "nilearn.interfaces.fmriprep": [[322, 3, 1, "", "load_confounds"], [323, 3, 1, "", "load_confounds_strategy"]], "nilearn.interfaces.fsl": [[324, 3, 1, "", "get_design_from_fslmat"]], "nilearn.maskers": [[325, 1, 1, "", "BaseMasker"], [326, 1, 1, "", "MultiNiftiLabelsMasker"], [327, 1, 1, "", "MultiNiftiMapsMasker"], [328, 1, 1, "", "MultiNiftiMasker"], [329, 1, 1, "", "NiftiLabelsMasker"], [330, 1, 1, "", "NiftiMapsMasker"], [331, 1, 1, "", "NiftiMasker"], [332, 1, 1, "", "NiftiSpheresMasker"]], "nilearn.maskers.BaseMasker": [[325, 2, 1, "", "__init__"], [325, 2, 1, "", "fit_transform"], [325, 2, 1, "", "get_metadata_routing"], [325, 2, 1, "", "get_params"], [325, 2, 1, "", "inverse_transform"], [325, 2, 1, "", "set_output"], [325, 2, 1, "", "set_params"], [325, 2, 1, "", "set_transform_request"], [325, 2, 1, "", "transform"], [325, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiLabelsMasker": [[326, 2, 1, "", "__init__"], [326, 2, 1, "", "fit"], [326, 2, 1, "", "fit_transform"], [326, 2, 1, "", "generate_report"], [326, 2, 1, "", "get_metadata_routing"], [326, 2, 1, "", "get_params"], [326, 2, 1, "", "inverse_transform"], [326, 2, 1, "", "set_fit_request"], [326, 2, 1, "", "set_inverse_transform_request"], [326, 2, 1, "", "set_output"], [326, 2, 1, "", "set_params"], [326, 2, 1, "", "set_transform_request"], [326, 2, 1, "", "transform"], [326, 2, 1, "", "transform_imgs"], [326, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiMapsMasker": [[327, 2, 1, "", "__init__"], [327, 2, 1, "", "fit"], [327, 2, 1, "", "fit_transform"], [327, 2, 1, "", "generate_report"], [327, 2, 1, "", "get_metadata_routing"], [327, 2, 1, "", "get_params"], [327, 2, 1, "", "inverse_transform"], [327, 2, 1, "", "set_fit_request"], [327, 2, 1, "", "set_inverse_transform_request"], [327, 2, 1, "", "set_output"], [327, 2, 1, "", "set_params"], [327, 2, 1, "", "set_transform_request"], [327, 2, 1, "", "transform"], [327, 2, 1, "", "transform_imgs"], [327, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiMasker": [[328, 2, 1, "", "__init__"], [328, 2, 1, "", "fit"], [328, 2, 1, "", "fit_transform"], [328, 2, 1, "", "generate_report"], [328, 2, 1, "", "get_metadata_routing"], [328, 2, 1, "", "get_params"], [328, 2, 1, "", "inverse_transform"], [328, 2, 1, "", "set_fit_request"], [328, 2, 1, "", "set_output"], [328, 2, 1, "", "set_params"], [328, 2, 1, "", "set_transform_request"], [328, 2, 1, "", "transform"], [328, 2, 1, "", "transform_imgs"], [328, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiLabelsMasker": [[329, 2, 1, "", "__init__"], [329, 2, 1, "", "fit"], [329, 2, 1, "", "fit_transform"], [329, 2, 1, "", "generate_report"], [329, 2, 1, "", "get_metadata_routing"], [329, 2, 1, "", "get_params"], [329, 2, 1, "", "inverse_transform"], [329, 2, 1, "", "set_fit_request"], [329, 2, 1, "", "set_inverse_transform_request"], [329, 2, 1, "", "set_output"], [329, 2, 1, "", "set_params"], [329, 2, 1, "", "set_transform_request"], [329, 2, 1, "", "transform"], [329, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiMapsMasker": [[330, 2, 1, "", "__init__"], [330, 2, 1, "", "fit"], [330, 2, 1, "", "fit_transform"], [330, 2, 1, "", "generate_report"], [330, 2, 1, "", "get_metadata_routing"], [330, 2, 1, "", "get_params"], [330, 2, 1, "", "inverse_transform"], [330, 2, 1, "", "set_fit_request"], [330, 2, 1, "", "set_inverse_transform_request"], [330, 2, 1, "", "set_output"], [330, 2, 1, "", "set_params"], [330, 2, 1, "", "set_transform_request"], [330, 2, 1, "", "transform"], [330, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiMasker": [[331, 2, 1, "", "__init__"], [331, 2, 1, "", "fit"], [331, 2, 1, "", "fit_transform"], [331, 2, 1, "", "generate_report"], [331, 2, 1, "", "get_metadata_routing"], [331, 2, 1, "", "get_params"], [331, 2, 1, "", "inverse_transform"], [331, 2, 1, "", "set_fit_request"], [331, 2, 1, "", "set_output"], [331, 2, 1, "", "set_params"], [331, 2, 1, "", "set_transform_request"], [331, 2, 1, "", "transform"], [331, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiSpheresMasker": [[332, 2, 1, "", "__init__"], [332, 2, 1, "", "fit"], [332, 2, 1, "", "fit_transform"], [332, 2, 1, "", "get_metadata_routing"], [332, 2, 1, "", "get_params"], [332, 2, 1, "", "inverse_transform"], [332, 2, 1, "", "set_inverse_transform_request"], [332, 2, 1, "", "set_output"], [332, 2, 1, "", "set_params"], [332, 2, 1, "", "set_transform_request"], [332, 2, 1, "", "transform"], [332, 2, 1, "", "transform_single_imgs"]], "nilearn.masking": [[333, 3, 1, "", "apply_mask"], [334, 3, 1, "", "compute_background_mask"], [335, 3, 1, "", "compute_brain_mask"], [336, 3, 1, "", "compute_epi_mask"], [337, 3, 1, "", "compute_multi_background_mask"], [338, 3, 1, "", "compute_multi_brain_mask"], [339, 3, 1, "", "compute_multi_epi_mask"], [340, 3, 1, "", "intersect_masks"], [341, 3, 1, "", "unmask"]], "nilearn.mass_univariate": [[342, 3, 1, "", "permuted_ols"]], "nilearn.plotting": [[430, 0, 0, "-", "displays"], [373, 3, 1, "", "find_cut_slices"], [374, 3, 1, "", "find_parcellation_cut_coords"], [375, 3, 1, "", "find_probabilistic_atlas_cut_coords"], [376, 3, 1, "", "find_xyz_cut_coords"], [377, 3, 1, "", "plot_anat"], [378, 3, 1, "", "plot_carpet"], [379, 3, 1, "", "plot_connectome"], [380, 3, 1, "", "plot_contrast_matrix"], [381, 3, 1, "", "plot_design_matrix"], [382, 3, 1, "", "plot_epi"], [383, 3, 1, "", "plot_event"], [384, 3, 1, "", "plot_glass_brain"], [385, 3, 1, "", "plot_img"], [386, 3, 1, "", "plot_img_comparison"], [387, 3, 1, "", "plot_img_on_surf"], [388, 3, 1, "", "plot_markers"], [389, 3, 1, "", "plot_matrix"], [390, 3, 1, "", "plot_prob_atlas"], [391, 3, 1, "", "plot_roi"], [392, 3, 1, "", "plot_stat_map"], [393, 3, 1, "", "plot_surf"], [394, 3, 1, "", "plot_surf_contours"], [395, 3, 1, "", "plot_surf_roi"], [396, 3, 1, "", "plot_surf_stat_map"], [397, 3, 1, "", "show"], [398, 3, 1, "", "view_connectome"], [399, 3, 1, "", "view_img"], [400, 3, 1, "", "view_img_on_surf"], [401, 3, 1, "", "view_markers"], [402, 3, 1, "", "view_surf"]], "nilearn.plotting.displays": [[343, 1, 1, "", "BaseAxes"], [344, 1, 1, "", "BaseSlicer"], [345, 1, 1, "", "CutAxes"], [346, 1, 1, "", "GlassBrainAxes"], [347, 1, 1, "", "LProjector"], [348, 1, 1, "", "LRProjector"], [349, 1, 1, "", "LYRProjector"], [350, 1, 1, "", "LYRZProjector"], [351, 1, 1, "", "LZRProjector"], [352, 1, 1, "", "LZRYProjector"], [353, 1, 1, "", "MosaicSlicer"], [354, 1, 1, "", "OrthoProjector"], [355, 1, 1, "", "OrthoSlicer"], [356, 1, 1, "", "PlotlySurfaceFigure"], [357, 1, 1, "", "RProjector"], [358, 1, 1, "", "TiledSlicer"], [359, 1, 1, "", "XProjector"], [360, 1, 1, "", "XSlicer"], [361, 1, 1, "", "XZProjector"], [362, 1, 1, "", "XZSlicer"], [363, 1, 1, "", "YProjector"], [364, 1, 1, "", "YSlicer"], [365, 1, 1, "", "YXProjector"], [366, 1, 1, "", "YXSlicer"], [367, 1, 1, "", "YZProjector"], [368, 1, 1, "", "YZSlicer"], [369, 1, 1, "", "ZProjector"], [370, 1, 1, "", "ZSlicer"], [371, 3, 1, "", "get_projector"], [372, 3, 1, "", "get_slicer"]], "nilearn.plotting.displays.BaseAxes": [[343, 2, 1, "", "__init__"], [343, 2, 1, "", "add_object_bounds"], [343, 2, 1, "", "draw_2d"], [343, 2, 1, "", "draw_left_right"], [343, 2, 1, "", "draw_position"], [343, 2, 1, "", "draw_scale_bar"], [343, 2, 1, "", "get_object_bounds"], [343, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.BaseSlicer": [[344, 2, 1, "", "__init__"], [344, 2, 1, "", "add_contours"], [344, 2, 1, "", "add_edges"], [344, 2, 1, "", "add_markers"], [344, 2, 1, "", "add_overlay"], [344, 2, 1, "", "annotate"], [344, 5, 1, "", "black_bg"], [344, 5, 1, "", "brain_color"], [344, 2, 1, "", "close"], [344, 2, 1, "", "find_cut_coords"], [344, 2, 1, "", "init_with_figure"], [344, 2, 1, "", "savefig"], [344, 2, 1, "", "title"]], "nilearn.plotting.displays.CutAxes": [[345, 2, 1, "", "__init__"], [345, 2, 1, "", "add_object_bounds"], [345, 2, 1, "", "draw_2d"], [345, 2, 1, "", "draw_left_right"], [345, 2, 1, "", "draw_position"], [345, 2, 1, "", "draw_scale_bar"], [345, 2, 1, "", "get_object_bounds"], [345, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.GlassBrainAxes": [[346, 2, 1, "", "__init__"], [346, 2, 1, "", "add_object_bounds"], [346, 2, 1, "", "draw_2d"], [346, 2, 1, "", "draw_left_right"], [346, 2, 1, "", "draw_position"], [346, 2, 1, "", "draw_scale_bar"], [346, 2, 1, "", "get_object_bounds"], [346, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.LProjector": [[347, 2, 1, "", "__init__"], [347, 2, 1, "", "add_contours"], [347, 2, 1, "", "add_edges"], [347, 2, 1, "", "add_graph"], [347, 2, 1, "", "add_markers"], [347, 2, 1, "", "add_overlay"], [347, 2, 1, "", "annotate"], [347, 5, 1, "", "black_bg"], [347, 5, 1, "", "brain_color"], [347, 2, 1, "", "close"], [347, 2, 1, "", "draw_cross"], [347, 2, 1, "", "find_cut_coords"], [347, 2, 1, "", "init_with_figure"], [347, 2, 1, "", "savefig"], [347, 2, 1, "", "title"]], "nilearn.plotting.displays.LRProjector": [[348, 2, 1, "", "__init__"], [348, 2, 1, "", "add_contours"], [348, 2, 1, "", "add_edges"], [348, 2, 1, "", "add_graph"], [348, 2, 1, "", "add_markers"], [348, 2, 1, "", "add_overlay"], [348, 2, 1, "", "annotate"], [348, 5, 1, "", "black_bg"], [348, 5, 1, "", "brain_color"], [348, 2, 1, "", "close"], [348, 2, 1, "", "draw_cross"], [348, 2, 1, "", "find_cut_coords"], [348, 2, 1, "", "init_with_figure"], [348, 2, 1, "", "savefig"], [348, 2, 1, "", "title"]], "nilearn.plotting.displays.LYRProjector": [[349, 2, 1, "", "__init__"], [349, 2, 1, "", "add_contours"], [349, 2, 1, "", "add_edges"], [349, 2, 1, "", "add_graph"], [349, 2, 1, "", "add_markers"], [349, 2, 1, "", "add_overlay"], [349, 2, 1, "", "annotate"], [349, 5, 1, "", "black_bg"], [349, 5, 1, "", "brain_color"], [349, 2, 1, "", "close"], [349, 2, 1, "", "draw_cross"], [349, 2, 1, "", "find_cut_coords"], [349, 2, 1, "", "init_with_figure"], [349, 2, 1, "", "savefig"], [349, 2, 1, "", "title"]], "nilearn.plotting.displays.LYRZProjector": [[350, 2, 1, "", "__init__"], [350, 2, 1, "", "add_contours"], [350, 2, 1, "", "add_edges"], [350, 2, 1, "", "add_graph"], [350, 2, 1, "", "add_markers"], [350, 2, 1, "", "add_overlay"], [350, 2, 1, "", "annotate"], [350, 5, 1, "", "black_bg"], [350, 5, 1, "", "brain_color"], [350, 2, 1, "", "close"], [350, 2, 1, "", "draw_cross"], [350, 2, 1, "", "find_cut_coords"], [350, 2, 1, "", "init_with_figure"], [350, 2, 1, "", "savefig"], [350, 2, 1, "", "title"]], "nilearn.plotting.displays.LZRProjector": [[351, 2, 1, "", "__init__"], [351, 2, 1, "", "add_contours"], [351, 2, 1, "", "add_edges"], [351, 2, 1, "", "add_graph"], [351, 2, 1, "", "add_markers"], [351, 2, 1, "", "add_overlay"], [351, 2, 1, "", "annotate"], [351, 5, 1, "", "black_bg"], [351, 5, 1, "", "brain_color"], [351, 2, 1, "", "close"], [351, 2, 1, "", "draw_cross"], [351, 2, 1, "", "find_cut_coords"], [351, 2, 1, "", "init_with_figure"], [351, 2, 1, "", "savefig"], [351, 2, 1, "", "title"]], "nilearn.plotting.displays.LZRYProjector": [[352, 2, 1, "", "__init__"], [352, 2, 1, "", "add_contours"], [352, 2, 1, "", "add_edges"], [352, 2, 1, "", "add_graph"], [352, 2, 1, "", "add_markers"], [352, 2, 1, "", "add_overlay"], [352, 2, 1, "", "annotate"], [352, 5, 1, "", "black_bg"], [352, 5, 1, "", "brain_color"], [352, 2, 1, "", "close"], [352, 2, 1, "", "draw_cross"], [352, 2, 1, "", "find_cut_coords"], [352, 2, 1, "", "init_with_figure"], [352, 2, 1, "", "savefig"], [352, 2, 1, "", "title"]], "nilearn.plotting.displays.MosaicSlicer": [[353, 2, 1, "", "__init__"], [353, 2, 1, "", "add_contours"], [353, 2, 1, "", "add_edges"], [353, 2, 1, "", "add_markers"], [353, 2, 1, "", "add_overlay"], [353, 2, 1, "", "annotate"], [353, 5, 1, "", "black_bg"], [353, 5, 1, "", "brain_color"], [353, 2, 1, "", "close"], [353, 2, 1, "", "draw_cross"], [353, 2, 1, "", "find_cut_coords"], [353, 2, 1, "", "init_with_figure"], [353, 2, 1, "", "savefig"], [353, 2, 1, "", "title"]], "nilearn.plotting.displays.OrthoProjector": [[354, 2, 1, "", "__init__"], [354, 2, 1, "", "add_contours"], [354, 2, 1, "", "add_edges"], [354, 2, 1, "", "add_graph"], [354, 2, 1, "", "add_markers"], [354, 2, 1, "", "add_overlay"], [354, 2, 1, "", "annotate"], [354, 5, 1, "", "black_bg"], [354, 5, 1, "", "brain_color"], [354, 2, 1, "", "close"], [354, 2, 1, "", "draw_cross"], [354, 2, 1, "", "find_cut_coords"], [354, 2, 1, "", "init_with_figure"], [354, 2, 1, "", "savefig"], [354, 2, 1, "", "title"]], "nilearn.plotting.displays.OrthoSlicer": [[355, 2, 1, "", "__init__"], [355, 2, 1, "", "add_contours"], [355, 2, 1, "", "add_edges"], [355, 2, 1, "", "add_markers"], [355, 2, 1, "", "add_overlay"], [355, 2, 1, "", "annotate"], [355, 5, 1, "", "black_bg"], [355, 5, 1, "", "brain_color"], [355, 2, 1, "", "close"], [355, 2, 1, "", "draw_cross"], [355, 2, 1, "", "find_cut_coords"], [355, 2, 1, "", "init_with_figure"], [355, 2, 1, "", "savefig"], [355, 2, 1, "", "title"]], "nilearn.plotting.displays.PlotlySurfaceFigure": [[356, 2, 1, "", "__init__"], [356, 2, 1, "", "savefig"], [356, 2, 1, "", "show"]], "nilearn.plotting.displays.RProjector": [[357, 2, 1, "", "__init__"], [357, 2, 1, "", "add_contours"], [357, 2, 1, "", "add_edges"], [357, 2, 1, "", "add_graph"], [357, 2, 1, "", "add_markers"], [357, 2, 1, "", "add_overlay"], [357, 2, 1, "", "annotate"], [357, 5, 1, "", "black_bg"], [357, 5, 1, "", "brain_color"], [357, 2, 1, "", "close"], [357, 2, 1, "", "draw_cross"], [357, 2, 1, "", "find_cut_coords"], [357, 2, 1, "", "init_with_figure"], [357, 2, 1, "", "savefig"], [357, 2, 1, "", "title"]], "nilearn.plotting.displays.TiledSlicer": [[358, 2, 1, "", "__init__"], [358, 2, 1, "", "add_contours"], [358, 2, 1, "", "add_edges"], [358, 2, 1, "", "add_markers"], [358, 2, 1, "", "add_overlay"], [358, 2, 1, "", "annotate"], [358, 5, 1, "", "black_bg"], [358, 5, 1, "", "brain_color"], [358, 2, 1, "", "close"], [358, 2, 1, "", "draw_cross"], [358, 2, 1, "", "find_cut_coords"], [358, 2, 1, "", "init_with_figure"], [358, 2, 1, "", "savefig"], [358, 2, 1, "", "title"]], "nilearn.plotting.displays.XProjector": [[359, 2, 1, "", "__init__"], [359, 2, 1, "", "add_contours"], [359, 2, 1, "", "add_edges"], [359, 2, 1, "", "add_graph"], [359, 2, 1, "", "add_markers"], [359, 2, 1, "", "add_overlay"], [359, 2, 1, "", "annotate"], [359, 5, 1, "", "black_bg"], [359, 5, 1, "", "brain_color"], [359, 2, 1, "", "close"], [359, 2, 1, "", "draw_cross"], [359, 2, 1, "", "find_cut_coords"], [359, 2, 1, "", "init_with_figure"], [359, 2, 1, "", "savefig"], [359, 2, 1, "", "title"]], "nilearn.plotting.displays.XSlicer": [[360, 2, 1, "", "__init__"], [360, 2, 1, "", "add_contours"], [360, 2, 1, "", "add_edges"], [360, 2, 1, "", "add_markers"], [360, 2, 1, "", "add_overlay"], [360, 2, 1, "", "annotate"], [360, 5, 1, "", "black_bg"], [360, 5, 1, "", "brain_color"], [360, 2, 1, "", "close"], [360, 2, 1, "", "draw_cross"], [360, 2, 1, "", "find_cut_coords"], [360, 2, 1, "", "init_with_figure"], [360, 2, 1, "", "savefig"], [360, 2, 1, "", "title"]], "nilearn.plotting.displays.XZProjector": [[361, 2, 1, "", "__init__"], [361, 2, 1, "", "add_contours"], [361, 2, 1, "", "add_edges"], [361, 2, 1, "", "add_graph"], [361, 2, 1, "", "add_markers"], [361, 2, 1, "", "add_overlay"], [361, 2, 1, "", "annotate"], [361, 5, 1, "", "black_bg"], [361, 5, 1, "", "brain_color"], [361, 2, 1, "", "close"], [361, 2, 1, "", "draw_cross"], [361, 2, 1, "", "find_cut_coords"], [361, 2, 1, "", "init_with_figure"], [361, 2, 1, "", "savefig"], [361, 2, 1, "", "title"]], "nilearn.plotting.displays.XZSlicer": [[362, 2, 1, "", "__init__"], [362, 2, 1, "", "add_contours"], [362, 2, 1, "", "add_edges"], [362, 2, 1, "", "add_markers"], [362, 2, 1, "", "add_overlay"], [362, 2, 1, "", "annotate"], [362, 5, 1, "", "black_bg"], [362, 5, 1, "", "brain_color"], [362, 2, 1, "", "close"], [362, 2, 1, "", "draw_cross"], [362, 2, 1, "", "find_cut_coords"], [362, 2, 1, "", "init_with_figure"], [362, 2, 1, "", "savefig"], [362, 2, 1, "", "title"]], "nilearn.plotting.displays.YProjector": [[363, 2, 1, "", "__init__"], [363, 2, 1, "", "add_contours"], [363, 2, 1, "", "add_edges"], [363, 2, 1, "", "add_graph"], [363, 2, 1, "", "add_markers"], [363, 2, 1, "", "add_overlay"], [363, 2, 1, "", "annotate"], [363, 5, 1, "", "black_bg"], [363, 5, 1, "", "brain_color"], [363, 2, 1, "", "close"], [363, 2, 1, "", "draw_cross"], [363, 2, 1, "", "find_cut_coords"], [363, 2, 1, "", "init_with_figure"], [363, 2, 1, "", "savefig"], [363, 2, 1, "", "title"]], "nilearn.plotting.displays.YSlicer": [[364, 2, 1, "", "__init__"], [364, 2, 1, "", "add_contours"], [364, 2, 1, "", "add_edges"], [364, 2, 1, "", "add_markers"], [364, 2, 1, "", "add_overlay"], [364, 2, 1, "", "annotate"], [364, 5, 1, "", "black_bg"], [364, 5, 1, "", "brain_color"], [364, 2, 1, "", "close"], [364, 2, 1, "", "draw_cross"], [364, 2, 1, "", "find_cut_coords"], [364, 2, 1, "", "init_with_figure"], [364, 2, 1, "", "savefig"], [364, 2, 1, "", "title"]], "nilearn.plotting.displays.YXProjector": [[365, 2, 1, "", "__init__"], [365, 2, 1, "", "add_contours"], [365, 2, 1, "", "add_edges"], [365, 2, 1, "", "add_graph"], [365, 2, 1, "", "add_markers"], [365, 2, 1, "", "add_overlay"], [365, 2, 1, "", "annotate"], [365, 5, 1, "", "black_bg"], [365, 5, 1, "", "brain_color"], [365, 2, 1, "", "close"], [365, 2, 1, "", "draw_cross"], [365, 2, 1, "", "find_cut_coords"], [365, 2, 1, "", "init_with_figure"], [365, 2, 1, "", "savefig"], [365, 2, 1, "", "title"]], "nilearn.plotting.displays.YXSlicer": [[366, 2, 1, "", "__init__"], [366, 2, 1, "", "add_contours"], [366, 2, 1, "", "add_edges"], [366, 2, 1, "", "add_markers"], [366, 2, 1, "", "add_overlay"], [366, 2, 1, "", "annotate"], [366, 5, 1, "", "black_bg"], [366, 5, 1, "", "brain_color"], [366, 2, 1, "", "close"], [366, 2, 1, "", "draw_cross"], [366, 2, 1, "", "find_cut_coords"], [366, 2, 1, "", "init_with_figure"], [366, 2, 1, "", "savefig"], [366, 2, 1, "", "title"]], "nilearn.plotting.displays.YZProjector": [[367, 2, 1, "", "__init__"], [367, 2, 1, "", "add_contours"], [367, 2, 1, "", "add_edges"], [367, 2, 1, "", "add_graph"], [367, 2, 1, "", "add_markers"], [367, 2, 1, "", "add_overlay"], [367, 2, 1, "", "annotate"], [367, 5, 1, "", "black_bg"], [367, 5, 1, "", "brain_color"], [367, 2, 1, "", "close"], [367, 2, 1, "", "draw_cross"], [367, 2, 1, "", "find_cut_coords"], [367, 2, 1, "", "init_with_figure"], [367, 2, 1, "", "savefig"], [367, 2, 1, "", "title"]], "nilearn.plotting.displays.YZSlicer": [[368, 2, 1, "", "__init__"], [368, 2, 1, "", "add_contours"], [368, 2, 1, "", "add_edges"], [368, 2, 1, "", "add_markers"], [368, 2, 1, "", "add_overlay"], [368, 2, 1, "", "annotate"], [368, 5, 1, "", "black_bg"], [368, 5, 1, "", "brain_color"], [368, 2, 1, "", "close"], [368, 2, 1, "", "draw_cross"], [368, 2, 1, "", "find_cut_coords"], [368, 2, 1, "", "init_with_figure"], [368, 2, 1, "", "savefig"], [368, 2, 1, "", "title"]], "nilearn.plotting.displays.ZProjector": [[369, 2, 1, "", "__init__"], [369, 2, 1, "", "add_contours"], [369, 2, 1, "", "add_edges"], [369, 2, 1, "", "add_graph"], [369, 2, 1, "", "add_markers"], [369, 2, 1, "", "add_overlay"], [369, 2, 1, "", "annotate"], [369, 5, 1, "", "black_bg"], [369, 5, 1, "", "brain_color"], [369, 2, 1, "", "close"], [369, 2, 1, "", "draw_cross"], [369, 2, 1, "", "find_cut_coords"], [369, 2, 1, "", "init_with_figure"], [369, 2, 1, "", "savefig"], [369, 2, 1, "", "title"]], "nilearn.plotting.displays.ZSlicer": [[370, 2, 1, "", "__init__"], [370, 2, 1, "", "add_contours"], [370, 2, 1, "", "add_edges"], [370, 2, 1, "", "add_markers"], [370, 2, 1, "", "add_overlay"], [370, 2, 1, "", "annotate"], [370, 5, 1, "", "black_bg"], [370, 5, 1, "", "brain_color"], [370, 2, 1, "", "close"], [370, 2, 1, "", "draw_cross"], [370, 2, 1, "", "find_cut_coords"], [370, 2, 1, "", "init_with_figure"], [370, 2, 1, "", "savefig"], [370, 2, 1, "", "title"]], "nilearn.regions": [[403, 1, 1, "", "HierarchicalKMeans"], [404, 1, 1, "", "Parcellations"], [405, 1, 1, "", "ReNA"], [406, 1, 1, "", "RegionExtractor"], [407, 3, 1, "", "connected_label_regions"], [408, 3, 1, "", "connected_regions"], [409, 3, 1, "", "img_to_signals_labels"], [410, 3, 1, "", "img_to_signals_maps"], [411, 3, 1, "", "recursive_neighbor_agglomeration"], [412, 3, 1, "", "signals_to_img_labels"], [413, 3, 1, "", "signals_to_img_maps"]], "nilearn.regions.HierarchicalKMeans": [[403, 2, 1, "", "__init__"], [403, 2, 1, "", "fit"], [403, 2, 1, "", "fit_predict"], [403, 2, 1, "", "fit_transform"], [403, 2, 1, "", "get_metadata_routing"], [403, 2, 1, "", "get_params"], [403, 2, 1, "", "inverse_transform"], [403, 2, 1, "", "set_inverse_transform_request"], [403, 2, 1, "", "set_output"], [403, 2, 1, "", "set_params"], [403, 2, 1, "", "transform"]], "nilearn.regions.Parcellations": [[404, 4, 1, "", "VALID_METHODS"], [404, 2, 1, "", "__init__"], [404, 2, 1, "", "fit"], [404, 2, 1, "", "fit_transform"], [404, 2, 1, "", "get_metadata_routing"], [404, 2, 1, "", "get_params"], [404, 2, 1, "", "inverse_transform"], [404, 2, 1, "", "score"], [404, 2, 1, "", "set_fit_request"], [404, 2, 1, "", "set_inverse_transform_request"], [404, 2, 1, "", "set_output"], [404, 2, 1, "", "set_params"], [404, 2, 1, "", "set_score_request"], [404, 2, 1, "", "set_transform_request"], [404, 2, 1, "", "transform"]], "nilearn.regions.ReNA": [[405, 2, 1, "", "__init__"], [405, 2, 1, "", "fit"], [405, 2, 1, "", "fit_predict"], [405, 2, 1, "", "fit_transform"], [405, 2, 1, "", "get_metadata_routing"], [405, 2, 1, "", "get_params"], [405, 2, 1, "", "inverse_transform"], [405, 2, 1, "", "set_inverse_transform_request"], [405, 2, 1, "", "set_output"], [405, 2, 1, "", "set_params"], [405, 2, 1, "", "transform"]], "nilearn.regions.RegionExtractor": [[406, 2, 1, "", "__init__"], [406, 2, 1, "", "fit"], [406, 2, 1, "", "fit_transform"], [406, 2, 1, "", "generate_report"], [406, 2, 1, "", "get_metadata_routing"], [406, 2, 1, "", "get_params"], [406, 2, 1, "", "inverse_transform"], [406, 2, 1, "", "set_fit_request"], [406, 2, 1, "", "set_inverse_transform_request"], [406, 2, 1, "", "set_output"], [406, 2, 1, "", "set_params"], [406, 2, 1, "", "set_transform_request"], [406, 2, 1, "", "transform"], [406, 2, 1, "", "transform_single_imgs"]], "nilearn.reporting": [[414, 1, 1, "", "HTMLReport"], [415, 3, 1, "", "get_clusters_table"], [416, 3, 1, "", "make_glm_report"]], "nilearn.reporting.HTMLReport": [[414, 2, 1, "", "__init__"], [414, 2, 1, "", "get_iframe"], [414, 2, 1, "", "get_standalone"], [414, 2, 1, "", "open_in_browser"], [414, 2, 1, "", "remove_temp_file"], [414, 2, 1, "", "resize"], [414, 2, 1, "", "save_as_html"]], "nilearn.signal": [[417, 3, 1, "", "butterworth"], [418, 3, 1, "", "clean"], [419, 3, 1, "", "high_variance_confounds"]], "nilearn.surface": [[420, 3, 1, "", "load_surf_data"], [421, 3, 1, "", "load_surf_mesh"], [422, 3, 1, "", "vol_to_surf"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:attribute", "5": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"]}, "titleterms": {"team": 0, "core": 0, "develop": [0, 48, 49, 50, 51, 58, 99, 436], "other": [0, 21, 162], "contributor": [0, 126, 128, 131, 135, 138, 139, 140, 141, 142, 143, 152], "fund": 0, "cite": 0, "nilearn": [0, 4, 12, 13, 14, 15, 16, 21, 29, 34, 158, 159, 167, 173, 174, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436], "scikit": [0, 35, 98, 116, 162, 179], "learn": [0, 35, 48, 49, 50, 98, 116, 157, 158, 162, 174, 179], "basic": [1, 4, 5, 10, 66, 113], "tutori": [1, 2, 3, 113], "3d": [2, 9, 22, 52, 54, 58, 88, 177, 435], "4d": [2, 21, 116, 177, 178], "niimg": [2, 177], "handl": 2, "visual": [2, 3, 8, 9, 10, 11, 15, 16, 19, 20, 21, 22, 25, 26, 29, 30, 31, 36, 37, 40, 41, 42, 43, 49, 52, 54, 58, 81, 84, 98, 107, 113, 116, 156, 157, 158, 159, 164, 179, 435], "download": [2, 3, 49, 98, 116, 117, 177], "dataset": [2, 6, 11, 15, 16, 17, 18, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 48, 49, 50, 51, 53, 58, 61, 62, 65, 75, 76, 79, 80, 99, 101, 105, 106, 108, 157, 161, 166, 167, 177, 181, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248], "from": [2, 3, 11, 15, 16, 24, 26, 28, 33, 39, 40, 41, 48, 49, 50, 56, 58, 62, 89, 91, 94, 98, 100, 105, 106, 113, 116, 117, 154, 163, 177, 178, 179, 426, 427], "internet": [2, 177], "file": [2, 4, 15, 29, 56, 72, 177, 435], "one": [2, 50, 62, 79, 178], "volum": [2, 3, 9, 24, 25, 66, 83, 113, 176, 178, 179], "loop": [2, 3], "all": [2, 14, 159], "through": 2, "select": [2, 98, 117, 153, 159], "A": [3, 4, 44, 66, 111, 154, 159, 169], "introduct": [3, 159, 169, 174], "fmri": [3, 6, 35, 48, 49, 51, 58, 64, 65, 67, 69, 76, 79, 80, 98, 99, 104, 153, 154, 159, 169, 170], "decod": [3, 28, 29, 30, 31, 32, 33, 34, 35, 37, 41, 43, 98, 100, 113, 159, 161, 162, 163, 165, 182, 249, 250, 251, 252, 253, 254, 255], "retriev": [3, 6, 10, 15, 16, 17, 19, 23, 29, 52, 54, 56, 58, 66, 98], "load": [3, 13, 14, 18, 22, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 47, 48, 51, 56, 75, 94, 98, 99, 116, 156, 159, 177, 179, 426], "data": [3, 4, 6, 9, 10, 11, 13, 14, 15, 16, 17, 22, 23, 25, 29, 30, 32, 33, 35, 39, 40, 41, 42, 44, 47, 48, 49, 52, 54, 55, 56, 57, 61, 64, 66, 67, 69, 71, 75, 89, 94, 98, 100, 103, 107, 116, 153, 156, 158, 159, 162, 164, 169, 177, 178, 179, 428, 430, 434], "haxbi": [3, 18, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 98, 159, 161], "studi": [3, 51, 98, 103, 107, 108, 161], "first": [3, 4, 15, 41, 60, 61, 62, 66, 69, 98, 100, 101, 108, 113, 159, 168, 174, 179], "featur": [3, 15, 98, 126, 129, 152, 159, 173], "extract": [3, 23, 25, 33, 47, 50, 51, 52, 53, 54, 55, 56, 58, 61, 70, 87, 88, 89, 91, 153, 154, 157, 158, 168, 178, 179, 427], "matrix": [3, 31, 35, 49, 52, 54, 56, 58, 78, 153, 154, 168], "behavior": [3, 29, 33, 177], "label": [3, 11, 56, 86, 175], "restrict": [3, 36, 37], "analysi": [3, 6, 32, 36, 42, 55, 60, 61, 62, 64, 65, 67, 69, 74, 75, 81, 97, 100, 101, 102, 104, 105, 106, 107, 108, 113, 159, 162, 164, 168, 169, 429], "cat": 3, "face": [3, 29, 30, 31, 36, 37, 102], "support": 3, "vector": 3, "machin": [3, 116, 174], "measur": [3, 47, 98, 159, 162], "predict": [3, 28, 29, 34, 35, 41, 42, 43, 70, 98, 99, 113, 159, 160, 163, 168], "score": [3, 6, 29, 34, 35, 36, 40, 164], "us": [3, 9, 15, 34, 35, 39, 48, 50, 51, 56, 87, 88, 91, 92, 98, 117, 156, 157, 159, 162, 170, 174, 177, 185, 187, 194, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 209, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 243, 246, 248, 249, 250, 251, 252, 253, 255, 256, 257, 261, 262, 263, 264, 265, 266, 269, 276, 277, 278, 281, 283, 284, 288, 290, 294, 295, 296, 297, 299, 300, 301, 304, 305, 306, 307, 309, 310, 311, 312, 314, 315, 316, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 341, 342, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 404, 406, 407, 408, 414, 415, 416, 420, 421, 422, 435], "cross": [3, 29, 34, 35, 98, 103, 159, 162, 164, 166], "valid": [3, 29, 34, 35, 98, 157, 159, 162, 164, 166], "manual": [3, 94, 115, 178], "leav": 3, "out": 3, "implement": 3, "kfold": 3, "inspect": 3, "model": [3, 40, 42, 62, 64, 65, 66, 67, 68, 70, 76, 77, 79, 80, 100, 101, 158, 160, 161, 162, 168, 169, 171, 423], "weight": [3, 31, 98, 159], "turn": [3, 49], "nifti": [3, 55, 177, 178], "imag": [3, 4, 8, 9, 16, 17, 28, 69, 81, 83, 85, 90, 93, 95, 97, 103, 107, 111, 113, 116, 117, 163, 177, 178, 179, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 424, 427, 435], "plot": [3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 24, 31, 32, 34, 35, 44, 47, 50, 55, 58, 66, 68, 70, 80, 107, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 430, 435], "svm": [3, 29, 98, 159, 162], "what": [3, 51, 99, 152, 167, 169, 174], "i": [3, 51, 99, 169, 174, 177, 179], "chanc": [3, 98, 159, 162], "level": [3, 60, 61, 62, 66, 69, 74, 76, 77, 78, 79, 80, 81, 98, 101, 108, 113, 153, 159, 162, 168, 171], "accuraci": [3, 159], "further": [3, 44, 98, 116, 162, 164], "read": [3, 164, 177], "exampl": [4, 33, 39, 44, 63, 64, 67, 68, 69, 77, 78, 92, 101, 108, 110, 113, 117, 153, 154, 156, 158, 159, 164, 165, 173, 174, 178, 179, 185, 187, 194, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 209, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 243, 246, 248, 249, 250, 251, 252, 253, 255, 256, 257, 261, 262, 263, 264, 265, 266, 269, 276, 277, 278, 281, 283, 284, 288, 290, 294, 295, 296, 297, 299, 300, 301, 304, 305, 306, 307, 309, 310, 311, 312, 314, 315, 316, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 341, 342, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 402, 404, 406, 407, 408, 414, 415, 416, 420, 421, 422, 435], "manipul": [4, 83, 113, 176, 178, 434], "look": 4, "step": [4, 174, 179], "our": [4, 41], "simpl": [4, 32, 44, 62, 64, 78, 81, 92, 159], "smooth": [4, 66, 95, 178, 179], "save": [4, 15, 55, 62, 435], "result": [4, 9, 29, 32, 50, 53, 80, 81, 116, 156, 157, 158, 159], "numer": [5, 166], "python": [5, 177], "intro": 6, "glm": [6, 33, 60, 64, 67, 74, 113, 169, 170, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 423], "singl": [6, 15, 55, 71], "session": [6, 33, 64, 71], "subject": [6, 51, 53, 55, 62, 71, 79, 153, 158, 179], "The": [6, 35, 56, 66, 86, 159, 165, 179], "specifi": 6, "experiment": [6, 78, 110, 113, 184, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267], "paradigm": [6, 78, 107], "perform": [6, 55, 61, 69, 81, 98, 159, 161, 162], "detect": 6, "voxel": [6, 42, 43, 55, 75, 94, 164, 171, 178], "signific": [6, 70], "effect": [6, 67], "threshold": [6, 62, 171], "z": [6, 55, 107], "map": [6, 9, 12, 16, 17, 21, 30, 40, 42, 43, 47, 48, 55, 88, 94, 100, 103, 107, 117, 157, 159, 161, 165, 171, 181, 435], "an": [6, 9, 44, 58, 65, 72, 86, 90, 93, 95, 158, 159, 167, 169, 435], "f": [6, 36, 70], "test": [6, 70, 79, 80, 81, 94, 98, 167], "comput": [7, 27, 34, 35, 36, 37, 45, 50, 52, 53, 56, 58, 59, 73, 82, 89, 94, 96, 107, 109, 112, 116, 153, 154, 157, 168, 178, 179], "time": [7, 11, 23, 25, 27, 45, 52, 54, 55, 58, 59, 61, 66, 70, 73, 82, 89, 96, 109, 112, 154, 166, 168, 174, 179, 433], "brain": [8, 13, 14, 16, 19, 25, 28, 40, 42, 47, 48, 49, 50, 51, 56, 58, 83, 91, 97, 99, 113, 154, 156, 157, 158, 163, 176, 178, 427, 430, 435], "make": [9, 16, 32, 167, 175], "surfac": [9, 22, 23, 24, 37, 69, 108, 111, 168, 184, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 420, 421, 422, 434, 435], "statist": [9, 16, 62, 81, 88, 94, 97, 107, 113, 117, 169, 171, 181, 435], "get": [9, 24, 55, 70, 103, 167], "cortic": [9, 22, 37, 435], "mesh": [9, 24, 260, 435], "sampl": [9, 24, 68, 79, 80], "around": [9, 51, 58], "each": [9, 33], "node": 9, "interact": [9, 16, 153, 154, 430, 435], "plotli": 9, "comparison": [9, 161, 169, 171], "atla": [9, 10, 20, 21, 22, 47, 51, 52, 54, 56, 58, 86, 87, 99, 154, 167], "choos": [9, 100, 159, 160], "region": [9, 50, 51, 53, 54, 61, 86, 87, 88, 91, 94, 154, 156, 157, 179, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 431], "outlin": 9, "displai": [9, 14, 15, 52, 53, 54, 56, 58, 79, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 430, 435], "interest": [9, 94], "top": 9, "higher": [9, 66], "resolut": [9, 178, 179], "multipl": [9, 15, 153, 169, 171, 179], "view": [9, 15], "web": [9, 22, 52, 54, 58], "browser": [9, 22, 52, 54, 58], "impact": [9, 56], "paramet": [9, 34, 61, 63, 64, 66, 67, 68, 69, 86, 98, 100, 153, 160, 162, 179], "harvard": 10, "oxford": 10, "juelich": 10, "contour": [10, 14, 435], "global": [11, 56], "pattern": [11, 44], "carpet": 11, "fetch": [11, 20, 25, 26, 33, 47, 50, 53, 62, 76, 79, 80, 101, 107, 108, 157, 177, 181], "adhd": [11, 61], "deriv": [11, 48, 66, 181], "mask": [11, 16, 18, 25, 32, 36, 41, 66, 89, 94, 98, 103, 116, 159, 162, 164, 178, 179, 333, 334, 335, 336, 337, 338, 339, 340, 341, 428], "over": [11, 47], "base": [11, 23, 32, 37, 42, 43, 56, 69, 75, 100, 108, 157, 168, 171], "separ": [11, 86], "tissu": 11, "type": 11, "matplotlib": [12, 34], "colormap": [12, 435], "color": 12, "glass": [13, 14, 16], "whole": 13, "sagitt": [13, 15], "cut": [13, 15], "black": 13, "background": [13, 17, 89], "hemispher": [13, 14, 69], "option": 14, "demo": [14, 111], "differ": [14, 30, 32, 34, 35, 44, 47, 86, 153, 160, 179, 435], "project": [14, 26, 69, 167, 175], "left": [14, 69], "right": [14, 15, 100, 160], "fill": [14, 435], "both": 14, "more": [15, 17, 162], "tool": [15, 16], "we": [15, 32, 35, 41, 167], "provid": [15, 16], "gener": [15, 16, 33, 44, 61, 62, 64, 72, 75, 77, 103, 114, 181, 423], "purpos": [15, 16], "coron": 15, "axial": 15, "given": [15, 178], "coordin": [15, 47, 58, 154], "number": [15, 166], "5": [15, 17, 131, 138, 139, 140, 152], "onli": [15, 50, 179], "two": [15, 64, 71, 80, 160], "slice": [15, 44, 435], "without": [15, 56, 98, 159, 162], "colorbar": 15, "side": 15, "chang": [15, 17, 66, 98, 123, 124, 125, 126, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 146, 147, 148, 149, 150, 152, 179], "now": [15, 35, 52, 54], "ar": [15, 66], "three": [15, 100], "2x2": 15, "fashion": 15, "along": 15, "row": 15, "column": 15, "anoth": [15, 178], "wai": 15, "limit": 15, "demonstr": 15, "variou": 15, "show": [15, 38, 100, 397], "how": [15, 167, 175, 179], "add_edg": 15, "add_contour": 15, "seed": [15, 23, 55, 58, 61, 167, 179], "add_mark": 15, "annot": [15, 117], "function": [16, 19, 23, 41, 44, 46, 47, 50, 51, 54, 68, 99, 100, 113, 153, 154, 155, 157, 158, 162, 164, 167, 178, 180, 181, 432, 435], "plot_stat_map": [16, 20, 392], "view_img": [16, 399], "plot_glass_brain": [16, 384], "anatom": 16, "plot_anat": [16, 377], "roi": [16, 32, 51, 94, 178], "here": [16, 41], "plot_roi": [16, 391], "epi": [16, 89], "plot_epi": [16, 382], "control": [17, 162, 179], "contrast": [17, 61, 62, 66, 69, 70, 168, 269], "when": [17, 177], "local": [17, 72, 105, 106], "enhanc": [17, 123, 124, 125, 126, 128, 132, 133, 134, 135, 136, 138, 141, 142, 143, 145, 146, 147, 148, 149, 150, 152, 167], "dim": 17, "0": [17, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152], "decreas": [17, 177], "1": [17, 66, 118, 119, 120, 121, 122, 124, 127, 131, 134, 136, 139, 142, 145, 147, 149, 152], "multiscal": 19, "parcel": [19, 47, 49, 56, 154, 156, 157, 404], "group": [19, 48, 51, 53, 99, 108, 153, 166], "probabilist": [20, 21, 47, 54, 154], "default": [20, 58, 61, 87], "mode": [20, 58, 61, 86, 87, 435], "msdl": [20, 51, 99], "add_overlai": 20, "object": [20, 29, 31, 34, 62, 101, 108, 158, 177, 179], "plot_prob_atla": [20, 390], "atlas": [21, 47, 154, 181, 435], "access": [21, 178], "refer": [22, 23, 47, 49, 56, 58, 100, 102, 117, 153, 154, 156, 157, 158, 160, 161, 164, 165, 174, 425], "fetcher": [22, 167], "connect": [23, 46, 47, 51, 56, 57, 86, 99, 100, 113, 153, 155, 157, 180], "seri": [23, 25, 52, 54, 55, 58, 70, 89, 100, 154, 168, 179, 433], "calcul": [23, 70, 106], "technic": 24, "point": [24, 179], "illustr": 24, "scheme": 24, "build": [24, 33, 35, 40, 54, 94, 116, 154, 167, 175], "cylind": 24, "locat": 24, "which": [24, 156], "vol_to_surf": [24, 422], "would": 24, "draw": 24, "its": 24, "adjust": 24, "neuroimag": [25, 116, 160, 174, 177, 179], "appli": [25, 48, 116, 156, 178, 179], "correspond": [25, 52, 54], "megatrawl": 26, "network": [26, 50, 58, 61, 87, 158], "matric": [26, 53, 63, 100, 157, 179], "human": 26, "connectom": [26, 47, 50, 52, 53, 58, 153, 154, 180, 185, 186, 187, 188, 189, 190, 191, 192, 435], "anova": [29, 34, 98, 159, 162], "v": [29, 30, 31, 36, 102], "hous": [29, 30, 31, 36, 37, 102], "pipelin": [29, 33, 34, 115, 116, 161, 162, 179], "fit": [29, 31, 33, 34, 39, 43, 62, 64, 67, 70, 101, 108, 158, 168, 171], "obtain": [29, 62, 101, 108], "via": 29, "classifi": [30, 164], "train": 30, "frem": [31, 39, 161], "chair": 31, "recognit": [31, 36, 44, 102], "confus": [31, 35], "et": [32, 38, 39, 40, 41], "al": [32, 38, 39, 40, 41], "prepar": [32, 35, 36, 41, 61, 64, 67, 69, 81, 100, 159, 164, 175, 178, 179], "bar": [32, 435], "summar": 32, "after": [33, 89], "signal": [33, 51, 53, 54, 56, 58, 91, 154, 179, 417, 418, 419, 427, 433], "proper": 33, "event": [33, 72, 168], "structur": [33, 57, 165, 167], "instanti": 33, "run": [33, 41, 44, 66, 103, 162], "firstlevelmodel": [33, 62, 101, 108, 281], "report": [33, 61, 62, 64, 75, 167, 414, 415, 416, 432], "set": [34, 160, 162, 164, 167], "respons": [34, 37, 65, 66, 68], "valu": [34, 166], "screen": 34, "percentil": 34, "nest": 34, "multi": [35, 53, 158, 160], "class": [35, 160], "strategi": [35, 56, 159, 179], "barplot": 35, "searchlight": [36, 37, 164, 253], "bold": [37, 169], "stimuli": [38, 40, 41], "jimura": 39, "mix": [39, 161], "gambl": [39, 161], "experi": [39, 116, 159], "tv": 39, "l1": 39, "spacenet": [39, 43, 165], "encod": 40, "miyawaki": [40, 41], "2008": [40, 41], "estim": [40, 44, 57, 58, 61, 62, 64, 66, 67, 69, 76, 77, 79, 80, 98, 101, 159, 160, 162, 166], "recept": 40, "field": 40, "reconstruct": 41, "Then": 41, "defin": [41, 56, 63, 68, 100], "itself": 41, "let": 41, "u": 41, "quantifi": 41, "error": 41, "morphometri": [42, 43, 75, 171], "oasi": [42, 43, 75], "vbm": [42, 43, 75], "bio": 42, "marker": [42, 435], "ag": [42, 51, 75, 99], "mass": [42, 429], "univari": [42, 102, 105, 106, 164, 429], "preprocess": [42, 116, 181, 433], "qualiti": [42, 43, 94], "infer": 42, "massiv": [42, 102, 105, 106, 164], "space": [43, 71, 153], "net": 43, "prior": 43, "simul": [44, 57, 153, 162], "creat": [44, 63, 78, 178], "exercis": [44, 153, 154, 179], "go": [44, 98, 107, 116, 162], "compar": [47, 48, 49, 85, 100, 153, 164], "yeo": [47, 86], "direct": [47, 153], "asymmetr": 47, "iter": [47, 166], "spatial": [48, 161, 165, 178], "ica": [48, 103, 158], "dictionari": [48, 50, 157, 158], "canica": [48, 158, 256], "cluster": [49, 70, 76, 156], "method": [49, 116], "ward": 49, "compress": [49, 156], "represent": [49, 156, 177], "kmean": 49, "hierarch": 49, "those": 49, "rena": [49, 405], "correl": [50, 51, 54, 55, 56, 58, 153, 154], "coeffici": 50, "specif": [50, 117, 178], "classif": [51, 99, 160], "children": 51, "partial": [51, 58], "variabl": 51, "kind": [51, 99], "most": [51, 70, 99], "power": [51, 99], "spars": [52, 53, 153, 166], "invers": [52, 53, 153, 179], "covari": [52, 53, 153, 166], "And": [52, 54], "graph": [52, 54, 58, 154], "precis": 53, "produc": 55, "fisher": 55, "transform": [55, 178, 179], "confound": [56, 66, 179], "remov": [56, 66, 179], "flexibl": 56, "fmriprep": [56, 322, 323, 426], "interfac": [56, 319, 320, 321, 322, 323, 324, 426], "motion": 56, "scrub": 56, "predefin": 56, "sphere": [58, 164], "dmn": 58, "within": 58, "averag": 58, "strength": 58, "dosenbach": 58, "": [58, 61, 98, 152, 159], "see": 58, "also": 58, "cours": 61, "complet": 62, "bid": [62, 101, 108, 319, 320, 321, 426], "openneuro": 62, "automat": [62, 101, 108, 116, 181], "argument": [62, 101, 108, 179], "output": [62, 117, 177], "disk": 62, "design": [63, 66, 77, 78, 100, 168, 179], "finit": 65, "impul": 65, "fir": 65, "understand": [66, 89, 177, 179], "drift": 66, "hemodynam": 66, "ad": [66, 435], "nois": 66, "ol": 66, "order": 66, "censor": 66, "conclus": 66, "explicit": 67, "fix": [67, 121, 123, 124, 125, 126, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152], "mri": 68, "stimulu": 68, "analys": [69, 75], "residu": [70, 168], "import": [70, 436], "modul": [70, 110, 113, 184], "largest": 70, "actual": 70, "6": [70, 132, 141, 142, 143, 152], "distribut": [70, 175], "r": 70, "squar": 70, "nativ": 71, "tsv": 72, "neurospin": 72, "task": [72, 100, 105, 106], "second": [74, 76, 77, 78, 79, 80, 81, 101, 108, 113, 171], "true": 76, "posit": 76, "proport": 76, "t_map": 79, "unpair": 80, "pair": 80, "some": 81, "t": [81, 88], "affin": [84, 177, 178], "resampl": [84, 89, 93, 178, 179, 424], "mean": 85, "2": [85, 120, 125, 126, 127, 128, 129, 130, 131, 132, 137, 140, 143, 150, 152], "break": 86, "origin": 86, "relabel": 86, "min_siz": 86, "smith": 87, "niftimask": [89, 92, 179, 331], "raw": 89, "mni": 89, "templat": [89, 93, 181], "negat": 90, "math_img": [90, 310], "niftilabelsmask": [91, 179, 329], "find": [94, 164, 174], "thi": 94, "improv": 94, "advanc": [97, 98, 113, 115, 179], "tune": 98, "dummi": 98, "permut": 98, "lean": 98, "svc": 98, "discrimin": 98, "engin": 98, "beta": [100, 133, 138, 152, 159], "your": [100, 116, 167], "standard": 100, "lsa": 100, "aggreg": 100, "condit": 100, "lss": 100, "few": [100, 159], "trial": 100, "approach": [100, 153], "applic": [100, 174], "quick": 101, "saniti": 101, "check": [101, 436], "neurovault": [103, 107, 117], "term": 103, "reshap": 103, "compon": [103, 104, 158, 426], "figur": [103, 430], "multivari": [104, 183], "decomposit": [104, 183, 256, 257], "independ": 104, "motor": 105, "meta": 107, "stop": [107, 166], "success": 107, "minu": 107, "like": [107, 177], "protocol": 107, "combin": 107, "bibliographi": 114, "usag": [115, 179], "scale": [115, 435], "up": [115, 164, 167], "own": 116, "non": 116, "descript": [116, 166], "2d": [116, 178], "arrai": [116, 178], "unmask": [116, 179, 341], "inverse_transform": 116, "repositori": 117, "collect": 117, "filter": [117, 179], "neurosynth": 117, "changelog": [118, 119, 120, 121, 126, 127, 129, 152, 167], "3": [121, 129, 133, 134, 152], "4": [122, 130, 135, 136, 137, 152], "highlight": [122, 123, 125, 133, 134, 135, 138, 141, 144, 145, 146, 147, 148, 150, 152], "10": [123, 124, 125, 152], "new": [123, 124, 125, 126, 128, 129, 130, 131, 138, 139, 140, 141, 144, 145, 146, 147, 148, 150, 152], "1rc1": [124, 152], "bug": [126, 129, 136, 152, 167], "api": [126, 152, 174, 425], "summari": [126, 152, 153, 154, 157, 158, 168, 171], "rc": [138, 152], "alpha": [138, 152, 166], "known": [139, 152], "issu": [139, 152, 175], "0rc": [141, 152], "0b0": [141, 152], "0a0": [141, 152], "7": [144, 145, 152], "8": [146, 147, 152], "9": [148, 149, 150, 152], "dev": [], "page": [153, 154, 157, 158, 168, 171], "full": [153, 154, 159], "rest": [153, 154, 155], "link": [153, 436], "total": 153, "tangent": 153, "maxprob": 154, "state": 155, "movi": [156, 157], "watch": [156, 157], "code": [156, 159, 161, 164, 167, 175, 178, 435], "better": [157, 165, 179], "relat": [158, 165], "interpret": 158, "altern": 158, "2001": 159, "definit": [159, 179], "made": 159, "easi": 159, "good": 159, "choic": 159, "put": 159, "togeth": 159, "dimens": 159, "reduct": 159, "final": 159, "script": 159, "regress": 160, "linear": [160, 423], "bag": 160, "sever": 160, "fast": 161, "ensembl": 161, "regular": 161, "robust": 161, "empir": 161, "increas": 161, "ani": 162, "mvpa": 163, "contain": 164, "inform": 164, "principl": [164, 166], "radiu": 164, "f_score": 164, "spm": 164, "stabil": 166, "execut": 166, "synthet": 166, "criteria": 166, "maximum": 166, "dualiti": 166, "gap": 166, "variat": 166, "norm": 166, "initi": 166, "modifi": 166, "criterion": 166, "algorithm": 166, "bound": 166, "grid": 166, "search": 166, "warm": 166, "restart": 166, "contribut": 167, "conduct": 167, "help": [167, 174], "discuss": 167, "idea": 167, "answer": 167, "question": 167, "review": 167, "pull": [167, 175], "request": [167, 175], "do": 167, "decid": 167, "goe": 167, "scope": 167, "who": 167, "decis": 167, "guidelin": 167, "pr": 167, "style": 167, "privat": 167, "pre": 167, "commit": 167, "fixtur": 167, "document": [167, 175], "environ": 167, "instal": [167, 436], "recommend": 167, "addit": 167, "case": [167, 178], "mainten": [167, 175], "hrf": 168, "primer": 169, "analyz": [170, 177], "correct": 171, "glossari": 172, "organ": 175, "close": 175, "polici": 175, "releas": [175, 436], "upload": 175, "them": 175, "pypi": 175, "deploi": 175, "post": 175, "input": 177, "name": 177, "match": [177, 178], "glob": 177, "user": [177, 437], "path": 177, "expans": 177, "open": [177, 179], "nilearn_data": 177, "where": 177, "store": 177, "format": 177, "shape": [177, 178], "memori": 177, "text": 177, "phenotyp": 177, "csv": 177, "panda": 177, "target": 178, "special": 178, "size": 178, "individu": 178, "oper": [178, 431], "masker": [111, 179, 325, 326, 327, 328, 329, 330, 331, 332, 427], "concept": 179, "philosophi": 179, "custom": 179, "100": 179, "extra": 179, "cutoff": 179, "common": 179, "dtype": 179, "tempor": 179, "resiz": 179, "niftimapsmask": [179, 330], "multiniftimask": [179, 328], "multiniftilabelsmask": [179, 326], "multiniftimapsmask": [179, 327], "niftispheresmask": [179, 332], "connectivitymeasur": 185, "groupsparsecovari": 186, "groupsparsecovariancecv": 187, "cov_to_corr": 188, "group_sparse_covari": 189, "prec_to_parti": 190, "sym_matrix_to_vec": 191, "vec_to_sym_matrix": 192, "fetch_abide_pcp": 193, "fetch_adhd": 194, "fetch_atlas_a": 195, "fetch_atlas_allen_2011": 196, "fetch_atlas_basc_multiscale_2015": 197, "fetch_atlas_craddock_2012": 198, "fetch_atlas_destrieux_2009": 199, "fetch_atlas_difumo": 200, "fetch_atlas_harvard_oxford": 201, "fetch_atlas_juelich": 202, "fetch_atlas_msdl": 203, "fetch_atlas_pauli_2017": 204, "fetch_atlas_schaefer_2018": 205, "fetch_atlas_smith_2009": 206, "fetch_atlas_surf_destrieux": 207, "fetch_atlas_talairach": 208, "fetch_atlas_yeo_2011": 209, "fetch_bids_langloc_dataset": 210, "fetch_coords_dosenbach_2010": 211, "fetch_coords_power_2011": 212, "fetch_coords_seitzman_2018": 213, "fetch_development_fmri": 214, "fetch_ds000030_url": 215, "fetch_fiac_first_level": 216, "fetch_haxbi": 217, "fetch_icbm152_2009": 218, "fetch_icbm152_brain_gm_mask": 219, "fetch_language_localizer_demo_dataset": 220, "fetch_localizer_button_task": 221, "fetch_localizer_calculation_task": 222, "fetch_localizer_contrast": 223, "fetch_localizer_first_level": 224, "fetch_megatrawls_netmat": 225, "fetch_mixed_gambl": 226, "fetch_miyawaki2008": 227, "fetch_neurovault": 228, "fetch_neurovault_auditory_computation_task": 229, "fetch_neurovault_id": 230, "fetch_neurovault_motor_task": 231, "fetch_oasis_vbm": 232, "fetch_openneuro_dataset": 233, "fetch_openneuro_dataset_index": 234, "fetch_spm_auditori": 235, "fetch_spm_multimodal_fmri": 236, "fetch_surf_fsaverag": 237, "fetch_surf_nki_enhanc": 238, "get_data_dir": 239, "load_mni152_brain_mask": 240, "load_mni152_gm_mask": 241, "load_mni152_gm_templ": 242, "load_mni152_templ": 243, "load_mni152_wm_mask": 244, "load_mni152_wm_templ": 245, "load_sample_motor_activation_imag": 246, "patch_openneuro_dataset": 247, "select_from_index": 248, "decoderregressor": 250, "fremclassifi": 251, "fremregressor": 252, "spacenetclassifi": 254, "spacenetregressor": 255, "dictlearn": 257, "armodel": 268, "fcontrastresult": 270, "likelihoodmodelresult": 271, "olsmodel": 272, "regressionresult": 273, "simpleregressionresult": 274, "tcontrastresult": 275, "cluster_level_infer": 276, "compute_contrast": 277, "compute_fixed_effect": 278, "expression_to_contrast_vector": 279, "fdr_threshold": 280, "first_level": [281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 423], "check_design_matrix": 282, "compute_regressor": 283, "first_level_from_bid": 284, "glover_dispersion_deriv": 285, "glover_hrf": 286, "glover_time_deriv": 287, "make_first_level_design_matrix": 288, "mean_scal": 289, "run_glm": 290, "spm_dispersion_deriv": 291, "spm_hrf": 292, "spm_time_deriv": 293, "second_level": [294, 295, 296, 423], "secondlevelmodel": 294, "make_second_level_design_matrix": 295, "non_parametric_infer": 296, "threshold_stats_img": 297, "binarize_img": 298, "clean_img": 299, "concat_img": 300, "coord_transform": 301, "copy_img": 302, "crop_img": 303, "get_data": 304, "high_variance_confound": [305, 419], "index_img": 306, "iter_img": 307, "largest_connected_component_img": 308, "load_img": 309, "mean_img": 311, "new_img_lik": 312, "reorder_img": 313, "resample_img": 314, "resample_to_img": 315, "smooth_img": 316, "swap_img_hemispher": 317, "threshold_img": 318, "get_bids_fil": 319, "parse_bids_filenam": 320, "save_glm_to_bid": 321, "load_confound": 322, "load_confounds_strategi": 323, "fsl": [324, 426], "get_design_from_fslmat": 324, "basemask": 325, "apply_mask": 333, "compute_background_mask": 334, "compute_brain_mask": 335, "compute_epi_mask": 336, "compute_multi_background_mask": 337, "compute_multi_brain_mask": 338, "compute_multi_epi_mask": 339, "intersect_mask": 340, "mass_univari": [342, 429], "permuted_ol": 342, "baseax": 343, "baseslic": 344, "cutax": 345, "glassbrainax": 346, "lprojector": 347, "lrprojector": 348, "lyrprojector": 349, "lyrzprojector": 350, "lzrprojector": 351, "lzryprojector": 352, "mosaicslic": 353, "orthoprojector": 354, "orthoslic": 355, "plotlysurfacefigur": 356, "rprojector": 357, "tiledslic": 358, "xprojector": 359, "xslicer": 360, "xzprojector": 361, "xzslicer": 362, "yprojector": 363, "yslicer": 364, "yxprojector": 365, "yxslicer": 366, "yzprojector": 367, "yzslicer": 368, "zprojector": 369, "zslicer": 370, "get_projector": 371, "get_slic": 372, "find_cut_slic": 373, "find_parcellation_cut_coord": 374, "find_probabilistic_atlas_cut_coord": 375, "find_xyz_cut_coord": 376, "plot_carpet": 378, "plot_connectom": 379, "plot_contrast_matrix": 380, "plot_design_matrix": 381, "plot_ev": 383, "plot_img": 385, "plot_img_comparison": 386, "plot_img_on_surf": 387, "plot_mark": 388, "plot_matrix": 389, "plot_surf": 393, "plot_surf_contour": 394, "plot_surf_roi": 395, "plot_surf_stat_map": [396, 435], "view_connectom": 398, "view_img_on_surf": [400, 435], "view_mark": 401, "view_surf": [402, 435], "hierarchicalkmean": 403, "regionextractor": 406, "connected_label_region": 407, "connected_region": 408, "img_to_signals_label": 409, "img_to_signals_map": 410, "recursive_neighbor_agglomer": 411, "signals_to_img_label": 412, "signals_to_img_map": 413, "htmlreport": 414, "get_clusters_t": 415, "make_glm_report": 416, "butterworth": 417, "clean": 418, "load_surf_data": 420, "load_surf_mesh": 421, "process": 424, "util": [424, 428], "avail": 435, "overlai": 435, "edg": 435, "quickstart": 436, "latest": 436, "version": 436, "drop": 436, "hour": 436, "depend": 436, "guid": 437, "tabl": 437, "content": 437, "short": 111, "filemesh": 258, "inmemorymesh": 259, "polymesh": 261, "surfaceimag": 262, "surfacelabelsmask": 263, "surfacemask": 264, "fetch_destrieux": 265, "fetch_nki": 266, "load_fsaverag": 267}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinxcontrib.bibtex": 9, "sphinx": 58}, "alltitles": {"Team": [[0, "team"]], "Core developers": [[0, "core-developers"]], "Other contributors": [[0, "other-contributors"]], "Funding": [[0, "funding"]], "Citing nilearn": [[0, "citing-nilearn"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Basic tutorials": [[1, "basic-tutorials"], [113, "basic-tutorials"]], "3D and 4D niimgs: handling and visualizing": [[2, "d-and-4d-niimgs-handling-and-visualizing"]], "Downloading tutorial datasets from Internet": [[2, "downloading-tutorial-datasets-from-internet"]], "Visualizing a 3D file": [[2, "visualizing-a-3d-file"]], "Visualizing one volume in a 4D file": [[2, "visualizing-one-volume-in-a-4d-file"]], "Looping on all volumes in a 4D file": [[2, "looping-on-all-volumes-in-a-4d-file"]], "Looping through selected volumes in a 4D file": [[2, "looping-through-selected-volumes-in-a-4d-file"]], "A introduction tutorial to fMRI decoding": [[3, "a-introduction-tutorial-to-fmri-decoding"]], "Retrieve and load the fMRI data from the Haxby study": [[3, "retrieve-and-load-the-fmri-data-from-the-haxby-study"], [98, "retrieve-and-load-the-fmri-data-from-the-haxby-study"]], "First download the data": [[3, "first-download-the-data"], [98, "first-download-the-data"]], "Visualizing the fmri volume": [[3, "visualizing-the-fmri-volume"]], "Feature extraction: from fMRI volumes to a data matrix": [[3, "feature-extraction-from-fmri-volumes-to-a-data-matrix"]], "Load the behavioral labels": [[3, "load-the-behavioral-labels"]], "Restrict the analysis to cats and faces": [[3, "restrict-the-analysis-to-cats-and-faces"]], "Decoding with Support Vector Machine": [[3, "decoding-with-support-vector-machine"]], "Measuring prediction scores using cross-validation": [[3, "measuring-prediction-scores-using-cross-validation"]], "Manually leaving out data": [[3, "manually-leaving-out-data"]], "Implementing a KFold loop": [[3, "implementing-a-kfold-loop"]], "Cross-validation with the decoder": [[3, "cross-validation-with-the-decoder"]], "Inspecting the model weights": [[3, "inspecting-the-model-weights"]], "Turning the weights into a nifti image": [[3, "turning-the-weights-into-a-nifti-image"]], "Plotting the SVM weights": [[3, "plotting-the-svm-weights"]], "What is the chance level accuracy?": [[3, "what-is-the-chance-level-accuracy"]], "Further reading": [[3, "further-reading"]], "Basic nilearn example: manipulating and looking at data": [[4, "basic-nilearn-example-manipulating-and-looking-at-data"]], "A first step: looking at our data": [[4, "a-first-step-looking-at-our-data"]], "Simple image manipulation: smoothing": [[4, "simple-image-manipulation-smoothing"]], "Saving results to a file": [[4, "saving-results-to-a-file"]], "Basic numerics and plotting with Python": [[5, "basic-numerics-and-plotting-with-python"]], "Intro to GLM Analysis: a single-session, single-subject fMRI dataset": [[6, "intro-to-glm-analysis-a-single-session-single-subject-fmri-dataset"]], "The data": [[6, "the-data"]], "Retrieving the data": [[6, "retrieving-the-data"], [23, "retrieving-the-data"], [66, "retrieving-the-data"]], "Specifying the experimental paradigm": [[6, "specifying-the-experimental-paradigm"]], "Performing the GLM analysis": [[6, "performing-the-glm-analysis"]], "Detecting voxels with significant effects": [[6, "detecting-voxels-with-significant-effects"]], "Plot thresholded z scores map": [[6, "plot-thresholded-z-scores-map"]], "Performing an F-test": [[6, "performing-an-f-test"]], "Computation times": [[7, "computation-times"], [27, "computation-times"], [45, "computation-times"], [59, "computation-times"], [73, "computation-times"], [82, "computation-times"], [96, "computation-times"], [109, "computation-times"], [112, "computation-times"]], "Visualization of brain images": [[8, "visualization-of-brain-images"], [113, "visualization-of-brain-images"]], "Making a surface plot of a 3D statistical map": [[9, "making-a-surface-plot-of-a-3d-statistical-map"]], "Get a statistical map": [[9, "get-a-statistical-map"]], "Get a cortical mesh": [[9, "get-a-cortical-mesh"]], "Sample the 3D data around each node of the mesh": [[9, "sample-the-3d-data-around-each-node-of-the-mesh"]], "Plot the result": [[9, "plot-the-result"]], "Interactive plotting with Plotly": [[9, "interactive-plotting-with-plotly"]], "Plot 3D image for comparison": [[9, "plot-3d-image-for-comparison"]], "Use an atlas and choose regions to outline": [[9, "use-an-atlas-and-choose-regions-to-outline"]], "Display outlines of the regions of interest on top of a statistical map": [[9, "display-outlines-of-the-regions-of-interest-on-top-of-a-statistical-map"]], "Plot with higher-resolution mesh": [[9, "plot-with-higher-resolution-mesh"]], "Plot multiple views of the 3D volume on a surface": [[9, "plot-multiple-views-of-the-3d-volume-on-a-surface"]], "3D visualization in a web browser": [[9, "d-visualization-in-a-web-browser"], [22, "d-visualization-in-a-web-browser"], [52, "d-visualization-in-a-web-browser"], [54, "d-visualization-in-a-web-browser"], [58, "d-visualization-in-a-web-browser"]], "Impact of plot parameters on visualization": [[9, "impact-of-plot-parameters-on-visualization"]], "Basic Atlas plotting": [[10, "basic-atlas-plotting"]], "Retrieving the atlas data": [[10, "retrieving-the-atlas-data"]], "Visualizing the Harvard-Oxford atlas": [[10, "visualizing-the-harvard-oxford-atlas"]], "Visualizing the Juelich atlas": [[10, "visualizing-the-juelich-atlas"]], "Visualizing the Harvard-Oxford atlas with contours": [[10, "visualizing-the-harvard-oxford-atlas-with-contours"]], "Visualizing the Juelich atlas with contours": [[10, "visualizing-the-juelich-atlas-with-contours"]], "Visualizing global patterns with a carpet plot": [[11, "visualizing-global-patterns-with-a-carpet-plot"]], "Fetching data from ADHD dataset": [[11, "fetching-data-from-adhd-dataset"]], "Deriving a mask": [[11, "deriving-a-mask"]], "Visualizing global patterns over time": [[11, "visualizing-global-patterns-over-time"]], "Deriving a label-based mask": [[11, "deriving-a-label-based-mask"]], "Visualizing global patterns, separated by tissue type": [[11, "visualizing-global-patterns-separated-by-tissue-type"]], "Matplotlib colormaps in Nilearn": [[12, "matplotlib-colormaps-in-nilearn"]], "Plot color maps": [[12, "plot-color-maps"]], "Plot matplotlib color maps": [[12, "plot-matplotlib-color-maps"]], "Glass brain plotting in nilearn": [[13, "glass-brain-plotting-in-nilearn"]], "Load data": [[13, "load-data"]], "Glass brain plotting: whole brain sagittal cuts": [[13, "glass-brain-plotting-whole-brain-sagittal-cuts"]], "Glass brain plotting: black background": [[13, "glass-brain-plotting-black-background"]], "Glass brain plotting: Hemispheric sagittal cuts": [[13, "glass-brain-plotting-hemispheric-sagittal-cuts"]], "Glass brain plotting in nilearn (all options)": [[14, "glass-brain-plotting-in-nilearn-all-options"]], "Load the data": [[14, "load-the-data"]], "Demo glass brain plotting": [[14, "demo-glass-brain-plotting"]], "Different projections for the left and right hemispheres": [[14, "different-projections-for-the-left-and-right-hemispheres"]], "Demo glass brain plotting with contours and with fillings": [[14, "demo-glass-brain-plotting-with-contours-and-with-fillings"]], "Display contour projections in both hemispheres": [[14, "display-contour-projections-in-both-hemispheres"]], "More plotting tools from nilearn": [[15, "more-plotting-tools-from-nilearn"]], "First, we retrieve data from nilearn provided (general-purpose) datasets": [[15, "first-we-retrieve-data-from-nilearn-provided-general-purpose-datasets"]], "Visualizing in - \u2018sagittal\u2019, \u2018coronal\u2019 and \u2018axial\u2019 with given coordinates": [[15, "visualizing-in-sagittal-coronal-and-axial-with-given-coordinates"]], "Visualizing in - single view \u2018axial\u2019 with number of cuts=5": [[15, "visualizing-in-single-view-axial-with-number-of-cuts-5"]], "Visualizing in - single view \u2018sagittal\u2019 with only two slices": [[15, "visualizing-in-single-view-sagittal-with-only-two-slices"]], "Visualizing in - \u2018coronal\u2019 view with single cut": [[15, "visualizing-in-coronal-view-with-single-cut"]], "Visualizing without a colorbar on the right side": [[15, "visualizing-without-a-colorbar-on-the-right-side"]], "Visualize in - two views \u2018sagittal\u2019 and \u2018axial\u2019 with given coordinates": [[15, "visualize-in-two-views-sagittal-and-axial-with-given-coordinates"]], "Changing the views to \u2018coronal\u2019, \u2018sagittal\u2019 views with coordinates": [[15, "changing-the-views-to-coronal-sagittal-views-with-coordinates"]], "Now, views are changed to \u2018coronal\u2019 and \u2018axial\u2019 views with coordinates": [[15, "now-views-are-changed-to-coronal-and-axial-views-with-coordinates"]], "Visualizing three views in 2x2 fashion": [[15, "visualizing-three-views-in-2x2-fashion"]], "Visualizing three views along multiple rows and columns": [[15, "visualizing-three-views-along-multiple-rows-and-columns"]], "Now, changing the number of slices along columns": [[15, "now-changing-the-number-of-slices-along-columns"]], "Now, another way of limiting the number of slices along rows and columns": [[15, "now-another-way-of-limiting-the-number-of-slices-along-rows-and-columns"]], "Demonstrating various display features": [[15, "demonstrating-various-display-features"]], "Showing how to use add_edges": [[15, "showing-how-to-use-add-edges"]], "How to use add_contours": [[15, "how-to-use-add-contours"]], "Plotting seeds using add_markers": [[15, "plotting-seeds-using-add-markers"]], "Annotating plots": [[15, "annotating-plots"]], "Saving plots to file": [[15, "saving-plots-to-file"]], "Plotting tools in nilearn": [[16, "plotting-tools-in-nilearn"]], "Retrieve data from nilearn provided (general-purpose) datasets": [[16, "retrieve-data-from-nilearn-provided-general-purpose-datasets"]], "Plotting statistical maps with function plot_stat_map": [[16, "plotting-statistical-maps-with-function-plot-stat-map"]], "Making interactive visualizations with function view_img": [[16, "making-interactive-visualizations-with-function-view-img"]], "Plotting statistical maps in a glass brain with function plot_glass_brain": [[16, "plotting-statistical-maps-in-a-glass-brain-with-function-plot-glass-brain"]], "Plotting anatomical images with function plot_anat": [[16, "plotting-anatomical-images-with-function-plot-anat"]], "Plotting ROIs (here the mask) with function plot_roi": [[16, "plotting-rois-here-the-mask-with-function-plot-roi"]], "Plotting EPI image with function plot_epi": [[16, "plotting-epi-image-with-function-plot-epi"]], "Controlling the contrast of the background when plotting": [[17, "controlling-the-contrast-of-the-background-when-plotting"]], "Retrieve the data: the localizer dataset with contrast maps": [[17, "retrieve-the-data-the-localizer-dataset-with-contrast-maps"]], "Plotting with enhancement of background image with dim=-.5": [[17, "plotting-with-enhancement-of-background-image-with-dim-5"]], "Plotting with no change of contrast in background image with dim=0": [[17, "plotting-with-no-change-of-contrast-in-background-image-with-dim-0"]], "Plotting with decrease of contrast in background image with dim=.5": [[17, "plotting-with-decrease-of-contrast-in-background-image-with-dim-5"]], "Plotting with more decrease in contrast with dim=1": [[17, "plotting-with-more-decrease-in-contrast-with-dim-1"]], "Plot Haxby masks": [[18, "plot-haxby-masks"]], "Load Haxby dataset": [[18, "load-haxby-dataset"], [36, "load-haxby-dataset"], [37, "load-haxby-dataset"]], "Plot the masks": [[18, "plot-the-masks"]], "Visualizing multiscale functional brain parcellations": [[19, "visualizing-multiscale-functional-brain-parcellations"]], "Retrieving multiscale group brain parcellations": [[19, "retrieving-multiscale-group-brain-parcellations"]], "Visualizing brain parcellations": [[19, "visualizing-brain-parcellations"]], "Visualizing a probabilistic atlas: the default mode in the MSDL atlas": [[20, "visualizing-a-probabilistic-atlas-the-default-mode-in-the-msdl-atlas"]], "Fetching probabilistic atlas - MSDL atlas": [[20, "fetching-probabilistic-atlas-msdl-atlas"]], "Visualizing a probabilistic atlas with plot_stat_map and add_overlay object": [[20, "visualizing-a-probabilistic-atlas-with-plot-stat-map-and-add-overlay-object"]], "Visualizing a probabilistic atlas with plot_prob_atlas": [[20, "visualizing-a-probabilistic-atlas-with-plot-prob-atlas"]], "Visualizing 4D probabilistic atlas maps": [[21, "visualizing-4d-probabilistic-atlas-maps"]], "Other probabilistic atlases accessible with nilearn": [[21, "other-probabilistic-atlases-accessible-with-nilearn"]], "Loading and plotting of a cortical surface atlas": [[22, "loading-and-plotting-of-a-cortical-surface-atlas"]], "References": [[22, "references"], [23, "references"], [49, "references"], [49, "id1"], [56, "references"], [58, "references"], [100, "references"], [102, "references"], [117, "references"], [153, null], [154, null], [154, null], [157, null], [158, null], [158, null], [160, "references"], [161, "references"], [164, "references"], [165, "references"]], "Data fetcher": [[22, "data-fetcher"]], "Visualization": [[22, "visualization"], [25, "visualization"], [26, "visualization"], [30, "visualization"], [36, "visualization"], [37, "visualization"], [42, "visualization"], [164, "visualization"]], "Seed-based connectivity on the surface": [[23, "seed-based-connectivity-on-the-surface"]], "Extracting the seed time series": [[23, "extracting-the-seed-time-series"]], "Calculating seed-based functional connectivity": [[23, "calculating-seed-based-functional-connectivity"]], "Technical point: Illustration of the volume to surface sampling schemes": [[24, "technical-point-illustration-of-the-volume-to-surface-sampling-schemes"]], "Build a mesh (of a cylinder)": [[24, "build-a-mesh-of-a-cylinder"]], "Get the locations from which vol_to_surf would draw its samples": [[24, "get-the-locations-from-which-vol-to-surf-would-draw-its-samples"]], "Plot the mesh and the sample locations": [[24, "plot-the-mesh-and-the-sample-locations"]], "Adjust the sample locations": [[24, "adjust-the-sample-locations"]], "NeuroImaging volumes visualization": [[25, "neuroimaging-volumes-visualization"]], "Fetch data": [[25, "fetch-data"]], "Extracting a brain mask": [[25, "extracting-a-brain-mask"], [178, "extracting-a-brain-mask"]], "Applying the mask to extract the corresponding time series": [[25, "applying-the-mask-to-extract-the-corresponding-time-series"]], "Visualizing Megatrawls Network Matrices from Human Connectome Project": [[26, "visualizing-megatrawls-network-matrices-from-human-connectome-project"]], "Fetching the Megatrawls Network matrices": [[26, "fetching-the-megatrawls-network-matrices"]], "Decoding and predicting from brain images": [[28, "decoding-and-predicting-from-brain-images"], [113, "decoding-and-predicting-from-brain-images"]], "Decoding with ANOVA + SVM: face vs house in the Haxby dataset": [[29, "decoding-with-anova-svm-face-vs-house-in-the-haxby-dataset"]], "Retrieve the files of the Haxby dataset": [[29, "retrieve-the-files-of-the-haxby-dataset"]], "Load the behavioral data": [[29, "load-the-behavioral-data"], [33, "load-the-behavioral-data"]], "ANOVA pipeline with nilearn.decoding.Decoder object": [[29, "anova-pipeline-with-nilearn-decoding-decoder-object"], [34, "anova-pipeline-with-nilearn-decoding-decoder-object"]], "Fit the decoder and predict": [[29, "fit-the-decoder-and-predict"]], "Obtain prediction scores via cross validation": [[29, "obtain-prediction-scores-via-cross-validation"]], "Visualize the results": [[29, "visualize-the-results"], [81, "visualize-the-results"]], "Different classifiers in decoding the Haxby dataset": [[30, "different-classifiers-in-decoding-the-haxby-dataset"]], "Loading the data": [[30, "loading-the-data"], [40, "loading-the-data"], [94, "loading-the-data"]], "Training the decoder": [[30, "training-the-decoder"]], "Visualizing the face vs house map": [[30, "visualizing-the-face-vs-house-map"]], "Decoding with FREM: face vs house vs chair object recognition": [[31, "decoding-with-frem-face-vs-house-vs-chair-object-recognition"]], "Load the Haxby dataset": [[31, "load-the-haxby-dataset"], [34, "load-the-haxby-dataset"]], "Fit FREM": [[31, "fit-frem"], [39, "fit-frem"]], "Plot confusion matrix": [[31, "plot-confusion-matrix"]], "Visualization of FREM weights": [[31, "visualization-of-frem-weights"]], "ROI-based decoding analysis in Haxby et al. dataset": [[32, "roi-based-decoding-analysis-in-haxby-et-al-dataset"]], "Load and prepare the data": [[32, "load-and-prepare-the-data"]], "Decoding on the different masks": [[32, "decoding-on-the-different-masks"]], "We make a simple bar plot to summarize the results": [[32, "we-make-a-simple-bar-plot-to-summarize-the-results"]], "Decoding of a dataset after GLM fit for signal extraction": [[33, "decoding-of-a-dataset-after-glm-fit-for-signal-extraction"]], "Fetch example Haxby dataset": [[33, "fetch-example-haxby-dataset"]], "Build a proper event structure for each session": [[33, "build-a-proper-event-structure-for-each-session"]], "Instantiate and run FirstLevelModel": [[33, "instantiate-and-run-firstlevelmodel"]], "Run the glm on data from each session": [[33, "run-the-glm-on-data-from-each-session"]], "Generating a report": [[33, "generating-a-report"], [61, "generating-a-report"], [62, "generating-a-report"], [64, "generating-a-report"], [75, "generating-a-report"]], "Build the decoding pipeline": [[33, "build-the-decoding-pipeline"]], "Setting a parameter by cross-validation": [[34, "setting-a-parameter-by-cross-validation"]], "Fit the Decoder and predict the responses": [[34, "fit-the-decoder-and-predict-the-responses"]], "Compute prediction scores with different values of screening percentile": [[34, "compute-prediction-scores-with-different-values-of-screening-percentile"]], "Nested cross-validation": [[34, "nested-cross-validation"]], "Plot the prediction scores using matplotlib": [[34, "plot-the-prediction-scores-using-matplotlib"]], "The haxby dataset: different multi-class strategies": [[35, "the-haxby-dataset-different-multi-class-strategies"]], "Load the Haxby data dataset": [[35, "load-the-haxby-data-dataset"]], "Prepare the fMRI data": [[35, "prepare-the-fmri-data"]], "Build the decoders, using scikit-learn": [[35, "build-the-decoders-using-scikit-learn"]], "Now we compute cross-validation scores": [[35, "now-we-compute-cross-validation-scores"]], "Plot barplots of the prediction scores": [[35, "plot-barplots-of-the-prediction-scores"]], "Plot a confusion matrix": [[35, "plot-a-confusion-matrix"]], "Searchlight analysis of face vs house recognition": [[36, "searchlight-analysis-of-face-vs-house-recognition"]], "Restrict to faces and houses": [[36, "restrict-to-faces-and-houses"], [37, "restrict-to-faces-and-houses"]], "Prepare masks": [[36, "prepare-masks"]], "Searchlight computation": [[36, "searchlight-computation"], [37, "searchlight-computation"]], "F-scores computation": [[36, "f-scores-computation"]], "Cortical surface-based searchlight decoding": [[37, "cortical-surface-based-searchlight-decoding"]], "Surface bold response": [[37, "surface-bold-response"]], "Show stimuli of Haxby et al. dataset": [[38, "show-stimuli-of-haxby-et-al-dataset"]], "FREM on Jimura et al \u201cmixed gambles\u201d dataset": [[39, "frem-on-jimura-et-al-mixed-gambles-dataset"]], "Load the data from the Jimura mixed-gamble experiment": [[39, "load-the-data-from-the-jimura-mixed-gamble-experiment"]], "Example use of TV-L1 SpaceNet": [[39, "example-use-of-tv-l1-spacenet"]], "Encoding models for visual stimuli from Miyawaki et al. 2008": [[40, "encoding-models-for-visual-stimuli-from-miyawaki-et-al-2008"]], "Building the encoding models": [[40, "building-the-encoding-models"]], "Mapping the encoding scores on the brain": [[40, "mapping-the-encoding-scores-on-the-brain"]], "Estimating receptive fields": [[40, "estimating-receptive-fields"]], "Reconstruction of visual stimuli from Miyawaki et al. 2008": [[41, "reconstruction-of-visual-stimuli-from-miyawaki-et-al-2008"]], "First we load the Miyawaki dataset": [[41, "first-we-load-the-miyawaki-dataset"]], "Then we prepare and mask the data": [[41, "then-we-prepare-and-mask-the-data"]], "We define our prediction function": [[41, "we-define-our-prediction-function"]], "Here we run the prediction: the decoding itself": [[41, "here-we-run-the-prediction-the-decoding-itself"]], "Let us quantify our prediction error": [[41, "let-us-quantify-our-prediction-error"]], "Voxel-Based Morphometry on Oasis dataset": [[42, "voxel-based-morphometry-on-oasis-dataset"]], "Predictive modeling analysis: VBM bio-markers of aging?": [[42, "predictive-modeling-analysis-vbm-bio-markers-of-aging"]], "Brain mapping with mass univariate": [[42, "brain-mapping-with-mass-univariate"]], "Load Oasis dataset": [[42, "load-oasis-dataset"], [75, "load-oasis-dataset"]], "Preprocess data": [[42, "preprocess-data"]], "Visualize the quality of predictions": [[42, "visualize-the-quality-of-predictions"]], "Inference with massively univariate model": [[42, "inference-with-massively-univariate-model"]], "Voxel-Based Morphometry on Oasis dataset with Space-Net prior": [[43, "voxel-based-morphometry-on-oasis-dataset-with-space-net-prior"]], "Load the Oasis VBM dataset": [[43, "load-the-oasis-vbm-dataset"]], "Fit the SpaceNet and predict with it": [[43, "fit-the-spacenet-and-predict-with-it"]], "Visualize the decoding maps and quality of predictions": [[43, "visualize-the-decoding-maps-and-quality-of-predictions"]], "Example of pattern recognition on simulated data": [[44, "example-of-pattern-recognition-on-simulated-data"]], "A function to generate data": [[44, "a-function-to-generate-data"]], "A simple function to plot slices": [[44, "a-simple-function-to-plot-slices"]], "Create data": [[44, "create-data"]], "Run different estimators": [[44, "run-different-estimators"]], "An exercise to go further": [[44, "an-exercise-to-go-further"]], "Functional connectivity": [[46, "functional-connectivity"], [113, "functional-connectivity"]], "Comparing connectomes on different reference atlases": [[47, "comparing-connectomes-on-different-reference-atlases"]], "Load atlases": [[47, "load-atlases"]], "Load functional data": [[47, "load-functional-data"]], "Extract coordinates on Yeo atlas - parcellations": [[47, "extract-coordinates-on-yeo-atlas-parcellations"]], "Plot a directed connectome - asymmetric connectivity measure": [[47, "plot-a-directed-connectome-asymmetric-connectivity-measure"]], "Load probabilistic atlases - extracting coordinates on brain maps": [[47, "load-probabilistic-atlases-extracting-coordinates-on-brain-maps"]], "Iterate over fetched atlases to extract coordinates - probabilistic": [[47, "iterate-over-fetched-atlases-to-extract-coordinates-probabilistic"]], "Deriving spatial maps from group fMRI data using ICA and Dictionary Learning": [[48, "deriving-spatial-maps-from-group-fmri-data-using-ica-and-dictionary-learning"]], "Load brain development fmri dataset": [[48, "load-brain-development-fmri-dataset"]], "Apply CanICA on the data": [[48, "apply-canica-on-the-data"]], "Compare CanICA to dictionary learning": [[48, "compare-canica-to-dictionary-learning"]], "Clustering methods to learn a brain parcellation from fMRI": [[49, "clustering-methods-to-learn-a-brain-parcellation-from-fmri"]], "Download a brain development fmri dataset and turn it to a data matrix": [[49, "download-a-brain-development-fmri-dataset-and-turn-it-to-a-data-matrix"]], "Brain parcellations with Ward Clustering": [[49, "brain-parcellations-with-ward-clustering"]], "Visualize: Brain parcellations (Ward)": [[49, "visualize-brain-parcellations-ward"]], "Compressed representation of Ward clustering": [[49, "compressed-representation-of-ward-clustering"]], "Brain parcellations with KMeans Clustering": [[49, "brain-parcellations-with-kmeans-clustering"]], "Visualize: Brain parcellations (KMeans)": [[49, "visualize-brain-parcellations-kmeans"]], "Brain parcellations with Hierarchical KMeans Clustering": [[49, "brain-parcellations-with-hierarchical-kmeans-clustering"]], "Visualize: Brain parcellations (Hierarchical KMeans)": [[49, "visualize-brain-parcellations-hierarchical-kmeans"]], "Compare Hierarchical Kmeans clusters with those from Kmeans": [[49, "compare-hierarchical-kmeans-clusters-with-those-from-kmeans"]], "Brain parcellations with ReNA Clustering": [[49, "brain-parcellations-with-rena-clustering"]], "Visualize: Brain parcellations (ReNA)": [[49, "visualize-brain-parcellations-rena"]], "Compressed representation of ReNA clustering": [[49, "compressed-representation-of-rena-clustering"]], "Regions extraction using dictionary learning and functional connectomes": [[50, "regions-extraction-using-dictionary-learning-and-functional-connectomes"]], "Fetch brain development functional datasets": [[50, "fetch-brain-development-functional-datasets"]], "Extract functional networks with Dictionary learning": [[50, "extract-functional-networks-with-dictionary-learning"]], "Extract regions from networks": [[50, "extract-regions-from-networks"]], "Compute correlation coefficients": [[50, "compute-correlation-coefficients"]], "Plot resulting connectomes": [[50, "plot-resulting-connectomes"]], "Plot regions extracted for only one specific network": [[50, "plot-regions-extracted-for-only-one-specific-network"]], "Classification of age groups using functional connectivity": [[51, "classification-of-age-groups-using-functional-connectivity"]], "Load brain development fMRI dataset and MSDL atlas": [[51, "load-brain-development-fmri-dataset-and-msdl-atlas"], [99, "load-brain-development-fmri-dataset-and-msdl-atlas"]], "Region signals extraction": [[51, "region-signals-extraction"]], "ROI-to-ROI correlations of children": [[51, "roi-to-roi-correlations-of-children"]], "Studying partial correlations": [[51, "studying-partial-correlations"]], "Extract subjects variabilities around a group connectivity": [[51, "extract-subjects-variabilities-around-a-group-connectivity"]], "What kind of connectivity is most powerful for classification?": [[51, "what-kind-of-connectivity-is-most-powerful-for-classification"], [99, "what-kind-of-connectivity-is-most-powerful-for-classification"]], "Computing a connectome with sparse inverse covariance": [[52, "computing-a-connectome-with-sparse-inverse-covariance"]], "Retrieve the atlas and the data": [[52, "retrieve-the-atlas-and-the-data"], [54, "retrieve-the-atlas-and-the-data"], [56, "retrieve-the-atlas-and-the-data"]], "Extract time series": [[52, "extract-time-series"]], "Compute the sparse inverse covariance": [[52, "compute-the-sparse-inverse-covariance"]], "Display the connectome matrix": [[52, "display-the-connectome-matrix"]], "And now display the corresponding graph": [[52, "and-now-display-the-corresponding-graph"], [52, "id1"], [54, "and-now-display-the-corresponding-graph"]], "Display the sparse inverse covariance": [[52, "display-the-sparse-inverse-covariance"]], "Group Sparse inverse covariance for multi-subject connectome": [[53, "group-sparse-inverse-covariance-for-multi-subject-connectome"]], "Fetching datasets": [[53, "fetching-datasets"]], "Extracting region signals": [[53, "extracting-region-signals"]], "Computing group-sparse precision matrices": [[53, "computing-group-sparse-precision-matrices"]], "Displaying results": [[53, "displaying-results"]], "Extracting signals of a probabilistic atlas of functional regions": [[54, "extracting-signals-of-a-probabilistic-atlas-of-functional-regions"]], "Extract the time series": [[54, "extract-the-time-series"]], "Build and display a correlation matrix": [[54, "build-and-display-a-correlation-matrix"]], "Producing single subject maps of seed-to-voxel correlation": [[55, "producing-single-subject-maps-of-seed-to-voxel-correlation"]], "Getting the data": [[55, "getting-the-data"]], "Time series extraction": [[55, "time-series-extraction"]], "Performing the seed-to-voxel correlation analysis": [[55, "performing-the-seed-to-voxel-correlation-analysis"]], "Plotting the seed-to-voxel correlation map": [[55, "plotting-the-seed-to-voxel-correlation-map"]], "Fisher-z transformation and save nifti": [[55, "fisher-z-transformation-and-save-nifti"]], "Extracting signals from a brain parcellation": [[56, "extracting-signals-from-a-brain-parcellation"]], "Extract signals on a parcellation defined by labels": [[56, "extract-signals-on-a-parcellation-defined-by-labels"]], "Compute and display a correlation matrix": [[56, "compute-and-display-a-correlation-matrix"]], "Extract signals and compute a connectivity matrix without confounds removal": [[56, "extract-signals-and-compute-a-connectivity-matrix-without-confounds-removal"]], "Load confounds from file using a flexible strategy with fmriprep interface": [[56, "load-confounds-from-file-using-a-flexible-strategy-with-fmriprep-interface"]], "Motion-based scrubbing": [[56, "motion-based-scrubbing"]], "The impact of global signal removal": [[56, "the-impact-of-global-signal-removal"]], "Using predefined strategies": [[56, "using-predefined-strategies"]], "Connectivity structure estimation on simulated data": [[57, "connectivity-structure-estimation-on-simulated-data"]], "Extract signals on spheres and plot a connectome": [[58, "extract-signals-on-spheres-and-plot-a-connectome"]], "Retrieve the brain development fmri dataset": [[58, "retrieve-the-brain-development-fmri-dataset"]], "Coordinates of Default Mode Network": [[58, "coordinates-of-default-mode-network"]], "Extracts signal from sphere around DMN seeds": [[58, "extracts-signal-from-sphere-around-dmn-seeds"]], "Display time series": [[58, "display-time-series"]], "Compute partial correlation matrix": [[58, "compute-partial-correlation-matrix"]], "Display connectome": [[58, "display-connectome"]], "Extract signals on spheres from an atlas": [[58, "extract-signals-on-spheres-from-an-atlas"]], "Compute within spheres averaged time-series": [[58, "compute-within-spheres-averaged-time-series"]], "Estimate correlations": [[58, "estimate-correlations"]], "Plot matrix, graph, and strength": [[58, "plot-matrix-graph-and-strength"]], "Connectome extracted from Dosenbach\u2019s atlas": [[58, "connectome-extracted-from-dosenbach-s-atlas"]], "See Also": [[58, "see-also"]], "GLM: First level analysis": [[60, "glm-first-level-analysis"], [113, "glm-first-level-analysis"]], "Default Mode Network extraction of ADHD dataset": [[61, "default-mode-network-extraction-of-adhd-dataset"]], "Prepare data and analysis parameters": [[61, "prepare-data-and-analysis-parameters"], [64, "prepare-data-and-analysis-parameters"], [67, "prepare-data-and-analysis-parameters"], [69, "prepare-data-and-analysis-parameters"], [100, "prepare-data-and-analysis-parameters"]], "Extract the seed region\u2019s time course": [[61, "extract-the-seed-region-s-time-course"]], "Estimate contrasts": [[61, "estimate-contrasts"], [69, "estimate-contrasts"]], "Perform first level analysis": [[61, "perform-first-level-analysis"], [69, "perform-first-level-analysis"]], "First level analysis of a complete BIDS dataset from openneuro": [[62, "first-level-analysis-of-a-complete-bids-dataset-from-openneuro"]], "Fetch openneuro BIDS dataset": [[62, "fetch-openneuro-bids-dataset"]], "Obtain FirstLevelModel objects automatically and fit arguments": [[62, "obtain-firstlevelmodel-objects-automatically-and-fit-arguments"]], "First level model estimation (one subject)": [[62, "first-level-model-estimation-one-subject"]], "Simple statistical report of thresholded contrast": [[62, "simple-statistical-report-of-thresholded-contrast"]], "Saving model outputs to disk": [[62, "saving-model-outputs-to-disk"]], "Examples of design matrices": [[63, "examples-of-design-matrices"]], "Define parameters": [[63, "define-parameters"]], "Create design matrices": [[63, "create-design-matrices"]], "Simple example of two-session fMRI model fitting": [[64, "simple-example-of-two-session-fmri-model-fitting"]], "GLM estimation": [[64, "glm-estimation"], [67, "glm-estimation"]], "Analysis of an fMRI dataset with a Finite Impule Response (FIR) model": [[65, "analysis-of-an-fmri-dataset-with-a-finite-impule-response-fir-model"]], "Understanding parameters of the first-level model": [[66, "understanding-parameters-of-the-first-level-model"]], "Running a basic model": [[66, "running-a-basic-model"]], "A first contrast estimation and plotting": [[66, "a-first-contrast-estimation-and-plotting"]], "Changing the drift model": [[66, "changing-the-drift-model"]], "Changing the hemodynamic response model": [[66, "changing-the-hemodynamic-response-model"]], "Adding a time derivative to the design": [[66, "adding-a-time-derivative-to-the-design"]], "The noise model: ar(1), ols, or higher order ar?": [[66, "the-noise-model-ar-1-ols-or-higher-order-ar"]], "Removing confounds": [[66, "removing-confounds"]], "Volume censoring": [[66, "volume-censoring"]], "Smoothing": [[66, "smoothing"], [179, "smoothing"]], "Masking": [[66, "masking"], [164, "masking"]], "Conclusion": [[66, "conclusion"]], "Example of explicit fixed effects fMRI model fitting": [[67, "example-of-explicit-fixed-effects-fmri-model-fitting"]], "Example of MRI response functions": [[68, "example-of-mri-response-functions"]], "Define stimulus parameters and response models": [[68, "define-stimulus-parameters-and-response-models"]], "Sample and plot response functions": [[68, "sample-and-plot-response-functions"]], "Example of surface-based first-level analysis": [[69, "example-of-surface-based-first-level-analysis"]], "Project the fMRI image to the surface": [[69, "project-the-fmri-image-to-the-surface"]], "Analysing the left hemisphere": [[69, "analysing-the-left-hemisphere"]], "Predicted time series and residuals": [[70, "predicted-time-series-and-residuals"]], "Import modules": [[70, "import-modules"]], "Fit model": [[70, "fit-model"]], "Calculate and plot contrast": [[70, "calculate-and-plot-contrast"]], "Extract the largest clusters": [[70, "extract-the-largest-clusters"]], "Plot predicted and actual time series for 6 most significant clusters": [[70, "plot-predicted-and-actual-time-series-for-6-most-significant-clusters"]], "Get residuals": [[70, "get-residuals"]], "Plot distribution of residuals": [[70, "plot-distribution-of-residuals"]], "Plot R-squared": [[70, "plot-r-squared"]], "Calculate and Plot F-test": [[70, "calculate-and-plot-f-test"]], "Single-subject data (two sessions) in native space": [[71, "single-subject-data-two-sessions-in-native-space"]], "Generate an events.tsv file for the NeuroSpin localizer task": [[72, "generate-an-events-tsv-file-for-the-neurospin-localizer-task"]], "GLM: Second level analysis": [[74, "glm-second-level-analysis"], [113, "glm-second-level-analysis"]], "Voxel-Based Morphometry on OASIS dataset": [[75, "voxel-based-morphometry-on-oasis-dataset"]], "VBM analysis of aging": [[75, "vbm-analysis-of-aging"]], "Analyse data": [[75, "analyse-data"]], "Second-level fMRI model: true positive proportion in clusters": [[76, "second-level-fmri-model-true-positive-proportion-in-clusters"]], "Fetch dataset": [[76, "fetch-dataset"], [79, "fetch-dataset"], [80, "fetch-dataset"]], "Estimate second level model": [[76, "estimate-second-level-model"], [77, "estimate-second-level-model"], [79, "estimate-second-level-model"]], "Example of generic design in second-level models": [[77, "example-of-generic-design-in-second-level-models"]], "Example of second level design matrix": [[78, "example-of-second-level-design-matrix"]], "Create a simple experimental paradigm": [[78, "create-a-simple-experimental-paradigm"]], "Create a second level design matrix": [[78, "create-a-second-level-design-matrix"]], "Second-level fMRI model: one sample test": [[79, "second-level-fmri-model-one-sample-test"]], "Display subject t_maps": [[79, "display-subject-t-maps"]], "Second-level fMRI model: two-sample test, unpaired and paired": [[80, "second-level-fmri-model-two-sample-test-unpaired-and-paired"]], "Estimate second level models": [[80, "estimate-second-level-models"]], "Plot the results": [[80, "plot-the-results"]], "Statistical testing of a second-level analysis": [[81, "statistical-testing-of-a-second-level-analysis"]], "Prepare some images for a simple t test": [[81, "prepare-some-images-for-a-simple-t-test"]], "Perform the second level analysis": [[81, "perform-the-second-level-analysis"]], "Manipulating brain image volumes": [[83, "manipulating-brain-image-volumes"], [113, "manipulating-brain-image-volumes"]], "Visualization of affine resamplings": [[84, "visualization-of-affine-resamplings"]], "Comparing the means of 2 images": [[85, "comparing-the-means-of-2-images"]], "Breaking an atlas of labels in separated regions": [[86, "breaking-an-atlas-of-labels-in-separated-regions"]], "The original Yeo atlas": [[86, "the-original-yeo-atlas"]], "Relabeling the atlas into separated regions": [[86, "relabeling-the-atlas-into-separated-regions"]], "Different connectivity modes": [[86, "different-connectivity-modes"]], "Parameter min_size": [[86, "parameter-min-size"]], "Regions Extraction of Default Mode Networks using Smith Atlas": [[87, "regions-extraction-of-default-mode-networks-using-smith-atlas"]], "Region Extraction using a t-statistical map (3D)": [[88, "region-extraction-using-a-t-statistical-map-3d"]], "Understanding NiftiMasker and mask computation": [[89, "understanding-niftimasker-and-mask-computation"]], "Computing a mask from the background": [[89, "computing-a-mask-from-the-background"]], "Computing a mask from raw EPI data": [[89, "computing-a-mask-from-raw-epi-data"]], "Computing the mask from the MNI template": [[89, "computing-the-mask-from-the-mni-template"]], "Compute and resample a mask": [[89, "compute-and-resample-a-mask"]], "After mask computation: extracting time series": [[89, "after-mask-computation-extracting-time-series"]], "Negating an image with math_img": [[90, "negating-an-image-with-math-img"]], "Extracting signals from brain regions using the NiftiLabelsMasker": [[91, "extracting-signals-from-brain-regions-using-the-niftilabelsmasker"]], "Simple example of NiftiMasker use": [[92, "simple-example-of-niftimasker-use"]], "Resample an image to a template": [[93, "resample-an-image-to-a-template"]], "Computing a Region of Interest (ROI) mask manually": [[94, "computing-a-region-of-interest-roi-mask-manually"]], "Build a statistical test to find voxels of interest": [[94, "build-a-statistical-test-to-find-voxels-of-interest"]], "Build a mask from this statistical map (Improving the quality of the mask)": [[94, "build-a-mask-from-this-statistical-map-improving-the-quality-of-the-mask"]], "Smoothing an image": [[95, "smoothing-an-image"]], "Advanced statistical analysis of brain images": [[97, "advanced-statistical-analysis-of-brain-images"], [113, "advanced-statistical-analysis-of-brain-images"]], "Advanced decoding using scikit learn": [[98, "advanced-decoding-using-scikit-learn"]], "Performing decoding with scikit-learn": [[98, "performing-decoding-with-scikit-learn"], [162, "performing-decoding-with-scikit-learn"]], "Masking the data": [[98, "masking-the-data"]], "Cross-validation with scikit-learn": [[98, "cross-validation-with-scikit-learn"], [162, "cross-validation-with-scikit-learn"]], "Tuning cross-validation parameters": [[98, "tuning-cross-validation-parameters"]], "Measuring the chance level": [[98, "measuring-the-chance-level"], [162, "measuring-the-chance-level"]], "Dummy estimator": [[98, "dummy-estimator"]], "Permutation test": [[98, "permutation-test"]], "Decoding without a mask: Anova-SVM in scikit-lean": [[98, "decoding-without-a-mask-anova-svm-in-scikit-lean"]], "Visualize the ANOVA + SVC\u2019s discriminating weights": [[98, "visualize-the-anova-svc-s-discriminating-weights"]], "Going further with scikit-learn": [[98, "going-further-with-scikit-learn"], [162, "going-further-with-scikit-learn"]], "Changing the prediction engine": [[98, "changing-the-prediction-engine"]], "Changing the feature selection": [[98, "changing-the-feature-selection"]], "Functional connectivity predicts age group": [[99, "functional-connectivity-predicts-age-group"]], "Beta-Series Modeling for Task-Based Functional Connectivity and Decoding": [[100, "beta-series-modeling-for-task-based-functional-connectivity-and-decoding"]], "Choosing the right model for your analysis": [[100, null]], "Define the standard model": [[100, "define-the-standard-model"]], "Define the LSA model": [[100, "define-the-lsa-model"]], "Aggregate beta maps from the LSA model based on condition": [[100, "aggregate-beta-maps-from-the-lsa-model-based-on-condition"]], "Define the LSS models": [[100, "define-the-lss-models"]], "Show the design matrices for the first few trials": [[100, "show-the-design-matrices-for-the-first-few-trials"]], "Compare the three modeling approaches": [[100, "compare-the-three-modeling-approaches"]], "Applications of beta series": [[100, "applications-of-beta-series"]], "BIDS dataset first and second level analysis": [[101, "bids-dataset-first-and-second-level-analysis"]], "Fetch example BIDS dataset": [[101, "fetch-example-bids-dataset"], [108, "fetch-example-bids-dataset"]], "Obtain automatically FirstLevelModel objects and fit arguments": [[101, "obtain-automatically-firstlevelmodel-objects-and-fit-arguments"], [108, "obtain-automatically-firstlevelmodel-objects-and-fit-arguments"]], "Quick sanity check on fit arguments": [[101, "quick-sanity-check-on-fit-arguments"]], "First level model estimation": [[101, "first-level-model-estimation"]], "Second level model estimation": [[101, "second-level-model-estimation"]], "Massively univariate analysis of face vs house recognition": [[102, "massively-univariate-analysis-of-face-vs-house-recognition"]], "NeuroVault cross-study ICA maps": [[103, "neurovault-cross-study-ica-maps"]], "Get image and term data": [[103, "get-image-and-term-data"]], "Reshape and mask images": [[103, "reshape-and-mask-images"]], "Run ICA and map components to terms": [[103, "run-ica-and-map-components-to-terms"]], "Generate figures": [[103, "generate-figures"]], "Multivariate decompositions: Independent component analysis of fMRI": [[104, "multivariate-decompositions-independent-component-analysis-of-fmri"]], "Massively univariate analysis of a motor task from the Localizer dataset": [[105, "massively-univariate-analysis-of-a-motor-task-from-the-localizer-dataset"]], "Massively univariate analysis of a calculation task from the Localizer dataset": [[106, "massively-univariate-analysis-of-a-calculation-task-from-the-localizer-dataset"]], "NeuroVault meta-analysis of stop-go paradigm studies": [[107, "neurovault-meta-analysis-of-stop-go-paradigm-studies"]], "Fetch images for \u201csuccessful stop minus go\u201d-like protocols.": [[107, "fetch-images-for-successful-stop-minus-go-like-protocols"]], "Visualize the data": [[107, "visualize-the-data"]], "Compute statistics": [[107, "compute-statistics"]], "Plot the combined z maps": [[107, "plot-the-combined-z-maps"]], "Surface-based dataset first and second level analysis of a dataset": [[108, "surface-based-dataset-first-and-second-level-analysis-of-a-dataset"]], "Group study": [[108, "group-study"]], "Examples for experimental modules": [[110, "examples-for-experimental-modules"], [113, "examples-for-experimental-modules"]], "A short demo of the surface images & maskers": [[111, "a-short-demo-of-the-surface-images-maskers"]], "Examples": [[113, "examples"], [178, null], [179, null], [179, null], [179, null], [179, null], [179, null], [179, null]], "General bibliography": [[114, "general-bibliography"]], "Advanced usage: manual pipelines and scaling up": [[115, "advanced-usage-manual-pipelines-and-scaling-up"]], "Building your own neuroimaging machine-learning pipeline": [[116, "building-your-own-neuroimaging-machine-learning-pipeline"]], "Data loading and preprocessing": [[116, "data-loading-and-preprocessing"]], "Downloading the data": [[116, "downloading-the-data"]], "Loading non image data: experiment description": [[116, "loading-non-image-data-experiment-description"]], "Masking the data: from 4D image to 2D array": [[116, "masking-the-data-from-4d-image-to-2d-array"]], "Applying a mask": [[116, "applying-a-mask"]], "Automatically computing a mask": [[116, "automatically-computing-a-mask"]], "Applying a scikit-learn machine learning method": [[116, "applying-a-scikit-learn-machine-learning-method"]], "Unmasking (inverse_transform)": [[116, "unmasking-inverse-transform"]], "Visualizing results": [[116, "visualizing-results"], [158, "visualizing-results"]], "Going further": [[116, "going-further"]], "Downloading statistical maps from the Neurovault repository": [[117, "downloading-statistical-maps-from-the-neurovault-repository"]], "Specific images or collections": [[117, "specific-images-or-collections"]], "Selection filters": [[117, "selection-filters"]], "Output": [[117, "output"]], "Neurosynth annotations": [[117, "neurosynth-annotations"]], "Examples using Neurovault": [[117, "examples-using-neurovault"]], "0.1.0": [[118, "id1"], [152, "id4517"]], "Changelog": [[118, "changelog"], [119, "changelog"], [120, "changelog"], [121, "changelog"], [126, "changelog"], [127, "changelog"], [129, "changelog"], [152, "changelog"], [152, "id3661"], [152, "id3803"], [152, "id4091"], [152, "id4234"], [152, "id4376"], [152, "id4518"], [167, "changelog"]], "0.1.1": [[119, "id1"], [152, "id4375"]], "0.1.2": [[120, "id1"], [152, "id4233"]], "0.1.3": [[121, "id1"], [152, "id4090"]], "Fixes": [[121, "fixes"], [123, "fixes"], [124, "fixes"], [124, "id2"], [125, "fixes"], [128, "fixes"], [131, "fixes"], [132, "fixes"], [133, "fixes"], [133, "id3"], [134, "fixes"], [135, "fixes"], [137, "fixes"], [138, "fixes"], [139, "fixes"], [140, "fixes"], [141, "id4"], [141, "id9"], [141, "id13"], [142, "fixes"], [143, "fixes"], [144, "fixes"], [145, "fixes"], [146, "fixes"], [147, "fixes"], [148, "fixes"], [149, "fixes"], [150, "fixes"], [152, "fixes"], [152, "id144"], [152, "id147"], [152, "id293"], [152, "id441"], [152, "id585"], [152, "id731"], [152, "id877"], [152, "id1023"], [152, "id1169"], [152, "id1315"], [152, "id1459"], [152, "id1603"], [152, "id1753"], [152, "id1759"], [152, "id1763"], [152, "id1907"], [152, "id2052"], [152, "id2205"], [152, "id2354"], [152, "id2641"], [152, "id2787"], [152, "id2931"], [152, "id2936"], [152, "id3079"], [152, "id3225"], [152, "id3657"], [152, "id4092"]], "0.1.4": [[122, "id1"], [152, "id3948"]], "Highlights": [[122, "highlights"], [133, "highlights"], [134, "highlights"], [135, "highlights"], [138, "highlights"], [138, "id4"], [138, "id8"], [152, "id2199"], [152, "id2203"], [152, "id2208"], [152, "id2639"], [152, "id2785"], [152, "id2934"], [152, "id3949"]], "0.10.0": [[123, "id1"], [152, "id290"]], "HIGHLIGHTS": [[123, "highlights"], [125, "highlights"], [141, "highlights"], [144, "highlights"], [145, "highlights"], [146, "highlights"], [147, "highlights"], [148, "highlights"], [150, "highlights"], [152, "highlights"], [152, "id291"], [152, "id437"], [152, "id729"], [152, "id875"], [152, "id1021"], [152, "id1167"], [152, "id1312"], [152, "id1746"]], "NEW": [[123, "new"], [124, "new"], [125, "new"], [138, "new"], [139, "new"], [140, "new"], [141, "new"], [141, "id2"], [141, "id5"], [141, "id11"], [144, "new"], [145, "new"], [146, "new"], [147, "new"], [148, "new"], [150, "new"], [152, "new"], [152, "id143"], [152, "id292"], [152, "id439"], [152, "id730"], [152, "id876"], [152, "id1022"], [152, "id1168"], [152, "id1313"], [152, "id1747"], [152, "id1751"], [152, "id1755"], [152, "id1761"], [152, "id1906"], [152, "id2050"], [152, "id2195"]], "Enhancements": [[123, "enhancements"], [124, "enhancements"], [124, "id3"], [125, "enhancements"], [126, "enhancements"], [128, "enhancements"], [132, "enhancements"], [133, "enhancements"], [133, "id4"], [134, "enhancements"], [135, "enhancements"], [136, "enhancements"], [138, "id2"], [138, "id5"], [138, "id9"], [145, "enhancements"], [146, "enhancements"], [147, "enhancements"], [148, "enhancements"], [149, "enhancements"], [150, "enhancements"], [152, "enhancements"], [152, "id145"], [152, "id148"], [152, "id294"], [152, "id442"], [152, "id586"], [152, "id732"], [152, "id878"], [152, "id1024"], [152, "id1170"], [152, "id2200"], [152, "id2204"], [152, "id2209"], [152, "id2496"], [152, "id2640"], [152, "id2788"], [152, "id2932"], [152, "id2937"], [152, "id3080"], [152, "id3656"], [152, "id3805"]], "Changes": [[123, "changes"], [124, "changes"], [124, "id4"], [125, "changes"], [128, "changes"], [130, "changes"], [131, "changes"], [132, "changes"], [133, "changes"], [133, "id2"], [134, "changes"], [135, "changes"], [136, "changes"], [137, "changes"], [138, "changes"], [138, "id3"], [138, "id6"], [138, "id10"], [139, "changes"], [141, "id3"], [141, "id8"], [141, "id12"], [143, "changes"], [144, "changes"], [146, "changes"], [147, "changes"], [148, "changes"], [149, "changes"], [150, "changes"], [152, "changes"], [152, "id146"], [152, "id149"], [152, "id295"], [152, "id443"], [152, "id587"], [152, "id733"], [152, "id879"], [152, "id1025"], [152, "id1316"], [152, "id1460"], [152, "id1752"], [152, "id1758"], [152, "id1762"], [152, "id2051"], [152, "id2197"], [152, "id2201"], [152, "id2206"], [152, "id2210"], [152, "id2353"], [152, "id2497"], [152, "id2642"], [152, "id2786"], [152, "id2930"], [152, "id2935"], [152, "id3081"], [152, "id3223"], [152, "id3371"], [152, "id3658"]], "0.10.1": [[124, "id1"], [152, "id142"]], "0.10.1rc1": [[124, "rc1"], [152, "rc1"]], "0.10.2": [[125, "id1"], [152, "id1"]], "0.2.0": [[126, "id1"], [152, "id3802"]], "New features": [[126, "new-features"], [129, "new-features"], [152, "new-features"], [152, "id3804"]], "Bug fixes": [[126, "bug-fixes"], [129, "bug-fixes"], [136, "bug-fixes"], [152, "bug-fixes"], [152, "id3513"], [152, "id3806"]], "API changes summary": [[126, "api-changes-summary"], [152, "api-changes-summary"]], "Contributors": [[126, "contributors"], [128, "contributors"], [131, "contributors"], [135, "contributors"], [138, "contributors"], [138, "id7"], [138, "id11"], [139, "contributors"], [140, "contributors"], [141, "contributors"], [141, "id10"], [141, "id14"], [142, "contributors"], [143, "contributors"], [152, "contributors"], [152, "id1604"], [152, "id1754"], [152, "id1760"], [152, "id1764"], [152, "id1908"], [152, "id2053"], [152, "id2202"], [152, "id2207"], [152, "id2211"], [152, "id2643"], [152, "id3228"], [152, "id3659"], [152, "id3807"]], "0.2.1": [[127, "id1"], [152, "v0-2-1"]], "0.2.2": [[128, "id1"], [152, "id3654"]], "New": [[128, "new"], [130, "new"], [131, "new"], [131, "id3"], [152, "id3224"], [152, "id3227"], [152, "id3370"], [152, "id3655"]], "0.2.3": [[129, "id1"], [152, "id3512"]], "0.2.4": [[130, "id1"], [152, "id3369"]], "0.2.5.1": [[131, "id1"], [152, "id3222"]], "0.2.5": [[131, "id2"], [152, "id3226"]], "0.2.6": [[132, "id1"], [152, "id3078"]], "0.3.0": [[133, "id1"], [152, "id2929"]], "0.3.0 beta": [[133, "beta"], [152, "id2933"]], "0.3.1": [[134, "id1"], [152, "id2784"]], "0.4.0": [[135, "id1"], [152, "id2638"]], "0.4.1": [[136, "id1"], [152, "id2495"]], "0.4.2": [[137, "id1"], [152, "id2352"]], "0.5.0": [[138, "id1"], [152, "id2194"]], "ENHANCEMENTS": [[138, "enhancements"], [141, "enhancements"], [142, "enhancements"], [143, "enhancements"], [152, "id1458"], [152, "id1602"], [152, "id1748"], [152, "id2196"]], "0.5.0 rc": [[138, "rc"], [152, "id2198"]], "0.5.0 beta": [[138, "beta"], [152, "beta"]], "0.5.0 alpha": [[138, "alpha"], [152, "alpha"]], "0.5.1": [[139, "id1"], [152, "id2049"]], "Known Issues": [[139, "known-issues"], [152, "known-issues"]], "0.5.2": [[140, "id1"], [152, "id1905"]], "0.6.0": [[141, "id1"], [152, "id1745"]], "CHANGES": [[141, "changes"], [152, "id1749"]], "FIXES": [[141, "fixes"], [152, "id1750"]], "0.6.0rc": [[141, "rc"], [152, "rc"]], "0.6.0b0": [[141, "b0"], [152, "b0"]], "0.6.0a0": [[141, "a0"], [152, "a0"]], "0.6.1": [[142, "id1"], [152, "id1601"]], "0.6.2": [[143, "id1"], [152, "id1457"]], "0.7.0": [[144, "id1"], [152, "id1311"]], "0.7.1": [[145, "id1"], [152, "id1166"]], "0.8.0": [[146, "id1"], [152, "id1020"]], "0.8.1": [[147, "id1"], [152, "id874"]], "0.9.0": [[148, "id1"], [152, "id728"]], "0.9.1": [[149, "id1"], [152, "id584"]], "0.9.2": [[150, "id1"], [152, "id436"]], "What\u2019s new": [[152, "what-s-new"]], "Connectome extraction: inverse covariance for direct connections": [[153, "connectome-extraction-inverse-covariance-for-direct-connections"]], "Page summary": [[153, null], [154, null], [157, null], [158, null], [168, null], [171, null]], "Sparse inverse covariance for functional connectomes": [[153, "sparse-inverse-covariance-for-functional-connectomes"]], "Parameter selection": [[153, null]], "Full example": [[153, null], [153, null], [153, null], [154, null], [154, null]], "Exercise: computing sparse inverse covariance": [[153, null]], "Reference": [[153, null], [153, null], [153, null], [153, null], [156, null]], "Sparse inverse covariance on multiple subjects": [[153, "sparse-inverse-covariance-on-multiple-subjects"]], "Exercise: computing the correlation matrix of rest fmri": [[153, null], [154, null]], "Comparing the different approaches on simulated data": [[153, "comparing-the-different-approaches-on-simulated-data"]], "Full Example": [[153, null]], "Linking total and direct interactions at the group level": [[153, "linking-total-and-direct-interactions-at-the-group-level"]], "Exercise: computing connectivity in tangent space": [[153, null]], "Extracting times series to build a functional connectome": [[154, "extracting-times-series-to-build-a-functional-connectome"]], "Time-series from a brain parcellation or \u201cMaxProb\u201d atlas": [[154, "time-series-from-a-brain-parcellation-or-maxprob-atlas"]], "Brain parcellations": [[154, "brain-parcellations"]], "Extracting signals on a parcellation": [[154, "extracting-signals-on-a-parcellation"]], "Time-series from a probabilistic atlas": [[154, "time-series-from-a-probabilistic-atlas"]], "Probabilistic atlases": [[154, "probabilistic-atlases"]], "Extracting signals from a probabilistic atlas": [[154, "extracting-signals-from-a-probabilistic-atlas"]], "Exercise: correlation matrix of rest fMRI on probabilistic atlas": [[154, null]], "A functional connectome: a graph of interactions": [[154, "a-functional-connectome-a-graph-of-interactions"]], "A functional connectome: extracting coordinates of regions": [[154, "a-functional-connectome-extracting-coordinates-of-regions"]], "Functional connectivity and resting state": [[155, "functional-connectivity-and-resting-state"]], "Clustering to parcellate the brain in regions": [[156, "clustering-to-parcellate-the-brain-in-regions"]], "Data loading: movie-watching data": [[156, "data-loading-movie-watching-data"]], "Applying clustering": [[156, "applying-clustering"]], "Which clustering to use": [[156, null]], "Using and visualizing the resulting parcellation": [[156, "using-and-visualizing-the-resulting-parcellation"]], "Visualizing the parcellation": [[156, "visualizing-the-parcellation"]], "Compressed representation": [[156, "compressed-representation"]], "Example code": [[156, null], [164, null]], "Region Extraction for better brain parcellations": [[157, "region-extraction-for-better-brain-parcellations"]], "Fetching movie-watching based functional datasets": [[157, "fetching-movie-watching-based-functional-datasets"]], "Brain maps using Dictionary learning": [[157, "brain-maps-using-dictionary-learning"]], "Visualization of Dictionary learning maps": [[157, "visualization-of-dictionary-learning-maps"]], "Region Extraction with Dictionary learning maps": [[157, "region-extraction-with-dictionary-learning-maps"]], "Visualization of Region Extraction results": [[157, "visualization-of-region-extraction-results"]], "Computing functional connectivity matrices": [[157, "computing-functional-connectivity-matrices"]], "Visualization of functional connectivity matrices": [[157, "visualization-of-functional-connectivity-matrices"]], "Validating results": [[157, "validating-results"]], "Extracting functional brain networks: ICA and related": [[158, "extracting-functional-brain-networks-ica-and-related"]], "Multi-subject ICA: CanICA": [[158, "multi-subject-ica-canica"]], "Objective": [[158, "objective"]], "Nilearn data for examples": [[158, null]], "Fitting CanICA model with nilearn": [[158, "fitting-canica-model-with-nilearn"]], "Interpreting such components": [[158, "interpreting-such-components"]], "An alternative to ICA: Dictionary learning": [[158, "an-alternative-to-ica-dictionary-learning"]], "An introduction to decoding": [[159, "an-introduction-to-decoding"]], "Loading and preparing the data": [[159, "loading-and-preparing-the-data"]], "The Haxby 2001 experiment": [[159, "the-haxby-2001-experiment"]], "fMRI: using beta maps of a first-level analysis": [[159, null]], "Loading the data into nilearn": [[159, "loading-the-data-into-nilearn"]], "Full code example": [[159, null]], "Performing a simple decoding analysis": [[159, "performing-a-simple-decoding-analysis"]], "A few definitions": [[159, "a-few-definitions"]], "A first estimator": [[159, "a-first-estimator"]], "Decoding made easy": [[159, "decoding-made-easy"]], "Measuring prediction performance": [[159, "measuring-prediction-performance"]], "Cross-validation": [[159, "cross-validation"]], "Choosing a good cross-validation strategy": [[159, "choosing-a-good-cross-validation-strategy"]], "Choice of the prediction accuracy measure": [[159, "choice-of-the-prediction-accuracy-measure"]], "Prediction accuracy at chance using simple strategies": [[159, "prediction-accuracy-at-chance-using-simple-strategies"]], "Putting it all together": [[159, null]], "Visualizing the decoder\u2019s weights": [[159, "visualizing-the-decoder-s-weights"]], "Decoding without a mask: Anova-SVM": [[159, "decoding-without-a-mask-anova-svm"]], "Dimension reduction with feature selection": [[159, "dimension-reduction-with-feature-selection"]], "Visualizing the results": [[159, "visualizing-the-results"]], "Final script": [[159, null]], "Choosing the right predictive model for neuroimaging": [[160, "choosing-the-right-predictive-model-for-neuroimaging"]], "Predictions: regression, classification and multi-class": [[160, "predictions-regression-classification-and-multi-class"]], "Regression": [[160, "regression"]], "Classification: two classes or multi-class": [[160, "classification-two-classes-or-multi-class"]], "Different linear models": [[160, "different-linear-models"]], "Setting estimator parameters": [[160, "setting-estimator-parameters"], [162, "setting-estimator-parameters"]], "Bagging several models": [[160, "bagging-several-models"]], "FREM: fast ensembling of regularized models for robust decoding": [[161, "frem-fast-ensembling-of-regularized-models-for-robust-decoding"]], "FREM pipeline": [[161, "frem-pipeline"]], "Empirical comparisons": [[161, "empirical-comparisons"]], "Decoding performance increase on Haxby dataset": [[161, "decoding-performance-increase-on-haxby-dataset"]], "Code": [[161, null], [161, null], [178, null]], "Spatial regularization of decoding maps on mixed gambles study": [[161, "spatial-regularization-of-decoding-maps-on-mixed-gambles-study"]], "Running scikit-learn functions for more control on the analysis": [[162, "running-scikit-learn-functions-for-more-control-on-the-analysis"]], "Using scikit-learn estimators": [[162, "using-scikit-learn-estimators"]], "Decoding on simulated data": [[162, null]], "Decoding without a mask: Anova-SVM using scikit-learn": [[162, "decoding-without-a-mask-anova-svm-using-scikit-learn"]], "Using any other model in the pipeline": [[162, "using-any-other-model-in-the-pipeline"]], "Decoding and MVPA: predicting from brain images": [[163, "decoding-and-mvpa-predicting-from-brain-images"]], "Searchlight : finding voxels containing information": [[164, "searchlight-finding-voxels-containing-information"]], "Principle of the Searchlight": [[164, "principle-of-the-searchlight"]], "Further Reading": [[164, null]], "Preparing the data": [[164, "preparing-the-data"]], "Setting up the searchlight": [[164, "setting-up-the-searchlight"]], "Classifier": [[164, "classifier"]], "Score function": [[164, "score-function"]], "Cross validation": [[164, "cross-validation"]], "Sphere radius": [[164, "sphere-radius"]], "Searchlight": [[164, "id6"]], "Comparing to massively univariate analysis: F_score or SPM": [[164, "comparing-to-massively-univariate-analysis-f-score-or-spm"]], "SpaceNet: decoding with spatial structure for better maps": [[165, "spacenet-decoding-with-spatial-structure-for-better-maps"]], "The SpaceNet decoder": [[165, "the-spacenet-decoder"]], "Related example": [[165, "related-example"]], "Group-sparse covariance estimation": [[166, "group-sparse-covariance-estimation"]], "Description": [[166, "description"]], "Numerical stability": [[166, "numerical-stability"]], "Execution time": [[166, "execution-time"]], "Synthetic dataset": [[166, "synthetic-dataset"]], "Stopping criteria": [[166, "stopping-criteria"]], "Maximum number of iterations": [[166, "maximum-number-of-iterations"]], "Duality gap": [[166, "duality-gap"]], "Variation of norm of estimate": [[166, "variation-of-norm-of-estimate"]], "Initial estimate value": [[166, "initial-estimate-value"]], "Modifying the stopping criterion": [[166, "modifying-the-stopping-criterion"]], "Cross-validation algorithm": [[166, "cross-validation-algorithm"]], "Principle of cross-validation": [[166, "principle-of-cross-validation"]], "Bounds on alpha": [[166, "bounds-on-alpha"]], "Iterative grid search": [[166, "iterative-grid-search"]], "Warm restart": [[166, "warm-restart"]], "Stopping criterion": [[166, "stopping-criterion"]], "Contributing": [[167, "contributing"], [167, "id4"]], "Code of Conduct": [[167, "code-of-conduct"]], "How to get help?": [[167, "how-to-get-help"]], "How to help the project?": [[167, "how-to-help-the-project"]], "Report bugs or discuss enhancement ideas": [[167, "report-bugs-or-discuss-enhancement-ideas"]], "Answer questions": [[167, "answer-questions"]], "Review Pull Requests": [[167, "review-pull-requests"]], "Contribute code": [[167, "contribute-code"]], "How do we decide what code goes in?": [[167, "how-do-we-decide-what-code-goes-in"]], "Scope of the project": [[167, "scope-of-the-project"]], "Who makes decisions": [[167, "who-makes-decisions"]], "How to contribute to nilearn": [[167, "how-to-contribute-to-nilearn"]], "Contribution Guidelines": [[167, "contribution-guidelines"]], "PR Structure": [[167, "pr-structure"]], "Coding Style": [[167, "coding-style"]], "Guidelines for Private Functions": [[167, "guidelines-for-private-functions"]], "Pre-commit": [[167, "pre-commit"]], "Tests": [[167, "tests"]], "Fixtures": [[167, "fixtures"]], "Seeding": [[167, "seeding"]], "Documentation": [[167, "documentation"]], "Setting up your environment": [[167, "setting-up-your-environment"]], "Installing": [[167, "installing"]], "Recommendation": [[167, null], [167, null]], "Building documentation": [[167, "building-documentation"]], "Additional cases": [[167, "additional-cases"]], "How to contribute an atlas": [[167, "how-to-contribute-an-atlas"]], "How to contribute a dataset fetcher": [[167, "how-to-contribute-a-dataset-fetcher"]], "Maintenance": [[167, "maintenance"], [175, "maintenance"]], "First level models": [[168, "first-level-models"]], "HRF models": [[168, "hrf-models"]], "Design matrix: event-based and time series-based": [[168, "design-matrix-event-based-and-time-series-based"]], "Event-based": [[168, "event-based"]], "Time series-based": [[168, "time-series-based"]], "Fitting a first level model": [[168, "fitting-a-first-level-model"]], "Computing contrasts": [[168, "computing-contrasts"]], "Extracting predicted time series and residuals": [[168, "extracting-predicted-time-series-and-residuals"]], "Surface-based analysis": [[168, "surface-based-analysis"]], "An introduction to GLMs in fMRI statistical analysis": [[169, "an-introduction-to-glms-in-fmri-statistical-analysis"]], "A primer on BOLD-fMRI data analysis": [[169, "a-primer-on-bold-fmri-data-analysis"]], "What is fMRI ?": [[169, "what-is-fmri"]], "fMRI data modelling": [[169, "fmri-data-modelling"]], "fMRI statistical analysis": [[169, "fmri-statistical-analysis"]], "Multiple Comparisons": [[169, "multiple-comparisons"]], "Analyzing fMRI using GLMs": [[170, "analyzing-fmri-using-glms"]], "Second level models": [[171, "second-level-models"]], "Fitting a second level model": [[171, "fitting-a-second-level-model"]], "Thresholding statistical maps": [[171, "thresholding-statistical-maps"]], "Multiple comparisons correction": [[171, "multiple-comparisons-correction"]], "Voxel based morphometry": [[171, "voxel-based-morphometry"]], "Glossary": [[172, "glossary"]], "Nilearn": [[173, "nilearn"]], "Featured examples": [[173, "featured-examples"]], "Introduction": [[174, "introduction"]], "What is nilearn?": [[174, "what-is-nilearn"]], "Using nilearn for the first time": [[174, "using-nilearn-for-the-first-time"]], "First steps with nilearn": [[174, "first-steps-with-nilearn"]], "Learning with the API references": [[174, "learning-with-the-api-references"]], "Learning with examples": [[174, "learning-with-examples"]], "Finding help": [[174, "finding-help"]], "Machine learning applications to Neuroimaging": [[174, "machine-learning-applications-to-neuroimaging"]], "Project Organization": [[175, "project-organization"]], "Issues": [[175, "issues"]], "Labels": [[175, "labels"]], "Closing policy": [[175, "closing-policy"]], "Pull Requests": [[175, "pull-requests"]], "How to make a release?": [[175, "how-to-make-a-release"]], "Prepare code for the release": [[175, "prepare-code-for-the-release"]], "Prepare the release": [[175, "prepare-the-release"]], "Build the distributions and upload them to Pypi": [[175, "build-the-distributions-and-upload-them-to-pypi"]], "Build and deploy the documentation": [[175, "build-and-deploy-the-documentation"]], "Post-release": [[175, "post-release"]], "Manipulation brain volumes with nilearn": [[176, "manipulation-brain-volumes-with-nilearn"]], "Input and output: neuroimaging data representation": [[177, "input-and-output-neuroimaging-data-representation"]], "Inputing data: file names or image objects": [[177, "inputing-data-file-names-or-image-objects"]], "File names and objects, 3D and 4D images": [[177, "file-names-and-objects-3d-and-4d-images"]], "File name matching: \u201cglobbing\u201d and user path expansion": [[177, "file-name-matching-globbing-and-user-path-expansion"]], "Python globbing": [[177, null]], "Fetching open datasets from Internet": [[177, "fetching-open-datasets-from-internet"]], "nilearn_data: Where is the downloaded data stored?": [[177, null]], "Understanding neuroimaging data": [[177, "understanding-neuroimaging-data"]], "Nifti and Analyze data": [[177, "nifti-and-analyze-data"]], "Dataset formatting: data shape": [[177, null]], "Niimg-like objects": [[177, "niimg-like-objects"]], "Image affines": [[177, null]], "Decreasing memory used when loading Nifti images": [[177, null]], "Text files: phenotype or behavior": [[177, "text-files-phenotype-or-behavior"]], "Reading CSV with pandas": [[177, null]], "Manipulating images: resampling, smoothing, masking, ROIs\u2026": [[178, "manipulating-images-resampling-smoothing-masking-rois"]], "Functions for data preparation and image transformation": [[178, "functions-for-data-preparation-and-image-transformation"]], "Resampling images": [[178, "resampling-images"]], "Resampling one image to match another one": [[178, "resampling-one-image-to-match-another-one"]], "Example": [[178, null]], "Resampling to a specific target affine, shape, or resolution": [[178, "resampling-to-a-specific-target-affine-shape-or-resolution"]], "Special case: resampling to a given voxel size": [[178, null]], "Accessing individual volumes in 4D images": [[178, "accessing-individual-volumes-in-4d-images"]], "Computing and applying spatial masks": [[178, "computing-and-applying-spatial-masks"]], "Masking data: from 4D Nifti images to 2D data arrays": [[178, "masking-data-from-4d-nifti-images-to-2d-data-arrays"]], "Image operations: creating a ROI mask manually": [[178, "image-operations-creating-a-roi-mask-manually"]], "From neuroimaging volumes to data matrices: the masker objects": [[179, "from-neuroimaging-volumes-to-data-matrices-the-masker-objects"]], "The concept of \u201cmasker\u201d objects": [[179, "the-concept-of-masker-objects"]], "Advanced: Design philosophy of \u201cMaskers\u201d": [[179, null]], "NiftiMasker: applying a mask to load time-series": [[179, "niftimasker-applying-a-mask-to-load-time-series"]], "Advanced: scikit-learn Pipelines": [[179, null]], "Custom data loading: loading only the first 100 time points": [[179, "custom-data-loading-loading-only-the-first-100-time-points"]], "Controlling how the mask is computed from the data": [[179, "controlling-how-the-mask-is-computed-from-the-data"]], "Visualizing the computed mask": [[179, "visualizing-the-computed-mask"]], "Different masking strategies": [[179, "different-masking-strategies"]], "Extra mask parameters: opening, cutoff\u2026": [[179, "extra-mask-parameters-opening-cutoff"]], "Common data preparation steps: smoothing, filtering, resampling": [[179, "common-data-preparation-steps-smoothing-filtering-resampling"]], "`dtype` argument": [[179, null]], "Temporal Filtering and confound removal": [[179, "temporal-filtering-and-confound-removal"]], "Exercise": [[179, null]], "Resampling: resizing and changing resolutions of images": [[179, "resampling-resizing-and-changing-resolutions-of-images"]], "Inverse transform: unmasking data": [[179, "inverse-transform-unmasking-data"]], "Examples to better understand the NiftiMasker": [[179, null]], "Extraction of signals from regions: NiftiLabelsMasker, NiftiMapsMasker": [[179, "extraction-of-signals-from-regions-niftilabelsmasker-niftimapsmasker"]], "Regions definition": [[179, "regions-definition"]], "NiftiLabelsMasker Usage": [[179, "niftilabelsmasker-usage"]], "NiftiMapsMasker Usage": [[179, "niftimapsmasker-usage"]], "Extraction of signals from regions for multiple subjects: MultiNiftiMasker, MultiNiftiLabelsMasker, MultiNiftiMapsMasker": [[179, "extraction-of-signals-from-regions-for-multiple-subjects-multiniftimasker-multiniftilabelsmasker-multiniftimapsmasker"]], "MultiNiftiMasker Usage": [[179, "multiniftimasker-usage"]], "MultiNiftiLabelsMasker Usage": [[179, "multiniftilabelsmasker-usage"]], "MultiNiftiMapsMasker Usage": [[179, "multiniftimapsmasker-usage"]], "Extraction of signals from seeds: NiftiSpheresMasker": [[179, "extraction-of-signals-from-seeds-niftispheresmasker"]], "nilearn.connectome: Functional Connectivity": [[180, "module-nilearn.connectome"]], "nilearn.datasets: Automatic Dataset Fetching": [[181, "module-nilearn.datasets"]], "Templates": [[181, "templates"]], "Atlases": [[181, "atlases"]], "Preprocessed datasets": [[181, "preprocessed-datasets"]], "Statistical maps/derivatives": [[181, "statistical-maps-derivatives"]], "General functions": [[181, "general-functions"]], "nilearn.decoding: Decoding": [[182, "module-nilearn.decoding"]], "nilearn.decomposition: Multivariate Decompositions": [[183, "module-nilearn.decomposition"]], "nilearn.experimental: Experimental Modules": [[184, "module-nilearn.experimental"]], "nilearn.experimental.surface": [[184, "nilearn-experimental-surface"]], "nilearn.connectome.ConnectivityMeasure": [[185, "nilearn-connectome-connectivitymeasure"]], "Examples using nilearn.connectome.ConnectivityMeasure": [[185, "examples-using-nilearn-connectome-connectivitymeasure"]], "nilearn.connectome.GroupSparseCovariance": [[186, "nilearn-connectome-groupsparsecovariance"]], "nilearn.connectome.GroupSparseCovarianceCV": [[187, "nilearn-connectome-groupsparsecovariancecv"]], "Examples using nilearn.connectome.GroupSparseCovarianceCV": [[187, "examples-using-nilearn-connectome-groupsparsecovariancecv"]], "nilearn.connectome.cov_to_corr": [[188, "nilearn-connectome-cov-to-corr"]], "nilearn.connectome.group_sparse_covariance": [[189, "nilearn-connectome-group-sparse-covariance"]], "nilearn.connectome.prec_to_partial": [[190, "nilearn-connectome-prec-to-partial"]], "nilearn.connectome.sym_matrix_to_vec": [[191, "nilearn-connectome-sym-matrix-to-vec"]], "nilearn.connectome.vec_to_sym_matrix": [[192, "nilearn-connectome-vec-to-sym-matrix"]], "nilearn.datasets.fetch_abide_pcp": [[193, "nilearn-datasets-fetch-abide-pcp"]], "nilearn.datasets.fetch_adhd": [[194, "nilearn-datasets-fetch-adhd"]], "Examples using nilearn.datasets.fetch_adhd": [[194, "examples-using-nilearn-datasets-fetch-adhd"]], "nilearn.datasets.fetch_atlas_aal": [[195, "nilearn-datasets-fetch-atlas-aal"]], "nilearn.datasets.fetch_atlas_allen_2011": [[196, "nilearn-datasets-fetch-atlas-allen-2011"]], "Examples using nilearn.datasets.fetch_atlas_allen_2011": [[196, "examples-using-nilearn-datasets-fetch-atlas-allen-2011"]], "nilearn.datasets.fetch_atlas_basc_multiscale_2015": [[197, "nilearn-datasets-fetch-atlas-basc-multiscale-2015"]], "Examples using nilearn.datasets.fetch_atlas_basc_multiscale_2015": [[197, "examples-using-nilearn-datasets-fetch-atlas-basc-multiscale-2015"]], "nilearn.datasets.fetch_atlas_craddock_2012": [[198, "nilearn-datasets-fetch-atlas-craddock-2012"]], "nilearn.datasets.fetch_atlas_destrieux_2009": [[199, "nilearn-datasets-fetch-atlas-destrieux-2009"]], "Examples using nilearn.datasets.fetch_atlas_destrieux_2009": [[199, "examples-using-nilearn-datasets-fetch-atlas-destrieux-2009"]], "nilearn.datasets.fetch_atlas_difumo": [[200, "nilearn-datasets-fetch-atlas-difumo"]], "Examples using nilearn.datasets.fetch_atlas_difumo": [[200, "examples-using-nilearn-datasets-fetch-atlas-difumo"]], "nilearn.datasets.fetch_atlas_harvard_oxford": [[201, "nilearn-datasets-fetch-atlas-harvard-oxford"]], "Examples using nilearn.datasets.fetch_atlas_harvard_oxford": [[201, "examples-using-nilearn-datasets-fetch-atlas-harvard-oxford"]], "nilearn.datasets.fetch_atlas_juelich": [[202, "nilearn-datasets-fetch-atlas-juelich"]], "Examples using nilearn.datasets.fetch_atlas_juelich": [[202, "examples-using-nilearn-datasets-fetch-atlas-juelich"]], "nilearn.datasets.fetch_atlas_msdl": [[203, "nilearn-datasets-fetch-atlas-msdl"]], "Examples using nilearn.datasets.fetch_atlas_msdl": [[203, "examples-using-nilearn-datasets-fetch-atlas-msdl"]], "nilearn.datasets.fetch_atlas_pauli_2017": [[204, "nilearn-datasets-fetch-atlas-pauli-2017"]], "Examples using nilearn.datasets.fetch_atlas_pauli_2017": [[204, "examples-using-nilearn-datasets-fetch-atlas-pauli-2017"]], "nilearn.datasets.fetch_atlas_schaefer_2018": [[205, "nilearn-datasets-fetch-atlas-schaefer-2018"]], "nilearn.datasets.fetch_atlas_smith_2009": [[206, "nilearn-datasets-fetch-atlas-smith-2009"]], "Examples using nilearn.datasets.fetch_atlas_smith_2009": [[206, "examples-using-nilearn-datasets-fetch-atlas-smith-2009"]], "nilearn.datasets.fetch_atlas_surf_destrieux": [[207, "nilearn-datasets-fetch-atlas-surf-destrieux"]], "Examples using nilearn.datasets.fetch_atlas_surf_destrieux": [[207, "examples-using-nilearn-datasets-fetch-atlas-surf-destrieux"]], "nilearn.datasets.fetch_atlas_talairach": [[208, "nilearn-datasets-fetch-atlas-talairach"]], "nilearn.datasets.fetch_atlas_yeo_2011": [[209, "nilearn-datasets-fetch-atlas-yeo-2011"]], "Examples using nilearn.datasets.fetch_atlas_yeo_2011": [[209, "examples-using-nilearn-datasets-fetch-atlas-yeo-2011"]], "nilearn.datasets.fetch_bids_langloc_dataset": [[210, "nilearn-datasets-fetch-bids-langloc-dataset"]], "nilearn.datasets.fetch_coords_dosenbach_2010": [[211, "nilearn-datasets-fetch-coords-dosenbach-2010"]], "Examples using nilearn.datasets.fetch_coords_dosenbach_2010": [[211, "examples-using-nilearn-datasets-fetch-coords-dosenbach-2010"]], "nilearn.datasets.fetch_coords_power_2011": [[212, "nilearn-datasets-fetch-coords-power-2011"]], "Examples using nilearn.datasets.fetch_coords_power_2011": [[212, "examples-using-nilearn-datasets-fetch-coords-power-2011"]], "nilearn.datasets.fetch_coords_seitzman_2018": [[213, "nilearn-datasets-fetch-coords-seitzman-2018"]], "nilearn.datasets.fetch_development_fmri": [[214, "nilearn-datasets-fetch-development-fmri"]], "Examples using nilearn.datasets.fetch_development_fmri": [[214, "examples-using-nilearn-datasets-fetch-development-fmri"]], "nilearn.datasets.fetch_ds000030_urls": [[215, "nilearn-datasets-fetch-ds000030-urls"]], "Examples using nilearn.datasets.fetch_ds000030_urls": [[215, "examples-using-nilearn-datasets-fetch-ds000030-urls"]], "nilearn.datasets.fetch_fiac_first_level": [[216, "nilearn-datasets-fetch-fiac-first-level"]], "Examples using nilearn.datasets.fetch_fiac_first_level": [[216, "examples-using-nilearn-datasets-fetch-fiac-first-level"]], "nilearn.datasets.fetch_haxby": [[217, "nilearn-datasets-fetch-haxby"]], "Examples using nilearn.datasets.fetch_haxby": [[217, "examples-using-nilearn-datasets-fetch-haxby"]], "nilearn.datasets.fetch_icbm152_2009": [[218, "nilearn-datasets-fetch-icbm152-2009"]], "Examples using nilearn.datasets.fetch_icbm152_2009": [[218, "examples-using-nilearn-datasets-fetch-icbm152-2009"]], "nilearn.datasets.fetch_icbm152_brain_gm_mask": [[219, "nilearn-datasets-fetch-icbm152-brain-gm-mask"]], "Examples using nilearn.datasets.fetch_icbm152_brain_gm_mask": [[219, "examples-using-nilearn-datasets-fetch-icbm152-brain-gm-mask"]], "nilearn.datasets.fetch_language_localizer_demo_dataset": [[220, "nilearn-datasets-fetch-language-localizer-demo-dataset"]], "Examples using nilearn.datasets.fetch_language_localizer_demo_dataset": [[220, "examples-using-nilearn-datasets-fetch-language-localizer-demo-dataset"]], "nilearn.datasets.fetch_localizer_button_task": [[221, "nilearn-datasets-fetch-localizer-button-task"]], "Examples using nilearn.datasets.fetch_localizer_button_task": [[221, "examples-using-nilearn-datasets-fetch-localizer-button-task"]], "nilearn.datasets.fetch_localizer_calculation_task": [[222, "nilearn-datasets-fetch-localizer-calculation-task"]], "Examples using nilearn.datasets.fetch_localizer_calculation_task": [[222, "examples-using-nilearn-datasets-fetch-localizer-calculation-task"]], "nilearn.datasets.fetch_localizer_contrasts": [[223, "nilearn-datasets-fetch-localizer-contrasts"]], "Examples using nilearn.datasets.fetch_localizer_contrasts": [[223, "examples-using-nilearn-datasets-fetch-localizer-contrasts"]], "nilearn.datasets.fetch_localizer_first_level": [[224, "nilearn-datasets-fetch-localizer-first-level"]], "Examples using nilearn.datasets.fetch_localizer_first_level": [[224, "examples-using-nilearn-datasets-fetch-localizer-first-level"]], "nilearn.datasets.fetch_megatrawls_netmats": [[225, "nilearn-datasets-fetch-megatrawls-netmats"]], "Examples using nilearn.datasets.fetch_megatrawls_netmats": [[225, "examples-using-nilearn-datasets-fetch-megatrawls-netmats"]], "nilearn.datasets.fetch_mixed_gambles": [[226, "nilearn-datasets-fetch-mixed-gambles"]], "Examples using nilearn.datasets.fetch_mixed_gambles": [[226, "examples-using-nilearn-datasets-fetch-mixed-gambles"]], "nilearn.datasets.fetch_miyawaki2008": [[227, "nilearn-datasets-fetch-miyawaki2008"]], "Examples using nilearn.datasets.fetch_miyawaki2008": [[227, "examples-using-nilearn-datasets-fetch-miyawaki2008"]], "nilearn.datasets.fetch_neurovault": [[228, "nilearn-datasets-fetch-neurovault"]], "Examples using nilearn.datasets.fetch_neurovault": [[228, "examples-using-nilearn-datasets-fetch-neurovault"]], "nilearn.datasets.fetch_neurovault_auditory_computation_task": [[229, "nilearn-datasets-fetch-neurovault-auditory-computation-task"]], "Examples using nilearn.datasets.fetch_neurovault_auditory_computation_task": [[229, "examples-using-nilearn-datasets-fetch-neurovault-auditory-computation-task"]], "nilearn.datasets.fetch_neurovault_ids": [[230, "nilearn-datasets-fetch-neurovault-ids"]], "Examples using nilearn.datasets.fetch_neurovault_ids": [[230, "examples-using-nilearn-datasets-fetch-neurovault-ids"]], "nilearn.datasets.fetch_neurovault_motor_task": [[231, "nilearn-datasets-fetch-neurovault-motor-task"]], "Examples using nilearn.datasets.fetch_neurovault_motor_task": [[231, "examples-using-nilearn-datasets-fetch-neurovault-motor-task"]], "nilearn.datasets.fetch_oasis_vbm": [[232, "nilearn-datasets-fetch-oasis-vbm"]], "Examples using nilearn.datasets.fetch_oasis_vbm": [[232, "examples-using-nilearn-datasets-fetch-oasis-vbm"]], "nilearn.datasets.fetch_openneuro_dataset": [[233, "nilearn-datasets-fetch-openneuro-dataset"]], "Examples using nilearn.datasets.fetch_openneuro_dataset": [[233, "examples-using-nilearn-datasets-fetch-openneuro-dataset"]], "nilearn.datasets.fetch_openneuro_dataset_index": [[234, "nilearn-datasets-fetch-openneuro-dataset-index"]], "nilearn.datasets.fetch_spm_auditory": [[235, "nilearn-datasets-fetch-spm-auditory"]], "Examples using nilearn.datasets.fetch_spm_auditory": [[235, "examples-using-nilearn-datasets-fetch-spm-auditory"]], "nilearn.datasets.fetch_spm_multimodal_fmri": [[236, "nilearn-datasets-fetch-spm-multimodal-fmri"]], "Examples using nilearn.datasets.fetch_spm_multimodal_fmri": [[236, "examples-using-nilearn-datasets-fetch-spm-multimodal-fmri"]], "nilearn.datasets.fetch_surf_fsaverage": [[237, "nilearn-datasets-fetch-surf-fsaverage"]], "Examples using nilearn.datasets.fetch_surf_fsaverage": [[237, "examples-using-nilearn-datasets-fetch-surf-fsaverage"]], "nilearn.datasets.fetch_surf_nki_enhanced": [[238, "nilearn-datasets-fetch-surf-nki-enhanced"]], "Examples using nilearn.datasets.fetch_surf_nki_enhanced": [[238, "examples-using-nilearn-datasets-fetch-surf-nki-enhanced"]], "nilearn.datasets.get_data_dirs": [[239, "nilearn-datasets-get-data-dirs"]], "Examples using nilearn.datasets.get_data_dirs": [[239, "examples-using-nilearn-datasets-get-data-dirs"]], "nilearn.datasets.load_mni152_brain_mask": [[240, "nilearn-datasets-load-mni152-brain-mask"]], "Examples using nilearn.datasets.load_mni152_brain_mask": [[240, "examples-using-nilearn-datasets-load-mni152-brain-mask"]], "nilearn.datasets.load_mni152_gm_mask": [[241, "nilearn-datasets-load-mni152-gm-mask"]], "nilearn.datasets.load_mni152_gm_template": [[242, "nilearn-datasets-load-mni152-gm-template"]], "nilearn.datasets.load_mni152_template": [[243, "nilearn-datasets-load-mni152-template"]], "Examples using nilearn.datasets.load_mni152_template": [[243, "examples-using-nilearn-datasets-load-mni152-template"]], "nilearn.datasets.load_mni152_wm_mask": [[244, "nilearn-datasets-load-mni152-wm-mask"]], "nilearn.datasets.load_mni152_wm_template": [[245, "nilearn-datasets-load-mni152-wm-template"]], "nilearn.datasets.load_sample_motor_activation_image": [[246, "nilearn-datasets-load-sample-motor-activation-image"]], "Examples using nilearn.datasets.load_sample_motor_activation_image": [[246, "examples-using-nilearn-datasets-load-sample-motor-activation-image"]], "nilearn.datasets.patch_openneuro_dataset": [[247, "nilearn-datasets-patch-openneuro-dataset"]], "nilearn.datasets.select_from_index": [[248, "nilearn-datasets-select-from-index"]], "Examples using nilearn.datasets.select_from_index": [[248, "examples-using-nilearn-datasets-select-from-index"]], "nilearn.decoding.Decoder": [[249, "nilearn-decoding-decoder"]], "Examples using nilearn.decoding.Decoder": [[249, "examples-using-nilearn-decoding-decoder"]], "nilearn.decoding.DecoderRegressor": [[250, "nilearn-decoding-decoderregressor"]], "Examples using nilearn.decoding.DecoderRegressor": [[250, "examples-using-nilearn-decoding-decoderregressor"]], "nilearn.decoding.FREMClassifier": [[251, "nilearn-decoding-fremclassifier"]], "Examples using nilearn.decoding.FREMClassifier": [[251, "examples-using-nilearn-decoding-fremclassifier"]], "nilearn.decoding.FREMRegressor": [[252, "nilearn-decoding-fremregressor"]], "Examples using nilearn.decoding.FREMRegressor": [[252, "examples-using-nilearn-decoding-fremregressor"]], "nilearn.decoding.SearchLight": [[253, "nilearn-decoding-searchlight"]], "Examples using nilearn.decoding.SearchLight": [[253, "examples-using-nilearn-decoding-searchlight"]], "nilearn.decoding.SpaceNetClassifier": [[254, "nilearn-decoding-spacenetclassifier"]], "nilearn.decoding.SpaceNetRegressor": [[255, "nilearn-decoding-spacenetregressor"]], "Examples using nilearn.decoding.SpaceNetRegressor": [[255, "examples-using-nilearn-decoding-spacenetregressor"]], "nilearn.decomposition.CanICA": [[256, "nilearn-decomposition-canica"]], "Examples using nilearn.decomposition.CanICA": [[256, "examples-using-nilearn-decomposition-canica"]], "nilearn.decomposition.DictLearning": [[257, "nilearn-decomposition-dictlearning"]], "Examples using nilearn.decomposition.DictLearning": [[257, "examples-using-nilearn-decomposition-dictlearning"]], "nilearn.experimental.surface.FileMesh": [[258, "nilearn-experimental-surface-filemesh"]], "nilearn.experimental.surface.InMemoryMesh": [[259, "nilearn-experimental-surface-inmemorymesh"]], "nilearn.experimental.surface.Mesh": [[260, "nilearn-experimental-surface-mesh"]], "nilearn.experimental.surface.PolyMesh": [[261, "nilearn-experimental-surface-polymesh"]], "Examples using nilearn.experimental.surface.PolyMesh": [[261, "examples-using-nilearn-experimental-surface-polymesh"]], "nilearn.experimental.surface.SurfaceImage": [[262, "nilearn-experimental-surface-surfaceimage"]], "Examples using nilearn.experimental.surface.SurfaceImage": [[262, "examples-using-nilearn-experimental-surface-surfaceimage"]], "nilearn.experimental.surface.SurfaceLabelsMasker": [[263, "nilearn-experimental-surface-surfacelabelsmasker"]], "Examples using nilearn.experimental.surface.SurfaceLabelsMasker": [[263, "examples-using-nilearn-experimental-surface-surfacelabelsmasker"]], "nilearn.experimental.surface.SurfaceMasker": [[264, "nilearn-experimental-surface-surfacemasker"]], "Examples using nilearn.experimental.surface.SurfaceMasker": [[264, "examples-using-nilearn-experimental-surface-surfacemasker"]], "nilearn.experimental.surface.fetch_destrieux": [[265, "nilearn-experimental-surface-fetch-destrieux"]], "Examples using nilearn.experimental.surface.fetch_destrieux": [[265, "examples-using-nilearn-experimental-surface-fetch-destrieux"]], "nilearn.experimental.surface.fetch_nki": [[266, "nilearn-experimental-surface-fetch-nki"]], "Examples using nilearn.experimental.surface.fetch_nki": [[266, "examples-using-nilearn-experimental-surface-fetch-nki"]], "nilearn.experimental.surface.load_fsaverage": [[267, "nilearn-experimental-surface-load-fsaverage"]], "nilearn.glm.ARModel": [[268, "nilearn-glm-armodel"]], "nilearn.glm.Contrast": [[269, "nilearn-glm-contrast"]], "Examples using nilearn.glm.Contrast": [[269, "examples-using-nilearn-glm-contrast"]], "nilearn.glm.FContrastResults": [[270, "nilearn-glm-fcontrastresults"]], "nilearn.glm.LikelihoodModelResults": [[271, "nilearn-glm-likelihoodmodelresults"]], "nilearn.glm.OLSModel": [[272, "nilearn-glm-olsmodel"]], "nilearn.glm.RegressionResults": [[273, "nilearn-glm-regressionresults"]], "nilearn.glm.SimpleRegressionResults": [[274, "nilearn-glm-simpleregressionresults"]], "nilearn.glm.TContrastResults": [[275, "nilearn-glm-tcontrastresults"]], "nilearn.glm.cluster_level_inference": [[276, "nilearn-glm-cluster-level-inference"]], "Examples using nilearn.glm.cluster_level_inference": [[276, "examples-using-nilearn-glm-cluster-level-inference"]], "nilearn.glm.compute_contrast": [[277, "nilearn-glm-compute-contrast"]], "Examples using nilearn.glm.compute_contrast": [[277, "examples-using-nilearn-glm-compute-contrast"]], "nilearn.glm.compute_fixed_effects": [[278, "nilearn-glm-compute-fixed-effects"]], "Examples using nilearn.glm.compute_fixed_effects": [[278, "examples-using-nilearn-glm-compute-fixed-effects"]], "nilearn.glm.expression_to_contrast_vector": [[279, "nilearn-glm-expression-to-contrast-vector"]], "nilearn.glm.fdr_threshold": [[280, "nilearn-glm-fdr-threshold"]], "nilearn.glm.first_level.FirstLevelModel": [[281, "nilearn-glm-first-level-firstlevelmodel"]], "Examples using nilearn.glm.first_level.FirstLevelModel": [[281, "examples-using-nilearn-glm-first-level-firstlevelmodel"]], "nilearn.glm.first_level.check_design_matrix": [[282, "nilearn-glm-first-level-check-design-matrix"]], "nilearn.glm.first_level.compute_regressor": [[283, "nilearn-glm-first-level-compute-regressor"]], "Examples using nilearn.glm.first_level.compute_regressor": [[283, "examples-using-nilearn-glm-first-level-compute-regressor"]], "nilearn.glm.first_level.first_level_from_bids": [[284, "nilearn-glm-first-level-first-level-from-bids"]], "Examples using nilearn.glm.first_level.first_level_from_bids": [[284, "examples-using-nilearn-glm-first-level-first-level-from-bids"]], "nilearn.glm.first_level.glover_dispersion_derivative": [[285, "nilearn-glm-first-level-glover-dispersion-derivative"]], "nilearn.glm.first_level.glover_hrf": [[286, "nilearn-glm-first-level-glover-hrf"]], "nilearn.glm.first_level.glover_time_derivative": [[287, "nilearn-glm-first-level-glover-time-derivative"]], "nilearn.glm.first_level.make_first_level_design_matrix": [[288, "nilearn-glm-first-level-make-first-level-design-matrix"]], "Examples using nilearn.glm.first_level.make_first_level_design_matrix": [[288, "examples-using-nilearn-glm-first-level-make-first-level-design-matrix"]], "nilearn.glm.first_level.mean_scaling": [[289, "nilearn-glm-first-level-mean-scaling"]], "nilearn.glm.first_level.run_glm": [[290, "nilearn-glm-first-level-run-glm"]], "Examples using nilearn.glm.first_level.run_glm": [[290, "examples-using-nilearn-glm-first-level-run-glm"]], "nilearn.glm.first_level.spm_dispersion_derivative": [[291, "nilearn-glm-first-level-spm-dispersion-derivative"]], "nilearn.glm.first_level.spm_hrf": [[292, "nilearn-glm-first-level-spm-hrf"]], "nilearn.glm.first_level.spm_time_derivative": [[293, "nilearn-glm-first-level-spm-time-derivative"]], "nilearn.glm.second_level.SecondLevelModel": [[294, "nilearn-glm-second-level-secondlevelmodel"]], "Examples using nilearn.glm.second_level.SecondLevelModel": [[294, "examples-using-nilearn-glm-second-level-secondlevelmodel"]], "nilearn.glm.second_level.make_second_level_design_matrix": [[295, "nilearn-glm-second-level-make-second-level-design-matrix"]], "Examples using nilearn.glm.second_level.make_second_level_design_matrix": [[295, "examples-using-nilearn-glm-second-level-make-second-level-design-matrix"]], "nilearn.glm.second_level.non_parametric_inference": [[296, "nilearn-glm-second-level-non-parametric-inference"]], "Examples using nilearn.glm.second_level.non_parametric_inference": [[296, "examples-using-nilearn-glm-second-level-non-parametric-inference"]], "nilearn.glm.threshold_stats_img": [[297, "nilearn-glm-threshold-stats-img"]], "Examples using nilearn.glm.threshold_stats_img": [[297, "examples-using-nilearn-glm-threshold-stats-img"]], "nilearn.image.binarize_img": [[298, "nilearn-image-binarize-img"]], "nilearn.image.clean_img": [[299, "nilearn-image-clean-img"]], "Examples using nilearn.image.clean_img": [[299, "examples-using-nilearn-image-clean-img"]], "nilearn.image.concat_imgs": [[300, "nilearn-image-concat-imgs"]], "Examples using nilearn.image.concat_imgs": [[300, "examples-using-nilearn-image-concat-imgs"]], "nilearn.image.coord_transform": [[301, "nilearn-image-coord-transform"]], "Examples using nilearn.image.coord_transform": [[301, "examples-using-nilearn-image-coord-transform"]], "nilearn.image.copy_img": [[302, "nilearn-image-copy-img"]], "nilearn.image.crop_img": [[303, "nilearn-image-crop-img"]], "nilearn.image.get_data": [[304, "nilearn-image-get-data"]], "Examples using nilearn.image.get_data": [[304, "examples-using-nilearn-image-get-data"]], "nilearn.image.high_variance_confounds": [[305, "nilearn-image-high-variance-confounds"]], "Examples using nilearn.image.high_variance_confounds": [[305, "examples-using-nilearn-image-high-variance-confounds"]], "nilearn.image.index_img": [[306, "nilearn-image-index-img"]], "Examples using nilearn.image.index_img": [[306, "examples-using-nilearn-image-index-img"]], "nilearn.image.iter_img": [[307, "nilearn-image-iter-img"]], "Examples using nilearn.image.iter_img": [[307, "examples-using-nilearn-image-iter-img"]], "nilearn.image.largest_connected_component_img": [[308, "nilearn-image-largest-connected-component-img"]], "nilearn.image.load_img": [[309, "nilearn-image-load-img"]], "Examples using nilearn.image.load_img": [[309, "examples-using-nilearn-image-load-img"]], "nilearn.image.math_img": [[310, "nilearn-image-math-img"]], "Examples using nilearn.image.math_img": [[310, "examples-using-nilearn-image-math-img"]], "nilearn.image.mean_img": [[311, "nilearn-image-mean-img"]], "Examples using nilearn.image.mean_img": [[311, "examples-using-nilearn-image-mean-img"]], "nilearn.image.new_img_like": [[312, "nilearn-image-new-img-like"]], "Examples using nilearn.image.new_img_like": [[312, "examples-using-nilearn-image-new-img-like"]], "nilearn.image.reorder_img": [[313, "nilearn-image-reorder-img"]], "nilearn.image.resample_img": [[314, "nilearn-image-resample-img"]], "Examples using nilearn.image.resample_img": [[314, "examples-using-nilearn-image-resample-img"]], "nilearn.image.resample_to_img": [[315, "nilearn-image-resample-to-img"]], "Examples using nilearn.image.resample_to_img": [[315, "examples-using-nilearn-image-resample-to-img"]], "nilearn.image.smooth_img": [[316, "nilearn-image-smooth-img"]], "Examples using nilearn.image.smooth_img": [[316, "examples-using-nilearn-image-smooth-img"]], "nilearn.image.swap_img_hemispheres": [[317, "nilearn-image-swap-img-hemispheres"]], "nilearn.image.threshold_img": [[318, "nilearn-image-threshold-img"]], "Examples using nilearn.image.threshold_img": [[318, "examples-using-nilearn-image-threshold-img"]], "nilearn.interfaces.bids.get_bids_files": [[319, "nilearn-interfaces-bids-get-bids-files"]], "nilearn.interfaces.bids.parse_bids_filename": [[320, "nilearn-interfaces-bids-parse-bids-filename"]], "nilearn.interfaces.bids.save_glm_to_bids": [[321, "nilearn-interfaces-bids-save-glm-to-bids"]], "Examples using nilearn.interfaces.bids.save_glm_to_bids": [[321, "examples-using-nilearn-interfaces-bids-save-glm-to-bids"]], "nilearn.interfaces.fmriprep.load_confounds": [[322, "nilearn-interfaces-fmriprep-load-confounds"]], "Examples using nilearn.interfaces.fmriprep.load_confounds": [[322, "examples-using-nilearn-interfaces-fmriprep-load-confounds"]], "nilearn.interfaces.fmriprep.load_confounds_strategy": [[323, "nilearn-interfaces-fmriprep-load-confounds-strategy"]], "Examples using nilearn.interfaces.fmriprep.load_confounds_strategy": [[323, "examples-using-nilearn-interfaces-fmriprep-load-confounds-strategy"]], "nilearn.interfaces.fsl.get_design_from_fslmat": [[324, "nilearn-interfaces-fsl-get-design-from-fslmat"]], "Examples using nilearn.interfaces.fsl.get_design_from_fslmat": [[324, "examples-using-nilearn-interfaces-fsl-get-design-from-fslmat"]], "nilearn.maskers.BaseMasker": [[325, "nilearn-maskers-basemasker"]], "Examples using nilearn.maskers.BaseMasker": [[325, "examples-using-nilearn-maskers-basemasker"]], "nilearn.maskers.MultiNiftiLabelsMasker": [[326, "nilearn-maskers-multiniftilabelsmasker"]], "Examples using nilearn.maskers.MultiNiftiLabelsMasker": [[326, "examples-using-nilearn-maskers-multiniftilabelsmasker"]], "nilearn.maskers.MultiNiftiMapsMasker": [[327, "nilearn-maskers-multiniftimapsmasker"]], "Examples using nilearn.maskers.MultiNiftiMapsMasker": [[327, "examples-using-nilearn-maskers-multiniftimapsmasker"]], "nilearn.maskers.MultiNiftiMasker": [[328, "nilearn-maskers-multiniftimasker"]], "Examples using nilearn.maskers.MultiNiftiMasker": [[328, "examples-using-nilearn-maskers-multiniftimasker"]], "nilearn.maskers.NiftiLabelsMasker": [[329, "nilearn-maskers-niftilabelsmasker"]], "Examples using nilearn.maskers.NiftiLabelsMasker": [[329, "examples-using-nilearn-maskers-niftilabelsmasker"]], "nilearn.maskers.NiftiMapsMasker": [[330, "nilearn-maskers-niftimapsmasker"]], "Examples using nilearn.maskers.NiftiMapsMasker": [[330, "examples-using-nilearn-maskers-niftimapsmasker"]], "nilearn.maskers.NiftiMasker": [[331, "nilearn-maskers-niftimasker"]], "Examples using nilearn.maskers.NiftiMasker": [[331, "examples-using-nilearn-maskers-niftimasker"]], "nilearn.maskers.NiftiSpheresMasker": [[332, "nilearn-maskers-niftispheresmasker"]], "Examples using nilearn.maskers.NiftiSpheresMasker": [[332, "examples-using-nilearn-maskers-niftispheresmasker"]], "nilearn.masking.apply_mask": [[333, "nilearn-masking-apply-mask"]], "Examples using nilearn.masking.apply_mask": [[333, "examples-using-nilearn-masking-apply-mask"]], "nilearn.masking.compute_background_mask": [[334, "nilearn-masking-compute-background-mask"]], "nilearn.masking.compute_brain_mask": [[335, "nilearn-masking-compute-brain-mask"]], "nilearn.masking.compute_epi_mask": [[336, "nilearn-masking-compute-epi-mask"]], "Examples using nilearn.masking.compute_epi_mask": [[336, "examples-using-nilearn-masking-compute-epi-mask"]], "nilearn.masking.compute_multi_background_mask": [[337, "nilearn-masking-compute-multi-background-mask"]], "nilearn.masking.compute_multi_brain_mask": [[338, "nilearn-masking-compute-multi-brain-mask"]], "nilearn.masking.compute_multi_epi_mask": [[339, "nilearn-masking-compute-multi-epi-mask"]], "nilearn.masking.intersect_masks": [[340, "nilearn-masking-intersect-masks"]], "nilearn.masking.unmask": [[341, "nilearn-masking-unmask"]], "Examples using nilearn.masking.unmask": [[341, "examples-using-nilearn-masking-unmask"]], "nilearn.mass_univariate.permuted_ols": [[342, "nilearn-mass-univariate-permuted-ols"]], "Examples using nilearn.mass_univariate.permuted_ols": [[342, "examples-using-nilearn-mass-univariate-permuted-ols"]], "nilearn.plotting.displays.BaseAxes": [[343, "nilearn-plotting-displays-baseaxes"]], "nilearn.plotting.displays.BaseSlicer": [[344, "nilearn-plotting-displays-baseslicer"]], "nilearn.plotting.displays.CutAxes": [[345, "nilearn-plotting-displays-cutaxes"]], "nilearn.plotting.displays.GlassBrainAxes": [[346, "nilearn-plotting-displays-glassbrainaxes"]], "nilearn.plotting.displays.LProjector": [[347, "nilearn-plotting-displays-lprojector"]], "Examples using nilearn.plotting.displays.LProjector": [[347, "examples-using-nilearn-plotting-displays-lprojector"]], "nilearn.plotting.displays.LRProjector": [[348, "nilearn-plotting-displays-lrprojector"]], "Examples using nilearn.plotting.displays.LRProjector": [[348, "examples-using-nilearn-plotting-displays-lrprojector"]], "nilearn.plotting.displays.LYRProjector": [[349, "nilearn-plotting-displays-lyrprojector"]], "Examples using nilearn.plotting.displays.LYRProjector": [[349, "examples-using-nilearn-plotting-displays-lyrprojector"]], "nilearn.plotting.displays.LYRZProjector": [[350, "nilearn-plotting-displays-lyrzprojector"]], "Examples using nilearn.plotting.displays.LYRZProjector": [[350, "examples-using-nilearn-plotting-displays-lyrzprojector"]], "nilearn.plotting.displays.LZRProjector": [[351, "nilearn-plotting-displays-lzrprojector"]], "Examples using nilearn.plotting.displays.LZRProjector": [[351, "examples-using-nilearn-plotting-displays-lzrprojector"]], "nilearn.plotting.displays.LZRYProjector": [[352, "nilearn-plotting-displays-lzryprojector"]], "Examples using nilearn.plotting.displays.LZRYProjector": [[352, "examples-using-nilearn-plotting-displays-lzryprojector"]], "nilearn.plotting.displays.MosaicSlicer": [[353, "nilearn-plotting-displays-mosaicslicer"]], "Examples using nilearn.plotting.displays.MosaicSlicer": [[353, "examples-using-nilearn-plotting-displays-mosaicslicer"]], "nilearn.plotting.displays.OrthoProjector": [[354, "nilearn-plotting-displays-orthoprojector"]], "Examples using nilearn.plotting.displays.OrthoProjector": [[354, "examples-using-nilearn-plotting-displays-orthoprojector"]], "nilearn.plotting.displays.OrthoSlicer": [[355, "nilearn-plotting-displays-orthoslicer"]], "Examples using nilearn.plotting.displays.OrthoSlicer": [[355, "examples-using-nilearn-plotting-displays-orthoslicer"]], "nilearn.plotting.displays.PlotlySurfaceFigure": [[356, "nilearn-plotting-displays-plotlysurfacefigure"]], "Examples using nilearn.plotting.displays.PlotlySurfaceFigure": [[356, "examples-using-nilearn-plotting-displays-plotlysurfacefigure"]], "nilearn.plotting.displays.RProjector": [[357, "nilearn-plotting-displays-rprojector"]], "Examples using nilearn.plotting.displays.RProjector": [[357, "examples-using-nilearn-plotting-displays-rprojector"]], "nilearn.plotting.displays.TiledSlicer": [[358, "nilearn-plotting-displays-tiledslicer"]], "Examples using nilearn.plotting.displays.TiledSlicer": [[358, "examples-using-nilearn-plotting-displays-tiledslicer"]], "nilearn.plotting.displays.XProjector": [[359, "nilearn-plotting-displays-xprojector"]], "Examples using nilearn.plotting.displays.XProjector": [[359, "examples-using-nilearn-plotting-displays-xprojector"]], "nilearn.plotting.displays.XSlicer": [[360, "nilearn-plotting-displays-xslicer"]], "Examples using nilearn.plotting.displays.XSlicer": [[360, "examples-using-nilearn-plotting-displays-xslicer"]], "nilearn.plotting.displays.XZProjector": [[361, "nilearn-plotting-displays-xzprojector"]], "Examples using nilearn.plotting.displays.XZProjector": [[361, "examples-using-nilearn-plotting-displays-xzprojector"]], "nilearn.plotting.displays.XZSlicer": [[362, "nilearn-plotting-displays-xzslicer"]], "Examples using nilearn.plotting.displays.XZSlicer": [[362, "examples-using-nilearn-plotting-displays-xzslicer"]], "nilearn.plotting.displays.YProjector": [[363, "nilearn-plotting-displays-yprojector"]], "Examples using nilearn.plotting.displays.YProjector": [[363, "examples-using-nilearn-plotting-displays-yprojector"]], "nilearn.plotting.displays.YSlicer": [[364, "nilearn-plotting-displays-yslicer"]], "Examples using nilearn.plotting.displays.YSlicer": [[364, "examples-using-nilearn-plotting-displays-yslicer"]], "nilearn.plotting.displays.YXProjector": [[365, "nilearn-plotting-displays-yxprojector"]], "Examples using nilearn.plotting.displays.YXProjector": [[365, "examples-using-nilearn-plotting-displays-yxprojector"]], "nilearn.plotting.displays.YXSlicer": [[366, "nilearn-plotting-displays-yxslicer"]], "Examples using nilearn.plotting.displays.YXSlicer": [[366, "examples-using-nilearn-plotting-displays-yxslicer"]], "nilearn.plotting.displays.YZProjector": [[367, "nilearn-plotting-displays-yzprojector"]], "Examples using nilearn.plotting.displays.YZProjector": [[367, "examples-using-nilearn-plotting-displays-yzprojector"]], "nilearn.plotting.displays.YZSlicer": [[368, "nilearn-plotting-displays-yzslicer"]], "Examples using nilearn.plotting.displays.YZSlicer": [[368, "examples-using-nilearn-plotting-displays-yzslicer"]], "nilearn.plotting.displays.ZProjector": [[369, "nilearn-plotting-displays-zprojector"]], "Examples using nilearn.plotting.displays.ZProjector": [[369, "examples-using-nilearn-plotting-displays-zprojector"]], "nilearn.plotting.displays.ZSlicer": [[370, "nilearn-plotting-displays-zslicer"]], "Examples using nilearn.plotting.displays.ZSlicer": [[370, "examples-using-nilearn-plotting-displays-zslicer"]], "nilearn.plotting.displays.get_projector": [[371, "nilearn-plotting-displays-get-projector"]], "nilearn.plotting.displays.get_slicer": [[372, "nilearn-plotting-displays-get-slicer"]], "nilearn.plotting.find_cut_slices": [[373, "nilearn-plotting-find-cut-slices"]], "nilearn.plotting.find_parcellation_cut_coords": [[374, "nilearn-plotting-find-parcellation-cut-coords"]], "Examples using nilearn.plotting.find_parcellation_cut_coords": [[374, "examples-using-nilearn-plotting-find-parcellation-cut-coords"]], "nilearn.plotting.find_probabilistic_atlas_cut_coords": [[375, "nilearn-plotting-find-probabilistic-atlas-cut-coords"]], "Examples using nilearn.plotting.find_probabilistic_atlas_cut_coords": [[375, "examples-using-nilearn-plotting-find-probabilistic-atlas-cut-coords"]], "nilearn.plotting.find_xyz_cut_coords": [[376, "nilearn-plotting-find-xyz-cut-coords"]], "Examples using nilearn.plotting.find_xyz_cut_coords": [[376, "examples-using-nilearn-plotting-find-xyz-cut-coords"]], "nilearn.plotting.plot_anat": [[377, "nilearn-plotting-plot-anat"]], "Examples using nilearn.plotting.plot_anat": [[377, "examples-using-nilearn-plotting-plot-anat"]], "nilearn.plotting.plot_carpet": [[378, "nilearn-plotting-plot-carpet"]], "Examples using nilearn.plotting.plot_carpet": [[378, "examples-using-nilearn-plotting-plot-carpet"]], "nilearn.plotting.plot_connectome": [[379, "nilearn-plotting-plot-connectome"]], "Examples using nilearn.plotting.plot_connectome": [[379, "examples-using-nilearn-plotting-plot-connectome"]], "nilearn.plotting.plot_contrast_matrix": [[380, "nilearn-plotting-plot-contrast-matrix"]], "Examples using nilearn.plotting.plot_contrast_matrix": [[380, "examples-using-nilearn-plotting-plot-contrast-matrix"]], "nilearn.plotting.plot_design_matrix": [[381, "nilearn-plotting-plot-design-matrix"]], "Examples using nilearn.plotting.plot_design_matrix": [[381, "examples-using-nilearn-plotting-plot-design-matrix"]], "nilearn.plotting.plot_epi": [[382, "nilearn-plotting-plot-epi"]], "Examples using nilearn.plotting.plot_epi": [[382, "examples-using-nilearn-plotting-plot-epi"]], "nilearn.plotting.plot_event": [[383, "nilearn-plotting-plot-event"]], "Examples using nilearn.plotting.plot_event": [[383, "examples-using-nilearn-plotting-plot-event"]], "nilearn.plotting.plot_glass_brain": [[384, "nilearn-plotting-plot-glass-brain"]], "Examples using nilearn.plotting.plot_glass_brain": [[384, "examples-using-nilearn-plotting-plot-glass-brain"]], "nilearn.plotting.plot_img": [[385, "nilearn-plotting-plot-img"]], "Examples using nilearn.plotting.plot_img": [[385, "examples-using-nilearn-plotting-plot-img"]], "nilearn.plotting.plot_img_comparison": [[386, "nilearn-plotting-plot-img-comparison"]], "Examples using nilearn.plotting.plot_img_comparison": [[386, "examples-using-nilearn-plotting-plot-img-comparison"]], "nilearn.plotting.plot_img_on_surf": [[387, "nilearn-plotting-plot-img-on-surf"]], "Examples using nilearn.plotting.plot_img_on_surf": [[387, "examples-using-nilearn-plotting-plot-img-on-surf"]], "nilearn.plotting.plot_markers": [[388, "nilearn-plotting-plot-markers"]], "Examples using nilearn.plotting.plot_markers": [[388, "examples-using-nilearn-plotting-plot-markers"]], "nilearn.plotting.plot_matrix": [[389, "nilearn-plotting-plot-matrix"]], "Examples using nilearn.plotting.plot_matrix": [[389, "examples-using-nilearn-plotting-plot-matrix"]], "nilearn.plotting.plot_prob_atlas": [[390, "nilearn-plotting-plot-prob-atlas"]], "Examples using nilearn.plotting.plot_prob_atlas": [[390, "examples-using-nilearn-plotting-plot-prob-atlas"]], "nilearn.plotting.plot_roi": [[391, "nilearn-plotting-plot-roi"]], "Examples using nilearn.plotting.plot_roi": [[391, "examples-using-nilearn-plotting-plot-roi"]], "nilearn.plotting.plot_stat_map": [[392, "nilearn-plotting-plot-stat-map"]], "Examples using nilearn.plotting.plot_stat_map": [[392, "examples-using-nilearn-plotting-plot-stat-map"]], "nilearn.plotting.plot_surf": [[393, "nilearn-plotting-plot-surf"]], "Examples using nilearn.plotting.plot_surf": [[393, "examples-using-nilearn-plotting-plot-surf"]], "nilearn.plotting.plot_surf_contours": [[394, "nilearn-plotting-plot-surf-contours"]], "Examples using nilearn.plotting.plot_surf_contours": [[394, "examples-using-nilearn-plotting-plot-surf-contours"]], "nilearn.plotting.plot_surf_roi": [[395, "nilearn-plotting-plot-surf-roi"]], "Examples using nilearn.plotting.plot_surf_roi": [[395, "examples-using-nilearn-plotting-plot-surf-roi"]], "nilearn.plotting.plot_surf_stat_map": [[396, "nilearn-plotting-plot-surf-stat-map"]], "Examples using nilearn.plotting.plot_surf_stat_map": [[396, "examples-using-nilearn-plotting-plot-surf-stat-map"]], "nilearn.plotting.show": [[397, "nilearn-plotting-show"]], "Examples using nilearn.plotting.show": [[397, "examples-using-nilearn-plotting-show"]], "nilearn.plotting.view_connectome": [[398, "nilearn-plotting-view-connectome"]], "Examples using nilearn.plotting.view_connectome": [[398, "examples-using-nilearn-plotting-view-connectome"]], "nilearn.plotting.view_img": [[399, "nilearn-plotting-view-img"]], "Examples using nilearn.plotting.view_img": [[399, "examples-using-nilearn-plotting-view-img"]], "nilearn.plotting.view_img_on_surf": [[400, "nilearn-plotting-view-img-on-surf"]], "Examples using nilearn.plotting.view_img_on_surf": [[400, "examples-using-nilearn-plotting-view-img-on-surf"]], "nilearn.plotting.view_markers": [[401, "nilearn-plotting-view-markers"]], "nilearn.plotting.view_surf": [[402, "nilearn-plotting-view-surf"]], "Examples using nilearn.plotting.view_surf": [[402, "examples-using-nilearn-plotting-view-surf"]], "nilearn.regions.HierarchicalKMeans": [[403, "nilearn-regions-hierarchicalkmeans"]], "nilearn.regions.Parcellations": [[404, "nilearn-regions-parcellations"]], "Examples using nilearn.regions.Parcellations": [[404, "examples-using-nilearn-regions-parcellations"]], "nilearn.regions.ReNA": [[405, "nilearn-regions-rena"]], "nilearn.regions.RegionExtractor": [[406, "nilearn-regions-regionextractor"]], "Examples using nilearn.regions.RegionExtractor": [[406, "examples-using-nilearn-regions-regionextractor"]], "nilearn.regions.connected_label_regions": [[407, "nilearn-regions-connected-label-regions"]], "Examples using nilearn.regions.connected_label_regions": [[407, "examples-using-nilearn-regions-connected-label-regions"]], "nilearn.regions.connected_regions": [[408, "nilearn-regions-connected-regions"]], "Examples using nilearn.regions.connected_regions": [[408, "examples-using-nilearn-regions-connected-regions"]], "nilearn.regions.img_to_signals_labels": [[409, "nilearn-regions-img-to-signals-labels"]], "nilearn.regions.img_to_signals_maps": [[410, "nilearn-regions-img-to-signals-maps"]], "nilearn.regions.recursive_neighbor_agglomeration": [[411, "nilearn-regions-recursive-neighbor-agglomeration"]], "nilearn.regions.signals_to_img_labels": [[412, "nilearn-regions-signals-to-img-labels"]], "nilearn.regions.signals_to_img_maps": [[413, "nilearn-regions-signals-to-img-maps"]], "nilearn.reporting.HTMLReport": [[414, "nilearn-reporting-htmlreport"]], "Examples using nilearn.reporting.HTMLReport": [[414, "examples-using-nilearn-reporting-htmlreport"]], "nilearn.reporting.get_clusters_table": [[415, "nilearn-reporting-get-clusters-table"]], "Examples using nilearn.reporting.get_clusters_table": [[415, "examples-using-nilearn-reporting-get-clusters-table"]], "nilearn.reporting.make_glm_report": [[416, "nilearn-reporting-make-glm-report"]], "Examples using nilearn.reporting.make_glm_report": [[416, "examples-using-nilearn-reporting-make-glm-report"]], "nilearn.signal.butterworth": [[417, "nilearn-signal-butterworth"]], "nilearn.signal.clean": [[418, "nilearn-signal-clean"]], "nilearn.signal.high_variance_confounds": [[419, "nilearn-signal-high-variance-confounds"]], "nilearn.surface.load_surf_data": [[420, "nilearn-surface-load-surf-data"]], "Examples using nilearn.surface.load_surf_data": [[420, "examples-using-nilearn-surface-load-surf-data"]], "nilearn.surface.load_surf_mesh": [[421, "nilearn-surface-load-surf-mesh"]], "Examples using nilearn.surface.load_surf_mesh": [[421, "examples-using-nilearn-surface-load-surf-mesh"]], "nilearn.surface.vol_to_surf": [[422, "nilearn-surface-vol-to-surf"]], "Examples using nilearn.surface.vol_to_surf": [[422, "examples-using-nilearn-surface-vol-to-surf"]], "nilearn.glm: Generalized Linear Models": [[423, "module-nilearn.glm"]], "nilearn.glm.first_level": [[423, "module-nilearn.glm.first_level"]], "nilearn.glm.second_level": [[423, "module-nilearn.glm.second_level"]], "nilearn.image: Image Processing and Resampling Utilities": [[424, "module-nilearn.image"]], "API References": [[425, "api-references"]], "nilearn.interfaces: Loading components from interfaces": [[426, "module-nilearn.interfaces"]], "nilearn.interfaces.bids": [[426, "module-nilearn.interfaces.bids"]], "nilearn.interfaces.fmriprep": [[426, "module-nilearn.interfaces.fmriprep"]], "nilearn.interfaces.fsl": [[426, "module-nilearn.interfaces.fsl"]], "nilearn.maskers: Extracting Signals from Brain Images": [[427, "module-nilearn.maskers"]], "nilearn.masking: Data Masking Utilities": [[428, "module-nilearn.masking"]], "nilearn.mass_univariate: Mass-Univariate Analysis": [[429, "module-nilearn.mass_univariate"]], "nilearn.plotting: Plotting Brain Data": [[430, "module-nilearn.plotting"]], "nilearn.plotting.displays: Interacting with figures": [[430, "module-nilearn.plotting.displays"]], "nilearn.regions: Operating on Regions": [[431, "module-nilearn.regions"]], "nilearn.reporting: Reporting Functions": [[432, "module-nilearn.reporting"]], "nilearn.signal: Preprocessing Time Series": [[433, "module-nilearn.signal"]], "nilearn.surface: Manipulating Surface Data": [[434, "module-nilearn.surface"]], "Plotting brain images": [[435, "plotting-brain-images"]], "Code examples": [[435, null]], "Different plotting functions": [[435, "different-plotting-functions"]], "Different display modes": [[435, "different-display-modes"]], "Available Colormaps": [[435, "available-colormaps"]], "Adding overlays, edges, contours, contour fillings, markers, scale bar": [[435, "adding-overlays-edges-contours-contour-fillings-markers-scale-bar"]], "Displaying or saving to an image file": [[435, "displaying-or-saving-to-an-image-file"]], "Surface plotting": [[435, "surface-plotting"]], "Interactive plots": [[435, "interactive-plots"]], "3D Plots of statistical maps or atlases on the cortical surface": [[435, "d-plots-of-statistical-maps-or-atlases-on-the-cortical-surface"]], "view_img_on_surf: Surface plot using a 3D statistical map": [[435, "view-img-on-surf-surface-plot-using-a-3d-statistical-map"]], "view_surf: Surface plot using a surface map and a cortical mesh": [[435, "view-surf-surface-plot-using-a-surface-map-and-a-cortical-mesh"]], "plot_surf_stat_map: Surface plot using a surface map and a cortical mesh": [[435, "plot-surf-stat-map-surface-plot-using-a-surface-map-and-a-cortical-mesh"]], "3D Plots of connectomes": [[435, "d-plots-of-connectomes"]], "3D Plots of markers": [[435, "d-plots-of-markers"]], "Interactive visualization of statistical map slices": [[435, "interactive-visualization-of-statistical-map-slices"]], "Quickstart": [[436, "quickstart"]], "nilearn": [[436, "nilearn"]], "Important links": [[436, "important-links"]], "Install": [[436, "install"]], "Latest release": [[436, "latest-release"]], "Development version": [[436, "development-version"]], "Check installation": [[436, "check-installation"]], "Drop-in Hours": [[436, "drop-in-hours"]], "Dependencies": [[436, "dependencies"]], "Development": [[436, "development"]], "User guide": [[437, "user-guide"]], "Table of contents": [[437, "table-of-contents"]]}, "indexentries": {"anova": [[172, "term-ANOVA"]], "auc": [[172, "term-AUC"]], "bids": [[172, "term-BIDS"]], "bold": [[172, "term-BOLD"]], "beta": [[172, "term-Beta"]], "canica": [[172, "term-CanICA"]], "closing": [[172, "term-Closing"]], "decoding": [[172, "term-Decoding"]], "deterministic atlas": [[172, "term-Deterministic-atlas"]], "dictionary learning": [[172, "term-Dictionary-learning"]], "dilation": [[172, "term-Dilation"]], "eeg": [[172, "term-EEG"]], "epi": [[172, "term-EPI"]], "erosion": [[172, "term-Erosion"]], "fdr correction": [[172, "term-FDR-correction"]], "fir": [[172, "term-FIR"]], "fpr correction": [[172, "term-FPR-correction"]], "frem": [[172, "term-FREM"]], "fwer correction": [[172, "term-FWER-correction"]], "fwhm": [[172, "term-FWHM"]], "glm": [[172, "term-GLM"]], "hrf": [[172, "term-HRF"]], "ica": [[172, "term-ICA"]], "meg": [[172, "term-MEG"]], "mni": [[172, "term-MNI"]], "mvpa": [[172, "term-MVPA"]], "neurovault": [[172, "term-Neurovault"]], "opening": [[172, "term-Opening"]], "parameter estimate": [[172, "term-Parameter-estimate"]], "probabilistic atlas": [[172, "term-Probabilistic-atlas"]], "roc": [[172, "term-ROC"]], "rena": [[172, "term-ReNA"]], "snr": [[172, "term-SNR"]], "spm": [[172, "term-SPM"]], "svm": [[172, "term-SVM"]], "searchlight": [[172, "term-Searchlight"]], "spacenet": [[172, "term-SpaceNet"]], "tfce": [[172, "term-TFCE"]], "tr": [[172, "term-TR"]], "unsupervised learning": [[172, "term-Unsupervised-learning"]], "vbm": [[172, "term-VBM"]], "ward clustering": [[172, "term-Ward-clustering"]], "classification": [[172, "term-classification"]], "contrast": [[172, "term-contrast"]], "fmri": [[172, "term-fMRI"]], "fmriprep": [[172, "term-fMRIPrep"]], "functional connectivity": [[172, "term-functional-connectivity"]], "functional connectome": [[172, "term-functional-connectome"]], "parcellation": [[172, "term-parcellation"]], "predictive modelling": [[172, "term-predictive-modelling"]], "regression": [[172, "term-regression"]], "resting-state": [[172, "term-resting-state"]], "supervised learning": [[172, "term-supervised-learning"]], "voxel": [[172, "term-voxel"]], "module": [[180, "module-nilearn.connectome"], [181, "module-nilearn.datasets"], [182, "module-nilearn.decoding"], [183, "module-nilearn.decomposition"], [184, "module-nilearn.experimental"], [423, "module-nilearn.glm"], [423, "module-nilearn.glm.first_level"], [423, "module-nilearn.glm.second_level"], [424, "module-nilearn.image"], [426, "module-nilearn.interfaces"], [426, "module-nilearn.interfaces.bids"], [426, "module-nilearn.interfaces.fmriprep"], [426, "module-nilearn.interfaces.fsl"], [427, "module-nilearn.maskers"], [428, "module-nilearn.masking"], [429, "module-nilearn.mass_univariate"], [430, "module-nilearn.plotting"], [430, "module-nilearn.plotting.displays"], [431, "module-nilearn.regions"], [432, "module-nilearn.reporting"], [433, "module-nilearn.signal"], [434, "module-nilearn.surface"]], "nilearn.connectome": [[180, "module-nilearn.connectome"]], "nilearn.datasets": [[181, "module-nilearn.datasets"]], "nilearn.decoding": [[182, "module-nilearn.decoding"]], "nilearn.decomposition": [[183, "module-nilearn.decomposition"]], "nilearn.experimental": [[184, "module-nilearn.experimental"]], "connectivitymeasure (class in nilearn.connectome)": [[185, "nilearn.connectome.ConnectivityMeasure"]], "__init__() (nilearn.connectome.connectivitymeasure method)": [[185, "nilearn.connectome.ConnectivityMeasure.__init__"]], "fit() (nilearn.connectome.connectivitymeasure method)": [[185, "nilearn.connectome.ConnectivityMeasure.fit"]], "fit_transform() (nilearn.connectome.connectivitymeasure method)": [[185, "nilearn.connectome.ConnectivityMeasure.fit_transform"]], "get_metadata_routing() (nilearn.connectome.connectivitymeasure method)": [[185, "nilearn.connectome.ConnectivityMeasure.get_metadata_routing"]], "get_params() (nilearn.connectome.connectivitymeasure method)": [[185, "nilearn.connectome.ConnectivityMeasure.get_params"]], "inverse_transform() (nilearn.connectome.connectivitymeasure method)": [[185, "nilearn.connectome.ConnectivityMeasure.inverse_transform"]], "set_inverse_transform_request() (nilearn.connectome.connectivitymeasure method)": [[185, "nilearn.connectome.ConnectivityMeasure.set_inverse_transform_request"]], "set_output() (nilearn.connectome.connectivitymeasure method)": [[185, "nilearn.connectome.ConnectivityMeasure.set_output"]], "set_params() (nilearn.connectome.connectivitymeasure method)": [[185, "nilearn.connectome.ConnectivityMeasure.set_params"]], "set_transform_request() (nilearn.connectome.connectivitymeasure method)": [[185, "nilearn.connectome.ConnectivityMeasure.set_transform_request"]], "transform() (nilearn.connectome.connectivitymeasure method)": [[185, "nilearn.connectome.ConnectivityMeasure.transform"]], "groupsparsecovariance (class in nilearn.connectome)": [[186, "nilearn.connectome.GroupSparseCovariance"]], "__init__() (nilearn.connectome.groupsparsecovariance method)": [[186, "nilearn.connectome.GroupSparseCovariance.__init__"]], "fit() (nilearn.connectome.groupsparsecovariance method)": [[186, "nilearn.connectome.GroupSparseCovariance.fit"]], "get_metadata_routing() (nilearn.connectome.groupsparsecovariance method)": [[186, "nilearn.connectome.GroupSparseCovariance.get_metadata_routing"]], "get_params() (nilearn.connectome.groupsparsecovariance method)": [[186, "nilearn.connectome.GroupSparseCovariance.get_params"]], "set_fit_request() (nilearn.connectome.groupsparsecovariance method)": [[186, "nilearn.connectome.GroupSparseCovariance.set_fit_request"]], "set_params() (nilearn.connectome.groupsparsecovariance method)": [[186, "nilearn.connectome.GroupSparseCovariance.set_params"]], "groupsparsecovariancecv (class in nilearn.connectome)": [[187, "nilearn.connectome.GroupSparseCovarianceCV"]], "__init__() (nilearn.connectome.groupsparsecovariancecv method)": [[187, "nilearn.connectome.GroupSparseCovarianceCV.__init__"]], "fit() (nilearn.connectome.groupsparsecovariancecv method)": [[187, "nilearn.connectome.GroupSparseCovarianceCV.fit"]], "get_metadata_routing() (nilearn.connectome.groupsparsecovariancecv method)": [[187, "nilearn.connectome.GroupSparseCovarianceCV.get_metadata_routing"]], "get_params() (nilearn.connectome.groupsparsecovariancecv method)": [[187, "nilearn.connectome.GroupSparseCovarianceCV.get_params"]], "set_fit_request() (nilearn.connectome.groupsparsecovariancecv method)": [[187, "nilearn.connectome.GroupSparseCovarianceCV.set_fit_request"]], "set_params() (nilearn.connectome.groupsparsecovariancecv method)": [[187, "nilearn.connectome.GroupSparseCovarianceCV.set_params"]], "cov_to_corr() (in module nilearn.connectome)": [[188, "nilearn.connectome.cov_to_corr"]], "group_sparse_covariance() (in module nilearn.connectome)": [[189, "nilearn.connectome.group_sparse_covariance"]], "prec_to_partial() (in module nilearn.connectome)": [[190, "nilearn.connectome.prec_to_partial"]], "sym_matrix_to_vec() (in module nilearn.connectome)": [[191, "nilearn.connectome.sym_matrix_to_vec"]], "vec_to_sym_matrix() (in module nilearn.connectome)": [[192, "nilearn.connectome.vec_to_sym_matrix"]], "fetch_abide_pcp() (in module nilearn.datasets)": [[193, "nilearn.datasets.fetch_abide_pcp"]], "fetch_adhd() (in module nilearn.datasets)": [[194, "nilearn.datasets.fetch_adhd"]], "fetch_atlas_aal() (in module nilearn.datasets)": [[195, "nilearn.datasets.fetch_atlas_aal"]], "fetch_atlas_allen_2011() (in module nilearn.datasets)": [[196, "nilearn.datasets.fetch_atlas_allen_2011"]], "fetch_atlas_basc_multiscale_2015() (in module nilearn.datasets)": [[197, "nilearn.datasets.fetch_atlas_basc_multiscale_2015"]], "fetch_atlas_craddock_2012() (in module nilearn.datasets)": [[198, "nilearn.datasets.fetch_atlas_craddock_2012"]], "fetch_atlas_destrieux_2009() (in module nilearn.datasets)": [[199, "nilearn.datasets.fetch_atlas_destrieux_2009"]], "fetch_atlas_difumo() (in module nilearn.datasets)": [[200, "nilearn.datasets.fetch_atlas_difumo"]], "fetch_atlas_harvard_oxford() (in module nilearn.datasets)": [[201, "nilearn.datasets.fetch_atlas_harvard_oxford"]], "fetch_atlas_juelich() (in module nilearn.datasets)": [[202, "nilearn.datasets.fetch_atlas_juelich"]], "fetch_atlas_msdl() (in module nilearn.datasets)": [[203, "nilearn.datasets.fetch_atlas_msdl"]], "fetch_atlas_pauli_2017() (in module nilearn.datasets)": [[204, "nilearn.datasets.fetch_atlas_pauli_2017"]], "fetch_atlas_schaefer_2018() (in module nilearn.datasets)": [[205, "nilearn.datasets.fetch_atlas_schaefer_2018"]], "fetch_atlas_smith_2009() (in module nilearn.datasets)": [[206, "nilearn.datasets.fetch_atlas_smith_2009"]], "fetch_atlas_surf_destrieux() (in module nilearn.datasets)": [[207, "nilearn.datasets.fetch_atlas_surf_destrieux"]], "fetch_atlas_talairach() (in module nilearn.datasets)": [[208, "nilearn.datasets.fetch_atlas_talairach"]], "fetch_atlas_yeo_2011() (in module nilearn.datasets)": [[209, "nilearn.datasets.fetch_atlas_yeo_2011"]], "fetch_bids_langloc_dataset() (in module nilearn.datasets)": [[210, "nilearn.datasets.fetch_bids_langloc_dataset"]], "fetch_coords_dosenbach_2010() (in module nilearn.datasets)": [[211, "nilearn.datasets.fetch_coords_dosenbach_2010"]], "fetch_coords_power_2011() (in module nilearn.datasets)": [[212, "nilearn.datasets.fetch_coords_power_2011"]], "fetch_coords_seitzman_2018() (in module nilearn.datasets)": [[213, "nilearn.datasets.fetch_coords_seitzman_2018"]], "fetch_development_fmri() (in module nilearn.datasets)": [[214, "nilearn.datasets.fetch_development_fmri"]], "fetch_ds000030_urls() (in module nilearn.datasets)": [[215, "nilearn.datasets.fetch_ds000030_urls"]], "fetch_fiac_first_level() (in module nilearn.datasets)": [[216, "nilearn.datasets.fetch_fiac_first_level"]], "fetch_haxby() (in module nilearn.datasets)": [[217, "nilearn.datasets.fetch_haxby"]], "fetch_icbm152_2009() (in module nilearn.datasets)": [[218, "nilearn.datasets.fetch_icbm152_2009"]], "fetch_icbm152_brain_gm_mask() (in module nilearn.datasets)": [[219, "nilearn.datasets.fetch_icbm152_brain_gm_mask"]], "fetch_language_localizer_demo_dataset() (in module nilearn.datasets)": [[220, "nilearn.datasets.fetch_language_localizer_demo_dataset"]], "fetch_localizer_button_task() (in module nilearn.datasets)": [[221, "nilearn.datasets.fetch_localizer_button_task"]], "fetch_localizer_calculation_task() (in module nilearn.datasets)": [[222, "nilearn.datasets.fetch_localizer_calculation_task"]], "fetch_localizer_contrasts() (in module nilearn.datasets)": [[223, "nilearn.datasets.fetch_localizer_contrasts"]], "fetch_localizer_first_level() (in module nilearn.datasets)": [[224, "nilearn.datasets.fetch_localizer_first_level"]], "fetch_megatrawls_netmats() (in module nilearn.datasets)": [[225, "nilearn.datasets.fetch_megatrawls_netmats"]], "fetch_mixed_gambles() (in module nilearn.datasets)": [[226, "nilearn.datasets.fetch_mixed_gambles"]], "fetch_miyawaki2008() (in module nilearn.datasets)": [[227, "nilearn.datasets.fetch_miyawaki2008"]], "fetch_neurovault() (in module nilearn.datasets)": [[228, "nilearn.datasets.fetch_neurovault"]], "fetch_neurovault_auditory_computation_task() (in module nilearn.datasets)": [[229, "nilearn.datasets.fetch_neurovault_auditory_computation_task"]], "fetch_neurovault_ids() (in module nilearn.datasets)": [[230, "nilearn.datasets.fetch_neurovault_ids"]], "fetch_neurovault_motor_task() (in module nilearn.datasets)": [[231, "nilearn.datasets.fetch_neurovault_motor_task"]], "fetch_oasis_vbm() (in module nilearn.datasets)": [[232, "nilearn.datasets.fetch_oasis_vbm"]], "fetch_openneuro_dataset() (in module nilearn.datasets)": [[233, "nilearn.datasets.fetch_openneuro_dataset"]], "fetch_openneuro_dataset_index() (in module nilearn.datasets)": [[234, "nilearn.datasets.fetch_openneuro_dataset_index"]], "fetch_spm_auditory() (in module nilearn.datasets)": [[235, "nilearn.datasets.fetch_spm_auditory"]], "fetch_spm_multimodal_fmri() (in module nilearn.datasets)": [[236, "nilearn.datasets.fetch_spm_multimodal_fmri"]], "fetch_surf_fsaverage() (in module nilearn.datasets)": [[237, "nilearn.datasets.fetch_surf_fsaverage"]], "fetch_surf_nki_enhanced() (in module nilearn.datasets)": [[238, "nilearn.datasets.fetch_surf_nki_enhanced"]], "get_data_dirs() (in module nilearn.datasets)": [[239, "nilearn.datasets.get_data_dirs"]], "load_mni152_brain_mask() (in module nilearn.datasets)": [[240, "nilearn.datasets.load_mni152_brain_mask"]], "load_mni152_gm_mask() (in module nilearn.datasets)": [[241, "nilearn.datasets.load_mni152_gm_mask"]], "load_mni152_gm_template() (in module nilearn.datasets)": [[242, "nilearn.datasets.load_mni152_gm_template"]], "load_mni152_template() (in module nilearn.datasets)": [[243, "nilearn.datasets.load_mni152_template"]], "load_mni152_wm_mask() (in module nilearn.datasets)": [[244, "nilearn.datasets.load_mni152_wm_mask"]], "load_mni152_wm_template() (in module nilearn.datasets)": [[245, "nilearn.datasets.load_mni152_wm_template"]], "load_sample_motor_activation_image() (in module nilearn.datasets)": [[246, "nilearn.datasets.load_sample_motor_activation_image"]], "patch_openneuro_dataset() (in module nilearn.datasets)": [[247, "nilearn.datasets.patch_openneuro_dataset"]], "select_from_index() (in module nilearn.datasets)": [[248, "nilearn.datasets.select_from_index"]], "decoder (class in nilearn.decoding)": [[249, "nilearn.decoding.Decoder"]], "__init__() (nilearn.decoding.decoder method)": [[249, "nilearn.decoding.Decoder.__init__"]], "decision_function() (nilearn.decoding.decoder method)": [[249, "nilearn.decoding.Decoder.decision_function"]], "fit() (nilearn.decoding.decoder method)": [[249, "nilearn.decoding.Decoder.fit"]], "get_metadata_routing() (nilearn.decoding.decoder method)": [[249, "nilearn.decoding.Decoder.get_metadata_routing"]], "get_params() (nilearn.decoding.decoder method)": [[249, "nilearn.decoding.Decoder.get_params"]], "predict() (nilearn.decoding.decoder method)": [[249, "nilearn.decoding.Decoder.predict"]], "score() (nilearn.decoding.decoder method)": [[249, "nilearn.decoding.Decoder.score"]], "set_fit_request() (nilearn.decoding.decoder method)": [[249, "nilearn.decoding.Decoder.set_fit_request"]], "set_params() (nilearn.decoding.decoder method)": [[249, "nilearn.decoding.Decoder.set_params"]], "set_score_request() (nilearn.decoding.decoder method)": [[249, "nilearn.decoding.Decoder.set_score_request"]], "decoderregressor (class in nilearn.decoding)": [[250, "nilearn.decoding.DecoderRegressor"]], "__init__() (nilearn.decoding.decoderregressor method)": [[250, "nilearn.decoding.DecoderRegressor.__init__"]], "decision_function() (nilearn.decoding.decoderregressor method)": [[250, "nilearn.decoding.DecoderRegressor.decision_function"]], "fit() (nilearn.decoding.decoderregressor method)": [[250, "nilearn.decoding.DecoderRegressor.fit"]], "get_metadata_routing() (nilearn.decoding.decoderregressor method)": [[250, "nilearn.decoding.DecoderRegressor.get_metadata_routing"]], "get_params() (nilearn.decoding.decoderregressor method)": [[250, "nilearn.decoding.DecoderRegressor.get_params"]], "predict() (nilearn.decoding.decoderregressor method)": [[250, "nilearn.decoding.DecoderRegressor.predict"]], "score() (nilearn.decoding.decoderregressor method)": [[250, "nilearn.decoding.DecoderRegressor.score"]], "set_fit_request() (nilearn.decoding.decoderregressor method)": [[250, "nilearn.decoding.DecoderRegressor.set_fit_request"]], "set_params() (nilearn.decoding.decoderregressor method)": [[250, "nilearn.decoding.DecoderRegressor.set_params"]], "set_score_request() (nilearn.decoding.decoderregressor method)": [[250, "nilearn.decoding.DecoderRegressor.set_score_request"]], "fremclassifier (class in nilearn.decoding)": [[251, "nilearn.decoding.FREMClassifier"]], "__init__() (nilearn.decoding.fremclassifier method)": [[251, "nilearn.decoding.FREMClassifier.__init__"]], "decision_function() (nilearn.decoding.fremclassifier method)": [[251, "nilearn.decoding.FREMClassifier.decision_function"]], "fit() (nilearn.decoding.fremclassifier method)": [[251, "nilearn.decoding.FREMClassifier.fit"]], "get_metadata_routing() (nilearn.decoding.fremclassifier method)": [[251, "nilearn.decoding.FREMClassifier.get_metadata_routing"]], "get_params() (nilearn.decoding.fremclassifier method)": [[251, "nilearn.decoding.FREMClassifier.get_params"]], "predict() (nilearn.decoding.fremclassifier method)": [[251, "nilearn.decoding.FREMClassifier.predict"]], "score() (nilearn.decoding.fremclassifier method)": [[251, "nilearn.decoding.FREMClassifier.score"]], "set_fit_request() (nilearn.decoding.fremclassifier method)": [[251, "nilearn.decoding.FREMClassifier.set_fit_request"]], "set_params() (nilearn.decoding.fremclassifier method)": [[251, "nilearn.decoding.FREMClassifier.set_params"]], "set_score_request() (nilearn.decoding.fremclassifier method)": [[251, "nilearn.decoding.FREMClassifier.set_score_request"]], "fremregressor (class in nilearn.decoding)": [[252, "nilearn.decoding.FREMRegressor"]], "__init__() (nilearn.decoding.fremregressor method)": [[252, "nilearn.decoding.FREMRegressor.__init__"]], "decision_function() (nilearn.decoding.fremregressor method)": [[252, "nilearn.decoding.FREMRegressor.decision_function"]], "fit() (nilearn.decoding.fremregressor method)": [[252, "nilearn.decoding.FREMRegressor.fit"]], "get_metadata_routing() (nilearn.decoding.fremregressor method)": [[252, "nilearn.decoding.FREMRegressor.get_metadata_routing"]], "get_params() (nilearn.decoding.fremregressor method)": [[252, "nilearn.decoding.FREMRegressor.get_params"]], "predict() (nilearn.decoding.fremregressor method)": [[252, "nilearn.decoding.FREMRegressor.predict"]], "score() (nilearn.decoding.fremregressor method)": [[252, "nilearn.decoding.FREMRegressor.score"]], "set_fit_request() (nilearn.decoding.fremregressor method)": [[252, "nilearn.decoding.FREMRegressor.set_fit_request"]], "set_params() (nilearn.decoding.fremregressor method)": [[252, "nilearn.decoding.FREMRegressor.set_params"]], "set_score_request() (nilearn.decoding.fremregressor method)": [[252, "nilearn.decoding.FREMRegressor.set_score_request"]], "searchlight (class in nilearn.decoding)": [[253, "nilearn.decoding.SearchLight"]], "__init__() (nilearn.decoding.searchlight method)": [[253, "nilearn.decoding.SearchLight.__init__"]], "fit() (nilearn.decoding.searchlight method)": [[253, "nilearn.decoding.SearchLight.fit"]], "get_metadata_routing() (nilearn.decoding.searchlight method)": [[253, "nilearn.decoding.SearchLight.get_metadata_routing"]], "get_params() (nilearn.decoding.searchlight method)": [[253, "nilearn.decoding.SearchLight.get_params"]], "set_fit_request() (nilearn.decoding.searchlight method)": [[253, "nilearn.decoding.SearchLight.set_fit_request"]], "set_params() (nilearn.decoding.searchlight method)": [[253, "nilearn.decoding.SearchLight.set_params"]], "supported_losses (nilearn.decoding.spacenetclassifier attribute)": [[254, "nilearn.decoding.SpaceNetClassifier.SUPPORTED_LOSSES"]], "supported_penalties (nilearn.decoding.spacenetclassifier attribute)": [[254, "nilearn.decoding.SpaceNetClassifier.SUPPORTED_PENALTIES"]], "spacenetclassifier (class in nilearn.decoding)": [[254, "nilearn.decoding.SpaceNetClassifier"]], "__init__() (nilearn.decoding.spacenetclassifier method)": [[254, "nilearn.decoding.SpaceNetClassifier.__init__"]], "check_params() (nilearn.decoding.spacenetclassifier method)": [[254, "nilearn.decoding.SpaceNetClassifier.check_params"]], "decision_function() (nilearn.decoding.spacenetclassifier method)": [[254, "nilearn.decoding.SpaceNetClassifier.decision_function"]], "fit() (nilearn.decoding.spacenetclassifier method)": [[254, "nilearn.decoding.SpaceNetClassifier.fit"]], "get_metadata_routing() (nilearn.decoding.spacenetclassifier method)": [[254, "nilearn.decoding.SpaceNetClassifier.get_metadata_routing"]], "get_params() (nilearn.decoding.spacenetclassifier method)": [[254, "nilearn.decoding.SpaceNetClassifier.get_params"]], "predict() (nilearn.decoding.spacenetclassifier method)": [[254, "nilearn.decoding.SpaceNetClassifier.predict"]], "score() (nilearn.decoding.spacenetclassifier method)": [[254, "nilearn.decoding.SpaceNetClassifier.score"]], "set_fit_request() (nilearn.decoding.spacenetclassifier method)": [[254, "nilearn.decoding.SpaceNetClassifier.set_fit_request"]], "set_params() (nilearn.decoding.spacenetclassifier method)": [[254, "nilearn.decoding.SpaceNetClassifier.set_params"]], "set_score_request() (nilearn.decoding.spacenetclassifier method)": [[254, "nilearn.decoding.SpaceNetClassifier.set_score_request"]], "supported_losses (nilearn.decoding.spacenetregressor attribute)": [[255, "nilearn.decoding.SpaceNetRegressor.SUPPORTED_LOSSES"]], "supported_penalties (nilearn.decoding.spacenetregressor attribute)": [[255, "nilearn.decoding.SpaceNetRegressor.SUPPORTED_PENALTIES"]], "spacenetregressor (class in nilearn.decoding)": [[255, "nilearn.decoding.SpaceNetRegressor"]], "__init__() (nilearn.decoding.spacenetregressor method)": [[255, "nilearn.decoding.SpaceNetRegressor.__init__"]], "check_params() (nilearn.decoding.spacenetregressor method)": [[255, "nilearn.decoding.SpaceNetRegressor.check_params"]], "decision_function() (nilearn.decoding.spacenetregressor method)": [[255, "nilearn.decoding.SpaceNetRegressor.decision_function"]], "fit() (nilearn.decoding.spacenetregressor method)": [[255, "nilearn.decoding.SpaceNetRegressor.fit"]], "get_metadata_routing() (nilearn.decoding.spacenetregressor method)": [[255, "nilearn.decoding.SpaceNetRegressor.get_metadata_routing"]], "get_params() (nilearn.decoding.spacenetregressor method)": [[255, "nilearn.decoding.SpaceNetRegressor.get_params"]], "predict() (nilearn.decoding.spacenetregressor method)": [[255, "nilearn.decoding.SpaceNetRegressor.predict"]], "score() (nilearn.decoding.spacenetregressor method)": [[255, "nilearn.decoding.SpaceNetRegressor.score"]], "set_fit_request() (nilearn.decoding.spacenetregressor method)": [[255, "nilearn.decoding.SpaceNetRegressor.set_fit_request"]], "set_params() (nilearn.decoding.spacenetregressor method)": [[255, "nilearn.decoding.SpaceNetRegressor.set_params"]], "set_score_request() (nilearn.decoding.spacenetregressor method)": [[255, "nilearn.decoding.SpaceNetRegressor.set_score_request"]], "canica (class in nilearn.decomposition)": [[256, "nilearn.decomposition.CanICA"]], "__init__() (nilearn.decomposition.canica method)": [[256, "nilearn.decomposition.CanICA.__init__"]], "fit() (nilearn.decomposition.canica method)": [[256, "nilearn.decomposition.CanICA.fit"]], "fit_transform() (nilearn.decomposition.canica method)": [[256, "nilearn.decomposition.CanICA.fit_transform"]], "get_metadata_routing() (nilearn.decomposition.canica method)": [[256, "nilearn.decomposition.CanICA.get_metadata_routing"]], "get_params() (nilearn.decomposition.canica method)": [[256, "nilearn.decomposition.CanICA.get_params"]], "inverse_transform() (nilearn.decomposition.canica method)": [[256, "nilearn.decomposition.CanICA.inverse_transform"]], "score() (nilearn.decomposition.canica method)": [[256, "nilearn.decomposition.CanICA.score"]], "set_fit_request() (nilearn.decomposition.canica method)": [[256, "nilearn.decomposition.CanICA.set_fit_request"]], "set_inverse_transform_request() (nilearn.decomposition.canica method)": [[256, "nilearn.decomposition.CanICA.set_inverse_transform_request"]], "set_output() (nilearn.decomposition.canica method)": [[256, "nilearn.decomposition.CanICA.set_output"]], "set_params() (nilearn.decomposition.canica method)": [[256, "nilearn.decomposition.CanICA.set_params"]], "set_score_request() (nilearn.decomposition.canica method)": [[256, "nilearn.decomposition.CanICA.set_score_request"]], "set_transform_request() (nilearn.decomposition.canica method)": [[256, "nilearn.decomposition.CanICA.set_transform_request"]], "transform() (nilearn.decomposition.canica method)": [[256, "nilearn.decomposition.CanICA.transform"]], "dictlearning (class in nilearn.decomposition)": [[257, "nilearn.decomposition.DictLearning"]], "__init__() (nilearn.decomposition.dictlearning method)": [[257, "nilearn.decomposition.DictLearning.__init__"]], "fit() (nilearn.decomposition.dictlearning method)": [[257, "nilearn.decomposition.DictLearning.fit"]], "fit_transform() (nilearn.decomposition.dictlearning method)": [[257, "nilearn.decomposition.DictLearning.fit_transform"]], "get_metadata_routing() (nilearn.decomposition.dictlearning method)": [[257, "nilearn.decomposition.DictLearning.get_metadata_routing"]], "get_params() (nilearn.decomposition.dictlearning method)": [[257, "nilearn.decomposition.DictLearning.get_params"]], "inverse_transform() (nilearn.decomposition.dictlearning method)": [[257, "nilearn.decomposition.DictLearning.inverse_transform"]], "score() (nilearn.decomposition.dictlearning method)": [[257, "nilearn.decomposition.DictLearning.score"]], "set_fit_request() (nilearn.decomposition.dictlearning method)": [[257, "nilearn.decomposition.DictLearning.set_fit_request"]], "set_inverse_transform_request() (nilearn.decomposition.dictlearning method)": [[257, "nilearn.decomposition.DictLearning.set_inverse_transform_request"]], "set_output() (nilearn.decomposition.dictlearning method)": [[257, "nilearn.decomposition.DictLearning.set_output"]], "set_params() (nilearn.decomposition.dictlearning method)": [[257, "nilearn.decomposition.DictLearning.set_params"]], "set_score_request() (nilearn.decomposition.dictlearning method)": [[257, "nilearn.decomposition.DictLearning.set_score_request"]], "set_transform_request() (nilearn.decomposition.dictlearning method)": [[257, "nilearn.decomposition.DictLearning.set_transform_request"]], "transform() (nilearn.decomposition.dictlearning method)": [[257, "nilearn.decomposition.DictLearning.transform"]], "filemesh (class in nilearn.experimental.surface)": [[258, "nilearn.experimental.surface.FileMesh"]], "__init__() (nilearn.experimental.surface.filemesh method)": [[258, "nilearn.experimental.surface.FileMesh.__init__"]], "coordinates (nilearn.experimental.surface.filemesh property)": [[258, "nilearn.experimental.surface.FileMesh.coordinates"]], "faces (nilearn.experimental.surface.filemesh property)": [[258, "nilearn.experimental.surface.FileMesh.faces"]], "file_path (nilearn.experimental.surface.filemesh attribute)": [[258, "nilearn.experimental.surface.FileMesh.file_path"]], "loaded() (nilearn.experimental.surface.filemesh method)": [[258, "nilearn.experimental.surface.FileMesh.loaded"]], "n_vertices (nilearn.experimental.surface.filemesh attribute)": [[258, "nilearn.experimental.surface.FileMesh.n_vertices"]], "to_gifti() (nilearn.experimental.surface.filemesh method)": [[258, "nilearn.experimental.surface.FileMesh.to_gifti"]], "inmemorymesh (class in nilearn.experimental.surface)": [[259, "nilearn.experimental.surface.InMemoryMesh"]], "__init__() (nilearn.experimental.surface.inmemorymesh method)": [[259, "nilearn.experimental.surface.InMemoryMesh.__init__"]], "coordinates (nilearn.experimental.surface.inmemorymesh attribute)": [[259, "nilearn.experimental.surface.InMemoryMesh.coordinates"]], "faces (nilearn.experimental.surface.inmemorymesh attribute)": [[259, "nilearn.experimental.surface.InMemoryMesh.faces"]], "n_vertices (nilearn.experimental.surface.inmemorymesh attribute)": [[259, "nilearn.experimental.surface.InMemoryMesh.n_vertices"]], "to_gifti() (nilearn.experimental.surface.inmemorymesh method)": [[259, "nilearn.experimental.surface.InMemoryMesh.to_gifti"]], "mesh (class in nilearn.experimental.surface)": [[260, "nilearn.experimental.surface.Mesh"]], "__init__() (nilearn.experimental.surface.mesh method)": [[260, "nilearn.experimental.surface.Mesh.__init__"]], "coordinates (nilearn.experimental.surface.mesh attribute)": [[260, "nilearn.experimental.surface.Mesh.coordinates"]], "faces (nilearn.experimental.surface.mesh attribute)": [[260, "nilearn.experimental.surface.Mesh.faces"]], "n_vertices (nilearn.experimental.surface.mesh attribute)": [[260, "nilearn.experimental.surface.Mesh.n_vertices"]], "to_gifti() (nilearn.experimental.surface.mesh method)": [[260, "nilearn.experimental.surface.Mesh.to_gifti"]], "polymesh (in module nilearn.experimental.surface)": [[261, "nilearn.experimental.surface.PolyMesh"]], "surfaceimage (class in nilearn.experimental.surface)": [[262, "nilearn.experimental.surface.SurfaceImage"]], "__init__() (nilearn.experimental.surface.surfaceimage method)": [[262, "nilearn.experimental.surface.SurfaceImage.__init__"]], "data (nilearn.experimental.surface.surfaceimage attribute)": [[262, "nilearn.experimental.surface.SurfaceImage.data"]], "mesh (nilearn.experimental.surface.surfaceimage attribute)": [[262, "nilearn.experimental.surface.SurfaceImage.mesh"]], "shape (nilearn.experimental.surface.surfaceimage attribute)": [[262, "nilearn.experimental.surface.SurfaceImage.shape"]], "surfacelabelsmasker (class in nilearn.experimental.surface)": [[263, "nilearn.experimental.surface.SurfaceLabelsMasker"]], "__init__() (nilearn.experimental.surface.surfacelabelsmasker method)": [[263, "nilearn.experimental.surface.SurfaceLabelsMasker.__init__"]], "fit() (nilearn.experimental.surface.surfacelabelsmasker method)": [[263, "nilearn.experimental.surface.SurfaceLabelsMasker.fit"]], "fit_transform() (nilearn.experimental.surface.surfacelabelsmasker method)": [[263, "nilearn.experimental.surface.SurfaceLabelsMasker.fit_transform"]], "inverse_transform() (nilearn.experimental.surface.surfacelabelsmasker method)": [[263, "nilearn.experimental.surface.SurfaceLabelsMasker.inverse_transform"]], "label_names (nilearn.experimental.surface.surfacelabelsmasker attribute)": [[263, "nilearn.experimental.surface.SurfaceLabelsMasker.label_names"]], "label_names_ (nilearn.experimental.surface.surfacelabelsmasker attribute)": [[263, "nilearn.experimental.surface.SurfaceLabelsMasker.label_names_"]], "labels_ (nilearn.experimental.surface.surfacelabelsmasker attribute)": [[263, "nilearn.experimental.surface.SurfaceLabelsMasker.labels_"]], "labels_data_ (nilearn.experimental.surface.surfacelabelsmasker attribute)": [[263, "nilearn.experimental.surface.SurfaceLabelsMasker.labels_data_"]], "labels_img (nilearn.experimental.surface.surfacelabelsmasker attribute)": [[263, "nilearn.experimental.surface.SurfaceLabelsMasker.labels_img"]], "transform() (nilearn.experimental.surface.surfacelabelsmasker method)": [[263, "nilearn.experimental.surface.SurfaceLabelsMasker.transform"]], "surfacemasker (class in nilearn.experimental.surface)": [[264, "nilearn.experimental.surface.SurfaceMasker"]], "__init__() (nilearn.experimental.surface.surfacemasker method)": [[264, "nilearn.experimental.surface.SurfaceMasker.__init__"]], "fit() (nilearn.experimental.surface.surfacemasker method)": [[264, "nilearn.experimental.surface.SurfaceMasker.fit"]], "fit_transform() (nilearn.experimental.surface.surfacemasker method)": [[264, "nilearn.experimental.surface.SurfaceMasker.fit_transform"]], "inverse_transform() (nilearn.experimental.surface.surfacemasker method)": [[264, "nilearn.experimental.surface.SurfaceMasker.inverse_transform"]], "mask_img (nilearn.experimental.surface.surfacemasker attribute)": [[264, "nilearn.experimental.surface.SurfaceMasker.mask_img"]], "mask_img_ (nilearn.experimental.surface.surfacemasker attribute)": [[264, "nilearn.experimental.surface.SurfaceMasker.mask_img_"]], "output_dimension_ (nilearn.experimental.surface.surfacemasker attribute)": [[264, "nilearn.experimental.surface.SurfaceMasker.output_dimension_"]], "transform() (nilearn.experimental.surface.surfacemasker method)": [[264, "nilearn.experimental.surface.SurfaceMasker.transform"]], "fetch_destrieux() (in module nilearn.experimental.surface)": [[265, "nilearn.experimental.surface.fetch_destrieux"]], "fetch_nki() (in module nilearn.experimental.surface)": [[266, "nilearn.experimental.surface.fetch_nki"]], "load_fsaverage() (in module nilearn.experimental.surface)": [[267, "nilearn.experimental.surface.load_fsaverage"]], "armodel (class in nilearn.glm)": [[268, "nilearn.glm.ARModel"]], "__init__() (nilearn.glm.armodel method)": [[268, "nilearn.glm.ARModel.__init__"]], "fit() (nilearn.glm.armodel method)": [[268, "nilearn.glm.ARModel.fit"]], "initialize() (nilearn.glm.armodel method)": [[268, "nilearn.glm.ARModel.initialize"]], "logl() (nilearn.glm.armodel method)": [[268, "nilearn.glm.ARModel.logL"]], "whiten() (nilearn.glm.armodel method)": [[268, "nilearn.glm.ARModel.whiten"]], "contrast (class in nilearn.glm)": [[269, "nilearn.glm.Contrast"]], "__init__() (nilearn.glm.contrast method)": [[269, "nilearn.glm.Contrast.__init__"]], "effect_size() (nilearn.glm.contrast method)": [[269, "nilearn.glm.Contrast.effect_size"]], "effect_variance() (nilearn.glm.contrast method)": [[269, "nilearn.glm.Contrast.effect_variance"]], "one_minus_pvalue() (nilearn.glm.contrast method)": [[269, "nilearn.glm.Contrast.one_minus_pvalue"]], "p_value() (nilearn.glm.contrast method)": [[269, "nilearn.glm.Contrast.p_value"]], "stat() (nilearn.glm.contrast method)": [[269, "nilearn.glm.Contrast.stat"]], "z_score() (nilearn.glm.contrast method)": [[269, "nilearn.glm.Contrast.z_score"]], "fcontrastresults (class in nilearn.glm)": [[270, "nilearn.glm.FContrastResults"]], "__init__() (nilearn.glm.fcontrastresults method)": [[270, "nilearn.glm.FContrastResults.__init__"]], "fcontrast() (nilearn.glm.likelihoodmodelresults method)": [[271, "nilearn.glm.LikelihoodModelResults.Fcontrast"]], "likelihoodmodelresults (class in nilearn.glm)": [[271, "nilearn.glm.LikelihoodModelResults"]], "tcontrast() (nilearn.glm.likelihoodmodelresults method)": [[271, "nilearn.glm.LikelihoodModelResults.Tcontrast"]], "__init__() (nilearn.glm.likelihoodmodelresults method)": [[271, "nilearn.glm.LikelihoodModelResults.__init__"]], "conf_int() (nilearn.glm.likelihoodmodelresults method)": [[271, "nilearn.glm.LikelihoodModelResults.conf_int"]], "logl() (nilearn.glm.likelihoodmodelresults method)": [[271, "nilearn.glm.LikelihoodModelResults.logL"]], "t() (nilearn.glm.likelihoodmodelresults method)": [[271, "nilearn.glm.LikelihoodModelResults.t"]], "vcov() (nilearn.glm.likelihoodmodelresults method)": [[271, "nilearn.glm.LikelihoodModelResults.vcov"]], "olsmodel (class in nilearn.glm)": [[272, "nilearn.glm.OLSModel"]], "__init__() (nilearn.glm.olsmodel method)": [[272, "nilearn.glm.OLSModel.__init__"]], "fit() (nilearn.glm.olsmodel method)": [[272, "nilearn.glm.OLSModel.fit"]], "initialize() (nilearn.glm.olsmodel method)": [[272, "nilearn.glm.OLSModel.initialize"]], "logl() (nilearn.glm.olsmodel method)": [[272, "nilearn.glm.OLSModel.logL"]], "whiten() (nilearn.glm.olsmodel method)": [[272, "nilearn.glm.OLSModel.whiten"]], "fcontrast() (nilearn.glm.regressionresults method)": [[273, "nilearn.glm.RegressionResults.Fcontrast"]], "mse() (nilearn.glm.regressionresults method)": [[273, "nilearn.glm.RegressionResults.MSE"]], "regressionresults (class in nilearn.glm)": [[273, "nilearn.glm.RegressionResults"]], "sse() (nilearn.glm.regressionresults method)": [[273, "nilearn.glm.RegressionResults.SSE"]], "tcontrast() (nilearn.glm.regressionresults method)": [[273, "nilearn.glm.RegressionResults.Tcontrast"]], "__init__() (nilearn.glm.regressionresults method)": [[273, "nilearn.glm.RegressionResults.__init__"]], "conf_int() (nilearn.glm.regressionresults method)": [[273, "nilearn.glm.RegressionResults.conf_int"]], "logl() (nilearn.glm.regressionresults method)": [[273, "nilearn.glm.RegressionResults.logL"]], "normalized_residuals() (nilearn.glm.regressionresults method)": [[273, "nilearn.glm.RegressionResults.normalized_residuals"]], "predicted() (nilearn.glm.regressionresults method)": [[273, "nilearn.glm.RegressionResults.predicted"]], "r_square() (nilearn.glm.regressionresults method)": [[273, "nilearn.glm.RegressionResults.r_square"]], "residuals() (nilearn.glm.regressionresults method)": [[273, "nilearn.glm.RegressionResults.residuals"]], "t() (nilearn.glm.regressionresults method)": [[273, "nilearn.glm.RegressionResults.t"]], "vcov() (nilearn.glm.regressionresults method)": [[273, "nilearn.glm.RegressionResults.vcov"]], "fcontrast() (nilearn.glm.simpleregressionresults method)": [[274, "nilearn.glm.SimpleRegressionResults.Fcontrast"]], "simpleregressionresults (class in nilearn.glm)": [[274, "nilearn.glm.SimpleRegressionResults"]], "tcontrast() (nilearn.glm.simpleregressionresults method)": [[274, "nilearn.glm.SimpleRegressionResults.Tcontrast"]], "__init__() (nilearn.glm.simpleregressionresults method)": [[274, "nilearn.glm.SimpleRegressionResults.__init__"]], "conf_int() (nilearn.glm.simpleregressionresults method)": [[274, "nilearn.glm.SimpleRegressionResults.conf_int"]], "logl() (nilearn.glm.simpleregressionresults method)": [[274, "nilearn.glm.SimpleRegressionResults.logL"]], "normalized_residuals() (nilearn.glm.simpleregressionresults method)": [[274, "nilearn.glm.SimpleRegressionResults.normalized_residuals"]], "predicted() (nilearn.glm.simpleregressionresults method)": [[274, "nilearn.glm.SimpleRegressionResults.predicted"]], "residuals() (nilearn.glm.simpleregressionresults method)": [[274, "nilearn.glm.SimpleRegressionResults.residuals"]], "t() (nilearn.glm.simpleregressionresults method)": [[274, "nilearn.glm.SimpleRegressionResults.t"]], "vcov() (nilearn.glm.simpleregressionresults method)": [[274, "nilearn.glm.SimpleRegressionResults.vcov"]], "tcontrastresults (class in nilearn.glm)": [[275, "nilearn.glm.TContrastResults"]], "__init__() (nilearn.glm.tcontrastresults method)": [[275, "nilearn.glm.TContrastResults.__init__"]], "cluster_level_inference() (in module nilearn.glm)": [[276, "nilearn.glm.cluster_level_inference"]], "compute_contrast() (in module nilearn.glm)": [[277, "nilearn.glm.compute_contrast"]], "compute_fixed_effects() (in module nilearn.glm)": [[278, "nilearn.glm.compute_fixed_effects"]], "expression_to_contrast_vector() (in module nilearn.glm)": [[279, "nilearn.glm.expression_to_contrast_vector"]], "fdr_threshold() (in module nilearn.glm)": [[280, "nilearn.glm.fdr_threshold"]], "firstlevelmodel (class in nilearn.glm.first_level)": [[281, "nilearn.glm.first_level.FirstLevelModel"]], "__init__() (nilearn.glm.first_level.firstlevelmodel method)": [[281, "nilearn.glm.first_level.FirstLevelModel.__init__"]], "compute_contrast() (nilearn.glm.first_level.firstlevelmodel method)": [[281, "nilearn.glm.first_level.FirstLevelModel.compute_contrast"]], "fit() (nilearn.glm.first_level.firstlevelmodel method)": [[281, "nilearn.glm.first_level.FirstLevelModel.fit"]], "fit_transform() (nilearn.glm.first_level.firstlevelmodel method)": [[281, "nilearn.glm.first_level.FirstLevelModel.fit_transform"]], "generate_report() (nilearn.glm.first_level.firstlevelmodel method)": [[281, "nilearn.glm.first_level.FirstLevelModel.generate_report"]], "get_metadata_routing() (nilearn.glm.first_level.firstlevelmodel method)": [[281, "nilearn.glm.first_level.FirstLevelModel.get_metadata_routing"]], "get_params() (nilearn.glm.first_level.firstlevelmodel method)": [[281, "nilearn.glm.first_level.FirstLevelModel.get_params"]], "predicted() (nilearn.glm.first_level.firstlevelmodel method)": [[281, "nilearn.glm.first_level.FirstLevelModel.predicted"]], "r_square() (nilearn.glm.first_level.firstlevelmodel method)": [[281, "nilearn.glm.first_level.FirstLevelModel.r_square"]], "residuals() (nilearn.glm.first_level.firstlevelmodel method)": [[281, "nilearn.glm.first_level.FirstLevelModel.residuals"]], "scaling_axis (nilearn.glm.first_level.firstlevelmodel property)": [[281, "nilearn.glm.first_level.FirstLevelModel.scaling_axis"]], "set_fit_request() (nilearn.glm.first_level.firstlevelmodel method)": [[281, "nilearn.glm.first_level.FirstLevelModel.set_fit_request"]], "set_output() (nilearn.glm.first_level.firstlevelmodel method)": [[281, "nilearn.glm.first_level.FirstLevelModel.set_output"]], "set_params() (nilearn.glm.first_level.firstlevelmodel method)": [[281, "nilearn.glm.first_level.FirstLevelModel.set_params"]], "check_design_matrix() (in module nilearn.glm.first_level)": [[282, "nilearn.glm.first_level.check_design_matrix"]], "compute_regressor() (in module nilearn.glm.first_level)": [[283, "nilearn.glm.first_level.compute_regressor"]], "first_level_from_bids() (in module nilearn.glm.first_level)": [[284, "nilearn.glm.first_level.first_level_from_bids"]], "glover_dispersion_derivative() (in module nilearn.glm.first_level)": [[285, "nilearn.glm.first_level.glover_dispersion_derivative"]], "glover_hrf() (in module nilearn.glm.first_level)": [[286, "nilearn.glm.first_level.glover_hrf"]], "glover_time_derivative() (in module nilearn.glm.first_level)": [[287, "nilearn.glm.first_level.glover_time_derivative"]], "make_first_level_design_matrix() (in module nilearn.glm.first_level)": [[288, "nilearn.glm.first_level.make_first_level_design_matrix"]], "mean_scaling() (in module nilearn.glm.first_level)": [[289, "nilearn.glm.first_level.mean_scaling"]], "run_glm() (in module nilearn.glm.first_level)": [[290, "nilearn.glm.first_level.run_glm"]], "spm_dispersion_derivative() (in module nilearn.glm.first_level)": [[291, "nilearn.glm.first_level.spm_dispersion_derivative"]], "spm_hrf() (in module nilearn.glm.first_level)": [[292, "nilearn.glm.first_level.spm_hrf"]], "spm_time_derivative() (in module nilearn.glm.first_level)": [[293, "nilearn.glm.first_level.spm_time_derivative"]], "secondlevelmodel (class in nilearn.glm.second_level)": [[294, "nilearn.glm.second_level.SecondLevelModel"]], "__init__() (nilearn.glm.second_level.secondlevelmodel method)": [[294, "nilearn.glm.second_level.SecondLevelModel.__init__"]], "compute_contrast() (nilearn.glm.second_level.secondlevelmodel method)": [[294, "nilearn.glm.second_level.SecondLevelModel.compute_contrast"]], "fit() (nilearn.glm.second_level.secondlevelmodel method)": [[294, "nilearn.glm.second_level.SecondLevelModel.fit"]], "fit_transform() (nilearn.glm.second_level.secondlevelmodel method)": [[294, "nilearn.glm.second_level.SecondLevelModel.fit_transform"]], "generate_report() (nilearn.glm.second_level.secondlevelmodel method)": [[294, "nilearn.glm.second_level.SecondLevelModel.generate_report"]], "get_metadata_routing() (nilearn.glm.second_level.secondlevelmodel method)": [[294, "nilearn.glm.second_level.SecondLevelModel.get_metadata_routing"]], "get_params() (nilearn.glm.second_level.secondlevelmodel method)": [[294, "nilearn.glm.second_level.SecondLevelModel.get_params"]], "predicted() (nilearn.glm.second_level.secondlevelmodel method)": [[294, "nilearn.glm.second_level.SecondLevelModel.predicted"]], "r_square() (nilearn.glm.second_level.secondlevelmodel method)": [[294, "nilearn.glm.second_level.SecondLevelModel.r_square"]], "residuals() (nilearn.glm.second_level.secondlevelmodel method)": [[294, "nilearn.glm.second_level.SecondLevelModel.residuals"]], "set_fit_request() (nilearn.glm.second_level.secondlevelmodel method)": [[294, "nilearn.glm.second_level.SecondLevelModel.set_fit_request"]], "set_output() (nilearn.glm.second_level.secondlevelmodel method)": [[294, "nilearn.glm.second_level.SecondLevelModel.set_output"]], "set_params() (nilearn.glm.second_level.secondlevelmodel method)": [[294, "nilearn.glm.second_level.SecondLevelModel.set_params"]], "make_second_level_design_matrix() (in module nilearn.glm.second_level)": [[295, "nilearn.glm.second_level.make_second_level_design_matrix"]], "non_parametric_inference() (in module nilearn.glm.second_level)": [[296, "nilearn.glm.second_level.non_parametric_inference"]], "threshold_stats_img() (in module nilearn.glm)": [[297, "nilearn.glm.threshold_stats_img"]], "binarize_img() (in module nilearn.image)": [[298, "nilearn.image.binarize_img"]], "clean_img() (in module nilearn.image)": [[299, "nilearn.image.clean_img"]], "concat_imgs() (in module nilearn.image)": [[300, "nilearn.image.concat_imgs"]], "coord_transform() (in module nilearn.image)": [[301, "nilearn.image.coord_transform"]], "copy_img() (in module nilearn.image)": [[302, "nilearn.image.copy_img"]], "crop_img() (in module nilearn.image)": [[303, "nilearn.image.crop_img"]], "get_data() (in module nilearn.image)": [[304, "nilearn.image.get_data"]], "high_variance_confounds() (in module nilearn.image)": [[305, "nilearn.image.high_variance_confounds"]], "index_img() (in module nilearn.image)": [[306, "nilearn.image.index_img"]], "iter_img() (in module nilearn.image)": [[307, "nilearn.image.iter_img"]], "largest_connected_component_img() (in module nilearn.image)": [[308, "nilearn.image.largest_connected_component_img"]], "load_img() (in module nilearn.image)": [[309, "nilearn.image.load_img"]], "math_img() (in module nilearn.image)": [[310, "nilearn.image.math_img"]], "mean_img() (in module nilearn.image)": [[311, "nilearn.image.mean_img"]], "new_img_like() (in module nilearn.image)": [[312, "nilearn.image.new_img_like"]], "reorder_img() (in module nilearn.image)": [[313, "nilearn.image.reorder_img"]], "resample_img() (in module nilearn.image)": [[314, "nilearn.image.resample_img"]], "resample_to_img() (in module nilearn.image)": [[315, "nilearn.image.resample_to_img"]], "smooth_img() (in module nilearn.image)": [[316, "nilearn.image.smooth_img"]], "swap_img_hemispheres() (in module nilearn.image)": [[317, "nilearn.image.swap_img_hemispheres"]], "threshold_img() (in module nilearn.image)": [[318, "nilearn.image.threshold_img"]], "get_bids_files() (in module nilearn.interfaces.bids)": [[319, "nilearn.interfaces.bids.get_bids_files"]], "parse_bids_filename() (in module nilearn.interfaces.bids)": [[320, "nilearn.interfaces.bids.parse_bids_filename"]], "save_glm_to_bids() (in module nilearn.interfaces.bids)": [[321, "nilearn.interfaces.bids.save_glm_to_bids"]], "load_confounds() (in module nilearn.interfaces.fmriprep)": [[322, "nilearn.interfaces.fmriprep.load_confounds"]], "load_confounds_strategy() (in module nilearn.interfaces.fmriprep)": [[323, "nilearn.interfaces.fmriprep.load_confounds_strategy"]], "get_design_from_fslmat() (in module nilearn.interfaces.fsl)": [[324, "nilearn.interfaces.fsl.get_design_from_fslmat"]], "basemasker (class in nilearn.maskers)": [[325, "nilearn.maskers.BaseMasker"]], "__init__() (nilearn.maskers.basemasker method)": [[325, "nilearn.maskers.BaseMasker.__init__"]], "fit_transform() (nilearn.maskers.basemasker method)": [[325, "nilearn.maskers.BaseMasker.fit_transform"]], "get_metadata_routing() (nilearn.maskers.basemasker method)": [[325, "nilearn.maskers.BaseMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.basemasker method)": [[325, "nilearn.maskers.BaseMasker.get_params"]], "inverse_transform() (nilearn.maskers.basemasker method)": [[325, "nilearn.maskers.BaseMasker.inverse_transform"]], "set_output() (nilearn.maskers.basemasker method)": [[325, "nilearn.maskers.BaseMasker.set_output"]], "set_params() (nilearn.maskers.basemasker method)": [[325, "nilearn.maskers.BaseMasker.set_params"]], "set_transform_request() (nilearn.maskers.basemasker method)": [[325, "nilearn.maskers.BaseMasker.set_transform_request"]], "transform() (nilearn.maskers.basemasker method)": [[325, "nilearn.maskers.BaseMasker.transform"]], "transform_single_imgs() (nilearn.maskers.basemasker method)": [[325, "nilearn.maskers.BaseMasker.transform_single_imgs"]], "multiniftilabelsmasker (class in nilearn.maskers)": [[326, "nilearn.maskers.MultiNiftiLabelsMasker"]], "__init__() (nilearn.maskers.multiniftilabelsmasker method)": [[326, "nilearn.maskers.MultiNiftiLabelsMasker.__init__"]], "fit() (nilearn.maskers.multiniftilabelsmasker method)": [[326, "nilearn.maskers.MultiNiftiLabelsMasker.fit"]], "fit_transform() (nilearn.maskers.multiniftilabelsmasker method)": [[326, "nilearn.maskers.MultiNiftiLabelsMasker.fit_transform"]], "generate_report() (nilearn.maskers.multiniftilabelsmasker method)": [[326, "nilearn.maskers.MultiNiftiLabelsMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.multiniftilabelsmasker method)": [[326, "nilearn.maskers.MultiNiftiLabelsMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.multiniftilabelsmasker method)": [[326, "nilearn.maskers.MultiNiftiLabelsMasker.get_params"]], "inverse_transform() (nilearn.maskers.multiniftilabelsmasker method)": [[326, "nilearn.maskers.MultiNiftiLabelsMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.multiniftilabelsmasker method)": [[326, "nilearn.maskers.MultiNiftiLabelsMasker.set_fit_request"]], "set_inverse_transform_request() (nilearn.maskers.multiniftilabelsmasker method)": [[326, "nilearn.maskers.MultiNiftiLabelsMasker.set_inverse_transform_request"]], "set_output() (nilearn.maskers.multiniftilabelsmasker method)": [[326, "nilearn.maskers.MultiNiftiLabelsMasker.set_output"]], "set_params() (nilearn.maskers.multiniftilabelsmasker method)": [[326, "nilearn.maskers.MultiNiftiLabelsMasker.set_params"]], "set_transform_request() (nilearn.maskers.multiniftilabelsmasker method)": [[326, "nilearn.maskers.MultiNiftiLabelsMasker.set_transform_request"]], "transform() (nilearn.maskers.multiniftilabelsmasker method)": [[326, "nilearn.maskers.MultiNiftiLabelsMasker.transform"]], "transform_imgs() (nilearn.maskers.multiniftilabelsmasker method)": [[326, "nilearn.maskers.MultiNiftiLabelsMasker.transform_imgs"]], "transform_single_imgs() (nilearn.maskers.multiniftilabelsmasker method)": [[326, "nilearn.maskers.MultiNiftiLabelsMasker.transform_single_imgs"]], "multiniftimapsmasker (class in nilearn.maskers)": [[327, "nilearn.maskers.MultiNiftiMapsMasker"]], "__init__() (nilearn.maskers.multiniftimapsmasker method)": [[327, "nilearn.maskers.MultiNiftiMapsMasker.__init__"]], "fit() (nilearn.maskers.multiniftimapsmasker method)": [[327, "nilearn.maskers.MultiNiftiMapsMasker.fit"]], "fit_transform() (nilearn.maskers.multiniftimapsmasker method)": [[327, "nilearn.maskers.MultiNiftiMapsMasker.fit_transform"]], "generate_report() (nilearn.maskers.multiniftimapsmasker method)": [[327, "nilearn.maskers.MultiNiftiMapsMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.multiniftimapsmasker method)": [[327, "nilearn.maskers.MultiNiftiMapsMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.multiniftimapsmasker method)": [[327, "nilearn.maskers.MultiNiftiMapsMasker.get_params"]], "inverse_transform() (nilearn.maskers.multiniftimapsmasker method)": [[327, "nilearn.maskers.MultiNiftiMapsMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.multiniftimapsmasker method)": [[327, "nilearn.maskers.MultiNiftiMapsMasker.set_fit_request"]], "set_inverse_transform_request() (nilearn.maskers.multiniftimapsmasker method)": [[327, "nilearn.maskers.MultiNiftiMapsMasker.set_inverse_transform_request"]], "set_output() (nilearn.maskers.multiniftimapsmasker method)": [[327, "nilearn.maskers.MultiNiftiMapsMasker.set_output"]], "set_params() (nilearn.maskers.multiniftimapsmasker method)": [[327, "nilearn.maskers.MultiNiftiMapsMasker.set_params"]], "set_transform_request() (nilearn.maskers.multiniftimapsmasker method)": [[327, "nilearn.maskers.MultiNiftiMapsMasker.set_transform_request"]], "transform() (nilearn.maskers.multiniftimapsmasker method)": [[327, "nilearn.maskers.MultiNiftiMapsMasker.transform"]], "transform_imgs() (nilearn.maskers.multiniftimapsmasker method)": [[327, "nilearn.maskers.MultiNiftiMapsMasker.transform_imgs"]], "transform_single_imgs() (nilearn.maskers.multiniftimapsmasker method)": [[327, "nilearn.maskers.MultiNiftiMapsMasker.transform_single_imgs"]], "multiniftimasker (class in nilearn.maskers)": [[328, "nilearn.maskers.MultiNiftiMasker"]], "__init__() (nilearn.maskers.multiniftimasker method)": [[328, "nilearn.maskers.MultiNiftiMasker.__init__"]], "fit() (nilearn.maskers.multiniftimasker method)": [[328, "nilearn.maskers.MultiNiftiMasker.fit"]], "fit_transform() (nilearn.maskers.multiniftimasker method)": [[328, "nilearn.maskers.MultiNiftiMasker.fit_transform"]], "generate_report() (nilearn.maskers.multiniftimasker method)": [[328, "nilearn.maskers.MultiNiftiMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.multiniftimasker method)": [[328, "nilearn.maskers.MultiNiftiMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.multiniftimasker method)": [[328, "nilearn.maskers.MultiNiftiMasker.get_params"]], "inverse_transform() (nilearn.maskers.multiniftimasker method)": [[328, "nilearn.maskers.MultiNiftiMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.multiniftimasker method)": [[328, "nilearn.maskers.MultiNiftiMasker.set_fit_request"]], "set_output() (nilearn.maskers.multiniftimasker method)": [[328, "nilearn.maskers.MultiNiftiMasker.set_output"]], "set_params() (nilearn.maskers.multiniftimasker method)": [[328, "nilearn.maskers.MultiNiftiMasker.set_params"]], "set_transform_request() (nilearn.maskers.multiniftimasker method)": [[328, "nilearn.maskers.MultiNiftiMasker.set_transform_request"]], "transform() (nilearn.maskers.multiniftimasker method)": [[328, "nilearn.maskers.MultiNiftiMasker.transform"]], "transform_imgs() (nilearn.maskers.multiniftimasker method)": [[328, "nilearn.maskers.MultiNiftiMasker.transform_imgs"]], "transform_single_imgs() (nilearn.maskers.multiniftimasker method)": [[328, "nilearn.maskers.MultiNiftiMasker.transform_single_imgs"]], "niftilabelsmasker (class in nilearn.maskers)": [[329, "nilearn.maskers.NiftiLabelsMasker"]], "__init__() (nilearn.maskers.niftilabelsmasker method)": [[329, "nilearn.maskers.NiftiLabelsMasker.__init__"]], "fit() (nilearn.maskers.niftilabelsmasker method)": [[329, "nilearn.maskers.NiftiLabelsMasker.fit"]], "fit_transform() (nilearn.maskers.niftilabelsmasker method)": [[329, "nilearn.maskers.NiftiLabelsMasker.fit_transform"]], "generate_report() (nilearn.maskers.niftilabelsmasker method)": [[329, "nilearn.maskers.NiftiLabelsMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.niftilabelsmasker method)": [[329, "nilearn.maskers.NiftiLabelsMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.niftilabelsmasker method)": [[329, "nilearn.maskers.NiftiLabelsMasker.get_params"]], "inverse_transform() (nilearn.maskers.niftilabelsmasker method)": [[329, "nilearn.maskers.NiftiLabelsMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.niftilabelsmasker method)": [[329, "nilearn.maskers.NiftiLabelsMasker.set_fit_request"]], "set_inverse_transform_request() (nilearn.maskers.niftilabelsmasker method)": [[329, "nilearn.maskers.NiftiLabelsMasker.set_inverse_transform_request"]], "set_output() (nilearn.maskers.niftilabelsmasker method)": [[329, "nilearn.maskers.NiftiLabelsMasker.set_output"]], "set_params() (nilearn.maskers.niftilabelsmasker method)": [[329, "nilearn.maskers.NiftiLabelsMasker.set_params"]], "set_transform_request() (nilearn.maskers.niftilabelsmasker method)": [[329, "nilearn.maskers.NiftiLabelsMasker.set_transform_request"]], "transform() (nilearn.maskers.niftilabelsmasker method)": [[329, "nilearn.maskers.NiftiLabelsMasker.transform"]], "transform_single_imgs() (nilearn.maskers.niftilabelsmasker method)": [[329, "nilearn.maskers.NiftiLabelsMasker.transform_single_imgs"]], "niftimapsmasker (class in nilearn.maskers)": [[330, "nilearn.maskers.NiftiMapsMasker"]], "__init__() (nilearn.maskers.niftimapsmasker method)": [[330, "nilearn.maskers.NiftiMapsMasker.__init__"]], "fit() (nilearn.maskers.niftimapsmasker method)": [[330, "nilearn.maskers.NiftiMapsMasker.fit"]], "fit_transform() (nilearn.maskers.niftimapsmasker method)": [[330, "nilearn.maskers.NiftiMapsMasker.fit_transform"]], "generate_report() (nilearn.maskers.niftimapsmasker method)": [[330, "nilearn.maskers.NiftiMapsMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.niftimapsmasker method)": [[330, "nilearn.maskers.NiftiMapsMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.niftimapsmasker method)": [[330, "nilearn.maskers.NiftiMapsMasker.get_params"]], "inverse_transform() (nilearn.maskers.niftimapsmasker method)": [[330, "nilearn.maskers.NiftiMapsMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.niftimapsmasker method)": [[330, "nilearn.maskers.NiftiMapsMasker.set_fit_request"]], "set_inverse_transform_request() (nilearn.maskers.niftimapsmasker method)": [[330, "nilearn.maskers.NiftiMapsMasker.set_inverse_transform_request"]], "set_output() (nilearn.maskers.niftimapsmasker method)": [[330, "nilearn.maskers.NiftiMapsMasker.set_output"]], "set_params() (nilearn.maskers.niftimapsmasker method)": [[330, "nilearn.maskers.NiftiMapsMasker.set_params"]], "set_transform_request() (nilearn.maskers.niftimapsmasker method)": [[330, "nilearn.maskers.NiftiMapsMasker.set_transform_request"]], "transform() (nilearn.maskers.niftimapsmasker method)": [[330, "nilearn.maskers.NiftiMapsMasker.transform"]], "transform_single_imgs() (nilearn.maskers.niftimapsmasker method)": [[330, "nilearn.maskers.NiftiMapsMasker.transform_single_imgs"]], "niftimasker (class in nilearn.maskers)": [[331, "nilearn.maskers.NiftiMasker"]], "__init__() (nilearn.maskers.niftimasker method)": [[331, "nilearn.maskers.NiftiMasker.__init__"]], "fit() (nilearn.maskers.niftimasker method)": [[331, "nilearn.maskers.NiftiMasker.fit"]], "fit_transform() (nilearn.maskers.niftimasker method)": [[331, "nilearn.maskers.NiftiMasker.fit_transform"]], "generate_report() (nilearn.maskers.niftimasker method)": [[331, "nilearn.maskers.NiftiMasker.generate_report"]], "get_metadata_routing() (nilearn.maskers.niftimasker method)": [[331, "nilearn.maskers.NiftiMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.niftimasker method)": [[331, "nilearn.maskers.NiftiMasker.get_params"]], "inverse_transform() (nilearn.maskers.niftimasker method)": [[331, "nilearn.maskers.NiftiMasker.inverse_transform"]], "set_fit_request() (nilearn.maskers.niftimasker method)": [[331, "nilearn.maskers.NiftiMasker.set_fit_request"]], "set_output() (nilearn.maskers.niftimasker method)": [[331, "nilearn.maskers.NiftiMasker.set_output"]], "set_params() (nilearn.maskers.niftimasker method)": [[331, "nilearn.maskers.NiftiMasker.set_params"]], "set_transform_request() (nilearn.maskers.niftimasker method)": [[331, "nilearn.maskers.NiftiMasker.set_transform_request"]], "transform() (nilearn.maskers.niftimasker method)": [[331, "nilearn.maskers.NiftiMasker.transform"]], "transform_single_imgs() (nilearn.maskers.niftimasker method)": [[331, "nilearn.maskers.NiftiMasker.transform_single_imgs"]], "niftispheresmasker (class in nilearn.maskers)": [[332, "nilearn.maskers.NiftiSpheresMasker"]], "__init__() (nilearn.maskers.niftispheresmasker method)": [[332, "nilearn.maskers.NiftiSpheresMasker.__init__"]], "fit() (nilearn.maskers.niftispheresmasker method)": [[332, "nilearn.maskers.NiftiSpheresMasker.fit"]], "fit_transform() (nilearn.maskers.niftispheresmasker method)": [[332, "nilearn.maskers.NiftiSpheresMasker.fit_transform"]], "get_metadata_routing() (nilearn.maskers.niftispheresmasker method)": [[332, "nilearn.maskers.NiftiSpheresMasker.get_metadata_routing"]], "get_params() (nilearn.maskers.niftispheresmasker method)": [[332, "nilearn.maskers.NiftiSpheresMasker.get_params"]], "inverse_transform() (nilearn.maskers.niftispheresmasker method)": [[332, "nilearn.maskers.NiftiSpheresMasker.inverse_transform"]], "set_inverse_transform_request() (nilearn.maskers.niftispheresmasker method)": [[332, "nilearn.maskers.NiftiSpheresMasker.set_inverse_transform_request"]], "set_output() (nilearn.maskers.niftispheresmasker method)": [[332, "nilearn.maskers.NiftiSpheresMasker.set_output"]], "set_params() (nilearn.maskers.niftispheresmasker method)": [[332, "nilearn.maskers.NiftiSpheresMasker.set_params"]], "set_transform_request() (nilearn.maskers.niftispheresmasker method)": [[332, "nilearn.maskers.NiftiSpheresMasker.set_transform_request"]], "transform() (nilearn.maskers.niftispheresmasker method)": [[332, "nilearn.maskers.NiftiSpheresMasker.transform"]], "transform_single_imgs() (nilearn.maskers.niftispheresmasker method)": [[332, "nilearn.maskers.NiftiSpheresMasker.transform_single_imgs"]], "apply_mask() (in module nilearn.masking)": [[333, "nilearn.masking.apply_mask"]], "compute_background_mask() (in module nilearn.masking)": [[334, "nilearn.masking.compute_background_mask"]], "compute_brain_mask() (in module nilearn.masking)": [[335, "nilearn.masking.compute_brain_mask"]], "compute_epi_mask() (in module nilearn.masking)": [[336, "nilearn.masking.compute_epi_mask"]], "compute_multi_background_mask() (in module nilearn.masking)": [[337, "nilearn.masking.compute_multi_background_mask"]], "compute_multi_brain_mask() (in module nilearn.masking)": [[338, "nilearn.masking.compute_multi_brain_mask"]], "compute_multi_epi_mask() (in module nilearn.masking)": [[339, "nilearn.masking.compute_multi_epi_mask"]], "intersect_masks() (in module nilearn.masking)": [[340, "nilearn.masking.intersect_masks"]], "unmask() (in module nilearn.masking)": [[341, "nilearn.masking.unmask"]], "permuted_ols() (in module nilearn.mass_univariate)": [[342, "nilearn.mass_univariate.permuted_ols"]], "baseaxes (class in nilearn.plotting.displays)": [[343, "nilearn.plotting.displays.BaseAxes"]], "__init__() (nilearn.plotting.displays.baseaxes method)": [[343, "nilearn.plotting.displays.BaseAxes.__init__"]], "add_object_bounds() (nilearn.plotting.displays.baseaxes method)": [[343, "nilearn.plotting.displays.BaseAxes.add_object_bounds"]], "draw_2d() (nilearn.plotting.displays.baseaxes method)": [[343, "nilearn.plotting.displays.BaseAxes.draw_2d"]], "draw_left_right() (nilearn.plotting.displays.baseaxes method)": [[343, "nilearn.plotting.displays.BaseAxes.draw_left_right"]], "draw_position() (nilearn.plotting.displays.baseaxes method)": [[343, "nilearn.plotting.displays.BaseAxes.draw_position"]], "draw_scale_bar() (nilearn.plotting.displays.baseaxes method)": [[343, "nilearn.plotting.displays.BaseAxes.draw_scale_bar"]], "get_object_bounds() (nilearn.plotting.displays.baseaxes method)": [[343, "nilearn.plotting.displays.BaseAxes.get_object_bounds"]], "transform_to_2d() (nilearn.plotting.displays.baseaxes method)": [[343, "nilearn.plotting.displays.BaseAxes.transform_to_2d"]], "baseslicer (class in nilearn.plotting.displays)": [[344, "nilearn.plotting.displays.BaseSlicer"]], "__init__() (nilearn.plotting.displays.baseslicer method)": [[344, "nilearn.plotting.displays.BaseSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.baseslicer method)": [[344, "nilearn.plotting.displays.BaseSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.baseslicer method)": [[344, "nilearn.plotting.displays.BaseSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.baseslicer method)": [[344, "nilearn.plotting.displays.BaseSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.baseslicer method)": [[344, "nilearn.plotting.displays.BaseSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.baseslicer method)": [[344, "nilearn.plotting.displays.BaseSlicer.annotate"]], "black_bg (nilearn.plotting.displays.baseslicer property)": [[344, "nilearn.plotting.displays.BaseSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.baseslicer property)": [[344, "nilearn.plotting.displays.BaseSlicer.brain_color"]], "close() (nilearn.plotting.displays.baseslicer method)": [[344, "nilearn.plotting.displays.BaseSlicer.close"]], "find_cut_coords() (nilearn.plotting.displays.baseslicer static method)": [[344, "nilearn.plotting.displays.BaseSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.baseslicer class method)": [[344, "nilearn.plotting.displays.BaseSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.baseslicer method)": [[344, "nilearn.plotting.displays.BaseSlicer.savefig"]], "title() (nilearn.plotting.displays.baseslicer method)": [[344, "nilearn.plotting.displays.BaseSlicer.title"]], "cutaxes (class in nilearn.plotting.displays)": [[345, "nilearn.plotting.displays.CutAxes"]], "__init__() (nilearn.plotting.displays.cutaxes method)": [[345, "nilearn.plotting.displays.CutAxes.__init__"]], "add_object_bounds() (nilearn.plotting.displays.cutaxes method)": [[345, "nilearn.plotting.displays.CutAxes.add_object_bounds"]], "draw_2d() (nilearn.plotting.displays.cutaxes method)": [[345, "nilearn.plotting.displays.CutAxes.draw_2d"]], "draw_left_right() (nilearn.plotting.displays.cutaxes method)": [[345, "nilearn.plotting.displays.CutAxes.draw_left_right"]], "draw_position() (nilearn.plotting.displays.cutaxes method)": [[345, "nilearn.plotting.displays.CutAxes.draw_position"]], "draw_scale_bar() (nilearn.plotting.displays.cutaxes method)": [[345, "nilearn.plotting.displays.CutAxes.draw_scale_bar"]], "get_object_bounds() (nilearn.plotting.displays.cutaxes method)": [[345, "nilearn.plotting.displays.CutAxes.get_object_bounds"]], "transform_to_2d() (nilearn.plotting.displays.cutaxes method)": [[345, "nilearn.plotting.displays.CutAxes.transform_to_2d"]], "glassbrainaxes (class in nilearn.plotting.displays)": [[346, "nilearn.plotting.displays.GlassBrainAxes"]], "__init__() (nilearn.plotting.displays.glassbrainaxes method)": [[346, "nilearn.plotting.displays.GlassBrainAxes.__init__"]], "add_object_bounds() (nilearn.plotting.displays.glassbrainaxes method)": [[346, "nilearn.plotting.displays.GlassBrainAxes.add_object_bounds"]], "draw_2d() (nilearn.plotting.displays.glassbrainaxes method)": [[346, "nilearn.plotting.displays.GlassBrainAxes.draw_2d"]], "draw_left_right() (nilearn.plotting.displays.glassbrainaxes method)": [[346, "nilearn.plotting.displays.GlassBrainAxes.draw_left_right"]], "draw_position() (nilearn.plotting.displays.glassbrainaxes method)": [[346, "nilearn.plotting.displays.GlassBrainAxes.draw_position"]], "draw_scale_bar() (nilearn.plotting.displays.glassbrainaxes method)": [[346, "nilearn.plotting.displays.GlassBrainAxes.draw_scale_bar"]], "get_object_bounds() (nilearn.plotting.displays.glassbrainaxes method)": [[346, "nilearn.plotting.displays.GlassBrainAxes.get_object_bounds"]], "transform_to_2d() (nilearn.plotting.displays.glassbrainaxes method)": [[346, "nilearn.plotting.displays.GlassBrainAxes.transform_to_2d"]], "lprojector (class in nilearn.plotting.displays)": [[347, "nilearn.plotting.displays.LProjector"]], "__init__() (nilearn.plotting.displays.lprojector method)": [[347, "nilearn.plotting.displays.LProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lprojector method)": [[347, "nilearn.plotting.displays.LProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lprojector method)": [[347, "nilearn.plotting.displays.LProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lprojector method)": [[347, "nilearn.plotting.displays.LProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lprojector method)": [[347, "nilearn.plotting.displays.LProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lprojector method)": [[347, "nilearn.plotting.displays.LProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lprojector method)": [[347, "nilearn.plotting.displays.LProjector.annotate"]], "black_bg (nilearn.plotting.displays.lprojector property)": [[347, "nilearn.plotting.displays.LProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lprojector property)": [[347, "nilearn.plotting.displays.LProjector.brain_color"]], "close() (nilearn.plotting.displays.lprojector method)": [[347, "nilearn.plotting.displays.LProjector.close"]], "draw_cross() (nilearn.plotting.displays.lprojector method)": [[347, "nilearn.plotting.displays.LProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lprojector class method)": [[347, "nilearn.plotting.displays.LProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lprojector class method)": [[347, "nilearn.plotting.displays.LProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lprojector method)": [[347, "nilearn.plotting.displays.LProjector.savefig"]], "title() (nilearn.plotting.displays.lprojector method)": [[347, "nilearn.plotting.displays.LProjector.title"]], "lrprojector (class in nilearn.plotting.displays)": [[348, "nilearn.plotting.displays.LRProjector"]], "__init__() (nilearn.plotting.displays.lrprojector method)": [[348, "nilearn.plotting.displays.LRProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lrprojector method)": [[348, "nilearn.plotting.displays.LRProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lrprojector method)": [[348, "nilearn.plotting.displays.LRProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lrprojector method)": [[348, "nilearn.plotting.displays.LRProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lrprojector method)": [[348, "nilearn.plotting.displays.LRProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lrprojector method)": [[348, "nilearn.plotting.displays.LRProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lrprojector method)": [[348, "nilearn.plotting.displays.LRProjector.annotate"]], "black_bg (nilearn.plotting.displays.lrprojector property)": [[348, "nilearn.plotting.displays.LRProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lrprojector property)": [[348, "nilearn.plotting.displays.LRProjector.brain_color"]], "close() (nilearn.plotting.displays.lrprojector method)": [[348, "nilearn.plotting.displays.LRProjector.close"]], "draw_cross() (nilearn.plotting.displays.lrprojector method)": [[348, "nilearn.plotting.displays.LRProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lrprojector class method)": [[348, "nilearn.plotting.displays.LRProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lrprojector class method)": [[348, "nilearn.plotting.displays.LRProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lrprojector method)": [[348, "nilearn.plotting.displays.LRProjector.savefig"]], "title() (nilearn.plotting.displays.lrprojector method)": [[348, "nilearn.plotting.displays.LRProjector.title"]], "lyrprojector (class in nilearn.plotting.displays)": [[349, "nilearn.plotting.displays.LYRProjector"]], "__init__() (nilearn.plotting.displays.lyrprojector method)": [[349, "nilearn.plotting.displays.LYRProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lyrprojector method)": [[349, "nilearn.plotting.displays.LYRProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lyrprojector method)": [[349, "nilearn.plotting.displays.LYRProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lyrprojector method)": [[349, "nilearn.plotting.displays.LYRProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lyrprojector method)": [[349, "nilearn.plotting.displays.LYRProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lyrprojector method)": [[349, "nilearn.plotting.displays.LYRProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lyrprojector method)": [[349, "nilearn.plotting.displays.LYRProjector.annotate"]], "black_bg (nilearn.plotting.displays.lyrprojector property)": [[349, "nilearn.plotting.displays.LYRProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lyrprojector property)": [[349, "nilearn.plotting.displays.LYRProjector.brain_color"]], "close() (nilearn.plotting.displays.lyrprojector method)": [[349, "nilearn.plotting.displays.LYRProjector.close"]], "draw_cross() (nilearn.plotting.displays.lyrprojector method)": [[349, "nilearn.plotting.displays.LYRProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lyrprojector class method)": [[349, "nilearn.plotting.displays.LYRProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lyrprojector class method)": [[349, "nilearn.plotting.displays.LYRProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lyrprojector method)": [[349, "nilearn.plotting.displays.LYRProjector.savefig"]], "title() (nilearn.plotting.displays.lyrprojector method)": [[349, "nilearn.plotting.displays.LYRProjector.title"]], "lyrzprojector (class in nilearn.plotting.displays)": [[350, "nilearn.plotting.displays.LYRZProjector"]], "__init__() (nilearn.plotting.displays.lyrzprojector method)": [[350, "nilearn.plotting.displays.LYRZProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lyrzprojector method)": [[350, "nilearn.plotting.displays.LYRZProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lyrzprojector method)": [[350, "nilearn.plotting.displays.LYRZProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lyrzprojector method)": [[350, "nilearn.plotting.displays.LYRZProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lyrzprojector method)": [[350, "nilearn.plotting.displays.LYRZProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lyrzprojector method)": [[350, "nilearn.plotting.displays.LYRZProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lyrzprojector method)": [[350, "nilearn.plotting.displays.LYRZProjector.annotate"]], "black_bg (nilearn.plotting.displays.lyrzprojector property)": [[350, "nilearn.plotting.displays.LYRZProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lyrzprojector property)": [[350, "nilearn.plotting.displays.LYRZProjector.brain_color"]], "close() (nilearn.plotting.displays.lyrzprojector method)": [[350, "nilearn.plotting.displays.LYRZProjector.close"]], "draw_cross() (nilearn.plotting.displays.lyrzprojector method)": [[350, "nilearn.plotting.displays.LYRZProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lyrzprojector class method)": [[350, "nilearn.plotting.displays.LYRZProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lyrzprojector class method)": [[350, "nilearn.plotting.displays.LYRZProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lyrzprojector method)": [[350, "nilearn.plotting.displays.LYRZProjector.savefig"]], "title() (nilearn.plotting.displays.lyrzprojector method)": [[350, "nilearn.plotting.displays.LYRZProjector.title"]], "lzrprojector (class in nilearn.plotting.displays)": [[351, "nilearn.plotting.displays.LZRProjector"]], "__init__() (nilearn.plotting.displays.lzrprojector method)": [[351, "nilearn.plotting.displays.LZRProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lzrprojector method)": [[351, "nilearn.plotting.displays.LZRProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lzrprojector method)": [[351, "nilearn.plotting.displays.LZRProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lzrprojector method)": [[351, "nilearn.plotting.displays.LZRProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lzrprojector method)": [[351, "nilearn.plotting.displays.LZRProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lzrprojector method)": [[351, "nilearn.plotting.displays.LZRProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lzrprojector method)": [[351, "nilearn.plotting.displays.LZRProjector.annotate"]], "black_bg (nilearn.plotting.displays.lzrprojector property)": [[351, "nilearn.plotting.displays.LZRProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lzrprojector property)": [[351, "nilearn.plotting.displays.LZRProjector.brain_color"]], "close() (nilearn.plotting.displays.lzrprojector method)": [[351, "nilearn.plotting.displays.LZRProjector.close"]], "draw_cross() (nilearn.plotting.displays.lzrprojector method)": [[351, "nilearn.plotting.displays.LZRProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lzrprojector class method)": [[351, "nilearn.plotting.displays.LZRProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lzrprojector class method)": [[351, "nilearn.plotting.displays.LZRProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lzrprojector method)": [[351, "nilearn.plotting.displays.LZRProjector.savefig"]], "title() (nilearn.plotting.displays.lzrprojector method)": [[351, "nilearn.plotting.displays.LZRProjector.title"]], "lzryprojector (class in nilearn.plotting.displays)": [[352, "nilearn.plotting.displays.LZRYProjector"]], "__init__() (nilearn.plotting.displays.lzryprojector method)": [[352, "nilearn.plotting.displays.LZRYProjector.__init__"]], "add_contours() (nilearn.plotting.displays.lzryprojector method)": [[352, "nilearn.plotting.displays.LZRYProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.lzryprojector method)": [[352, "nilearn.plotting.displays.LZRYProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.lzryprojector method)": [[352, "nilearn.plotting.displays.LZRYProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.lzryprojector method)": [[352, "nilearn.plotting.displays.LZRYProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.lzryprojector method)": [[352, "nilearn.plotting.displays.LZRYProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.lzryprojector method)": [[352, "nilearn.plotting.displays.LZRYProjector.annotate"]], "black_bg (nilearn.plotting.displays.lzryprojector property)": [[352, "nilearn.plotting.displays.LZRYProjector.black_bg"]], "brain_color (nilearn.plotting.displays.lzryprojector property)": [[352, "nilearn.plotting.displays.LZRYProjector.brain_color"]], "close() (nilearn.plotting.displays.lzryprojector method)": [[352, "nilearn.plotting.displays.LZRYProjector.close"]], "draw_cross() (nilearn.plotting.displays.lzryprojector method)": [[352, "nilearn.plotting.displays.LZRYProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.lzryprojector class method)": [[352, "nilearn.plotting.displays.LZRYProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.lzryprojector class method)": [[352, "nilearn.plotting.displays.LZRYProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.lzryprojector method)": [[352, "nilearn.plotting.displays.LZRYProjector.savefig"]], "title() (nilearn.plotting.displays.lzryprojector method)": [[352, "nilearn.plotting.displays.LZRYProjector.title"]], "mosaicslicer (class in nilearn.plotting.displays)": [[353, "nilearn.plotting.displays.MosaicSlicer"]], "__init__() (nilearn.plotting.displays.mosaicslicer method)": [[353, "nilearn.plotting.displays.MosaicSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.mosaicslicer method)": [[353, "nilearn.plotting.displays.MosaicSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.mosaicslicer method)": [[353, "nilearn.plotting.displays.MosaicSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.mosaicslicer method)": [[353, "nilearn.plotting.displays.MosaicSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.mosaicslicer method)": [[353, "nilearn.plotting.displays.MosaicSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.mosaicslicer method)": [[353, "nilearn.plotting.displays.MosaicSlicer.annotate"]], "black_bg (nilearn.plotting.displays.mosaicslicer property)": [[353, "nilearn.plotting.displays.MosaicSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.mosaicslicer property)": [[353, "nilearn.plotting.displays.MosaicSlicer.brain_color"]], "close() (nilearn.plotting.displays.mosaicslicer method)": [[353, "nilearn.plotting.displays.MosaicSlicer.close"]], "draw_cross() (nilearn.plotting.displays.mosaicslicer method)": [[353, "nilearn.plotting.displays.MosaicSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.mosaicslicer class method)": [[353, "nilearn.plotting.displays.MosaicSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.mosaicslicer class method)": [[353, "nilearn.plotting.displays.MosaicSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.mosaicslicer method)": [[353, "nilearn.plotting.displays.MosaicSlicer.savefig"]], "title() (nilearn.plotting.displays.mosaicslicer method)": [[353, "nilearn.plotting.displays.MosaicSlicer.title"]], "orthoprojector (class in nilearn.plotting.displays)": [[354, "nilearn.plotting.displays.OrthoProjector"]], "__init__() (nilearn.plotting.displays.orthoprojector method)": [[354, "nilearn.plotting.displays.OrthoProjector.__init__"]], "add_contours() (nilearn.plotting.displays.orthoprojector method)": [[354, "nilearn.plotting.displays.OrthoProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.orthoprojector method)": [[354, "nilearn.plotting.displays.OrthoProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.orthoprojector method)": [[354, "nilearn.plotting.displays.OrthoProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.orthoprojector method)": [[354, "nilearn.plotting.displays.OrthoProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.orthoprojector method)": [[354, "nilearn.plotting.displays.OrthoProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.orthoprojector method)": [[354, "nilearn.plotting.displays.OrthoProjector.annotate"]], "black_bg (nilearn.plotting.displays.orthoprojector property)": [[354, "nilearn.plotting.displays.OrthoProjector.black_bg"]], "brain_color (nilearn.plotting.displays.orthoprojector property)": [[354, "nilearn.plotting.displays.OrthoProjector.brain_color"]], "close() (nilearn.plotting.displays.orthoprojector method)": [[354, "nilearn.plotting.displays.OrthoProjector.close"]], "draw_cross() (nilearn.plotting.displays.orthoprojector method)": [[354, "nilearn.plotting.displays.OrthoProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.orthoprojector class method)": [[354, "nilearn.plotting.displays.OrthoProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.orthoprojector class method)": [[354, "nilearn.plotting.displays.OrthoProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.orthoprojector method)": [[354, "nilearn.plotting.displays.OrthoProjector.savefig"]], "title() (nilearn.plotting.displays.orthoprojector method)": [[354, "nilearn.plotting.displays.OrthoProjector.title"]], "orthoslicer (class in nilearn.plotting.displays)": [[355, "nilearn.plotting.displays.OrthoSlicer"]], "__init__() (nilearn.plotting.displays.orthoslicer method)": [[355, "nilearn.plotting.displays.OrthoSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.orthoslicer method)": [[355, "nilearn.plotting.displays.OrthoSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.orthoslicer method)": [[355, "nilearn.plotting.displays.OrthoSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.orthoslicer method)": [[355, "nilearn.plotting.displays.OrthoSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.orthoslicer method)": [[355, "nilearn.plotting.displays.OrthoSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.orthoslicer method)": [[355, "nilearn.plotting.displays.OrthoSlicer.annotate"]], "black_bg (nilearn.plotting.displays.orthoslicer property)": [[355, "nilearn.plotting.displays.OrthoSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.orthoslicer property)": [[355, "nilearn.plotting.displays.OrthoSlicer.brain_color"]], "close() (nilearn.plotting.displays.orthoslicer method)": [[355, "nilearn.plotting.displays.OrthoSlicer.close"]], "draw_cross() (nilearn.plotting.displays.orthoslicer method)": [[355, "nilearn.plotting.displays.OrthoSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.orthoslicer class method)": [[355, "nilearn.plotting.displays.OrthoSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.orthoslicer class method)": [[355, "nilearn.plotting.displays.OrthoSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.orthoslicer method)": [[355, "nilearn.plotting.displays.OrthoSlicer.savefig"]], "title() (nilearn.plotting.displays.orthoslicer method)": [[355, "nilearn.plotting.displays.OrthoSlicer.title"]], "plotlysurfacefigure (class in nilearn.plotting.displays)": [[356, "nilearn.plotting.displays.PlotlySurfaceFigure"]], "__init__() (nilearn.plotting.displays.plotlysurfacefigure method)": [[356, "nilearn.plotting.displays.PlotlySurfaceFigure.__init__"]], "savefig() (nilearn.plotting.displays.plotlysurfacefigure method)": [[356, "nilearn.plotting.displays.PlotlySurfaceFigure.savefig"]], "show() (nilearn.plotting.displays.plotlysurfacefigure method)": [[356, "nilearn.plotting.displays.PlotlySurfaceFigure.show"]], "rprojector (class in nilearn.plotting.displays)": [[357, "nilearn.plotting.displays.RProjector"]], "__init__() (nilearn.plotting.displays.rprojector method)": [[357, "nilearn.plotting.displays.RProjector.__init__"]], "add_contours() (nilearn.plotting.displays.rprojector method)": [[357, "nilearn.plotting.displays.RProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.rprojector method)": [[357, "nilearn.plotting.displays.RProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.rprojector method)": [[357, "nilearn.plotting.displays.RProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.rprojector method)": [[357, "nilearn.plotting.displays.RProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.rprojector method)": [[357, "nilearn.plotting.displays.RProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.rprojector method)": [[357, "nilearn.plotting.displays.RProjector.annotate"]], "black_bg (nilearn.plotting.displays.rprojector property)": [[357, "nilearn.plotting.displays.RProjector.black_bg"]], "brain_color (nilearn.plotting.displays.rprojector property)": [[357, "nilearn.plotting.displays.RProjector.brain_color"]], "close() (nilearn.plotting.displays.rprojector method)": [[357, "nilearn.plotting.displays.RProjector.close"]], "draw_cross() (nilearn.plotting.displays.rprojector method)": [[357, "nilearn.plotting.displays.RProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.rprojector class method)": [[357, "nilearn.plotting.displays.RProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.rprojector class method)": [[357, "nilearn.plotting.displays.RProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.rprojector method)": [[357, "nilearn.plotting.displays.RProjector.savefig"]], "title() (nilearn.plotting.displays.rprojector method)": [[357, "nilearn.plotting.displays.RProjector.title"]], "tiledslicer (class in nilearn.plotting.displays)": [[358, "nilearn.plotting.displays.TiledSlicer"]], "__init__() (nilearn.plotting.displays.tiledslicer method)": [[358, "nilearn.plotting.displays.TiledSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.tiledslicer method)": [[358, "nilearn.plotting.displays.TiledSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.tiledslicer method)": [[358, "nilearn.plotting.displays.TiledSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.tiledslicer method)": [[358, "nilearn.plotting.displays.TiledSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.tiledslicer method)": [[358, "nilearn.plotting.displays.TiledSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.tiledslicer method)": [[358, "nilearn.plotting.displays.TiledSlicer.annotate"]], "black_bg (nilearn.plotting.displays.tiledslicer property)": [[358, "nilearn.plotting.displays.TiledSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.tiledslicer property)": [[358, "nilearn.plotting.displays.TiledSlicer.brain_color"]], "close() (nilearn.plotting.displays.tiledslicer method)": [[358, "nilearn.plotting.displays.TiledSlicer.close"]], "draw_cross() (nilearn.plotting.displays.tiledslicer method)": [[358, "nilearn.plotting.displays.TiledSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.tiledslicer class method)": [[358, "nilearn.plotting.displays.TiledSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.tiledslicer class method)": [[358, "nilearn.plotting.displays.TiledSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.tiledslicer method)": [[358, "nilearn.plotting.displays.TiledSlicer.savefig"]], "title() (nilearn.plotting.displays.tiledslicer method)": [[358, "nilearn.plotting.displays.TiledSlicer.title"]], "xprojector (class in nilearn.plotting.displays)": [[359, "nilearn.plotting.displays.XProjector"]], "__init__() (nilearn.plotting.displays.xprojector method)": [[359, "nilearn.plotting.displays.XProjector.__init__"]], "add_contours() (nilearn.plotting.displays.xprojector method)": [[359, "nilearn.plotting.displays.XProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.xprojector method)": [[359, "nilearn.plotting.displays.XProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.xprojector method)": [[359, "nilearn.plotting.displays.XProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.xprojector method)": [[359, "nilearn.plotting.displays.XProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.xprojector method)": [[359, "nilearn.plotting.displays.XProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.xprojector method)": [[359, "nilearn.plotting.displays.XProjector.annotate"]], "black_bg (nilearn.plotting.displays.xprojector property)": [[359, "nilearn.plotting.displays.XProjector.black_bg"]], "brain_color (nilearn.plotting.displays.xprojector property)": [[359, "nilearn.plotting.displays.XProjector.brain_color"]], "close() (nilearn.plotting.displays.xprojector method)": [[359, "nilearn.plotting.displays.XProjector.close"]], "draw_cross() (nilearn.plotting.displays.xprojector method)": [[359, "nilearn.plotting.displays.XProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.xprojector class method)": [[359, "nilearn.plotting.displays.XProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.xprojector class method)": [[359, "nilearn.plotting.displays.XProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.xprojector method)": [[359, "nilearn.plotting.displays.XProjector.savefig"]], "title() (nilearn.plotting.displays.xprojector method)": [[359, "nilearn.plotting.displays.XProjector.title"]], "xslicer (class in nilearn.plotting.displays)": [[360, "nilearn.plotting.displays.XSlicer"]], "__init__() (nilearn.plotting.displays.xslicer method)": [[360, "nilearn.plotting.displays.XSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.xslicer method)": [[360, "nilearn.plotting.displays.XSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.xslicer method)": [[360, "nilearn.plotting.displays.XSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.xslicer method)": [[360, "nilearn.plotting.displays.XSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.xslicer method)": [[360, "nilearn.plotting.displays.XSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.xslicer method)": [[360, "nilearn.plotting.displays.XSlicer.annotate"]], "black_bg (nilearn.plotting.displays.xslicer property)": [[360, "nilearn.plotting.displays.XSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.xslicer property)": [[360, "nilearn.plotting.displays.XSlicer.brain_color"]], "close() (nilearn.plotting.displays.xslicer method)": [[360, "nilearn.plotting.displays.XSlicer.close"]], "draw_cross() (nilearn.plotting.displays.xslicer method)": [[360, "nilearn.plotting.displays.XSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.xslicer class method)": [[360, "nilearn.plotting.displays.XSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.xslicer class method)": [[360, "nilearn.plotting.displays.XSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.xslicer method)": [[360, "nilearn.plotting.displays.XSlicer.savefig"]], "title() (nilearn.plotting.displays.xslicer method)": [[360, "nilearn.plotting.displays.XSlicer.title"]], "xzprojector (class in nilearn.plotting.displays)": [[361, "nilearn.plotting.displays.XZProjector"]], "__init__() (nilearn.plotting.displays.xzprojector method)": [[361, "nilearn.plotting.displays.XZProjector.__init__"]], "add_contours() (nilearn.plotting.displays.xzprojector method)": [[361, "nilearn.plotting.displays.XZProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.xzprojector method)": [[361, "nilearn.plotting.displays.XZProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.xzprojector method)": [[361, "nilearn.plotting.displays.XZProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.xzprojector method)": [[361, "nilearn.plotting.displays.XZProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.xzprojector method)": [[361, "nilearn.plotting.displays.XZProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.xzprojector method)": [[361, "nilearn.plotting.displays.XZProjector.annotate"]], "black_bg (nilearn.plotting.displays.xzprojector property)": [[361, "nilearn.plotting.displays.XZProjector.black_bg"]], "brain_color (nilearn.plotting.displays.xzprojector property)": [[361, "nilearn.plotting.displays.XZProjector.brain_color"]], "close() (nilearn.plotting.displays.xzprojector method)": [[361, "nilearn.plotting.displays.XZProjector.close"]], "draw_cross() (nilearn.plotting.displays.xzprojector method)": [[361, "nilearn.plotting.displays.XZProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.xzprojector class method)": [[361, "nilearn.plotting.displays.XZProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.xzprojector class method)": [[361, "nilearn.plotting.displays.XZProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.xzprojector method)": [[361, "nilearn.plotting.displays.XZProjector.savefig"]], "title() (nilearn.plotting.displays.xzprojector method)": [[361, "nilearn.plotting.displays.XZProjector.title"]], "xzslicer (class in nilearn.plotting.displays)": [[362, "nilearn.plotting.displays.XZSlicer"]], "__init__() (nilearn.plotting.displays.xzslicer method)": [[362, "nilearn.plotting.displays.XZSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.xzslicer method)": [[362, "nilearn.plotting.displays.XZSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.xzslicer method)": [[362, "nilearn.plotting.displays.XZSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.xzslicer method)": [[362, "nilearn.plotting.displays.XZSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.xzslicer method)": [[362, "nilearn.plotting.displays.XZSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.xzslicer method)": [[362, "nilearn.plotting.displays.XZSlicer.annotate"]], "black_bg (nilearn.plotting.displays.xzslicer property)": [[362, "nilearn.plotting.displays.XZSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.xzslicer property)": [[362, "nilearn.plotting.displays.XZSlicer.brain_color"]], "close() (nilearn.plotting.displays.xzslicer method)": [[362, "nilearn.plotting.displays.XZSlicer.close"]], "draw_cross() (nilearn.plotting.displays.xzslicer method)": [[362, "nilearn.plotting.displays.XZSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.xzslicer class method)": [[362, "nilearn.plotting.displays.XZSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.xzslicer class method)": [[362, "nilearn.plotting.displays.XZSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.xzslicer method)": [[362, "nilearn.plotting.displays.XZSlicer.savefig"]], "title() (nilearn.plotting.displays.xzslicer method)": [[362, "nilearn.plotting.displays.XZSlicer.title"]], "yprojector (class in nilearn.plotting.displays)": [[363, "nilearn.plotting.displays.YProjector"]], "__init__() (nilearn.plotting.displays.yprojector method)": [[363, "nilearn.plotting.displays.YProjector.__init__"]], "add_contours() (nilearn.plotting.displays.yprojector method)": [[363, "nilearn.plotting.displays.YProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.yprojector method)": [[363, "nilearn.plotting.displays.YProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.yprojector method)": [[363, "nilearn.plotting.displays.YProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.yprojector method)": [[363, "nilearn.plotting.displays.YProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.yprojector method)": [[363, "nilearn.plotting.displays.YProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.yprojector method)": [[363, "nilearn.plotting.displays.YProjector.annotate"]], "black_bg (nilearn.plotting.displays.yprojector property)": [[363, "nilearn.plotting.displays.YProjector.black_bg"]], "brain_color (nilearn.plotting.displays.yprojector property)": [[363, "nilearn.plotting.displays.YProjector.brain_color"]], "close() (nilearn.plotting.displays.yprojector method)": [[363, "nilearn.plotting.displays.YProjector.close"]], "draw_cross() (nilearn.plotting.displays.yprojector method)": [[363, "nilearn.plotting.displays.YProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yprojector class method)": [[363, "nilearn.plotting.displays.YProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yprojector class method)": [[363, "nilearn.plotting.displays.YProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.yprojector method)": [[363, "nilearn.plotting.displays.YProjector.savefig"]], "title() (nilearn.plotting.displays.yprojector method)": [[363, "nilearn.plotting.displays.YProjector.title"]], "yslicer (class in nilearn.plotting.displays)": [[364, "nilearn.plotting.displays.YSlicer"]], "__init__() (nilearn.plotting.displays.yslicer method)": [[364, "nilearn.plotting.displays.YSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.yslicer method)": [[364, "nilearn.plotting.displays.YSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.yslicer method)": [[364, "nilearn.plotting.displays.YSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.yslicer method)": [[364, "nilearn.plotting.displays.YSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.yslicer method)": [[364, "nilearn.plotting.displays.YSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.yslicer method)": [[364, "nilearn.plotting.displays.YSlicer.annotate"]], "black_bg (nilearn.plotting.displays.yslicer property)": [[364, "nilearn.plotting.displays.YSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.yslicer property)": [[364, "nilearn.plotting.displays.YSlicer.brain_color"]], "close() (nilearn.plotting.displays.yslicer method)": [[364, "nilearn.plotting.displays.YSlicer.close"]], "draw_cross() (nilearn.plotting.displays.yslicer method)": [[364, "nilearn.plotting.displays.YSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yslicer class method)": [[364, "nilearn.plotting.displays.YSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yslicer class method)": [[364, "nilearn.plotting.displays.YSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.yslicer method)": [[364, "nilearn.plotting.displays.YSlicer.savefig"]], "title() (nilearn.plotting.displays.yslicer method)": [[364, "nilearn.plotting.displays.YSlicer.title"]], "yxprojector (class in nilearn.plotting.displays)": [[365, "nilearn.plotting.displays.YXProjector"]], "__init__() (nilearn.plotting.displays.yxprojector method)": [[365, "nilearn.plotting.displays.YXProjector.__init__"]], "add_contours() (nilearn.plotting.displays.yxprojector method)": [[365, "nilearn.plotting.displays.YXProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.yxprojector method)": [[365, "nilearn.plotting.displays.YXProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.yxprojector method)": [[365, "nilearn.plotting.displays.YXProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.yxprojector method)": [[365, "nilearn.plotting.displays.YXProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.yxprojector method)": [[365, "nilearn.plotting.displays.YXProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.yxprojector method)": [[365, "nilearn.plotting.displays.YXProjector.annotate"]], "black_bg (nilearn.plotting.displays.yxprojector property)": [[365, "nilearn.plotting.displays.YXProjector.black_bg"]], "brain_color (nilearn.plotting.displays.yxprojector property)": [[365, "nilearn.plotting.displays.YXProjector.brain_color"]], "close() (nilearn.plotting.displays.yxprojector method)": [[365, "nilearn.plotting.displays.YXProjector.close"]], "draw_cross() (nilearn.plotting.displays.yxprojector method)": [[365, "nilearn.plotting.displays.YXProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yxprojector class method)": [[365, "nilearn.plotting.displays.YXProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yxprojector class method)": [[365, "nilearn.plotting.displays.YXProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.yxprojector method)": [[365, "nilearn.plotting.displays.YXProjector.savefig"]], "title() (nilearn.plotting.displays.yxprojector method)": [[365, "nilearn.plotting.displays.YXProjector.title"]], "yxslicer (class in nilearn.plotting.displays)": [[366, "nilearn.plotting.displays.YXSlicer"]], "__init__() (nilearn.plotting.displays.yxslicer method)": [[366, "nilearn.plotting.displays.YXSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.yxslicer method)": [[366, "nilearn.plotting.displays.YXSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.yxslicer method)": [[366, "nilearn.plotting.displays.YXSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.yxslicer method)": [[366, "nilearn.plotting.displays.YXSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.yxslicer method)": [[366, "nilearn.plotting.displays.YXSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.yxslicer method)": [[366, "nilearn.plotting.displays.YXSlicer.annotate"]], "black_bg (nilearn.plotting.displays.yxslicer property)": [[366, "nilearn.plotting.displays.YXSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.yxslicer property)": [[366, "nilearn.plotting.displays.YXSlicer.brain_color"]], "close() (nilearn.plotting.displays.yxslicer method)": [[366, "nilearn.plotting.displays.YXSlicer.close"]], "draw_cross() (nilearn.plotting.displays.yxslicer method)": [[366, "nilearn.plotting.displays.YXSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yxslicer class method)": [[366, "nilearn.plotting.displays.YXSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yxslicer class method)": [[366, "nilearn.plotting.displays.YXSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.yxslicer method)": [[366, "nilearn.plotting.displays.YXSlicer.savefig"]], "title() (nilearn.plotting.displays.yxslicer method)": [[366, "nilearn.plotting.displays.YXSlicer.title"]], "yzprojector (class in nilearn.plotting.displays)": [[367, "nilearn.plotting.displays.YZProjector"]], "__init__() (nilearn.plotting.displays.yzprojector method)": [[367, "nilearn.plotting.displays.YZProjector.__init__"]], "add_contours() (nilearn.plotting.displays.yzprojector method)": [[367, "nilearn.plotting.displays.YZProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.yzprojector method)": [[367, "nilearn.plotting.displays.YZProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.yzprojector method)": [[367, "nilearn.plotting.displays.YZProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.yzprojector method)": [[367, "nilearn.plotting.displays.YZProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.yzprojector method)": [[367, "nilearn.plotting.displays.YZProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.yzprojector method)": [[367, "nilearn.plotting.displays.YZProjector.annotate"]], "black_bg (nilearn.plotting.displays.yzprojector property)": [[367, "nilearn.plotting.displays.YZProjector.black_bg"]], "brain_color (nilearn.plotting.displays.yzprojector property)": [[367, "nilearn.plotting.displays.YZProjector.brain_color"]], "close() (nilearn.plotting.displays.yzprojector method)": [[367, "nilearn.plotting.displays.YZProjector.close"]], "draw_cross() (nilearn.plotting.displays.yzprojector method)": [[367, "nilearn.plotting.displays.YZProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yzprojector class method)": [[367, "nilearn.plotting.displays.YZProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yzprojector class method)": [[367, "nilearn.plotting.displays.YZProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.yzprojector method)": [[367, "nilearn.plotting.displays.YZProjector.savefig"]], "title() (nilearn.plotting.displays.yzprojector method)": [[367, "nilearn.plotting.displays.YZProjector.title"]], "yzslicer (class in nilearn.plotting.displays)": [[368, "nilearn.plotting.displays.YZSlicer"]], "__init__() (nilearn.plotting.displays.yzslicer method)": [[368, "nilearn.plotting.displays.YZSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.yzslicer method)": [[368, "nilearn.plotting.displays.YZSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.yzslicer method)": [[368, "nilearn.plotting.displays.YZSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.yzslicer method)": [[368, "nilearn.plotting.displays.YZSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.yzslicer method)": [[368, "nilearn.plotting.displays.YZSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.yzslicer method)": [[368, "nilearn.plotting.displays.YZSlicer.annotate"]], "black_bg (nilearn.plotting.displays.yzslicer property)": [[368, "nilearn.plotting.displays.YZSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.yzslicer property)": [[368, "nilearn.plotting.displays.YZSlicer.brain_color"]], "close() (nilearn.plotting.displays.yzslicer method)": [[368, "nilearn.plotting.displays.YZSlicer.close"]], "draw_cross() (nilearn.plotting.displays.yzslicer method)": [[368, "nilearn.plotting.displays.YZSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.yzslicer class method)": [[368, "nilearn.plotting.displays.YZSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.yzslicer class method)": [[368, "nilearn.plotting.displays.YZSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.yzslicer method)": [[368, "nilearn.plotting.displays.YZSlicer.savefig"]], "title() (nilearn.plotting.displays.yzslicer method)": [[368, "nilearn.plotting.displays.YZSlicer.title"]], "zprojector (class in nilearn.plotting.displays)": [[369, "nilearn.plotting.displays.ZProjector"]], "__init__() (nilearn.plotting.displays.zprojector method)": [[369, "nilearn.plotting.displays.ZProjector.__init__"]], "add_contours() (nilearn.plotting.displays.zprojector method)": [[369, "nilearn.plotting.displays.ZProjector.add_contours"]], "add_edges() (nilearn.plotting.displays.zprojector method)": [[369, "nilearn.plotting.displays.ZProjector.add_edges"]], "add_graph() (nilearn.plotting.displays.zprojector method)": [[369, "nilearn.plotting.displays.ZProjector.add_graph"]], "add_markers() (nilearn.plotting.displays.zprojector method)": [[369, "nilearn.plotting.displays.ZProjector.add_markers"]], "add_overlay() (nilearn.plotting.displays.zprojector method)": [[369, "nilearn.plotting.displays.ZProjector.add_overlay"]], "annotate() (nilearn.plotting.displays.zprojector method)": [[369, "nilearn.plotting.displays.ZProjector.annotate"]], "black_bg (nilearn.plotting.displays.zprojector property)": [[369, "nilearn.plotting.displays.ZProjector.black_bg"]], "brain_color (nilearn.plotting.displays.zprojector property)": [[369, "nilearn.plotting.displays.ZProjector.brain_color"]], "close() (nilearn.plotting.displays.zprojector method)": [[369, "nilearn.plotting.displays.ZProjector.close"]], "draw_cross() (nilearn.plotting.displays.zprojector method)": [[369, "nilearn.plotting.displays.ZProjector.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.zprojector class method)": [[369, "nilearn.plotting.displays.ZProjector.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.zprojector class method)": [[369, "nilearn.plotting.displays.ZProjector.init_with_figure"]], "savefig() (nilearn.plotting.displays.zprojector method)": [[369, "nilearn.plotting.displays.ZProjector.savefig"]], "title() (nilearn.plotting.displays.zprojector method)": [[369, "nilearn.plotting.displays.ZProjector.title"]], "zslicer (class in nilearn.plotting.displays)": [[370, "nilearn.plotting.displays.ZSlicer"]], "__init__() (nilearn.plotting.displays.zslicer method)": [[370, "nilearn.plotting.displays.ZSlicer.__init__"]], "add_contours() (nilearn.plotting.displays.zslicer method)": [[370, "nilearn.plotting.displays.ZSlicer.add_contours"]], "add_edges() (nilearn.plotting.displays.zslicer method)": [[370, "nilearn.plotting.displays.ZSlicer.add_edges"]], "add_markers() (nilearn.plotting.displays.zslicer method)": [[370, "nilearn.plotting.displays.ZSlicer.add_markers"]], "add_overlay() (nilearn.plotting.displays.zslicer method)": [[370, "nilearn.plotting.displays.ZSlicer.add_overlay"]], "annotate() (nilearn.plotting.displays.zslicer method)": [[370, "nilearn.plotting.displays.ZSlicer.annotate"]], "black_bg (nilearn.plotting.displays.zslicer property)": [[370, "nilearn.plotting.displays.ZSlicer.black_bg"]], "brain_color (nilearn.plotting.displays.zslicer property)": [[370, "nilearn.plotting.displays.ZSlicer.brain_color"]], "close() (nilearn.plotting.displays.zslicer method)": [[370, "nilearn.plotting.displays.ZSlicer.close"]], "draw_cross() (nilearn.plotting.displays.zslicer method)": [[370, "nilearn.plotting.displays.ZSlicer.draw_cross"]], "find_cut_coords() (nilearn.plotting.displays.zslicer class method)": [[370, "nilearn.plotting.displays.ZSlicer.find_cut_coords"]], "init_with_figure() (nilearn.plotting.displays.zslicer class method)": [[370, "nilearn.plotting.displays.ZSlicer.init_with_figure"]], "savefig() (nilearn.plotting.displays.zslicer method)": [[370, "nilearn.plotting.displays.ZSlicer.savefig"]], "title() (nilearn.plotting.displays.zslicer method)": [[370, "nilearn.plotting.displays.ZSlicer.title"]], "get_projector() (in module nilearn.plotting.displays)": [[371, "nilearn.plotting.displays.get_projector"]], "get_slicer() (in module nilearn.plotting.displays)": [[372, "nilearn.plotting.displays.get_slicer"]], "find_cut_slices() (in module nilearn.plotting)": [[373, "nilearn.plotting.find_cut_slices"]], "find_parcellation_cut_coords() (in module nilearn.plotting)": [[374, "nilearn.plotting.find_parcellation_cut_coords"]], "find_probabilistic_atlas_cut_coords() (in module nilearn.plotting)": [[375, "nilearn.plotting.find_probabilistic_atlas_cut_coords"]], "find_xyz_cut_coords() (in module nilearn.plotting)": [[376, "nilearn.plotting.find_xyz_cut_coords"]], "plot_anat() (in module nilearn.plotting)": [[377, "nilearn.plotting.plot_anat"]], "plot_carpet() (in module nilearn.plotting)": [[378, "nilearn.plotting.plot_carpet"]], "plot_connectome() (in module nilearn.plotting)": [[379, "nilearn.plotting.plot_connectome"]], "plot_contrast_matrix() (in module nilearn.plotting)": [[380, "nilearn.plotting.plot_contrast_matrix"]], "plot_design_matrix() (in module nilearn.plotting)": [[381, "nilearn.plotting.plot_design_matrix"]], "plot_epi() (in module nilearn.plotting)": [[382, "nilearn.plotting.plot_epi"]], "plot_event() (in module nilearn.plotting)": [[383, "nilearn.plotting.plot_event"]], "plot_glass_brain() (in module nilearn.plotting)": [[384, "nilearn.plotting.plot_glass_brain"]], "plot_img() (in module nilearn.plotting)": [[385, "nilearn.plotting.plot_img"]], "plot_img_comparison() (in module nilearn.plotting)": [[386, "nilearn.plotting.plot_img_comparison"]], "plot_img_on_surf() (in module nilearn.plotting)": [[387, "nilearn.plotting.plot_img_on_surf"]], "plot_markers() (in module nilearn.plotting)": [[388, "nilearn.plotting.plot_markers"]], "plot_matrix() (in module nilearn.plotting)": [[389, "nilearn.plotting.plot_matrix"]], "plot_prob_atlas() (in module nilearn.plotting)": [[390, "nilearn.plotting.plot_prob_atlas"]], "plot_roi() (in module nilearn.plotting)": [[391, "nilearn.plotting.plot_roi"]], "plot_stat_map() (in module nilearn.plotting)": [[392, "nilearn.plotting.plot_stat_map"]], "plot_surf() (in module nilearn.plotting)": [[393, "nilearn.plotting.plot_surf"]], "plot_surf_contours() (in module nilearn.plotting)": [[394, "nilearn.plotting.plot_surf_contours"]], "plot_surf_roi() (in module nilearn.plotting)": [[395, "nilearn.plotting.plot_surf_roi"]], "plot_surf_stat_map() (in module nilearn.plotting)": [[396, "nilearn.plotting.plot_surf_stat_map"]], "show() (in module nilearn.plotting)": [[397, "nilearn.plotting.show"]], "view_connectome() (in module nilearn.plotting)": [[398, "nilearn.plotting.view_connectome"]], "view_img() (in module nilearn.plotting)": [[399, "nilearn.plotting.view_img"]], "view_img_on_surf() (in module nilearn.plotting)": [[400, "nilearn.plotting.view_img_on_surf"]], "view_markers() (in module nilearn.plotting)": [[401, "nilearn.plotting.view_markers"]], "view_surf() (in module nilearn.plotting)": [[402, "nilearn.plotting.view_surf"]], "hierarchicalkmeans (class in nilearn.regions)": [[403, "nilearn.regions.HierarchicalKMeans"]], "__init__() (nilearn.regions.hierarchicalkmeans method)": [[403, "nilearn.regions.HierarchicalKMeans.__init__"]], "fit() (nilearn.regions.hierarchicalkmeans method)": [[403, "nilearn.regions.HierarchicalKMeans.fit"]], "fit_predict() (nilearn.regions.hierarchicalkmeans method)": [[403, "nilearn.regions.HierarchicalKMeans.fit_predict"]], "fit_transform() (nilearn.regions.hierarchicalkmeans method)": [[403, "nilearn.regions.HierarchicalKMeans.fit_transform"]], "get_metadata_routing() (nilearn.regions.hierarchicalkmeans method)": [[403, "nilearn.regions.HierarchicalKMeans.get_metadata_routing"]], "get_params() (nilearn.regions.hierarchicalkmeans method)": [[403, "nilearn.regions.HierarchicalKMeans.get_params"]], "inverse_transform() (nilearn.regions.hierarchicalkmeans method)": [[403, "nilearn.regions.HierarchicalKMeans.inverse_transform"]], "set_inverse_transform_request() (nilearn.regions.hierarchicalkmeans method)": [[403, "nilearn.regions.HierarchicalKMeans.set_inverse_transform_request"]], "set_output() (nilearn.regions.hierarchicalkmeans method)": [[403, "nilearn.regions.HierarchicalKMeans.set_output"]], "set_params() (nilearn.regions.hierarchicalkmeans method)": [[403, "nilearn.regions.HierarchicalKMeans.set_params"]], "transform() (nilearn.regions.hierarchicalkmeans method)": [[403, "nilearn.regions.HierarchicalKMeans.transform"]], "parcellations (class in nilearn.regions)": [[404, "nilearn.regions.Parcellations"]], "valid_methods (nilearn.regions.parcellations attribute)": [[404, "nilearn.regions.Parcellations.VALID_METHODS"]], "__init__() (nilearn.regions.parcellations method)": [[404, "nilearn.regions.Parcellations.__init__"]], "fit() (nilearn.regions.parcellations method)": [[404, "nilearn.regions.Parcellations.fit"]], "fit_transform() (nilearn.regions.parcellations method)": [[404, "nilearn.regions.Parcellations.fit_transform"]], "get_metadata_routing() (nilearn.regions.parcellations method)": [[404, "nilearn.regions.Parcellations.get_metadata_routing"]], "get_params() (nilearn.regions.parcellations method)": [[404, "nilearn.regions.Parcellations.get_params"]], "inverse_transform() (nilearn.regions.parcellations method)": [[404, "nilearn.regions.Parcellations.inverse_transform"]], "score() (nilearn.regions.parcellations method)": [[404, "nilearn.regions.Parcellations.score"]], "set_fit_request() (nilearn.regions.parcellations method)": [[404, "nilearn.regions.Parcellations.set_fit_request"]], "set_inverse_transform_request() (nilearn.regions.parcellations method)": [[404, "nilearn.regions.Parcellations.set_inverse_transform_request"]], "set_output() (nilearn.regions.parcellations method)": [[404, "nilearn.regions.Parcellations.set_output"]], "set_params() (nilearn.regions.parcellations method)": [[404, "nilearn.regions.Parcellations.set_params"]], "set_score_request() (nilearn.regions.parcellations method)": [[404, "nilearn.regions.Parcellations.set_score_request"]], "set_transform_request() (nilearn.regions.parcellations method)": [[404, "nilearn.regions.Parcellations.set_transform_request"]], "transform() (nilearn.regions.parcellations method)": [[404, "nilearn.regions.Parcellations.transform"]], "rena (class in nilearn.regions)": [[405, "nilearn.regions.ReNA"]], "__init__() (nilearn.regions.rena method)": [[405, "nilearn.regions.ReNA.__init__"]], "fit() (nilearn.regions.rena method)": [[405, "nilearn.regions.ReNA.fit"]], "fit_predict() (nilearn.regions.rena method)": [[405, "nilearn.regions.ReNA.fit_predict"]], "fit_transform() (nilearn.regions.rena method)": [[405, "nilearn.regions.ReNA.fit_transform"]], "get_metadata_routing() (nilearn.regions.rena method)": [[405, "nilearn.regions.ReNA.get_metadata_routing"]], "get_params() (nilearn.regions.rena method)": [[405, "nilearn.regions.ReNA.get_params"]], "inverse_transform() (nilearn.regions.rena method)": [[405, "nilearn.regions.ReNA.inverse_transform"]], "set_inverse_transform_request() (nilearn.regions.rena method)": [[405, "nilearn.regions.ReNA.set_inverse_transform_request"]], "set_output() (nilearn.regions.rena method)": [[405, "nilearn.regions.ReNA.set_output"]], "set_params() (nilearn.regions.rena method)": [[405, "nilearn.regions.ReNA.set_params"]], "transform() (nilearn.regions.rena method)": [[405, "nilearn.regions.ReNA.transform"]], "regionextractor (class in nilearn.regions)": [[406, "nilearn.regions.RegionExtractor"]], "__init__() (nilearn.regions.regionextractor method)": [[406, "nilearn.regions.RegionExtractor.__init__"]], "fit() (nilearn.regions.regionextractor method)": [[406, "nilearn.regions.RegionExtractor.fit"]], "fit_transform() (nilearn.regions.regionextractor method)": [[406, "nilearn.regions.RegionExtractor.fit_transform"]], "generate_report() (nilearn.regions.regionextractor method)": [[406, "nilearn.regions.RegionExtractor.generate_report"]], "get_metadata_routing() (nilearn.regions.regionextractor method)": [[406, "nilearn.regions.RegionExtractor.get_metadata_routing"]], "get_params() (nilearn.regions.regionextractor method)": [[406, "nilearn.regions.RegionExtractor.get_params"]], "inverse_transform() (nilearn.regions.regionextractor method)": [[406, "nilearn.regions.RegionExtractor.inverse_transform"]], "set_fit_request() (nilearn.regions.regionextractor method)": [[406, "nilearn.regions.RegionExtractor.set_fit_request"]], "set_inverse_transform_request() (nilearn.regions.regionextractor method)": [[406, "nilearn.regions.RegionExtractor.set_inverse_transform_request"]], "set_output() (nilearn.regions.regionextractor method)": [[406, "nilearn.regions.RegionExtractor.set_output"]], "set_params() (nilearn.regions.regionextractor method)": [[406, "nilearn.regions.RegionExtractor.set_params"]], "set_transform_request() (nilearn.regions.regionextractor method)": [[406, "nilearn.regions.RegionExtractor.set_transform_request"]], "transform() (nilearn.regions.regionextractor method)": [[406, "nilearn.regions.RegionExtractor.transform"]], "transform_single_imgs() (nilearn.regions.regionextractor method)": [[406, "nilearn.regions.RegionExtractor.transform_single_imgs"]], "connected_label_regions() (in module nilearn.regions)": [[407, "nilearn.regions.connected_label_regions"]], "connected_regions() (in module nilearn.regions)": [[408, "nilearn.regions.connected_regions"]], "img_to_signals_labels() (in module nilearn.regions)": [[409, "nilearn.regions.img_to_signals_labels"]], "img_to_signals_maps() (in module nilearn.regions)": [[410, "nilearn.regions.img_to_signals_maps"]], "recursive_neighbor_agglomeration() (in module nilearn.regions)": [[411, "nilearn.regions.recursive_neighbor_agglomeration"]], "signals_to_img_labels() (in module nilearn.regions)": [[412, "nilearn.regions.signals_to_img_labels"]], "signals_to_img_maps() (in module nilearn.regions)": [[413, "nilearn.regions.signals_to_img_maps"]], "htmlreport (class in nilearn.reporting)": [[414, "nilearn.reporting.HTMLReport"]], "__init__() (nilearn.reporting.htmlreport method)": [[414, "nilearn.reporting.HTMLReport.__init__"]], "get_iframe() (nilearn.reporting.htmlreport method)": [[414, "nilearn.reporting.HTMLReport.get_iframe"]], "get_standalone() (nilearn.reporting.htmlreport method)": [[414, "nilearn.reporting.HTMLReport.get_standalone"]], "open_in_browser() (nilearn.reporting.htmlreport method)": [[414, "nilearn.reporting.HTMLReport.open_in_browser"]], "remove_temp_file() (nilearn.reporting.htmlreport method)": [[414, "nilearn.reporting.HTMLReport.remove_temp_file"]], "resize() (nilearn.reporting.htmlreport method)": [[414, "nilearn.reporting.HTMLReport.resize"]], "save_as_html() (nilearn.reporting.htmlreport method)": [[414, "nilearn.reporting.HTMLReport.save_as_html"]], "get_clusters_table() (in module nilearn.reporting)": [[415, "nilearn.reporting.get_clusters_table"]], "make_glm_report() (in module nilearn.reporting)": [[416, "nilearn.reporting.make_glm_report"]], "butterworth() (in module nilearn.signal)": [[417, "nilearn.signal.butterworth"]], "clean() (in module nilearn.signal)": [[418, "nilearn.signal.clean"]], "high_variance_confounds() (in module nilearn.signal)": [[419, "nilearn.signal.high_variance_confounds"]], "load_surf_data() (in module nilearn.surface)": [[420, "nilearn.surface.load_surf_data"]], "load_surf_mesh() (in module nilearn.surface)": [[421, "nilearn.surface.load_surf_mesh"]], "vol_to_surf() (in module nilearn.surface)": [[422, "nilearn.surface.vol_to_surf"]], "nilearn.glm": [[423, "module-nilearn.glm"]], "nilearn.glm.first_level": [[423, "module-nilearn.glm.first_level"]], "nilearn.glm.second_level": [[423, "module-nilearn.glm.second_level"]], "nilearn.image": [[424, "module-nilearn.image"]], "nilearn.interfaces": [[426, "module-nilearn.interfaces"]], "nilearn.interfaces.bids": [[426, "module-nilearn.interfaces.bids"]], "nilearn.interfaces.fmriprep": [[426, "module-nilearn.interfaces.fmriprep"]], "nilearn.interfaces.fsl": [[426, "module-nilearn.interfaces.fsl"]], "nilearn.maskers": [[427, "module-nilearn.maskers"]], "nilearn.masking": [[428, "module-nilearn.masking"]], "nilearn.mass_univariate": [[429, "module-nilearn.mass_univariate"]], "nilearn.plotting": [[430, "module-nilearn.plotting"]], "nilearn.plotting.displays": [[430, "module-nilearn.plotting.displays"]], "nilearn.regions": [[431, "module-nilearn.regions"]], "nilearn.reporting": [[432, "module-nilearn.reporting"]], "nilearn.signal": [[433, "module-nilearn.signal"]], "nilearn.surface": [[434, "module-nilearn.surface"]]}})
