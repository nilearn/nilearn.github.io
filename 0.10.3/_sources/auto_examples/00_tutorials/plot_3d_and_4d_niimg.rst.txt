
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/00_tutorials/plot_3d_and_4d_niimg.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_00_tutorials_plot_3d_and_4d_niimg.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_00_tutorials_plot_3d_and_4d_niimg.py:


3D and 4D niimgs: handling and visualizing
==========================================

Here we discover how to work with 3D and 4D niimgs.

.. GENERATED FROM PYTHON SOURCE LINES 9-15

Downloading tutorial datasets from Internet
-------------------------------------------

Nilearn comes with functions that download public data from Internet

Let's first check where the data is downloaded on our disk:

.. GENERATED FROM PYTHON SOURCE LINES 15-19

.. code-block:: Python

    from nilearn import datasets

    print(f"Datasets are stored in: {datasets.get_data_dirs()!r}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Datasets are stored in: ['/home/remi/nilearn_data']




.. GENERATED FROM PYTHON SOURCE LINES 20-22

Let's now retrieve a motor :term:`contrast`
from a :term:`Neurovault` repository

.. GENERATED FROM PYTHON SOURCE LINES 22-25

.. code-block:: Python

    motor_images = datasets.fetch_neurovault_motor_task()
    motor_images.images





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ['/home/remi/nilearn_data/neurovault/collection_658/image_10426.nii.gz']



.. GENERATED FROM PYTHON SOURCE LINES 26-27

motor_images is a list of filenames. We need to take the first one

.. GENERATED FROM PYTHON SOURCE LINES 27-30

.. code-block:: Python

    tmap_filename = motor_images.images[0]









.. GENERATED FROM PYTHON SOURCE LINES 31-36

Visualizing a 3D file
---------------------

The file contains a 3D volume, we can easily visualize it as a
statistical map:

.. GENERATED FROM PYTHON SOURCE LINES 36-40

.. code-block:: Python

    from nilearn import plotting

    plotting.plot_stat_map(tmap_filename)




.. image-sg:: /auto_examples/00_tutorials/images/sphx_glr_plot_3d_and_4d_niimg_001.png
   :alt: plot 3d and 4d niimg
   :srcset: /auto_examples/00_tutorials/images/sphx_glr_plot_3d_and_4d_niimg_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <nilearn.plotting.displays._slicers.OrthoSlicer object at 0x7fb3b1fb3f10>



.. GENERATED FROM PYTHON SOURCE LINES 41-42

Visualizing works better with a threshold

.. GENERATED FROM PYTHON SOURCE LINES 42-45

.. code-block:: Python

    plotting.plot_stat_map(tmap_filename, threshold=3)





.. image-sg:: /auto_examples/00_tutorials/images/sphx_glr_plot_3d_and_4d_niimg_002.png
   :alt: plot 3d and 4d niimg
   :srcset: /auto_examples/00_tutorials/images/sphx_glr_plot_3d_and_4d_niimg_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <nilearn.plotting.displays._slicers.OrthoSlicer object at 0x7fb3b16fe610>



.. GENERATED FROM PYTHON SOURCE LINES 46-51

Visualizing one volume in a 4D file
-----------------------------------

We can download :term:`resting-state` networks from the Smith 2009 study on
correspondence between rest and task

.. GENERATED FROM PYTHON SOURCE LINES 51-54

.. code-block:: Python

    rsn = datasets.fetch_atlas_smith_2009(resting=True, dimension=10)["maps"]
    rsn





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    '/home/remi/nilearn_data/smith_2009/PNAS_Smith09_rsn10.nii.gz'



.. GENERATED FROM PYTHON SOURCE LINES 55-57

It is a 4D nifti file. We load it into the memory to print its
shape.

.. GENERATED FROM PYTHON SOURCE LINES 57-61

.. code-block:: Python

    from nilearn import image

    print(image.load_img(rsn).shape)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (91, 109, 91, 10)




.. GENERATED FROM PYTHON SOURCE LINES 62-63

We can retrieve the first volume (note that Python indexing starts at 0):

.. GENERATED FROM PYTHON SOURCE LINES 63-66

.. code-block:: Python

    first_rsn = image.index_img(rsn, 0)
    print(first_rsn.shape)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (91, 109, 91)




.. GENERATED FROM PYTHON SOURCE LINES 67-70

first_rsn is a 3D image.

We can then plot it

.. GENERATED FROM PYTHON SOURCE LINES 70-73

.. code-block:: Python

    plotting.plot_stat_map(first_rsn)





.. image-sg:: /auto_examples/00_tutorials/images/sphx_glr_plot_3d_and_4d_niimg_003.png
   :alt: plot 3d and 4d niimg
   :srcset: /auto_examples/00_tutorials/images/sphx_glr_plot_3d_and_4d_niimg_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <nilearn.plotting.displays._slicers.OrthoSlicer object at 0x7fb3b15cfb90>



.. GENERATED FROM PYTHON SOURCE LINES 74-82

Looping on all volumes in a 4D file
-----------------------------------

If we want to plot all the volumes in this 4D file, we can use iter_img
to loop on them.

Then we give a few arguments to plot_stat_map in order to have a more
compact display.

.. GENERATED FROM PYTHON SOURCE LINES 82-89

.. code-block:: Python

    for img in image.iter_img(rsn):
        # img is now an in-memory 3D img
        plotting.plot_stat_map(
            img, threshold=3, display_mode="z", cut_coords=1, colorbar=False
        )





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/00_tutorials/images/sphx_glr_plot_3d_and_4d_niimg_004.png
         :alt: plot 3d and 4d niimg
         :srcset: /auto_examples/00_tutorials/images/sphx_glr_plot_3d_and_4d_niimg_004.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/00_tutorials/images/sphx_glr_plot_3d_and_4d_niimg_005.png
         :alt: plot 3d and 4d niimg
         :srcset: /auto_examples/00_tutorials/images/sphx_glr_plot_3d_and_4d_niimg_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/00_tutorials/images/sphx_glr_plot_3d_and_4d_niimg_006.png
         :alt: plot 3d and 4d niimg
         :srcset: /auto_examples/00_tutorials/images/sphx_glr_plot_3d_and_4d_niimg_006.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/00_tutorials/images/sphx_glr_plot_3d_and_4d_niimg_007.png
         :alt: plot 3d and 4d niimg
         :srcset: /auto_examples/00_tutorials/images/sphx_glr_plot_3d_and_4d_niimg_007.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/00_tutorials/images/sphx_glr_plot_3d_and_4d_niimg_008.png
         :alt: plot 3d and 4d niimg
         :srcset: /auto_examples/00_tutorials/images/sphx_glr_plot_3d_and_4d_niimg_008.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/00_tutorials/images/sphx_glr_plot_3d_and_4d_niimg_009.png
         :alt: plot 3d and 4d niimg
         :srcset: /auto_examples/00_tutorials/images/sphx_glr_plot_3d_and_4d_niimg_009.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/00_tutorials/images/sphx_glr_plot_3d_and_4d_niimg_010.png
         :alt: plot 3d and 4d niimg
         :srcset: /auto_examples/00_tutorials/images/sphx_glr_plot_3d_and_4d_niimg_010.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/00_tutorials/images/sphx_glr_plot_3d_and_4d_niimg_011.png
         :alt: plot 3d and 4d niimg
         :srcset: /auto_examples/00_tutorials/images/sphx_glr_plot_3d_and_4d_niimg_011.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/00_tutorials/images/sphx_glr_plot_3d_and_4d_niimg_012.png
         :alt: plot 3d and 4d niimg
         :srcset: /auto_examples/00_tutorials/images/sphx_glr_plot_3d_and_4d_niimg_012.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/00_tutorials/images/sphx_glr_plot_3d_and_4d_niimg_013.png
         :alt: plot 3d and 4d niimg
         :srcset: /auto_examples/00_tutorials/images/sphx_glr_plot_3d_and_4d_niimg_013.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 90-98

Looping through selected volumes in a 4D file
---------------------------------------------

If we want to plot selected volumes in this 4D file, we can use index_img
with the `slice` constructor to select the desired volumes.

Afterwards, we'll use iter_img to loop through them following the same
formula as before.

.. GENERATED FROM PYTHON SOURCE LINES 98-100

.. code-block:: Python

    selected_volumes = image.index_img(rsn, slice(3, 5))








.. GENERATED FROM PYTHON SOURCE LINES 101-104

If you're new to Python, one thing to note is that the slice constructor
uses 0-based indexing. You can confirm this by matching these slices
to the previous plot above.

.. GENERATED FROM PYTHON SOURCE LINES 104-109

.. code-block:: Python


    for img in image.iter_img(selected_volumes):
        plotting.plot_stat_map(img)





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/00_tutorials/images/sphx_glr_plot_3d_and_4d_niimg_014.png
         :alt: plot 3d and 4d niimg
         :srcset: /auto_examples/00_tutorials/images/sphx_glr_plot_3d_and_4d_niimg_014.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/00_tutorials/images/sphx_glr_plot_3d_and_4d_niimg_015.png
         :alt: plot 3d and 4d niimg
         :srcset: /auto_examples/00_tutorials/images/sphx_glr_plot_3d_and_4d_niimg_015.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 110-112

plotting.show is useful to force the display of figures when running
outside IPython

.. GENERATED FROM PYTHON SOURCE LINES 112-114

.. code-block:: Python

    plotting.show()








.. GENERATED FROM PYTHON SOURCE LINES 115-133

|

______

To recap, neuroimaging images (niimgs as we call them) come in
different flavors:

* 3D images, containing only one brain volume
* 4D images, containing multiple brain volumes.

More details about the input formats in nilearn for 3D and 4D images is
given in the documentation section: :ref:`loading_data`.

Functions accept either 3D or 4D images, and we need to use on the one
hand :func:`nilearn.image.index_img` or :func:`nilearn.image.iter_img`
to break down 4D images into 3D images, and on the other hand
:func:`nilearn.image.concat_imgs` to group a list of 3D images into a 4D
image.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 17.030 seconds)

**Estimated memory usage:**  246 MB


.. _sphx_glr_download_auto_examples_00_tutorials_plot_3d_and_4d_niimg.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/0.10.3?urlpath=lab/tree/notebooks/auto_examples/00_tutorials/plot_3d_and_4d_niimg.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_3d_and_4d_niimg.ipynb <plot_3d_and_4d_niimg.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_3d_and_4d_niimg.py <plot_3d_and_4d_niimg.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
