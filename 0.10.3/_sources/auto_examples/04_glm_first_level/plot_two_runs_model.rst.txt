
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/04_glm_first_level/plot_two_runs_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_04_glm_first_level_plot_two_runs_model.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_04_glm_first_level_plot_two_runs_model.py:


Simple example of two-runs fMRI model fitting
=============================================

Here, we will go through a full step-by-step example of fitting a GLM
to experimental data and visualizing the results.
This is done on two runs of one subject of the FIAC dataset.

For more details on the data,
please see experiment 2 in :footcite:t:`dehaene2006functional`.

Here are the steps we will go through:

1. Set up the GLM
2. Compare run-specific and fixed effects contrasts
3. Compute a range of contrasts across both runs
4. Generate a report

Technically, this example shows how to handle two runs
that contain the same experimental conditions.
The model directly returns a fixed effect
of the statistics across the two runs.

.. GENERATED FROM PYTHON SOURCE LINES 26-27

Create an output ``results`` in the current working directory.

.. GENERATED FROM PYTHON SOURCE LINES 27-34

.. code-block:: Python

    from pathlib import Path

    output_dir = Path.cwd() / "results" / "plot_two_runs_model"
    output_dir.mkdir(exist_ok=True, parents=True)
    print(f"Output will be saved to: {output_dir}")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Output will be saved to: /home/remi/github/nilearn/nilearn/examples/04_glm_first_level/results/plot_two_runs_model




.. GENERATED FROM PYTHON SOURCE LINES 35-39

Set up the GLM
--------------
Inspecting 'data', we note that there are two runs.
We will retain those two runs in a list of 4D img objects.

.. GENERATED FROM PYTHON SOURCE LINES 39-44

.. code-block:: Python

    from nilearn.datasets import func

    data = func.fetch_fiac_first_level()
    fmri_imgs = [data["func1"], data["func2"]]








.. GENERATED FROM PYTHON SOURCE LINES 45-46

Create a mean image for plotting purpose.

.. GENERATED FROM PYTHON SOURCE LINES 46-50

.. code-block:: Python

    from nilearn.image import mean_img

    mean_img_ = mean_img(fmri_imgs[0])








.. GENERATED FROM PYTHON SOURCE LINES 51-53

The design matrices were pre-computed,
we simply put them in a list of DataFrames.

.. GENERATED FROM PYTHON SOURCE LINES 53-60

.. code-block:: Python

    import numpy as np
    import pandas as pd

    design_files = [data["design_matrix1"], data["design_matrix2"]]
    design_matrices = [pd.DataFrame(np.load(df)["X"]) for df in design_files]









.. GENERATED FROM PYTHON SOURCE LINES 61-66

Initialize and run the GLM
--------------------------
First, we need to specify the model before fitting it to the data.
Note that a brain mask was provided in the dataset,
so that is what we will use.

.. GENERATED FROM PYTHON SOURCE LINES 66-74

.. code-block:: Python

    from nilearn.glm.first_level import FirstLevelModel

    fmri_glm = FirstLevelModel(
        mask_img=data["mask"],
        smoothing_fwhm=5,
        minimize_memory=True,
    )








.. GENERATED FROM PYTHON SOURCE LINES 75-80

Compare run-specific and fixed effects contrasts
------------------------------------------------
We can then compare run-specific and fixed effects.
Here, we compare the activation produced from each run separately
and then the fixed effects version.

.. GENERATED FROM PYTHON SOURCE LINES 80-83

.. code-block:: Python

    cut_coords = [-129, -126, 49]
    contrast_id = "DSt_minus_SSt"








.. GENERATED FROM PYTHON SOURCE LINES 84-85

Compute the statistics for the first run.

.. GENERATED FROM PYTHON SOURCE LINES 85-104

.. code-block:: Python

    from nilearn import plotting

    # Here, we define the contrast of interest for the first run.
    # This may differ across runs depending on if the design matrices vary.
    contrast_val = [[-1, -1, 1, 1]]

    fmri_glm_run_1 = fmri_glm.fit(fmri_imgs[0], design_matrices=design_matrices[0])
    summary_statistics_run_1 = fmri_glm_run_1.compute_contrast(
        contrast_val,
        output_type="all",
    )
    plotting.plot_stat_map(
        summary_statistics_run_1["z_score"],
        bg_img=mean_img_,
        threshold=3.0,
        cut_coords=cut_coords,
        title=f"{contrast_id}, first run",
    )




.. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_two_runs_model_001.png
   :alt: plot two runs model
   :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_two_runs_model_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/remi/github/nilearn/nilearn/env/lib/python3.11/site-packages/nilearn/glm/contrasts.py:108: UserWarning:

    t contrasts should be of length P=13, but it has length 4. The rest of the contrast was padded with zeros.


    <nilearn.plotting.displays._slicers.OrthoSlicer object at 0x7fb3b2712cd0>



.. GENERATED FROM PYTHON SOURCE LINES 105-106

Compute the statistics for the second run.

.. GENERATED FROM PYTHON SOURCE LINES 106-122

.. code-block:: Python

    fmri_glm_run_2 = fmri_glm.fit(fmri_imgs[1], design_matrices=design_matrices[1])

    contrast_val = np.array([[-1, -1, 1, 1]])

    summary_statistics_run_2 = fmri_glm_run_2.compute_contrast(
        contrast_val,
        output_type="all",
    )
    plotting.plot_stat_map(
        summary_statistics_run_2["z_score"],
        bg_img=mean_img_,
        threshold=3.0,
        cut_coords=cut_coords,
        title=f"{contrast_id}, second run",
    )




.. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_two_runs_model_002.png
   :alt: plot two runs model
   :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_two_runs_model_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/remi/github/nilearn/nilearn/env/lib/python3.11/site-packages/nilearn/glm/contrasts.py:108: UserWarning:

    t contrasts should be of length P=13, but it has length 4. The rest of the contrast was padded with zeros.


    <nilearn.plotting.displays._slicers.OrthoSlicer object at 0x7fb3b2712910>



.. GENERATED FROM PYTHON SOURCE LINES 123-129

Compute the fixed effects statistics
using the statistical maps of both runs.

We can use :func:`~nilearn.glm.compute_fixed_effects` to compute
the fixed effects statistics using the outputs
from the run-specific FirstLevelModel results.

.. GENERATED FROM PYTHON SOURCE LINES 129-153

.. code-block:: Python

    from nilearn.glm.contrasts import compute_fixed_effects

    contrast_imgs = [
        summary_statistics_run_1["effect_size"],
        summary_statistics_run_2["effect_size"],
    ]
    variance_imgs = [
        summary_statistics_run_1["effect_variance"],
        summary_statistics_run_2["effect_variance"],
    ]

    fixed_fx_contrast, fixed_fx_variance, fixed_fx_stat = compute_fixed_effects(
        contrast_imgs,
        variance_imgs,
        data["mask"],
    )
    plotting.plot_stat_map(
        fixed_fx_stat,
        bg_img=mean_img_,
        threshold=3.0,
        cut_coords=cut_coords,
        title=f"{contrast_id}, fixed effects",
    )




.. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_two_runs_model_003.png
   :alt: plot two runs model
   :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_two_runs_model_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <nilearn.plotting.displays._slicers.OrthoSlicer object at 0x7fb383c4bc10>



.. GENERATED FROM PYTHON SOURCE LINES 154-158

Not unexpectedly, the fixed effects version displays higher peaks
than the input runs.
Computing fixed effects enhances the signal-to-noise ratio
of the resulting brain maps.

.. GENERATED FROM PYTHON SOURCE LINES 160-170

Compute the fixed effects statistics
using the preprocessed data of both runs.

A more straightforward alternative to fitting run-specific GLMs,
than combining the results with :func:`~nilearn.glm.compute_fixed_effects`,
is to simply fit the GLM to both runs at once.

Since we can assume that the design matrices of both runs
have the same columns, in the same order,
we can again reuse the first run's contrast vector.

.. GENERATED FROM PYTHON SOURCE LINES 170-195

.. code-block:: Python

    fmri_glm_multirun = fmri_glm.fit(fmri_imgs, design_matrices=design_matrices)

    # We can just define the contrast array for one run and assume
    # that the design matrix is the same for the other.
    # However, if we want to be safe, we should define each contrast separately,
    # and provide it as a list.
    contrast_val = [
        np.array([[-1, -1, 1, 1]]),  # run 1
        np.array([[-1, -1, 1, 1]]),  # run 2
    ]

    z_map = fmri_glm_multirun.compute_contrast(
        contrast_val,
        output_type="z_score",
    )
    plotting.plot_stat_map(
        z_map,
        bg_img=mean_img_,
        threshold=3.0,
        cut_coords=cut_coords,
        title=f"{contrast_id}, fixed effects",
    )

    plotting.show()




.. image-sg:: /auto_examples/04_glm_first_level/images/sphx_glr_plot_two_runs_model_004.png
   :alt: plot two runs model
   :srcset: /auto_examples/04_glm_first_level/images/sphx_glr_plot_two_runs_model_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/remi/github/nilearn/nilearn/env/lib/python3.11/site-packages/nilearn/glm/contrasts.py:108: UserWarning:

    t contrasts should be of length P=13, but it has length 4. The rest of the contrast was padded with zeros.





.. GENERATED FROM PYTHON SOURCE LINES 196-198

You may note that the results are the same as the first fixed effects
analysis, but with a lot less code.

.. GENERATED FROM PYTHON SOURCE LINES 200-205

Compute a range of contrasts across both runs
---------------------------------------------
It may be useful to investigate a number of contrasts.
Therefore, we will move beyond the original contrast of interest
and both define and compute several.

.. GENERATED FROM PYTHON SOURCE LINES 207-208

Contrast specification

.. GENERATED FROM PYTHON SOURCE LINES 208-220

.. code-block:: Python

    n_columns = design_matrices[0].shape[1]
    contrasts = {
        "SStSSp_minus_DStDSp": np.array([[1, 0, 0, -1]]),
        "DStDSp_minus_SStSSp": np.array([[-1, 0, 0, 1]]),
        "DSt_minus_SSt": np.array([[-1, -1, 1, 1]]),
        "DSp_minus_SSp": np.array([[-1, 1, -1, 1]]),
        "DSt_minus_SSt_for_DSp": np.array([[0, -1, 0, 1]]),
        "DSp_minus_SSp_for_DSt": np.array([[0, 0, -1, 1]]),
        "Deactivation": np.array([[-1, -1, -1, -1, 4]]),
        "Effects_of_interest": np.eye(n_columns)[:5, :],  # An F-contrast
    }








.. GENERATED FROM PYTHON SOURCE LINES 221-222

Next, we compute and plot the statistics for these new contrasts.

.. GENERATED FROM PYTHON SOURCE LINES 222-233

.. code-block:: Python


    print("Computing contrasts...")
    for index, (contrast_id, contrast_val) in enumerate(contrasts.items()):
        print(f"  Contrast {index + 1:02g} out of {len(contrasts)}: {contrast_id}")
        # Estimate the contasts.
        z_map = fmri_glm.compute_contrast(contrast_val, output_type="z_score")

        # Write the resulting stat images to file.
        z_image_path = output_dir / f"{contrast_id}_z_map.nii.gz"
        z_map.to_filename(z_image_path)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computing contrasts...
      Contrast 01 out of 8: SStSSp_minus_DStDSp
    /home/remi/github/nilearn/nilearn/examples/04_glm_first_level/plot_two_runs_model.py:227: UserWarning:

    One contrast given, assuming it for all 2 runs

      Contrast 02 out of 8: DStDSp_minus_SStSSp
      Contrast 03 out of 8: DSt_minus_SSt
      Contrast 04 out of 8: DSp_minus_SSp
      Contrast 05 out of 8: DSt_minus_SSt_for_DSp
      Contrast 06 out of 8: DSp_minus_SSp_for_DSt
      Contrast 07 out of 8: Deactivation
    /home/remi/github/nilearn/nilearn/env/lib/python3.11/site-packages/nilearn/glm/contrasts.py:108: UserWarning:

    t contrasts should be of length P=13, but it has length 5. The rest of the contrast was padded with zeros.

      Contrast 08 out of 8: Effects_of_interest
    /home/remi/github/nilearn/nilearn/env/lib/python3.11/site-packages/nilearn/glm/contrasts.py:159: UserWarning:

    Running approximate fixed effects on F statistics.





.. GENERATED FROM PYTHON SOURCE LINES 234-239

Generating a report
-------------------
Since we have already computed the FirstLevelModel
and have a number of contrasts,
we can quickly create a summary report.

.. GENERATED FROM PYTHON SOURCE LINES 239-245

.. code-block:: Python

    report = fmri_glm_multirun.generate_report(
        contrasts,
        bg_img=mean_img_,
        title="two-runs fMRI model fitting",
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/remi/github/nilearn/nilearn/env/lib/python3.11/site-packages/nilearn/reporting/glm_reporter.py:384: UserWarning:

    Contrasts will be padded with 9 column(s) of zeros.

    /home/remi/github/nilearn/nilearn/env/lib/python3.11/site-packages/nilearn/reporting/glm_reporter.py:384: UserWarning:

    Contrasts will be padded with 9 column(s) of zeros.

    /home/remi/github/nilearn/nilearn/env/lib/python3.11/site-packages/nilearn/reporting/glm_reporter.py:384: UserWarning:

    Contrasts will be padded with 9 column(s) of zeros.

    /home/remi/github/nilearn/nilearn/env/lib/python3.11/site-packages/nilearn/reporting/glm_reporter.py:384: UserWarning:

    Contrasts will be padded with 9 column(s) of zeros.

    /home/remi/github/nilearn/nilearn/env/lib/python3.11/site-packages/nilearn/reporting/glm_reporter.py:384: UserWarning:

    Contrasts will be padded with 9 column(s) of zeros.

    /home/remi/github/nilearn/nilearn/env/lib/python3.11/site-packages/nilearn/reporting/glm_reporter.py:384: UserWarning:

    Contrasts will be padded with 9 column(s) of zeros.

    /home/remi/github/nilearn/nilearn/env/lib/python3.11/site-packages/nilearn/reporting/glm_reporter.py:384: UserWarning:

    Contrasts will be padded with 8 column(s) of zeros.

    /home/remi/github/nilearn/nilearn/env/lib/python3.11/site-packages/nilearn/reporting/glm_reporter.py:384: UserWarning:

    Contrasts will be padded with 9 column(s) of zeros.

    /home/remi/github/nilearn/nilearn/env/lib/python3.11/site-packages/nilearn/reporting/glm_reporter.py:384: UserWarning:

    Contrasts will be padded with 9 column(s) of zeros.

    /home/remi/github/nilearn/nilearn/env/lib/python3.11/site-packages/nilearn/reporting/glm_reporter.py:384: UserWarning:

    Contrasts will be padded with 9 column(s) of zeros.

    /home/remi/github/nilearn/nilearn/env/lib/python3.11/site-packages/nilearn/reporting/glm_reporter.py:384: UserWarning:

    Contrasts will be padded with 9 column(s) of zeros.

    /home/remi/github/nilearn/nilearn/env/lib/python3.11/site-packages/nilearn/reporting/glm_reporter.py:384: UserWarning:

    Contrasts will be padded with 9 column(s) of zeros.

    /home/remi/github/nilearn/nilearn/env/lib/python3.11/site-packages/nilearn/reporting/glm_reporter.py:384: UserWarning:

    Contrasts will be padded with 9 column(s) of zeros.

    /home/remi/github/nilearn/nilearn/env/lib/python3.11/site-packages/nilearn/reporting/glm_reporter.py:384: UserWarning:

    Contrasts will be padded with 8 column(s) of zeros.

    /home/remi/github/nilearn/nilearn/env/lib/python3.11/site-packages/nilearn/reporting/glm_reporter.py:541: UserWarning:

    One contrast given, assuming it for all 2 runs

    /home/remi/github/nilearn/nilearn/env/lib/python3.11/site-packages/nilearn/glm/contrasts.py:108: UserWarning:

    t contrasts should be of length P=13, but it has length 4. The rest of the contrast was padded with zeros.

    /home/remi/github/nilearn/nilearn/env/lib/python3.11/site-packages/nilearn/glm/contrasts.py:108: UserWarning:

    t contrasts should be of length P=13, but it has length 5. The rest of the contrast was padded with zeros.

    /home/remi/github/nilearn/nilearn/env/lib/python3.11/site-packages/nilearn/glm/contrasts.py:159: UserWarning:

    Running approximate fixed effects on F statistics.





.. GENERATED FROM PYTHON SOURCE LINES 246-247

We have several ways to access the report:

.. GENERATED FROM PYTHON SOURCE LINES 247-257

.. code-block:: Python


    # report  # This report can be viewed in a notebook
    # report.open_in_browser()

    # or we can save as an html file
    # from pathlib import Path
    # output_dir = Path.cwd() / "results" / "plot_oasis"
    # output_dir.mkdir(exist_ok=True, parents=True)
    # report.save_as_html(output_dir / 'report.html')








.. GENERATED FROM PYTHON SOURCE LINES 258-262

References
----------

 .. footbibliography::


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 7.931 seconds)

**Estimated memory usage:**  626 MB


.. _sphx_glr_download_auto_examples_04_glm_first_level_plot_two_runs_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/0.10.3?urlpath=lab/tree/notebooks/auto_examples/04_glm_first_level/plot_two_runs_model.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_two_runs_model.ipynb <plot_two_runs_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_two_runs_model.py <plot_two_runs_model.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
