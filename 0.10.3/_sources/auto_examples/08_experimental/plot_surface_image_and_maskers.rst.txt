
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/08_experimental/plot_surface_image_and_maskers.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_08_experimental_plot_surface_image_and_maskers.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_08_experimental_plot_surface_image_and_maskers.py:


A short demo of the surface images & maskers
============================================

copied from the nilearn sandbox discussion, to be transformed into tests &
examples

.. note::

    this example is meant to support discussion around a tentative API for
    surface images in nilearn. This functionality is provided by the
    nilearn.experimental.surface module; it is still incomplete and subject to
    change without a deprecation cycle. Please participate in the discussion on
    GitHub!

.. GENERATED FROM PYTHON SOURCE LINES 17-23

.. code-block:: Python


    try:
        import matplotlib.pyplot as plt
    except ImportError:
        raise RuntimeError("This script needs the matplotlib library")








.. GENERATED FROM PYTHON SOURCE LINES 24-73

.. code-block:: Python


    from typing import Optional, Sequence

    from nilearn import plotting
    from nilearn.experimental import surface


    def plot_surf_img(
        img: surface.SurfaceImage,
        parts: Optional[Sequence[str]] = None,
        mesh: Optional[surface.PolyMesh] = None,
        **kwargs,
    ) -> plt.Figure:
        if mesh is None:
            mesh = img.mesh
        if parts is None:
            parts = list(img.data.keys())
        fig, axes = plt.subplots(
            1,
            len(parts),
            subplot_kw={"projection": "3d"},
            figsize=(4 * len(parts), 4),
        )
        for ax, mesh_part in zip(axes, parts):
            plotting.plot_surf(
                mesh[mesh_part],
                img.data[mesh_part],
                axes=ax,
                title=mesh_part,
                **kwargs,
            )
        assert isinstance(fig, plt.Figure)
        return fig


    img = surface.fetch_nki()[0]
    print(f"NKI image: {img}")

    masker = surface.SurfaceMasker()
    masked_data = masker.fit_transform(img)
    print(f"Masked data shape: {masked_data.shape}")

    mean_data = masked_data.mean(axis=0)
    mean_img = masker.inverse_transform(mean_data)
    print(f"Image mean: {mean_img}")

    plot_surf_img(mean_img)
    plotting.show()




.. image-sg:: /auto_examples/08_experimental/images/sphx_glr_plot_surface_image_and_maskers_001.png
   :alt: left_hemisphere, right_hemisphere
   :srcset: /auto_examples/08_experimental/images/sphx_glr_plot_surface_image_and_maskers_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    NKI image: <SurfaceImage (895, 20484)>
    Masked data shape: (895, 20484)
    Image mean: <SurfaceImage (20484,)>




.. GENERATED FROM PYTHON SOURCE LINES 74-76

Connectivity with a surface atlas and `SurfaceLabelsMasker`
-----------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 76-97

.. code-block:: Python

    from nilearn import connectome, plotting

    img = surface.fetch_nki()[0]
    print(f"NKI image: {img}")

    labels_img, label_names = surface.fetch_destrieux()
    print(f"Destrieux image: {labels_img}")
    plot_surf_img(labels_img, cmap="gist_ncar", avg_method="median")

    labels_masker = surface.SurfaceLabelsMasker(labels_img, label_names).fit()
    masked_data = labels_masker.transform(img)
    print(f"Masked data shape: {masked_data.shape}")

    connectome = (
        connectome.ConnectivityMeasure(kind="correlation").fit([masked_data]).mean_
    )
    plotting.plot_matrix(connectome, labels=labels_masker.label_names_)

    plotting.show()





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/08_experimental/images/sphx_glr_plot_surface_image_and_maskers_002.png
         :alt: left_hemisphere, right_hemisphere
         :srcset: /auto_examples/08_experimental/images/sphx_glr_plot_surface_image_and_maskers_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/08_experimental/images/sphx_glr_plot_surface_image_and_maskers_003.png
         :alt: plot surface image and maskers
         :srcset: /auto_examples/08_experimental/images/sphx_glr_plot_surface_image_and_maskers_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    NKI image: <SurfaceImage (895, 20484)>
    Destrieux image: <SurfaceImage (20484,)>
    Masked data shape: (895, 75)




.. GENERATED FROM PYTHON SOURCE LINES 98-100

Using the `Decoder`
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 100-105

.. code-block:: Python

    import numpy as np

    from nilearn import decoding, plotting
    from nilearn._utils import param_validation








.. GENERATED FROM PYTHON SOURCE LINES 106-108

The following is just disabling a couple of checks performed by the decoder
that would force us to use a `NiftiMasker`.

.. GENERATED FROM PYTHON SOURCE LINES 108-119

.. code-block:: Python



    def monkeypatch_masker_checks():
        def adjust_screening_percentile(screening_percentile, *args, **kwargs):
            return screening_percentile

        param_validation.adjust_screening_percentile = adjust_screening_percentile


    monkeypatch_masker_checks()








.. GENERATED FROM PYTHON SOURCE LINES 120-122

Now using the appropriate masker we can use a `Decoder` on surface data just
as we do for volume images.

.. GENERATED FROM PYTHON SOURCE LINES 122-138

.. code-block:: Python


    img = surface.fetch_nki()[0]
    y = np.random.RandomState(0).choice([0, 1], replace=True, size=img.shape[0])

    decoder = decoding.Decoder(
        mask=surface.SurfaceMasker(),
        param_grid={"C": [0.01, 0.1]},
        cv=3,
        screening_percentile=1,
    )
    decoder.fit(img, y)
    print("CV scores:", decoder.cv_scores_)

    plot_surf_img(decoder.coef_img_[0], threshold=1e-6)
    plotting.show()




.. image-sg:: /auto_examples/08_experimental/images/sphx_glr_plot_surface_image_and_maskers_004.png
   :alt: left_hemisphere, right_hemisphere
   :srcset: /auto_examples/08_experimental/images/sphx_glr_plot_surface_image_and_maskers_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/remi/github/nilearn/nilearn/env/lib/python3.11/site-packages/nilearn/_utils/masker_validation.py:113: UserWarning:

    Overriding provided-default estimator parameters with provided masker parameters :
    Parameter standardize :
        Masker parameter False - overriding estimator parameter True


    /home/remi/github/nilearn/nilearn/env/lib/python3.11/site-packages/sklearn/feature_selection/_univariate_selection.py:112: UserWarning:

    Features [    8    36    38 ... 20206 20207 20208] are constant.

    /home/remi/github/nilearn/nilearn/env/lib/python3.11/site-packages/sklearn/feature_selection/_univariate_selection.py:113: RuntimeWarning:

    invalid value encountered in divide

    /home/remi/github/nilearn/nilearn/env/lib/python3.11/site-packages/sklearn/feature_selection/_univariate_selection.py:112: UserWarning:

    Features [    8    36    38 ... 20206 20207 20208] are constant.

    /home/remi/github/nilearn/nilearn/env/lib/python3.11/site-packages/sklearn/feature_selection/_univariate_selection.py:113: RuntimeWarning:

    invalid value encountered in divide

    /home/remi/github/nilearn/nilearn/env/lib/python3.11/site-packages/sklearn/feature_selection/_univariate_selection.py:112: UserWarning:

    Features [    8    36    38 ... 20206 20207 20208] are constant.

    /home/remi/github/nilearn/nilearn/env/lib/python3.11/site-packages/sklearn/feature_selection/_univariate_selection.py:113: RuntimeWarning:

    invalid value encountered in divide

    CV scores: {0: [0.4991939095387371, 0.5115891053391053, 0.4847132034632034], 1: [0.4991939095387371, 0.5115891053391053, 0.4847132034632034]}




.. GENERATED FROM PYTHON SOURCE LINES 139-141

Decoding with a scikit-learn `Pipeline`
---------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 141-171

.. code-block:: Python

    import numpy as np
    from sklearn import feature_selection, linear_model, pipeline, preprocessing

    from nilearn import plotting

    img = surface.fetch_nki()[0]
    y = np.random.RandomState(0).normal(size=img.shape[0])

    decoder = pipeline.make_pipeline(
        surface.SurfaceMasker(),
        preprocessing.StandardScaler(),
        feature_selection.SelectKBest(
            score_func=feature_selection.f_regression, k=500
        ),
        linear_model.Ridge(),
    )
    decoder.fit(img, y)

    coef_img = decoder[:-1].inverse_transform(np.atleast_2d(decoder[-1].coef_))


    vmax = max([np.absolute(dp).max() for dp in coef_img.data.values()])
    plot_surf_img(
        coef_img,
        cmap="cold_hot",
        vmin=-vmax,
        vmax=vmax,
        threshold=1e-6,
    )
    plotting.show()



.. image-sg:: /auto_examples/08_experimental/images/sphx_glr_plot_surface_image_and_maskers_005.png
   :alt: left_hemisphere, right_hemisphere
   :srcset: /auto_examples/08_experimental/images/sphx_glr_plot_surface_image_and_maskers_005.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 49.222 seconds)

**Estimated memory usage:**  1528 MB


.. _sphx_glr_download_auto_examples_08_experimental_plot_surface_image_and_maskers.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/0.10.3?urlpath=lab/tree/notebooks/auto_examples/08_experimental/plot_surface_image_and_maskers.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_surface_image_and_maskers.ipynb <plot_surface_image_and_maskers.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_surface_image_and_maskers.py <plot_surface_image_and_maskers.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
