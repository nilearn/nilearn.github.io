
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/05_glm_second_level/plot_second_level_one_sample_test.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_05_glm_second_level_plot_second_level_one_sample_test.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_05_glm_second_level_plot_second_level_one_sample_test.py:


Second-level fMRI model: one sample test
========================================

Full step-by-step example of fitting a :term:`GLM` to perform a second-level
analysis (one-sample test) and visualizing the results.

More specifically:

1. A sequence of subject :term:`fMRI` button press contrasts is downloaded.
2. A mask of the useful brain volume is computed.
3. A one-sample t-test is applied to the brain maps.

We focus on a given contrast of the localizer dataset: the motor response to
left versus right button press. Both at the individual and group level, this is
expected to elicit activity in the motor cortex (positive in the right
hemisphere, negative in the left hemisphere).

.. GENERATED FROM PYTHON SOURCE LINES 22-28

Fetch dataset
-------------
We download a list of left vs right button press :term:`contrasts<contrast>`
from a localizer dataset. Note that we fetch individual t-maps that represent
the :term:`BOLD` activity estimate divided by the uncertainty about
this estimate.

.. GENERATED FROM PYTHON SOURCE LINES 28-38

.. code-block:: default

    from nilearn.datasets import fetch_localizer_contrasts

    n_subjects = 16
    data = fetch_localizer_contrasts(
        ['left vs right button press'],
        n_subjects,
        get_tmaps=True,
        legacy_format=False,
    )








.. GENERATED FROM PYTHON SOURCE LINES 39-44

Display subject t_maps
----------------------
We plot a grid with all the subjects t-maps thresholded at t = 2 for simple
visualization purposes. The button press effect is visible among all
subjects.

.. GENERATED FROM PYTHON SOURCE LINES 44-62

.. code-block:: default

    from nilearn import plotting
    import matplotlib.pyplot as plt

    subjects = data['ext_vars']['participant_id'].tolist()
    fig, axes = plt.subplots(nrows=4, ncols=4)
    for cidx, tmap in enumerate(data['tmaps']):
        plotting.plot_glass_brain(
            tmap,
            colorbar=False,
            threshold=2.0,
            title=subjects[cidx],
            axes=axes[int(cidx / 4), int(cidx % 4)],
            plot_abs=False,
            display_mode='z',
        )
    fig.suptitle('subjects t_map left-right button press')
    plt.show()




.. image-sg:: /auto_examples/05_glm_second_level/images/sphx_glr_plot_second_level_one_sample_test_001.png
   :alt: subjects t_map left-right button press
   :srcset: /auto_examples/05_glm_second_level/images/sphx_glr_plot_second_level_one_sample_test_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 63-67

Estimate second level model
---------------------------
We define the input maps and the design matrix for the second level model
and fit it.

.. GENERATED FROM PYTHON SOURCE LINES 67-75

.. code-block:: default

    import pandas as pd

    second_level_input = data['cmaps']
    design_matrix = pd.DataFrame(
        [1] * len(second_level_input),
        columns=['intercept'],
    )








.. GENERATED FROM PYTHON SOURCE LINES 76-77

Model specification and fit.

.. GENERATED FROM PYTHON SOURCE LINES 77-85

.. code-block:: default

    from nilearn.glm.second_level import SecondLevelModel

    second_level_model = SecondLevelModel(smoothing_fwhm=8.0)
    second_level_model = second_level_model.fit(
        second_level_input,
        design_matrix=design_matrix,
    )








.. GENERATED FROM PYTHON SOURCE LINES 86-88

To estimate the :term:`contrast` is very simple. We can just provide the
column name of the design matrix.

.. GENERATED FROM PYTHON SOURCE LINES 88-90

.. code-block:: default

    z_map = second_level_model.compute_contrast(output_type='z_score')








.. GENERATED FROM PYTHON SOURCE LINES 91-92

We threshold the second level contrast at uncorrected p < 0.001 and plot it.

.. GENERATED FROM PYTHON SOURCE LINES 92-106

.. code-block:: default

    from scipy.stats import norm

    p_val = 0.001
    p001_unc = norm.isf(p_val)
    display = plotting.plot_glass_brain(
        z_map,
        threshold=p001_unc,
        colorbar=True,
        display_mode='z',
        plot_abs=False,
        title='group left-right button press (unc p<0.001)',
    )
    plotting.show()




.. image-sg:: /auto_examples/05_glm_second_level/images/sphx_glr_plot_second_level_one_sample_test_002.png
   :alt: plot second level one sample test
   :srcset: /auto_examples/05_glm_second_level/images/sphx_glr_plot_second_level_one_sample_test_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 107-108

As expected, we find the motor cortex.

.. GENERATED FROM PYTHON SOURCE LINES 110-112

Next, we compute the (corrected) p-values with a parametric test to compare
them with the results from a nonparametric test.

.. GENERATED FROM PYTHON SOURCE LINES 112-123

.. code-block:: default

    import numpy as np
    from nilearn.image import get_data, math_img

    p_val = second_level_model.compute_contrast(output_type='p_value')
    n_voxels = np.sum(get_data(second_level_model.masker_.mask_img_))
    # Correcting the p-values for multiple testing and taking negative logarithm
    neg_log_pval = math_img(
        '-np.log10(np.minimum(1, img * {}))'.format(str(n_voxels)),
        img=p_val,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <string>:1: RuntimeWarning:

    divide by zero encountered in log10





.. GENERATED FROM PYTHON SOURCE LINES 124-137

Now, we compute the (corrected) p-values with a permutation test.

.. important::
  In this example, ``threshold`` is set to 0.001, which enables
  cluster-level inference.
  Performing cluster-level inference will increase the computation time of
  the permutation procedure.
  Increasing the number of parallel jobs (``n_jobs``) can reduce the time
  cost.

.. hint::
  If you wish to only run voxel-level correction, set ``threshold`` to None
  (the default).

.. GENERATED FROM PYTHON SOURCE LINES 137-150

.. code-block:: default

    from nilearn.glm.second_level import non_parametric_inference

    out_dict = non_parametric_inference(
        second_level_input,
        design_matrix=design_matrix,
        model_intercept=True,
        n_perm=500,  # 500 for the sake of time. Ideally, this should be 10,000.
        two_sided_test=False,
        smoothing_fwhm=8.0,
        n_jobs=1,
        threshold=0.001,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/yasmin/nilearn/nilearn/nilearn/mass_univariate/permuted_least_squares.py:960: UserWarning:

    Data array used to create a new image contains 64-bit ints. This is likely due to creating the array with numpy and passing `int` as the `dtype`. Many tools such as FSL and SPM cannot deal with int64 in Nifti images, so for compatibility the data has been converted to int32.

    /home/yasmin/nilearn/nilearn/nilearn/masking.py:916: UserWarning:

    Data array used to create a new image contains 64-bit ints. This is likely due to creating the array with numpy and passing `int` as the `dtype`. Many tools such as FSL and SPM cannot deal with int64 in Nifti images, so for compatibility the data has been converted to int32.





.. GENERATED FROM PYTHON SOURCE LINES 151-163

Let us plot the (corrected) negative log p-values for the both tests.

We will use a negative log10 p threshold of 1, which corresponds to p<0.1.
This threshold indicates that there is less than 10% probability to make a
single false discovery (90% chance that we make no false discovery at all).
This threshold is much more conservative than an uncorrected threshold, but
is still more liberal than a typical corrected threshold for this kind of
analysis, which tends to be ~0.05.

We will also cap the negative log10 p-values at 2.69, because this is the
maximum observable value for the nonparametric tests, which were run with
only 500 permutations.

.. GENERATED FROM PYTHON SOURCE LINES 163-203

.. code-block:: default

    threshold = 1  # p < 0.1
    vmax = 2.69  # ~= -np.log10(1 / 500)

    cut_coords = [0]

    IMAGES = [
        neg_log_pval,
        out_dict['logp_max_t'],
        out_dict['logp_max_size'],
        out_dict['logp_max_mass'],
    ]
    TITLES = [
        'Parametric Test',
        'Permutation Test\n(Voxel-Level Error Control)',
        'Permutation Test\n(Cluster-Size Error Control)',
        'Permutation Test\n(Cluster-Mass Error Control)',
    ]

    fig, axes = plt.subplots(figsize=(8, 8), nrows=2, ncols=2)
    img_counter = 0
    for i_row in range(2):
        for j_col in range(2):
            ax = axes[i_row, j_col]
            plotting.plot_glass_brain(
                IMAGES[img_counter],
                colorbar=True,
                vmax=vmax,
                display_mode='z',
                plot_abs=False,
                cut_coords=cut_coords,
                threshold=threshold,
                figure=fig,
                axes=ax,
            )
            ax.set_title(TITLES[img_counter])
            img_counter += 1

    fig.suptitle('Group left-right button press\n(negative log10 p-values)')
    plt.show()




.. image-sg:: /auto_examples/05_glm_second_level/images/sphx_glr_plot_second_level_one_sample_test_003.png
   :alt: Group left-right button press (negative log10 p-values), Parametric Test, Permutation Test (Voxel-Level Error Control), Permutation Test (Cluster-Size Error Control), Permutation Test (Cluster-Mass Error Control)
   :srcset: /auto_examples/05_glm_second_level/images/sphx_glr_plot_second_level_one_sample_test_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/yasmin/nilearn/nilearn/nilearn/_utils/niimg.py:63: UserWarning:

    Non-finite values detected. These values will be replaced with zeros.





.. GENERATED FROM PYTHON SOURCE LINES 204-210

The nonparametric test yields many more discoveries and is more powerful than
the usual parametric procedure.
Even within the nonparametric test, the different correction metrics produce
different results.
The voxel-level correction is more conservative than the cluster-size or
cluster-mass corrections, which are very similar to one another.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  54.046 seconds)

**Estimated memory usage:**  51 MB


.. _sphx_glr_download_auto_examples_05_glm_second_level_plot_second_level_one_sample_test.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/0.9.2?urlpath=lab/tree/notebooks/auto_examples/05_glm_second_level/plot_second_level_one_sample_test.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_second_level_one_sample_test.py <plot_second_level_one_sample_test.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_second_level_one_sample_test.ipynb <plot_second_level_one_sample_test.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
