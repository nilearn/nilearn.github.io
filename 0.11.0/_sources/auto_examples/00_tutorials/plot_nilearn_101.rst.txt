
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/00_tutorials/plot_nilearn_101.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_00_tutorials_plot_nilearn_101.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_00_tutorials_plot_nilearn_101.py:


Basic nilearn example: manipulating and looking at data
=======================================================

A simple example showing how to load an existing Nifti file and use
basic nilearn functionalities.

.. GENERATED FROM PYTHON SOURCE LINES 8-15

.. code-block:: Python


    # Let us use a Nifti file that is shipped with nilearn
    from nilearn.datasets import MNI152_FILE_PATH

    # Note that the variable MNI152_FILE_PATH is just a path to a Nifti file
    print(f"Path to MNI152 template: {MNI152_FILE_PATH!r}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Path to MNI152 template: PosixPath('/home/remi/github/nilearn/nilearn_doc_build/.tox/doc/lib/python3.9/site-packages/nilearn/datasets/data/mni_icbm152_t1_tal_nlin_sym_09a_converted.nii.gz')




.. GENERATED FROM PYTHON SOURCE LINES 16-20

A first step: looking at our data
----------------------------------

Let's quickly plot this file:

.. GENERATED FROM PYTHON SOURCE LINES 20-24

.. code-block:: Python

    from nilearn import plotting

    plotting.plot_img(MNI152_FILE_PATH)




.. image-sg:: /auto_examples/00_tutorials/images/sphx_glr_plot_nilearn_101_001.png
   :alt: plot nilearn 101
   :srcset: /auto_examples/00_tutorials/images/sphx_glr_plot_nilearn_101_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <nilearn.plotting.displays._slicers.OrthoSlicer object at 0x740d1d7eb100>



.. GENERATED FROM PYTHON SOURCE LINES 25-33

This is not a very pretty plot. We just used the simplest possible
code. There is a whole :ref:`section of the documentation <plotting>`
on making prettier code.

**Exercise**: Try plotting one of your own files. In the above,
MNI152_FILE_PATH is nothing more than a string with a path pointing to
a nifti image. You can replace it with a string pointing to a file on
your disk. Note that it should be a 3D volume, and not a 4D volume.

.. GENERATED FROM PYTHON SOURCE LINES 35-44

Simple image manipulation: smoothing
------------------------------------

Let's use an image-smoothing function from nilearn:
:func:`nilearn.image.smooth_img`

Functions containing 'img' can take either a filename or an image as input.

Here we give as inputs the image filename and the smoothing value in mm

.. GENERATED FROM PYTHON SOURCE LINES 44-52

.. code-block:: Python

    from nilearn import image

    smooth_anat_img = image.smooth_img(MNI152_FILE_PATH, fwhm=3)

    # While we are giving a file name as input, the function returns
    # an in-memory object:
    smooth_anat_img





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <nibabel.nifti1.Nifti1Image object at 0x740d1d5e9f40>



.. GENERATED FROM PYTHON SOURCE LINES 53-55

This is an in-memory object. We can pass it to nilearn function, for
instance to look at it

.. GENERATED FROM PYTHON SOURCE LINES 55-57

.. code-block:: Python

    plotting.plot_img(smooth_anat_img)




.. image-sg:: /auto_examples/00_tutorials/images/sphx_glr_plot_nilearn_101_002.png
   :alt: plot nilearn 101
   :srcset: /auto_examples/00_tutorials/images/sphx_glr_plot_nilearn_101_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <nilearn.plotting.displays._slicers.OrthoSlicer object at 0x740d1d787c10>



.. GENERATED FROM PYTHON SOURCE LINES 58-59

We could also pass it to the smoothing function

.. GENERATED FROM PYTHON SOURCE LINES 59-63

.. code-block:: Python

    more_smooth_anat_img = image.smooth_img(smooth_anat_img, fwhm=3)
    plotting.plot_img(more_smooth_anat_img)





.. image-sg:: /auto_examples/00_tutorials/images/sphx_glr_plot_nilearn_101_003.png
   :alt: plot nilearn 101
   :srcset: /auto_examples/00_tutorials/images/sphx_glr_plot_nilearn_101_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <nilearn.plotting.displays._slicers.OrthoSlicer object at 0x740d1d73e8b0>



.. GENERATED FROM PYTHON SOURCE LINES 64-70

Globbing over multiple 3D volumes
---------------------------------
Nilearn also supports reading multiple volumes at once,
using glob-style patterns.
For instance, we can smooth volumes from many subjects
at once and get a 4D image as output.

.. GENERATED FROM PYTHON SOURCE LINES 72-73

First let's fetch Haxby dataset for subject 1 and 2

.. GENERATED FROM PYTHON SOURCE LINES 73-77

.. code-block:: Python

    from nilearn import datasets

    haxby = datasets.fetch_haxby(subjects=[1, 2])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [get_dataset_dir] Dataset found in /home/remi/nilearn_data/haxby2001




.. GENERATED FROM PYTHON SOURCE LINES 78-80

Now we can find the anatomical images from both
subjects using the `*` wildcard

.. GENERATED FROM PYTHON SOURCE LINES 80-86

.. code-block:: Python

    from pathlib import Path

    anats_all_subjects = (
        Path(datasets.get_data_dirs()[0]) / "haxby2001" / "subj*" / "anat*"
    )








.. GENERATED FROM PYTHON SOURCE LINES 87-88

Now we can smooth all the anatomical images at once

.. GENERATED FROM PYTHON SOURCE LINES 88-90

.. code-block:: Python

    anats_all_subjects_smooth = image.smooth_img(anats_all_subjects, fwhm=5)








.. GENERATED FROM PYTHON SOURCE LINES 91-92

This is a 4D image containing one volume per subject

.. GENERATED FROM PYTHON SOURCE LINES 92-94

.. code-block:: Python

    print(anats_all_subjects_smooth.shape)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (124, 256, 256, 2)




.. GENERATED FROM PYTHON SOURCE LINES 95-99

Saving results to a file
-------------------------

We can save any in-memory object as follows:

.. GENERATED FROM PYTHON SOURCE LINES 99-106

.. code-block:: Python

    output_dir = Path.cwd() / "results" / "plot_nilearn_101"
    output_dir.mkdir(exist_ok=True, parents=True)
    print(f"Output will be saved to: {output_dir}")
    anats_all_subjects_smooth.to_filename(
        output_dir / "anats_all_subjects_smooth.nii.gz"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Output will be saved to: /home/remi/github/nilearn/nilearn_doc_build/examples/00_tutorials/results/plot_nilearn_101




.. GENERATED FROM PYTHON SOURCE LINES 107-109

Finally, calling plotting.show() is necessary to display the figure
when running as a script outside IPython

.. GENERATED FROM PYTHON SOURCE LINES 109-111

.. code-block:: Python

    plotting.show()








.. GENERATED FROM PYTHON SOURCE LINES 112-120

|

______

To recap, all the nilearn tools can take data as filenames or
glob-style patterns or in-memory objects, and return brain
volumes as in-memory objects. These can be
passed on to other nilearn tools, or saved to disk.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 8.321 seconds)

**Estimated memory usage:**  330 MB


.. _sphx_glr_download_auto_examples_00_tutorials_plot_nilearn_101.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/0.11.0?urlpath=lab/tree/notebooks/auto_examples/00_tutorials/plot_nilearn_101.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_nilearn_101.ipynb <plot_nilearn_101.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_nilearn_101.py <plot_nilearn_101.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_nilearn_101.zip <plot_nilearn_101.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
