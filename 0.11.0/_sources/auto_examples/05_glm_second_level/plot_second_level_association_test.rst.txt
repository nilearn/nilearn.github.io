
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/05_glm_second_level/plot_second_level_association_test.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_05_glm_second_level_plot_second_level_association_test.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_05_glm_second_level_plot_second_level_association_test.py:


Example of generic design in second-level models
================================================

This example shows the results obtained in a group analysis using a more
complex contrast than a one- or two-sample t test.
We use the [left button press (auditory cue)] task from the Localizer
dataset and seek association between the contrast values and a variate
that measures the speed of pseudo-word reading. No confounding variate
is included in the model.

..
    Original authors:

    - Virgile Fritsch, Bertrand Thirion, 2014 -- 2018
    - Jerome-Alexis Chevalier, 2019

.. GENERATED FROM PYTHON SOURCE LINES 21-22

At first, we need to load the Localizer contrasts.

.. GENERATED FROM PYTHON SOURCE LINES 22-31

.. code-block:: Python

    from nilearn import datasets

    n_samples = 94
    localizer_dataset = datasets.fetch_localizer_contrasts(
        ["left button press (auditory cue)"],
        n_subjects=n_samples,
        legacy_format=False,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [get_dataset_dir] Dataset found in /home/remi/nilearn_data/brainomics_localizer




.. GENERATED FROM PYTHON SOURCE LINES 32-33

Let's print basic information on the dataset.

.. GENERATED FROM PYTHON SOURCE LINES 33-38

.. code-block:: Python

    print(
        "First contrast nifti image (3D) is located "
        f"at: {localizer_dataset.cmaps[0]}"
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    First contrast nifti image (3D) is located at: /home/remi/nilearn_data/brainomics_localizer/brainomics_data/S01/cmaps_LeftAuditoryClick.nii.gz




.. GENERATED FROM PYTHON SOURCE LINES 39-40

we also need to load the behavioral variable.

.. GENERATED FROM PYTHON SOURCE LINES 40-43

.. code-block:: Python

    tested_var = localizer_dataset.ext_vars["pseudo"]
    print(tested_var)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    0     15.0
    1     16.0
    2     14.0
    3     19.0
    4     16.0
          ...
    89    12.0
    90    16.0
    91    13.0
    92    25.0
    93    21.0
    Name: pseudo, Length: 94, dtype: float64




.. GENERATED FROM PYTHON SOURCE LINES 44-45

It is worth to do a quality check and remove subjects with missing values.

.. GENERATED FROM PYTHON SOURCE LINES 45-55

.. code-block:: Python

    import numpy as np

    mask_quality_check = np.where(np.logical_not(np.isnan(tested_var)))[0]
    n_samples = mask_quality_check.size
    contrast_map_filenames = [
        localizer_dataset.cmaps[i] for i in mask_quality_check
    ]
    tested_var = tested_var[mask_quality_check].to_numpy().reshape((-1, 1))
    print(f"Actual number of subjects after quality check: {int(n_samples)}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Actual number of subjects after quality check: 89




.. GENERATED FROM PYTHON SOURCE LINES 56-60

Estimate second level model
---------------------------
We define the input maps and the design matrix for the second level model
and fit it.

.. GENERATED FROM PYTHON SOURCE LINES 60-67

.. code-block:: Python

    import pandas as pd

    design_matrix = pd.DataFrame(
        np.hstack((tested_var, np.ones_like(tested_var))),
        columns=["fluency", "intercept"],
    )








.. GENERATED FROM PYTHON SOURCE LINES 68-69

Fit of the second-level model

.. GENERATED FROM PYTHON SOURCE LINES 69-74

.. code-block:: Python

    from nilearn.glm.second_level import SecondLevelModel

    model = SecondLevelModel(smoothing_fwhm=5.0, n_jobs=2)
    model.fit(contrast_map_filenames, design_matrix=design_matrix)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-8 {
      /* Definition of color scheme common for light and dark mode */
      --sklearn-color-text: black;
      --sklearn-color-line: gray;
      /* Definition of color scheme for unfitted estimators */
      --sklearn-color-unfitted-level-0: #fff5e6;
      --sklearn-color-unfitted-level-1: #f6e4d2;
      --sklearn-color-unfitted-level-2: #ffe0b3;
      --sklearn-color-unfitted-level-3: chocolate;
      /* Definition of color scheme for fitted estimators */
      --sklearn-color-fitted-level-0: #f0f8ff;
      --sklearn-color-fitted-level-1: #d4ebff;
      --sklearn-color-fitted-level-2: #b3dbfd;
      --sklearn-color-fitted-level-3: cornflowerblue;

      /* Specific color for light theme */
      --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
      --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
      --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
      --sklearn-color-icon: #696969;

      @media (prefers-color-scheme: dark) {
        /* Redefinition of color scheme for dark theme */
        --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
        --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
        --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
        --sklearn-color-icon: #878787;
      }
    }

    #sk-container-id-8 {
      color: var(--sklearn-color-text);
    }

    #sk-container-id-8 pre {
      padding: 0;
    }

    #sk-container-id-8 input.sk-hidden--visually {
      border: 0;
      clip: rect(1px 1px 1px 1px);
      clip: rect(1px, 1px, 1px, 1px);
      height: 1px;
      margin: -1px;
      overflow: hidden;
      padding: 0;
      position: absolute;
      width: 1px;
    }

    #sk-container-id-8 div.sk-dashed-wrapped {
      border: 1px dashed var(--sklearn-color-line);
      margin: 0 0.4em 0.5em 0.4em;
      box-sizing: border-box;
      padding-bottom: 0.4em;
      background-color: var(--sklearn-color-background);
    }

    #sk-container-id-8 div.sk-container {
      /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
         but bootstrap.min.css set `[hidden] { display: none !important; }`
         so we also need the `!important` here to be able to override the
         default hidden behavior on the sphinx rendered scikit-learn.org.
         See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
      display: inline-block !important;
      position: relative;
    }

    #sk-container-id-8 div.sk-text-repr-fallback {
      display: none;
    }

    div.sk-parallel-item,
    div.sk-serial,
    div.sk-item {
      /* draw centered vertical line to link estimators */
      background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
      background-size: 2px 100%;
      background-repeat: no-repeat;
      background-position: center center;
    }

    /* Parallel-specific style estimator block */

    #sk-container-id-8 div.sk-parallel-item::after {
      content: "";
      width: 100%;
      border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
      flex-grow: 1;
    }

    #sk-container-id-8 div.sk-parallel {
      display: flex;
      align-items: stretch;
      justify-content: center;
      background-color: var(--sklearn-color-background);
      position: relative;
    }

    #sk-container-id-8 div.sk-parallel-item {
      display: flex;
      flex-direction: column;
    }

    #sk-container-id-8 div.sk-parallel-item:first-child::after {
      align-self: flex-end;
      width: 50%;
    }

    #sk-container-id-8 div.sk-parallel-item:last-child::after {
      align-self: flex-start;
      width: 50%;
    }

    #sk-container-id-8 div.sk-parallel-item:only-child::after {
      width: 0;
    }

    /* Serial-specific style estimator block */

    #sk-container-id-8 div.sk-serial {
      display: flex;
      flex-direction: column;
      align-items: center;
      background-color: var(--sklearn-color-background);
      padding-right: 1em;
      padding-left: 1em;
    }


    /* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
    clickable and can be expanded/collapsed.
    - Pipeline and ColumnTransformer use this feature and define the default style
    - Estimators will overwrite some part of the style using the `sk-estimator` class
    */

    /* Pipeline and ColumnTransformer style (default) */

    #sk-container-id-8 div.sk-toggleable {
      /* Default theme specific background. It is overwritten whether we have a
      specific estimator or a Pipeline/ColumnTransformer */
      background-color: var(--sklearn-color-background);
    }

    /* Toggleable label */
    #sk-container-id-8 label.sk-toggleable__label {
      cursor: pointer;
      display: block;
      width: 100%;
      margin-bottom: 0;
      padding: 0.5em;
      box-sizing: border-box;
      text-align: center;
    }

    #sk-container-id-8 label.sk-toggleable__label-arrow:before {
      /* Arrow on the left of the label */
      content: "â–¸";
      float: left;
      margin-right: 0.25em;
      color: var(--sklearn-color-icon);
    }

    #sk-container-id-8 label.sk-toggleable__label-arrow:hover:before {
      color: var(--sklearn-color-text);
    }

    /* Toggleable content - dropdown */

    #sk-container-id-8 div.sk-toggleable__content {
      max-height: 0;
      max-width: 0;
      overflow: hidden;
      text-align: left;
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-8 div.sk-toggleable__content.fitted {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    #sk-container-id-8 div.sk-toggleable__content pre {
      margin: 0.2em;
      border-radius: 0.25em;
      color: var(--sklearn-color-text);
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-8 div.sk-toggleable__content.fitted pre {
      /* unfitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    #sk-container-id-8 input.sk-toggleable__control:checked~div.sk-toggleable__content {
      /* Expand drop-down */
      max-height: 200px;
      max-width: 100%;
      overflow: auto;
    }

    #sk-container-id-8 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
      content: "â–¾";
    }

    /* Pipeline/ColumnTransformer-specific style */

    #sk-container-id-8 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-8 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Estimator-specific style */

    /* Colorize estimator box */
    #sk-container-id-8 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-8 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-2);
    }

    #sk-container-id-8 div.sk-label label.sk-toggleable__label,
    #sk-container-id-8 div.sk-label label {
      /* The background is the default theme color */
      color: var(--sklearn-color-text-on-default-background);
    }

    /* On hover, darken the color of the background */
    #sk-container-id-8 div.sk-label:hover label.sk-toggleable__label {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    /* Label box, darken color on hover, fitted */
    #sk-container-id-8 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Estimator label */

    #sk-container-id-8 div.sk-label label {
      font-family: monospace;
      font-weight: bold;
      display: inline-block;
      line-height: 1.2em;
    }

    #sk-container-id-8 div.sk-label-container {
      text-align: center;
    }

    /* Estimator-specific */
    #sk-container-id-8 div.sk-estimator {
      font-family: monospace;
      border: 1px dotted var(--sklearn-color-border-box);
      border-radius: 0.25em;
      box-sizing: border-box;
      margin-bottom: 0.5em;
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-8 div.sk-estimator.fitted {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    /* on hover */
    #sk-container-id-8 div.sk-estimator:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-8 div.sk-estimator.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Specification for estimator info (e.g. "i" and "?") */

    /* Common style for "i" and "?" */

    .sk-estimator-doc-link,
    a:link.sk-estimator-doc-link,
    a:visited.sk-estimator-doc-link {
      float: right;
      font-size: smaller;
      line-height: 1em;
      font-family: monospace;
      background-color: var(--sklearn-color-background);
      border-radius: 1em;
      height: 1em;
      width: 1em;
      text-decoration: none !important;
      margin-left: 1ex;
      /* unfitted */
      border: var(--sklearn-color-unfitted-level-1) 1pt solid;
      color: var(--sklearn-color-unfitted-level-1);
    }

    .sk-estimator-doc-link.fitted,
    a:link.sk-estimator-doc-link.fitted,
    a:visited.sk-estimator-doc-link.fitted {
      /* fitted */
      border: var(--sklearn-color-fitted-level-1) 1pt solid;
      color: var(--sklearn-color-fitted-level-1);
    }

    /* On hover */
    div.sk-estimator:hover .sk-estimator-doc-link:hover,
    .sk-estimator-doc-link:hover,
    div.sk-label-container:hover .sk-estimator-doc-link:hover,
    .sk-estimator-doc-link:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
    .sk-estimator-doc-link.fitted:hover,
    div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
    .sk-estimator-doc-link.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    /* Span, style for the box shown on hovering the info icon */
    .sk-estimator-doc-link span {
      display: none;
      z-index: 9999;
      position: relative;
      font-weight: normal;
      right: .2ex;
      padding: .5ex;
      margin: .5ex;
      width: min-content;
      min-width: 20ex;
      max-width: 50ex;
      color: var(--sklearn-color-text);
      box-shadow: 2pt 2pt 4pt #999;
      /* unfitted */
      background: var(--sklearn-color-unfitted-level-0);
      border: .5pt solid var(--sklearn-color-unfitted-level-3);
    }

    .sk-estimator-doc-link.fitted span {
      /* fitted */
      background: var(--sklearn-color-fitted-level-0);
      border: var(--sklearn-color-fitted-level-3);
    }

    .sk-estimator-doc-link:hover span {
      display: block;
    }

    /* "?"-specific style due to the `<a>` HTML tag */

    #sk-container-id-8 a.estimator_doc_link {
      float: right;
      font-size: 1rem;
      line-height: 1em;
      font-family: monospace;
      background-color: var(--sklearn-color-background);
      border-radius: 1rem;
      height: 1rem;
      width: 1rem;
      text-decoration: none;
      /* unfitted */
      color: var(--sklearn-color-unfitted-level-1);
      border: var(--sklearn-color-unfitted-level-1) 1pt solid;
    }

    #sk-container-id-8 a.estimator_doc_link.fitted {
      /* fitted */
      border: var(--sklearn-color-fitted-level-1) 1pt solid;
      color: var(--sklearn-color-fitted-level-1);
    }

    /* On hover */
    #sk-container-id-8 a.estimator_doc_link:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    #sk-container-id-8 a.estimator_doc_link.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-3);
    }
    </style><div id="sk-container-id-8" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>SecondLevelModel(memory=Memory(location=None), n_jobs=2, smoothing_fwhm=5.0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-8" type="checkbox" checked><label for="sk-estimator-id-8" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;SecondLevelModel<span class="sk-estimator-doc-link fitted">i<span>Fitted</span></span></label><div class="sk-toggleable__content fitted"><pre>SecondLevelModel(memory=Memory(location=None), n_jobs=2, smoothing_fwhm=5.0)</pre></div> </div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 75-77

To estimate the :term:`contrast` is very simple.
We can just provide the column name of the design matrix.

.. GENERATED FROM PYTHON SOURCE LINES 77-79

.. code-block:: Python

    z_map = model.compute_contrast("fluency", output_type="z_score")








.. GENERATED FROM PYTHON SOURCE LINES 80-81

We compute the fdr-corrected p = 0.05 threshold for these data.

.. GENERATED FROM PYTHON SOURCE LINES 81-85

.. code-block:: Python

    from nilearn.glm import threshold_stats_img

    _, threshold = threshold_stats_img(z_map, alpha=0.05, height_control="fdr")








.. GENERATED FROM PYTHON SOURCE LINES 86-87

Let us plot the second level :term:`contrast` at the computed thresholds.

.. GENERATED FROM PYTHON SOURCE LINES 87-99

.. code-block:: Python

    from nilearn import plotting

    plotting.plot_stat_map(
        z_map,
        threshold=threshold,
        colorbar=True,
        title="Group-level association between motor activity \n"
        "and reading fluency (fdr=0.05)",
    )

    plotting.show()




.. image-sg:: /auto_examples/05_glm_second_level/images/sphx_glr_plot_second_level_association_test_001.png
   :alt: plot second level association test
   :srcset: /auto_examples/05_glm_second_level/images/sphx_glr_plot_second_level_association_test_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 100-102

Computing the (corrected) p-values with parametric test to compare with
non parametric test

.. GENERATED FROM PYTHON SOURCE LINES 102-111

.. code-block:: Python

    from nilearn.image import get_data, math_img

    p_val = model.compute_contrast("fluency", output_type="p_value")
    n_voxels = np.sum(get_data(model.masker_.mask_img_))
    # Correcting the p-values for multiple testing and taking negative logarithm
    neg_log_pval = math_img(
        f"-np.log10(np.minimum(1, img * {n_voxels!s}))", img=p_val
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <string>:1: RuntimeWarning:

    divide by zero encountered in log10





.. GENERATED FROM PYTHON SOURCE LINES 112-113

Let us plot the (corrected) negative log  p-values for the parametric test

.. GENERATED FROM PYTHON SOURCE LINES 113-133

.. code-block:: Python

    cut_coords = [38, -17, -3]
    # Since we are plotting negative log p-values and using a threshold equal to 1,
    # it corresponds to corrected p-values lower than 10%, meaning that there
    # is less than 10% probability to make a single false discovery
    # (90% chance that we make no false discoveries at all).
    # This threshold is much more conservative than the previous one.
    threshold = 1
    title = (
        "Group-level association between motor activity and reading: \n"
        "neg-log of parametric corrected p-values (FWER < 10%)"
    )
    plotting.plot_stat_map(
        neg_log_pval,
        colorbar=True,
        cut_coords=cut_coords,
        threshold=threshold,
        title=title,
    )
    plotting.show()




.. image-sg:: /auto_examples/05_glm_second_level/images/sphx_glr_plot_second_level_association_test_002.png
   :alt: plot second level association test
   :srcset: /auto_examples/05_glm_second_level/images/sphx_glr_plot_second_level_association_test_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/remi/github/nilearn/nilearn_doc_build/.tox/doc/lib/python3.9/site-packages/nilearn/plotting/img_plotting.py:1416: UserWarning:

    Non-finite values detected. These values will be replaced with zeros.





.. GENERATED FROM PYTHON SOURCE LINES 134-135

Computing the (corrected) negative log p-values with permutation test

.. GENERATED FROM PYTHON SOURCE LINES 135-149

.. code-block:: Python

    from nilearn.glm.second_level import non_parametric_inference

    neg_log_pvals_permuted_ols_unmasked = non_parametric_inference(
        contrast_map_filenames,
        design_matrix=design_matrix,
        second_level_contrast="fluency",
        model_intercept=True,
        n_perm=1000,
        two_sided_test=False,
        mask=None,
        smoothing_fwhm=5.0,
        n_jobs=2,
    )








.. GENERATED FROM PYTHON SOURCE LINES 150-151

Let us plot the (corrected) negative log  p-values

.. GENERATED FROM PYTHON SOURCE LINES 151-168

.. code-block:: Python

    title = (
        "Group-level association between motor activity and reading: \n"
        "neg-log of non-parametric corrected p-values (FWER < 10%)"
    )
    plotting.plot_stat_map(
        neg_log_pvals_permuted_ols_unmasked,
        colorbar=True,
        cut_coords=cut_coords,
        threshold=threshold,
        title=title,
    )
    plotting.show()

    # The neg-log p-values obtained with non parametric testing are capped at 3
    # since the number of permutations is 1e3.
    # The non parametric test yields a few more discoveries
    # and is then more powerful than the usual parametric procedure.



.. image-sg:: /auto_examples/05_glm_second_level/images/sphx_glr_plot_second_level_association_test_003.png
   :alt: plot second level association test
   :srcset: /auto_examples/05_glm_second_level/images/sphx_glr_plot_second_level_association_test_003.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 39.612 seconds)

**Estimated memory usage:**  312 MB


.. _sphx_glr_download_auto_examples_05_glm_second_level_plot_second_level_association_test.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/nilearn/nilearn/0.11.0?urlpath=lab/tree/notebooks/auto_examples/05_glm_second_level/plot_second_level_association_test.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_second_level_association_test.ipynb <plot_second_level_association_test.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_second_level_association_test.py <plot_second_level_association_test.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_second_level_association_test.zip <plot_second_level_association_test.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
