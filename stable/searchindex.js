Search.setIndex({"alltitles": {"0.1.0": [[119, null], [157, "id5831"]], "0.1.1": [[120, null], [157, "id5668"]], "0.1.2": [[121, null], [157, "id5505"]], "0.1.3": [[122, null], [157, "id5341"]], "0.1.4": [[123, null], [157, "id5178"]], "0.10.0": [[124, null], [157, "id996"]], "0.10.1": [[125, null], [157, "id827"]], "0.10.1rc1": [[125, "rc1"], [157, "rc1"]], "0.10.2": [[126, null], [157, "id660"]], "0.10.3": [[127, null], [157, "id494"]], "0.10.4": [[128, null], [157, "id328"]], "0.11.0": [[129, null], [157, "id163"]], "0.11.1": [[130, null], [157, "id1"]], "0.2.0": [[131, null], [157, "id5011"]], "0.2.1": [[132, null], [157, "v0-2-1"]], "0.2.2": [[133, null], [157, "id4842"]], "0.2.3": [[134, null], [157, "id4679"]], "0.2.4": [[135, null], [157, "id4515"]], "0.2.5": [[136, "id2"], [157, "id4351"]], "0.2.5.1": [[136, null], [157, "id4347"]], "0.2.6": [[137, null], [157, "id4182"]], "0.3.0": [[138, null], [157, "id4012"]], "0.3.0 beta": [[138, "beta"], [157, "id4016"]], "0.3.1": [[139, null], [157, "id3846"]], "0.4.0": [[140, null], [157, "id3679"]], "0.4.1": [[141, null], [157, "id3515"]], "0.4.2": [[142, null], [157, "id3351"]], "0.5.0": [[143, null], [157, "id3172"]], "0.5.0 alpha": [[143, "alpha"], [157, "alpha"]], "0.5.0 beta": [[143, "beta"], [157, "beta"]], "0.5.0 rc": [[143, "rc"], [157, "id3176"]], "0.5.1": [[144, null], [157, "id3006"]], "0.5.2": [[145, null], [157, "id2841"]], "0.6.0": [[146, null], [157, "id2661"]], "0.6.0a0": [[146, "a0"], [157, "a0"]], "0.6.0b0": [[146, "b0"], [157, "b0"]], "0.6.0rc": [[146, "rc"], [157, "rc"]], "0.6.1": [[147, null], [157, "id2496"]], "0.6.2": [[148, null], [157, "id2331"]], "0.7.0": [[149, null], [157, "id2164"]], "0.7.1": [[150, null], [157, "id1998"]], "0.8.0": [[151, null], [157, "id1831"]], "0.8.1": [[152, null], [157, "id1664"]], "0.9.0": [[153, null], [157, "id1497"]], "0.9.1": [[154, null], [157, "id1332"]], "0.9.2": [[155, null], [157, "id1163"]], "3D Plots of connectomes": [[484, "d-plots-of-connectomes"]], "3D Plots of markers": [[484, "d-plots-of-markers"]], "3D Plots of statistical maps or atlases on the cortical surface": [[484, "d-plots-of-statistical-maps-or-atlases-on-the-cortical-surface"]], "3D and 4D niimgs: handling and visualizing": [[2, null]], "3D visualization in a web browser": [[10, "d-visualization-in-a-web-browser"], [23, "d-visualization-in-a-web-browser"], [54, "d-visualization-in-a-web-browser"], [56, "d-visualization-in-a-web-browser"], [60, "d-visualization-in-a-web-browser"]], "A few definitions": [[164, "a-few-definitions"]], "A first contrast estimation and plotting": [[67, "a-first-contrast-estimation-and-plotting"]], "A first estimator": [[164, "a-first-estimator"]], "A first step: looking at our data": [[4, "a-first-step-looking-at-our-data"]], "A function to generate data": [[46, "a-function-to-generate-data"]], "A functional connectome: a graph of interactions": [[159, "a-functional-connectome-a-graph-of-interactions"]], "A functional connectome: extracting coordinates of regions": [[159, "a-functional-connectome-extracting-coordinates-of-regions"]], "A introduction tutorial to fMRI decoding": [[3, null]], "A primer on BOLD-fMRI data analysis": [[174, "a-primer-on-bold-fmri-data-analysis"]], "A short demo of the surface images & maskers": [[111, null]], "A simple function to plot slices": [[46, "a-simple-function-to-plot-slices"]], "AAL atlas": [[192, null]], "ABIDE PCP dataset": [[190, null]], "ADHD": [[470, "adhd"]], "ADHD dataset": [[193, null]], "ANOVA pipeline with Decoder object": [[30, "anova-pipeline-with-decoder-object"], [35, "anova-pipeline-with-decoder-object"]], "API References": [[474, null]], "API changes summary": [[131, "api-changes-summary"], [157, "api-changes-summary"]], "APIs of nilearn objects": [[172, "apis-of-nilearn-objects"]], "Access": [[190, "access"], [191, "access"], [192, "access"], [193, "access"], [194, "access"], [195, "access"], [197, "access"], [198, "access"], [199, "access"], [200, "access"], [201, "access"], [202, "access"], [203, "access"], [204, "access"], [205, "access"], [206, "access"], [207, "access"], [208, "access"], [209, "access"], [210, "access"], [211, "access"], [212, "access"], [213, "access"], [214, "access"], [215, "access"], [216, "access"], [217, "access"], [219, "access"], [220, "access"], [221, "access"], [222, "access"], [223, "access"], [224, "access"], [225, "access"], [226, "access"], [227, "access"], [228, "access"], [229, "access"]], "Accessing individual volumes in 4D images": [[184, "accessing-individual-volumes-in-4d-images"]], "Adding a time derivative to the design": [[67, "adding-a-time-derivative-to-the-design"]], "Adding atlases and datasets": [[172, "adding-atlases-and-datasets"]], "Adding overlays, edges, contours, contour fillings, markers, scale bar": [[484, "adding-overlays-edges-contours-contour-fillings-markers-scale-bar"]], "Additional cases": [[172, "additional-cases"]], "Adjust the sample locations": [[25, "adjust-the-sample-locations"]], "Advanced decoding using scikit learn": [[99, null]], "Advanced statistical analysis of brain images": [[98, null], [113, "advanced-statistical-analysis-of-brain-images"]], "Advanced usage: manual pipelines and scaling up": [[116, null]], "Advanced: Design philosophy of \u201cMaskers\u201d": [[185, null]], "Advanced: scikit-learn Pipelines": [[185, null]], "After mask computation: extracting time series": [[90, "after-mask-computation-extracting-time-series"]], "Aggregate beta maps from the LSA model based on condition": [[101, "aggregate-beta-maps-from-the-lsa-model-based-on-condition"]], "Allen 2011 atlas": [[194, null]], "An alternative to ICA: Dictionary learning": [[163, "an-alternative-to-ica-dictionary-learning"]], "An exercise to go further": [[46, "an-exercise-to-go-further"]], "An introduction to GLMs in fMRI statistical analysis": [[174, null]], "An introduction to decoding": [[164, null]], "Analysis of an fMRI dataset with a Finite Impule Response (FIR) model": [[66, null]], "Analyze data": [[76, "analyze-data"]], "Analyzing fMRI using GLMs": [[175, null]], "And now display the corresponding graph": [[54, "and-now-display-the-corresponding-graph"], [54, "id1"], [56, "and-now-display-the-corresponding-graph"]], "Annotating plots": [[16, "annotating-plots"]], "Answer questions": [[172, "answer-questions"]], "Applications of beta series": [[101, "applications-of-beta-series"]], "Apply CanICA on the data": [[50, "apply-canica-on-the-data"]], "Applying a mask": [[117, "applying-a-mask"]], "Applying a scikit-learn machine learning method": [[117, "applying-a-scikit-learn-machine-learning-method"]], "Applying clustering": [[161, "applying-clustering"]], "Applying the mask to extract the corresponding time series": [[26, "applying-the-mask-to-extract-the-corresponding-time-series"]], "Atlases": [[187, "atlases"]], "Atlases descriptions": [[187, "atlases-descriptions"]], "Automatically computing a mask": [[117, "automatically-computing-a-mask"]], "Available Colormaps": [[484, "available-colormaps"]], "Axes": [[479, "axes"]], "BASC multiscale atlas": [[195, null]], "BIDS dataset first and second level analysis": [[102, null]], "BIDS features": [[470, "bids-features"]], "BIDS language localizer": [[196, null]], "Bagging several models": [[165, "bagging-several-models"]], "Basic Atlas plotting": [[11, null]], "Basic nilearn example: manipulating and looking at data": [[4, null]], "Basic numerics and plotting with Python": [[5, null]], "Basic tutorials": [[1, null], [113, "basic-tutorials"]], "Beta-Series Modeling for Task-Based Functional Connectivity and Decoding": [[101, null]], "Bootstrap Analysis of Stable Clusters": [[195, "bootstrap-analysis-of-stable-clusters"]], "Bounds on alpha": [[171, "bounds-on-alpha"]], "Brain mapping with mass univariate": [[44, "brain-mapping-with-mass-univariate"]], "Brain maps using Dictionary learning": [[162, "brain-maps-using-dictionary-learning"]], "Brain parcellations": [[159, "brain-parcellations"]], "Brain parcellations with Hierarchical KMeans Clustering": [[51, "brain-parcellations-with-hierarchical-kmeans-clustering"]], "Brain parcellations with KMeans Clustering": [[51, "brain-parcellations-with-kmeans-clustering"]], "Brain parcellations with ReNA Clustering": [[51, "brain-parcellations-with-rena-clustering"]], "Brain parcellations with Ward Clustering": [[51, "brain-parcellations-with-ward-clustering"]], "Brainomics Localizer": [[197, null]], "Breaking an atlas of labels in separated regions": [[87, null]], "Bug fixes": [[131, "bug-fixes"], [134, "bug-fixes"], [141, "bug-fixes"], [157, "bug-fixes"], [157, "id4680"], [157, "id5015"]], "Build a mask from this statistical map (Improving the quality of the mask)": [[95, "build-a-mask-from-this-statistical-map-improving-the-quality-of-the-mask"]], "Build a mesh (of a cylinder)": [[25, "build-a-mesh-of-a-cylinder"]], "Build a proper event structure for each run": [[34, "build-a-proper-event-structure-for-each-run"]], "Build a statistical test to find voxels of interest": [[95, "build-a-statistical-test-to-find-voxels-of-interest"]], "Build and deploy the documentation manually": [[181, "build-and-deploy-the-documentation-manually"]], "Build and display a correlation matrix": [[56, "build-and-display-a-correlation-matrix"]], "Build of stable docs": [[181, "build-of-stable-docs"]], "Build the decoders, using scikit-learn": [[36, "build-the-decoders-using-scikit-learn"]], "Build the decoding pipeline": [[34, "build-the-decoding-pipeline"]], "Build the distributions and upload them to Pypi": [[181, "build-the-distributions-and-upload-them-to-pypi"]], "Building documentation": [[172, "building-documentation"]], "Building the encoding models": [[42, "building-the-encoding-models"]], "Building your own neuroimaging machine-learning pipeline": [[117, null]], "CHANGES": [[146, "changes"], [157, "id2665"]], "Calculate and Plot F-test": [[70, "calculate-and-plot-f-test"]], "Calculate and plot contrast": [[70, "calculate-and-plot-contrast"]], "Calculating seed-based functional connectivity": [[24, "calculating-seed-based-functional-connectivity"]], "Changelog": [[119, "changelog"], [120, "changelog"], [121, "changelog"], [122, "changelog"], [131, "changelog"], [132, "changelog"], [134, "changelog"], [157, "changelog"], [157, "id4849"], [157, "id5012"], [157, "id5342"], [157, "id5506"], [157, "id5669"], [157, "id5832"], [172, "changelog"]], "Changes": [[124, "changes"], [125, "changes"], [125, "id4"], [126, "changes"], [127, "changes"], [128, "changes"], [129, "changes"], [133, "changes"], [135, "changes"], [136, "changes"], [137, "changes"], [138, "changes"], [138, "id2"], [139, "changes"], [140, "changes"], [141, "changes"], [142, "changes"], [143, "changes"], [143, "id3"], [143, "id6"], [143, "id10"], [144, "changes"], [146, "id3"], [146, "id7"], [146, "id11"], [148, "changes"], [149, "changes"], [151, "changes"], [152, "changes"], [153, "changes"], [154, "changes"], [155, "changes"], [157, "changes"], [157, "id332"], [157, "id498"], [157, "id665"], [157, "id831"], [157, "id834"], [157, "id1001"], [157, "id1170"], [157, "id1335"], [157, "id1502"], [157, "id1669"], [157, "id1836"], [157, "id2169"], [157, "id2334"], [157, "id2668"], [157, "id2673"], [157, "id2677"], [157, "id3008"], [157, "id3175"], [157, "id3179"], [157, "id3184"], [157, "id3188"], [157, "id3352"], [157, "id3517"], [157, "id3683"], [157, "id3848"], [157, "id4013"], [157, "id4018"], [157, "id4185"], [157, "id4348"], [157, "id4517"], [157, "id4846"]], "Changing the drift model": [[67, "changing-the-drift-model"]], "Changing the feature selection": [[99, "changing-the-feature-selection"]], "Changing the hemodynamic response model": [[67, "changing-the-hemodynamic-response-model"]], "Changing the prediction engine": [[99, "changing-the-prediction-engine"]], "Changing the views to \u2018coronal\u2019, \u2018sagittal\u2019 views with coordinates": [[16, "changing-the-views-to-coronal-sagittal-views-with-coordinates"]], "Check installation": [[485, "check-installation"]], "Choice of the prediction accuracy measure": [[164, "choice-of-the-prediction-accuracy-measure"]], "Choosing a good cross-validation strategy": [[164, "choosing-a-good-cross-validation-strategy"]], "Choosing the right model for your analysis": [[101, null]], "Choosing the right predictive model for neuroimaging": [[165, null]], "Citing nilearn": [[0, "citing-nilearn"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Classes": [[186, "classes"], [188, "classes"], [189, "classes"], [472, "classes"], [472, "id1"], [472, "id3"], [476, "classes"], [479, "classes"], [480, "classes"], [481, "classes"], [483, "classes"]], "Classification of age groups using functional connectivity": [[53, null]], "Classification: two classes or multi-class": [[165, "classification-two-classes-or-multi-class"]], "Classifier": [[169, "classifier"]], "Closing policy": [[181, "closing-policy"]], "Clustering methods to learn a brain parcellation from fMRI": [[51, null]], "Clustering to parcellate the brain in regions": [[161, null]], "Code": [[166, null], [166, null], [184, null]], "Code examples": [[129, null], [157, null], [484, null]], "Code of Conduct": [[172, "code-of-conduct"]], "Coding Style": [[172, "coding-style"]], "Common data preparation steps: smoothing, filtering, resampling": [[185, "common-data-preparation-steps-smoothing-filtering-resampling"]], "Compare CanICA to dictionary learning": [[50, "compare-canica-to-dictionary-learning"]], "Compare Hierarchical Kmeans clusters with those from Kmeans": [[51, "compare-hierarchical-kmeans-clusters-with-those-from-kmeans"]], "Compare run-specific and fixed effects contrasts": [[72, "compare-run-specific-and-fixed-effects-contrasts"]], "Compare the results": [[40, "compare-the-results"]], "Compare the three modeling approaches": [[101, "compare-the-three-modeling-approaches"]], "Comparing connectomes on different reference atlases": [[49, null]], "Comparing the different approaches on simulated data": [[158, "comparing-the-different-approaches-on-simulated-data"]], "Comparing the means of 2 images": [[86, null]], "Comparing to massively univariate analysis: F_score or SPM": [[169, "comparing-to-massively-univariate-analysis-f-score-or-spm"]], "Compressed representation": [[161, "compressed-representation"]], "Compressed representation of ReNA clustering": [[51, "compressed-representation-of-rena-clustering"]], "Compressed representation of Ward clustering": [[51, "compressed-representation-of-ward-clustering"]], "Computation times": [[8, null], [28, null], [47, null], [61, null], [74, null], [83, null], [97, null], [112, null], [114, null], [486, null]], "Compute a range of contrasts across both runs": [[72, "compute-a-range-of-contrasts-across-both-runs"]], "Compute and display a correlation matrix": [[58, "compute-and-display-a-correlation-matrix"]], "Compute and resample a mask": [[90, "compute-and-resample-a-mask"]], "Compute correlation coefficients": [[52, "compute-correlation-coefficients"]], "Compute partial correlation matrix": [[60, "compute-partial-correlation-matrix"]], "Compute prediction scores with different values of screening percentile": [[35, "compute-prediction-scores-with-different-values-of-screening-percentile"]], "Compute statistics": [[109, "compute-statistics"]], "Compute the sparse inverse covariance": [[54, "compute-the-sparse-inverse-covariance"]], "Compute within spheres averaged time-series": [[60, "compute-within-spheres-averaged-time-series"]], "Computing a Region of Interest (ROI) mask manually": [[95, null]], "Computing a connectome with sparse inverse covariance": [[54, null]], "Computing a mask from raw EPI data": [[90, "computing-a-mask-from-raw-epi-data"]], "Computing a mask from the background": [[90, "computing-a-mask-from-the-background"]], "Computing and applying spatial masks": [[184, "computing-and-applying-spatial-masks"]], "Computing contrasts": [[173, "computing-contrasts"]], "Computing functional connectivity matrices": [[162, "computing-functional-connectivity-matrices"]], "Computing group-sparse precision matrices": [[55, "computing-group-sparse-precision-matrices"]], "Computing the mask from the MNI template": [[90, "computing-the-mask-from-the-mni-template"]], "Conclusion": [[67, "conclusion"]], "Connectivity structure estimation on simulated data": [[59, null]], "Connectivity with a surface atlas and SurfaceLabelsMasker": [[111, "connectivity-with-a-surface-atlas-and-surfacelabelsmasker"]], "Connectome extracted from Dosenbach\u2019s atlas": [[60, "connectome-extracted-from-dosenbach-s-atlas"]], "Connectome extraction: inverse covariance for direct connections": [[158, null]], "Content": [[190, "content"], [191, "content"], [192, "content"], [193, "content"], [194, "content"], [195, "content"], [197, "content"], [198, "content"], [199, "content"], [200, "content"], [201, "content"], [202, "content"], [203, "content"], [204, "content"], [205, "content"], [206, "content"], [207, "content"], [208, "content"], [209, "content"], [210, "content"], [211, "content"], [212, "content"], [213, "content"], [214, "content"], [215, "content"], [216, "content"], [217, "content"], [218, "content"], [219, "content"], [220, "content"], [221, "content"], [222, "content"], [223, "content"], [224, "content"], [225, "content"], [226, "content"], [227, "content"], [228, "content"], [229, "content"]], "Continuous integration": [[172, "continuous-integration"]], "Contribute code": [[172, "contribute-code"]], "Contributing": [[172, null], [172, "id5"]], "Contribution Guidelines": [[172, "contribution-guidelines"]], "Contributors": [[131, "contributors"], [133, "contributors"], [136, "contributors"], [140, "contributors"], [143, "contributors"], [143, "id7"], [143, "id11"], [144, "contributors"], [145, "contributors"], [146, "contributors"], [146, "id9"], [146, "id13"], [147, "contributors"], [148, "contributors"], [157, "contributors"], [157, "id2499"], [157, "id2670"], [157, "id2675"], [157, "id2679"], [157, "id2844"], [157, "id3010"], [157, "id3180"], [157, "id3185"], [157, "id3189"], [157, "id3684"], [157, "id4353"], [157, "id4847"], [157, "id5016"]], "Controlling how the mask is computed from the data": [[185, "controlling-how-the-mask-is-computed-from-the-data"]], "Controlling the contrast of the background when plotting": [[18, null]], "Convert the multi-class labels to binary labels": [[40, "convert-the-multi-class-labels-to-binary-labels"]], "Coordinates of Default Mode Network": [[60, "coordinates-of-default-mode-network"]], "Copying headers from input images with math_img": [[103, null]], "Core developers": [[0, "core-developers"]], "Correlation between regressors": [[65, "correlation-between-regressors"]], "Cortical surface-based searchlight decoding": [[38, null]], "Craddock 2012 atlas": [[198, null]], "Create a second level design matrix": [[79, "create-a-second-level-design-matrix"]], "Create a simple experimental paradigm": [[79, "create-a-simple-experimental-paradigm"]], "Create data": [[46, "create-data"]], "Create design matrices": [[65, "create-design-matrices"]], "Creating a surface image": [[7, "creating-a-surface-image"]], "Cross validation": [[169, "cross-validation"]], "Cross-validation": [[164, "cross-validation"]], "Cross-validation algorithm": [[171, "cross-validation-algorithm"]], "Cross-validation with scikit-learn": [[99, "cross-validation-with-scikit-learn"], [167, "cross-validation-with-scikit-learn"]], "Cross-validation with the decoder": [[3, "cross-validation-with-the-decoder"]], "Custom data loading: loading only the first 100 time points": [[185, "custom-data-loading-loading-only-the-first-100-time-points"]], "Data": [[7, "data"]], "Data fetcher": [[23, "data-fetcher"]], "Data format": [[7, "data-format"]], "Data loading and preprocessing": [[117, "data-loading-and-preprocessing"]], "Data loading: movie-watching data": [[161, "data-loading-movie-watching-data"]], "Dataset formatting: data shape": [[183, null]], "Datasets descriptions": [[187, "datasets-descriptions"]], "Decode via the Decoder": [[40, "decode-via-the-decoder"]], "Decoding and MVPA: predicting from brain images": [[168, null]], "Decoding and predicting from brain images": [[29, null], [113, "decoding-and-predicting-from-brain-images"]], "Decoding made easy": [[164, "decoding-made-easy"]], "Decoding of a dataset after GLM fit for signal extraction": [[34, null]], "Decoding on simulated data": [[167, null]], "Decoding on the different masks": [[33, "decoding-on-the-different-masks"]], "Decoding performance increase on Haxby dataset": [[166, "decoding-performance-increase-on-haxby-dataset"]], "Decoding with ANOVA + SVM: face vs house in the Haxby dataset": [[30, null]], "Decoding with FREM: face vs house vs chair object recognition": [[32, null]], "Decoding with Support Vector Machine": [[3, "decoding-with-support-vector-machine"]], "Decoding with a scikit-learn Pipeline": [[111, "decoding-with-a-scikit-learn-pipeline"]], "Decoding without a mask: Anova-SVM": [[164, "decoding-without-a-mask-anova-svm"]], "Decoding without a mask: Anova-SVM in scikit-lean": [[99, "decoding-without-a-mask-anova-svm-in-scikit-lean"]], "Decoding without a mask: Anova-SVM using scikit-learn": [[167, "decoding-without-a-mask-anova-svm-using-scikit-learn"]], "Decreasing memory used when loading Nifti images": [[183, null]], "Default Mode Network extraction of ADHD dataset": [[63, null]], "Define parameters": [[65, "define-parameters"]], "Define stimulus parameters and response models": [[68, "define-stimulus-parameters-and-response-models"]], "Define the LSA model": [[101, "define-the-lsa-model"]], "Define the LSS models": [[101, "define-the-lss-models"]], "Define the standard model": [[101, "define-the-standard-model"]], "Demo glass brain plotting": [[15, "demo-glass-brain-plotting"]], "Demo glass brain plotting with contours and with fillings": [[15, "demo-glass-brain-plotting-with-contours-and-with-fillings"]], "Demonstrating various display features": [[16, "demonstrating-various-display-features"]], "Dependencies": [[485, "dependencies"]], "Deriving a label-based mask": [[12, "deriving-a-label-based-mask"]], "Deriving a mask": [[12, "deriving-a-mask"]], "Deriving spatial maps from group fMRI data using ICA and Dictionary Learning": [[50, null]], "Description": [[171, "description"]], "Design matrix: event-based and time series-based": [[173, "design-matrix-event-based-and-time-series-based"]], "Destrieux atlas": [[199, null]], "Destrieux parcellation on inflated surface with different views": [[23, "destrieux-parcellation-on-inflated-surface-with-different-views"]], "Destrieux parcellation on pial surface": [[23, "destrieux-parcellation-on-pial-surface"]], "Destrieux parcellation with custom view: explicitly set angle": [[23, "destrieux-parcellation-with-custom-view-explicitly-set-angle"]], "Detecting voxels with significant effects": [[6, "detecting-voxels-with-significant-effects"]], "Deterministic atlases": [[187, "deterministic-atlases"]], "Development": [[485, "development"]], "Development version": [[485, "development-version"]], "DiFuMo atlas": [[201, null]], "Difference in meanings between different toolboxes": [[176, null]], "Different classifiers in decoding the Haxby dataset": [[31, null]], "Different connectivity modes": [[87, "different-connectivity-modes"]], "Different display modes": [[484, "different-display-modes"]], "Different linear models": [[165, "different-linear-models"]], "Different masking strategies": [[185, "different-masking-strategies"]], "Different plotting functions": [[484, "different-plotting-functions"]], "Different projections for the left and right hemispheres": [[15, "different-projections-for-the-left-and-right-hemispheres"]], "Dimension reduction with feature selection": [[164, "dimension-reduction-with-feature-selection"]], "Disclaimer": [[191, "disclaimer"]], "Display ROI on surface": [[24, "display-roi-on-surface"]], "Display connectome": [[60, "display-connectome"]], "Display connectome from surface parcellation": [[23, "display-connectome-from-surface-parcellation"]], "Display contour projections in both hemispheres": [[15, "display-contour-projections-in-both-hemispheres"]], "Display outlines of the regions of interest on top of a statistical map": [[10, "display-outlines-of-the-regions-of-interest-on-top-of-a-statistical-map"]], "Display spheres summary report": [[60, "display-spheres-summary-report"]], "Display subject t_maps": [[80, "display-subject-t-maps"]], "Display the connectome matrix": [[54, "display-the-connectome-matrix"]], "Display the sparse inverse covariance": [[54, "display-the-sparse-inverse-covariance"]], "Display time series": [[60, "display-time-series"]], "Displaying or saving to an image file": [[484, "displaying-or-saving-to-an-image-file"]], "Displaying results": [[55, "displaying-results"]], "Documentation": [[172, "documentation"]], "Documentation style": [[172, "documentation-style"]], "Dosenbach 2010 atlas": [[202, null]], "Download a brain development fMRI dataset and turn it to a data matrix": [[51, "download-a-brain-development-fmri-dataset-and-turn-it-to-a-data-matrix"]], "Downloading statistical maps from the Neurovault repository": [[118, null]], "Downloading the data": [[117, "downloading-the-data"]], "Downloading tutorial datasets from Internet": [[2, "downloading-tutorial-datasets-from-internet"]], "Drop-in Hours": [[485, "drop-in-hours"]], "Duality gap": [[171, "duality-gap"]], "Dummy estimator": [[99, "dummy-estimator"]], "ENHANCEMENTS": [[143, "enhancements"], [146, "enhancements"], [147, "enhancements"], [148, "enhancements"], [157, "id2332"], [157, "id2497"], [157, "id2664"], [157, "id3174"]], "Empirical comparisons": [[166, "empirical-comparisons"]], "Encoding models for visual stimuli from Miyawaki et al. 2008": [[42, null]], "Enhancements": [[124, "enhancements"], [125, "enhancements"], [125, "id3"], [126, "enhancements"], [127, "enhancements"], [128, "enhancements"], [129, "enhancements"], [130, "enhancements"], [131, "enhancements"], [133, "enhancements"], [137, "enhancements"], [138, "enhancements"], [138, "id4"], [139, "enhancements"], [140, "enhancements"], [141, "enhancements"], [143, "id2"], [143, "id5"], [143, "id9"], [150, "enhancements"], [151, "enhancements"], [152, "enhancements"], [153, "enhancements"], [154, "enhancements"], [155, "enhancements"], [157, "enhancements"], [157, "id166"], [157, "id331"], [157, "id497"], [157, "id664"], [157, "id830"], [157, "id833"], [157, "id1000"], [157, "id1169"], [157, "id1334"], [157, "id1501"], [157, "id1668"], [157, "id1835"], [157, "id2002"], [157, "id3178"], [157, "id3182"], [157, "id3187"], [157, "id3516"], [157, "id3681"], [157, "id3850"], [157, "id4015"], [157, "id4020"], [157, "id4184"], [157, "id4844"], [157, "id5014"]], "Estimate contrasts": [[63, "estimate-contrasts"], [69, "estimate-contrasts"]], "Estimate correlations": [[60, "estimate-correlations"]], "Estimate second level model": [[77, "estimate-second-level-model"], [78, "estimate-second-level-model"], [80, "estimate-second-level-model"]], "Estimate second level models": [[81, "estimate-second-level-models"]], "Estimated Attributes": [[172, "estimated-attributes"]], "Estimating receptive fields": [[42, "estimating-receptive-fields"]], "Event-based": [[173, "event-based"]], "Example": [[184, null]], "Example code": [[161, null], [169, null]], "Example of MRI response functions": [[68, null]], "Example of generic design in second-level models": [[78, null]], "Example of pattern recognition on simulated data": [[46, null]], "Example of second level design matrix": [[79, null]], "Example of surface-based first-level analysis": [[69, null]], "Example use of TV-L1 SpaceNet": [[41, "example-use-of-tv-l1-spacenet"]], "Examples": [[113, null], [184, null], [185, null], [185, null], [185, null], [185, null], [185, null], [185, null]], "Examples masker reports": [[471, null]], "Examples of GLM reports": [[470, null]], "Examples of design matrices": [[65, null]], "Examples to better understand the NiftiMasker": [[185, null]], "Examples using Neurovault": [[118, "examples-using-neurovault"]], "Examples using nilearn.connectome.ConnectivityMeasure": [[230, "examples-using-nilearn-connectome-connectivitymeasure"]], "Examples using nilearn.connectome.GroupSparseCovarianceCV": [[232, "examples-using-nilearn-connectome-groupsparsecovariancecv"]], "Examples using nilearn.datasets.fetch_adhd": [[239, "examples-using-nilearn-datasets-fetch-adhd"]], "Examples using nilearn.datasets.fetch_atlas_allen_2011": [[241, "examples-using-nilearn-datasets-fetch-atlas-allen-2011"]], "Examples using nilearn.datasets.fetch_atlas_basc_multiscale_2015": [[242, "examples-using-nilearn-datasets-fetch-atlas-basc-multiscale-2015"]], "Examples using nilearn.datasets.fetch_atlas_destrieux_2009": [[244, "examples-using-nilearn-datasets-fetch-atlas-destrieux-2009"]], "Examples using nilearn.datasets.fetch_atlas_difumo": [[245, "examples-using-nilearn-datasets-fetch-atlas-difumo"]], "Examples using nilearn.datasets.fetch_atlas_harvard_oxford": [[246, "examples-using-nilearn-datasets-fetch-atlas-harvard-oxford"]], "Examples using nilearn.datasets.fetch_atlas_juelich": [[247, "examples-using-nilearn-datasets-fetch-atlas-juelich"]], "Examples using nilearn.datasets.fetch_atlas_msdl": [[248, "examples-using-nilearn-datasets-fetch-atlas-msdl"]], "Examples using nilearn.datasets.fetch_atlas_smith_2009": [[251, "examples-using-nilearn-datasets-fetch-atlas-smith-2009"]], "Examples using nilearn.datasets.fetch_atlas_surf_destrieux": [[252, "examples-using-nilearn-datasets-fetch-atlas-surf-destrieux"]], "Examples using nilearn.datasets.fetch_atlas_yeo_2011": [[254, "examples-using-nilearn-datasets-fetch-atlas-yeo-2011"]], "Examples using nilearn.datasets.fetch_coords_dosenbach_2010": [[256, "examples-using-nilearn-datasets-fetch-coords-dosenbach-2010"]], "Examples using nilearn.datasets.fetch_coords_power_2011": [[257, "examples-using-nilearn-datasets-fetch-coords-power-2011"]], "Examples using nilearn.datasets.fetch_development_fmri": [[259, "examples-using-nilearn-datasets-fetch-development-fmri"]], "Examples using nilearn.datasets.fetch_ds000030_urls": [[260, "examples-using-nilearn-datasets-fetch-ds000030-urls"]], "Examples using nilearn.datasets.fetch_fiac_first_level": [[261, "examples-using-nilearn-datasets-fetch-fiac-first-level"]], "Examples using nilearn.datasets.fetch_haxby": [[262, "examples-using-nilearn-datasets-fetch-haxby"]], "Examples using nilearn.datasets.fetch_icbm152_2009": [[263, "examples-using-nilearn-datasets-fetch-icbm152-2009"]], "Examples using nilearn.datasets.fetch_icbm152_brain_gm_mask": [[264, "examples-using-nilearn-datasets-fetch-icbm152-brain-gm-mask"]], "Examples using nilearn.datasets.fetch_language_localizer_demo_dataset": [[265, "examples-using-nilearn-datasets-fetch-language-localizer-demo-dataset"]], "Examples using nilearn.datasets.fetch_localizer_button_task": [[266, "examples-using-nilearn-datasets-fetch-localizer-button-task"]], "Examples using nilearn.datasets.fetch_localizer_calculation_task": [[267, "examples-using-nilearn-datasets-fetch-localizer-calculation-task"]], "Examples using nilearn.datasets.fetch_localizer_contrasts": [[268, "examples-using-nilearn-datasets-fetch-localizer-contrasts"]], "Examples using nilearn.datasets.fetch_localizer_first_level": [[269, "examples-using-nilearn-datasets-fetch-localizer-first-level"]], "Examples using nilearn.datasets.fetch_megatrawls_netmats": [[270, "examples-using-nilearn-datasets-fetch-megatrawls-netmats"]], "Examples using nilearn.datasets.fetch_mixed_gambles": [[271, "examples-using-nilearn-datasets-fetch-mixed-gambles"]], "Examples using nilearn.datasets.fetch_miyawaki2008": [[272, "examples-using-nilearn-datasets-fetch-miyawaki2008"]], "Examples using nilearn.datasets.fetch_neurovault": [[273, "examples-using-nilearn-datasets-fetch-neurovault"]], "Examples using nilearn.datasets.fetch_neurovault_auditory_computation_task": [[274, "examples-using-nilearn-datasets-fetch-neurovault-auditory-computation-task"]], "Examples using nilearn.datasets.fetch_neurovault_ids": [[275, "examples-using-nilearn-datasets-fetch-neurovault-ids"]], "Examples using nilearn.datasets.fetch_neurovault_motor_task": [[276, "examples-using-nilearn-datasets-fetch-neurovault-motor-task"]], "Examples using nilearn.datasets.fetch_oasis_vbm": [[277, "examples-using-nilearn-datasets-fetch-oasis-vbm"]], "Examples using nilearn.datasets.fetch_openneuro_dataset": [[278, "examples-using-nilearn-datasets-fetch-openneuro-dataset"]], "Examples using nilearn.datasets.fetch_spm_auditory": [[279, "examples-using-nilearn-datasets-fetch-spm-auditory"]], "Examples using nilearn.datasets.fetch_spm_multimodal_fmri": [[280, "examples-using-nilearn-datasets-fetch-spm-multimodal-fmri"]], "Examples using nilearn.datasets.get_data_dirs": [[283, "examples-using-nilearn-datasets-get-data-dirs"]], "Examples using nilearn.datasets.load_fsaverage": [[284, "examples-using-nilearn-datasets-load-fsaverage"]], "Examples using nilearn.datasets.load_fsaverage_data": [[285, "examples-using-nilearn-datasets-load-fsaverage-data"]], "Examples using nilearn.datasets.load_mni152_brain_mask": [[286, "examples-using-nilearn-datasets-load-mni152-brain-mask"]], "Examples using nilearn.datasets.load_mni152_template": [[289, "examples-using-nilearn-datasets-load-mni152-template"]], "Examples using nilearn.datasets.load_nki": [[292, "examples-using-nilearn-datasets-load-nki"]], "Examples using nilearn.datasets.load_sample_motor_activation_image": [[293, "examples-using-nilearn-datasets-load-sample-motor-activation-image"]], "Examples using nilearn.datasets.select_from_index": [[295, "examples-using-nilearn-datasets-select-from-index"]], "Examples using nilearn.decoding.Decoder": [[296, "examples-using-nilearn-decoding-decoder"]], "Examples using nilearn.decoding.DecoderRegressor": [[297, "examples-using-nilearn-decoding-decoderregressor"]], "Examples using nilearn.decoding.FREMClassifier": [[298, "examples-using-nilearn-decoding-fremclassifier"]], "Examples using nilearn.decoding.FREMRegressor": [[299, "examples-using-nilearn-decoding-fremregressor"]], "Examples using nilearn.decoding.SearchLight": [[300, "examples-using-nilearn-decoding-searchlight"]], "Examples using nilearn.decoding.SpaceNetRegressor": [[302, "examples-using-nilearn-decoding-spacenetregressor"]], "Examples using nilearn.decomposition.CanICA": [[303, "examples-using-nilearn-decomposition-canica"]], "Examples using nilearn.decomposition.DictLearning": [[304, "examples-using-nilearn-decomposition-dictlearning"]], "Examples using nilearn.glm.cluster_level_inference": [[313, "examples-using-nilearn-glm-cluster-level-inference"]], "Examples using nilearn.glm.compute_fixed_effects": [[315, "examples-using-nilearn-glm-compute-fixed-effects"]], "Examples using nilearn.glm.first_level.FirstLevelModel": [[318, "examples-using-nilearn-glm-first-level-firstlevelmodel"]], "Examples using nilearn.glm.first_level.compute_regressor": [[320, "examples-using-nilearn-glm-first-level-compute-regressor"]], "Examples using nilearn.glm.first_level.first_level_from_bids": [[321, "examples-using-nilearn-glm-first-level-first-level-from-bids"]], "Examples using nilearn.glm.first_level.make_first_level_design_matrix": [[325, "examples-using-nilearn-glm-first-level-make-first-level-design-matrix"]], "Examples using nilearn.glm.second_level.SecondLevelModel": [[331, "examples-using-nilearn-glm-second-level-secondlevelmodel"]], "Examples using nilearn.glm.second_level.make_second_level_design_matrix": [[332, "examples-using-nilearn-glm-second-level-make-second-level-design-matrix"]], "Examples using nilearn.glm.second_level.non_parametric_inference": [[333, "examples-using-nilearn-glm-second-level-non-parametric-inference"]], "Examples using nilearn.glm.threshold_stats_img": [[334, "examples-using-nilearn-glm-threshold-stats-img"]], "Examples using nilearn.image.clean_img": [[336, "examples-using-nilearn-image-clean-img"]], "Examples using nilearn.image.concat_imgs": [[337, "examples-using-nilearn-image-concat-imgs"]], "Examples using nilearn.image.coord_transform": [[338, "examples-using-nilearn-image-coord-transform"]], "Examples using nilearn.image.get_data": [[341, "examples-using-nilearn-image-get-data"]], "Examples using nilearn.image.high_variance_confounds": [[342, "examples-using-nilearn-image-high-variance-confounds"]], "Examples using nilearn.image.index_img": [[343, "examples-using-nilearn-image-index-img"]], "Examples using nilearn.image.iter_img": [[344, "examples-using-nilearn-image-iter-img"]], "Examples using nilearn.image.load_img": [[346, "examples-using-nilearn-image-load-img"]], "Examples using nilearn.image.math_img": [[347, "examples-using-nilearn-image-math-img"]], "Examples using nilearn.image.mean_img": [[348, "examples-using-nilearn-image-mean-img"]], "Examples using nilearn.image.new_img_like": [[349, "examples-using-nilearn-image-new-img-like"]], "Examples using nilearn.image.resample_img": [[351, "examples-using-nilearn-image-resample-img"]], "Examples using nilearn.image.resample_to_img": [[352, "examples-using-nilearn-image-resample-to-img"]], "Examples using nilearn.image.smooth_img": [[353, "examples-using-nilearn-image-smooth-img"]], "Examples using nilearn.image.threshold_img": [[355, "examples-using-nilearn-image-threshold-img"]], "Examples using nilearn.interfaces.bids.save_glm_to_bids": [[358, "examples-using-nilearn-interfaces-bids-save-glm-to-bids"]], "Examples using nilearn.interfaces.fmriprep.load_confounds": [[359, "examples-using-nilearn-interfaces-fmriprep-load-confounds"]], "Examples using nilearn.interfaces.fmriprep.load_confounds_strategy": [[360, "examples-using-nilearn-interfaces-fmriprep-load-confounds-strategy"]], "Examples using nilearn.interfaces.fsl.get_design_from_fslmat": [[361, "examples-using-nilearn-interfaces-fsl-get-design-from-fslmat"]], "Examples using nilearn.maskers.BaseMasker": [[362, "examples-using-nilearn-maskers-basemasker"]], "Examples using nilearn.maskers.MultiNiftiLabelsMasker": [[363, "examples-using-nilearn-maskers-multiniftilabelsmasker"]], "Examples using nilearn.maskers.MultiNiftiMapsMasker": [[364, "examples-using-nilearn-maskers-multiniftimapsmasker"]], "Examples using nilearn.maskers.MultiNiftiMasker": [[365, "examples-using-nilearn-maskers-multiniftimasker"]], "Examples using nilearn.maskers.NiftiLabelsMasker": [[366, "examples-using-nilearn-maskers-niftilabelsmasker"]], "Examples using nilearn.maskers.NiftiMapsMasker": [[367, "examples-using-nilearn-maskers-niftimapsmasker"]], "Examples using nilearn.maskers.NiftiMasker": [[368, "examples-using-nilearn-maskers-niftimasker"]], "Examples using nilearn.maskers.NiftiSpheresMasker": [[369, "examples-using-nilearn-maskers-niftispheresmasker"]], "Examples using nilearn.maskers.SurfaceLabelsMasker": [[370, "examples-using-nilearn-maskers-surfacelabelsmasker"]], "Examples using nilearn.maskers.SurfaceMasker": [[372, "examples-using-nilearn-maskers-surfacemasker"]], "Examples using nilearn.masking.apply_mask": [[373, "examples-using-nilearn-masking-apply-mask"]], "Examples using nilearn.masking.compute_epi_mask": [[376, "examples-using-nilearn-masking-compute-epi-mask"]], "Examples using nilearn.masking.unmask": [[381, "examples-using-nilearn-masking-unmask"]], "Examples using nilearn.mass_univariate.permuted_ols": [[382, "examples-using-nilearn-mass-univariate-permuted-ols"]], "Examples using nilearn.plotting.displays.LProjector": [[387, "examples-using-nilearn-plotting-displays-lprojector"]], "Examples using nilearn.plotting.displays.LRProjector": [[388, "examples-using-nilearn-plotting-displays-lrprojector"]], "Examples using nilearn.plotting.displays.LYRProjector": [[389, "examples-using-nilearn-plotting-displays-lyrprojector"]], "Examples using nilearn.plotting.displays.LYRZProjector": [[390, "examples-using-nilearn-plotting-displays-lyrzprojector"]], "Examples using nilearn.plotting.displays.LZRProjector": [[391, "examples-using-nilearn-plotting-displays-lzrprojector"]], "Examples using nilearn.plotting.displays.LZRYProjector": [[392, "examples-using-nilearn-plotting-displays-lzryprojector"]], "Examples using nilearn.plotting.displays.MosaicSlicer": [[393, "examples-using-nilearn-plotting-displays-mosaicslicer"]], "Examples using nilearn.plotting.displays.OrthoProjector": [[394, "examples-using-nilearn-plotting-displays-orthoprojector"]], "Examples using nilearn.plotting.displays.OrthoSlicer": [[395, "examples-using-nilearn-plotting-displays-orthoslicer"]], "Examples using nilearn.plotting.displays.PlotlySurfaceFigure": [[396, "examples-using-nilearn-plotting-displays-plotlysurfacefigure"]], "Examples using nilearn.plotting.displays.RProjector": [[397, "examples-using-nilearn-plotting-displays-rprojector"]], "Examples using nilearn.plotting.displays.TiledSlicer": [[398, "examples-using-nilearn-plotting-displays-tiledslicer"]], "Examples using nilearn.plotting.displays.XProjector": [[399, "examples-using-nilearn-plotting-displays-xprojector"]], "Examples using nilearn.plotting.displays.XSlicer": [[400, "examples-using-nilearn-plotting-displays-xslicer"]], "Examples using nilearn.plotting.displays.XZProjector": [[401, "examples-using-nilearn-plotting-displays-xzprojector"]], "Examples using nilearn.plotting.displays.XZSlicer": [[402, "examples-using-nilearn-plotting-displays-xzslicer"]], "Examples using nilearn.plotting.displays.YProjector": [[403, "examples-using-nilearn-plotting-displays-yprojector"]], "Examples using nilearn.plotting.displays.YSlicer": [[404, "examples-using-nilearn-plotting-displays-yslicer"]], "Examples using nilearn.plotting.displays.YXProjector": [[405, "examples-using-nilearn-plotting-displays-yxprojector"]], "Examples using nilearn.plotting.displays.YXSlicer": [[406, "examples-using-nilearn-plotting-displays-yxslicer"]], "Examples using nilearn.plotting.displays.YZProjector": [[407, "examples-using-nilearn-plotting-displays-yzprojector"]], "Examples using nilearn.plotting.displays.YZSlicer": [[408, "examples-using-nilearn-plotting-displays-yzslicer"]], "Examples using nilearn.plotting.displays.ZProjector": [[409, "examples-using-nilearn-plotting-displays-zprojector"]], "Examples using nilearn.plotting.displays.ZSlicer": [[410, "examples-using-nilearn-plotting-displays-zslicer"]], "Examples using nilearn.plotting.find_parcellation_cut_coords": [[414, "examples-using-nilearn-plotting-find-parcellation-cut-coords"]], "Examples using nilearn.plotting.find_probabilistic_atlas_cut_coords": [[415, "examples-using-nilearn-plotting-find-probabilistic-atlas-cut-coords"]], "Examples using nilearn.plotting.find_xyz_cut_coords": [[416, "examples-using-nilearn-plotting-find-xyz-cut-coords"]], "Examples using nilearn.plotting.plot_anat": [[417, "examples-using-nilearn-plotting-plot-anat"]], "Examples using nilearn.plotting.plot_carpet": [[418, "examples-using-nilearn-plotting-plot-carpet"]], "Examples using nilearn.plotting.plot_connectome": [[419, "examples-using-nilearn-plotting-plot-connectome"]], "Examples using nilearn.plotting.plot_contrast_matrix": [[420, "examples-using-nilearn-plotting-plot-contrast-matrix"]], "Examples using nilearn.plotting.plot_design_matrix": [[421, "examples-using-nilearn-plotting-plot-design-matrix"]], "Examples using nilearn.plotting.plot_design_matrix_correlation": [[422, "examples-using-nilearn-plotting-plot-design-matrix-correlation"]], "Examples using nilearn.plotting.plot_epi": [[423, "examples-using-nilearn-plotting-plot-epi"]], "Examples using nilearn.plotting.plot_event": [[424, "examples-using-nilearn-plotting-plot-event"]], "Examples using nilearn.plotting.plot_glass_brain": [[425, "examples-using-nilearn-plotting-plot-glass-brain"]], "Examples using nilearn.plotting.plot_img": [[426, "examples-using-nilearn-plotting-plot-img"]], "Examples using nilearn.plotting.plot_img_comparison": [[427, "examples-using-nilearn-plotting-plot-img-comparison"]], "Examples using nilearn.plotting.plot_img_on_surf": [[428, "examples-using-nilearn-plotting-plot-img-on-surf"]], "Examples using nilearn.plotting.plot_markers": [[429, "examples-using-nilearn-plotting-plot-markers"]], "Examples using nilearn.plotting.plot_matrix": [[430, "examples-using-nilearn-plotting-plot-matrix"]], "Examples using nilearn.plotting.plot_prob_atlas": [[431, "examples-using-nilearn-plotting-plot-prob-atlas"]], "Examples using nilearn.plotting.plot_roi": [[432, "examples-using-nilearn-plotting-plot-roi"]], "Examples using nilearn.plotting.plot_stat_map": [[433, "examples-using-nilearn-plotting-plot-stat-map"]], "Examples using nilearn.plotting.plot_surf": [[434, "examples-using-nilearn-plotting-plot-surf"]], "Examples using nilearn.plotting.plot_surf_contours": [[435, "examples-using-nilearn-plotting-plot-surf-contours"]], "Examples using nilearn.plotting.plot_surf_roi": [[436, "examples-using-nilearn-plotting-plot-surf-roi"]], "Examples using nilearn.plotting.plot_surf_stat_map": [[437, "examples-using-nilearn-plotting-plot-surf-stat-map"]], "Examples using nilearn.plotting.show": [[438, "examples-using-nilearn-plotting-show"]], "Examples using nilearn.plotting.view_connectome": [[439, "examples-using-nilearn-plotting-view-connectome"]], "Examples using nilearn.plotting.view_img": [[440, "examples-using-nilearn-plotting-view-img"]], "Examples using nilearn.plotting.view_img_on_surf": [[441, "examples-using-nilearn-plotting-view-img-on-surf"]], "Examples using nilearn.plotting.view_surf": [[443, "examples-using-nilearn-plotting-view-surf"]], "Examples using nilearn.regions.Parcellations": [[445, "examples-using-nilearn-regions-parcellations"]], "Examples using nilearn.regions.RegionExtractor": [[447, "examples-using-nilearn-regions-regionextractor"]], "Examples using nilearn.regions.connected_label_regions": [[448, "examples-using-nilearn-regions-connected-label-regions"]], "Examples using nilearn.regions.connected_regions": [[449, "examples-using-nilearn-regions-connected-regions"]], "Examples using nilearn.reporting.HTMLReport": [[455, "examples-using-nilearn-reporting-htmlreport"]], "Examples using nilearn.reporting.get_clusters_table": [[456, "examples-using-nilearn-reporting-get-clusters-table"]], "Examples using nilearn.reporting.make_glm_report": [[457, "examples-using-nilearn-reporting-make-glm-report"]], "Examples using nilearn.surface.FileMesh": [[461, "examples-using-nilearn-surface-filemesh"]], "Examples using nilearn.surface.InMemoryMesh": [[462, "examples-using-nilearn-surface-inmemorymesh"]], "Examples using nilearn.surface.PolyData": [[463, "examples-using-nilearn-surface-polydata"]], "Examples using nilearn.surface.PolyMesh": [[464, "examples-using-nilearn-surface-polymesh"]], "Examples using nilearn.surface.SurfaceImage": [[465, "examples-using-nilearn-surface-surfaceimage"]], "Examples using nilearn.surface.SurfaceMesh": [[466, "examples-using-nilearn-surface-surfacemesh"]], "Examples using nilearn.surface.vol_to_surf": [[469, "examples-using-nilearn-surface-vol-to-surf"]], "Execution time": [[171, "execution-time"]], "Exercise": [[185, null]], "Exercise: computing connectivity in tangent space": [[158, null]], "Exercise: computing sparse inverse covariance": [[158, null]], "Exercise: computing the correlation matrix of rest fmri": [[158, null], [159, null]], "Exercise: correlation matrix of rest fMRI on probabilistic atlas": [[159, null]], "Extra mask parameters: opening, cutoff\u2026": [[185, "extra-mask-parameters-opening-cutoff"]], "Extract coordinates on Yeo atlas - parcellations": [[49, "extract-coordinates-on-yeo-atlas-parcellations"]], "Extract functional networks with Dictionary learning": [[52, "extract-functional-networks-with-dictionary-learning"]], "Extract regions from networks": [[52, "extract-regions-from-networks"]], "Extract signals and compute a connectivity matrix without confounds removal": [[58, "extract-signals-and-compute-a-connectivity-matrix-without-confounds-removal"]], "Extract signals on a parcellation defined by labels": [[58, "extract-signals-on-a-parcellation-defined-by-labels"]], "Extract signals on spheres and plot a connectome": [[60, null]], "Extract signals on spheres from an atlas": [[60, "extract-signals-on-spheres-from-an-atlas"]], "Extract subjects variabilities around a group connectivity": [[53, "extract-subjects-variabilities-around-a-group-connectivity"]], "Extract the largest clusters": [[70, "extract-the-largest-clusters"]], "Extract the seed region\u2019s time course": [[63, "extract-the-seed-region-s-time-course"]], "Extract the time series": [[56, "extract-the-time-series"]], "Extract time series": [[54, "extract-time-series"]], "Extracting a brain mask": [[26, "extracting-a-brain-mask"], [184, "extracting-a-brain-mask"]], "Extracting functional brain networks: ICA and related": [[163, null]], "Extracting predicted time series and residuals": [[173, "extracting-predicted-time-series-and-residuals"]], "Extracting region signals": [[55, "extracting-region-signals"]], "Extracting signals from a brain parcellation": [[58, null]], "Extracting signals from a probabilistic atlas": [[159, "extracting-signals-from-a-probabilistic-atlas"]], "Extracting signals from brain regions using the NiftiLabelsMasker": [[92, null]], "Extracting signals of a probabilistic atlas of functional regions": [[56, null]], "Extracting signals on a parcellation": [[159, "extracting-signals-on-a-parcellation"]], "Extracting the seed time series with masker": [[24, "extracting-the-seed-time-series-with-masker"]], "Extracting times series to build a functional connectome": [[159, null]], "Extraction of signals from regions for multiple subjects: MultiNiftiMasker, MultiNiftiLabelsMasker, MultiNiftiMapsMasker": [[185, "extraction-of-signals-from-regions-for-multiple-subjects-multiniftimasker-multiniftilabelsmasker-multiniftimapsmasker"]], "Extraction of signals from regions: NiftiLabelsMasker, NiftiMapsMasker": [[185, "extraction-of-signals-from-regions-niftilabelsmasker-niftimapsmasker"]], "Extraction of signals from seeds: NiftiSpheresMasker": [[185, "extraction-of-signals-from-seeds-niftispheresmasker"]], "Extracts signal from sphere around DMN seeds": [[60, "extracts-signal-from-sphere-around-dmn-seeds"]], "F-scores computation": [[37, "f-scores-computation"]], "FIAC": [[470, "fiac"]], "FIXES": [[146, "fixes"], [157, "id2666"]], "FMRIB Software Library (FSL)": [[176, "fmrib-software-library-fsl"]], "FREM on Jimura et al \u201cmixed gambles\u201d dataset": [[41, null]], "FREM pipeline": [[166, "frem-pipeline"]], "FREM: fast ensembling of regularized models for robust decoding": [[166, null]], "Feature extraction: from fMRI volumes to a data matrix": [[3, "feature-extraction-from-fmri-volumes-to-a-data-matrix"]], "Feature selection": [[40, "feature-selection"]], "Featured examples": [[179, "featured-examples"]], "Fetch brain development functional datasets": [[52, "fetch-brain-development-functional-datasets"]], "Fetch data": [[26, "fetch-data"]], "Fetch dataset": [[77, "fetch-dataset"], [80, "fetch-dataset"], [81, "fetch-dataset"]], "Fetch example BIDS dataset": [[102, "fetch-example-bids-dataset"], [110, "fetch-example-bids-dataset"]], "Fetch example Haxby dataset": [[34, "fetch-example-haxby-dataset"]], "Fetch images for \u201csuccessful stop minus go\u201d-like protocols.": [[109, "fetch-images-for-successful-stop-minus-go-like-protocols"]], "Fetch openneuro BIDS dataset": [[64, "fetch-openneuro-bids-dataset"]], "Fetching Probabilistic atlas - MSDL atlas": [[21, "fetching-probabilistic-atlas-msdl-atlas"]], "Fetching data from ADHD dataset": [[12, "fetching-data-from-adhd-dataset"]], "Fetching datasets": [[55, "fetching-datasets"]], "Fetching movie-watching based functional datasets": [[162, "fetching-movie-watching-based-functional-datasets"]], "Fetching open datasets from Internet": [[183, "fetching-open-datasets-from-internet"]], "Fetching the Megatrawls Network matrices": [[27, "fetching-the-megatrawls-network-matrices"]], "File name matching: \u201cglobbing\u201d and user path expansion": [[183, "file-name-matching-globbing-and-user-path-expansion"]], "File names and objects, 3D and 4D images": [[183, "file-names-and-objects-3d-and-4d-images"]], "Final script": [[164, null]], "Finding help": [[180, "finding-help"]], "First download the data": [[3, "first-download-the-data"], [99, "first-download-the-data"]], "First level analysis of a complete BIDS dataset from openneuro": [[64, null]], "First level model estimation": [[102, "first-level-model-estimation"]], "First level model estimation (one subject)": [[64, "first-level-model-estimation-one-subject"]], "First level models": [[173, null]], "First level report": [[470, "first-level-report"]], "First steps with nilearn": [[180, "first-steps-with-nilearn"]], "First we load the Miyawaki dataset": [[43, "first-we-load-the-miyawaki-dataset"]], "First, we retrieve data from nilearn provided (general-purpose) datasets": [[16, "first-we-retrieve-data-from-nilearn-provided-general-purpose-datasets"]], "Fisher-z transformation and save nifti": [[57, "fisher-z-transformation-and-save-nifti"]], "Fit FREM": [[32, "fit-frem"], [41, "fit-frem"]], "Fit model": [[70, "fit-model"]], "Fit the Decoder and predict the responses": [[35, "fit-the-decoder-and-predict-the-responses"]], "Fit the SpaceNet and predict with it": [[45, "fit-the-spacenet-and-predict-with-it"]], "Fit the decoder and predict": [[30, "fit-the-decoder-and-predict"]], "Fitting CanICA model with nilearn": [[163, "fitting-canica-model-with-nilearn"]], "Fitting a first level model": [[173, "fitting-a-first-level-model"]], "Fitting a second level model": [[177, "fitting-a-second-level-model"]], "Fixed effects analyses": [[176, null]], "Fixes": [[122, "fixes"], [124, "fixes"], [125, "fixes"], [125, "id2"], [126, "fixes"], [127, "fixes"], [128, "fixes"], [129, "fixes"], [130, "fixes"], [133, "fixes"], [136, "fixes"], [137, "fixes"], [138, "fixes"], [138, "id3"], [139, "fixes"], [140, "fixes"], [142, "fixes"], [143, "fixes"], [144, "fixes"], [145, "fixes"], [146, "id4"], [146, "id8"], [146, "id12"], [147, "fixes"], [148, "fixes"], [149, "fixes"], [150, "fixes"], [151, "fixes"], [152, "fixes"], [153, "fixes"], [154, "fixes"], [155, "fixes"], [157, "fixes"], [157, "id165"], [157, "id330"], [157, "id496"], [157, "id663"], [157, "id829"], [157, "id832"], [157, "id999"], [157, "id1168"], [157, "id1333"], [157, "id1500"], [157, "id1667"], [157, "id1834"], [157, "id2001"], [157, "id2168"], [157, "id2333"], [157, "id2498"], [157, "id2669"], [157, "id2674"], [157, "id2678"], [157, "id2843"], [157, "id3009"], [157, "id3183"], [157, "id3353"], [157, "id3682"], [157, "id3849"], [157, "id4014"], [157, "id4019"], [157, "id4183"], [157, "id4350"], [157, "id4845"], [157, "id5343"]], "Fixtures": [[172, "fixtures"]], "From neuroimaging volumes to data matrices: the masker objects": [[185, null]], "Full Example": [[158, null]], "Full code example": [[164, null]], "Full example": [[158, null], [158, null], [158, null], [159, null], [159, null]], "Functional connectivity": [[48, null], [113, "functional-connectivity"]], "Functional connectivity and resting state": [[160, null]], "Functional connectivity predicts age group": [[100, null]], "Functions": [[186, "functions"], [187, "functions"], [187, "id1"], [187, "id2"], [187, "id3"], [472, "functions"], [472, "id2"], [472, "id4"], [473, "functions"], [475, "functions"], [475, "id1"], [475, "id2"], [477, "functions"], [478, "functions"], [479, "functions"], [479, "id1"], [480, "functions"], [481, "functions"], [482, "functions"], [483, "functions"]], "Functions for data preparation and image transformation": [[184, "functions-for-data-preparation-and-image-transformation"]], "Funding": [[0, "funding"]], "Further Reading": [[169, null]], "Further reading": [[7, "further-reading"]], "GLM: First level analysis": [[62, null], [113, "glm-first-level-analysis"]], "GLM: Second level analysis": [[75, null], [113, "glm-second-level-analysis"]], "General bibliography": [[115, null]], "General functions": [[187, "general-functions"]], "General functions descriptions": [[187, "general-functions-descriptions"]], "Generate an events.tsv file for the NeuroSpin localizer task": [[73, null]], "Generate figures": [[105, "generate-figures"]], "Generating a report": [[34, "generating-a-report"], [63, "generating-a-report"], [72, "generating-a-report"], [76, "generating-a-report"]], "Get image and term data": [[105, "get-image-and-term-data"]], "Get residuals": [[70, "get-residuals"]], "Get the locations from which vol_to_surf would draw its samples": [[25, "get-the-locations-from-which-vol-to-surf-would-draw-its-samples"]], "Getting the data": [[57, "getting-the-data"]], "Github release": [[181, "github-release"]], "Glass brain plotting in nilearn": [[14, null]], "Glass brain plotting in nilearn (all options)": [[15, null]], "Glass brain plotting: Hemispheric sagittal cuts": [[14, "glass-brain-plotting-hemispheric-sagittal-cuts"]], "Glass brain plotting: black background": [[14, "glass-brain-plotting-black-background"]], "Glass brain plotting: whole brain sagittal cuts": [[14, "glass-brain-plotting-whole-brain-sagittal-cuts"]], "Globbing over multiple 3D volumes": [[4, "globbing-over-multiple-3d-volumes"]], "Glossary": [[178, null]], "Going further": [[117, "going-further"]], "Going further with scikit-learn": [[99, "going-further-with-scikit-learn"], [167, "going-further-with-scikit-learn"]], "Group Sparse inverse covariance for multi-subject connectome": [[55, null]], "Group level model": [[110, "group-level-model"]], "Group-sparse covariance estimation": [[171, null]], "Guidelines for HTML and CSS": [[172, "guidelines-for-html-and-css"]], "Guidelines for Private Functions": [[172, "guidelines-for-private-functions"]], "HIGHLIGHTS": [[124, "highlights"], [126, "highlights"], [127, "highlights"], [128, "highlights"], [129, "highlights"], [130, "highlights"], [146, "highlights"], [149, "highlights"], [150, "highlights"], [151, "highlights"], [152, "highlights"], [153, "highlights"], [155, "highlights"], [157, "highlights"], [157, "id164"], [157, "id329"], [157, "id495"], [157, "id661"], [157, "id997"], [157, "id1164"], [157, "id1498"], [157, "id1665"], [157, "id1832"], [157, "id1999"], [157, "id2165"], [157, "id2662"]], "HRF models": [[173, "hrf-models"]], "Harvard Oxford atlas": [[209, null]], "Haxby dataset": [[210, null]], "Here we run the prediction: the decoding itself": [[43, "here-we-run-the-prediction-the-decoding-itself"]], "Highlights": [[123, "highlights"], [138, "highlights"], [139, "highlights"], [140, "highlights"], [143, "highlights"], [143, "id4"], [143, "id8"], [157, "id3177"], [157, "id3181"], [157, "id3186"], [157, "id3680"], [157, "id3847"], [157, "id4017"], [157, "id5179"]], "How do we decide what code goes in?": [[172, "how-do-we-decide-what-code-goes-in"]], "How to contribute a dataset fetcher": [[172, "how-to-contribute-a-dataset-fetcher"]], "How to contribute an atlas": [[172, "how-to-contribute-an-atlas"]], "How to contribute to nilearn": [[172, "how-to-contribute-to-nilearn"]], "How to get help?": [[172, "how-to-get-help"]], "How to help the project?": [[172, "how-to-help-the-project"]], "How to make a release?": [[181, "how-to-make-a-release"]], "How to use add_contours": [[16, "how-to-use-add-contours"]], "Hyperparameter optimization": [[40, "hyperparameter-optimization"]], "ICBM 152 template": [[211, null]], "Image affines": [[183, null]], "Image operations: creating a ROI mask manually": [[184, "image-operations-creating-a-roi-mask-manually"]], "Impact of plot parameters on visualization": [[10, "impact-of-plot-parameters-on-visualization"]], "Implementing a KFold loop": [[3, "implementing-a-kfold-loop"]], "Import modules": [[70, "import-modules"]], "Important links": [[485, "important-links"]], "Inference with massively univariate model": [[44, "inference-with-massively-univariate-model"]], "Initial estimate value": [[171, "initial-estimate-value"]], "Initialize and run the GLM": [[72, "initialize-and-run-the-glm"]], "Input and output: neuroimaging data representation": [[183, null]], "Inputing data: file names or image objects": [[183, "inputing-data-file-names-or-image-objects"]], "Inspecting the dataset": [[6, "inspecting-the-dataset"]], "Inspecting the model weights": [[3, "inspecting-the-model-weights"]], "Install": [[485, "install"]], "Installing": [[172, "installing"]], "Instantiate and run FirstLevelModel": [[34, "instantiate-and-run-firstlevelmodel"]], "Interactive plots": [[484, "interactive-plots"]], "Interactive visualization of statistical map slices": [[484, "interactive-visualization-of-statistical-map-slices"]], "Interpreting such components": [[163, "interpreting-such-components"]], "Intro to GLM Analysis: a single-run, single-subject fMRI dataset": [[6, null]], "Introduction": [[180, null]], "Inverse transform: unmasking data": [[185, "inverse-transform-unmasking-data"]], "Issues": [[181, "issues"]], "Iterate over fetched atlases to extract coordinates - probabilistic": [[49, "iterate-over-fetched-atlases-to-extract-coordinates-probabilistic"]], "Iterative grid search": [[171, "iterative-grid-search"]], "Juelich atlas": [[212, null]], "Known Issues": [[144, "known-issues"], [157, "known-issues"]], "Labels": [[181, "labels"]], "Latest release": [[485, "latest-release"]], "Learning with examples": [[180, "learning-with-examples"]], "Learning with the API references": [[180, "learning-with-the-api-references"]], "Let us quantify our prediction error": [[43, "let-us-quantify-our-prediction-error"]], "License": [[190, "license"], [192, "license"], [193, "license"], [194, "license"], [195, "license"], [197, "license"], [198, "license"], [199, "license"], [200, "license"], [201, "license"], [202, "license"], [203, "license"], [204, "license"], [205, "license"], [206, "license"], [207, "license"], [208, "license"], [209, "license"], [210, "license"], [211, "license"], [212, "license"], [213, "license"], [214, "license"], [215, "license"], [216, "license"], [217, "license"], [218, "license"], [219, "license"], [220, "license"], [221, "license"], [222, "license"], [223, "license"], [224, "license"], [225, "license"], [226, "license"], [227, "license"], [228, "license"], [229, "license"]], "Linking total and direct interactions at the group level": [[158, "linking-total-and-direct-interactions-at-the-group-level"]], "Load Haxby dataset": [[19, "load-haxby-dataset"], [37, "load-haxby-dataset"], [38, "load-haxby-dataset"]], "Load Oasis dataset": [[44, "load-oasis-dataset"], [76, "load-oasis-dataset"]], "Load and prepare the data": [[33, "load-and-prepare-the-data"]], "Load atlases": [[49, "load-atlases"]], "Load brain development fMRI dataset": [[50, "load-brain-development-fmri-dataset"]], "Load brain development fMRI dataset and MSDL atlas": [[53, "load-brain-development-fmri-dataset-and-msdl-atlas"], [100, "load-brain-development-fmri-dataset-and-msdl-atlas"]], "Load confounds from file using a flexible strategy with fmriprep interface": [[58, "load-confounds-from-file-using-a-flexible-strategy-with-fmriprep-interface"]], "Load data": [[14, "load-data"]], "Load functional data": [[49, "load-functional-data"]], "Load probabilistic atlases - extracting coordinates on brain maps": [[49, "load-probabilistic-atlases-extracting-coordinates-on-brain-maps"]], "Load the Haxby data dataset": [[36, "load-the-haxby-data-dataset"]], "Load the Haxby dataset": [[32, "load-the-haxby-dataset"], [35, "load-the-haxby-dataset"], [40, "load-the-haxby-dataset"]], "Load the Oasis VBM dataset": [[45, "load-the-oasis-vbm-dataset"]], "Load the behavioral data": [[30, "load-the-behavioral-data"], [34, "load-the-behavioral-data"]], "Load the behavioral labels": [[3, "load-the-behavioral-labels"]], "Load the data": [[15, "load-the-data"]], "Load the data from the Jimura mixed-gamble experiment": [[41, "load-the-data-from-the-jimura-mixed-gamble-experiment"]], "Load the surface image": [[7, "load-the-surface-image"]], "Loading and plotting of a cortical surface atlas": [[23, null]], "Loading and preparing the data": [[164, "loading-and-preparing-the-data"]], "Loading non image data: experiment description": [[117, "loading-non-image-data-experiment-description"]], "Loading the data": [[31, "loading-the-data"], [42, "loading-the-data"], [95, "loading-the-data"]], "Loading the data into nilearn": [[164, "loading-the-data-into-nilearn"]], "Looping on all volumes in a 4D file": [[2, "looping-on-all-volumes-in-a-4d-file"]], "Looping through selected volumes in a 4D file": [[2, "looping-through-selected-volumes-in-a-4d-file"]], "MSDL atlas": [[217, null]], "Machine learning applications to Neuroimaging": [[180, "machine-learning-applications-to-neuroimaging"]], "Maintenance": [[172, "maintenance"], [181, null]], "Making a surface plot of a 3D statistical map": [[10, null]], "Making interactive visualizations with function view_img": [[17, "making-interactive-visualizations-with-function-view-img"]], "Manipulating brain image volumes": [[84, null], [113, "manipulating-brain-image-volumes"]], "Manipulating images: resampling, smoothing, masking, ROIs\u2026": [[184, null]], "Manipulation brain volumes with nilearn": [[182, null]], "Manually leaving out data": [[3, "manually-leaving-out-data"]], "Mapping the encoding scores on the brain": [[42, "mapping-the-encoding-scores-on-the-brain"]], "Masking": [[67, "masking"], [169, "masking"]], "Masking and plotting surface images": [[111, "masking-and-plotting-surface-images"]], "Masking data: from 4D Nifti images to 2D data arrays": [[184, "masking-data-from-4d-nifti-images-to-2d-data-arrays"]], "Masking the data": [[99, "masking-the-data"]], "Masking the data: from 4D image to 2D array": [[117, "masking-the-data-from-4d-image-to-2d-array"]], "Massively univariate analysis of a calculation task from the Localizer dataset": [[108, null]], "Massively univariate analysis of a motor task from the Localizer dataset": [[107, null]], "Massively univariate analysis of face vs house recognition": [[104, null]], "Matplotlib colormaps in Nilearn": [[13, null]], "Maximum number of iterations": [[171, "maximum-number-of-iterations"]], "Measuring prediction performance": [[164, "measuring-prediction-performance"]], "Measuring prediction scores using cross-validation": [[3, "measuring-prediction-scores-using-cross-validation"]], "Measuring the chance level": [[99, "measuring-the-chance-level"], [167, "measuring-the-chance-level"]], "MegaTrawls Network Matrices HCP": [[191, null]], "Mesh": [[7, "mesh"]], "Mixed gambles statistical maps": [[215, null]], "Miyawaki 2008 dataset": [[216, null]], "Modifying dimensions in the formula": [[103, "modifying-dimensions-in-the-formula"]], "Modifying the stopping criterion": [[171, "modifying-the-stopping-criterion"]], "More plotting tools from nilearn": [[16, null]], "Motion-based scrubbing": [[58, "motion-based-scrubbing"]], "Multi-subject ICA: CanICA": [[163, "multi-subject-ica-canica"]], "MultiNiftiLabelsMasker Usage": [[185, "multiniftilabelsmasker-usage"]], "MultiNiftiMapsMasker Usage": [[185, "multiniftimapsmasker-usage"]], "MultiNiftiMasker Usage": [[185, "multiniftimasker-usage"]], "Multiple Comparisons": [[174, "multiple-comparisons"]], "Multiple comparisons correction": [[177, "multiple-comparisons-correction"]], "Multivariate decompositions: Independent component analysis of fMRI": [[106, null]], "NEW": [[124, "new"], [125, "new"], [126, "new"], [127, "new"], [143, "new"], [144, "new"], [145, "new"], [146, "new"], [146, "id2"], [146, "id5"], [146, "id10"], [149, "new"], [150, "new"], [151, "new"], [152, "new"], [153, "new"], [155, "new"], [157, "new"], [157, "id662"], [157, "id828"], [157, "id998"], [157, "id1166"], [157, "id1499"], [157, "id1666"], [157, "id1833"], [157, "id2000"], [157, "id2166"], [157, "id2663"], [157, "id2667"], [157, "id2671"], [157, "id2676"], [157, "id2842"], [157, "id3007"], [157, "id3173"]], "NKI enhanced surface dataset": [[219, null]], "Negating an image with math_img": [[91, null]], "Nested cross-validation": [[35, "nested-cross-validation"]], "NeuroImaging volumes visualization": [[26, null]], "NeuroVault cross-study ICA maps": [[105, null]], "NeuroVault meta-analysis of stop-go paradigm studies": [[109, null]], "Neurosynth annotations": [[118, "neurosynth-annotations"]], "Neurovault statistical maps": [[218, null]], "New": [[133, "new"], [135, "new"], [136, "new"], [136, "id3"], [157, "id4349"], [157, "id4352"], [157, "id4516"], [157, "id4843"]], "New features": [[131, "new-features"], [134, "new-features"], [157, "new-features"], [157, "id5013"]], "Nifti and Analyze data": [[183, "nifti-and-analyze-data"]], "Nifti labels masker": [[471, "nifti-labels-masker"]], "Nifti maps masker": [[471, "nifti-maps-masker"]], "Nifti masker": [[471, "nifti-masker"]], "Nifti sphere masker": [[471, "nifti-sphere-masker"]], "NiftiLabelsMasker Usage": [[185, "niftilabelsmasker-usage"]], "NiftiMapsMasker Usage": [[185, "niftimapsmasker-usage"]], "NiftiMasker: applying a mask to load time-series": [[185, "niftimasker-applying-a-mask-to-load-time-series"]], "Niimg-like objects": [[183, "niimg-like-objects"]], "Nilearn": [[179, null]], "Nilearn data for examples": [[163, null]], "Notes": [[190, "notes"], [191, "notes"], [192, "notes"], [193, "notes"], [194, "notes"], [196, "notes"], [197, "notes"], [198, "notes"], [199, "notes"], [200, "notes"], [201, "notes"], [202, "notes"], [203, "notes"], [204, "notes"], [205, "notes"], [206, "notes"], [207, "notes"], [208, "notes"], [209, "notes"], [210, "notes"], [211, "notes"], [212, "notes"], [213, "notes"], [214, "notes"], [215, "notes"], [216, "notes"], [217, "notes"], [218, "notes"], [219, "notes"], [220, "notes"], [221, "notes"], [222, "notes"], [223, "notes"], [224, "notes"], [225, "notes"], [226, "notes"], [227, "notes"], [228, "notes"], [229, "notes"]], "Now we compute cross-validation scores": [[36, "now-we-compute-cross-validation-scores"]], "Now, another way of limiting the number of slices along rows and columns": [[16, "now-another-way-of-limiting-the-number-of-slices-along-rows-and-columns"]], "Now, changing the number of slices along columns": [[16, "now-changing-the-number-of-slices-along-columns"]], "Now, views are changed to \u2018coronal\u2019 and \u2018axial\u2019 views with coordinates": [[16, "now-views-are-changed-to-coronal-and-axial-views-with-coordinates"]], "Numerical stability": [[171, "numerical-stability"]], "OASIS volume based morphometry maps": [[220, null]], "Objective": [[163, "objective"]], "Obtain FirstLevelModel objects automatically and fit arguments": [[64, "obtain-firstlevelmodel-objects-automatically-and-fit-arguments"]], "Obtain automatically FirstLevelModel objects and fit arguments": [[102, "obtain-automatically-firstlevelmodel-objects-and-fit-arguments"]], "Obtain prediction scores via cross validation": [[30, "obtain-prediction-scores-via-cross-validation"]], "Only generating the HTML report": [[64, "only-generating-the-html-report"]], "Other contributors": [[0, "other-contributors"]], "Other probabilistic atlases accessible with nilearn": [[22, "other-probabilistic-atlases-accessible-with-nilearn"]], "Output": [[118, "output"]], "PR Structure": [[172, "pr-structure"]], "Page summary": [[158, null], [159, null], [162, null], [163, null], [173, null], [176, null], [177, null]], "Parameter min_size": [[87, "parameter-min-size"]], "Parameter selection": [[158, null]], "Parametric modulation": [[65, "parametric-modulation"], [73, "parametric-modulation"]], "Pauli 2007 atlas": [[221, null]], "Perform first level analysis": [[63, "perform-first-level-analysis"], [69, "perform-first-level-analysis"]], "Perform the second level analysis": [[82, "perform-the-second-level-analysis"]], "Performing a simple decoding analysis": [[164, "performing-a-simple-decoding-analysis"]], "Performing an F-test": [[6, "performing-an-f-test"]], "Performing decoding with scikit-learn": [[99, "performing-decoding-with-scikit-learn"], [167, "performing-decoding-with-scikit-learn"]], "Performing the GLM analysis": [[6, "performing-the-glm-analysis"]], "Performing the seed-to-voxel correlation analysis": [[57, "performing-the-seed-to-voxel-correlation-analysis"]], "Permutation test": [[99, "permutation-test"]], "Plot 3D image for comparison": [[10, "plot-3d-image-for-comparison"]], "Plot Haxby masks": [[19, null]], "Plot R-squared": [[70, "plot-r-squared"]], "Plot a confusion matrix": [[36, "plot-a-confusion-matrix"]], "Plot a directed connectome - asymmetric connectivity measure": [[49, "plot-a-directed-connectome-asymmetric-connectivity-measure"]], "Plot barplots of the prediction scores": [[36, "plot-barplots-of-the-prediction-scores"]], "Plot color maps": [[13, "plot-color-maps"]], "Plot confusion matrix": [[32, "plot-confusion-matrix"]], "Plot distribution of residuals": [[70, "plot-distribution-of-residuals"]], "Plot matplotlib color maps": [[13, "plot-matplotlib-color-maps"]], "Plot matrix, graph, and strength": [[60, "plot-matrix-graph-and-strength"]], "Plot multiple views of the 3D volume on a surface": [[10, "plot-multiple-views-of-the-3d-volume-on-a-surface"]], "Plot predicted and actual time series for 6 most significant clusters": [[70, "plot-predicted-and-actual-time-series-for-6-most-significant-clusters"]], "Plot regions extracted for only one specific network": [[52, "plot-regions-extracted-for-only-one-specific-network"]], "Plot resulting connectomes": [[52, "plot-resulting-connectomes"]], "Plot the combined z maps": [[109, "plot-the-combined-z-maps"]], "Plot the masks": [[19, "plot-the-masks"]], "Plot the mesh and the sample locations": [[25, "plot-the-mesh-and-the-sample-locations"]], "Plot the prediction scores using matplotlib": [[35, "plot-the-prediction-scores-using-matplotlib"]], "Plot the results": [[81, "plot-the-results"]], "Plot the surface image": [[10, "plot-the-surface-image"]], "Plot thresholded z scores map": [[6, "plot-thresholded-z-scores-map"]], "Plot with higher-resolution mesh": [[10, "plot-with-higher-resolution-mesh"]], "Plotting EPI image with function plot_epi": [[17, "plotting-epi-image-with-function-plot-epi"]], "Plotting ROIs (here the mask) with function plot_roi": [[17, "plotting-rois-here-the-mask-with-function-plot-roi"]], "Plotting anatomical images with function plot_anat": [[17, "plotting-anatomical-images-with-function-plot-anat"]], "Plotting brain images": [[484, null]], "Plotting seeds using add_markers": [[16, "plotting-seeds-using-add-markers"]], "Plotting statistical maps in a glass brain with function plot_glass_brain": [[17, "plotting-statistical-maps-in-a-glass-brain-with-function-plot-glass-brain"]], "Plotting statistical maps with function plot_stat_map": [[17, "plotting-statistical-maps-with-function-plot-stat-map"]], "Plotting the SVM weights": [[3, "plotting-the-svm-weights"]], "Plotting the seed-to-voxel correlation map": [[57, "plotting-the-seed-to-voxel-correlation-map"]], "Plotting the surface image": [[7, "plotting-the-surface-image"]], "Plotting tools in nilearn": [[17, null]], "Plotting with decrease of contrast in background image with dim=.5": [[18, "plotting-with-decrease-of-contrast-in-background-image-with-dim-5"]], "Plotting with enhancement of background image with dim=-.5": [[18, "plotting-with-enhancement-of-background-image-with-dim-5"]], "Plotting with more decrease in contrast with dim=1": [[18, "plotting-with-more-decrease-in-contrast-with-dim-1"]], "Plotting with no change of contrast in background image with dim=0": [[18, "plotting-with-no-change-of-contrast-in-background-image-with-dim-0"]], "Post-release": [[181, "post-release"]], "Power 2011 atlas": [[222, null]], "Pre-commit": [[172, "pre-commit"]], "Predicted time series and residuals": [[70, null]], "Prediction accuracy at chance using simple strategies": [[164, "prediction-accuracy-at-chance-using-simple-strategies"]], "Predictions: regression, classification and multi-class": [[165, "predictions-regression-classification-and-multi-class"]], "Predictive modeling analysis: VBM bio-markers of aging?": [[44, "predictive-modeling-analysis-vbm-bio-markers-of-aging"]], "Prepare code for the release": [[181, "prepare-code-for-the-release"]], "Prepare data and analysis parameters": [[63, "prepare-data-and-analysis-parameters"], [69, "prepare-data-and-analysis-parameters"], [101, "prepare-data-and-analysis-parameters"]], "Prepare masks": [[37, "prepare-masks"]], "Prepare some images for a simple t test": [[82, "prepare-some-images-for-a-simple-t-test"]], "Prepare the fMRI data": [[36, "prepare-the-fmri-data"]], "Prepare the release": [[181, "prepare-the-release"]], "Preparing the data": [[169, "preparing-the-data"]], "Preprocess data": [[44, "preprocess-data"]], "Preprocessed datasets": [[187, "preprocessed-datasets"]], "Preprocessing": [[40, "preprocessing"], [195, "preprocessing"]], "Principle of cross-validation": [[171, "principle-of-cross-validation"]], "Principle of the Searchlight": [[169, "principle-of-the-searchlight"]], "Probabilistic atlases": [[159, "probabilistic-atlases"], [187, "probabilistic-atlases"]], "Producing single subject maps of seed-to-voxel correlation": [[57, null]], "Project Organization": [[181, "project-organization"]], "Project the fMRI image to the surface": [[69, "project-the-fmri-image-to-the-surface"]], "Projectors": [[479, "projectors"]], "Pull Requests": [[181, "pull-requests"]], "Putting it all together": [[164, null]], "Python globbing": [[183, null]], "Quick sanity check on fit arguments": [[102, "quick-sanity-check-on-fit-arguments"]], "Quickstart": [[485, null]], "ROI-based decoding analysis in Haxby et al. dataset": [[33, null]], "ROI-to-ROI correlations of children": [[53, "roi-to-roi-correlations-of-children"]], "Reading CSV with pandas": [[183, null]], "Recommendation": [[172, null], [172, null]], "Reconstruction of visual stimuli from Miyawaki et al. 2008": [[43, null]], "Reference": [[158, null], [158, null], [158, null], [158, null], [161, null]], "References": [[3, "references"], [23, "references"], [24, "references"], [32, "references"], [33, "references"], [38, "references"], [39, "references"], [42, "references"], [43, "references"], [46, "references"], [50, "references"], [51, "references"], [53, "references"], [58, "references"], [60, "references"], [71, "references"], [72, "references"], [73, "references"], [77, "references"], [99, "references"], [100, "references"], [101, "references"], [104, "references"], [118, "references"], [158, null], [158, "references"], [159, null], [159, null], [159, "references"], [161, "references"], [162, null], [162, "references"], [163, null], [163, null], [163, "references"], [164, "references"], [165, "references"], [166, "references"], [169, "references"], [170, "references"], [171, "references"], [178, "references"], [180, "references"], [190, "references"], [191, "references"], [192, "references"], [193, "references"], [194, "references"], [195, "references"], [197, "references"], [198, "references"], [199, "references"], [200, "references"], [201, "references"], [202, "references"], [203, "references"], [204, "references"], [205, "references"], [206, "references"], [207, "references"], [208, "references"], [209, "references"], [210, "references"], [211, "references"], [212, "references"], [213, "references"], [214, "references"], [215, "references"], [216, "references"], [217, "references"], [218, "references"], [219, "references"], [220, "references"], [221, "references"], [222, "references"], [223, "references"], [224, "references"], [225, "references"], [226, "references"], [227, "references"], [228, "references"], [229, "references"]], "Region Extraction for better brain parcellations": [[162, null]], "Region Extraction using a t-statistical map (3D)": [[89, null]], "Region Extraction with Dictionary learning maps": [[162, "region-extraction-with-dictionary-learning-maps"]], "Region signals extraction": [[53, "region-signals-extraction"]], "Regions Extraction of Default Mode Networks using Smith Atlas": [[88, null]], "Regions definition": [[185, "regions-definition"]], "Regions extraction using dictionary learning and functional connectomes": [[52, null]], "Regression": [[165, "regression"]], "Relabeling the atlas into separated regions": [[87, "relabeling-the-atlas-into-separated-regions"]], "Related example": [[170, "related-example"]], "Removing confounds": [[67, "removing-confounds"]], "Report bugs or discuss enhancement ideas": [[172, "report-bugs-or-discuss-enhancement-ideas"]], "Resample an image to a template": [[94, null]], "Resampling images": [[184, "resampling-images"]], "Resampling one image to match another one": [[184, "resampling-one-image-to-match-another-one"]], "Resampling to a specific target affine, shape, or resolution": [[184, "resampling-to-a-specific-target-affine-shape-or-resolution"]], "Resampling: resizing and changing resolutions of images": [[185, "resampling-resizing-and-changing-resolutions-of-images"]], "Reshape and mask images": [[105, "reshape-and-mask-images"]], "Restrict the analysis to cats and faces": [[3, "restrict-the-analysis-to-cats-and-faces"]], "Restrict to faces and houses": [[37, "restrict-to-faces-and-houses"], [38, "restrict-to-faces-and-houses"]], "Retrieve and load the fMRI data from the Haxby study": [[3, "retrieve-and-load-the-fmri-data-from-the-haxby-study"], [99, "retrieve-and-load-the-fmri-data-from-the-haxby-study"]], "Retrieve data from nilearn provided (general-purpose) datasets": [[17, "retrieve-data-from-nilearn-provided-general-purpose-datasets"]], "Retrieve the atlas and the data": [[54, "retrieve-the-atlas-and-the-data"], [56, "retrieve-the-atlas-and-the-data"], [58, "retrieve-the-atlas-and-the-data"]], "Retrieve the brain development fMRI dataset": [[60, "retrieve-the-brain-development-fmri-dataset"]], "Retrieve the data: the localizer dataset with contrast maps": [[18, "retrieve-the-data-the-localizer-dataset-with-contrast-maps"]], "Retrieve the files of the Haxby dataset": [[30, "retrieve-the-files-of-the-haxby-dataset"]], "Retrieving multiscale group brain parcellations": [[20, "retrieving-multiscale-group-brain-parcellations"]], "Retrieving the atlas data": [[11, "retrieving-the-atlas-data"]], "Retrieving the data": [[6, "retrieving-the-data"], [24, "retrieving-the-data"], [67, "retrieving-the-data"]], "Review Pull Requests": [[172, "review-pull-requests"]], "Run ICA and map components to terms": [[105, "run-ica-and-map-components-to-terms"]], "Run different estimators": [[46, "run-different-estimators"]], "Run the GLM on data from each run": [[34, "run-the-glm-on-data-from-each-run"]], "Run the estimators": [[46, "run-the-estimators"]], "Running a basic model": [[67, "running-a-basic-model"]], "Running scikit-learn functions for more control on the analysis": [[167, null]], "SPM auditory dataset": [[226, null]], "SPM multimodal dataset": [[227, null]], "Sample and plot response functions": [[68, "sample-and-plot-response-functions"]], "Sample the 3D data around each node of the mesh": [[10, "sample-the-3d-data-around-each-node-of-the-mesh"]], "Save the surface image": [[7, "save-the-surface-image"]], "Saving model outputs to disk": [[64, "saving-model-outputs-to-disk"], [76, "saving-model-outputs-to-disk"]], "Saving plots to file": [[16, "saving-plots-to-file"]], "Saving results to a file": [[4, "saving-results-to-a-file"]], "Schaefer 2018 atlas": [[223, null]], "Scope of the project": [[172, "scope-of-the-project"]], "Score function": [[169, "score-function"]], "Searchlight": [[169, "id6"]], "Searchlight : finding voxels containing information": [[169, null]], "Searchlight analysis of face vs house recognition": [[37, null]], "Searchlight computation": [[37, "searchlight-computation"], [38, "searchlight-computation"]], "Second level model estimation": [[102, "second-level-model-estimation"]], "Second level models": [[177, null]], "Second level report": [[470, "second-level-report"]], "Second-level fMRI model: one sample test": [[80, null]], "Second-level fMRI model: true positive proportion in clusters": [[77, null]], "Second-level fMRI model: two-sample test, unpaired and paired": [[81, null]], "See Also": [[51, "see-also"]], "See also": [[3, "see-also"], [60, "see-also"]], "Seed-based connectivity on the surface": [[24, null]], "Seeding": [[172, "seeding"]], "Seitzman 2018 atlas": [[224, null]], "Selection filters": [[118, "selection-filters"]], "Set up the GLM": [[72, "set-up-the-glm"]], "Setting a parameter by cross-validation": [[35, null]], "Setting estimator parameters": [[165, "setting-estimator-parameters"], [167, "setting-estimator-parameters"]], "Setting up the searchlight": [[169, "setting-up-the-searchlight"]], "Setting up your environment": [[172, "setting-up-your-environment"]], "Show stimuli of Haxby et al. dataset": [[39, null]], "Show the design matrices for the first few trials": [[101, "show-the-design-matrices-for-the-first-few-trials"]], "Showing how to use add_edges": [[16, "showing-how-to-use-add-edges"]], "Simple example of NiftiMasker use": [[93, null]], "Simple example of two-runs fMRI model fitting": [[72, null]], "Simple image manipulation: smoothing": [[4, "simple-image-manipulation-smoothing"]], "Simple statistical report of thresholded contrast": [[64, "simple-statistical-report-of-thresholded-contrast"]], "Single-subject data (two runs) in native space": [[71, null]], "Slicers": [[479, "slicers"]], "Smith 2009 atlas": [[225, null]], "Smoothing": [[67, "smoothing"], [185, "smoothing"]], "Smoothing an image": [[96, null]], "SpaceNet: decoding with spatial structure for better maps": [[170, null]], "Sparse inverse covariance for functional connectomes": [[158, "sparse-inverse-covariance-for-functional-connectomes"]], "Sparse inverse covariance on multiple subjects": [[158, "sparse-inverse-covariance-on-multiple-subjects"]], "Spatial regularization of decoding maps on mixed gambles study": [[166, "spatial-regularization-of-decoding-maps-on-mixed-gambles-study"]], "Special case: resampling to a given voxel size": [[184, null]], "Specific images or collections": [[118, "specific-images-or-collections"]], "Specifying the experimental paradigm": [[6, "specifying-the-experimental-paradigm"]], "Sphere radius": [[169, "sphere-radius"]], "Statistical Parametric Mapping (SPM)": [[176, "statistical-parametric-mapping-spm"]], "Statistical maps/derivatives": [[187, "statistical-maps-derivatives"]], "Statistical maps/derivatives descriptions": [[187, "statistical-maps-derivatives-descriptions"]], "Statistical significance testing": [[6, "statistical-significance-testing"]], "Statistical testing of a second-level analysis": [[82, null]], "Stopping criteria": [[171, "stopping-criteria"]], "Stopping criterion": [[171, "stopping-criterion"]], "Studying partial correlations": [[53, "studying-partial-correlations"]], "Subject level models": [[110, "subject-level-models"]], "Surface API": [[129, "surface-api"], [157, "surface-api"]], "Surface BOLD response": [[38, "surface-bold-response"]], "Surface maskers": [[471, "surface-maskers"]], "Surface plotting": [[484, "surface-plotting"]], "Surface-based analysis": [[173, "surface-based-analysis"]], "Surface-based dataset first and second level analysis of a dataset": [[110, null]], "Synthetic dataset": [[171, "synthetic-dataset"]], "Table of contents": [[487, "table-of-contents"]], "Talairach atlas": [[228, null]], "Team": [[0, null]], "Technical point: Illustration of the volume to surface sampling schemes": [[25, null]], "Templates": [[187, "templates"]], "Templates descriptions": [[187, "templates-descriptions"]], "Temporal Filtering and confound removal": [[185, "temporal-filtering-and-confound-removal"]], "Tests": [[172, "tests"]], "Text files: phenotype or behavior": [[183, "text-files-phenotype-or-behavior"]], "The Haxby 2001 experiment": [[164, "the-haxby-2001-experiment"]], "The SpaceNet decoder": [[170, "the-spacenet-decoder"]], "The concept of \u201cmasker\u201d objects": [[185, "the-concept-of-masker-objects"]], "The haxby dataset: different multi-class strategies": [[36, null]], "The impact of global signal removal": [[58, "the-impact-of-global-signal-removal"]], "The noise model: ar(1), ols, or higher order ar?": [[67, "the-noise-model-ar-1-ols-or-higher-order-ar"]], "The original Yeo atlas": [[87, "the-original-yeo-atlas"]], "Then we prepare and mask the data": [[43, "then-we-prepare-and-mask-the-data"]], "Thresholding statistical maps": [[177, "thresholding-statistical-maps"]], "Time series extraction": [[57, "time-series-extraction"]], "Time series-based": [[173, "time-series-based"]], "Time-series from a brain parcellation or \u201cMaxProb\u201d atlas": [[159, "time-series-from-a-brain-parcellation-or-maxprob-atlas"]], "Time-series from a probabilistic atlas": [[159, "time-series-from-a-probabilistic-atlas"]], "Train and cross-validate via an Scikit-Learn pipeline": [[40, "train-and-cross-validate-via-an-scikit-learn-pipeline"]], "Training the decoder": [[31, "training-the-decoder"]], "Tuning cross-validation parameters": [[99, "tuning-cross-validation-parameters"]], "Turning the weights into a nifti image": [[3, "turning-the-weights-into-a-nifti-image"]], "Understanding Decoder": [[40, null]], "Understanding NiftiMasker and mask computation": [[90, null]], "Understanding neuroimaging data": [[183, "understanding-neuroimaging-data"]], "Understanding parameters of the first-level model": [[67, null]], "Unmasking (inverse_transform)": [[117, "unmasking-inverse-transform"]], "Use an atlas and choose regions to outline": [[10, "use-an-atlas-and-choose-regions-to-outline"]], "User guide": [[487, null]], "Using and visualizing the resulting parcellation": [[161, "using-and-visualizing-the-resulting-parcellation"]], "Using any other model in the pipeline": [[167, "using-any-other-model-in-the-pipeline"]], "Using nilearn for the first time": [[180, "using-nilearn-for-the-first-time"]], "Using predefined strategies": [[58, "using-predefined-strategies"]], "Using scikit-learn estimators": [[167, "using-scikit-learn-estimators"]], "Using the Decoder": [[111, "using-the-decoder"]], "Using tox": [[181, "using-tox"]], "VBM analysis of aging": [[76, "vbm-analysis-of-aging"]], "Validating results": [[162, "validating-results"]], "Variation of norm of estimate": [[171, "variation-of-norm-of-estimate"]], "Viewing results": [[24, "viewing-results"]], "Visualization": [[23, "visualization"], [26, "visualization"], [27, "visualization"], [31, "visualization"], [37, "visualization"], [38, "visualization"], [44, "visualization"], [110, "visualization"], [169, "visualization"]], "Visualization of Dictionary learning maps": [[162, "visualization-of-dictionary-learning-maps"]], "Visualization of FREM weights": [[32, "visualization-of-frem-weights"]], "Visualization of Region Extraction results": [[162, "visualization-of-region-extraction-results"]], "Visualization of affine resamplings": [[85, null]], "Visualization of brain images": [[9, null], [113, "visualization-of-brain-images"]], "Visualization of functional connectivity matrices": [[162, "visualization-of-functional-connectivity-matrices"]], "Visualize in - two views \u2018sagittal\u2019 and \u2018axial\u2019 with given coordinates": [[16, "visualize-in-two-views-sagittal-and-axial-with-given-coordinates"]], "Visualize the ANOVA + SVC\u2019s discriminating weights": [[99, "visualize-the-anova-svc-s-discriminating-weights"]], "Visualize the data": [[109, "visualize-the-data"]], "Visualize the decoding maps and quality of predictions": [[45, "visualize-the-decoding-maps-and-quality-of-predictions"]], "Visualize the quality of predictions": [[44, "visualize-the-quality-of-predictions"]], "Visualize the results": [[30, "visualize-the-results"], [82, "visualize-the-results"]], "Visualize: Brain parcellations (Hierarchical KMeans)": [[51, "visualize-brain-parcellations-hierarchical-kmeans"]], "Visualize: Brain parcellations (KMeans)": [[51, "visualize-brain-parcellations-kmeans"]], "Visualize: Brain parcellations (ReNA)": [[51, "visualize-brain-parcellations-rena"]], "Visualize: Brain parcellations (Ward)": [[51, "visualize-brain-parcellations-ward"]], "Visualizing 4D probabilistic atlas maps": [[22, null]], "Visualizing Megatrawls Network Matrices from Human Connectome Project": [[27, null]], "Visualizing a 3D file": [[2, "visualizing-a-3d-file"]], "Visualizing a probabilistic atlas with plot_prob_atlas": [[21, "visualizing-a-probabilistic-atlas-with-plot-prob-atlas"]], "Visualizing a probabilistic atlas with plot_stat_map and add_overlay object": [[21, "visualizing-a-probabilistic-atlas-with-plot-stat-map-and-add-overlay-object"]], "Visualizing a probabilistic atlas: the default mode in the MSDL atlas": [[21, null]], "Visualizing brain parcellations": [[20, "visualizing-brain-parcellations"]], "Visualizing global patterns over time": [[12, "visualizing-global-patterns-over-time"]], "Visualizing global patterns with a carpet plot": [[12, null]], "Visualizing global patterns, separated by tissue type": [[12, "visualizing-global-patterns-separated-by-tissue-type"]], "Visualizing in - single view \u2018axial\u2019 with number of cuts=5": [[16, "visualizing-in-single-view-axial-with-number-of-cuts-5"]], "Visualizing in - single view \u2018sagittal\u2019 with only two slices": [[16, "visualizing-in-single-view-sagittal-with-only-two-slices"]], "Visualizing in - \u2018coronal\u2019 view with single cut": [[16, "visualizing-in-coronal-view-with-single-cut"]], "Visualizing in - \u2018sagittal\u2019, \u2018coronal\u2019 and \u2018axial\u2019 with given coordinates": [[16, "visualizing-in-sagittal-coronal-and-axial-with-given-coordinates"]], "Visualizing multiscale functional brain parcellations": [[20, null]], "Visualizing one volume in a 4D file": [[2, "visualizing-one-volume-in-a-4d-file"]], "Visualizing results": [[117, "visualizing-results"], [163, "visualizing-results"]], "Visualizing the Harvard-Oxford atlas": [[11, "visualizing-the-harvard-oxford-atlas"]], "Visualizing the Harvard-Oxford atlas with contours": [[11, "visualizing-the-harvard-oxford-atlas-with-contours"]], "Visualizing the Juelich atlas": [[11, "visualizing-the-juelich-atlas"]], "Visualizing the Juelich atlas with contours": [[11, "visualizing-the-juelich-atlas-with-contours"]], "Visualizing the computed mask": [[185, "visualizing-the-computed-mask"]], "Visualizing the decoder\u2019s weights": [[164, "visualizing-the-decoder-s-weights"]], "Visualizing the fMRI volume": [[3, "visualizing-the-fmri-volume"]], "Visualizing the face vs house map": [[31, "visualizing-the-face-vs-house-map"]], "Visualizing the parcellation": [[161, "visualizing-the-parcellation"]], "Visualizing the results": [[164, "visualizing-the-results"]], "Visualizing three views along multiple rows and columns": [[16, "visualizing-three-views-along-multiple-rows-and-columns"]], "Visualizing three views in 2x2 fashion": [[16, "visualizing-three-views-in-2x2-fashion"]], "Visualizing without a colorbar on the right side": [[16, "visualizing-without-a-colorbar-on-the-right-side"]], "Volume censoring": [[67, "volume-censoring"]], "Voxel based morphometry": [[177, "voxel-based-morphometry"]], "Voxel-Based Morphometry on OASIS dataset": [[76, null]], "Voxel-Based Morphometry on Oasis dataset": [[44, null]], "Voxel-Based Morphometry on Oasis dataset with Space-Net prior": [[45, null]], "Warm restart": [[171, "warm-restart"]], "We define our prediction function": [[43, "we-define-our-prediction-function"]], "We make a simple bar plot to summarize the results": [[33, "we-make-a-simple-bar-plot-to-summarize-the-results"]], "What do we mean by a run?": [[174, null]], "What is a surface image?": [[7, "what-is-a-surface-image"]], "What is fMRI ?": [[174, "what-is-fmri"]], "What is nilearn?": [[180, "what-is-nilearn"]], "What is the chance level accuracy?": [[3, "what-is-the-chance-level-accuracy"]], "What kind of connectivity is most powerful for classification?": [[53, "what-kind-of-connectivity-is-most-powerful-for-classification"], [100, "what-kind-of-connectivity-is-most-powerful-for-classification"]], "What\u2019s new": [[157, null]], "Which clustering to use": [[161, null]], "Who makes decisions": [[172, "who-makes-decisions"]], "Working with Surface images": [[7, null]], "Yeo 2011 atlas": [[229, null]], "`dtype` argument": [[185, null]], "development fMRI dataset": [[200, null]], "fMRI data modeling": [[174, "fmri-data-modeling"]], "fMRI statistical analysis": [[174, "fmri-statistical-analysis"]], "fMRI: using beta maps of a first-level analysis": [[164, null]], "fiac first level dataset": [[203, null]], "fsaverage template": [[204, null]], "fsaverage3 template": [[205, null]], "fsaverage4 template": [[206, null]], "fsaverage5 template": [[207, null]], "fsaverage6 template": [[208, null]], "language localizer demo dataset": [[213, null]], "localizer first level dataset": [[214, null]], "nilearn": [[485, "nilearn"]], "nilearn.connectome.ConnectivityMeasure": [[230, null]], "nilearn.connectome.GroupSparseCovariance": [[231, null]], "nilearn.connectome.GroupSparseCovarianceCV": [[232, null]], "nilearn.connectome.cov_to_corr": [[233, null]], "nilearn.connectome.group_sparse_covariance": [[234, null]], "nilearn.connectome.prec_to_partial": [[235, null]], "nilearn.connectome.sym_matrix_to_vec": [[236, null]], "nilearn.connectome.vec_to_sym_matrix": [[237, null]], "nilearn.connectome: Functional Connectivity": [[186, null]], "nilearn.datasets.fetch_abide_pcp": [[238, null]], "nilearn.datasets.fetch_adhd": [[239, null]], "nilearn.datasets.fetch_atlas_aal": [[240, null]], "nilearn.datasets.fetch_atlas_allen_2011": [[241, null]], "nilearn.datasets.fetch_atlas_basc_multiscale_2015": [[242, null]], "nilearn.datasets.fetch_atlas_craddock_2012": [[243, null]], "nilearn.datasets.fetch_atlas_destrieux_2009": [[244, null]], "nilearn.datasets.fetch_atlas_difumo": [[245, null]], "nilearn.datasets.fetch_atlas_harvard_oxford": [[246, null]], "nilearn.datasets.fetch_atlas_juelich": [[247, null]], "nilearn.datasets.fetch_atlas_msdl": [[248, null]], "nilearn.datasets.fetch_atlas_pauli_2017": [[249, null]], "nilearn.datasets.fetch_atlas_schaefer_2018": [[250, null]], "nilearn.datasets.fetch_atlas_smith_2009": [[251, null]], "nilearn.datasets.fetch_atlas_surf_destrieux": [[252, null]], "nilearn.datasets.fetch_atlas_talairach": [[253, null]], "nilearn.datasets.fetch_atlas_yeo_2011": [[254, null]], "nilearn.datasets.fetch_bids_langloc_dataset": [[255, null]], "nilearn.datasets.fetch_coords_dosenbach_2010": [[256, null]], "nilearn.datasets.fetch_coords_power_2011": [[257, null]], "nilearn.datasets.fetch_coords_seitzman_2018": [[258, null]], "nilearn.datasets.fetch_development_fmri": [[259, null]], "nilearn.datasets.fetch_ds000030_urls": [[260, null]], "nilearn.datasets.fetch_fiac_first_level": [[261, null]], "nilearn.datasets.fetch_haxby": [[262, null]], "nilearn.datasets.fetch_icbm152_2009": [[263, null]], "nilearn.datasets.fetch_icbm152_brain_gm_mask": [[264, null]], "nilearn.datasets.fetch_language_localizer_demo_dataset": [[265, null]], "nilearn.datasets.fetch_localizer_button_task": [[266, null]], "nilearn.datasets.fetch_localizer_calculation_task": [[267, null]], "nilearn.datasets.fetch_localizer_contrasts": [[268, null]], "nilearn.datasets.fetch_localizer_first_level": [[269, null]], "nilearn.datasets.fetch_megatrawls_netmats": [[270, null]], "nilearn.datasets.fetch_mixed_gambles": [[271, null]], "nilearn.datasets.fetch_miyawaki2008": [[272, null]], "nilearn.datasets.fetch_neurovault": [[273, null]], "nilearn.datasets.fetch_neurovault_auditory_computation_task": [[274, null]], "nilearn.datasets.fetch_neurovault_ids": [[275, null]], "nilearn.datasets.fetch_neurovault_motor_task": [[276, null]], "nilearn.datasets.fetch_oasis_vbm": [[277, null]], "nilearn.datasets.fetch_openneuro_dataset": [[278, null]], "nilearn.datasets.fetch_spm_auditory": [[279, null]], "nilearn.datasets.fetch_spm_multimodal_fmri": [[280, null]], "nilearn.datasets.fetch_surf_fsaverage": [[281, null]], "nilearn.datasets.fetch_surf_nki_enhanced": [[282, null]], "nilearn.datasets.get_data_dirs": [[283, null]], "nilearn.datasets.load_fsaverage": [[284, null]], "nilearn.datasets.load_fsaverage_data": [[285, null]], "nilearn.datasets.load_mni152_brain_mask": [[286, null]], "nilearn.datasets.load_mni152_gm_mask": [[287, null]], "nilearn.datasets.load_mni152_gm_template": [[288, null]], "nilearn.datasets.load_mni152_template": [[289, null]], "nilearn.datasets.load_mni152_wm_mask": [[290, null]], "nilearn.datasets.load_mni152_wm_template": [[291, null]], "nilearn.datasets.load_nki": [[292, null]], "nilearn.datasets.load_sample_motor_activation_image": [[293, null]], "nilearn.datasets.patch_openneuro_dataset": [[294, null]], "nilearn.datasets.select_from_index": [[295, null]], "nilearn.datasets: Automatic Dataset Fetching": [[187, null]], "nilearn.decoding.Decoder": [[296, null]], "nilearn.decoding.DecoderRegressor": [[297, null]], "nilearn.decoding.FREMClassifier": [[298, null]], "nilearn.decoding.FREMRegressor": [[299, null]], "nilearn.decoding.SearchLight": [[300, null]], "nilearn.decoding.SpaceNetClassifier": [[301, null]], "nilearn.decoding.SpaceNetRegressor": [[302, null]], "nilearn.decoding: Decoding": [[188, null]], "nilearn.decomposition.CanICA": [[303, null]], "nilearn.decomposition.DictLearning": [[304, null]], "nilearn.decomposition: Multivariate Decompositions": [[189, null]], "nilearn.glm.ARModel": [[305, null]], "nilearn.glm.Contrast": [[306, null]], "nilearn.glm.FContrastResults": [[307, null]], "nilearn.glm.LikelihoodModelResults": [[308, null]], "nilearn.glm.OLSModel": [[309, null]], "nilearn.glm.RegressionResults": [[310, null]], "nilearn.glm.SimpleRegressionResults": [[311, null]], "nilearn.glm.TContrastResults": [[312, null]], "nilearn.glm.cluster_level_inference": [[313, null]], "nilearn.glm.compute_contrast": [[314, null]], "nilearn.glm.compute_fixed_effects": [[315, null]], "nilearn.glm.expression_to_contrast_vector": [[316, null]], "nilearn.glm.fdr_threshold": [[317, null]], "nilearn.glm.first_level": [[472, "module-nilearn.glm.first_level"]], "nilearn.glm.first_level.FirstLevelModel": [[318, null]], "nilearn.glm.first_level.check_design_matrix": [[319, null]], "nilearn.glm.first_level.compute_regressor": [[320, null]], "nilearn.glm.first_level.first_level_from_bids": [[321, null]], "nilearn.glm.first_level.glover_dispersion_derivative": [[322, null]], "nilearn.glm.first_level.glover_hrf": [[323, null]], "nilearn.glm.first_level.glover_time_derivative": [[324, null]], "nilearn.glm.first_level.make_first_level_design_matrix": [[325, null]], "nilearn.glm.first_level.mean_scaling": [[326, null]], "nilearn.glm.first_level.run_glm": [[327, null]], "nilearn.glm.first_level.spm_dispersion_derivative": [[328, null]], "nilearn.glm.first_level.spm_hrf": [[329, null]], "nilearn.glm.first_level.spm_time_derivative": [[330, null]], "nilearn.glm.second_level": [[472, "module-nilearn.glm.second_level"]], "nilearn.glm.second_level.SecondLevelModel": [[331, null]], "nilearn.glm.second_level.make_second_level_design_matrix": [[332, null]], "nilearn.glm.second_level.non_parametric_inference": [[333, null]], "nilearn.glm.threshold_stats_img": [[334, null]], "nilearn.glm: Generalized Linear Models": [[472, null]], "nilearn.image.binarize_img": [[335, null]], "nilearn.image.clean_img": [[336, null]], "nilearn.image.concat_imgs": [[337, null]], "nilearn.image.coord_transform": [[338, null]], "nilearn.image.copy_img": [[339, null]], "nilearn.image.crop_img": [[340, null]], "nilearn.image.get_data": [[341, null]], "nilearn.image.high_variance_confounds": [[342, null]], "nilearn.image.index_img": [[343, null]], "nilearn.image.iter_img": [[344, null]], "nilearn.image.largest_connected_component_img": [[345, null]], "nilearn.image.load_img": [[346, null]], "nilearn.image.math_img": [[347, null]], "nilearn.image.mean_img": [[348, null]], "nilearn.image.new_img_like": [[349, null]], "nilearn.image.reorder_img": [[350, null]], "nilearn.image.resample_img": [[351, null]], "nilearn.image.resample_to_img": [[352, null]], "nilearn.image.smooth_img": [[353, null]], "nilearn.image.swap_img_hemispheres": [[354, null]], "nilearn.image.threshold_img": [[355, null]], "nilearn.image: Image Processing and Resampling Utilities": [[473, null]], "nilearn.interfaces.bids": [[475, "module-nilearn.interfaces.bids"]], "nilearn.interfaces.bids.get_bids_files": [[356, null]], "nilearn.interfaces.bids.parse_bids_filename": [[357, null]], "nilearn.interfaces.bids.save_glm_to_bids": [[358, null]], "nilearn.interfaces.fmriprep": [[475, "module-nilearn.interfaces.fmriprep"]], "nilearn.interfaces.fmriprep.load_confounds": [[359, null]], "nilearn.interfaces.fmriprep.load_confounds_strategy": [[360, null]], "nilearn.interfaces.fsl": [[475, "module-nilearn.interfaces.fsl"]], "nilearn.interfaces.fsl.get_design_from_fslmat": [[361, null]], "nilearn.interfaces: Loading components from interfaces": [[475, null]], "nilearn.maskers.BaseMasker": [[362, null]], "nilearn.maskers.MultiNiftiLabelsMasker": [[363, null]], "nilearn.maskers.MultiNiftiMapsMasker": [[364, null]], "nilearn.maskers.MultiNiftiMasker": [[365, null]], "nilearn.maskers.NiftiLabelsMasker": [[366, null]], "nilearn.maskers.NiftiMapsMasker": [[367, null]], "nilearn.maskers.NiftiMasker": [[368, null]], "nilearn.maskers.NiftiSpheresMasker": [[369, null]], "nilearn.maskers.SurfaceLabelsMasker": [[370, null]], "nilearn.maskers.SurfaceMapsMasker": [[371, null]], "nilearn.maskers.SurfaceMasker": [[372, null]], "nilearn.maskers: Extracting Signals from Brain Images": [[476, null]], "nilearn.masking.apply_mask": [[373, null]], "nilearn.masking.compute_background_mask": [[374, null]], "nilearn.masking.compute_brain_mask": [[375, null]], "nilearn.masking.compute_epi_mask": [[376, null]], "nilearn.masking.compute_multi_background_mask": [[377, null]], "nilearn.masking.compute_multi_brain_mask": [[378, null]], "nilearn.masking.compute_multi_epi_mask": [[379, null]], "nilearn.masking.intersect_masks": [[380, null]], "nilearn.masking.unmask": [[381, null]], "nilearn.masking: Data Masking Utilities": [[477, null]], "nilearn.mass_univariate.permuted_ols": [[382, null]], "nilearn.mass_univariate: Mass-Univariate Analysis": [[478, null]], "nilearn.plotting.displays.BaseAxes": [[383, null]], "nilearn.plotting.displays.BaseSlicer": [[384, null]], "nilearn.plotting.displays.CutAxes": [[385, null]], "nilearn.plotting.displays.GlassBrainAxes": [[386, null]], "nilearn.plotting.displays.LProjector": [[387, null]], "nilearn.plotting.displays.LRProjector": [[388, null]], "nilearn.plotting.displays.LYRProjector": [[389, null]], "nilearn.plotting.displays.LYRZProjector": [[390, null]], "nilearn.plotting.displays.LZRProjector": [[391, null]], "nilearn.plotting.displays.LZRYProjector": [[392, null]], "nilearn.plotting.displays.MosaicSlicer": [[393, null]], "nilearn.plotting.displays.OrthoProjector": [[394, null]], "nilearn.plotting.displays.OrthoSlicer": [[395, null]], "nilearn.plotting.displays.PlotlySurfaceFigure": [[396, null]], "nilearn.plotting.displays.RProjector": [[397, null]], "nilearn.plotting.displays.TiledSlicer": [[398, null]], "nilearn.plotting.displays.XProjector": [[399, null]], "nilearn.plotting.displays.XSlicer": [[400, null]], "nilearn.plotting.displays.XZProjector": [[401, null]], "nilearn.plotting.displays.XZSlicer": [[402, null]], "nilearn.plotting.displays.YProjector": [[403, null]], "nilearn.plotting.displays.YSlicer": [[404, null]], "nilearn.plotting.displays.YXProjector": [[405, null]], "nilearn.plotting.displays.YXSlicer": [[406, null]], "nilearn.plotting.displays.YZProjector": [[407, null]], "nilearn.plotting.displays.YZSlicer": [[408, null]], "nilearn.plotting.displays.ZProjector": [[409, null]], "nilearn.plotting.displays.ZSlicer": [[410, null]], "nilearn.plotting.displays.get_projector": [[411, null]], "nilearn.plotting.displays.get_slicer": [[412, null]], "nilearn.plotting.displays: Interacting with figures": [[479, "module-nilearn.plotting.displays"]], "nilearn.plotting.find_cut_slices": [[413, null]], "nilearn.plotting.find_parcellation_cut_coords": [[414, null]], "nilearn.plotting.find_probabilistic_atlas_cut_coords": [[415, null]], "nilearn.plotting.find_xyz_cut_coords": [[416, null]], "nilearn.plotting.plot_anat": [[417, null]], "nilearn.plotting.plot_carpet": [[418, null]], "nilearn.plotting.plot_connectome": [[419, null]], "nilearn.plotting.plot_contrast_matrix": [[420, null]], "nilearn.plotting.plot_design_matrix": [[421, null]], "nilearn.plotting.plot_design_matrix_correlation": [[422, null]], "nilearn.plotting.plot_epi": [[423, null]], "nilearn.plotting.plot_event": [[424, null]], "nilearn.plotting.plot_glass_brain": [[425, null]], "nilearn.plotting.plot_img": [[426, null]], "nilearn.plotting.plot_img_comparison": [[427, null]], "nilearn.plotting.plot_img_on_surf": [[428, null]], "nilearn.plotting.plot_markers": [[429, null]], "nilearn.plotting.plot_matrix": [[430, null]], "nilearn.plotting.plot_prob_atlas": [[431, null]], "nilearn.plotting.plot_roi": [[432, null]], "nilearn.plotting.plot_stat_map": [[433, null]], "nilearn.plotting.plot_surf": [[434, null]], "nilearn.plotting.plot_surf_contours": [[435, null]], "nilearn.plotting.plot_surf_roi": [[436, null]], "nilearn.plotting.plot_surf_stat_map": [[437, null]], "nilearn.plotting.show": [[438, null]], "nilearn.plotting.view_connectome": [[439, null]], "nilearn.plotting.view_img": [[440, null]], "nilearn.plotting.view_img_on_surf": [[441, null]], "nilearn.plotting.view_markers": [[442, null]], "nilearn.plotting.view_surf": [[443, null]], "nilearn.plotting: Plotting Brain Data": [[479, null]], "nilearn.regions.HierarchicalKMeans": [[444, null]], "nilearn.regions.Parcellations": [[445, null]], "nilearn.regions.ReNA": [[446, null]], "nilearn.regions.RegionExtractor": [[447, null]], "nilearn.regions.connected_label_regions": [[448, null]], "nilearn.regions.connected_regions": [[449, null]], "nilearn.regions.img_to_signals_labels": [[450, null]], "nilearn.regions.img_to_signals_maps": [[451, null]], "nilearn.regions.recursive_neighbor_agglomeration": [[452, null]], "nilearn.regions.signals_to_img_labels": [[453, null]], "nilearn.regions.signals_to_img_maps": [[454, null]], "nilearn.regions: Operating on Regions": [[480, null]], "nilearn.reporting.HTMLReport": [[455, null]], "nilearn.reporting.get_clusters_table": [[456, null]], "nilearn.reporting.make_glm_report": [[457, null]], "nilearn.reporting: Reporting Functions": [[481, null]], "nilearn.signal.butterworth": [[458, null]], "nilearn.signal.clean": [[459, null]], "nilearn.signal.high_variance_confounds": [[460, null]], "nilearn.signal: Preprocessing Time Series": [[482, null]], "nilearn.surface.FileMesh": [[461, null]], "nilearn.surface.InMemoryMesh": [[462, null]], "nilearn.surface.PolyData": [[463, null]], "nilearn.surface.PolyMesh": [[464, null]], "nilearn.surface.SurfaceImage": [[465, null]], "nilearn.surface.SurfaceMesh": [[466, null]], "nilearn.surface.load_surf_data": [[467, null]], "nilearn.surface.load_surf_mesh": [[468, null]], "nilearn.surface.vol_to_surf": [[469, null]], "nilearn.surface: Manipulating Surface Data": [[483, null]], "nilearn_data: Where is the downloaded data stored?": [[183, null]], "plot_surf_stat_map: Surface plot using a surface map and a cortical mesh": [[484, "plot-surf-stat-map-surface-plot-using-a-surface-map-and-a-cortical-mesh"]], "view_img_on_surf: Surface plot using a 3D statistical map": [[484, "view-img-on-surf-surface-plot-using-a-3d-statistical-map"]], "view_surf: Surface plot using a surface map and a cortical mesh": [[484, "view-surf-surface-plot-using-a-surface-map-and-a-cortical-mesh"]]}, "docnames": ["authors", "auto_examples/00_tutorials/index", "auto_examples/00_tutorials/plot_3d_and_4d_niimg", "auto_examples/00_tutorials/plot_decoding_tutorial", "auto_examples/00_tutorials/plot_nilearn_101", "auto_examples/00_tutorials/plot_python_101", "auto_examples/00_tutorials/plot_single_subject_single_run", "auto_examples/00_tutorials/plot_surface_101", "auto_examples/00_tutorials/sg_execution_times", "auto_examples/01_plotting/index", "auto_examples/01_plotting/plot_3d_map_to_surface_projection", "auto_examples/01_plotting/plot_atlas", "auto_examples/01_plotting/plot_carpet", "auto_examples/01_plotting/plot_colormaps", "auto_examples/01_plotting/plot_demo_glass_brain", "auto_examples/01_plotting/plot_demo_glass_brain_extensive", "auto_examples/01_plotting/plot_demo_more_plotting", "auto_examples/01_plotting/plot_demo_plotting", "auto_examples/01_plotting/plot_dim_plotting", "auto_examples/01_plotting/plot_haxby_masks", "auto_examples/01_plotting/plot_multiscale_parcellations", "auto_examples/01_plotting/plot_overlay", "auto_examples/01_plotting/plot_prob_atlas", "auto_examples/01_plotting/plot_surf_atlas", "auto_examples/01_plotting/plot_surf_stat_map", "auto_examples/01_plotting/plot_surface_projection_strategies", "auto_examples/01_plotting/plot_visualization", "auto_examples/01_plotting/plot_visualize_megatrawls_netmats", "auto_examples/01_plotting/sg_execution_times", "auto_examples/02_decoding/index", "auto_examples/02_decoding/plot_haxby_anova_svm", "auto_examples/02_decoding/plot_haxby_different_estimators", "auto_examples/02_decoding/plot_haxby_frem", "auto_examples/02_decoding/plot_haxby_full_analysis", "auto_examples/02_decoding/plot_haxby_glm_decoding", "auto_examples/02_decoding/plot_haxby_grid_search", "auto_examples/02_decoding/plot_haxby_multiclass", "auto_examples/02_decoding/plot_haxby_searchlight", "auto_examples/02_decoding/plot_haxby_searchlight_surface", "auto_examples/02_decoding/plot_haxby_stimuli", "auto_examples/02_decoding/plot_haxby_understand_decoder", "auto_examples/02_decoding/plot_mixed_gambles_frem", "auto_examples/02_decoding/plot_miyawaki_encoding", "auto_examples/02_decoding/plot_miyawaki_reconstruction", "auto_examples/02_decoding/plot_oasis_vbm", "auto_examples/02_decoding/plot_oasis_vbm_space_net", "auto_examples/02_decoding/plot_simulated_data", "auto_examples/02_decoding/sg_execution_times", "auto_examples/03_connectivity/index", "auto_examples/03_connectivity/plot_atlas_comparison", "auto_examples/03_connectivity/plot_compare_decomposition", "auto_examples/03_connectivity/plot_data_driven_parcellations", "auto_examples/03_connectivity/plot_extract_regions_dictlearning_maps", "auto_examples/03_connectivity/plot_group_level_connectivity", "auto_examples/03_connectivity/plot_inverse_covariance_connectome", "auto_examples/03_connectivity/plot_multi_subject_connectome", "auto_examples/03_connectivity/plot_probabilistic_atlas_extraction", "auto_examples/03_connectivity/plot_seed_to_voxel_correlation", "auto_examples/03_connectivity/plot_signal_extraction", "auto_examples/03_connectivity/plot_simulated_connectome", "auto_examples/03_connectivity/plot_sphere_based_connectome", "auto_examples/03_connectivity/sg_execution_times", "auto_examples/04_glm_first_level/index", "auto_examples/04_glm_first_level/plot_adhd_dmn", "auto_examples/04_glm_first_level/plot_bids_features", "auto_examples/04_glm_first_level/plot_design_matrix", "auto_examples/04_glm_first_level/plot_fir_model", "auto_examples/04_glm_first_level/plot_first_level_details", "auto_examples/04_glm_first_level/plot_hrf", "auto_examples/04_glm_first_level/plot_localizer_surface_analysis", "auto_examples/04_glm_first_level/plot_predictions_residuals", "auto_examples/04_glm_first_level/plot_spm_multimodal_faces", "auto_examples/04_glm_first_level/plot_two_runs_model", "auto_examples/04_glm_first_level/plot_write_events_file", "auto_examples/04_glm_first_level/sg_execution_times", "auto_examples/05_glm_second_level/index", "auto_examples/05_glm_second_level/plot_oasis", "auto_examples/05_glm_second_level/plot_proportion_activated_voxels", "auto_examples/05_glm_second_level/plot_second_level_association_test", "auto_examples/05_glm_second_level/plot_second_level_design_matrix", "auto_examples/05_glm_second_level/plot_second_level_one_sample_test", "auto_examples/05_glm_second_level/plot_second_level_two_sample_test", "auto_examples/05_glm_second_level/plot_thresholding", "auto_examples/05_glm_second_level/sg_execution_times", "auto_examples/06_manipulating_images/index", "auto_examples/06_manipulating_images/plot_affine_transformation", "auto_examples/06_manipulating_images/plot_compare_mean_image", "auto_examples/06_manipulating_images/plot_extract_regions_labels_image", "auto_examples/06_manipulating_images/plot_extract_rois_smith_atlas", "auto_examples/06_manipulating_images/plot_extract_rois_statistical_maps", "auto_examples/06_manipulating_images/plot_mask_computation", "auto_examples/06_manipulating_images/plot_negate_image", "auto_examples/06_manipulating_images/plot_nifti_labels_simple", "auto_examples/06_manipulating_images/plot_nifti_simple", "auto_examples/06_manipulating_images/plot_resample_to_template", "auto_examples/06_manipulating_images/plot_roi_extraction", "auto_examples/06_manipulating_images/plot_smooth_mean_image", "auto_examples/06_manipulating_images/sg_execution_times", "auto_examples/07_advanced/index", "auto_examples/07_advanced/plot_advanced_decoding_scikit", "auto_examples/07_advanced/plot_age_group_prediction_cross_val", "auto_examples/07_advanced/plot_beta_series", "auto_examples/07_advanced/plot_bids_analysis", "auto_examples/07_advanced/plot_copy_headers_math_img", "auto_examples/07_advanced/plot_haxby_mass_univariate", "auto_examples/07_advanced/plot_ica_neurovault", "auto_examples/07_advanced/plot_ica_resting_state", "auto_examples/07_advanced/plot_localizer_mass_univariate_methods", "auto_examples/07_advanced/plot_localizer_simple_analysis", "auto_examples/07_advanced/plot_neurovault_meta_analysis", "auto_examples/07_advanced/plot_surface_bids_analysis", "auto_examples/07_advanced/plot_surface_image_and_maskers", "auto_examples/07_advanced/sg_execution_times", "auto_examples/index", "auto_examples/sg_execution_times", "bibliography", "building_blocks/index", "building_blocks/manual_pipeline", "building_blocks/neurovault", "changes/0.1.0", "changes/0.1.1", "changes/0.1.2", "changes/0.1.3", "changes/0.1.4", "changes/0.10.0", "changes/0.10.1", "changes/0.10.2", "changes/0.10.3", "changes/0.10.4", "changes/0.11.0", "changes/0.11.1", "changes/0.2.0", "changes/0.2.1", "changes/0.2.2", "changes/0.2.3", "changes/0.2.4", "changes/0.2.5", "changes/0.2.6", "changes/0.3.0", "changes/0.3.1", "changes/0.4.0", "changes/0.4.1", "changes/0.4.2", "changes/0.5.0", "changes/0.5.1", "changes/0.5.2", "changes/0.6.0", "changes/0.6.1", "changes/0.6.2", "changes/0.7.0", "changes/0.7.1", "changes/0.8.0", "changes/0.8.1", "changes/0.9.0", "changes/0.9.1", "changes/0.9.2", "changes/names", "changes/whats_new", "connectivity/connectome_extraction", "connectivity/functional_connectomes", "connectivity/index", "connectivity/parcellating", "connectivity/region_extraction", "connectivity/resting_state_networks", "decoding/decoding_intro", "decoding/estimator_choice", "decoding/frem", "decoding/going_further", "decoding/index", "decoding/searchlight", "decoding/space_net", "developers/group_sparse_covariance", "development", "glm/first_level_model", "glm/glm_intro", "glm/index", "glm/meaning_difference", "glm/second_level_model", "glossary", "index", "introduction", "maintenance", "manipulating_images/index", "manipulating_images/input_output", "manipulating_images/manipulating_images", "manipulating_images/masker_objects", "modules/connectome", "modules/datasets", "modules/decoding", "modules/decomposition", "modules/description/ABIDE_pcp", "modules/description/Megatrawls", "modules/description/aal", "modules/description/adhd", "modules/description/allen_rsn_2011", "modules/description/basc_multiscale_2015", "modules/description/bids_langloc", "modules/description/brainomics_localizer", "modules/description/craddock_2012", "modules/description/destrieux_surface", "modules/description/development_fmri", "modules/description/difumo_atlases", "modules/description/dosenbach_2010", "modules/description/fiac", "modules/description/fsaverage", "modules/description/fsaverage3", "modules/description/fsaverage4", "modules/description/fsaverage5", "modules/description/fsaverage6", "modules/description/harvard_oxford", "modules/description/haxby2001", "modules/description/icbm152_2009", "modules/description/juelich", "modules/description/language_localizer_demo", "modules/description/localizer_first_level", "modules/description/mixed_gambles", "modules/description/miyawaki2008", "modules/description/msdl_atlas", "modules/description/neurovault", "modules/description/nki_enhanced_surface", "modules/description/oasis1", "modules/description/pauli_2017", "modules/description/power_2011", "modules/description/schaefer_2018", "modules/description/seitzman_2018", "modules/description/smith_2009", "modules/description/spm_auditory", "modules/description/spm_multimodal", "modules/description/talairach_atlas", "modules/description/yeo_2011", "modules/generated/nilearn.connectome.ConnectivityMeasure", "modules/generated/nilearn.connectome.GroupSparseCovariance", "modules/generated/nilearn.connectome.GroupSparseCovarianceCV", "modules/generated/nilearn.connectome.cov_to_corr", "modules/generated/nilearn.connectome.group_sparse_covariance", "modules/generated/nilearn.connectome.prec_to_partial", "modules/generated/nilearn.connectome.sym_matrix_to_vec", "modules/generated/nilearn.connectome.vec_to_sym_matrix", "modules/generated/nilearn.datasets.fetch_abide_pcp", "modules/generated/nilearn.datasets.fetch_adhd", "modules/generated/nilearn.datasets.fetch_atlas_aal", "modules/generated/nilearn.datasets.fetch_atlas_allen_2011", "modules/generated/nilearn.datasets.fetch_atlas_basc_multiscale_2015", "modules/generated/nilearn.datasets.fetch_atlas_craddock_2012", "modules/generated/nilearn.datasets.fetch_atlas_destrieux_2009", "modules/generated/nilearn.datasets.fetch_atlas_difumo", "modules/generated/nilearn.datasets.fetch_atlas_harvard_oxford", "modules/generated/nilearn.datasets.fetch_atlas_juelich", "modules/generated/nilearn.datasets.fetch_atlas_msdl", "modules/generated/nilearn.datasets.fetch_atlas_pauli_2017", "modules/generated/nilearn.datasets.fetch_atlas_schaefer_2018", "modules/generated/nilearn.datasets.fetch_atlas_smith_2009", "modules/generated/nilearn.datasets.fetch_atlas_surf_destrieux", "modules/generated/nilearn.datasets.fetch_atlas_talairach", "modules/generated/nilearn.datasets.fetch_atlas_yeo_2011", "modules/generated/nilearn.datasets.fetch_bids_langloc_dataset", "modules/generated/nilearn.datasets.fetch_coords_dosenbach_2010", "modules/generated/nilearn.datasets.fetch_coords_power_2011", "modules/generated/nilearn.datasets.fetch_coords_seitzman_2018", "modules/generated/nilearn.datasets.fetch_development_fmri", "modules/generated/nilearn.datasets.fetch_ds000030_urls", "modules/generated/nilearn.datasets.fetch_fiac_first_level", "modules/generated/nilearn.datasets.fetch_haxby", "modules/generated/nilearn.datasets.fetch_icbm152_2009", "modules/generated/nilearn.datasets.fetch_icbm152_brain_gm_mask", "modules/generated/nilearn.datasets.fetch_language_localizer_demo_dataset", "modules/generated/nilearn.datasets.fetch_localizer_button_task", "modules/generated/nilearn.datasets.fetch_localizer_calculation_task", "modules/generated/nilearn.datasets.fetch_localizer_contrasts", "modules/generated/nilearn.datasets.fetch_localizer_first_level", "modules/generated/nilearn.datasets.fetch_megatrawls_netmats", "modules/generated/nilearn.datasets.fetch_mixed_gambles", "modules/generated/nilearn.datasets.fetch_miyawaki2008", "modules/generated/nilearn.datasets.fetch_neurovault", "modules/generated/nilearn.datasets.fetch_neurovault_auditory_computation_task", "modules/generated/nilearn.datasets.fetch_neurovault_ids", "modules/generated/nilearn.datasets.fetch_neurovault_motor_task", "modules/generated/nilearn.datasets.fetch_oasis_vbm", "modules/generated/nilearn.datasets.fetch_openneuro_dataset", "modules/generated/nilearn.datasets.fetch_spm_auditory", "modules/generated/nilearn.datasets.fetch_spm_multimodal_fmri", "modules/generated/nilearn.datasets.fetch_surf_fsaverage", "modules/generated/nilearn.datasets.fetch_surf_nki_enhanced", "modules/generated/nilearn.datasets.get_data_dirs", "modules/generated/nilearn.datasets.load_fsaverage", "modules/generated/nilearn.datasets.load_fsaverage_data", "modules/generated/nilearn.datasets.load_mni152_brain_mask", "modules/generated/nilearn.datasets.load_mni152_gm_mask", "modules/generated/nilearn.datasets.load_mni152_gm_template", "modules/generated/nilearn.datasets.load_mni152_template", "modules/generated/nilearn.datasets.load_mni152_wm_mask", "modules/generated/nilearn.datasets.load_mni152_wm_template", "modules/generated/nilearn.datasets.load_nki", "modules/generated/nilearn.datasets.load_sample_motor_activation_image", "modules/generated/nilearn.datasets.patch_openneuro_dataset", "modules/generated/nilearn.datasets.select_from_index", "modules/generated/nilearn.decoding.Decoder", "modules/generated/nilearn.decoding.DecoderRegressor", "modules/generated/nilearn.decoding.FREMClassifier", "modules/generated/nilearn.decoding.FREMRegressor", "modules/generated/nilearn.decoding.SearchLight", "modules/generated/nilearn.decoding.SpaceNetClassifier", "modules/generated/nilearn.decoding.SpaceNetRegressor", "modules/generated/nilearn.decomposition.CanICA", "modules/generated/nilearn.decomposition.DictLearning", "modules/generated/nilearn.glm.ARModel", "modules/generated/nilearn.glm.Contrast", "modules/generated/nilearn.glm.FContrastResults", "modules/generated/nilearn.glm.LikelihoodModelResults", "modules/generated/nilearn.glm.OLSModel", "modules/generated/nilearn.glm.RegressionResults", "modules/generated/nilearn.glm.SimpleRegressionResults", "modules/generated/nilearn.glm.TContrastResults", "modules/generated/nilearn.glm.cluster_level_inference", "modules/generated/nilearn.glm.compute_contrast", "modules/generated/nilearn.glm.compute_fixed_effects", "modules/generated/nilearn.glm.expression_to_contrast_vector", "modules/generated/nilearn.glm.fdr_threshold", "modules/generated/nilearn.glm.first_level.FirstLevelModel", "modules/generated/nilearn.glm.first_level.check_design_matrix", "modules/generated/nilearn.glm.first_level.compute_regressor", "modules/generated/nilearn.glm.first_level.first_level_from_bids", "modules/generated/nilearn.glm.first_level.glover_dispersion_derivative", "modules/generated/nilearn.glm.first_level.glover_hrf", "modules/generated/nilearn.glm.first_level.glover_time_derivative", "modules/generated/nilearn.glm.first_level.make_first_level_design_matrix", "modules/generated/nilearn.glm.first_level.mean_scaling", "modules/generated/nilearn.glm.first_level.run_glm", "modules/generated/nilearn.glm.first_level.spm_dispersion_derivative", "modules/generated/nilearn.glm.first_level.spm_hrf", "modules/generated/nilearn.glm.first_level.spm_time_derivative", "modules/generated/nilearn.glm.second_level.SecondLevelModel", "modules/generated/nilearn.glm.second_level.make_second_level_design_matrix", "modules/generated/nilearn.glm.second_level.non_parametric_inference", "modules/generated/nilearn.glm.threshold_stats_img", "modules/generated/nilearn.image.binarize_img", "modules/generated/nilearn.image.clean_img", "modules/generated/nilearn.image.concat_imgs", "modules/generated/nilearn.image.coord_transform", "modules/generated/nilearn.image.copy_img", "modules/generated/nilearn.image.crop_img", "modules/generated/nilearn.image.get_data", "modules/generated/nilearn.image.high_variance_confounds", "modules/generated/nilearn.image.index_img", "modules/generated/nilearn.image.iter_img", "modules/generated/nilearn.image.largest_connected_component_img", "modules/generated/nilearn.image.load_img", "modules/generated/nilearn.image.math_img", "modules/generated/nilearn.image.mean_img", "modules/generated/nilearn.image.new_img_like", "modules/generated/nilearn.image.reorder_img", "modules/generated/nilearn.image.resample_img", "modules/generated/nilearn.image.resample_to_img", "modules/generated/nilearn.image.smooth_img", "modules/generated/nilearn.image.swap_img_hemispheres", "modules/generated/nilearn.image.threshold_img", "modules/generated/nilearn.interfaces.bids.get_bids_files", "modules/generated/nilearn.interfaces.bids.parse_bids_filename", "modules/generated/nilearn.interfaces.bids.save_glm_to_bids", "modules/generated/nilearn.interfaces.fmriprep.load_confounds", "modules/generated/nilearn.interfaces.fmriprep.load_confounds_strategy", "modules/generated/nilearn.interfaces.fsl.get_design_from_fslmat", "modules/generated/nilearn.maskers.BaseMasker", "modules/generated/nilearn.maskers.MultiNiftiLabelsMasker", "modules/generated/nilearn.maskers.MultiNiftiMapsMasker", "modules/generated/nilearn.maskers.MultiNiftiMasker", "modules/generated/nilearn.maskers.NiftiLabelsMasker", "modules/generated/nilearn.maskers.NiftiMapsMasker", "modules/generated/nilearn.maskers.NiftiMasker", "modules/generated/nilearn.maskers.NiftiSpheresMasker", "modules/generated/nilearn.maskers.SurfaceLabelsMasker", "modules/generated/nilearn.maskers.SurfaceMapsMasker", "modules/generated/nilearn.maskers.SurfaceMasker", "modules/generated/nilearn.masking.apply_mask", "modules/generated/nilearn.masking.compute_background_mask", "modules/generated/nilearn.masking.compute_brain_mask", "modules/generated/nilearn.masking.compute_epi_mask", "modules/generated/nilearn.masking.compute_multi_background_mask", "modules/generated/nilearn.masking.compute_multi_brain_mask", "modules/generated/nilearn.masking.compute_multi_epi_mask", "modules/generated/nilearn.masking.intersect_masks", "modules/generated/nilearn.masking.unmask", "modules/generated/nilearn.mass_univariate.permuted_ols", "modules/generated/nilearn.plotting.displays.BaseAxes", "modules/generated/nilearn.plotting.displays.BaseSlicer", "modules/generated/nilearn.plotting.displays.CutAxes", "modules/generated/nilearn.plotting.displays.GlassBrainAxes", "modules/generated/nilearn.plotting.displays.LProjector", "modules/generated/nilearn.plotting.displays.LRProjector", "modules/generated/nilearn.plotting.displays.LYRProjector", "modules/generated/nilearn.plotting.displays.LYRZProjector", "modules/generated/nilearn.plotting.displays.LZRProjector", "modules/generated/nilearn.plotting.displays.LZRYProjector", "modules/generated/nilearn.plotting.displays.MosaicSlicer", "modules/generated/nilearn.plotting.displays.OrthoProjector", "modules/generated/nilearn.plotting.displays.OrthoSlicer", "modules/generated/nilearn.plotting.displays.PlotlySurfaceFigure", "modules/generated/nilearn.plotting.displays.RProjector", "modules/generated/nilearn.plotting.displays.TiledSlicer", "modules/generated/nilearn.plotting.displays.XProjector", "modules/generated/nilearn.plotting.displays.XSlicer", "modules/generated/nilearn.plotting.displays.XZProjector", "modules/generated/nilearn.plotting.displays.XZSlicer", "modules/generated/nilearn.plotting.displays.YProjector", "modules/generated/nilearn.plotting.displays.YSlicer", "modules/generated/nilearn.plotting.displays.YXProjector", "modules/generated/nilearn.plotting.displays.YXSlicer", "modules/generated/nilearn.plotting.displays.YZProjector", "modules/generated/nilearn.plotting.displays.YZSlicer", "modules/generated/nilearn.plotting.displays.ZProjector", "modules/generated/nilearn.plotting.displays.ZSlicer", "modules/generated/nilearn.plotting.displays.get_projector", "modules/generated/nilearn.plotting.displays.get_slicer", "modules/generated/nilearn.plotting.find_cut_slices", "modules/generated/nilearn.plotting.find_parcellation_cut_coords", "modules/generated/nilearn.plotting.find_probabilistic_atlas_cut_coords", "modules/generated/nilearn.plotting.find_xyz_cut_coords", "modules/generated/nilearn.plotting.plot_anat", "modules/generated/nilearn.plotting.plot_carpet", "modules/generated/nilearn.plotting.plot_connectome", "modules/generated/nilearn.plotting.plot_contrast_matrix", "modules/generated/nilearn.plotting.plot_design_matrix", "modules/generated/nilearn.plotting.plot_design_matrix_correlation", "modules/generated/nilearn.plotting.plot_epi", "modules/generated/nilearn.plotting.plot_event", "modules/generated/nilearn.plotting.plot_glass_brain", "modules/generated/nilearn.plotting.plot_img", "modules/generated/nilearn.plotting.plot_img_comparison", "modules/generated/nilearn.plotting.plot_img_on_surf", "modules/generated/nilearn.plotting.plot_markers", "modules/generated/nilearn.plotting.plot_matrix", "modules/generated/nilearn.plotting.plot_prob_atlas", "modules/generated/nilearn.plotting.plot_roi", "modules/generated/nilearn.plotting.plot_stat_map", "modules/generated/nilearn.plotting.plot_surf", "modules/generated/nilearn.plotting.plot_surf_contours", "modules/generated/nilearn.plotting.plot_surf_roi", "modules/generated/nilearn.plotting.plot_surf_stat_map", "modules/generated/nilearn.plotting.show", "modules/generated/nilearn.plotting.view_connectome", "modules/generated/nilearn.plotting.view_img", "modules/generated/nilearn.plotting.view_img_on_surf", "modules/generated/nilearn.plotting.view_markers", "modules/generated/nilearn.plotting.view_surf", "modules/generated/nilearn.regions.HierarchicalKMeans", "modules/generated/nilearn.regions.Parcellations", "modules/generated/nilearn.regions.ReNA", "modules/generated/nilearn.regions.RegionExtractor", "modules/generated/nilearn.regions.connected_label_regions", "modules/generated/nilearn.regions.connected_regions", "modules/generated/nilearn.regions.img_to_signals_labels", "modules/generated/nilearn.regions.img_to_signals_maps", "modules/generated/nilearn.regions.recursive_neighbor_agglomeration", "modules/generated/nilearn.regions.signals_to_img_labels", "modules/generated/nilearn.regions.signals_to_img_maps", "modules/generated/nilearn.reporting.HTMLReport", "modules/generated/nilearn.reporting.get_clusters_table", "modules/generated/nilearn.reporting.make_glm_report", "modules/generated/nilearn.signal.butterworth", "modules/generated/nilearn.signal.clean", "modules/generated/nilearn.signal.high_variance_confounds", "modules/generated/nilearn.surface.FileMesh", "modules/generated/nilearn.surface.InMemoryMesh", "modules/generated/nilearn.surface.PolyData", "modules/generated/nilearn.surface.PolyMesh", "modules/generated/nilearn.surface.SurfaceImage", "modules/generated/nilearn.surface.SurfaceMesh", "modules/generated/nilearn.surface.load_surf_data", "modules/generated/nilearn.surface.load_surf_mesh", "modules/generated/nilearn.surface.vol_to_surf", "modules/generated_reports/glm_reports_examples", "modules/generated_reports/masker_reports_examples", "modules/glm", "modules/image", "modules/index", "modules/interfaces", "modules/maskers", "modules/masking", "modules/mass_univariate", "modules/plotting", "modules/regions", "modules/reporting", "modules/signal", "modules/surface", "plotting/index", "quickstart", "sg_execution_times", "user_guide"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinxcontrib.bibtex": 9}, "filenames": ["authors.rst", "auto_examples/00_tutorials/index.rst", "auto_examples/00_tutorials/plot_3d_and_4d_niimg.rst", "auto_examples/00_tutorials/plot_decoding_tutorial.rst", "auto_examples/00_tutorials/plot_nilearn_101.rst", "auto_examples/00_tutorials/plot_python_101.rst", "auto_examples/00_tutorials/plot_single_subject_single_run.rst", "auto_examples/00_tutorials/plot_surface_101.rst", "auto_examples/00_tutorials/sg_execution_times.rst", "auto_examples/01_plotting/index.rst", "auto_examples/01_plotting/plot_3d_map_to_surface_projection.rst", "auto_examples/01_plotting/plot_atlas.rst", "auto_examples/01_plotting/plot_carpet.rst", "auto_examples/01_plotting/plot_colormaps.rst", "auto_examples/01_plotting/plot_demo_glass_brain.rst", "auto_examples/01_plotting/plot_demo_glass_brain_extensive.rst", "auto_examples/01_plotting/plot_demo_more_plotting.rst", "auto_examples/01_plotting/plot_demo_plotting.rst", "auto_examples/01_plotting/plot_dim_plotting.rst", "auto_examples/01_plotting/plot_haxby_masks.rst", "auto_examples/01_plotting/plot_multiscale_parcellations.rst", "auto_examples/01_plotting/plot_overlay.rst", "auto_examples/01_plotting/plot_prob_atlas.rst", "auto_examples/01_plotting/plot_surf_atlas.rst", "auto_examples/01_plotting/plot_surf_stat_map.rst", "auto_examples/01_plotting/plot_surface_projection_strategies.rst", "auto_examples/01_plotting/plot_visualization.rst", "auto_examples/01_plotting/plot_visualize_megatrawls_netmats.rst", "auto_examples/01_plotting/sg_execution_times.rst", "auto_examples/02_decoding/index.rst", "auto_examples/02_decoding/plot_haxby_anova_svm.rst", "auto_examples/02_decoding/plot_haxby_different_estimators.rst", "auto_examples/02_decoding/plot_haxby_frem.rst", "auto_examples/02_decoding/plot_haxby_full_analysis.rst", "auto_examples/02_decoding/plot_haxby_glm_decoding.rst", "auto_examples/02_decoding/plot_haxby_grid_search.rst", "auto_examples/02_decoding/plot_haxby_multiclass.rst", "auto_examples/02_decoding/plot_haxby_searchlight.rst", "auto_examples/02_decoding/plot_haxby_searchlight_surface.rst", "auto_examples/02_decoding/plot_haxby_stimuli.rst", "auto_examples/02_decoding/plot_haxby_understand_decoder.rst", "auto_examples/02_decoding/plot_mixed_gambles_frem.rst", "auto_examples/02_decoding/plot_miyawaki_encoding.rst", "auto_examples/02_decoding/plot_miyawaki_reconstruction.rst", "auto_examples/02_decoding/plot_oasis_vbm.rst", "auto_examples/02_decoding/plot_oasis_vbm_space_net.rst", "auto_examples/02_decoding/plot_simulated_data.rst", "auto_examples/02_decoding/sg_execution_times.rst", "auto_examples/03_connectivity/index.rst", "auto_examples/03_connectivity/plot_atlas_comparison.rst", "auto_examples/03_connectivity/plot_compare_decomposition.rst", "auto_examples/03_connectivity/plot_data_driven_parcellations.rst", "auto_examples/03_connectivity/plot_extract_regions_dictlearning_maps.rst", "auto_examples/03_connectivity/plot_group_level_connectivity.rst", "auto_examples/03_connectivity/plot_inverse_covariance_connectome.rst", "auto_examples/03_connectivity/plot_multi_subject_connectome.rst", "auto_examples/03_connectivity/plot_probabilistic_atlas_extraction.rst", "auto_examples/03_connectivity/plot_seed_to_voxel_correlation.rst", "auto_examples/03_connectivity/plot_signal_extraction.rst", "auto_examples/03_connectivity/plot_simulated_connectome.rst", "auto_examples/03_connectivity/plot_sphere_based_connectome.rst", "auto_examples/03_connectivity/sg_execution_times.rst", "auto_examples/04_glm_first_level/index.rst", "auto_examples/04_glm_first_level/plot_adhd_dmn.rst", "auto_examples/04_glm_first_level/plot_bids_features.rst", "auto_examples/04_glm_first_level/plot_design_matrix.rst", "auto_examples/04_glm_first_level/plot_fir_model.rst", "auto_examples/04_glm_first_level/plot_first_level_details.rst", "auto_examples/04_glm_first_level/plot_hrf.rst", "auto_examples/04_glm_first_level/plot_localizer_surface_analysis.rst", "auto_examples/04_glm_first_level/plot_predictions_residuals.rst", "auto_examples/04_glm_first_level/plot_spm_multimodal_faces.rst", "auto_examples/04_glm_first_level/plot_two_runs_model.rst", "auto_examples/04_glm_first_level/plot_write_events_file.rst", "auto_examples/04_glm_first_level/sg_execution_times.rst", "auto_examples/05_glm_second_level/index.rst", "auto_examples/05_glm_second_level/plot_oasis.rst", "auto_examples/05_glm_second_level/plot_proportion_activated_voxels.rst", "auto_examples/05_glm_second_level/plot_second_level_association_test.rst", "auto_examples/05_glm_second_level/plot_second_level_design_matrix.rst", "auto_examples/05_glm_second_level/plot_second_level_one_sample_test.rst", "auto_examples/05_glm_second_level/plot_second_level_two_sample_test.rst", "auto_examples/05_glm_second_level/plot_thresholding.rst", "auto_examples/05_glm_second_level/sg_execution_times.rst", "auto_examples/06_manipulating_images/index.rst", "auto_examples/06_manipulating_images/plot_affine_transformation.rst", "auto_examples/06_manipulating_images/plot_compare_mean_image.rst", "auto_examples/06_manipulating_images/plot_extract_regions_labels_image.rst", "auto_examples/06_manipulating_images/plot_extract_rois_smith_atlas.rst", "auto_examples/06_manipulating_images/plot_extract_rois_statistical_maps.rst", "auto_examples/06_manipulating_images/plot_mask_computation.rst", "auto_examples/06_manipulating_images/plot_negate_image.rst", "auto_examples/06_manipulating_images/plot_nifti_labels_simple.rst", "auto_examples/06_manipulating_images/plot_nifti_simple.rst", "auto_examples/06_manipulating_images/plot_resample_to_template.rst", "auto_examples/06_manipulating_images/plot_roi_extraction.rst", "auto_examples/06_manipulating_images/plot_smooth_mean_image.rst", "auto_examples/06_manipulating_images/sg_execution_times.rst", "auto_examples/07_advanced/index.rst", "auto_examples/07_advanced/plot_advanced_decoding_scikit.rst", "auto_examples/07_advanced/plot_age_group_prediction_cross_val.rst", "auto_examples/07_advanced/plot_beta_series.rst", "auto_examples/07_advanced/plot_bids_analysis.rst", "auto_examples/07_advanced/plot_copy_headers_math_img.rst", "auto_examples/07_advanced/plot_haxby_mass_univariate.rst", "auto_examples/07_advanced/plot_ica_neurovault.rst", "auto_examples/07_advanced/plot_ica_resting_state.rst", "auto_examples/07_advanced/plot_localizer_mass_univariate_methods.rst", "auto_examples/07_advanced/plot_localizer_simple_analysis.rst", "auto_examples/07_advanced/plot_neurovault_meta_analysis.rst", "auto_examples/07_advanced/plot_surface_bids_analysis.rst", "auto_examples/07_advanced/plot_surface_image_and_maskers.rst", "auto_examples/07_advanced/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/sg_execution_times.rst", "bibliography.rst", "building_blocks/index.rst", "building_blocks/manual_pipeline.rst", "building_blocks/neurovault.rst", "changes/0.1.0.rst", "changes/0.1.1.rst", "changes/0.1.2.rst", "changes/0.1.3.rst", "changes/0.1.4.rst", "changes/0.10.0.rst", "changes/0.10.1.rst", "changes/0.10.2.rst", "changes/0.10.3.rst", "changes/0.10.4.rst", "changes/0.11.0.rst", "changes/0.11.1.rst", "changes/0.2.0.rst", "changes/0.2.1.rst", "changes/0.2.2.rst", "changes/0.2.3.rst", "changes/0.2.4.rst", "changes/0.2.5.rst", "changes/0.2.6.rst", "changes/0.3.0.rst", "changes/0.3.1.rst", "changes/0.4.0.rst", "changes/0.4.1.rst", "changes/0.4.2.rst", "changes/0.5.0.rst", "changes/0.5.1.rst", "changes/0.5.2.rst", "changes/0.6.0.rst", "changes/0.6.1.rst", "changes/0.6.2.rst", "changes/0.7.0.rst", "changes/0.7.1.rst", "changes/0.8.0.rst", "changes/0.8.1.rst", "changes/0.9.0.rst", "changes/0.9.1.rst", "changes/0.9.2.rst", "changes/names.rst", "changes/whats_new.rst", "connectivity/connectome_extraction.rst", "connectivity/functional_connectomes.rst", "connectivity/index.rst", "connectivity/parcellating.rst", "connectivity/region_extraction.rst", "connectivity/resting_state_networks.rst", "decoding/decoding_intro.rst", "decoding/estimator_choice.rst", "decoding/frem.rst", "decoding/going_further.rst", "decoding/index.rst", "decoding/searchlight.rst", "decoding/space_net.rst", "developers/group_sparse_covariance.rst", "development.rst", "glm/first_level_model.rst", "glm/glm_intro.rst", "glm/index.rst", "glm/meaning_difference.rst", "glm/second_level_model.rst", "glossary.rst", "index.rst", "introduction.rst", "maintenance.rst", "manipulating_images/index.rst", "manipulating_images/input_output.rst", "manipulating_images/manipulating_images.rst", "manipulating_images/masker_objects.rst", "modules/connectome.rst", "modules/datasets.rst", "modules/decoding.rst", "modules/decomposition.rst", "modules/description/ABIDE_pcp.rst", "modules/description/Megatrawls.rst", "modules/description/aal.rst", "modules/description/adhd.rst", "modules/description/allen_rsn_2011.rst", "modules/description/basc_multiscale_2015.rst", "modules/description/bids_langloc.rst", "modules/description/brainomics_localizer.rst", "modules/description/craddock_2012.rst", "modules/description/destrieux_surface.rst", "modules/description/development_fmri.rst", "modules/description/difumo_atlases.rst", "modules/description/dosenbach_2010.rst", "modules/description/fiac.rst", "modules/description/fsaverage.rst", "modules/description/fsaverage3.rst", "modules/description/fsaverage4.rst", "modules/description/fsaverage5.rst", "modules/description/fsaverage6.rst", "modules/description/harvard_oxford.rst", "modules/description/haxby2001.rst", "modules/description/icbm152_2009.rst", "modules/description/juelich.rst", "modules/description/language_localizer_demo.rst", "modules/description/localizer_first_level.rst", "modules/description/mixed_gambles.rst", "modules/description/miyawaki2008.rst", "modules/description/msdl_atlas.rst", "modules/description/neurovault.rst", "modules/description/nki_enhanced_surface.rst", "modules/description/oasis1.rst", "modules/description/pauli_2017.rst", "modules/description/power_2011.rst", "modules/description/schaefer_2018.rst", "modules/description/seitzman_2018.rst", "modules/description/smith_2009.rst", "modules/description/spm_auditory.rst", "modules/description/spm_multimodal.rst", "modules/description/talairach_atlas.rst", "modules/description/yeo_2011.rst", "modules/generated/nilearn.connectome.ConnectivityMeasure.rst", "modules/generated/nilearn.connectome.GroupSparseCovariance.rst", "modules/generated/nilearn.connectome.GroupSparseCovarianceCV.rst", "modules/generated/nilearn.connectome.cov_to_corr.rst", "modules/generated/nilearn.connectome.group_sparse_covariance.rst", "modules/generated/nilearn.connectome.prec_to_partial.rst", "modules/generated/nilearn.connectome.sym_matrix_to_vec.rst", "modules/generated/nilearn.connectome.vec_to_sym_matrix.rst", "modules/generated/nilearn.datasets.fetch_abide_pcp.rst", "modules/generated/nilearn.datasets.fetch_adhd.rst", "modules/generated/nilearn.datasets.fetch_atlas_aal.rst", "modules/generated/nilearn.datasets.fetch_atlas_allen_2011.rst", "modules/generated/nilearn.datasets.fetch_atlas_basc_multiscale_2015.rst", "modules/generated/nilearn.datasets.fetch_atlas_craddock_2012.rst", "modules/generated/nilearn.datasets.fetch_atlas_destrieux_2009.rst", "modules/generated/nilearn.datasets.fetch_atlas_difumo.rst", "modules/generated/nilearn.datasets.fetch_atlas_harvard_oxford.rst", "modules/generated/nilearn.datasets.fetch_atlas_juelich.rst", "modules/generated/nilearn.datasets.fetch_atlas_msdl.rst", "modules/generated/nilearn.datasets.fetch_atlas_pauli_2017.rst", "modules/generated/nilearn.datasets.fetch_atlas_schaefer_2018.rst", "modules/generated/nilearn.datasets.fetch_atlas_smith_2009.rst", "modules/generated/nilearn.datasets.fetch_atlas_surf_destrieux.rst", "modules/generated/nilearn.datasets.fetch_atlas_talairach.rst", "modules/generated/nilearn.datasets.fetch_atlas_yeo_2011.rst", "modules/generated/nilearn.datasets.fetch_bids_langloc_dataset.rst", "modules/generated/nilearn.datasets.fetch_coords_dosenbach_2010.rst", "modules/generated/nilearn.datasets.fetch_coords_power_2011.rst", "modules/generated/nilearn.datasets.fetch_coords_seitzman_2018.rst", "modules/generated/nilearn.datasets.fetch_development_fmri.rst", "modules/generated/nilearn.datasets.fetch_ds000030_urls.rst", "modules/generated/nilearn.datasets.fetch_fiac_first_level.rst", "modules/generated/nilearn.datasets.fetch_haxby.rst", "modules/generated/nilearn.datasets.fetch_icbm152_2009.rst", "modules/generated/nilearn.datasets.fetch_icbm152_brain_gm_mask.rst", "modules/generated/nilearn.datasets.fetch_language_localizer_demo_dataset.rst", "modules/generated/nilearn.datasets.fetch_localizer_button_task.rst", "modules/generated/nilearn.datasets.fetch_localizer_calculation_task.rst", "modules/generated/nilearn.datasets.fetch_localizer_contrasts.rst", "modules/generated/nilearn.datasets.fetch_localizer_first_level.rst", "modules/generated/nilearn.datasets.fetch_megatrawls_netmats.rst", "modules/generated/nilearn.datasets.fetch_mixed_gambles.rst", "modules/generated/nilearn.datasets.fetch_miyawaki2008.rst", "modules/generated/nilearn.datasets.fetch_neurovault.rst", "modules/generated/nilearn.datasets.fetch_neurovault_auditory_computation_task.rst", "modules/generated/nilearn.datasets.fetch_neurovault_ids.rst", "modules/generated/nilearn.datasets.fetch_neurovault_motor_task.rst", "modules/generated/nilearn.datasets.fetch_oasis_vbm.rst", "modules/generated/nilearn.datasets.fetch_openneuro_dataset.rst", "modules/generated/nilearn.datasets.fetch_spm_auditory.rst", "modules/generated/nilearn.datasets.fetch_spm_multimodal_fmri.rst", "modules/generated/nilearn.datasets.fetch_surf_fsaverage.rst", "modules/generated/nilearn.datasets.fetch_surf_nki_enhanced.rst", "modules/generated/nilearn.datasets.get_data_dirs.rst", "modules/generated/nilearn.datasets.load_fsaverage.rst", "modules/generated/nilearn.datasets.load_fsaverage_data.rst", "modules/generated/nilearn.datasets.load_mni152_brain_mask.rst", "modules/generated/nilearn.datasets.load_mni152_gm_mask.rst", "modules/generated/nilearn.datasets.load_mni152_gm_template.rst", "modules/generated/nilearn.datasets.load_mni152_template.rst", "modules/generated/nilearn.datasets.load_mni152_wm_mask.rst", "modules/generated/nilearn.datasets.load_mni152_wm_template.rst", "modules/generated/nilearn.datasets.load_nki.rst", "modules/generated/nilearn.datasets.load_sample_motor_activation_image.rst", "modules/generated/nilearn.datasets.patch_openneuro_dataset.rst", "modules/generated/nilearn.datasets.select_from_index.rst", "modules/generated/nilearn.decoding.Decoder.rst", "modules/generated/nilearn.decoding.DecoderRegressor.rst", "modules/generated/nilearn.decoding.FREMClassifier.rst", "modules/generated/nilearn.decoding.FREMRegressor.rst", "modules/generated/nilearn.decoding.SearchLight.rst", "modules/generated/nilearn.decoding.SpaceNetClassifier.rst", "modules/generated/nilearn.decoding.SpaceNetRegressor.rst", "modules/generated/nilearn.decomposition.CanICA.rst", "modules/generated/nilearn.decomposition.DictLearning.rst", "modules/generated/nilearn.glm.ARModel.rst", "modules/generated/nilearn.glm.Contrast.rst", "modules/generated/nilearn.glm.FContrastResults.rst", "modules/generated/nilearn.glm.LikelihoodModelResults.rst", "modules/generated/nilearn.glm.OLSModel.rst", "modules/generated/nilearn.glm.RegressionResults.rst", "modules/generated/nilearn.glm.SimpleRegressionResults.rst", "modules/generated/nilearn.glm.TContrastResults.rst", "modules/generated/nilearn.glm.cluster_level_inference.rst", "modules/generated/nilearn.glm.compute_contrast.rst", "modules/generated/nilearn.glm.compute_fixed_effects.rst", "modules/generated/nilearn.glm.expression_to_contrast_vector.rst", "modules/generated/nilearn.glm.fdr_threshold.rst", "modules/generated/nilearn.glm.first_level.FirstLevelModel.rst", "modules/generated/nilearn.glm.first_level.check_design_matrix.rst", "modules/generated/nilearn.glm.first_level.compute_regressor.rst", "modules/generated/nilearn.glm.first_level.first_level_from_bids.rst", "modules/generated/nilearn.glm.first_level.glover_dispersion_derivative.rst", "modules/generated/nilearn.glm.first_level.glover_hrf.rst", "modules/generated/nilearn.glm.first_level.glover_time_derivative.rst", "modules/generated/nilearn.glm.first_level.make_first_level_design_matrix.rst", "modules/generated/nilearn.glm.first_level.mean_scaling.rst", "modules/generated/nilearn.glm.first_level.run_glm.rst", "modules/generated/nilearn.glm.first_level.spm_dispersion_derivative.rst", "modules/generated/nilearn.glm.first_level.spm_hrf.rst", "modules/generated/nilearn.glm.first_level.spm_time_derivative.rst", "modules/generated/nilearn.glm.second_level.SecondLevelModel.rst", "modules/generated/nilearn.glm.second_level.make_second_level_design_matrix.rst", "modules/generated/nilearn.glm.second_level.non_parametric_inference.rst", "modules/generated/nilearn.glm.threshold_stats_img.rst", "modules/generated/nilearn.image.binarize_img.rst", "modules/generated/nilearn.image.clean_img.rst", "modules/generated/nilearn.image.concat_imgs.rst", "modules/generated/nilearn.image.coord_transform.rst", "modules/generated/nilearn.image.copy_img.rst", "modules/generated/nilearn.image.crop_img.rst", "modules/generated/nilearn.image.get_data.rst", "modules/generated/nilearn.image.high_variance_confounds.rst", "modules/generated/nilearn.image.index_img.rst", "modules/generated/nilearn.image.iter_img.rst", "modules/generated/nilearn.image.largest_connected_component_img.rst", "modules/generated/nilearn.image.load_img.rst", "modules/generated/nilearn.image.math_img.rst", "modules/generated/nilearn.image.mean_img.rst", "modules/generated/nilearn.image.new_img_like.rst", "modules/generated/nilearn.image.reorder_img.rst", "modules/generated/nilearn.image.resample_img.rst", "modules/generated/nilearn.image.resample_to_img.rst", "modules/generated/nilearn.image.smooth_img.rst", "modules/generated/nilearn.image.swap_img_hemispheres.rst", "modules/generated/nilearn.image.threshold_img.rst", "modules/generated/nilearn.interfaces.bids.get_bids_files.rst", "modules/generated/nilearn.interfaces.bids.parse_bids_filename.rst", "modules/generated/nilearn.interfaces.bids.save_glm_to_bids.rst", "modules/generated/nilearn.interfaces.fmriprep.load_confounds.rst", "modules/generated/nilearn.interfaces.fmriprep.load_confounds_strategy.rst", "modules/generated/nilearn.interfaces.fsl.get_design_from_fslmat.rst", "modules/generated/nilearn.maskers.BaseMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiLabelsMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiMapsMasker.rst", "modules/generated/nilearn.maskers.MultiNiftiMasker.rst", "modules/generated/nilearn.maskers.NiftiLabelsMasker.rst", "modules/generated/nilearn.maskers.NiftiMapsMasker.rst", "modules/generated/nilearn.maskers.NiftiMasker.rst", "modules/generated/nilearn.maskers.NiftiSpheresMasker.rst", "modules/generated/nilearn.maskers.SurfaceLabelsMasker.rst", "modules/generated/nilearn.maskers.SurfaceMapsMasker.rst", "modules/generated/nilearn.maskers.SurfaceMasker.rst", "modules/generated/nilearn.masking.apply_mask.rst", "modules/generated/nilearn.masking.compute_background_mask.rst", "modules/generated/nilearn.masking.compute_brain_mask.rst", "modules/generated/nilearn.masking.compute_epi_mask.rst", "modules/generated/nilearn.masking.compute_multi_background_mask.rst", "modules/generated/nilearn.masking.compute_multi_brain_mask.rst", "modules/generated/nilearn.masking.compute_multi_epi_mask.rst", "modules/generated/nilearn.masking.intersect_masks.rst", "modules/generated/nilearn.masking.unmask.rst", "modules/generated/nilearn.mass_univariate.permuted_ols.rst", "modules/generated/nilearn.plotting.displays.BaseAxes.rst", "modules/generated/nilearn.plotting.displays.BaseSlicer.rst", "modules/generated/nilearn.plotting.displays.CutAxes.rst", "modules/generated/nilearn.plotting.displays.GlassBrainAxes.rst", "modules/generated/nilearn.plotting.displays.LProjector.rst", "modules/generated/nilearn.plotting.displays.LRProjector.rst", "modules/generated/nilearn.plotting.displays.LYRProjector.rst", "modules/generated/nilearn.plotting.displays.LYRZProjector.rst", "modules/generated/nilearn.plotting.displays.LZRProjector.rst", "modules/generated/nilearn.plotting.displays.LZRYProjector.rst", "modules/generated/nilearn.plotting.displays.MosaicSlicer.rst", "modules/generated/nilearn.plotting.displays.OrthoProjector.rst", "modules/generated/nilearn.plotting.displays.OrthoSlicer.rst", "modules/generated/nilearn.plotting.displays.PlotlySurfaceFigure.rst", "modules/generated/nilearn.plotting.displays.RProjector.rst", "modules/generated/nilearn.plotting.displays.TiledSlicer.rst", "modules/generated/nilearn.plotting.displays.XProjector.rst", "modules/generated/nilearn.plotting.displays.XSlicer.rst", "modules/generated/nilearn.plotting.displays.XZProjector.rst", "modules/generated/nilearn.plotting.displays.XZSlicer.rst", "modules/generated/nilearn.plotting.displays.YProjector.rst", "modules/generated/nilearn.plotting.displays.YSlicer.rst", "modules/generated/nilearn.plotting.displays.YXProjector.rst", "modules/generated/nilearn.plotting.displays.YXSlicer.rst", "modules/generated/nilearn.plotting.displays.YZProjector.rst", "modules/generated/nilearn.plotting.displays.YZSlicer.rst", "modules/generated/nilearn.plotting.displays.ZProjector.rst", "modules/generated/nilearn.plotting.displays.ZSlicer.rst", "modules/generated/nilearn.plotting.displays.get_projector.rst", "modules/generated/nilearn.plotting.displays.get_slicer.rst", "modules/generated/nilearn.plotting.find_cut_slices.rst", "modules/generated/nilearn.plotting.find_parcellation_cut_coords.rst", "modules/generated/nilearn.plotting.find_probabilistic_atlas_cut_coords.rst", "modules/generated/nilearn.plotting.find_xyz_cut_coords.rst", "modules/generated/nilearn.plotting.plot_anat.rst", "modules/generated/nilearn.plotting.plot_carpet.rst", "modules/generated/nilearn.plotting.plot_connectome.rst", "modules/generated/nilearn.plotting.plot_contrast_matrix.rst", "modules/generated/nilearn.plotting.plot_design_matrix.rst", "modules/generated/nilearn.plotting.plot_design_matrix_correlation.rst", "modules/generated/nilearn.plotting.plot_epi.rst", "modules/generated/nilearn.plotting.plot_event.rst", "modules/generated/nilearn.plotting.plot_glass_brain.rst", "modules/generated/nilearn.plotting.plot_img.rst", "modules/generated/nilearn.plotting.plot_img_comparison.rst", "modules/generated/nilearn.plotting.plot_img_on_surf.rst", "modules/generated/nilearn.plotting.plot_markers.rst", "modules/generated/nilearn.plotting.plot_matrix.rst", "modules/generated/nilearn.plotting.plot_prob_atlas.rst", "modules/generated/nilearn.plotting.plot_roi.rst", "modules/generated/nilearn.plotting.plot_stat_map.rst", "modules/generated/nilearn.plotting.plot_surf.rst", "modules/generated/nilearn.plotting.plot_surf_contours.rst", "modules/generated/nilearn.plotting.plot_surf_roi.rst", "modules/generated/nilearn.plotting.plot_surf_stat_map.rst", "modules/generated/nilearn.plotting.show.rst", "modules/generated/nilearn.plotting.view_connectome.rst", "modules/generated/nilearn.plotting.view_img.rst", "modules/generated/nilearn.plotting.view_img_on_surf.rst", "modules/generated/nilearn.plotting.view_markers.rst", "modules/generated/nilearn.plotting.view_surf.rst", "modules/generated/nilearn.regions.HierarchicalKMeans.rst", "modules/generated/nilearn.regions.Parcellations.rst", "modules/generated/nilearn.regions.ReNA.rst", "modules/generated/nilearn.regions.RegionExtractor.rst", "modules/generated/nilearn.regions.connected_label_regions.rst", "modules/generated/nilearn.regions.connected_regions.rst", "modules/generated/nilearn.regions.img_to_signals_labels.rst", "modules/generated/nilearn.regions.img_to_signals_maps.rst", "modules/generated/nilearn.regions.recursive_neighbor_agglomeration.rst", "modules/generated/nilearn.regions.signals_to_img_labels.rst", "modules/generated/nilearn.regions.signals_to_img_maps.rst", "modules/generated/nilearn.reporting.HTMLReport.rst", "modules/generated/nilearn.reporting.get_clusters_table.rst", "modules/generated/nilearn.reporting.make_glm_report.rst", "modules/generated/nilearn.signal.butterworth.rst", "modules/generated/nilearn.signal.clean.rst", "modules/generated/nilearn.signal.high_variance_confounds.rst", "modules/generated/nilearn.surface.FileMesh.rst", "modules/generated/nilearn.surface.InMemoryMesh.rst", "modules/generated/nilearn.surface.PolyData.rst", "modules/generated/nilearn.surface.PolyMesh.rst", "modules/generated/nilearn.surface.SurfaceImage.rst", "modules/generated/nilearn.surface.SurfaceMesh.rst", "modules/generated/nilearn.surface.load_surf_data.rst", "modules/generated/nilearn.surface.load_surf_mesh.rst", "modules/generated/nilearn.surface.vol_to_surf.rst", "modules/generated_reports/glm_reports_examples.rst", "modules/generated_reports/masker_reports_examples.rst", "modules/glm.rst", "modules/image.rst", "modules/index.rst", "modules/interfaces.rst", "modules/maskers.rst", "modules/masking.rst", "modules/mass_univariate.rst", "modules/plotting.rst", "modules/regions.rst", "modules/reporting.rst", "modules/signal.rst", "modules/surface.rst", "plotting/index.rst", "quickstart.md", "sg_execution_times.rst", "user_guide.rst"], "indexentries": {"__init__() (nilearn.connectome.connectivitymeasure method)": [[230, "nilearn.connectome.ConnectivityMeasure.__init__", false]], "__init__() (nilearn.connectome.groupsparsecovariance method)": [[231, "nilearn.connectome.GroupSparseCovariance.__init__", false]], "__init__() (nilearn.connectome.groupsparsecovariancecv method)": [[232, "nilearn.connectome.GroupSparseCovarianceCV.__init__", false]], "__init__() (nilearn.decoding.decoder method)": [[296, "nilearn.decoding.Decoder.__init__", false]], "__init__() (nilearn.decoding.decoderregressor method)": [[297, "nilearn.decoding.DecoderRegressor.__init__", false]], "__init__() (nilearn.decoding.fremclassifier method)": [[298, "nilearn.decoding.FREMClassifier.__init__", false]], "__init__() (nilearn.decoding.fremregressor method)": [[299, "nilearn.decoding.FREMRegressor.__init__", false]], "__init__() (nilearn.decoding.searchlight method)": [[300, "nilearn.decoding.SearchLight.__init__", false]], "__init__() (nilearn.decoding.spacenetclassifier method)": [[301, "nilearn.decoding.SpaceNetClassifier.__init__", false]], "__init__() (nilearn.decoding.spacenetregressor method)": [[302, "nilearn.decoding.SpaceNetRegressor.__init__", false]], "__init__() (nilearn.decomposition.canica method)": [[303, "nilearn.decomposition.CanICA.__init__", false]], "__init__() (nilearn.decomposition.dictlearning method)": [[304, "nilearn.decomposition.DictLearning.__init__", false]], "__init__() (nilearn.glm.armodel method)": [[305, "nilearn.glm.ARModel.__init__", false]], "__init__() (nilearn.glm.contrast method)": [[306, "nilearn.glm.Contrast.__init__", false]], "__init__() (nilearn.glm.fcontrastresults method)": [[307, "nilearn.glm.FContrastResults.__init__", false]], "__init__() (nilearn.glm.first_level.firstlevelmodel method)": [[318, "nilearn.glm.first_level.FirstLevelModel.__init__", false]], "__init__() (nilearn.glm.likelihoodmodelresults method)": [[308, "nilearn.glm.LikelihoodModelResults.__init__", false]], "__init__() (nilearn.glm.olsmodel method)": [[309, "nilearn.glm.OLSModel.__init__", false]], "__init__() (nilearn.glm.regressionresults method)": [[310, "nilearn.glm.RegressionResults.__init__", false]], "__init__() (nilearn.glm.second_level.secondlevelmodel method)": [[331, "nilearn.glm.second_level.SecondLevelModel.__init__", false]], "__init__() (nilearn.glm.simpleregressionresults method)": [[311, "nilearn.glm.SimpleRegressionResults.__init__", false]], "__init__() (nilearn.glm.tcontrastresults method)": [[312, "nilearn.glm.TContrastResults.__init__", false]], "__init__() (nilearn.maskers.basemasker method)": [[362, "nilearn.maskers.BaseMasker.__init__", false]], "__init__() (nilearn.maskers.multiniftilabelsmasker method)": [[363, "nilearn.maskers.MultiNiftiLabelsMasker.__init__", false]], "__init__() (nilearn.maskers.multiniftimapsmasker method)": [[364, "nilearn.maskers.MultiNiftiMapsMasker.__init__", false]], "__init__() (nilearn.maskers.multiniftimasker method)": [[365, "nilearn.maskers.MultiNiftiMasker.__init__", false]], "__init__() (nilearn.maskers.niftilabelsmasker method)": [[366, "nilearn.maskers.NiftiLabelsMasker.__init__", false]], "__init__() (nilearn.maskers.niftimapsmasker method)": [[367, "nilearn.maskers.NiftiMapsMasker.__init__", false]], "__init__() (nilearn.maskers.niftimasker method)": [[368, "nilearn.maskers.NiftiMasker.__init__", false]], "__init__() (nilearn.maskers.niftispheresmasker method)": [[369, "nilearn.maskers.NiftiSpheresMasker.__init__", false]], "__init__() (nilearn.maskers.surfacelabelsmasker method)": [[370, "nilearn.maskers.SurfaceLabelsMasker.__init__", false]], "__init__() (nilearn.maskers.surfacemapsmasker method)": [[371, "nilearn.maskers.SurfaceMapsMasker.__init__", false]], "__init__() (nilearn.maskers.surfacemasker method)": [[372, "nilearn.maskers.SurfaceMasker.__init__", false]], "__init__() (nilearn.plotting.displays.baseaxes method)": [[383, "nilearn.plotting.displays.BaseAxes.__init__", false]], "__init__() (nilearn.plotting.displays.baseslicer method)": [[384, "nilearn.plotting.displays.BaseSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.cutaxes method)": [[385, "nilearn.plotting.displays.CutAxes.__init__", false]], "__init__() (nilearn.plotting.displays.glassbrainaxes method)": [[386, "nilearn.plotting.displays.GlassBrainAxes.__init__", false]], "__init__() (nilearn.plotting.displays.lprojector method)": [[387, "nilearn.plotting.displays.LProjector.__init__", false]], "__init__() (nilearn.plotting.displays.lrprojector method)": [[388, "nilearn.plotting.displays.LRProjector.__init__", false]], "__init__() (nilearn.plotting.displays.lyrprojector method)": [[389, "nilearn.plotting.displays.LYRProjector.__init__", false]], "__init__() (nilearn.plotting.displays.lyrzprojector method)": [[390, "nilearn.plotting.displays.LYRZProjector.__init__", false]], "__init__() (nilearn.plotting.displays.lzrprojector method)": [[391, "nilearn.plotting.displays.LZRProjector.__init__", false]], "__init__() (nilearn.plotting.displays.lzryprojector method)": [[392, "nilearn.plotting.displays.LZRYProjector.__init__", false]], "__init__() (nilearn.plotting.displays.mosaicslicer method)": [[393, "nilearn.plotting.displays.MosaicSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.orthoprojector method)": [[394, "nilearn.plotting.displays.OrthoProjector.__init__", false]], "__init__() (nilearn.plotting.displays.orthoslicer method)": [[395, "nilearn.plotting.displays.OrthoSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.plotlysurfacefigure method)": [[396, "nilearn.plotting.displays.PlotlySurfaceFigure.__init__", false]], "__init__() (nilearn.plotting.displays.rprojector method)": [[397, "nilearn.plotting.displays.RProjector.__init__", false]], "__init__() (nilearn.plotting.displays.tiledslicer method)": [[398, "nilearn.plotting.displays.TiledSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.xprojector method)": [[399, "nilearn.plotting.displays.XProjector.__init__", false]], "__init__() (nilearn.plotting.displays.xslicer method)": [[400, "nilearn.plotting.displays.XSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.xzprojector method)": [[401, "nilearn.plotting.displays.XZProjector.__init__", false]], "__init__() (nilearn.plotting.displays.xzslicer method)": [[402, "nilearn.plotting.displays.XZSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.yprojector method)": [[403, "nilearn.plotting.displays.YProjector.__init__", false]], "__init__() (nilearn.plotting.displays.yslicer method)": [[404, "nilearn.plotting.displays.YSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.yxprojector method)": [[405, "nilearn.plotting.displays.YXProjector.__init__", false]], "__init__() (nilearn.plotting.displays.yxslicer method)": [[406, "nilearn.plotting.displays.YXSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.yzprojector method)": [[407, "nilearn.plotting.displays.YZProjector.__init__", false]], "__init__() (nilearn.plotting.displays.yzslicer method)": [[408, "nilearn.plotting.displays.YZSlicer.__init__", false]], "__init__() (nilearn.plotting.displays.zprojector method)": [[409, "nilearn.plotting.displays.ZProjector.__init__", false]], "__init__() (nilearn.plotting.displays.zslicer method)": [[410, "nilearn.plotting.displays.ZSlicer.__init__", false]], "__init__() (nilearn.regions.hierarchicalkmeans method)": [[444, "nilearn.regions.HierarchicalKMeans.__init__", false]], "__init__() (nilearn.regions.parcellations method)": [[445, "nilearn.regions.Parcellations.__init__", false]], "__init__() (nilearn.regions.regionextractor method)": [[447, "nilearn.regions.RegionExtractor.__init__", false]], "__init__() (nilearn.regions.rena method)": [[446, "nilearn.regions.ReNA.__init__", false]], "__init__() (nilearn.reporting.htmlreport method)": [[455, "nilearn.reporting.HTMLReport.__init__", false]], "__init__() (nilearn.surface.filemesh method)": [[461, "nilearn.surface.FileMesh.__init__", false]], "__init__() (nilearn.surface.inmemorymesh method)": [[462, "nilearn.surface.InMemoryMesh.__init__", false]], "__init__() (nilearn.surface.polydata method)": [[463, "nilearn.surface.PolyData.__init__", false]], "__init__() (nilearn.surface.polymesh method)": [[464, "nilearn.surface.PolyMesh.__init__", false]], "__init__() (nilearn.surface.surfaceimage method)": [[465, "nilearn.surface.SurfaceImage.__init__", false]], "__init__() (nilearn.surface.surfacemesh method)": [[466, "nilearn.surface.SurfaceMesh.__init__", false]], "add_contours() (nilearn.plotting.displays.baseslicer method)": [[384, "nilearn.plotting.displays.BaseSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.lprojector method)": [[387, "nilearn.plotting.displays.LProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.lrprojector method)": [[388, "nilearn.plotting.displays.LRProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.lyrprojector method)": [[389, "nilearn.plotting.displays.LYRProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.lyrzprojector method)": [[390, "nilearn.plotting.displays.LYRZProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.lzrprojector method)": [[391, "nilearn.plotting.displays.LZRProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.lzryprojector method)": [[392, "nilearn.plotting.displays.LZRYProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.mosaicslicer method)": [[393, "nilearn.plotting.displays.MosaicSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.orthoprojector method)": [[394, "nilearn.plotting.displays.OrthoProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.orthoslicer method)": [[395, "nilearn.plotting.displays.OrthoSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.plotlysurfacefigure method)": [[396, "nilearn.plotting.displays.PlotlySurfaceFigure.add_contours", false]], "add_contours() (nilearn.plotting.displays.rprojector method)": [[397, "nilearn.plotting.displays.RProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.tiledslicer method)": [[398, "nilearn.plotting.displays.TiledSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.xprojector method)": [[399, "nilearn.plotting.displays.XProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.xslicer method)": [[400, "nilearn.plotting.displays.XSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.xzprojector method)": [[401, "nilearn.plotting.displays.XZProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.xzslicer method)": [[402, "nilearn.plotting.displays.XZSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.yprojector method)": [[403, "nilearn.plotting.displays.YProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.yslicer method)": [[404, "nilearn.plotting.displays.YSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.yxprojector method)": [[405, "nilearn.plotting.displays.YXProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.yxslicer method)": [[406, "nilearn.plotting.displays.YXSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.yzprojector method)": [[407, "nilearn.plotting.displays.YZProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.yzslicer method)": [[408, "nilearn.plotting.displays.YZSlicer.add_contours", false]], "add_contours() (nilearn.plotting.displays.zprojector method)": [[409, "nilearn.plotting.displays.ZProjector.add_contours", false]], "add_contours() (nilearn.plotting.displays.zslicer method)": [[410, "nilearn.plotting.displays.ZSlicer.add_contours", false]], "add_edges() (nilearn.plotting.displays.baseslicer method)": [[384, "nilearn.plotting.displays.BaseSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.lprojector method)": [[387, "nilearn.plotting.displays.LProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.lrprojector method)": [[388, "nilearn.plotting.displays.LRProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.lyrprojector method)": [[389, "nilearn.plotting.displays.LYRProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.lyrzprojector method)": [[390, "nilearn.plotting.displays.LYRZProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.lzrprojector method)": [[391, "nilearn.plotting.displays.LZRProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.lzryprojector method)": [[392, "nilearn.plotting.displays.LZRYProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.mosaicslicer method)": [[393, "nilearn.plotting.displays.MosaicSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.orthoprojector method)": [[394, "nilearn.plotting.displays.OrthoProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.orthoslicer method)": [[395, "nilearn.plotting.displays.OrthoSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.rprojector method)": [[397, "nilearn.plotting.displays.RProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.tiledslicer method)": [[398, "nilearn.plotting.displays.TiledSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.xprojector method)": [[399, "nilearn.plotting.displays.XProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.xslicer method)": [[400, "nilearn.plotting.displays.XSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.xzprojector method)": [[401, "nilearn.plotting.displays.XZProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.xzslicer method)": [[402, "nilearn.plotting.displays.XZSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.yprojector method)": [[403, "nilearn.plotting.displays.YProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.yslicer method)": [[404, "nilearn.plotting.displays.YSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.yxprojector method)": [[405, "nilearn.plotting.displays.YXProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.yxslicer method)": [[406, "nilearn.plotting.displays.YXSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.yzprojector method)": [[407, "nilearn.plotting.displays.YZProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.yzslicer method)": [[408, "nilearn.plotting.displays.YZSlicer.add_edges", false]], "add_edges() (nilearn.plotting.displays.zprojector method)": [[409, "nilearn.plotting.displays.ZProjector.add_edges", false]], "add_edges() (nilearn.plotting.displays.zslicer method)": [[410, "nilearn.plotting.displays.ZSlicer.add_edges", false]], "add_graph() (nilearn.plotting.displays.lprojector method)": [[387, "nilearn.plotting.displays.LProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.lrprojector method)": [[388, "nilearn.plotting.displays.LRProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.lyrprojector method)": [[389, "nilearn.plotting.displays.LYRProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.lyrzprojector method)": [[390, "nilearn.plotting.displays.LYRZProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.lzrprojector method)": [[391, "nilearn.plotting.displays.LZRProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.lzryprojector method)": [[392, "nilearn.plotting.displays.LZRYProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.orthoprojector method)": [[394, "nilearn.plotting.displays.OrthoProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.rprojector method)": [[397, "nilearn.plotting.displays.RProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.xprojector method)": [[399, "nilearn.plotting.displays.XProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.xzprojector method)": [[401, "nilearn.plotting.displays.XZProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.yprojector method)": [[403, "nilearn.plotting.displays.YProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.yxprojector method)": [[405, "nilearn.plotting.displays.YXProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.yzprojector method)": [[407, "nilearn.plotting.displays.YZProjector.add_graph", false]], "add_graph() (nilearn.plotting.displays.zprojector method)": [[409, "nilearn.plotting.displays.ZProjector.add_graph", false]], "add_markers() (nilearn.plotting.displays.baseslicer method)": [[384, "nilearn.plotting.displays.BaseSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.lprojector method)": [[387, "nilearn.plotting.displays.LProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.lrprojector method)": [[388, "nilearn.plotting.displays.LRProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.lyrprojector method)": [[389, "nilearn.plotting.displays.LYRProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.lyrzprojector method)": [[390, "nilearn.plotting.displays.LYRZProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.lzrprojector method)": [[391, "nilearn.plotting.displays.LZRProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.lzryprojector method)": [[392, "nilearn.plotting.displays.LZRYProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.mosaicslicer method)": [[393, "nilearn.plotting.displays.MosaicSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.orthoprojector method)": [[394, "nilearn.plotting.displays.OrthoProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.orthoslicer method)": [[395, "nilearn.plotting.displays.OrthoSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.rprojector method)": [[397, "nilearn.plotting.displays.RProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.tiledslicer method)": [[398, "nilearn.plotting.displays.TiledSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.xprojector method)": [[399, "nilearn.plotting.displays.XProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.xslicer method)": [[400, "nilearn.plotting.displays.XSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.xzprojector method)": [[401, "nilearn.plotting.displays.XZProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.xzslicer method)": [[402, "nilearn.plotting.displays.XZSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.yprojector method)": [[403, "nilearn.plotting.displays.YProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.yslicer method)": [[404, "nilearn.plotting.displays.YSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.yxprojector method)": [[405, "nilearn.plotting.displays.YXProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.yxslicer method)": [[406, "nilearn.plotting.displays.YXSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.yzprojector method)": [[407, "nilearn.plotting.displays.YZProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.yzslicer method)": [[408, "nilearn.plotting.displays.YZSlicer.add_markers", false]], "add_markers() (nilearn.plotting.displays.zprojector method)": [[409, "nilearn.plotting.displays.ZProjector.add_markers", false]], "add_markers() (nilearn.plotting.displays.zslicer method)": [[410, "nilearn.plotting.displays.ZSlicer.add_markers", false]], "add_object_bounds() (nilearn.plotting.displays.baseaxes method)": [[383, "nilearn.plotting.displays.BaseAxes.add_object_bounds", false]], "add_object_bounds() (nilearn.plotting.displays.cutaxes method)": [[385, "nilearn.plotting.displays.CutAxes.add_object_bounds", false]], "add_object_bounds() (nilearn.plotting.displays.glassbrainaxes method)": [[386, "nilearn.plotting.displays.GlassBrainAxes.add_object_bounds", false]], "add_overlay() (nilearn.plotting.displays.baseslicer method)": [[384, "nilearn.plotting.displays.BaseSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.lprojector method)": [[387, "nilearn.plotting.displays.LProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.lrprojector method)": [[388, "nilearn.plotting.displays.LRProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.lyrprojector method)": [[389, "nilearn.plotting.displays.LYRProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.lyrzprojector method)": [[390, "nilearn.plotting.displays.LYRZProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.lzrprojector method)": [[391, "nilearn.plotting.displays.LZRProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.lzryprojector method)": [[392, "nilearn.plotting.displays.LZRYProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.mosaicslicer method)": [[393, "nilearn.plotting.displays.MosaicSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.orthoprojector method)": [[394, "nilearn.plotting.displays.OrthoProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.orthoslicer method)": [[395, "nilearn.plotting.displays.OrthoSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.rprojector method)": [[397, "nilearn.plotting.displays.RProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.tiledslicer method)": [[398, "nilearn.plotting.displays.TiledSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.xprojector method)": [[399, "nilearn.plotting.displays.XProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.xslicer method)": [[400, "nilearn.plotting.displays.XSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.xzprojector method)": [[401, "nilearn.plotting.displays.XZProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.xzslicer method)": [[402, "nilearn.plotting.displays.XZSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.yprojector method)": [[403, "nilearn.plotting.displays.YProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.yslicer method)": [[404, "nilearn.plotting.displays.YSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.yxprojector method)": [[405, "nilearn.plotting.displays.YXProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.yxslicer method)": [[406, "nilearn.plotting.displays.YXSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.yzprojector method)": [[407, "nilearn.plotting.displays.YZProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.yzslicer method)": [[408, "nilearn.plotting.displays.YZSlicer.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.zprojector method)": [[409, "nilearn.plotting.displays.ZProjector.add_overlay", false]], "add_overlay() (nilearn.plotting.displays.zslicer method)": [[410, "nilearn.plotting.displays.ZSlicer.add_overlay", false]], "annotate() (nilearn.plotting.displays.baseslicer method)": [[384, "nilearn.plotting.displays.BaseSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.lprojector method)": [[387, "nilearn.plotting.displays.LProjector.annotate", false]], "annotate() (nilearn.plotting.displays.lrprojector method)": [[388, "nilearn.plotting.displays.LRProjector.annotate", false]], "annotate() (nilearn.plotting.displays.lyrprojector method)": [[389, "nilearn.plotting.displays.LYRProjector.annotate", false]], "annotate() (nilearn.plotting.displays.lyrzprojector method)": [[390, "nilearn.plotting.displays.LYRZProjector.annotate", false]], "annotate() (nilearn.plotting.displays.lzrprojector method)": [[391, "nilearn.plotting.displays.LZRProjector.annotate", false]], "annotate() (nilearn.plotting.displays.lzryprojector method)": [[392, "nilearn.plotting.displays.LZRYProjector.annotate", false]], "annotate() (nilearn.plotting.displays.mosaicslicer method)": [[393, "nilearn.plotting.displays.MosaicSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.orthoprojector method)": [[394, "nilearn.plotting.displays.OrthoProjector.annotate", false]], "annotate() (nilearn.plotting.displays.orthoslicer method)": [[395, "nilearn.plotting.displays.OrthoSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.rprojector method)": [[397, "nilearn.plotting.displays.RProjector.annotate", false]], "annotate() (nilearn.plotting.displays.tiledslicer method)": [[398, "nilearn.plotting.displays.TiledSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.xprojector method)": [[399, "nilearn.plotting.displays.XProjector.annotate", false]], "annotate() (nilearn.plotting.displays.xslicer method)": [[400, "nilearn.plotting.displays.XSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.xzprojector method)": [[401, "nilearn.plotting.displays.XZProjector.annotate", false]], "annotate() (nilearn.plotting.displays.xzslicer method)": [[402, "nilearn.plotting.displays.XZSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.yprojector method)": [[403, "nilearn.plotting.displays.YProjector.annotate", false]], "annotate() (nilearn.plotting.displays.yslicer method)": [[404, "nilearn.plotting.displays.YSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.yxprojector method)": [[405, "nilearn.plotting.displays.YXProjector.annotate", false]], "annotate() (nilearn.plotting.displays.yxslicer method)": [[406, "nilearn.plotting.displays.YXSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.yzprojector method)": [[407, "nilearn.plotting.displays.YZProjector.annotate", false]], "annotate() (nilearn.plotting.displays.yzslicer method)": [[408, "nilearn.plotting.displays.YZSlicer.annotate", false]], "annotate() (nilearn.plotting.displays.zprojector method)": [[409, "nilearn.plotting.displays.ZProjector.annotate", false]], "annotate() (nilearn.plotting.displays.zslicer method)": [[410, "nilearn.plotting.displays.ZSlicer.annotate", false]], "anova": [[178, "term-ANOVA", true]], "apply_mask() (in module nilearn.masking)": [[373, "nilearn.masking.apply_mask", false]], "armodel (class in nilearn.glm)": [[305, "nilearn.glm.ARModel", false]], "auc": [[178, "term-AUC", true]], "baseaxes (class in nilearn.plotting.displays)": [[383, "nilearn.plotting.displays.BaseAxes", false]], "basemasker (class in nilearn.maskers)": [[362, "nilearn.maskers.BaseMasker", false]], "baseslicer (class in nilearn.plotting.displays)": [[384, "nilearn.plotting.displays.BaseSlicer", false]], "beta": [[178, "term-Beta", true]], "bids": [[178, "term-BIDS", true]], "binarize_img() (in module nilearn.image)": [[335, "nilearn.image.binarize_img", false]], "black_bg (nilearn.plotting.displays.baseslicer property)": [[384, "nilearn.plotting.displays.BaseSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.lprojector property)": [[387, "nilearn.plotting.displays.LProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.lrprojector property)": [[388, "nilearn.plotting.displays.LRProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.lyrprojector property)": [[389, "nilearn.plotting.displays.LYRProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.lyrzprojector property)": [[390, "nilearn.plotting.displays.LYRZProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.lzrprojector property)": [[391, "nilearn.plotting.displays.LZRProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.lzryprojector property)": [[392, "nilearn.plotting.displays.LZRYProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.mosaicslicer property)": [[393, "nilearn.plotting.displays.MosaicSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.orthoprojector property)": [[394, "nilearn.plotting.displays.OrthoProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.orthoslicer property)": [[395, "nilearn.plotting.displays.OrthoSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.rprojector property)": [[397, "nilearn.plotting.displays.RProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.tiledslicer property)": [[398, "nilearn.plotting.displays.TiledSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.xprojector property)": [[399, "nilearn.plotting.displays.XProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.xslicer property)": [[400, "nilearn.plotting.displays.XSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.xzprojector property)": [[401, "nilearn.plotting.displays.XZProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.xzslicer property)": [[402, "nilearn.plotting.displays.XZSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.yprojector property)": [[403, "nilearn.plotting.displays.YProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.yslicer property)": [[404, "nilearn.plotting.displays.YSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.yxprojector property)": [[405, "nilearn.plotting.displays.YXProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.yxslicer property)": [[406, "nilearn.plotting.displays.YXSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.yzprojector property)": [[407, "nilearn.plotting.displays.YZProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.yzslicer property)": [[408, "nilearn.plotting.displays.YZSlicer.black_bg", false]], "black_bg (nilearn.plotting.displays.zprojector property)": [[409, "nilearn.plotting.displays.ZProjector.black_bg", false]], "black_bg (nilearn.plotting.displays.zslicer property)": [[410, "nilearn.plotting.displays.ZSlicer.black_bg", false]], "bold": [[178, "term-BOLD", true]], "brain_color (nilearn.plotting.displays.baseslicer property)": [[384, "nilearn.plotting.displays.BaseSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.lprojector property)": [[387, "nilearn.plotting.displays.LProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.lrprojector property)": [[388, "nilearn.plotting.displays.LRProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.lyrprojector property)": [[389, "nilearn.plotting.displays.LYRProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.lyrzprojector property)": [[390, "nilearn.plotting.displays.LYRZProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.lzrprojector property)": [[391, "nilearn.plotting.displays.LZRProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.lzryprojector property)": [[392, "nilearn.plotting.displays.LZRYProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.mosaicslicer property)": [[393, "nilearn.plotting.displays.MosaicSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.orthoprojector property)": [[394, "nilearn.plotting.displays.OrthoProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.orthoslicer property)": [[395, "nilearn.plotting.displays.OrthoSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.rprojector property)": [[397, "nilearn.plotting.displays.RProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.tiledslicer property)": [[398, "nilearn.plotting.displays.TiledSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.xprojector property)": [[399, "nilearn.plotting.displays.XProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.xslicer property)": [[400, "nilearn.plotting.displays.XSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.xzprojector property)": [[401, "nilearn.plotting.displays.XZProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.xzslicer property)": [[402, "nilearn.plotting.displays.XZSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.yprojector property)": [[403, "nilearn.plotting.displays.YProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.yslicer property)": [[404, "nilearn.plotting.displays.YSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.yxprojector property)": [[405, "nilearn.plotting.displays.YXProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.yxslicer property)": [[406, "nilearn.plotting.displays.YXSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.yzprojector property)": [[407, "nilearn.plotting.displays.YZProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.yzslicer property)": [[408, "nilearn.plotting.displays.YZSlicer.brain_color", false]], "brain_color (nilearn.plotting.displays.zprojector property)": [[409, "nilearn.plotting.displays.ZProjector.brain_color", false]], "brain_color (nilearn.plotting.displays.zslicer property)": [[410, "nilearn.plotting.displays.ZSlicer.brain_color", false]], "butterworth() (in module nilearn.signal)": [[458, "nilearn.signal.butterworth", false]], "canica": [[178, "term-CanICA", true]], "canica (class in nilearn.decomposition)": [[303, "nilearn.decomposition.CanICA", false]], "check_design_matrix() (in module nilearn.glm.first_level)": [[319, "nilearn.glm.first_level.check_design_matrix", false]], "check_params() (nilearn.decoding.spacenetclassifier method)": [[301, "nilearn.decoding.SpaceNetClassifier.check_params", false]], "check_params() (nilearn.decoding.spacenetregressor method)": [[302, "nilearn.decoding.SpaceNetRegressor.check_params", false]], "classification": [[178, "term-classification", true]], "clean() (in module nilearn.signal)": [[459, "nilearn.signal.clean", false]], "clean_img() (in module nilearn.image)": [[336, "nilearn.image.clean_img", false]], "close() (nilearn.plotting.displays.baseslicer method)": [[384, "nilearn.plotting.displays.BaseSlicer.close", false]], "close() (nilearn.plotting.displays.lprojector method)": [[387, "nilearn.plotting.displays.LProjector.close", false]], "close() (nilearn.plotting.displays.lrprojector method)": [[388, "nilearn.plotting.displays.LRProjector.close", false]], "close() (nilearn.plotting.displays.lyrprojector method)": [[389, "nilearn.plotting.displays.LYRProjector.close", false]], "close() (nilearn.plotting.displays.lyrzprojector method)": [[390, "nilearn.plotting.displays.LYRZProjector.close", false]], "close() (nilearn.plotting.displays.lzrprojector method)": [[391, "nilearn.plotting.displays.LZRProjector.close", false]], "close() (nilearn.plotting.displays.lzryprojector method)": [[392, "nilearn.plotting.displays.LZRYProjector.close", false]], "close() (nilearn.plotting.displays.mosaicslicer method)": [[393, "nilearn.plotting.displays.MosaicSlicer.close", false]], "close() (nilearn.plotting.displays.orthoprojector method)": [[394, "nilearn.plotting.displays.OrthoProjector.close", false]], "close() (nilearn.plotting.displays.orthoslicer method)": [[395, "nilearn.plotting.displays.OrthoSlicer.close", false]], "close() (nilearn.plotting.displays.rprojector method)": [[397, "nilearn.plotting.displays.RProjector.close", false]], "close() (nilearn.plotting.displays.tiledslicer method)": [[398, "nilearn.plotting.displays.TiledSlicer.close", false]], "close() (nilearn.plotting.displays.xprojector method)": [[399, "nilearn.plotting.displays.XProjector.close", false]], "close() (nilearn.plotting.displays.xslicer method)": [[400, "nilearn.plotting.displays.XSlicer.close", false]], "close() (nilearn.plotting.displays.xzprojector method)": [[401, "nilearn.plotting.displays.XZProjector.close", false]], "close() (nilearn.plotting.displays.xzslicer method)": [[402, "nilearn.plotting.displays.XZSlicer.close", false]], "close() (nilearn.plotting.displays.yprojector method)": [[403, "nilearn.plotting.displays.YProjector.close", false]], "close() (nilearn.plotting.displays.yslicer method)": [[404, "nilearn.plotting.displays.YSlicer.close", false]], "close() (nilearn.plotting.displays.yxprojector method)": [[405, "nilearn.plotting.displays.YXProjector.close", false]], "close() (nilearn.plotting.displays.yxslicer method)": [[406, "nilearn.plotting.displays.YXSlicer.close", false]], "close() (nilearn.plotting.displays.yzprojector method)": [[407, "nilearn.plotting.displays.YZProjector.close", false]], "close() (nilearn.plotting.displays.yzslicer method)": [[408, "nilearn.plotting.displays.YZSlicer.close", false]], "close() (nilearn.plotting.displays.zprojector method)": [[409, "nilearn.plotting.displays.ZProjector.close", false]], "close() (nilearn.plotting.displays.zslicer method)": [[410, "nilearn.plotting.displays.ZSlicer.close", false]], "closing": [[178, "term-Closing", true]], "cluster_level_inference() (in module nilearn.glm)": [[313, "nilearn.glm.cluster_level_inference", false]], "compute_background_mask() (in module nilearn.masking)": [[374, "nilearn.masking.compute_background_mask", false]], "compute_brain_mask() (in module nilearn.masking)": [[375, "nilearn.masking.compute_brain_mask", false]], "compute_contrast() (in module nilearn.glm)": [[314, "nilearn.glm.compute_contrast", false]], "compute_contrast() (nilearn.glm.first_level.firstlevelmodel method)": [[318, "nilearn.glm.first_level.FirstLevelModel.compute_contrast", false]], "compute_contrast() (nilearn.glm.second_level.secondlevelmodel method)": [[331, "nilearn.glm.second_level.SecondLevelModel.compute_contrast", false]], "compute_epi_mask() (in module nilearn.masking)": [[376, "nilearn.masking.compute_epi_mask", false]], "compute_fixed_effects() (in module nilearn.glm)": [[315, "nilearn.glm.compute_fixed_effects", false]], "compute_multi_background_mask() (in module nilearn.masking)": [[377, "nilearn.masking.compute_multi_background_mask", false]], "compute_multi_brain_mask() (in module nilearn.masking)": [[378, "nilearn.masking.compute_multi_brain_mask", false]], "compute_multi_epi_mask() (in module nilearn.masking)": [[379, "nilearn.masking.compute_multi_epi_mask", false]], "compute_regressor() (in module nilearn.glm.first_level)": [[320, "nilearn.glm.first_level.compute_regressor", false]], "concat_imgs() (in module nilearn.image)": [[337, "nilearn.image.concat_imgs", false]], "conf_int() (nilearn.glm.likelihoodmodelresults method)": [[308, "nilearn.glm.LikelihoodModelResults.conf_int", false]], "conf_int() (nilearn.glm.regressionresults method)": [[310, "nilearn.glm.RegressionResults.conf_int", false]], "conf_int() (nilearn.glm.simpleregressionresults method)": [[311, "nilearn.glm.SimpleRegressionResults.conf_int", false]], "connected_label_regions() (in module nilearn.regions)": [[448, "nilearn.regions.connected_label_regions", false]], "connected_regions() (in module nilearn.regions)": [[449, "nilearn.regions.connected_regions", false]], "connectivitymeasure (class in nilearn.connectome)": [[230, "nilearn.connectome.ConnectivityMeasure", false]], "contrast": [[178, "term-contrast", true]], "contrast (class in nilearn.glm)": [[306, "nilearn.glm.Contrast", false]], "contrast_type (nilearn.glm.contrast property)": [[306, "nilearn.glm.Contrast.contrast_type", false]], "coord_transform() (in module nilearn.image)": [[338, "nilearn.image.coord_transform", false]], "coordinates (nilearn.surface.filemesh property)": [[461, "nilearn.surface.FileMesh.coordinates", false]], "coordinates (nilearn.surface.inmemorymesh attribute)": [[462, "nilearn.surface.InMemoryMesh.coordinates", false]], "coordinates (nilearn.surface.surfacemesh attribute)": [[466, "nilearn.surface.SurfaceMesh.coordinates", false]], "copy_img() (in module nilearn.image)": [[339, "nilearn.image.copy_img", false]], "cov_to_corr() (in module nilearn.connectome)": [[233, "nilearn.connectome.cov_to_corr", false]], "crop_img() (in module nilearn.image)": [[340, "nilearn.image.crop_img", false]], "cutaxes (class in nilearn.plotting.displays)": [[385, "nilearn.plotting.displays.CutAxes", false]], "decision_function() (nilearn.decoding.decoder method)": [[296, "nilearn.decoding.Decoder.decision_function", false]], "decision_function() (nilearn.decoding.decoderregressor method)": [[297, "nilearn.decoding.DecoderRegressor.decision_function", false]], "decision_function() (nilearn.decoding.fremclassifier method)": [[298, "nilearn.decoding.FREMClassifier.decision_function", false]], "decision_function() (nilearn.decoding.fremregressor method)": [[299, "nilearn.decoding.FREMRegressor.decision_function", false]], "decision_function() (nilearn.decoding.spacenetclassifier method)": [[301, "nilearn.decoding.SpaceNetClassifier.decision_function", false]], "decision_function() (nilearn.decoding.spacenetregressor method)": [[302, "nilearn.decoding.SpaceNetRegressor.decision_function", false]], "decoder (class in nilearn.decoding)": [[296, "nilearn.decoding.Decoder", false]], "decoderregressor (class in nilearn.decoding)": [[297, "nilearn.decoding.DecoderRegressor", false]], "decoding": [[178, "term-Decoding", true]], "deterministic atlas": [[178, "term-Deterministic-atlas", true]], "dictionary learning": [[178, "term-Dictionary-learning", true]], "dictlearning (class in nilearn.decomposition)": [[304, "nilearn.decomposition.DictLearning", false]], "dilation": [[178, "term-Dilation", true]], "draw_2d() (nilearn.plotting.displays.baseaxes method)": [[383, "nilearn.plotting.displays.BaseAxes.draw_2d", false]], "draw_2d() (nilearn.plotting.displays.cutaxes method)": [[385, "nilearn.plotting.displays.CutAxes.draw_2d", false]], "draw_2d() (nilearn.plotting.displays.glassbrainaxes method)": [[386, "nilearn.plotting.displays.GlassBrainAxes.draw_2d", false]], "draw_cross() (nilearn.plotting.displays.lprojector method)": [[387, "nilearn.plotting.displays.LProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.lrprojector method)": [[388, "nilearn.plotting.displays.LRProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.lyrprojector method)": [[389, "nilearn.plotting.displays.LYRProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.lyrzprojector method)": [[390, "nilearn.plotting.displays.LYRZProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.lzrprojector method)": [[391, "nilearn.plotting.displays.LZRProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.lzryprojector method)": [[392, "nilearn.plotting.displays.LZRYProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.mosaicslicer method)": [[393, "nilearn.plotting.displays.MosaicSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.orthoprojector method)": [[394, "nilearn.plotting.displays.OrthoProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.orthoslicer method)": [[395, "nilearn.plotting.displays.OrthoSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.rprojector method)": [[397, "nilearn.plotting.displays.RProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.tiledslicer method)": [[398, "nilearn.plotting.displays.TiledSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.xprojector method)": [[399, "nilearn.plotting.displays.XProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.xslicer method)": [[400, "nilearn.plotting.displays.XSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.xzprojector method)": [[401, "nilearn.plotting.displays.XZProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.xzslicer method)": [[402, "nilearn.plotting.displays.XZSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.yprojector method)": [[403, "nilearn.plotting.displays.YProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.yslicer method)": [[404, "nilearn.plotting.displays.YSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.yxprojector method)": [[405, "nilearn.plotting.displays.YXProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.yxslicer method)": [[406, "nilearn.plotting.displays.YXSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.yzprojector method)": [[407, "nilearn.plotting.displays.YZProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.yzslicer method)": [[408, "nilearn.plotting.displays.YZSlicer.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.zprojector method)": [[409, "nilearn.plotting.displays.ZProjector.draw_cross", false]], "draw_cross() (nilearn.plotting.displays.zslicer method)": [[410, "nilearn.plotting.displays.ZSlicer.draw_cross", false]], "draw_left_right() (nilearn.plotting.displays.baseaxes method)": [[383, "nilearn.plotting.displays.BaseAxes.draw_left_right", false]], "draw_left_right() (nilearn.plotting.displays.cutaxes method)": [[385, "nilearn.plotting.displays.CutAxes.draw_left_right", false]], "draw_left_right() (nilearn.plotting.displays.glassbrainaxes method)": [[386, "nilearn.plotting.displays.GlassBrainAxes.draw_left_right", false]], "draw_position() (nilearn.plotting.displays.baseaxes method)": [[383, "nilearn.plotting.displays.BaseAxes.draw_position", false]], "draw_position() (nilearn.plotting.displays.cutaxes method)": [[385, "nilearn.plotting.displays.CutAxes.draw_position", false]], "draw_position() (nilearn.plotting.displays.glassbrainaxes method)": [[386, "nilearn.plotting.displays.GlassBrainAxes.draw_position", false]], "draw_scale_bar() (nilearn.plotting.displays.baseaxes method)": [[383, "nilearn.plotting.displays.BaseAxes.draw_scale_bar", false]], "draw_scale_bar() (nilearn.plotting.displays.cutaxes method)": [[385, "nilearn.plotting.displays.CutAxes.draw_scale_bar", false]], "draw_scale_bar() (nilearn.plotting.displays.glassbrainaxes method)": [[386, "nilearn.plotting.displays.GlassBrainAxes.draw_scale_bar", false]], "eeg": [[178, "term-EEG", true]], "effect_size() (nilearn.glm.contrast method)": [[306, "nilearn.glm.Contrast.effect_size", false]], "effect_variance() (nilearn.glm.contrast method)": [[306, "nilearn.glm.Contrast.effect_variance", false]], "epi": [[178, "term-EPI", true]], "erosion": [[178, "term-Erosion", true]], "expression_to_contrast_vector() (in module nilearn.glm)": [[316, "nilearn.glm.expression_to_contrast_vector", false]], "faces": [[178, "term-faces", true]], "faces (nilearn.surface.filemesh property)": [[461, "nilearn.surface.FileMesh.faces", false]], "faces (nilearn.surface.inmemorymesh attribute)": [[462, "nilearn.surface.InMemoryMesh.faces", false]], "faces (nilearn.surface.surfacemesh attribute)": [[466, "nilearn.surface.SurfaceMesh.faces", false]], "fcontrast() (nilearn.glm.likelihoodmodelresults method)": [[308, "nilearn.glm.LikelihoodModelResults.Fcontrast", false]], "fcontrast() (nilearn.glm.regressionresults method)": [[310, "nilearn.glm.RegressionResults.Fcontrast", false]], "fcontrast() (nilearn.glm.simpleregressionresults method)": [[311, "nilearn.glm.SimpleRegressionResults.Fcontrast", false]], "fcontrastresults (class in nilearn.glm)": [[307, "nilearn.glm.FContrastResults", false]], "fdr correction": [[178, "term-FDR-correction", true]], "fdr_threshold() (in module nilearn.glm)": [[317, "nilearn.glm.fdr_threshold", false]], "fetch_abide_pcp() (in module nilearn.datasets)": [[238, "nilearn.datasets.fetch_abide_pcp", false]], "fetch_adhd() (in module nilearn.datasets)": [[239, "nilearn.datasets.fetch_adhd", false]], "fetch_atlas_aal() (in module nilearn.datasets)": [[240, "nilearn.datasets.fetch_atlas_aal", false]], "fetch_atlas_allen_2011() (in module nilearn.datasets)": [[241, "nilearn.datasets.fetch_atlas_allen_2011", false]], "fetch_atlas_basc_multiscale_2015() (in module nilearn.datasets)": [[242, "nilearn.datasets.fetch_atlas_basc_multiscale_2015", false]], "fetch_atlas_craddock_2012() (in module nilearn.datasets)": [[243, "nilearn.datasets.fetch_atlas_craddock_2012", false]], "fetch_atlas_destrieux_2009() (in module nilearn.datasets)": [[244, "nilearn.datasets.fetch_atlas_destrieux_2009", false]], "fetch_atlas_difumo() (in module nilearn.datasets)": [[245, "nilearn.datasets.fetch_atlas_difumo", false]], "fetch_atlas_harvard_oxford() (in module nilearn.datasets)": [[246, "nilearn.datasets.fetch_atlas_harvard_oxford", false]], "fetch_atlas_juelich() (in module nilearn.datasets)": [[247, "nilearn.datasets.fetch_atlas_juelich", false]], "fetch_atlas_msdl() (in module nilearn.datasets)": [[248, "nilearn.datasets.fetch_atlas_msdl", false]], "fetch_atlas_pauli_2017() (in module nilearn.datasets)": [[249, "nilearn.datasets.fetch_atlas_pauli_2017", false]], "fetch_atlas_schaefer_2018() (in module nilearn.datasets)": [[250, "nilearn.datasets.fetch_atlas_schaefer_2018", false]], "fetch_atlas_smith_2009() (in module nilearn.datasets)": [[251, "nilearn.datasets.fetch_atlas_smith_2009", false]], "fetch_atlas_surf_destrieux() (in module nilearn.datasets)": [[252, "nilearn.datasets.fetch_atlas_surf_destrieux", false]], "fetch_atlas_talairach() (in module nilearn.datasets)": [[253, "nilearn.datasets.fetch_atlas_talairach", false]], "fetch_atlas_yeo_2011() (in module nilearn.datasets)": [[254, "nilearn.datasets.fetch_atlas_yeo_2011", false]], "fetch_bids_langloc_dataset() (in module nilearn.datasets)": [[255, "nilearn.datasets.fetch_bids_langloc_dataset", false]], "fetch_coords_dosenbach_2010() (in module nilearn.datasets)": [[256, "nilearn.datasets.fetch_coords_dosenbach_2010", false]], "fetch_coords_power_2011() (in module nilearn.datasets)": [[257, "nilearn.datasets.fetch_coords_power_2011", false]], "fetch_coords_seitzman_2018() (in module nilearn.datasets)": [[258, "nilearn.datasets.fetch_coords_seitzman_2018", false]], "fetch_development_fmri() (in module nilearn.datasets)": [[259, "nilearn.datasets.fetch_development_fmri", false]], "fetch_ds000030_urls() (in module nilearn.datasets)": [[260, "nilearn.datasets.fetch_ds000030_urls", false]], "fetch_fiac_first_level() (in module nilearn.datasets)": [[261, "nilearn.datasets.fetch_fiac_first_level", false]], "fetch_haxby() (in module nilearn.datasets)": [[262, "nilearn.datasets.fetch_haxby", false]], "fetch_icbm152_2009() (in module nilearn.datasets)": [[263, "nilearn.datasets.fetch_icbm152_2009", false]], "fetch_icbm152_brain_gm_mask() (in module nilearn.datasets)": [[264, "nilearn.datasets.fetch_icbm152_brain_gm_mask", false]], "fetch_language_localizer_demo_dataset() (in module nilearn.datasets)": [[265, "nilearn.datasets.fetch_language_localizer_demo_dataset", false]], "fetch_localizer_button_task() (in module nilearn.datasets)": [[266, "nilearn.datasets.fetch_localizer_button_task", false]], "fetch_localizer_calculation_task() (in module nilearn.datasets)": [[267, "nilearn.datasets.fetch_localizer_calculation_task", false]], "fetch_localizer_contrasts() (in module nilearn.datasets)": [[268, "nilearn.datasets.fetch_localizer_contrasts", false]], "fetch_localizer_first_level() (in module nilearn.datasets)": [[269, "nilearn.datasets.fetch_localizer_first_level", false]], "fetch_megatrawls_netmats() (in module nilearn.datasets)": [[270, "nilearn.datasets.fetch_megatrawls_netmats", false]], "fetch_mixed_gambles() (in module nilearn.datasets)": [[271, "nilearn.datasets.fetch_mixed_gambles", false]], "fetch_miyawaki2008() (in module nilearn.datasets)": [[272, "nilearn.datasets.fetch_miyawaki2008", false]], "fetch_neurovault() (in module nilearn.datasets)": [[273, "nilearn.datasets.fetch_neurovault", false]], "fetch_neurovault_auditory_computation_task() (in module nilearn.datasets)": [[274, "nilearn.datasets.fetch_neurovault_auditory_computation_task", false]], "fetch_neurovault_ids() (in module nilearn.datasets)": [[275, "nilearn.datasets.fetch_neurovault_ids", false]], "fetch_neurovault_motor_task() (in module nilearn.datasets)": [[276, "nilearn.datasets.fetch_neurovault_motor_task", false]], "fetch_oasis_vbm() (in module nilearn.datasets)": [[277, "nilearn.datasets.fetch_oasis_vbm", false]], "fetch_openneuro_dataset() (in module nilearn.datasets)": [[278, "nilearn.datasets.fetch_openneuro_dataset", false]], "fetch_spm_auditory() (in module nilearn.datasets)": [[279, "nilearn.datasets.fetch_spm_auditory", false]], "fetch_spm_multimodal_fmri() (in module nilearn.datasets)": [[280, "nilearn.datasets.fetch_spm_multimodal_fmri", false]], "fetch_surf_fsaverage() (in module nilearn.datasets)": [[281, "nilearn.datasets.fetch_surf_fsaverage", false]], "fetch_surf_nki_enhanced() (in module nilearn.datasets)": [[282, "nilearn.datasets.fetch_surf_nki_enhanced", false]], "file_path (nilearn.surface.filemesh attribute)": [[461, "nilearn.surface.FileMesh.file_path", false]], "filemesh (class in nilearn.surface)": [[461, "nilearn.surface.FileMesh", false]], "find_cut_coords() (nilearn.plotting.displays.baseslicer static method)": [[384, "nilearn.plotting.displays.BaseSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.lprojector class method)": [[387, "nilearn.plotting.displays.LProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.lrprojector class method)": [[388, "nilearn.plotting.displays.LRProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.lyrprojector class method)": [[389, "nilearn.plotting.displays.LYRProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.lyrzprojector class method)": [[390, "nilearn.plotting.displays.LYRZProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.lzrprojector class method)": [[391, "nilearn.plotting.displays.LZRProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.lzryprojector class method)": [[392, "nilearn.plotting.displays.LZRYProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.mosaicslicer class method)": [[393, "nilearn.plotting.displays.MosaicSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.orthoprojector class method)": [[394, "nilearn.plotting.displays.OrthoProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.orthoslicer class method)": [[395, "nilearn.plotting.displays.OrthoSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.rprojector class method)": [[397, "nilearn.plotting.displays.RProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.tiledslicer class method)": [[398, "nilearn.plotting.displays.TiledSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.xprojector class method)": [[399, "nilearn.plotting.displays.XProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.xslicer class method)": [[400, "nilearn.plotting.displays.XSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.xzprojector class method)": [[401, "nilearn.plotting.displays.XZProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.xzslicer class method)": [[402, "nilearn.plotting.displays.XZSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.yprojector class method)": [[403, "nilearn.plotting.displays.YProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.yslicer class method)": [[404, "nilearn.plotting.displays.YSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.yxprojector class method)": [[405, "nilearn.plotting.displays.YXProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.yxslicer class method)": [[406, "nilearn.plotting.displays.YXSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.yzprojector class method)": [[407, "nilearn.plotting.displays.YZProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.yzslicer class method)": [[408, "nilearn.plotting.displays.YZSlicer.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.zprojector class method)": [[409, "nilearn.plotting.displays.ZProjector.find_cut_coords", false]], "find_cut_coords() (nilearn.plotting.displays.zslicer class method)": [[410, "nilearn.plotting.displays.ZSlicer.find_cut_coords", false]], "find_cut_slices() (in module nilearn.plotting)": [[413, "nilearn.plotting.find_cut_slices", false]], "find_parcellation_cut_coords() (in module nilearn.plotting)": [[414, "nilearn.plotting.find_parcellation_cut_coords", false]], "find_probabilistic_atlas_cut_coords() (in module nilearn.plotting)": [[415, "nilearn.plotting.find_probabilistic_atlas_cut_coords", false]], "find_xyz_cut_coords() (in module nilearn.plotting)": [[416, "nilearn.plotting.find_xyz_cut_coords", false]], "fir": [[178, "term-FIR", true]], "first_level_from_bids() (in module nilearn.glm.first_level)": [[321, "nilearn.glm.first_level.first_level_from_bids", false]], "firstlevelmodel (class in nilearn.glm.first_level)": [[318, "nilearn.glm.first_level.FirstLevelModel", false]], "fit() (nilearn.connectome.connectivitymeasure method)": [[230, "nilearn.connectome.ConnectivityMeasure.fit", false]], "fit() (nilearn.connectome.groupsparsecovariance method)": [[231, "nilearn.connectome.GroupSparseCovariance.fit", false]], "fit() (nilearn.connectome.groupsparsecovariancecv method)": [[232, "nilearn.connectome.GroupSparseCovarianceCV.fit", false]], "fit() (nilearn.decoding.decoder method)": [[296, "nilearn.decoding.Decoder.fit", false]], "fit() (nilearn.decoding.decoderregressor method)": [[297, "nilearn.decoding.DecoderRegressor.fit", false]], "fit() (nilearn.decoding.fremclassifier method)": [[298, "nilearn.decoding.FREMClassifier.fit", false]], "fit() (nilearn.decoding.fremregressor method)": [[299, "nilearn.decoding.FREMRegressor.fit", false]], "fit() (nilearn.decoding.searchlight method)": [[300, "nilearn.decoding.SearchLight.fit", false]], "fit() (nilearn.decoding.spacenetclassifier method)": [[301, "nilearn.decoding.SpaceNetClassifier.fit", false]], "fit() (nilearn.decoding.spacenetregressor method)": [[302, "nilearn.decoding.SpaceNetRegressor.fit", false]], "fit() (nilearn.decomposition.canica method)": [[303, "nilearn.decomposition.CanICA.fit", false]], "fit() (nilearn.decomposition.dictlearning method)": [[304, "nilearn.decomposition.DictLearning.fit", false]], "fit() (nilearn.glm.armodel method)": [[305, "nilearn.glm.ARModel.fit", false]], "fit() (nilearn.glm.first_level.firstlevelmodel method)": [[318, "nilearn.glm.first_level.FirstLevelModel.fit", false]], "fit() (nilearn.glm.olsmodel method)": [[309, "nilearn.glm.OLSModel.fit", false]], "fit() (nilearn.glm.second_level.secondlevelmodel method)": [[331, "nilearn.glm.second_level.SecondLevelModel.fit", false]], "fit() (nilearn.maskers.basemasker method)": [[362, "nilearn.maskers.BaseMasker.fit", false]], "fit() (nilearn.maskers.multiniftilabelsmasker method)": [[363, "nilearn.maskers.MultiNiftiLabelsMasker.fit", false]], "fit() (nilearn.maskers.multiniftimapsmasker method)": [[364, "nilearn.maskers.MultiNiftiMapsMasker.fit", false]], "fit() (nilearn.maskers.multiniftimasker method)": [[365, "nilearn.maskers.MultiNiftiMasker.fit", false]], "fit() (nilearn.maskers.niftilabelsmasker method)": [[366, "nilearn.maskers.NiftiLabelsMasker.fit", false]], "fit() (nilearn.maskers.niftimapsmasker method)": [[367, "nilearn.maskers.NiftiMapsMasker.fit", false]], "fit() (nilearn.maskers.niftimasker method)": [[368, "nilearn.maskers.NiftiMasker.fit", false]], "fit() (nilearn.maskers.niftispheresmasker method)": [[369, "nilearn.maskers.NiftiSpheresMasker.fit", false]], "fit() (nilearn.maskers.surfacelabelsmasker method)": [[370, "nilearn.maskers.SurfaceLabelsMasker.fit", false]], "fit() (nilearn.maskers.surfacemapsmasker method)": [[371, "nilearn.maskers.SurfaceMapsMasker.fit", false]], "fit() (nilearn.maskers.surfacemasker method)": [[372, "nilearn.maskers.SurfaceMasker.fit", false]], "fit() (nilearn.regions.hierarchicalkmeans method)": [[444, "nilearn.regions.HierarchicalKMeans.fit", false]], "fit() (nilearn.regions.parcellations method)": [[445, "nilearn.regions.Parcellations.fit", false]], "fit() (nilearn.regions.regionextractor method)": [[447, "nilearn.regions.RegionExtractor.fit", false]], "fit() (nilearn.regions.rena method)": [[446, "nilearn.regions.ReNA.fit", false]], "fit_predict() (nilearn.regions.hierarchicalkmeans method)": [[444, "nilearn.regions.HierarchicalKMeans.fit_predict", false]], "fit_predict() (nilearn.regions.rena method)": [[446, "nilearn.regions.ReNA.fit_predict", false]], "fit_transform() (nilearn.connectome.connectivitymeasure method)": [[230, "nilearn.connectome.ConnectivityMeasure.fit_transform", false]], "fit_transform() (nilearn.decoding.searchlight method)": [[300, "nilearn.decoding.SearchLight.fit_transform", false]], "fit_transform() (nilearn.decomposition.canica method)": [[303, "nilearn.decomposition.CanICA.fit_transform", false]], "fit_transform() (nilearn.decomposition.dictlearning method)": [[304, "nilearn.decomposition.DictLearning.fit_transform", false]], "fit_transform() (nilearn.glm.first_level.firstlevelmodel method)": [[318, "nilearn.glm.first_level.FirstLevelModel.fit_transform", false]], "fit_transform() (nilearn.glm.second_level.secondlevelmodel method)": [[331, "nilearn.glm.second_level.SecondLevelModel.fit_transform", false]], "fit_transform() (nilearn.maskers.basemasker method)": [[362, "nilearn.maskers.BaseMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.multiniftilabelsmasker method)": [[363, "nilearn.maskers.MultiNiftiLabelsMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.multiniftimapsmasker method)": [[364, "nilearn.maskers.MultiNiftiMapsMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.multiniftimasker method)": [[365, "nilearn.maskers.MultiNiftiMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.niftilabelsmasker method)": [[366, "nilearn.maskers.NiftiLabelsMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.niftimapsmasker method)": [[367, "nilearn.maskers.NiftiMapsMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.niftimasker method)": [[368, "nilearn.maskers.NiftiMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.niftispheresmasker method)": [[369, "nilearn.maskers.NiftiSpheresMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.surfacelabelsmasker method)": [[370, "nilearn.maskers.SurfaceLabelsMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.surfacemapsmasker method)": [[371, "nilearn.maskers.SurfaceMapsMasker.fit_transform", false]], "fit_transform() (nilearn.maskers.surfacemasker method)": [[372, "nilearn.maskers.SurfaceMasker.fit_transform", false]], "fit_transform() (nilearn.regions.hierarchicalkmeans method)": [[444, "nilearn.regions.HierarchicalKMeans.fit_transform", false]], "fit_transform() (nilearn.regions.parcellations method)": [[445, "nilearn.regions.Parcellations.fit_transform", false]], "fit_transform() (nilearn.regions.regionextractor method)": [[447, "nilearn.regions.RegionExtractor.fit_transform", false]], "fit_transform() (nilearn.regions.rena method)": [[446, "nilearn.regions.ReNA.fit_transform", false]], "fmri": [[178, "term-fMRI", true]], "fmriprep": [[178, "term-fMRIPrep", true]], "fpr correction": [[178, "term-FPR-correction", true]], "frem": [[178, "term-FREM", true]], "fremclassifier (class in nilearn.decoding)": [[298, "nilearn.decoding.FREMClassifier", false]], "fremregressor (class in nilearn.decoding)": [[299, "nilearn.decoding.FREMRegressor", false]], "from_volume() (nilearn.surface.surfaceimage class method)": [[465, "nilearn.surface.SurfaceImage.from_volume", false]], "functional connectivity": [[178, "term-functional-connectivity", true]], "functional connectome": [[178, "term-functional-connectome", true]], "fwer correction": [[178, "term-FWER-correction", true]], "fwhm": [[178, "term-FWHM", true]], "generate_report() (nilearn.glm.first_level.firstlevelmodel method)": [[318, "nilearn.glm.first_level.FirstLevelModel.generate_report", false]], "generate_report() (nilearn.glm.second_level.secondlevelmodel method)": [[331, "nilearn.glm.second_level.SecondLevelModel.generate_report", false]], "generate_report() (nilearn.maskers.multiniftilabelsmasker method)": [[363, "nilearn.maskers.MultiNiftiLabelsMasker.generate_report", false]], "generate_report() (nilearn.maskers.multiniftimapsmasker method)": [[364, "nilearn.maskers.MultiNiftiMapsMasker.generate_report", false]], "generate_report() (nilearn.maskers.multiniftimasker method)": [[365, "nilearn.maskers.MultiNiftiMasker.generate_report", false]], "generate_report() (nilearn.maskers.niftilabelsmasker method)": [[366, "nilearn.maskers.NiftiLabelsMasker.generate_report", false]], "generate_report() (nilearn.maskers.niftimapsmasker method)": [[367, "nilearn.maskers.NiftiMapsMasker.generate_report", false]], "generate_report() (nilearn.maskers.niftimasker method)": [[368, "nilearn.maskers.NiftiMasker.generate_report", false]], "generate_report() (nilearn.maskers.niftispheresmasker method)": [[369, "nilearn.maskers.NiftiSpheresMasker.generate_report", false]], "generate_report() (nilearn.maskers.surfacelabelsmasker method)": [[370, "nilearn.maskers.SurfaceLabelsMasker.generate_report", false]], "generate_report() (nilearn.maskers.surfacemasker method)": [[372, "nilearn.maskers.SurfaceMasker.generate_report", false]], "generate_report() (nilearn.regions.regionextractor method)": [[447, "nilearn.regions.RegionExtractor.generate_report", false]], "get_bids_files() (in module nilearn.interfaces.bids)": [[356, "nilearn.interfaces.bids.get_bids_files", false]], "get_clusters_table() (in module nilearn.reporting)": [[456, "nilearn.reporting.get_clusters_table", false]], "get_data() (in module nilearn.image)": [[341, "nilearn.image.get_data", false]], "get_data_dirs() (in module nilearn.datasets)": [[283, "nilearn.datasets.get_data_dirs", false]], "get_design_from_fslmat() (in module nilearn.interfaces.fsl)": [[361, "nilearn.interfaces.fsl.get_design_from_fslmat", false]], "get_iframe() (nilearn.reporting.htmlreport method)": [[455, "nilearn.reporting.HTMLReport.get_iframe", false]], "get_metadata_routing() (nilearn.connectome.connectivitymeasure method)": [[230, "nilearn.connectome.ConnectivityMeasure.get_metadata_routing", false]], "get_metadata_routing() (nilearn.connectome.groupsparsecovariance method)": [[231, "nilearn.connectome.GroupSparseCovariance.get_metadata_routing", false]], "get_metadata_routing() (nilearn.connectome.groupsparsecovariancecv method)": [[232, "nilearn.connectome.GroupSparseCovarianceCV.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.decoder method)": [[296, "nilearn.decoding.Decoder.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.decoderregressor method)": [[297, "nilearn.decoding.DecoderRegressor.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.fremclassifier method)": [[298, "nilearn.decoding.FREMClassifier.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.fremregressor method)": [[299, "nilearn.decoding.FREMRegressor.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.searchlight method)": [[300, "nilearn.decoding.SearchLight.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.spacenetclassifier method)": [[301, "nilearn.decoding.SpaceNetClassifier.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decoding.spacenetregressor method)": [[302, "nilearn.decoding.SpaceNetRegressor.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decomposition.canica method)": [[303, "nilearn.decomposition.CanICA.get_metadata_routing", false]], "get_metadata_routing() (nilearn.decomposition.dictlearning method)": [[304, "nilearn.decomposition.DictLearning.get_metadata_routing", false]], "get_metadata_routing() (nilearn.glm.first_level.firstlevelmodel method)": [[318, "nilearn.glm.first_level.FirstLevelModel.get_metadata_routing", false]], "get_metadata_routing() (nilearn.glm.second_level.secondlevelmodel method)": [[331, "nilearn.glm.second_level.SecondLevelModel.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.basemasker method)": [[362, "nilearn.maskers.BaseMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.multiniftilabelsmasker method)": [[363, "nilearn.maskers.MultiNiftiLabelsMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.multiniftimapsmasker method)": [[364, "nilearn.maskers.MultiNiftiMapsMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.multiniftimasker method)": [[365, "nilearn.maskers.MultiNiftiMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.niftilabelsmasker method)": [[366, "nilearn.maskers.NiftiLabelsMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.niftimapsmasker method)": [[367, "nilearn.maskers.NiftiMapsMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.niftimasker method)": [[368, "nilearn.maskers.NiftiMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.niftispheresmasker method)": [[369, "nilearn.maskers.NiftiSpheresMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.surfacelabelsmasker method)": [[370, "nilearn.maskers.SurfaceLabelsMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.surfacemapsmasker method)": [[371, "nilearn.maskers.SurfaceMapsMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.maskers.surfacemasker method)": [[372, "nilearn.maskers.SurfaceMasker.get_metadata_routing", false]], "get_metadata_routing() (nilearn.regions.hierarchicalkmeans method)": [[444, "nilearn.regions.HierarchicalKMeans.get_metadata_routing", false]], "get_metadata_routing() (nilearn.regions.parcellations method)": [[445, "nilearn.regions.Parcellations.get_metadata_routing", false]], "get_metadata_routing() (nilearn.regions.regionextractor method)": [[447, "nilearn.regions.RegionExtractor.get_metadata_routing", false]], "get_metadata_routing() (nilearn.regions.rena method)": [[446, "nilearn.regions.ReNA.get_metadata_routing", false]], "get_object_bounds() (nilearn.plotting.displays.baseaxes method)": [[383, "nilearn.plotting.displays.BaseAxes.get_object_bounds", false]], "get_object_bounds() (nilearn.plotting.displays.cutaxes method)": [[385, "nilearn.plotting.displays.CutAxes.get_object_bounds", false]], "get_object_bounds() (nilearn.plotting.displays.glassbrainaxes method)": [[386, "nilearn.plotting.displays.GlassBrainAxes.get_object_bounds", false]], "get_params() (nilearn.connectome.connectivitymeasure method)": [[230, "nilearn.connectome.ConnectivityMeasure.get_params", false]], "get_params() (nilearn.connectome.groupsparsecovariance method)": [[231, "nilearn.connectome.GroupSparseCovariance.get_params", false]], "get_params() (nilearn.connectome.groupsparsecovariancecv method)": [[232, "nilearn.connectome.GroupSparseCovarianceCV.get_params", false]], "get_params() (nilearn.decoding.decoder method)": [[296, "nilearn.decoding.Decoder.get_params", false]], "get_params() (nilearn.decoding.decoderregressor method)": [[297, "nilearn.decoding.DecoderRegressor.get_params", false]], "get_params() (nilearn.decoding.fremclassifier method)": [[298, "nilearn.decoding.FREMClassifier.get_params", false]], "get_params() (nilearn.decoding.fremregressor method)": [[299, "nilearn.decoding.FREMRegressor.get_params", false]], "get_params() (nilearn.decoding.searchlight method)": [[300, "nilearn.decoding.SearchLight.get_params", false]], "get_params() (nilearn.decoding.spacenetclassifier method)": [[301, "nilearn.decoding.SpaceNetClassifier.get_params", false]], "get_params() (nilearn.decoding.spacenetregressor method)": [[302, "nilearn.decoding.SpaceNetRegressor.get_params", false]], "get_params() (nilearn.decomposition.canica method)": [[303, "nilearn.decomposition.CanICA.get_params", false]], "get_params() (nilearn.decomposition.dictlearning method)": [[304, "nilearn.decomposition.DictLearning.get_params", false]], "get_params() (nilearn.glm.first_level.firstlevelmodel method)": [[318, "nilearn.glm.first_level.FirstLevelModel.get_params", false]], "get_params() (nilearn.glm.second_level.secondlevelmodel method)": [[331, "nilearn.glm.second_level.SecondLevelModel.get_params", false]], "get_params() (nilearn.maskers.basemasker method)": [[362, "nilearn.maskers.BaseMasker.get_params", false]], "get_params() (nilearn.maskers.multiniftilabelsmasker method)": [[363, "nilearn.maskers.MultiNiftiLabelsMasker.get_params", false]], "get_params() (nilearn.maskers.multiniftimapsmasker method)": [[364, "nilearn.maskers.MultiNiftiMapsMasker.get_params", false]], "get_params() (nilearn.maskers.multiniftimasker method)": [[365, "nilearn.maskers.MultiNiftiMasker.get_params", false]], "get_params() (nilearn.maskers.niftilabelsmasker method)": [[366, "nilearn.maskers.NiftiLabelsMasker.get_params", false]], "get_params() (nilearn.maskers.niftimapsmasker method)": [[367, "nilearn.maskers.NiftiMapsMasker.get_params", false]], "get_params() (nilearn.maskers.niftimasker method)": [[368, "nilearn.maskers.NiftiMasker.get_params", false]], "get_params() (nilearn.maskers.niftispheresmasker method)": [[369, "nilearn.maskers.NiftiSpheresMasker.get_params", false]], "get_params() (nilearn.maskers.surfacelabelsmasker method)": [[370, "nilearn.maskers.SurfaceLabelsMasker.get_params", false]], "get_params() (nilearn.maskers.surfacemapsmasker method)": [[371, "nilearn.maskers.SurfaceMapsMasker.get_params", false]], "get_params() (nilearn.maskers.surfacemasker method)": [[372, "nilearn.maskers.SurfaceMasker.get_params", false]], "get_params() (nilearn.regions.hierarchicalkmeans method)": [[444, "nilearn.regions.HierarchicalKMeans.get_params", false]], "get_params() (nilearn.regions.parcellations method)": [[445, "nilearn.regions.Parcellations.get_params", false]], "get_params() (nilearn.regions.regionextractor method)": [[447, "nilearn.regions.RegionExtractor.get_params", false]], "get_params() (nilearn.regions.rena method)": [[446, "nilearn.regions.ReNA.get_params", false]], "get_projector() (in module nilearn.plotting.displays)": [[411, "nilearn.plotting.displays.get_projector", false]], "get_slicer() (in module nilearn.plotting.displays)": [[412, "nilearn.plotting.displays.get_slicer", false]], "get_standalone() (nilearn.reporting.htmlreport method)": [[455, "nilearn.reporting.HTMLReport.get_standalone", false]], "glassbrainaxes (class in nilearn.plotting.displays)": [[386, "nilearn.plotting.displays.GlassBrainAxes", false]], "glm": [[178, "term-GLM", true]], "glover_dispersion_derivative() (in module nilearn.glm.first_level)": [[322, "nilearn.glm.first_level.glover_dispersion_derivative", false]], "glover_hrf() (in module nilearn.glm.first_level)": [[323, "nilearn.glm.first_level.glover_hrf", false]], "glover_time_derivative() (in module nilearn.glm.first_level)": [[324, "nilearn.glm.first_level.glover_time_derivative", false]], "group_sparse_covariance() (in module nilearn.connectome)": [[234, "nilearn.connectome.group_sparse_covariance", false]], "groupsparsecovariance (class in nilearn.connectome)": [[231, "nilearn.connectome.GroupSparseCovariance", false]], "groupsparsecovariancecv (class in nilearn.connectome)": [[232, "nilearn.connectome.GroupSparseCovarianceCV", false]], "hierarchicalkmeans (class in nilearn.regions)": [[444, "nilearn.regions.HierarchicalKMeans", false]], "high_variance_confounds() (in module nilearn.image)": [[342, "nilearn.image.high_variance_confounds", false]], "high_variance_confounds() (in module nilearn.signal)": [[460, "nilearn.signal.high_variance_confounds", false]], "hrf": [[178, "term-HRF", true]], "htmlreport (class in nilearn.reporting)": [[455, "nilearn.reporting.HTMLReport", false]], "ica": [[178, "term-ICA", true]], "img_to_signals_labels() (in module nilearn.regions)": [[450, "nilearn.regions.img_to_signals_labels", false]], "img_to_signals_maps() (in module nilearn.regions)": [[451, "nilearn.regions.img_to_signals_maps", false]], "index_img() (in module nilearn.image)": [[343, "nilearn.image.index_img", false]], "init_with_figure() (nilearn.plotting.displays.baseslicer class method)": [[384, "nilearn.plotting.displays.BaseSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.lprojector class method)": [[387, "nilearn.plotting.displays.LProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.lrprojector class method)": [[388, "nilearn.plotting.displays.LRProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.lyrprojector class method)": [[389, "nilearn.plotting.displays.LYRProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.lyrzprojector class method)": [[390, "nilearn.plotting.displays.LYRZProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.lzrprojector class method)": [[391, "nilearn.plotting.displays.LZRProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.lzryprojector class method)": [[392, "nilearn.plotting.displays.LZRYProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.mosaicslicer class method)": [[393, "nilearn.plotting.displays.MosaicSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.orthoprojector class method)": [[394, "nilearn.plotting.displays.OrthoProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.orthoslicer class method)": [[395, "nilearn.plotting.displays.OrthoSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.rprojector class method)": [[397, "nilearn.plotting.displays.RProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.tiledslicer class method)": [[398, "nilearn.plotting.displays.TiledSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.xprojector class method)": [[399, "nilearn.plotting.displays.XProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.xslicer class method)": [[400, "nilearn.plotting.displays.XSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.xzprojector class method)": [[401, "nilearn.plotting.displays.XZProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.xzslicer class method)": [[402, "nilearn.plotting.displays.XZSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.yprojector class method)": [[403, "nilearn.plotting.displays.YProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.yslicer class method)": [[404, "nilearn.plotting.displays.YSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.yxprojector class method)": [[405, "nilearn.plotting.displays.YXProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.yxslicer class method)": [[406, "nilearn.plotting.displays.YXSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.yzprojector class method)": [[407, "nilearn.plotting.displays.YZProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.yzslicer class method)": [[408, "nilearn.plotting.displays.YZSlicer.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.zprojector class method)": [[409, "nilearn.plotting.displays.ZProjector.init_with_figure", false]], "init_with_figure() (nilearn.plotting.displays.zslicer class method)": [[410, "nilearn.plotting.displays.ZSlicer.init_with_figure", false]], "initialize() (nilearn.glm.armodel method)": [[305, "nilearn.glm.ARModel.initialize", false]], "initialize() (nilearn.glm.olsmodel method)": [[309, "nilearn.glm.OLSModel.initialize", false]], "inmemorymesh (class in nilearn.surface)": [[462, "nilearn.surface.InMemoryMesh", false]], "intersect_masks() (in module nilearn.masking)": [[380, "nilearn.masking.intersect_masks", false]], "inverse_transform() (nilearn.connectome.connectivitymeasure method)": [[230, "nilearn.connectome.ConnectivityMeasure.inverse_transform", false]], "inverse_transform() (nilearn.decomposition.canica method)": [[303, "nilearn.decomposition.CanICA.inverse_transform", false]], "inverse_transform() (nilearn.decomposition.dictlearning method)": [[304, "nilearn.decomposition.DictLearning.inverse_transform", false]], "inverse_transform() (nilearn.maskers.basemasker method)": [[362, "nilearn.maskers.BaseMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.multiniftilabelsmasker method)": [[363, "nilearn.maskers.MultiNiftiLabelsMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.multiniftimapsmasker method)": [[364, "nilearn.maskers.MultiNiftiMapsMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.multiniftimasker method)": [[365, "nilearn.maskers.MultiNiftiMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.niftilabelsmasker method)": [[366, "nilearn.maskers.NiftiLabelsMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.niftimapsmasker method)": [[367, "nilearn.maskers.NiftiMapsMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.niftimasker method)": [[368, "nilearn.maskers.NiftiMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.niftispheresmasker method)": [[369, "nilearn.maskers.NiftiSpheresMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.surfacelabelsmasker method)": [[370, "nilearn.maskers.SurfaceLabelsMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.surfacemapsmasker method)": [[371, "nilearn.maskers.SurfaceMapsMasker.inverse_transform", false]], "inverse_transform() (nilearn.maskers.surfacemasker method)": [[372, "nilearn.maskers.SurfaceMasker.inverse_transform", false]], "inverse_transform() (nilearn.regions.hierarchicalkmeans method)": [[444, "nilearn.regions.HierarchicalKMeans.inverse_transform", false]], "inverse_transform() (nilearn.regions.parcellations method)": [[445, "nilearn.regions.Parcellations.inverse_transform", false]], "inverse_transform() (nilearn.regions.regionextractor method)": [[447, "nilearn.regions.RegionExtractor.inverse_transform", false]], "inverse_transform() (nilearn.regions.rena method)": [[446, "nilearn.regions.ReNA.inverse_transform", false]], "iter_img() (in module nilearn.image)": [[344, "nilearn.image.iter_img", false]], "largest_connected_component_img() (in module nilearn.image)": [[345, "nilearn.image.largest_connected_component_img", false]], "likelihoodmodelresults (class in nilearn.glm)": [[308, "nilearn.glm.LikelihoodModelResults", false]], "load_confounds() (in module nilearn.interfaces.fmriprep)": [[359, "nilearn.interfaces.fmriprep.load_confounds", false]], "load_confounds_strategy() (in module nilearn.interfaces.fmriprep)": [[360, "nilearn.interfaces.fmriprep.load_confounds_strategy", false]], "load_fsaverage() (in module nilearn.datasets)": [[284, "nilearn.datasets.load_fsaverage", false]], "load_fsaverage_data() (in module nilearn.datasets)": [[285, "nilearn.datasets.load_fsaverage_data", false]], "load_img() (in module nilearn.image)": [[346, "nilearn.image.load_img", false]], "load_mni152_brain_mask() (in module nilearn.datasets)": [[286, "nilearn.datasets.load_mni152_brain_mask", false]], "load_mni152_gm_mask() (in module nilearn.datasets)": [[287, "nilearn.datasets.load_mni152_gm_mask", false]], "load_mni152_gm_template() (in module nilearn.datasets)": [[288, "nilearn.datasets.load_mni152_gm_template", false]], "load_mni152_template() (in module nilearn.datasets)": [[289, "nilearn.datasets.load_mni152_template", false]], "load_mni152_wm_mask() (in module nilearn.datasets)": [[290, "nilearn.datasets.load_mni152_wm_mask", false]], "load_mni152_wm_template() (in module nilearn.datasets)": [[291, "nilearn.datasets.load_mni152_wm_template", false]], "load_nki() (in module nilearn.datasets)": [[292, "nilearn.datasets.load_nki", false]], "load_sample_motor_activation_image() (in module nilearn.datasets)": [[293, "nilearn.datasets.load_sample_motor_activation_image", false]], "load_surf_data() (in module nilearn.surface)": [[467, "nilearn.surface.load_surf_data", false]], "load_surf_mesh() (in module nilearn.surface)": [[468, "nilearn.surface.load_surf_mesh", false]], "loaded() (nilearn.surface.filemesh method)": [[461, "nilearn.surface.FileMesh.loaded", false]], "logl() (nilearn.glm.armodel method)": [[305, "nilearn.glm.ARModel.logL", false]], "logl() (nilearn.glm.likelihoodmodelresults method)": [[308, "nilearn.glm.LikelihoodModelResults.logL", false]], "logl() (nilearn.glm.olsmodel method)": [[309, "nilearn.glm.OLSModel.logL", false]], "logl() (nilearn.glm.regressionresults method)": [[310, "nilearn.glm.RegressionResults.logL", false]], "logl() (nilearn.glm.simpleregressionresults method)": [[311, "nilearn.glm.SimpleRegressionResults.logL", false]], "lprojector (class in nilearn.plotting.displays)": [[387, "nilearn.plotting.displays.LProjector", false]], "lrprojector (class in nilearn.plotting.displays)": [[388, "nilearn.plotting.displays.LRProjector", false]], "lyrprojector (class in nilearn.plotting.displays)": [[389, "nilearn.plotting.displays.LYRProjector", false]], "lyrzprojector (class in nilearn.plotting.displays)": [[390, "nilearn.plotting.displays.LYRZProjector", false]], "lzrprojector (class in nilearn.plotting.displays)": [[391, "nilearn.plotting.displays.LZRProjector", false]], "lzryprojector (class in nilearn.plotting.displays)": [[392, "nilearn.plotting.displays.LZRYProjector", false]], "make_first_level_design_matrix() (in module nilearn.glm.first_level)": [[325, "nilearn.glm.first_level.make_first_level_design_matrix", false]], "make_glm_report() (in module nilearn.reporting)": [[457, "nilearn.reporting.make_glm_report", false]], "make_second_level_design_matrix() (in module nilearn.glm.second_level)": [[332, "nilearn.glm.second_level.make_second_level_design_matrix", false]], "math_img() (in module nilearn.image)": [[347, "nilearn.image.math_img", false]], "mean_img() (in module nilearn.image)": [[348, "nilearn.image.mean_img", false]], "mean_scaling() (in module nilearn.glm.first_level)": [[326, "nilearn.glm.first_level.mean_scaling", false]], "meg": [[178, "term-MEG", true]], "mesh": [[178, "term-mesh", true]], "mni": [[178, "term-MNI", true]], "module": [[186, "module-nilearn.connectome", false], [187, "module-nilearn.datasets", false], [188, "module-nilearn.decoding", false], [189, "module-nilearn.decomposition", false], [472, "module-nilearn.glm", false], [472, "module-nilearn.glm.first_level", false], [472, "module-nilearn.glm.second_level", false], [473, "module-nilearn.image", false], [475, "module-nilearn.interfaces", false], [475, "module-nilearn.interfaces.bids", false], [475, "module-nilearn.interfaces.fmriprep", false], [475, "module-nilearn.interfaces.fsl", false], [476, "module-nilearn.maskers", false], [477, "module-nilearn.masking", false], [478, "module-nilearn.mass_univariate", false], [479, "module-nilearn.plotting", false], [479, "module-nilearn.plotting.displays", false], [480, "module-nilearn.regions", false], [481, "module-nilearn.reporting", false], [482, "module-nilearn.signal", false], [483, "module-nilearn.surface", false]], "mosaicslicer (class in nilearn.plotting.displays)": [[393, "nilearn.plotting.displays.MosaicSlicer", false]], "mse() (nilearn.glm.regressionresults method)": [[310, "nilearn.glm.RegressionResults.MSE", false]], "multiniftilabelsmasker (class in nilearn.maskers)": [[363, "nilearn.maskers.MultiNiftiLabelsMasker", false]], "multiniftimapsmasker (class in nilearn.maskers)": [[364, "nilearn.maskers.MultiNiftiMapsMasker", false]], "multiniftimasker (class in nilearn.maskers)": [[365, "nilearn.maskers.MultiNiftiMasker", false]], "mvpa": [[178, "term-MVPA", true]], "n_vertices (nilearn.surface.filemesh attribute)": [[461, "nilearn.surface.FileMesh.n_vertices", false]], "n_vertices (nilearn.surface.inmemorymesh attribute)": [[462, "nilearn.surface.InMemoryMesh.n_vertices", false]], "n_vertices (nilearn.surface.polymesh attribute)": [[464, "nilearn.surface.PolyMesh.n_vertices", false]], "n_vertices (nilearn.surface.surfacemesh attribute)": [[466, "nilearn.surface.SurfaceMesh.n_vertices", false]], "neurovault": [[178, "term-Neurovault", true]], "new_img_like() (in module nilearn.image)": [[349, "nilearn.image.new_img_like", false]], "niftilabelsmasker (class in nilearn.maskers)": [[366, "nilearn.maskers.NiftiLabelsMasker", false]], "niftimapsmasker (class in nilearn.maskers)": [[367, "nilearn.maskers.NiftiMapsMasker", false]], "niftimasker (class in nilearn.maskers)": [[368, "nilearn.maskers.NiftiMasker", false]], "niftispheresmasker (class in nilearn.maskers)": [[369, "nilearn.maskers.NiftiSpheresMasker", false]], "nilearn.connectome": [[186, "module-nilearn.connectome", false]], "nilearn.datasets": [[187, "module-nilearn.datasets", false]], "nilearn.decoding": [[188, "module-nilearn.decoding", false]], "nilearn.decomposition": [[189, "module-nilearn.decomposition", false]], "nilearn.glm": [[472, "module-nilearn.glm", false]], "nilearn.glm.first_level": [[472, "module-nilearn.glm.first_level", false]], "nilearn.glm.second_level": [[472, "module-nilearn.glm.second_level", false]], "nilearn.image": [[473, "module-nilearn.image", false]], "nilearn.interfaces": [[475, "module-nilearn.interfaces", false]], "nilearn.interfaces.bids": [[475, "module-nilearn.interfaces.bids", false]], "nilearn.interfaces.fmriprep": [[475, "module-nilearn.interfaces.fmriprep", false]], "nilearn.interfaces.fsl": [[475, "module-nilearn.interfaces.fsl", false]], "nilearn.maskers": [[476, "module-nilearn.maskers", false]], "nilearn.masking": [[477, "module-nilearn.masking", false]], "nilearn.mass_univariate": [[478, "module-nilearn.mass_univariate", false]], "nilearn.plotting": [[479, "module-nilearn.plotting", false]], "nilearn.plotting.displays": [[479, "module-nilearn.plotting.displays", false]], "nilearn.regions": [[480, "module-nilearn.regions", false]], "nilearn.reporting": [[481, "module-nilearn.reporting", false]], "nilearn.signal": [[482, "module-nilearn.signal", false]], "nilearn.surface": [[483, "module-nilearn.surface", false]], "non_parametric_inference() (in module nilearn.glm.second_level)": [[333, "nilearn.glm.second_level.non_parametric_inference", false]], "normalized_residuals() (nilearn.glm.regressionresults method)": [[310, "nilearn.glm.RegressionResults.normalized_residuals", false]], "normalized_residuals() (nilearn.glm.simpleregressionresults method)": [[311, "nilearn.glm.SimpleRegressionResults.normalized_residuals", false]], "olsmodel (class in nilearn.glm)": [[309, "nilearn.glm.OLSModel", false]], "one_minus_pvalue() (nilearn.glm.contrast method)": [[306, "nilearn.glm.Contrast.one_minus_pvalue", false]], "open_in_browser() (nilearn.reporting.htmlreport method)": [[455, "nilearn.reporting.HTMLReport.open_in_browser", false]], "opening": [[178, "term-Opening", true]], "orthoprojector (class in nilearn.plotting.displays)": [[394, "nilearn.plotting.displays.OrthoProjector", false]], "orthoslicer (class in nilearn.plotting.displays)": [[395, "nilearn.plotting.displays.OrthoSlicer", false]], "p_value() (nilearn.glm.contrast method)": [[306, "nilearn.glm.Contrast.p_value", false]], "parameter estimate": [[178, "term-Parameter-estimate", true]], "parcellation": [[178, "term-parcellation", true]], "parcellations (class in nilearn.regions)": [[445, "nilearn.regions.Parcellations", false]], "parse_bids_filename() (in module nilearn.interfaces.bids)": [[357, "nilearn.interfaces.bids.parse_bids_filename", false]], "patch_openneuro_dataset() (in module nilearn.datasets)": [[294, "nilearn.datasets.patch_openneuro_dataset", false]], "permuted_ols() (in module nilearn.mass_univariate)": [[382, "nilearn.mass_univariate.permuted_ols", false]], "plot_anat() (in module nilearn.plotting)": [[417, "nilearn.plotting.plot_anat", false]], "plot_carpet() (in module nilearn.plotting)": [[418, "nilearn.plotting.plot_carpet", false]], "plot_connectome() (in module nilearn.plotting)": [[419, "nilearn.plotting.plot_connectome", false]], "plot_contrast_matrix() (in module nilearn.plotting)": [[420, "nilearn.plotting.plot_contrast_matrix", false]], "plot_design_matrix() (in module nilearn.plotting)": [[421, "nilearn.plotting.plot_design_matrix", false]], "plot_design_matrix_correlation() (in module nilearn.plotting)": [[422, "nilearn.plotting.plot_design_matrix_correlation", false]], "plot_epi() (in module nilearn.plotting)": [[423, "nilearn.plotting.plot_epi", false]], "plot_event() (in module nilearn.plotting)": [[424, "nilearn.plotting.plot_event", false]], "plot_glass_brain() (in module nilearn.plotting)": [[425, "nilearn.plotting.plot_glass_brain", false]], "plot_img() (in module nilearn.plotting)": [[426, "nilearn.plotting.plot_img", false]], "plot_img_comparison() (in module nilearn.plotting)": [[427, "nilearn.plotting.plot_img_comparison", false]], "plot_img_on_surf() (in module nilearn.plotting)": [[428, "nilearn.plotting.plot_img_on_surf", false]], "plot_markers() (in module nilearn.plotting)": [[429, "nilearn.plotting.plot_markers", false]], "plot_matrix() (in module nilearn.plotting)": [[430, "nilearn.plotting.plot_matrix", false]], "plot_prob_atlas() (in module nilearn.plotting)": [[431, "nilearn.plotting.plot_prob_atlas", false]], "plot_roi() (in module nilearn.plotting)": [[432, "nilearn.plotting.plot_roi", false]], "plot_stat_map() (in module nilearn.plotting)": [[433, "nilearn.plotting.plot_stat_map", false]], "plot_surf() (in module nilearn.plotting)": [[434, "nilearn.plotting.plot_surf", false]], "plot_surf_contours() (in module nilearn.plotting)": [[435, "nilearn.plotting.plot_surf_contours", false]], "plot_surf_roi() (in module nilearn.plotting)": [[436, "nilearn.plotting.plot_surf_roi", false]], "plot_surf_stat_map() (in module nilearn.plotting)": [[437, "nilearn.plotting.plot_surf_stat_map", false]], "plotlysurfacefigure (class in nilearn.plotting.displays)": [[396, "nilearn.plotting.displays.PlotlySurfaceFigure", false]], "polydata (class in nilearn.surface)": [[463, "nilearn.surface.PolyData", false]], "polymesh (class in nilearn.surface)": [[464, "nilearn.surface.PolyMesh", false]], "prec_to_partial() (in module nilearn.connectome)": [[235, "nilearn.connectome.prec_to_partial", false]], "predict() (nilearn.decoding.decoder method)": [[296, "nilearn.decoding.Decoder.predict", false]], "predict() (nilearn.decoding.decoderregressor method)": [[297, "nilearn.decoding.DecoderRegressor.predict", false]], "predict() (nilearn.decoding.fremclassifier method)": [[298, "nilearn.decoding.FREMClassifier.predict", false]], "predict() (nilearn.decoding.fremregressor method)": [[299, "nilearn.decoding.FREMRegressor.predict", false]], "predict() (nilearn.decoding.spacenetclassifier method)": [[301, "nilearn.decoding.SpaceNetClassifier.predict", false]], "predict() (nilearn.decoding.spacenetregressor method)": [[302, "nilearn.decoding.SpaceNetRegressor.predict", false]], "predicted() (nilearn.glm.first_level.firstlevelmodel method)": [[318, "nilearn.glm.first_level.FirstLevelModel.predicted", false]], "predicted() (nilearn.glm.regressionresults method)": [[310, "nilearn.glm.RegressionResults.predicted", false]], "predicted() (nilearn.glm.second_level.secondlevelmodel method)": [[331, "nilearn.glm.second_level.SecondLevelModel.predicted", false]], "predicted() (nilearn.glm.simpleregressionresults method)": [[311, "nilearn.glm.SimpleRegressionResults.predicted", false]], "predictive modeling": [[178, "term-predictive-modeling", true]], "probabilistic atlas": [[178, "term-Probabilistic-atlas", true]], "r_square() (nilearn.glm.first_level.firstlevelmodel method)": [[318, "nilearn.glm.first_level.FirstLevelModel.r_square", false]], "r_square() (nilearn.glm.regressionresults method)": [[310, "nilearn.glm.RegressionResults.r_square", false]], "r_square() (nilearn.glm.second_level.secondlevelmodel method)": [[331, "nilearn.glm.second_level.SecondLevelModel.r_square", false]], "recursive_neighbor_agglomeration() (in module nilearn.regions)": [[452, "nilearn.regions.recursive_neighbor_agglomeration", false]], "regionextractor (class in nilearn.regions)": [[447, "nilearn.regions.RegionExtractor", false]], "regression": [[178, "term-regression", true]], "regressionresults (class in nilearn.glm)": [[310, "nilearn.glm.RegressionResults", false]], "rena": [[178, "term-ReNA", true]], "rena (class in nilearn.regions)": [[446, "nilearn.regions.ReNA", false]], "reorder_img() (in module nilearn.image)": [[350, "nilearn.image.reorder_img", false]], "resample_img() (in module nilearn.image)": [[351, "nilearn.image.resample_img", false]], "resample_to_img() (in module nilearn.image)": [[352, "nilearn.image.resample_to_img", false]], "residuals() (nilearn.glm.first_level.firstlevelmodel method)": [[318, "nilearn.glm.first_level.FirstLevelModel.residuals", false]], "residuals() (nilearn.glm.regressionresults method)": [[310, "nilearn.glm.RegressionResults.residuals", false]], "residuals() (nilearn.glm.second_level.secondlevelmodel method)": [[331, "nilearn.glm.second_level.SecondLevelModel.residuals", false]], "residuals() (nilearn.glm.simpleregressionresults method)": [[311, "nilearn.glm.SimpleRegressionResults.residuals", false]], "resize() (nilearn.reporting.htmlreport method)": [[455, "nilearn.reporting.HTMLReport.resize", false]], "resting-state": [[178, "term-resting-state", true]], "roc": [[178, "term-ROC", true]], "rprojector (class in nilearn.plotting.displays)": [[397, "nilearn.plotting.displays.RProjector", false]], "run_glm() (in module nilearn.glm.first_level)": [[327, "nilearn.glm.first_level.run_glm", false]], "save_as_html() (nilearn.reporting.htmlreport method)": [[455, "nilearn.reporting.HTMLReport.save_as_html", false]], "save_glm_to_bids() (in module nilearn.interfaces.bids)": [[358, "nilearn.interfaces.bids.save_glm_to_bids", false]], "savefig() (nilearn.plotting.displays.baseslicer method)": [[384, "nilearn.plotting.displays.BaseSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.lprojector method)": [[387, "nilearn.plotting.displays.LProjector.savefig", false]], "savefig() (nilearn.plotting.displays.lrprojector method)": [[388, "nilearn.plotting.displays.LRProjector.savefig", false]], "savefig() (nilearn.plotting.displays.lyrprojector method)": [[389, "nilearn.plotting.displays.LYRProjector.savefig", false]], "savefig() (nilearn.plotting.displays.lyrzprojector method)": [[390, "nilearn.plotting.displays.LYRZProjector.savefig", false]], "savefig() (nilearn.plotting.displays.lzrprojector method)": [[391, "nilearn.plotting.displays.LZRProjector.savefig", false]], "savefig() (nilearn.plotting.displays.lzryprojector method)": [[392, "nilearn.plotting.displays.LZRYProjector.savefig", false]], "savefig() (nilearn.plotting.displays.mosaicslicer method)": [[393, "nilearn.plotting.displays.MosaicSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.orthoprojector method)": [[394, "nilearn.plotting.displays.OrthoProjector.savefig", false]], "savefig() (nilearn.plotting.displays.orthoslicer method)": [[395, "nilearn.plotting.displays.OrthoSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.plotlysurfacefigure method)": [[396, "nilearn.plotting.displays.PlotlySurfaceFigure.savefig", false]], "savefig() (nilearn.plotting.displays.rprojector method)": [[397, "nilearn.plotting.displays.RProjector.savefig", false]], "savefig() (nilearn.plotting.displays.tiledslicer method)": [[398, "nilearn.plotting.displays.TiledSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.xprojector method)": [[399, "nilearn.plotting.displays.XProjector.savefig", false]], "savefig() (nilearn.plotting.displays.xslicer method)": [[400, "nilearn.plotting.displays.XSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.xzprojector method)": [[401, "nilearn.plotting.displays.XZProjector.savefig", false]], "savefig() (nilearn.plotting.displays.xzslicer method)": [[402, "nilearn.plotting.displays.XZSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.yprojector method)": [[403, "nilearn.plotting.displays.YProjector.savefig", false]], "savefig() (nilearn.plotting.displays.yslicer method)": [[404, "nilearn.plotting.displays.YSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.yxprojector method)": [[405, "nilearn.plotting.displays.YXProjector.savefig", false]], "savefig() (nilearn.plotting.displays.yxslicer method)": [[406, "nilearn.plotting.displays.YXSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.yzprojector method)": [[407, "nilearn.plotting.displays.YZProjector.savefig", false]], "savefig() (nilearn.plotting.displays.yzslicer method)": [[408, "nilearn.plotting.displays.YZSlicer.savefig", false]], "savefig() (nilearn.plotting.displays.zprojector method)": [[409, "nilearn.plotting.displays.ZProjector.savefig", false]], "savefig() (nilearn.plotting.displays.zslicer method)": [[410, "nilearn.plotting.displays.ZSlicer.savefig", false]], "score() (nilearn.decoding.decoder method)": [[296, "nilearn.decoding.Decoder.score", false]], "score() (nilearn.decoding.decoderregressor method)": [[297, "nilearn.decoding.DecoderRegressor.score", false]], "score() (nilearn.decoding.fremclassifier method)": [[298, "nilearn.decoding.FREMClassifier.score", false]], "score() (nilearn.decoding.fremregressor method)": [[299, "nilearn.decoding.FREMRegressor.score", false]], "score() (nilearn.decoding.spacenetclassifier method)": [[301, "nilearn.decoding.SpaceNetClassifier.score", false]], "score() (nilearn.decoding.spacenetregressor method)": [[302, "nilearn.decoding.SpaceNetRegressor.score", false]], "score() (nilearn.decomposition.canica method)": [[303, "nilearn.decomposition.CanICA.score", false]], "score() (nilearn.decomposition.dictlearning method)": [[304, "nilearn.decomposition.DictLearning.score", false]], "score() (nilearn.regions.parcellations method)": [[445, "nilearn.regions.Parcellations.score", false]], "scores_img_ (nilearn.decoding.searchlight property)": [[300, "nilearn.decoding.SearchLight.scores_img_", false]], "searchlight": [[178, "term-Searchlight", true]], "searchlight (class in nilearn.decoding)": [[300, "nilearn.decoding.SearchLight", false]], "secondlevelmodel (class in nilearn.glm.second_level)": [[331, "nilearn.glm.second_level.SecondLevelModel", false]], "select_from_index() (in module nilearn.datasets)": [[295, "nilearn.datasets.select_from_index", false]], "set_fit_request() (nilearn.connectome.groupsparsecovariance method)": [[231, "nilearn.connectome.GroupSparseCovariance.set_fit_request", false]], "set_fit_request() (nilearn.connectome.groupsparsecovariancecv method)": [[232, "nilearn.connectome.GroupSparseCovarianceCV.set_fit_request", false]], "set_fit_request() (nilearn.decoding.decoder method)": [[296, "nilearn.decoding.Decoder.set_fit_request", false]], "set_fit_request() (nilearn.decoding.decoderregressor method)": [[297, "nilearn.decoding.DecoderRegressor.set_fit_request", false]], "set_fit_request() (nilearn.decoding.fremclassifier method)": [[298, "nilearn.decoding.FREMClassifier.set_fit_request", false]], "set_fit_request() (nilearn.decoding.fremregressor method)": [[299, "nilearn.decoding.FREMRegressor.set_fit_request", false]], "set_fit_request() (nilearn.decoding.searchlight method)": [[300, "nilearn.decoding.SearchLight.set_fit_request", false]], "set_fit_request() (nilearn.decoding.spacenetclassifier method)": [[301, "nilearn.decoding.SpaceNetClassifier.set_fit_request", false]], "set_fit_request() (nilearn.decoding.spacenetregressor method)": [[302, "nilearn.decoding.SpaceNetRegressor.set_fit_request", false]], "set_fit_request() (nilearn.decomposition.canica method)": [[303, "nilearn.decomposition.CanICA.set_fit_request", false]], "set_fit_request() (nilearn.decomposition.dictlearning method)": [[304, "nilearn.decomposition.DictLearning.set_fit_request", false]], "set_fit_request() (nilearn.glm.first_level.firstlevelmodel method)": [[318, "nilearn.glm.first_level.FirstLevelModel.set_fit_request", false]], "set_fit_request() (nilearn.glm.second_level.secondlevelmodel method)": [[331, "nilearn.glm.second_level.SecondLevelModel.set_fit_request", false]], "set_fit_request() (nilearn.maskers.basemasker method)": [[362, "nilearn.maskers.BaseMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.multiniftilabelsmasker method)": [[363, "nilearn.maskers.MultiNiftiLabelsMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.multiniftimapsmasker method)": [[364, "nilearn.maskers.MultiNiftiMapsMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.multiniftimasker method)": [[365, "nilearn.maskers.MultiNiftiMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.niftilabelsmasker method)": [[366, "nilearn.maskers.NiftiLabelsMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.niftimapsmasker method)": [[367, "nilearn.maskers.NiftiMapsMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.niftimasker method)": [[368, "nilearn.maskers.NiftiMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.niftispheresmasker method)": [[369, "nilearn.maskers.NiftiSpheresMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.surfacelabelsmasker method)": [[370, "nilearn.maskers.SurfaceLabelsMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.surfacemapsmasker method)": [[371, "nilearn.maskers.SurfaceMapsMasker.set_fit_request", false]], "set_fit_request() (nilearn.maskers.surfacemasker method)": [[372, "nilearn.maskers.SurfaceMasker.set_fit_request", false]], "set_fit_request() (nilearn.regions.parcellations method)": [[445, "nilearn.regions.Parcellations.set_fit_request", false]], "set_fit_request() (nilearn.regions.regionextractor method)": [[447, "nilearn.regions.RegionExtractor.set_fit_request", false]], "set_inverse_transform_request() (nilearn.connectome.connectivitymeasure method)": [[230, "nilearn.connectome.ConnectivityMeasure.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.decomposition.canica method)": [[303, "nilearn.decomposition.CanICA.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.decomposition.dictlearning method)": [[304, "nilearn.decomposition.DictLearning.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.multiniftilabelsmasker method)": [[363, "nilearn.maskers.MultiNiftiLabelsMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.multiniftimapsmasker method)": [[364, "nilearn.maskers.MultiNiftiMapsMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.niftilabelsmasker method)": [[366, "nilearn.maskers.NiftiLabelsMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.niftimapsmasker method)": [[367, "nilearn.maskers.NiftiMapsMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.niftispheresmasker method)": [[369, "nilearn.maskers.NiftiSpheresMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.surfacelabelsmasker method)": [[370, "nilearn.maskers.SurfaceLabelsMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.surfacemapsmasker method)": [[371, "nilearn.maskers.SurfaceMapsMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.maskers.surfacemasker method)": [[372, "nilearn.maskers.SurfaceMasker.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.regions.hierarchicalkmeans method)": [[444, "nilearn.regions.HierarchicalKMeans.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.regions.parcellations method)": [[445, "nilearn.regions.Parcellations.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.regions.regionextractor method)": [[447, "nilearn.regions.RegionExtractor.set_inverse_transform_request", false]], "set_inverse_transform_request() (nilearn.regions.rena method)": [[446, "nilearn.regions.ReNA.set_inverse_transform_request", false]], "set_output() (nilearn.connectome.connectivitymeasure method)": [[230, "nilearn.connectome.ConnectivityMeasure.set_output", false]], "set_output() (nilearn.decoding.searchlight method)": [[300, "nilearn.decoding.SearchLight.set_output", false]], "set_output() (nilearn.decomposition.canica method)": [[303, "nilearn.decomposition.CanICA.set_output", false]], "set_output() (nilearn.decomposition.dictlearning method)": [[304, "nilearn.decomposition.DictLearning.set_output", false]], "set_output() (nilearn.glm.first_level.firstlevelmodel method)": [[318, "nilearn.glm.first_level.FirstLevelModel.set_output", false]], "set_output() (nilearn.glm.second_level.secondlevelmodel method)": [[331, "nilearn.glm.second_level.SecondLevelModel.set_output", false]], "set_output() (nilearn.maskers.basemasker method)": [[362, "nilearn.maskers.BaseMasker.set_output", false]], "set_output() (nilearn.maskers.multiniftilabelsmasker method)": [[363, "nilearn.maskers.MultiNiftiLabelsMasker.set_output", false]], "set_output() (nilearn.maskers.multiniftimapsmasker method)": [[364, "nilearn.maskers.MultiNiftiMapsMasker.set_output", false]], "set_output() (nilearn.maskers.multiniftimasker method)": [[365, "nilearn.maskers.MultiNiftiMasker.set_output", false]], "set_output() (nilearn.maskers.niftilabelsmasker method)": [[366, "nilearn.maskers.NiftiLabelsMasker.set_output", false]], "set_output() (nilearn.maskers.niftimapsmasker method)": [[367, "nilearn.maskers.NiftiMapsMasker.set_output", false]], "set_output() (nilearn.maskers.niftimasker method)": [[368, "nilearn.maskers.NiftiMasker.set_output", false]], "set_output() (nilearn.maskers.niftispheresmasker method)": [[369, "nilearn.maskers.NiftiSpheresMasker.set_output", false]], "set_output() (nilearn.maskers.surfacelabelsmasker method)": [[370, "nilearn.maskers.SurfaceLabelsMasker.set_output", false]], "set_output() (nilearn.maskers.surfacemapsmasker method)": [[371, "nilearn.maskers.SurfaceMapsMasker.set_output", false]], "set_output() (nilearn.maskers.surfacemasker method)": [[372, "nilearn.maskers.SurfaceMasker.set_output", false]], "set_output() (nilearn.regions.hierarchicalkmeans method)": [[444, "nilearn.regions.HierarchicalKMeans.set_output", false]], "set_output() (nilearn.regions.parcellations method)": [[445, "nilearn.regions.Parcellations.set_output", false]], "set_output() (nilearn.regions.regionextractor method)": [[447, "nilearn.regions.RegionExtractor.set_output", false]], "set_output() (nilearn.regions.rena method)": [[446, "nilearn.regions.ReNA.set_output", false]], "set_params() (nilearn.connectome.connectivitymeasure method)": [[230, "nilearn.connectome.ConnectivityMeasure.set_params", false]], "set_params() (nilearn.connectome.groupsparsecovariance method)": [[231, "nilearn.connectome.GroupSparseCovariance.set_params", false]], "set_params() (nilearn.connectome.groupsparsecovariancecv method)": [[232, "nilearn.connectome.GroupSparseCovarianceCV.set_params", false]], "set_params() (nilearn.decoding.decoder method)": [[296, "nilearn.decoding.Decoder.set_params", false]], "set_params() (nilearn.decoding.decoderregressor method)": [[297, "nilearn.decoding.DecoderRegressor.set_params", false]], "set_params() (nilearn.decoding.fremclassifier method)": [[298, "nilearn.decoding.FREMClassifier.set_params", false]], "set_params() (nilearn.decoding.fremregressor method)": [[299, "nilearn.decoding.FREMRegressor.set_params", false]], "set_params() (nilearn.decoding.searchlight method)": [[300, "nilearn.decoding.SearchLight.set_params", false]], "set_params() (nilearn.decoding.spacenetclassifier method)": [[301, "nilearn.decoding.SpaceNetClassifier.set_params", false]], "set_params() (nilearn.decoding.spacenetregressor method)": [[302, "nilearn.decoding.SpaceNetRegressor.set_params", false]], "set_params() (nilearn.decomposition.canica method)": [[303, "nilearn.decomposition.CanICA.set_params", false]], "set_params() (nilearn.decomposition.dictlearning method)": [[304, "nilearn.decomposition.DictLearning.set_params", false]], "set_params() (nilearn.glm.first_level.firstlevelmodel method)": [[318, "nilearn.glm.first_level.FirstLevelModel.set_params", false]], "set_params() (nilearn.glm.second_level.secondlevelmodel method)": [[331, "nilearn.glm.second_level.SecondLevelModel.set_params", false]], "set_params() (nilearn.maskers.basemasker method)": [[362, "nilearn.maskers.BaseMasker.set_params", false]], "set_params() (nilearn.maskers.multiniftilabelsmasker method)": [[363, "nilearn.maskers.MultiNiftiLabelsMasker.set_params", false]], "set_params() (nilearn.maskers.multiniftimapsmasker method)": [[364, "nilearn.maskers.MultiNiftiMapsMasker.set_params", false]], "set_params() (nilearn.maskers.multiniftimasker method)": [[365, "nilearn.maskers.MultiNiftiMasker.set_params", false]], "set_params() (nilearn.maskers.niftilabelsmasker method)": [[366, "nilearn.maskers.NiftiLabelsMasker.set_params", false]], "set_params() (nilearn.maskers.niftimapsmasker method)": [[367, "nilearn.maskers.NiftiMapsMasker.set_params", false]], "set_params() (nilearn.maskers.niftimasker method)": [[368, "nilearn.maskers.NiftiMasker.set_params", false]], "set_params() (nilearn.maskers.niftispheresmasker method)": [[369, "nilearn.maskers.NiftiSpheresMasker.set_params", false]], "set_params() (nilearn.maskers.surfacelabelsmasker method)": [[370, "nilearn.maskers.SurfaceLabelsMasker.set_params", false]], "set_params() (nilearn.maskers.surfacemapsmasker method)": [[371, "nilearn.maskers.SurfaceMapsMasker.set_params", false]], "set_params() (nilearn.maskers.surfacemasker method)": [[372, "nilearn.maskers.SurfaceMasker.set_params", false]], "set_params() (nilearn.regions.hierarchicalkmeans method)": [[444, "nilearn.regions.HierarchicalKMeans.set_params", false]], "set_params() (nilearn.regions.parcellations method)": [[445, "nilearn.regions.Parcellations.set_params", false]], "set_params() (nilearn.regions.regionextractor method)": [[447, "nilearn.regions.RegionExtractor.set_params", false]], "set_params() (nilearn.regions.rena method)": [[446, "nilearn.regions.ReNA.set_params", false]], "set_score_request() (nilearn.decoding.decoder method)": [[296, "nilearn.decoding.Decoder.set_score_request", false]], "set_score_request() (nilearn.decoding.decoderregressor method)": [[297, "nilearn.decoding.DecoderRegressor.set_score_request", false]], "set_score_request() (nilearn.decoding.spacenetclassifier method)": [[301, "nilearn.decoding.SpaceNetClassifier.set_score_request", false]], "set_score_request() (nilearn.decoding.spacenetregressor method)": [[302, "nilearn.decoding.SpaceNetRegressor.set_score_request", false]], "set_score_request() (nilearn.decomposition.canica method)": [[303, "nilearn.decomposition.CanICA.set_score_request", false]], "set_score_request() (nilearn.decomposition.dictlearning method)": [[304, "nilearn.decomposition.DictLearning.set_score_request", false]], "set_score_request() (nilearn.regions.parcellations method)": [[445, "nilearn.regions.Parcellations.set_score_request", false]], "set_transform_request() (nilearn.connectome.connectivitymeasure method)": [[230, "nilearn.connectome.ConnectivityMeasure.set_transform_request", false]], "set_transform_request() (nilearn.decoding.searchlight method)": [[300, "nilearn.decoding.SearchLight.set_transform_request", false]], "set_transform_request() (nilearn.decomposition.canica method)": [[303, "nilearn.decomposition.CanICA.set_transform_request", false]], "set_transform_request() (nilearn.decomposition.dictlearning method)": [[304, "nilearn.decomposition.DictLearning.set_transform_request", false]], "set_transform_request() (nilearn.maskers.basemasker method)": [[362, "nilearn.maskers.BaseMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.multiniftilabelsmasker method)": [[363, "nilearn.maskers.MultiNiftiLabelsMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.multiniftimapsmasker method)": [[364, "nilearn.maskers.MultiNiftiMapsMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.multiniftimasker method)": [[365, "nilearn.maskers.MultiNiftiMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.niftilabelsmasker method)": [[366, "nilearn.maskers.NiftiLabelsMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.niftimapsmasker method)": [[367, "nilearn.maskers.NiftiMapsMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.niftimasker method)": [[368, "nilearn.maskers.NiftiMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.niftispheresmasker method)": [[369, "nilearn.maskers.NiftiSpheresMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.surfacelabelsmasker method)": [[370, "nilearn.maskers.SurfaceLabelsMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.surfacemapsmasker method)": [[371, "nilearn.maskers.SurfaceMapsMasker.set_transform_request", false]], "set_transform_request() (nilearn.maskers.surfacemasker method)": [[372, "nilearn.maskers.SurfaceMasker.set_transform_request", false]], "set_transform_request() (nilearn.regions.parcellations method)": [[445, "nilearn.regions.Parcellations.set_transform_request", false]], "set_transform_request() (nilearn.regions.regionextractor method)": [[447, "nilearn.regions.RegionExtractor.set_transform_request", false]], "shape (nilearn.surface.polydata property)": [[463, "nilearn.surface.PolyData.shape", false]], "shape (nilearn.surface.surfaceimage property)": [[465, "nilearn.surface.SurfaceImage.shape", false]], "show() (in module nilearn.plotting)": [[438, "nilearn.plotting.show", false]], "show() (nilearn.plotting.displays.plotlysurfacefigure method)": [[396, "nilearn.plotting.displays.PlotlySurfaceFigure.show", false]], "signals_to_img_labels() (in module nilearn.regions)": [[453, "nilearn.regions.signals_to_img_labels", false]], "signals_to_img_maps() (in module nilearn.regions)": [[454, "nilearn.regions.signals_to_img_maps", false]], "simpleregressionresults (class in nilearn.glm)": [[311, "nilearn.glm.SimpleRegressionResults", false]], "smooth_img() (in module nilearn.image)": [[353, "nilearn.image.smooth_img", false]], "snr": [[178, "term-SNR", true]], "spacenet": [[178, "term-SpaceNet", true]], "spacenetclassifier (class in nilearn.decoding)": [[301, "nilearn.decoding.SpaceNetClassifier", false]], "spacenetregressor (class in nilearn.decoding)": [[302, "nilearn.decoding.SpaceNetRegressor", false]], "spm": [[178, "term-SPM", true]], "spm_dispersion_derivative() (in module nilearn.glm.first_level)": [[328, "nilearn.glm.first_level.spm_dispersion_derivative", false]], "spm_hrf() (in module nilearn.glm.first_level)": [[329, "nilearn.glm.first_level.spm_hrf", false]], "spm_time_derivative() (in module nilearn.glm.first_level)": [[330, "nilearn.glm.first_level.spm_time_derivative", false]], "sse() (nilearn.glm.regressionresults method)": [[310, "nilearn.glm.RegressionResults.SSE", false]], "stat() (nilearn.glm.contrast method)": [[306, "nilearn.glm.Contrast.stat", false]], "supervised learning": [[178, "term-supervised-learning", true]], "supported_losses (nilearn.decoding.spacenetclassifier attribute)": [[301, "nilearn.decoding.SpaceNetClassifier.SUPPORTED_LOSSES", false]], "supported_losses (nilearn.decoding.spacenetregressor attribute)": [[302, "nilearn.decoding.SpaceNetRegressor.SUPPORTED_LOSSES", false]], "supported_penalties (nilearn.decoding.spacenetclassifier attribute)": [[301, "nilearn.decoding.SpaceNetClassifier.SUPPORTED_PENALTIES", false]], "supported_penalties (nilearn.decoding.spacenetregressor attribute)": [[302, "nilearn.decoding.SpaceNetRegressor.SUPPORTED_PENALTIES", false]], "surfaceimage (class in nilearn.surface)": [[465, "nilearn.surface.SurfaceImage", false]], "surfacelabelsmasker (class in nilearn.maskers)": [[370, "nilearn.maskers.SurfaceLabelsMasker", false]], "surfacemapsmasker (class in nilearn.maskers)": [[371, "nilearn.maskers.SurfaceMapsMasker", false]], "surfacemasker (class in nilearn.maskers)": [[372, "nilearn.maskers.SurfaceMasker", false]], "surfacemesh (class in nilearn.surface)": [[466, "nilearn.surface.SurfaceMesh", false]], "svm": [[178, "term-SVM", true]], "swap_img_hemispheres() (in module nilearn.image)": [[354, "nilearn.image.swap_img_hemispheres", false]], "sym_matrix_to_vec() (in module nilearn.connectome)": [[236, "nilearn.connectome.sym_matrix_to_vec", false]], "t() (nilearn.glm.likelihoodmodelresults method)": [[308, "nilearn.glm.LikelihoodModelResults.t", false]], "t() (nilearn.glm.regressionresults method)": [[310, "nilearn.glm.RegressionResults.t", false]], "t() (nilearn.glm.simpleregressionresults method)": [[311, "nilearn.glm.SimpleRegressionResults.t", false]], "tcontrast() (nilearn.glm.likelihoodmodelresults method)": [[308, "nilearn.glm.LikelihoodModelResults.Tcontrast", false]], "tcontrast() (nilearn.glm.regressionresults method)": [[310, "nilearn.glm.RegressionResults.Tcontrast", false]], "tcontrast() (nilearn.glm.simpleregressionresults method)": [[311, "nilearn.glm.SimpleRegressionResults.Tcontrast", false]], "tcontrastresults (class in nilearn.glm)": [[312, "nilearn.glm.TContrastResults", false]], "tfce": [[178, "term-TFCE", true]], "threshold_img() (in module nilearn.image)": [[355, "nilearn.image.threshold_img", false]], "threshold_stats_img() (in module nilearn.glm)": [[334, "nilearn.glm.threshold_stats_img", false]], "tiledslicer (class in nilearn.plotting.displays)": [[398, "nilearn.plotting.displays.TiledSlicer", false]], "title() (nilearn.plotting.displays.baseslicer method)": [[384, "nilearn.plotting.displays.BaseSlicer.title", false]], "title() (nilearn.plotting.displays.lprojector method)": [[387, "nilearn.plotting.displays.LProjector.title", false]], "title() (nilearn.plotting.displays.lrprojector method)": [[388, "nilearn.plotting.displays.LRProjector.title", false]], "title() (nilearn.plotting.displays.lyrprojector method)": [[389, "nilearn.plotting.displays.LYRProjector.title", false]], "title() (nilearn.plotting.displays.lyrzprojector method)": [[390, "nilearn.plotting.displays.LYRZProjector.title", false]], "title() (nilearn.plotting.displays.lzrprojector method)": [[391, "nilearn.plotting.displays.LZRProjector.title", false]], "title() (nilearn.plotting.displays.lzryprojector method)": [[392, "nilearn.plotting.displays.LZRYProjector.title", false]], "title() (nilearn.plotting.displays.mosaicslicer method)": [[393, "nilearn.plotting.displays.MosaicSlicer.title", false]], "title() (nilearn.plotting.displays.orthoprojector method)": [[394, "nilearn.plotting.displays.OrthoProjector.title", false]], "title() (nilearn.plotting.displays.orthoslicer method)": [[395, "nilearn.plotting.displays.OrthoSlicer.title", false]], "title() (nilearn.plotting.displays.rprojector method)": [[397, "nilearn.plotting.displays.RProjector.title", false]], "title() (nilearn.plotting.displays.tiledslicer method)": [[398, "nilearn.plotting.displays.TiledSlicer.title", false]], "title() (nilearn.plotting.displays.xprojector method)": [[399, "nilearn.plotting.displays.XProjector.title", false]], "title() (nilearn.plotting.displays.xslicer method)": [[400, "nilearn.plotting.displays.XSlicer.title", false]], "title() (nilearn.plotting.displays.xzprojector method)": [[401, "nilearn.plotting.displays.XZProjector.title", false]], "title() (nilearn.plotting.displays.xzslicer method)": [[402, "nilearn.plotting.displays.XZSlicer.title", false]], "title() (nilearn.plotting.displays.yprojector method)": [[403, "nilearn.plotting.displays.YProjector.title", false]], "title() (nilearn.plotting.displays.yslicer method)": [[404, "nilearn.plotting.displays.YSlicer.title", false]], "title() (nilearn.plotting.displays.yxprojector method)": [[405, "nilearn.plotting.displays.YXProjector.title", false]], "title() (nilearn.plotting.displays.yxslicer method)": [[406, "nilearn.plotting.displays.YXSlicer.title", false]], "title() (nilearn.plotting.displays.yzprojector method)": [[407, "nilearn.plotting.displays.YZProjector.title", false]], "title() (nilearn.plotting.displays.yzslicer method)": [[408, "nilearn.plotting.displays.YZSlicer.title", false]], "title() (nilearn.plotting.displays.zprojector method)": [[409, "nilearn.plotting.displays.ZProjector.title", false]], "title() (nilearn.plotting.displays.zslicer method)": [[410, "nilearn.plotting.displays.ZSlicer.title", false]], "to_filename() (nilearn.surface.polydata method)": [[463, "nilearn.surface.PolyData.to_filename", false]], "to_filename() (nilearn.surface.polymesh method)": [[464, "nilearn.surface.PolyMesh.to_filename", false]], "to_gifti() (nilearn.surface.filemesh method)": [[461, "nilearn.surface.FileMesh.to_gifti", false]], "to_gifti() (nilearn.surface.inmemorymesh method)": [[462, "nilearn.surface.InMemoryMesh.to_gifti", false]], "to_gifti() (nilearn.surface.surfacemesh method)": [[466, "nilearn.surface.SurfaceMesh.to_gifti", false]], "tr": [[178, "term-TR", true]], "transform() (nilearn.connectome.connectivitymeasure method)": [[230, "nilearn.connectome.ConnectivityMeasure.transform", false]], "transform() (nilearn.decoding.searchlight method)": [[300, "nilearn.decoding.SearchLight.transform", false]], "transform() (nilearn.decomposition.canica method)": [[303, "nilearn.decomposition.CanICA.transform", false]], "transform() (nilearn.decomposition.dictlearning method)": [[304, "nilearn.decomposition.DictLearning.transform", false]], "transform() (nilearn.maskers.basemasker method)": [[362, "nilearn.maskers.BaseMasker.transform", false]], "transform() (nilearn.maskers.multiniftilabelsmasker method)": [[363, "nilearn.maskers.MultiNiftiLabelsMasker.transform", false]], "transform() (nilearn.maskers.multiniftimapsmasker method)": [[364, "nilearn.maskers.MultiNiftiMapsMasker.transform", false]], "transform() (nilearn.maskers.multiniftimasker method)": [[365, "nilearn.maskers.MultiNiftiMasker.transform", false]], "transform() (nilearn.maskers.niftilabelsmasker method)": [[366, "nilearn.maskers.NiftiLabelsMasker.transform", false]], "transform() (nilearn.maskers.niftimapsmasker method)": [[367, "nilearn.maskers.NiftiMapsMasker.transform", false]], "transform() (nilearn.maskers.niftimasker method)": [[368, "nilearn.maskers.NiftiMasker.transform", false]], "transform() (nilearn.maskers.niftispheresmasker method)": [[369, "nilearn.maskers.NiftiSpheresMasker.transform", false]], "transform() (nilearn.maskers.surfacelabelsmasker method)": [[370, "nilearn.maskers.SurfaceLabelsMasker.transform", false]], "transform() (nilearn.maskers.surfacemapsmasker method)": [[371, "nilearn.maskers.SurfaceMapsMasker.transform", false]], "transform() (nilearn.maskers.surfacemasker method)": [[372, "nilearn.maskers.SurfaceMasker.transform", false]], "transform() (nilearn.regions.hierarchicalkmeans method)": [[444, "nilearn.regions.HierarchicalKMeans.transform", false]], "transform() (nilearn.regions.parcellations method)": [[445, "nilearn.regions.Parcellations.transform", false]], "transform() (nilearn.regions.regionextractor method)": [[447, "nilearn.regions.RegionExtractor.transform", false]], "transform() (nilearn.regions.rena method)": [[446, "nilearn.regions.ReNA.transform", false]], "transform_imgs() (nilearn.maskers.multiniftilabelsmasker method)": [[363, "nilearn.maskers.MultiNiftiLabelsMasker.transform_imgs", false]], "transform_imgs() (nilearn.maskers.multiniftimapsmasker method)": [[364, "nilearn.maskers.MultiNiftiMapsMasker.transform_imgs", false]], "transform_imgs() (nilearn.maskers.multiniftimasker method)": [[365, "nilearn.maskers.MultiNiftiMasker.transform_imgs", false]], "transform_single_imgs() (nilearn.maskers.basemasker method)": [[362, "nilearn.maskers.BaseMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.multiniftilabelsmasker method)": [[363, "nilearn.maskers.MultiNiftiLabelsMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.multiniftimapsmasker method)": [[364, "nilearn.maskers.MultiNiftiMapsMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.multiniftimasker method)": [[365, "nilearn.maskers.MultiNiftiMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.niftilabelsmasker method)": [[366, "nilearn.maskers.NiftiLabelsMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.niftimapsmasker method)": [[367, "nilearn.maskers.NiftiMapsMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.niftimasker method)": [[368, "nilearn.maskers.NiftiMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.maskers.niftispheresmasker method)": [[369, "nilearn.maskers.NiftiSpheresMasker.transform_single_imgs", false]], "transform_single_imgs() (nilearn.regions.regionextractor method)": [[447, "nilearn.regions.RegionExtractor.transform_single_imgs", false]], "transform_to_2d() (nilearn.plotting.displays.baseaxes method)": [[383, "nilearn.plotting.displays.BaseAxes.transform_to_2d", false]], "transform_to_2d() (nilearn.plotting.displays.cutaxes method)": [[385, "nilearn.plotting.displays.CutAxes.transform_to_2d", false]], "transform_to_2d() (nilearn.plotting.displays.glassbrainaxes method)": [[386, "nilearn.plotting.displays.GlassBrainAxes.transform_to_2d", false]], "unmask() (in module nilearn.masking)": [[381, "nilearn.masking.unmask", false]], "unsupervised learning": [[178, "term-Unsupervised-learning", true]], "valid_methods (nilearn.regions.parcellations attribute)": [[445, "nilearn.regions.Parcellations.VALID_METHODS", false]], "vbm": [[178, "term-VBM", true]], "vcov() (nilearn.glm.likelihoodmodelresults method)": [[308, "nilearn.glm.LikelihoodModelResults.vcov", false]], "vcov() (nilearn.glm.regressionresults method)": [[310, "nilearn.glm.RegressionResults.vcov", false]], "vcov() (nilearn.glm.simpleregressionresults method)": [[311, "nilearn.glm.SimpleRegressionResults.vcov", false]], "vec_to_sym_matrix() (in module nilearn.connectome)": [[237, "nilearn.connectome.vec_to_sym_matrix", false]], "vertex": [[178, "term-vertex", true]], "view_connectome() (in module nilearn.plotting)": [[439, "nilearn.plotting.view_connectome", false]], "view_img() (in module nilearn.plotting)": [[440, "nilearn.plotting.view_img", false]], "view_img_on_surf() (in module nilearn.plotting)": [[441, "nilearn.plotting.view_img_on_surf", false]], "view_markers() (in module nilearn.plotting)": [[442, "nilearn.plotting.view_markers", false]], "view_surf() (in module nilearn.plotting)": [[443, "nilearn.plotting.view_surf", false]], "vol_to_surf() (in module nilearn.surface)": [[469, "nilearn.surface.vol_to_surf", false]], "voxel": [[178, "term-voxel", true]], "ward clustering": [[178, "term-Ward-clustering", true]], "whiten() (nilearn.glm.armodel method)": [[305, "nilearn.glm.ARModel.whiten", false]], "whiten() (nilearn.glm.olsmodel method)": [[309, "nilearn.glm.OLSModel.whiten", false]], "xprojector (class in nilearn.plotting.displays)": [[399, "nilearn.plotting.displays.XProjector", false]], "xslicer (class in nilearn.plotting.displays)": [[400, "nilearn.plotting.displays.XSlicer", false]], "xzprojector (class in nilearn.plotting.displays)": [[401, "nilearn.plotting.displays.XZProjector", false]], "xzslicer (class in nilearn.plotting.displays)": [[402, "nilearn.plotting.displays.XZSlicer", false]], "yprojector (class in nilearn.plotting.displays)": [[403, "nilearn.plotting.displays.YProjector", false]], "yslicer (class in nilearn.plotting.displays)": [[404, "nilearn.plotting.displays.YSlicer", false]], "yxprojector (class in nilearn.plotting.displays)": [[405, "nilearn.plotting.displays.YXProjector", false]], "yxslicer (class in nilearn.plotting.displays)": [[406, "nilearn.plotting.displays.YXSlicer", false]], "yzprojector (class in nilearn.plotting.displays)": [[407, "nilearn.plotting.displays.YZProjector", false]], "yzslicer (class in nilearn.plotting.displays)": [[408, "nilearn.plotting.displays.YZSlicer", false]], "z_score() (nilearn.glm.contrast method)": [[306, "nilearn.glm.Contrast.z_score", false]], "zprojector (class in nilearn.plotting.displays)": [[409, "nilearn.plotting.displays.ZProjector", false]], "zslicer (class in nilearn.plotting.displays)": [[410, "nilearn.plotting.displays.ZSlicer", false]]}, "objects": {"nilearn": [[186, 0, 0, "-", "connectome"], [187, 0, 0, "-", "datasets"], [188, 0, 0, "-", "decoding"], [189, 0, 0, "-", "decomposition"], [472, 0, 0, "-", "glm"], [473, 0, 0, "-", "image"], [475, 0, 0, "-", "interfaces"], [476, 0, 0, "-", "maskers"], [477, 0, 0, "-", "masking"], [478, 0, 0, "-", "mass_univariate"], [479, 0, 0, "-", "plotting"], [480, 0, 0, "-", "regions"], [481, 0, 0, "-", "reporting"], [482, 0, 0, "-", "signal"], [483, 0, 0, "-", "surface"]], "nilearn.connectome": [[230, 1, 1, "", "ConnectivityMeasure"], [231, 1, 1, "", "GroupSparseCovariance"], [232, 1, 1, "", "GroupSparseCovarianceCV"], [233, 3, 1, "", "cov_to_corr"], [234, 3, 1, "", "group_sparse_covariance"], [235, 3, 1, "", "prec_to_partial"], [236, 3, 1, "", "sym_matrix_to_vec"], [237, 3, 1, "", "vec_to_sym_matrix"]], "nilearn.connectome.ConnectivityMeasure": [[230, 2, 1, "", "__init__"], [230, 2, 1, "", "fit"], [230, 2, 1, "", "fit_transform"], [230, 2, 1, "", "get_metadata_routing"], [230, 2, 1, "", "get_params"], [230, 2, 1, "", "inverse_transform"], [230, 2, 1, "", "set_inverse_transform_request"], [230, 2, 1, "", "set_output"], [230, 2, 1, "", "set_params"], [230, 2, 1, "", "set_transform_request"], [230, 2, 1, "", "transform"]], "nilearn.connectome.GroupSparseCovariance": [[231, 2, 1, "", "__init__"], [231, 2, 1, "", "fit"], [231, 2, 1, "", "get_metadata_routing"], [231, 2, 1, "", "get_params"], [231, 2, 1, "", "set_fit_request"], [231, 2, 1, "", "set_params"]], "nilearn.connectome.GroupSparseCovarianceCV": [[232, 2, 1, "", "__init__"], [232, 2, 1, "", "fit"], [232, 2, 1, "", "get_metadata_routing"], [232, 2, 1, "", "get_params"], [232, 2, 1, "", "set_fit_request"], [232, 2, 1, "", "set_params"]], "nilearn.datasets": [[238, 3, 1, "", "fetch_abide_pcp"], [239, 3, 1, "", "fetch_adhd"], [240, 3, 1, "", "fetch_atlas_aal"], [241, 3, 1, "", "fetch_atlas_allen_2011"], [242, 3, 1, "", "fetch_atlas_basc_multiscale_2015"], [243, 3, 1, "", "fetch_atlas_craddock_2012"], [244, 3, 1, "", "fetch_atlas_destrieux_2009"], [245, 3, 1, "", "fetch_atlas_difumo"], [246, 3, 1, "", "fetch_atlas_harvard_oxford"], [247, 3, 1, "", "fetch_atlas_juelich"], [248, 3, 1, "", "fetch_atlas_msdl"], [249, 3, 1, "", "fetch_atlas_pauli_2017"], [250, 3, 1, "", "fetch_atlas_schaefer_2018"], [251, 3, 1, "", "fetch_atlas_smith_2009"], [252, 3, 1, "", "fetch_atlas_surf_destrieux"], [253, 3, 1, "", "fetch_atlas_talairach"], [254, 3, 1, "", "fetch_atlas_yeo_2011"], [255, 3, 1, "", "fetch_bids_langloc_dataset"], [256, 3, 1, "", "fetch_coords_dosenbach_2010"], [257, 3, 1, "", "fetch_coords_power_2011"], [258, 3, 1, "", "fetch_coords_seitzman_2018"], [259, 3, 1, "", "fetch_development_fmri"], [260, 3, 1, "", "fetch_ds000030_urls"], [261, 3, 1, "", "fetch_fiac_first_level"], [262, 3, 1, "", "fetch_haxby"], [263, 3, 1, "", "fetch_icbm152_2009"], [264, 3, 1, "", "fetch_icbm152_brain_gm_mask"], [265, 3, 1, "", "fetch_language_localizer_demo_dataset"], [266, 3, 1, "", "fetch_localizer_button_task"], [267, 3, 1, "", "fetch_localizer_calculation_task"], [268, 3, 1, "", "fetch_localizer_contrasts"], [269, 3, 1, "", "fetch_localizer_first_level"], [270, 3, 1, "", "fetch_megatrawls_netmats"], [271, 3, 1, "", "fetch_mixed_gambles"], [272, 3, 1, "", "fetch_miyawaki2008"], [273, 3, 1, "", "fetch_neurovault"], [274, 3, 1, "", "fetch_neurovault_auditory_computation_task"], [275, 3, 1, "", "fetch_neurovault_ids"], [276, 3, 1, "", "fetch_neurovault_motor_task"], [277, 3, 1, "", "fetch_oasis_vbm"], [278, 3, 1, "", "fetch_openneuro_dataset"], [279, 3, 1, "", "fetch_spm_auditory"], [280, 3, 1, "", "fetch_spm_multimodal_fmri"], [281, 3, 1, "", "fetch_surf_fsaverage"], [282, 3, 1, "", "fetch_surf_nki_enhanced"], [283, 3, 1, "", "get_data_dirs"], [284, 3, 1, "", "load_fsaverage"], [285, 3, 1, "", "load_fsaverage_data"], [286, 3, 1, "", "load_mni152_brain_mask"], [287, 3, 1, "", "load_mni152_gm_mask"], [288, 3, 1, "", "load_mni152_gm_template"], [289, 3, 1, "", "load_mni152_template"], [290, 3, 1, "", "load_mni152_wm_mask"], [291, 3, 1, "", "load_mni152_wm_template"], [292, 3, 1, "", "load_nki"], [293, 3, 1, "", "load_sample_motor_activation_image"], [294, 3, 1, "", "patch_openneuro_dataset"], [295, 3, 1, "", "select_from_index"]], "nilearn.decoding": [[296, 1, 1, "", "Decoder"], [297, 1, 1, "", "DecoderRegressor"], [298, 1, 1, "", "FREMClassifier"], [299, 1, 1, "", "FREMRegressor"], [300, 1, 1, "", "SearchLight"], [301, 1, 1, "", "SpaceNetClassifier"], [302, 1, 1, "", "SpaceNetRegressor"]], "nilearn.decoding.Decoder": [[296, 2, 1, "", "__init__"], [296, 2, 1, "", "decision_function"], [296, 2, 1, "", "fit"], [296, 2, 1, "", "get_metadata_routing"], [296, 2, 1, "", "get_params"], [296, 2, 1, "", "predict"], [296, 2, 1, "", "score"], [296, 2, 1, "", "set_fit_request"], [296, 2, 1, "", "set_params"], [296, 2, 1, "", "set_score_request"]], "nilearn.decoding.DecoderRegressor": [[297, 2, 1, "", "__init__"], [297, 2, 1, "", "decision_function"], [297, 2, 1, "", "fit"], [297, 2, 1, "", "get_metadata_routing"], [297, 2, 1, "", "get_params"], [297, 2, 1, "", "predict"], [297, 2, 1, "", "score"], [297, 2, 1, "", "set_fit_request"], [297, 2, 1, "", "set_params"], [297, 2, 1, "", "set_score_request"]], "nilearn.decoding.FREMClassifier": [[298, 2, 1, "", "__init__"], [298, 2, 1, "", "decision_function"], [298, 2, 1, "", "fit"], [298, 2, 1, "", "get_metadata_routing"], [298, 2, 1, "", "get_params"], [298, 2, 1, "", "predict"], [298, 2, 1, "", "score"], [298, 2, 1, "", "set_fit_request"], [298, 2, 1, "", "set_params"]], "nilearn.decoding.FREMRegressor": [[299, 2, 1, "", "__init__"], [299, 2, 1, "", "decision_function"], [299, 2, 1, "", "fit"], [299, 2, 1, "", "get_metadata_routing"], [299, 2, 1, "", "get_params"], [299, 2, 1, "", "predict"], [299, 2, 1, "", "score"], [299, 2, 1, "", "set_fit_request"], [299, 2, 1, "", "set_params"]], "nilearn.decoding.SearchLight": [[300, 2, 1, "", "__init__"], [300, 2, 1, "", "fit"], [300, 2, 1, "", "fit_transform"], [300, 2, 1, "", "get_metadata_routing"], [300, 2, 1, "", "get_params"], [300, 4, 1, "", "scores_img_"], [300, 2, 1, "", "set_fit_request"], [300, 2, 1, "", "set_output"], [300, 2, 1, "", "set_params"], [300, 2, 1, "", "set_transform_request"], [300, 2, 1, "", "transform"]], "nilearn.decoding.SpaceNetClassifier": [[301, 5, 1, "", "SUPPORTED_LOSSES"], [301, 5, 1, "", "SUPPORTED_PENALTIES"], [301, 2, 1, "", "__init__"], [301, 2, 1, "", "check_params"], [301, 2, 1, "", "decision_function"], [301, 2, 1, "", "fit"], [301, 2, 1, "", "get_metadata_routing"], [301, 2, 1, "", "get_params"], [301, 2, 1, "", "predict"], [301, 2, 1, "", "score"], [301, 2, 1, "", "set_fit_request"], [301, 2, 1, "", "set_params"], [301, 2, 1, "", "set_score_request"]], "nilearn.decoding.SpaceNetRegressor": [[302, 5, 1, "", "SUPPORTED_LOSSES"], [302, 5, 1, "", "SUPPORTED_PENALTIES"], [302, 2, 1, "", "__init__"], [302, 2, 1, "", "check_params"], [302, 2, 1, "", "decision_function"], [302, 2, 1, "", "fit"], [302, 2, 1, "", "get_metadata_routing"], [302, 2, 1, "", "get_params"], [302, 2, 1, "", "predict"], [302, 2, 1, "", "score"], [302, 2, 1, "", "set_fit_request"], [302, 2, 1, "", "set_params"], [302, 2, 1, "", "set_score_request"]], "nilearn.decomposition": [[303, 1, 1, "", "CanICA"], [304, 1, 1, "", "DictLearning"]], "nilearn.decomposition.CanICA": [[303, 2, 1, "", "__init__"], [303, 2, 1, "", "fit"], [303, 2, 1, "", "fit_transform"], [303, 2, 1, "", "get_metadata_routing"], [303, 2, 1, "", "get_params"], [303, 2, 1, "", "inverse_transform"], [303, 2, 1, "", "score"], [303, 2, 1, "", "set_fit_request"], [303, 2, 1, "", "set_inverse_transform_request"], [303, 2, 1, "", "set_output"], [303, 2, 1, "", "set_params"], [303, 2, 1, "", "set_score_request"], [303, 2, 1, "", "set_transform_request"], [303, 2, 1, "", "transform"]], "nilearn.decomposition.DictLearning": [[304, 2, 1, "", "__init__"], [304, 2, 1, "", "fit"], [304, 2, 1, "", "fit_transform"], [304, 2, 1, "", "get_metadata_routing"], [304, 2, 1, "", "get_params"], [304, 2, 1, "", "inverse_transform"], [304, 2, 1, "", "score"], [304, 2, 1, "", "set_fit_request"], [304, 2, 1, "", "set_inverse_transform_request"], [304, 2, 1, "", "set_output"], [304, 2, 1, "", "set_params"], [304, 2, 1, "", "set_score_request"], [304, 2, 1, "", "set_transform_request"], [304, 2, 1, "", "transform"]], "nilearn.glm": [[305, 1, 1, "", "ARModel"], [306, 1, 1, "", "Contrast"], [307, 1, 1, "", "FContrastResults"], [308, 1, 1, "", "LikelihoodModelResults"], [309, 1, 1, "", "OLSModel"], [310, 1, 1, "", "RegressionResults"], [311, 1, 1, "", "SimpleRegressionResults"], [312, 1, 1, "", "TContrastResults"], [313, 3, 1, "", "cluster_level_inference"], [314, 3, 1, "", "compute_contrast"], [315, 3, 1, "", "compute_fixed_effects"], [316, 3, 1, "", "expression_to_contrast_vector"], [317, 3, 1, "", "fdr_threshold"], [472, 0, 0, "-", "first_level"], [472, 0, 0, "-", "second_level"], [334, 3, 1, "", "threshold_stats_img"]], "nilearn.glm.ARModel": [[305, 2, 1, "", "__init__"], [305, 2, 1, "", "fit"], [305, 2, 1, "", "initialize"], [305, 2, 1, "", "logL"], [305, 2, 1, "", "whiten"]], "nilearn.glm.Contrast": [[306, 2, 1, "", "__init__"], [306, 4, 1, "", "contrast_type"], [306, 2, 1, "", "effect_size"], [306, 2, 1, "", "effect_variance"], [306, 2, 1, "", "one_minus_pvalue"], [306, 2, 1, "", "p_value"], [306, 2, 1, "", "stat"], [306, 2, 1, "", "z_score"]], "nilearn.glm.FContrastResults": [[307, 2, 1, "", "__init__"]], "nilearn.glm.LikelihoodModelResults": [[308, 2, 1, "", "Fcontrast"], [308, 2, 1, "", "Tcontrast"], [308, 2, 1, "", "__init__"], [308, 2, 1, "", "conf_int"], [308, 2, 1, "", "logL"], [308, 2, 1, "", "t"], [308, 2, 1, "", "vcov"]], "nilearn.glm.OLSModel": [[309, 2, 1, "", "__init__"], [309, 2, 1, "", "fit"], [309, 2, 1, "", "initialize"], [309, 2, 1, "", "logL"], [309, 2, 1, "", "whiten"]], "nilearn.glm.RegressionResults": [[310, 2, 1, "", "Fcontrast"], [310, 2, 1, "", "MSE"], [310, 2, 1, "", "SSE"], [310, 2, 1, "", "Tcontrast"], [310, 2, 1, "", "__init__"], [310, 2, 1, "", "conf_int"], [310, 2, 1, "", "logL"], [310, 2, 1, "", "normalized_residuals"], [310, 2, 1, "", "predicted"], [310, 2, 1, "", "r_square"], [310, 2, 1, "", "residuals"], [310, 2, 1, "", "t"], [310, 2, 1, "", "vcov"]], "nilearn.glm.SimpleRegressionResults": [[311, 2, 1, "", "Fcontrast"], [311, 2, 1, "", "Tcontrast"], [311, 2, 1, "", "__init__"], [311, 2, 1, "", "conf_int"], [311, 2, 1, "", "logL"], [311, 2, 1, "", "normalized_residuals"], [311, 2, 1, "", "predicted"], [311, 2, 1, "", "residuals"], [311, 2, 1, "", "t"], [311, 2, 1, "", "vcov"]], "nilearn.glm.TContrastResults": [[312, 2, 1, "", "__init__"]], "nilearn.glm.first_level": [[318, 1, 1, "", "FirstLevelModel"], [319, 3, 1, "", "check_design_matrix"], [320, 3, 1, "", "compute_regressor"], [321, 3, 1, "", "first_level_from_bids"], [322, 3, 1, "", "glover_dispersion_derivative"], [323, 3, 1, "", "glover_hrf"], [324, 3, 1, "", "glover_time_derivative"], [325, 3, 1, "", "make_first_level_design_matrix"], [326, 3, 1, "", "mean_scaling"], [327, 3, 1, "", "run_glm"], [328, 3, 1, "", "spm_dispersion_derivative"], [329, 3, 1, "", "spm_hrf"], [330, 3, 1, "", "spm_time_derivative"]], "nilearn.glm.first_level.FirstLevelModel": [[318, 2, 1, "", "__init__"], [318, 2, 1, "", "compute_contrast"], [318, 2, 1, "", "fit"], [318, 2, 1, "", "fit_transform"], [318, 2, 1, "", "generate_report"], [318, 2, 1, "", "get_metadata_routing"], [318, 2, 1, "", "get_params"], [318, 2, 1, "", "predicted"], [318, 2, 1, "", "r_square"], [318, 2, 1, "", "residuals"], [318, 2, 1, "", "set_fit_request"], [318, 2, 1, "", "set_output"], [318, 2, 1, "", "set_params"]], "nilearn.glm.second_level": [[331, 1, 1, "", "SecondLevelModel"], [332, 3, 1, "", "make_second_level_design_matrix"], [333, 3, 1, "", "non_parametric_inference"]], "nilearn.glm.second_level.SecondLevelModel": [[331, 2, 1, "", "__init__"], [331, 2, 1, "", "compute_contrast"], [331, 2, 1, "", "fit"], [331, 2, 1, "", "fit_transform"], [331, 2, 1, "", "generate_report"], [331, 2, 1, "", "get_metadata_routing"], [331, 2, 1, "", "get_params"], [331, 2, 1, "", "predicted"], [331, 2, 1, "", "r_square"], [331, 2, 1, "", "residuals"], [331, 2, 1, "", "set_fit_request"], [331, 2, 1, "", "set_output"], [331, 2, 1, "", "set_params"]], "nilearn.image": [[335, 3, 1, "", "binarize_img"], [336, 3, 1, "", "clean_img"], [337, 3, 1, "", "concat_imgs"], [338, 3, 1, "", "coord_transform"], [339, 3, 1, "", "copy_img"], [340, 3, 1, "", "crop_img"], [341, 3, 1, "", "get_data"], [342, 3, 1, "", "high_variance_confounds"], [343, 3, 1, "", "index_img"], [344, 3, 1, "", "iter_img"], [345, 3, 1, "", "largest_connected_component_img"], [346, 3, 1, "", "load_img"], [347, 3, 1, "", "math_img"], [348, 3, 1, "", "mean_img"], [349, 3, 1, "", "new_img_like"], [350, 3, 1, "", "reorder_img"], [351, 3, 1, "", "resample_img"], [352, 3, 1, "", "resample_to_img"], [353, 3, 1, "", "smooth_img"], [354, 3, 1, "", "swap_img_hemispheres"], [355, 3, 1, "", "threshold_img"]], "nilearn.interfaces": [[475, 0, 0, "-", "bids"], [475, 0, 0, "-", "fmriprep"], [475, 0, 0, "-", "fsl"]], "nilearn.interfaces.bids": [[356, 3, 1, "", "get_bids_files"], [357, 3, 1, "", "parse_bids_filename"], [358, 3, 1, "", "save_glm_to_bids"]], "nilearn.interfaces.fmriprep": [[359, 3, 1, "", "load_confounds"], [360, 3, 1, "", "load_confounds_strategy"]], "nilearn.interfaces.fsl": [[361, 3, 1, "", "get_design_from_fslmat"]], "nilearn.maskers": [[362, 1, 1, "", "BaseMasker"], [363, 1, 1, "", "MultiNiftiLabelsMasker"], [364, 1, 1, "", "MultiNiftiMapsMasker"], [365, 1, 1, "", "MultiNiftiMasker"], [366, 1, 1, "", "NiftiLabelsMasker"], [367, 1, 1, "", "NiftiMapsMasker"], [368, 1, 1, "", "NiftiMasker"], [369, 1, 1, "", "NiftiSpheresMasker"], [370, 1, 1, "", "SurfaceLabelsMasker"], [371, 1, 1, "", "SurfaceMapsMasker"], [372, 1, 1, "", "SurfaceMasker"]], "nilearn.maskers.BaseMasker": [[362, 2, 1, "", "__init__"], [362, 2, 1, "", "fit"], [362, 2, 1, "", "fit_transform"], [362, 2, 1, "", "get_metadata_routing"], [362, 2, 1, "", "get_params"], [362, 2, 1, "", "inverse_transform"], [362, 2, 1, "", "set_fit_request"], [362, 2, 1, "", "set_output"], [362, 2, 1, "", "set_params"], [362, 2, 1, "", "set_transform_request"], [362, 2, 1, "", "transform"], [362, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiLabelsMasker": [[363, 2, 1, "", "__init__"], [363, 2, 1, "", "fit"], [363, 2, 1, "", "fit_transform"], [363, 2, 1, "", "generate_report"], [363, 2, 1, "", "get_metadata_routing"], [363, 2, 1, "", "get_params"], [363, 2, 1, "", "inverse_transform"], [363, 2, 1, "", "set_fit_request"], [363, 2, 1, "", "set_inverse_transform_request"], [363, 2, 1, "", "set_output"], [363, 2, 1, "", "set_params"], [363, 2, 1, "", "set_transform_request"], [363, 2, 1, "", "transform"], [363, 2, 1, "", "transform_imgs"], [363, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiMapsMasker": [[364, 2, 1, "", "__init__"], [364, 2, 1, "", "fit"], [364, 2, 1, "", "fit_transform"], [364, 2, 1, "", "generate_report"], [364, 2, 1, "", "get_metadata_routing"], [364, 2, 1, "", "get_params"], [364, 2, 1, "", "inverse_transform"], [364, 2, 1, "", "set_fit_request"], [364, 2, 1, "", "set_inverse_transform_request"], [364, 2, 1, "", "set_output"], [364, 2, 1, "", "set_params"], [364, 2, 1, "", "set_transform_request"], [364, 2, 1, "", "transform"], [364, 2, 1, "", "transform_imgs"], [364, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.MultiNiftiMasker": [[365, 2, 1, "", "__init__"], [365, 2, 1, "", "fit"], [365, 2, 1, "", "fit_transform"], [365, 2, 1, "", "generate_report"], [365, 2, 1, "", "get_metadata_routing"], [365, 2, 1, "", "get_params"], [365, 2, 1, "", "inverse_transform"], [365, 2, 1, "", "set_fit_request"], [365, 2, 1, "", "set_output"], [365, 2, 1, "", "set_params"], [365, 2, 1, "", "set_transform_request"], [365, 2, 1, "", "transform"], [365, 2, 1, "", "transform_imgs"], [365, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiLabelsMasker": [[366, 2, 1, "", "__init__"], [366, 2, 1, "", "fit"], [366, 2, 1, "", "fit_transform"], [366, 2, 1, "", "generate_report"], [366, 2, 1, "", "get_metadata_routing"], [366, 2, 1, "", "get_params"], [366, 2, 1, "", "inverse_transform"], [366, 2, 1, "", "set_fit_request"], [366, 2, 1, "", "set_inverse_transform_request"], [366, 2, 1, "", "set_output"], [366, 2, 1, "", "set_params"], [366, 2, 1, "", "set_transform_request"], [366, 2, 1, "", "transform"], [366, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiMapsMasker": [[367, 2, 1, "", "__init__"], [367, 2, 1, "", "fit"], [367, 2, 1, "", "fit_transform"], [367, 2, 1, "", "generate_report"], [367, 2, 1, "", "get_metadata_routing"], [367, 2, 1, "", "get_params"], [367, 2, 1, "", "inverse_transform"], [367, 2, 1, "", "set_fit_request"], [367, 2, 1, "", "set_inverse_transform_request"], [367, 2, 1, "", "set_output"], [367, 2, 1, "", "set_params"], [367, 2, 1, "", "set_transform_request"], [367, 2, 1, "", "transform"], [367, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiMasker": [[368, 2, 1, "", "__init__"], [368, 2, 1, "", "fit"], [368, 2, 1, "", "fit_transform"], [368, 2, 1, "", "generate_report"], [368, 2, 1, "", "get_metadata_routing"], [368, 2, 1, "", "get_params"], [368, 2, 1, "", "inverse_transform"], [368, 2, 1, "", "set_fit_request"], [368, 2, 1, "", "set_output"], [368, 2, 1, "", "set_params"], [368, 2, 1, "", "set_transform_request"], [368, 2, 1, "", "transform"], [368, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.NiftiSpheresMasker": [[369, 2, 1, "", "__init__"], [369, 2, 1, "", "fit"], [369, 2, 1, "", "fit_transform"], [369, 2, 1, "", "generate_report"], [369, 2, 1, "", "get_metadata_routing"], [369, 2, 1, "", "get_params"], [369, 2, 1, "", "inverse_transform"], [369, 2, 1, "", "set_fit_request"], [369, 2, 1, "", "set_inverse_transform_request"], [369, 2, 1, "", "set_output"], [369, 2, 1, "", "set_params"], [369, 2, 1, "", "set_transform_request"], [369, 2, 1, "", "transform"], [369, 2, 1, "", "transform_single_imgs"]], "nilearn.maskers.SurfaceLabelsMasker": [[370, 2, 1, "", "__init__"], [370, 2, 1, "", "fit"], [370, 2, 1, "", "fit_transform"], [370, 2, 1, "", "generate_report"], [370, 2, 1, "", "get_metadata_routing"], [370, 2, 1, "", "get_params"], [370, 2, 1, "", "inverse_transform"], [370, 2, 1, "", "set_fit_request"], [370, 2, 1, "", "set_inverse_transform_request"], [370, 2, 1, "", "set_output"], [370, 2, 1, "", "set_params"], [370, 2, 1, "", "set_transform_request"], [370, 2, 1, "", "transform"]], "nilearn.maskers.SurfaceMapsMasker": [[371, 2, 1, "", "__init__"], [371, 2, 1, "", "fit"], [371, 2, 1, "", "fit_transform"], [371, 2, 1, "", "get_metadata_routing"], [371, 2, 1, "", "get_params"], [371, 2, 1, "", "inverse_transform"], [371, 2, 1, "", "set_fit_request"], [371, 2, 1, "", "set_inverse_transform_request"], [371, 2, 1, "", "set_output"], [371, 2, 1, "", "set_params"], [371, 2, 1, "", "set_transform_request"], [371, 2, 1, "", "transform"]], "nilearn.maskers.SurfaceMasker": [[372, 2, 1, "", "__init__"], [372, 2, 1, "", "fit"], [372, 2, 1, "", "fit_transform"], [372, 2, 1, "", "generate_report"], [372, 2, 1, "", "get_metadata_routing"], [372, 2, 1, "", "get_params"], [372, 2, 1, "", "inverse_transform"], [372, 2, 1, "", "set_fit_request"], [372, 2, 1, "", "set_inverse_transform_request"], [372, 2, 1, "", "set_output"], [372, 2, 1, "", "set_params"], [372, 2, 1, "", "set_transform_request"], [372, 2, 1, "", "transform"]], "nilearn.masking": [[373, 3, 1, "", "apply_mask"], [374, 3, 1, "", "compute_background_mask"], [375, 3, 1, "", "compute_brain_mask"], [376, 3, 1, "", "compute_epi_mask"], [377, 3, 1, "", "compute_multi_background_mask"], [378, 3, 1, "", "compute_multi_brain_mask"], [379, 3, 1, "", "compute_multi_epi_mask"], [380, 3, 1, "", "intersect_masks"], [381, 3, 1, "", "unmask"]], "nilearn.mass_univariate": [[382, 3, 1, "", "permuted_ols"]], "nilearn.plotting": [[479, 0, 0, "-", "displays"], [413, 3, 1, "", "find_cut_slices"], [414, 3, 1, "", "find_parcellation_cut_coords"], [415, 3, 1, "", "find_probabilistic_atlas_cut_coords"], [416, 3, 1, "", "find_xyz_cut_coords"], [417, 3, 1, "", "plot_anat"], [418, 3, 1, "", "plot_carpet"], [419, 3, 1, "", "plot_connectome"], [420, 3, 1, "", "plot_contrast_matrix"], [421, 3, 1, "", "plot_design_matrix"], [422, 3, 1, "", "plot_design_matrix_correlation"], [423, 3, 1, "", "plot_epi"], [424, 3, 1, "", "plot_event"], [425, 3, 1, "", "plot_glass_brain"], [426, 3, 1, "", "plot_img"], [427, 3, 1, "", "plot_img_comparison"], [428, 3, 1, "", "plot_img_on_surf"], [429, 3, 1, "", "plot_markers"], [430, 3, 1, "", "plot_matrix"], [431, 3, 1, "", "plot_prob_atlas"], [432, 3, 1, "", "plot_roi"], [433, 3, 1, "", "plot_stat_map"], [434, 3, 1, "", "plot_surf"], [435, 3, 1, "", "plot_surf_contours"], [436, 3, 1, "", "plot_surf_roi"], [437, 3, 1, "", "plot_surf_stat_map"], [438, 3, 1, "", "show"], [439, 3, 1, "", "view_connectome"], [440, 3, 1, "", "view_img"], [441, 3, 1, "", "view_img_on_surf"], [442, 3, 1, "", "view_markers"], [443, 3, 1, "", "view_surf"]], "nilearn.plotting.displays": [[383, 1, 1, "", "BaseAxes"], [384, 1, 1, "", "BaseSlicer"], [385, 1, 1, "", "CutAxes"], [386, 1, 1, "", "GlassBrainAxes"], [387, 1, 1, "", "LProjector"], [388, 1, 1, "", "LRProjector"], [389, 1, 1, "", "LYRProjector"], [390, 1, 1, "", "LYRZProjector"], [391, 1, 1, "", "LZRProjector"], [392, 1, 1, "", "LZRYProjector"], [393, 1, 1, "", "MosaicSlicer"], [394, 1, 1, "", "OrthoProjector"], [395, 1, 1, "", "OrthoSlicer"], [396, 1, 1, "", "PlotlySurfaceFigure"], [397, 1, 1, "", "RProjector"], [398, 1, 1, "", "TiledSlicer"], [399, 1, 1, "", "XProjector"], [400, 1, 1, "", "XSlicer"], [401, 1, 1, "", "XZProjector"], [402, 1, 1, "", "XZSlicer"], [403, 1, 1, "", "YProjector"], [404, 1, 1, "", "YSlicer"], [405, 1, 1, "", "YXProjector"], [406, 1, 1, "", "YXSlicer"], [407, 1, 1, "", "YZProjector"], [408, 1, 1, "", "YZSlicer"], [409, 1, 1, "", "ZProjector"], [410, 1, 1, "", "ZSlicer"], [411, 3, 1, "", "get_projector"], [412, 3, 1, "", "get_slicer"]], "nilearn.plotting.displays.BaseAxes": [[383, 2, 1, "", "__init__"], [383, 2, 1, "", "add_object_bounds"], [383, 2, 1, "", "draw_2d"], [383, 2, 1, "", "draw_left_right"], [383, 2, 1, "", "draw_position"], [383, 2, 1, "", "draw_scale_bar"], [383, 2, 1, "", "get_object_bounds"], [383, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.BaseSlicer": [[384, 2, 1, "", "__init__"], [384, 2, 1, "", "add_contours"], [384, 2, 1, "", "add_edges"], [384, 2, 1, "", "add_markers"], [384, 2, 1, "", "add_overlay"], [384, 2, 1, "", "annotate"], [384, 4, 1, "", "black_bg"], [384, 4, 1, "", "brain_color"], [384, 2, 1, "", "close"], [384, 2, 1, "", "find_cut_coords"], [384, 2, 1, "", "init_with_figure"], [384, 2, 1, "", "savefig"], [384, 2, 1, "", "title"]], "nilearn.plotting.displays.CutAxes": [[385, 2, 1, "", "__init__"], [385, 2, 1, "", "add_object_bounds"], [385, 2, 1, "", "draw_2d"], [385, 2, 1, "", "draw_left_right"], [385, 2, 1, "", "draw_position"], [385, 2, 1, "", "draw_scale_bar"], [385, 2, 1, "", "get_object_bounds"], [385, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.GlassBrainAxes": [[386, 2, 1, "", "__init__"], [386, 2, 1, "", "add_object_bounds"], [386, 2, 1, "", "draw_2d"], [386, 2, 1, "", "draw_left_right"], [386, 2, 1, "", "draw_position"], [386, 2, 1, "", "draw_scale_bar"], [386, 2, 1, "", "get_object_bounds"], [386, 2, 1, "", "transform_to_2d"]], "nilearn.plotting.displays.LProjector": [[387, 2, 1, "", "__init__"], [387, 2, 1, "", "add_contours"], [387, 2, 1, "", "add_edges"], [387, 2, 1, "", "add_graph"], [387, 2, 1, "", "add_markers"], [387, 2, 1, "", "add_overlay"], [387, 2, 1, "", "annotate"], [387, 4, 1, "", "black_bg"], [387, 4, 1, "", "brain_color"], [387, 2, 1, "", "close"], [387, 2, 1, "", "draw_cross"], [387, 2, 1, "", "find_cut_coords"], [387, 2, 1, "", "init_with_figure"], [387, 2, 1, "", "savefig"], [387, 2, 1, "", "title"]], "nilearn.plotting.displays.LRProjector": [[388, 2, 1, "", "__init__"], [388, 2, 1, "", "add_contours"], [388, 2, 1, "", "add_edges"], [388, 2, 1, "", "add_graph"], [388, 2, 1, "", "add_markers"], [388, 2, 1, "", "add_overlay"], [388, 2, 1, "", "annotate"], [388, 4, 1, "", "black_bg"], [388, 4, 1, "", "brain_color"], [388, 2, 1, "", "close"], [388, 2, 1, "", "draw_cross"], [388, 2, 1, "", "find_cut_coords"], [388, 2, 1, "", "init_with_figure"], [388, 2, 1, "", "savefig"], [388, 2, 1, "", "title"]], "nilearn.plotting.displays.LYRProjector": [[389, 2, 1, "", "__init__"], [389, 2, 1, "", "add_contours"], [389, 2, 1, "", "add_edges"], [389, 2, 1, "", "add_graph"], [389, 2, 1, "", "add_markers"], [389, 2, 1, "", "add_overlay"], [389, 2, 1, "", "annotate"], [389, 4, 1, "", "black_bg"], [389, 4, 1, "", "brain_color"], [389, 2, 1, "", "close"], [389, 2, 1, "", "draw_cross"], [389, 2, 1, "", "find_cut_coords"], [389, 2, 1, "", "init_with_figure"], [389, 2, 1, "", "savefig"], [389, 2, 1, "", "title"]], "nilearn.plotting.displays.LYRZProjector": [[390, 2, 1, "", "__init__"], [390, 2, 1, "", "add_contours"], [390, 2, 1, "", "add_edges"], [390, 2, 1, "", "add_graph"], [390, 2, 1, "", "add_markers"], [390, 2, 1, "", "add_overlay"], [390, 2, 1, "", "annotate"], [390, 4, 1, "", "black_bg"], [390, 4, 1, "", "brain_color"], [390, 2, 1, "", "close"], [390, 2, 1, "", "draw_cross"], [390, 2, 1, "", "find_cut_coords"], [390, 2, 1, "", "init_with_figure"], [390, 2, 1, "", "savefig"], [390, 2, 1, "", "title"]], "nilearn.plotting.displays.LZRProjector": [[391, 2, 1, "", "__init__"], [391, 2, 1, "", "add_contours"], [391, 2, 1, "", "add_edges"], [391, 2, 1, "", "add_graph"], [391, 2, 1, "", "add_markers"], [391, 2, 1, "", "add_overlay"], [391, 2, 1, "", "annotate"], [391, 4, 1, "", "black_bg"], [391, 4, 1, "", "brain_color"], [391, 2, 1, "", "close"], [391, 2, 1, "", "draw_cross"], [391, 2, 1, "", "find_cut_coords"], [391, 2, 1, "", "init_with_figure"], [391, 2, 1, "", "savefig"], [391, 2, 1, "", "title"]], "nilearn.plotting.displays.LZRYProjector": [[392, 2, 1, "", "__init__"], [392, 2, 1, "", "add_contours"], [392, 2, 1, "", "add_edges"], [392, 2, 1, "", "add_graph"], [392, 2, 1, "", "add_markers"], [392, 2, 1, "", "add_overlay"], [392, 2, 1, "", "annotate"], [392, 4, 1, "", "black_bg"], [392, 4, 1, "", "brain_color"], [392, 2, 1, "", "close"], [392, 2, 1, "", "draw_cross"], [392, 2, 1, "", "find_cut_coords"], [392, 2, 1, "", "init_with_figure"], [392, 2, 1, "", "savefig"], [392, 2, 1, "", "title"]], "nilearn.plotting.displays.MosaicSlicer": [[393, 2, 1, "", "__init__"], [393, 2, 1, "", "add_contours"], [393, 2, 1, "", "add_edges"], [393, 2, 1, "", "add_markers"], [393, 2, 1, "", "add_overlay"], [393, 2, 1, "", "annotate"], [393, 4, 1, "", "black_bg"], [393, 4, 1, "", "brain_color"], [393, 2, 1, "", "close"], [393, 2, 1, "", "draw_cross"], [393, 2, 1, "", "find_cut_coords"], [393, 2, 1, "", "init_with_figure"], [393, 2, 1, "", "savefig"], [393, 2, 1, "", "title"]], "nilearn.plotting.displays.OrthoProjector": [[394, 2, 1, "", "__init__"], [394, 2, 1, "", "add_contours"], [394, 2, 1, "", "add_edges"], [394, 2, 1, "", "add_graph"], [394, 2, 1, "", "add_markers"], [394, 2, 1, "", "add_overlay"], [394, 2, 1, "", "annotate"], [394, 4, 1, "", "black_bg"], [394, 4, 1, "", "brain_color"], [394, 2, 1, "", "close"], [394, 2, 1, "", "draw_cross"], [394, 2, 1, "", "find_cut_coords"], [394, 2, 1, "", "init_with_figure"], [394, 2, 1, "", "savefig"], [394, 2, 1, "", "title"]], "nilearn.plotting.displays.OrthoSlicer": [[395, 2, 1, "", "__init__"], [395, 2, 1, "", "add_contours"], [395, 2, 1, "", "add_edges"], [395, 2, 1, "", "add_markers"], [395, 2, 1, "", "add_overlay"], [395, 2, 1, "", "annotate"], [395, 4, 1, "", "black_bg"], [395, 4, 1, "", "brain_color"], [395, 2, 1, "", "close"], [395, 2, 1, "", "draw_cross"], [395, 2, 1, "", "find_cut_coords"], [395, 2, 1, "", "init_with_figure"], [395, 2, 1, "", "savefig"], [395, 2, 1, "", "title"]], "nilearn.plotting.displays.PlotlySurfaceFigure": [[396, 2, 1, "", "__init__"], [396, 2, 1, "", "add_contours"], [396, 2, 1, "", "savefig"], [396, 2, 1, "", "show"]], "nilearn.plotting.displays.RProjector": [[397, 2, 1, "", "__init__"], [397, 2, 1, "", "add_contours"], [397, 2, 1, "", "add_edges"], [397, 2, 1, "", "add_graph"], [397, 2, 1, "", "add_markers"], [397, 2, 1, "", "add_overlay"], [397, 2, 1, "", "annotate"], [397, 4, 1, "", "black_bg"], [397, 4, 1, "", "brain_color"], [397, 2, 1, "", "close"], [397, 2, 1, "", "draw_cross"], [397, 2, 1, "", "find_cut_coords"], [397, 2, 1, "", "init_with_figure"], [397, 2, 1, "", "savefig"], [397, 2, 1, "", "title"]], "nilearn.plotting.displays.TiledSlicer": [[398, 2, 1, "", "__init__"], [398, 2, 1, "", "add_contours"], [398, 2, 1, "", "add_edges"], [398, 2, 1, "", "add_markers"], [398, 2, 1, "", "add_overlay"], [398, 2, 1, "", "annotate"], [398, 4, 1, "", "black_bg"], [398, 4, 1, "", "brain_color"], [398, 2, 1, "", "close"], [398, 2, 1, "", "draw_cross"], [398, 2, 1, "", "find_cut_coords"], [398, 2, 1, "", "init_with_figure"], [398, 2, 1, "", "savefig"], [398, 2, 1, "", "title"]], "nilearn.plotting.displays.XProjector": [[399, 2, 1, "", "__init__"], [399, 2, 1, "", "add_contours"], [399, 2, 1, "", "add_edges"], [399, 2, 1, "", "add_graph"], [399, 2, 1, "", "add_markers"], [399, 2, 1, "", "add_overlay"], [399, 2, 1, "", "annotate"], [399, 4, 1, "", "black_bg"], [399, 4, 1, "", "brain_color"], [399, 2, 1, "", "close"], [399, 2, 1, "", "draw_cross"], [399, 2, 1, "", "find_cut_coords"], [399, 2, 1, "", "init_with_figure"], [399, 2, 1, "", "savefig"], [399, 2, 1, "", "title"]], "nilearn.plotting.displays.XSlicer": [[400, 2, 1, "", "__init__"], [400, 2, 1, "", "add_contours"], [400, 2, 1, "", "add_edges"], [400, 2, 1, "", "add_markers"], [400, 2, 1, "", "add_overlay"], [400, 2, 1, "", "annotate"], [400, 4, 1, "", "black_bg"], [400, 4, 1, "", "brain_color"], [400, 2, 1, "", "close"], [400, 2, 1, "", "draw_cross"], [400, 2, 1, "", "find_cut_coords"], [400, 2, 1, "", "init_with_figure"], [400, 2, 1, "", "savefig"], [400, 2, 1, "", "title"]], "nilearn.plotting.displays.XZProjector": [[401, 2, 1, "", "__init__"], [401, 2, 1, "", "add_contours"], [401, 2, 1, "", "add_edges"], [401, 2, 1, "", "add_graph"], [401, 2, 1, "", "add_markers"], [401, 2, 1, "", "add_overlay"], [401, 2, 1, "", "annotate"], [401, 4, 1, "", "black_bg"], [401, 4, 1, "", "brain_color"], [401, 2, 1, "", "close"], [401, 2, 1, "", "draw_cross"], [401, 2, 1, "", "find_cut_coords"], [401, 2, 1, "", "init_with_figure"], [401, 2, 1, "", "savefig"], [401, 2, 1, "", "title"]], "nilearn.plotting.displays.XZSlicer": [[402, 2, 1, "", "__init__"], [402, 2, 1, "", "add_contours"], [402, 2, 1, "", "add_edges"], [402, 2, 1, "", "add_markers"], [402, 2, 1, "", "add_overlay"], [402, 2, 1, "", "annotate"], [402, 4, 1, "", "black_bg"], [402, 4, 1, "", "brain_color"], [402, 2, 1, "", "close"], [402, 2, 1, "", "draw_cross"], [402, 2, 1, "", "find_cut_coords"], [402, 2, 1, "", "init_with_figure"], [402, 2, 1, "", "savefig"], [402, 2, 1, "", "title"]], "nilearn.plotting.displays.YProjector": [[403, 2, 1, "", "__init__"], [403, 2, 1, "", "add_contours"], [403, 2, 1, "", "add_edges"], [403, 2, 1, "", "add_graph"], [403, 2, 1, "", "add_markers"], [403, 2, 1, "", "add_overlay"], [403, 2, 1, "", "annotate"], [403, 4, 1, "", "black_bg"], [403, 4, 1, "", "brain_color"], [403, 2, 1, "", "close"], [403, 2, 1, "", "draw_cross"], [403, 2, 1, "", "find_cut_coords"], [403, 2, 1, "", "init_with_figure"], [403, 2, 1, "", "savefig"], [403, 2, 1, "", "title"]], "nilearn.plotting.displays.YSlicer": [[404, 2, 1, "", "__init__"], [404, 2, 1, "", "add_contours"], [404, 2, 1, "", "add_edges"], [404, 2, 1, "", "add_markers"], [404, 2, 1, "", "add_overlay"], [404, 2, 1, "", "annotate"], [404, 4, 1, "", "black_bg"], [404, 4, 1, "", "brain_color"], [404, 2, 1, "", "close"], [404, 2, 1, "", "draw_cross"], [404, 2, 1, "", "find_cut_coords"], [404, 2, 1, "", "init_with_figure"], [404, 2, 1, "", "savefig"], [404, 2, 1, "", "title"]], "nilearn.plotting.displays.YXProjector": [[405, 2, 1, "", "__init__"], [405, 2, 1, "", "add_contours"], [405, 2, 1, "", "add_edges"], [405, 2, 1, "", "add_graph"], [405, 2, 1, "", "add_markers"], [405, 2, 1, "", "add_overlay"], [405, 2, 1, "", "annotate"], [405, 4, 1, "", "black_bg"], [405, 4, 1, "", "brain_color"], [405, 2, 1, "", "close"], [405, 2, 1, "", "draw_cross"], [405, 2, 1, "", "find_cut_coords"], [405, 2, 1, "", "init_with_figure"], [405, 2, 1, "", "savefig"], [405, 2, 1, "", "title"]], "nilearn.plotting.displays.YXSlicer": [[406, 2, 1, "", "__init__"], [406, 2, 1, "", "add_contours"], [406, 2, 1, "", "add_edges"], [406, 2, 1, "", "add_markers"], [406, 2, 1, "", "add_overlay"], [406, 2, 1, "", "annotate"], [406, 4, 1, "", "black_bg"], [406, 4, 1, "", "brain_color"], [406, 2, 1, "", "close"], [406, 2, 1, "", "draw_cross"], [406, 2, 1, "", "find_cut_coords"], [406, 2, 1, "", "init_with_figure"], [406, 2, 1, "", "savefig"], [406, 2, 1, "", "title"]], "nilearn.plotting.displays.YZProjector": [[407, 2, 1, "", "__init__"], [407, 2, 1, "", "add_contours"], [407, 2, 1, "", "add_edges"], [407, 2, 1, "", "add_graph"], [407, 2, 1, "", "add_markers"], [407, 2, 1, "", "add_overlay"], [407, 2, 1, "", "annotate"], [407, 4, 1, "", "black_bg"], [407, 4, 1, "", "brain_color"], [407, 2, 1, "", "close"], [407, 2, 1, "", "draw_cross"], [407, 2, 1, "", "find_cut_coords"], [407, 2, 1, "", "init_with_figure"], [407, 2, 1, "", "savefig"], [407, 2, 1, "", "title"]], "nilearn.plotting.displays.YZSlicer": [[408, 2, 1, "", "__init__"], [408, 2, 1, "", "add_contours"], [408, 2, 1, "", "add_edges"], [408, 2, 1, "", "add_markers"], [408, 2, 1, "", "add_overlay"], [408, 2, 1, "", "annotate"], [408, 4, 1, "", "black_bg"], [408, 4, 1, "", "brain_color"], [408, 2, 1, "", "close"], [408, 2, 1, "", "draw_cross"], [408, 2, 1, "", "find_cut_coords"], [408, 2, 1, "", "init_with_figure"], [408, 2, 1, "", "savefig"], [408, 2, 1, "", "title"]], "nilearn.plotting.displays.ZProjector": [[409, 2, 1, "", "__init__"], [409, 2, 1, "", "add_contours"], [409, 2, 1, "", "add_edges"], [409, 2, 1, "", "add_graph"], [409, 2, 1, "", "add_markers"], [409, 2, 1, "", "add_overlay"], [409, 2, 1, "", "annotate"], [409, 4, 1, "", "black_bg"], [409, 4, 1, "", "brain_color"], [409, 2, 1, "", "close"], [409, 2, 1, "", "draw_cross"], [409, 2, 1, "", "find_cut_coords"], [409, 2, 1, "", "init_with_figure"], [409, 2, 1, "", "savefig"], [409, 2, 1, "", "title"]], "nilearn.plotting.displays.ZSlicer": [[410, 2, 1, "", "__init__"], [410, 2, 1, "", "add_contours"], [410, 2, 1, "", "add_edges"], [410, 2, 1, "", "add_markers"], [410, 2, 1, "", "add_overlay"], [410, 2, 1, "", "annotate"], [410, 4, 1, "", "black_bg"], [410, 4, 1, "", "brain_color"], [410, 2, 1, "", "close"], [410, 2, 1, "", "draw_cross"], [410, 2, 1, "", "find_cut_coords"], [410, 2, 1, "", "init_with_figure"], [410, 2, 1, "", "savefig"], [410, 2, 1, "", "title"]], "nilearn.regions": [[444, 1, 1, "", "HierarchicalKMeans"], [445, 1, 1, "", "Parcellations"], [446, 1, 1, "", "ReNA"], [447, 1, 1, "", "RegionExtractor"], [448, 3, 1, "", "connected_label_regions"], [449, 3, 1, "", "connected_regions"], [450, 3, 1, "", "img_to_signals_labels"], [451, 3, 1, "", "img_to_signals_maps"], [452, 3, 1, "", "recursive_neighbor_agglomeration"], [453, 3, 1, "", "signals_to_img_labels"], [454, 3, 1, "", "signals_to_img_maps"]], "nilearn.regions.HierarchicalKMeans": [[444, 2, 1, "", "__init__"], [444, 2, 1, "", "fit"], [444, 2, 1, "", "fit_predict"], [444, 2, 1, "", "fit_transform"], [444, 2, 1, "", "get_metadata_routing"], [444, 2, 1, "", "get_params"], [444, 2, 1, "", "inverse_transform"], [444, 2, 1, "", "set_inverse_transform_request"], [444, 2, 1, "", "set_output"], [444, 2, 1, "", "set_params"], [444, 2, 1, "", "transform"]], "nilearn.regions.Parcellations": [[445, 5, 1, "", "VALID_METHODS"], [445, 2, 1, "", "__init__"], [445, 2, 1, "", "fit"], [445, 2, 1, "", "fit_transform"], [445, 2, 1, "", "get_metadata_routing"], [445, 2, 1, "", "get_params"], [445, 2, 1, "", "inverse_transform"], [445, 2, 1, "", "score"], [445, 2, 1, "", "set_fit_request"], [445, 2, 1, "", "set_inverse_transform_request"], [445, 2, 1, "", "set_output"], [445, 2, 1, "", "set_params"], [445, 2, 1, "", "set_score_request"], [445, 2, 1, "", "set_transform_request"], [445, 2, 1, "", "transform"]], "nilearn.regions.ReNA": [[446, 2, 1, "", "__init__"], [446, 2, 1, "", "fit"], [446, 2, 1, "", "fit_predict"], [446, 2, 1, "", "fit_transform"], [446, 2, 1, "", "get_metadata_routing"], [446, 2, 1, "", "get_params"], [446, 2, 1, "", "inverse_transform"], [446, 2, 1, "", "set_inverse_transform_request"], [446, 2, 1, "", "set_output"], [446, 2, 1, "", "set_params"], [446, 2, 1, "", "transform"]], "nilearn.regions.RegionExtractor": [[447, 2, 1, "", "__init__"], [447, 2, 1, "", "fit"], [447, 2, 1, "", "fit_transform"], [447, 2, 1, "", "generate_report"], [447, 2, 1, "", "get_metadata_routing"], [447, 2, 1, "", "get_params"], [447, 2, 1, "", "inverse_transform"], [447, 2, 1, "", "set_fit_request"], [447, 2, 1, "", "set_inverse_transform_request"], [447, 2, 1, "", "set_output"], [447, 2, 1, "", "set_params"], [447, 2, 1, "", "set_transform_request"], [447, 2, 1, "", "transform"], [447, 2, 1, "", "transform_single_imgs"]], "nilearn.reporting": [[455, 1, 1, "", "HTMLReport"], [456, 3, 1, "", "get_clusters_table"], [457, 3, 1, "", "make_glm_report"]], "nilearn.reporting.HTMLReport": [[455, 2, 1, "", "__init__"], [455, 2, 1, "", "get_iframe"], [455, 2, 1, "", "get_standalone"], [455, 2, 1, "", "open_in_browser"], [455, 2, 1, "", "resize"], [455, 2, 1, "", "save_as_html"]], "nilearn.signal": [[458, 3, 1, "", "butterworth"], [459, 3, 1, "", "clean"], [460, 3, 1, "", "high_variance_confounds"]], "nilearn.surface": [[461, 1, 1, "", "FileMesh"], [462, 1, 1, "", "InMemoryMesh"], [463, 1, 1, "", "PolyData"], [464, 1, 1, "", "PolyMesh"], [465, 1, 1, "", "SurfaceImage"], [466, 1, 1, "", "SurfaceMesh"], [467, 3, 1, "", "load_surf_data"], [468, 3, 1, "", "load_surf_mesh"], [469, 3, 1, "", "vol_to_surf"]], "nilearn.surface.FileMesh": [[461, 2, 1, "", "__init__"], [461, 4, 1, "", "coordinates"], [461, 4, 1, "", "faces"], [461, 5, 1, "", "file_path"], [461, 2, 1, "", "loaded"], [461, 5, 1, "", "n_vertices"], [461, 2, 1, "", "to_gifti"]], "nilearn.surface.InMemoryMesh": [[462, 2, 1, "", "__init__"], [462, 5, 1, "", "coordinates"], [462, 5, 1, "", "faces"], [462, 5, 1, "", "n_vertices"], [462, 2, 1, "", "to_gifti"]], "nilearn.surface.PolyData": [[463, 2, 1, "", "__init__"], [463, 4, 1, "", "shape"], [463, 2, 1, "", "to_filename"]], "nilearn.surface.PolyMesh": [[464, 2, 1, "", "__init__"], [464, 5, 1, "", "n_vertices"], [464, 2, 1, "", "to_filename"]], "nilearn.surface.SurfaceImage": [[465, 2, 1, "", "__init__"], [465, 2, 1, "", "from_volume"], [465, 4, 1, "", "shape"]], "nilearn.surface.SurfaceMesh": [[466, 2, 1, "", "__init__"], [466, 5, 1, "", "coordinates"], [466, 5, 1, "", "faces"], [466, 5, 1, "", "n_vertices"], [466, 2, 1, "", "to_gifti"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "property", "Python property"], "5": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:property", "5": "py:attribute"}, "terms": {"": [0, 2, 3, 4, 6, 7, 10, 17, 24, 30, 31, 34, 35, 40, 42, 43, 46, 50, 51, 52, 57, 58, 65, 66, 67, 68, 69, 71, 72, 73, 76, 78, 79, 80, 81, 87, 92, 93, 94, 95, 101, 103, 104, 105, 111, 115, 118, 127, 128, 136, 143, 153, 154, 158, 161, 165, 168, 169, 171, 172, 174, 175, 176, 177, 178, 180, 181, 183, 184, 185, 190, 191, 192, 193, 194, 195, 197, 198, 201, 202, 209, 212, 216, 217, 218, 220, 222, 224, 225, 228, 229, 230, 231, 232, 240, 242, 243, 251, 253, 254, 256, 257, 263, 268, 270, 273, 275, 277, 296, 297, 298, 299, 300, 301, 302, 303, 304, 308, 310, 311, 318, 331, 335, 336, 345, 347, 351, 352, 353, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 418, 419, 428, 429, 434, 435, 436, 437, 439, 441, 443, 444, 445, 446, 447, 457, 459, 470, 484, 487], "0": [2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 117, 158, 159, 162, 164, 170, 171, 172, 173, 174, 181, 183, 184, 185, 192, 195, 196, 200, 204, 205, 206, 207, 208, 221, 228, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 340, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 417, 418, 419, 422, 424, 425, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 484, 485, 486], "00": [8, 28, 31, 33, 34, 46, 47, 50, 55, 61, 74, 83, 90, 97, 112, 114, 470, 486], "000": [35, 44, 80, 95, 114, 169], "0000": 172, "000000": [64, 67], "00001": 215, "00002": [115, 194, 241], "000041": 58, "000057": 58, "000076": 58, "00008": [115, 118, 218, 273, 275], "000092": 58, "0001": [301, 302], "000135": 58, "00013746e": 3, "000150": 58, "0002": 172, "000201": 58, "000217": 58, "000223": 58, "000226": 58, "000282": 58, "000285": 58, "000304": 58, "000307": 58, "000313": 58, "000316": 58, "000404": 58, "000418": 58, "000426": 58, "000583": 58, "00058432e": 3, "000590": 58, "000595": 58, "000602": 58, "000668": 58, "000889": 51, "001": [6, 34, 43, 46, 64, 77, 80, 81, 82, 102, 174, 231, 232, 234, 301, 302, 318, 331, 334, 457, 470], "0010042": 12, "0010042_rest_tshift_rpi_voreg_mni": 12, "001049": 58, "001057": 58, "00106993e": 3, "001089": 34, "001315": 50, "00152": [115, 219, 282], "00156": [104, 115, 382], "001565": 51, "00167": [51, 115, 161], "002": [30, 43, 47, 486], "00230270e": 3, "00277145e": 3, "002881": 50, "0029482": [115, 180], "002949": 51, "003": 43, "00338": [115, 223, 229, 250, 254], "003411": 34, "003659": 50, "003907": 34, "004": [42, 43, 115, 195, 216, 272], "004194": 50, "004387": 50, "005": [43, 115, 166, 298, 299], "005065": 6, "00512451": [115, 158, 231], "005349": 34, "00555": 34, "00563468": [46, 115, 170], "00599": [115, 190, 238], "006": [43, 51, 60, 115, 222, 257], "006357": 58, "006364": 58, "00654436e": 3, "006621": 58, "00662563e": 3, "006628": 58, "006757": 34, "007": [43, 58, 115, 158, 159, 215, 217, 248, 271], "007118": 51, "00770897e": 3, "00779": 34, "008": [34, 43], "00839984": [115, 170], "008944": 51, "009": [43, 115, 418], "009083": 58, "009347": 58, "00991743": [115, 170], "00_tutori": [3, 4, 6, 7, 8, 179, 486], "00e": 470, "01": [3, 6, 8, 13, 28, 31, 33, 34, 44, 47, 50, 53, 55, 57, 60, 61, 63, 71, 72, 74, 83, 100, 101, 102, 104, 110, 111, 112, 115, 195, 199, 217, 232, 244, 248, 318, 321, 325, 356, 382, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 470, 471, 486], "010": [23, 43, 50, 115, 163, 199, 252, 303], "010018": 51, "01093944": [115, 162, 447], "011": 43, "011243": 50, "011367": 34, "01147731": [115, 170], "011997": 34, "012": 43, "012477": 50, "013": 43, "013254": 50, "013646": 51, "013652": 51, "014": 43, "014998994819326846": 70, "015": 43, "01524": 34, "015679": 55, "016": [43, 67], "01697241e": 3, "017": 43, "01770704e": 3, "018": [43, 115, 195, 359, 360], "01872696e": 3, "018869405610291833": 70, "019": 43, "019085": 58, "0193": [115, 204, 205, 206, 207, 208, 228, 253, 281], "019374": 58, "01_plot": [12, 16, 24, 28, 179, 441, 486], "01_task": [6, 101, 102, 110], "01d": 3, "01hz": [67, 238], "02": [3, 28, 31, 34, 47, 50, 53, 55, 61, 64, 72, 79, 97, 100, 102, 110, 115, 163, 169, 195, 242, 303, 359, 360, 470, 486], "020": [43, 58, 115, 209, 359, 360], "021": 43, "02149114e": 3, "022": 43, "022868": 55, "023": 43, "023900": 58, "02394": 34, "024": 43, "024188": 58, "024363": 34, "025": 43, "02587": 55, "026": 43, "026078": 58, "026206": 34, "026366": 58, "026579": 34, "027": 43, "027587": 58, "027876": 58, "028": 43, "028052": 34, "02837617e": 3, "029": 43, "02904869": [115, 201, 245], "02913419e": 3, "02_decod": [30, 37, 43, 45, 47, 179, 486], "02_task": 110, "02d": 81, "02g": 72, "03": [3, 28, 31, 33, 34, 43, 46, 47, 50, 55, 58, 61, 72, 74, 92, 97, 102, 110, 112, 115, 169, 178, 333, 359, 360, 382, 470, 471, 486], "030": [43, 96, 97, 486], "03003835e": 3, "031": 43, "032": 43, "03260242e": 3, "03299020e": 3, "033": [43, 115, 195, 211, 263, 289], "033577": 34, "034": 43, "034967": 6, "035": [23, 28, 38, 43, 115, 486], "036": 43, "03624025e": 3, "036247": 34, "03668225e": 3, "037": [43, 115], "038": 43, "038187": 34, "03858624e": 3, "03899690e": 3, "039": [4, 8, 43, 486], "03927401e": 3, "0395": [115, 199], "0396": [115, 199], "03_connect": [49, 50, 51, 52, 57, 61, 146, 157, 179, 486], "03_task": 110, "03cm": 45, "03d": [43, 101], "03g": 76, "04": [3, 28, 31, 33, 34, 47, 50, 51, 55, 58, 61, 72, 74, 83, 102, 110, 115, 158, 159, 171, 217, 248, 359, 360, 460, 470, 471, 486], "040": [43, 46, 47, 486], "04051929e": 3, "04067802e": 3, "041": [43, 115, 169], "042": [43, 115, 359, 360, 460], "04261017e": 3, "043": 43, "043015": 34, "043724": 64, "044": 43, "044073": 55, "04407649e": 3, "044286": 34, "045": 43, "045756026122036844": 70, "046": 43, "04617896e": 3, "0463": 34, "047": 43, "0471754951": [115, 310, 311], "048": [43, 115, 359], "04806012e": 3, "04858610e": 3, "048779": 55, "049": 43, "049211": 58, "049458": 58, "049556260499619545": 70, "04965599e": 3, "04_glm_first_level": [64, 71, 72, 73, 74, 486], "04_task": 110, "05": [6, 13, 28, 31, 33, 34, 46, 47, 50, 53, 55, 61, 72, 76, 77, 78, 80, 82, 100, 110, 112, 174, 192, 193, 194, 198, 217, 220, 221, 223, 226, 227, 228, 229, 239, 240, 243, 248, 249, 250, 253, 254, 277, 279, 280, 282, 308, 310, 311, 313, 470, 471, 486], "050": 43, "0504136102": [115, 360], "051": 43, "052": [43, 115, 197, 268], "05201": [115, 164], "052775": 58, "05279832e": 3, "053": 43, "05302044e": 3, "053022": 58, "054": [43, 115, 169], "054759": 58, "055": 43, "055006": 58, "056": 43, "056165": 64, "05659655e": 3, "057": 43, "057023": 55, "05703874e": 3, "058": 43, "059": 43, "059988": 58, "05_advanc": [146, 157], "05_glm_second_level": [83, 486], "05_task": 110, "06": [23, 33, 34, 61, 72, 83, 92, 97, 115, 171, 195, 199, 242, 252, 300, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 433, 440, 470, 471, 486], "060": [43, 77, 104, 115, 313, 382], "0600244103": [115, 169, 180], "061": [43, 115, 178, 333, 382], "061121": 34, "06136": 34, "06154470e": 3, "062": [43, 53, 100, 115, 170], "062316": 55, "062676": 6, "063": [43, 115, 158], "063614": 34, "064": [43, 115, 359, 360], "06448772e": 3, "065": 43, "06522283e": 3, "065223": 55, "066": [43, 58, 61, 486], "066189": [115, 305, 309], "06665441e": 3, "067": 43, "068": [43, 81, 83, 486], "06832387e": 3, "069": 43, "06_manipulating_imag": [87, 92, 95, 97, 486], "06mm": 45, "07": [28, 31, 33, 34, 38, 51, 61, 71, 72, 77, 92, 97, 115, 165, 195, 211, 223, 250, 263, 289, 313, 446, 452, 470, 486], "070": 43, "07013831e": 3, "07071": 34, "071": 43, "072": 43, "07246584e": 3, "073": [43, 58, 115, 165, 360], "07300127e": 3, "07350015": [115, 382], "07355491e": 3, "074": [43, 51, 61, 486], "075": 43, "07544817e": 3, "075540": 58, "075787": 58, "076": 43, "07601973e": 3, "076144": 34, "077": 43, "07737": 34, "078": 43, "078390": 64, "079": 43, "079389": 64, "07_advanc": [101, 102, 110, 112, 486], "08": [28, 31, 33, 34, 47, 51, 72, 74, 97, 115, 158, 191, 195, 270, 340, 359, 418, 470, 471, 486], "080": [43, 115], "08010326e": 3, "081": 43, "0811879106": [115, 191, 270], "081260": 6, "082": [43, 115, 195, 242], "083": 43, "084": 43, "085": 43, "08511043e": 3, "086": 43, "087": 43, "087084": 55, "088": 43, "08855528e": 3, "08861776e": 3, "089": 43, "089762": 55, "089793": 50, "09": [8, 31, 33, 34, 47, 51, 60, 115, 197, 199, 211, 220, 222, 244, 257, 263, 268, 277, 289, 318, 331, 457, 470, 471, 486], "090": 43, "09027679e": 3, "0905267106": [115, 225, 251], "0908073106": [115, 195], "090935": 6, "091": 43, "09108484e": 3, "091521": 34, "09180208e": 3, "092": 43, "093": 43, "093039": 34, "094": 43, "09405796e": 3, "09407574e": 3, "09423273e": 3, "095": 43, "095605": 34, "096": 43, "097": [43, 106, 112, 486], "09702803e": 3, "0978": [115, 192, 240], "098": 43, "0983": 34, "09849": 34, "09867564e": 3, "099": 43, "09931480e": 3, "09951420e": 3, "0a0": 143, "0min": [34, 50, 51, 54, 55, 56, 58, 60], "0mm": [85, 180], "0rc1": [155, 157], "0x757bef587520": 50, "0x757bef5a0100": 54, "0x757c018343d0": 51, "0x757c0230b220": 58, "0x757c02827b80": 93, "0x757c0419f2b0": 72, "0x757c05295ca0": 50, "0x757c05620100": 51, "0x757c05620280": 51, "0x757c0735bcd0": 60, "0x757c07711430": 51, "0x757c07be6fd0": 34, "0x757c081a4730": 37, "0x757c081ad340": 37, "0x757c11f8cc70": 51, "0x757c11f960a0": 54, "0x757c1262e970": 58, "0x757c1270c400": 76, "0x757c127955b0": 51, "0x757c14d14df0": 53, "0x757c2157ca30": 15, "0x757c21810640": 52, "0x757c2186f880": 15, "0x757c21883d00": 95, "0x757c249d5820": 58, "0x757c26c1ba30": 58, "0x757c26c62b20": 58, "0x757c26c9d5e0": 42, "0x757c26d00550": 58, "0x757c26d793d0": 60, "0x757c26d81640": 58, "0x757c26d96220": 51, "0x757c26d96f10": 51, "0x757c26da6e20": 60, "0x757c26decfd0": 55, "0x757c29c26340": 51, "0x757c29d2f700": 34, "0x757c29d2fa30": 34, "0x757c2c166760": 60, "0x757c2c17d370": 51, "0x757c2ebf41f0": 34, "0x757c2ebf4a30": 34, "0x757c2ee7fb20": 95, "0x757c3566d9a0": 15, "0x757c358141f0": 16, "0x757c358172b0": 51, "0x757c35817550": 51, "0x757c358177c0": 51, "0x757c35817a90": 51, "0x757c35817c70": 60, "0x757c35a26700": 34, "0x757c35a86ca0": 26, "0x757c35a99d30": 76, "0x757c41421ee0": 4, "0x757c48498070": 82, "0x757c4857b160": 54, "0x757c485d21f0": 95, "0x757c485d7f10": 87, "0x757c48684760": 10, "0x757c486f9760": 34, "0x757c4880b5b0": 16, "0x757c4880b670": 90, "0x757c4880bf10": 60, "0x757c488eae50": 58, "0x757c48999610": 34, "0x757c48999bb0": 34, "0x757c48ac07c0": 17, "0x757c48b38f40": 15, "0x757c48b56c70": 34, "0x757c48b79f10": 16, "0x757c4ae0c550": 95, "0x757c4ae17970": 15, "0x757c4aeecee0": 18, "0x757c4af4fa90": 70, "0x757c4b06d2b0": 15, "0x757c4b0767c0": 15, "0x757c4b092490": 58, "0x757c4b0ae3d0": 51, "0x757c4b0c4310": 89, "0x757c4b0c43d0": 72, "0x757c4b0c45e0": 52, "0x757c4b0c49d0": 54, "0x757c4b0ce340": 90, "0x757c4b112b20": 18, "0x757c4b112df0": 17, "0x757c4b158790": 34, "0x757c4b158bb0": 82, "0x757c4b1930d0": 87, "0x757c4b193460": 34, "0x757c4b193b20": 34, "0x757c4b193b50": 34, "0x757c4b1afb20": 82, "0x757c4b1cb280": 17, "0x757c4b25b940": 14, "0x757c4b27c8e0": 16, "0x757c4b2c86a0": 87, "0x757c4b2f23a0": 15, "0x757c4b2f27c0": 82, "0x757c4b2fb7f0": 56, "0x757c4b31a160": 15, "0x757c4b31a8e0": 34, "0x757c4b31ae20": 34, "0x757c4b352580": 54, "0x757c4b39e760": 15, "0x757c4b39ef10": 16, "0x757c4b3b0b20": 58, "0x757c4b3b45b0": 16, "0x757c4b40ab50": 95, "0x757c4b482a60": 16, "0x757c4b482af0": 34, "0x757c4b482cd0": 16, "0x757c4b4865e0": 16, "0x757c4b4866a0": 4, "0x757c4b49fe20": 72, "0x757c4b508820": 41, "0x757c4b517b50": 24, "0x757c4b526400": 34, "0x757c4b5268b0": 34, "0x757c4b526af0": 34, "0x757c4b526b50": 34, "0x757c4b56fe20": 58, "0x757c4b575e80": 3, "0x757c4b5baa30": 51, "0x757c4b5c6700": 11, "0x757c4b5dcd30": 4, "0x757c4d8207f0": 51, "0x757c4d820910": 37, "0x757c4d86aa30": 16, "0x757c4d872430": 2, "0x757c4d8b9790": 51, "0x757c4d8b9880": 17, "0x757c4d8b98e0": 99, "0x757c4d938580": 2, "0x757c4d93a1c0": 16, "0x757c4d93a400": 26, "0x757c4d94cc40": 90, "0x757c4d95b8e0": 52, "0x757c4d99fb50": 14, "0x757c4d9d4cd0": 2, "0x757c4d9dd130": 60, "0x757c4d9dd4c0": 95, "0x757c4dd92e50": 50, "0x757c4de048b0": 34, "0x757c5c881fd0": 18, "0x757c5c8910a0": 55, "0x757c5e4fa730": 11, "0x757c5e4fa8e0": 16, "0x757c5e54f340": 34, "0x757c5e54f430": 17, "0x757c5e5a1100": 53, "0x757c5e5a1250": 34, "0x757c5e5b88e0": 44, "0x757c5e5b8cd0": 4, "0x757c5e5edace": 3, "1006": [115, 192, 199, 240], "1007": [16, 28, 486], "100765": 471, "1008": [3, 8, 30, 47, 115, 158, 231, 486], "1009": [99, 112, 486], "100m": 67, "100mm": 87, "101": [34, 42, 43, 115, 359, 360, 460, 470, 471], "1011": [47, 486], "1012": [28, 38, 47, 486], "1013": [19, 35, 37], "1014": [74, 486], "1015": 63, "10159": [64, 470], "10159_task": 64, "1016": [23, 38, 42, 43, 50, 51, 53, 58, 60, 77, 100, 104, 115, 158, 159, 163, 165, 166, 169, 170, 178, 195, 197, 199, 201, 209, 211, 215, 216, 217, 222, 224, 242, 244, 245, 248, 252, 257, 258, 263, 268, 271, 272, 289, 298, 299, 303, 313, 333, 359, 360, 382, 418, 460], "1019": 10, "102": [34, 42, 43, 115, 219, 282, 292, 360, 470, 471], "10216045e": 3, "1024": [150, 157, 201, 245], "10241322e": 3, "10242": [23, 24, 281, 284, 285, 292, 428, 441, 471], "102714": 55, "102986": 58, "103": [34, 43, 115, 169, 180, 300, 470, 471], "10332206e": 3, "10337702e": 3, "10363602e": 3, "1038": [115, 221, 249, 260, 278], "104": [34, 43, 245, 470, 471], "104194": 58, "1042": [101, 104, 112, 115, 486], "104223": 34, "10426": 276, "104535": 34, "1046": [155, 157], "104956": 34, "105": [8, 11, 20, 27, 28, 34, 43, 61, 65, 68, 73, 74, 79, 83, 85, 89, 91, 94, 97, 108, 112, 470, 471, 486], "1050": [97, 486], "10509354": [115, 382], "1051": [60, 61, 93, 486], "1052": [34, 47, 101, 115, 486], "105373": 58, "105391": 58, "1054": 471, "105651": 58, "1058": [115, 195], "105981": 58, "106": [5, 7, 8, 18, 25, 28, 34, 43, 46, 47, 59, 115, 191, 195, 223, 225, 229, 250, 251, 254, 270, 470, 471, 486], "1062": 471, "1063736": [3, 32, 33, 39, 99, 115, 210, 262], "1064": [17, 28, 115, 195, 486], "106438": 58, "106599": 58, "106742": 58, "106895": 58, "107": [15, 21, 28, 34, 43, 73, 83, 470, 471, 486], "1070": [32, 47, 486], "107012": 58, "107207": 58, "107229": 58, "1073": [115, 169, 180, 191, 195, 225, 251, 270, 360], "10743799e": 3, "107567": 58, "1078": 471, "108": [34, 43, 73, 82, 111, 112, 470, 471, 486], "1080": [115, 382], "108038": 58, "108046": 6, "108058": 58, "108176": 58, "1082": [34, 155, 157], "108211": 58, "108325": 58, "108401": 58, "108415": 58, "108423": 58, "108440": 58, "10844098e": 3, "108591": 58, "108632": 58, "108723": 58, "108875": 58, "108937": 58, "108990": 58, "109": [2, 34, 43, 45, 58, 92, 152, 157, 240, 251, 470, 471, 486], "1090": [50, 471], "109033": 58, "109066": 58, "109090": 58, "109104": 58, "1092": [12, 28, 43, 47, 486], "1093": [71, 115, 158, 191, 199, 223, 244, 250, 270], "1095": 471, "109616": 58, "109631": 58, "1097": [115, 204, 205, 206, 207, 208, 228, 253, 281], "1098": 471, "10a": [64, 470], "10b": 64, "10k": 110, "10mm": 51, "10th": 42, "10x10": [42, 43], "11": [3, 6, 31, 34, 36, 40, 42, 43, 46, 47, 50, 51, 52, 55, 64, 66, 67, 73, 74, 82, 83, 92, 99, 105, 109, 112, 115, 119, 131, 140, 143, 144, 145, 153, 158, 191, 195, 198, 199, 209, 215, 216, 231, 243, 244, 270, 271, 272, 284, 285, 292, 300, 322, 323, 324, 328, 329, 330, 335, 340, 348, 350, 351, 352, 355, 370, 371, 372, 422, 435, 443, 447, 461, 462, 463, 464, 465, 466, 470, 471, 486], "110": [28, 34, 43, 87, 115, 253, 260, 278, 470, 471, 486], "1101": [115, 336, 459], "110240": 58, "110301": 58, "110644": 58, "11072": 92, "1109": [46, 50, 51, 115, 163, 170, 192, 195, 242, 303, 304, 446, 452], "111": [13, 34, 43, 55, 63, 92, 470, 471], "1111": [71, 74, 104, 115, 382, 486], "1112": 190, "1116": 470, "112": [31, 34, 43, 94, 111, 115, 359, 360, 470, 471], "11208": 92, "1122": 471, "1125": [115, 223, 229, 250, 254], "1126": [3, 32, 33, 39, 60, 99, 115, 180, 195, 202, 210, 242, 256, 262], "112a": 34, "112b": 34, "113": [34, 43, 111, 201, 470, 471], "1139": [115, 195, 242], "114": [34, 43, 46, 77, 83, 105, 143, 157, 470, 471, 486], "1143": 471, "11431452e": 3, "114769": 34, "114926": 34, "115": [28, 34, 43, 53, 72, 100, 115, 143, 157, 470, 471, 486], "115105": 34, "1152": [115, 223, 229, 250, 254], "1155": [151, 157], "115557": 34, "1156": 471, "11598825e": 3, "116": [14, 34, 43, 73, 91, 97, 192, 240, 470, 471, 486], "1161": [6, 471], "1162": [115, 220, 225, 251, 277], "116290": [115, 224, 258], "1165": [115, 223, 229, 250, 254], "117": [34, 43, 94, 152, 157, 192, 240, 470, 471], "1170": 471, "117126": [115, 201, 245], "1171599": [115, 180], "117228": 34, "11752": 92, "11760": 92, "1177": [115, 303], "11778379e": 3, "11781883e": 3, "118": [34, 43, 80, 83, 470, 471, 486], "1180": [115, 303], "1181": 34, "1185": [42, 47, 486], "11872": 92, "1188": 470, "118a": 34, "119": [34, 43, 73, 131, 157, 470, 471], "1190": 471, "1194144": [60, 115, 202, 256], "1197": [61, 486], "1198": 57, "11a": [34, 470], "12": [6, 26, 33, 34, 38, 40, 42, 43, 45, 46, 50, 51, 55, 58, 60, 61, 64, 65, 67, 68, 70, 74, 78, 79, 81, 92, 97, 99, 102, 105, 107, 109, 115, 119, 122, 124, 125, 131, 133, 149, 154, 155, 157, 170, 171, 184, 185, 192, 195, 200, 225, 240, 242, 249, 251, 259, 321, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 447, 463, 470, 471, 486], "120": [34, 43, 45, 85, 100, 115, 228, 253, 470, 471], "1206": [115, 171], "1207": [115, 171, 231, 234], "121": [7, 8, 34, 43, 67, 470, 471, 486], "12101177e": 3, "12133715e": 3, "1214": 471, "1215": 471, "122": [14, 28, 34, 43, 67, 73, 93, 119, 157, 195, 242, 259, 470, 471, 486], "12228150e": 3, "1224": [470, 471], "12248861e": 3, "1229": [107, 108], "123": [34, 43, 245, 470, 471], "1230": 471, "12313084e": 3, "123176": 92, "12338510e": 3, "1237": 35, "1238": [137, 157], "12393": 470, "123e": 55, "124": [4, 34, 42, 43, 50, 470, 471], "1242": 172, "124367": 34, "1246": 471, "125": [34, 42, 43, 73, 101, 115, 470, 471], "1255": 471, "1256": [115, 209, 471], "1257": 471, "126": [6, 34, 43, 45, 58, 72, 92, 103, 152, 157, 470, 471], "126069": 34, "1261": 471, "12621019e": 3, "1265": [115, 209], "127": [34, 43, 47, 140, 157, 470, 471, 486], "1271": [115, 195], "1273": 471, "12752": 92, "12758916e": 3, "127944": 55, "128": [34, 39, 43, 65, 67, 69, 85, 93, 106, 150, 157, 201, 245, 470, 471], "12811507e": 3, "1282": [50, 115, 163, 304], "1285": [50, 115, 163, 304], "1285615": 242, "12881964e": 3, "1289": 471, "129": [34, 43, 72, 122, 157, 470, 471], "1290": 471, "1294": [115, 195], "12a": 34, "12mm": 95, "12th": [115, 195], "13": [6, 24, 28, 34, 47, 55, 58, 64, 71, 72, 78, 90, 92, 97, 105, 109, 112, 115, 119, 125, 127, 129, 131, 157, 169, 196, 200, 230, 240, 242, 243, 251, 258, 277, 279, 305, 309, 315, 335, 340, 348, 350, 351, 352, 355, 359, 366, 367, 382, 418, 450, 451, 470, 471, 486], "130": [34, 43, 470, 471], "13035863e": 3, "13040": [115, 225, 251], "1304239304725877": 70, "13045": [115, 225, 251], "1307": [100, 105, 112, 486], "13075925e": 3, "131": [34, 43, 73, 81, 83, 115, 228, 253, 470, 471, 486], "1314": 471, "132": [34, 43, 51, 54, 470, 471], "1326": [40, 47, 486], "13262268e": 3, "1326605169770555e": 70, "1327": 471, "1328": [46, 115, 170], "133": [34, 43, 470, 471], "1335": 471, "1336": [146, 157], "13384214e": 3, "1339": 471, "134": [34, 43, 53, 94, 100, 115, 152, 157, 470, 471], "1340": [46, 115, 170], "13410850e": 3, "134325": 34, "1346": [112, 486], "13468195e": 3, "1347": 111, "135": [34, 43, 73, 470, 471], "1350": [52, 162, 447, 449], "1350mm": [447, 449], "1352": [53, 61, 486], "1355": 471, "1357": 471, "1358": [60, 115, 202, 256], "136": [34, 43, 470, 471], "1361": [60, 115, 202, 256, 471], "13630008e": 3, "13674635e": 3, "137": [34, 43, 73, 470, 471], "1370": [141, 157], "1371": [115, 180], "1372": 471, "1375": 471, "137613": 34, "1377": 471, "13781316e": 3, "138": [34, 43, 470, 471], "13823": 34, "1384": 471, "1389": 471, "139": [34, 43, 470, 471], "13936": 92, "1395": 471, "1396": 471, "1397": 471, "13th": [50, 115, 163, 304], "14": [6, 17, 19, 28, 31, 34, 46, 47, 55, 64, 66, 70, 74, 78, 81, 83, 92, 105, 115, 120, 122, 129, 136, 138, 139, 140, 143, 146, 157, 169, 195, 199, 223, 244, 250, 282, 436, 470, 471, 486], "140": [34, 42, 43, 73, 470, 471], "1402": 471, "140209": 34, "140662": 50, "141": [34, 43, 61, 123, 157, 253, 470, 471], "1416": 78, "141601": 34, "141e": 55, "142": [34, 43, 71, 131, 157, 470, 471], "14224860e": 3, "1429": [101, 115], "143": [34, 43, 73, 470, 471], "1430": [31, 47, 486], "14300293e": 3, "1432": 115, "1435": 471, "143717": 34, "1438": [101, 115, 471], "144": [34, 43, 115, 197, 268, 470, 471], "14429061e": 3, "14448": 92, "1445": 115, "1447": [3, 99], "144768": 34, "1448": [3, 99], "1449": [3, 99], "145": [34, 43, 115, 164, 470, 471], "1450": [3, 99], "1451": [3, 99], "1452": [3, 95, 99], "1454": [47, 486], "1455": 33, "145502": 50, "1458": 471, "146": [34, 43, 73, 134, 157, 470, 471], "1460": [28, 471, 486], "1461": 26, "14637623e": 3, "14640": 92, "1466": 471, "1467": [104, 115, 382], "147": [34, 37, 43, 47, 470, 471, 486], "147067": 34, "147577": 34, "1476": 34, "148": [34, 43, 470, 471], "1483": 471, "14857": 34, "149": [34, 43, 73, 470, 471], "1491": 471, "149296": 34, "1494": [50, 52], "1495": [50, 52], "1497": 471, "1498": [115, 220, 277, 471], "14991741e": 3, "14a": [34, 64, 470], "15": [6, 23, 25, 31, 34, 51, 53, 55, 63, 64, 67, 70, 73, 78, 79, 81, 85, 92, 95, 105, 109, 110, 112, 115, 119, 123, 126, 127, 139, 143, 153, 157, 192, 199, 230, 240, 252, 366, 367, 382, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 418, 450, 451, 470, 471, 486], "150": [26, 34, 43, 115, 184, 418, 470, 471], "1500": 89, "15035096e": 3, "150482": 34, "1507": [115, 220, 277], "15088": 92, "151": [34, 43, 73, 109, 470, 471], "1511": [2, 16, 19, 31, 37, 42, 44, 45, 50, 88, 104, 108], "151677": 55, "152": [34, 43, 115, 178, 187, 195, 219, 282, 470, 471], "152188": 34, "1523": [115, 140, 157, 169], "1525": [54, 61, 486], "1527": 471, "153": [34, 43, 73, 470, 471], "15344473e": 3, "15346774e": 3, "1536": [141, 157], "1539": 471, "153mb": 272, "154": [34, 43, 58, 115, 359, 360, 418, 470, 471], "15425371e": 3, "15473230e": 3, "155": [34, 43, 115, 209, 259, 470, 471], "1550": 471, "15536": 92, "155444": 55, "15583": 103, "156": [34, 43, 73, 470, 471], "15611": 34, "1565": [115, 191, 270], "156681": 34, "1567": [115, 191, 270], "15681321e": 3, "156a": 34, "157": [34, 43, 470, 471], "1570": 471, "1577": 471, "158": [34, 43, 112, 115, 418, 470, 471, 486], "1582": 471, "1583": [115, 180], "1585": [115, 180], "158513": 34, "1586": 80, "15887342e": 3, "158e": 55, "159": [34, 43, 73, 109, 470, 471], "1595": [141, 157], "16": [6, 26, 31, 33, 34, 35, 41, 50, 51, 55, 56, 58, 60, 61, 64, 65, 67, 68, 69, 74, 77, 78, 80, 81, 85, 92, 105, 107, 144, 151, 157, 171, 184, 190, 209, 226, 249, 364, 367, 369, 447, 470, 471, 484, 486], "160": [34, 43, 60, 85, 115, 166, 202, 238, 256, 298, 299, 469, 470, 471], "1600": [318, 331, 457, 471], "160110": [115, 260, 278], "16032": 92, "1606": [115, 164], "161": [34, 43, 470, 471], "1617": 471, "1619": 471, "161a": 34, "162": [34, 43, 73, 115, 209, 470, 471], "1620": 6, "1621": 471, "162682": 51, "1627": 471, "162822": 34, "163": [34, 43, 470, 471], "1631": 471, "1637": 471, "1638": 471, "163842": [281, 284, 285, 292, 428, 441], "163956": 64, "163e": 55, "164": [34, 43, 58, 73, 470, 471], "1640": 471, "16426029e": 3, "1646": 471, "16492151e": 3, "16497653e": 3, "164a": 34, "165": [34, 43, 470, 471], "166": [31, 34, 43, 71, 72, 115, 164, 240, 470, 471], "166999999999994": 57, "167": [34, 43, 58, 73, 192, 240, 470, 471], "1671": 471, "16721029e": 3, "1673": 471, "16785259e": 3, "168": [34, 43, 56, 57, 58, 60, 90, 92, 162, 470, 471], "169": [34, 43, 470, 471], "1691": 471, "1694": 471, "1699": 471, "17": [6, 31, 33, 34, 47, 49, 50, 55, 64, 78, 81, 92, 93, 97, 105, 115, 129, 143, 157, 191, 192, 223, 229, 240, 250, 254, 270, 470, 471, 486], "170": [34, 43, 73, 192, 470, 471], "170346": 34, "1704": 471, "1705": [143, 157], "17095276e": 3, "171": [34, 43, 58, 115, 192, 209, 360, 470, 471], "17135405e": 3, "1716": 471, "172": [34, 43, 115, 166, 253, 298, 299, 470, 471], "17267098e": 3, "173": [34, 43, 73, 470, 471], "1730": 471, "17301174e": 3, "173934": 50, "174": [34, 43, 58, 115, 359, 360, 470, 471], "17432211e": 3, "174325": 55, "175": [34, 43, 470, 471], "17556769e": 3, "17563392e": 3, "1757": 471, "17594007e": 3, "176": [34, 43, 63, 73, 89, 97, 103, 470, 471, 486], "17675804e": 3, "177": [34, 43, 470, 471], "17736": 103, "1775": 471, "178": [23, 28, 34, 43, 470, 471, 486], "1780": 42, "17802452e": 3, "1789": 471, "179": [34, 43, 115, 164, 199, 470, 471], "1792": 471, "1796": 471, "17988022e": 3, "179998": 34, "18": [6, 26, 28, 34, 43, 55, 57, 60, 61, 64, 73, 92, 105, 109, 115, 120, 136, 143, 153, 157, 185, 191, 195, 200, 209, 259, 270, 434, 436, 437, 470, 471, 484, 486], "180": [34, 43, 85, 115, 143, 157, 166, 195, 298, 299, 434, 436, 437, 470, 471], "180063": [115, 221, 249], "1804": 471, "18072": 92, "1808": 471, "180811e": 50, "181": [34, 43, 77, 115, 313, 470, 471], "18107175e": 3, "18128345e": 3, "182": [34, 43, 246, 247, 250, 470, 471], "1822": 471, "183": [34, 43, 470, 471], "1836": 471, "184": [34, 43, 470, 471], "1842": 471, "1845": 471, "18498616e": 3, "185": [34, 43, 470, 471], "1851": 471, "18519557e": 3, "186": [34, 43, 470, 471], "1866": 471, "186859": 34, "1869": 471, "18696297e": 3, "187": [34, 43, 58, 115, 359, 360, 470, 471], "187135": 34, "18718902e": 3, "18728": 92, "188": [34, 43, 73, 470, 471], "18824682e": 3, "1888": [146, 157], "189": [34, 43, 115, 336, 343, 459, 470, 471], "1898": 471, "18a": 470, "19": [2, 6, 8, 34, 54, 55, 61, 64, 78, 92, 105, 115, 124, 127, 131, 133, 146, 157, 192, 193, 217, 220, 221, 223, 226, 227, 228, 229, 239, 240, 248, 249, 250, 253, 254, 277, 279, 280, 310, 311, 470, 471, 486], "190": [34, 43, 470, 471], "190333": 34, "190472": 64, "1905": 471, "1906": 471, "191": [34, 43, 73, 470, 471], "1914": [115, 198, 243], "1916": [61, 486], "1917": [49, 471], "192": [34, 43, 53, 85, 100, 115, 470, 471], "1920": 471, "19272": 92, "1928": [115, 198, 243], "19296": 92, "193": [34, 43, 249, 470, 471], "1935": [42, 115], "19385346e": 3, "19395848e": 3, "194": [34, 43, 115, 199, 470, 471], "1941": 471, "195": [34, 43, 49, 73, 115, 199, 470, 471], "1951": [42, 146, 157], "1952": [118, 146, 157], "1953": [146, 157], "1955": 471, "196": [34, 43, 470, 471], "197": [20, 34, 43, 195, 242, 343, 470, 471], "1971": 471, "1972": 44, "1974": 471, "197666": 34, "19789709e": 3, "198": [34, 43, 73, 249, 470, 471], "1983": [115, 382], "1985": 471, "1987": 471, "199": [34, 43, 470, 471], "1991": 471, "1993": 471, "19936217e": 3, "1994": [115, 336, 459], "19958822e": 3, "1997": [115, 146, 157, 195, 228, 253], "1998": [115, 192, 199, 240], "1999": [115, 129, 157, 199, 204, 205, 206, 207, 208, 211, 263, 281, 471], "19a": [34, 470], "19b": [34, 470], "1a": [6, 34, 64, 470], "1b": [6, 64, 470], "1c": [6, 64, 470], "1d": [53, 107, 108, 117, 155, 157, 183, 185, 230, 300, 308, 310, 311, 314, 320, 336, 358, 362, 363, 364, 365, 366, 367, 368, 369, 370, 393, 400, 404, 410, 413, 447, 448, 453, 458, 459, 467, 469], "1e": [31, 40, 41, 42, 51, 111, 231, 232, 234, 277, 301, 302, 306, 340, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 433, 436, 440, 446, 452], "1e3": 78, "1e4": [40, 296, 297, 298, 299], "1f": [46, 434, 437], "1hz": 238, "1min": [34, 50, 51, 55], "1mm": [11, 124, 152, 157, 246, 247, 250, 288, 289, 291, 375], "1st": 57, "1x2": 43, "2": [3, 4, 6, 7, 8, 10, 12, 13, 15, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 88, 89, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 107, 109, 110, 112, 113, 115, 118, 120, 122, 123, 124, 129, 138, 140, 141, 143, 144, 151, 152, 153, 158, 159, 162, 163, 164, 165, 169, 170, 171, 172, 174, 176, 180, 181, 184, 185, 191, 192, 194, 195, 197, 198, 199, 203, 204, 205, 206, 207, 208, 209, 211, 217, 218, 220, 221, 223, 225, 227, 228, 229, 230, 231, 232, 236, 237, 238, 240, 241, 242, 243, 244, 245, 248, 249, 250, 251, 253, 254, 259, 260, 261, 262, 263, 264, 268, 270, 273, 275, 277, 280, 281, 282, 286, 287, 289, 290, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 318, 320, 321, 325, 327, 331, 333, 334, 336, 342, 343, 346, 347, 348, 349, 352, 353, 355, 358, 359, 360, 363, 364, 365, 366, 367, 368, 369, 374, 375, 376, 377, 378, 379, 381, 382, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 419, 427, 429, 430, 431, 432, 433, 434, 436, 437, 438, 440, 446, 447, 449, 450, 451, 453, 456, 459, 460, 469, 470, 471, 484, 485, 486], "20": [6, 8, 22, 25, 34, 40, 41, 42, 46, 47, 50, 52, 54, 56, 59, 60, 64, 67, 70, 73, 76, 79, 82, 92, 95, 101, 105, 108, 112, 115, 122, 131, 136, 157, 158, 162, 164, 190, 191, 195, 225, 242, 251, 270, 296, 297, 298, 299, 301, 302, 303, 304, 469, 470, 471, 486], "200": [34, 43, 45, 51, 95, 105, 107, 115, 158, 191, 195, 230, 238, 242, 250, 270, 301, 302, 470, 471], "2000": [5, 44, 51, 115, 146, 149, 157, 161, 183, 228, 253], "200007": [115, 228, 253], "2001": [3, 32, 33, 39, 99, 104, 115, 117, 168, 179, 183, 192, 210, 240, 262, 382, 487], "2002": [115, 192, 240], "2003": [71, 115, 305, 309, 471], "2004": [101, 115, 199, 244, 310, 311], "2005": [115, 209, 360], "2006": [72, 115, 169, 180, 195, 203, 209, 300, 310, 311], "2007": [67, 73, 115, 187, 197, 209, 220, 268, 277, 342, 359, 360, 460], "2008": [29, 47, 113, 115, 158, 178, 185, 187, 272, 333, 338, 355, 362, 365, 368, 382, 410, 433, 438, 471, 486], "2009": [2, 22, 115, 123, 149, 152, 157, 178, 180, 187, 191, 195, 199, 211, 244, 251, 263, 264, 270, 289, 333, 382], "2009a": 195, "201": [34, 43, 73, 470, 471], "2010": [23, 38, 50, 60, 115, 138, 157, 158, 163, 165, 187, 195, 199, 211, 230, 231, 242, 252, 256, 263, 289, 303], "2011": [38, 46, 51, 60, 115, 118, 123, 138, 157, 158, 165, 169, 170, 187, 195, 211, 215, 217, 218, 223, 225, 241, 248, 250, 251, 254, 257, 263, 271, 273, 275, 289, 359, 360], "2012": [51, 101, 115, 155, 157, 159, 164, 170, 171, 180, 187, 195, 215, 219, 243, 271, 282, 359, 360, 471], "2013": [58, 115, 146, 157, 158, 159, 169, 170, 190, 195, 201, 217, 238, 242, 248, 359], "2014": [51, 101, 104, 115, 161, 162, 169, 170, 191, 270, 359, 382, 447], "2015": [115, 118, 119, 120, 121, 122, 123, 131, 132, 157, 170, 191, 197, 217, 218, 231, 234, 248, 268, 270, 273, 275, 359, 360], "20150648e": 3, "20153834": [50, 115, 163, 303], "20158813e": 3, "2016": [50, 101, 115, 133, 134, 135, 136, 137, 157, 163, 260, 278, 304, 418], "2017": [58, 115, 138, 139, 140, 157, 164, 166, 197, 221, 223, 249, 250, 268, 298, 299, 359, 360, 418, 471], "2018": [51, 58, 77, 115, 141, 142, 143, 157, 166, 187, 200, 201, 221, 249, 250, 259, 298, 299, 313, 336, 360, 446, 452, 459], "2019": [51, 53, 100, 115, 144, 145, 146, 157, 224, 258, 446, 452, 471], "202": [34, 43, 470, 471], "2020": [115, 147, 148, 149, 157, 201, 224, 245, 258], "20200": 92, "20206": 111, "20207": 111, "20208": 111, "2021": [150, 151, 152, 157, 192, 193, 198, 217, 220, 221, 223, 226, 227, 228, 229, 239, 240, 243, 248, 249, 250, 253, 254, 277, 279, 280, 282, 471], "2022": [153, 154, 155, 157], "2023": [124, 125, 126, 157], "2024": [128, 129, 130, 157], "2025": [146, 157, 471], "2028": [146, 157], "2029": 471, "203": [34, 43, 73, 470, 471], "2031": 471, "2033": 471, "2037": 471, "204": [34, 43, 470, 471], "2041": [51, 115], "2043": 471, "2047": 471, "20480": [23, 24], "20484": [23, 24, 111, 465, 471], "204891": 34, "2049": [51, 115], "20499": [115, 195], "205": [34, 43, 470, 471], "20503": [115, 195], "2052": [146, 157, 471], "2053": 471, "2054": 471, "205584": 34, "2057": [146, 157], "2058": 471, "20590138e": 3, "20594592e": 3, "206": [34, 43, 115, 224, 258, 470, 471], "2063": [146, 157], "2064": 471, "20691790": [115, 165], "206928": 55, "207": [34, 43, 73, 115, 199, 470, 471], "2070": 471, "20736": 92, "2074": 471, "208": [34, 43, 115, 158, 230, 470, 471], "208105": 64, "208286": 34, "2083": [146, 157], "2088": 92, "209": [34, 43, 470, 471], "2090": [146, 157], "209168": 34, "2093": 194, "2096": [115, 159], "209919": 34, "20a": 34, "20b": 34, "20c": 34, "20mm": [96, 180], "21": [6, 15, 28, 34, 35, 47, 56, 64, 67, 78, 92, 105, 127, 133, 151, 157, 209, 282, 470, 471, 486], "210": [6, 23, 34, 43, 73, 115, 211, 263, 336, 459, 470, 471], "2104": 471, "2106": [115, 159], "2107": [146, 157], "211": [34, 43, 45, 470, 471, 486], "2110": 471, "2113378": [46, 115, 170], "211798": 34, "2118": [146, 157], "212": [34, 43, 45, 73, 249, 470, 471], "21212795e": 3, "2128": 471, "213": [34, 43, 470, 471], "2131": [42, 146, 157, 471], "21333": [115, 198, 243], "2136": 471, "2138": [146, 157], "21389712e": 3, "213951": 6, "214": [5, 8, 34, 43, 470, 471, 486], "2142": [115, 195, 359, 360], "2144": 60, "21449": 471, "2148": 471, "215": [34, 43, 73, 470, 471], "21510028e": 3, "2152": 471, "2153": 471, "2154": [115, 195, 359, 360, 471], "2155": 471, "2157": [146, 157], "216": [3, 31, 34, 43, 470, 471], "2162": 471, "2163": [115, 471], "21653723": [115, 223, 229, 250, 254], "2166": [146, 157], "21663439e": 3, "2167": 471, "2169": [146, 157], "21698549e": 3, "217": [34, 43, 72, 74, 470, 471, 486], "2172": [146, 157], "2175": 471, "2177": [115, 146, 157, 471], "218": [34, 43, 73, 246, 247, 250, 470, 471], "2181": 471, "2186": 471, "219": [34, 43, 470, 471], "2194": 471, "2195": [146, 157], "21952948e": 3, "2196": 470, "219668": 34, "21985054e": 3, "22": [6, 22, 28, 34, 43, 47, 60, 64, 92, 105, 109, 115, 129, 133, 144, 153, 157, 199, 244, 338, 470, 471, 486], "220": [34, 43, 470, 471], "2202": 471, "22035609e": 3, "220446049250313e": 81, "2207": 471, "2209": 115, "22093278e": 3, "221": [34, 43, 73, 96, 115, 201, 245, 470, 471], "22103e": 45, "2211": [47, 486], "2212": [44, 146, 157], "2214": [146, 157], "2218": [47, 486], "2219": 41, "22198317e": 3, "222": [34, 43, 470, 471], "2221": [146, 157], "2224": 471, "2229": 115, "223": [34, 43, 47, 115, 211, 263, 470, 471], "2231": [146, 157], "223389": 34, "2234": 471, "22346207e": 3, "2235": [146, 157, 471], "2239": 471, "223948": 34, "22399920e": 3, "224": [34, 43, 73, 470, 471], "2240": [146, 157], "2242": 471, "2243": 471, "2245": 471, "2246": 471, "2248": [146, 157], "225": [34, 43, 49, 470, 471], "2251": 471, "2255": [146, 157], "226": [34, 43, 470, 471], "22603248e": 3, "22624641e": 3, "2264": 471, "22688936e": 3, "2269": 471, "227": [34, 43, 64, 72, 73, 470, 471], "227098e": 50, "2272": [147, 157], "2274": 471, "2277": 471, "2278": 471, "22782624e": 3, "228": [34, 43, 77, 83, 470, 471, 486], "22802": 471, "2282": [153, 157], "228201": 34, "228e": 55, "229": [34, 43, 70, 74, 249, 470, 471, 486], "2290": [147, 157], "229693": 58, "2299": [149, 157], "23": [6, 28, 34, 63, 64, 73, 74, 92, 99, 101, 105, 112, 115, 195, 225, 242, 251, 297, 302, 470, 471, 486], "230": [34, 43, 73, 470, 471], "2300": [148, 157], "2302": [148, 157], "23027385e": 3, "2304": [149, 157], "23065337e": 3, "2307": [149, 157], "2308": [148, 157], "2309": 471, "231": [34, 43, 470, 471], "2312": [148, 157, 471], "2319": 471, "232": [34, 43, 60, 470, 471], "2325": 471, "23262972e": 3, "23264": 92, "2327": [149, 157], "23291919e": 3, "233": [34, 43, 343, 470, 471], "2334": [97, 486], "23348361e": 3, "2335": 95, "23391017e": 3, "23394524e": 3, "234": [34, 43, 73, 470, 471], "23477156e": 3, "23477538e": 3, "235": [34, 43, 470, 471], "23552": 92, "23571": 34, "2358": 471, "236": [34, 43, 73, 78, 83, 470, 471, 486], "23654874e": 3, "237": [34, 43, 470, 471], "2379": 471, "238": [34, 43, 115, 228, 253, 470, 471], "2385": 471, "2388": 471, "239": [34, 43, 45, 470, 471], "23921944e": 3, "2395": 471, "24": [34, 50, 53, 60, 61, 64, 70, 92, 105, 126, 151, 157, 318, 320, 321, 325, 359, 470, 471, 486], "240": [34, 43, 470, 471], "2401": 471, "2409": 471, "241": [34, 39, 43, 47, 470, 471, 486], "2410": 471, "2411": 471, "241636": 34, "24183872e": 3, "242": [34, 43, 115, 228, 253, 470, 471], "242388": 34, "2425": [3, 32, 33, 39, 99, 115, 210, 262], "24256x24256": 51, "2429": [148, 157], "243": [34, 43, 470, 471], "2430": [3, 32, 33, 39, 99, 115, 210, 262], "24359": 103, "244": [34, 43, 470, 471], "2440": 471, "2446": 471, "2449": 471, "24493547e": 3, "245": [34, 43, 470, 471], "2453": 471, "2457": [83, 486], "2458": 76, "246": [34, 43, 73, 470, 471], "2462": 471, "2465": 471, "2466": 471, "2467": 471, "247": [34, 43, 470, 471], "2471": 471, "247356": 34, "2478": 471, "2479": 471, "248": [34, 43, 73, 470, 471], "2482": 471, "2485": 471, "249": [34, 43, 51, 471], "24913323e": 3, "2494": 471, "249686": 34, "25": [16, 24, 31, 33, 34, 42, 43, 47, 57, 61, 64, 65, 70, 74, 78, 92, 95, 96, 99, 105, 119, 157, 159, 191, 270, 308, 310, 311, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419, 431, 439, 441, 442, 443, 470, 471, 486], "250": [34, 43, 67, 115, 471], "2506": 471, "2509": [149, 157], "251": [34, 43, 73, 471], "2511": 471, "25184": 92, "251e": 55, "252": [34, 43, 95, 470, 471], "2520": 64, "253": [34, 43, 471], "2531": 471, "2532": [151, 157], "253376": 58, "2539": 471, "254": [34, 43, 73, 119, 157, 471], "254210": 64, "2543": 471, "2544": 471, "254408": 34, "255": [34, 43, 152, 157, 471], "2551": 471, "25514089e": 3, "2553": [150, 157, 471], "2555": 471, "256": [4, 34, 43, 85, 150, 157, 201, 245, 254, 471], "25602744e": 3, "2561": 471, "2562": [281, 284, 285, 292, 441], "25620537e": 3, "256269": 34, "2565": 471, "2567": [150, 157], "257": [34, 43, 73, 471], "257986": 64, "258": [34, 43, 54, 61, 471, 486], "2588": 471, "258970": 58, "259": [34, 43, 100, 112, 471, 486], "25907293e": 3, "2594": 471, "2598": 471, "26": [34, 43, 63, 64, 73, 76, 92, 104, 105, 136, 157, 448, 470, 471], "260": [34, 43, 73, 471], "2606": [150, 157], "2608": 471, "260924": 34, "261": [34, 43, 115, 169, 471], "2617": 471, "2619": [150, 157], "262": [34, 43, 115, 471], "2622": [150, 157], "262626e": 50, "263": [34, 43, 249, 471], "2630": 471, "2635": 471, "2636": [101, 115, 164], "2637": 471, "263e": 55, "264": [34, 43, 60, 73, 222, 257, 471], "2643": [101, 115, 150, 157, 164], "2645": 347, "2649": 471, "265": [34, 43, 471], "2650": 471, "26522": 45, "2655": [153, 157], "266": [34, 43, 73, 471], "2663": 471, "2669": [150, 157], "267": [34, 43, 115, 359, 360, 471], "2674": [150, 157, 471], "2675": 109, "2676": 109, "2678": 471, "26795342e": 3, "268": [34, 43, 471], "2684": [150, 157], "268412": 34, "269": [34, 43, 73, 115, 169, 471], "269133": 6, "2696": [150, 157], "2697": [150, 157], "27": [6, 16, 17, 18, 34, 46, 64, 72, 91, 92, 94, 95, 97, 105, 115, 195, 203, 360, 447, 449, 470, 471, 484, 486], "270": [34, 43, 434, 436, 437, 471], "2702": [150, 157], "27048": 92, "2707": [151, 157], "270843": 34, "271": [34, 43, 76, 83, 471, 486], "2712": [150, 157], "2714": [150, 157], "2715": [124, 155, 157], "2717": 471, "2719": [150, 157, 471], "272": [34, 43, 115, 204, 205, 206, 207, 208, 281, 471], "2723": [152, 157], "2725": 471, "273": [34, 43, 115, 192, 240, 471], "2730": [151, 157], "2732": [151, 157], "27355877e": 3, "2738": [152, 157], "274": [34, 43, 471], "27424686e": 3, "2743": 471, "2745": [151, 157], "275": [34, 43, 73, 471], "2750": 471, "2755": [152, 157, 471], "2757": 471, "276": [34, 43, 471], "2767": [151, 157], "2769": 471, "27699703e": 3, "277": [34, 43, 115, 359, 360, 471], "2774": 471, "2775": 471, "278": [34, 43, 73, 471], "2783": 471, "278396": 34, "2789": 471, "279": [34, 43, 471], "2790": [151, 157], "2792": [151, 157], "279282": 34, "2797": 471, "2798": [151, 157], "27mm": [447, 449], "28": [34, 44, 60, 64, 90, 92, 105, 115, 119, 143, 157, 194, 223, 241, 250, 470, 471], "280": [34, 43, 471], "28029478e": 3, "2804": [126, 157], "2805": [151, 157], "28050421e": 3, "2806": [151, 157, 471], "2807": 471, "28087038e": 3, "28089803e": 3, "281": [34, 43, 471], "2810": [151, 157], "28115734e": 3, "2815": [151, 157], "2815524": [51, 115, 446, 452], "2816": 471, "2818": 109, "282": [34, 43, 95, 471], "2821": [151, 153, 157], "2823": 471, "2826": [21, 50, 52, 151, 157, 471], "2827": 471, "2828": [115, 169], "28288": 34, "2829": [153, 157], "283": [34, 43, 66, 74, 112, 471, 486], "2831": [151, 157], "2833": [127, 157], "2834": 109, "2835": 471, "2836": 471, "28384160995483": 45, "284": [34, 43, 67, 73, 107, 115, 204, 205, 206, 207, 208, 281, 471], "28481": 34, "285": [34, 43, 471], "2858": [151, 157], "2859": [153, 157], "286": [34, 43, 471], "2860": 42, "2867": [151, 157], "2868": [151, 157], "2869": [151, 157], "287": [34, 43, 471], "28702402e": 3, "28725874e": 3, "2875": [152, 157], "2876": [152, 157], "28797468e": 3, "288": [8, 34, 43, 50, 67, 73, 115, 163, 303, 470, 471, 486], "2880": [153, 157], "288251": 34, "289": [4, 34, 43, 115, 192, 240, 471], "2890": 471, "289828": 34, "29": [16, 21, 28, 34, 37, 60, 64, 73, 82, 92, 105, 131, 157, 470, 471, 486], "290": [34, 43, 471], "2900": [152, 157], "2902": [153, 157], "2904": [152, 157, 471], "291": [34, 43, 67, 73, 470, 471], "29126915e": 3, "291568": 34, "29173021e": 3, "291882": 34, "2919": 471, "292": [34, 43, 115, 382, 471], "29243708e": 3, "292458": 34, "292525e": 34, "2928": [152, 157, 471], "292987": 34, "293": [3, 32, 33, 34, 39, 43, 67, 73, 99, 115, 210, 262, 471], "2934": 471, "2939": 471, "293e": 55, "294": [6, 34, 43, 96, 97, 471, 486], "2941": [152, 157], "2942": [153, 157], "2944": [152, 157], "2945": 471, "2946": [153, 157], "295": [34, 43, 471], "29515543e": 3, "2953": [61, 154, 157, 486], "2954": 51, "296": [34, 43, 67, 73, 471], "2962": 471, "2965": [153, 157], "297": [34, 41, 43, 54, 56, 471], "29727734e": 3, "2979": [47, 486], "297e": 55, "298": [34, 43, 112, 115, 382, 471, 486], "2980": 36, "2986": 471, "298717": 34, "299": [34, 43, 50, 105, 115, 163, 303, 471], "299271": 34, "299562": 34, "29a": [34, 470], "29b": 34, "2a": [6, 34, 64, 470], "2b": [6, 64, 470], "2c": [64, 470], "2d": [40, 53, 56, 85, 92, 93, 99, 105, 116, 155, 157, 164, 167, 182, 185, 231, 232, 233, 234, 235, 303, 304, 305, 314, 338, 358, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 383, 385, 386, 387, 388, 389, 390, 391, 392, 397, 399, 401, 403, 405, 407, 409, 425, 444, 445, 446, 447, 453, 454, 463, 467, 469, 477, 487], "2f": [31, 33, 43, 44, 45, 46, 51, 59, 90], "2g": [384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 423, 425, 426, 428, 432, 433, 434, 436, 437], "2min": 58, "2mm": [11, 22, 58, 92, 124, 152, 157, 159, 169, 245, 246, 247, 471], "2nd": [3, 26, 30, 31, 33, 34, 35, 36, 37, 38, 40, 262], "2t": [6, 226], "2x1": 43, "2x2": [43, 144, 157, 393, 395, 398, 412, 417, 423, 426, 431, 432, 433, 484], "3": [2, 3, 4, 6, 7, 12, 14, 15, 16, 17, 18, 20, 21, 22, 24, 26, 28, 31, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 55, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101, 102, 103, 105, 107, 108, 109, 111, 112, 115, 119, 123, 124, 128, 129, 133, 136, 137, 140, 143, 144, 145, 146, 151, 152, 153, 154, 158, 162, 164, 169, 170, 173, 174, 180, 184, 185, 191, 192, 195, 198, 199, 200, 204, 205, 206, 207, 208, 209, 211, 217, 223, 228, 229, 230, 231, 232, 234, 236, 237, 238, 242, 243, 245, 248, 249, 250, 252, 253, 254, 255, 259, 260, 263, 265, 270, 273, 275, 278, 281, 282, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 308, 310, 311, 313, 314, 318, 320, 321, 325, 331, 334, 335, 343, 345, 347, 348, 351, 353, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 376, 377, 379, 381, 382, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 417, 419, 423, 425, 426, 429, 431, 432, 433, 434, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 455, 457, 469, 470, 471, 473, 484, 485, 486], "30": [3, 6, 30, 33, 34, 37, 42, 46, 47, 50, 51, 53, 59, 64, 65, 68, 74, 92, 100, 105, 109, 115, 133, 143, 157, 170, 239, 298, 299, 308, 310, 311, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 455, 470, 471, 486], "300": [27, 34, 43, 57, 63, 70, 101, 191, 224, 250, 258, 270, 471], "3000": 51, "3003": [153, 157], "3008": [153, 157], "3009": [153, 157], "301": [34, 43, 53, 61, 471, 486], "3010": [153, 157, 471], "3013": [153, 157], "3015": [153, 157], "3016": [153, 157], "302": [34, 43, 119, 157, 471], "30219191e": 3, "3025": [153, 157], "3026": [153, 157], "303": [34, 43, 471], "3030": [155, 157], "3033": [153, 157], "3035": [153, 157], "3036": [153, 157], "3037": 471, "3039": [153, 157], "304": [34, 43, 115, 170, 471], "3040": 471, "3041": 109, "3042": [109, 153, 157], "304337": 34, "3045": 471, "30493": 34, "305": [34, 43, 69, 74, 471, 486], "3054": 471, "30541090e": 3, "306": [11, 28, 34, 43, 471, 486], "3061": [153, 157], "3065": [153, 157, 471], "307": [34, 43, 471], "3073": [153, 157], "307532": 64, "3077": [153, 157], "3078": [153, 157], "308": [34, 43, 471], "3081": [153, 157], "3082": [153, 157], "3084": 471, "3085": 471, "3086": 471, "3087": 471, "3089": 471, "308e": 55, "309": [34, 43, 112, 115, 197, 268, 471], "3090": [153, 157], "3093": [153, 157, 471], "3095": [115, 223, 250, 471], "3098": [154, 157], "31": [34, 42, 87, 88, 92, 97, 105, 112, 115, 170, 209, 225, 251, 470, 471, 486], "310": [3, 34, 43, 471], "3102": [127, 157], "3105": [124, 157, 172], "3106": [153, 157], "3109": [153, 157, 471], "311": [34, 43, 471], "3111": [153, 157], "3113": 471, "31135363e": 3, "3114": [115, 223, 250], "3115": 471, "3118": 471, "312": [34, 43, 471], "3120": 471, "3125": [124, 155, 157, 471], "3126": [153, 157], "3127": [154, 157], "31276236e": 3, "313": [34, 43, 95, 115, 195, 211, 263, 289, 471], "3132": 471, "3133": [153, 157], "3134": 471, "3135": [153, 157, 471], "3137": [153, 157], "314": [34, 43, 115, 197, 268, 471], "3141": [155, 157], "315": [34, 43, 471], "3152": [154, 157, 471], "316": [34, 43, 471], "3160": 471, "3165": [154, 157], "3169": 471, "317": [34, 43, 86, 97, 99, 112, 471, 486], "3172": [126, 157], "31721219e": 3, "3173": [125, 157], "31738633e": 3, "3174": [154, 157], "3178": [154, 157], "3179": [154, 157], "318": [34, 43, 471], "3181": [124, 155, 157], "3184": [154, 157], "3185": [155, 157], "3186": 471, "3188": [154, 157], "3189": 471, "318e": 55, "319": [34, 43, 56, 61, 95, 471, 486], "3191": [127, 157], "31921283e": 3, "3193": [155, 157], "31942256e": 3, "3196": [124, 155, 157], "31a": 34, "32": [8, 10, 28, 34, 35, 42, 60, 61, 67, 85, 92, 103, 111, 112, 185, 322, 323, 324, 328, 329, 330, 470, 471, 484, 486], "320": [34, 43, 115, 359, 471], "3201": [154, 157], "32015": 118, "32016": 118, "3203": [126, 157], "3204": 471, "3207": [154, 157], "3209": [155, 157, 471], "321": [34, 43, 78, 83, 115, 170, 471, 486], "32111": 34, "3216": [155, 157], "32177917e": 3, "3219": 471, "321921": 34, "322": [34, 43, 471], "3220": [155, 157, 471], "3222": [155, 157], "32229242e": 3, "322679e": 50, "3227": [155, 157], "322726": 34, "322742": 50, "3228": 471, "3229": [155, 157], "323": [34, 43, 471], "3233": [155, 157], "3235": [155, 157], "3237": [124, 157], "32373479e": 3, "3238": 471, "324": [34, 43, 115, 180, 470, 471], "3241": [155, 157], "3248": 34, "3249": [115, 171], "325": [34, 43, 195, 242, 471], "3250": 471, "32504": 57, "3255": [155, 157], "3258": 471, "3259": [125, 157, 471], "326": [34, 43, 471], "3262": [155, 157], "32638003e": 3, "32696688e": 3, "327": [34, 43, 85, 97, 115, 195, 211, 263, 289, 471, 486], "3270": 471, "32712": 92, "3274": [155, 157], "327741": 34, "328": [34, 43, 46, 471], "3281": [155, 157], "3283": [155, 157], "3284": [155, 157], "3285": [127, 157], "3286": [155, 157], "3289": 471, "329": [34, 43, 60, 115, 202, 256, 471], "3292": [155, 157], "3293": [155, 157], "329567": 34, "3297": [155, 157], "32980": 274, "33": [34, 45, 64, 73, 92, 115, 198, 200, 243, 259, 470, 471], "330": [34, 43, 471], "3300": [155, 157], "3302": [155, 157], "3306": [155, 157], "331": [34, 43, 471], "3311": [155, 157], "3312": [155, 157], "3317": [155, 157], "331865": 34, "332": [34, 43, 471], "3322": [155, 157], "33222629e": 3, "3324": 471, "3327": 471, "333": [34, 43, 471], "3333": [155, 157], "3337": [155, 157], "334": [34, 43, 471], "3344": 471, "33451718e": 3, "3346": 471, "3347": [124, 157], "335": [34, 43, 471], "3351": [125, 157], "3353": [125, 157], "3355": 471, "3356": 471, "336": [34, 43, 471], "3362": [125, 157], "337": [34, 43, 471], "3374": [124, 157], "3375": [124, 157], "338": [34, 43, 471], "3380": [124, 157], "33811238e": 3, "3382": 471, "3385": [124, 157], "33857137e": 3, "3389": [51, 115, 118, 161, 190, 194, 218, 219, 238, 241, 273, 275, 282], "339": [34, 43, 471], "3390": [124, 157], "3392": 471, "34": [16, 34, 51, 53, 64, 92, 115, 169, 470, 471], "340": [34, 43, 471], "34028089e": 3, "3403": [124, 157], "34043222e": 3, "341": [34, 43, 92, 97, 115, 359, 471, 486], "3410": [47, 471, 486], "3411": 45, "3412": [124, 157], "341327": 34, "3414": [125, 157], "341729": 6, "342": [34, 43, 74, 471], "3422": [124, 157], "3424": [124, 157], "3426": [124, 157], "3427": [124, 157], "3429": [124, 157], "343": [34, 43, 471], "3430": [124, 157], "3433": [124, 157], "3436": [124, 157], "3437": 471, "34372": 471, "3439": [124, 157], "344": [34, 43, 471], "3440": [124, 157, 471], "3444": [125, 157], "3445": [125, 157], "3446": [124, 157], "3449": [124, 157], "345": [34, 43, 46, 471], "3450": 471, "3452": [124, 157], "3453": [124, 157, 471], "34599057e": 3, "346": [34, 43, 471], "3460": 471, "3462": [125, 157], "3465": [125, 157], "3468": 471, "347": [34, 43, 471], "3474": [125, 157], "347685": 34, "3477": [125, 157], "3478": [125, 157], "34792": [201, 245], "347e": 55, "348": [34, 43, 58, 92, 103, 471], "3483": [125, 157], "348351": 64, "3484": [125, 157], "3485": [125, 157], "3487": 471, "349": [12, 34, 43, 471], "34907556e": 3, "3491": [125, 157], "349128": 34, "3498": [125, 157], "349998": 34, "35": [21, 31, 34, 50, 55, 61, 73, 92, 119, 157, 192, 248, 273, 470, 471, 486], "350": [34, 43, 471], "351": [20, 28, 34, 43, 471, 486], "35115365e": 3, "351326": 34, "352": [34, 43, 76, 471], "352245": 34, "3523": [125, 157], "3525": [125, 157], "3527": 471, "353": [34, 43, 471], "3531": [125, 157], "35327896e": 3, "3538": [126, 157], "354": [34, 43, 471], "35437386e": 3, "3548": [125, 126, 157], "3549": [125, 157], "355": [34, 43, 471], "3550": [125, 157], "3551": [125, 157], "3552": [125, 157], "35523009e": 3, "3553": [125, 157], "3554": [125, 157], "3555": [125, 157], "3556": [126, 157], "355602": 34, "3557": [125, 157, 471], "3558": [125, 157], "356": [34, 43, 471], "3563": [125, 157], "3566": [126, 157], "357": [34, 43, 471], "35711909e": 3, "3572": 471, "358": [34, 43, 471], "35866213e": 3, "359": [34, 43, 471], "3593": 471, "3597": [126, 157], "35998542e": 3, "35a": 470, "36": [6, 16, 17, 18, 33, 34, 47, 60, 64, 91, 92, 94, 111, 140, 143, 157, 192, 195, 225, 242, 470, 471, 484, 486], "360": [34, 43, 64, 72, 115, 203, 470, 471], "3600": [125, 157], "360045": 34, "3601": [126, 157], "3603": 471, "3605": [125, 157], "3609": [126, 157], "361": [34, 43, 87, 97, 471, 486], "3614": [126, 157], "3615": [126, 157], "36175995e": 3, "361796": 34, "361a": 34, "362": [34, 471], "3622": 471, "3626": [125, 157], "3629": 471, "363": [34, 471], "3631": [125, 157], "3635": [125, 157], "36385": 34, "364": [34, 471], "3640": [126, 157], "3642": 471, "3644": [126, 157, 471], "364448": 34, "3646": [126, 157], "3647": [126, 157], "3648": [126, 157], "3649": 471, "365": [34, 471], "3650": [126, 157], "3651": [126, 157], "365571": 34, "366": [34, 471], "366314": 34, "3665": 471, "367": [34, 53, 471], "367151": 34, "36719098e": 3, "3673": 471, "3676": 471, "368": [34, 82, 83, 471, 486], "3681": [126, 157], "369": [34, 115, 471], "3691": 471, "36991979e": 3, "37": [31, 34, 50, 60, 82, 92, 95, 115, 122, 157, 359, 360, 460, 470, 471], "370": [34, 471], "3700": 471, "371": [34, 63, 72, 74, 109, 112, 115, 203, 471, 486], "3710": 471, "3717": 471, "372": [34, 471], "3722": [126, 157], "3723": [126, 157], "372383": 34, "37293775e": 3, "373": [34, 471], "3730": 471, "3732": [126, 157, 471], "3733": [126, 157, 471], "3735": 471, "3736": [126, 157], "3737": 471, "374": [34, 471], "37415947e": 3, "37416377e": 3, "3742": [126, 157], "3743": [126, 157, 471], "374435": 34, "375": [34, 471], "3751": 471, "375261": 34, "3753": [126, 157], "376": [34, 471], "3761": [127, 157], "37626075e": 3, "3763": 471, "3764": 471, "3765": 471, "3766": 471, "3768": 471, "37688": 92, "377": [34, 471], "3774": [126, 157], "3777": [126, 157], "37777914e": 3, "378": [6, 34, 471], "3781": [126, 157], "378178": 34, "3783": [126, 157], "379": [2, 8, 34, 471, 486], "3790": [126, 157], "3794": [126, 157], "3795": [126, 157], "3797": [126, 157], "37a": 470, "37b": 470, "38": [34, 41, 47, 49, 61, 64, 78, 83, 92, 111, 143, 157, 470, 471, 486], "380": [34, 471], "3802": [126, 157], "3803": [126, 157], "381": [34, 104, 115, 382, 471], "3810": [126, 157], "3811": [126, 157], "3816": [126, 157], "38163212e": 3, "3819": [126, 157], "382": [34, 88, 97, 471, 486], "38237137e": 3, "3827": [126, 157], "38275792e": 3, "383": [34, 471], "3833": [126, 157], "3836": [126, 157], "3838": [126, 157], "384": [34, 471], "3847": [126, 157], "384872": 34, "385": [10, 28, 34, 471, 486], "3854": [126, 157], "3855": [126, 157], "3856": [126, 157], "3857": [126, 157], "385929": 64, "386": [34, 471], "3860": [126, 157], "3863": [115, 169, 180, 300], "3868": [115, 169, 180, 300], "387": [34, 471], "3873": [126, 157], "3879": [126, 157], "388": [34, 471], "38816438e": 3, "3888": 6, "38888888888888895": 3, "389": [34, 471], "3897": [126, 157], "389e": 55, "39": [6, 16, 34, 38, 53, 56, 73, 92, 131, 133, 136, 157, 200, 241, 248, 259, 470, 471], "390": [34, 471], "3905": 471, "3908": 471, "391": [34, 471], "3919": [126, 157], "392": [34, 471], "3921": [126, 157], "3927": [126, 157], "392956": 34, "393": [34, 471], "3934": [126, 157], "39346": 471, "3935": [127, 157], "39361772e": 3, "394": [34, 471], "3942": [126, 157], "3943": [126, 157], "3945": [126, 157], "3949": [129, 157], "395": [34, 471], "39531459e": 3, "396": [34, 471], "39667098e": 3, "397": [34, 104, 115, 382, 471], "3971": [126, 157], "397187": 34, "3973": [126, 157], "397476": 34, "398": [34, 471], "3982": 471, "3987": [126, 157], "399": [34, 471], "3993": [127, 157], "3994": [126, 157], "3995": 471, "399994": 67, "3a": [6, 34, 64, 470], "3b": 470, "3c": 470, "3d": [1, 3, 7, 8, 9, 16, 17, 19, 20, 24, 25, 26, 28, 30, 31, 33, 35, 37, 38, 40, 44, 46, 49, 71, 76, 78, 84, 85, 95, 97, 101, 104, 106, 107, 111, 113, 115, 117, 122, 125, 129, 133, 140, 142, 143, 144, 146, 150, 151, 155, 157, 174, 178, 179, 180, 182, 184, 185, 195, 223, 228, 244, 246, 247, 250, 251, 252, 253, 274, 276, 283, 284, 285, 293, 296, 297, 298, 299, 300, 301, 302, 303, 304, 331, 333, 335, 337, 338, 341, 343, 344, 345, 346, 355, 362, 363, 364, 365, 366, 367, 368, 369, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 414, 415, 416, 418, 419, 425, 426, 428, 429, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 447, 448, 449, 453, 465, 469, 486, 487], "3dev": 437, "3f": [3, 6, 35, 46, 50, 57, 99], "3g": 82, "3min": [38, 50], "3mm": [6, 226], "3rd": [21, 425, 426, 432, 433, 440], "3v2": [129, 157, 192, 240], "3vrct": [201, 245], "3x3": [85, 184, 296, 297, 298, 299, 301, 302, 303, 304, 318, 331, 348, 351, 365, 368, 374, 376, 377, 379, 445], "3x3x3": [184, 273, 275, 447, 449], "4": [0, 3, 6, 7, 8, 11, 13, 15, 16, 19, 21, 24, 25, 28, 30, 31, 32, 34, 35, 36, 37, 40, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 58, 59, 60, 64, 65, 66, 67, 68, 69, 72, 73, 74, 76, 77, 78, 79, 80, 82, 85, 87, 92, 93, 97, 99, 100, 101, 102, 103, 105, 109, 111, 112, 115, 119, 129, 131, 136, 139, 143, 144, 145, 146, 151, 158, 159, 162, 164, 169, 170, 171, 191, 195, 199, 203, 204, 205, 206, 207, 208, 209, 213, 215, 221, 222, 228, 230, 232, 238, 253, 257, 260, 270, 271, 277, 278, 281, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 336, 347, 351, 352, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 376, 377, 379, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 418, 419, 423, 425, 426, 429, 430, 431, 432, 433, 444, 445, 446, 447, 459, 469, 470, 471, 484, 486], "40": [21, 34, 36, 40, 47, 55, 65, 92, 95, 102, 112, 193, 195, 239, 248, 273, 469, 470, 471, 486], "400": [34, 115, 165, 238, 250, 471], "400000": 67, "4001": [127, 157], "400515": 34, "40062294e": 3, "400x500": 23, "401": [34, 67, 74, 486], "40175": 76, "402": 34, "4022": [115, 225, 251], "40261601e": 3, "4028": [127, 157], "4029": [127, 157], "403": 34, "4037": [115, 225, 251], "404": 34, "4042": [127, 157], "404684": 34, "405": [34, 58, 115, 158, 159, 217, 248], "4051": [127, 157], "4058": 471, "406": 34, "40640": 92, "4067": [127, 157], "407": 34, "4070": [127, 157], "4071": [127, 157], "40740740740740744": 3, "407676": [115, 336, 459], "408": 34, "4081": 471, "40824707e": 3, "4086": [127, 157], "4087": 471, "409": 34, "4094": [127, 157], "40962": [281, 284, 285, 292, 441], "40977839e": 3, "4099": [127, 157], "40x64x64": 40, "41": [34, 51, 73, 92, 115, 446, 452, 470, 471], "410": [34, 115, 165], "4103": [127, 157, 471], "4108": 471, "411": 34, "4116": [127, 157], "412": [34, 66, 74, 486], "4121": [127, 157], "4122": [127, 157], "4126": [129, 157, 471], "41274372e": 3, "413": 34, "4131": [127, 157], "41325559e": 3, "4136": [127, 157], "4138": 471, "413969": 43, "414": 34, "4141": [127, 157], "41482765e": 3, "415": [34, 58, 115, 158, 159, 217, 248, 360], "4153": [127, 157], "4159": [127, 157], "41590048e": 3, "416": [34, 65, 90, 97, 277, 486], "416095": 34, "4166": [127, 157], "4167": [127, 157], "4168": [92, 127, 157], "417": [31, 34], "41704815e": 3, "4172": 471, "4176": 470, "417917": 34, "418": 34, "4180": [127, 157], "4188": [127, 157, 471], "418909": 58, "419": 34, "4191": [127, 157], "4195": 471, "41964499e": 3, "42": [3, 6, 8, 25, 34, 37, 38, 45, 64, 65, 92, 93, 101, 106, 115, 192, 226, 470, 471, 484, 486], "420": [34, 52, 61, 486], "4203": 471, "4204": [127, 157], "420413": 58, "4205": [129, 157], "4208": [126, 157], "421": 34, "4215": [127, 157], "4219": [127, 157], "422": 34, "42208": 92, "4224": 471, "4225": [127, 157], "423": 34, "4232": [128, 157], "4233": [127, 157], "4236": 471, "424": 34, "42460622e": 3, "424686": 34, "425": [3, 8, 34, 486], "42528": 92, "42549806e": 3, "4255": [115, 128, 157, 171, 231, 234], "42561290e": 3, "4257": [128, 157], "4258": [128, 157], "426": [34, 471], "4263": 471, "426454": 34, "4266": [128, 157], "4267": [128, 157], "4269": [128, 157], "427": 34, "4270": [128, 157], "4273": [129, 157], "4274": [128, 157], "4279": [128, 157], "428": 34, "4284": [128, 157], "42849564e": 3, "4285": [128, 157], "4287": [130, 157], "429": 34, "4295": [128, 157], "4297": [128, 157], "42975580e": 3, "4298": [128, 157], "43": [34, 37, 47, 92, 100, 104, 112, 115, 131, 157, 243, 382, 470, 471, 486], "430": 34, "4300": [52, 61, 486], "4302": [128, 157], "43028198e": 3, "43033826e": 3, "4304": [128, 157], "4307": [129, 157, 471], "4308": [128, 157], "431": 34, "4310": [128, 157], "4318": [128, 157], "432": [34, 64, 115, 158, 470], "4320": [128, 157], "4325": [128, 157], "433": 34, "4334": [128, 157], "4337": [128, 157], "434": 34, "4343": [128, 157], "435": 34, "435127": 34, "43559577e": 3, "436": [34, 58, 115, 360], "4360": [129, 157], "437": [34, 105, 112, 486], "438": [22, 28, 34, 486], "439": 34, "4391": 471, "4392": [129, 157], "4397": [129, 157], "4399": 471, "44": [32, 34, 47, 73, 92, 115, 122, 157, 178, 333, 382, 470, 471, 486], "440": 34, "4403": 471, "4407": [129, 157], "441": [34, 115, 158], "441012": 34, "4411": [129, 157], "4412": [129, 157], "4413": [129, 157], "4414": [129, 157], "4416": [129, 157], "442": 34, "443": [34, 41, 47, 486], "4434": 471, "4435": 471, "4436": [129, 157], "4437": [129, 157], "444": [20, 34, 195, 242], "4444": 35, "4446": [129, 157], "445": 34, "4452": [129, 157, 471], "446": 34, "4465": [129, 157], "4467": [129, 157], "4469": [129, 157], "447": 34, "4470": [129, 157], "4475": 471, "4476": [129, 157], "447911": 34, "448": 34, "4487": 471, "449": 34, "449202": 34, "4498": [129, 157], "44984": 92, "45": [6, 31, 33, 34, 51, 57, 60, 61, 64, 92, 108, 115, 470, 471, 486], "450": 34, "4507": [129, 157], "45094120e": 3, "451": 34, "45132578e": 3, "4515": 471, "4518": 471, "452": [34, 67, 74, 486], "453": 34, "454": [2, 8, 34, 471, 486], "45402730e": 3, "4544": [129, 157], "455": 34, "4554": [129, 157], "4555": [129, 157], "4556": [129, 157], "4558": [129, 157], "456": [34, 88, 97, 486], "456513": 34, "457": 34, "4570": [129, 157], "4571": [129, 157], "4574": [129, 157], "457669": 34, "4577": [129, 157], "458": 34, "4582": [129, 157], "4585": [129, 157], "459": 34, "4590": [129, 157, 471], "4593": [129, 157], "45955": 34, "46": [31, 34, 60, 64, 92, 94, 109, 119, 157, 185, 241, 243, 470, 471, 484], "460": 34, "460020402": [115, 336, 459], "4607": [129, 157], "461": [34, 191, 270], "46103049e": 3, "461193": 64, "4612": [129, 157], "4618": [129, 157], "462": [6, 34], "4620": [129, 157], "463": [34, 104, 112, 115, 192, 240, 486], "463430": 6, "4635": [129, 157], "4637": [129, 157], "464": [3, 34, 40, 99], "46409980e": 3, "4643": 471, "465": 34, "4652": [129, 157], "4656": [129, 157], "465647": 34, "4657": 471, "4659": [129, 157], "465973": 43, "466": 34, "4660": [129, 157], "467": 34, "468": [34, 64, 115, 192, 240, 470], "46871489e": 3, "4688": [129, 157], "469": [34, 103], "4692": [129, 157], "4693": [129, 157], "46a": 34, "47": [34, 92, 99, 115, 199, 211, 238, 243, 244, 263, 289, 470, 471], "470": 34, "47012232e": 3, "471": 34, "4714": [129, 157], "4715": [129, 157], "4719": [129, 157], "472": 34, "4720": 471, "4723": [129, 157], "4725": 471, "473": [34, 59, 61, 486], "4734": 471, "4737": 471, "474": 34, "47419187e": 3, "4743": 471, "475": 34, "47546931e": 3, "4756": [130, 157], "476": 34, "4766": [115, 169], "47675336e": 3, "477": 34, "4775": [115, 169], "478": 34, "479": [34, 471], "48": [6, 21, 34, 55, 58, 64, 73, 76, 83, 92, 103, 115, 195, 209, 241, 246, 248, 271, 338, 470, 471, 486], "480": 34, "4806": [129, 157], "4807": [130, 157], "481": 34, "481522": 34, "482": 34, "483": [34, 45, 47, 59, 106, 112, 119, 157, 486], "4830": [130, 157], "4832": 92, "484": 34, "48437182e": 3, "4847132034632034": 111, "4849": [130, 157], "485": [34, 51], "486": [34, 470], "4860": [129, 157], "487": 34, "48727140e": 3, "48728139e": 3, "488": 34, "4880": 92, "48881965e": 3, "488905": 34, "489": [3, 30, 31, 33, 34, 35, 36, 37, 40, 99], "48931180e": 3, "489424": 34, "49": [31, 34, 47, 72, 87, 92, 115, 143, 157, 470, 471], "490": [34, 51], "4903": 471, "49038": 34, "4906": [130, 157], "491": 34, "492": 34, "49253572e": 3, "4926": [130, 157], "493": 34, "49354503e": 3, "4939": [130, 157], "49396428e": 3, "494": [34, 471], "4948": [130, 157], "495": 34, "4954": [130, 157], "496": 34, "4967": [130, 157], "497": [34, 60, 61, 486], "4975": [130, 157], "497712": 34, "497881": 34, "498": 34, "499": 34, "4991939095387371": 111, "499281": 34, "4998": 471, "49996994e": 3, "4a": [6, 470], "4d": [1, 3, 4, 8, 9, 12, 17, 19, 21, 26, 28, 30, 31, 32, 33, 35, 37, 40, 43, 49, 50, 51, 54, 55, 56, 58, 60, 72, 85, 86, 88, 90, 92, 93, 95, 96, 99, 101, 104, 106, 113, 116, 124, 125, 126, 129, 133, 140, 143, 144, 149, 157, 159, 162, 163, 164, 167, 178, 180, 182, 185, 200, 214, 241, 243, 245, 246, 247, 251, 259, 263, 269, 276, 283, 300, 303, 304, 331, 333, 335, 336, 337, 341, 342, 343, 344, 346, 348, 355, 362, 363, 364, 365, 366, 367, 368, 369, 373, 374, 375, 376, 377, 378, 379, 381, 414, 415, 418, 426, 431, 432, 433, 438, 440, 447, 449, 465, 469, 477, 480, 484, 486, 487], "4f": [34, 35, 99], "4mm": [95, 162, 169, 200, 259, 304], "4pm": [172, 485], "4th": [21, 95, 115, 170, 178, 184, 310, 311, 348, 351, 431], "4x4": [85, 184, 296, 297, 298, 299, 301, 302, 303, 304, 318, 331, 338, 348, 349, 351, 365, 368, 374, 376, 377, 379, 385, 386, 445], "5": [2, 3, 4, 6, 10, 13, 19, 21, 23, 24, 25, 26, 28, 30, 31, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 76, 77, 78, 80, 82, 83, 89, 90, 92, 95, 96, 97, 99, 100, 101, 102, 103, 105, 107, 108, 109, 115, 124, 127, 129, 133, 140, 146, 151, 152, 153, 154, 158, 162, 164, 169, 170, 171, 174, 184, 185, 191, 192, 194, 195, 199, 203, 211, 214, 216, 221, 228, 240, 241, 243, 246, 247, 249, 250, 253, 258, 259, 262, 263, 264, 268, 270, 272, 286, 289, 301, 302, 308, 310, 311, 336, 342, 343, 346, 359, 360, 375, 377, 378, 379, 380, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 431, 432, 434, 436, 437, 439, 441, 442, 443, 458, 459, 460, 463, 469, 470, 471, 484, 486], "50": [32, 34, 51, 54, 55, 59, 60, 61, 64, 67, 94, 99, 107, 112, 115, 118, 169, 171, 185, 191, 200, 209, 215, 232, 234, 270, 271, 298, 299, 306, 320, 322, 323, 324, 325, 328, 329, 330, 338, 359, 360, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419, 445, 447, 449, 470, 471, 484, 486], "500": [34, 36, 43, 51, 80, 99, 111, 195, 250], "5000": [35, 51, 57, 99], "50001": 238, "501": 34, "50145": 34, "50179910e": 3, "502": [34, 99], "5021": 192, "503": 34, "504": [34, 64, 470], "50401436e": 3, "50403237e": 3, "5048": 471, "505": 34, "50542420e": 3, "50555332e": 3, "506": 34, "50607": 238, "506396": 34, "507": 34, "5071": [115, 158, 231], "507e": 55, "508": 34, "5082": 471, "509": 34, "50956261e": 3, "51": [6, 10, 34, 50, 55, 64, 115, 163, 195, 242, 303, 470, 471], "510": 34, "511": [34, 47, 486], "5115891053391053": 111, "51173": 34, "511866": 6, "512": [34, 50, 61, 85, 150, 157, 201, 245, 486], "51224868e": 3, "512372": [115, 310, 311], "513": [34, 470], "5134": 471, "514": 34, "515": 34, "516": [34, 35, 47, 486], "51633": 471, "51637901e": 3, "517": 34, "5176": 92, "5177": 471, "518": [6, 8, 34, 486], "51817419e": 3, "518244": 34, "5188": 471, "519": 34, "52": [31, 34, 57, 60, 92, 185, 242, 470, 471, 484], "520": 34, "521": 34, "52170336e": 3, "522": 34, "5220": 470, "523": 34, "524": 34, "525": 34, "526": 34, "527": [34, 56, 61, 486], "52761400e": 3, "528": [34, 46], "528093": 34, "5281": 0, "529": 34, "53": [23, 34, 63, 71, 74, 92, 94, 115, 199, 241, 242, 252, 470, 471, 486], "530": 34, "530991": 6, "530e": 55, "531": [34, 79], "53123822e": 3, "532": 34, "53203894e": 3, "53245294e": 3, "533": 34, "5339": 471, "534": 34, "534376": 64, "535": [34, 103, 112, 486], "536": [10, 28, 34, 486], "536042": 34, "537": 34, "53771162e": 3, "538": 34, "539": [34, 190], "53964861e": 3, "53994511e": 3, "54": [34, 43, 64, 72, 74, 92, 101, 115, 158, 195, 211, 242, 263, 289, 470, 471, 486], "540": [6, 34, 64, 470], "540842": 58, "541": 34, "542": 34, "542346": 58, "543": 34, "54347764e": 3, "5438": 42, "544": [34, 115, 215, 271], "545": [34, 72], "54584": 471, "546": [6, 34], "546246": 6, "54629998e": 3, "54676815e": 3, "546823e": 34, "547": 34, "54706858e": 3, "548": 34, "548e": 55, "549": [34, 115, 169], "5490204": [115, 303], "5496": 92, "55": [21, 34, 68, 136, 157, 470, 471], "550": 34, "551": 34, "55123255e": 3, "55160": 92, "552": [34, 90, 115, 215, 271], "553": 34, "5539": [3, 32, 33, 39, 99, 115, 210, 262], "554": 34, "555": 34, "55502723e": 3, "5556": 35, "556": 34, "55619764e": 3, "5562": 470, "557": [18, 28, 34, 486], "5576": 471, "558": 34, "559": [34, 95, 97, 115, 169, 486], "56": [34, 38, 73, 80, 83, 115, 165, 243, 470, 471, 486], "560": 34, "561": 34, "562": [34, 115, 217, 248], "563": [34, 102, 112, 486], "564": [16, 28, 34, 486], "56427959e": 3, "56494292e": 3, "565": 34, "566": 34, "56644325e": 3, "567": 34, "568": 34, "5680": 92, "56852": 34, "56859893e": 3, "569": 34, "56a": 34, "57": [6, 32, 34, 50, 51, 52, 61, 64, 92, 115, 119, 122, 143, 157, 195, 242, 470, 471, 486], "570": 34, "57069": 34, "570720e": 50, "571": 34, "57195": 34, "572": 34, "572388": 43, "573": [34, 115, 190, 217, 248], "574": 34, "57414429e": 3, "574836": 34, "575": 34, "575977": 34, "576": 34, "57642136e": 3, "577": 34, "5773": 471, "578": 34, "57883157e": 3, "579": 34, "579124": 34, "57928852e": 3, "57a": 34, "58": [34, 43, 64, 74, 92, 143, 157, 470, 471, 486], "580": 34, "58041502e": 3, "581": 34, "5818": 471, "582": [34, 38, 115], "58286481e": 3, "583": 34, "584": 34, "585": [34, 63], "586": 34, "5861": 471, "58655066e": 3, "587": 34, "587189": 34, "587956": 64, "588": 34, "589": 34, "58911": 471, "59": [34, 51, 54, 73, 92, 101, 115, 119, 157, 164, 195, 241, 359, 360, 470, 471], "590": 34, "590796": 34, "591": 34, "592": [34, 38, 115], "593": 34, "5934": [115, 180], "594": 34, "59461726e": 3, "595": 34, "595170": 6, "59526562e": 3, "596": 34, "596198": 58, "597": [25, 28, 34, 486], "598": 34, "59875994e": 3, "599": [34, 115, 190, 238], "5992": 92, "5997": [60, 115, 202, 256], "59974": 34, "5a": [6, 34, 64], "5b": [6, 34, 64], "5c": 64, "5d": [127, 157, 185], "5hju4": [162, 200, 259], "5mm": [67, 96, 180, 213], "5pm": [172, 485], "5th": [21, 203], "5x1": 213, "5x4": 213, "6": [3, 6, 8, 21, 25, 28, 31, 32, 34, 35, 37, 39, 40, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 64, 65, 67, 73, 74, 77, 81, 83, 88, 92, 95, 97, 100, 101, 105, 108, 109, 111, 112, 115, 119, 122, 124, 136, 138, 140, 143, 144, 145, 151, 152, 153, 158, 162, 169, 170, 171, 173, 184, 195, 202, 219, 225, 226, 238, 256, 259, 262, 282, 303, 359, 360, 364, 367, 369, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 433, 439, 447, 449, 470, 471, 485, 486], "60": [6, 16, 34, 42, 43, 65, 100, 103, 115, 159, 195, 216, 226, 272, 470, 471, 484], "600": [34, 51, 73, 74, 119, 157, 194, 250, 440, 486], "60000": 51, "60046": 34, "601": [34, 43, 47, 486], "601435": 34, "601793": 58, "601855088049469": 36, "602": 34, "602484": 34, "60263892e": 3, "602952": 34, "603": 34, "60399565e": 3, "60399873e": 3, "604": 34, "605": 34, "6058": 471, "606": 34, "606351": 34, "607": 34, "608": 34, "609": 34, "60954960e": 3, "61": [34, 37, 68, 103, 115, 209, 470, 471], "610": 34, "611": 34, "6111": 35, "6111111111111112": [3, 30], "612": [34, 90, 97, 470, 486], "61202478e": 3, "613": 34, "614": 34, "61421175e": 3, "615": 34, "616": [34, 50], "61629311e": 3, "616334": 34, "617": 34, "618": [34, 44, 47, 486], "619": 34, "62": [34, 64, 73, 101, 109, 115, 140, 157, 247, 470, 471], "620": [34, 87], "621": 34, "622": 34, "622503": 34, "622651": 50, "62265593e": 3, "623": 34, "624": 34, "624162": 34, "624321": 58, "624816": 34, "625": 34, "626": 34, "627": 34, "627259": 34, "627725": 34, "628": 34, "629": 34, "629164": 34, "629915": 58, "63": [6, 33, 34, 64, 94, 115, 221, 241, 249, 470, 471], "630": [34, 55, 61, 486], "6300": 64, "63034512e": 3, "63086072e": 3, "631": 34, "63144922e": 3, "631803": 6, "632": [34, 50], "633": [32, 34, 47, 486], "6330": 471, "63369": 471, "634": 34, "63471086e": 3, "634889": 34, "635": 34, "63537874e": 3, "636": 34, "637": 34, "638": 34, "63812": 471, "63833849e": 3, "639": [34, 55, 61, 486], "64": [6, 12, 20, 22, 31, 34, 35, 37, 40, 49, 67, 80, 85, 87, 95, 150, 155, 157, 183, 195, 201, 226, 238, 241, 242, 245, 470, 471], "640": 34, "6408": 470, "641": [31, 34, 47, 101, 112, 486], "642": [34, 57, 281, 284, 285, 292, 441], "64226366e": 3, "64243665e": 3, "643": 34, "6435": 35, "644": [34, 51], "644223": 34, "6447": 115, "645": 34, "645241": 34, "645e": 55, "645m": 219, "646": 34, "64628017e": 3, "64672": 34, "64681361e": 3, "646e": 55, "647": 34, "647343": 34, "648": [34, 64, 470], "648e": 55, "649": 34, "64x64x64": [6, 226], "65": [34, 45, 92, 131, 157, 470, 471], "650": 34, "65019361e": 3, "65059990e": 3, "6506": 115, "651": 34, "652": 34, "65220924e": 3, "65277188e": 3, "653": 34, "65322559e": 3, "654": 34, "65405957e": 3, "6542": [50, 61, 486], "6546": 34, "655": 34, "656": 34, "657": 34, "65755380e": 3, "658": 34, "65859774e": 3, "659": 34, "66": [6, 17, 18, 34, 60, 64, 91, 94, 102, 201, 470, 471], "660": 34, "660587": 34, "661": 34, "662": 34, "663": 34, "664": 34, "664250": 64, "664e": 55, "665": [34, 60, 115, 118, 218, 222, 257, 273, 275], "66513728e": 3, "66533": 34, "66533766e": 3, "666": 34, "666023": 34, "667": 34, "668": 34, "668929": 64, "66896192e": 3, "669": [34, 51, 115, 446, 452, 470], "669409": 58, "67": [25, 34, 60, 93, 122, 157, 241, 470, 471], "670": [34, 115, 118, 218, 273, 275], "670599": 44, "671": [19, 28, 34, 486], "67106173e": 3, "6712058072321548": 36, "67124470e": 3, "672": 34, "67257573e": 3, "67291681e": 3, "673": 34, "674": 34, "675": [6, 15, 28, 34, 486], "675004": 58, "676": 34, "676518": 6, "676956": 34, "67698706e": 3, "677": 34, "677519": 34, "678": [34, 60, 115, 222, 257], "6784": 92, "679": [34, 471], "679756": 34, "67992259e": 3, "68": [33, 34, 60, 185, 470, 471, 484], "680": 34, "68079575e": 3, "681": [34, 51, 115, 446, 452], "68151": 471, "682": 34, "682436": 34, "68292": 471, "683": [24, 28, 34, 486], "68303131e": 3, "683343": 64, "684": 34, "684567": 34, "68463836e": 3, "685": 34, "68523306e": 3, "68584": 92, "686": 34, "687": 34, "68752689e": 3, "688": 34, "689": 34, "68e": 55, "69": [6, 12, 34, 73, 80, 470, 471], "690": [34, 80, 83, 486], "691": 34, "69101694e": 3, "69169007e": 3, "692": 34, "692869": 64, "693": 34, "69390087e": 3, "694": 34, "695": 34, "696": 34, "697": [34, 57, 61, 486], "697867": 34, "698": [3, 34], "699": 34, "69996651e": 3, "6a": [6, 64, 470], "6b": [6, 470], "6c": 6, "6min": 45, "6mm": [303, 447], "6th": 21, "7": [3, 6, 16, 18, 25, 26, 28, 34, 36, 40, 44, 45, 46, 47, 51, 54, 55, 56, 59, 60, 61, 64, 65, 67, 70, 71, 73, 83, 87, 89, 92, 95, 105, 109, 112, 115, 118, 119, 122, 124, 131, 133, 138, 140, 143, 144, 146, 151, 153, 170, 180, 183, 184, 190, 195, 199, 201, 209, 223, 226, 229, 238, 242, 244, 245, 250, 254, 308, 310, 311, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 419, 425, 429, 431, 432, 434, 436, 437, 441, 443, 446, 452, 463, 470, 471, 484, 486], "70": [22, 31, 33, 34, 65, 110, 115, 169, 225, 251, 470, 471], "700": [34, 146, 157, 250], "700000": 67, "700012": 67, "70012": 471, "701": 34, "70159826e": 3, "702": 34, "70216017e": 3, "703": 34, "703344": 34, "704": 34, "705": 34, "706": 34, "707": 34, "70784669e": 3, "708": 34, "70884": [115, 211, 263, 289], "709": 34, "71": [33, 34, 73, 470, 471], "710": 34, "71052295e": 3, "710553": 64, "711": 34, "712": 34, "712135": [115, 192], "71215995e": 3, "71451258e": 3, "71509754e": 3, "71561": [115, 199, 244], "715845": 64, "71605028e": 3, "717663": 34, "72": [34, 45, 58, 60, 64, 92, 94, 103, 115, 152, 157, 170, 222, 257, 470, 471], "72052275e": 3, "7209": [115, 191, 270], "7214": [115, 191, 270], "72173053e": 3, "7218": 471, "7221": 45, "722242": 34, "724": [101, 112, 486], "72430026e": 3, "72569158e": 3, "72591340e": 3, "726486": 64, "727": [68, 74, 486], "729": 470, "73": [33, 34, 92, 103, 470, 471], "731": [112, 486], "73138850e": 3, "732": [102, 111], "735212": 34, "7359307359307359": 35, "73611726e": 3, "73681090e": 3, "73788075e": 3, "7380952380952381": 35, "738699": 6, "74": [11, 16, 19, 22, 34, 50, 52, 88, 89, 92, 101, 470, 471], "740886": 34, "74249": 34, "743": [79, 83, 486], "743122": 50, "744": 3, "74432": 471, "74667316e": 3, "748": [22, 28, 486], "749": [6, 8, 486], "74913387e": 3, "7493501": [50, 115, 163, 304], "75": [24, 34, 42, 46, 51, 67, 73, 92, 104, 111, 115, 194, 241, 382, 470, 471], "751": [13, 28, 486], "752": [101, 115], "75294461e": 3, "75451916e": 3, "755": [27, 28, 486], "75530775e": 3, "756": [64, 94, 97, 101, 115, 470, 486], "757": [58, 61, 486], "757573e": 50, "758": [3, 17, 30], "75888963e": 3, "7589": 34, "76": [33, 34, 67, 73, 244, 252, 470, 471], "76046259e": 3, "760997": 34, "761": [107, 112, 486], "7616": 92, "762": 57, "763": [101, 115], "763636": 6, "763713": 34, "76487131e": 3, "76553302e": 3, "766": [101, 115], "76643603e": 3, "76695197e": 3, "767": 3, "768": [97, 486], "769": 87, "76993450e": 3, "77": [34, 67, 73, 470, 471], "77020855e": 3, "771": 8, "77109": 34, "772e": 55, "773093": 34, "77309486e": 3, "77395650e": 3, "774": [32, 33, 41], "77511580e": 3, "776293": 64, "777": [70, 74, 103, 486], "777205": 50, "7778": 32, "778077": 58, "77914089e": 3, "779998": 34, "78": [34, 43, 51, 54, 55, 67, 73, 94, 115, 169, 470, 471], "78035138e": 3, "7808": 92, "78232": 92, "784": [131, 157], "785086": 34, "786": [77, 115, 313], "78896727e": 3, "78908104e": 3, "78947077e": 3, "79": [34, 67, 73, 92, 470, 471], "79165785e": 3, "791928": 34, "79199911e": 3, "792": 64, "793": [71, 115, 131, 157], "796": [33, 77, 112, 115, 313, 486], "796836": 34, "79689410e": 3, "797": 110, "798387": 64, "79848": 471, "7a": [6, 34, 64, 470], "7b": 6, "7min": 107, "7networks_lh_cont_cing_1": 471, "7networks_lh_cont_cing_2": 471, "7networks_lh_cont_ofc_1": 471, "7networks_lh_cont_par_1": 471, "7networks_lh_cont_par_2": 471, "7networks_lh_cont_par_3": 471, "7networks_lh_cont_par_4": 471, "7networks_lh_cont_par_5": 471, "7networks_lh_cont_par_6": 471, "7networks_lh_cont_pcun_1": 471, "7networks_lh_cont_pcun_2": 471, "7networks_lh_cont_pfcl_1": 471, "7networks_lh_cont_pfcl_2": 471, "7networks_lh_cont_pfcl_3": 471, "7networks_lh_cont_pfcl_4": 471, "7networks_lh_cont_pfcl_5": 471, "7networks_lh_cont_pfcl_6": 471, "7networks_lh_cont_pfcl_7": 471, "7networks_lh_cont_pfcl_8": 471, "7networks_lh_cont_pfcmp_1": 471, "7networks_lh_cont_pfcv_1": 471, "7networks_lh_cont_temp_1": 471, "7networks_lh_default_par_1": 471, "7networks_lh_default_par_2": 471, "7networks_lh_default_par_3": 471, "7networks_lh_default_par_4": 471, "7networks_lh_default_par_5": 471, "7networks_lh_default_par_6": 471, "7networks_lh_default_par_7": 471, "7networks_lh_default_pcunpcc_1": 471, "7networks_lh_default_pcunpcc_10": 471, "7networks_lh_default_pcunpcc_11": 471, "7networks_lh_default_pcunpcc_2": 471, "7networks_lh_default_pcunpcc_3": 471, "7networks_lh_default_pcunpcc_4": 471, "7networks_lh_default_pcunpcc_5": 471, "7networks_lh_default_pcunpcc_6": 471, "7networks_lh_default_pcunpcc_7": 471, "7networks_lh_default_pcunpcc_8": 471, "7networks_lh_default_pcunpcc_9": 471, "7networks_lh_default_pfc_1": 471, "7networks_lh_default_pfc_10": 471, "7networks_lh_default_pfc_11": 471, "7networks_lh_default_pfc_12": 471, "7networks_lh_default_pfc_13": 471, "7networks_lh_default_pfc_14": 471, "7networks_lh_default_pfc_15": 471, "7networks_lh_default_pfc_16": 471, "7networks_lh_default_pfc_17": 471, "7networks_lh_default_pfc_18": 471, "7networks_lh_default_pfc_19": 471, "7networks_lh_default_pfc_2": 471, "7networks_lh_default_pfc_20": 471, "7networks_lh_default_pfc_21": 471, "7networks_lh_default_pfc_22": 471, "7networks_lh_default_pfc_23": 471, "7networks_lh_default_pfc_24": 471, "7networks_lh_default_pfc_3": 471, "7networks_lh_default_pfc_4": 471, "7networks_lh_default_pfc_5": 471, "7networks_lh_default_pfc_6": 471, "7networks_lh_default_pfc_7": 471, "7networks_lh_default_pfc_8": 471, "7networks_lh_default_pfc_9": 471, "7networks_lh_default_temp_1": 471, "7networks_lh_default_temp_10": 471, "7networks_lh_default_temp_2": 471, "7networks_lh_default_temp_3": 471, "7networks_lh_default_temp_4": 471, "7networks_lh_default_temp_5": 471, "7networks_lh_default_temp_6": 471, "7networks_lh_default_temp_7": 471, "7networks_lh_default_temp_8": 471, "7networks_lh_default_temp_9": 471, "7networks_lh_dorsattn_fef_1": 471, "7networks_lh_dorsattn_fef_2": 471, "7networks_lh_dorsattn_fef_3": 471, "7networks_lh_dorsattn_fef_4": 471, "7networks_lh_dorsattn_post_1": 471, "7networks_lh_dorsattn_post_10": 471, "7networks_lh_dorsattn_post_11": 471, "7networks_lh_dorsattn_post_12": 471, "7networks_lh_dorsattn_post_13": 471, "7networks_lh_dorsattn_post_14": 471, "7networks_lh_dorsattn_post_15": 471, "7networks_lh_dorsattn_post_16": 471, "7networks_lh_dorsattn_post_17": 471, "7networks_lh_dorsattn_post_2": 471, "7networks_lh_dorsattn_post_3": 471, "7networks_lh_dorsattn_post_4": 471, "7networks_lh_dorsattn_post_5": 471, "7networks_lh_dorsattn_post_6": 471, "7networks_lh_dorsattn_post_7": 471, "7networks_lh_dorsattn_post_8": 471, "7networks_lh_dorsattn_post_9": 471, "7networks_lh_dorsattn_prcv_1": 471, "7networks_lh_dorsattn_prcv_2": 471, "7networks_lh_limbic_ofc_1": 471, "7networks_lh_limbic_ofc_2": 471, "7networks_lh_limbic_ofc_3": 471, "7networks_lh_limbic_ofc_4": 471, "7networks_lh_limbic_ofc_5": 471, "7networks_lh_limbic_temppole_1": 471, "7networks_lh_limbic_temppole_2": 471, "7networks_lh_limbic_temppole_3": 471, "7networks_lh_limbic_temppole_4": 471, "7networks_lh_limbic_temppole_5": 471, "7networks_lh_limbic_temppole_6": 471, "7networks_lh_limbic_temppole_7": 471, "7networks_lh_limbic_temppole_8": 471, "7networks_lh_salventattn_froperins_1": 471, "7networks_lh_salventattn_froperins_2": 471, "7networks_lh_salventattn_froperins_3": 471, "7networks_lh_salventattn_froperins_4": 471, "7networks_lh_salventattn_froperins_5": 471, "7networks_lh_salventattn_froperins_6": 471, "7networks_lh_salventattn_froperins_7": 471, "7networks_lh_salventattn_froperins_8": 471, "7networks_lh_salventattn_froperins_9": 471, "7networks_lh_salventattn_med_1": 471, "7networks_lh_salventattn_med_2": 471, "7networks_lh_salventattn_med_3": 471, "7networks_lh_salventattn_med_4": 471, "7networks_lh_salventattn_med_5": 471, "7networks_lh_salventattn_med_6": 471, "7networks_lh_salventattn_med_7": 471, "7networks_lh_salventattn_paroper_1": 471, "7networks_lh_salventattn_paroper_2": 471, "7networks_lh_salventattn_paroper_3": 471, "7networks_lh_salventattn_paroper_4": 471, "7networks_lh_salventattn_pfcl_1": 471, "7networks_lh_salventattn_tempocc_1": 471, "7networks_lh_sommot_1": 471, "7networks_lh_sommot_10": 471, "7networks_lh_sommot_11": 471, "7networks_lh_sommot_12": 471, "7networks_lh_sommot_13": 471, "7networks_lh_sommot_14": 471, "7networks_lh_sommot_15": 471, "7networks_lh_sommot_16": 471, "7networks_lh_sommot_17": 471, "7networks_lh_sommot_18": 471, "7networks_lh_sommot_19": 471, "7networks_lh_sommot_2": 471, "7networks_lh_sommot_20": 471, "7networks_lh_sommot_21": 471, "7networks_lh_sommot_22": 471, "7networks_lh_sommot_23": 471, "7networks_lh_sommot_24": 471, "7networks_lh_sommot_25": 471, "7networks_lh_sommot_26": 471, "7networks_lh_sommot_27": 471, "7networks_lh_sommot_28": 471, "7networks_lh_sommot_29": 471, "7networks_lh_sommot_3": 471, "7networks_lh_sommot_30": 471, "7networks_lh_sommot_31": 471, "7networks_lh_sommot_32": 471, "7networks_lh_sommot_33": 471, "7networks_lh_sommot_34": 471, "7networks_lh_sommot_35": 471, "7networks_lh_sommot_36": 471, "7networks_lh_sommot_37": 471, "7networks_lh_sommot_4": 471, "7networks_lh_sommot_5": 471, "7networks_lh_sommot_6": 471, "7networks_lh_sommot_7": 471, "7networks_lh_sommot_8": 471, "7networks_lh_sommot_9": 471, "7networks_lh_vis_1": 471, "7networks_lh_vis_10": 471, "7networks_lh_vis_11": 471, "7networks_lh_vis_12": 471, "7networks_lh_vis_13": 471, "7networks_lh_vis_14": 471, "7networks_lh_vis_15": 471, "7networks_lh_vis_16": 471, "7networks_lh_vis_17": 471, "7networks_lh_vis_18": 471, "7networks_lh_vis_19": 471, "7networks_lh_vis_2": 471, "7networks_lh_vis_20": 471, "7networks_lh_vis_21": 471, "7networks_lh_vis_22": 471, "7networks_lh_vis_23": 471, "7networks_lh_vis_24": 471, "7networks_lh_vis_25": 471, "7networks_lh_vis_26": 471, "7networks_lh_vis_27": 471, "7networks_lh_vis_28": 471, "7networks_lh_vis_29": 471, "7networks_lh_vis_3": [250, 471], "7networks_lh_vis_30": 471, "7networks_lh_vis_31": 471, "7networks_lh_vis_4": 471, "7networks_lh_vis_5": 471, "7networks_lh_vis_6": 471, "7networks_lh_vis_7": 471, "7networks_lh_vis_8": 471, "7networks_lh_vis_9": 471, "7networks_rh_cont_cing_1": 471, "7networks_rh_cont_cing_2": 471, "7networks_rh_cont_par_1": 471, "7networks_rh_cont_par_2": 471, "7networks_rh_cont_par_3": 471, "7networks_rh_cont_par_4": 471, "7networks_rh_cont_par_5": 471, "7networks_rh_cont_par_6": 471, "7networks_rh_cont_pcun_1": 471, "7networks_rh_cont_pcun_2": 471, "7networks_rh_cont_pfcl_1": 471, "7networks_rh_cont_pfcl_10": 471, "7networks_rh_cont_pfcl_11": 471, "7networks_rh_cont_pfcl_12": 471, "7networks_rh_cont_pfcl_13": 471, "7networks_rh_cont_pfcl_14": 471, "7networks_rh_cont_pfcl_15": 471, "7networks_rh_cont_pfcl_2": 471, "7networks_rh_cont_pfcl_3": 471, "7networks_rh_cont_pfcl_4": 471, "7networks_rh_cont_pfcl_5": 471, "7networks_rh_cont_pfcl_6": 471, "7networks_rh_cont_pfcl_7": 471, "7networks_rh_cont_pfcl_8": 471, "7networks_rh_cont_pfcl_9": 471, "7networks_rh_cont_pfcmp_1": 471, "7networks_rh_cont_pfcmp_2": 471, "7networks_rh_cont_pfcv_1": 471, "7networks_rh_cont_temp_1": 471, "7networks_rh_cont_temp_2": 471, "7networks_rh_default_par_1": 471, "7networks_rh_default_par_2": 471, "7networks_rh_default_par_3": 471, "7networks_rh_default_par_4": 471, "7networks_rh_default_par_5": 471, "7networks_rh_default_pcunpcc_1": 471, "7networks_rh_default_pcunpcc_2": 471, "7networks_rh_default_pcunpcc_3": 471, "7networks_rh_default_pcunpcc_4": 471, "7networks_rh_default_pcunpcc_5": 471, "7networks_rh_default_pcunpcc_6": 471, "7networks_rh_default_pcunpcc_7": 471, "7networks_rh_default_pcunpcc_8": 471, "7networks_rh_default_pcunpcc_9": 471, "7networks_rh_default_pfcdpfcm_1": 471, "7networks_rh_default_pfcdpfcm_10": 471, "7networks_rh_default_pfcdpfcm_11": 471, "7networks_rh_default_pfcdpfcm_12": 471, "7networks_rh_default_pfcdpfcm_13": 471, "7networks_rh_default_pfcdpfcm_2": 471, "7networks_rh_default_pfcdpfcm_3": 471, "7networks_rh_default_pfcdpfcm_4": 471, "7networks_rh_default_pfcdpfcm_5": 471, "7networks_rh_default_pfcdpfcm_6": 471, "7networks_rh_default_pfcdpfcm_7": 471, "7networks_rh_default_pfcdpfcm_8": 471, "7networks_rh_default_pfcdpfcm_9": 471, "7networks_rh_default_pfcv_1": 471, "7networks_rh_default_pfcv_2": 471, "7networks_rh_default_pfcv_3": 471, "7networks_rh_default_pfcv_4": 471, "7networks_rh_default_temp_1": 471, "7networks_rh_default_temp_2": 471, "7networks_rh_default_temp_3": 471, "7networks_rh_default_temp_4": 471, "7networks_rh_default_temp_5": 471, "7networks_rh_default_temp_6": 471, "7networks_rh_default_temp_7": 471, "7networks_rh_default_temp_8": 471, "7networks_rh_dorsattn_fef_1": 471, "7networks_rh_dorsattn_fef_2": 471, "7networks_rh_dorsattn_fef_3": 471, "7networks_rh_dorsattn_post_1": 471, "7networks_rh_dorsattn_post_10": 471, "7networks_rh_dorsattn_post_11": 471, "7networks_rh_dorsattn_post_12": 471, "7networks_rh_dorsattn_post_13": 471, "7networks_rh_dorsattn_post_14": 471, "7networks_rh_dorsattn_post_15": 471, "7networks_rh_dorsattn_post_16": 471, "7networks_rh_dorsattn_post_17": 471, "7networks_rh_dorsattn_post_18": 471, "7networks_rh_dorsattn_post_19": 471, "7networks_rh_dorsattn_post_2": 471, "7networks_rh_dorsattn_post_3": 471, "7networks_rh_dorsattn_post_4": 471, "7networks_rh_dorsattn_post_5": 471, "7networks_rh_dorsattn_post_6": 471, "7networks_rh_dorsattn_post_7": 471, "7networks_rh_dorsattn_post_8": 471, "7networks_rh_dorsattn_post_9": 471, "7networks_rh_dorsattn_prcv_1": 471, "7networks_rh_limbic_ofc_1": 471, "7networks_rh_limbic_ofc_2": 471, "7networks_rh_limbic_ofc_3": 471, "7networks_rh_limbic_ofc_4": 471, "7networks_rh_limbic_ofc_5": 471, "7networks_rh_limbic_ofc_6": 471, "7networks_rh_limbic_temppole_1": 471, "7networks_rh_limbic_temppole_2": 471, "7networks_rh_limbic_temppole_3": 471, "7networks_rh_limbic_temppole_4": 471, "7networks_rh_limbic_temppole_5": 471, "7networks_rh_limbic_temppole_6": 471, "7networks_rh_limbic_temppole_7": 471, "7networks_rh_salventattn_froperins_1": 471, "7networks_rh_salventattn_froperins_2": 471, "7networks_rh_salventattn_froperins_3": 471, "7networks_rh_salventattn_froperins_4": 471, "7networks_rh_salventattn_froperins_5": 471, "7networks_rh_salventattn_froperins_6": 471, "7networks_rh_salventattn_froperins_7": 471, "7networks_rh_salventattn_froperins_8": 471, "7networks_rh_salventattn_med_1": 471, "7networks_rh_salventattn_med_2": 471, "7networks_rh_salventattn_med_3": 471, "7networks_rh_salventattn_med_4": 471, "7networks_rh_salventattn_med_5": 471, "7networks_rh_salventattn_med_6": 471, "7networks_rh_salventattn_med_7": 471, "7networks_rh_salventattn_med_8": 471, "7networks_rh_salventattn_pfcl_1": 471, "7networks_rh_salventattn_prc_1": 471, "7networks_rh_salventattn_tempoccpar_1": 471, "7networks_rh_salventattn_tempoccpar_2": 471, "7networks_rh_salventattn_tempoccpar_3": 471, "7networks_rh_salventattn_tempoccpar_4": 471, "7networks_rh_salventattn_tempoccpar_5": 471, "7networks_rh_salventattn_tempoccpar_6": 471, "7networks_rh_salventattn_tempoccpar_7": 471, "7networks_rh_sommot_1": 471, "7networks_rh_sommot_10": 471, "7networks_rh_sommot_11": 471, "7networks_rh_sommot_12": 471, "7networks_rh_sommot_13": 471, "7networks_rh_sommot_14": 471, "7networks_rh_sommot_15": 471, "7networks_rh_sommot_16": 471, "7networks_rh_sommot_17": 471, "7networks_rh_sommot_18": 471, "7networks_rh_sommot_19": 471, "7networks_rh_sommot_2": 471, "7networks_rh_sommot_20": 471, "7networks_rh_sommot_21": 471, "7networks_rh_sommot_22": 471, "7networks_rh_sommot_23": 471, "7networks_rh_sommot_24": 471, "7networks_rh_sommot_25": 471, "7networks_rh_sommot_26": 471, "7networks_rh_sommot_27": 471, "7networks_rh_sommot_28": 471, "7networks_rh_sommot_29": 471, "7networks_rh_sommot_3": 471, "7networks_rh_sommot_30": 471, "7networks_rh_sommot_31": 471, "7networks_rh_sommot_32": 471, "7networks_rh_sommot_33": 471, "7networks_rh_sommot_34": 471, "7networks_rh_sommot_35": 471, "7networks_rh_sommot_36": 471, "7networks_rh_sommot_37": 471, "7networks_rh_sommot_38": 471, "7networks_rh_sommot_39": 471, "7networks_rh_sommot_4": 471, "7networks_rh_sommot_40": 471, "7networks_rh_sommot_5": 471, "7networks_rh_sommot_6": 471, "7networks_rh_sommot_7": 471, "7networks_rh_sommot_8": 471, "7networks_rh_sommot_9": 471, "7networks_rh_vis_1": 471, "7networks_rh_vis_10": 471, "7networks_rh_vis_11": 471, "7networks_rh_vis_12": 471, "7networks_rh_vis_13": 471, "7networks_rh_vis_14": 471, "7networks_rh_vis_15": 471, "7networks_rh_vis_16": 471, "7networks_rh_vis_17": 471, "7networks_rh_vis_18": 471, "7networks_rh_vis_19": 471, "7networks_rh_vis_2": 471, "7networks_rh_vis_20": 471, "7networks_rh_vis_21": 471, "7networks_rh_vis_22": 471, "7networks_rh_vis_23": 471, "7networks_rh_vis_24": 471, "7networks_rh_vis_25": 471, "7networks_rh_vis_26": 471, "7networks_rh_vis_27": 471, "7networks_rh_vis_28": 471, "7networks_rh_vis_29": 471, "7networks_rh_vis_3": 471, "7networks_rh_vis_30": 471, "7networks_rh_vis_4": 471, "7networks_rh_vis_5": 471, "7networks_rh_vis_6": 471, "7networks_rh_vis_7": 471, "7networks_rh_vis_8": 471, "7networks_rh_vis_9": 471, "8": [3, 6, 10, 12, 13, 15, 23, 24, 25, 28, 31, 34, 35, 39, 40, 42, 44, 45, 47, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 63, 64, 67, 72, 73, 76, 77, 80, 87, 90, 92, 93, 101, 102, 104, 105, 106, 108, 109, 111, 112, 115, 118, 122, 127, 129, 131, 136, 144, 146, 148, 154, 162, 170, 192, 195, 198, 204, 205, 206, 207, 208, 209, 218, 228, 240, 243, 247, 253, 262, 264, 273, 275, 281, 286, 287, 288, 289, 290, 291, 296, 297, 298, 299, 301, 302, 303, 304, 318, 331, 335, 340, 359, 362, 363, 364, 365, 366, 367, 368, 369, 375, 378, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 445, 447, 456, 457, 459, 470, 471, 486], "80": [34, 45, 49, 56, 58, 66, 67, 73, 85, 105, 115, 158, 159, 172, 214, 217, 248, 335, 355, 393, 398, 400, 404, 410, 416, 469, 470, 471], "800": [28, 35, 88, 97, 250, 318, 331, 418, 457, 486], "8009": 99, "801": [92, 99], "801208": 43, "80211749e": 3, "80300478e": 3, "805": [71, 115], "80743238e": 3, "80780287e": 3, "80910322e": 3, "81": [31, 34, 51, 120, 157, 192, 470, 471], "810": 50, "8100": 35, "81060992e": 3, "8119": [115, 199, 211, 244, 263, 289], "813068": 34, "81308": 34, "81420133e": 3, "815609": 64, "81647826e": 3, "81664220e": 3, "81705060e": 3, "817e": 55, "81934715e": 3, "82": [31, 33, 34, 90, 192, 470, 471], "822": [110, 112, 131, 157, 486], "82244176e": 3, "823": 99, "825038": 6, "82603876e": 3, "82612139e": 3, "82637817e": 3, "82724e": 45, "82791833e": 3, "828": 470, "82890008e": 3, "82972464e": 3, "83": [33, 34, 73, 115, 119, 157, 178, 209, 333, 382, 470, 471], "832": 471, "83203473e": 3, "833": [12, 28, 486], "8333333333333334": 35, "8339": [152, 157], "834": [112, 486], "835": 103, "835504": 34, "836": 34, "836576": 34, "837": [6, 470], "83881888e": 3, "838935": 34, "839058": 34, "8397156": 0, "84": [34, 92, 101, 115, 338, 359, 470, 471], "84046751e": 3, "841": [36, 47, 486], "841e": 55, "842": [64, 74, 486], "842804": 34, "842x": [104, 115, 382], "8444": 35, "844e": 55, "845": [65, 74, 486], "84618185e": 3, "84698626e": 3, "84813488e": 3, "8493": 35, "85": [34, 49, 92, 131, 157, 376, 379, 470, 471], "850138": 6, "85051": 34, "851": [108, 112, 486], "8518518518518519": 3, "852582": 34, "85358049e": 3, "854": [33, 47, 486], "85520131e": 3, "856": [38, 47, 71, 74, 486], "8563": 35, "85681039e": 3, "858": [99, 471], "85904364e": 3, "86": [33, 34, 470, 471], "861": [26, 28, 486], "861249": 34, "863": [28, 486], "864": [6, 24, 40], "86600116e": 3, "86830265e": 3, "87": [31, 33, 34, 73, 92, 115, 470, 471], "87116357e": 3, "87167212e": 3, "8722": 35, "873351": 34, "874f": 57, "875": [115, 131, 157, 158], "8765432098765432": 3, "876886": 58, "877680e": 50, "878390": 58, "88": [34, 82, 90, 92, 104, 115, 382, 470, 471], "881": 471, "88148975e": 3, "881e": 55, "882": [40, 47, 486], "8824": 92, "882906": 64, "884836": 34, "885": 34, "8856": 35, "886": 3, "88672150e": 3, "88747101e": 3, "88767569e": 3, "888": 471, "88834116e": 3, "89": [31, 33, 34, 73, 78, 107, 470, 471], "89030019e": 3, "89090275e": 3, "891": [115, 158], "89177768e": 3, "89275306e": 3, "89307272e": 3, "89376214e": 3, "895": [49, 61, 111, 486], "8952": 92, "895e": 55, "89709778e": 3, "897179": 58, "89845940e": 3, "8990": 172, "8a": [6, 34], "8b": 6, "8mm": 102, "9": [2, 3, 4, 6, 8, 10, 11, 12, 15, 16, 17, 19, 21, 22, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 68, 70, 71, 72, 73, 76, 78, 79, 80, 87, 88, 89, 90, 91, 92, 93, 95, 96, 99, 100, 101, 104, 105, 106, 107, 108, 111, 112, 115, 117, 118, 119, 122, 128, 140, 149, 151, 158, 178, 199, 200, 218, 220, 223, 250, 259, 260, 273, 275, 277, 305, 309, 318, 327, 333, 349, 355, 358, 359, 360, 363, 364, 365, 366, 367, 368, 369, 382, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 418, 434, 436, 437, 453, 456, 470, 471, 484, 485, 486], "90": [10, 13, 23, 31, 33, 34, 45, 49, 52, 55, 58, 65, 78, 80, 92, 103, 105, 115, 131, 144, 152, 157, 162, 359, 360, 434, 436, 437, 440, 460, 470, 471, 484], "900": [146, 157, 250, 471], "90074437e": 3, "901255": 6, "90210170e": 3, "902378": 34, "90255535e": 3, "902773": 58, "904959": 34, "906274": 64, "907": 471, "9073798500881832": 40, "91": [2, 31, 34, 45, 58, 78, 92, 152, 157, 240, 251, 470, 471], "911755": 34, "9136": 92, "914": [42, 47, 486], "91413635e": 3, "91435": 471, "915": [42, 43, 115, 216, 272], "91520": 471, "915996": 34, "917": [17, 28, 486], "9177489177489178": 35, "918703": 64, "91a": 34, "92": [31, 33, 34, 78, 104, 115, 382, 470, 471], "922": [69, 74, 486], "922085": 58, "922613": 34, "923589": 58, "924282": 34, "925": 80, "92528577e": 3, "92569339e": 3, "9259259259259259": 3, "92623209e": 3, "92748601e": 3, "92871306e": 3, "929": [42, 43, 115, 216, 272], "93": [31, 33, 34, 43, 78, 92, 244, 470, 471], "931553": 34, "93192395e": 3, "932": 103, "93382223e": 3, "934": 97, "93485099e": 3, "935": [34, 97, 115, 209, 486], "935719": 34, "936": [86, 470], "937283": 64, "93775310e": 3, "938447": 34, "93850757e": 3, "94": [31, 34, 72, 78, 92, 107, 108, 267, 268, 470, 471], "940878": 34, "94177729e": 3, "94204654e": 3, "943745": 34, "944003": 34, "9444444444444444": 30, "945": [115, 209], "945328": 6, "945765": 34, "946": 471, "947": 471, "947193": 6, "9483471074380165": 35, "95": [26, 31, 34, 92, 94, 152, 157, 184, 195, 308, 310, 311, 470, 471], "950054": 64, "952826": 6, "953": [115, 191, 270], "954": 57, "95405601e": 3, "95493680e": 3, "955245e": 50, "955666": 34, "95629630e": 3, "957": [93, 97, 486], "959582": 34, "96": [6, 31, 33, 34, 51, 54, 73, 85, 110, 226, 470, 471, 486], "96232946e": 3, "9629629629629629": 3, "96433553e": 3, "964351": 34, "965": [115, 191, 270], "967": [64, 74, 471, 486], "9673": [115, 360], "9678": [115, 360], "968": [115, 209], "97": [31, 34, 46, 89, 470, 471], "970": 471, "972": 6, "973": 471, "974948": 34, "9753086419753086": 3, "978": [115, 310, 311], "979": 80, "98": [31, 33, 34, 51, 76, 88, 92, 94, 115, 152, 157, 178, 333, 382, 470, 471], "980": [115, 209], "98107": 0, "981215": 34, "9816": 92, "98227027e": 3, "983": 471, "983539": 34, "98654410e": 3, "98670334e": 3, "98717018e": 3, "98726904e": 3, "98745887e": 3, "9876543209876543": 3, "988": 115, "9880640268325807": 45, "98919550e": 3, "98950974e": 3, "99": [13, 31, 33, 34, 60, 94, 152, 157, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 470, 471], "990": [21, 28, 486], "99015327e": 3, "99186327e": 3, "992": 115, "994713": 34, "997517": 58, "9984": 92, "998496": 34, "999": 471, "9a": 470, "9b76y": [201, 245], "A": [0, 1, 5, 6, 7, 8, 12, 16, 17, 22, 30, 42, 44, 49, 50, 51, 58, 60, 63, 65, 69, 71, 72, 73, 76, 80, 81, 85, 87, 90, 93, 98, 99, 101, 104, 107, 108, 112, 113, 114, 115, 118, 125, 129, 138, 139, 143, 146, 152, 157, 158, 160, 161, 163, 165, 167, 168, 169, 171, 172, 173, 175, 178, 180, 181, 183, 184, 185, 191, 192, 194, 195, 197, 198, 199, 201, 202, 209, 215, 218, 221, 222, 223, 224, 225, 226, 228, 230, 231, 232, 241, 243, 244, 249, 251, 252, 253, 256, 257, 258, 260, 262, 270, 271, 273, 274, 275, 276, 278, 284, 285, 292, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 309, 310, 311, 314, 317, 318, 321, 327, 331, 336, 337, 343, 348, 349, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 382, 393, 394, 396, 398, 414, 415, 418, 423, 428, 430, 432, 434, 435, 438, 440, 444, 445, 446, 447, 448, 449, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 484, 486, 487], "AND": [95, 118, 127, 157], "And": [7, 26, 43, 103, 158, 173, 181, 184], "As": [3, 6, 16, 35, 37, 40, 46, 51, 54, 56, 67, 80, 82, 93, 95, 96, 99, 102, 105, 117, 124, 146, 157, 158, 159, 161, 163, 164, 165, 169, 171, 172, 174, 177, 183, 226, 240, 321, 359, 360], "At": [57, 65, 66, 69, 76, 78, 81, 92, 162, 180, 181, 331, 333], "BY": [126, 157, 213], "Be": [164, 165, 172, 232, 305, 458], "But": [51, 81, 99, 162, 171, 174, 185], "By": [3, 15, 16, 26, 30, 34, 36, 40, 60, 65, 70, 71, 103, 150, 157, 165, 172, 181, 185, 221, 231, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 277, 278, 279, 280, 281, 282, 283, 284, 285, 292, 296, 297, 298, 299, 301, 302, 303, 304, 318, 331, 337, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 417, 423, 426, 427, 429, 431, 432, 433, 440, 445, 446, 447, 450, 484], "For": [3, 4, 6, 7, 10, 15, 16, 20, 23, 24, 25, 30, 31, 33, 35, 36, 37, 38, 40, 42, 43, 50, 52, 53, 56, 65, 67, 69, 71, 72, 73, 80, 81, 87, 90, 92, 99, 101, 103, 105, 107, 110, 111, 117, 118, 143, 153, 157, 158, 159, 161, 163, 164, 165, 166, 167, 169, 171, 172, 173, 174, 177, 178, 180, 181, 183, 184, 185, 190, 191, 192, 193, 194, 197, 198, 200, 201, 203, 209, 210, 211, 212, 216, 217, 218, 220, 224, 225, 227, 228, 229, 230, 237, 240, 241, 242, 246, 247, 249, 250, 251, 253, 254, 263, 273, 275, 277, 289, 295, 296, 297, 298, 299, 301, 302, 303, 304, 308, 309, 310, 311, 318, 325, 331, 333, 348, 356, 359, 360, 363, 364, 366, 367, 369, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 417, 423, 426, 428, 431, 432, 433, 434, 435, 436, 437, 445, 447, 448, 449, 455, 456, 457, 458, 469, 471, 484, 485], "If": [0, 2, 10, 15, 16, 25, 33, 35, 36, 37, 42, 43, 44, 49, 50, 51, 53, 54, 55, 56, 57, 58, 60, 63, 70, 76, 80, 85, 87, 90, 92, 93, 95, 99, 100, 101, 104, 105, 106, 107, 108, 113, 117, 118, 126, 143, 150, 151, 153, 157, 158, 162, 164, 165, 167, 169, 171, 172, 174, 178, 180, 181, 183, 184, 185, 191, 230, 231, 232, 234, 236, 237, 238, 239, 242, 243, 244, 245, 246, 247, 249, 251, 256, 257, 258, 259, 263, 264, 266, 267, 268, 271, 273, 275, 277, 278, 282, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 318, 321, 325, 327, 331, 332, 333, 334, 335, 336, 337, 341, 342, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 358, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 456, 457, 458, 459, 463, 464, 465, 469, 484, 485], "In": [0, 2, 4, 6, 10, 15, 16, 17, 19, 23, 24, 25, 31, 33, 34, 37, 39, 40, 41, 42, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 60, 64, 66, 67, 68, 73, 76, 78, 80, 82, 87, 88, 90, 92, 95, 96, 100, 101, 103, 104, 108, 110, 111, 115, 116, 117, 118, 124, 125, 138, 143, 153, 155, 157, 158, 159, 161, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 176, 178, 180, 181, 182, 183, 184, 185, 191, 192, 195, 211, 217, 221, 230, 237, 240, 242, 246, 247, 248, 263, 270, 273, 275, 277, 296, 297, 298, 299, 301, 302, 303, 304, 305, 308, 310, 311, 318, 320, 325, 331, 333, 334, 351, 352, 353, 355, 376, 382, 418, 419, 431, 435, 443, 444, 453, 456, 469, 484, 485], "Ins": 53, "It": [2, 3, 6, 10, 15, 16, 17, 23, 35, 38, 40, 43, 44, 46, 50, 53, 63, 66, 67, 71, 72, 76, 78, 82, 90, 95, 99, 101, 102, 110, 116, 117, 118, 122, 133, 136, 137, 139, 150, 151, 152, 153, 157, 158, 159, 164, 165, 167, 168, 169, 171, 172, 174, 178, 179, 180, 181, 183, 184, 185, 195, 196, 214, 217, 218, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 485], "Its": [158, 166, 171, 300, 311, 318, 331, 334, 382, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 457], "NOS": 238, "NOT": 118, "No": [11, 16, 19, 22, 50, 52, 58, 67, 78, 88, 89, 92, 107, 171, 172, 352], "Not": [3, 67, 72, 246, 247, 386, 444, 446], "ON": 51, "ONE": [115, 180], "OR": 118, "Of": 69, "On": [14, 37, 51, 54, 55, 58, 60, 64, 67, 69, 76, 78, 115, 144, 157, 159, 171, 180, 184, 185, 231, 234], "One": [3, 6, 15, 35, 36, 40, 50, 51, 58, 71, 72, 80, 151, 157, 158, 159, 164, 165, 169, 171, 173, 174, 176, 177, 181, 183, 185, 292, 318, 351, 360, 364, 365, 367, 450], "Or": [30, 118, 164, 249, 250, 484], "Such": [95, 158, 356], "That": [33, 36, 37, 42, 43, 44, 49, 53, 54, 55, 56, 57, 58, 60, 63, 70, 90, 92, 93, 95, 99, 100, 101, 104, 105, 106, 107, 108, 117, 150, 157, 178, 305, 309, 318, 320, 325], "The": [0, 2, 3, 6, 7, 10, 12, 15, 16, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 33, 34, 35, 37, 40, 42, 43, 44, 47, 49, 50, 51, 52, 53, 54, 56, 57, 60, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 76, 77, 78, 80, 81, 82, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 106, 108, 110, 111, 113, 115, 117, 118, 120, 121, 122, 124, 125, 127, 129, 131, 133, 134, 135, 136, 137, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 171, 172, 173, 174, 177, 178, 180, 181, 182, 183, 184, 189, 190, 191, 192, 194, 195, 197, 198, 200, 203, 209, 210, 212, 213, 214, 219, 220, 221, 223, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 249, 250, 251, 253, 254, 259, 260, 262, 263, 264, 266, 267, 268, 270, 271, 273, 274, 275, 276, 277, 278, 281, 282, 284, 285, 292, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 325, 326, 327, 331, 332, 333, 334, 335, 336, 337, 338, 342, 346, 347, 348, 349, 350, 351, 352, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 469, 471, 475, 476, 480, 484, 485, 486, 487], "Their": 216, "Then": [2, 3, 15, 31, 42, 44, 49, 52, 53, 57, 64, 65, 95, 96, 111, 162, 164, 166, 167, 172, 181, 184, 185, 230, 232, 264, 444], "There": [0, 4, 22, 67, 161, 164, 165, 166, 172, 178, 248, 308, 310, 311, 332, 359, 454, 484], "These": [3, 4, 6, 16, 40, 57, 60, 62, 73, 75, 78, 80, 82, 90, 95, 109, 113, 117, 146, 149, 150, 153, 157, 164, 167, 168, 170, 171, 172, 176, 177, 178, 181, 185, 191, 192, 201, 211, 212, 226, 245, 256, 258, 294, 479, 484, 485], "To": [0, 2, 3, 4, 6, 16, 22, 23, 24, 32, 34, 38, 41, 42, 44, 45, 50, 51, 52, 53, 54, 56, 57, 64, 67, 68, 70, 77, 78, 80, 81, 88, 90, 95, 99, 102, 103, 106, 110, 117, 118, 129, 138, 143, 155, 157, 158, 159, 161, 164, 165, 166, 167, 169, 172, 173, 174, 177, 181, 183, 184, 249, 250, 273, 308, 310, 311, 318, 327, 331, 335, 347, 359, 426, 431, 432, 433, 434, 436, 437, 440, 444, 457, 484], "Will": [238, 273, 279, 318, 325, 340, 351, 352, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419, 428, 437, 441], "With": [10, 15, 33, 58, 79, 90, 167, 171, 174, 231, 234, 314, 360, 459, 468, 485], "_": [31, 37, 44, 46, 49, 51, 53, 59, 64, 76, 78, 81, 95, 101, 104, 107, 108, 124, 151, 155, 157, 172, 278, 321, 358], "__": [101, 230, 231, 232, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 444, 445, 446, 447], "______________________________________________________________________": 31, "________________________________________________________________________________": [34, 50, 51, 54, 55, 58, 60], "___________________________________________________________unmask": 34, "__________________________________________________________run_glm": 34, "________________________________________________________ward_tre": 51, "_____________________________________________________resample_img": 54, "____________________________________________________estimator_fit": 51, "___________________________________________________randomized_svd": 50, "__________________________________________________filter_and_mask": 34, "_________________________________________________compute_load": 50, "_______________________________________________filter_and_extract": [51, 54, 55, 58, 60], "______________________________________________explained_vari": 50, "_____________________________________________dict_learning_onlin": 50, "__________________________________________high_variance_confound": 55, "________________________________________resample_img": 56, "__________________________________filter_and_extract": [56, 58], "_________________________________recursive_neighbor_agglomer": 51, "__all__": 172, "__class__": 46, "__init__": [172, 230, 231, 232, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 318, 331, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 444, 445, 446, 447, 455, 461, 462, 463, 464, 465, 466], "__init___": 309, "__name__": 46, "__version__": 172, "_adjust_screening_percentil": [138, 157], "_agglom": 51, "_apply_cluster_size_threshold": [154, 157], "_ax": [11, 16, 19, 22, 50, 52, 88, 89], "_ball_sample_loc": 25, "_base": [35, 41, 50, 51], "_bold": 51, "_build": 172, "_build_pars": 360, "_check_mask_shap": 172, "_check_mask_valu": 172, "_check_second_level_input": [155, 157], "_cmap_d": 13, "_col_filters_available_on_serv": 273, "_column": 174, "_compute_facecolors_matplotlib": [126, 157], "_compute_load": 50, "_data": 21, "_design": 358, "_dict_learn": 50, "_empty_filt": 273, "_estimator_fit": 51, "_explained_vari": 50, "_extractionfunctor": [51, 54, 55, 58, 60], "_fastica": [93, 106], "_filter_and_extract": [51, 54, 55, 56, 58, 60], "_filter_and_mask": 34, "_full_brain_info": [126, 157], "_gamma_difference_hrf": [155, 157], "_get_clusters_t": [127, 157], "_get_mask_volum": [138, 157], "_get_vertexcolor": [126, 157], "_get_voxelwise_model_attribut": [151, 157], "_hemi": [7, 463, 464], "_label": 68, "_latest": 181, "_line_sample_loc": 25, "_method": 60, "_mix_colormap": [126, 157], "_neurosynth_fetch_words_url": [155, 157], "_neurovault_base_url": [155, 157], "_one_mesh_info": [126, 157], "_plot_surf_matplotlib": [126, 157], "_plot_surf_plotli": 10, "_projector": [14, 15, 17, 52, 53, 54, 60, 129, 153, 157], "_r": 13, "_region_id_nam": [129, 157], "_safe_cach": [124, 157], "_safe_get_data": [138, 157], "_sample_locations_between_surfac": 25, "_scale": 195, "_scan": 174, "_slicer": [2, 3, 4, 10, 11, 16, 17, 18, 19, 26, 31, 37, 41, 42, 44, 45, 50, 51, 52, 70, 72, 76, 82, 87, 88, 89, 90, 93, 95, 99, 104, 108, 153, 157], "_space": 321, "_spm_auditory_dataset": 6, "_stat": 358, "_statmap": 358, "_tag": 357, "_task": [64, 321], "_test": 172, "_univariate_select": 111, "_update_submatrix": 171, "_util": [10, 25, 39, 40, 42, 46, 51, 59, 68, 72, 79, 92, 107, 108, 111, 125, 127, 133, 152, 155, 157, 171, 172, 181], "_valid": 172, "_validate_shap": 172, "_version": 181, "_voxel": 174, "_vx": 181, "_z_map": 72, "a_nice_funct": 172, "aal": [129, 135, 157, 187, 240], "aal3": 240, "ab": [31, 45, 46, 55, 60, 82, 85, 104, 105, 106, 115, 171, 231, 234, 382, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419], "abadi": [0, 131, 133, 136, 143, 157], "abb4588": 115, "abbrev": 181, "abbrevi": 183, "abdulrahman": [101, 115], "aben": [0, 146, 157], "aberr": 79, "abid": [6, 115, 137, 157, 172, 187, 238], "abl": [31, 33, 38, 129, 157, 172, 181, 356, 434, 436, 437, 484], "abnorm": [115, 209], "about": [0, 2, 3, 6, 15, 20, 25, 51, 64, 65, 77, 79, 80, 95, 101, 102, 103, 110, 117, 118, 124, 125, 126, 129, 131, 146, 154, 157, 161, 164, 165, 167, 169, 171, 172, 173, 174, 178, 179, 180, 183, 190, 191, 193, 195, 197, 200, 201, 210, 217, 218, 220, 225, 228, 242, 251, 253, 262, 263, 264, 277, 286, 287, 288, 289, 290, 291, 360, 458, 469], "abov": [2, 3, 4, 6, 15, 22, 34, 40, 44, 49, 50, 51, 58, 67, 87, 95, 101, 118, 127, 129, 130, 138, 157, 158, 159, 161, 163, 164, 169, 171, 172, 173, 178, 181, 183, 184, 185, 210, 225, 240, 262, 264, 286, 287, 290, 296, 297, 298, 299, 301, 302, 305, 306, 308, 309, 310, 311, 314, 318, 320, 322, 323, 324, 325, 328, 329, 330, 351, 352, 359, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 387, 388, 389, 390, 391, 392, 394, 396, 397, 399, 401, 403, 405, 407, 409, 419, 431, 439, 441, 443, 445, 447, 458, 459], "abraham": [0, 53, 100, 115, 119, 120, 122, 123, 131, 133, 136, 146, 157, 162, 195, 359, 360, 447], "abrupt": 185, "absenc": [174, 181, 450], "absolut": [44, 45, 53, 60, 111, 146, 157, 169, 171, 172, 213, 255, 265, 278, 335, 340, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 416, 417, 419, 425, 426, 428, 432, 433, 434, 437, 440, 441, 443, 484], "absolute_path": 109, "abstract": [116, 362], "ac": [115, 209, 211, 212, 225, 226, 227, 251, 263, 279, 280, 289], "academi": [115, 169, 180, 191, 195, 225, 251, 270, 300, 360], "acc": 21, "acceler": [115, 219, 282], "accept": [2, 3, 49, 66, 124, 125, 129, 137, 138, 140, 143, 144, 146, 149, 150, 151, 152, 153, 154, 155, 157, 172, 173, 183, 191, 331, 333, 334, 356, 373, 374, 375, 376, 377, 378, 379, 417, 428, 430, 431, 432, 433, 440, 442, 453, 454], "access": [6, 34, 37, 40, 50, 58, 63, 64, 67, 72, 76, 115, 117, 125, 153, 157, 159, 163, 171, 172, 173, 182, 183, 185, 239, 240, 243, 248, 249, 250, 253, 254, 277, 279, 280, 281, 282, 306, 396, 475, 487], "accommod": [127, 143, 157], "accord": [43, 46, 95, 101, 124, 138, 139, 140, 143, 149, 151, 155, 157, 162, 169, 172, 202, 219, 229, 231, 238, 250, 294, 296, 297, 298, 299, 301, 302, 305, 336, 356, 382, 428, 429, 434, 436, 437, 441, 443, 446, 447, 458, 459, 484], "accordingli": [16, 153, 157, 356], "account": [6, 67, 77, 95, 169, 172, 181, 185, 191, 212, 359, 363, 364, 366, 367, 369, 447], "accumul": [110, 484], "accur": [51, 60, 67, 69, 146, 154, 157, 169, 173, 174], "accuraci": [30, 31, 32, 33, 34, 36, 38, 43, 53, 99, 100, 150, 157, 168, 169, 178, 180, 296, 298, 300, 301, 487], "accuracy_scor": [43, 53], "accuracy_to_print": 43, "acharya": 0, "achiev": [10, 16, 57, 71, 94, 164, 171, 180, 184, 185, 234], "acompcor_combin": 359, "acq": 321, "acquir": [3, 6, 40, 67, 68, 117, 174, 178, 180, 213, 226], "acquis": 185, "acquisit": [3, 6, 31, 33, 65, 67, 71, 102, 115, 169, 174, 178, 195, 226, 268, 325, 418], "across": [3, 6, 16, 17, 40, 49, 52, 53, 58, 66, 67, 81, 95, 99, 100, 101, 105, 111, 115, 125, 130, 146, 152, 157, 158, 159, 162, 163, 164, 165, 167, 169, 174, 176, 178, 190, 195, 203, 209, 217, 225, 230, 238, 248, 281, 296, 297, 298, 299, 301, 302, 303, 304, 354, 371, 373, 418, 445, 447, 469, 484], "act": [30, 35, 139, 157, 178, 236, 237, 384], "action": [172, 174, 181, 197, 268], "activ": [6, 7, 15, 16, 17, 31, 33, 42, 43, 51, 67, 69, 70, 71, 72, 77, 78, 80, 81, 82, 101, 110, 115, 117, 158, 159, 162, 163, 164, 168, 169, 171, 172, 173, 174, 177, 178, 180, 181, 185, 191, 192, 195, 197, 202, 215, 216, 217, 225, 232, 238, 240, 248, 251, 270, 271, 272, 293, 313, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 416, 447, 449, 485], "activation_threshold": 416, "actual": [3, 6, 44, 67, 68, 71, 78, 87, 107, 126, 157, 171, 172, 174, 178, 183, 232, 277, 318, 331, 334, 457], "ad": [2, 15, 16, 19, 21, 22, 31, 37, 42, 44, 45, 50, 68, 69, 73, 85, 88, 104, 108, 124, 125, 126, 129, 130, 139, 140, 150, 152, 153, 154, 155, 157, 167, 171, 173, 181, 230, 231, 232, 236, 237, 242, 245, 247, 249, 250, 252, 253, 258, 259, 260, 264, 265, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 321, 327, 331, 333, 335, 336, 340, 345, 346, 347, 348, 350, 351, 352, 355, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 378, 382, 383, 385, 386, 417, 418, 419, 422, 423, 425, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 443, 444, 445, 446, 447, 449, 456, 459, 461, 462, 463, 464, 465, 466, 469, 487], "adam": [101, 115], "adapt": [51, 66, 117, 129, 157, 162, 165, 172, 318, 327, 359, 470, 471], "add": [10, 15, 16, 21, 32, 42, 43, 52, 58, 65, 69, 81, 104, 118, 123, 124, 125, 126, 127, 128, 129, 130, 136, 138, 139, 141, 143, 146, 151, 155, 157, 162, 164, 167, 169, 172, 178, 181, 232, 249, 250, 273, 275, 294, 336, 359, 368, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 439, 441, 443, 458, 459, 484], "add_ax": [2, 16, 19], "add_contour": [10, 15, 19, 129, 139, 146, 157, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 484], "add_edg": [384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 484], "add_graph": [129, 157, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409], "add_mark": [42, 57, 63, 70, 101, 135, 141, 144, 157, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 484], "add_object_bound": [383, 385, 386], "add_overlai": [52, 122, 157, 162, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 423, 425, 426, 431, 432, 433, 484], "add_patch": 42, "add_reg": [63, 65, 173, 325], "add_reg_nam": [63, 65, 325], "add_subplot": [63, 92], "addit": [0, 15, 16, 40, 57, 65, 67, 70, 80, 87, 90, 102, 117, 118, 120, 125, 138, 143, 149, 157, 164, 167, 171, 173, 178, 180, 181, 192, 238, 240, 262, 272, 296, 297, 298, 299, 300, 303, 304, 306, 318, 325, 331, 333, 356, 359, 360, 362, 365, 368, 444, 445, 446, 455, 484], "addition": [15, 16, 60, 70, 152, 157, 172, 177, 181, 184, 185, 201, 210, 321, 382, 456], "address": [115, 174, 177, 178, 181, 333, 382], "adelsberg": [115, 219, 282], "adelsheim": [115, 194, 241], "adelstein": 115, "adequ": [76, 198], "adhd": [62, 74, 103, 113, 146, 155, 157, 158, 173, 187, 239, 318, 325, 362, 369, 395, 433, 455, 457, 471, 481, 486], "adhd200": [193, 239], "adhd200_40sub_preprocess": [193, 239], "adhd_dataset": [12, 63, 173], "adher": 172, "adjac": [38, 146, 157, 461], "adjacency_matrix": [23, 49, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419, 439], "adjust": [40, 67, 68, 124, 129, 141, 157, 360, 384, 395, 398], "adjust_screening_percentil": 40, "admittedli": 161, "adolesc": [115, 180], "adopt": [169, 178], "adriana": [115, 219, 282], "adult": [50, 53, 100, 115, 146, 157, 179, 195, 200, 220, 259, 277], "adulthood": [115, 211, 263, 289], "advanc": [0, 57, 111, 112, 115, 164, 166, 167, 172, 173, 180, 184, 262, 296, 298, 299, 343, 362, 368, 418, 433, 486, 487], "advantag": [40, 44, 45, 69, 171, 185], "advertis": [128, 157], "advic": [164, 191], "advis": [106, 172, 183, 264, 376, 445], "aesthet": [129, 157], "affect": [65, 73, 103, 129, 152, 157, 174, 178], "affili": 172, "affin": [42, 45, 49, 51, 58, 71, 84, 90, 92, 94, 95, 97, 103, 105, 113, 137, 152, 157, 178, 182, 185, 209, 296, 297, 298, 299, 301, 302, 303, 304, 318, 331, 336, 337, 338, 339, 341, 346, 347, 348, 349, 350, 351, 352, 354, 363, 364, 365, 366, 367, 368, 374, 375, 376, 377, 378, 379, 380, 383, 385, 386, 438, 445, 450, 453, 454, 469, 473, 486, 487], "affine_": [365, 368], "afni": [155, 157], "after": [24, 29, 33, 35, 37, 40, 42, 47, 52, 58, 67, 78, 95, 99, 101, 107, 113, 127, 154, 157, 161, 162, 164, 169, 171, 172, 174, 178, 181, 184, 185, 195, 234, 262, 296, 297, 298, 299, 303, 318, 326, 327, 331, 336, 340, 343, 348, 359, 360, 367, 368, 448, 450, 451, 455, 456, 457, 486], "afterward": [2, 171, 181], "ag": [45, 48, 61, 79, 98, 112, 113, 115, 146, 157, 158, 165, 166, 170, 177, 178, 179, 180, 193, 195, 200, 209, 211, 220, 230, 238, 248, 259, 263, 270, 277, 282, 289, 296, 297, 298, 299, 301, 302, 362, 367, 419, 430, 438, 470, 486], "again": [16, 51, 72, 92, 103, 105, 117, 172, 177, 180, 273, 275], "against": [64, 164, 173, 178, 273, 333, 382, 430], "age_at_scan": 238, "age_design": 76, "age_group": 259, "age_pr": 44, "age_stat": 76, "age_test": [44, 45], "age_train": [44, 45], "ageeffectongm": 76, "ageeffectongm_contrast": 76, "ageeffectongm_design": 76, "ageeffectongm_report": 76, "ageeffectongm_stat": 76, "ageeffectongm_statmap": 76, "agenc": 0, "agencyenterpris": 0, "agent": 68, "agg": 438, "aggarw": [0, 128, 129, 130, 157], "agglom": [51, 146, 157, 161, 445], "agglomer": [51, 115, 178, 179, 298, 299, 444, 445, 446, 452], "agglomerativeclust": [51, 445], "aggreg": [32, 41, 60, 149, 157, 166, 178, 194, 241, 298, 299], "aggres": 360, "aggress": [231, 360], "agre": [44, 76, 172, 191, 277, 331, 333], "agreement": [44, 64, 76, 191, 220, 224, 277], "ahern": [115, 209], "ahmad": [0, 124, 125, 126, 152, 153, 155, 157], "ai": 0, "aic": 308, "aid": [115, 204, 205, 206, 207, 208, 228, 253, 281], "aim": [30, 35, 40, 49, 133, 157, 164, 172, 178, 220, 301, 302], "aina": [0, 131, 157], "air": 0, "aka": [6, 67, 161, 174, 313], "aki": [42, 43, 115, 143, 157, 216, 272], "akshai": [143, 157], "al": [3, 23, 29, 32, 38, 40, 46, 47, 50, 51, 53, 58, 60, 67, 71, 72, 73, 77, 99, 100, 101, 104, 113, 138, 143, 157, 158, 161, 164, 165, 166, 169, 170, 171, 180, 185, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 234, 238, 240, 241, 242, 243, 244, 245, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 262, 263, 268, 270, 271, 272, 273, 275, 277, 281, 282, 289, 296, 299, 302, 303, 304, 310, 311, 313, 336, 338, 343, 355, 359, 360, 362, 365, 368, 382, 410, 433, 438, 446, 447, 452, 459, 471, 486], "alan": [115, 195, 211, 242, 263, 289], "alberto": [115, 359, 360], "aldo": [77, 115, 313], "alecia": [60, 115, 202, 222, 256, 257], "alex": [0, 58, 115, 140, 143, 157, 159, 169, 211, 263, 360], "alexa": [115, 200, 259], "alexand": [60, 115, 190, 202, 222, 223, 238, 250, 256, 257], "alexandr": [0, 46, 51, 53, 100, 115, 119, 120, 122, 123, 126, 129, 131, 133, 136, 143, 145, 146, 157, 158, 162, 170, 217, 231, 248, 447], "alexi": [0, 115, 124, 125, 143, 146, 151, 153, 155, 157, 219, 282], "alff": 238, "algorithm": [50, 51, 90, 93, 95, 104, 106, 107, 117, 158, 161, 162, 163, 166, 167, 169, 178, 185, 186, 188, 195, 231, 234, 277, 303, 304, 342, 377, 379, 444, 447, 449, 460], "alia": [230, 231, 232, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 444, 445, 446, 447, 484], "alias": [124, 157], "align": [53, 58, 92, 100, 127, 157, 300, 352, 354, 425], "alik": [198, 221, 243], "alisha": [0, 126, 157], "all": [3, 4, 9, 16, 20, 24, 28, 31, 33, 34, 36, 37, 40, 41, 42, 43, 44, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 65, 67, 69, 70, 71, 72, 73, 77, 78, 80, 81, 88, 90, 92, 93, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117, 118, 124, 125, 126, 127, 129, 130, 131, 136, 143, 146, 149, 151, 153, 154, 157, 158, 159, 161, 162, 163, 165, 167, 169, 171, 172, 174, 176, 177, 180, 181, 183, 184, 185, 190, 191, 193, 194, 195, 201, 203, 212, 218, 224, 231, 232, 234, 238, 239, 241, 242, 243, 259, 267, 268, 271, 273, 276, 277, 278, 282, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 313, 318, 321, 327, 331, 332, 333, 336, 337, 342, 347, 348, 351, 352, 353, 356, 357, 358, 359, 360, 363, 364, 365, 367, 368, 369, 377, 379, 380, 382, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 417, 419, 423, 425, 426, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 443, 445, 447, 450, 457, 459, 469, 471, 482, 484, 485, 486], "all_categori": 31, "all_coef_": [301, 302], "allel": [115, 191, 270], "allen": [22, 115, 138, 157, 187, 241], "allen2011": 22, "allen_rsn_2011": 22, "allevi": 95, "allow": [10, 21, 25, 38, 42, 50, 53, 60, 65, 90, 100, 101, 102, 104, 110, 117, 125, 126, 127, 129, 130, 137, 139, 144, 146, 150, 151, 154, 155, 157, 158, 164, 171, 172, 173, 175, 178, 181, 185, 191, 230, 231, 232, 260, 268, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 321, 331, 333, 356, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 422, 430, 444, 445, 446, 447], "allow_overlap": [54, 55, 56, 60, 364, 367, 369, 371, 471], "almli": [115, 195, 211, 263, 289], "almost": [25, 41, 51, 106, 171, 185], "alon": [172, 174, 484], "along": [25, 26, 49, 67, 85, 87, 101, 103, 110, 125, 146, 151, 157, 163, 170, 172, 178, 184, 185, 301, 302, 318, 326, 351, 353, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 383, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 397, 398, 399, 401, 403, 405, 407, 409, 412, 413, 417, 423, 426, 427, 431, 432, 433, 447, 448, 459, 469, 484], "alpha": [6, 16, 24, 25, 38, 41, 42, 46, 50, 59, 68, 76, 77, 78, 82, 108, 130, 155, 158, 163, 170, 174, 231, 232, 234, 301, 302, 304, 308, 310, 311, 313, 317, 318, 331, 334, 355, 358, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 419, 425, 429, 431, 432, 434, 436, 437, 457, 484], "alpha_": [59, 232], "alpha_cmap": [52, 162], "alpha_grids_": [301, 302], "alpha_max": [301, 302], "alpha_min": [301, 302], "alphabet": [115, 146, 157, 181, 183], "alreadi": [22, 34, 35, 51, 72, 90, 95, 102, 105, 109, 110, 118, 129, 130, 146, 153, 157, 162, 164, 165, 172, 180, 185, 273, 275, 331, 333, 352, 382, 447], "also": [0, 4, 6, 7, 12, 15, 16, 17, 18, 23, 24, 30, 32, 35, 40, 41, 42, 43, 44, 45, 52, 53, 57, 58, 64, 65, 67, 68, 70, 71, 73, 76, 78, 80, 87, 90, 92, 94, 95, 96, 99, 110, 117, 118, 122, 124, 126, 127, 129, 131, 136, 137, 139, 143, 146, 149, 152, 153, 155, 157, 158, 159, 162, 163, 165, 166, 167, 169, 171, 172, 173, 174, 176, 177, 178, 180, 181, 183, 184, 185, 186, 198, 199, 203, 209, 217, 218, 226, 232, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 292, 296, 297, 298, 299, 301, 302, 318, 320, 321, 325, 331, 343, 347, 351, 356, 357, 359, 373, 374, 375, 376, 377, 378, 379, 417, 418, 423, 424, 426, 431, 432, 433, 434, 436, 437, 445, 448, 449, 453, 454, 457, 484, 487], "alter": [16, 150, 157], "altern": [6, 7, 10, 17, 21, 23, 54, 56, 60, 67, 72, 160, 161, 169, 178, 185, 226, 308, 310, 311, 382, 487], "although": [34, 41, 51, 80, 165, 178, 181, 185], "alumit": [3, 32, 33, 39, 99, 115, 210, 262], "alwai": [2, 16, 17, 19, 31, 37, 42, 44, 45, 50, 88, 101, 104, 108, 164, 167, 171, 172, 174, 185, 240, 297, 302, 308, 310, 311, 315, 359, 440, 441, 443, 450, 484], "alzheim": 220, "am": [0, 115, 199, 244], "amadeu": [0, 49, 136, 157], "amag": 0, "amal": [115, 211, 263], "amanda": [115, 221, 249], "amax": 107, "ambi": 238, "ambidextr": 238, "america": 300, "american": [115, 209], "ami": 115, "among": [6, 80, 125, 157, 174, 178, 242, 296, 297, 298, 299], "amongst": [382, 484], "amount": [0, 25, 35, 37, 52, 67, 96, 165, 167, 172, 179, 180, 181, 273, 296, 297, 298, 299, 301, 302, 303, 304, 318, 331, 337, 348, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 445, 446, 447], "amp": 471, "amplifi": 171, "amplitud": [65, 68, 238, 320, 325, 439, 441, 443], "amsterdam": 0, "amunt": [115, 212], "amygdala": [224, 258], "an": [0, 2, 3, 4, 7, 12, 15, 16, 17, 19, 21, 22, 23, 26, 30, 31, 32, 34, 35, 37, 38, 39, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 56, 57, 58, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 74, 76, 80, 81, 84, 85, 88, 89, 90, 92, 93, 95, 97, 101, 102, 103, 104, 105, 107, 108, 110, 113, 115, 117, 118, 124, 125, 126, 127, 128, 129, 131, 134, 135, 136, 138, 139, 140, 141, 143, 146, 148, 149, 150, 151, 153, 155, 157, 158, 159, 160, 162, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 180, 181, 183, 184, 185, 190, 191, 192, 197, 198, 209, 211, 217, 220, 227, 230, 231, 232, 236, 240, 243, 244, 248, 254, 259, 268, 269, 271, 273, 275, 277, 278, 285, 289, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 314, 318, 325, 327, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 345, 346, 347, 348, 350, 351, 352, 353, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 378, 379, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 455, 457, 459, 460, 463, 467, 468, 469, 473, 486, 487], "ana": [0, 146, 150, 152, 157], "anaconda": [143, 157, 485], "anal": [51, 115, 446, 452], "analog": 95, "analu": [140, 143, 157], "analys": [69, 101, 103, 115, 126, 157, 164, 169, 173, 174, 175, 177, 178, 179, 185, 202, 215, 271, 485], "analysi": [1, 7, 8, 16, 29, 30, 34, 35, 40, 47, 50, 51, 65, 67, 68, 71, 72, 73, 74, 78, 79, 80, 81, 83, 96, 99, 112, 115, 116, 118, 129, 157, 158, 159, 163, 165, 168, 170, 175, 176, 177, 178, 179, 180, 184, 185, 199, 201, 202, 203, 209, 215, 222, 227, 238, 242, 245, 259, 260, 262, 265, 267, 268, 269, 271, 275, 278, 279, 284, 285, 295, 296, 300, 303, 305, 309, 310, 311, 318, 321, 331, 334, 341, 343, 346, 347, 348, 349, 355, 358, 359, 360, 361, 362, 368, 382, 395, 410, 417, 420, 421, 425, 426, 427, 428, 432, 433, 437, 438, 447, 455, 456, 457, 465, 470, 481, 485, 486, 487], "analyz": [3, 34, 40, 51, 62, 75, 95, 113, 163, 172, 174, 176, 178, 180, 182, 195, 212, 382, 472, 487], "anand": [0, 129, 157], "anat": [3, 4, 6, 16, 17, 18, 19, 26, 30, 31, 33, 44, 45, 95, 117, 164, 183, 185, 197, 210, 226, 227, 229, 254, 262, 266, 268, 279, 280, 356], "anat_combin": [359, 360], "anat_img": [140, 157, 417], "anat_separ": 359, "anatom": [3, 4, 6, 12, 16, 18, 19, 23, 26, 31, 33, 37, 95, 104, 115, 118, 139, 157, 162, 169, 178, 185, 192, 195, 199, 201, 210, 211, 221, 224, 229, 238, 240, 242, 244, 252, 259, 262, 263, 266, 268, 359, 417, 426, 431, 433, 440, 484], "anatomi": [6, 44, 69, 76, 197, 224, 254], "anatomical_imag": [335, 347], "anats_all_subject": 4, "anats_all_subjects_smooth": 4, "anchor": 85, "anchoredoffsetbox": [383, 385, 386], "anchoredsizebar": [383, 385, 386], "ander": [23, 115, 199, 204, 205, 206, 207, 208, 209, 244, 252, 281], "anderson": [104, 115, 190, 191, 238, 270, 382], "andi": 7, "andr": [51, 115, 164, 180, 446, 452], "andrea": [50, 115, 158, 163, 230, 303], "andrew": [115, 159, 190, 194, 198, 211, 238, 241, 243, 263], "andr\u00e9": [0, 115, 146, 157, 166, 180, 199, 244, 298, 299], "andwil": [50, 51, 52], "angel": 0, "angela": [115, 194, 225, 241, 251], "angl": [25, 85, 125, 157, 178, 304, 434, 436, 437], "angular": [92, 471], "ani": [4, 6, 51, 58, 60, 76, 82, 101, 105, 106, 117, 124, 147, 149, 155, 157, 159, 161, 164, 165, 168, 169, 171, 172, 173, 174, 178, 181, 185, 238, 262, 273, 275, 338, 343, 347, 353, 356, 357, 358, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 428, 431, 447, 451, 456, 459, 465, 469, 484, 485, 487], "anim": [115, 195, 211, 263], "anish": [115, 359], "anisotrop": 185, "anisotropi": 95, "ann": [0, 60, 115, 125, 157, 202, 222, 256, 257], "anna": [115, 219, 282], "annot": [95, 116, 126, 129, 138, 149, 157, 199, 218, 223, 228, 250, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 419, 423, 425, 426, 429, 431, 432, 433, 434, 435, 436, 437, 440, 443, 467, 484, 487], "annual": [115, 191, 195, 270], "annunzio": 0, "anoth": [6, 10, 41, 67, 69, 80, 90, 135, 140, 157, 164, 171, 172, 174, 180, 182, 183, 230, 301, 302, 337, 338, 357, 455, 484, 487], "anova": [3, 29, 36, 40, 44, 47, 107, 108, 113, 138, 157, 168, 169, 170, 178, 185, 262, 296, 297, 298, 299, 301, 302, 343, 433, 438, 440, 486, 487], "anova_lda": 99, "anova_svc": 99, "answer": [3, 485], "ant": [53, 471], "anterior": [71, 92, 105, 111, 115, 140, 157, 192, 209, 256, 258, 350, 434, 436, 437], "antialias": 19, "anticorrel": [53, 115, 360], "antoinett": [72, 73, 115, 197, 203, 268], "anton": [72, 115, 203], "antonia": [115, 201, 245], "antonio": [115, 197, 268], "anupriya": [0, 129, 157], "anwar": [115, 219, 282], "anylin": 0, "anymor": [124, 155, 157], "anyon": 485, "anyth": [7, 111, 118, 171, 172], "ap": 356, "apart": [87, 138, 157, 161, 162, 171], "api": [10, 46, 106, 122, 123, 124, 125, 126, 127, 128, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 148, 149, 150, 151, 152, 153, 154, 155, 181, 230, 300, 303, 304, 318, 331, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 378, 426, 444, 445, 446, 447, 487], "apo": [115, 191, 270], "app": [64, 224, 321], "appear": [36, 56, 90, 172, 318, 331, 333, 420, 456], "append": [34, 35, 40, 42, 43, 46, 52, 53, 55, 71, 73, 101, 105, 109, 110, 162, 463, 464], "appli": [3, 30, 32, 33, 44, 46, 52, 58, 63, 67, 69, 76, 80, 81, 90, 93, 95, 99, 101, 102, 103, 105, 106, 116, 118, 124, 126, 127, 128, 129, 134, 136, 140, 143, 146, 151, 152, 153, 157, 158, 159, 160, 163, 165, 166, 167, 169, 173, 177, 178, 182, 191, 195, 198, 209, 224, 230, 238, 273, 295, 296, 297, 298, 299, 300, 303, 304, 309, 318, 331, 333, 334, 335, 336, 347, 353, 355, 356, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 381, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 417, 428, 431, 432, 433, 434, 436, 437, 440, 441, 443, 444, 445, 446, 447, 449, 450, 451, 456, 458, 459, 469, 471, 476, 487], "applic": [43, 115, 151, 157, 159, 165, 171, 179, 195, 318, 331, 365, 382, 450, 451, 457, 484, 485, 487], "apply_along_axi": [434, 436, 437], "apply_mask": [26, 184, 365, 368], "appreci": [172, 183], "approach": [35, 40, 42, 43, 49, 50, 51, 67, 69, 115, 143, 157, 160, 163, 164, 165, 169, 171, 172, 173, 174, 179, 300, 336, 359, 360, 459, 469, 485, 487], "appropri": [23, 101, 111, 115, 127, 128, 157, 172, 185, 195, 211, 240, 259, 263, 289, 318, 320, 325, 358, 426, 448], "approv": [172, 191], "approxim": [51, 71, 72, 115, 161, 195, 310, 311, 358, 446, 452], "apr": [115, 221, 249], "april": [115, 125, 128, 135, 138, 144, 145, 154, 157, 191, 209], "ar": [0, 2, 3, 4, 6, 7, 10, 11, 15, 20, 21, 22, 23, 24, 25, 27, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 75, 78, 79, 80, 81, 82, 85, 87, 88, 90, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117, 118, 122, 124, 125, 126, 127, 128, 129, 136, 138, 139, 141, 143, 144, 146, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 177, 178, 180, 181, 183, 184, 185, 191, 192, 193, 195, 197, 198, 200, 201, 211, 212, 214, 218, 223, 226, 227, 228, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 292, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 318, 320, 321, 325, 327, 331, 333, 335, 336, 340, 342, 348, 350, 351, 352, 353, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 453, 454, 455, 456, 457, 459, 467, 468, 469, 471, 479, 484, 485], "ar1": [6, 34, 67, 318, 321, 327, 470], "ar3": [67, 327], "arami": 0, "arang": [13, 23, 31, 33, 34, 35, 40, 50, 53, 65, 67, 71, 95], "arbitrari": [6, 23, 66, 77, 174, 181, 300, 331, 333], "arbitrarili": [6, 226, 297, 302], "archi": 73, "architectur": [115, 161, 225, 251], "archiv": 277, "arctanh": 57, "area": [0, 24, 33, 40, 72, 81, 95, 115, 151, 157, 162, 164, 169, 173, 174, 178, 179, 180, 185, 203, 204, 205, 206, 207, 208, 209, 216, 253, 263, 281, 340, 370, 371, 383, 385, 386, 395, 398, 434, 435, 436, 437, 443], "area_left": [204, 205, 206, 207, 208, 281], "area_right": [204, 205, 206, 207, 208, 281], "aren": [127, 157, 183], "arg": [12, 16, 298, 299, 362, 466], "argmax": 12, "argsort": [36, 44, 45, 105], "arguabl": 67, "argument": [2, 6, 10, 15, 16, 18, 19, 31, 37, 42, 44, 45, 50, 57, 60, 68, 70, 81, 88, 90, 93, 95, 104, 108, 110, 118, 125, 126, 127, 129, 135, 136, 138, 139, 140, 141, 143, 144, 146, 149, 150, 151, 152, 153, 155, 157, 164, 165, 167, 169, 171, 172, 173, 177, 181, 183, 234, 238, 246, 247, 273, 283, 296, 297, 298, 299, 300, 321, 331, 333, 336, 347, 350, 358, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 378, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 422, 423, 424, 425, 426, 428, 430, 431, 432, 433, 435, 436, 437, 441, 444, 446, 459, 465, 484], "ariel": [0, 131, 143, 157], "aris": [95, 115, 174, 195, 359, 360], "arithmet": [115, 180], "arm": [150, 157], "armi": 185, "armodel": 309, "aroma": [115, 159, 359, 360], "around": [15, 25, 35, 85, 87, 142, 144, 157, 171, 172, 232, 333, 340, 351, 369, 383, 385, 386, 396, 463, 464, 469], "arr": 353, "arrai": [3, 5, 7, 10, 12, 21, 23, 27, 34, 35, 37, 40, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 57, 58, 60, 63, 68, 72, 80, 85, 87, 88, 90, 95, 99, 107, 108, 116, 128, 129, 130, 138, 140, 146, 149, 152, 153, 155, 157, 158, 161, 162, 164, 167, 171, 182, 183, 185, 190, 230, 231, 232, 234, 236, 237, 244, 245, 250, 256, 257, 258, 270, 271, 282, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 336, 341, 343, 351, 352, 355, 358, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 377, 379, 382, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 417, 419, 423, 425, 429, 433, 434, 435, 436, 437, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 457, 459, 460, 461, 462, 463, 467, 468, 469, 477, 487], "arrang": [115, 144, 157, 393, 395, 398, 412, 417, 423, 426, 431, 432, 433, 484], "array_lik": [318, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419, 429], "arriv": 163, "art": [149, 157, 165, 296, 297, 298, 299], "arthur": [0, 50, 115, 123, 131, 133, 136, 157, 163, 201, 245, 304], "articl": [43, 72, 115, 171, 180, 194, 203, 242], "articul": 164, "artifact": [58, 115, 185, 336, 359, 360, 459], "artifici": [115, 195], "arvind": [115, 194, 241], "arxiv": [115, 158, 164, 171, 231, 234], "asarrai": [7, 25, 43, 53, 105, 307, 312], "ascend": [151, 157, 346], "ascertain": 173, "asd": 190, "ashbi": [101, 115, 164], "ask": [66, 118, 143, 146, 157, 172, 181, 218], "aspect": [13, 40, 42, 142, 157, 167, 171, 185, 318, 331, 359, 457], "asperg": 238, "assembl": [81, 116, 174], "assert": 31, "assess": [70, 79, 115, 164, 171, 172, 173, 193, 238, 300, 382, 418], "assign": [16, 87, 95, 161, 162, 174, 202, 212, 246, 247, 256, 258, 447, 448, 452], "assist": [115, 158, 230], "associ": [6, 15, 49, 73, 76, 78, 107, 110, 124, 129, 157, 164, 169, 172, 174, 177, 178, 240, 278, 300, 306, 333, 359, 360, 382, 456, 469], "assum": [65, 67, 71, 72, 73, 79, 80, 169, 174, 181, 237, 278, 308, 309, 310, 311, 315, 318, 331, 333, 336, 351, 354, 381, 430, 458, 459], "assumpt": [80, 169, 174, 217], "assur": 64, "astyp": [37, 42, 43, 45, 46, 68, 76, 85, 95], "aswin": [0, 126, 157], "asym": [195, 242], "asymmetr": [195, 242, 263, 264], "asymmetri": [115, 195], "ation": 51, "atla": [9, 12, 24, 28, 48, 50, 52, 61, 84, 92, 95, 97, 113, 115, 118, 123, 125, 126, 127, 129, 134, 135, 137, 138, 139, 140, 143, 146, 149, 150, 151, 152, 154, 155, 157, 160, 162, 171, 178, 184, 185, 187, 230, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 257, 259, 263, 284, 285, 343, 355, 362, 363, 364, 366, 367, 370, 395, 414, 415, 416, 418, 419, 430, 431, 432, 433, 436, 438, 439, 440, 441, 443, 447, 448, 449, 450, 451, 455, 465, 471, 480, 484, 486, 487], "atlantiqu": 0, "atlas": [10, 11, 23, 48, 60, 61, 113, 115, 118, 127, 128, 150, 151, 157, 160, 163, 174, 178, 183, 184, 185, 195, 198, 201, 209, 211, 218, 230, 245, 246, 247, 254, 259, 263, 289, 338, 341, 349, 362, 363, 364, 366, 367, 394, 396, 414, 415, 419, 426, 431, 432, 435, 436, 438, 439, 440, 442, 471, 486, 487], "atlas_data": [12, 21], "atlas_filenam": [21, 54, 56, 58, 159], "atlas_ho_filenam": 11, "atlas_img": [12, 55], "atlas_ju_filenam": 11, "atlas_nam": [246, 247], "atlas_network": 88, "atlas_region_coord": [55, 159], "atlas_typ": 22, "atlas_valu": 12, "atlas_yeo": 87, "atlas_yeo_2011": 87, "atleast_2d": [102, 111], "atom": [172, 178], "atr": 216, "att": 53, "attempt": [146, 157, 321], "attent": [79, 325], "attila": [115, 211, 263], "attribut": [37, 46, 50, 51, 52, 85, 90, 117, 118, 126, 127, 129, 141, 150, 151, 153, 154, 155, 157, 158, 161, 162, 163, 169, 183, 185, 195, 198, 221, 230, 231, 232, 239, 243, 245, 248, 259, 261, 262, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 284, 296, 297, 298, 299, 300, 301, 302, 303, 304, 308, 309, 310, 311, 318, 338, 346, 359, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 434, 435, 436, 437, 443, 444, 445, 446, 447, 462, 463, 464, 465, 466, 468, 469], "attributeerror": [142, 157], "au": 40, "auc": [31, 33, 40, 164, 178], "aud": 53, "audio": [66, 67, 69], "audio_comput": [66, 67, 69, 214], "audio_left_hand_button_press": [66, 67, 69, 214], "audio_right_hand_button_press": [66, 67, 69, 214], "auditori": [6, 67, 69, 73, 78, 105, 107, 174, 187, 197, 258, 267, 268, 274, 279], "auditory_bold": 6, "auditory_calculation_vs_baselin": 274, "audrei": [0, 124, 157], "august": [115, 136, 143, 155, 157], "aureli": [72, 115, 203], "austin": 0, "australia": 0, "australian": [104, 115, 382], "austria": 0, "author": [0, 49, 57, 115, 171, 172, 181], "autism": [115, 190, 238], "auto": [13, 40, 136, 151, 157, 185, 303, 304, 346, 363, 364, 365, 366, 367, 368, 369, 384, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 413, 417, 419, 423, 425, 426, 428, 429, 431, 432, 433, 434, 436, 437, 439, 440, 442, 469], "auto_exampl": [8, 28, 47, 61, 74, 83, 97, 112, 114, 172, 179, 441], "auto_examples_jupyt": 113, "auto_examples_python": 113, "auto_fit": 430, "auto_resampl": [71, 337], "autocorrel": 3, "autoformatt": 172, "autogener": [318, 331, 457], "autom": [115, 118, 181, 192, 195, 209, 218, 228, 240, 253, 273, 275], "automat": [3, 16, 17, 20, 23, 34, 35, 42, 56, 90, 93, 95, 103, 110, 115, 116, 122, 125, 136, 138, 150, 151, 152, 157, 162, 169, 172, 181, 183, 184, 185, 199, 238, 244, 252, 296, 297, 298, 299, 301, 302, 303, 304, 318, 331, 333, 351, 358, 364, 367, 382, 393, 413, 417, 423, 426, 431, 432, 433, 440, 445, 447, 449, 457, 471, 484, 487], "autoregress": [67, 318, 327], "aux_fil": [58, 92, 103], "avail": [0, 3, 6, 16, 24, 25, 32, 41, 44, 64, 76, 81, 90, 95, 102, 108, 110, 118, 125, 146, 151, 157, 159, 162, 165, 167, 171, 173, 177, 180, 181, 191, 195, 201, 212, 215, 220, 223, 226, 229, 238, 242, 245, 251, 259, 268, 270, 272, 277, 301, 302, 321, 430, 435, 469, 485, 487], "avenir": 0, "averag": [6, 10, 25, 31, 38, 51, 53, 70, 95, 115, 149, 152, 157, 161, 165, 166, 176, 177, 178, 195, 204, 205, 206, 207, 208, 211, 215, 238, 263, 271, 281, 289, 296, 297, 348, 353, 359, 370, 430, 434, 436, 437, 445, 469, 471], "avg_method": [126, 128, 151, 157, 434, 436, 437], "aviv": 0, "avoi": 192, "avoid": [10, 24, 54, 55, 56, 60, 71, 129, 141, 146, 155, 157, 169, 171, 172, 174, 183, 282, 296, 297, 298, 299, 306, 331, 333, 340, 345, 382, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 458, 484], "avram": [115, 223, 250], "awai": [70, 171, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410], "awar": [99, 232, 458], "awesom": [143, 157], "ax": [2, 11, 12, 16, 19, 22, 23, 25, 31, 32, 37, 39, 40, 42, 44, 45, 50, 51, 53, 59, 63, 65, 66, 67, 70, 76, 79, 80, 81, 85, 88, 92, 101, 102, 104, 107, 108, 111, 129, 140, 150, 151, 157, 350, 351, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 465], "ax1": [45, 65, 76, 79, 427], "ax2": [45, 65, 427], "ax3": 65, "ax_binari": 40, "ax_im": 42, "ax_multi": 40, "ax_pair": 81, "ax_row": 111, "ax_unpair": 81, "axelson": [115, 180], "axesimag": [54, 56, 58], "axessubplot": [6, 66, 67], "axhlin": [35, 393, 395, 398, 400, 402, 404, 406, 408, 410], "axi": [3, 12, 13, 17, 23, 26, 31, 32, 35, 39, 42, 43, 46, 49, 52, 60, 85, 86, 95, 103, 105, 106, 109, 111, 126, 153, 155, 157, 162, 184, 195, 242, 296, 297, 298, 299, 301, 302, 326, 351, 353, 383, 385, 386, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 413, 417, 419, 420, 423, 425, 426, 429, 431, 432, 433], "axial": [6, 15, 95, 318, 331, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 417, 419, 423, 425, 426, 429, 431, 432, 433, 457], "axs1": 70, "axs2": 70, "axvlin": 53, "ayesha": [115, 219, 282], "azim": [23, 434, 436, 437], "b": [15, 16, 31, 42, 43, 58, 92, 103, 115, 118, 172, 181, 191, 192, 199, 201, 204, 205, 206, 207, 208, 223, 225, 229, 240, 244, 250, 251, 254, 260, 270, 278, 281, 309, 359, 360, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 484], "ba": 253, "baar": [115, 211, 263], "back": [7, 37, 43, 44, 50, 57, 99, 101, 104, 106, 117, 131, 139, 140, 157, 161, 169, 172, 185, 303, 304, 362, 365, 368, 370, 372, 381, 413, 444, 445, 446], "backend": [36, 37, 38, 44, 45, 46, 50, 55, 59, 60, 99, 104, 107, 125, 133, 143, 148, 153, 157, 304, 438], "background": [3, 9, 10, 15, 16, 17, 23, 24, 28, 31, 32, 42, 46, 51, 58, 69, 92, 93, 95, 106, 111, 113, 117, 125, 128, 134, 136, 138, 139, 140, 141, 143, 146, 149, 155, 157, 172, 178, 184, 185, 195, 229, 240, 246, 247, 249, 250, 253, 254, 266, 272, 296, 297, 298, 299, 303, 304, 318, 331, 363, 365, 366, 368, 370, 374, 377, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 417, 419, 423, 425, 426, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 443, 445, 448, 450, 451, 457, 471, 484, 486, 487], "background_img": [32, 45], "background_label": [51, 58, 92, 185, 363, 366, 370, 414, 450, 453, 471], "backslash": [115, 127, 157, 171], "backward": [140, 153, 157, 172, 246, 247, 455], "bad": [58, 107, 171, 172], "badg": [172, 181], "bag": [168, 301, 302, 487], "balanc": [3, 51, 153, 157, 161], "baldassarr": [115, 170, 195], "ball": [25, 123, 157, 169, 171, 178, 300, 469], "ball_radiu": 25, "ball_sample_point": 25, "baltimor": 0, "band": [53, 60, 155, 157, 238, 359, 458, 459], "band_pass_filt": 238, "bandettini": [115, 169, 180, 300], "bandpass": 57, "bandwidth": 251, "bangalor": 0, "bangaru": [115, 219, 282], "baptist": [50, 51, 73, 115, 158, 161, 163, 197, 218, 231, 268, 273, 275, 303], "bar": [16, 44, 104, 107, 127, 128, 143, 157, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 487], "baratz": [0, 148, 157], "barbara": [115, 219, 282], "barcelonabeta": 0, "barch": [60, 115, 191, 201, 202, 256, 270], "barh": [31, 50, 53, 100], "barn": [60, 115, 195, 202, 222, 256, 257, 359, 360], "baronnet": [115, 158, 230], "bart": 64, "basal": [53, 224], "basalganglia": 258, "basc": [134, 157, 187, 242], "basc_multiscale_2015": 20, "base": [2, 7, 9, 21, 28, 29, 30, 35, 40, 46, 47, 49, 50, 51, 53, 56, 57, 62, 63, 67, 71, 74, 75, 82, 83, 89, 90, 92, 93, 98, 99, 100, 107, 112, 113, 115, 118, 124, 126, 127, 129, 134, 138, 146, 149, 151, 154, 157, 158, 159, 160, 161, 163, 164, 167, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 185, 187, 193, 195, 197, 199, 200, 201, 209, 216, 217, 218, 231, 234, 238, 244, 250, 252, 259, 262, 263, 264, 265, 268, 269, 270, 273, 275, 277, 284, 285, 292, 296, 297, 298, 299, 300, 302, 303, 304, 318, 321, 325, 331, 333, 334, 335, 336, 337, 341, 343, 347, 352, 355, 358, 359, 360, 362, 368, 369, 370, 376, 382, 383, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 421, 431, 432, 433, 436, 437, 438, 440, 444, 445, 447, 448, 449, 455, 457, 459, 460, 461, 463, 464, 465, 470, 471, 484, 485, 486, 487], "base_mask": [51, 54, 55, 56, 58, 60, 93], "base_url": 250, "baselin": [6, 31, 33, 115, 149, 150, 157, 165, 167, 194, 241, 306, 326], "basemask": [151, 157], "baseslic": 412, "basi": [67, 69, 173, 195, 318, 320, 325, 359], "basic": [3, 7, 8, 9, 12, 16, 17, 19, 26, 28, 30, 31, 33, 35, 36, 37, 43, 44, 50, 51, 54, 55, 58, 60, 69, 71, 76, 78, 90, 92, 93, 95, 96, 99, 101, 104, 106, 107, 108, 171, 173, 174, 178, 180, 181, 185, 246, 247, 262, 283, 321, 331, 333, 353, 359, 360, 420, 426, 432, 438, 486], "basic_collection_term": 273, "basic_contrast": [69, 71, 173], "basic_image_term": 273, "bassett": [58, 115, 359, 360], "bastien": [73, 115, 197, 268], "bat": 485, "batch": [304, 444], "batch_siz": [50, 304, 444], "baum": [58, 115, 359, 360], "bayesian": [46, 174], "bayesian_ridg": 46, "bayesianridg": 46, "bazeil": [0, 146, 149, 152, 153, 157], "bazemont": 0, "bbox_to_anchor": 31, "bdg": [172, 181], "beaten": 116, "beauti": 45, "becaus": [3, 6, 12, 16, 19, 31, 32, 33, 37, 41, 44, 45, 46, 56, 67, 70, 71, 80, 85, 102, 103, 104, 110, 124, 146, 157, 159, 164, 169, 171, 172, 174, 181, 273, 297, 301, 302, 428, 434, 436, 437, 441, 443, 469], "beckmann": [115, 158, 191, 225, 251, 270, 359, 360], "becom": [3, 67, 118, 127, 157, 165, 166, 167, 174], "bedetti": [140, 143, 157], "been": [0, 6, 12, 33, 37, 38, 41, 44, 49, 51, 54, 56, 57, 63, 67, 71, 73, 76, 80, 82, 86, 87, 90, 92, 94, 95, 106, 110, 124, 125, 127, 129, 131, 133, 136, 137, 143, 145, 146, 148, 149, 151, 152, 153, 154, 155, 157, 163, 170, 171, 172, 173, 177, 178, 181, 185, 195, 198, 213, 226, 227, 231, 242, 273, 277, 318, 331, 333, 342, 374, 375, 376, 378, 379, 382, 451, 460, 469], "befor": [2, 16, 24, 51, 57, 58, 72, 90, 95, 99, 105, 117, 124, 126, 128, 143, 146, 149, 151, 153, 155, 157, 161, 162, 164, 165, 167, 172, 173, 174, 177, 180, 181, 183, 184, 185, 191, 234, 273, 275, 303, 304, 318, 320, 325, 336, 340, 342, 359, 360, 363, 364, 366, 367, 369, 370, 371, 418, 434, 436, 437, 441, 443, 445, 450, 451, 459, 460, 465, 484], "beforehand": [105, 181], "begin": [42, 64, 67, 71, 149, 157, 172, 178, 191, 458], "beginn": [172, 180], "beh": 64, "behav": [104, 318, 320, 325], "behavior": [2, 16, 19, 31, 32, 35, 36, 37, 40, 42, 44, 45, 50, 76, 78, 88, 99, 104, 108, 115, 117, 125, 126, 127, 131, 133, 140, 143, 150, 155, 157, 164, 165, 167, 168, 172, 178, 182, 185, 190, 191, 220, 225, 230, 242, 243, 251, 270, 362, 363, 364, 365, 366, 367, 368, 369, 418, 447, 487], "behavioral_data": 40, "behavioral_target": 41, "behaviour": [46, 115, 170], "behind": 66, "behren": [115, 191, 270], "behzadi": [115, 342, 359, 360, 460], "beij": 0, "being": [16, 90, 95, 105, 124, 125, 126, 143, 146, 153, 157, 158, 171, 172, 174, 176, 178, 238, 303, 325, 358, 364, 367, 369, 377, 379, 418, 434, 436, 437, 441, 443, 447], "bellec": [0, 115, 143, 144, 157, 195, 242], "belong": [3, 31, 33, 153, 157, 164, 178, 185, 192], "below": [6, 10, 17, 21, 23, 41, 46, 49, 51, 54, 56, 60, 66, 70, 95, 115, 138, 157, 161, 164, 165, 169, 171, 172, 173, 174, 176, 177, 181, 184, 185, 190, 191, 231, 232, 234, 238, 259, 296, 297, 298, 299, 301, 302, 304, 356, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 425, 426, 428, 432, 433, 434, 437, 440, 445, 447, 458, 459, 484], "ben": [0, 58, 115, 119, 120, 122, 131, 133, 157, 360], "benali": [115, 195, 242], "benchmark": [53, 58, 100, 115, 170, 359, 360], "benedetto": 0, "benedict": [115, 219, 282], "benefit": [44, 51, 58, 67, 146, 157, 172, 184], "benjamin": [101, 115, 164, 224, 258], "benjamini": [153, 157, 174, 317], "bennett": [115, 219, 282], "bent": [115, 209], "berg": [115, 191, 270], "berlin": [0, 115, 158, 211, 217, 230, 248, 263], "bertrand": [0, 46, 50, 51, 53, 73, 100, 115, 119, 122, 126, 129, 131, 136, 140, 143, 144, 146, 153, 154, 157, 158, 161, 162, 163, 164, 166, 170, 180, 197, 201, 217, 230, 231, 245, 248, 268, 298, 299, 303, 304, 446, 447, 452], "besid": 180, "besnard": [0, 129, 151, 157], "best": [3, 35, 40, 44, 45, 46, 96, 149, 155, 157, 164, 165, 166, 169, 171, 172, 174, 184, 296, 297, 298, 299, 301, 302, 358, 395, 398, 444, 445], "best_alpha": [296, 297, 298, 299], "best_c": [35, 296, 297, 298, 299], "best_dual": 35, "best_model_params_": [301, 302], "best_penalti": 35, "beta": [6, 27, 41, 44, 67, 71, 98, 112, 113, 115, 127, 154, 173, 178, 191, 265, 270, 296, 297, 298, 299, 305, 308, 309, 310, 311, 318, 321, 337, 362, 368, 369, 395, 421, 433, 438, 486], "beta_map": 101, "betamap": 271, "better": [2, 3, 31, 34, 44, 45, 51, 67, 95, 101, 105, 115, 123, 125, 126, 134, 137, 143, 151, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 171, 173, 184, 231, 431, 447, 469, 487], "between": [2, 6, 7, 10, 23, 24, 25, 31, 42, 44, 51, 52, 53, 57, 64, 67, 69, 71, 73, 76, 78, 80, 81, 87, 100, 101, 104, 107, 110, 129, 131, 138, 143, 146, 149, 152, 157, 158, 159, 160, 162, 164, 165, 169, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 191, 195, 210, 226, 238, 250, 270, 289, 298, 299, 304, 318, 321, 331, 336, 376, 382, 383, 385, 386, 413, 417, 419, 422, 425, 427, 429, 431, 432, 433, 434, 436, 437, 440, 441, 443, 445, 456, 457, 459, 469, 471, 487], "bewar": [181, 183], "beyond": [72, 154, 157], "bg_color": [383, 385, 386], "bg_filenam": 44, "bg_img": [3, 6, 17, 18, 30, 31, 34, 37, 42, 44, 70, 71, 72, 76, 89, 94, 117, 140, 146, 152, 157, 164, 185, 318, 331, 358, 426, 431, 432, 433, 440, 457], "bg_map": [10, 23, 24, 38, 69, 110, 111, 428, 434, 436, 437, 441, 443, 484], "bg_on_data": [10, 23, 24, 111, 428, 434, 436, 437, 441, 443], "bgcolor": [384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410], "bharat": [115, 219, 282], "bhg087": [115, 199, 244], "bhn256": 115, "bhp157": [115, 191, 270], "bhx179": [115, 223, 250], "bi": [6, 226], "bia": [165, 296, 297, 298, 299, 301, 302], "biap8": [146, 157], "bias": 67, "bib": 115, "bibtex": [125, 155, 157], "bic": [211, 263, 308], "bicr": 216, "bid": [6, 7, 62, 73, 74, 76, 98, 101, 112, 113, 124, 126, 128, 146, 149, 151, 153, 155, 157, 173, 174, 178, 187, 226, 255, 260, 265, 278, 294, 295, 318, 321, 331, 359, 360, 361, 368, 420, 425, 427, 438, 455, 456, 457, 481, 486], "bielefeld": 0, "big": [3, 43, 51, 143, 157, 161, 164, 172, 183, 185, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469], "big_fsaverage_mesh": 10, "big_fsaverage_sulc": 10, "big_img": 10, "bigger": [32, 41, 45], "bigler": [115, 190, 238], "bihan": [73, 115, 197, 268], "bilder": [115, 260, 278], "bilkent": 0, "bin": [34, 51, 172, 318, 327, 485], "bin_p_valu": 95, "bin_p_values_and_vt": 95, "bin_p_values_and_vt_img": 95, "binar": [43, 95, 152, 157, 238, 335], "binari": [42, 43, 67, 76, 124, 155, 157, 178, 181, 185, 264, 296, 297, 298, 299, 301, 302, 370, 371, 372, 432, 456, 459], "binarize_img": [127, 129, 152, 157], "binary_clos": [264, 287, 290], "binary_dil": [95, 184, 374, 375, 376, 378, 379], "binary_eros": [374, 375, 376, 378, 379], "binary_plt": 40, "binaur": [6, 226], "binder": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 148, 157], "bingen": [115, 170], "binh": [0, 146, 149, 151, 157], "binyam": [60, 115, 202, 256], "bio": [115, 158, 231], "biolog": [111, 115, 209], "biologi": 487, "biomed": [50, 115, 163, 220, 303, 304], "biorxiv": [115, 336, 459], "biostatist": [0, 115, 158], "bipolar": [115, 209], "birmah": [115, 180], "birn": 220, "birth": [115, 211, 263, 289], "biswal": [115, 219, 282], "bit": [12, 37, 40, 43, 66, 67, 76, 80, 87, 95, 104, 131, 144, 155, 157, 158, 170, 183, 184, 264], "bitpix": [58, 92, 103], "black": [15, 42, 106, 125, 126, 129, 157, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 419, 423, 425, 426, 429, 431, 432, 433, 440, 441, 443], "black_bg": [6, 14, 15, 37, 71, 152, 157, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 419, 423, 425, 426, 429, 431, 432, 433, 440, 441, 443], "black_blu": 21, "black_green": 21, "black_pink": 21, "black_r": [6, 70, 111], "blacker": [115, 209], "blob": [88, 95, 163, 184, 250], "blobbi": 170, "block": [6, 34, 53, 58, 60, 65, 101, 102, 116, 126, 157, 164, 171, 184, 195, 203, 226, 430, 473], "blog": 7, "blood": [67, 174, 178], "bloomberg": 0, "bludau": 115, "blue": [16, 19, 42, 51, 70, 87, 128, 157], "blur": 195, "bm10": [225, 251], "bm20": [225, 251], "bm70": [225, 251], "bmc": [67, 73, 115, 197, 268], "board": 172, "bodi": [65, 195, 455], "bogdan": [0, 124, 130, 157], "boil": 171, "bold": [3, 6, 17, 19, 26, 30, 31, 33, 35, 36, 37, 50, 65, 66, 67, 69, 77, 80, 95, 101, 102, 104, 110, 115, 117, 118, 126, 127, 146, 150, 157, 163, 164, 173, 175, 178, 183, 201, 210, 216, 226, 245, 262, 272, 321, 356, 359, 360, 460, 487], "bonferroni": [6, 82, 104, 107, 108, 169, 174, 178, 318, 331, 334, 457, 470], "boo": [0, 140, 143, 146, 157], "book": [144, 157], "bool": [46, 95, 105, 230, 231, 232, 234, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 254, 256, 257, 258, 259, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 275, 277, 282, 292, 296, 297, 298, 299, 300, 301, 302, 303, 304, 313, 315, 318, 331, 333, 334, 335, 336, 340, 342, 346, 348, 349, 350, 351, 352, 355, 356, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 417, 418, 419, 420, 421, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 456, 457, 458, 459, 460, 465], "boolean": [95, 118, 150, 155, 157, 236, 262, 268, 277, 300, 303, 304, 337, 349, 362, 369, 453, 454, 459], "bootstrap": [115, 242], "border": [81, 340, 374, 377, 383, 385, 386], "border_s": [374, 377], "borderpad": [383, 385, 386], "bori": [115, 180], "boston": 0, "both": [3, 4, 6, 10, 16, 25, 38, 41, 49, 51, 53, 60, 65, 69, 80, 81, 86, 90, 95, 101, 107, 110, 111, 118, 126, 127, 129, 146, 153, 157, 158, 161, 163, 169, 170, 172, 173, 178, 183, 184, 185, 190, 191, 212, 221, 230, 237, 249, 259, 284, 318, 320, 325, 333, 334, 336, 355, 370, 371, 372, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419, 425, 428, 430, 433, 437, 447, 449, 459, 463, 464, 465, 469, 485], "botteron": [115, 195, 211, 263, 289], "bottl": [31, 33, 34, 35, 40, 183], "bottleneck": 171, "bottom": [13, 16, 26, 40, 42, 68, 184, 430], "bottomrul": 64, "bougacha": [0, 119, 122, 131, 133, 140, 143, 144, 157], "bound": [15, 85, 90, 139, 146, 157, 184, 303, 351, 383, 385, 386, 417, 418, 423, 425, 426, 428, 429, 431, 432, 433, 434, 437, 441, 443], "boundari": [159, 169, 184, 396, 431, 432, 434, 436, 437], "bounding_box": [383, 385, 386], "boundingboxerror": 351, "box": [45, 85, 99, 106, 139, 157, 165, 172, 184, 224, 351], "boxplot": [36, 95], "boyd": 115, "brad": [115, 170], "bradford": [115, 209], "bradlei": [60, 115, 191, 195, 202, 209, 222, 224, 256, 257, 258, 270, 359, 360], "brain": [0, 2, 3, 4, 6, 7, 10, 13, 16, 21, 22, 23, 24, 28, 32, 33, 37, 38, 40, 41, 43, 45, 46, 48, 54, 56, 57, 61, 67, 69, 70, 72, 77, 79, 80, 81, 86, 90, 93, 95, 97, 99, 101, 106, 109, 115, 117, 118, 125, 131, 134, 136, 137, 138, 140, 141, 143, 144, 146, 149, 151, 152, 157, 158, 160, 164, 165, 166, 167, 169, 170, 172, 173, 174, 178, 179, 180, 183, 185, 190, 191, 192, 195, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 217, 218, 220, 221, 222, 224, 225, 226, 228, 230, 231, 238, 240, 242, 243, 245, 246, 248, 249, 251, 253, 256, 257, 258, 259, 262, 263, 264, 270, 272, 273, 275, 276, 277, 281, 286, 289, 293, 296, 297, 298, 299, 300, 301, 302, 303, 304, 313, 336, 338, 341, 343, 348, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 375, 376, 377, 378, 379, 382, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 414, 415, 416, 419, 423, 425, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 447, 448, 449, 450, 455, 459, 471, 477, 485, 486, 487], "brain_color": [384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410], "brain_mask": [57, 101], "brain_parcel": [223, 250], "brain_parcellation_cambridge_basc_multiscale_": 195, "brain_time_seri": 57, "brainhack": [134, 139, 157], "brainlin": 272, "brainmap": [22, 225, 251], "brainmask": 335, "brainom": [115, 143, 157, 187, 268], "brainomics_data": [78, 107], "brainomics_loc": [18, 77, 78, 80, 81, 82, 107, 108], "brainpedia": 118, "brainpedia_subset": 118, "brainsprit": [143, 144, 157, 484], "brammer": [115, 180], "branch": [155, 157, 172, 181], "brandon": [115, 190, 238], "braver": [115, 169], "break": [2, 84, 97, 113, 138, 157, 161, 169, 172, 254, 432, 438, 448, 486], "breakag": 306, "breath": [66, 67], "breez": [115, 209], "brest": 0, "brian": [115, 170, 209, 219, 282, 336, 459], "bridg": 99, "brief": [95, 172, 174], "briefli": 169, "brien": [115, 209], "brigham": 0, "bright": 90, "brighter": 117, "bring": [42, 50, 166, 172, 180, 381], "brisban": 0, "brito": [0, 126, 157], "broader": [177, 190], "brodmann": 253, "brok": [122, 157], "broke": [145, 157], "broken": [87, 136, 144, 157, 169], "brought": 185, "brown": [115, 219, 282], "brows": [60, 118, 153, 157, 218, 471], "browser": [2, 3, 4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55, 57, 58, 59, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 143, 146, 148, 157, 185, 318, 331, 396, 439, 440, 441, 442, 443, 455, 457, 484], "bruce": [23, 115, 199, 204, 205, 206, 207, 208, 209, 223, 229, 244, 250, 252, 254, 281], "bruno": [115, 195], "brute": 171, "bryan": [115, 194, 241], "bsd": 0, "buck": [0, 125, 157], "bucket": 64, "buckner": [115, 195, 209, 220, 223, 229, 250, 254, 277], "bug": [34, 122, 125, 126, 129, 130, 136, 137, 138, 142, 155, 180, 181, 434, 436, 437, 470, 471], "bugfix": [121, 122, 132, 133, 136, 154, 157, 172], "build": [12, 19, 22, 43, 48, 51, 52, 53, 60, 71, 101, 113, 116, 124, 125, 126, 127, 129, 138, 157, 160, 165, 167, 169, 174, 183, 185, 318, 445, 487], "built": [16, 34, 44, 50, 125, 128, 157, 174, 181, 296, 297, 298, 299, 445, 470, 471], "builtin": [124, 157], "buitelaar": [115, 359, 360], "bullmor": [115, 159], "bump": [124, 127, 129, 143, 146, 151, 152, 153, 157, 165, 167, 181], "bunch": [82, 117, 127, 138, 157, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 284], "burden": 172, "burkhardt": [0, 129, 157], "burn": 172, "busa": [115, 199, 244], "bush": [101, 115], "busi": [115, 382], "bustillo": [115, 194, 241], "butterworth": [60, 124, 125, 151, 155, 157, 336, 363, 364, 365, 366, 367, 368, 369, 459], "butterworth__": [336, 363, 364, 365, 366, 367, 368, 369, 459], "butterworth__padtyp": 60, "butterwoth": [151, 157], "button": [60, 67, 69, 73, 77, 78, 80, 81, 107, 153, 157, 172, 174, 266, 268, 276, 471], "bwr": [20, 24, 38, 55, 101, 102, 110, 111, 144, 157, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419, 422, 439], "bwr_r": 20, "byte": [10, 23, 24, 111, 153, 157, 172, 345, 351], "bzdok": [0, 119, 120, 122, 123, 131, 133, 157], "c": [3, 35, 40, 42, 43, 44, 45, 46, 51, 58, 60, 70, 99, 100, 101, 104, 111, 115, 118, 165, 169, 171, 172, 191, 192, 195, 199, 202, 209, 211, 216, 218, 220, 222, 225, 228, 231, 234, 242, 244, 251, 253, 256, 257, 263, 264, 270, 272, 273, 275, 277, 289, 310, 311, 336, 351, 352, 359, 360, 382, 450, 453, 459], "c0": 65, "c1": 65, "c3": 65, "c_ra": [155, 157], "ca": [211, 263], "cach": [44, 45, 51, 56, 58, 104, 123, 131, 157, 161, 231, 296, 297, 298, 299, 301, 302, 303, 304, 318, 331, 337, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 445, 446, 447, 469], "caffo": [115, 336, 459], "caglar": [0, 155, 157], "caitlin": [115, 219, 282], "cakan": [0, 155, 157], "cal_max": [58, 92, 103], "cal_min": [58, 92, 103], "calc_beta": 309, "calcul": [0, 3, 32, 40, 43, 49, 50, 60, 93, 98, 112, 113, 125, 144, 157, 173, 197, 267, 268, 296, 297, 298, 299, 303, 304, 308, 310, 311, 326, 333, 341, 359, 362, 365, 368, 375, 378, 382, 393, 410, 417, 423, 426, 431, 432, 433, 438, 440, 445, 457, 486], "calculu": 43, "calhoun": [115, 194, 219, 241, 282], "california": 0, "call": [2, 4, 6, 10, 15, 16, 17, 34, 50, 51, 52, 54, 55, 58, 60, 67, 69, 73, 77, 82, 88, 90, 92, 95, 99, 106, 117, 118, 127, 129, 146, 157, 158, 159, 161, 162, 164, 165, 169, 171, 172, 173, 174, 177, 178, 181, 183, 185, 189, 195, 230, 232, 234, 242, 254, 273, 275, 278, 297, 302, 304, 307, 312, 318, 321, 331, 336, 346, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 378, 418, 419, 429, 445, 459, 463, 484], "callabl": [118, 153, 157, 234, 273, 296, 297, 298, 299, 300], "caller": [266, 267], "cambridg": [0, 195], "camelcas": 172, "cameron": [58, 115, 158, 159, 198, 217, 219, 243, 248, 282], "camil": [115, 218, 273, 275], "campagn": [72, 115, 203], "can": [0, 2, 3, 4, 6, 7, 10, 12, 13, 15, 16, 19, 21, 22, 23, 24, 25, 26, 30, 31, 33, 34, 35, 37, 40, 41, 42, 44, 45, 46, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 87, 88, 89, 90, 92, 93, 94, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 115, 116, 117, 118, 124, 125, 127, 128, 129, 130, 131, 134, 136, 138, 143, 144, 146, 149, 150, 151, 152, 153, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 180, 181, 183, 184, 185, 191, 200, 201, 217, 218, 221, 231, 232, 234, 237, 238, 241, 244, 245, 246, 247, 248, 249, 250, 254, 268, 270, 273, 277, 296, 297, 298, 299, 300, 301, 302, 308, 310, 311, 318, 320, 321, 325, 331, 333, 336, 337, 338, 343, 346, 347, 348, 351, 352, 355, 356, 358, 359, 360, 365, 368, 374, 375, 376, 377, 378, 379, 381, 382, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 418, 419, 420, 423, 424, 425, 426, 427, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 445, 447, 448, 449, 455, 456, 457, 458, 459, 469, 471, 484, 485, 487], "canada": 0, "canadian": 0, "cancel": 165, "candid": 100, "canica": [52, 124, 125, 141, 152, 157, 160, 178, 304, 365, 471, 487], "canica_components_img": 50, "canica_resting_st": 50, "canni": 484, "cannon": [115, 260, 278], "cannot": [3, 10, 12, 37, 50, 53, 58, 80, 87, 93, 95, 104, 118, 143, 155, 157, 158, 164, 167, 172, 185, 232, 440, 441, 443, 463, 464], "canon": [6, 52, 67, 71, 85, 136, 157, 178, 189, 303], "cap": [78, 80], "capabl": [69, 128, 153, 157, 185], "capit": 216, "caprihan": [115, 194, 241], "captur": [24, 53, 60, 67, 105, 159, 160, 161, 164, 197, 230, 268], "care": [53, 100, 117, 164, 165, 167, 171, 224, 249, 250, 305], "carefulli": 110, "carpet": [9, 28, 113, 128, 149, 157, 239, 263, 337, 349, 376, 418, 486], "carpet_plot": [155, 157], "carri": [174, 178], "carrier": [115, 191, 270], "case": [16, 24, 35, 40, 42, 50, 51, 52, 56, 60, 64, 66, 67, 68, 73, 85, 90, 92, 93, 102, 103, 110, 118, 136, 146, 149, 157, 158, 159, 161, 164, 165, 169, 171, 180, 181, 183, 192, 237, 240, 244, 246, 247, 296, 297, 298, 299, 301, 302, 318, 320, 325, 331, 333, 334, 343, 351, 352, 353, 354, 357, 364, 365, 366, 367, 368, 369, 376, 414, 417, 418, 419, 423, 425, 426, 428, 431, 432, 433, 435, 440, 443, 456, 457, 469, 471, 484], "cast": [12, 129, 133, 146, 157, 185, 192, 240, 349], "castellano": [115, 219, 282], "cat": [31, 33, 34, 40, 99, 117, 164, 179, 183], "catarina": [115, 228, 253], "catch_warn": 71, "categor": [165, 181], "categori": [31, 33, 34, 99, 104, 117, 164, 166, 172, 183, 262], "caterina": [115, 224, 258], "caus": [50, 51, 85, 93, 130, 131, 157, 354], "caution": 354, "cautious": [140, 157], "caveat": [115, 164], "cavi": [115, 199, 209, 244], "cbar": 40, "cbar_tick_format": [6, 26, 150, 153, 157, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 423, 425, 426, 428, 432, 433, 434, 436, 437], "cbar_vmax": [384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 434], "cbar_vmin": [384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 434], "cbf": 118, "cbig": [223, 250], "cbv": 118, "cc": 238, "cc0": 218, "cd": [50, 181, 304], "ce": [318, 321, 331, 457], "cea": [0, 197], "cecil": [115, 180], "ceil": 102, "cell": [10, 17, 23, 37, 51, 54, 55, 56, 60, 64, 76, 78, 174, 178], "censor": [127, 155, 157, 459], "center": [0, 15, 37, 49, 52, 53, 57, 60, 63, 80, 100, 107, 108, 111, 144, 155, 157, 159, 162, 185, 192, 209, 213, 220, 230, 232, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 416, 418, 422, 444, 445, 447, 456, 469], "cento": 195, "centr": 0, "central": [0, 92, 238], "centroid": [396, 444], "cercor": [71, 115, 191, 199, 223, 244, 250, 270], "cereb": 53, "cerebellar": [224, 258], "cerebellum": [60, 115, 191, 202, 224, 256, 258, 270], "cerebr": [71, 115, 174, 191, 197, 199, 202, 209, 223, 229, 244, 250, 254, 256, 268, 270], "cerebrospin": [12, 58, 211, 263, 359], "certain": [6, 58, 110, 143, 157, 164, 172, 174, 181, 191, 273, 351, 431], "certif": 191, "cf": [115, 185, 191, 270], "cff": 172, "cfg": [154, 157], "chain": [95, 184, 230, 231], "chair": [29, 31, 33, 34, 40, 47, 113, 125, 157, 183, 262, 298, 343, 348, 430, 433, 438, 486], "challeng": 158, "chamma": [0, 124, 125, 126, 152, 153, 155, 157], "chan": 0, "chanc": [6, 34, 38, 53, 78, 80, 150, 157, 168, 169, 174, 487], "chance_level": 34, "chandra": 0, "chang": [15, 20, 40, 42, 44, 53, 64, 68, 103, 104, 107, 108, 120, 165, 167, 171, 172, 174, 181, 182, 230, 231, 232, 281, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 321, 326, 331, 345, 349, 351, 354, 355, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 382, 428, 434, 436, 437, 441, 443, 444, 445, 446, 447, 450, 451, 453, 456, 459, 485, 487], "changelog": [124, 138, 181], "channel": [143, 157], "chaogan": [115, 219, 282], "chapra": [0, 129, 157], "chapter": [184, 185], "charact": [155, 157, 327], "character": [66, 67, 115, 180, 211, 359], "characterist": [40, 79, 164, 178, 360], "chawla": [0, 143, 144, 145, 146, 147, 148, 149, 157], "cheap": 165, "check": [2, 3, 16, 30, 31, 33, 34, 35, 36, 37, 40, 65, 78, 94, 95, 99, 103, 107, 117, 125, 128, 129, 133, 136, 157, 159, 164, 167, 171, 172, 180, 181, 183, 185, 230, 231, 232, 234, 264, 283, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 319, 331, 346, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 444, 445, 446, 447, 484], "check_ev": [65, 73, 126, 157], "check_mask_img": 172, "check_matplotlib": [25, 39, 42, 46, 51, 68, 79, 92, 107, 108, 111], "check_param": [301, 302], "check_random_st": [45, 46], "checkerboard": [67, 73, 81, 268], "checkmk": 0, "checkout": [138, 157, 172, 181], "chee": [38, 115], "chen": [0, 38, 115, 129, 155, 157, 191, 270], "cheung": [115, 219, 282], "chevali": [0, 143, 146, 157], "chiang": [140, 157], "chieti": 0, "child": [0, 53, 259], "child_adult": [53, 100], "childmind": 190, "children": [50, 100, 146, 157, 179, 200, 259], "china": 0, "chiu": [115, 209], "choic": [10, 20, 67, 68, 71, 111, 133, 157, 158, 159, 165, 167, 168, 171, 172, 232, 243, 301, 302, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 447, 487], "choos": [15, 16, 25, 34, 35, 46, 49, 88, 110, 167, 168, 174, 185, 296, 297, 298, 299, 318, 331, 360, 417, 419, 423, 425, 426, 429, 431, 432, 433, 444, 445, 457, 469, 487], "chose": 164, "chosen": [10, 23, 35, 67, 101, 171, 230, 434, 436, 437, 440, 441, 443, 469], "chri": [0, 119, 131, 146, 157], "christian": [0, 115, 125, 140, 143, 157, 158, 191, 225, 251, 270, 359, 360], "christin": [51, 115, 219, 282], "christina": [0, 60, 115, 127, 157, 202, 256], "christo": [58, 115, 359, 360], "christoph": [23, 115, 140, 143, 157, 199, 244, 252], "chun": [38, 115], "chunk": [3, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 99, 104], "church": [60, 115, 202, 222, 256, 257], "chyzhyk": [53, 100, 115], "ci": [172, 181, 308, 310, 311], "cibit": 0, "cidx": 80, "cing": 53, "cingul": [24, 57, 60, 63, 92, 173, 192], "cingulo": 60, "cinguloopercular": 258, "cionca": [0, 126, 157], "cipollini": [0, 119, 120, 122, 131, 133, 157], "circl": 85, "circleci": [133, 138, 157], "circular": [77, 195], "ciric": [58, 115, 359, 360], "cisler": [101, 115], "citat": [0, 172], "cite": [161, 197, 212, 217, 248, 259, 268], "cit\u00e9": 0, "ciuciu": [72, 115, 203, 303], "civet": [115, 195], "clair": [115, 191, 270], "clare": [115, 191, 219, 225, 251, 270, 282], "clarifi": [67, 151, 157], "clariti": 55, "clark": [0, 115, 124, 157, 169, 194, 241], "class": [3, 7, 10, 12, 29, 44, 45, 47, 51, 53, 56, 58, 60, 92, 95, 99, 100, 103, 113, 123, 124, 125, 127, 129, 130, 131, 133, 139, 140, 141, 144, 146, 149, 151, 152, 153, 155, 157, 163, 164, 168, 171, 172, 173, 177, 185, 230, 231, 232, 262, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 318, 331, 337, 349, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 417, 419, 423, 425, 426, 429, 430, 431, 432, 433, 438, 444, 445, 446, 447, 448, 449, 455, 461, 462, 463, 464, 465, 466, 471, 474, 486, 487], "class_prior": [296, 297, 298, 299], "classes_": [40, 296, 297, 298, 299, 301, 302], "classic": [30, 35, 95, 165, 183, 210], "classif": [3, 31, 32, 33, 34, 36, 40, 45, 48, 51, 61, 99, 101, 113, 115, 117, 127, 149, 157, 158, 163, 164, 168, 169, 170, 178, 179, 180, 190, 230, 238, 248, 259, 296, 297, 298, 299, 301, 360, 362, 367, 419, 430, 438, 485, 486, 487], "classifi": [3, 29, 33, 34, 37, 40, 43, 47, 53, 99, 100, 113, 146, 149, 150, 157, 164, 165, 166, 167, 168, 178, 179, 180, 262, 296, 298, 299, 300, 301, 341, 343, 348, 433, 438, 486, 487], "classification_accuraci": [34, 99], "classification_target": [31, 33], "classifier_nam": 31, "classifiers_data": 31, "classmethod": [384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 465], "claus": 0, "clean": [42, 45, 51, 54, 55, 58, 60, 70, 105, 115, 124, 125, 127, 129, 136, 142, 143, 146, 150, 151, 153, 157, 181, 184, 185, 230, 303, 304, 318, 336, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 418, 445, 447], "clean__": [336, 363, 364, 365, 366, 367, 368, 369], "clean__butterworth__": [336, 363, 364, 365, 366, 367, 368, 369], "clean__butterworth__padtyp": 60, "clean__sample_mask": [127, 157], "clean_arg": [370, 371, 372, 471], "clean_img": [70, 127, 136, 138, 143, 153, 157, 184, 459], "clean_kwarg": [34, 51, 54, 55, 58, 60], "clean_map": 6, "cleaned_sign": 459, "cleaner": [50, 67, 143, 157], "clear": [40, 95, 118, 124, 129, 146, 155, 157, 172, 296, 297, 298, 299, 303, 304, 365, 368, 445], "clearer": [44, 172], "clearli": [126, 153, 157, 172], "clever": [117, 171], "clf": [43, 140, 157], "cli": [176, 360], "click": [118, 174, 185, 268, 484], "clinic": [0, 53, 100, 165, 180], "clip": [60, 85, 351, 352], "cllip": 352, "clock": 171, "clone": 172, "close": [16, 24, 38, 42, 51, 87, 153, 157, 158, 165, 171, 172, 174, 178, 264, 296, 297, 298, 299, 374, 375, 376, 378, 379, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 431, 432, 433, 434, 435, 436, 437, 452, 484], "closer": [42, 51, 171, 456], "closest": [85, 351], "cluster": [6, 20, 32, 33, 34, 41, 48, 61, 64, 75, 80, 82, 83, 87, 92, 113, 115, 124, 125, 146, 149, 153, 154, 155, 157, 160, 166, 167, 169, 174, 177, 178, 179, 180, 192, 198, 242, 243, 259, 268, 298, 299, 313, 318, 327, 331, 333, 334, 341, 343, 348, 355, 366, 382, 402, 423, 430, 432, 433, 438, 444, 445, 446, 450, 452, 453, 456, 457, 470, 471, 486, 487], "cluster_level_infer": [77, 153, 157, 177], "cluster_percentil": [298, 299], "cluster_roi": [198, 243], "cluster_s": [154, 157], "cluster_threshold": [6, 63, 70, 82, 153, 157, 318, 331, 334, 355, 358, 456, 457], "clustering_percentil": [33, 298, 299], "cm": [13, 20, 21, 39, 40, 43, 44, 46, 52, 55, 60, 104, 126, 143, 157, 162, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 418, 419, 423, 429, 430, 431, 432, 433, 439, 440, 441, 443, 484], "cma": 209, "cmap": [3, 6, 10, 12, 13, 15, 20, 21, 23, 24, 32, 34, 36, 37, 38, 39, 40, 42, 43, 44, 46, 52, 55, 70, 77, 78, 80, 81, 82, 87, 90, 93, 101, 102, 104, 107, 108, 110, 111, 126, 144, 146, 155, 157, 162, 185, 197, 266, 267, 268, 365, 368, 370, 371, 372, 417, 418, 422, 423, 424, 425, 428, 430, 431, 432, 433, 434, 435, 436, 437, 440, 441, 443, 471, 484], "cmap_filenam": [82, 108], "cmap_label": [155, 157, 418], "cmaps_leftauditoryclick": [78, 107], "cmrmap_r": [34, 90, 93, 185, 365, 368], "cn2h9c": [115, 158, 230], "cnr": [0, 192, 240], "co": [5, 25, 85, 115, 173, 191, 204, 205, 206, 207, 208, 228, 253, 281], "coactiv": 163, "coalson": [60, 115, 202, 256], "coars": 38, "cobr": [126, 134, 138, 157], "code": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 158, 162, 163, 165, 167, 171, 173, 178, 185, 238, 300, 304, 318, 331, 364, 367, 369, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 429, 447, 455, 457, 470, 471, 479, 481, 485], "codebas": [126, 157, 172], "codecov": [138, 157], "coef": [32, 46, 99, 318, 327], "coef_": [3, 42, 46, 99, 111, 117, 172, 296, 297, 298, 299, 301, 302], "coef_img": [3, 31, 45, 111, 117], "coef_img_": [3, 30, 31, 32, 41, 44, 45, 111, 164, 185, 296, 297, 298, 299, 301, 302], "coeffici": [3, 6, 24, 40, 41, 42, 46, 53, 99, 100, 139, 155, 157, 158, 164, 165, 166, 170, 171, 172, 174, 178, 230, 232, 297, 301, 302, 307, 309, 312, 318, 327, 331, 457], "coerc": [12, 282], "coffei": [115, 219, 282], "cognit": [0, 6, 40, 73, 101, 105, 115, 164, 174, 178, 185, 197, 215, 220, 225, 226, 251, 260, 268, 271, 277, 278], "cognitive_paradigm_cogatla": 109, "cohen": [60, 115, 202, 222, 256, 257], "coher": [178, 180], "cohort": [53, 100], "coil": 70, "coimbra": 0, "col": [40, 308, 310, 311], "colcomb": [115, 219, 282], "cold_hot": [142, 157, 428, 433, 437, 440, 441, 443], "colin": [0, 146, 157], "colin27": 212, "colinear": 67, "collaps": 76, "collect": [60, 101, 105, 109, 115, 116, 172, 178, 190, 194, 198, 216, 218, 273, 274, 275, 276, 359, 463, 464, 487], "collection_658": 2, "collection_filt": [118, 273], "collection_id": [105, 109, 118, 273, 275], "collection_metadata": [118, 273], "collection_term": [118, 273], "collections_meta": [118, 218, 273, 274, 275, 276], "colleg": [0, 178], "collin": [115, 192, 195, 211, 240, 263, 289], "color": [10, 15, 16, 19, 22, 25, 31, 33, 35, 40, 51, 52, 53, 70, 87, 89, 127, 128, 130, 144, 146, 149, 151, 155, 157, 161, 162, 172, 174, 181, 229, 368, 370, 371, 372, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 418, 419, 422, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 484], "colorado": 0, "colorbar": [2, 6, 10, 15, 21, 22, 23, 24, 26, 27, 37, 38, 40, 42, 50, 52, 53, 56, 59, 60, 64, 69, 70, 76, 77, 78, 80, 81, 87, 88, 89, 95, 102, 105, 107, 110, 111, 122, 124, 127, 128, 135, 138, 143, 144, 146, 150, 151, 152, 153, 154, 157, 162, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 418, 419, 420, 423, 425, 426, 428, 429, 430, 431, 432, 433, 434, 436, 437, 439, 440, 441, 443, 484], "colorbar_fonts": [439, 441, 443], "colorbar_height": [439, 441, 443], "colormap": [6, 9, 15, 20, 22, 24, 28, 87, 113, 128, 138, 141, 142, 143, 144, 146, 151, 157, 254, 368, 370, 371, 372, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 417, 418, 419, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 486, 487], "colors_17": [229, 254], "colors_7": [229, 254], "column": [3, 6, 40, 58, 64, 65, 66, 67, 69, 70, 71, 72, 73, 76, 77, 78, 80, 81, 82, 99, 101, 102, 107, 108, 110, 118, 126, 127, 150, 157, 174, 231, 232, 234, 296, 297, 298, 299, 305, 308, 309, 310, 311, 316, 318, 325, 331, 332, 333, 336, 351, 359, 360, 361, 366, 382, 393, 395, 398, 412, 417, 420, 421, 423, 424, 426, 430, 431, 432, 433, 454, 456, 458, 459, 460], "column_nam": [64, 361], "com": [0, 155, 157, 172, 219, 223, 224, 242, 250, 263, 360, 484, 485], "combin": [6, 7, 16, 42, 43, 72, 104, 106, 115, 124, 127, 152, 157, 164, 169, 174, 178, 185, 191, 195, 209, 212, 216, 224, 238, 272, 296, 297, 298, 299, 301, 302, 303, 304, 318, 331, 333, 359, 401, 402, 405, 406, 407, 408, 420], "come": [2, 3, 17, 44, 54, 56, 60, 76, 81, 95, 117, 125, 128, 157, 159, 164, 165, 171, 172, 180, 181, 184, 185, 259, 484], "comer": 180, "comfort": [117, 172], "comma": 183, "command": [172, 180, 181, 485], "comment": [102, 110, 172, 185], "commerci": [190, 193, 195, 197, 198, 200, 201, 217, 243], "commit": 181, "committe": 191, "commod": 171, "common": [12, 51, 67, 68, 71, 95, 101, 138, 146, 152, 154, 157, 158, 164, 167, 169, 171, 172, 174, 177, 182, 184, 190, 195, 198, 227, 234, 243, 343, 351, 352, 356, 365, 377, 379, 487], "commonli": [53, 161, 173, 178, 180, 185, 360], "commun": [0, 115, 172, 179, 181, 190, 200, 220, 259, 485], "comp": [50, 194, 241], "compact": [2, 95, 184, 264], "compar": [3, 6, 31, 32, 34, 36, 41, 43, 48, 53, 58, 60, 61, 65, 67, 78, 80, 81, 84, 87, 95, 97, 100, 103, 113, 115, 118, 120, 146, 157, 159, 160, 163, 164, 165, 166, 167, 168, 171, 173, 174, 176, 178, 185, 198, 217, 230, 232, 245, 248, 254, 259, 338, 341, 347, 348, 349, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 394, 414, 415, 419, 427, 433, 438, 459, 471, 484, 486, 487], "comparison": [44, 51, 53, 59, 64, 67, 82, 94, 100, 101, 104, 115, 118, 158, 161, 168, 169, 170, 175, 178, 194, 198, 241, 487], "compat": [12, 37, 73, 80, 87, 95, 125, 127, 133, 153, 155, 157, 167, 172, 173, 246, 247, 318, 331, 333, 343, 358, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 420, 447, 455, 459], "compcor": [58, 67, 115, 127, 153, 157, 159, 259, 342, 359, 360, 460], "complementari": [115, 215, 271], "complet": [35, 62, 74, 95, 113, 117, 118, 146, 157, 158, 164, 166, 172, 173, 181, 184, 185, 260, 262, 278, 295, 318, 321, 358, 361, 368, 382, 417, 418, 419, 420, 423, 425, 426, 427, 429, 430, 431, 432, 433, 445, 455, 456, 457, 470, 486], "complex": [67, 78, 88, 115, 118, 164, 166, 169, 172, 177, 180, 185], "compli": [191, 359, 362], "complianc": [126, 157, 172], "compliant": [101, 125, 157, 172, 185, 278, 294, 360], "complic": [171, 183, 308, 310, 311], "compon": [7, 50, 52, 56, 67, 93, 95, 98, 112, 113, 115, 131, 138, 139, 141, 149, 157, 159, 160, 161, 162, 174, 178, 183, 184, 194, 195, 230, 231, 232, 241, 251, 259, 270, 296, 297, 298, 299, 300, 301, 302, 303, 304, 308, 310, 311, 318, 331, 343, 345, 348, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 416, 433, 438, 444, 445, 446, 447, 448, 449, 460, 471, 486, 487], "component_img": 106, "components_": [105, 141, 157, 303, 304], "components_img": [50, 52, 162], "components_img_": [50, 52, 141, 157, 162, 163, 303, 304], "components_mask": [93, 106], "compos": [21, 99, 178, 184, 185, 190, 257, 296, 297, 298, 299], "composit": [35, 40], "comprehens": [115, 172, 180, 195, 197, 268, 294], "compress": [50, 115, 143, 157, 160, 163, 183, 304, 487], "compressed_img_rena": 51, "compris": [65, 67, 87, 448, 456], "compromis": [174, 360], "comptat": 67, "comput": [0, 3, 6, 10, 16, 17, 23, 24, 26, 30, 31, 32, 34, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 63, 64, 65, 66, 67, 68, 69, 71, 73, 76, 78, 80, 82, 84, 86, 91, 93, 96, 99, 100, 101, 102, 104, 105, 106, 110, 111, 113, 115, 116, 118, 126, 129, 131, 143, 149, 150, 151, 153, 157, 160, 161, 163, 164, 165, 166, 167, 169, 170, 171, 174, 175, 176, 178, 179, 180, 182, 183, 186, 230, 232, 234, 248, 259, 262, 272, 281, 284, 285, 292, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 308, 310, 311, 314, 315, 317, 318, 320, 325, 327, 331, 333, 334, 341, 342, 343, 346, 347, 348, 349, 353, 355, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 382, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 414, 416, 419, 422, 423, 430, 431, 432, 433, 438, 439, 441, 444, 445, 446, 447, 455, 457, 458, 460, 469, 470, 477, 484, 487], "computation": [67, 165, 169], "computationnali": 165, "compute_alpha_max": 171, "compute_background_mask": [184, 296, 297, 298, 299, 303, 304, 365, 368, 445], "compute_brain_mask": [50, 149, 152, 157, 184, 296, 297, 298, 299, 303, 304, 368, 378, 445], "compute_contrast": [6, 34, 63, 64, 66, 67, 69, 70, 71, 72, 76, 77, 78, 80, 81, 82, 101, 102, 110, 124, 127, 128, 129, 157, 173, 176, 318, 331, 333, 457], "compute_epi_mask": [12, 26, 70, 90, 184, 185, 296, 297, 298, 299, 303, 304, 365, 368, 445], "compute_fixed_effect": [72, 176], "compute_gray_matter_mask": [149, 153, 157], "compute_multi_background_mask": [129, 157, 184, 365], "compute_multi_brain_mask": [124, 152, 157, 365], "compute_multi_epi_mask": [124, 157, 184, 365], "compute_multi_gray_matter_mask": [124, 157], "compute_multi_grey_matter_mask": [152, 157], "compute_regressor": [68, 125, 153, 157, 173], "computed_regressor": 320, "con": 314, "con_id": [68, 320], "con_val": 314, "concat_img": [2, 12, 71, 101, 137, 157, 184, 343], "concat_niimg": [127, 157], "concaten": [38, 40, 49, 51, 55, 59, 101, 158, 184, 337, 343, 359, 447], "concentr": [45, 172, 174, 178], "concept": [67, 99, 146, 157, 164, 165, 172, 178, 182, 212, 487], "conceptu": 174, "concern": [172, 178], "concis": 273, "concordia": 0, "concret": [66, 172, 174], "concurr": [36, 37, 38, 44, 45, 46, 50, 55, 59, 60, 99, 102, 104, 107], "cond": [95, 101, 320], "cond_": 64, "cond_id": [153, 157], "cond_map": 95, "conda": [172, 485], "condit": [3, 6, 30, 31, 32, 34, 36, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 81, 95, 99, 102, 104, 110, 117, 129, 150, 153, 155, 157, 158, 164, 171, 176, 178, 181, 184, 191, 201, 203, 210, 226, 227, 245, 270, 318, 320, 325, 331, 333, 420], "condition_": 34, "condition_count": 101, "condition_effect": 81, "condition_id": 73, "condition_mask": [3, 30, 31, 32, 35, 37, 38, 99, 104, 117], "condition_mask_test": 32, "condition_mask_train": 32, "condition_nam": [95, 101], "conditions_encod": 104, "conditions_label": 34, "conditions_per_run": 104, "conditions_run": 34, "conditions_test": 3, "conditions_to_modul": 73, "conditions_train": 3, "conduct": [6, 33, 118, 128, 157, 174, 226], "conenctivitymeasur": 49, "conf_int": [308, 310, 311], "confer": [142, 157], "confid": [296, 297, 298, 299, 301, 302, 308, 310, 311], "confidence_interv": [308, 310, 311], "configur": [10, 16, 125, 126, 157, 172, 181, 184, 185, 230, 300, 303, 304, 318, 331, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 444, 445, 446, 447], "confirm": [2, 30, 126, 157, 172], "conform": [155, 157, 174], "confound": [34, 49, 51, 52, 53, 54, 55, 56, 57, 60, 64, 78, 79, 100, 101, 102, 107, 110, 115, 117, 122, 125, 126, 127, 129, 130, 133, 143, 149, 150, 151, 153, 155, 157, 159, 162, 163, 164, 171, 178, 182, 184, 193, 200, 230, 239, 259, 303, 304, 318, 321, 331, 332, 333, 336, 342, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 382, 445, 447, 459, 460, 475, 487], "confound_fil": 53, "confound_filenam": [55, 57], "confounding_var": 382, "confounds_": 321, "confounds_datafram": 159, "confounds_fd_threshold": 321, "confounds_filenam": 60, "confounds_minimal_no_gsr": 58, "confounds_mot": 321, "confounds_scrub": [58, 321], "confounds_simpl": 58, "confounds_std_dvars_threshold": 321, "confounds_strategi": 321, "confounds_wm_csf": 321, "conftest": 172, "confus": [125, 157, 165, 354], "confusion_matrix": [32, 36, 165], "congdon": [115, 260, 278], "congruent": 176, "conjunct": 95, "connect": [7, 9, 23, 27, 28, 51, 52, 60, 61, 89, 95, 98, 112, 115, 127, 128, 129, 131, 136, 138, 139, 146, 149, 154, 157, 159, 161, 163, 172, 173, 174, 178, 179, 180, 184, 190, 191, 195, 223, 225, 229, 230, 231, 232, 238, 242, 248, 250, 251, 252, 254, 259, 265, 270, 284, 285, 292, 318, 321, 334, 337, 345, 355, 359, 360, 362, 367, 368, 369, 370, 374, 375, 376, 377, 378, 379, 380, 395, 396, 416, 419, 421, 430, 433, 436, 437, 438, 439, 445, 448, 449, 461, 463, 464, 465, 484, 485, 486, 487], "connect_diag": [87, 448], "connected_compon": [447, 449], "connected_label_region": [87, 138, 157, 161, 184, 447, 449], "connected_region": [89, 131, 144, 157, 162, 184, 447, 448], "connection": 180, "connectivity_": 445, "connectivity__kind": 100, "connectivity_measur": 60, "connectivitymatrix": 230, "connectivitymeasur": [49, 52, 53, 56, 58, 60, 100, 111, 126, 131, 133, 136, 139, 149, 157, 158, 159, 162], "connectom": [0, 9, 13, 28, 48, 50, 51, 53, 56, 58, 59, 61, 100, 111, 113, 115, 120, 131, 135, 136, 140, 143, 144, 146, 149, 151, 157, 160, 162, 163, 178, 179, 180, 185, 190, 191, 193, 195, 217, 238, 245, 248, 254, 256, 257, 259, 270, 303, 304, 338, 341, 343, 349, 360, 362, 363, 364, 366, 367, 369, 394, 395, 414, 415, 416, 417, 419, 429, 430, 431, 433, 438, 439, 440, 442, 447, 455, 471, 486, 487], "connectome_measur": [49, 52, 111, 162], "connectomedb": 191, "connectomeview": [439, 442], "connor": [0, 155, 157], "conscious": 0, "consecut": [128, 157, 192, 240, 242, 244, 250, 253, 254, 444], "consensu": [163, 172, 195], "consequ": [3, 16, 87, 185], "conserv": [6, 78, 80, 104, 169, 174, 195, 231, 236], "consid": [6, 33, 41, 55, 56, 57, 67, 68, 81, 93, 95, 104, 106, 117, 133, 146, 153, 157, 169, 172, 191, 212, 229, 238, 254, 296, 297, 298, 299, 301, 302, 303, 304, 305, 309, 318, 320, 321, 325, 331, 333, 340, 346, 357, 364, 365, 367, 368, 370, 371, 376, 379, 382, 386, 432, 445, 448, 450, 451, 471], "consider": [159, 165, 224, 238, 333, 382], "consist": [3, 6, 7, 35, 42, 46, 67, 117, 125, 126, 136, 142, 143, 144, 153, 157, 164, 165, 168, 169, 171, 172, 174, 178, 190, 195, 200, 226, 232, 242, 270, 297, 302, 321, 363, 366, 370, 371, 444, 446, 449], "consolid": [95, 154, 157], "conson": [102, 213], "consortium": [260, 278], "constant": [67, 111, 171, 184, 296, 297, 298, 299, 301, 302, 333, 382, 422, 458, 484], "constitut": [21, 163], "constrain": [51, 52, 115, 161, 179, 198, 210, 217, 224, 225, 243, 248, 262, 445], "constrained_layout": [31, 33, 50, 53, 57, 60, 65, 70, 76, 79, 81, 100], "constraint": [51, 161, 171, 356], "construct": [10, 42, 54, 56, 99, 115, 160, 163, 169, 172, 173, 179, 180, 192, 305, 309, 332, 455], "constructor": [2, 118, 129, 157, 310, 311, 343], "consult": [102, 191], "consum": [144, 157, 167, 171, 181, 183, 369], "consumpt": [184, 318, 331, 364, 367, 458], "contact": [6, 226], "contain": [2, 3, 4, 6, 12, 23, 24, 37, 42, 51, 54, 57, 64, 65, 69, 72, 73, 80, 85, 87, 92, 95, 102, 103, 108, 109, 110, 117, 118, 125, 126, 127, 128, 130, 133, 138, 143, 146, 155, 157, 158, 164, 165, 168, 171, 172, 174, 178, 181, 183, 185, 191, 192, 193, 194, 195, 198, 200, 203, 209, 210, 212, 216, 218, 219, 220, 221, 230, 231, 232, 234, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 262, 272, 273, 274, 275, 276, 277, 282, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 307, 308, 310, 311, 312, 318, 321, 331, 332, 333, 336, 337, 345, 351, 355, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 382, 428, 429, 434, 435, 436, 437, 441, 443, 444, 445, 446, 447, 448, 450, 451, 455, 457, 459, 463, 464, 465, 467, 468, 469, 476, 487], "contast": 72, "content": [6, 67, 69, 85, 126, 157, 168, 172, 180, 318, 424], "contest": 203, "context": [7, 95, 101, 115, 126, 127, 157, 172, 178], "contigu": [6, 161, 171, 226, 382], "continu": [22, 24, 41, 45, 54, 58, 159, 164, 165, 166, 170, 178, 185, 273, 346, 350, 351, 352, 363, 364, 365, 366, 367, 368, 369, 425, 426, 431, 432, 433, 440, 448, 449], "contour": [10, 16, 19, 22, 50, 52, 88, 89, 126, 129, 138, 146, 149, 151, 155, 157, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 431, 432, 435, 487], "contour_fil": [384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410], "contourf": [16, 22, 50, 52, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410], "contrari": [178, 357, 363, 364, 471], "contrarili": [56, 92, 366, 367, 471], "contrast": [2, 6, 9, 15, 16, 28, 34, 66, 68, 71, 76, 77, 78, 79, 80, 81, 82, 89, 91, 94, 102, 107, 108, 110, 113, 125, 126, 127, 129, 136, 140, 141, 150, 153, 157, 163, 169, 174, 175, 176, 177, 178, 192, 197, 216, 266, 267, 268, 274, 276, 307, 308, 310, 311, 312, 314, 315, 316, 318, 331, 333, 358, 417, 420, 431, 432, 433, 438, 440, 444, 457, 470, 484, 486, 487], "contrast_def": [6, 318, 331, 420, 457], "contrast_definit": 109, "contrast_dim": 306, "contrast_id": [66, 67, 69, 71, 72], "contrast_img": [72, 315], "contrast_map_filenam": [78, 107], "contrast_matrix": [66, 67, 69, 71], "contrast_typ": [64, 127, 157, 306, 314, 358], "contrast_v": [66, 67, 69, 71, 72], "contribut": [124, 140, 143, 144, 145, 146, 147, 148, 152, 153, 155, 157, 165, 174, 181, 221, 485], "contributor": [119, 120, 122, 123, 172, 181], "control": [6, 9, 10, 12, 15, 16, 21, 24, 28, 34, 39, 42, 50, 58, 77, 80, 99, 113, 115, 125, 127, 129, 131, 139, 140, 144, 146, 150, 157, 158, 162, 163, 164, 165, 168, 169, 171, 172, 174, 178, 182, 190, 193, 195, 230, 238, 266, 273, 275, 304, 313, 317, 318, 331, 334, 337, 348, 355, 359, 360, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 418, 423, 425, 426, 428, 432, 433, 434, 436, 437, 438, 444, 457, 469, 470, 484, 486, 487], "controversi": 238, "convei": [172, 382], "conveni": [10, 23, 24, 111, 118, 184, 185, 200, 259], "convent": [23, 73, 124, 126, 155, 157, 172, 181, 294, 354, 356, 357, 417, 423, 425, 433, 444, 446], "converg": [35, 93, 106, 171, 231, 234, 301, 302, 444], "convergencewarn": [35, 41, 93, 106], "convers": [40, 185, 192], "convert": [3, 6, 12, 21, 37, 44, 50, 52, 67, 80, 87, 95, 109, 117, 146, 151, 153, 155, 157, 162, 164, 169, 178, 184, 300, 316, 337, 338, 346, 363, 364, 365, 366, 367, 368, 369], "convex": 171, "convolut": [68, 174, 320, 325], "convolv": [173, 320], "coord": [16, 42, 52, 54, 56, 60, 70, 88, 101, 144, 146, 157, 162, 383, 385, 386, 414, 415, 419, 434, 435, 436, 437, 443, 484], "coord_transform": [42, 49, 140, 157], "coordin": [7, 17, 20, 23, 38, 42, 51, 54, 56, 70, 95, 101, 115, 117, 123, 127, 135, 138, 140, 141, 143, 149, 153, 155, 157, 160, 162, 171, 173, 174, 178, 185, 192, 193, 199, 202, 204, 205, 206, 207, 208, 212, 222, 224, 225, 248, 256, 257, 258, 281, 304, 338, 351, 369, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 416, 417, 418, 419, 423, 425, 426, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 442, 443, 456, 457, 461, 462, 466, 468, 469, 471, 484, 487], "coords_connectom": [52, 162], "copenhagen": 0, "copi": [3, 21, 34, 37, 40, 42, 49, 55, 89, 98, 101, 112, 113, 117, 128, 129, 146, 157, 171, 172, 183, 191, 239, 277, 278, 303, 304, 335, 339, 340, 341, 346, 347, 348, 349, 350, 351, 352, 355, 362, 365, 368, 458, 486], "copy_head": [3, 6, 16, 17, 19, 26, 31, 32, 34, 37, 42, 51, 54, 67, 70, 71, 72, 76, 82, 85, 89, 90, 93, 94, 95, 96, 103, 104, 106, 335, 340, 348, 349, 350, 351, 352, 355], "copy_header_from": [103, 129, 157, 347], "copy_img": [127, 131, 157], "corbetta": [115, 360], "core": [3, 17, 21, 30, 44, 45, 50, 52, 60, 171, 172, 181, 232, 485], "coregist": [38, 69, 195], "coregistr": [16, 135, 157, 178, 195], "corei": [115, 194, 241], "corner": [46, 136, 157, 172, 353], "coron": [15, 95, 318, 331, 383, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 417, 419, 423, 425, 426, 429, 431, 432, 433, 457], "corr": [23, 427], "corrcoef": 49, "correct": [6, 44, 45, 50, 58, 76, 78, 80, 82, 93, 102, 104, 107, 108, 115, 124, 125, 146, 149, 155, 157, 158, 169, 172, 174, 175, 178, 181, 195, 278, 294, 296, 297, 298, 299, 301, 302, 333, 334, 359, 360, 382, 418, 460, 487], "correctli": [58, 67, 94, 127, 144, 146, 147, 155, 157, 167, 174, 181, 296, 318, 359, 360, 485], "correl": [24, 27, 44, 45, 48, 49, 54, 61, 63, 71, 100, 101, 111, 113, 115, 129, 157, 162, 164, 171, 174, 178, 185, 191, 195, 210, 216, 230, 233, 235, 237, 259, 270, 303, 359, 360, 362, 368, 369, 395, 422, 427, 433, 484, 486], "correlation_matric": [27, 49, 53, 191, 270], "correlation_matrix": [56, 58, 484], "correlation_measur": [53, 56, 58], "correspond": [2, 3, 6, 7, 15, 25, 30, 31, 34, 35, 37, 40, 41, 42, 46, 51, 57, 58, 65, 66, 67, 70, 73, 78, 79, 80, 81, 82, 87, 92, 93, 95, 102, 104, 110, 115, 126, 148, 150, 157, 159, 164, 165, 167, 169, 171, 172, 174, 178, 179, 181, 185, 192, 195, 197, 225, 228, 230, 240, 245, 248, 251, 258, 264, 268, 275, 277, 286, 287, 290, 296, 297, 298, 299, 300, 301, 302, 303, 304, 314, 315, 318, 320, 321, 325, 327, 331, 332, 333, 347, 348, 351, 356, 363, 365, 366, 367, 368, 370, 374, 375, 376, 377, 378, 379, 380, 382, 396, 411, 412, 417, 418, 423, 426, 427, 429, 431, 432, 433, 435, 445, 447, 448, 450, 451, 453, 456, 457, 469], "cort": [11, 22, 58, 92, 159, 246, 247], "cortex": [3, 7, 24, 32, 33, 34, 39, 40, 57, 60, 63, 69, 71, 76, 80, 81, 92, 99, 115, 162, 164, 169, 173, 174, 191, 192, 199, 202, 209, 210, 216, 223, 229, 244, 250, 254, 256, 262, 270, 272], "cortexl": 258, "cortexmid": 258, "cortexr": 258, "cortic": [9, 10, 24, 25, 28, 29, 47, 57, 58, 69, 72, 92, 113, 115, 129, 138, 140, 143, 149, 157, 159, 173, 179, 199, 203, 204, 205, 206, 207, 208, 209, 211, 212, 223, 224, 229, 244, 252, 254, 258, 262, 263, 281, 284, 285, 343, 419, 436, 437, 438, 439, 440, 441, 442, 443, 465, 469, 486, 487], "corticalparcellation_yeo2011": [229, 254], "cortl": 246, "cosin": [6, 34, 67, 69, 70, 71, 124, 126, 151, 157, 195, 318, 321, 325, 359, 459, 470], "cosine00": 58, "cosine01": 58, "cosine02": 58, "cosine03": 58, "cosmo": [0, 126, 157], "cost": [32, 41, 55, 80, 149, 157, 161, 165, 166, 170, 171, 172, 178, 185, 298, 299], "costli": [165, 169, 333, 382], "could": [4, 6, 37, 51, 60, 67, 69, 70, 80, 86, 87, 94, 101, 103, 107, 117, 118, 133, 149, 153, 154, 157, 164, 167, 169, 171, 172, 174, 176, 180, 185, 306, 432, 469], "couldn": 171, "counfound": 49, "count": [51, 102, 126, 157, 273, 275], "counterpart": [129, 157, 165], "countvector": [273, 275], "coupl": [68, 158, 181], "cours": [69, 161, 174, 178, 364, 367, 371], "courtnei": [115, 219, 282], "cov": [55, 308, 310, 311, 485], "cov_estim": 230, "cov_estimator_": 230, "cov_to_corr": [138, 157], "covari": [6, 44, 48, 59, 60, 61, 63, 69, 104, 113, 115, 139, 157, 159, 160, 162, 179, 191, 230, 231, 232, 233, 234, 248, 259, 270, 305, 307, 308, 309, 310, 311, 362, 367, 382, 415, 419, 430, 438, 439, 486, 487], "covariance_": [54, 55, 60, 158], "covariance_estim": 60, "covariances_": [55, 158, 231, 232], "cover": [58, 172, 185, 202, 209, 256, 258, 413], "coverag": [129, 157, 172, 485], "coveral": [138, 157], "covertli": 213, "cox": [115, 219, 282], "cpac": 238, "cpu": [3, 44, 104, 107, 167, 232, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 327, 331, 333, 348, 363, 364, 365, 377, 379, 382, 445], "cr": [115, 211, 263, 289], "craddock": [58, 115, 155, 157, 158, 159, 187, 217, 219, 238, 243, 248, 282], "crash": [146, 157], "creat": [2, 3, 6, 10, 12, 16, 19, 21, 23, 24, 31, 34, 37, 38, 40, 42, 43, 44, 45, 49, 50, 51, 57, 64, 67, 69, 71, 72, 73, 76, 80, 85, 87, 88, 95, 99, 101, 104, 108, 109, 111, 116, 117, 124, 129, 135, 143, 155, 157, 158, 159, 163, 164, 165, 167, 172, 173, 174, 176, 178, 179, 181, 182, 183, 185, 273, 275, 295, 303, 304, 318, 321, 331, 332, 343, 349, 358, 384, 393, 394, 395, 398, 417, 418, 419, 420, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 453, 454, 456, 463, 465, 484, 485, 487], "create_fake_bids_dataset": [125, 157], "create_simulation_data": 46, "creation": [124, 146, 157, 303, 304, 318, 331, 457], "creativ": [195, 198, 243], "creativecommon": 243, "credit": 0, "criteo": 0, "criteria": [118, 172, 178, 224, 238, 273], "criterion": [195, 382, 446], "critic": [130, 157, 169, 171], "criugm": 0, "crivello": [115, 192, 240], "crop": [184, 185, 340], "crop_img": 351, "croppabl": 340, "cross": [29, 33, 34, 37, 38, 42, 44, 46, 47, 53, 57, 98, 100, 112, 113, 115, 118, 125, 126, 149, 157, 158, 165, 168, 220, 232, 262, 273, 277, 286, 296, 297, 298, 299, 300, 301, 302, 343, 353, 362, 368, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 417, 423, 426, 431, 432, 433, 438, 440, 484, 486, 487], "cross_val_scor": [36, 99, 167], "cross_valid": [35, 99, 143, 157, 167, 296, 297, 298, 299], "crossbar": [393, 395, 398, 400, 402, 404, 406, 408, 410], "crowd": 221, "crucial": 169, "csernanski": [115, 220, 277], "csf": [12, 22, 58, 211, 259, 263, 321, 359, 360], "css": [128, 157, 238], "csv": [3, 6, 30, 42, 49, 57, 117, 133, 157, 159, 164, 193, 201, 214, 217, 238, 239, 269, 277, 303, 304, 318, 325, 331, 336, 362, 363, 364, 365, 366, 367, 368, 369, 445, 447, 459], "csv_file": 159, "csv_to_arrai": [133, 157], "ctan": 181, "cube": [185, 456], "cubic": [124, 157, 185, 234, 459], "cubicsplin": [127, 157], "cue": [78, 107, 267, 268], "cumbersom": 174, "cumsum": 65, "cumul": [150, 157, 306], "cuneal": 92, "cur_img": [50, 88], "current": [2, 16, 19, 31, 37, 42, 44, 45, 49, 50, 51, 54, 56, 68, 72, 88, 104, 108, 155, 157, 169, 171, 172, 178, 181, 185, 234, 242, 243, 251, 277, 278, 306, 356, 358, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 434, 436, 437, 440, 447], "current_collect": 109, "currentmodul": 181, "curs": 95, "curv": [40, 151, 157, 164, 165, 167, 171, 178, 434, 435, 436, 437, 443, 467], "curv_left": [204, 205, 206, 207, 208, 281], "curv_right": [204, 205, 206, 207, 208, 281], "curv_sign": 10, "curvatur": [10, 24, 125, 129, 157, 204, 205, 206, 207, 208, 281, 285], "custom": [10, 15, 16, 24, 40, 49, 58, 68, 125, 143, 151, 153, 157, 159, 169, 182, 296, 297, 318, 320, 325, 360, 396, 434, 436, 437, 455, 484, 487], "custom_funct": [434, 436, 437], "customis": 360, "customiz": 360, "cut": [15, 51, 67, 95, 127, 128, 131, 141, 143, 144, 155, 157, 179, 195, 318, 331, 375, 378, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 417, 419, 423, 425, 426, 429, 431, 432, 433, 440, 457, 484], "cut_coord": [2, 6, 10, 16, 17, 18, 19, 21, 31, 32, 37, 41, 42, 44, 45, 50, 51, 52, 57, 63, 66, 67, 70, 71, 72, 76, 78, 80, 82, 87, 88, 89, 91, 93, 94, 95, 101, 104, 107, 108, 109, 124, 131, 157, 162, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 417, 423, 426, 431, 432, 433, 440, 457, 484], "cut_scor": 42, "cutax": [400, 402, 404, 406, 408, 410], "cutoff": [6, 67, 69, 71, 90, 151, 157, 182, 296, 297, 298, 299, 301, 302, 336, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 445, 447, 458, 459, 487], "cv": [3, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 46, 53, 60, 99, 100, 111, 140, 157, 164, 169, 232, 296, 297, 298, 299, 300, 301, 302], "cv_": [296, 297, 298, 299, 301, 302], "cv_alphas_": 232, "cv_params_": [3, 35, 125, 126, 157, 296, 297, 298, 299], "cv_results_": 100, "cv_score": [35, 99], "cv_scores_": [3, 30, 31, 33, 34, 35, 40, 44, 111, 164, 232, 296, 297, 298, 299, 301, 302], "cv_scores_ova": 36, "cv_scores_ovo": 36, "cwd": [3, 4, 6, 7, 16, 24, 30, 34, 43, 50, 51, 57, 63, 64, 72, 73, 76, 87, 95], "cyan": 484, "cycl": [125, 126, 157], "cytoarchitecton": 212, "cytoarchitectur": 115, "czarina": [0, 126, 157], "c\u00e9line": [0, 146, 157], "d": [0, 27, 43, 53, 58, 60, 71, 77, 101, 115, 118, 158, 171, 172, 180, 192, 195, 201, 202, 211, 218, 222, 225, 240, 251, 256, 257, 260, 263, 273, 275, 278, 289, 306, 313, 336, 359, 360, 418, 430, 459, 473], "d_i": [310, 311], "daan": [115, 359, 360], "daddi": [0, 122, 131, 133, 136, 140, 141, 143, 146, 150, 157], "dadi": [53, 100, 115, 201, 245], "daejeon": 0, "dai": 181, "dale": [23, 115, 199, 204, 205, 206, 207, 208, 209, 244, 252, 281], "dalenberg": [0, 124, 125, 157], "damaraju": [115, 194, 241], "damien": [60, 115, 202, 256], "dan": [0, 115, 143, 146, 157, 228, 253], "danger": [172, 174], "danial": [115, 223, 229, 250, 254], "daniel": [0, 58, 115, 143, 146, 152, 155, 157, 191, 218, 219, 220, 270, 273, 275, 277, 282, 359, 360], "danilo": [0, 119, 120, 122, 123, 131, 133, 157], "danish": 0, "daphn": [115, 171], "dark": [23, 24, 126, 157, 172, 181, 434, 436, 437, 441, 443], "dartel": 277, "dartel_vers": 277, "dartmouth": 0, "darya": [53, 100, 115], "data": [0, 1, 2, 8, 19, 21, 22, 25, 27, 29, 32, 35, 37, 38, 40, 45, 47, 48, 52, 53, 55, 60, 61, 62, 65, 66, 68, 70, 72, 73, 74, 77, 78, 79, 80, 81, 82, 85, 87, 88, 89, 91, 92, 93, 96, 100, 102, 103, 104, 106, 107, 108, 110, 111, 113, 115, 116, 118, 124, 125, 126, 127, 129, 130, 133, 136, 137, 138, 139, 140, 141, 143, 144, 146, 149, 150, 151, 153, 154, 155, 157, 159, 160, 162, 165, 166, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 182, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 230, 231, 232, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 292, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 318, 321, 325, 326, 327, 331, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 417, 418, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 457, 459, 463, 465, 467, 469, 471, 472, 473, 475, 484, 486, 487], "data_2d": [383, 385, 386], "data_bound": [383, 385, 386], "data_dir": [64, 101, 102, 110, 152, 157, 183, 213, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 292], "data_figure_run01": [43, 90], "data_fil": 32, "data_gen": [59, 125, 155, 157, 171], "data_img": [374, 377], "data_mask": [67, 106], "data_nam": [279, 280], "data_softwar": 224, "data_typ": [10, 23, 24, 38, 58, 69, 92, 103, 110, 111, 285], "data_usage_agr": [220, 277], "databas": [73, 105, 115, 197, 225, 268, 273], "dataconversionwarn": [107, 108], "datad": 13, "datadb": [210, 262], "datafram": [34, 64, 65, 67, 72, 73, 76, 77, 78, 79, 80, 81, 82, 101, 102, 110, 118, 126, 149, 153, 154, 157, 230, 238, 244, 245, 256, 257, 258, 266, 267, 268, 277, 300, 303, 304, 318, 319, 321, 325, 331, 332, 333, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 420, 421, 422, 424, 444, 445, 446, 447, 456, 459], "dataia": 0, "dataset": [1, 3, 4, 7, 8, 10, 11, 14, 15, 20, 21, 22, 23, 24, 25, 26, 27, 29, 42, 47, 49, 54, 56, 57, 58, 59, 62, 67, 69, 70, 71, 72, 74, 75, 78, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 106, 109, 111, 112, 113, 115, 117, 118, 125, 126, 127, 128, 129, 133, 134, 138, 142, 143, 146, 147, 148, 149, 151, 152, 153, 154, 155, 157, 158, 159, 160, 163, 164, 165, 168, 170, 173, 177, 178, 179, 180, 181, 182, 185, 191, 192, 194, 195, 196, 197, 198, 199, 201, 202, 204, 205, 206, 207, 208, 209, 211, 212, 215, 217, 220, 221, 222, 223, 224, 225, 228, 229, 296, 297, 298, 299, 302, 303, 318, 321, 325, 331, 334, 335, 338, 341, 343, 347, 348, 352, 356, 358, 359, 360, 361, 362, 368, 369, 382, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 420, 421, 425, 426, 427, 428, 430, 433, 434, 435, 436, 437, 438, 440, 441, 448, 455, 456, 457, 465, 469, 470, 471, 484, 486, 487], "dataset_descript": [64, 76, 358], "dataset_fil": 45, "dataset_ho": 11, "dataset_ju": 11, "dataset_path": [101, 110, 321], "dataset_vers": 278, "datatyp": [58, 92, 103], "date": [0, 152, 157, 241, 244, 263, 273, 275], "davatziko": [58, 115, 359, 360], "david": [0, 58, 115, 118, 155, 157, 180, 191, 199, 209, 218, 219, 225, 244, 251, 270, 273, 275, 282, 359, 360, 382], "davidson": [115, 310, 311], "dawn": [115, 219, 282], "db": [46, 191], "db_name": [58, 92, 103], "dc": [115, 191, 270], "ddof": [363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 459], "de": [0, 143, 146, 157, 191, 326], "deactiv": [6, 72, 470], "deal": [12, 37, 68, 80, 87, 95, 117, 122, 149, 157, 174, 365, 471], "deanna": [60, 115, 191, 202, 224, 256, 258, 270], "debat": 161, "debia": [301, 302], "debian": [123, 157], "debias": [301, 302], "deborah": [115, 209], "debug": [171, 172, 180, 232, 234], "decai": 458, "decemb": [115, 130, 131, 132, 146, 157, 195, 260, 278], "decent": 181, "decid": 174, "decim": [149, 157, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 426], "decis": [101, 115, 165, 169, 296, 297, 298, 299, 301, 302, 306], "decision_funct": [296, 297, 298, 299, 301, 302], "declar": [6, 172, 174, 231, 234], "decod": [1, 8, 10, 23, 24, 37, 41, 42, 44, 46, 47, 51, 98, 112, 115, 117, 118, 125, 126, 127, 129, 138, 139, 143, 146, 149, 150, 151, 152, 153, 154, 157, 165, 169, 173, 178, 179, 180, 185, 216, 218, 262, 265, 272, 284, 285, 318, 321, 337, 341, 343, 346, 348, 362, 368, 369, 395, 421, 423, 430, 432, 433, 437, 438, 440, 455, 457, 465, 485, 486, 487], "decoderregressor": [44, 129, 146, 149, 150, 157, 165, 296, 299], "decompos": [52, 158, 162, 174, 447], "decomposit": [50, 51, 52, 93, 98, 105, 112, 113, 115, 125, 131, 138, 141, 149, 155, 157, 162, 163, 179, 225, 259, 342, 343, 348, 362, 365, 368, 433, 438, 447, 460, 471, 486], "decompositionestim": [303, 304, 445], "decompress": 183, "deconvolv": [101, 115, 164], "decor": [126, 152, 157, 172], "decorrel": 171, "decreas": [55, 67, 96, 115, 171, 172, 209, 417, 431, 432, 433, 440], "dedic": [172, 277], "deem": [124, 157], "deep": [70, 230, 231, 232, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 444, 445, 446, 447], "deephealth": 0, "def": [42, 43, 46, 49, 55, 67, 68, 101, 109, 172, 181, 434, 436, 437], "def_dofmax": 306, "def_tini": 306, "default": [3, 9, 10, 15, 16, 24, 26, 28, 30, 31, 33, 34, 35, 36, 37, 38, 40, 44, 57, 58, 62, 64, 65, 67, 74, 80, 84, 90, 95, 97, 103, 104, 105, 111, 113, 118, 124, 125, 126, 127, 129, 130, 131, 133, 136, 137, 142, 143, 144, 146, 149, 150, 151, 152, 153, 155, 157, 164, 165, 169, 171, 172, 173, 181, 183, 184, 185, 230, 231, 232, 234, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 342, 343, 346, 347, 348, 349, 350, 351, 352, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 463, 464, 465, 469, 470, 471, 484, 486], "default_rng": [7, 65, 172], "defaultmod": 258, "defin": [3, 6, 7, 10, 22, 30, 31, 33, 34, 37, 38, 40, 44, 49, 51, 56, 60, 63, 67, 69, 71, 72, 73, 77, 78, 81, 82, 92, 99, 102, 115, 124, 125, 150, 151, 152, 153, 157, 159, 161, 162, 163, 164, 169, 172, 173, 174, 177, 178, 181, 184, 185, 191, 192, 212, 216, 224, 238, 240, 244, 258, 270, 272, 296, 297, 298, 299, 301, 302, 305, 309, 313, 318, 320, 321, 325, 351, 359, 370, 371, 396, 417, 418, 419, 423, 425, 426, 428, 429, 431, 432, 433, 447, 448, 449, 450, 451, 453, 454, 471, 478], "definit": [56, 64, 92, 95, 126, 157, 159, 167, 168, 171, 172, 173, 174, 178, 182, 201, 217, 221, 245, 358, 363, 364, 366, 367, 369, 370, 420, 450, 451, 453, 454, 471, 487], "deg_of_freedom": 109, "degre": [58, 68, 101, 109, 174, 238, 306, 309, 315, 360, 434, 436, 437], "degree_binar": 238, "degree_weight": 238, "dehaen": [72, 73, 115, 180, 197, 203, 268], "del": [0, 46], "delai": [68, 128, 157, 181, 318, 320, 325], "delcroix": [115, 192, 240], "deleg": [155, 157], "delettr": [0, 146, 157], "delimit": [3, 42, 43, 99, 101, 117, 183], "delin": 22, "deliv": [174, 178], "delta": [65, 173, 325, 424], "demand": 277, "demean": [153, 157, 359, 360], "dement": [115, 220, 277], "dementia": 277, "demian": [0, 115, 122, 143, 157, 201, 245], "demo": [38, 98, 101, 102, 110, 112, 113, 117, 129, 149, 153, 157, 172, 187, 196, 230, 252, 265, 284, 285, 292, 296, 370, 372, 430, 434, 438, 465, 486], "demograph": [115, 191, 270], "demonstr": [15, 40, 41, 42, 58, 64, 66, 95, 106, 129, 154, 157, 163, 164, 224, 382, 484], "den": 321, "denghien": [72, 115, 203], "deni": [72, 73, 115, 164, 197, 203, 268], "denmark": 0, "denois": [110, 360], "denoise_strategi": [58, 127, 157, 360], "denot": [3, 6, 16, 143, 157, 174, 183, 184, 185, 216, 359, 360, 393, 415, 432, 447, 448, 449, 450], "dens": [54, 56, 158, 171, 376], "densiti": [44, 59, 76, 171, 177, 179, 211, 220, 238, 263, 277], "denver": 0, "deoxi": 174, "deoxyhaemoglobin": [174, 178], "depart": [0, 6, 178, 226], "depend": [6, 15, 16, 40, 41, 67, 72, 90, 96, 101, 103, 104, 107, 115, 124, 127, 133, 138, 143, 146, 157, 165, 169, 171, 172, 174, 178, 181, 183, 238, 242, 243, 246, 247, 251, 254, 259, 270, 296, 297, 298, 299, 301, 302, 303, 304, 305, 309, 318, 331, 333, 334, 341, 365, 368, 381, 382, 431, 445, 456, 457, 484], "depict": [57, 172, 184], "deploi": [124, 157], "deploy": 172, "deprec": [50, 51, 52, 124, 125, 126, 127, 129, 133, 137, 138, 139, 140, 141, 143, 144, 146, 148, 149, 151, 153, 155, 157, 172, 181, 196, 230, 242, 243, 251, 255, 296, 297, 298, 299, 303, 304, 306, 314, 321, 322, 323, 324, 328, 329, 330, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 382, 418, 445, 447, 450, 451, 455], "deprecated_cal": [129, 157], "deprecated_cmap": 13, "deprecationwarn": [129, 157, 240, 242, 243, 251, 315, 362, 363, 364, 365, 366, 367, 368, 369, 447], "dept": 0, "depth": [3, 23, 24, 25, 115, 149, 157, 199, 204, 205, 206, 207, 208, 244, 281, 428, 434, 436, 437, 441, 443, 469], "der": [115, 199, 244], "derek": [0, 146, 157], "deriv": [6, 48, 61, 64, 68, 69, 71, 76, 101, 102, 106, 110, 113, 126, 150, 152, 153, 157, 163, 171, 173, 178, 179, 185, 195, 198, 209, 211, 213, 225, 238, 259, 303, 304, 318, 320, 321, 322, 324, 325, 328, 330, 331, 333, 344, 356, 357, 358, 359, 360, 383, 384, 411, 418, 431, 433, 434, 436, 437, 438, 445, 486], "derivatives_fold": [64, 321], "derived_response_funct": 68, "desc": [101, 102, 110, 321, 359, 360], "descent": [171, 304], "describ": [0, 6, 19, 38, 40, 65, 67, 73, 116, 117, 118, 127, 157, 165, 171, 172, 174, 180, 181, 185, 197, 214, 224, 231, 238, 268, 269, 313, 316, 319, 321, 325, 333, 360, 382, 421], "descrip": [58, 92, 103], "descript": [6, 60, 116, 118, 124, 126, 127, 128, 149, 153, 157, 172, 181, 183, 184, 195, 203, 214, 223, 226, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 261, 265, 269, 270, 271, 273, 274, 275, 276, 279, 280, 282, 284, 320, 333, 336, 340, 348, 353, 354, 360, 382, 487], "descriptor": [169, 319, 382], "deserv": [0, 185], "design": [6, 34, 43, 46, 62, 63, 64, 66, 69, 70, 71, 72, 74, 75, 76, 77, 80, 81, 82, 83, 102, 107, 113, 115, 125, 129, 130, 149, 150, 151, 153, 157, 164, 167, 171, 172, 174, 175, 176, 177, 178, 192, 203, 214, 261, 268, 305, 308, 309, 310, 311, 316, 318, 319, 325, 327, 331, 332, 333, 334, 341, 347, 358, 361, 420, 421, 422, 433, 438, 457, 470, 486, 487], "design_column": [64, 316], "design_fil": 72, "design_matric": [63, 64, 71, 72, 101, 173, 318], "design_matrices_": [6, 66, 67, 69, 101], "design_matrix": [6, 43, 63, 64, 65, 66, 67, 69, 71, 76, 77, 78, 79, 80, 81, 82, 110, 319, 325, 331, 332, 333, 361, 420, 421, 422], "design_matrix1": [72, 203, 261], "design_matrix2": [72, 203, 261], "desikan": [115, 209], "desir": [2, 64, 181, 185, 303, 304, 317, 318, 320, 325, 331, 334, 356, 411, 412, 445], "despit": 180, "destin": [425, 426, 432, 433, 440], "destination_path": 457, "destrieux": [10, 24, 111, 115, 123, 126, 138, 149, 157, 187, 244, 252, 484], "destrieux_2009": 10, "destrieux_atla": [10, 23, 24], "destrieux_surfac": [10, 23, 24, 111], "det": [146, 157, 249], "detail": [2, 3, 7, 9, 10, 13, 15, 16, 17, 20, 23, 24, 27, 29, 30, 32, 34, 41, 48, 50, 52, 54, 56, 60, 62, 64, 71, 72, 73, 75, 82, 84, 92, 96, 101, 102, 104, 105, 109, 113, 117, 118, 120, 138, 143, 146, 155, 157, 158, 161, 162, 164, 165, 166, 167, 169, 170, 171, 172, 175, 181, 182, 183, 185, 187, 191, 203, 209, 212, 227, 230, 238, 242, 246, 247, 250, 259, 264, 268, 270, 286, 287, 288, 289, 290, 291, 296, 297, 298, 299, 303, 304, 311, 318, 321, 331, 336, 340, 348, 353, 354, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 382, 424, 441, 444, 445, 447, 449, 470, 471, 476, 477, 484, 485], "details": 50, "detect": [44, 68, 78, 80, 90, 101, 104, 108, 115, 158, 169, 174, 178, 185, 230, 359, 360, 444, 484], "determin": [63, 80, 95, 101, 102, 104, 109, 169, 171, 172, 198, 212, 232, 297, 302, 321, 332, 356, 374, 375, 376, 377, 378, 379, 382, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 425, 426, 428, 432, 433, 440, 444, 469], "determinist": [128, 154, 157, 178, 240, 242, 244, 246, 247, 249, 250, 252, 253, 254, 444], "detrend": [34, 42, 43, 51, 53, 54, 55, 56, 57, 58, 60, 63, 90, 92, 93, 95, 100, 101, 117, 122, 143, 151, 153, 157, 184, 185, 303, 304, 336, 342, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 418, 445, 447, 459, 460, 471], "detrended_data": 90, "detriment": [44, 360], "dev": [172, 181, 210, 262], "develop": [49, 57, 58, 86, 90, 92, 93, 115, 127, 141, 146, 157, 158, 159, 161, 163, 171, 172, 180, 181, 187, 209, 221, 228, 232, 253, 259, 418], "development_dataset": [53, 100], "development_fmri": [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 86, 90, 92, 93, 96, 100, 106], "developmental_fmri": [147, 157], "deviat": [53, 158, 296, 297, 298, 299, 301, 302], "devis": 171, "df": [72, 101, 109], "df_den": [307, 308, 310, 311, 312], "df_model": [305, 309], "df_num": [307, 308, 310, 311], "df_resid": [155, 157], "df_residu": 309, "dhrf": [322, 324, 328, 330], "di": 115, "diag": [65, 184, 422, 430], "diagnosi": [178, 180], "diagnost": [164, 168, 193], "diagon": [55, 56, 58, 60, 87, 136, 157, 171, 184, 230, 234, 236, 237, 350, 351, 413, 422, 430, 448], "diagram": [31, 174], "diamagnet": [174, 178], "diamet": 178, "diamond": 85, "dickerson": [115, 209], "dict": [107, 118, 126, 129, 157, 192, 194, 230, 231, 232, 241, 242, 243, 251, 273, 274, 275, 276, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 309, 314, 318, 321, 327, 331, 333, 336, 357, 358, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 418, 419, 428, 429, 436, 437, 441, 444, 445, 446, 447, 455, 457, 459, 463, 465], "dict_init": [50, 304], "dict_kei": 60, "dict_learn": [50, 52, 162], "dict_learning_onlin": 50, "dictionari": [7, 22, 34, 38, 48, 61, 67, 69, 102, 106, 113, 115, 118, 150, 157, 160, 164, 165, 178, 179, 185, 192, 201, 217, 218, 230, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 284, 296, 297, 298, 299, 303, 304, 318, 331, 333, 343, 344, 357, 358, 362, 366, 367, 382, 393, 395, 415, 416, 417, 418, 419, 428, 430, 431, 433, 438, 441, 447, 463, 464, 465, 486, 487], "dictionary_learning_resting_st": 50, "dictlearn": [50, 52, 125, 131, 141, 157, 162, 163], "dictlearning_components_img": 50, "did": [58, 93, 106, 137, 153, 157, 174], "didact": [3, 136, 157, 165, 167, 172], "didn": 172, "diego": [0, 115, 191, 270], "dieterich": [115, 209], "diff": [155, 157], "differ": [2, 7, 10, 16, 20, 21, 22, 24, 29, 30, 40, 47, 48, 53, 54, 56, 57, 60, 61, 65, 67, 68, 69, 70, 71, 72, 73, 76, 80, 81, 82, 90, 92, 95, 99, 100, 101, 103, 104, 105, 113, 115, 117, 124, 126, 127, 144, 150, 152, 157, 159, 160, 162, 163, 164, 166, 167, 168, 169, 171, 172, 173, 174, 175, 178, 182, 183, 191, 195, 201, 203, 210, 223, 230, 232, 245, 254, 259, 262, 286, 287, 288, 289, 290, 291, 296, 298, 299, 301, 302, 310, 311, 314, 318, 320, 321, 325, 327, 331, 337, 338, 341, 343, 347, 348, 349, 356, 359, 362, 363, 364, 366, 367, 368, 381, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 417, 419, 423, 425, 426, 430, 431, 432, 433, 438, 445, 447, 456, 457, 469, 471, 486, 487], "differenti": [40, 67, 71], "difficult": [40, 87, 158, 165, 170, 185], "difficulti": 35, "diffus": [115, 164, 178], "difumo": [22, 49, 150, 157, 187, 245], "difumo_atlas": [49, 471], "digicosm": 0, "digit": [115, 192], "dil_bin_p_values_and_vt": 95, "dil_bin_p_values_and_vt_img": 95, "dilat": [90, 95, 178, 184, 264, 287, 290, 374, 375, 376, 378, 379], "dillon": [143, 157], "dim": [3, 22, 24, 30, 49, 58, 92, 103, 134, 136, 140, 157, 164, 306, 308, 310, 311, 417, 431, 432, 433, 440], "dim_info": [58, 92, 103], "dimartino": [115, 219, 282], "dimens": [2, 16, 22, 30, 34, 35, 40, 42, 49, 51, 67, 88, 95, 117, 127, 151, 157, 168, 174, 178, 184, 185, 191, 230, 236, 237, 245, 251, 270, 277, 296, 297, 298, 299, 303, 304, 306, 308, 310, 311, 318, 333, 336, 337, 343, 344, 347, 348, 353, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 415, 418, 430, 431, 445, 447, 459, 487], "dimension": [6, 27, 51, 71, 95, 129, 133, 150, 155, 157, 171, 180, 193, 201, 236, 237, 245, 251, 270, 303, 304, 306, 337, 381, 444, 445, 446, 465], "dimitri": [0, 115, 124, 131, 143, 157, 162, 171, 172, 197, 231, 234, 268, 447], "dimitripapadopoulo": 172, "diogo": [0, 155, 157], "dir": [321, 356], "dirac": [318, 320, 325], "direct": [6, 16, 42, 53, 95, 99, 140, 149, 157, 159, 160, 172, 181, 185, 201, 226, 245, 282, 296, 297, 318, 331, 353, 355, 356, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 397, 399, 401, 402, 403, 405, 406, 407, 408, 409, 412, 413, 417, 419, 423, 425, 426, 429, 431, 432, 433, 448, 457, 484, 487], "directli": [3, 6, 33, 34, 40, 49, 50, 53, 69, 72, 87, 90, 111, 129, 135, 139, 141, 143, 157, 161, 164, 167, 172, 174, 183, 185, 273, 321, 382, 396, 431], "directori": [3, 6, 64, 72, 95, 102, 110, 113, 161, 172, 183, 231, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 292, 295, 296, 297, 298, 299, 301, 302, 303, 304, 318, 321, 331, 337, 356, 358, 359, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 427, 445, 446, 447], "disabl": [118, 126, 127, 144, 146, 150, 157, 171, 444], "disadvantag": 185, "discard": [6, 118, 174, 237, 273, 295, 321, 356, 376, 379, 459, 469], "discard_diagon": [230, 236], "discount": 67, "discourag": 172, "discov": [2, 172, 179], "discoveri": [6, 77, 78, 80, 82, 115, 174, 178, 180, 219, 282, 313], "discrep": [67, 171], "discret": [67, 71, 124, 150, 151, 157, 195, 318, 327, 346, 359, 363, 364, 365, 366, 367, 368, 369, 370, 459], "discrete_atlas_img": 12, "discrete_vers": 12, "discrimin": [3, 30, 32, 53, 95, 100, 115, 117, 164, 179, 180], "discriminant_analysi": 99, "discuss": [51, 58, 143, 157, 161, 164, 167, 169, 174, 177, 181, 184, 360, 382, 485], "diseas": 220, "disk": [2, 3, 4, 6, 102, 105, 109, 110, 117, 118, 124, 129, 143, 149, 150, 155, 157, 164, 172, 183, 184, 185, 213, 255, 265, 273, 275, 278, 296, 297, 318, 331, 373, 434, 436, 437, 455, 457, 461, 462, 466], "disord": [115, 178, 180, 209], "dispers": [6, 67, 68, 173, 308, 310, 311, 318, 320, 322, 325, 328], "displac": [58, 195, 259, 359], "displai": [2, 3, 4, 6, 11, 12, 14, 17, 18, 19, 21, 22, 26, 27, 31, 37, 41, 42, 44, 45, 49, 50, 51, 52, 53, 57, 63, 64, 66, 67, 68, 69, 70, 71, 72, 76, 81, 82, 85, 87, 88, 89, 90, 92, 93, 94, 95, 99, 100, 101, 104, 107, 108, 124, 127, 128, 129, 135, 140, 141, 143, 144, 146, 150, 151, 153, 155, 157, 159, 162, 163, 169, 174, 179, 184, 318, 325, 331, 364, 367, 369, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 447, 455, 457, 471, 487], "display_mod": [2, 6, 10, 14, 15, 16, 19, 31, 32, 37, 41, 42, 44, 45, 50, 51, 55, 60, 64, 66, 67, 70, 71, 76, 77, 80, 88, 89, 93, 102, 104, 107, 108, 109, 117, 136, 153, 157, 318, 331, 358, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 417, 419, 423, 425, 426, 429, 431, 432, 433, 457, 484], "displayed_map": [56, 364, 367, 447], "displayed_spher": [60, 369], "disregard": [297, 302], "dist": 181, "distanc": [34, 301, 302, 318, 331, 413, 456, 457, 469, 470], "distinct": [81, 101, 115, 171, 191, 244, 270], "distinguish": [53, 95, 99, 100, 165, 169, 174, 179, 183], "distort": [155, 157, 359], "distribut": [3, 6, 15, 16, 23, 32, 33, 39, 50, 51, 57, 80, 95, 99, 115, 150, 154, 157, 164, 169, 171, 174, 178, 199, 204, 205, 206, 207, 208, 210, 218, 252, 262, 306, 333, 382, 427], "dive": 180, "diverg": [15, 422], "divid": [57, 77, 78, 80, 136, 157, 165, 174, 178, 236, 445], "divis": [0, 92, 224], "dl": [115, 211, 263, 289], "dm_titl": 101, "dmn": [21, 53, 63, 470], "dmn_contrast": 63, "dmn_coord": [60, 185, 484], "dmn_network": 88, "dmn_node": 21, "dmn_z_map": 63, "dni": 216, "do": [0, 3, 6, 10, 23, 24, 25, 26, 31, 32, 34, 35, 38, 40, 42, 44, 51, 52, 53, 59, 63, 66, 67, 68, 70, 76, 78, 80, 81, 95, 99, 101, 102, 103, 110, 111, 117, 128, 130, 140, 144, 149, 153, 157, 158, 162, 163, 164, 165, 167, 169, 171, 180, 181, 183, 184, 185, 192, 230, 240, 264, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 327, 331, 333, 336, 348, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 377, 379, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 445, 459, 469, 484], "do_cca": 303, "doc": [2, 3, 4, 10, 11, 12, 15, 16, 17, 19, 21, 22, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 44, 45, 49, 50, 51, 52, 54, 56, 59, 60, 63, 65, 71, 72, 76, 78, 79, 80, 87, 88, 89, 93, 96, 99, 104, 105, 106, 107, 108, 111, 124, 125, 126, 127, 128, 129, 130, 131, 136, 138, 139, 143, 146, 148, 149, 152, 153, 154, 155, 157, 172, 209, 212], "dock": [0, 126, 127, 129, 136, 140, 142, 143, 144, 146, 147, 155, 157], "docstr": [124, 125, 129, 144, 149, 152, 155, 157, 172, 181, 308, 310, 311], "doctest": [126, 157], "doctre": 172, "document": [0, 2, 3, 4, 20, 27, 45, 46, 51, 52, 54, 55, 58, 60, 99, 101, 105, 109, 116, 117, 120, 122, 125, 127, 128, 131, 133, 135, 136, 137, 138, 143, 146, 148, 153, 154, 157, 159, 161, 162, 163, 164, 165, 166, 167, 169, 170, 176, 179, 180, 183, 185, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 484, 485], "doe": [3, 6, 30, 40, 51, 67, 68, 76, 104, 117, 118, 128, 133, 142, 146, 155, 157, 164, 165, 169, 171, 172, 173, 174, 180, 185, 240, 250, 262, 307, 309, 312, 321, 342, 354, 356, 358, 378, 386, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 444, 460, 484], "doesn": [105, 172], "dof": [174, 306, 315], "dofmax": 306, "dohmatob": [0, 51, 115, 119, 122, 131, 133, 136, 157, 161, 162, 170, 447], "doi": [0, 3, 23, 32, 33, 38, 39, 42, 43, 46, 50, 51, 53, 58, 60, 71, 77, 99, 100, 104, 115, 118, 158, 159, 161, 163, 165, 166, 169, 170, 178, 180, 190, 191, 192, 194, 195, 197, 198, 199, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 228, 229, 230, 238, 240, 241, 242, 243, 244, 245, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 260, 262, 263, 268, 270, 271, 272, 273, 275, 277, 278, 281, 282, 289, 298, 299, 303, 304, 313, 333, 336, 359, 360, 382, 418, 446, 452, 459, 460], "domain": [40, 180, 304], "domin": [164, 282], "don": [10, 25, 34, 67, 82, 118, 127, 157, 172, 180, 181, 273, 275, 428, 469, 484], "donald": 115, "donder": 0, "done": [3, 6, 7, 35, 36, 37, 38, 40, 43, 44, 45, 46, 49, 50, 51, 53, 55, 59, 60, 67, 72, 73, 95, 99, 104, 105, 107, 117, 118, 153, 155, 157, 158, 159, 161, 164, 165, 167, 169, 171, 174, 181, 184, 231, 232, 296, 297, 298, 299, 301, 302, 303, 304, 318, 331, 336, 337, 345, 355, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 445, 446, 447, 459], "dor": 53, "dorsal": [24, 111, 434, 436, 437, 471], "dorsalattent": 258, "dosenbach": [115, 134, 157, 187, 224, 238, 256, 258], "dot": [43, 46, 57, 101, 105, 171, 308, 309, 310, 311, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410], "doubl": [172, 173, 246, 247], "dougla": [115, 310, 311], "down": [2, 70, 105, 161, 171, 172, 298], "download": [4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 115, 116, 133, 134, 136, 137, 139, 143, 146, 149, 150, 152, 157, 158, 159, 161, 164, 172, 180, 187, 191, 200, 201, 213, 216, 217, 219, 224, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 292, 295, 487], "download_new": [273, 275], "downloaded_fil": [213, 255, 265, 278], "downsampl": [110, 162, 184, 200, 259, 418], "downsid": [58, 67], "downsiz": 161, "downstream": [103, 126, 157], "dparsf": 238, "dpi": [384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410], "dr": 220, "draft": 172, "drag": 181, "draw": [15, 16, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 421, 469], "draw_2d": [383, 385, 386], "draw_cross": [387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 423, 426, 431, 432, 433, 440], "draw_left_right": [383, 385, 386], "draw_posit": [383, 385, 386], "draw_scale_bar": [383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410], "drawback": 67, "drawn": [25, 67, 95, 318, 331, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 423, 426, 431, 432, 433, 440, 457, 469], "drf": 68, "drift": [6, 69, 70, 71, 101, 195, 318, 325, 359, 422, 459], "drift_model": [6, 34, 65, 67, 70, 71, 173, 318, 321, 325, 470], "drift_ord": [34, 65, 67, 173, 318, 321, 325, 470], "drive": 57, "driven": [67, 163, 172, 180, 195, 242, 325], "drop": [67, 70, 101, 129, 138, 139, 140, 144, 157, 172, 180, 181], "ds000005": 215, "ds000030": [64, 260], "ds000030_r1": [64, 278], "ds000228": [200, 259], "dsm_iv_tr": 238, "dsp": 203, "dsp_minus_ssp": [72, 470], "dsp_minus_ssp_for_dst": [72, 470], "dsst": 0, "dst": 203, "dst_minus_sst": [72, 470], "dst_minus_sst_for_dsp": [72, 470], "dstdsp": 203, "dstdsp_minus_sstssp": [72, 470], "dstssp": 203, "dt": 68, "dtseri": [359, 360], "dtype": [3, 12, 21, 34, 37, 42, 43, 46, 51, 54, 55, 56, 58, 60, 68, 78, 80, 87, 90, 92, 93, 95, 102, 105, 137, 138, 139, 143, 144, 157, 183, 319, 322, 323, 324, 328, 329, 330, 335, 337, 345, 346, 349, 351, 363, 364, 365, 366, 367, 368, 369, 373, 444, 446, 453, 471], "dtyulman": [143, 157], "dua": 220, "dual": [35, 53, 55, 99, 100, 115, 171, 231, 238, 296, 298], "dual_regress": 238, "dualiti": 234, "duan": [115, 219, 282], "dubi": [60, 115, 202, 256], "dubnica": 0, "duchi": [115, 171], "due": [12, 15, 35, 37, 41, 67, 71, 80, 87, 95, 124, 128, 146, 152, 153, 154, 155, 157, 161, 165, 167, 172, 174, 238, 301, 302, 484], "duff": [115, 191, 270], "dugr\u00e9": [0, 126, 157], "duke": 0, "dummi": [3, 100, 111, 151, 157, 164, 165, 167, 172, 296, 297, 298, 299, 325], "dummy_classifi": [3, 33, 296, 298], "dummy_decod": 3, "dummy_output_": [296, 297, 298, 299], "dummy_regressor": [165, 297, 299], "dummyclassifi": [99, 100, 151, 157, 167, 296, 297, 298, 299], "dummyregressor": [296, 297, 298, 299], "duplic": [146, 157, 196], "dupr": [0, 140, 144, 146, 147, 148, 157], "duran": [0, 124, 157], "durat": [6, 34, 65, 67, 68, 73, 126, 157, 173, 174, 183, 320, 325, 424], "dure": [3, 6, 57, 58, 66, 95, 101, 102, 115, 117, 127, 143, 150, 157, 164, 165, 171, 172, 174, 178, 180, 181, 185, 213, 214, 225, 232, 234, 238, 251, 331, 333, 374, 375, 376, 378, 379, 428, 444], "dutch": 0, "dvar": [58, 359], "dvipng": 181, "dviwar": 181, "dwi": 64, "dwindl": 171, "dx_group": 238, "dylan": [38, 115, 169, 219, 282], "dynam": [30, 115, 164, 360], "e": [3, 6, 16, 23, 25, 30, 41, 42, 46, 49, 50, 58, 60, 67, 77, 89, 93, 95, 101, 104, 105, 107, 115, 117, 118, 125, 131, 149, 151, 152, 155, 157, 158, 159, 162, 164, 167, 169, 170, 171, 172, 173, 174, 177, 178, 180, 181, 184, 185, 191, 195, 198, 199, 201, 202, 209, 218, 222, 224, 225, 230, 231, 232, 234, 243, 244, 251, 256, 257, 258, 260, 270, 273, 275, 278, 296, 297, 298, 299, 300, 301, 302, 303, 304, 308, 310, 311, 318, 325, 331, 333, 334, 335, 336, 337, 338, 340, 355, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 382, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 419, 428, 431, 434, 435, 436, 437, 439, 440, 441, 443, 444, 445, 446, 447, 450, 451, 453, 459, 469, 484], "e29482": [115, 180], "e_i": [310, 311], "each": [2, 3, 6, 7, 15, 16, 19, 21, 22, 23, 24, 25, 30, 31, 35, 37, 38, 40, 41, 42, 44, 45, 49, 50, 51, 52, 53, 57, 58, 60, 63, 64, 65, 70, 71, 72, 79, 81, 87, 88, 89, 95, 99, 100, 101, 102, 104, 107, 108, 110, 111, 118, 138, 143, 144, 146, 149, 151, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 169, 171, 172, 173, 174, 176, 178, 180, 181, 183, 184, 185, 191, 192, 195, 197, 200, 201, 209, 212, 215, 218, 223, 224, 226, 230, 231, 232, 234, 238, 241, 252, 258, 259, 270, 273, 275, 282, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 308, 310, 311, 318, 320, 321, 325, 331, 333, 336, 342, 348, 353, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 377, 379, 382, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 417, 419, 423, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 444, 445, 446, 447, 448, 449, 450, 451, 453, 457, 459, 460, 461, 468, 469, 484], "each_index_of_map3": [52, 162], "earli": [41, 115, 170, 273, 275, 444], "earlier": [2, 16, 19, 31, 37, 42, 44, 45, 50, 88, 104, 108], "early_stop": [171, 232], "earlystopprob": 171, "eas": 172, "easi": [17, 63, 69, 76, 95, 117, 118, 162, 163, 165, 168, 172, 173, 178, 180, 185, 359, 487], "easier": [6, 24, 40, 67, 132, 137, 152, 157, 163, 164, 171, 172, 426], "easiest": [159, 164, 165], "easili": [2, 3, 10, 16, 24, 31, 32, 40, 41, 51, 60, 64, 95, 117, 118, 129, 153, 157, 164, 165, 167, 169, 170, 171, 172, 173, 178, 181, 246, 247, 268, 331, 333], "ec": 51, "eccentr": [446, 452], "echo": [178, 321], "econom": [115, 382], "econometr": [115, 305, 309, 310, 311], "econometricanalysi": [115, 305, 309], "ecosystem": 179, "ed": [115, 159, 310, 311], "edg": [16, 49, 54, 56, 60, 95, 146, 157, 158, 159, 178, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 419, 430, 439, 487], "edge_cmap": [144, 146, 157, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419, 439], "edge_kwarg": [387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419], "edge_threshold": [23, 49, 52, 55, 56, 60, 144, 146, 157, 162, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419, 439, 484], "edge_vmax": [55, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419], "edge_vmin": [55, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419], "edgecolor": [33, 42, 126, 157, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 419, 423, 425, 426, 429, 431, 432, 433], "edinburgh": 115, "edit": [115, 151, 157, 172, 181, 305, 309], "editor": [115, 158, 211, 230, 263], "edmond": [0, 151, 157], "edu": [115, 220, 224, 229, 254, 277, 305, 309], "educ": [6, 115, 226, 270, 277, 305, 309, 440], "edward": [115, 180], "eeg": 178, "eff_map": 6, "effect": [51, 55, 63, 67, 69, 70, 71, 76, 80, 81, 90, 96, 101, 104, 115, 126, 127, 142, 157, 163, 165, 169, 171, 173, 174, 185, 209, 230, 231, 232, 246, 247, 274, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 310, 311, 312, 314, 315, 318, 321, 331, 333, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 382, 417, 431, 432, 433, 438, 440, 444, 445, 446, 447, 455], "effect_s": [6, 72, 81, 101, 178, 306, 318, 331], "effect_statmap": [64, 76, 358], "effect_vari": [72, 81, 306, 318, 331], "effects_map_path": [331, 333], "effects_of_interest": [71, 72, 470], "effficieni": 65, "efficaci": [58, 115, 360], "effici": [30, 67, 115, 126, 157, 163, 165, 171, 172, 231, 234, 273, 298, 299], "effort": [172, 181], "eg": [87, 90, 140, 143, 149, 157, 158, 159, 164, 184, 185, 414, 415, 455], "eger": [46, 51, 115, 170], "eichel": [115, 194, 241], "eickenberg": [0, 115, 119, 157, 170], "eickhoff": [58, 115, 223, 225, 250, 251, 359, 360], "eigen": [27, 191, 270], "eigen_regress": [27, 270], "eigenvector": 238, "eigenvector_binar": 238, "eigenvector_weight": 238, "eileen": [115, 209], "either": [2, 4, 10, 33, 36, 37, 41, 42, 43, 44, 49, 53, 54, 55, 56, 57, 58, 60, 63, 70, 90, 92, 93, 95, 99, 100, 101, 104, 105, 106, 107, 108, 117, 143, 150, 152, 157, 159, 161, 172, 173, 177, 178, 183, 185, 195, 249, 250, 251, 254, 262, 296, 297, 298, 299, 308, 310, 311, 318, 331, 334, 335, 368, 370, 371, 372, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 417, 418, 419, 422, 423, 424, 425, 428, 430, 431, 432, 433, 434, 435, 436, 437, 440, 441, 443, 445, 447, 457, 467, 468, 469, 484, 485], "ej": [115, 191, 270], "ekman": [0, 119, 157], "elabor": [43, 131, 157, 484], "elaps": [36, 37, 38, 44, 45, 46, 50, 55, 59, 60, 99, 104, 107], "elapsed_tim": 46, "elast": 46, "elasticnetcv": 46, "electr": 178, "electroencephalographi": 178, "electrophysiolog": [71, 115], "element": [21, 50, 51, 52, 103, 136, 155, 157, 163, 169, 178, 230, 236, 237, 240, 296, 297, 298, 299, 300, 336, 353, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 378, 396, 428, 447, 453, 459, 469], "elementari": 117, "elena": [115, 194, 241], "elev": [23, 396, 434, 436, 437], "elicit": [65, 73, 80], "elif": 10, "elimin": [46, 99, 167, 170, 431, 432], "elizabeth": [0, 115, 140, 144, 146, 147, 148, 157, 310, 311], "ell": [305, 309], "ell_": [115, 171], "elli": [0, 155, 157], "elliott": [38, 58, 115, 359, 360], "els": [10, 46, 49, 68, 73, 95, 101, 271, 296, 297, 298, 299, 301, 302, 435], "elvi": [0, 51, 115, 119, 122, 131, 133, 136, 157, 161, 162, 170, 447], "emb": 484, "embed": [53, 100, 455], "emerg": 172, "emerton": 0, "emiliano": [115, 195], "emit": 438, "emma": [115, 191, 270], "emot": 178, "emp_cov": 234, "emphas": [198, 243], "empir": [51, 161, 168, 169, 170, 171, 231, 234, 360, 487], "emploi": [64, 177, 178, 210, 456, 457], "empti": [15, 104, 110, 118, 126, 128, 129, 146, 154, 157, 172, 181, 192, 246, 247, 262, 296, 297, 298, 299, 356, 366, 367, 416, 430, 450, 451, 463, 464], "empty_filt": 273, "en": [0, 58, 174, 192, 216, 240, 360, 363], "enabl": [15, 80, 106, 126, 127, 149, 153, 157, 164, 167, 179, 185, 359, 387, 388, 389, 390, 391, 392, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 485], "enable_metadata_rout": [230, 231, 232, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 444, 445, 446, 447], "encapsul": [67, 230, 231, 232, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 444, 445, 446, 447], "enclos": 172, "encod": [29, 40, 43, 47, 71, 76, 85, 113, 115, 165, 166, 185, 272, 298, 299, 338, 355, 362, 365, 368, 410, 433, 471, 486], "encompass": 237, "encount": [60, 78, 80, 111, 434, 436, 437], "encourag": [153, 157, 172], "end": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 127, 140, 150, 157, 169, 171, 172, 184, 195, 283, 357, 358, 458, 459], "endian": [58, 92, 103, 139, 157, 345, 351], "endswith": 13, "energi": [171, 195], "enet_cv": 46, "enforc": [51, 90, 155, 157, 158, 171, 172, 301, 302, 318], "engag": 485, "engemann": [115, 164], "engin": [0, 10, 126, 128, 153, 157, 180, 185, 396, 434, 436, 437, 484, 485], "enh": 172, "enhanc": [24, 67, 68, 72, 115, 178, 181, 187, 282, 292, 306, 333, 382], "enough": [15, 60, 164, 171, 180, 185, 351], "ensembl": [3, 32, 41, 44, 115, 164, 165, 168, 170, 178, 179, 211, 298, 299, 487], "ensur": [2, 16, 19, 31, 37, 42, 44, 45, 50, 58, 60, 88, 101, 104, 108, 111, 128, 130, 143, 150, 157, 169, 171, 172, 174, 181, 278, 306, 331, 333, 366, 383, 385, 386, 450], "ensure_finit": [138, 157, 336, 373, 376, 459], "ensure_ndim": 337, "enter": 174, "entir": [164, 169, 185, 366, 450], "entiti": [126, 157], "entri": [85, 124, 126, 157, 172, 181, 296, 297, 298, 299, 308, 310, 311, 340, 396, 435, 469], "enumer": [3, 13, 23, 24, 35, 42, 49, 50, 53, 59, 66, 67, 68, 69, 71, 72, 73, 80, 95, 101, 102, 104, 105, 107], "env": 181, "environ": [37, 51, 54, 55, 60, 64, 76, 78, 115, 127, 143, 144, 146, 153, 157, 164, 180, 181, 183, 195, 283, 440, 485], "ep": [41, 301, 302], "epi": [3, 6, 12, 16, 26, 31, 32, 93, 95, 96, 106, 178, 180, 184, 185, 226, 296, 297, 298, 299, 303, 304, 365, 368, 376, 423, 426, 433, 445, 471, 484], "epi_filenam": [90, 185], "epi_img": [66, 67, 69, 90, 185, 214, 269, 376, 379, 423], "epoch": [67, 304], "equal": [78, 99, 105, 146, 153, 155, 157, 167, 176, 195, 243, 248, 249, 250, 254, 296, 297, 298, 299, 301, 302, 306, 331, 348, 351, 355, 374, 376, 377, 379, 440, 441, 443, 445], "equip": [6, 226], "equival": [15, 82, 107, 124, 157, 169, 171, 174, 181, 198, 268, 296, 297, 298, 299, 303, 304, 347, 363, 364, 365, 366, 367, 368, 370, 374, 375, 376, 378, 379, 438, 445], "erhardt": [115, 194, 241], "eric": [0, 23, 60, 115, 128, 140, 143, 144, 146, 157, 199, 202, 244, 252, 256], "erik": [115, 194, 241], "erin": [115, 190, 238], "eros": [90, 178, 264, 287, 290, 374, 375, 376, 378, 379], "erramuzp": [143, 157], "errant": [128, 157], "erron": [149, 157, 250], "error": [3, 6, 44, 45, 67, 77, 80, 82, 85, 95, 105, 124, 126, 129, 130, 133, 140, 143, 146, 155, 157, 159, 164, 165, 169, 172, 174, 178, 230, 231, 232, 296, 297, 298, 299, 300, 301, 302, 303, 304, 308, 310, 318, 325, 331, 333, 334, 336, 337, 358, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 378, 444, 445, 446, 447, 485], "errorts_statmap": [64, 76, 358], "especi": [95, 144, 153, 157, 158, 164, 183, 441, 487], "esposito": [101, 115], "essen": [115, 118, 191, 218, 270, 273, 275, 360], "essenc": 173, "essenti": [16, 40, 68, 81, 178], "establish": [95, 170, 172, 224], "esteban": [0, 143, 157], "estim": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 65, 66, 68, 70, 71, 72, 73, 76, 79, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117, 124, 126, 127, 141, 149, 150, 155, 157, 158, 163, 166, 168, 169, 174, 176, 177, 178, 180, 181, 191, 195, 223, 229, 230, 231, 232, 234, 250, 254, 270, 277, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 314, 315, 318, 331, 333, 337, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 378, 379, 382, 430, 438, 444, 445, 446, 447, 478, 486, 487], "estimator_nam": 40, "est\u00e8v": [0, 119, 120, 122, 123, 131, 133, 136, 157], "eswar": [115, 194, 241], "et": [3, 23, 29, 32, 38, 40, 46, 47, 50, 51, 53, 58, 60, 67, 71, 72, 73, 77, 99, 100, 101, 104, 113, 138, 143, 157, 158, 161, 164, 165, 166, 169, 170, 171, 180, 185, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 234, 238, 240, 241, 242, 243, 244, 245, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 262, 263, 268, 270, 271, 272, 273, 275, 277, 281, 282, 289, 296, 299, 302, 303, 304, 310, 311, 313, 336, 338, 343, 355, 359, 360, 362, 365, 368, 382, 410, 433, 438, 446, 447, 452, 459, 471, 486], "etard": [115, 192, 240], "etc": [7, 40, 44, 45, 81, 90, 93, 95, 103, 118, 170, 178, 183, 270, 296, 297, 298, 299, 301, 302, 310, 368, 471], "ethic": 191, "etzel": [115, 169], "eugen": [115, 191, 270], "eva": [115, 219, 282], "eval": [318, 331, 333, 420], "evalu": [6, 58, 115, 167, 171, 178, 198, 226, 228, 253, 296, 297, 298, 299, 305, 309, 360, 456, 457], "evan": [0, 115, 151, 157, 192, 195, 211, 223, 228, 242, 250, 253, 263, 289], "evanston": 0, "evelina": [115, 199, 244], "evelyn": [46, 51, 115, 170], "even": [32, 44, 51, 52, 60, 66, 80, 101, 118, 126, 129, 130, 146, 151, 157, 171, 172, 180, 273, 275, 458], "evenli": [171, 336, 459], "event": [6, 40, 62, 64, 65, 66, 67, 68, 69, 70, 71, 74, 101, 102, 110, 113, 115, 126, 129, 130, 149, 150, 157, 164, 174, 175, 214, 226, 269, 279, 318, 319, 320, 321, 325, 421, 424, 438, 485, 486, 487], "events_": 34, "events_df": 101, "events_fil": [66, 67], "eventu": [57, 484], "everi": [118, 158, 159, 163, 164, 165, 169, 171, 172, 174, 181, 185, 232, 246, 247, 273, 364, 367, 396, 417, 423, 426, 431, 432, 433, 435, 450, 451, 457, 485], "everyon": [172, 191], "everyth": [101, 181], "everywher": 170, "evid": [115, 195], "ew": [115, 194, 241], "ex": [153, 157, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 423, 425, 426, 428, 432, 433, 434, 436, 437], "exact": [44, 169, 172, 174, 263, 264, 484], "exactli": [6, 85, 95, 99, 127, 157, 171, 172, 296, 297, 298, 299, 300, 356, 440, 469], "examin": [3, 115, 178, 260, 278], "exampl": [1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 70, 71, 73, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 111, 112, 114, 116, 117, 125, 126, 127, 128, 131, 136, 137, 138, 139, 140, 143, 144, 146, 148, 149, 152, 153, 154, 162, 165, 166, 167, 168, 171, 172, 173, 174, 176, 177, 181, 183, 192, 227, 238, 255, 301, 308, 310, 311, 327, 335, 356, 371, 444, 446, 473, 474, 476, 481, 485, 486, 487], "exce": [60, 232], "exceed": [58, 140, 157], "excel": 35, "except": [5, 24, 40, 51, 73, 100, 101, 105, 150, 153, 157, 170, 172, 192, 297, 302, 346, 382], "excerpt": 185, "excess": [195, 359], "exchang": [104, 106, 190, 238], "exclud": [67, 118, 448], "exclude_this_vertex": 24, "exclude_zero": [129, 157, 376, 379], "excluded_label": 24, "exclus": [295, 301, 302], "exclusion_filt": [64, 295], "exclusion_pattern": 64, "exec": 181, "execut": [8, 22, 28, 47, 61, 74, 83, 88, 97, 112, 113, 114, 172, 185, 351, 434, 436, 437, 484, 485, 486], "exemplarili": 57, "exercis": [4, 180], "exhaust": [172, 180], "exhibit": [50, 174, 185], "exist": [4, 21, 50, 104, 162, 169, 172, 184, 224, 230, 231, 232, 273, 275, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 345, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 430, 444, 445, 446, 447, 484], "exist_ok": [3, 4, 6, 7, 16, 24, 30, 34, 43, 50, 51, 57, 63, 64, 72, 73, 76, 87, 95], "existenti": 7, "exp": 46, "exp_condit": [68, 320], "expand": [130, 135, 157, 178, 183, 346, 444, 446], "expans": [182, 487], "expect": [3, 6, 30, 31, 33, 34, 35, 36, 37, 40, 63, 65, 67, 79, 80, 82, 96, 99, 102, 107, 108, 118, 131, 146, 155, 157, 162, 169, 172, 174, 178, 181, 184, 185, 297, 302, 318, 320, 325, 331, 333, 337, 356], "expens": 45, "experi": [3, 6, 30, 34, 35, 43, 67, 70, 72, 95, 115, 116, 168, 173, 174, 178, 203, 226, 487], "experiment": [3, 65, 66, 67, 69, 71, 72, 81, 95, 124, 126, 129, 149, 150, 153, 157, 164, 171, 174, 184, 201, 203, 227, 245, 318, 321, 325, 434, 436, 437], "experimental_paradigm": [126, 157], "expert": [172, 180], "explain": [6, 7, 42, 44, 50, 58, 67, 70, 130, 149, 157, 161, 164, 172, 174, 180, 185, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469], "explan": [35, 85, 104, 164, 165, 166, 167, 172, 183, 185, 193, 239], "explanatori": [333, 382], "explicit": [12, 50, 73, 146, 152, 157, 172, 178, 180, 275, 334, 360, 370, 371, 372, 459], "explicitli": [67, 103, 109, 127, 129, 143, 155, 157, 164, 172, 273, 358, 360, 445], "exploit": [64, 163, 171], "explor": [6, 163, 167, 171, 173, 179, 180, 226, 232, 260, 273, 296, 297, 298, 299], "exploratori": 67, "export": [73, 181, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 431, 432, 433, 434, 435, 436, 437], "expos": [46, 51, 118, 126, 127, 135, 139, 140, 157, 172, 183, 273, 274, 275, 276], "express": [118, 124, 131, 157, 178, 183, 273, 301, 302, 316, 318, 321, 346, 431], "ext_var": [44, 45, 76, 78, 80, 107, 220, 277], "extend": [23, 95, 126, 129, 149, 154, 157, 174, 185, 224, 351], "extens": [16, 138, 152, 157, 190, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 431, 432, 433, 434, 435, 436, 437], "extent": [58, 92, 96, 103, 178, 395, 398], "extern": [165, 168, 277], "extmath": 50, "extra": [79, 118, 166, 181, 182, 238, 358, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 422, 423, 424, 425, 426, 430, 431, 432, 433, 435, 465, 484, 487], "extra_info_subject": 79, "extract": [6, 23, 29, 31, 33, 40, 42, 45, 47, 48, 50, 51, 61, 62, 64, 73, 74, 84, 87, 93, 95, 97, 99, 101, 102, 106, 111, 113, 118, 123, 124, 125, 127, 129, 130, 131, 138, 139, 141, 142, 143, 144, 150, 154, 155, 157, 160, 161, 164, 167, 175, 178, 180, 181, 182, 191, 194, 201, 230, 239, 245, 246, 248, 251, 256, 257, 259, 262, 270, 274, 277, 296, 297, 298, 299, 300, 303, 304, 318, 325, 331, 332, 333, 342, 343, 345, 348, 355, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 377, 379, 395, 414, 415, 416, 417, 419, 429, 430, 431, 433, 438, 439, 441, 445, 447, 448, 449, 450, 451, 453, 455, 457, 460, 469, 470, 471, 480, 484, 486, 487], "extract_typ": 449, "extractor": [52, 88, 162, 447], "extrapol": [127, 157, 351, 459], "extrem": [57, 122, 157, 456], "extremum": 192, "ey": [25, 43, 46, 66, 67, 69, 71, 72, 81, 85, 90, 115, 172, 180, 211, 263], "eye_mask": [211, 263], "ez": 238, "f": [2, 3, 4, 7, 10, 11, 12, 16, 17, 19, 22, 23, 24, 26, 30, 31, 32, 33, 34, 35, 36, 38, 40, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 67, 71, 72, 73, 76, 78, 79, 80, 81, 82, 86, 87, 89, 90, 92, 93, 94, 95, 96, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 126, 127, 157, 158, 162, 164, 167, 169, 170, 173, 191, 192, 202, 211, 224, 225, 240, 251, 256, 258, 260, 263, 270, 278, 296, 297, 298, 299, 306, 307, 308, 310, 311, 314, 318, 319, 331, 351, 352, 358, 359, 360, 373, 381, 450, 453], "f1": [43, 164, 296, 298], "f1_score": 43, "f1_score_to_print": 43, "f_classif": [36, 37, 40, 43, 95, 99, 167], "f_re": [308, 310, 311], "f_regress": [46, 104, 107, 108, 111], "f_score": [37, 168, 487], "f_score_img": 37, "fa": 164, "fabian": [0, 115, 119, 157, 217, 248], "face": [7, 19, 23, 24, 29, 33, 34, 39, 40, 47, 71, 95, 98, 99, 101, 112, 113, 115, 117, 125, 127, 138, 151, 157, 164, 169, 173, 178, 179, 183, 184, 185, 210, 211, 227, 262, 263, 280, 296, 298, 300, 341, 343, 346, 348, 349, 362, 368, 382, 396, 410, 426, 430, 433, 434, 435, 436, 437, 438, 440, 443, 461, 462, 466, 468, 469, 486], "face_mask": [211, 263], "facebook": 0, "facecolor": [19, 33, 42, 44, 108, 126, 157, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 419, 423, 425, 426, 429, 431, 432, 433], "facilit": [126, 129, 157, 180, 181, 185, 201], "fact": [171, 174, 178], "factor": [68, 70, 101, 106, 115, 140, 157, 166, 178, 195, 201, 203, 308, 310, 311, 320, 322, 323, 324, 325, 328, 329, 330, 334, 417, 431, 432, 433, 440], "faculti": 0, "fail": [35, 105, 124, 125, 127, 129, 146, 155, 157, 171, 172, 273, 275, 447], "failur": [105, 138, 157, 172, 376], "fair": [0, 60, 115, 163, 202, 256], "fairli": [46, 165, 174], "fake": 172, "falff": 238, "fall": [155, 157, 172, 428, 469], "fals": [2, 6, 10, 15, 16, 18, 19, 21, 22, 23, 24, 34, 35, 37, 38, 42, 43, 44, 45, 49, 50, 51, 52, 54, 56, 58, 59, 60, 64, 70, 73, 76, 77, 78, 80, 81, 82, 87, 88, 89, 90, 92, 93, 95, 100, 101, 102, 104, 105, 107, 108, 110, 111, 118, 126, 146, 149, 150, 151, 153, 155, 157, 162, 169, 173, 174, 178, 185, 230, 231, 232, 234, 236, 238, 244, 245, 246, 247, 256, 257, 258, 259, 262, 268, 271, 273, 275, 277, 296, 297, 298, 299, 300, 301, 302, 303, 304, 315, 318, 321, 331, 333, 334, 335, 336, 337, 340, 348, 349, 350, 351, 352, 355, 356, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 378, 379, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 417, 419, 420, 423, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 453, 454, 456, 457, 458, 459, 470, 471, 484], "famili": [6, 82, 104, 124, 125, 140, 155, 157, 169, 172, 178, 333, 382, 447, 449], "familiar": [67, 172, 180], "fanci": 99, "far": [67, 171, 351, 357], "faraon": [115, 209], "farther": 396, "fashion": [195, 211], "fast": [3, 32, 41, 50, 51, 66, 67, 73, 101, 115, 146, 149, 157, 161, 163, 164, 165, 168, 171, 172, 178, 179, 197, 214, 268, 275, 298, 299, 304, 353, 445, 446, 452, 487], "fast_abs_percentil": [131, 157], "fast_ica": 105, "fast_svd": [138, 157], "faster": [40, 50, 51, 106, 140, 157, 170, 171, 172, 273, 304, 351, 352, 425, 426, 432, 433, 440, 469], "fastest": 171, "fastica": [93, 105, 106, 303], "faulti": [146, 157], "favor": [155, 157], "fc": 19, "fcon_1000": [193, 219, 239, 282], "fcontrast": [308, 310, 311], "fcontrastresult": [308, 310, 311], "fd_threshold": [58, 127, 157, 359, 360], "fdr": [6, 76, 78, 82, 177, 178, 317, 318, 331, 334, 457, 470], "feasibl": 171, "feat": [64, 176], "featur": [30, 33, 34, 35, 36, 44, 46, 51, 53, 65, 67, 95, 100, 105, 106, 111, 115, 117, 129, 141, 143, 144, 149, 153, 165, 166, 167, 168, 169, 170, 171, 172, 180, 181, 185, 231, 232, 234, 296, 297, 298, 299, 300, 301, 302, 303, 306, 381, 444, 446, 447, 449, 459, 460, 471, 481, 482, 485, 487], "feature_select": [36, 37, 40, 43, 44, 46, 95, 99, 104, 107, 108, 111, 167], "feature_selector": 40, "februari": [46, 115, 119, 120, 125, 133, 134, 138, 148, 157, 170, 180], "feczko": [60, 115, 202, 256], "federico": [115, 195], "feedback": [143, 157, 172, 181], "feel": [143, 157, 172], "feldstein": [115, 194, 241], "femal": [209, 238], "fenna": [115, 223, 229, 250, 254], "fetch": [3, 4, 10, 15, 20, 25, 30, 31, 33, 35, 36, 37, 38, 40, 43, 60, 69, 71, 86, 87, 88, 89, 92, 95, 103, 105, 118, 125, 127, 129, 137, 138, 140, 142, 146, 157, 160, 163, 172, 182, 191, 238, 240, 245, 251, 259, 260, 263, 266, 267, 268, 271, 273, 274, 275, 276, 277, 279, 281, 284, 285, 292, 487], "fetch_abide_pcp": [127, 154, 157, 190], "fetch_adhd": [12, 63, 103, 133, 157, 193], "fetch_atlas_a": [129, 135, 154, 157, 192], "fetch_atlas_allen_2011": [22, 138, 157, 194], "fetch_atlas_basc_multiscale_2015": [20, 125, 126, 134, 157, 195], "fetch_atlas_craddock_2012": [125, 126, 157, 159, 198], "fetch_atlas_destrieux_2009": [10, 159, 199], "fetch_atlas_difumo": [22, 49, 150, 157, 201], "fetch_atlas_harvard_oxford": [11, 22, 58, 92, 133, 154, 157, 159, 172, 209, 247, 448], "fetch_atlas_juelich": [11, 152, 154, 157, 212, 246], "fetch_atlas_msdl": [21, 22, 53, 54, 55, 56, 100, 135, 157, 159, 217], "fetch_atlas_pauli_2017": [22, 143, 146, 157, 221], "fetch_atlas_schaefer_2018": [144, 146, 157, 223], "fetch_atlas_smith_2009": [2, 22, 88, 125, 126, 157, 225], "fetch_atlas_surf_destrieux": [10, 23, 24, 111, 126, 138, 157, 484], "fetch_atlas_talairach": [140, 157, 228], "fetch_atlas_yeo_2011": [49, 87, 159, 229], "fetch_bids_langloc_dataset": [127, 157], "fetch_cobr": [134, 138, 149, 153, 157], "fetch_coords_dosenbach_2010": [60, 134, 137, 157, 202], "fetch_coords_power_2011": [60, 222], "fetch_coords_seitzman_2018": [144, 157, 224], "fetch_development_fmri": [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 86, 90, 92, 93, 96, 100, 106, 146, 157, 158, 159, 161, 162, 180, 185, 200], "fetch_ds000030_url": [64, 155, 157, 278], "fetch_fiac_first_level": [72, 203], "fetch_fil": 172, "fetch_haxbi": [3, 4, 16, 17, 19, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 95, 99, 104, 117, 137, 157, 164, 172, 183, 210], "fetch_icbm152_2009": [12, 22, 76, 211, 264, 289], "fetch_icbm152_brain_gm_mask": [67, 76, 136, 157, 211, 263], "fetch_language_localizer_demo_dataset": [101, 102, 110, 127, 157, 173, 196, 213, 255], "fetch_localizer_button_task": [18, 129, 136, 157, 267, 268, 484], "fetch_localizer_calculation_task": [82, 108, 129, 157, 266, 268], "fetch_localizer_contrast": [77, 78, 80, 81, 107, 129, 136, 157, 197, 266, 267], "fetch_localizer_first_level": [66, 67, 69, 214], "fetch_megatrawls_netmat": [27, 191], "fetch_mixed_gambl": [41, 154, 157, 215], "fetch_miyawaki2008": [42, 43, 90, 216], "fetch_neurosynth_word": [105, 118, 273, 275], "fetch_neurovault": [105, 109, 118, 139, 146, 150, 157, 274, 275, 276], "fetch_neurovault_auditory_computation_task": [89, 143, 157, 276], "fetch_neurovault_id": [109, 118, 139, 157, 273, 274, 276], "fetch_neurovault_motor_task": [2, 15, 143, 157, 274, 484], "fetch_nyu_rest": [148, 151, 157], "fetch_oasis_vbm": [44, 45, 76, 220], "fetch_openneuro_dataset": 64, "fetch_openneuro_dataset_index": [155, 157], "fetch_spm_auditori": [6, 70, 226], "fetch_spm_multimodal_fmri": [71, 173, 227], "fetch_stimuli": [39, 262], "fetch_surf_fsaverag": [125, 143, 149, 151, 155, 157, 173, 204, 205, 206, 207, 208, 252, 428, 434, 435, 436, 437, 441, 469, 484], "fetch_surf_fsaverage5": [138, 143, 157], "fetch_surf_nki_enhanc": [138, 146, 157, 219], "fetcher": [31, 33, 126, 127, 133, 134, 135, 138, 143, 146, 147, 150, 152, 153, 154, 155, 157, 173, 238, 240, 244, 245, 255, 256, 257, 258, 259, 266, 267, 268, 277, 280], "few": [2, 15, 16, 26, 40, 41, 42, 51, 78, 82, 92, 103, 104, 141, 142, 157, 163, 165, 168, 170, 172, 173, 181, 184, 445, 469, 487], "fewer": [127, 157, 171, 418], "fh": [2, 16, 19], "fiac": [72, 187, 261, 481], "fiac_nilearn": 72, "field": [12, 46, 103, 118, 146, 157, 174, 178, 183, 273, 296, 297, 298, 299, 303, 304, 319, 321, 351, 356, 357, 365, 368, 445, 468], "fifth": [103, 115, 264, 305, 309], "fig": [10, 12, 19, 25, 39, 40, 42, 43, 44, 51, 59, 63, 65, 66, 68, 73, 76, 79, 80, 92, 101, 102, 107, 108, 111, 428, 434, 484], "fig1": 70, "fig2": 70, "fig_kwarg": 424, "fight": 185, "figshar": 242, "figsiz": [6, 12, 13, 16, 19, 26, 31, 35, 36, 40, 42, 44, 46, 50, 53, 59, 63, 64, 65, 66, 67, 68, 73, 76, 79, 80, 92, 95, 100, 101, 102, 107, 108, 111, 184, 430], "figur": [2, 4, 6, 10, 13, 15, 16, 19, 23, 24, 25, 26, 31, 33, 35, 36, 37, 42, 43, 44, 45, 46, 50, 51, 53, 54, 57, 58, 59, 60, 63, 64, 66, 67, 68, 70, 76, 80, 85, 92, 95, 100, 101, 102, 107, 108, 111, 126, 129, 140, 149, 150, 153, 154, 155, 157, 172, 173, 174, 184, 358, 368, 370, 371, 372, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 484], "fil": [6, 226, 227, 279, 280], "filbei": [115, 194, 241], "file": [3, 6, 7, 8, 10, 15, 23, 24, 28, 31, 33, 34, 35, 36, 37, 40, 42, 47, 49, 50, 51, 53, 55, 57, 61, 62, 63, 64, 67, 72, 74, 76, 83, 86, 87, 92, 93, 95, 97, 99, 101, 102, 110, 112, 113, 114, 115, 117, 118, 126, 129, 131, 133, 138, 142, 143, 144, 145, 146, 149, 153, 154, 155, 157, 158, 159, 161, 162, 164, 172, 173, 181, 182, 185, 192, 193, 194, 195, 200, 201, 203, 204, 205, 206, 207, 208, 210, 213, 214, 216, 217, 220, 221, 227, 229, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 292, 294, 296, 297, 303, 304, 318, 321, 325, 331, 336, 346, 347, 349, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 445, 447, 455, 457, 459, 461, 462, 465, 466, 467, 468, 469, 470, 471, 485, 486, 487], "file_basenam": 357, "file_field": 357, "file_list": 294, "file_nam": [39, 455], "file_path": [357, 461], "file_tag": [356, 357], "file_typ": [356, 357], "filemesh": [23, 24], "filenam": [2, 3, 4, 11, 16, 52, 57, 63, 95, 117, 127, 136, 146, 153, 154, 157, 159, 162, 163, 172, 183, 184, 246, 247, 278, 294, 296, 297, 298, 299, 301, 302, 346, 358, 362, 365, 368, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 431, 461, 462, 463, 464, 466], "filename_pattern": 172, "filesystem": [155, 157], "filippini": [115, 191, 225, 251, 270], "fill": [16, 22, 64, 68, 95, 102, 110, 138, 146, 152, 157, 171, 185, 195, 351, 352, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 431, 432, 455, 487], "fill_diagon": [56, 58], "fill_doc": [152, 157], "fill_valu": [351, 352], "fillard": [115, 158, 230], "filled_contour": [22, 52, 162, 431], "filter": [53, 57, 58, 60, 67, 68, 95, 105, 116, 117, 122, 124, 125, 143, 146, 151, 153, 155, 157, 164, 178, 182, 184, 238, 273, 275, 277, 295, 296, 297, 298, 299, 301, 302, 303, 304, 318, 321, 336, 353, 355, 356, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 445, 447, 458, 459, 487], "filtered_img": 353, "filtered_sign": 458, "filtfilt": 458, "final": [3, 4, 6, 15, 16, 31, 43, 50, 55, 57, 58, 59, 65, 69, 85, 94, 95, 101, 151, 157, 158, 165, 171, 172, 173, 180, 181, 184, 185, 195, 209, 232, 331, 356, 363, 364, 366, 367, 484], "find": [4, 31, 33, 46, 52, 58, 71, 80, 101, 122, 157, 162, 163, 164, 166, 168, 171, 172, 174, 178, 181, 185, 195, 218, 227, 234, 242, 338, 376, 377, 379, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 416, 417, 440, 444, 446, 452, 484, 485, 487], "find_cut_coord": [384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410], "find_cut_slic": [131, 138, 157], "find_parcellation_cut_coord": [49, 60, 143, 153, 157, 159, 415, 419], "find_probabilistic_atlas_cut_coord": [49, 52, 55, 143, 157, 159, 162, 414, 419], "find_xyz_cut_coord": [52, 88, 133, 140, 157, 162], "fine": [10, 90, 115, 137, 157, 159, 185, 201, 245, 300, 303, 304, 359, 365, 368, 445, 484], "finer": [10, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410], "finish": [36, 37, 38, 44, 45, 46, 50, 51, 55, 59, 60, 99, 104, 107, 126, 157, 171, 172, 335, 355, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419, 431, 439, 441, 443], "finit": [62, 74, 78, 80, 105, 113, 139, 157, 173, 178, 269, 318, 320, 325, 336, 353, 373, 376, 417, 420, 421, 432, 433, 459, 486], "fino": [77, 115, 313], "fir": [62, 65, 74, 113, 128, 157, 173, 178, 269, 318, 320, 325, 420, 421, 433, 486], "fir_delai": [64, 65, 66, 318, 320, 321, 325], "first": [2, 6, 7, 12, 15, 17, 19, 21, 26, 31, 33, 34, 36, 40, 42, 44, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 65, 66, 70, 72, 74, 76, 78, 81, 82, 85, 87, 90, 92, 93, 94, 95, 96, 98, 106, 107, 111, 112, 115, 117, 118, 119, 125, 127, 129, 143, 144, 146, 149, 151, 153, 154, 157, 158, 159, 161, 162, 163, 165, 167, 168, 171, 172, 174, 175, 176, 177, 181, 182, 183, 184, 187, 195, 232, 234, 260, 261, 264, 265, 269, 270, 273, 275, 278, 284, 285, 286, 287, 290, 295, 296, 297, 298, 299, 303, 304, 318, 321, 331, 333, 337, 342, 343, 352, 353, 356, 358, 359, 361, 364, 367, 368, 369, 378, 382, 420, 421, 425, 427, 432, 433, 434, 435, 436, 437, 438, 443, 444, 445, 447, 455, 456, 457, 459, 465, 471, 481, 486, 487], "first_epi_fil": 96, "first_level": [6, 34, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 79, 101, 102, 110, 126, 130, 151, 153, 155, 157, 173, 424, 457], "first_level_contrast": [102, 153, 157, 331, 333], "first_level_from_bid": [64, 101, 102, 110, 125, 126, 127, 129, 157, 424], "first_level_glm": 110, "first_level_model": [63, 66, 67], "first_pipelin": 99, "first_plot": 51, "first_roi_data": 95, "first_roi_img": 95, "first_rsn": 2, "first_three_imag": 343, "firstlevelmodel": [6, 63, 66, 67, 69, 70, 71, 72, 101, 110, 129, 130, 151, 153, 155, 157, 173, 321, 331, 333, 358, 457], "firstlevelmodelifittedfirstlevelmodel": 64, "firstlevemodel": 67, "firstli": 58, "fischl": [23, 115, 199, 204, 205, 206, 207, 208, 209, 223, 229, 244, 250, 252, 254, 281], "fisher": [99, 115, 306], "fistlevelmodel": 173, "fit": [3, 6, 24, 29, 31, 33, 36, 37, 38, 40, 42, 43, 44, 46, 47, 50, 51, 52, 53, 54, 55, 56, 59, 60, 62, 63, 65, 66, 67, 69, 71, 74, 76, 77, 78, 80, 81, 82, 88, 90, 92, 93, 95, 99, 100, 101, 105, 110, 111, 113, 117, 126, 127, 129, 130, 143, 151, 153, 155, 157, 158, 160, 161, 162, 164, 165, 167, 169, 171, 172, 174, 175, 176, 178, 179, 180, 185, 230, 231, 232, 254, 261, 262, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 315, 318, 321, 327, 331, 333, 343, 348, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 378, 382, 395, 398, 420, 433, 438, 444, 445, 446, 447, 450, 455, 457, 470, 471, 486, 487], "fit_intercept": [301, 302], "fit_param": [300, 303, 304, 318, 331, 362, 365, 368, 444, 446], "fit_predict": [444, 446], "fit_transform": [36, 37, 40, 44, 49, 51, 52, 53, 54, 56, 57, 58, 60, 63, 70, 90, 93, 99, 100, 101, 104, 105, 106, 107, 108, 111, 117, 126, 130, 157, 159, 162, 173, 185, 230, 300, 303, 304, 318, 331, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 444, 445, 446, 447], "fitted_pipelin": 99, "fitter": [126, 157], "five": [58, 67, 445], "five_mni_imag": 343, "fix": [17, 31, 50, 60, 71, 93, 103, 121, 171, 172, 181, 184, 305, 306, 309, 315, 318, 321], "fixed_fx_contrast": 72, "fixed_fx_contrast_img": 315, "fixed_fx_stat": 72, "fixed_fx_stat_img": 315, "fixed_fx_vari": 72, "fixed_fx_variance_img": 315, "fixed_fx_z_score_img": 315, "fixur": 172, "fl": 0, "flag": [129, 157, 173, 359, 360], "flake8": [129, 133, 155, 157], "flash": 67, "flat": [24, 43, 125, 157, 184, 204, 205, 206, 207, 208, 281, 284, 285, 292], "flat_left": [204, 205, 206, 207, 208, 281], "flat_right": [204, 205, 206, 207, 208, 281], "flatiron": 0, "flatten": [25, 42, 43, 70, 115, 199, 230, 236, 237, 284], "flavor": [2, 195], "fletcher": [115, 190, 238], "flexibl": [66, 132, 157], "flexibli": 58, "fliem": 219, "flip": [17, 105, 137, 157, 195, 242], "flirt": 209, "flm": 470, "flm_object": [155, 157], "float": [3, 42, 43, 45, 68, 76, 128, 146, 149, 157, 231, 232, 234, 238, 264, 282, 286, 287, 290, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 317, 318, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 333, 334, 335, 336, 340, 342, 351, 352, 355, 359, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 416, 417, 418, 419, 423, 425, 426, 428, 429, 431, 432, 433, 434, 436, 437, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 452, 455, 456, 457, 458, 459, 460, 469], "float32": [12, 34, 85, 103, 185, 337, 346, 363, 364, 365, 366, 367, 368, 369], "float64": [78, 129, 157], "flore": [115, 158, 230], "florent": [0, 115, 128, 157, 199, 209, 244], "florida": 0, "flow": [151, 157, 174, 178], "fluctuat": [50, 67, 171, 174, 178, 238], "fluenci": 78, "fluid": [12, 58, 211, 263, 359], "fmr": 50, "fmri": [1, 8, 16, 26, 30, 31, 32, 33, 34, 37, 40, 42, 43, 46, 48, 57, 58, 61, 62, 63, 64, 65, 67, 70, 71, 73, 74, 75, 82, 83, 86, 90, 92, 95, 98, 101, 102, 103, 104, 110, 112, 113, 115, 117, 118, 129, 134, 141, 146, 157, 161, 162, 163, 165, 167, 170, 171, 173, 176, 177, 178, 179, 180, 183, 184, 185, 187, 193, 194, 195, 198, 201, 202, 210, 213, 216, 218, 219, 224, 242, 243, 245, 251, 256, 259, 261, 262, 268, 269, 279, 296, 300, 303, 304, 313, 315, 318, 327, 331, 333, 334, 336, 341, 343, 344, 347, 348, 359, 360, 362, 368, 376, 379, 382, 394, 402, 409, 417, 418, 420, 421, 423, 425, 426, 431, 432, 433, 438, 440, 445, 447, 455, 456, 459, 460, 470, 472, 486, 487], "fmri_compress": 51, "fmri_data": [42, 95, 318, 331], "fmri_fil": 101, "fmri_filenam": [3, 37, 38, 58, 95, 99, 117], "fmri_glm": [6, 70, 71, 72, 173], "fmri_glm_multirun": 72, "fmri_glm_run_1": 72, "fmri_glm_run_2": 72, "fmri_img": [6, 35, 37, 38, 40, 66, 67, 70, 71, 72, 95, 110, 173], "fmri_img_surf": 38, "fmri_mask": [37, 93, 99, 104, 107, 108, 117], "fmri_niimg": [3, 31, 35, 99, 164], "fmri_niimgs_condit": 31, "fmri_niimgs_test": 3, "fmri_niimgs_train": 3, "fmri_random_runs_filenam": 42, "fmri_reduc": 51, "fmri_reduced_rena": 51, "fmri_run": [34, 42], "fmrib": [175, 209, 212, 225, 251, 487], "fmriprep": [64, 67, 110, 126, 127, 129, 153, 155, 157, 159, 163, 174, 178, 185, 259, 263, 264, 289, 321], "fmt": 73, "fnhum": [115, 190, 238], "fnin": [51, 115, 161, 219, 282], "fninf": [115, 118, 218, 273, 275], "fnsy": [115, 194, 241], "focu": [15, 80, 159, 161, 171, 447], "focus": [62, 75, 99, 113, 117, 135, 141, 157, 158, 165, 168, 169, 172], "fold": [3, 30, 32, 35, 37, 42, 53, 69, 95, 99, 100, 164, 165, 167, 169, 171, 185, 232, 296, 297, 298, 299, 300, 301, 302], "folder": [64, 95, 102, 110, 153, 157, 172, 181, 183, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 277, 278, 279, 280, 281, 282, 283, 284, 285, 292, 321, 346, 356], "follow": [2, 4, 7, 10, 15, 19, 22, 23, 30, 33, 35, 36, 37, 38, 42, 43, 44, 49, 50, 51, 53, 54, 55, 56, 57, 58, 60, 63, 65, 66, 67, 70, 73, 90, 92, 93, 95, 99, 100, 101, 103, 104, 105, 106, 107, 108, 113, 117, 118, 129, 140, 143, 144, 145, 146, 147, 148, 152, 157, 158, 159, 162, 163, 169, 172, 173, 174, 176, 178, 180, 181, 183, 195, 203, 214, 277, 281, 283, 284, 285, 292, 336, 342, 356, 358, 359, 360, 364, 367, 369, 374, 375, 376, 378, 379, 441, 447, 459, 460, 484, 485], "fonov": [115, 195, 211, 263, 289], "font": [383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 434, 436, 437], "fontproperti": [383, 385, 386], "fontsiz": [13, 26, 42, 51, 65, 79, 81, 107, 144, 146, 157, 184, 383, 385, 386, 439, 441, 442, 443], "footbibliographi": [6, 151, 153, 155, 157], "footcit": [6, 151, 153, 155, 157, 180], "footer": [129, 157], "forc": [2, 95, 133, 157, 171, 172, 185, 195, 242, 251, 273, 274, 275, 276], "force_resampl": [54, 67, 71, 76, 85, 94, 129, 157, 351, 352], "ford": [115, 194, 241], "foreground": [89, 162], "forget": [95, 172], "fork": 172, "form": [6, 7, 34, 42, 46, 51, 73, 107, 127, 157, 158, 159, 161, 162, 174, 178, 183, 209, 230, 231, 232, 278, 296, 297, 298, 299, 300, 301, 302, 303, 304, 313, 318, 321, 325, 331, 333, 334, 356, 357, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 382, 427, 440, 444, 445, 446, 447, 456, 457], "formal": [6, 226], "format": [2, 40, 51, 57, 101, 117, 125, 126, 150, 153, 155, 157, 172, 173, 185, 195, 199, 201, 230, 238, 300, 303, 304, 318, 331, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 423, 425, 426, 428, 432, 433, 434, 435, 436, 437, 442, 443, 444, 445, 446, 447, 467, 468, 469, 475], "formatstrformatt": 50, "formatt": [129, 157], "former": [165, 171, 273, 425, 428, 433, 437], "formerli": [92, 143, 157], "formula": [2, 129, 134, 157, 171, 331, 333, 347, 420], "fornito": [58, 115, 159, 360], "forschungszentrum": 0, "fortran": [171, 351, 352, 382], "fortun": [3, 68], "forum": 172, "forward": [115, 228, 253], "foucault": [143, 157], "found": [2, 3, 4, 6, 10, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 76, 77, 78, 80, 81, 82, 86, 87, 88, 89, 90, 92, 93, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 117, 118, 143, 157, 158, 161, 162, 163, 164, 165, 166, 167, 169, 171, 172, 180, 181, 184, 185, 195, 218, 273, 275, 277, 336, 338, 356, 373, 376, 417, 432, 433, 459, 484], "four": [7, 42, 46, 67, 153, 157, 185, 229], "fourth": [82, 85, 151, 157, 318, 333, 343, 344, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 415, 447, 459], "fox": [115, 225, 228, 251, 253, 360], "fpr": [6, 34, 82, 177, 178, 318, 331, 334, 457, 470], "fr": [0, 192, 197, 217, 240, 248], "frac": [174, 297, 302, 305, 309], "frackowiak": [115, 336, 459], "fraction": [238, 318, 321, 376, 377, 379, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 469], "frame": [34, 65, 90, 185, 195, 320, 343, 359, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 455], "frame_ax": [384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410], "frame_tim": [34, 65, 68, 71, 173, 319, 320, 325], "frameon": [35, 383, 385, 386], "frames_tim": 325, "frametim": 63, "framewis": [58, 259, 359], "framework": [68, 158, 259], "fran": [60, 115, 222, 257], "franc": [0, 172], "francesca": [115, 194, 241], "francisco": [115, 219, 282], "franz": [0, 57, 144, 146, 148, 157], "fran\u00e7oi": [0, 126, 157], "frau": [0, 131, 157], "frazier": [115, 209], "free": [0, 115, 165, 172, 174, 178, 333, 382], "freedman": [115, 382], "freedom": [58, 101, 109, 159, 174, 306, 309, 315, 360], "freeli": [6, 220, 226], "freesurf": [10, 23, 69, 110, 138, 143, 155, 157, 173, 199, 204, 205, 206, 207, 208, 212, 252, 281, 285, 396, 434, 435, 436, 437, 443, 461, 467, 468, 469], "freimer": [115, 260, 278], "freita": [115, 228, 253], "frem": [3, 29, 47, 113, 115, 125, 149, 157, 164, 165, 168, 170, 178, 179, 262, 271, 298, 299, 302, 343, 348, 430, 433, 438, 486, 487], "fremclassifi": [32, 129, 149, 150, 157, 165, 166, 296, 299], "fremregressor": [32, 41, 129, 149, 150, 157, 165, 166, 297, 298], "french": 0, "frequenc": [6, 67, 122, 157, 185, 238, 296, 297, 298, 299, 301, 302, 318, 325, 336, 359, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 445, 447, 458, 459], "frequent": 174, "frequentist": 174, "frequentist_infer": 174, "fri": [115, 194, 241], "friedman": [115, 158], "friendli": [124, 157, 485], "frisoni": [115, 191, 270], "friston": [6, 115, 226, 336, 459], "frith": [115, 336, 459], "fritsch": [0, 119, 157], "frmi_fil": 159, "from": [0, 4, 6, 7, 8, 9, 10, 11, 13, 14, 15, 18, 19, 20, 21, 22, 24, 26, 28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 49, 53, 54, 55, 56, 57, 59, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 94, 96, 97, 98, 100, 102, 104, 105, 106, 109, 110, 111, 112, 114, 115, 116, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 136, 139, 140, 143, 144, 146, 151, 152, 153, 155, 157, 158, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 178, 179, 180, 181, 182, 187, 190, 191, 192, 193, 194, 195, 198, 200, 201, 202, 203, 209, 210, 211, 212, 214, 216, 218, 223, 224, 225, 230, 231, 232, 234, 238, 239, 240, 242, 244, 245, 246, 247, 249, 250, 251, 253, 254, 256, 258, 259, 260, 262, 263, 264, 266, 267, 268, 270, 272, 273, 274, 275, 276, 277, 278, 282, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 315, 317, 318, 321, 325, 331, 332, 333, 335, 336, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 382, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 417, 418, 420, 422, 423, 424, 425, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 465, 469, 470, 471, 477, 479, 484, 485, 486, 487], "from_volum": [10, 38, 69, 110, 465], "fromnumer": [3, 17, 30], "front": [118, 305, 308], "frontal": [71, 92, 115, 169, 417, 423, 425, 426, 432, 433], "frontier": [51, 115, 161, 190, 194, 201, 218, 219, 238, 241, 273, 275, 282], "frontiersin": 194, "fronto": [60, 102], "frontopariet": 258, "frouin": [115, 197, 268], "frustrat": 172, "fsaverag": [10, 23, 24, 25, 38, 64, 69, 111, 125, 126, 129, 143, 151, 157, 187, 281, 284, 285, 292, 428, 441, 469, 484], "fsaverage3": [151, 157, 187, 281, 284, 285, 292, 441], "fsaverage4": [151, 157, 187, 281, 284, 285, 292, 441], "fsaverage5": [10, 23, 24, 25, 69, 110, 111, 129, 138, 143, 157, 187, 199, 219, 252, 281, 282, 284, 285, 292, 321, 428, 441, 469], "fsaverage5_spher": [155, 157], "fsaverage6": [151, 157, 187, 281, 284, 285, 292, 441], "fsaverage7": [281, 284, 285, 292, 441], "fsaverage_data": [38, 69, 110], "fsaverage_mesh": [10, 23, 24], "fsaverage_sulc": [10, 23, 24, 111], "fsavg": 465, "fsl": [11, 12, 37, 58, 64, 80, 87, 92, 95, 130, 152, 153, 155, 157, 175, 183, 209, 212, 246, 247, 347, 487], "fsl3": [58, 92], "fsl_design_matrix_path": [64, 361], "fsl_z_map": 64, "fslmath": 347, "fslview": 184, "fswiki": [229, 254], "ftp": [193, 239], "fulcher": [58, 115, 360], "full": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 122, 124, 127, 157, 161, 162, 163, 165, 167, 169, 171, 172, 173, 178, 184, 185, 191, 200, 210, 246, 247, 259, 270, 296, 297, 298, 299, 303, 304, 305, 308, 309, 310, 311, 318, 331, 333, 353, 359, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 422, 430, 445, 447, 449, 455], "full_brain_info": [126, 157], "full_coef": 99, "full_correl": 270, "fullbrain": 262, "fulli": [115, 171, 174, 195, 485], "func": [3, 6, 10, 12, 16, 17, 19, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 66, 67, 70, 72, 86, 90, 92, 93, 95, 96, 99, 100, 101, 102, 103, 104, 106, 110, 117, 127, 151, 157, 162, 172, 173, 183, 185, 193, 197, 200, 210, 216, 226, 239, 259, 262, 265, 272, 279, 356, 359, 360], "func1": [71, 72, 203, 227, 261, 280], "func2": [71, 72, 203, 227, 261, 280], "func_fil": 53, "func_filenam": [19, 26, 31, 32, 33, 34, 36, 50, 52, 55, 57, 60, 92, 93, 104, 106, 162, 184], "func_img": [30, 164], "func_left": [219, 282], "func_mask": 238, "func_mean": 238, "func_preproc": [154, 157, 238], "func_reduc": 104, "func_right": [219, 282], "function": [2, 3, 4, 6, 7, 9, 10, 12, 14, 15, 16, 18, 19, 22, 23, 26, 27, 28, 30, 31, 33, 35, 36, 37, 40, 50, 51, 54, 55, 57, 58, 60, 61, 62, 65, 66, 67, 69, 71, 72, 73, 74, 75, 86, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 103, 104, 106, 110, 112, 115, 117, 118, 120, 122, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 149, 150, 151, 152, 153, 154, 155, 157, 161, 164, 165, 168, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 190, 191, 192, 193, 195, 197, 198, 200, 201, 203, 213, 217, 218, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 309, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 467, 468, 469, 471, 474, 485, 486, 487], "functool": 50, "fundament": 178, "furei": [3, 32, 33, 39, 99, 115, 210, 262], "furo": [124, 155, 157], "further": [0, 15, 16, 24, 40, 57, 67, 70, 85, 95, 116, 158, 166, 168, 171, 181, 183, 187, 195, 224, 273, 318, 331, 359, 396, 476, 477, 484, 487], "furthermor": [6, 40, 44, 57], "fusifor": 471, "fusiform": [92, 169], "futur": [0, 2, 6, 16, 19, 31, 37, 42, 44, 45, 50, 88, 104, 108, 129, 137, 143, 149, 155, 157, 171, 178, 183, 185, 306, 455], "futurewarn": [50, 51, 52], "fwe": [107, 382], "fwer": [78, 82, 177, 178, 333], "fwhm": [4, 67, 95, 96, 105, 107, 140, 146, 157, 178, 180, 184, 185, 353], "g": [0, 6, 10, 15, 23, 25, 31, 32, 42, 44, 45, 49, 50, 57, 63, 68, 93, 95, 100, 101, 107, 115, 118, 125, 151, 155, 157, 159, 169, 171, 172, 173, 174, 177, 178, 180, 184, 185, 191, 192, 198, 201, 220, 228, 230, 231, 232, 243, 253, 270, 277, 296, 297, 298, 299, 300, 301, 302, 303, 304, 310, 311, 318, 325, 331, 335, 338, 355, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 419, 428, 431, 434, 435, 436, 437, 439, 440, 441, 443, 444, 445, 446, 447, 450, 451, 453, 469, 484], "g004": 194, "g_and_s_cingul": 471, "g_and_s_frontomargin": 471, "g_and_s_occipital_inf": 471, "g_and_s_paracentr": 471, "g_and_s_subcentr": 471, "g_and_s_transv_frontopol": 471, "g_cingul": [24, 471], "g_cuneu": 471, "g_front_inf": 471, "g_front_middl": 471, "g_front_sup": 471, "g_ins_lg_and_s_cent_in": 471, "g_insular_short": 471, "g_oc": 471, "g_occipital_middl": 471, "g_occipital_sup": 471, "g_orbit": 471, "g_pariet_inf": 471, "g_parietal_sup": 471, "g_postcentr": [10, 471], "g_precentr": [10, 471], "g_precuneu": 471, "g_rectu": 471, "g_subcallos": 471, "g_t_transv": 471, "g_temp_sup": 471, "g_temporal_inf": 471, "g_temporal_middl": 471, "ga": [46, 115, 164, 170], "gabriel": [115, 218, 273, 275], "gael": [0, 50, 51, 115, 119, 120, 122, 123, 131, 133, 136, 140, 143, 144, 145, 146, 148, 157, 158, 162, 163, 217, 218, 230, 231, 248, 273, 275, 303, 304, 446, 447, 452], "gagan": [60, 115, 202, 222, 256, 257], "gain": [41, 67, 166, 171, 215, 271], "gale": [0, 143, 146, 157], "gallant": [115, 165], "galleri": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 126, 131, 133, 137, 138, 140, 157, 172, 484, 486], "gambl": [29, 47, 113, 168, 170, 187, 271, 299, 302, 433, 486, 487], "gamma": [68, 155, 157, 173], "ganel": [71, 115], "ganglia": 224, "gap": [55, 231, 234], "gather": [95, 172, 174], "gatsbi": 0, "gau": [0, 125, 126, 127, 128, 129, 130, 157], "gaussian": [6, 46, 80, 95, 115, 158, 171, 174, 185, 186, 195, 231, 234, 353], "gaussian_filt": 46, "gazzalei": [101, 115], "ga\u00ebl": [51, 53, 58, 100, 115, 158, 159, 161, 166, 201, 217, 245, 248, 298, 299, 303], "gca": [50, 53, 100], "gcf": 42, "gee": 115, "gender": [200, 259, 277], "gener": [0, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 65, 66, 67, 68, 69, 70, 71, 74, 75, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 117, 124, 126, 127, 128, 129, 143, 144, 146, 148, 149, 151, 153, 157, 164, 165, 167, 169, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 185, 195, 198, 211, 216, 224, 242, 243, 245, 268, 278, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 308, 310, 311, 318, 325, 331, 333, 334, 335, 336, 341, 347, 348, 358, 359, 360, 363, 364, 365, 366, 367, 368, 369, 370, 372, 380, 382, 424, 428, 433, 434, 435, 436, 437, 438, 444, 445, 447, 455, 459, 471, 475, 484, 485, 486], "generate_group_sparse_gaussian_graph": [59, 171], "generate_report": [56, 60, 72, 90, 92, 93, 126, 127, 153, 157, 185, 318, 331, 358, 363, 364, 365, 366, 367, 368, 369, 370, 372, 447], "genet": [115, 209], "geneva": 0, "genfromtxt": 164, "genom": 0, "gensollen": [0, 127, 150, 151, 152, 153, 154, 155, 157], "gentl": 180, "geoffrei": [115, 310, 311], "geometr": [158, 230], "geometri": [7, 69, 115, 178, 347, 428, 434, 435, 436, 437, 443, 468, 469], "geomspac": 40, "gerard": [104, 115, 382], "geriant": [6, 226], "geriatr": 0, "gerloff": [0, 125, 157], "germani": [0, 115, 170], "germnai": 0, "gervai": [0, 119, 157], "get": [3, 4, 6, 10, 15, 22, 23, 24, 34, 36, 42, 43, 53, 54, 58, 60, 64, 67, 68, 69, 71, 76, 79, 82, 87, 89, 101, 102, 106, 110, 111, 118, 138, 143, 157, 159, 162, 163, 164, 169, 171, 173, 176, 177, 179, 185, 192, 230, 231, 232, 246, 247, 249, 250, 275, 296, 297, 298, 299, 300, 301, 302, 303, 304, 308, 310, 311, 318, 331, 333, 341, 346, 350, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 382, 383, 385, 386, 413, 444, 445, 446, 447, 455, 461, 485], "get_affin": [137, 157, 183, 338], "get_anat": 268, "get_bids_fil": [153, 157], "get_clusters_t": [6, 64, 70, 125, 150, 154, 155, 157], "get_cmap": 13, "get_data": [31, 37, 44, 49, 51, 78, 80, 85, 95, 104, 107, 108, 109, 138, 146, 157, 183, 346], "get_data_dir": [2, 4, 136, 157, 183, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 277, 278, 279, 280, 281, 282, 284, 285, 292], "get_dataset_dir": [2, 3, 4, 6, 10, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 64, 66, 67, 69, 70, 71, 72, 76, 77, 78, 80, 81, 82, 86, 87, 88, 89, 90, 92, 93, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 172], "get_design_from_fslmat": [64, 153, 157], "get_fdata": [12, 81, 103, 146, 157, 183], "get_head": 183, "get_ifram": 455, "get_mask": 268, "get_metadata_rout": [230, 231, 232, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 444, 445, 446, 447], "get_object_bound": [383, 385, 386], "get_param": [101, 230, 231, 232, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 444, 445, 446, 447], "get_standalon": 455, "get_support": 44, "get_tmap": [80, 268], "get_zoom": 418, "getattr": [11, 16, 19, 22], "geuter": [115, 336, 459], "gezici": [0, 127, 157], "gh": [126, 157, 172], "ghislain": [72, 115, 203], "gholamreza": [115, 158], "ghosh": [115, 118, 218, 273, 275], "giant": [146, 157], "gif": [0, 172], "gifti": [7, 126, 129, 157, 204, 205, 206, 207, 208, 281, 282, 461, 462, 463, 464, 466], "gifti_fil": [461, 462, 466], "gigabyt": 172, "gii": [7, 359, 360, 396, 434, 435, 436, 437, 443, 467, 468, 469], "gili": [115, 195], "gill": [0, 143, 146, 157], "gilmor": [0, 151, 157], "gin": [192, 240], "giov": [115, 195], "giovanni": [115, 191, 270], "gist_ncar": [23, 142, 157, 418, 432, 436, 484], "gist_rainbow": 431, "git": [119, 120, 122, 123, 131, 133, 136, 157, 172, 181], "github": [0, 2, 3, 4, 6, 7, 10, 11, 12, 15, 16, 17, 19, 21, 22, 24, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 54, 55, 56, 57, 59, 60, 63, 64, 65, 71, 72, 73, 76, 78, 79, 80, 87, 88, 89, 92, 93, 95, 96, 99, 101, 102, 104, 105, 106, 107, 108, 110, 111, 155, 157, 172, 180, 219, 223, 250, 263, 360, 441, 470, 471, 484, 485], "give": [2, 3, 4, 6, 10, 15, 16, 17, 25, 30, 34, 40, 44, 51, 54, 56, 57, 58, 60, 69, 85, 92, 95, 99, 105, 115, 117, 125, 136, 138, 153, 157, 158, 159, 161, 163, 164, 165, 166, 167, 169, 171, 180, 184, 185, 203, 226, 266, 267, 275, 296, 297, 298, 299, 300, 303, 304, 305, 313, 318, 320, 325, 331, 333, 348, 353, 356, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 380, 396, 430, 435, 436, 444, 445, 447, 449, 453, 454, 469], "given": [2, 3, 10, 15, 17, 38, 40, 46, 49, 52, 55, 56, 60, 65, 66, 67, 69, 71, 72, 73, 80, 85, 87, 95, 96, 101, 103, 106, 111, 125, 135, 137, 141, 146, 155, 157, 158, 161, 164, 165, 167, 169, 170, 171, 172, 174, 178, 181, 185, 191, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 246, 247, 267, 268, 270, 271, 277, 282, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 314, 315, 318, 321, 325, 331, 332, 333, 335, 337, 342, 345, 348, 351, 353, 355, 356, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 418, 419, 423, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 457, 458, 460, 471], "gl": [55, 59], "glahn": [115, 225, 251], "glaser": [0, 142, 157], "glass": [9, 10, 28, 49, 63, 109, 113, 136, 137, 138, 140, 141, 146, 149, 157, 179, 276, 293, 318, 331, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419, 425, 429, 433, 438, 439, 442, 457, 484, 486], "glassbrainax": [387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409], "glasser": [115, 191, 270], "glm": [1, 7, 8, 29, 33, 44, 47, 63, 64, 65, 66, 67, 68, 69, 70, 71, 76, 77, 78, 79, 80, 81, 82, 101, 102, 110, 124, 126, 127, 128, 129, 130, 149, 150, 151, 153, 155, 157, 164, 173, 177, 178, 179, 180, 181, 262, 279, 296, 343, 348, 355, 358, 417, 420, 421, 424, 426, 433, 438, 455, 456, 457, 481, 485, 486, 487], "glm_paramet": 101, "glm_report": 72, "glmax": [58, 92, 103], "glmin": [58, 92, 103], "glob": [64, 76, 128, 131, 141, 157, 182, 337, 356, 487], "global": [9, 28, 113, 115, 149, 157, 171, 172, 183, 190, 195, 223, 238, 239, 250, 263, 283, 303, 304, 337, 349, 359, 360, 376, 418, 445, 486], "global_sign": [58, 127, 157, 359, 360], "global_signal_regress": 238, "glossari": [128, 154, 157, 174], "glover": [34, 65, 67, 68, 69, 110, 129, 157, 173, 318, 320, 321, 322, 323, 324, 325, 470], "glover_dispersion_deriv": [129, 157, 318, 320, 325], "glover_hrf": [129, 157, 318, 320, 325], "glover_time_deriv": [129, 157, 318, 320, 325], "gm": [12, 22, 90, 152, 157, 185, 211, 263, 264, 296, 297, 298, 299, 303, 304, 365, 368, 375, 378, 445], "gm_img": 45, "gm_imgs_test": [44, 45], "gm_imgs_train": [44, 45], "gm_maps_mask": 44, "gm_mask": 76, "gm_mask_img": [264, 287], "gm_mni152_templ": 288, "gmbh": 0, "gnist_ncar": 443, "go": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 116, 118, 139, 157, 158, 164, 168, 172, 177, 180, 181, 185, 275, 341, 346, 347, 349, 419, 425, 429, 433, 438, 440, 470, 486, 487], "goal": [7, 86, 91, 94, 117, 171, 172], "gobbini": [3, 32, 33, 39, 99, 115, 210, 262], "godfrei": [115, 194, 241], "goe": [0, 15, 42, 87, 95, 101, 171, 231, 234], "goebel": [115, 169, 180, 300], "goeman": [77, 115, 313], "goldstein": [115, 199, 209, 244], "golobal_sign": 360, "gomez": [0, 143, 146, 152, 155, 157], "goncalv": [0, 125, 157], "gonn": [115, 209], "gonzalez": [136, 143, 157], "good": [7, 51, 58, 66, 67, 115, 117, 138, 157, 158, 161, 163, 165, 166, 167, 168, 170, 171, 172, 173, 181, 183, 185, 273, 298, 299, 413, 487], "goodwin": [115, 191, 270], "googl": 0, "gor": [0, 119, 143, 157], "gordon": [115, 223, 250], "gorgolewski": [0, 115, 118, 119, 131, 157, 201, 218, 245, 260, 273, 275, 278], "gorrono": [0, 148, 157], "goshen": [71, 115], "got": [164, 172], "gotim": 115, "gottstein": [71, 115], "gould": [115, 171], "gov": [50, 72, 115, 163, 165, 203, 303], "govern": 171, "grab": [34, 49, 50, 51, 66, 101, 118], "grace": [115, 200, 259], "gracefulli": 351, "grad": 487, "graham": [58, 115, 359, 360], "grai": [6, 12, 39, 42, 43, 44, 45, 67, 76, 90, 128, 136, 143, 146, 152, 157, 169, 177, 179, 211, 220, 263, 264, 277, 296, 297, 298, 299, 303, 304, 365, 368, 417, 418, 445, 469, 471], "grain": [10, 70, 115, 201, 245, 300], "gramfort": [0, 46, 51, 115, 119, 122, 145, 146, 157, 158, 170, 217, 231, 248], "grand": [58, 318], "grant": 0, "graph": [45, 49, 55, 59, 158, 160, 170, 171, 178, 179, 296, 297, 301, 302, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419, 429, 487], "graph_net": 41, "graph_object": 396, "graphic": [60, 115, 158, 171, 172, 186, 231, 234], "graphical_lasso": 55, "graphicallasso": [55, 158], "graphicallassocv": [54, 55, 59, 60, 158, 171, 232], "graphicallassocvifittedgraphicallassocv": [54, 55, 60], "graphnet": [115, 170], "grass": 190, "gratton": [115, 224, 258], "gray_matter_map": [44, 45, 76, 220, 277], "gray_matter_map_filenam": [44, 76], "grayplot": [12, 149, 157, 418], "grayscal": [434, 436, 437, 443], "great": [143, 157], "greater": [67, 101, 151, 153, 157, 174, 195, 318, 327, 335, 342, 355, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419, 425, 428, 429, 433, 437, 439, 441, 443, 456, 460, 469], "greaterorequ": [118, 273], "greaterthan": [118, 273], "greatli": 180, "green": [42, 51, 115, 151, 157, 224, 258, 305, 309], "greenelab": 224, "greg": [0, 143, 146, 157], "gregori": [101, 115, 164], "grei": [67, 90, 152, 157, 184, 185, 264, 287, 288, 289, 291, 375, 378], "grew": 0, "greydon": [0, 151, 157], "grid": [7, 35, 40, 53, 68, 80, 85, 100, 165, 170, 178, 184, 232, 273, 275, 296, 297, 298, 299, 322, 323, 324, 328, 329, 330, 351, 393, 395, 398, 412, 417, 423, 426, 430, 431, 432, 433, 484], "grid_param": [126, 157], "grid_search": [143, 157, 296, 297, 298, 299], "gridsearchcv": [100, 167], "gridspec": [42, 151, 157], "gridspec_kw": [40, 51, 81, 101], "griffith": [140, 157], "grobler": [0, 119, 157], "groningen": 0, "grosenick": [115, 170], "gross": 277, "ground": [43, 46, 59, 164], "group": [2, 3, 6, 30, 31, 33, 34, 40, 48, 59, 60, 61, 64, 75, 76, 77, 78, 79, 80, 81, 98, 99, 102, 106, 107, 112, 113, 115, 140, 146, 157, 159, 160, 163, 164, 169, 174, 176, 177, 178, 179, 180, 191, 195, 198, 200, 220, 226, 230, 231, 232, 242, 243, 248, 256, 258, 259, 270, 276, 296, 297, 298, 299, 300, 303, 304, 344, 356, 359, 362, 367, 382, 415, 418, 419, 430, 431, 433, 438, 452, 486, 487], "group_connect": 158, "group_mean": 243, "group_multiscale_functional_template_generated_with_basc_on_the_cambridge_sampl": 242, "group_sparse_cov": 59, "group_sparse_covari": [131, 157, 171, 232], "group_sparse_covariance_cost": 171, "grouped_conditions_encod": 104, "grouped_fmri_mask": 104, "groupsparsecovari": [55, 158, 171, 232], "groupsparsecovariancecv": [55, 59, 158, 171], "grow": [51, 158, 195], "grp_mask": 380, "grp_mean": 243, "grueschow": [115, 169], "gruner": [115, 194, 241], "gryal": 252, "gs1": 42, "gsc": [55, 59], "gsr": 58, "gt": [37, 76, 90, 92, 93, 471], "gtihub": 172, "guarante": [0, 6, 82, 165, 171, 281, 294, 346, 351, 352, 358, 365], "guess": [164, 171, 374, 440], "guevara": [0, 131, 136, 157], "gui": [115, 176, 191, 270], "guid": [41, 124, 130, 157, 172, 177, 179, 180, 185, 187, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 474, 476, 477, 485], "guidelin": [58, 95, 115, 124, 152, 155, 157, 164, 181], "guidotti": [0, 136, 146, 157], "guillaum": [0, 72, 115, 143, 146, 157, 203], "gur": [58, 115, 359, 360], "gutman": [115, 219, 282], "gyral": [115, 199, 209], "gyri": [23, 115, 199, 252], "gyru": [10, 92, 253], "gz": [2, 3, 4, 6, 11, 12, 15, 17, 19, 26, 30, 31, 33, 35, 36, 37, 43, 44, 45, 49, 50, 51, 54, 55, 56, 57, 58, 60, 64, 72, 76, 78, 86, 87, 90, 92, 93, 95, 96, 102, 104, 106, 107, 110, 117, 180, 181, 183, 195, 201, 358, 359, 360, 396, 434, 443, 467, 468, 471], "g\u00f6z\u00fckan": [0, 129, 130, 157], "h": [58, 66, 115, 199, 204, 205, 206, 207, 208, 220, 228, 244, 253, 260, 277, 278, 281, 305, 309, 359, 360], "h0": [306, 382], "h0_fmax": [154, 157, 382], "h0_max_mass": 382, "h0_max_siz": 382, "h0_max_t": 382, "h0_max_tfc": 382, "h1": 92, "h2": 92, "h_shape": 471, "ha": [3, 6, 12, 24, 30, 31, 33, 34, 35, 36, 37, 38, 40, 44, 49, 51, 53, 54, 56, 60, 65, 67, 68, 70, 72, 73, 76, 80, 82, 87, 90, 92, 95, 99, 101, 106, 118, 124, 125, 126, 127, 129, 131, 133, 137, 140, 143, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 163, 165, 166, 169, 171, 172, 174, 176, 177, 181, 185, 195, 226, 230, 231, 232, 240, 241, 242, 244, 249, 253, 273, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 325, 331, 333, 342, 345, 346, 348, 351, 352, 356, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 382, 384, 425, 428, 433, 437, 438, 444, 445, 446, 447, 451, 455, 458, 460, 469, 471, 484], "habib": [115, 195, 242], "had": [126, 142, 157], "haemodynam": [71, 115, 173, 174, 178], "haemoglobin": 174, "hahn": [0, 155, 157], "hairi": 66, "haitz": [0, 148, 157], "hajim": [42, 43, 115, 216, 272], "hal": [46, 115, 158, 162, 170, 201, 231, 245, 447], "halchenko": [0, 140, 143, 157], "half": [24, 51, 67, 95, 146, 157, 171, 178, 185, 296, 297, 298, 299, 303, 304, 318, 331, 333, 353, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 434, 436, 437, 441, 443, 445, 447, 449], "halfwai": 469, "halgren": [23, 115, 199, 244, 252], "hammond": [0, 146, 157], "hampshir": 0, "han": 115, "hand": [0, 2, 67, 69, 95, 129, 130, 157, 171, 172, 183, 185, 282], "handbook": 180, "handed": [200, 259], "handedness_categori": 238, "handedness_scor": 238, "handi": [150, 157, 173], "handl": [1, 8, 51, 72, 113, 125, 126, 128, 129, 133, 139, 155, 157, 164, 180, 181, 183, 184, 185, 251, 276, 283, 306, 310, 337, 343, 344, 345, 346, 351, 357, 359, 421, 433, 438, 446, 452, 486], "hank": [0, 123, 131, 157], "hanov": 0, "hao": [0, 124, 125, 126, 127, 129, 150, 151, 153, 155, 157], "happen": [50, 93, 169, 172, 185, 469], "hard": [57, 159, 171, 178, 183], "hardcod": [73, 124, 157, 294], "harder": 165, "hardest": 171, "hardwar": 171, "harold": [115, 219, 282], "harsh": 296, "hartmut": 115, "harvard": [0, 22, 92, 159, 187, 220, 229, 238, 246, 254, 414, 415], "harvard_oxford": 22, "harvard_oxford_sub": 22, "harvardoxford": 11, "hasn": [3, 171], "hasti": [115, 158], "hat": [305, 309], "hatch": 181, "hatchl": [125, 157, 181], "have": [0, 2, 3, 6, 7, 10, 12, 16, 17, 19, 24, 25, 30, 32, 33, 34, 40, 41, 43, 44, 45, 46, 51, 54, 56, 57, 58, 59, 63, 64, 65, 66, 67, 71, 72, 76, 86, 87, 94, 95, 99, 101, 102, 103, 105, 110, 111, 113, 117, 118, 124, 125, 126, 127, 129, 131, 133, 135, 136, 137, 140, 141, 142, 143, 146, 149, 150, 151, 153, 154, 157, 158, 161, 162, 163, 164, 165, 167, 170, 171, 172, 173, 174, 177, 178, 180, 181, 183, 184, 185, 191, 195, 198, 200, 213, 227, 230, 231, 232, 234, 237, 242, 249, 250, 254, 258, 259, 273, 277, 296, 297, 298, 299, 300, 301, 302, 303, 304, 310, 311, 318, 321, 325, 326, 331, 332, 333, 335, 336, 338, 347, 351, 352, 353, 356, 358, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 378, 379, 381, 382, 418, 424, 434, 436, 437, 441, 444, 445, 446, 447, 453, 454, 456, 457, 459, 466, 484, 485], "haven": [67, 105], "havlicek": [115, 194, 241], "haxbi": [4, 9, 16, 17, 28, 29, 47, 95, 104, 113, 115, 117, 137, 138, 157, 168, 170, 179, 183, 185, 187, 262, 296, 341, 343, 348, 362, 368, 410, 417, 430, 433, 438, 440, 484, 486, 487], "haxby2001": [3, 4, 16, 17, 19, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 95, 99, 104, 117, 183, 210, 262], "haxby_anat_filenam": [16, 17], "haxby_dataset": [3, 16, 17, 19, 26, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 95, 99, 104, 117, 164, 183, 185], "haxby_face_vs_hous": 30, "haxby_func_filenam": [16, 17], "haxby_label": 95, "haxby_mask_filenam": [16, 17], "haxby_svc_weight": 3, "hayn": [38, 115, 169], "hayward": 0, "hbm": [115, 198, 243, 336, 459], "hbm10": [115, 204, 205, 206, 207, 208, 281], "hbm30": [115, 228, 253], "hbm6": [115, 228, 253], "hcp": [13, 27, 115, 187, 270], "hcp500": 191, "he": 172, "head": [70, 318, 331, 359, 455, 457], "head_tpl": 455, "head_valu": 455, "header": [3, 12, 30, 31, 33, 34, 35, 36, 37, 40, 95, 98, 99, 102, 112, 113, 122, 126, 128, 129, 144, 146, 154, 157, 183, 239, 335, 336, 339, 340, 346, 347, 348, 349, 350, 351, 352, 355, 418, 459, 486], "health": 0, "healthi": [115, 178, 180, 190, 194, 195, 209, 225, 242], "heart": 67, "heavi": [41, 44, 158, 172, 369], "heavier": 32, "heavili": 0, "hedden": [115, 195], "heidelberg": [0, 115, 158, 211, 217, 230, 248, 263], "heidi": [115, 191, 270], "height": [31, 34, 53, 73, 76, 100, 146, 157, 318, 331, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 418, 419, 423, 425, 426, 429, 430, 431, 432, 433, 439, 441, 443, 455, 457, 470], "height_control": [6, 76, 78, 82, 318, 331, 334, 358, 457], "height_ratio": [40, 51], "height_tf": 43, "height_tf_i": 43, "heinzl": [38, 115], "held": [42, 169, 172, 296, 297, 298, 299, 485], "helen": [115, 198, 243], "help": [16, 34, 60, 95, 115, 139, 143, 144, 157, 159, 165, 173, 176, 185, 234, 485, 487], "helper": [10, 25, 39, 42, 46, 51, 68, 72, 79, 92, 107, 108, 111, 125, 131, 138, 139, 157, 172, 187, 273], "helwegen": [0, 155, 157], "hemi": [7, 10, 23, 24, 38, 49, 69, 110, 111, 396, 434, 435, 436, 437, 443, 463, 464, 484], "hemispher": [7, 10, 23, 24, 38, 49, 60, 80, 87, 95, 110, 111, 129, 136, 137, 141, 157, 162, 184, 199, 204, 205, 206, 207, 208, 216, 219, 244, 252, 253, 281, 282, 284, 318, 331, 354, 370, 371, 372, 383, 391, 414, 417, 419, 423, 425, 426, 428, 429, 431, 432, 433, 434, 435, 436, 437, 441, 443, 457, 464, 465, 471, 484], "hemispheres_to_analyz": 38, "hemodyam": 66, "hemodynam": [68, 71, 164, 178], "hemodynamic_model": [155, 157], "henc": [3, 40, 58, 60, 73, 76, 87, 149, 157, 169, 172, 174, 195], "henson": [71, 101, 115, 227], "herbert": [115, 209], "here": [2, 3, 4, 6, 7, 10, 15, 16, 20, 21, 24, 30, 31, 32, 33, 34, 35, 36, 37, 40, 44, 45, 46, 50, 51, 56, 57, 58, 60, 63, 65, 66, 67, 69, 70, 72, 73, 76, 89, 90, 93, 95, 96, 99, 101, 102, 103, 105, 106, 110, 111, 115, 117, 118, 158, 159, 161, 162, 163, 164, 165, 166, 167, 169, 171, 172, 173, 174, 177, 180, 181, 184, 185, 224, 259, 301, 302, 308, 310, 311, 321, 333, 375, 382, 387, 388, 389, 390, 391, 392, 397, 401, 402, 405, 406, 407, 408, 434, 436, 437, 470, 471], "herebi": 169, "herholz": [0, 143, 157], "hertz": [296, 297, 298, 299, 301, 302, 336, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 445, 447, 458, 459], "heschl": 92, "hesheng": [115, 195, 223, 229, 250, 254], "hesit": [117, 172], "heterogen": 158, "heurist": [138, 157, 170, 171, 232, 376, 417, 431, 432, 433, 440, 484], "hex": 442, "hhmi": 220, "hierarch": [161, 178, 179, 195, 444], "hierarchi": [115, 195, 242], "hierarchical_kmean": [51, 153, 157, 445], "hierarchical_kmeans_parcel": 51, "hierarchicalkmean": [51, 130, 153, 157], "high": [10, 32, 41, 51, 58, 66, 67, 90, 95, 115, 143, 149, 150, 151, 157, 165, 166, 171, 172, 174, 178, 180, 181, 184, 185, 191, 192, 195, 204, 205, 206, 207, 208, 221, 240, 249, 270, 281, 284, 285, 292, 296, 297, 298, 299, 301, 302, 306, 318, 321, 325, 336, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 396, 428, 441, 445, 447, 458, 459], "high_pass": [6, 34, 51, 53, 54, 55, 56, 57, 58, 60, 63, 67, 71, 90, 92, 93, 100, 101, 143, 157, 185, 296, 297, 298, 299, 301, 302, 303, 304, 318, 321, 325, 336, 359, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 445, 447, 458, 459, 470, 471], "high_variance_confound": [34, 51, 54, 55, 56, 58, 60, 67, 90, 92, 93, 133, 150, 157, 185, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 471], "higher": [6, 72, 117, 138, 157, 158, 169, 174, 176, 231, 251, 296, 297, 298, 299, 301, 302, 303, 304, 318, 331, 337, 348, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 396, 445, 446, 447, 458], "highest": [40, 54, 56, 296, 297, 298, 299, 321, 342, 460], "highli": [65, 171, 172], "highlight": [101, 181], "hilari": [115, 200, 259], "himanshu": [0, 128, 129, 130, 157], "himanshupathak21061998": [143, 144, 157], "hint": [67, 158, 159], "hinz": [115, 219, 282], "hippocampu": [224, 258], "hiroki": [42, 43, 115, 216, 272], "hist": [51, 70, 427], "histogram": [318, 327, 376, 379, 427], "histori": 171, "hkmean": 51, "hkmeans_count": 51, "hkmeans_labels_img": 51, "hoc": 171, "hochberg": [174, 317], "hocheberg": [153, 157], "hodg": [115, 209], "hold": [7, 42, 79, 129, 157, 171, 172, 181, 303, 304, 325, 382, 393, 445], "hole": 95, "holland": [0, 143, 146, 157], "hollinshead": [115, 223, 229, 250, 254], "holm": [115, 192, 223, 250, 336, 459], "holtzheim": [115, 198, 243], "home": [2, 3, 4, 6, 7, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 86, 87, 88, 89, 90, 92, 93, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 180, 183, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 277, 278, 279, 280, 281, 282, 283, 284, 285, 292, 346, 471], "homedir": [135, 157], "hommel": [153, 157], "homogen": [90, 127, 157, 161, 184, 198, 238, 243, 296, 297, 298, 299, 303, 304, 351, 365, 368, 445], "homotop": [195, 238, 242], "honorio": [115, 171, 231, 234], "hood": [40, 165, 170], "hook": 172, "hopefulli": 171, "hopkin": 0, "hoptman": [115, 219, 282], "horea": [0, 140, 143, 157], "horizont": [67, 73, 81, 128, 157, 268, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 471], "horizontal_checkerboard": [66, 67, 214], "horton": [115, 191, 270], "hospit": 0, "hospitali": 0, "host": 172, "hot": 37, "hot_r": [32, 36], "hough": [115, 191, 270], "hour": [172, 180, 181, 333, 382], "hous": [3, 19, 29, 33, 34, 40, 47, 95, 98, 112, 113, 125, 157, 169, 179, 183, 184, 209, 210, 262, 296, 298, 300, 341, 343, 346, 348, 349, 362, 368, 382, 410, 426, 430, 433, 438, 440, 486], "hover": 90, "how": [0, 1, 2, 3, 4, 5, 6, 7, 10, 15, 20, 22, 27, 35, 38, 40, 42, 46, 49, 50, 51, 52, 55, 57, 58, 60, 63, 64, 65, 67, 68, 70, 72, 73, 79, 80, 85, 87, 88, 89, 90, 92, 95, 96, 101, 103, 105, 108, 109, 111, 113, 117, 125, 129, 138, 149, 150, 153, 154, 157, 159, 161, 162, 163, 164, 165, 167, 169, 171, 174, 178, 179, 180, 182, 184, 200, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 485, 487], "howard": 220, "howev": [0, 49, 50, 51, 67, 70, 72, 87, 95, 101, 158, 164, 167, 171, 174, 185, 192, 351, 358, 360, 487], "hoyo": [0, 51, 115, 146, 157, 164, 166, 298, 299, 446, 452], "hrf": [6, 66, 67, 68, 69, 129, 153, 155, 157, 164, 175, 178, 318, 320, 322, 323, 324, 325, 328, 329, 330, 487], "hrf_model": [6, 34, 63, 65, 66, 67, 69, 71, 110, 318, 320, 321, 325, 470], "hspace": [46, 51, 59], "hstack": [31, 78, 81, 308, 310, 311], "htdoc": [193, 239], "htm": [115, 305, 309], "html": [19, 30, 34, 35, 37, 51, 54, 55, 56, 58, 60, 63, 72, 76, 78, 99, 128, 143, 147, 151, 153, 157, 164, 175, 179, 185, 191, 193, 194, 210, 228, 253, 262, 296, 297, 298, 299, 318, 331, 360, 364, 367, 369, 439, 440, 441, 442, 443, 447, 455, 457, 484, 485], "html_document": 455, "html_report": [364, 367, 369, 447], "html_surfac": [126, 157], "html_view": [440, 484], "htmldocument": 455, "htmlreport": [318, 331, 364, 367, 369, 372, 447, 457], "http": [0, 19, 35, 46, 50, 58, 64, 72, 102, 115, 118, 155, 157, 158, 162, 163, 165, 170, 171, 172, 174, 180, 181, 190, 191, 192, 193, 194, 196, 197, 198, 200, 201, 203, 209, 210, 211, 212, 213, 215, 216, 217, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 234, 240, 241, 242, 243, 245, 248, 249, 250, 251, 253, 254, 259, 262, 263, 264, 268, 274, 276, 277, 279, 280, 282, 296, 297, 298, 299, 303, 305, 309, 360, 441, 442, 447, 484, 485], "httperror": [142, 157], "hu": [115, 198, 243], "huang": [0, 129, 157], "hubbard": [115, 180], "huge": [0, 67, 68, 143, 157, 201], "hugh": 220, "huguet": [0, 127, 157], "human": [0, 9, 23, 28, 32, 33, 41, 42, 43, 45, 60, 68, 72, 113, 115, 118, 169, 172, 178, 190, 195, 198, 199, 203, 204, 205, 206, 207, 208, 209, 216, 218, 221, 222, 223, 228, 229, 238, 243, 244, 249, 250, 252, 253, 254, 257, 270, 272, 273, 275, 281, 336, 360, 430, 438, 459, 486], "humanconnectom": [115, 191, 270], "hunar": [101, 115], "hundr": [6, 51, 445], "huntenburg": [0, 131, 146, 157], "hutchison": [115, 194, 241], "hvidovr": 0, "hybrid": [301, 302], "hyman": [115, 209], "hyper": [165, 166], "hyperparamet": [35, 44], "hyperplan": [301, 302], "hypothalam": [115, 209], "hypothes": [65, 174, 178], "hypothesi": [169, 174, 300, 306, 333, 382], "hz": [6, 34, 67, 71, 185, 195, 318, 325, 470], "i": [0, 2, 4, 6, 10, 12, 15, 16, 17, 19, 21, 22, 23, 24, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 115, 116, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 181, 182, 184, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 214, 217, 218, 220, 221, 223, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 474, 484, 485, 487], "i_ax": 101, "i_col": 107, "i_row": 80, "i_trial": 101, "iacovella": [115, 195], "ian": [0, 146, 157], "ic": [50, 105, 194], "ic_img": 105, "ic_map": 105, "ic_term": 105, "ic_threshold": 105, "ica": [22, 48, 52, 56, 61, 88, 93, 98, 106, 112, 113, 115, 118, 131, 157, 159, 160, 178, 179, 180, 189, 191, 194, 217, 225, 241, 251, 259, 270, 273, 286, 303, 304, 344, 353, 359, 360, 362, 364, 367, 368, 431, 433, 438, 451, 471, 484, 486, 487], "ica_aroma": [58, 153, 157, 359, 360], "ica_map": 105, "icbm": [22, 67, 76, 143, 157, 187, 263], "icbm152": [12, 152, 157, 178, 195, 263, 264, 288, 289, 291], "icbm152_2009": [12, 22, 67, 76], "icbm152nlin2009": [211, 263], "icbm_mask": 67, "id": [6, 34, 64, 70, 71, 105, 109, 118, 125, 157, 192, 209, 212, 238, 240, 249, 250, 253, 273, 275, 282, 318, 366, 456, 470], "ida": [3, 32, 33, 39, 99, 115, 210, 262], "idea": [52, 89, 95, 164, 171, 174], "ideal": [80, 107, 161, 174, 181, 195, 242], "ident": [25, 40, 69, 81, 171, 195, 336, 353, 449, 459], "identif": [73, 95, 115, 178, 191, 197, 238, 268], "identifi": [0, 30, 31, 33, 34, 52, 60, 64, 95, 115, 124, 153, 157, 162, 170, 173, 174, 177, 191, 240, 314, 318, 320, 325, 327], "idp": 201, "idrissa": [0, 130, 157], "idrobo": [0, 51, 115, 146, 157, 164, 166, 298, 299, 446, 452], "idx": [71, 250], "idx_nac": 249, "ie": [17, 155, 157, 158, 163, 183, 308, 310, 311, 364, 367, 369, 371], "ieee": [46, 50, 51, 115, 163, 170, 192, 201, 303, 304, 446, 452], "ignor": [3, 17, 22, 30, 50, 52, 71, 103, 144, 149, 157, 230, 231, 232, 273, 275, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 325, 331, 333, 356, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 428, 444, 445, 446, 447, 469], "ignorecas": 118, "ii": [115, 197, 199, 268, 360], "iii": [115, 198, 243], "ilinoi": 0, "ill": 165, "illustr": [9, 28, 51, 67, 68, 86, 91, 94, 102, 110, 113, 164, 172, 184, 185, 437, 469, 486], "im": [11, 16, 19, 22, 32, 109], "imag": [1, 2, 6, 8, 12, 13, 14, 15, 16, 19, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 64, 65, 67, 68, 70, 71, 72, 76, 77, 78, 79, 80, 81, 85, 87, 88, 89, 90, 92, 93, 95, 97, 99, 101, 102, 104, 106, 107, 108, 110, 112, 115, 116, 122, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 146, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 169, 170, 172, 174, 176, 178, 180, 182, 190, 191, 192, 193, 195, 197, 200, 201, 203, 209, 210, 211, 212, 213, 214, 216, 217, 218, 220, 221, 223, 226, 227, 228, 229, 230, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 259, 262, 263, 264, 266, 268, 269, 270, 272, 273, 274, 275, 276, 277, 279, 280, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 296, 297, 298, 299, 300, 301, 302, 303, 304, 313, 315, 318, 321, 331, 332, 333, 334, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 456, 457, 459, 460, 462, 464, 465, 466, 469, 471, 477, 486, 487], "image_10426": [2, 15], "image_filt": [118, 273], "image_id": [109, 118, 275], "image_m": 194, "image_metadata": 273, "image_path": 105, "image_term": [118, 273], "images_meta": [105, 109, 118, 218, 273, 274, 275, 276], "images_to_plot": 107, "imbalanc": 164, "imcal": 347, "img": [2, 4, 49, 52, 64, 71, 72, 78, 80, 85, 91, 102, 105, 107, 138, 146, 157, 162, 172, 183, 285, 300, 303, 304, 321, 331, 333, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 416, 418, 426, 427, 445, 447, 450, 451, 453, 454, 456, 465, 469, 484], "img1": [86, 103, 347], "img2": [86, 103, 347], "img_3d_affin": 85, "img_3d_affine_in_mm_spac": 85, "img_4d_affin": 85, "img_4d_affine_in_mm_spac": 85, "img_copi": 339, "img_count": 80, "img_fil": [359, 360], "img_filt": [101, 102, 110, 321], "img_in_mm_spac": 85, "img_length": 413, "img_path": [39, 357], "img_plot": [78, 80], "img_to_signals_label": [125, 127, 143, 146, 157, 451, 453], "img_to_signals_map": [125, 157, 450, 454], "img_valu": 447, "imgs_list": [362, 363, 364, 365, 368], "immedi": [95, 360], "impact": [44, 67, 79, 153, 157, 169, 172, 181, 185, 318, 331, 360], "imperfect": 159, "imperi": 0, "implement": [16, 50, 51, 58, 60, 67, 68, 99, 110, 129, 130, 131, 138, 140, 146, 149, 150, 153, 154, 157, 158, 161, 162, 163, 165, 167, 169, 170, 171, 172, 178, 180, 181, 186, 195, 246, 247, 296, 297, 300, 301, 302, 306, 308, 313, 318, 320, 322, 323, 324, 325, 328, 329, 330, 331, 333, 342, 359, 360, 370, 371, 372, 382, 383, 384, 386, 396, 434, 436, 437, 447, 459, 460, 471, 481], "impli": [16, 150, 157, 171, 230, 351, 373, 396], "implic": [71, 101, 115], "implicit": [6, 32, 41, 149, 157, 166, 178, 298, 299], "implicitli": [67, 69, 81, 104, 164, 171], "implictili": 6, "import": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 117, 118, 136, 142, 143, 144, 146, 151, 153, 157, 158, 159, 162, 164, 165, 166, 167, 169, 171, 172, 173, 176, 177, 178, 180, 181, 183, 184, 185, 191, 216, 240, 306, 308, 310, 311, 318, 331, 335, 338, 343, 347, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 429, 457, 463, 465, 469, 484], "important_term": 105, "importantli": [165, 167, 172], "importerror": [5, 100, 146, 157], "impos": [41, 131, 157], "imposs": 350, "impress": 69, "improv": [32, 65, 76, 115, 124, 125, 126, 128, 129, 136, 139, 142, 143, 146, 153, 154, 155, 157, 164, 165, 166, 170, 171, 172, 174, 178, 183, 185, 211, 224, 258, 263, 336, 363, 366, 370, 444, 459], "impul": [62, 74, 113, 269, 318, 420, 421, 433, 486], "impuls": [66, 68, 173, 174, 178, 318, 320, 325], "imput": [124, 157], "imread": 39, "imshow": [13, 39, 40, 42, 43, 46, 85, 159, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 418, 423, 425, 426, 428, 430, 431, 432, 433, 434, 437], "imt": 0, "inact": [6, 174], "inappropri": 38, "inbuilt": [296, 297, 298, 299], "inch": [384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410], "includ": [6, 15, 38, 41, 44, 45, 56, 60, 65, 67, 70, 78, 80, 81, 92, 101, 102, 107, 110, 122, 125, 126, 127, 128, 129, 136, 146, 148, 149, 153, 155, 157, 162, 164, 169, 170, 172, 173, 176, 178, 180, 181, 183, 189, 191, 193, 194, 195, 203, 210, 214, 223, 224, 226, 230, 237, 240, 241, 242, 249, 250, 259, 264, 278, 286, 287, 290, 296, 297, 298, 299, 300, 305, 309, 318, 331, 333, 343, 357, 358, 359, 363, 364, 365, 366, 367, 368, 370, 371, 372, 374, 375, 376, 378, 379, 382, 396, 419, 456, 475, 480], "inclus": [67, 295], "inclusion_filt": 295, "incompat": [140, 157, 318], "incomplet": [126, 157], "incongru": 176, "inconsist": [151, 157, 331, 333], "incorpor": [65, 101, 163], "incorrect": 178, "increas": [35, 45, 46, 67, 70, 80, 90, 93, 105, 106, 125, 140, 157, 168, 169, 171, 174, 178, 184, 221, 234, 333, 360, 376, 382, 417, 431, 432, 433, 440, 445, 458, 487], "increment": [67, 96, 180, 181], "inde": [6, 44, 51, 87, 158, 159, 167, 174, 319, 484], "indent": 95, "independ": [42, 50, 67, 98, 112, 113, 131, 157, 161, 163, 164, 169, 171, 174, 178, 185, 216, 217, 259, 296, 297, 298, 299, 303, 336, 343, 348, 359, 360, 362, 368, 382, 433, 438, 459, 486], "index": [2, 6, 13, 21, 24, 34, 42, 43, 52, 57, 58, 66, 67, 72, 73, 88, 89, 101, 102, 105, 127, 135, 153, 157, 162, 179, 192, 193, 240, 249, 250, 252, 260, 295, 296, 297, 298, 299, 308, 310, 311, 325, 343, 351, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 396, 435, 447, 449, 459, 469], "index_": [52, 88, 162, 447], "index_img": [2, 3, 21, 30, 31, 32, 33, 34, 35, 37, 38, 40, 51, 52, 88, 90, 93, 99, 104, 106, 159, 162, 184, 185, 337, 344], "index_of_each_map": 449, "index_to_xy_coord": 42, "indexerror": [131, 153, 157], "indi": [193, 219, 239, 282], "india": 0, "indian": 0, "indic": [10, 31, 33, 43, 52, 56, 60, 67, 73, 80, 87, 135, 138, 143, 157, 162, 169, 172, 178, 181, 183, 192, 194, 223, 228, 238, 240, 241, 244, 246, 247, 249, 250, 253, 254, 262, 273, 279, 280, 296, 297, 298, 299, 301, 302, 303, 304, 318, 321, 337, 349, 351, 352, 354, 362, 364, 365, 366, 367, 368, 369, 382, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 423, 426, 431, 432, 433, 434, 435, 436, 437, 440, 441, 443, 447, 449, 456], "indirect": [158, 159], "indirectli": [10, 110], "individu": [53, 60, 64, 67, 69, 73, 77, 79, 80, 81, 82, 95, 101, 102, 110, 115, 158, 163, 177, 178, 180, 182, 185, 190, 191, 195, 197, 202, 209, 212, 230, 231, 256, 268, 333, 380, 396, 435, 471, 487], "inertia": 444, "inf": [15, 56, 105, 336, 364, 367, 373, 376, 459, 470, 471], "infer": [12, 51, 64, 66, 77, 80, 85, 101, 104, 115, 172, 174, 177, 178, 313, 321, 333, 351, 358, 382, 418], "inferior": 92, "inferno": [370, 371, 372, 471], "infin": 15, "infinit": 351, "infinitesim": 173, "infl_left": [204, 205, 206, 207, 208, 281, 428, 441, 484], "infl_right": [204, 205, 206, 207, 208, 281, 428, 441], "inflat": [10, 24, 38, 69, 110, 115, 199, 204, 205, 206, 207, 208, 281, 284, 285, 292, 428, 434, 435, 436, 437, 441, 443, 468, 469], "influenc": [70, 171, 238, 297, 302], "info": [172, 181, 196, 273, 275, 428, 434, 435, 436, 437], "inform": [3, 6, 7, 12, 17, 19, 22, 24, 26, 30, 31, 33, 34, 35, 36, 37, 40, 42, 43, 44, 50, 51, 53, 54, 55, 56, 60, 63, 64, 67, 68, 73, 76, 78, 79, 90, 92, 93, 95, 96, 101, 102, 103, 104, 106, 107, 110, 115, 117, 118, 122, 125, 128, 140, 144, 154, 157, 158, 159, 162, 163, 164, 166, 168, 171, 172, 173, 177, 178, 180, 181, 183, 185, 190, 191, 192, 193, 194, 197, 198, 200, 201, 210, 211, 215, 216, 217, 218, 220, 224, 225, 228, 229, 230, 231, 232, 238, 240, 241, 242, 243, 248, 250, 251, 253, 254, 262, 263, 270, 271, 272, 273, 275, 277, 286, 287, 289, 290, 296, 297, 298, 299, 300, 301, 302, 303, 304, 311, 318, 331, 333, 345, 347, 351, 357, 358, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 444, 445, 446, 447, 457, 458, 459, 471, 474, 485, 487], "informat": [0, 220], "infrastructur": [172, 181], "inglat": 284, "inher": [151, 157], "inherit": [15, 127, 157, 309, 455], "ini": 181, "init": [172, 444], "init_with_figur": [384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410], "initi": [0, 3, 13, 24, 38, 50, 51, 52, 69, 95, 101, 126, 157, 162, 170, 173, 183, 185, 190, 213, 232, 234, 303, 304, 305, 309, 363, 364, 366, 367, 369, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 444, 447], "inlin": [171, 455], "inmemorymesh": [7, 434, 435, 436, 437, 443, 461, 468, 469], "inner": [296, 297, 298, 299, 356, 465, 469], "inner_mesh": [25, 465, 469], "innermost": 171, "inplac": 458, "input": [2, 3, 4, 6, 10, 15, 16, 24, 33, 40, 50, 51, 56, 57, 59, 68, 69, 71, 72, 77, 78, 80, 81, 86, 89, 93, 95, 98, 99, 110, 112, 113, 117, 125, 126, 127, 129, 132, 133, 136, 137, 138, 139, 141, 142, 143, 146, 150, 152, 153, 154, 155, 157, 161, 164, 167, 169, 171, 172, 173, 178, 182, 184, 185, 191, 214, 227, 230, 231, 232, 233, 234, 235, 236, 237, 239, 242, 243, 251, 269, 270, 296, 297, 298, 299, 300, 301, 302, 303, 304, 313, 315, 317, 318, 320, 325, 326, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 359, 362, 363, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 417, 418, 425, 426, 428, 431, 432, 433, 440, 441, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 459, 469, 471, 484, 486, 487], "input_data": [33, 36, 37, 42, 43, 44, 49, 53, 54, 55, 56, 57, 58, 60, 63, 70, 90, 92, 93, 95, 99, 100, 101, 104, 105, 106, 107, 108, 117, 153, 157], "inria": [0, 46, 115, 158, 162, 170, 201, 217, 231, 245, 248, 447], "insect": [115, 211, 263], "insensit": 165, "insert": [34, 249, 250, 318, 331, 439, 440, 441, 442, 443, 455, 457, 484], "insid": [15, 22, 25, 35, 51, 57, 99, 167, 172, 230, 231, 232, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 336, 342, 356, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 396, 418, 431, 432, 435, 436, 444, 445, 446, 447, 469], "insight": [0, 40, 58, 152, 157, 158], "inspect": [42, 50, 57, 67, 70, 72, 159, 164, 180, 193, 318, 331, 471], "inspir": [52, 170, 172, 181], "instabl": [59, 67, 171, 458], "instal": [10, 113, 124, 127, 129, 138, 143, 146, 153, 154, 157, 180, 181, 246, 247, 338, 364, 367, 369, 434, 436, 437, 447, 484], "instanc": [2, 3, 4, 6, 16, 19, 23, 24, 31, 32, 37, 42, 44, 45, 50, 51, 53, 67, 68, 69, 87, 88, 104, 108, 129, 130, 140, 146, 153, 157, 158, 159, 161, 163, 164, 172, 173, 174, 177, 178, 180, 183, 184, 230, 231, 232, 237, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 314, 315, 318, 325, 327, 331, 333, 337, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 417, 419, 423, 425, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 443, 444, 445, 446, 447, 465, 485], "instant": [336, 459], "instantan": 73, "instanti": [52, 53, 56, 90, 92, 93, 129, 153, 157, 300, 318, 393, 395, 398, 400, 402, 404, 406, 408, 410, 471], "instead": [10, 15, 33, 36, 37, 42, 43, 44, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 67, 70, 90, 92, 93, 95, 99, 100, 101, 104, 105, 106, 107, 108, 117, 124, 125, 127, 129, 131, 133, 136, 137, 139, 140, 141, 143, 146, 150, 152, 153, 154, 155, 157, 170, 171, 172, 173, 176, 184, 185, 196, 230, 231, 232, 255, 277, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 314, 318, 322, 323, 324, 328, 329, 330, 331, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 382, 444, 445, 446, 447], "institut": [0, 174, 178, 191, 192, 195, 219, 220, 240], "instruct": [67, 69, 73, 113, 124, 154, 157, 172, 179, 181, 274, 485], "insula": 105, "insular": [92, 115, 209], "int": [12, 37, 40, 42, 43, 44, 49, 50, 51, 52, 59, 64, 68, 78, 79, 80, 85, 87, 95, 96, 101, 102, 105, 107, 128, 155, 157, 162, 172, 194, 231, 234, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 310, 311, 313, 318, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 335, 337, 342, 348, 359, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 414, 417, 418, 419, 423, 425, 426, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 452, 455, 456, 457, 458, 460, 462, 463, 464, 465, 466, 469], "int32": [12, 37, 80, 87, 95, 129, 155, 157, 183, 346, 363, 364, 365, 366, 367, 368, 369], "int64": [12, 37, 51, 80, 87, 95, 102, 129, 155, 157, 183, 444, 446], "int8": [129, 155, 157, 349], "integ": [16, 60, 85, 95, 127, 133, 137, 146, 150, 153, 155, 157, 178, 183, 185, 192, 228, 232, 234, 238, 240, 242, 244, 246, 247, 249, 250, 253, 254, 273, 275, 301, 302, 303, 304, 337, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 423, 425, 426, 431, 432, 433, 435, 436, 448, 453, 454, 457], "integr": [99, 131, 146, 157, 184, 365, 471], "intel": [51, 115, 446, 452], "intellig": [0, 85, 115, 193, 195], "intend": [185, 211, 311, 351, 352], "intens": [26, 52, 65, 70, 73, 82, 89, 95, 105, 183, 184, 303, 335, 355, 359, 417, 418, 425, 431, 432, 433, 440, 447, 469, 484], "intent": 172, "intent_cod": [58, 92, 103], "intent_nam": [58, 92, 103], "intent_p1": [58, 92, 103], "intent_p2": [58, 92, 103], "intent_p3": [58, 92, 103], "inter": [101, 107, 159, 184, 185, 195, 212, 377, 379], "interact": [10, 16, 23, 49, 54, 56, 60, 101, 127, 143, 144, 148, 153, 157, 160, 162, 172, 178, 179, 180, 439, 440, 442, 487], "intercept": [44, 76, 77, 78, 80, 81, 82, 104, 108, 110, 125, 157, 169, 296, 297, 298, 299, 301, 302, 332, 333, 382], "intercept_": [296, 297, 298, 299, 301, 302], "interchang": [149, 157], "interest": [3, 6, 15, 16, 17, 24, 36, 44, 51, 53, 57, 68, 70, 71, 72, 84, 97, 99, 100, 101, 102, 106, 109, 113, 115, 118, 131, 149, 157, 158, 164, 166, 167, 169, 171, 172, 173, 174, 178, 180, 184, 185, 198, 202, 209, 238, 239, 245, 248, 250, 259, 261, 262, 263, 265, 266, 267, 268, 271, 272, 277, 279, 280, 281, 282, 284, 308, 310, 311, 341, 346, 348, 349, 353, 356, 362, 366, 396, 423, 432, 433, 435, 438, 447, 486, 487], "interestingli": 67, "interfac": [40, 64, 76, 127, 128, 149, 153, 157, 163, 171, 172, 178, 296, 297], "intermedi": [45, 69, 167, 180], "intermediari": 49, "intern": [0, 35, 40, 50, 115, 129, 157, 163, 170, 171, 172, 174, 190, 195, 221, 232, 242, 303, 304, 345, 347], "internet": [3, 51, 163, 182, 187, 487], "interpol": [10, 25, 40, 42, 43, 46, 54, 67, 76, 85, 127, 129, 135, 157, 195, 273, 350, 351, 352, 425, 426, 432, 433, 440, 459, 469], "interpret": [16, 40, 53, 70, 115, 160, 169, 170, 171, 174, 191, 192, 225, 240, 244, 246, 247, 250, 251, 254, 347, 382, 484, 487], "interrupt": 174, "intersect": [95, 184, 192, 377, 379, 380, 451], "intersect_mask": 184, "intersubject": [115, 204, 205, 206, 207, 208, 281], "interv": [66, 67, 101, 296, 297, 298, 299, 301, 302, 308, 310, 311, 446, 452, 469], "intervent": [115, 158, 230], "intra": [31, 33], "intracalcarin": 92, "intracrani": 277, "intrins": [37, 115, 161, 195, 223, 225, 229, 250, 251, 254, 360], "intro": [1, 8, 67, 113, 180, 279, 318, 334, 348, 417, 420, 421, 426, 433, 438, 456, 486], "introduc": [118, 129, 130, 136, 146, 155, 157, 164, 165, 169, 172, 185, 230, 231, 238, 300, 303, 304, 318, 331, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 444, 445, 446, 447], "introduct": [1, 8, 30, 113, 115, 124, 143, 157, 165, 167, 168, 172, 175, 177, 179, 185, 262, 296, 310, 311, 343, 348, 423, 432, 440, 486, 487], "introductori": [1, 113, 172], "inv": 49, "invalid": [60, 111, 124, 133, 157, 367, 451], "invcov": [308, 310, 311], "invers": [6, 48, 60, 61, 99, 113, 115, 148, 157, 159, 160, 164, 171, 179, 182, 232, 237, 248, 259, 308, 310, 311, 315, 362, 367, 415, 419, 429, 430, 438, 439, 444, 486, 487], "inverse_transform": [37, 42, 44, 51, 57, 93, 99, 101, 104, 105, 106, 107, 108, 111, 116, 125, 139, 146, 155, 157, 161, 230, 303, 304, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 444, 445, 446, 447, 487], "invert": [99, 106, 126, 149, 157, 171, 185, 230, 308, 310, 311, 362, 365, 368, 383, 417, 419, 423, 425, 426, 429, 431, 432, 433], "invest": 0, "investig": [72, 95, 99, 163, 210, 216, 300], "investiss": 0, "invit": 221, "involv": [67, 69, 71, 101, 115, 174, 180, 190, 238], "inward": 469, "io": [64, 102, 162, 181, 196, 200, 201, 213, 221, 245, 249, 259, 268, 441, 485], "ion": [226, 227, 279, 280], "ip": 53, "ipynb": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111], "ipython": [2, 4, 17, 164, 180, 485], "iq": [178, 193, 296, 297, 298, 299], "irb": 191, "irrespect": [174, 431], "is_exclud": 24, "is_plotly_instal": 10, "is_us": 105, "is_valid": [118, 146, 157], "isabel": [72, 115, 203], "isbi": [50, 115, 163, 303, 304], "isbn": [115, 305, 309, 310, 311], "isf": [64, 77, 80, 102, 109], "ishai": [3, 32, 33, 39, 99, 115, 210, 262], "isin": [3, 24, 30, 32, 35, 37, 38, 99, 104, 117, 118, 273], "isnan": [46, 78, 95, 104, 107, 108], "isnul": [118, 273], "isol": [6, 70, 71, 101, 164, 174, 396], "isort": [126, 129, 157], "isotrop": [162, 195], "isovoxel": 169, "israel": 0, "issu": [50, 68, 93, 129, 130, 138, 139, 140, 141, 142, 150, 152, 153, 155, 171, 172, 174, 177, 178, 282, 340, 345], "itali": 0, "item": [10, 22, 24, 34, 66, 67, 69, 71, 72, 101, 107, 118, 128, 157, 273, 274, 275, 276, 321, 365, 377, 379], "iter": [35, 55, 69, 71, 93, 106, 146, 157, 164, 169, 195, 231, 232, 234, 296, 297, 298, 299, 301, 302, 303, 304, 337, 341, 344, 345, 348, 353, 413, 445, 446, 452], "iter_img": [2, 50, 184, 343], "iterrow": 101, "itertool": 80, "its": [2, 3, 16, 20, 27, 30, 31, 32, 33, 34, 35, 36, 37, 40, 42, 46, 58, 60, 67, 69, 85, 89, 90, 91, 95, 99, 101, 117, 118, 129, 135, 138, 146, 149, 151, 153, 155, 157, 158, 161, 163, 164, 165, 167, 169, 170, 171, 172, 174, 177, 178, 181, 185, 210, 237, 250, 252, 262, 273, 274, 275, 276, 296, 297, 298, 299, 301, 302, 303, 304, 305, 309, 318, 320, 325, 331, 332, 333, 335, 346, 417, 418, 419, 423, 425, 426, 429, 431, 432, 433, 434, 435, 436, 437, 443, 444, 445, 446, 447, 471, 480], "itself": [20, 35, 67, 161, 195, 230, 231, 232, 303, 304, 341, 445, 469], "ivan": [136, 143, 157], "j": [23, 38, 42, 43, 49, 50, 51, 53, 58, 60, 68, 71, 77, 85, 100, 101, 104, 115, 118, 140, 143, 152, 157, 158, 159, 163, 165, 166, 169, 170, 178, 191, 192, 195, 197, 199, 201, 209, 211, 215, 216, 217, 218, 221, 222, 223, 224, 228, 242, 244, 245, 248, 249, 250, 252, 253, 257, 258, 260, 263, 268, 270, 271, 272, 273, 275, 278, 289, 298, 299, 303, 313, 333, 336, 359, 360, 382, 418, 459, 460, 484], "j_col": 80, "jaakkola": [115, 171, 231, 234], "jack": [115, 165, 228, 253], "jahn": 7, "jain": [0, 129, 157], "jake": [0, 146, 157], "jakob": [38, 115], "jame": [3, 32, 33, 39, 99, 115, 198, 210, 243, 262, 310, 311], "jami": [115, 220, 277], "jan": [0, 115, 119, 157, 359, 360], "janaina": [115, 170, 180, 195], "janet": [115, 190, 238], "jani": [115, 209], "januari": [115, 124, 147, 153, 157, 158], "jaqu": [0, 119, 157], "jare": [115, 190, 238], "jargon": 95, "jason": [0, 119, 129, 143, 157], "javier": [0, 151, 157], "javitt": [115, 219, 282], "jawhar": [0, 155, 157], "jean": [0, 50, 51, 72, 73, 115, 119, 140, 143, 157, 158, 161, 163, 171, 197, 203, 209, 218, 231, 234, 268, 273, 275, 303], "jeanett": [101, 115, 164, 178, 180], "jeff": [140, 157], "jeffrei": [115, 169, 190, 238], "jehan": [143, 157], "jell": [0, 77, 115, 124, 125, 157, 313], "jenkinson": [115, 191, 270], "jennif": [3, 32, 33, 39, 99, 115, 210, 262], "jensen": 471, "jeremi": [0, 129, 151, 157], "jerom": [0, 126, 127, 129, 136, 140, 142, 143, 144, 146, 147, 155, 157], "jess": [101, 115], "jessica": [60, 115, 194, 202, 222, 225, 241, 251, 256, 257], "jiang": [115, 158, 230], "jill": [115, 191, 194, 199, 209, 241, 244, 270], "jimura": [29, 47, 113, 115, 215, 271, 299, 302, 433, 486], "jimura_poldrack_2012_zmap": 41, "jitsi": 485, "jn": [115, 223, 229, 250, 254], "jneurosci": [115, 169], "job": [80, 118, 318, 331, 333, 382], "jobert": [72, 73, 115, 197, 203, 268], "joblib": [12, 34, 50, 51, 54, 55, 56, 58, 60, 93, 124, 127, 129, 146, 149, 153, 157, 161, 231, 296, 297, 298, 299, 301, 302, 303, 304, 318, 331, 337, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 445, 446, 447, 471], "jocn": [115, 220, 277], "jocn_a_00077": [115, 225, 251], "joe": [140, 157], "johann": [0, 146, 157], "johansen": [115, 191, 270], "john": [0, 38, 60, 104, 115, 140, 157, 169, 171, 194, 202, 219, 220, 241, 256, 277, 282, 382], "johnson": [0, 125, 157], "joi": [115, 359, 360, 460], "join": [64, 76, 105, 172, 469, 485], "joint_mni_imag": 343, "jointli": [65, 172, 348, 428, 434, 436, 437, 441, 443], "joliot": [115, 192, 240], "jon": [0, 148, 157], "jona": [0, 51, 115, 140, 157, 446, 452], "jonathan": [58, 60, 77, 115, 170, 195, 202, 222, 223, 229, 250, 254, 256, 257, 313, 359, 360, 418], "jordan": [115, 223, 229, 250, 254], "jordi": [0, 127, 157], "jorg": [115, 195, 223, 229, 250, 254], "joseph": [60, 115, 158, 194, 202, 241, 256], "joset": [115, 169], "josh": [101, 115], "joshi": [0, 115, 129, 157], "joshua": [0, 115, 148, 157, 223, 229, 250, 254], "josien": [115, 158, 230], "joulot": [0, 155, 157], "journal": [104, 115, 169, 180, 195, 209, 220, 223, 225, 229, 250, 251, 254, 277, 382], "jp": 216, "jpg": 194, "jqueri": [152, 157], "jr": [115, 209], "js_plotting_util": [143, 157], "json": [64, 76, 101, 102, 110, 118, 128, 157, 321, 356, 358, 359, 360], "juan": [115, 194, 241], "judg": [35, 87], "judith": [115, 194, 241], "juelich": [152, 157, 187, 247], "juli": [115, 123, 157, 158, 360], "julia": [0, 131, 146, 157], "julich": [115, 212], "julien": [73, 115, 197, 268], "julio": [0, 125, 157], "junction": 60, "june": [115, 136, 139, 142, 151, 157, 170, 180], "jung": [115, 194, 241], "jupyt": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 144, 146, 157, 164, 180, 185, 318, 331, 439, 440, 441, 442, 443, 455, 457, 484], "just": [3, 4, 6, 15, 17, 22, 40, 42, 44, 46, 51, 52, 53, 58, 60, 66, 67, 71, 72, 76, 77, 78, 80, 82, 88, 92, 99, 101, 102, 103, 111, 117, 135, 157, 162, 164, 171, 174, 180, 181, 185, 318, 331, 336, 353, 356, 359, 431, 432, 433, 440, 457, 459, 469, 484], "justifi": 0, "justin": [115, 360], "juxtaposit": 92, "j\u00fclich": 0, "k": [0, 10, 19, 23, 31, 33, 35, 36, 43, 44, 51, 53, 68, 82, 85, 92, 99, 111, 115, 129, 157, 164, 167, 169, 171, 191, 209, 232, 260, 270, 278, 296, 297, 298, 299, 301, 302, 310, 311, 318, 327, 336, 359, 360, 366, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 419, 423, 425, 426, 429, 431, 432, 433, 444, 459, 471], "k4jp8": 213, "k_init": 444, "kabani": [115, 192], "kahn": [51, 115, 446, 452], "kahnt": [115, 169], "kai": [0, 115, 129, 157, 165], "kaleido": [10, 153, 157, 434, 436, 437, 484, 485], "kalyanam": [115, 194, 241], "kamalak": [53, 100, 115, 201, 245], "kamalakar": [0, 122, 131, 133, 136, 140, 141, 143, 146, 150, 157], "kamiel": [115, 219, 282], "kamil": [115, 191, 270], "kamitani": [42, 43, 115, 216, 272], "kanaan": [0, 49, 136, 157], "kaplan": [115, 219, 282], "kardiom": 0, "karl": [6, 115, 226], "karla": [115, 158, 191, 225, 251, 270], "karlsgodt": [115, 260, 278], "kate": [115, 219, 225, 251, 282], "kathmandu": 0, "katovich": [115, 170], "katrin": 115, "keep": [3, 32, 34, 35, 37, 40, 52, 53, 56, 60, 67, 69, 70, 85, 87, 95, 99, 104, 105, 118, 122, 125, 127, 143, 150, 157, 162, 164, 165, 166, 169, 170, 172, 273, 277, 295, 297, 301, 302, 303, 336, 342, 355, 357, 374, 375, 376, 377, 378, 379, 380, 447, 448, 459, 460], "keep_masked_label": [51, 58, 92, 126, 157, 366, 450, 471], "keep_masked_map": [54, 55, 56, 126, 157, 367, 451, 471], "kei": [15, 56, 60, 67, 80, 103, 117, 118, 126, 157, 159, 172, 180, 183, 192, 238, 240, 241, 242, 243, 246, 247, 251, 254, 263, 269, 273, 296, 297, 298, 299, 305, 309, 314, 318, 325, 327, 331, 333, 357, 358, 382, 393, 396, 418, 428, 441, 463, 464, 465], "keith": [101, 115], "keller": [115, 303], "kelli": [60, 115, 195, 202, 211, 219, 222, 256, 257, 263, 282, 289, 359, 360], "kendrick": [115, 165], "kennedi": [115, 199, 209, 244], "kent": [115, 194, 241], "kept": [15, 118, 126, 157, 172, 236, 246, 247, 296, 297, 298, 299, 335, 336, 353, 371, 374, 375, 376, 377, 378, 379, 380, 447, 449, 455, 459], "keribin": [51, 115], "kern": 171, "kernel": [3, 30, 34, 35, 36, 46, 57, 95, 99, 164, 195, 297, 299, 302, 322, 323, 324, 328, 329, 330], "kevin": [0, 125, 157], "keyword": [16, 99, 118, 146, 157, 167, 171, 185, 232, 238, 273, 283, 321, 336, 347, 358, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 422, 423, 424, 425, 426, 428, 430, 431, 432, 433, 435, 436, 437, 441, 459], "kfold": [35, 37, 38, 42, 46, 301, 302], "khale": [115, 359, 360, 460], "khanuja": [115, 219, 282], "khorshidi": [115, 158, 191, 270], "kiar": [0, 146, 157], "kiefer": [115, 170], "kiehl": [115, 194, 241], "kiesling": [0, 125, 157], "kill": 67, "kim": [0, 129, 157], "kimberli": [115, 225, 251], "kind": [3, 17, 49, 52, 56, 58, 60, 80, 111, 117, 139, 157, 158, 162, 165, 171, 178, 230, 469, 484], "kindli": [50, 93, 181, 209], "king": [0, 115, 140, 143, 157, 219, 282], "kingston": 0, "kit": 195, "kj": 118, "klass": 40, "klein": 115, "kleinschmidt": [50, 115, 158, 163, 230, 303], "kline": 219, "klingenberg": [115, 170], "kmean": [153, 155, 157, 161, 179, 184, 318, 327, 444, 445], "kmeans_count": 51, "kmeans_labels_img": 51, "kmeans_parcel": 51, "knive": 185, "knop": [115, 180], "know": [7, 22, 85, 118, 171, 172, 174, 178, 237, 275], "knowledg": [60, 116, 159, 174, 369, 471], "known": [7, 12, 23, 34, 35, 40, 101, 110, 149, 164, 165, 169, 172, 174, 176, 224, 250, 308, 310, 311, 318, 418], "knutson": [115, 170], "kochunov": [115, 228, 253], "kodibagkar": [0, 126, 157], "kodituwakku": [115, 194, 241], "koen": [0, 155, 157], "koji": [115, 215, 271], "koller": [115, 171], "kollokian": [115, 192], "komesu": [115, 194, 241], "koneru": [115, 209], "kong": [115, 223, 250], "konrad": [0, 126, 157], "konstantin": [0, 119, 157], "koplewicz": [115, 219, 282], "korea": 0, "kosha": [58, 115, 359, 360], "kossaifi": [0, 119, 157], "kouw": [115, 199, 244], "kr": 0, "krain": 115, "kriegeskort": [115, 169, 180, 300], "krienen": [115, 223, 229, 250, 254], "krish": [0, 127, 157], "kristin": 115, "krzysztof": [115, 201, 218, 245, 273, 275], "kshitij": [0, 143, 144, 145, 146, 147, 148, 149, 157], "kth": [3, 17], "kuba": [115, 211, 263], "kumari": [0, 129, 157], "kun": [0, 129, 155, 157], "kwarg": [12, 19, 60, 125, 127, 128, 129, 146, 157, 238, 321, 336, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 378, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 419, 422, 423, 425, 426, 428, 429, 430, 431, 432, 433, 435, 436, 437, 444, 446, 459, 466], "kwarg_image_filt": 273, "kxm045": [115, 158], "l": [3, 7, 15, 31, 32, 33, 38, 39, 43, 46, 53, 58, 60, 70, 71, 95, 99, 115, 126, 146, 153, 157, 158, 164, 165, 170, 180, 191, 192, 195, 202, 209, 210, 220, 222, 223, 224, 225, 228, 229, 238, 240, 250, 251, 253, 254, 256, 257, 258, 262, 270, 277, 318, 331, 359, 360, 383, 385, 386, 387, 388, 389, 390, 391, 392, 411, 417, 419, 423, 425, 426, 429, 431, 432, 433, 457, 463, 464, 484], "l1": [35, 45, 115, 165, 166, 170, 231, 234, 296, 297, 298, 301, 302], "l1_ratio": [46, 301, 302], "l2": [32, 35, 40, 165, 166, 296, 298, 444, 445, 446], "la": 0, "la5c": [260, 278], "lab": 0, "label": [2, 6, 10, 16, 19, 23, 24, 30, 31, 32, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 49, 50, 51, 54, 55, 56, 60, 63, 66, 67, 68, 84, 88, 92, 95, 97, 99, 101, 104, 105, 108, 111, 113, 115, 117, 124, 125, 127, 128, 135, 138, 143, 146, 150, 151, 153, 155, 157, 159, 161, 164, 165, 167, 169, 172, 178, 183, 184, 185, 192, 194, 201, 202, 209, 210, 212, 216, 217, 221, 223, 228, 229, 238, 240, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 256, 258, 262, 272, 296, 297, 298, 299, 300, 301, 302, 314, 318, 321, 325, 327, 332, 356, 359, 360, 363, 366, 370, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 417, 418, 419, 423, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 467, 476, 486], "label_binar": 40, "label_hemispher": [49, 414], "label_idx": 92, "label_imag": 49, "label_image_left": 49, "label_image_right": 49, "label_map": 456, "label_multi": 40, "label_nam": [10, 111], "label_names_": 111, "label_seed_region": 24, "label_top": [383, 385, 386], "labelbinar": 40, "labelencod": [40, 100], "labelpad": 70, "labels_": [318, 444, 446], "labels_affin": 49, "labels_img": [24, 49, 51, 58, 92, 95, 111, 159, 363, 366, 370, 414, 448, 450, 453, 471], "labels_img_": [51, 161, 363, 366, 445], "labels_list": 414, "labels_mask": [40, 111], "laboratori": 0, "laci": [115, 228, 253], "lack": [127, 157], "ladouceur": [115, 180], "lag": [6, 49, 66, 67], "lag_cor": 49, "lag_correl": 49, "lag_correlation_matrix": 49, "lainhart": [115, 190, 238], "laird": [115, 225, 251], "lambda": 118, "lambertz": [72, 115, 203], "lan": [0, 140, 143, 157], "lancast": [115, 228, 253], "landeau": [115, 192, 240], "lane": [0, 115, 155, 157, 382], "lang": [115, 190, 209, 238], "lang_beta_seri": 101, "lang_corr": 101, "lang_seed_beta_seri": 101, "languag": [53, 72, 101, 102, 110, 115, 118, 187, 197, 203, 255, 265, 268], "language_connectivity_img": 101, "languageloc": [101, 102, 110], "languagelocalizer_desc": [101, 102, 110], "lannuzel": [140, 143, 157], "lapack": [138, 157, 171], "lar": 304, "larg": [3, 31, 32, 37, 41, 43, 50, 51, 56, 58, 66, 70, 71, 73, 93, 115, 118, 144, 157, 161, 164, 165, 166, 167, 169, 171, 172, 174, 178, 179, 180, 183, 185, 197, 211, 218, 268, 273, 275, 318, 320, 325, 364, 367, 374, 375, 376, 378, 379, 413, 445, 471], "larger": [53, 76, 81, 87, 100, 163, 165, 169, 171, 172, 174, 301, 302, 417, 431, 432, 433, 440], "largest": [139, 157, 171, 345, 374, 375, 376, 377, 378, 379, 380, 416], "largest_connected_compon": [139, 157], "largest_connected_component_img": [139, 157], "larri": [115, 199, 209, 244], "lars_path": 304, "larson": [0, 128, 140, 143, 144, 146, 157], "lashkari": [115, 223, 229, 250, 254], "lasso": [42, 59, 60, 115, 158, 165, 170, 171, 297, 299, 301, 302, 304], "lasso_regressor": [165, 297, 299], "lassocv": [126, 157, 296, 297, 298, 299], "lassolarscv": 42, "last": [3, 34, 36, 42, 57, 73, 145, 157, 174, 180, 181, 236, 237, 336, 343, 357, 463, 484, 485], "lat_fi": 471, "latent": [106, 178], "later": [3, 6, 10, 23, 24, 38, 40, 42, 64, 71, 92, 101, 102, 105, 111, 174, 183, 195, 244, 246, 247, 340, 414, 417, 423, 425, 426, 428, 432, 433, 434, 436, 437, 455, 471, 484], "latest": [129, 138, 157, 172, 181, 240, 360], "latex": [64, 124, 157, 181], "latter": [49, 165, 171, 230, 231, 232, 246, 247, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 444, 445, 446, 447], "laumann": [60, 115, 222, 223, 250, 257, 359], "launch": [148, 157, 164], "laura": [115, 219, 282], "lausann": 0, "law": 191, "lawrenc": [115, 228, 253], "layer": 90, "layout": [143, 157, 300, 384], "lda": 99, "le": [73, 115, 197, 268], "lead": [35, 49, 50, 59, 85, 124, 126, 127, 128, 129, 130, 149, 157, 170, 171, 172, 174, 178, 232, 306, 318, 364, 367, 458, 484], "leak": [384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410], "learn": [3, 22, 35, 37, 46, 48, 58, 61, 95, 98, 104, 106, 112, 113, 115, 116, 118, 122, 124, 127, 129, 131, 136, 138, 139, 140, 141, 143, 146, 151, 153, 157, 158, 159, 160, 161, 164, 165, 166, 168, 169, 171, 172, 178, 179, 181, 186, 200, 217, 230, 231, 234, 248, 259, 262, 271, 296, 297, 298, 299, 300, 303, 304, 341, 343, 344, 348, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 395, 402, 415, 416, 417, 419, 423, 430, 431, 432, 433, 438, 445, 447, 485, 486, 487], "learner": [296, 297, 298, 299, 301, 302], "learnt": 41, "least": [67, 68, 76, 101, 104, 105, 107, 115, 164, 170, 172, 304, 305, 309, 318, 327, 331, 332, 333, 364, 367, 369, 371, 376, 382, 413, 485], "leav": [18, 30, 34, 40, 164, 169, 174, 340], "leave_spac": [384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410], "leaveonegroupout": [3, 30, 31, 33, 34, 40, 99, 140, 157, 164, 167, 169, 296, 297, 298, 299], "leavepgroupsout": [296, 297, 298, 299], "lebihan": [72, 115, 203], "lectur": [115, 158, 176, 180, 230], "ledoit": [60, 171], "ledoitwolf": 230, "lee": 115, "lefort": [0, 129, 151, 157], "left": [7, 10, 13, 21, 23, 24, 26, 35, 38, 42, 46, 49, 51, 52, 53, 60, 66, 67, 68, 69, 73, 77, 78, 80, 81, 87, 95, 102, 107, 110, 111, 115, 136, 137, 141, 146, 149, 151, 157, 162, 180, 184, 192, 199, 204, 205, 206, 207, 208, 209, 216, 219, 238, 244, 246, 247, 252, 266, 268, 276, 281, 282, 284, 318, 331, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 417, 418, 419, 423, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 441, 443, 457, 463, 464, 471], "left_001": 101, "left_connectom": 49, "left_coord": 7, "left_data": 7, "left_fac": 7, "left_hemi": 49, "left_right": [384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410], "legaci": [265, 382], "legacy_format": [10, 18, 22, 44, 45, 49, 60, 76, 77, 78, 80, 81, 82, 107, 108, 153, 157, 238, 244, 245, 256, 257, 258, 266, 267, 268, 277], "legacy_output": [101, 102, 110, 265], "legarreta": [0, 148, 157], "legend": [10, 19, 31, 33, 35, 44, 45, 51, 60, 63, 68, 92, 128, 157, 435], "legend_guid": 19, "leipzig": 0, "lemaitr": [0, 143, 146, 157], "len": [3, 13, 23, 31, 33, 34, 35, 40, 49, 50, 53, 64, 65, 66, 67, 68, 72, 77, 80, 92, 95, 99, 102, 105, 110, 111, 118, 234, 296, 297, 298, 299, 301, 302, 308, 310, 311, 315, 331, 348, 351, 374, 376, 377, 379, 445], "length": [3, 16, 57, 68, 72, 78, 129, 157, 162, 172, 245, 248, 296, 297, 298, 299, 301, 302, 305, 309, 310, 311, 322, 323, 324, 328, 329, 330, 337, 362, 365, 368, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 417, 423, 426, 429, 430, 431, 432, 433, 445, 457, 465, 469], "leon": [0, 146, 157], "leonard": [0, 153, 157], "less": [6, 21, 40, 50, 51, 52, 58, 65, 67, 69, 72, 73, 78, 80, 89, 95, 101, 118, 143, 144, 151, 157, 169, 171, 172, 174, 181, 309, 355, 413, 487], "lessorequ": [118, 273], "lessov": [60, 115, 202, 256], "lessthan": [118, 273], "let": [2, 3, 4, 6, 7, 16, 24, 38, 40, 42, 51, 58, 65, 67, 69, 71, 73, 76, 78, 79, 80, 87, 94, 99, 103, 111, 165, 172, 180, 181, 335, 347], "leticia": [115, 180], "letter": 456, "level": [6, 7, 10, 11, 15, 16, 19, 22, 34, 41, 50, 51, 52, 53, 58, 65, 70, 71, 74, 76, 83, 88, 89, 98, 106, 107, 112, 115, 124, 125, 126, 127, 128, 129, 130, 149, 150, 155, 157, 160, 161, 165, 168, 171, 172, 174, 175, 176, 178, 181, 183, 187, 189, 195, 197, 227, 230, 231, 232, 234, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 284, 285, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 308, 310, 311, 313, 318, 321, 327, 331, 332, 333, 334, 336, 341, 342, 347, 352, 355, 356, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 378, 380, 382, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 419, 420, 421, 425, 426, 427, 431, 432, 433, 434, 435, 436, 437, 438, 440, 444, 445, 446, 447, 452, 455, 456, 457, 459, 465, 481, 484, 486, 487], "level_nam": 253, "leventh": [115, 219, 282], "leverag": [21, 149, 157, 179, 180, 296, 297, 445, 485], "lfcd": 238, "lh": 216, "li": [90, 115, 219, 282], "liam": [115, 209], "liau": [115, 359, 360, 460], "lib": [2, 3, 4, 10, 11, 12, 15, 16, 17, 19, 21, 22, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 44, 45, 49, 50, 51, 52, 54, 56, 59, 60, 63, 65, 71, 72, 76, 78, 79, 80, 87, 88, 89, 93, 96, 99, 104, 105, 106, 107, 108, 111], "liber": [49, 80], "liblinear": [35, 40, 296, 298], "librari": [5, 95, 100, 117, 143, 157, 167, 172, 175, 180, 184, 475, 484, 485, 487], "licenc": [198, 243], "licens": [0, 6, 126, 157, 240, 241, 243, 250, 254], "lie": [57, 231, 234, 366, 450], "liem": [0, 57, 144, 146, 148, 157], "life": [143, 157], "lifespan": 0, "lifetim": 193, "light": [38, 138, 144, 146, 157, 172, 333], "like": [6, 7, 10, 12, 17, 35, 37, 40, 42, 49, 51, 56, 58, 60, 67, 80, 82, 87, 90, 92, 93, 95, 101, 103, 118, 126, 146, 150, 153, 154, 155, 157, 170, 171, 172, 173, 174, 177, 178, 181, 182, 184, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 284, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 313, 315, 318, 320, 321, 331, 333, 334, 335, 336, 337, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 362, 363, 364, 365, 366, 367, 368, 369, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 417, 418, 423, 425, 426, 428, 429, 431, 432, 433, 434, 436, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 465, 469, 471, 473, 484, 487], "likelihood": [55, 171, 174, 230, 305, 308, 309, 310, 311], "likelihoodmodel": [305, 308], "likelihoodmodelresult": [129, 155, 157, 310, 311], "likewis": 162, "lilla": [115, 223, 229, 250, 254], "limbic": [115, 209], "limegreen": 19, "limit": [15, 44, 76, 89, 125, 157, 159, 169, 171, 172, 273, 360, 418], "linalg": [46, 49, 171], "linden": [58, 115, 360], "lindquist": [115, 143, 157, 336, 459], "line": [5, 10, 15, 22, 25, 38, 40, 50, 53, 92, 129, 157, 164, 171, 172, 181, 277, 336, 396, 439, 459, 469, 485], "line2d": [5, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419], "line_sample_point": 25, "linear": [3, 6, 30, 34, 35, 36, 38, 46, 67, 99, 104, 115, 140, 157, 164, 168, 173, 174, 175, 178, 179, 184, 185, 195, 211, 234, 273, 296, 297, 298, 299, 301, 302, 303, 304, 308, 310, 311, 318, 331, 336, 350, 351, 352, 360, 382, 427, 459, 469, 478, 485, 487], "linear_model": [38, 40, 42, 43, 46, 111, 304], "linear_svc": 99, "lineardiscriminantanalysi": 99, "linearli": [185, 195], "linearsegmentedcolormap": [387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 417, 418, 419, 423, 430, 431, 432, 433, 439, 440, 441, 443], "linearsvc": [53, 99, 100, 169, 296, 298], "linestyl": 53, "linewidth": [15, 19, 22, 44, 45, 50, 52, 63, 92, 431, 432, 439], "lingual": [92, 471], "lingual_l": 192, "link": [54, 115, 118, 126, 136, 143, 148, 157, 160, 164, 167, 172, 174, 178, 181, 191, 201, 240, 245, 270, 282, 384, 394, 395, 419, 487], "linkag": 430, "linspac": [5, 51, 63, 68], "lint": [128, 157, 172, 181], "linter": [129, 157, 172], "linux": 181, "liotti": [115, 228, 253], "liquid": 0, "lisandrelli": [115, 200, 259], "list": [0, 2, 3, 6, 10, 15, 16, 17, 22, 24, 31, 34, 40, 46, 49, 50, 51, 53, 55, 57, 60, 63, 64, 71, 72, 73, 76, 77, 80, 81, 86, 95, 100, 101, 102, 105, 110, 111, 117, 118, 124, 126, 127, 128, 129, 130, 131, 134, 136, 137, 138, 142, 143, 146, 152, 153, 155, 157, 158, 164, 172, 180, 181, 183, 184, 185, 192, 194, 209, 212, 216, 218, 223, 228, 230, 231, 232, 234, 236, 237, 238, 240, 241, 244, 246, 247, 248, 249, 250, 252, 253, 255, 256, 259, 260, 262, 265, 266, 267, 268, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 283, 292, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 313, 315, 316, 318, 320, 321, 325, 331, 332, 333, 334, 336, 337, 345, 346, 348, 351, 353, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 424, 427, 428, 430, 431, 434, 435, 436, 437, 442, 443, 445, 447, 448, 449, 450, 451, 456, 457, 459, 467, 468, 485], "list_of_2d_arrai": 43, "listedcolormap": [40, 429], "listen": [6, 67, 69, 70, 82, 268], "listening_gt_rest_eff_map": 6, "listening_gt_rest_z_map": 6, "liter": [331, 333], "literatur": [101, 159, 224, 238, 342, 360, 460], "littl": [76, 164, 165, 172], "liu": [115, 195, 223, 229, 250, 254, 359, 360, 460], "livio": [77, 115, 313], "ll": [2, 6, 51, 60, 301, 302], "llc": 0, "llera": [115, 359, 360], "llf": 308, "lloyd": [38, 115], "llrrrrl": 64, "lo": 0, "load": [2, 4, 6, 9, 10, 22, 24, 28, 51, 54, 55, 56, 60, 63, 64, 69, 70, 72, 78, 89, 90, 92, 94, 104, 105, 106, 107, 108, 109, 110, 111, 113, 116, 124, 125, 126, 129, 130, 136, 138, 141, 143, 152, 153, 155, 157, 160, 163, 167, 168, 171, 172, 180, 182, 184, 211, 238, 239, 242, 244, 246, 247, 248, 251, 252, 256, 257, 258, 259, 262, 263, 264, 267, 268, 271, 272, 273, 275, 277, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 303, 304, 321, 335, 346, 347, 349, 359, 360, 419, 436, 438, 439, 443, 461, 465, 467, 468, 476, 484, 486, 487], "load_confound": [58, 67, 110, 125, 126, 127, 129, 153, 157, 159, 185, 321, 360], "load_confounds_strategi": [58, 127, 153, 157, 159, 185, 359], "load_fsaverag": [10, 23, 24, 38, 69, 110, 111, 129, 157, 281, 465], "load_fsaverage_data": [10, 23, 24, 38, 69, 110, 111, 129, 157, 281], "load_img": [2, 37, 40, 94, 95, 103, 109, 136, 157, 183, 184], "load_mni152_brain_mask": [105, 136, 152, 157, 211, 263], "load_mni152_gm_mask": [152, 157, 211, 263], "load_mni152_gm_templ": [152, 157, 211, 263, 287, 289, 290, 291], "load_mni152_templ": [94, 152, 157, 211, 263, 264, 286, 288, 291, 335, 338, 343, 347, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 469], "load_mni152_wm_mask": [152, 157, 211, 263], "load_mni152_wm_templ": [152, 157, 211, 263, 288, 289, 290], "load_niimg": [144, 157], "load_nki": [24, 111, 129, 157], "load_sample_motor_activation_imag": [10, 14, 15, 16, 17, 91, 94, 125, 157, 465], "load_surf_data": [138, 157], "load_surf_mesh": [138, 155, 157, 484], "loadtxt": [42, 43], "lobe": [71, 253], "lobul": [92, 115, 209], "loc": [19, 33, 35, 44, 45, 51, 63, 68, 70, 92, 101, 383, 385, 386], "local": [22, 42, 43, 51, 62, 66, 67, 74, 77, 78, 80, 81, 82, 89, 98, 101, 102, 105, 109, 110, 112, 113, 115, 146, 147, 155, 157, 172, 173, 174, 178, 181, 183, 185, 187, 191, 216, 223, 238, 246, 247, 250, 255, 265, 266, 267, 268, 269, 272, 273, 275, 300, 341, 353, 356, 362, 368, 382, 410, 424, 425, 433, 438, 486], "local_region": [52, 162, 447, 449], "localis": [115, 178, 333, 382], "localizer_anat_filenam": 18, "localizer_dataset": [18, 78, 82, 107, 108], "localizer_ev": 73, "localizer_first_level": [66, 67, 69], "localizer_tmap_filenam": 18, "locat": [11, 16, 23, 24, 26, 30, 31, 33, 34, 35, 36, 37, 42, 43, 44, 49, 51, 54, 55, 56, 57, 58, 60, 64, 70, 76, 78, 86, 90, 92, 93, 95, 96, 102, 104, 107, 110, 143, 152, 157, 171, 174, 181, 183, 201, 231, 234, 240, 256, 258, 259, 274, 276, 300, 303, 304, 318, 337, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 471, 484], "lock": [142, 157], "log": [46, 51, 55, 78, 80, 95, 129, 133, 157, 169, 171, 305, 308, 309, 310, 311, 347, 427], "log10": [37, 44, 46, 78, 80, 95, 104, 107, 108, 333, 382, 456], "log_": [44, 104, 107, 108], "log_img": 347, "log_p_valu": 95, "log_p_values_img": 95, "logan": [115, 170], "logarithm": [78, 80, 333], "logger": [129, 157], "logic": [95, 118, 172, 295], "logical_and": [95, 104], "logical_not": [31, 37, 78, 107], "logical_or": 31, "logilab": 0, "logist": [31, 32, 115, 165, 166, 170, 296, 298, 301, 302], "logistic_l1": [31, 165, 296, 298], "logistic_l2": [31, 40, 165, 296, 298], "logisticregressioncv": [40, 126, 157, 296, 297, 298, 299], "logl": [305, 308, 309, 310, 311], "loglf": [305, 309], "loglikelihood": [305, 309], "logo_cv": 40, "logp_max_mass": [80, 333, 382], "logp_max_s": [80, 333, 382], "logp_max_t": [80, 107, 333, 382], "logp_max_tfc": [107, 333, 382], "loic": [0, 119, 120, 122, 123, 131, 133, 136, 146, 157], "lokybackend": [37, 38, 44, 45, 46, 50, 104, 107], "london": [0, 115, 178, 260, 278], "long": [51, 118, 172, 174, 359, 360, 418], "longer": [45, 106, 122, 124, 125, 126, 127, 140, 144, 146, 149, 151, 153, 155, 157, 174], "longest": 67, "look": [1, 6, 8, 24, 30, 33, 42, 46, 58, 66, 67, 69, 70, 73, 103, 106, 113, 118, 129, 143, 144, 154, 157, 164, 172, 173, 174, 180, 181, 185, 200, 262, 273, 275, 283, 353, 426, 438, 486], "loop": [35, 40, 46, 71, 101, 149, 157, 164, 171, 184, 296, 297, 298, 299], "loos": 171, "lorocv": 169, "lorrain": [115, 169], "lose": [15, 96, 484], "loss": [161, 166, 301, 360], "loss_pass": 185, "lost": 171, "lot": [66, 71, 72, 87, 122, 143, 146, 157, 158, 164, 165, 171, 172, 180, 234], "loui": [115, 195, 211, 263, 289], "love": 3, "low": [10, 44, 67, 71, 95, 106, 115, 130, 143, 149, 157, 164, 170, 171, 172, 174, 180, 181, 183, 184, 185, 227, 238, 281, 284, 285, 292, 296, 297, 298, 299, 301, 302, 336, 359, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 426, 428, 441, 445, 447, 458, 459], "low_pass": [34, 51, 53, 54, 55, 56, 57, 58, 60, 63, 90, 92, 93, 100, 101, 143, 157, 185, 296, 297, 298, 299, 301, 302, 303, 304, 336, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 445, 447, 458, 459, 471], "lower": [19, 32, 33, 40, 41, 53, 70, 78, 90, 95, 102, 110, 133, 157, 163, 166, 170, 171, 178, 184, 230, 236, 237, 296, 297, 298, 299, 308, 310, 311, 376, 379, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 416, 417, 418, 422, 423, 425, 426, 428, 429, 430, 431, 432, 433, 434, 437, 458], "lower_cutoff": [90, 376, 379], "lowest": [145, 157], "lprojector": [15, 397, 411], "lr": [15, 17, 318, 331, 388, 411, 419, 425, 429, 457, 484], "lrprojector": [15, 411], "lsa_beta_map": 101, "lsa_events_df": 101, "lsa_glm": 101, "lss": [127, 157], "lss_beta_map": 101, "lss_design_matric": 101, "lss_events_df": 101, "lss_glm": 101, "lss_transform": 101, "lt": [37, 76, 90, 92, 93, 471], "luc": [72, 115, 203], "luca": [115, 170, 195], "lucina": 115, "luisa": [0, 146, 150, 152, 157], "luke": [0, 151, 157], "lunch": 165, "lund": 0, "luz": 0, "lw": [42, 70], "ly": 447, "lyon": 0, "lyr": [15, 318, 331, 389, 411, 419, 425, 429, 457, 484], "lyrprojector": [15, 391, 411], "lyrz": [14, 15, 60, 318, 331, 390, 411, 419, 425, 429, 457, 484], "lyrzprojector": [15, 392, 411], "lyttelton": [115, 195, 242], "lzr": [15, 55, 318, 331, 391, 411, 419, 425, 429, 457, 484], "lzrprojector": [15, 389, 411], "lzry": [15, 318, 331, 392, 411, 419, 425, 429, 457, 484], "lzryprojector": [15, 390, 411], "m": [3, 13, 31, 32, 33, 39, 43, 51, 60, 67, 71, 76, 99, 101, 104, 115, 136, 157, 158, 169, 172, 178, 180, 181, 191, 192, 195, 199, 201, 202, 204, 205, 206, 207, 208, 209, 210, 221, 222, 223, 225, 228, 229, 240, 244, 249, 250, 251, 253, 254, 256, 257, 260, 262, 270, 278, 281, 308, 310, 311, 333, 382, 485], "m_cmap": 13, "ma": [21, 37, 42, 50, 52, 108], "maarten": [115, 219, 282, 359, 360], "mac": [133, 157], "macaluso": [115, 195], "macau": 0, "mach": [51, 115, 446, 452], "machin": [0, 30, 35, 46, 51, 95, 116, 150, 157, 165, 166, 167, 172, 178, 179, 200, 271, 485, 487], "machlouzarid": [115, 201, 245], "macintosh": [115, 191, 270], "mackai": [115, 191, 225, 251, 270], "mackinnon": [115, 310, 311], "maco": [129, 157], "macro": [115, 303], "macroscop": [115, 192, 240], "made": [0, 6, 22, 40, 102, 110, 125, 149, 152, 153, 157, 168, 171, 172, 174, 178, 180, 181, 220, 226, 296, 297, 298, 299, 301, 302, 382, 440, 487], "madhyastha": [140, 143, 157], "magenta": [42, 70, 484], "magic": [58, 92, 103, 417, 425, 426, 428, 432, 433], "magnet": [0, 115, 174, 178, 190, 195, 209, 242, 268], "magnetoencephalographi": 178, "magnetom": [6, 226], "magnitud": [178, 421], "maguir": [115, 209], "mai": [3, 18, 30, 31, 33, 34, 35, 36, 37, 40, 45, 51, 58, 65, 67, 72, 73, 81, 87, 99, 101, 105, 115, 117, 118, 122, 144, 146, 154, 157, 158, 164, 165, 167, 172, 174, 178, 183, 185, 191, 197, 230, 238, 268, 273, 282, 297, 302, 306, 321, 325, 333, 351, 358, 360, 364, 366, 367, 382, 434, 436, 437, 450, 456, 469], "main": [7, 31, 58, 64, 67, 68, 71, 95, 120, 155, 157, 164, 169, 172, 173, 178, 181, 183, 185, 240, 318, 320, 325, 356, 377, 379, 384], "main_deriv": 68, "main_path": 356, "mainli": 171, "maint": [123, 124, 125, 126, 127, 128, 129, 131, 133, 136, 137, 138, 140, 143, 146, 148, 151, 152, 153, 154, 155, 157, 172], "maintain": [0, 124, 146, 152, 157, 172, 181], "mainten": [153, 157], "mairal": 201, "major": [56, 95, 172, 180, 225], "make": [4, 6, 9, 16, 23, 24, 28, 31, 37, 40, 43, 49, 51, 53, 58, 60, 67, 68, 69, 70, 71, 76, 78, 80, 81, 85, 99, 106, 113, 115, 118, 124, 126, 127, 128, 129, 131, 132, 137, 143, 151, 152, 153, 155, 157, 162, 164, 165, 169, 170, 173, 177, 178, 179, 180, 183, 185, 220, 244, 252, 262, 273, 277, 284, 285, 293, 296, 297, 298, 299, 301, 302, 306, 351, 386, 387, 388, 389, 390, 391, 392, 394, 396, 397, 399, 401, 403, 405, 407, 409, 425, 428, 433, 435, 437, 438, 439, 440, 441, 443, 444, 465, 469, 484, 485, 486], "make_first_level_design_matrix": [63, 65, 71, 130, 153, 157, 173, 318, 424], "make_glm_report": [34, 63, 64, 76, 124, 150, 153, 157, 358], "make_localizer_contrast": 67, "make_pipelin": [38, 42, 46, 111], "make_second_level_design_matrix": [79, 177], "make_xi": 271, "makri": [115, 199, 209, 244], "male": [67, 209, 238], "manag": [126, 127, 157, 172, 181, 485], "mandatori": [171, 336], "mani": [3, 4, 12, 16, 24, 37, 39, 41, 43, 44, 45, 50, 51, 53, 58, 71, 80, 87, 95, 99, 100, 101, 108, 118, 151, 157, 160, 161, 162, 164, 165, 166, 167, 170, 171, 172, 174, 178, 181, 184, 185, 232, 273, 275, 296, 297, 298, 299, 300, 333, 340, 369, 382, 428, 453, 454, 469, 484], "manipul": [1, 8, 40, 57, 67, 90, 117, 138, 157, 180, 183, 262, 283, 353, 426, 438, 486, 487], "manner": [180, 425], "mannheim": 0, "manon": [0, 155, 157], "manual": [16, 17, 20, 33, 35, 36, 37, 42, 43, 44, 49, 53, 54, 55, 56, 57, 58, 60, 63, 70, 82, 84, 90, 92, 93, 97, 99, 100, 101, 104, 105, 106, 107, 108, 113, 117, 158, 164, 180, 182, 185, 249, 250, 262, 303, 304, 341, 346, 348, 349, 353, 362, 366, 423, 432, 433, 434, 436, 437, 438, 484, 486, 487], "map": [2, 3, 7, 9, 12, 15, 16, 20, 21, 23, 24, 28, 34, 38, 41, 46, 48, 52, 53, 54, 55, 56, 58, 61, 63, 64, 67, 69, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 84, 85, 88, 90, 91, 92, 93, 94, 97, 98, 100, 102, 104, 106, 110, 111, 112, 113, 115, 116, 125, 126, 127, 128, 129, 130, 131, 135, 138, 139, 143, 144, 146, 149, 150, 151, 153, 157, 158, 159, 160, 163, 165, 167, 168, 169, 172, 173, 174, 175, 178, 179, 180, 183, 184, 185, 192, 194, 195, 197, 198, 201, 203, 204, 205, 206, 207, 208, 209, 211, 212, 217, 221, 223, 225, 228, 230, 231, 232, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 259, 263, 266, 267, 268, 273, 274, 275, 276, 277, 281, 284, 285, 286, 293, 296, 297, 298, 299, 300, 301, 302, 303, 304, 313, 314, 318, 327, 331, 333, 334, 336, 338, 344, 353, 355, 358, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 382, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 416, 418, 425, 426, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 451, 454, 456, 457, 459, 465, 469, 470, 476, 480, 486, 487], "map_label": 12, "map_left": [10, 23, 24, 111, 199, 252, 484], "map_nam": [331, 333], "map_right": [10, 23, 24, 111, 199, 252], "map_typ": [109, 273], "maps_img": [49, 54, 55, 56, 159, 185, 363, 364, 366, 367, 371, 415, 431, 447, 449, 451, 454, 471], "maps_img_": [364, 367, 371], "maps_masker_": [50, 51, 52], "maraviglia": [115, 195], "march": [121, 141, 150, 157, 300], "marcu": [115, 169, 191, 220, 270, 277, 360], "marek": [115, 224, 258], "margaret": [115, 219, 282], "margeta": [0, 119, 157], "margin": [53, 351], "marginali": 471, "marguli": [115, 118, 218, 273, 275], "mari": [115, 180], "mariano": [72, 115, 203], "mario": [115, 228, 253], "marisa": [115, 223, 229, 250, 254], "mark": [42, 58, 101, 115, 158, 191, 270, 359, 360], "markdown": 195, "marked_pixel": 42, "markedli": 70, "marker": [42, 128, 144, 146, 149, 151, 157, 172, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 419, 429, 439, 440, 442, 447, 449, 487], "marker_color": [16, 42, 57, 63, 101, 144, 146, 157, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 442, 484], "marker_coord": [57, 63, 101, 144, 146, 157, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 442], "marker_label": [151, 157, 442], "marker_s": [16, 42, 57, 63, 101, 144, 146, 157, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 442, 484], "markiewicz": [0, 146, 157], "marquand": [115, 180], "marseil": 0, "martha": [115, 209], "marti": [104, 115, 228, 253, 382], "martigni": 0, "martin": [0, 115, 131, 136, 150, 157, 194, 199, 204, 205, 206, 207, 208, 211, 241, 263, 281, 336, 459], "martino": 115, "masa": [42, 43, 115, 216, 272], "mask": [3, 9, 16, 21, 24, 28, 30, 31, 32, 34, 35, 36, 40, 41, 42, 44, 45, 46, 49, 50, 51, 52, 56, 57, 58, 60, 70, 72, 76, 78, 80, 84, 92, 93, 97, 104, 106, 107, 108, 113, 116, 118, 124, 125, 127, 129, 130, 136, 137, 138, 140, 143, 146, 149, 151, 152, 153, 157, 161, 165, 168, 170, 179, 180, 182, 183, 195, 197, 203, 210, 211, 216, 231, 238, 240, 259, 261, 262, 263, 264, 268, 272, 286, 287, 290, 296, 297, 298, 299, 300, 301, 302, 303, 304, 313, 315, 318, 331, 333, 334, 335, 336, 341, 342, 343, 346, 348, 349, 353, 355, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 382, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 416, 417, 418, 423, 425, 427, 428, 432, 433, 438, 445, 446, 447, 449, 450, 451, 452, 455, 457, 459, 469, 470, 471, 476, 484, 486, 487], "mask_": [301, 302], "mask_arg": [90, 93, 185, 303, 304, 365, 368, 445, 471], "mask_atla": 95, "mask_chance_scor": 33, "mask_data": [24, 95], "mask_fac": [19, 33, 117, 183, 210, 262], "mask_face_filenam": 19, "mask_face_littl": [117, 183, 210, 262], "mask_filenam": [3, 31, 33, 36, 41, 99, 104, 117, 164], "mask_hous": [19, 33, 117, 183, 210, 262], "mask_house_filenam": 19, "mask_house_littl": [117, 183, 210, 262], "mask_img": [12, 26, 30, 33, 34, 35, 36, 37, 40, 41, 42, 43, 46, 51, 54, 55, 56, 58, 60, 67, 70, 72, 76, 90, 92, 93, 99, 104, 105, 117, 126, 140, 144, 148, 149, 153, 157, 164, 169, 172, 184, 185, 286, 300, 313, 318, 321, 331, 334, 335, 336, 342, 355, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 380, 381, 416, 418, 428, 446, 447, 449, 450, 451, 452, 453, 454, 469, 471], "mask_img_": [51, 67, 78, 80, 90, 93, 117, 185, 296, 297, 298, 299, 301, 302, 303, 304, 363, 365, 366, 368, 372], "mask_label": [12, 418], "mask_nam": 33, "mask_quality_check": [78, 107], "mask_roi": 216, "mask_scor": 33, "mask_strategi": [50, 90, 93, 106, 146, 152, 157, 185, 296, 297, 298, 299, 303, 304, 365, 368, 445, 471], "mask_typ": [50, 375, 378], "mask_vt": [3, 16, 17, 19, 31, 33, 40, 95, 99, 117, 164, 183, 210, 262], "mask_vt_filenam": [19, 95], "mask_vt_load": 40, "masked_atla": [127, 157, 450], "masked_data": [26, 100, 111, 184], "masked_less": [42, 108], "masked_pv": 108, "masked_scores_": 300, "maskedarrai": [3, 17, 30], "masker": [33, 34, 36, 37, 40, 42, 43, 44, 49, 51, 53, 54, 55, 56, 57, 58, 60, 63, 70, 90, 92, 93, 95, 98, 99, 100, 101, 104, 105, 106, 107, 108, 112, 113, 117, 123, 124, 125, 126, 127, 128, 129, 130, 131, 146, 149, 150, 151, 152, 153, 155, 157, 159, 161, 164, 167, 172, 173, 182, 184, 230, 252, 284, 285, 292, 296, 297, 298, 299, 301, 302, 303, 304, 318, 331, 333, 359, 360, 382, 427, 430, 434, 438, 445, 446, 447, 450, 451, 453, 454, 465, 486, 487], "masker_": [64, 67, 78, 80, 296, 297, 298, 299, 301, 302, 303, 304, 445], "mason": 0, "mass": [0, 60, 80, 155, 157, 333, 382, 414, 456], "mass_univari": [44, 80, 104, 107, 149, 155, 157, 169, 177], "massachusett": 0, "massimiliano": [115, 170, 195], "massiv": [98, 112, 113, 168, 262, 267, 268, 341, 343, 348, 362, 368, 382, 410, 425, 433, 438, 478, 486, 487], "master": [181, 250], "mat": [64, 361, 430], "match": [2, 6, 16, 103, 118, 125, 126, 127, 128, 146, 150, 151, 153, 157, 163, 169, 172, 178, 182, 185, 225, 240, 251, 273, 295, 296, 297, 298, 299, 301, 302, 303, 304, 318, 321, 331, 333, 337, 346, 348, 351, 356, 358, 359, 363, 364, 366, 367, 374, 376, 377, 379, 431, 445, 448, 487], "math": 102, "math_img": [78, 80, 84, 86, 97, 98, 109, 112, 113, 128, 129, 134, 157, 184, 239, 293, 346, 348, 349, 433, 438, 486], "mathbf": 46, "mathemat": [0, 134, 157, 178, 347, 473], "mathia": [0, 125, 157], "mathieu": [0, 126, 157], "matlotlib": 419, "matplolib": 10, "matplotlib": [5, 6, 9, 10, 12, 16, 19, 25, 26, 28, 31, 33, 36, 39, 40, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 70, 76, 79, 80, 81, 85, 92, 95, 100, 101, 102, 104, 107, 108, 111, 113, 122, 126, 127, 128, 133, 138, 140, 141, 143, 146, 148, 153, 154, 157, 159, 164, 184, 364, 367, 368, 369, 370, 371, 372, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 447, 484, 485, 486], "matplotlibdeprecationwarn": [2, 16, 19, 31, 37, 42, 44, 45, 50, 88, 104, 108], "matric": [3, 9, 28, 43, 49, 52, 53, 58, 62, 71, 72, 74, 81, 100, 113, 129, 131, 136, 139, 140, 150, 151, 153, 157, 158, 159, 160, 171, 173, 182, 183, 184, 186, 187, 195, 201, 230, 231, 232, 234, 237, 270, 308, 310, 311, 318, 325, 351, 421, 422, 430, 434, 436, 437, 438, 482, 486, 487], "matrix": [6, 23, 34, 38, 42, 43, 46, 49, 52, 53, 55, 63, 64, 65, 67, 69, 70, 71, 72, 75, 76, 77, 78, 80, 81, 82, 83, 85, 92, 93, 101, 102, 103, 105, 107, 113, 124, 125, 129, 130, 141, 146, 149, 157, 161, 162, 164, 165, 171, 174, 175, 176, 177, 178, 179, 180, 183, 184, 185, 203, 230, 231, 232, 233, 234, 235, 237, 261, 273, 275, 296, 297, 298, 299, 301, 302, 303, 304, 305, 308, 309, 310, 311, 316, 318, 319, 325, 327, 331, 332, 333, 338, 348, 349, 351, 354, 358, 361, 362, 365, 368, 374, 376, 377, 379, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419, 420, 421, 422, 430, 444, 445, 446, 457, 470, 486, 487], "matter": [12, 25, 44, 45, 58, 67, 76, 90, 136, 149, 152, 157, 164, 169, 171, 172, 177, 179, 184, 185, 195, 211, 220, 259, 263, 264, 277, 284, 287, 288, 289, 290, 291, 296, 297, 298, 299, 303, 304, 321, 359, 365, 368, 375, 378, 445, 469], "matthew": [104, 115, 158, 191, 219, 270, 282, 382], "matthia": [0, 119, 157], "matthieu": [0, 155, 157], "matur": [60, 115, 202, 256], "maumet": [115, 118, 218, 273, 275], "maura": [3, 32, 33, 39, 99, 115, 210, 262], "maurizio": [115, 360], "max": [0, 12, 31, 35, 44, 46, 51, 53, 55, 57, 59, 60, 70, 81, 85, 89, 104, 105, 107, 111, 115, 151, 157, 158, 171, 230, 351, 352, 382, 386, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 417, 418, 423, 425, 426, 428, 431, 432, 433, 434, 436, 437, 440, 441, 443], "max_imag": [105, 109, 118, 273], "max_it": [41, 42, 50, 59, 231, 232, 234, 296, 297, 298, 299, 301, 302], "max_iter_cv": 232, "max_n_sampl": 59, "max_no_improv": 444, "max_precis": 59, "maxim": [35, 178, 308, 310, 311, 340, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410], "maximilian": [0, 126, 157], "maximum": [16, 67, 80, 90, 93, 95, 103, 106, 127, 128, 146, 157, 169, 178, 185, 212, 230, 231, 232, 234, 239, 246, 247, 273, 282, 292, 296, 297, 298, 299, 303, 304, 305, 306, 309, 318, 327, 331, 333, 335, 353, 355, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 386, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419, 425, 445, 447, 449, 450, 484], "maxixmum": [129, 157], "maxprob": [11, 58, 92, 160, 246, 247, 487], "mayb": [67, 118, 382], "mayberg": [115, 198, 243], "mayer": [115, 194, 241], "mazoy": [115, 192, 240], "mazziotta": [115, 228, 253], "mb": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 486], "mccarthi": [115, 191, 270], "mcgill": [0, 211, 263], "mcgovern": 0, "mckai": [115, 225, 251], "mckinstri": [115, 195, 211, 263, 289], "md": [0, 250], "mean": [3, 6, 7, 15, 16, 17, 19, 22, 23, 26, 31, 32, 33, 34, 35, 36, 37, 40, 42, 43, 44, 45, 46, 49, 51, 52, 53, 57, 58, 60, 63, 67, 70, 71, 72, 78, 84, 90, 92, 93, 95, 96, 97, 99, 103, 104, 105, 106, 111, 113, 118, 130, 136, 140, 143, 146, 150, 152, 157, 158, 161, 162, 164, 171, 172, 175, 178, 180, 184, 185, 191, 198, 230, 231, 232, 234, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 292, 296, 297, 298, 299, 300, 301, 302, 303, 304, 308, 310, 311, 318, 326, 327, 331, 333, 334, 335, 337, 342, 347, 348, 359, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 382, 417, 418, 431, 432, 433, 434, 436, 437, 438, 440, 444, 445, 446, 447, 449, 450, 453, 454, 457, 459, 460, 471, 486, 487], "mean_": [49, 53, 111, 158, 230], "mean_correl": [52, 162], "mean_correlation_matrix": [49, 53], "mean_data": 111, "mean_epi_img": 31, "mean_fmri": 37, "mean_fmri_img": 104, "mean_func": 96, "mean_func_img": [51, 93], "mean_haxbi": [26, 184], "mean_haxby_img": [16, 17], "mean_imag": 71, "mean_img": [3, 6, 16, 17, 19, 26, 31, 32, 34, 37, 51, 70, 71, 72, 86, 90, 93, 95, 96, 104, 106, 111, 184, 347], "mean_img_": [34, 72], "mean_scor": [53, 100], "mean_test_scor": 100, "meaning": [99, 101, 111, 133, 143, 146, 157, 172, 174, 201, 213, 336, 459], "meaningless": [3, 164, 174, 334], "meant": [3, 6, 106, 237, 306, 455], "meanwhil": [2, 16, 19, 31, 37, 42, 44, 45, 50, 88, 104, 108, 126, 127, 157], "measur": [25, 35, 50, 51, 53, 60, 67, 78, 100, 101, 107, 115, 139, 149, 157, 158, 159, 161, 162, 168, 169, 171, 174, 178, 180, 185, 191, 193, 238, 270, 360, 427, 429, 444, 469, 484, 487], "mechan": [32, 164, 230, 231, 232, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 444, 445, 446, 447], "med": 240, "medial": [10, 24, 60, 92, 111, 115, 169, 428, 434, 436, 437], "medial_wal": [24, 471], "medialtemporallob": 258, "median": [146, 157, 195, 363, 366, 434, 436, 437, 450], "medic": [0, 46, 115, 158, 162, 170, 192, 193, 211, 217, 220, 230, 248, 263, 447], "medicin": 220, "medium": [181, 281, 284, 285, 292, 441], "meet": [115, 155, 157, 191, 195, 270, 485], "meg": [174, 178], "megan": [115, 209], "megatrawl": [9, 28, 113, 115, 133, 157, 187, 270, 430, 438, 486], "meghana": [140, 143, 157], "mehdi": [0, 53, 100, 115, 119, 123, 131, 140, 146, 157], "meisler": [0, 125, 127, 157], "melbourn": 0, "melissa": [115, 219, 282], "mem": [8, 28, 47, 61, 74, 83, 97, 112, 114, 486], "member": [172, 181, 485], "memor": [166, 174], "memori": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 135, 143, 144, 157, 161, 162, 171, 184, 185, 231, 281, 284, 285, 292, 296, 297, 298, 299, 301, 302, 303, 304, 306, 311, 318, 321, 331, 337, 341, 351, 352, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 441, 445, 446, 447, 458, 461, 462, 471, 484], "memory_": [301, 302], "memory_level": [34, 36, 37, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 90, 92, 93, 99, 100, 101, 104, 105, 106, 107, 108, 162, 185, 231, 296, 297, 298, 299, 301, 302, 303, 304, 318, 321, 331, 337, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 445, 446, 447, 471], "memoryerror": 183, "menn": [115, 219, 282, 359, 360], "mensch": [0, 50, 115, 123, 131, 133, 136, 157, 163, 201, 245, 304], "mental": [0, 67, 69, 73, 82, 115, 180, 197, 268, 274], "mention": [101, 124, 126, 127, 157, 172, 173, 174], "menuet": [143, 157], "merg": [146, 157, 161, 172, 178, 181, 184, 446], "meriaux": [73, 115, 197, 268], "merlin": [115, 303], "mert": [115, 223, 229, 250, 254], "mesh": [23, 24, 38, 69, 110, 111, 125, 129, 138, 143, 146, 151, 155, 157, 173, 178, 179, 204, 205, 206, 207, 208, 281, 284, 285, 292, 303, 304, 370, 371, 372, 396, 428, 434, 435, 436, 437, 441, 443, 445, 461, 462, 463, 464, 465, 466, 467, 468, 469, 487], "mesh_coordin": 23, "mesh_typ": [10, 24, 38, 285, 292], "mess": 37, "messag": [85, 133, 157, 172, 181, 231, 234, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 276, 277, 278, 279, 280, 282, 292, 296, 297, 298, 299, 300, 301, 302, 331, 333, 337, 348, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 378, 382, 445, 446, 447], "met": [125, 157], "meta": [0, 3, 15, 98, 101, 105, 112, 113, 118, 202, 222, 230, 231, 232, 275, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 341, 346, 347, 349, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 425, 433, 438, 444, 445, 446, 447, 486], "meta_analysis_img": 109, "metabol": [68, 174, 178], "metadata": [58, 64, 92, 103, 118, 125, 146, 157, 184, 218, 219, 230, 231, 232, 273, 274, 275, 276, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 358, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 444, 445, 446, 447], "metadata_rout": [230, 231, 232, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 444, 445, 446, 447], "metadatarequest": [230, 231, 232, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 444, 445, 446, 447], "metaprior": 46, "method": [6, 10, 15, 16, 27, 32, 37, 41, 46, 48, 50, 60, 61, 87, 90, 92, 93, 95, 101, 107, 113, 115, 116, 118, 125, 126, 127, 129, 131, 135, 139, 143, 146, 149, 150, 151, 153, 155, 157, 158, 159, 161, 165, 166, 170, 171, 172, 176, 178, 179, 180, 183, 184, 185, 191, 192, 195, 218, 224, 226, 228, 230, 231, 232, 242, 253, 259, 270, 273, 275, 296, 297, 298, 299, 300, 301, 302, 303, 304, 308, 309, 310, 311, 313, 318, 331, 333, 338, 341, 342, 343, 348, 351, 352, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 423, 432, 439, 441, 442, 443, 444, 445, 446, 447, 455, 459, 460, 484, 486, 487], "methodolog": 198, "methodologi": 212, "metric": [32, 36, 40, 42, 43, 53, 80, 146, 157, 164, 165, 169, 178, 198, 296, 298, 299], "meudec": [0, 124, 150, 151, 152, 153, 154, 155, 157], "mf": [76, 115, 191, 270], "mgh": [58, 92, 229, 254], "mgrid": [25, 85], "mgz": [144, 145, 157, 396, 434, 435, 436, 437, 443, 467], "mi": 67, "mia": [0, 127, 157], "mialab": 241, "miami": 0, "miccai": [115, 158, 230], "micha": [0, 129, 157], "michael": [0, 38, 53, 100, 115, 119, 123, 131, 143, 157, 170, 180, 193, 194, 219, 221, 241, 249, 282, 360], "michel": [0, 46, 51, 115, 119, 125, 126, 127, 129, 157, 170, 180, 197, 217, 219, 248, 268, 282], "mickl": [115, 225, 251], "microarchitectur": 174, "mid": 471, "middl": [46, 67, 92, 115, 143, 151, 157, 220, 277, 357], "midrul": 64, "midx": 102, "miezin": [60, 115, 222, 257], "might": [6, 35, 63, 103, 105, 106, 163, 167, 169, 174, 178, 181, 183, 191, 244, 259, 347, 354, 360, 369, 374, 375, 376, 378, 379, 426, 443], "migrat": [124, 157], "mikiten": [115, 228, 253], "mil": [115, 191, 270], "mila": 0, "mild": 67, "milham": [53, 100, 115, 193, 219, 282], "miller": [115, 158, 191, 225, 251, 270], "millimet": [85, 169, 185, 296, 297, 298, 299, 300, 303, 304, 318, 331, 333, 353, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 445, 447, 449, 456], "mimic": [167, 246, 247], "min": [51, 55, 57, 60, 104, 105, 151, 152, 157, 351, 352, 417, 418, 423, 425, 426, 428, 429, 431, 432, 433, 434, 436, 437, 440, 441, 443], "min_dist": [63, 318, 331, 358, 456, 457], "min_n_sampl": 59, "min_onset": [318, 320, 321, 325], "min_region_s": [52, 88, 89, 162, 447, 449], "min_siz": 448, "minc": 195, "minctracc": 195, "mind": [0, 53, 164, 165, 172, 178], "mine": [115, 180, 195, 242], "ming": [115, 209], "mini": 444, "minibatchkmean": [51, 444, 445], "miniconda": 485, "minim": [58, 64, 172, 178, 318, 320, 325, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 431], "minimalist": 3, "minimize_memori": [64, 70, 72, 76, 173, 318, 321, 331], "minimum": [34, 78, 80, 90, 103, 122, 124, 127, 129, 131, 136, 138, 139, 140, 143, 146, 149, 151, 153, 157, 162, 181, 195, 318, 331, 335, 355, 363, 366, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 413, 419, 440, 447, 448, 449, 450, 456, 457, 470], "minmaxscal": 41, "minnesota": 0, "minor": [122, 128, 139, 141, 157, 164], "minu": [118, 174], "minut": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 174, 214, 225, 226, 268], "mion": 68, "mion_response_funct": 68, "mion_time_deriv": 68, "miranda": [115, 170, 180, 195], "mirror": [181, 238, 239, 240, 241, 242, 243, 244, 248, 251, 252, 254, 262, 263, 271, 272, 277, 282, 292], "miscellan": [128, 157], "misclassif": [296, 297, 298, 299, 301, 302], "misconcept": 174, "misfit": 67, "mislabel": 181, "misleadingli": 164, "miss": [56, 78, 85, 126, 129, 152, 157, 172, 178, 325, 364, 367, 376, 379, 471], "misspecif": 67, "mit": [0, 223, 250], "mitchel": 201, "mitig": [115, 418], "mitra": [115, 359], "mix": [29, 46, 47, 113, 168, 170, 187, 238, 271, 299, 301, 302, 433, 486, 487], "miyawaki": [29, 47, 113, 115, 185, 187, 272, 338, 355, 362, 365, 368, 410, 433, 438, 471, 486], "miyawaki2008": [42, 43, 90, 471], "miyawaki2008_reconstruction_": 43, "miyawaki_dataset": [43, 90], "miyawaki_filenam": [90, 185], "miyawaki_mean_img": [90, 185], "miykael": [143, 157], "mkdir": [3, 4, 6, 7, 16, 24, 30, 34, 43, 50, 51, 57, 63, 64, 72, 73, 76, 87, 95], "mm": [4, 16, 34, 38, 57, 60, 85, 88, 92, 96, 143, 157, 162, 184, 195, 223, 224, 245, 250, 258, 318, 331, 359, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 447, 448, 449, 457, 469, 470, 471], "mm3": [6, 34, 64, 92, 195, 447, 449, 456, 470], "mmface": [227, 280], "mne": [144, 145, 157], "mni": [16, 50, 54, 56, 67, 69, 94, 102, 110, 115, 118, 136, 146, 149, 155, 157, 159, 177, 178, 180, 184, 185, 192, 195, 201, 202, 211, 212, 213, 222, 224, 240, 242, 248, 256, 257, 258, 263, 288, 289, 291, 296, 297, 298, 299, 321, 338, 369, 375, 378, 417, 419, 423, 425, 426, 431, 432, 433, 439, 440, 442, 457, 484], "mni152": [4, 40, 94, 124, 152, 157, 174, 209, 211, 212, 223, 229, 241, 243, 250, 254, 263, 264, 286, 287, 288, 289, 290, 291, 296, 297, 298, 299, 301, 302, 303, 304, 343, 365, 368, 375, 378, 431, 432, 433, 440, 445], "mni152_file_path": [4, 180], "mni152_templ": 289, "mni152nlin2009casym": [64, 129, 157, 263], "mni152nlin2009casym_desc": [49, 50, 51, 54, 55, 56, 57, 58, 60, 86, 92, 93, 96, 106], "mni152nlin2009csasym": [263, 264], "mni152nlin2009csym": 263, "mni152nlin6asym": 360, "mni152templ": [92, 318, 331, 417, 431, 432, 433, 457], "mni305": 178, "mni_icbm152_nlin_sym_09a_nifti": 263, "mni_icbm152_t1_tal_nlin_sym_09a_convert": [4, 180], "mo": 3, "moaepilot": 6, "mock": 172, "modal": [118, 164, 172, 174, 227, 280, 356], "modality_fold": 356, "mode": [9, 15, 17, 22, 28, 57, 62, 74, 84, 95, 97, 113, 115, 136, 141, 144, 150, 155, 157, 172, 173, 179, 184, 185, 191, 201, 239, 245, 248, 251, 270, 273, 275, 313, 318, 325, 343, 362, 367, 369, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 416, 428, 431, 433, 438, 447, 455, 457, 470, 471, 486, 487], "model": [6, 29, 32, 33, 34, 35, 41, 43, 46, 47, 50, 52, 53, 62, 63, 65, 69, 71, 73, 74, 75, 82, 83, 98, 99, 100, 104, 106, 107, 112, 113, 115, 124, 125, 127, 129, 140, 146, 149, 151, 153, 154, 155, 157, 158, 160, 162, 164, 168, 169, 170, 171, 172, 175, 176, 178, 179, 180, 185, 186, 191, 219, 229, 230, 231, 234, 261, 264, 265, 268, 269, 270, 272, 282, 296, 297, 298, 299, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 333, 334, 337, 338, 341, 342, 347, 348, 352, 355, 358, 359, 360, 362, 365, 368, 369, 382, 394, 395, 409, 410, 420, 421, 425, 432, 433, 438, 455, 457, 470, 471, 478, 485, 486, 487], "model_and_arg": 102, "model_ev": [130, 157, 424], "model_evalu": [296, 297, 298, 299], "model_intercept": [78, 80, 107, 333, 382], "model_select": [3, 30, 31, 33, 34, 35, 36, 37, 38, 40, 42, 44, 45, 46, 53, 99, 100, 143, 157, 164, 167, 296, 297, 298, 299], "model_titl": 68, "models_confound": [64, 101, 102, 321], "models_ev": [64, 102, 321], "models_run_img": [64, 101, 102, 321], "moder": 171, "modern": [131, 157], "modif": [172, 174, 178], "modifi": [6, 18, 51, 60, 95, 105, 136, 153, 157, 172, 185, 226, 273, 275, 351, 352, 355, 434, 436, 437, 443, 458, 459], "modify_d": 273, "modul": [5, 7, 20, 27, 33, 35, 36, 37, 42, 43, 44, 49, 52, 53, 54, 55, 56, 57, 58, 60, 63, 88, 89, 90, 92, 93, 94, 95, 99, 100, 101, 104, 105, 106, 107, 108, 115, 117, 118, 124, 125, 126, 127, 129, 131, 138, 140, 141, 149, 153, 155, 157, 167, 172, 175, 180, 181, 185, 189, 273, 277, 296, 297, 298, 299, 308, 310, 311, 325, 333, 335, 345, 347, 475, 479, 480, 481, 482, 484], "modular": [115, 172, 202, 336, 459], "modulated_ev": [65, 73], "mohammad": [0, 125, 126, 127, 129, 157], "mohlberg": 115, "moment": [24, 117], "monitor": 178, "monkei": 68, "montag": 428, "montgomeri": [115, 310, 311], "month": 181, "montreal": [174, 178, 192, 195, 240], "montr\u00e9al": 0, "mood": [115, 180], "moor": 309, "more": [2, 3, 4, 6, 7, 9, 10, 14, 15, 17, 20, 22, 23, 24, 27, 28, 29, 30, 32, 34, 41, 42, 44, 45, 48, 50, 51, 52, 54, 56, 57, 58, 60, 62, 63, 64, 67, 69, 70, 71, 72, 75, 76, 78, 80, 81, 84, 87, 90, 92, 95, 99, 101, 102, 104, 105, 107, 109, 110, 111, 113, 116, 117, 118, 120, 124, 125, 126, 129, 132, 136, 138, 140, 142, 143, 146, 148, 152, 153, 154, 157, 158, 159, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 176, 178, 180, 181, 183, 184, 185, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 203, 209, 210, 211, 212, 216, 217, 218, 220, 224, 225, 228, 229, 231, 238, 240, 241, 242, 243, 248, 250, 251, 253, 254, 259, 262, 263, 264, 268, 270, 273, 275, 277, 281, 284, 285, 286, 287, 289, 290, 292, 293, 295, 296, 297, 298, 299, 301, 302, 303, 304, 306, 308, 310, 311, 318, 321, 331, 333, 337, 348, 356, 358, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 382, 393, 395, 398, 400, 402, 404, 406, 408, 410, 417, 426, 431, 432, 433, 438, 440, 441, 444, 445, 446, 447, 449, 456, 458, 469, 471, 474, 484, 485, 486, 487], "more_smooth_anat_img": 4, "moreno": [115, 197, 219, 268, 282], "moreov": [64, 102, 129, 155, 157, 172, 180, 356], "morgan": [115, 191, 270], "morito": [42, 43, 115, 216, 272], "moritz": [0, 140, 143, 146, 157], "morpholog": [95, 184, 374, 375, 376, 378, 379], "morphologi": 178, "morphometr": 209, "morphometri": [29, 47, 75, 83, 113, 164, 175, 178, 179, 180, 187, 263, 264, 277, 297, 302, 331, 334, 341, 352, 358, 362, 368, 382, 410, 421, 433, 438, 455, 457, 470, 486, 487], "morri": [115, 220, 277], "mortem": 212, "mosaic": [16, 128, 150, 157, 393, 412, 417, 423, 426, 431, 432, 433, 457, 484], "mosaicslic": [16, 395, 398, 412], "most": [7, 25, 34, 42, 44, 45, 51, 63, 76, 95, 101, 110, 126, 140, 143, 157, 164, 165, 166, 167, 169, 171, 172, 174, 181, 184, 185, 191, 198, 212, 318, 320, 325, 426, 434, 436, 437, 443, 445, 447, 449, 463, 484], "most_frequ": 100, "mostli": [171, 355], "motion": [65, 67, 70, 102, 110, 115, 151, 157, 173, 195, 259, 318, 321, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 447, 459], "motiv": 95, "motor": [2, 15, 16, 17, 18, 53, 67, 69, 78, 80, 91, 92, 94, 98, 112, 113, 197, 268, 293, 341, 362, 368, 382, 425, 484, 486], "motor_imag": [2, 484], "mountain": 0, "mourao": [115, 170, 195], "mour\u00e3o": [115, 180], "move": [72, 125, 126, 127, 129, 131, 138, 151, 157], "movement": [58, 115, 180, 185], "movi": [50, 51, 52, 54, 56, 57, 86, 90, 93, 106, 146, 157, 160, 179, 180, 185, 200, 259, 487], "mpl": [383, 385, 386], "mr": 174, "mrg": 172, "mri": [7, 12, 43, 58, 62, 74, 95, 101, 113, 115, 117, 153, 157, 172, 173, 174, 175, 178, 180, 183, 190, 192, 195, 200, 209, 211, 220, 223, 238, 240, 250, 259, 263, 277, 320, 359, 360, 486], "mriqc": 64, "ms_e": [310, 311], "msdl": [9, 22, 28, 54, 56, 113, 159, 184, 187, 248, 343, 395, 414, 431, 433, 438, 484, 486], "msdl_atla": [21, 53, 54, 55, 56, 100, 471], "msdl_atlas_dataset": 55, "msdl_coord": [53, 100], "msdl_data": [53, 100], "msdl_roi": [54, 55, 56, 217, 248, 471], "mse": [45, 301, 302, 310], "mstep": [195, 242], "much": [0, 3, 25, 42, 44, 53, 78, 80, 100, 101, 143, 157, 164, 171, 172, 174, 180, 202, 256, 340, 351, 469], "mudassir": [0, 129, 157], "multi": [22, 29, 43, 44, 45, 47, 48, 50, 60, 61, 101, 113, 115, 127, 157, 158, 159, 160, 162, 168, 171, 178, 180, 183, 184, 185, 186, 195, 217, 227, 231, 232, 234, 242, 248, 259, 262, 280, 296, 303, 318, 362, 365, 367, 368, 415, 419, 430, 438, 471, 486, 487], "multi_nifti_maps_mask": 49, "multi_plt": 40, "multi_scal": 43, "multiclass": [36, 165], "multimod": 187, "multimodal_fac": 71, "multiniftilabelsmask": [49, 124, 126, 128, 157, 182, 471, 487], "multiniftimapsmask": [49, 124, 126, 128, 157, 182, 471, 487], "multiniftimask": [42, 43, 127, 150, 152, 157, 182, 296, 297, 298, 299, 301, 302, 303, 304, 331, 333, 382, 445, 471, 487], "multioutput": [42, 297, 302], "multioutputregressor": [297, 302], "multipca": [365, 471], "multipl": [2, 6, 20, 44, 49, 78, 80, 82, 102, 115, 125, 149, 150, 157, 160, 165, 167, 169, 172, 175, 176, 178, 182, 183, 184, 191, 195, 212, 216, 242, 243, 251, 295, 308, 326, 331, 333, 343, 346, 347, 363, 364, 365, 382, 393, 395, 398, 412, 417, 423, 426, 428, 431, 432, 433, 440, 471, 484, 487], "multiple_spatial_regress": 270, "multipli": [67, 85, 91, 136, 157, 169, 171, 237, 305, 308, 310, 311, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419, 428, 434, 436, 437, 441, 443], "multiscal": [9, 28, 42, 43, 113, 115, 125, 134, 157, 187, 216, 242, 272, 432, 438, 486], "multisit": [115, 190, 238], "multivari": [38, 98, 112, 113, 115, 163, 178, 179, 180, 194, 241, 259, 343, 348, 362, 368, 433, 438, 485, 486], "multivoxel": [101, 115, 164, 215, 271], "mumford": [101, 115, 164, 178, 180, 260, 278], "murat": [58, 115, 360], "must": [6, 35, 73, 95, 155, 157, 164, 165, 167, 169, 171, 172, 173, 174, 181, 183, 185, 191, 231, 232, 234, 240, 262, 285, 292, 296, 297, 298, 299, 300, 301, 302, 303, 305, 309, 318, 325, 331, 332, 333, 336, 342, 348, 351, 353, 358, 359, 362, 363, 365, 366, 368, 370, 374, 376, 377, 378, 379, 380, 381, 382, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419, 422, 424, 431, 433, 434, 435, 436, 437, 439, 441, 443, 445, 450, 453, 454, 456, 457, 459, 460, 463, 464, 469, 484], "mutabl": [130, 157], "mutual": [301, 302], "mvpa": [29, 113, 178, 180, 216, 487], "mw": [115, 191, 270], "mwrc1oas1_0001_mr1_mpr_anon_fslswapdim_bet": [44, 45, 76], "mwrc1oas1_0002_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0003_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0004_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0005_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0007_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0009_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0010_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0012_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0013_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0015_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0016_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0019_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0022_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0023_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0025_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0026_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0029_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0031_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0032_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0037_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0038_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0039_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0041_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0042_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0044_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0045_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0049_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0050_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0052_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0053_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0054_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0055_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0056_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0059_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0060_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0061_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0064_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0065_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0067_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0069_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0070_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0071_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0072_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0078_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0079_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0080_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0082_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0086_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0090_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0091_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0094_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0096_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0098_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0099_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0101_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0103_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0104_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0106_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0111_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0113_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0114_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0115_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0117_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0119_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0120_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0121_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0123_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0124_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0126_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0131_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0135_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0136_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0138_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0144_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0145_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0146_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0148_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0150_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0155_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0159_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0160_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0162_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0163_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0164_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0165_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0167_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0169_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0173_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0174_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0176_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0177_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0178_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0180_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0181_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0182_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0184_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0188_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0189_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0190_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0193_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0199_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0200_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0202_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0203_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0204_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0205_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0207_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0208_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0209_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0211_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0212_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0214_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0216_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0217_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0218_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0220_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0223_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0226_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc1oas1_0227_mr1_mpr_anon_fslswapdim_bet": 45, "mwrc2oas1_0001_mr1_mpr_anon_fslswapdim_bet": [44, 76], "my_funct": 181, "my_numb": 172, "myeong": [0, 153, 157], "mzayek": [0, 124, 125, 126, 127, 129, 155, 157], "n": [15, 23, 27, 40, 43, 44, 51, 52, 53, 58, 59, 60, 64, 70, 71, 76, 78, 80, 81, 85, 92, 95, 100, 101, 103, 104, 105, 107, 108, 109, 114, 115, 119, 120, 122, 123, 131, 133, 136, 157, 162, 165, 171, 172, 174, 192, 202, 209, 221, 240, 249, 256, 259, 260, 270, 278, 303, 304, 305, 309, 310, 311, 318, 327, 359, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 378, 379, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419, 429, 447, 450, 451, 459, 485], "n_add_reg": 325, "n_alpha": [232, 301, 302], "n_class": [296, 297, 298, 299, 301, 302], "n_classes_": 301, "n_clf": 43, "n_cluster": [51, 444, 446, 452], "n_clusters_": 446, "n_col": [318, 331, 333, 358, 420], "n_column": [72, 174, 237], "n_compcor": [359, 360], "n_compon": [50, 52, 93, 105, 106, 162, 303, 304, 452], "n_cond": 95, "n_cond_img": 95, "n_condit": 99, "n_confound": [230, 342, 460], "n_covar": 382, "n_cut": [131, 157, 413], "n_descriptor": [333, 382], "n_detect": [44, 104, 107], "n_displai": 59, "n_elements_": [155, 157, 363, 364, 365, 366, 367, 368, 369, 370, 371], "n_epoch": [50, 304], "n_event": [319, 320, 325], "n_featur": [43, 49, 59, 130, 157, 171, 230, 231, 232, 234, 236, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 318, 331, 444, 446, 452], "n_features_new": [300, 303, 304, 318, 331, 362, 365, 368, 444, 446], "n_features_to_select": 99, "n_fold": [3, 232, 296, 297, 298, 299, 301, 302], "n_frame": [319, 325], "n_init": [51, 303, 444], "n_iter": [50, 51, 264, 287, 290, 445, 446, 452], "n_job": [3, 32, 34, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 49, 50, 55, 59, 60, 64, 76, 77, 78, 80, 81, 82, 99, 100, 101, 102, 104, 107, 110, 167, 232, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 321, 327, 331, 333, 348, 363, 364, 365, 377, 379, 382, 445, 471], "n_l1_ratio": [301, 302], "n_label": [40, 414], "n_left_vertic": 463, "n_map": 415, "n_marker": [384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410], "n_node": [439, 442], "n_nonzero_coef": 43, "n_onset": [318, 325], "n_output": [296, 297, 300, 302, 303, 304, 318, 331, 444, 446], "n_outputs_": [296, 297, 298, 299], "n_paramet": [301, 302], "n_parcel": [23, 51, 445], "n_parcels_hemi": 23, "n_perm": [44, 78, 80, 104, 107, 333, 382], "n_point": 25, "n_refin": 232, "n_reg": 320, "n_region": [53, 92, 370, 371], "n_regions_extract": [52, 162], "n_regressor": [6, 319, 327, 333, 382], "n_right_vertic": 463, "n_roi": 250, "n_run": 104, "n_sampl": [10, 46, 78, 82, 107, 108, 130, 157, 230, 231, 232, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 336, 362, 365, 368, 382, 444, 446, 452, 458, 459, 469], "n_samples_fit": [297, 302], "n_scan": [34, 63, 65, 71, 174, 320], "n_sourc": 458, "n_split": [3, 35, 37, 38, 42, 46, 53, 100], "n_subject": [12, 24, 41, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 76, 77, 78, 79, 80, 81, 82, 86, 90, 92, 93, 96, 100, 103, 106, 107, 108, 133, 137, 157, 162, 171, 185, 230, 231, 232, 234, 238, 239, 259, 267, 268, 271, 277, 282, 292, 295], "n_t": 25, "n_time_point": [92, 93, 111, 326, 327, 463], "n_timepoint": [99, 164, 167, 371, 463], "n_vertic": [7, 24, 38, 461, 462, 463, 464, 466], "n_vertices_per_hemispher": [370, 371], "n_volum": 57, "n_voxel": [6, 57, 78, 80, 93, 99, 164, 167, 174, 303, 306, 308, 310, 311, 314, 318, 326, 327, 447], "n_z": 25, "nac": 249, "naiv": 171, "namburi": [38, 115], "name": [2, 3, 4, 6, 15, 22, 23, 27, 31, 33, 46, 53, 60, 64, 66, 73, 76, 77, 78, 80, 81, 92, 95, 101, 102, 105, 110, 117, 124, 126, 135, 144, 146, 151, 153, 155, 157, 161, 165, 169, 172, 173, 178, 180, 181, 182, 185, 191, 192, 194, 201, 202, 221, 224, 230, 231, 232, 240, 241, 243, 244, 246, 247, 248, 249, 250, 252, 253, 254, 256, 258, 268, 273, 275, 278, 279, 280, 281, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 316, 318, 319, 320, 321, 325, 331, 333, 336, 347, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 444, 445, 446, 447, 448, 450, 457, 459, 471, 487], "name_of_exampl": 172, "name_seed_region": 24, "named_step": [42, 46, 99], "namedtupl": 468, "nan": [21, 50, 52, 56, 58, 92, 95, 103, 105, 122, 126, 133, 138, 146, 150, 157, 277, 336, 351, 364, 367, 373, 376, 428, 434, 436, 437, 441, 443, 459, 469, 470, 471], "nanci": [115, 219, 282], "nano": [115, 303], "nardo": [60, 115, 202, 256], "narend": [115, 191, 270], "narr": [67, 82, 172], "narrai": [301, 302], "naselari": [115, 165], "nassir": [115, 158, 230], "natasha": [0, 124, 157], "nathan": 219, "nation": [0, 115, 169, 180, 191, 195, 225, 251, 270, 300, 360], "nativ": [6, 62, 74, 113, 125, 139, 157, 173, 226, 227, 280, 318, 325, 337, 345, 348, 351, 369, 433, 438, 486], "natur": [50, 115, 118, 174, 178, 191, 200, 218, 259, 270, 273, 275], "naturalist": [158, 159, 161, 162, 200], "navab": [115, 158, 230], "navi": 70, "navig": [143, 157], "naylor": [115, 200, 259], "nb": 49, "nbsp": [37, 51, 54, 55, 60, 64, 76, 78], "nbviewer": [37, 51, 54, 55, 60, 64, 76, 78], "nc": 243, "ncbi": [50, 72, 115, 163, 165, 203, 303], "nclass": [296, 297, 298, 299], "ncol": [31, 65, 80, 101, 102, 107, 111], "ncollect": 109, "ncolorbar": 16, "ncomput": 109, "ncut": 198, "ndarrai": [146, 157, 230, 231, 232, 233, 234, 235, 236, 237, 238, 250, 252, 256, 258, 259, 270, 271, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 314, 318, 331, 333, 336, 338, 341, 342, 348, 349, 351, 353, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 379, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 420, 427, 430, 434, 435, 436, 437, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 459, 460, 461, 462, 463, 465, 467, 468, 469], "ndarray": 231, "ndim": 381, "ndimag": [46, 95, 184, 264, 287, 290, 345, 374, 375, 376, 378, 379], "nearbi": 38, "nearest": [10, 40, 42, 43, 46, 51, 67, 76, 85, 115, 129, 146, 155, 157, 178, 273, 350, 351, 352, 425, 426, 432, 433, 440, 446, 452, 456, 469], "nearest_neighbor_group": [124, 157], "nearestneighbor": 38, "nearli": [190, 301, 302], "nebraska": 0, "necessari": [4, 64, 90, 93, 102, 110, 124, 146, 153, 157, 158, 161, 164, 172, 173, 181, 185, 192, 240, 273, 275, 282, 296, 297, 298, 299, 311, 318, 331, 368, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 471], "necessarili": [70, 162, 174, 195], "necu": [140, 157], "need": [0, 2, 3, 5, 6, 7, 10, 17, 21, 31, 32, 34, 43, 44, 50, 51, 52, 53, 57, 67, 69, 72, 76, 78, 80, 81, 82, 85, 90, 92, 93, 99, 100, 101, 105, 106, 117, 118, 143, 146, 153, 157, 158, 162, 164, 165, 166, 167, 172, 174, 177, 178, 181, 183, 184, 185, 191, 237, 305, 308, 309, 353, 358, 359, 363, 364, 366, 378, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 419, 423, 425, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 445, 469, 484, 485], "neelai": [0, 153, 157], "neg": [10, 15, 18, 44, 53, 60, 67, 78, 80, 81, 91, 104, 108, 115, 127, 150, 153, 157, 169, 174, 178, 191, 238, 270, 297, 302, 333, 334, 351, 355, 382, 425, 428, 433, 437, 447, 456, 469, 484], "neg_label": 40, "neg_log10_vfwe_pvals_img": 333, "neg_log_pv": [44, 78, 80, 104], "neg_log_pvals_anova": [107, 108], "neg_log_pvals_anova_unmask": [107, 108], "neg_log_pvals_bonferroni": 104, "neg_log_pvals_bonferroni_data": 104, "neg_log_pvals_bonferroni_unmask": 104, "neg_log_pvals_permuted_ols_unmask": [78, 107], "neg_log_pvals_tfce_unmask": 107, "neg_mean_absolute_error": [44, 297, 299], "neg_mean_squared_error": [297, 299], "negat": [54, 84, 97, 113, 293, 347, 433, 438, 486], "negative_edg": 60, "negative_stat_img": 91, "neglig": [171, 340], "neighbor": [10, 38, 51, 95, 146, 157, 179, 300, 425, 426, 432, 433, 440, 445, 446, 452, 469], "neighborhood": 161, "neighbourhood": 469, "neither": [463, 464], "nelson": [60, 115, 202, 222, 256, 257], "nepal": 0, "nest": [25, 30, 44, 149, 157, 167, 230, 231, 232, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 444, 445, 446, 447, 469], "nested_cv_scor": 35, "nested_sample_point": 25, "net": [29, 46, 47, 113, 170, 277, 296, 297, 301, 302, 433, 438, 486], "netherland": 0, "netmat": [27, 133, 157], "neto": [115, 195, 242], "network": [2, 9, 20, 21, 22, 28, 48, 49, 50, 53, 56, 57, 62, 73, 74, 84, 87, 95, 97, 102, 113, 115, 118, 129, 135, 149, 155, 157, 158, 159, 160, 162, 172, 173, 178, 179, 180, 185, 187, 190, 194, 195, 197, 202, 220, 222, 223, 224, 225, 238, 239, 241, 242, 248, 250, 251, 254, 256, 257, 258, 268, 270, 318, 325, 343, 359, 360, 362, 364, 367, 369, 395, 416, 429, 430, 431, 433, 438, 447, 455, 457, 470, 471, 484, 486, 487], "network3": 88, "networks_197": 20, "networks_444": 20, "networks_64": 20, "neural": [68, 115, 163, 174, 178, 180, 185, 197, 210, 260, 278, 300], "neuro": [163, 178, 296, 354], "neuroanatomi": 185, "neurobiolog": 178, "neuroimag": [0, 2, 7, 9, 23, 28, 38, 50, 53, 58, 64, 77, 95, 100, 101, 102, 104, 113, 115, 116, 118, 143, 146, 157, 158, 159, 163, 164, 166, 168, 169, 170, 172, 178, 179, 182, 187, 192, 195, 197, 199, 201, 209, 211, 217, 218, 224, 240, 242, 244, 245, 248, 252, 258, 262, 263, 268, 273, 275, 289, 296, 297, 298, 299, 300, 301, 302, 303, 304, 313, 318, 331, 333, 336, 337, 340, 341, 342, 343, 344, 345, 346, 348, 350, 351, 352, 353, 354, 356, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 417, 418, 423, 425, 426, 428, 431, 432, 433, 438, 440, 441, 445, 447, 450, 451, 453, 454, 457, 460, 469, 475, 484, 486, 487], "neuroinform": 118, "neuroinformat": [115, 201, 218, 220, 273, 275], "neurolog": [105, 174, 178, 192, 195, 240], "neurologi": [0, 6, 226], "neuromap": 172, "neuron": [42, 43, 60, 115, 169, 216, 222, 257, 272], "neuroparc": 172, "neurophysiologi": [115, 223, 229, 250, 254], "neuropsychiatr": [260, 278], "neuropsychologia": [115, 215, 271], "neurosci": [0, 51, 67, 73, 115, 161, 169, 178, 180, 190, 191, 194, 197, 219, 220, 225, 238, 241, 251, 268, 270, 277, 282, 487], "neurospin": [0, 62, 66, 74, 113, 172, 173, 214, 424, 438, 486], "neurostar": [172, 180, 181], "neurosynth": [101, 105, 116, 218, 273, 275, 487], "neurosynth_words_vector": 105, "neurovault": [2, 89, 98, 112, 113, 115, 116, 139, 146, 151, 155, 157, 178, 187, 273, 274, 275, 276, 286, 341, 346, 347, 349, 353, 362, 368, 425, 433, 438, 486, 487], "never": [35, 164, 171, 180, 351, 352], "nevertheless": [152, 157], "new": [0, 2, 3, 6, 12, 16, 19, 21, 31, 37, 40, 42, 44, 45, 50, 67, 72, 73, 80, 85, 87, 88, 95, 99, 104, 108, 109, 115, 117, 123, 129, 137, 138, 139, 140, 141, 154, 164, 165, 166, 167, 172, 178, 180, 181, 184, 185, 226, 230, 232, 273, 275, 296, 297, 298, 299, 300, 301, 302, 310, 311, 331, 345, 348, 349, 350, 351, 355, 374, 376, 377, 379, 382, 417, 418, 419, 420, 423, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 445, 448, 455, 484, 485], "new_img_lik": [12, 37, 49, 95, 103, 109, 126, 146, 155, 157, 184], "new_label": 448, "new_labels_img": 448, "new_titl": 107, "newaxi": [42, 46, 81, 85], "newer": [163, 273, 275], "newest": [154, 157, 273], "newli": 430, "newseg": [44, 76], "newton": 171, "next": [15, 56, 57, 60, 65, 66, 67, 69, 70, 72, 76, 79, 80, 81, 82, 141, 144, 153, 157, 159, 170, 171, 172, 174, 181, 471], "nguyen": [0, 146, 149, 151, 157], "niak": [195, 238], "nian": [115, 223, 250], "nib": 64, "nibabel": [4, 34, 37, 46, 49, 51, 54, 58, 64, 76, 82, 85, 92, 103, 124, 125, 127, 129, 137, 138, 140, 146, 151, 153, 155, 157, 171, 183, 184, 303, 304, 337, 338, 339, 346, 351, 352, 353, 363, 364, 365, 366, 367, 368, 369, 374, 375, 376, 377, 378, 379, 380, 381, 445, 447, 448, 449, 453, 454], "nice": [52, 162], "nicer": 24, "nichol": [104, 115, 118, 158, 178, 180, 191, 218, 270, 273, 275, 333, 376, 382], "nichola": [115, 190, 209, 238], "nickerson": [115, 228, 253], "nico": [60, 115, 202, 224, 256, 258], "nicola": [0, 115, 127, 150, 151, 152, 153, 154, 155, 157, 191, 225, 251, 270], "niconnect": 0, "nielsen": [115, 190, 238], "nifitmask": 359, "nifti": [2, 4, 10, 12, 17, 19, 26, 30, 31, 33, 35, 36, 37, 43, 49, 50, 51, 54, 55, 56, 58, 60, 78, 80, 85, 87, 90, 92, 93, 95, 96, 104, 106, 107, 110, 117, 127, 128, 129, 130, 131, 149, 155, 157, 159, 163, 164, 172, 182, 192, 193, 197, 200, 201, 203, 209, 210, 212, 216, 217, 218, 220, 221, 223, 228, 238, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 254, 259, 261, 262, 266, 267, 268, 271, 272, 277, 296, 297, 300, 301, 302, 303, 304, 337, 338, 341, 345, 346, 347, 351, 354, 445, 448, 469, 476, 484, 487], "nifti1": [4, 34, 37, 51, 54, 58, 76, 82, 92, 103, 146, 157, 353, 363, 364, 365, 366, 367, 368, 369, 374, 375, 376, 377, 378, 379, 380, 381, 445, 447, 448, 449, 453, 454], "nifti1head": [58, 92, 103, 347], "nifti1imag": [4, 34, 37, 42, 45, 46, 51, 54, 58, 76, 82, 85, 92, 138, 139, 141, 146, 157, 162, 183, 244, 246, 247, 249, 250, 253, 264, 271, 286, 287, 288, 289, 290, 291, 296, 297, 298, 299, 303, 304, 313, 315, 318, 331, 333, 334, 335, 337, 339, 343, 344, 346, 347, 348, 351, 352, 353, 354, 355, 363, 364, 365, 366, 367, 368, 369, 374, 375, 376, 377, 378, 379, 380, 381, 393, 398, 400, 404, 410, 414, 415, 416, 445, 447, 448, 449, 453, 454], "nifti2imag": [141, 157], "nifti_labels_mask": [51, 58], "nifti_lik": 427, "nifti_maps_mask": [54, 55], "nifti_maps_masker_": [50, 51, 52], "nifti_mask": [34, 36, 37, 44, 93, 104, 105, 107, 108, 117, 172], "nifti_spheres_mask": 60, "niftiimag": [3, 159, 172, 173, 183, 184], "niftilabelsmask": [56, 58, 84, 95, 97, 113, 126, 129, 143, 144, 146, 149, 150, 151, 153, 155, 157, 159, 182, 246, 259, 362, 363, 364, 367, 450, 453, 455, 471, 486, 487], "niftilablesmask": 92, "niftimapsmask": [53, 54, 55, 56, 92, 100, 121, 126, 143, 150, 153, 157, 159, 182, 363, 364, 366, 447, 451, 454, 471, 487], "niftimask": [12, 30, 33, 35, 36, 37, 40, 42, 43, 44, 49, 53, 54, 55, 56, 57, 58, 60, 63, 70, 84, 92, 95, 97, 99, 100, 101, 104, 105, 106, 107, 108, 113, 117, 125, 129, 143, 146, 149, 150, 151, 152, 153, 157, 164, 167, 182, 259, 272, 296, 297, 298, 299, 301, 302, 303, 304, 315, 318, 331, 333, 343, 348, 359, 360, 362, 363, 364, 366, 367, 369, 376, 382, 423, 427, 432, 433, 438, 445, 455, 471, 476, 486, 487], "niftispheresmask": [57, 60, 63, 70, 101, 123, 127, 128, 131, 133, 144, 148, 150, 157, 173, 182, 471, 487], "nightli": 172, "nih": [50, 72, 115, 163, 165, 203, 303], "nii": [2, 3, 4, 6, 11, 12, 15, 17, 19, 26, 30, 31, 33, 35, 36, 37, 43, 44, 45, 49, 50, 51, 54, 55, 56, 57, 58, 60, 64, 72, 76, 78, 86, 87, 90, 92, 93, 95, 96, 102, 104, 106, 107, 110, 117, 180, 183, 195, 201, 321, 356, 358, 359, 360, 396, 434, 443, 467, 471], "nii_asym": 195, "nii_sym": 195, "niimg": [1, 8, 34, 56, 60, 90, 92, 93, 99, 113, 117, 125, 126, 127, 140, 143, 146, 151, 155, 157, 161, 180, 182, 184, 185, 251, 276, 283, 296, 297, 298, 299, 300, 301, 302, 303, 304, 313, 318, 321, 331, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 373, 374, 375, 376, 377, 378, 379, 380, 381, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 417, 418, 423, 425, 426, 428, 431, 432, 433, 438, 440, 441, 445, 446, 447, 449, 450, 451, 452, 453, 454, 456, 457, 459, 465, 469, 471, 473, 486, 487], "niimg_convers": [127, 157], "niimng": 318, "nijmegen": 0, "nikhil": [0, 127, 157], "niko": [115, 199, 209, 244], "nikolaidi": [143, 157], "nikolau": [115, 169, 180, 300], "nilearn": [1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 116, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 136, 137, 138, 141, 143, 144, 146, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 181, 183, 184, 185, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 470, 471, 474, 484, 486, 487], "nilearn_cach": [34, 36, 37, 41, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 93, 99, 100, 101, 104, 105, 106, 107, 108, 162, 471], "nilearn_cmap": 13, "nilearn_data": [2, 3, 4, 6, 10, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 64, 66, 67, 69, 70, 71, 72, 76, 77, 78, 80, 81, 82, 86, 87, 88, 89, 90, 92, 93, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 277, 278, 279, 280, 281, 282, 283, 284, 285, 292, 471], "nilearn_doc_build": [2, 3, 4, 6, 7, 10, 11, 12, 15, 16, 17, 19, 21, 22, 24, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 54, 56, 57, 59, 60, 63, 64, 65, 71, 72, 73, 76, 78, 79, 80, 87, 88, 89, 92, 93, 95, 96, 99, 101, 102, 104, 105, 106, 107, 108, 110, 111], "nilearn_glm": [64, 76], "nilearn_shared_data": [183, 283], "nili": [115, 221, 249], "nimg": [115, 192, 199, 240], "nipi": [155, 157, 172, 179], "niprep": 360, "nipy_spectr": 423, "nipyp": 174, "nishimoto": [115, 165], "nistat": [124, 132, 149, 157], "nistats_migr": [124, 157], "nitrc": [193, 198, 219, 239, 243, 251, 282], "nki": [24, 111, 115, 129, 138, 157, 187, 282, 292], "nki_enhanced_surfac": [24, 111], "nki_nilearn": 219, "nlm": [50, 72, 115, 163, 165, 203, 303], "nmap": 13, "nmr": [229, 254], "nn": 38, "nnn": 195, "nodal": [149, 157, 429, 484], "node": [21, 24, 25, 60, 110, 144, 146, 149, 151, 157, 159, 185, 191, 238, 249, 281, 284, 285, 292, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419, 428, 429, 439, 441, 442, 469, 484], "node_cmap": [60, 429], "node_color": [141, 151, 157, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419, 439], "node_coord": [23, 144, 146, 157, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419, 429, 439], "node_kwarg": [387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419, 429], "node_s": [60, 144, 146, 153, 157, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419, 429, 439], "node_strength": 60, "node_strength_neg": 60, "node_strength_posit": 60, "node_threshold": 429, "node_valu": 429, "node_vmax": 429, "node_vmin": 429, "nois": [3, 6, 35, 46, 58, 70, 72, 95, 96, 101, 105, 115, 124, 151, 157, 159, 165, 167, 171, 174, 178, 185, 308, 310, 311, 325, 359, 360, 418, 431, 432, 460], "noise_coef": 46, "noise_model": [6, 34, 67, 318, 321, 327, 470], "noisi": [44, 93, 158], "noisier": [425, 426, 432, 433, 440], "nomenclatur": [23, 115, 199, 252], "nomin": 52, "non": [15, 16, 41, 44, 52, 58, 66, 67, 68, 78, 80, 92, 95, 104, 105, 116, 127, 128, 139, 143, 146, 150, 151, 153, 154, 157, 158, 162, 163, 169, 170, 171, 172, 177, 178, 180, 185, 190, 193, 195, 197, 198, 200, 201, 211, 217, 243, 270, 277, 296, 297, 298, 299, 303, 308, 310, 311, 318, 336, 340, 345, 351, 353, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 373, 376, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 417, 428, 432, 433, 434, 436, 437, 441, 443, 447, 453, 459, 471, 484, 487], "non_parametric_infer": [78, 80, 124, 125, 153, 155, 157, 177], "non_rest": 36, "non_steady_st": 359, "nondement": [115, 220, 277], "none": [3, 15, 16, 33, 34, 37, 42, 46, 51, 54, 55, 56, 58, 60, 64, 67, 68, 76, 78, 80, 90, 92, 93, 95, 96, 101, 103, 105, 109, 118, 125, 129, 133, 143, 146, 150, 155, 157, 172, 185, 230, 231, 232, 234, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 320, 321, 325, 327, 331, 332, 333, 334, 335, 336, 337, 342, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 463, 464, 465, 469, 470, 471, 484], "nonlinear": [115, 195, 211, 263, 289], "nonparametr": 80, "nonpres": 185, "nonstochast": [115, 382], "nonzero": [52, 353, 447], "nooner": [115, 219, 282], "noplot": 172, "nor": 185, "norihiro": [42, 43, 115, 216, 272], "norm": [46, 55, 57, 64, 77, 80, 102, 109, 230, 236, 296, 297, 298, 299, 301, 302, 303, 304, 318, 418, 444, 445, 446, 447], "norm_nois": 46, "norm_resid": [155, 157], "normal": [6, 25, 32, 38, 46, 57, 60, 69, 70, 102, 106, 110, 117, 127, 133, 157, 164, 171, 172, 173, 174, 178, 192, 211, 213, 231, 234, 240, 266, 277, 310, 311, 353, 469], "normalized_cov_beta": 309, "normalized_residu": [310, 311], "northwestern": 0, "nose": [146, 157], "notabl": [51, 159, 212], "notat": [150, 153, 157, 176, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 423, 425, 426, 428, 432, 433, 434, 436, 437], "notcontain": [118, 273], "note": [2, 3, 4, 6, 15, 16, 21, 24, 40, 44, 45, 46, 49, 50, 51, 54, 56, 57, 58, 60, 66, 67, 70, 72, 76, 77, 80, 85, 87, 90, 92, 93, 95, 96, 102, 104, 106, 110, 115, 117, 118, 125, 153, 157, 158, 159, 163, 169, 170, 171, 172, 173, 174, 176, 181, 183, 184, 185, 195, 230, 231, 232, 237, 238, 240, 241, 242, 245, 250, 251, 254, 259, 262, 263, 264, 266, 267, 270, 272, 273, 274, 275, 276, 277, 278, 282, 283, 286, 287, 290, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 318, 331, 334, 336, 342, 345, 347, 348, 351, 354, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 378, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 417, 418, 423, 425, 432, 433, 444, 445, 446, 447, 448, 459, 460, 469, 471, 484], "notebook": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 131, 143, 146, 157, 164, 180, 185, 318, 331, 360, 439, 440, 441, 442, 443, 455, 457, 484], "notequ": [118, 273], "noteworthi": [144, 157, 165], "noth": [4, 169, 232, 303, 304, 307, 309, 312, 318, 331, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 426, 428, 431, 432, 433, 440], "notic": [6, 51, 60, 67, 102, 110, 356], "notin": [118, 273], "notion": [164, 169, 357, 429], "notnul": [118, 273], "notter": [0, 143, 157], "nov": [60, 115, 222, 257], "nova": 0, "novel": 224, "novemb": [77, 115, 129, 140, 143, 146, 149, 157, 313], "now": [2, 3, 4, 6, 7, 15, 17, 21, 23, 26, 30, 40, 42, 46, 51, 52, 53, 57, 58, 64, 65, 66, 67, 69, 71, 73, 80, 82, 85, 87, 93, 94, 95, 101, 102, 103, 105, 106, 110, 111, 117, 122, 124, 125, 126, 127, 128, 129, 131, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 157, 164, 170, 172, 181, 184, 296, 297, 298, 299, 303, 304, 305, 308, 309, 310, 311, 335, 343, 347, 360, 363, 365, 366, 368, 445], "np": [5, 6, 7, 10, 12, 13, 15, 21, 23, 24, 25, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 63, 65, 66, 67, 68, 69, 71, 72, 76, 78, 80, 81, 85, 86, 88, 90, 95, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 129, 155, 157, 162, 172, 183, 184, 230, 250, 277, 307, 308, 309, 310, 311, 312, 337, 347, 382, 444, 446, 463], "nplot": 109, "npz": [203, 261], "nr": 171, "nreshap": 105, "nrg": 220, "nrow": [51, 65, 80, 101, 102, 111], "ntop": 105, "nuclei": [115, 221, 249], "nuisanc": [165, 178, 193, 195, 200, 239, 305, 308, 309, 310, 360, 459], "null": [65, 73, 80, 154, 157, 164, 169, 174, 178, 306, 333, 382], "null_cv_scor": 99, "null_duration_tri": 73, "number": [3, 30, 32, 34, 35, 40, 41, 44, 45, 51, 52, 55, 56, 57, 60, 66, 67, 69, 72, 73, 78, 80, 87, 90, 93, 95, 99, 101, 105, 106, 107, 118, 127, 128, 131, 143, 146, 149, 150, 151, 153, 157, 158, 161, 162, 164, 165, 166, 169, 172, 174, 178, 180, 181, 185, 191, 192, 195, 198, 221, 223, 229, 230, 231, 232, 234, 238, 239, 242, 245, 246, 247, 250, 251, 253, 259, 262, 264, 267, 268, 271, 273, 277, 282, 287, 290, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 309, 314, 318, 327, 331, 333, 334, 336, 338, 340, 342, 347, 348, 355, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 377, 379, 382, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 417, 418, 419, 420, 423, 425, 426, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 456, 457, 458, 459, 460, 462, 464, 466, 471, 484], "number_of_scan": 342, "number_of_subject": 109, "numer": [1, 8, 30, 34, 36, 59, 113, 150, 157, 172, 173, 185, 234, 306, 308, 310, 311, 319, 431, 432, 458, 486], "numpi": [3, 5, 6, 7, 10, 12, 13, 15, 17, 21, 23, 24, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 63, 65, 66, 67, 68, 69, 71, 72, 76, 78, 80, 81, 85, 87, 88, 90, 95, 99, 101, 102, 104, 105, 106, 107, 108, 111, 122, 124, 126, 127, 128, 129, 130, 134, 138, 140, 143, 146, 149, 151, 153, 157, 161, 162, 164, 171, 172, 181, 183, 184, 230, 231, 232, 233, 234, 235, 236, 237, 238, 244, 245, 250, 252, 256, 257, 258, 259, 296, 297, 298, 299, 300, 301, 302, 303, 304, 308, 310, 311, 314, 318, 320, 325, 327, 331, 333, 336, 337, 338, 341, 342, 343, 347, 348, 349, 351, 353, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 379, 381, 382, 386, 387, 388, 389, 390, 391, 392, 394, 396, 397, 399, 401, 403, 405, 407, 409, 414, 415, 417, 419, 420, 423, 425, 427, 429, 430, 433, 434, 435, 436, 437, 439, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 459, 460, 461, 462, 463, 465, 467, 468, 469], "numpy_convers": [133, 157], "numpydoc": 172, "nunzio": [115, 219, 282], "nutshel": 6, "nv_data": [105, 109], "ny": [115, 310, 311], "nyu": [115, 126, 157, 305, 309], "n\u00e1jera": [0, 119, 122, 131, 133, 157], "o": [60, 101, 115, 133, 157, 164, 172, 191, 192, 209, 222, 223, 238, 240, 250, 257, 270, 359], "oas1_0001_mr1": [44, 45, 76], "oas1_0002_mr1": 45, "oas1_0003_mr1": 45, "oas1_0004_mr1": 45, "oas1_0005_mr1": 45, "oas1_0007_mr1": 45, "oas1_0009_mr1": 45, "oas1_0010_mr1": 45, "oas1_0012_mr1": 45, "oas1_0013_mr1": 45, "oas1_0015_mr1": 45, "oas1_0016_mr1": 45, "oas1_0019_mr1": 45, "oas1_0022_mr1": 45, "oas1_0023_mr1": 45, "oas1_0025_mr1": 45, "oas1_0026_mr1": 45, "oas1_0029_mr1": 45, "oas1_0031_mr1": 45, "oas1_0032_mr1": 45, "oas1_0037_mr1": 45, "oas1_0038_mr1": 45, "oas1_0039_mr1": 45, "oas1_0041_mr1": 45, "oas1_0042_mr1": 45, "oas1_0044_mr1": 45, "oas1_0045_mr1": 45, "oas1_0049_mr1": 45, "oas1_0050_mr1": 45, "oas1_0052_mr1": 45, "oas1_0053_mr1": 45, "oas1_0054_mr1": 45, "oas1_0055_mr1": 45, "oas1_0056_mr1": 45, "oas1_0059_mr1": 45, "oas1_0060_mr1": 45, "oas1_0061_mr1": 45, "oas1_0064_mr1": 45, "oas1_0065_mr1": 45, "oas1_0067_mr1": 45, "oas1_0069_mr1": 45, "oas1_0070_mr1": 45, "oas1_0071_mr1": 45, "oas1_0072_mr1": 45, "oas1_0078_mr1": 45, "oas1_0079_mr1": 45, "oas1_0080_mr1": 45, "oas1_0082_mr1": 45, "oas1_0086_mr1": 45, "oas1_0090_mr1": 45, "oas1_0091_mr1": 45, "oas1_0094_mr1": 45, "oas1_0096_mr1": 45, "oas1_0098_mr1": 45, "oas1_0099_mr1": 45, "oas1_0101_mr1": 45, "oas1_0103_mr1": 45, "oas1_0104_mr1": 45, "oas1_0106_mr1": 45, "oas1_0111_mr1": 45, "oas1_0113_mr1": 45, "oas1_0114_mr1": 45, "oas1_0115_mr1": 45, "oas1_0117_mr1": 45, "oas1_0119_mr1": 45, "oas1_0120_mr1": 45, "oas1_0121_mr1": 45, "oas1_0123_mr1": 45, "oas1_0124_mr1": 45, "oas1_0126_mr1": 45, "oas1_0131_mr1": 45, "oas1_0135_mr1": 45, "oas1_0136_mr1": 45, "oas1_0138_mr1": 45, "oas1_0144_mr1": 45, "oas1_0145_mr1": 45, "oas1_0146_mr1": 45, "oas1_0148_mr1": 45, "oas1_0150_mr1": 45, "oas1_0155_mr1": 45, "oas1_0159_mr1": 45, "oas1_0160_mr1": 45, "oas1_0162_mr1": 45, "oas1_0163_mr1": 45, "oas1_0164_mr1": 45, "oas1_0165_mr1": 45, "oas1_0167_mr1": 45, "oas1_0169_mr1": 45, "oas1_0173_mr1": 45, "oas1_0174_mr1": 45, "oas1_0176_mr1": 45, "oas1_0177_mr1": 45, "oas1_0178_mr1": 45, "oas1_0180_mr1": 45, "oas1_0181_mr1": 45, "oas1_0182_mr1": 45, "oas1_0184_mr1": 45, "oas1_0188_mr1": 45, "oas1_0189_mr1": 45, "oas1_0190_mr1": 45, "oas1_0193_mr1": 45, "oas1_0199_mr1": 45, "oas1_0200_mr1": 45, "oas1_0202_mr1": 45, "oas1_0203_mr1": 45, "oas1_0204_mr1": 45, "oas1_0205_mr1": 45, "oas1_0207_mr1": 45, "oas1_0208_mr1": 45, "oas1_0209_mr1": 45, "oas1_0211_mr1": 45, "oas1_0212_mr1": 45, "oas1_0214_mr1": 45, "oas1_0216_mr1": 45, "oas1_0217_mr1": 45, "oas1_0218_mr1": 45, "oas1_0220_mr1": 45, "oas1_0223_mr1": 45, "oas1_0226_mr1": 45, "oas1_0227_mr1": 45, "oasi": [29, 47, 75, 83, 113, 115, 170, 177, 179, 187, 263, 264, 277, 297, 302, 331, 334, 341, 352, 358, 362, 368, 382, 410, 421, 433, 438, 455, 457, 470, 486], "oasis1": [44, 45, 76], "oasis_dataset": [44, 76], "oasisbrain": [220, 277], "obei": [123, 157], "obj": [172, 303, 304, 371, 445, 446, 471], "object": [2, 3, 4, 5, 6, 7, 10, 11, 14, 15, 16, 17, 18, 23, 24, 26, 29, 31, 33, 34, 37, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 65, 69, 70, 72, 76, 82, 87, 89, 90, 92, 93, 95, 99, 103, 110, 113, 115, 117, 118, 125, 126, 129, 130, 135, 138, 146, 149, 152, 153, 155, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 169, 171, 173, 178, 179, 180, 182, 184, 210, 230, 231, 232, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 284, 292, 296, 297, 298, 299, 300, 301, 302, 303, 304, 308, 310, 311, 313, 318, 321, 331, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 465, 468, 469, 471, 473, 476, 479, 484, 486, 487], "observ": [41, 46, 60, 63, 65, 67, 71, 80, 81, 82, 104, 165, 169, 173, 174, 178, 180, 185, 309, 444], "observed_timeseri": 173, "obtain": [6, 16, 23, 44, 45, 51, 56, 60, 65, 67, 69, 76, 78, 92, 95, 104, 107, 110, 153, 157, 158, 159, 161, 163, 164, 166, 169, 171, 174, 178, 185, 191, 197, 202, 222, 232, 241, 243, 251, 263, 268, 286, 287, 290, 295, 301, 302, 335, 340, 351, 355, 364, 366, 367, 369, 382, 396, 424, 447, 471], "obviou": 67, "obvious": 69, "occ": 53, "occipit": [60, 92], "occur": [68, 131, 157, 174, 178, 238, 485], "occurr": [33, 36, 37, 42, 43, 44, 49, 53, 54, 55, 56, 57, 58, 60, 63, 70, 90, 92, 93, 95, 99, 100, 101, 104, 105, 106, 107, 108, 117, 130, 157, 169], "octav": 195, "octob": [115, 143, 146, 157, 195], "odc": 213, "odd": 458, "off": [13, 15, 39, 42, 43, 67, 73, 116, 124, 136, 157, 171, 172, 195, 198, 298, 299, 318, 331, 374, 375, 376, 378, 379, 431, 432, 433, 440, 457], "offer": [163, 173, 175, 484], "offici": 485, "offlin": [273, 275, 487], "offset": [42, 53, 85, 149, 157, 184, 249, 250, 351], "often": [12, 31, 33, 36, 37, 50, 87, 93, 95, 117, 163, 164, 165, 169, 174, 178, 180, 183, 184, 185, 238, 308, 310, 311], "oftentim": 180, "ohbm": [115, 142, 157, 191, 270], "ok": 180, "okito": [42, 43, 115, 216, 272], "ol": [104, 107, 308, 310, 311, 318, 327, 382, 478], "old": [126, 146, 152, 153, 157], "oldenburg": 0, "older": [33, 36, 37, 42, 43, 44, 49, 50, 53, 54, 55, 56, 57, 58, 60, 63, 70, 90, 92, 93, 95, 99, 100, 101, 104, 105, 106, 107, 108, 115, 117, 138, 139, 140, 141, 157, 172, 183, 220, 277, 338], "olfact": 471, "oliv": [0, 70, 115, 126, 157, 169, 195, 242], "oliveira": [115, 180], "olivi": [0, 140, 157], "ols_output": 107, "olsmodel": [155, 157, 308, 310, 311], "omit": 422, "onc": [4, 37, 40, 51, 59, 72, 118, 153, 157, 158, 163, 164, 171, 173, 174, 177, 178, 181, 185, 444, 469], "one": [3, 4, 6, 7, 10, 15, 16, 17, 21, 25, 30, 31, 32, 34, 36, 37, 38, 40, 42, 46, 49, 50, 51, 57, 58, 59, 60, 65, 67, 69, 71, 72, 73, 75, 76, 78, 79, 81, 82, 83, 87, 92, 93, 95, 101, 102, 103, 105, 107, 110, 113, 117, 118, 124, 125, 127, 129, 135, 137, 140, 149, 151, 152, 153, 157, 158, 159, 162, 163, 164, 165, 169, 171, 172, 173, 174, 176, 177, 178, 180, 181, 182, 183, 185, 195, 213, 230, 232, 238, 242, 243, 249, 250, 251, 258, 264, 268, 271, 281, 284, 285, 292, 296, 297, 298, 299, 301, 303, 304, 306, 318, 320, 321, 325, 327, 331, 332, 333, 336, 337, 338, 340, 341, 343, 347, 351, 356, 358, 363, 366, 368, 370, 381, 382, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 419, 420, 425, 428, 429, 430, 431, 435, 436, 438, 440, 441, 445, 449, 450, 456, 459, 465, 469, 485, 486, 487], "one_mesh_info": [126, 157], "one_minus_pvalu": [150, 157, 306], "ones": [13, 34, 40, 46, 65, 67, 76, 80, 82, 101, 105, 107, 108, 125, 157, 166, 167, 169, 171, 301, 302, 325, 382, 444, 463], "ones_lik": 78, "onevsoneclassifi": [36, 165], "onevsrestclassifi": [36, 165], "ongo": 172, "onli": [2, 3, 6, 10, 14, 15, 20, 24, 30, 32, 33, 34, 35, 37, 38, 40, 42, 44, 45, 49, 51, 53, 54, 56, 57, 60, 67, 69, 76, 80, 82, 85, 87, 92, 95, 99, 100, 101, 102, 103, 105, 106, 110, 117, 118, 125, 128, 129, 130, 136, 141, 146, 151, 153, 154, 157, 158, 159, 161, 162, 164, 165, 166, 167, 169, 171, 172, 174, 177, 178, 181, 182, 183, 184, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 484, 487], "onlin": [50, 115, 163, 172, 198, 304, 485], "onset": [6, 34, 65, 66, 67, 68, 73, 101, 126, 149, 157, 173, 227, 280, 318, 319, 320, 322, 323, 324, 325, 328, 329, 330, 424], "ontario": 0, "onto": [10, 17, 42, 52, 69, 138, 157, 162, 172, 179, 183, 375, 378, 421, 431, 484], "onward": [129, 157], "opac": 440, "opaqu": 440, "open": [17, 23, 54, 56, 60, 90, 92, 93, 99, 115, 124, 157, 171, 172, 178, 179, 180, 182, 187, 190, 191, 201, 220, 259, 277, 306, 318, 331, 374, 375, 376, 377, 378, 379, 439, 440, 441, 442, 443, 446, 455, 457, 484, 485, 487], "open_in_brows": [10, 17, 23, 34, 54, 56, 60, 63, 64, 72, 76, 92, 93, 127, 143, 157, 185, 439, 440, 441, 442, 443, 455, 457, 484], "openfmri": 201, "openli": 277, "openneuro": [62, 74, 113, 173, 200, 215, 259, 260, 278, 295, 318, 321, 358, 361, 368, 420, 425, 427, 455, 456, 457, 470, 486], "oper": [40, 87, 90, 92, 95, 103, 106, 117, 151, 157, 164, 171, 172, 174, 178, 182, 183, 185, 230, 231, 264, 295, 318, 331, 333, 345, 347, 348, 374, 375, 376, 378, 379, 420, 473, 477, 487], "opercular": [60, 92, 471], "operculari": 92, "operto": [143, 157], "opinion": 172, "opportun": 51, "oppos": [6, 7, 82, 184, 185], "opposit": [46, 71, 169], "optim": [55, 59, 101, 115, 146, 150, 157, 165, 167, 170, 171, 201, 232, 234, 245, 351, 352], "optimist": [35, 164], "optimum": 171, "option": [9, 10, 14, 16, 22, 24, 28, 44, 53, 58, 68, 73, 90, 104, 113, 117, 122, 124, 125, 126, 127, 129, 136, 138, 139, 140, 141, 146, 149, 150, 151, 152, 153, 155, 157, 159, 164, 166, 172, 173, 178, 181, 183, 185, 230, 231, 232, 234, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 315, 318, 325, 331, 333, 334, 336, 337, 346, 348, 349, 350, 351, 353, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 457, 458, 459, 460, 469, 484, 486], "orang": 484, "orbit": [92, 471], "orcid": 172, "order": [0, 2, 3, 6, 16, 17, 24, 31, 33, 36, 37, 42, 43, 44, 51, 56, 58, 72, 80, 81, 92, 101, 104, 109, 117, 124, 129, 137, 143, 146, 151, 153, 157, 163, 169, 171, 172, 173, 178, 179, 180, 181, 183, 184, 185, 234, 256, 258, 266, 267, 286, 287, 290, 305, 309, 318, 325, 327, 331, 332, 333, 336, 338, 340, 345, 346, 350, 351, 352, 363, 364, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 378, 379, 381, 382, 417, 423, 425, 426, 428, 432, 433, 440, 447, 448, 450, 453, 458, 459, 469, 484, 485], "ordered_region": [256, 258], "ordinari": [67, 104, 107, 309, 382], "orfano": [0, 115, 124, 131, 143, 157, 172, 197, 268], "org": [0, 19, 35, 37, 51, 54, 55, 58, 60, 64, 76, 78, 115, 118, 171, 172, 174, 180, 181, 190, 191, 193, 194, 198, 200, 210, 215, 218, 219, 228, 231, 234, 239, 241, 243, 253, 259, 262, 263, 264, 273, 274, 275, 276, 282, 296, 297, 298, 299, 360, 442], "organ": [6, 7, 40, 60, 115, 133, 146, 152, 154, 157, 172, 178, 180, 195, 222, 223, 224, 229, 250, 254, 257, 333, 360, 382, 398, 468, 485], "orient": [10, 146, 149, 157, 171, 172, 350], "orig": [434, 435, 436, 437, 443, 468, 469], "origami": 0, "origin": [0, 6, 37, 40, 42, 43, 45, 51, 52, 67, 70, 72, 85, 90, 94, 101, 125, 129, 137, 150, 152, 153, 157, 161, 169, 171, 181, 185, 195, 200, 212, 230, 231, 232, 251, 259, 263, 268, 277, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 335, 355, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 418, 434, 436, 437, 441, 443, 444, 445, 446, 447, 459], "original_affin": 94, "original_shap": 94, "original_voxel": 51, "ortho": [15, 16, 64, 318, 331, 394, 395, 411, 412, 417, 419, 423, 425, 426, 429, 431, 432, 433, 457, 484], "orthogon": [143, 157, 178, 318, 320, 325, 331, 336, 384, 393, 394, 395, 398, 412, 417, 419, 423, 425, 426, 429, 431, 432, 433, 457, 459], "orthogonalmatchingpursuit": 43, "orthoprojector": [14, 15, 17, 52, 53, 54, 60, 153, 157, 411, 419, 425, 429], "orthoslic": [2, 3, 4, 11, 16, 17, 18, 26, 50, 52, 72, 76, 82, 87, 90, 95, 99, 153, 157, 393, 398, 400, 402, 404, 406, 408, 410, 412, 417, 423, 426, 431, 432, 433, 484], "oscar": [0, 143, 157], "oscil": [6, 67, 115], "osf": [162, 196, 200, 201, 213, 221, 245, 249, 259, 268], "osram": 0, "ot": [23, 169], "other": [2, 4, 6, 15, 24, 25, 32, 37, 40, 41, 42, 50, 58, 67, 69, 70, 72, 95, 99, 101, 105, 106, 115, 116, 117, 125, 143, 146, 150, 157, 158, 159, 164, 165, 166, 168, 169, 171, 172, 173, 178, 181, 183, 185, 203, 209, 212, 226, 230, 231, 232, 259, 273, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 308, 310, 311, 318, 320, 325, 331, 333, 356, 357, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 378, 382, 426, 438, 444, 445, 446, 447, 484, 487], "otherwis": [95, 104, 105, 143, 157, 174, 181, 230, 231, 232, 236, 238, 244, 245, 256, 257, 258, 266, 267, 268, 270, 277, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 321, 331, 346, 350, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 428, 431, 434, 436, 437, 440, 441, 443, 444, 445, 446, 447, 448, 459, 469], "otten": [71, 115], "our": [0, 2, 3, 15, 20, 24, 30, 35, 40, 42, 51, 53, 58, 60, 65, 67, 68, 69, 73, 95, 99, 102, 110, 111, 117, 118, 129, 143, 153, 157, 159, 164, 171, 172, 174, 181], "ourselv": 10, "out": [30, 34, 35, 36, 37, 38, 40, 42, 44, 45, 46, 50, 53, 55, 56, 57, 58, 59, 60, 72, 99, 101, 104, 107, 108, 117, 118, 127, 143, 146, 150, 157, 159, 164, 165, 167, 169, 171, 172, 173, 178, 184, 195, 218, 263, 296, 297, 298, 299, 301, 302, 343, 351, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 428, 445, 447, 448, 458, 459, 469, 484], "out_dict": 80, "out_dir": [64, 76, 358], "outcom": [67, 178, 360], "outdat": [124, 137, 157], "outer": [13, 90, 178, 469], "outlier": [178, 277, 359, 360, 362, 365, 368], "outlin": [16, 50, 90, 163, 172, 396, 435, 471, 484], "outperform": [53, 100, 158, 163], "output": [3, 4, 6, 7, 10, 16, 17, 23, 24, 30, 34, 35, 37, 43, 46, 50, 51, 53, 54, 56, 57, 58, 60, 67, 72, 81, 87, 95, 116, 117, 124, 125, 127, 129, 135, 141, 146, 153, 155, 157, 158, 163, 168, 172, 178, 180, 181, 182, 184, 185, 230, 231, 233, 234, 235, 236, 237, 265, 296, 297, 298, 299, 300, 301, 302, 303, 304, 308, 310, 311, 315, 318, 331, 333, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 348, 350, 351, 352, 353, 354, 355, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 417, 418, 425, 426, 428, 431, 432, 433, 440, 441, 444, 445, 446, 447, 450, 451, 453, 454, 456, 457, 469, 484, 487], "output_dimension_": 372, "output_dir": [3, 4, 6, 7, 16, 24, 30, 34, 43, 50, 51, 57, 63, 64, 72, 73, 76, 87, 95, 427], "output_fil": [6, 16, 24, 396, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 431, 432, 433, 434, 435, 436, 437, 484], "output_filepath": [92, 93, 185], "output_imag": 331, "output_typ": [6, 63, 66, 67, 70, 71, 72, 76, 77, 78, 80, 81, 82, 101, 107, 110, 318, 331, 382], "outsid": [2, 4, 17, 67, 127, 155, 157, 172, 180, 185, 351, 352, 366, 396, 434, 436, 437, 443, 450, 451, 456, 469], "ova": 36, "over": [3, 21, 40, 50, 51, 53, 69, 71, 90, 103, 117, 125, 149, 150, 157, 163, 164, 169, 170, 171, 177, 181, 184, 195, 201, 245, 304, 318, 344, 348, 359, 370, 383, 385, 386, 431, 435, 469, 471, 484], "overal": [36, 67, 70, 125, 157, 171, 172, 212, 301, 302, 370, 371], "overfit": [35, 165, 169], "overflow": [155, 157], "overhead": 171, "overlai": [16, 21, 22, 52, 162, 184, 440, 487], "overlaid": [17, 71, 149, 151, 157, 431, 471], "overlap": [3, 32, 33, 39, 56, 60, 92, 99, 115, 124, 126, 128, 157, 172, 178, 185, 191, 210, 262, 270, 363, 364, 366, 367, 369, 371, 396, 431, 471], "overrid": [64, 101, 111, 150, 157, 238, 239, 240, 241, 242, 243, 244, 248, 251, 252, 254, 262, 263, 271, 272, 277, 282, 292, 445], "overridden": 172, "oversampl": [68, 318, 320, 322, 323, 324, 325, 328, 329, 330], "overview": [39, 40, 169, 171, 180], "overwhelm": 60, "overwrit": [12, 58, 273, 275, 383, 385, 386], "ovo": 36, "own": [4, 6, 7, 51, 60, 101, 116, 118, 164, 167, 172, 176, 264, 487], "owner": 273, "ox": [209, 212, 225, 251], "oxford": [0, 22, 92, 115, 159, 187, 238, 246, 310, 311, 414, 415], "oxi": 174, "oxygen": [67, 174, 178], "oxyhaemoglobin": [174, 178], "p": [6, 44, 64, 72, 76, 77, 78, 80, 81, 82, 95, 102, 104, 107, 108, 115, 150, 157, 158, 169, 171, 174, 180, 190, 191, 192, 193, 198, 201, 203, 211, 225, 228, 230, 231, 234, 238, 243, 251, 253, 263, 270, 305, 306, 314, 318, 331, 333, 334, 336, 358, 382, 456, 457, 459], "p001_unc": [80, 102], "p001_uncorrect": 77, "p_f": 19, "p_h": 19, "p_ma": 37, "p_statmap": [64, 76], "p_unmask": 37, "p_v": 19, "p_val": [77, 78, 80], "p_valu": [37, 46, 78, 80, 95, 109, 150, 157, 306, 318, 331], "pa": [0, 321], "pace": [115, 219, 282], "packag": [0, 2, 3, 4, 10, 11, 12, 15, 16, 17, 19, 21, 22, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 44, 45, 49, 50, 51, 52, 54, 56, 59, 60, 63, 65, 71, 72, 76, 78, 79, 80, 87, 88, 89, 93, 95, 96, 99, 104, 105, 106, 107, 108, 111, 122, 123, 124, 125, 127, 129, 143, 146, 151, 153, 157, 172, 174, 180, 181, 183, 246, 247, 484], "packagenam": 181, "packagevers": 181, "pad": [72, 127, 146, 157, 184, 185, 340, 351, 352, 376, 379, 383, 385, 386, 458], "padlen": 458, "padtyp": 458, "page": [37, 51, 54, 55, 60, 64, 76, 78, 115, 128, 130, 143, 147, 153, 154, 155, 157, 161, 165, 169, 171, 172, 174, 181, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469], "pai": [0, 66], "paid": 0, "pair": [3, 75, 83, 87, 99, 113, 118, 128, 129, 157, 164, 165, 177, 268, 271, 273, 296, 297, 298, 299, 301, 302, 331, 357, 358, 359, 360, 394, 421, 425, 430, 434, 436, 437, 438, 446, 469, 486], "paired_design_matrix": 81, "pairwis": [53, 158], "panda": [3, 6, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 64, 65, 66, 67, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 95, 99, 101, 104, 110, 117, 118, 124, 127, 129, 140, 143, 149, 151, 153, 154, 157, 164, 230, 238, 244, 245, 256, 257, 258, 266, 267, 268, 277, 300, 303, 304, 318, 319, 321, 325, 331, 332, 333, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 420, 421, 422, 424, 444, 445, 446, 447, 456, 459], "panek": [115, 219, 282], "papadopoulo": [0, 115, 124, 131, 143, 157, 172, 197, 268], "papathanassi": [115, 192, 240], "paper": [0, 50, 51, 117, 118, 129, 157, 161, 171, 172, 174, 273], "par": 92, "paracingul": 92, "paradigm": [67, 71, 98, 112, 113, 118, 164, 174, 214, 227, 269, 275, 325, 341, 346, 347, 349, 425, 433, 438, 486], "paragraph": 171, "parahip": 471, "parahippocamp": 92, "parallel": [36, 37, 38, 40, 44, 45, 46, 49, 50, 55, 59, 60, 80, 99, 104, 107, 124, 157, 171, 174, 333, 365, 382], "param": [230, 231, 232, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 444, 445, 446, 447], "param1": 181, "param2": 181, "param_connectivity__kind": 100, "param_grid": [35, 100, 111, 125, 157, 165, 296, 297, 298, 299], "param_valid": [40, 138, 157], "paramagnet": [174, 178], "paramet": [3, 6, 15, 16, 22, 24, 25, 29, 30, 33, 40, 44, 46, 47, 51, 53, 56, 58, 60, 62, 71, 74, 90, 92, 93, 95, 96, 103, 106, 107, 108, 110, 111, 113, 117, 118, 124, 125, 126, 127, 128, 129, 130, 137, 140, 143, 144, 146, 150, 151, 152, 153, 154, 155, 157, 159, 161, 162, 163, 164, 166, 168, 169, 170, 171, 172, 173, 174, 176, 178, 180, 181, 182, 183, 195, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 484, 486, 487], "parameter_plot": 64, "parametr": [44, 66, 67, 78, 80, 104, 107, 108, 115, 129, 157, 169, 175, 177, 178, 306, 307, 312, 336, 459, 487], "parcel": [9, 24, 28, 48, 61, 113, 115, 118, 125, 127, 128, 129, 130, 134, 138, 141, 142, 143, 146, 153, 155, 157, 160, 178, 179, 180, 185, 191, 192, 195, 198, 199, 212, 217, 218, 223, 229, 230, 240, 242, 243, 244, 246, 247, 248, 250, 252, 254, 259, 270, 341, 343, 348, 359, 360, 362, 366, 402, 414, 415, 419, 423, 430, 432, 438, 447, 448, 484, 486, 487], "parcellationsifittedparcel": 51, "parent": [3, 4, 6, 7, 16, 24, 30, 34, 43, 50, 51, 57, 63, 64, 72, 73, 76, 87, 95, 172], "pari": [0, 172], "pariet": [21, 60, 92, 105, 217, 248], "parietomedi": 258, "park": [58, 115, 360], "parker": [115, 220, 277], "pars": [155, 157, 357], "parse_bids_filenam": [153, 157], "parser": [357, 360], "parsimoni": 172, "parson": [115, 228, 253], "part": [7, 10, 15, 16, 23, 24, 38, 51, 53, 57, 69, 90, 92, 111, 115, 124, 128, 146, 152, 155, 157, 165, 171, 172, 173, 179, 184, 191, 193, 197, 230, 236, 237, 246, 247, 263, 268, 296, 297, 298, 299, 303, 304, 333, 334, 355, 356, 357, 359, 365, 368, 371, 374, 375, 376, 378, 379, 382, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 422, 430, 445, 447, 463, 464, 465, 471], "partial": [27, 50, 54, 100, 158, 162, 172, 191, 230, 235, 270, 360], "partial_correl": [27, 60, 235, 270], "partial_correlation_matric": 53, "partial_correlation_matrix": 60, "partial_correlation_measur": 53, "particip": [40, 42, 58, 67, 102, 110, 115, 172, 174, 178, 193, 220, 359, 360], "participant_id": 80, "particular": [12, 16, 34, 67, 88, 99, 118, 132, 153, 157, 159, 167, 169, 171, 180, 181, 183, 275, 296, 297, 298, 299, 308, 310, 311, 325, 356, 469], "particularli": [264, 447], "partit": [3, 17, 30, 42, 224], "partli": [42, 44, 171, 174, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 254, 259, 262, 263, 264, 268, 270, 271, 272, 277, 282, 292], "pascual": [0, 131, 157], "pass": [2, 3, 4, 6, 10, 12, 16, 19, 25, 30, 31, 37, 42, 44, 45, 50, 53, 56, 57, 58, 60, 69, 80, 87, 88, 90, 95, 103, 104, 107, 108, 110, 117, 118, 124, 126, 127, 128, 129, 139, 141, 143, 146, 151, 153, 155, 157, 164, 165, 169, 171, 172, 173, 181, 183, 184, 185, 195, 230, 231, 232, 238, 273, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 320, 321, 325, 331, 333, 336, 337, 350, 351, 352, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 376, 377, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 418, 419, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 440, 441, 443, 444, 445, 446, 447, 449, 455, 457, 458, 459, 465, 469], "passiv": 67, "past": [0, 58, 117, 159, 360], "patalasingh": [0, 155, 157], "patch": [19, 42, 43, 51, 181], "patch_openneuro_dataset": 278, "patcog": [51, 115], "path": [3, 4, 6, 7, 16, 24, 30, 34, 43, 50, 51, 57, 63, 64, 72, 73, 76, 87, 95, 102, 110, 116, 117, 118, 126, 130, 135, 146, 152, 154, 155, 157, 164, 170, 171, 172, 181, 182, 185, 192, 203, 213, 216, 226, 227, 231, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 292, 293, 296, 297, 298, 299, 301, 302, 303, 304, 318, 321, 325, 331, 337, 346, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 396, 421, 422, 424, 428, 445, 446, 447, 455, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 487], "path_to_a_bids_dataset": 321, "path_to_edited_fil": 172, "path_to_new_env": 485, "pathlib": [3, 4, 6, 7, 16, 24, 30, 34, 43, 50, 51, 57, 63, 64, 72, 73, 76, 87, 95, 102, 110, 126, 152, 157, 183, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 277, 278, 279, 280, 281, 282, 283, 284, 285, 292, 296, 297, 298, 299, 301, 302, 318, 321, 325, 331, 356, 358, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 421, 422, 424, 428, 445, 446, 447, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469], "pathlik": [130, 157], "patient": [115, 158, 178, 230], "patrick": [0, 126, 129, 157], "pattern": [0, 4, 9, 28, 29, 47, 51, 53, 101, 113, 115, 118, 141, 149, 157, 158, 163, 164, 167, 170, 171, 178, 180, 183, 191, 195, 199, 210, 215, 217, 232, 234, 239, 242, 252, 263, 270, 271, 273, 294, 300, 337, 349, 376, 381, 418, 438, 446, 452, 486], "paugam": [0, 126, 157], "paul": [0, 115, 124, 126, 130, 157, 191, 198, 209, 243, 270], "paula": [0, 146, 157], "pauli": [22, 115, 187, 249], "pauli2017": 22, "paz": 0, "pb": 0, "pbellec": [143, 157], "pca": [56, 303, 364, 367, 471], "pcc": [21, 24, 53, 57], "pcc_coord": [57, 63, 173], "pcc_mask": 24, "pcc_seed": 63, "pcc_seed_correl": 57, "pcc_seed_correlation_z": 57, "pcp": [187, 238], "pd": [3, 6, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 65, 66, 67, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 95, 99, 104, 110, 117, 183, 211, 263], "pdf": [16, 57, 68, 126, 155, 157, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 431, 432, 433, 434, 435, 436, 437], "pe": 178, "peak": [6, 34, 64, 70, 72, 165, 167, 171, 413, 447, 449, 456, 470], "pearlson": [115, 194, 241], "pearson": [24, 115, 305, 309, 427], "pearsonr": 24, "peck": [115, 310, 311], "pedagog": 38, "pediatr": [115, 195, 209, 211, 263, 289], "pedregosa": [0, 115, 119, 157, 217, 248], "pedro": [115, 195, 242], "peer": [0, 143, 157, 212], "peke": 0, "penal": [165, 171, 232, 301, 302], "penalti": [31, 35, 40, 41, 45, 165, 170, 178, 296, 297, 298, 301, 302], "pend": 80, "pennsylvania": 0, "penros": 309, "peopl": [0, 6, 140, 143, 144, 145, 146, 147, 148, 157, 171, 172], "pep8": [125, 126, 127, 157, 172, 181], "per": [3, 4, 6, 31, 32, 34, 42, 50, 59, 67, 79, 95, 102, 104, 110, 151, 157, 158, 164, 172, 176, 185, 195, 200, 226, 232, 252, 271, 292, 296, 297, 298, 299, 301, 302, 304, 306, 315, 318, 319, 321, 325, 332, 356, 359, 363, 364, 365, 367, 371, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 458], "per_compon": [50, 149, 157, 303, 304, 445], "peraza": [0, 125, 157], "percent": [30, 35, 43, 44, 45, 146, 157, 164, 326, 335, 355, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419, 431, 439, 441, 443, 459], "percentag": [58, 164, 192, 296, 297, 298, 299], "percentil": [40, 45, 67, 88, 89, 99, 296, 297, 298, 299, 301, 302, 335, 342, 355, 387, 388, 389, 390, 391, 392, 393, 394, 397, 398, 399, 400, 401, 403, 404, 405, 407, 409, 410, 416, 419, 431, 439, 440, 441, 443, 447, 460], "percept": [71, 115, 146, 157, 174, 197, 227, 268], "perceptu": [115, 169], "perez": [0, 131, 136, 157], "perfect": 171, "perfectli": 171, "perform": [3, 7, 31, 34, 35, 40, 46, 50, 53, 56, 64, 67, 71, 80, 81, 90, 92, 93, 95, 96, 100, 101, 102, 104, 107, 108, 117, 118, 125, 149, 150, 151, 153, 157, 158, 163, 165, 168, 169, 170, 171, 173, 174, 175, 177, 178, 179, 183, 184, 185, 192, 198, 218, 226, 227, 234, 264, 277, 287, 290, 296, 297, 298, 299, 301, 302, 303, 304, 318, 320, 327, 331, 333, 350, 351, 352, 353, 354, 355, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 378, 379, 382, 393, 395, 398, 400, 402, 404, 406, 408, 410, 412, 417, 419, 423, 425, 426, 429, 431, 432, 433, 440, 444, 445, 446, 447, 450, 452, 457, 458, 459, 469, 471, 487], "perfus": [115, 359, 360, 460], "period": [6, 43, 67, 69, 296, 297, 298, 299, 301, 302, 322, 323, 324, 328, 329, 330, 336, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 418, 445, 447, 459], "perirhin": [115, 169], "perm": [44, 45], "permiss": [113, 146, 157], "permut": [44, 78, 80, 104, 107, 115, 124, 149, 157, 167, 169, 174, 333, 350, 382, 478], "permutation_test_scor": [99, 167], "permuted_least_squar": [80, 155, 157], "permuted_ol": [44, 80, 104, 107, 124, 125, 149, 154, 155, 157, 169, 177, 333], "persist": [50, 93], "person": [6, 226], "pertin": [63, 76], "perturb": 53, "pescara": 0, "pet": 174, "peter": [115, 169, 180, 225, 228, 251, 253, 300], "petersburg": 0, "petersen": [60, 115, 195, 202, 222, 224, 256, 257, 258, 359, 360], "petkova": [115, 219, 282], "phantom": [115, 192], "phase": 232, "pheno": 100, "phenom": [115, 260, 278], "phenomena": 67, "phenomenolog": 68, "phenomenon": 169, "phenotyp": [53, 64, 100, 154, 157, 164, 168, 182, 190, 193, 200, 219, 238, 239, 259, 282, 487], "philadelphia": [115, 170], "philip": [115, 219, 282], "philipp": [0, 50, 72, 73, 115, 119, 157, 163, 197, 203, 268, 303], "phillip": [115, 180, 194, 241], "phlypo": [0, 119, 157], "physic": [174, 383, 385, 386], "physio_plot": 64, "physiolog": [58, 67, 70, 360], "physiologi": 360, "pi": [25, 85, 305, 309], "pial": [10, 24, 25, 38, 69, 110, 111, 149, 155, 157, 204, 205, 206, 207, 208, 281, 284, 285, 292, 321, 428, 434, 435, 436, 437, 441, 443, 465, 468, 469], "pial_left": [204, 205, 206, 207, 208, 281, 428, 441, 469], "pial_right": [204, 205, 206, 207, 208, 281, 428, 441, 484], "pick": [22, 40, 162, 171, 174, 178, 264], "picked_slic": 37, "pictur": [51, 117, 161, 169, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469], "piec": [40, 51, 183, 487], "pierr": [0, 115, 140, 142, 143, 144, 157, 158, 195, 230, 242], "pietrantoni": [0, 155, 157], "pietrini": [3, 32, 33, 39, 99, 115, 210, 262], "pietro": [3, 32, 33, 39, 99, 115, 210, 262], "pinel": [50, 67, 73, 115, 163, 197, 268, 303], "ping": 181, "pinho": [0, 146, 150, 152, 157], "pip": [127, 138, 143, 146, 157, 172, 181, 485], "pipe": 100, "pipelin": [3, 36, 38, 41, 42, 43, 44, 46, 76, 99, 100, 115, 129, 149, 157, 163, 164, 165, 168, 169, 170, 178, 184, 195, 230, 231, 232, 238, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 336, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 444, 445, 446, 447, 459, 487], "pisner": [0, 146, 157], "pitfal": [115, 164, 169], "pittsburgh": 0, "pixar001_task": [50, 55, 86], "pixar002_task": [50, 55], "pixar003_task": [50, 55], "pixar004_task": 50, "pixar005_task": 50, "pixar006_task": 50, "pixar007_task": 50, "pixar008_task": 50, "pixar009_task": 50, "pixar010_task": 50, "pixar011_task": 50, "pixar012_task": 50, "pixar013_task": 50, "pixar014_task": 50, "pixar015_task": 50, "pixar016_task": 50, "pixar017_task": 50, "pixar018_task": 50, "pixar019_task": 50, "pixar020_task": 50, "pixar021_task": 50, "pixar022_task": 50, "pixar023_task": 50, "pixar024_task": 50, "pixar123_task": [49, 50, 51, 54, 55, 56, 57, 58, 60, 86, 92, 93, 96, 106], "pixar124_task": 50, "pixar125_task": 50, "pixar126_task": 50, "pixar127_task": 50, "pixar128_task": 50, "pixar_desc": [49, 54, 55, 57, 58, 60], "pixar_spac": [49, 50, 51, 54, 55, 56, 57, 58, 60, 86, 92, 93, 96, 106], "pixdim": [58, 92, 103], "pixel": [42, 43, 174, 318, 331, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 439, 440, 442, 457], "piyadasa": [115, 194, 241], "pkg": 181, "place": [30, 99, 140, 157, 273, 327, 355, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 418, 426, 469], "placehold": 384, "plai": [174, 185], "plain": 172, "plan_polar": 471, "plan_tempo": 471, "planar": 178, "planck": 0, "plane": 440, "planum": [92, 105], "platform": [118, 139, 157, 181, 218], "pleas": [0, 3, 20, 30, 31, 33, 34, 35, 36, 37, 40, 50, 51, 52, 54, 55, 60, 64, 71, 72, 73, 76, 78, 99, 101, 105, 107, 108, 138, 144, 153, 157, 162, 164, 167, 172, 178, 181, 185, 191, 203, 212, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 474, 485], "plenti": 117, "plo": [115, 180], "plot": [1, 2, 4, 8, 9, 20, 21, 22, 24, 26, 27, 28, 30, 31, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 50, 51, 53, 54, 55, 56, 58, 59, 61, 63, 64, 65, 66, 69, 71, 72, 73, 76, 77, 78, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 101, 102, 104, 105, 106, 107, 108, 110, 113, 117, 120, 122, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 157, 159, 162, 163, 164, 169, 172, 173, 174, 177, 178, 179, 180, 181, 184, 185, 230, 239, 244, 246, 247, 252, 256, 257, 259, 262, 263, 266, 276, 284, 285, 293, 318, 331, 337, 348, 349, 362, 369, 376, 455, 457, 465, 469, 470, 481, 485, 486, 487], "plot_3d_and_4d_niimg": [2, 8, 486], "plot_3d_map_to_surface_project": [10, 28, 179, 441, 486], "plot_ab": [10, 15, 64, 80, 81, 102, 107, 386, 425, 484], "plot_adhd_dmn": [63, 74, 486], "plot_adhd_spher": [146, 157], "plot_advanced_decoding_scikit": [99, 112, 486], "plot_affine_transform": [85, 97, 486], "plot_age_group_prediction_cross_v": [100, 112, 146, 157, 486], "plot_anat": [6, 16, 19, 52, 153, 157, 162, 426, 433, 484], "plot_atla": [11, 28, 486], "plot_atlas_comparison": [49, 61, 486], "plot_beta_seri": [101, 112, 486], "plot_bids_analysi": [102, 112, 486], "plot_bids_featur": [64, 74, 486], "plot_canica_analysi": [146, 157], "plot_carpet": [12, 28, 126, 149, 150, 154, 155, 157, 484, 486], "plot_colormap": [13, 28, 486], "plot_compare_decomposit": [50, 61, 146, 157, 179, 486], "plot_compare_mean_imag": [86, 97, 486], "plot_connectivity_measur": [139, 157], "plot_connectom": [23, 49, 52, 53, 54, 55, 56, 60, 120, 122, 124, 135, 136, 141, 144, 146, 155, 157, 159, 162, 439, 442, 484], "plot_connectome_strength": [146, 149, 153, 157], "plot_contrast": 67, "plot_contrast_matrix": [6, 64, 66, 67, 129, 157], "plot_copy_headers_math_img": [103, 112, 486], "plot_data_driven_parcel": [51, 61, 179, 486], "plot_decoding_tutori": [3, 8, 146, 157, 172, 179, 486], "plot_demo_glass_brain": [14, 28, 179, 486], "plot_demo_glass_brain_extens": [15, 28, 486], "plot_demo_more_plot": [16, 28, 486], "plot_demo_plot": [17, 28, 486], "plot_design_matrix": [6, 65, 66, 67, 74, 76, 79, 81, 101, 129, 130, 157, 173, 177, 486], "plot_design_matrix_correl": [65, 129, 130, 157], "plot_dim_plot": [18, 28, 486], "plot_epi": [3, 26, 51, 90, 95, 96, 150, 153, 157, 426, 433, 484], "plot_ev": [73, 129, 130, 149, 157, 173], "plot_extract_regions_dictlearning_map": [52, 61, 486], "plot_extract_regions_labels_imag": [87, 97, 486], "plot_extract_rois_smith_atla": [88, 97, 486], "plot_extract_rois_statistical_map": [89, 97, 486], "plot_fiac_analysi": [127, 157], "plot_fir_model": [66, 74, 486], "plot_first_level_detail": [67, 74, 486], "plot_fixed_effect": [127, 157], "plot_glass_brain": [10, 14, 15, 64, 80, 81, 102, 107, 109, 127, 136, 146, 154, 155, 157, 177, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 433, 484], "plot_group_level_connect": [53, 61, 139, 146, 157, 486], "plot_haxby_anova_svm": [30, 47, 138, 157, 486], "plot_haxby_decod": [146, 157], "plot_haxby_different_estim": [31, 47, 146, 157, 486], "plot_haxby_frem": [32, 47, 179, 486], "plot_haxby_full_analysi": [33, 47, 146, 157, 486], "plot_haxby_glm_decod": [34, 47, 486], "plot_haxby_grid_search": [35, 47, 486], "plot_haxby_mask": [19, 28, 486], "plot_haxby_mass_univari": [104, 112, 486], "plot_haxby_multiclass": [36, 47, 486], "plot_haxby_searchlight": [37, 47, 179, 486], "plot_haxby_searchlight_surfac": [38, 47, 486], "plot_haxby_stimuli": [39, 47, 486], "plot_haxby_understand_decod": [40, 47, 486], "plot_hist": 427, "plot_hrf": [68, 74, 486], "plot_ica_neurovault": [105, 112, 486], "plot_ica_resting_st": [106, 112, 486], "plot_img": [4, 6, 37, 126, 146, 153, 157, 180, 393, 395, 398, 400, 402, 404, 406, 408, 410, 484], "plot_img_comparison": 64, "plot_img_on_surf": [10, 126, 130, 149, 151, 157], "plot_inverse_covariance_connectom": [54, 61, 179, 486], "plot_localizer_mass_univariate_method": [107, 108, 112, 486], "plot_localizer_simple_analysi": [108, 112, 486], "plot_localizer_surface_analysi": [69, 74, 486], "plot_mark": [60, 149, 153, 155, 157, 484], "plot_mask_comput": [90, 97, 185, 486], "plot_matric": 55, "plot_matrix": [27, 32, 36, 52, 53, 54, 55, 56, 58, 59, 60, 111, 140, 141, 146, 157, 162, 422], "plot_mixed_gambles_frem": [41, 47, 486], "plot_miyawaki_encod": [42, 47, 486], "plot_miyawaki_reconstruct": [43, 47, 486], "plot_multi_subject_connectom": [55, 61, 486], "plot_multiscale_parcel": [20, 28, 486], "plot_negate_imag": [91, 97, 486], "plot_neurovault_meta_analysi": [109, 112, 486], "plot_nifti_labels_simpl": [92, 97, 486], "plot_nifti_simpl": [93, 97, 185, 486], "plot_nilearn_101": [4, 8, 486], "plot_oasi": [76, 83, 486], "plot_oasis_vbm": [44, 47, 146, 157, 179, 486], "plot_oasis_vbm_space_net": [45, 47, 486], "plot_overlai": [21, 28, 486], "plot_predictions_residu": [70, 74, 486], "plot_prob_atla": [22, 28, 50, 52, 88, 89, 133, 140, 141, 150, 157, 162, 163, 426, 432, 484, 486], "plot_probabilistic_atlas_extract": [56, 61, 486], "plot_proportion_activated_voxel": [77, 83, 486], "plot_python_101": [5, 8, 486], "plot_resample_to_templ": [94, 97, 486], "plot_roi": [3, 11, 18, 20, 26, 51, 67, 87, 90, 93, 95, 142, 149, 150, 155, 157, 159, 184, 185, 426, 431, 484], "plot_roi_extract": [95, 97, 486], "plot_second_level_association_test": [78, 83, 486], "plot_second_level_design_matrix": [79, 83, 486], "plot_second_level_one_sample_test": [80, 83, 486], "plot_second_level_two_sample_test": [81, 83, 486], "plot_seed_to_voxel_correl": [57, 61, 144, 157, 486], "plot_signal_extract": [58, 61, 185, 486], "plot_simulated_connectom": [59, 61, 486], "plot_simulated_data": [46, 47, 486], "plot_single_subject_single_run": [6, 8, 486], "plot_slic": 46, "plot_smooth_mean_imag": [96, 97, 486], "plot_sphere_based_connectom": [60, 61, 146, 157, 486], "plot_spm_multimodal_fac": [71, 74, 486], "plot_stat_map": [2, 6, 10, 16, 18, 30, 31, 32, 37, 41, 42, 44, 45, 50, 52, 57, 63, 66, 67, 70, 71, 72, 76, 77, 78, 82, 86, 88, 89, 91, 93, 94, 95, 99, 101, 104, 105, 106, 108, 109, 117, 127, 131, 142, 143, 150, 151, 153, 154, 157, 162, 164, 177, 185, 440, 484], "plot_stat_map_from_displai": 16, "plot_surf": [111, 124, 128, 129, 138, 140, 146, 150, 151, 152, 153, 157, 172, 173, 435, 436, 437, 484], "plot_surf_atla": [23, 28, 486], "plot_surf_contour": [10, 126, 129, 149, 157], "plot_surf_roi": [23, 24, 126, 127, 129, 138, 140, 142, 146, 150, 157, 434, 484], "plot_surf_stat_map": [10, 24, 25, 28, 38, 69, 110, 128, 129, 138, 140, 142, 146, 149, 153, 154, 155, 157, 173, 428, 434, 435, 486, 487], "plot_surface_101": [7, 8, 486], "plot_surface_bids_analysi": [110, 112, 486], "plot_surface_image_and_mask": [111, 112, 486], "plot_surface_projection_strategi": [25, 28, 486], "plot_threshold": [82, 83, 486], "plot_trisurf": 25, "plot_two_runs_model": [72, 74, 127, 157, 486], "plot_typ": [63, 318, 331, 358, 457], "plot_visu": [26, 28, 486], "plot_visualize_megatrawls_netmat": [27, 28, 486], "plot_write_events_fil": [73, 74, 486], "plotli": [10, 126, 127, 128, 153, 157, 396, 434, 436, 437, 484, 485], "plotlysurfacefigur": [10, 129, 153, 157, 434], "plotted_slic": 108, "plotting_config": 6, "plt": [5, 6, 12, 13, 16, 19, 25, 26, 31, 33, 35, 36, 39, 40, 42, 43, 44, 45, 46, 50, 51, 53, 57, 59, 60, 63, 64, 65, 66, 67, 68, 70, 76, 79, 80, 81, 85, 92, 95, 100, 101, 102, 104, 107, 108, 111, 184, 417, 418, 419, 423, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440], "plu": [318, 320, 325], "plug": [173, 185, 305, 309], "pluim": [115, 158, 230], "plunkett": [143, 157], "plural": 178, "pmc": [72, 115, 203], "pmc6871319": [72, 115, 203], "pmid": [115, 165, 223, 229, 250, 254], "pna": [115, 169, 180, 191, 195, 225, 251, 270, 360], "pnas_smith09_rsn10": 2, "png": [6, 10, 16, 24, 43, 63, 179, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 431, 432, 433, 434, 435, 436, 437, 484], "point": [3, 4, 7, 9, 16, 23, 28, 56, 57, 85, 87, 92, 95, 111, 113, 117, 143, 146, 155, 157, 162, 164, 171, 174, 178, 180, 181, 182, 183, 232, 296, 297, 298, 299, 318, 351, 352, 362, 365, 368, 376, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 419, 423, 426, 429, 431, 432, 433, 437, 440, 450, 451, 457, 469, 486, 487], "pointer": [99, 167], "pokharel": [0, 127, 157], "pokropek": [115, 211, 263], "polar": [92, 230, 300, 303, 304, 318, 331, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 444, 445, 446, 447], "poldrack": [101, 115, 118, 164, 180, 201, 215, 218, 260, 271, 273, 275, 278], "pole": 92, "pole_occipit": 471, "pole_tempor": 471, "polici": [153, 157, 190], "polimeni": [115, 223, 229, 250, 254], "polin": [50, 51, 73, 115, 118, 158, 161, 163, 197, 218, 231, 268, 273, 275, 303, 336, 459], "pollet": [0, 128, 157], "polydata": [24, 129, 157, 465], "polymesh": [7, 24, 129, 157, 284, 434, 435, 436, 437, 443, 465], "polynomi": [65, 67, 173, 318, 325], "pomara": [115, 219, 282], "pone": [115, 180], "pontil": [115, 170, 195], "pool": [195, 203], "pooled_subject": 53, "poorli": [67, 95, 185], "popul": [115, 158, 173, 191, 209, 211, 231, 270, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 459], "popular": [6, 50, 179, 183, 296, 297], "portabl": [63, 76, 185], "portion": 71, "portug": 0, "pos_label": 40, "posit": [6, 10, 15, 17, 18, 25, 50, 53, 60, 67, 71, 75, 80, 81, 82, 83, 85, 95, 100, 113, 115, 117, 128, 130, 149, 153, 157, 164, 169, 171, 174, 177, 178, 185, 191, 231, 234, 238, 268, 270, 313, 318, 331, 333, 334, 355, 382, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 416, 417, 419, 423, 425, 426, 428, 429, 431, 432, 433, 437, 438, 440, 441, 447, 456, 457, 469, 471, 484, 486], "positive_edg": 60, "posixpath": 4, "possibl": [4, 6, 15, 16, 17, 46, 69, 71, 81, 82, 85, 95, 101, 117, 118, 136, 153, 155, 157, 158, 161, 164, 169, 171, 172, 174, 178, 180, 181, 184, 185, 218, 230, 231, 232, 238, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 308, 310, 311, 318, 321, 331, 333, 340, 351, 356, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 412, 413, 419, 425, 429, 444, 445, 446, 447, 457, 484], "possibli": [6, 67, 185], "post": [24, 53, 67, 95, 115, 131, 157, 158, 172, 184, 212, 230, 264, 447, 471], "postcentr": [10, 92], "posterior": [23, 24, 57, 60, 63, 92, 105, 111, 140, 157, 173, 256, 258, 434, 436, 437], "potenti": [6, 56, 57, 90, 92, 93, 95, 101, 115, 152, 157, 169, 172, 178, 181, 251, 333, 364, 367, 371, 471], "power": [12, 58, 60, 76, 78, 80, 115, 117, 123, 137, 149, 157, 158, 165, 166, 170, 178, 183, 185, 187, 195, 202, 256, 257, 359, 360, 418], "power2": 359, "power2d": 359, "ppd": 238, "ppi": 101, "pqu9r": [201, 245], "pr": [155, 157, 181], "practic": [7, 33, 53, 69, 100, 158, 161, 165, 167, 169, 171, 172, 173, 174, 177, 180, 183, 184], "pradeep": [0, 115, 142, 157, 164], "prafulla": 0, "prakhar": [0, 129, 157], "praneeth": [38, 115], "pre": [41, 72, 95, 102, 125, 138, 143, 155, 157, 174, 185, 200, 309], "prec": [55, 171], "prec_to_parti": [138, 157], "preced": [38, 172, 185, 318], "precentr": [10, 92], "precentral_l": 192, "precis": [16, 43, 54, 59, 63, 92, 125, 157, 158, 161, 162, 171, 180, 185, 197, 221, 230, 231, 232, 234, 235, 268, 296, 298, 308, 310, 311, 333, 382], "precision_": [54, 55, 59, 158], "precision_scor": 43, "precision_to_print": 43, "precision_weight": 315, "precisions_": [55, 59, 158, 231, 232], "precisions_init": 234, "precomput": [3, 297, 302], "precun": 92, "pred": 40, "predefin": [125, 157], "predict": [31, 32, 34, 40, 41, 42, 46, 53, 60, 62, 65, 74, 98, 112, 115, 117, 150, 151, 153, 157, 166, 167, 169, 170, 172, 174, 175, 178, 179, 180, 191, 200, 202, 230, 248, 256, 259, 270, 279, 296, 297, 298, 299, 300, 301, 302, 310, 311, 318, 331, 336, 348, 353, 362, 367, 369, 376, 410, 433, 438, 456, 485, 486, 487], "predict_proba": 40, "predicted_timeseri": [70, 173], "prediction_scor": 44, "predicton_accuraci": 3, "predictor": [6, 42, 173, 174, 310, 311, 360], "prefer": [41, 53, 100, 161, 172, 183], "prefix": [64, 76, 321, 336, 358, 363, 364, 365, 366, 367, 368, 369, 459], "prefront": 60, "preliminari": [115, 193, 228, 253], "prematur": 234, "premrudeepreechacharn": [0, 130, 157], "premultipli": 301, "prepar": [44, 60, 95, 100, 102, 117, 133, 157, 168, 182, 363, 364, 365, 366, 367, 369, 370, 371, 372, 447, 487], "prepend": [249, 250, 357, 358], "preprint": [115, 171], "preproc": [51, 101, 102, 110, 321], "preproc_bold": [49, 50, 51, 54, 55, 56, 57, 58, 60, 86, 92, 93, 96, 101, 102, 106, 110], "preprocess": [6, 12, 30, 35, 38, 42, 43, 46, 72, 90, 93, 100, 102, 106, 110, 111, 115, 116, 125, 138, 157, 162, 163, 169, 170, 174, 178, 185, 190, 193, 213, 219, 226, 238, 239, 259, 277, 282, 318, 321, 336, 357, 359, 362, 363, 364, 365, 366, 367, 368, 369, 447, 459, 471, 475, 487], "prescrib": 334, "preselect": 58, "presenc": [42, 67, 104, 447, 449], "present": [0, 3, 6, 40, 42, 43, 56, 58, 66, 70, 102, 117, 125, 139, 157, 162, 163, 164, 171, 173, 174, 175, 181, 183, 185, 212, 213, 214, 226, 234, 238, 244, 262, 296, 297, 298, 299, 303, 304, 346, 359, 360, 362, 364, 365, 366, 367, 368, 444, 445, 446, 450, 471], "preserv": [53, 60, 100, 341, 353, 428, 444, 445, 446], "preset": [152, 153, 157, 360, 484], "prespecifi": 185, "press": [67, 69, 73, 77, 78, 80, 81, 107, 115, 174, 266, 268, 276, 310, 311], "presum": [313, 334], "pretti": [4, 105], "prettier": [4, 128, 157, 172], "pretty_brain": 484, "prevent": [126, 157, 351, 352, 374, 375, 376, 378, 379], "previou": [2, 10, 15, 16, 19, 31, 37, 42, 43, 44, 45, 50, 51, 56, 60, 64, 65, 67, 73, 78, 88, 95, 104, 108, 129, 152, 153, 157, 158, 161, 165, 167, 171, 174, 234, 296, 297, 298, 299, 303, 304, 365, 368, 445, 471], "previous": [3, 99, 117, 146, 149, 153, 155, 157, 164, 174, 190, 224], "price": [66, 169], "primal": 171, "primari": [81, 172, 318, 331, 457], "primarili": 101, "primat": 68, "prime": [71, 115], "primer": [175, 487], "princip": [195, 270, 360], "principl": [99, 161, 164, 168, 170, 178, 300, 487], "print": [2, 3, 4, 6, 7, 10, 11, 12, 16, 17, 19, 21, 23, 24, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 49, 50, 51, 53, 54, 55, 56, 57, 58, 60, 63, 64, 65, 70, 71, 72, 73, 76, 78, 82, 86, 87, 90, 92, 93, 94, 95, 96, 99, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 117, 129, 157, 164, 172, 180, 183, 192, 232, 240, 303, 304, 318, 331, 343], "print_changed_onli": 185, "prior": [29, 47, 50, 56, 60, 67, 92, 113, 115, 151, 157, 158, 170, 173, 231, 250, 277, 296, 297, 301, 302, 318, 331, 364, 366, 367, 369, 418, 433, 438, 471, 486], "priori": 50, "prioriti": [181, 183, 283], "privat": [124, 126, 127, 155, 157], "prni": [115, 170, 195, 242], "prob": [22, 246, 247, 249, 426, 431], "probabilist": [9, 28, 48, 53, 61, 100, 113, 115, 125, 126, 143, 154, 157, 160, 178, 184, 185, 201, 209, 211, 217, 221, 230, 241, 243, 245, 246, 247, 248, 249, 251, 259, 263, 343, 362, 367, 395, 414, 415, 419, 426, 430, 431, 432, 433, 438, 439, 451, 455, 471, 484, 486, 487], "probabilit": 249, "probabl": [6, 12, 22, 32, 33, 41, 45, 50, 63, 67, 78, 80, 82, 93, 95, 159, 169, 171, 174, 178, 180, 181, 209, 212, 220, 246, 247, 277], "probe": [67, 69, 168, 178], "probe_funct": 234, "problem": [3, 6, 32, 34, 40, 41, 50, 93, 95, 115, 164, 165, 166, 169, 170, 171, 172, 174, 178, 180, 181, 234, 301, 302, 304, 305, 308, 309, 310, 311, 333, 382], "problemat": 67, "proce": [42, 57, 66, 117], "procedur": [6, 32, 77, 78, 80, 85, 88, 104, 159, 164, 169, 174, 177, 178, 192, 195, 268, 317, 333, 382, 459, 480], "proceed": [115, 169, 173, 180, 191, 195, 225, 251, 270, 300, 360], "process": [16, 17, 33, 37, 40, 41, 44, 52, 55, 64, 92, 95, 102, 105, 115, 116, 117, 131, 157, 159, 162, 163, 164, 167, 171, 172, 174, 177, 178, 180, 181, 183, 184, 185, 191, 195, 200, 201, 210, 211, 217, 231, 248, 263, 264, 268, 296, 297, 298, 299, 301, 302, 303, 304, 318, 331, 336, 337, 342, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 445, 446, 447, 453, 454, 459], "process_mask": [37, 46, 137, 157], "process_mask_": 300, "process_mask_img": [37, 46, 169, 300], "processor": [99, 167], "produc": [6, 15, 25, 48, 61, 64, 72, 80, 101, 107, 113, 153, 155, 157, 174, 178, 185, 259, 294, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 395, 433, 447, 469, 484, 486], "product": [24, 57, 80, 171], "profil": [6, 171, 172, 305, 309], "prognosi": [168, 180], "program": [171, 484], "progress": [37, 44, 104, 107, 133, 157, 318], "prohibit": 171, "project": [0, 9, 10, 16, 25, 28, 38, 44, 60, 76, 110, 111, 113, 115, 129, 136, 138, 140, 148, 152, 153, 157, 171, 173, 179, 190, 193, 195, 198, 201, 219, 220, 221, 238, 243, 270, 277, 282, 303, 304, 336, 371, 386, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419, 425, 428, 430, 434, 435, 436, 437, 438, 439, 442, 459, 465, 469, 484, 486], "projector": [153, 157, 411], "promis": [115, 169], "promot": [165, 166, 181], "prompt": 485, "pronounc": [417, 431, 432, 433, 440], "proper": [3, 35, 153, 157, 171, 249, 250, 485], "properli": [38, 128, 157, 169, 185, 419, 425], "properti": [51, 71, 167, 171, 174, 178, 185, 227, 300, 306, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 461, 463, 465], "proport": [6, 51, 53, 70, 75, 83, 100, 113, 162, 174, 177, 178, 268, 310, 313, 331, 429, 433, 438, 486], "proportion": 174, "proportion_true_discoveries_img": [77, 313], "propos": [68, 101, 172, 173, 181, 192, 198, 376], "protocol": [73, 178, 197, 268], "proton": [211, 263], "prototyp": 172, "prove": [171, 185], "provid": [3, 5, 6, 10, 30, 31, 33, 34, 35, 36, 37, 40, 46, 49, 50, 51, 54, 56, 58, 64, 67, 68, 71, 72, 76, 77, 78, 80, 81, 85, 90, 92, 93, 95, 99, 102, 105, 107, 111, 116, 117, 118, 126, 127, 129, 133, 141, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 157, 158, 160, 161, 163, 164, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 183, 185, 190, 191, 192, 201, 209, 210, 220, 223, 225, 227, 229, 230, 231, 232, 234, 237, 238, 240, 241, 242, 243, 250, 251, 254, 262, 273, 277, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 309, 318, 319, 320, 324, 325, 330, 331, 333, 336, 342, 351, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 382, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 416, 418, 429, 431, 435, 444, 445, 446, 447, 448, 455, 459, 469, 471, 484, 485], "proximal_oper": [127, 157], "pruett": [60, 115, 202, 256], "pruim": [115, 359, 360], "psc": [127, 146, 150, 157, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 459], "pseudo": [78, 107, 303, 304, 310, 333, 335, 445], "pseudoinvers": 309, "psychiatr": 178, "psychiatri": [115, 209, 219, 282], "psychoinformat": 0, "psycholog": 180, "psychologi": 0, "psychophysiolog": 101, "pth": [129, 157], "public": [0, 2, 64, 101, 118, 124, 126, 127, 153, 155, 157, 172, 178, 218, 277], "publicli": 162, "publish": [0, 6, 226, 273, 342, 460], "pubm": [50, 115, 163, 165, 240, 303], "pubu": 60, "pull": [133, 155, 157, 178, 180], "pure": [99, 104, 301, 302], "purpl": 70, "purple_green": 484, "purpos": [6, 64, 69, 71, 72, 80, 102, 110, 117, 171, 177, 185, 190, 193, 197, 200, 201, 217, 221, 226, 259, 318, 331, 384, 457, 484], "push": [171, 172, 181], "put": [7, 40, 55, 56, 71, 72, 99, 122, 157, 172, 176, 230, 296, 297, 298, 299, 303, 304, 318, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 418, 445, 447, 459, 471], "pval": 382, "pvals_anova": [107, 108], "pvals_bonferroni": 104, "px": [308, 310, 311], "py": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 125, 126, 146, 151, 152, 153, 155, 157, 164, 172, 181, 185, 486], "pylab": 430, "pymvpa": [210, 262], "pyplot": [5, 6, 12, 13, 16, 19, 25, 26, 31, 33, 35, 36, 39, 40, 42, 43, 44, 45, 46, 50, 51, 53, 57, 59, 60, 63, 64, 65, 66, 67, 68, 70, 76, 79, 80, 81, 85, 92, 95, 100, 101, 102, 104, 107, 108, 111, 159, 184, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 418, 419, 423, 424, 425, 426, 428, 429, 431, 432, 433, 434, 437, 438, 484], "pyproject": [125, 157, 172, 181, 485], "pyramid": 7, "pytest": [129, 157, 172, 181, 485], "python": [1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 117, 122, 124, 125, 127, 129, 130, 138, 144, 145, 146, 151, 153, 157, 164, 171, 172, 179, 180, 181, 347, 485, 486], "python2": [143, 144, 145, 146, 157], "python3": [2, 3, 4, 10, 11, 12, 15, 16, 17, 19, 21, 22, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 44, 45, 49, 50, 51, 52, 54, 56, 59, 60, 63, 65, 71, 72, 76, 78, 79, 80, 87, 88, 89, 93, 96, 99, 104, 105, 106, 107, 108, 111, 144, 146, 157, 172, 485], "pythoncvers": 181, "pythonvers": 181, "q": [115, 158, 174, 181, 231, 314, 318, 331, 334, 457], "qform_cod": [58, 92, 103], "qi": [301, 302], "qingyang": [115, 219, 282], "qoffset_i": [58, 92, 103], "qoffset_x": [58, 92, 103], "qoffset_z": [58, 92, 103], "quadrat": 359, "qualit": [138, 157], "qualiti": [12, 64, 70, 78, 107, 115, 143, 157, 172, 173, 174, 181, 185, 191, 193, 238, 270, 363, 366, 370, 418, 445], "quality_check": 238, "quantif": [318, 327], "quantifi": 181, "quantil": 174, "quantiti": [171, 306], "quatern_b": [58, 92, 103], "quatern_c": [58, 92, 103], "quatern_d": [58, 92, 103], "quayl": [71, 115], "quebec": 0, "queen": 0, "queri": [109, 273, 275, 295], "question": [3, 7, 53, 66, 67, 100, 161, 180, 181, 185, 193, 259, 485], "quick": [101, 180], "quicker": [161, 172], "quickli": [4, 34, 63, 64, 72, 76, 158, 161, 171, 172, 181], "quickstart": 179, "quinn": [115, 209], "quirion": [0, 140, 157], "quit": [3, 6, 67, 162, 171, 197, 268], "quot": 92, "quotient": 193, "qu\u00e9bec": 0, "r": [2, 4, 7, 10, 15, 16, 25, 31, 35, 42, 43, 49, 53, 58, 60, 71, 92, 95, 103, 104, 115, 126, 146, 153, 157, 158, 159, 173, 181, 198, 201, 202, 209, 217, 223, 225, 229, 238, 243, 248, 250, 251, 254, 256, 260, 278, 296, 297, 301, 302, 318, 331, 336, 358, 359, 360, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 417, 419, 423, 425, 426, 429, 431, 432, 433, 457, 459, 463, 464, 484], "r2": [46, 150, 157, 297, 299, 310], "r2_score": [42, 297, 302], "r2hvk": [221, 249], "r_": 43, "r_squar": [70, 153, 157, 310, 318, 331], "ra": [118, 350], "raamana": [0, 115, 142, 157, 164], "rachakonda": [115, 194, 241], "rachlin": [115, 219, 282], "radio": 354, "radiolog": [17, 126, 129, 157, 383, 385, 386, 417, 419, 423, 425, 426, 429, 431, 432, 433], "radiu": [10, 37, 38, 46, 57, 60, 63, 101, 133, 157, 168, 173, 178, 185, 224, 258, 300, 369, 469, 471, 487], "radius_neighbors_graph": 38, "rahim": [0, 53, 100, 115, 119, 123, 131, 140, 146, 157], "rahul": [0, 115, 126, 157, 209], "rai": [115, 225, 251], "raichl": [115, 360], "raimon": [115, 359, 360], "rainei": [115, 228, 253], "rainer": [115, 169, 180, 300], "rais": [5, 33, 95, 100, 124, 125, 126, 127, 133, 140, 142, 143, 146, 153, 155, 157, 183, 230, 231, 232, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 321, 325, 331, 333, 334, 337, 346, 350, 351, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 378, 444, 445, 446, 447, 485], "rakuten": 0, "ram": 45, "ramnani": [115, 191, 270], "ramsei": [115, 158], "ran": 44, "randi": [115, 195, 209, 220, 223, 229, 250, 254, 277], "randn": 46, "random": [3, 7, 42, 43, 46, 53, 57, 65, 99, 100, 104, 111, 115, 138, 150, 157, 161, 162, 163, 164, 171, 172, 174, 198, 243, 303, 304, 308, 310, 311, 318, 327, 333, 382, 444, 445, 447, 449], "random_st": [34, 37, 44, 45, 46, 50, 51, 52, 53, 93, 100, 105, 106, 155, 157, 162, 296, 298, 303, 304, 318, 327, 333, 382, 444, 445], "randomized_svd": 50, "randomli": [22, 169], "randomst": [111, 303, 304, 318, 327, 333, 382, 444, 445], "rang": [10, 11, 15, 16, 19, 22, 40, 43, 46, 49, 50, 51, 52, 55, 57, 59, 64, 68, 70, 79, 80, 81, 88, 89, 92, 96, 101, 104, 107, 111, 136, 140, 150, 157, 171, 172, 195, 201, 231, 234, 245, 335, 355, 425, 428, 433, 437, 439, 440, 441, 443], "ranjit": [115, 219, 282], "rank": [129, 157, 169, 308, 309, 310, 311, 355, 382], "raphael": [0, 124, 150, 151, 152, 153, 154, 155, 157], "raphson": 171, "rapid": [101, 115, 213], "rapidli": 171, "raquel": [58, 115, 359, 360], "rare": 171, "rarr": [117, 185], "rasero": [0, 151, 157], "rastko": [58, 115, 359, 360], "rate": [3, 6, 67, 82, 133, 157, 171, 174, 178, 185, 226, 313, 333], "rater": 238, "rather": [16, 56, 67, 95, 101, 118, 136, 138, 140, 142, 146, 151, 153, 157, 158, 171, 183, 184, 217, 231, 240, 273, 275, 303, 304, 333, 364, 367, 456, 471], "ratio": [72, 95, 142, 157, 178, 259, 301, 303, 304, 445, 447], "ratio_n_voxel": [52, 162, 447], "rational": 174, "raut": [115, 224, 258], "ravel": [39, 43, 45, 46, 104, 107, 108], "ravi": [115, 194, 241], "raw": [6, 82, 93, 102, 110, 150, 157, 164, 183, 185, 200, 201, 215, 226, 245, 296, 297, 298, 299, 303, 304, 365, 368, 426, 433, 445, 455], "raw_valu": 42, "rc": [115, 211, 263, 289], "rdbu_r": [44, 46, 104, 422, 430], "rdpu": 42, "re": [2, 6, 22, 42, 66, 67, 71, 85, 118, 152, 157, 172, 174, 273, 286, 287, 288, 289, 290, 291, 308, 310, 311, 321, 448], "reach": [55, 171, 172, 174, 180, 273, 359], "reaction": 178, "read": [4, 24, 38, 46, 67, 69, 78, 82, 102, 105, 107, 109, 110, 115, 118, 149, 157, 172, 179, 180, 197, 213, 218, 266, 267, 268, 373, 461], "read_csv": [3, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 70, 95, 99, 104, 117, 183], "read_tabl": [6, 66, 67, 71], "readabl": [67, 125, 157], "reader": [67, 180, 487], "readi": [63, 76, 117, 137, 157, 163, 172, 181], "readili": [159, 164, 167, 180, 183, 184, 447], "readm": [149, 157, 200], "real": [42, 164, 169, 171, 174, 183, 185], "real_timeseri": 70, "realign": [71, 110, 213, 227, 271], "realist": [115, 192, 259, 434, 436, 437, 443], "realli": [3, 70, 144, 157, 164, 360], "realm": 95, "reason": [32, 38, 50, 67, 93, 118, 165, 167, 169, 171, 172, 174, 181, 469], "reassign": 444, "reassur": 67, "rebecca": [60, 115, 200, 202, 256, 259], "rec": [244, 256, 257, 258, 321], "recal": [43, 296, 298], "recall_scor": 43, "recall_to_print": 43, "recap": [2, 4], "recapitul": 224, "recarrai": [153, 157, 238, 244, 245, 256, 257, 258, 266, 267, 268, 277], "recast": 185, "receiv": [40, 70, 101, 164, 178, 427], "recent": [10, 137, 140, 141, 143, 153, 157, 163, 181, 463], "recip": 184, "recognit": [0, 3, 29, 31, 47, 51, 71, 98, 112, 113, 115, 125, 157, 167, 169, 170, 179, 180, 195, 242, 262, 298, 300, 341, 343, 346, 348, 349, 362, 368, 381, 382, 410, 426, 430, 433, 438, 486], "recogniz": 172, "recommend": [25, 101, 105, 124, 129, 144, 145, 146, 151, 153, 155, 157, 164, 169, 174, 180, 183, 185, 359, 447, 459, 469, 471, 485], "recomput": [67, 99, 169, 315], "reconstruct": [29, 42, 47, 113, 115, 185, 199, 216, 230, 237, 272, 303, 304, 362, 365, 368, 438, 453, 454, 486], "reconstructed_img": [303, 304], "record": [34, 42, 67, 164, 174, 178], "recov": [46, 60, 139, 157, 158], "recoveri": [115, 303], "recruit": [115, 180], "rectangl": [19, 42, 51, 85], "recurs": [46, 51, 99, 115, 146, 157, 161, 167, 178, 179, 445, 446, 452], "recursive_neighbor_agglomer": [51, 124, 157], "red": [15, 16, 19, 42, 53, 128, 144, 157, 173, 174, 178, 484], "reddi": [0, 115, 122, 131, 133, 136, 140, 141, 142, 143, 146, 150, 157, 164], "redirect": 181, "reduc": [17, 30, 34, 35, 46, 51, 67, 80, 88, 95, 101, 129, 142, 143, 146, 150, 157, 166, 170, 171, 172, 178, 185, 195, 232, 277, 298, 299, 303, 304, 359, 360, 363, 366, 434, 436, 437, 441, 443, 444, 445, 446, 450], "reduce_confound": [58, 259], "reduced_confound": 58, "reducedconfounds_regressor": [49, 54, 55, 57, 58, 60], "reduct": [168, 304, 445, 487], "reduction_ratio": 304, "redund": [129, 146, 157, 172], "ree": [6, 226], "rees": [115, 225, 251], "ref": [56, 92, 164, 471], "ref_img": 427, "ref_label": [64, 427], "ref_niimg": [103, 349], "refactor": [125, 126, 127, 129, 137, 151, 153, 155, 157, 181], "refer": [6, 11, 20, 48, 61, 67, 69, 79, 94, 95, 108, 113, 115, 116, 117, 124, 125, 126, 131, 136, 144, 151, 153, 154, 155, 157, 160, 168, 172, 173, 174, 176, 177, 183, 184, 185, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 484, 486, 487], "referenc": 173, "refin": [55, 59, 60, 232], "refit": [40, 100], "reflect": [53, 102, 158, 172, 174, 195, 238, 242, 431, 432], "reformat": [80, 125, 157], "refresh": [133, 157], "reg_i": 325, "reg_nam": 320, "regard": [65, 130, 149, 157, 170, 264, 289, 360], "regardless": [273, 275, 301], "regim": 51, "region": [6, 11, 16, 17, 20, 24, 42, 44, 45, 46, 48, 50, 51, 54, 57, 58, 60, 61, 67, 70, 71, 84, 97, 100, 113, 115, 124, 126, 128, 130, 131, 135, 137, 138, 141, 146, 149, 151, 153, 157, 158, 160, 163, 164, 170, 173, 174, 178, 180, 182, 184, 192, 195, 198, 201, 202, 209, 210, 212, 215, 217, 221, 224, 229, 230, 238, 240, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 258, 259, 262, 271, 274, 300, 303, 304, 341, 343, 346, 348, 349, 353, 355, 360, 362, 363, 364, 366, 367, 369, 370, 371, 372, 395, 396, 413, 414, 415, 416, 417, 419, 423, 430, 431, 432, 433, 435, 436, 438, 439, 455, 471, 484, 486, 487], "region_atlas_": 366, "region_coord": [53, 54, 56, 100, 135, 157, 248], "region_extractor": [87, 153, 157], "region_id": [128, 157], "region_ids_": 366, "region_label": 87, "region_labels_min_s": 87, "region_labels_not_diag": 87, "region_names_": [128, 129, 157, 366], "region_sign": [362, 363, 364, 365, 366, 367, 368, 369, 371, 445, 447, 451, 454], "region_t": 55, "regionextractor": [52, 88, 130, 131, 133, 139, 144, 157, 162, 448, 449], "regions_dict": 10, "regions_extracted_img": [52, 162, 449], "regions_img": [52, 88, 162], "regions_img_": [52, 88, 162, 447], "regions_index": [52, 162], "regions_indic": 10, "regions_indices_network3": 88, "regions_indices_of_map3": [52, 162], "regions_percentile_img": 89, "regions_value_img": 89, "regist": [174, 191, 195, 209, 242], "registr": [115, 159, 174, 195, 211, 352, 484], "regress": [27, 31, 32, 41, 42, 46, 57, 58, 115, 117, 126, 133, 143, 149, 150, 151, 155, 157, 159, 164, 168, 169, 170, 172, 173, 174, 178, 191, 195, 238, 296, 297, 298, 299, 302, 304, 305, 310, 311, 318, 331, 359, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 459, 487], "regression_result": 314, "regressionresult": [155, 157, 305, 309, 314, 318, 327], "regressor": [41, 45, 58, 63, 64, 67, 101, 102, 107, 110, 124, 129, 149, 150, 154, 157, 159, 165, 173, 270, 297, 299, 302, 314, 318, 320, 325, 333, 359, 360, 382, 422], "regul": 191, "regular": [3, 32, 40, 41, 46, 58, 67, 92, 95, 103, 115, 118, 149, 157, 164, 165, 168, 170, 171, 178, 179, 180, 184, 231, 232, 234, 298, 299, 301, 302, 346, 485, 487], "regularli": 469, "reho": 238, "reilli": [115, 191, 270], "reiner": [0, 126, 157], "reining": [0, 146, 157], "reintroduc": [115, 336, 459], "reiss": [115, 219, 282], "reject": [174, 178], "rel": [40, 42, 51, 60, 66, 67, 92, 172, 174, 178, 181, 296, 297, 298, 299, 300, 301, 302, 318, 320, 325, 340, 439, 441, 443, 471], "relabel": [101, 448], "relabeled_yeo_atla": 87, "relat": [7, 41, 48, 51, 52, 65, 66, 67, 68, 69, 71, 82, 101, 108, 113, 115, 118, 130, 137, 138, 157, 159, 160, 162, 164, 165, 168, 171, 172, 178, 179, 180, 181, 185, 214, 230, 259, 264, 286, 287, 290, 303, 304, 306, 318, 342, 356, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 445, 447, 460, 485, 487], "relationship": [42, 44, 76, 169, 177, 179, 180, 191, 270, 382], "relative_to": [64, 76, 110], "relax": [126, 157, 211], "relaxometri": 263, "releas": [27, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 191, 195, 198, 242, 250, 263, 264, 270, 282, 336], "relev": [30, 35, 51, 58, 67, 69, 106, 118, 151, 155, 157, 164, 165, 171, 172, 181, 184, 185, 230, 231, 232, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 333, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 382, 444, 445, 446, 447], "reli": [0, 6, 31, 67, 93, 95, 126, 127, 129, 136, 152, 157, 161, 171, 174, 178, 183, 264, 321, 469, 484], "reliabl": [58, 115, 143, 157, 174, 197, 268, 360], "remain": [31, 33, 37, 38, 42, 44, 46, 55, 58, 90, 101, 104, 107, 127, 149, 157, 169, 172, 469], "remark": 174, "rememb": 484, "remi": [2, 3, 4, 6, 7, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 86, 87, 88, 89, 90, 92, 93, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 143, 157, 471], "remot": [172, 273, 275], "remov": [6, 31, 33, 34, 36, 42, 43, 44, 50, 51, 52, 78, 87, 90, 105, 106, 107, 108, 115, 117, 122, 124, 126, 127, 128, 129, 133, 137, 138, 139, 141, 143, 144, 146, 148, 149, 151, 153, 157, 165, 170, 171, 181, 182, 184, 195, 230, 255, 277, 279, 318, 334, 336, 340, 342, 353, 355, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 378, 379, 382, 418, 431, 447, 448, 450, 451, 455, 458, 459, 460, 465, 487], "rena": [115, 146, 157, 161, 166, 178, 179, 298, 299, 445, 452], "rena_clust": [51, 124, 157], "rena_labels_img": 51, "rena_parcel": 51, "renam": [124, 127, 139, 143, 157, 181], "render": [37, 51, 54, 55, 60, 64, 76, 78, 126, 128, 144, 157, 172, 396, 425, 427, 434, 436, 437, 439, 441, 442, 443], "renew": [133, 157], "renn": 0, "reorder": [58, 129, 141, 157, 350, 413, 430], "reorgan": [153, 157, 172], "repeat": [6, 60, 67, 68, 164, 174, 226], "repetit": [3, 6, 34, 65, 71, 72, 103, 115, 129, 142, 157, 174, 178, 203, 259, 264, 287, 290, 296, 297, 298, 299, 301, 302, 318, 321, 322, 323, 324, 328, 329, 330, 336, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 418, 445, 447, 459], "replac": [3, 4, 31, 33, 36, 37, 42, 43, 44, 49, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 70, 78, 80, 90, 92, 93, 95, 99, 100, 101, 104, 105, 106, 107, 108, 111, 117, 124, 125, 126, 129, 137, 138, 143, 146, 149, 150, 151, 152, 153, 157, 167, 171, 172, 181, 277, 336, 353, 359, 373, 376, 459], "repli": 181, "replic": 195, "repo": [172, 181, 485], "repons": [210, 262], "report": [6, 51, 54, 55, 56, 58, 70, 90, 92, 93, 105, 115, 127, 128, 129, 146, 151, 153, 155, 157, 174, 175, 176, 181, 185, 201, 228, 253, 313, 318, 331, 358, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 382, 434, 436, 437, 447, 476, 485], "report_dim": [318, 331, 457], "report_text": [318, 331, 457], "repositori": [2, 115, 116, 172, 178, 181, 183, 218, 263, 273, 275, 487], "repres": [6, 7, 16, 21, 34, 36, 53, 54, 56, 57, 69, 77, 80, 95, 115, 129, 138, 150, 157, 158, 159, 162, 163, 172, 174, 177, 178, 183, 184, 185, 195, 201, 218, 238, 242, 245, 259, 288, 289, 291, 300, 318, 331, 340, 351, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 414, 419, 425, 429, 447, 450, 457, 467, 469, 484], "represenet": 185, "represent": [3, 7, 17, 32, 33, 34, 37, 39, 54, 55, 58, 60, 64, 76, 78, 85, 95, 99, 101, 106, 115, 117, 146, 157, 160, 163, 169, 178, 182, 184, 210, 224, 258, 262, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 336, 337, 340, 341, 342, 343, 344, 345, 346, 348, 350, 351, 352, 353, 354, 362, 363, 364, 365, 366, 367, 368, 369, 373, 374, 375, 376, 377, 378, 379, 380, 381, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 417, 418, 425, 426, 428, 431, 432, 433, 440, 441, 445, 447, 450, 451, 453, 454, 457, 469, 487], "reproduc": [3, 33, 42, 43, 50, 53, 73, 99, 101, 115, 179, 197, 268, 298, 299], "request": [34, 101, 129, 133, 146, 157, 161, 171, 178, 191, 230, 231, 232, 245, 246, 247, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 333, 355, 356, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 382, 396, 411, 412, 440, 444, 445, 446, 447, 470, 471, 484, 485], "request_mock": 172, "requir": [10, 21, 37, 40, 44, 49, 57, 65, 68, 69, 73, 76, 79, 94, 118, 131, 136, 138, 140, 149, 153, 154, 157, 159, 162, 167, 169, 171, 172, 174, 178, 180, 181, 183, 184, 185, 195, 232, 277, 296, 318, 325, 334, 354, 359, 360, 364, 367, 369, 382, 424, 447, 448, 484, 485], "rerun": [37, 51, 54, 55, 60, 64, 76, 78], "resampl": [3, 10, 12, 30, 31, 33, 34, 35, 36, 37, 40, 42, 43, 45, 49, 50, 51, 54, 55, 56, 58, 67, 71, 76, 84, 92, 93, 97, 99, 105, 113, 117, 125, 135, 136, 139, 140, 146, 150, 152, 153, 157, 182, 195, 213, 227, 273, 275, 277, 288, 289, 291, 293, 296, 297, 298, 299, 301, 302, 303, 304, 331, 337, 341, 346, 348, 350, 351, 352, 363, 364, 365, 366, 367, 368, 374, 376, 377, 378, 379, 425, 426, 432, 433, 438, 440, 445, 450, 469, 471, 486, 487], "resample_img": [54, 56, 71, 85, 90, 94, 125, 129, 140, 146, 155, 157, 184, 185, 273, 303, 304, 318, 331, 350, 352, 365, 368, 374, 376, 377, 379, 445], "resample_to_img": [67, 76, 94, 129, 135, 157, 184, 185, 351], "resampled_affin": 94, "resampled_icbm_mask": 67, "resampled_shap": 94, "resampled_stat_img": 94, "resampling_interpol": [140, 157, 425, 426, 432, 433, 440], "resampling_target": [53, 55, 56, 92, 95, 100, 185, 363, 364, 366, 367, 471], "rescal": [6, 24, 34, 42, 81, 125, 152, 157, 383, 385, 386, 421, 434, 436, 437, 443], "research": [0, 115, 178, 183, 185, 190, 191, 193, 195, 197, 200, 201, 209, 217, 220, 221, 259, 360], "resembl": 163, "reset": 103, "reshap": [40, 42, 43, 46, 52, 68, 78, 107, 127, 139, 157, 162, 230], "resid": [70, 155, 157, 359, 360], "residu": [62, 74, 113, 153, 157, 169, 175, 195, 279, 297, 302, 305, 306, 309, 310, 311, 318, 331, 336, 348, 353, 362, 369, 376, 410, 433, 438, 456, 486, 487], "resili": 67, "resiz": [129, 157, 182, 184, 296, 297, 298, 299, 301, 302, 331, 348, 351, 374, 376, 377, 379, 439, 441, 442, 443, 445, 455, 487], "reslic": [376, 379], "resolut": [20, 22, 76, 77, 94, 105, 115, 117, 124, 125, 139, 151, 152, 157, 162, 182, 192, 195, 200, 201, 204, 205, 206, 207, 208, 221, 223, 240, 242, 245, 249, 250, 251, 259, 281, 284, 285, 286, 287, 288, 289, 290, 291, 292, 313, 368, 375, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 428, 441, 447, 487], "resolution_mm": [22, 49, 245, 250], "resolv": [137, 147, 157], "reson": [0, 115, 174, 178, 190, 195, 209, 242, 268], "resort": 69, "resourc": [0, 183, 221], "resp": 117, "respect": [3, 40, 64, 103, 129, 146, 155, 157, 158, 172, 174, 178, 181, 185, 256, 258, 296, 297, 298, 299, 318, 320, 321, 325, 331, 340, 351, 352, 447, 449], "respir": 67, "respond": 174, "respons": [6, 62, 65, 70, 71, 73, 74, 80, 81, 113, 153, 157, 164, 173, 174, 178, 180, 181, 210, 227, 269, 318, 320, 322, 323, 324, 325, 328, 330, 420, 421, 433, 486], "response_funct": 68, "rest": [2, 3, 6, 22, 24, 31, 33, 34, 36, 40, 43, 50, 52, 53, 56, 57, 58, 64, 70, 72, 88, 90, 93, 99, 100, 101, 115, 126, 134, 138, 157, 161, 162, 163, 167, 171, 172, 178, 180, 183, 190, 191, 193, 194, 195, 198, 202, 217, 219, 224, 225, 226, 238, 239, 241, 242, 251, 270, 282, 295, 304, 357, 359, 360, 368, 430, 447, 471, 487], "rest_dataset": [50, 52, 55, 162], "restart": [174, 303], "resting_st": 31, "restom": [115, 359, 360, 460], "restor": [125, 157], "restrict": [30, 31, 32, 90, 92, 95, 104, 143, 157, 164, 169, 185, 191, 238, 295], "restructur": 184, "restructuredtext": 172, "result": [3, 6, 7, 10, 15, 16, 25, 31, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 49, 50, 51, 53, 57, 59, 60, 63, 64, 66, 67, 69, 71, 72, 73, 76, 78, 79, 80, 85, 87, 88, 89, 93, 94, 95, 96, 99, 100, 101, 102, 103, 105, 106, 107, 108, 110, 111, 115, 116, 118, 125, 126, 128, 136, 143, 146, 149, 154, 155, 157, 158, 160, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 183, 184, 185, 190, 192, 197, 198, 201, 210, 216, 217, 238, 240, 250, 268, 273, 275, 281, 284, 285, 292, 296, 297, 300, 307, 308, 310, 311, 312, 318, 325, 327, 331, 333, 336, 346, 347, 348, 351, 358, 366, 367, 369, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419, 434, 436, 437, 441, 450, 451, 456, 469, 481, 484, 487], "result_img": [86, 103, 183, 347], "result_img_with_head": [103, 347], "result_t": 456, "resultfilt": [118, 273], "results_": 318, "resum": [239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 254, 259, 262, 263, 264, 268, 270, 271, 272, 277, 282, 292], "retain": [72, 153, 157, 164, 165, 174, 230, 231, 232, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 444, 445, 446, 447, 450, 451], "retest": 115, "retinotop": 81, "retriev": [2, 21, 23, 46, 50, 91, 92, 93, 117, 153, 157, 159, 164, 167, 179, 183, 185, 218, 254, 279, 280, 283, 359, 360, 411, 412], "return": [2, 3, 4, 10, 12, 15, 16, 19, 31, 32, 34, 37, 41, 42, 43, 44, 45, 46, 49, 50, 58, 67, 68, 72, 81, 85, 88, 95, 101, 104, 108, 109, 117, 118, 125, 126, 127, 129, 135, 139, 146, 149, 151, 153, 154, 155, 157, 159, 164, 166, 169, 171, 172, 178, 180, 181, 183, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 467, 468, 469, 479, 484], "return_cod": 50, "return_count": 51, "return_dist": 51, "return_estim": 99, "return_index": 36, "return_invers": 53, "return_label_map": 456, "return_label_nam": 414, "return_masked_atla": [127, 157, 450], "return_offset": 340, "return_raw_data": 271, "return_z_scor": 315, "reus": [2, 16, 19, 31, 37, 42, 44, 45, 50, 72, 88, 104, 108], "reusabl": [129, 157], "reveal": [53, 102, 104, 169], "revers": [93, 139, 146, 157], "review": [146, 157, 169, 181, 191, 212], "revious": 71, "revis": 357, "rewamp": [122, 157], "reward": 258, "rework": [124, 133, 139, 146, 152, 157], "rewritten": 118, "rex": [115, 194, 241], "rf": [42, 68], "rf_model": 68, "rfe": [46, 99, 167], "rfe_svc": 99, "rfmri": [115, 191, 270], "rgb": [33, 442], "rgba": [435, 442], "rgbcmyk": [52, 162], "rh": 216, "rho": 305, "rich": [129, 157, 164], "richard": [101, 115], "richardson": [115, 200, 259], "rid": [318, 331], "ridg": [32, 42, 46, 111, 165, 166, 170, 296, 297, 298, 299], "ridge_classifi": [31, 165, 296, 298], "ridge_cv": 46, "ridge_regressor": [165, 297, 299], "ridgeclassifi": 38, "ridgeclassifiercv": [125, 157, 296, 297, 298, 299], "ridgecv": [46, 125, 157, 296, 297, 298, 299], "ridgwai": [104, 115, 382], "riemannian": 115, "right": [7, 10, 13, 19, 21, 23, 24, 26, 33, 38, 42, 46, 49, 52, 60, 66, 67, 69, 73, 77, 80, 81, 87, 95, 99, 110, 111, 136, 141, 146, 149, 151, 157, 161, 162, 168, 172, 180, 184, 199, 204, 205, 206, 207, 208, 216, 219, 238, 244, 246, 247, 252, 266, 268, 276, 281, 282, 284, 298, 299, 318, 331, 332, 350, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 417, 419, 420, 423, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 441, 443, 457, 463, 464, 471, 484, 487], "right_coord": 7, "right_data": 7, "right_fac": 7, "right_hemi": 49, "right_hemispher": 10, "rigid": [65, 195], "rigor": 334, "ring": 458, "rint": 68, "riobueno": [115, 200, 259], "rise": 161, "risk": [6, 115, 180], "rissman": [101, 115], "rivera": [115, 118, 218, 273, 275], "rm": 181, "rng": [7, 45, 65, 111, 172], "roalf": [58, 115, 359, 360], "robert": [0, 115, 124, 125, 151, 157, 171, 194, 195, 211, 241, 263, 289], "roberto": [0, 115, 136, 146, 157, 225, 251], "robinson": [104, 115, 191, 270, 382], "robust": [3, 32, 41, 95, 115, 148, 157, 162, 164, 168, 178, 298, 299, 359, 360, 487], "roc": [40, 164, 178], "roc_auc": [31, 33, 99, 167, 296, 298], "roc_auc_ovr": 40, "roc_auc_scor": 40, "rochel": [115, 219, 282], "rockland": [115, 219, 282], "roelof": [0, 124, 125, 157], "roffman": [115, 223, 229, 250, 254], "roger": [115, 194, 204, 205, 206, 207, 208, 241, 281], "roi": [10, 11, 18, 22, 26, 29, 34, 47, 58, 60, 84, 87, 89, 92, 97, 100, 113, 115, 118, 126, 138, 146, 149, 157, 164, 180, 182, 198, 202, 222, 223, 224, 244, 250, 256, 257, 258, 262, 296, 341, 343, 346, 348, 349, 353, 354, 362, 366, 368, 396, 423, 425, 432, 433, 435, 436, 438, 484, 486, 487], "roi_img": [70, 432], "roi_map": [10, 23, 24, 127, 157, 396, 435, 436], "roi_siz": 46, "rois_aal": 238, "rois_cc200": 238, "rois_cc400": 238, "rois_dosenbach160": 238, "rois_ez": 238, "rois_ho": 238, "rois_tt": 238, "rokem": [0, 131, 143, 157], "role": [6, 153, 157], "romuald": [143, 157], "ronald": [0, 119, 157], "rooij": [115, 359, 360], "room": 430, "roorke": 0, "root": [51, 171, 190, 230, 246, 247, 309, 359, 444, 445, 446], "rosa": [115, 195, 242], "rosen": [115, 199, 244], "rosenblatt": [77, 115, 313], "rot_i": 58, "rot_x": 58, "rot_z": 58, "rotat": [13, 33, 65, 85, 95, 185, 321, 359], "rotation_matrix": 85, "rothberg": [0, 140, 143, 157], "roti": 102, "rotx": 102, "rotz": 102, "rough": [296, 297, 298, 299, 301, 302, 303, 304, 318, 331, 337, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 445, 446, 447], "roughli": [42, 165, 172, 174, 195], "round": [51, 434, 437], "rout": [230, 231, 232, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 444, 445, 446, 447], "routin": [67, 90, 183, 271, 484], "row": [3, 6, 40, 42, 67, 73, 99, 101, 118, 150, 157, 178, 273, 275, 308, 309, 310, 311, 318, 331, 332, 333, 393, 395, 398, 412, 417, 423, 426, 428, 430, 431, 432, 433, 444, 456, 469], "row_numb": 101, "ro\u00dfmanith": [0, 127, 157], "rprojector": [15, 387, 411], "rrid": 0, "rsn": [2, 22, 88, 138, 157, 194, 225, 241, 251], "rsn10": [225, 251], "rsn20": [225, 251], "rsn28": [22, 194, 241], "rsn70": [225, 251], "rsn_indic": [194, 241], "rsn_name": 194, "rsquared_statmap": [64, 76, 358], "rst": [124, 157, 172, 181], "rt": [6, 226], "rtol": 340, "ru": [115, 223, 250], "ruben": [58, 115, 359, 360], "rudimentari": 31, "ruf012": [130, 157], "ruff": [129, 157, 172, 181], "rugg": [71, 115], "rule": [123, 157, 164, 165, 172, 191, 296, 297, 298, 299], "run": [1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 68, 69, 70, 73, 74, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 117, 127, 129, 130, 133, 137, 151, 153, 155, 157, 158, 159, 161, 164, 165, 168, 169, 170, 171, 172, 173, 176, 180, 181, 183, 184, 185, 195, 203, 210, 216, 227, 232, 234, 261, 262, 268, 272, 279, 280, 303, 304, 315, 318, 321, 325, 334, 336, 337, 348, 351, 360, 368, 377, 379, 382, 417, 420, 421, 426, 433, 438, 444, 455, 456, 459, 470, 471, 484, 485, 486, 487], "run_face_mask": 104, "run_glm": [34, 151, 155, 157], "run_house_mask": 104, "run_img": [63, 69, 102, 110, 318], "run_label": [3, 30, 31, 33, 34, 99, 164], "run_mask": 104, "run_seri": 373, "run_target": 95, "runnabl": 172, "runtim": [45, 155, 157, 172, 301, 302], "runtimeerror": [5, 100], "runtimewarn": [60, 78, 80, 111], "ruparel": [58, 115, 359, 360], "russel": [58, 101, 115, 118, 164, 180, 215, 218, 219, 271, 273, 275, 282, 310, 311, 359, 360], "rv": 0, "rx": 65, "ry": 65, "ryan": [0, 115, 146, 157, 224, 258], "rz": 65, "r\u00e9mi": [0, 125, 126, 127, 128, 129, 130, 140, 157], "s01": [78, 107], "s1": 81, "s102": [115, 211, 263, 289], "s1053": [115, 199, 211, 244, 263, 289], "s151": [115, 199, 244], "s2": 81, "s3": 64, "s_calcarin": 471, "s_central": 471, "s_cingul": 471, "s_circular_insula_": 471, "s_circular_insula_inf": 471, "s_circular_insula_sup": 471, "s_collat_transv_": 471, "s_collat_transv_post": 471, "s_front_inf": 471, "s_front_middl": 471, "s_front_sup": 471, "s_interm_prim": 471, "s_intrapariet_and_p_tran": 471, "s_oc": 471, "s_oc_middle_and_lunatu": 471, "s_oc_sup_and_transvers": 471, "s_occipital_": 471, "s_orbit": 471, "s_orbital_later": 471, "s_orbital_m": 471, "s_parieto_occipit": 471, "s_pericallos": 471, "s_postcentr": 471, "s_precentr": 471, "s_suborbit": 471, "s_subpariet": 471, "s_temporal_inf": 471, "s_temporal_sup": 471, "s_temporal_transvers": 471, "sa": [213, 243], "sabb": [115, 260, 278], "sabuncu": [115, 223, 229, 250, 254], "sachin": [0, 155, 157], "saclai": [0, 172], "sadaghiani": [50, 115, 163, 303], "sadato": [42, 43, 115, 216, 272], "sadek": [115, 194, 241], "sadil": [0, 126, 129, 157], "safe": [72, 103, 138, 157], "sage": [0, 155, 157], "sagit": 354, "sagitt": [15, 95, 318, 331, 391, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 417, 419, 423, 425, 426, 429, 431, 432, 433, 457], "sai": [6, 7, 66, 70, 99, 103, 118, 172, 174, 181, 308], "said": [51, 174], "sake": [24, 38, 67, 80, 107], "salat": [115, 199, 244], "salienc": [53, 258], "salimi": [115, 158, 191, 270], "salma": [0, 119, 122, 131, 133, 140, 143, 144, 157], "salo": [0, 124, 125, 126, 127, 150, 153, 154, 155, 157], "salt": 70, "sam": [0, 125, 157], "samanta": [0, 126, 157], "samantha": [115, 219, 282], "samara": [115, 162, 171, 231, 234, 447], "same": [2, 3, 6, 15, 16, 19, 22, 24, 31, 35, 37, 38, 40, 42, 43, 44, 45, 49, 50, 51, 52, 57, 60, 65, 67, 69, 70, 71, 72, 73, 85, 87, 88, 89, 95, 99, 101, 102, 104, 108, 110, 111, 118, 126, 131, 138, 143, 149, 150, 151, 152, 153, 157, 158, 159, 162, 163, 164, 165, 169, 171, 172, 174, 176, 177, 178, 181, 183, 184, 185, 203, 227, 230, 231, 232, 234, 246, 247, 255, 256, 258, 263, 264, 281, 284, 285, 292, 296, 297, 298, 299, 301, 302, 303, 304, 318, 320, 321, 325, 331, 333, 336, 338, 347, 349, 351, 356, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 378, 380, 382, 388, 389, 390, 391, 392, 401, 402, 405, 406, 407, 408, 413, 417, 419, 423, 425, 426, 430, 431, 432, 433, 441, 444, 445, 448, 453, 454, 456, 457, 459], "sami": [0, 155, 157], "sampl": [3, 9, 28, 32, 35, 37, 42, 51, 60, 65, 67, 69, 71, 75, 76, 78, 79, 82, 83, 85, 95, 102, 107, 110, 113, 115, 117, 129, 149, 151, 152, 157, 159, 164, 169, 171, 173, 174, 177, 185, 190, 195, 201, 212, 219, 230, 231, 232, 234, 259, 268, 282, 286, 287, 288, 289, 290, 291, 293, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 319, 320, 322, 323, 324, 325, 328, 329, 330, 331, 333, 336, 340, 341, 347, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 381, 382, 394, 409, 418, 421, 425, 428, 437, 438, 444, 445, 446, 447, 458, 459, 460, 469, 482, 486], "sample_horizont": 81, "sample_mask": [34, 51, 54, 55, 58, 60, 67, 124, 126, 129, 130, 151, 153, 155, 157, 318, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 447, 459], "sample_point": 25, "sample_vert": 81, "sample_weight": [296, 297, 298, 299, 301, 302], "sampling_r": 458, "san": 0, "sane": [301, 302], "sang": 115, "saniti": 185, "sanz": [0, 146, 157], "sarah": [115, 194, 241], "sarang": 115, "saroja": [115, 219, 282], "sass": [0, 153, 157], "sassenhagen": [0, 140, 157], "satisfi": [171, 181], "sato": [42, 43, 115, 216, 272], "satrajit": [115, 218, 273, 275], "satterthwait": [58, 115, 359, 360], "save": [3, 6, 10, 15, 22, 24, 30, 34, 43, 44, 45, 50, 51, 52, 53, 63, 67, 72, 73, 87, 92, 93, 95, 99, 100, 101, 105, 109, 118, 126, 128, 129, 144, 153, 157, 162, 171, 183, 184, 185, 213, 273, 275, 301, 302, 311, 318, 331, 358, 363, 364, 366, 367, 368, 369, 370, 371, 372, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 455, 457, 461, 462, 463, 464, 465, 466, 487], "save_as_html": [34, 63, 64, 72, 76, 92, 93, 185, 439, 440, 441, 442, 443, 455, 457, 484], "save_glm_to_bid": [64, 76, 124, 128, 155, 157], "savefig": [10, 16, 43, 57, 63, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 419, 423, 425, 426, 429, 431, 432, 433, 484], "savio": [0, 119, 157], "saw": 15, "sax": [115, 200, 259], "sayal": [0, 129, 157], "scalabl": [115, 166, 298, 299], "scalar": [102, 169, 185, 305, 306, 308, 309, 310, 311, 353, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 419, 429], "scalarformatt": 51, "scale": [6, 16, 40, 43, 51, 56, 63, 65, 68, 70, 71, 73, 95, 115, 118, 136, 143, 153, 157, 165, 169, 185, 195, 197, 216, 218, 242, 268, 273, 275, 288, 289, 291, 301, 302, 305, 308, 309, 310, 311, 313, 318, 326, 331, 333, 334, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 444, 445, 446, 456, 457, 459, 469, 471, 487], "scale007": [195, 242], "scale012": [195, 242], "scale020": [195, 242], "scale036": [195, 242], "scale064": [195, 242], "scale122": [195, 242], "scale197": [195, 242], "scale325": [195, 242], "scale444": [195, 242], "scale_": 16, "scale_loc": [384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410], "scale_s": [16, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410], "scale_unit": [16, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410], "scalebar": [16, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 484], "scaling_axi": [101, 153, 157, 318], "scan": [6, 34, 37, 57, 60, 65, 66, 67, 68, 95, 101, 115, 151, 157, 161, 169, 174, 178, 183, 193, 195, 209, 213, 226, 268, 303, 304, 318, 320, 325, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 418, 445, 447, 450, 451, 453, 459], "scanner": [67, 103, 174, 178, 359], "scap": 64, "scatter": [25, 95, 155, 157, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419, 429], "scatter3d": 396, "scenario": [67, 173, 174, 185], "schaefer": [115, 187, 250], "schaefer2018_400parcels_7networks_order_fslmni152_1mm": 471, "schaefer2018_localglob": [223, 250], "schaefer_2018": 471, "schemat": [386, 419, 425, 429], "scheme": [9, 28, 30, 34, 37, 38, 40, 99, 113, 149, 157, 158, 164, 165, 167, 171, 232, 296, 297, 298, 299, 382, 437, 469, 486], "schizophrenia": [115, 138, 157, 178, 209], "schlachter": [115, 219, 282], "schlaggar": [60, 115, 195, 202, 222, 224, 256, 257, 258, 359, 360], "school": [0, 220], "schouten": [3, 32, 33, 39, 99, 115, 210, 262], "schre": [115, 209], "schwartz": [115, 118, 119, 157, 164, 166, 197, 268, 298, 299], "schwarz": [115, 218, 273, 275], "scienc": [0, 3, 32, 33, 39, 46, 60, 99, 115, 158, 162, 169, 170, 180, 190, 191, 195, 201, 202, 210, 219, 225, 230, 231, 245, 251, 256, 259, 262, 270, 282, 300, 360, 447, 487], "scientif": [115, 150, 153, 157, 172, 180, 190, 197, 212, 220, 221, 249, 260, 268, 278, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 423, 425, 426, 428, 432, 433, 434, 436, 437], "scientififc": 180, "scikit": [3, 35, 51, 95, 98, 104, 106, 112, 113, 116, 122, 124, 127, 129, 131, 136, 138, 139, 140, 143, 146, 151, 153, 157, 158, 161, 164, 165, 166, 168, 169, 171, 172, 179, 180, 181, 262, 296, 297, 298, 299, 300, 343, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 433, 445, 485, 486, 487], "scilifelab": 0, "scipi": [24, 46, 64, 68, 77, 80, 95, 102, 105, 109, 122, 124, 127, 136, 140, 141, 143, 146, 151, 153, 155, 157, 171, 184, 264, 282, 287, 290, 345, 355, 374, 375, 376, 378, 379, 430, 458], "scissor": [31, 33, 34, 40, 183], "scl": 43, "scl_inter": [58, 92, 103], "scl_scope": 103, "scl_slope": [58, 92, 103], "score": [31, 33, 38, 40, 43, 44, 46, 50, 53, 81, 99, 100, 104, 105, 107, 108, 109, 111, 128, 149, 150, 157, 164, 165, 167, 168, 170, 180, 232, 277, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 331, 335, 355, 359, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 382, 418, 445, 447, 459, 487], "score_ch": 33, "score_func": 111, "score_img": 38, "score_map_img": 42, "score_mean": [31, 33], "score_orig_data": 382, "scoreatpercentil": [89, 105, 355], "scorer": [296, 297, 298, 299], "scorer_": [296, 297, 298, 299], "scores_": [46, 169, 300], "scores_img": 37, "scores_img_": [37, 300], "scores_nilearn": 40, "scores_sklearn": 40, "scores_std": [53, 100], "scorr_2level": [198, 243], "scorr_mean": [198, 243], "scott": [101, 115, 224, 258], "scr_001362": 0, "scrambl": [71, 95, 173, 227], "scrambledpix": [31, 33, 34, 40, 95, 183], "scratch": 117, "screen": [33, 40, 45, 115, 170, 213, 296, 297, 298, 299, 301, 302], "screen_perc": 40, "screening_percentil": [30, 33, 34, 35, 40, 44, 45, 111, 164, 296, 297, 298, 299, 301, 302], "screening_percentile_": [296, 297, 298, 299, 301, 302], "screening_percentile_rang": 35, "script": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 152, 157, 166, 172, 183, 184, 185, 198, 484, 485], "scrollabl": [128, 157], "scrub": [67, 124, 129, 151, 153, 157, 159, 195, 318, 321, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 447, 459], "sd": [308, 310, 311, 312], "sdata": [115, 221, 249, 260, 278], "sdist": 181, "se": 356, "search": [38, 90, 125, 157, 172, 181, 232, 296, 297, 298, 299, 356], "search_light": [38, 300], "searchlight": [29, 46, 47, 113, 115, 129, 137, 140, 143, 149, 157, 164, 168, 178, 179, 180, 262, 284, 285, 341, 343, 346, 348, 349, 362, 368, 426, 433, 437, 438, 465, 486, 487], "searchlightifittedsearchlight": 37, "seattl": 0, "sebastian": 115, "sec": [53, 259], "second": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 111, 112, 115, 126, 129, 157, 161, 162, 170, 171, 172, 173, 174, 175, 176, 178, 185, 226, 265, 267, 268, 284, 285, 296, 297, 298, 299, 301, 302, 313, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 336, 341, 347, 355, 358, 359, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 382, 394, 395, 409, 418, 421, 424, 425, 427, 433, 434, 435, 436, 437, 438, 443, 445, 447, 456, 457, 458, 459, 465, 481, 486, 487], "second_level": [76, 77, 78, 79, 80, 81, 82, 102, 110, 130, 155, 157, 177, 457], "second_level_contrast": [76, 78, 80, 318, 331, 333, 457], "second_level_glm": 110, "second_level_input": [77, 80, 81, 102, 110, 153, 155, 157, 331, 333], "second_level_model": [76, 77, 80, 82, 102], "second_level_model_pair": 81, "second_level_model_unpair": 81, "second_level_stat_typ": 331, "second_roi_data": 95, "second_roi_img": 95, "secondari": 172, "secondlevelmodel": [76, 77, 78, 80, 81, 82, 102, 110, 127, 129, 130, 153, 157, 177, 318, 358, 457], "secondlevelmodelifittedsecondlevelmodel": [76, 78], "section": [2, 3, 4, 15, 41, 49, 50, 51, 56, 58, 70, 92, 95, 99, 101, 115, 116, 117, 125, 138, 143, 153, 157, 158, 159, 161, 162, 164, 165, 167, 169, 172, 174, 177, 181, 182, 185, 187, 220, 273, 277, 363, 364, 366, 367, 383, 413, 417, 419, 423, 425, 426, 429, 431, 432, 433, 444, 455, 471, 476, 477, 484], "see": [0, 6, 7, 9, 10, 13, 14, 15, 16, 17, 21, 22, 23, 24, 27, 29, 31, 32, 35, 37, 40, 41, 42, 43, 45, 48, 50, 52, 53, 54, 56, 57, 58, 62, 71, 72, 73, 75, 81, 84, 87, 90, 92, 95, 100, 101, 104, 105, 108, 109, 113, 117, 118, 120, 126, 129, 131, 137, 143, 144, 146, 150, 151, 153, 155, 157, 158, 159, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 176, 178, 181, 183, 185, 187, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 289, 292, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 308, 310, 311, 314, 318, 320, 322, 323, 324, 325, 328, 329, 330, 331, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 358, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 417, 418, 424, 425, 426, 428, 431, 432, 433, 440, 441, 442, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 457, 458, 459, 469, 471, 476, 477, 484, 485], "seed": [7, 9, 28, 48, 50, 61, 101, 113, 129, 143, 155, 157, 173, 182, 252, 259, 284, 285, 292, 298, 299, 318, 325, 327, 362, 368, 369, 370, 382, 395, 433, 436, 437, 438, 439, 442, 447, 449, 461, 463, 464, 465, 471, 484, 486, 487], "seed_based_glm": [63, 470], "seed_mask": [57, 63, 101, 173], "seed_time_seri": [57, 63, 173], "seed_timeseri": 24, "seed_to_voxel_correl": 57, "seed_to_voxel_correlations_fisher_z": 57, "seed_to_voxel_correlations_fisher_z_img": 57, "seed_to_voxel_correlations_img": 57, "seed_vertic": 24, "seeds_": 369, "seek": [6, 78, 107, 163, 431], "seem": [67, 76, 99, 171], "seemingli": 164, "seen": [0, 3, 15, 43, 51, 117, 159, 161, 165, 167, 169, 174, 180, 181, 445, 484], "segal": [115, 194, 241], "segment": [58, 115, 162, 178, 195, 199, 209, 211, 217, 248, 254, 263, 277, 359, 447, 449, 469], "segment_half_width": 25, "segreg": [72, 115, 203], "seidman": [115, 199, 209, 244], "seismic_r": 422, "seitzman": [115, 146, 157, 187, 258], "select": [3, 6, 15, 16, 20, 21, 24, 30, 33, 34, 35, 36, 43, 44, 57, 58, 67, 77, 90, 95, 101, 107, 110, 115, 116, 126, 136, 137, 138, 140, 148, 149, 151, 153, 157, 159, 162, 165, 166, 167, 168, 169, 170, 171, 184, 185, 195, 216, 231, 232, 242, 259, 260, 270, 273, 275, 277, 295, 296, 297, 298, 299, 301, 302, 331, 333, 343, 355, 359, 360, 425, 428, 431, 433, 434, 436, 437, 444, 445, 447, 469, 484, 487], "select_from_index": 64, "selected_volum": 2, "selectkbest": [36, 43, 111, 138, 157], "selector": 40, "selectpercentil": [40, 99, 138, 157], "self": [12, 95, 172, 230, 231, 232, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 318, 331, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 444, 445, 446, 447], "semant": [115, 151, 153, 157, 169], "semi": [171, 209], "semilogx": 51, "send": [172, 444, 446], "sender": 172, "sens": [106, 111, 164, 180, 296, 297, 298, 299, 308, 310, 311, 386, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409], "sensibl": [35, 164, 167, 231, 234], "sensit": [6, 42, 50, 58, 115, 174, 178, 336, 360, 382, 459], "sensori": 174, "sensorimotor": 60, "sent": [422, 430], "sentenc": [66, 67, 69, 72, 73, 82, 102, 115, 203, 213, 268], "sentence_listen": [66, 67, 69, 214], "sentence_read": [66, 67, 69, 214], "seop": [0, 153, 157], "sep": [30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 70, 73, 95, 104, 183, 383, 385, 386], "separ": [3, 7, 35, 40, 49, 50, 52, 67, 72, 84, 89, 95, 97, 101, 113, 136, 153, 155, 157, 162, 163, 165, 169, 172, 174, 178, 181, 183, 184, 191, 237, 254, 348, 359, 383, 385, 386, 413, 430, 432, 438, 447, 448, 449, 486], "sepideh": [50, 115, 163, 303], "septemb": [115, 126, 137, 152, 157, 162, 447], "sepulcr": [115, 195, 223, 229, 250, 254], "sequenc": [40, 60, 63, 67, 69, 80, 126, 157, 164, 173, 178, 183, 185, 268, 296, 297, 298, 299, 308, 310, 311, 318, 331, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419, 434, 436, 437, 439, 457, 458, 469], "sequenti": [6, 171, 183, 431], "sequentialbackend": [36, 55, 59, 60, 99], "sereno": [115, 199, 204, 205, 206, 207, 208, 281], "seri": [6, 34, 48, 49, 53, 58, 62, 67, 74, 93, 95, 96, 98, 111, 112, 113, 115, 117, 124, 127, 129, 133, 150, 154, 157, 158, 160, 162, 164, 169, 174, 175, 182, 183, 184, 195, 220, 225, 230, 265, 277, 278, 279, 282, 294, 303, 304, 305, 318, 321, 331, 333, 336, 337, 348, 353, 359, 362, 365, 366, 367, 368, 369, 373, 376, 395, 410, 418, 421, 433, 438, 449, 450, 451, 456, 460, 471, 476, 486, 487], "serial": [128, 157, 171, 213], "seriou": 181, "serr": [73, 115, 197, 268], "serv": [150, 157, 172, 181, 201, 245, 259], "server": [172, 273, 275], "servic": 172, "servicesatlas": [211, 263], "session": [30, 117, 151, 153, 157, 164, 176, 180, 210, 304, 321, 336, 356, 485], "session_error": [58, 92, 103], "session_target": [3, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 95, 99, 104, 117, 183, 210, 262], "set": [3, 6, 15, 16, 17, 22, 29, 30, 31, 32, 34, 37, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 60, 66, 67, 70, 80, 81, 82, 90, 95, 96, 99, 100, 102, 103, 113, 115, 118, 124, 125, 126, 127, 129, 136, 140, 146, 149, 150, 152, 153, 155, 157, 158, 159, 162, 164, 166, 168, 171, 173, 174, 175, 176, 177, 178, 179, 181, 183, 185, 192, 195, 216, 220, 224, 226, 230, 231, 232, 238, 244, 245, 256, 257, 258, 262, 266, 267, 268, 273, 275, 277, 296, 297, 298, 299, 300, 301, 302, 303, 304, 308, 310, 311, 317, 318, 320, 321, 325, 331, 332, 334, 335, 336, 340, 343, 348, 350, 351, 352, 355, 356, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 382, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 418, 419, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 443, 444, 445, 446, 447, 449, 452, 457, 459, 465, 469, 471, 484, 486, 487], "set_axis_bgcolor": [138, 157], "set_axisbelow": [53, 100], "set_config": [185, 230, 231, 232, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 444, 445, 446, 447], "set_fit_request": [231, 232, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 445, 447], "set_index": 70, "set_inverse_transform_request": [230, 303, 304, 363, 364, 366, 367, 369, 370, 371, 372, 444, 445, 446, 447], "set_label_coord": 51, "set_major_formatt": [50, 51], "set_output": [230, 300, 303, 304, 318, 331, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 444, 445, 446, 447], "set_param": [230, 231, 232, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 444, 445, 446, 447], "set_score_request": [296, 297, 301, 302, 303, 304, 445], "set_size_inch": [42, 70, 111], "set_tick": 40, "set_ticklabel": 40, "set_titl": [63, 65, 70, 79, 80, 81, 92, 101, 107], "set_transform_request": [230, 300, 303, 304, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 445, 447], "set_xlabel": [32, 40, 45, 70], "set_xtick": 40, "set_ylabel": [32, 40, 45, 70, 76, 79], "set_ylim": 51, "set_ytick": 40, "setup": [63, 125, 154, 157, 177, 238, 239, 240, 241, 242, 243, 244, 248, 251, 252, 254, 262, 263, 271, 272, 277, 282, 292, 447, 485], "setuptool": [125, 157], "sever": [30, 32, 35, 40, 51, 53, 63, 64, 67, 72, 76, 87, 95, 100, 103, 105, 117, 125, 129, 137, 143, 157, 158, 166, 168, 169, 171, 172, 174, 176, 178, 181, 183, 184, 185, 198, 212, 224, 232, 318, 336, 347, 364, 377, 379, 380, 431, 445, 459, 471, 487], "sex": [76, 79, 115, 177, 193, 209, 238, 270, 282, 296, 297, 298, 299, 301, 302, 470], "sex_design": 76, "sex_stat": 76, "sf": 109, "sform": [3, 30, 31, 33, 34, 35, 36, 37, 40, 99, 155, 157], "sform_cod": [58, 92, 103], "sfvnmac": [140, 143, 157], "shade": [23, 434, 436, 437, 443], "shah": [0, 153, 157], "shalit": [115, 201, 245], "shall": 67, "shallow": [463, 464], "shape": [2, 3, 4, 6, 21, 26, 40, 42, 43, 45, 49, 51, 52, 53, 55, 56, 57, 58, 60, 63, 66, 67, 68, 69, 71, 72, 85, 92, 94, 95, 99, 101, 104, 105, 107, 108, 109, 111, 117, 130, 151, 152, 157, 159, 161, 162, 164, 167, 173, 174, 178, 180, 182, 185, 230, 231, 232, 234, 236, 237, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 271, 277, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 314, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 336, 337, 338, 341, 342, 343, 347, 348, 351, 352, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 419, 420, 429, 439, 442, 444, 445, 446, 447, 450, 451, 452, 453, 454, 459, 460, 463, 465, 487], "shaquanna": [115, 219, 282], "sharad": [115, 219, 282], "share": [102, 115, 118, 149, 157, 158, 163, 172, 183, 190, 191, 197, 198, 201, 218, 234, 243, 246, 247, 268, 273, 275], "sharex": 51, "sharp": [434, 436, 437, 484], "sharpen": 458, "shawn": [115, 228, 253], "shehzad": 115, "shell": [183, 295], "shevchenko": [0, 129, 157], "shift": [67, 149, 155, 157, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 459], "shinji": [115, 165], "shinohara": [58, 115, 359, 360], "ship": [4, 13, 95, 143, 157, 484], "shmelkov": [0, 119, 157], "shoe": [31, 33, 34, 35, 40, 183], "short": [67, 98, 101, 112, 113, 118, 129, 157, 171, 172, 178, 223, 230, 249, 250, 252, 253, 273, 274, 275, 276, 284, 285, 292, 296, 370, 372, 430, 434, 438, 465, 486], "shorten": [126, 155, 157], "shorter": [3, 67, 171, 359], "shortlog": [119, 120, 122, 123, 131, 133, 136, 157], "should": [4, 6, 15, 16, 33, 36, 37, 42, 43, 44, 49, 51, 53, 54, 55, 56, 57, 58, 60, 63, 66, 67, 68, 69, 70, 72, 80, 89, 90, 92, 93, 95, 99, 100, 101, 104, 105, 106, 107, 108, 117, 118, 139, 140, 150, 153, 154, 157, 162, 163, 164, 165, 167, 171, 172, 174, 180, 181, 185, 192, 226, 230, 231, 232, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 277, 278, 279, 280, 281, 282, 283, 284, 285, 292, 296, 297, 298, 299, 300, 301, 302, 303, 304, 315, 318, 320, 321, 325, 326, 331, 332, 334, 335, 336, 346, 347, 349, 352, 354, 355, 357, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 382, 383, 396, 416, 417, 419, 423, 425, 426, 428, 431, 432, 433, 434, 435, 437, 441, 444, 445, 446, 447, 448, 449, 453, 455, 456, 457, 459, 471, 482, 484, 485], "shouldn": [101, 181], "shout": [143, 157], "show": [2, 4, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 117, 127, 129, 138, 144, 149, 151, 153, 157, 158, 159, 162, 164, 165, 167, 169, 172, 174, 176, 177, 184, 185, 210, 227, 262, 274, 293, 305, 318, 331, 393, 395, 396, 398, 400, 402, 404, 406, 408, 410, 435, 439, 442, 447, 457, 471, 484, 486], "showcas": [53, 62, 75, 77, 100, 113, 161, 166, 172], "shown": [16, 22, 40, 42, 56, 67, 70, 95, 118, 151, 157, 158, 163, 164, 173, 174, 251, 360, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419, 428, 429, 432, 439, 441, 443, 471], "shrunk": 230, "shuffl": [37, 38, 50, 298, 299], "sici": [115, 204, 205, 206, 207, 208, 228, 253, 281], "side": [6, 52, 55, 65, 67, 95, 104, 124, 150, 157, 169, 273, 306, 374, 377, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 418, 427, 428, 456, 457], "sidti": [115, 219, 282], "siemen": [6, 226], "sig": 107, "sigma": [305, 308, 309, 310, 311], "sigman": [72, 115, 203], "sign": [10, 15, 24, 44, 104, 105, 125, 157, 169, 183, 191, 301, 302, 335, 355, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419, 425, 431, 439, 441, 443], "signal": [3, 6, 29, 45, 46, 47, 48, 50, 51, 52, 54, 57, 59, 61, 63, 67, 68, 70, 71, 72, 79, 84, 87, 95, 97, 101, 109, 113, 115, 123, 124, 125, 126, 127, 130, 142, 144, 146, 150, 151, 155, 157, 158, 160, 161, 162, 163, 164, 166, 169, 171, 174, 178, 182, 184, 191, 195, 201, 230, 231, 232, 234, 238, 245, 246, 248, 256, 257, 259, 262, 270, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 321, 331, 333, 336, 342, 343, 348, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 382, 414, 418, 419, 429, 430, 438, 439, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 457, 471, 486, 487], "signal_sc": [34, 70, 101, 153, 157, 318, 321, 470], "signals_to_img_label": [125, 157, 450, 454], "signals_to_img_map": [125, 157, 451, 453], "signatur": [144, 157, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469], "signed_neg_log_pv": [44, 104], "signed_neg_log_pvals_unmask": [44, 104], "signifi": [178, 296, 297, 298, 299], "signific": [35, 51, 67, 76, 81, 115, 164, 169, 171, 174, 176, 178, 333, 382, 456], "significantli": [44, 67, 143, 157, 169, 171], "sigpro": 115, "sikka": [115, 219, 282], "silent": [144, 153, 157], "silva": [115, 194, 241], "simexp": [0, 484], "similar": [10, 24, 25, 31, 50, 57, 80, 95, 101, 102, 117, 131, 143, 144, 146, 153, 157, 158, 161, 163, 165, 166, 169, 177, 178, 185, 298, 299, 360], "similarli": [16, 57, 95, 183], "simon": [0, 58, 115, 143, 148, 157, 223, 225, 250, 251, 359, 360], "simpl": [3, 5, 26, 30, 32, 36, 38, 40, 42, 49, 58, 62, 66, 71, 74, 76, 77, 78, 80, 81, 84, 85, 88, 90, 92, 95, 97, 99, 101, 102, 103, 113, 115, 117, 118, 136, 138, 143, 153, 157, 158, 159, 165, 167, 168, 171, 172, 173, 176, 177, 178, 180, 184, 185, 210, 227, 230, 231, 232, 259, 261, 268, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 309, 315, 318, 331, 343, 348, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 418, 432, 433, 438, 444, 445, 446, 447, 455, 470, 471, 486, 487], "simplefilt": 71, "simpler": 53, "simpleregressionresult": [127, 155, 157, 318], "simplest": [4, 71, 99, 118, 167, 171, 484], "simpli": [3, 67, 68, 69, 72, 90, 102, 103, 105, 107, 110, 118, 174, 181, 185, 195, 242, 335, 347, 353, 426, 431, 432, 433], "simplic": [40, 67, 69, 164], "simplifi": [102, 110, 117, 136, 146, 154, 157, 185, 266, 267], "simuilar": [127, 157], "simul": [29, 47, 48, 61, 65, 68, 101, 113, 129, 157, 160, 169, 232, 300, 381, 430, 438, 486, 487], "simultan": [50, 171, 234], "sin": [0, 25, 85, 129, 157], "sinc": [15, 20, 34, 41, 60, 67, 72, 76, 78, 82, 102, 110, 117, 124, 151, 157, 171, 174, 191, 230, 240, 246, 247, 255, 296, 306, 314, 321, 322, 323, 324, 328, 329, 330, 356, 357, 359, 366, 367, 382, 386, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 418, 450, 451, 455, 484], "singh": [0, 143, 157], "singl": [1, 3, 8, 15, 24, 31, 32, 48, 49, 51, 61, 62, 66, 67, 68, 74, 78, 80, 87, 95, 101, 106, 113, 115, 118, 122, 127, 129, 149, 150, 151, 152, 155, 157, 158, 165, 169, 171, 172, 173, 176, 180, 183, 185, 192, 214, 226, 240, 259, 273, 279, 280, 293, 296, 297, 298, 299, 308, 310, 311, 318, 325, 331, 333, 334, 337, 348, 351, 362, 363, 364, 365, 366, 367, 368, 369, 395, 417, 420, 421, 426, 428, 430, 431, 433, 438, 440, 445, 447, 456, 484, 486], "single_mni_imag": 343, "singleton": [51, 362, 363, 364, 365, 366, 367, 368, 369, 447], "singular": [79, 308, 310, 311, 342, 460], "siong": [38, 115], "site": [2, 3, 4, 10, 11, 12, 15, 16, 17, 19, 21, 22, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 44, 45, 49, 50, 51, 52, 54, 56, 59, 60, 63, 65, 71, 72, 76, 78, 79, 80, 87, 88, 89, 93, 96, 99, 104, 105, 106, 107, 108, 111, 190, 193, 220, 238, 239, 277], "sitek": [0, 125, 157], "sitter": [0, 126, 157], "situat": [16, 60, 158, 164, 165, 183, 353], "six": [43, 195], "size": [6, 16, 23, 27, 33, 34, 42, 46, 50, 51, 55, 60, 64, 69, 78, 80, 81, 82, 85, 92, 95, 103, 104, 105, 107, 111, 126, 128, 133, 143, 144, 146, 153, 157, 162, 169, 170, 171, 174, 195, 213, 270, 277, 318, 331, 333, 334, 355, 363, 364, 366, 367, 374, 377, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 419, 429, 430, 434, 436, 437, 439, 442, 444, 445, 446, 447, 448, 449, 456, 457, 458, 469, 470, 471], "size_vert": [383, 385, 386], "sizeof_hdr": [58, 92, 103], "sizes_": [444, 446], "sketch": 46, "skim": 273, "skip": [39, 51, 58, 126, 129, 157, 172, 396, 435, 438], "sklearn": [3, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 50, 51, 53, 54, 55, 59, 60, 93, 95, 99, 100, 104, 105, 106, 107, 108, 111, 127, 143, 146, 150, 151, 157, 158, 164, 165, 167, 171, 185, 230, 231, 232, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 261, 262, 263, 265, 269, 273, 275, 279, 280, 281, 282, 284, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 327, 331, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 444, 445, 446, 447], "skull": [90, 263, 374, 375, 376, 378, 379], "skullstrip": [152, 157, 178, 289], "sled": [115, 192], "sleep": 0, "slice": [2, 3, 6, 10, 17, 37, 90, 95, 107, 117, 125, 142, 149, 151, 157, 169, 183, 185, 194, 195, 226, 318, 321, 331, 343, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 426, 457, 487], "slice_cod": [58, 92, 103], "slice_dur": [58, 92, 103], "slice_end": [58, 92, 103], "slice_start": [58, 92, 103], "slice_time_ref": [34, 63, 67, 69, 71, 125, 126, 157, 318, 321, 470], "slicer": [153, 157, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 484], "slight": [155, 157], "slightli": [24, 50, 51, 67, 85, 116, 140, 157, 165, 176, 230, 232, 351, 352], "slovakia": 0, "slow": [6, 37, 46, 67, 170, 171, 172, 185, 195, 484], "slower": [99, 167, 171, 351], "slowest": 171, "slowli": 171, "sluggish": 174, "sm": [115, 191, 270], "small": [6, 19, 51, 53, 60, 66, 87, 100, 104, 105, 115, 132, 134, 135, 157, 161, 162, 169, 171, 172, 173, 180, 181, 300, 306, 336, 431, 432, 445, 448, 459, 469, 484], "small_meta_imag": 118, "smaller": [3, 6, 33, 82, 133, 143, 151, 155, 157, 161, 169, 170, 171, 174, 178, 183, 246, 247, 302, 334, 347, 355, 444], "smallest": 171, "smart": 444, "smith": [2, 22, 84, 95, 97, 104, 113, 115, 158, 178, 187, 191, 251, 270, 333, 343, 362, 367, 382, 416, 431, 433, 438, 447, 486], "smith2009": 22, "smith_2009": [2, 22, 88], "smith_bm10": 22, "smith_bm20": 22, "smith_bm70": 22, "smith_rsn10": 22, "smith_rsn20": 22, "smith_rsn70": 22, "smoller": [115, 223, 229, 250, 254], "smooth": [6, 30, 35, 40, 44, 46, 51, 57, 70, 76, 82, 84, 95, 97, 102, 107, 113, 115, 139, 140, 157, 161, 163, 164, 165, 171, 178, 180, 182, 183, 195, 225, 259, 296, 297, 298, 299, 303, 304, 318, 331, 333, 348, 353, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 382, 423, 434, 436, 437, 438, 444, 445, 447, 449, 486, 487], "smooth_anat_img": 4, "smooth_arrai": 449, "smooth_img": [4, 70, 95, 96, 105, 140, 146, 157, 183, 184, 185], "smooth_x": 46, "smootharomanonaggr_bold": [359, 360], "smoothed_img": [96, 183], "smoothen": 172, "smoother": 67, "smoothing_fwhm": [30, 34, 35, 36, 44, 51, 52, 54, 55, 56, 57, 58, 60, 64, 67, 72, 76, 77, 78, 80, 90, 92, 93, 99, 101, 102, 104, 106, 107, 108, 139, 157, 162, 164, 185, 296, 297, 298, 299, 303, 304, 318, 321, 331, 333, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 445, 447, 449, 470, 471], "snapshot": 63, "snippet": 118, "snr": [46, 178, 336, 459], "snyder": [115, 195, 359, 360], "so": [3, 6, 7, 12, 15, 23, 34, 37, 40, 42, 45, 50, 51, 54, 67, 69, 70, 72, 73, 77, 80, 81, 82, 87, 90, 93, 95, 101, 102, 103, 105, 110, 118, 126, 151, 157, 169, 170, 171, 172, 174, 181, 183, 185, 191, 192, 230, 231, 232, 240, 246, 247, 254, 273, 278, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 321, 331, 333, 356, 357, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 382, 428, 434, 436, 437, 441, 443, 444, 445, 446, 447, 469], "sochat": [115, 118, 218, 273, 275], "social": [115, 200, 259], "socioeconom": 277, "soft": 178, "softwar": [0, 69, 73, 103, 130, 157, 174, 175, 178, 240, 358, 485, 487], "solari": [77, 115, 313], "sole": [67, 118, 171, 363, 364, 365, 366, 367, 368, 370, 371, 372], "solut": [6, 66, 67, 158, 159, 165, 170, 171, 180, 183, 223, 304], "solv": [32, 41, 171, 172, 180, 181, 304, 382], "solver": [40, 41, 115, 170, 296, 298, 301, 302], "somatomotordors": 258, "somatomotorlater": 258, "some": [0, 3, 6, 7, 10, 15, 16, 31, 42, 43, 50, 51, 58, 67, 68, 69, 71, 81, 85, 87, 93, 99, 103, 105, 106, 111, 117, 118, 126, 130, 136, 143, 149, 152, 153, 155, 157, 164, 165, 167, 169, 171, 172, 174, 177, 180, 181, 183, 184, 185, 223, 229, 230, 231, 232, 238, 244, 246, 247, 249, 250, 253, 273, 296, 297, 298, 299, 300, 301, 302, 303, 304, 308, 318, 331, 334, 336, 358, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 425, 426, 429, 432, 433, 440, 444, 445, 446, 447, 450, 456, 459, 484, 485], "some_high_valu": [44, 45], "someth": 67, "sometim": [60, 65, 67, 81, 118, 122, 126, 157, 164, 172, 178, 305, 309], "somewhat": 67, "son": [115, 310, 311], "song": [0, 153, 157], "soon": [38, 71, 115, 181], "sophi": [0, 125, 157], "sophist": [71, 99, 167], "sorri": 66, "sort": [13, 22, 31, 32, 36, 44, 45, 64, 76, 117, 129, 151, 157, 181, 183, 260, 295, 331, 333, 346, 382], "sought": [171, 178], "sound": [42, 174], "sourav": [0, 143, 157], "sourc": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 158, 159, 163, 171, 172, 181, 221, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 485], "source_affin": 85, "source_img": 352, "southern": 0, "sp": 35, "sp1": 43, "sp2": 43, "sp3": 43, "space": [3, 6, 7, 16, 23, 24, 29, 42, 47, 50, 53, 57, 62, 64, 67, 69, 74, 85, 100, 102, 110, 113, 117, 118, 125, 129, 136, 138, 140, 143, 146, 151, 157, 159, 172, 173, 174, 177, 178, 185, 195, 199, 201, 202, 209, 212, 213, 222, 223, 224, 226, 227, 229, 241, 243, 248, 250, 252, 254, 256, 257, 258, 273, 275, 277, 280, 282, 302, 303, 304, 318, 321, 325, 336, 337, 338, 348, 351, 362, 365, 368, 369, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 414, 415, 417, 418, 419, 423, 425, 426, 429, 431, 432, 433, 438, 439, 440, 442, 444, 446, 459, 469, 486], "space_label": [64, 101, 102, 110, 321], "spacenet": [3, 136, 157, 164, 165, 166, 168, 178, 301, 302, 487], "spacenetclassifi": [170, 296, 297, 302], "spacenetregressor": [41, 45, 170, 301], "span": [55, 71, 174, 417, 431, 432, 433, 440], "spars": [31, 41, 42, 48, 50, 51, 59, 60, 61, 113, 115, 159, 160, 162, 163, 165, 170, 178, 179, 186, 217, 231, 232, 234, 248, 259, 301, 302, 303, 304, 362, 367, 415, 419, 430, 434, 436, 437, 438, 439, 447, 486, 487], "sparser": [71, 95, 163, 301, 302, 447, 449], "sparsifi": [133, 157], "sparsiti": [42, 50, 115, 131, 157, 158, 162, 163, 165, 166, 170, 171, 178, 217, 232, 234, 301, 302, 304, 447], "spatial": [3, 6, 32, 41, 45, 48, 51, 52, 56, 61, 87, 95, 96, 99, 106, 110, 113, 115, 125, 149, 153, 157, 161, 163, 164, 167, 168, 174, 178, 179, 182, 185, 191, 192, 195, 198, 210, 211, 213, 217, 223, 225, 226, 240, 243, 248, 250, 259, 262, 270, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 333, 344, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 431, 433, 438, 445, 447, 449, 471, 486, 487], "spatial_pattern": 217, "spatialimag": [125, 157, 183, 339], "spatiotempor": [101, 115], "speaker": 203, "special": [118, 125, 146, 157, 172], "specif": [6, 15, 16, 17, 18, 31, 33, 34, 40, 50, 51, 63, 64, 65, 66, 67, 69, 71, 77, 80, 81, 85, 95, 102, 110, 115, 116, 121, 127, 136, 149, 155, 157, 158, 161, 162, 163, 164, 165, 167, 169, 172, 174, 176, 177, 178, 180, 181, 182, 185, 191, 195, 216, 227, 238, 260, 270, 275, 278, 306, 308, 310, 311, 321, 332, 336, 347, 356, 358, 364, 367, 369, 382, 396, 414, 434, 435, 436, 437, 443, 447, 459, 467, 468, 469, 484, 487], "specifi": [10, 15, 16, 33, 58, 63, 64, 67, 69, 71, 72, 76, 79, 80, 81, 82, 85, 90, 95, 96, 102, 103, 109, 110, 118, 123, 126, 127, 128, 140, 143, 144, 146, 149, 150, 151, 152, 153, 155, 157, 158, 159, 169, 171, 173, 174, 181, 183, 184, 185, 201, 217, 246, 247, 251, 273, 274, 276, 278, 286, 287, 288, 289, 290, 291, 296, 297, 298, 299, 301, 302, 303, 304, 308, 310, 311, 314, 318, 321, 325, 326, 327, 331, 332, 336, 340, 348, 351, 353, 359, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 379, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 418, 423, 425, 426, 428, 430, 431, 432, 433, 434, 436, 437, 440, 441, 443, 445, 447, 457, 458, 459, 469, 484], "speck": [115, 169], "spectral": [13, 115, 198, 243], "spectrum": 171, "speed": [3, 24, 37, 38, 49, 78, 90, 99, 107, 115, 126, 157, 161, 167, 170, 171, 184, 185, 382, 444, 469], "speedup": 171, "spent": 171, "sphere": [16, 37, 38, 48, 57, 61, 113, 128, 148, 151, 157, 168, 185, 192, 204, 205, 206, 207, 208, 230, 256, 257, 259, 281, 284, 285, 292, 362, 369, 414, 419, 429, 430, 434, 435, 436, 437, 438, 439, 443, 455, 468, 469, 476, 484, 486, 487], "sphere_left": [204, 205, 206, 207, 208, 281], "sphere_right": [204, 205, 206, 207, 208, 281], "spheres_mask": 60, "spheric": [60, 284], "sphinx": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 131, 133, 137, 138, 140, 157, 172], "sphinx_gallery_conf": 172, "sphinx_gallery_dummy_imag": [162, 184], "sphx_glr_auto_examples_00_tutorials_plot_decoding_tutori": 164, "spike": 67, "spline": [124, 157, 425, 426, 432, 433, 440, 459], "split": [3, 31, 32, 33, 35, 37, 40, 41, 42, 43, 44, 45, 46, 49, 51, 53, 87, 95, 100, 101, 149, 157, 162, 164, 166, 171, 172, 178, 184, 246, 247, 296, 297, 298, 299], "split_index": 43, "split_multi_scal": 43, "splitter": [296, 297], "spm": [6, 12, 37, 63, 67, 68, 71, 80, 87, 95, 115, 130, 154, 155, 157, 168, 173, 175, 178, 183, 187, 192, 240, 279, 280, 318, 320, 325, 328, 329, 330, 347, 487], "spm12": 240, "spm5": 240, "spm8": [44, 76, 240, 277], "spm_auditori": [6, 70, 279], "spm_dispersion_deriv": [129, 157, 318, 320, 325], "spm_hrf": [129, 153, 157, 318, 320, 325], "spm_multimodal_fmri": [71, 173, 280], "spm_time_deriv": [129, 157, 318, 320, 325], "spontan": [115, 217, 248], "sportingli": [143, 157], "spot": 67, "spread": [25, 99, 167, 373], "springer": [115, 158, 211, 217, 230, 248, 263], "spuriou": [67, 115, 162, 172, 195, 359, 360, 448], "sqrt": [109, 136, 157, 236, 237, 310, 311], "squar": [43, 45, 51, 67, 101, 104, 107, 115, 159, 165, 170, 171, 173, 195, 230, 297, 302, 305, 308, 309, 310, 318, 331, 342, 358, 359, 364, 367, 371, 382, 444, 445, 446, 460], "squeez": [24, 303, 304, 445], "squeeze_on_sav": 465, "src_img": 427, "src_label": [64, 427], "sreen": 35, "sriniva": [115, 194, 241], "srow_i": [58, 92, 103], "srow_x": [58, 92, 103], "srow_z": [58, 92, 103], "ss": 118, "sse": [305, 309, 310, 311], "ssp": 203, "sst": 203, "sstdsp": 203, "sstssp": 203, "sstssp_minus_dstdsp": [72, 470], "st": 0, "stabil": [150, 157, 163, 195, 298, 299, 306], "stabl": [35, 50, 58, 115, 124, 143, 157, 163, 165, 166, 171, 180, 242, 281, 296, 297, 298, 299, 303, 304, 359, 441, 442, 469, 485], "stable_project": [223, 250], "stack": [42, 53, 60, 151, 157, 178, 237], "stage": [101, 115, 172, 180], "stall": 181, "stan": [308, 310, 311], "stand": [16, 46, 146, 157, 178, 184, 484], "standalon": [318, 331, 457], "standard": [3, 6, 10, 12, 23, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 64, 67, 69, 70, 73, 76, 90, 92, 93, 95, 99, 100, 102, 106, 107, 108, 110, 111, 115, 117, 125, 126, 143, 146, 150, 152, 153, 157, 159, 162, 164, 165, 169, 172, 173, 174, 178, 183, 184, 185, 199, 204, 205, 206, 207, 208, 230, 252, 277, 296, 297, 298, 299, 301, 302, 303, 304, 310, 311, 318, 320, 321, 325, 336, 356, 359, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 418, 445, 447, 459, 470, 471, 485], "standard_devi": [146, 157, 363, 366, 450], "standard_glm": 101, "standard_norm": [65, 308, 310, 311], "standardize_confound": [34, 49, 51, 52, 53, 54, 55, 56, 57, 58, 60, 90, 92, 93, 100, 153, 157, 162, 185, 303, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 447, 459, 471], "standardize_sign": [125, 127, 157], "standardscal": [38, 41, 42, 43, 46, 111], "stanford": [0, 115, 170], "stanisla": [72, 73, 115, 180, 197, 203, 268], "stanlei": [115, 219, 282], "start": [2, 3, 6, 7, 31, 42, 51, 58, 60, 71, 85, 92, 95, 155, 157, 164, 171, 172, 178, 179, 181, 185, 226, 240, 242, 243, 251, 253, 315, 318, 320, 325, 362, 363, 364, 365, 366, 367, 368, 369, 382, 447, 469], "starttim": [101, 102, 110], "stat": [6, 24, 34, 64, 68, 72, 77, 80, 95, 102, 105, 109, 115, 155, 157, 158, 171, 175, 184, 231, 234, 306, 315, 318, 331, 355, 358, 437, 441, 443, 456, 457, 470, 484], "stat_img": [10, 14, 15, 16, 17, 91, 94, 313, 318, 331, 334, 456, 457], "stat_map": [10, 24, 38, 69, 110, 334, 428, 436, 437], "stat_map_img": [10, 425, 433, 440, 441], "stat_map_surf": 24, "stat_maps_pair": 81, "stat_maps_unpair": 81, "stat_threshold": [6, 70, 456], "stat_typ": [6, 69, 70, 110, 127, 128, 157, 306, 314, 318], "state": [0, 2, 24, 31, 33, 50, 51, 52, 53, 56, 58, 67, 88, 90, 93, 100, 101, 115, 126, 138, 149, 151, 157, 158, 159, 161, 162, 163, 165, 170, 174, 178, 180, 181, 190, 191, 193, 194, 195, 198, 202, 217, 219, 224, 225, 238, 239, 241, 242, 270, 282, 296, 297, 298, 299, 300, 303, 304, 318, 327, 333, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 445, 447, 459, 471, 487], "static": [10, 384, 440], "statist": [2, 7, 9, 15, 23, 24, 28, 34, 37, 42, 44, 51, 66, 67, 69, 71, 72, 75, 76, 83, 84, 97, 101, 102, 104, 105, 107, 110, 115, 116, 124, 127, 129, 131, 138, 139, 149, 151, 155, 157, 158, 163, 166, 169, 171, 172, 173, 175, 178, 179, 180, 184, 185, 198, 227, 231, 234, 244, 252, 267, 273, 274, 275, 284, 285, 293, 306, 307, 308, 310, 311, 312, 313, 314, 318, 331, 333, 334, 336, 355, 358, 382, 395, 396, 425, 428, 431, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 447, 449, 456, 457, 459, 465, 469, 470, 480, 485, 486, 487], "statistician": 169, "statmap": 358, "statstic": 82, "statu": [164, 178, 193, 277], "std": [31, 33, 46, 53, 90, 106, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 459], "std_coef_": [296, 297, 298, 299], "std_coef_img_": [296, 297, 298, 299], "std_dvars_threshold": [58, 127, 157, 359, 360], "std_test_scor": 100, "stderr": 43, "steadi": [58, 67, 151, 157, 318, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 447, 459], "steel": [101, 115], "steinkamp": [0, 143, 148, 157], "step": [3, 12, 21, 34, 36, 38, 40, 44, 46, 49, 51, 52, 57, 60, 63, 64, 66, 67, 69, 72, 80, 81, 90, 95, 99, 102, 110, 117, 124, 129, 141, 149, 155, 157, 158, 161, 162, 163, 164, 166, 167, 169, 171, 172, 178, 181, 182, 183, 184, 193, 200, 232, 239, 264, 277, 287, 290, 298, 299, 303, 304, 318, 321, 333, 360, 362, 365, 368, 374, 375, 376, 378, 379, 445, 459, 487], "stephan": [115, 336, 459], "stephani": [115, 219, 282], "stephen": [104, 115, 158, 171, 178, 191, 209, 219, 225, 251, 270, 282, 333, 382], "stereotax": 195, "stern": [115, 305, 309], "steven": [0, 60, 115, 125, 127, 157, 194, 195, 202, 209, 222, 224, 241, 256, 257, 258, 359, 360], "stick": [67, 174], "still": [16, 51, 67, 80, 92, 103, 118, 126, 153, 157, 169, 171, 176, 181, 185, 273, 484], "stim": 68, "stim_typ": 39, "stimui": 174, "stimul": [6, 73, 164, 226], "stimuli": [29, 31, 33, 34, 40, 47, 67, 81, 99, 113, 158, 159, 161, 162, 164, 174, 180, 183, 185, 200, 210, 262, 272, 338, 355, 362, 365, 368, 410, 433, 438, 471, 486], "stimuli_random_runs_filenam": 42, "stimuli_run": 42, "stimulu": [40, 42, 43, 66, 101, 174], "stimulus_inform": 39, "stimulus_run": 42, "stimulus_shap": 42, "stipul": 99, "stochast": 201, "stop": [55, 98, 112, 113, 115, 118, 170, 231, 234, 273, 275, 341, 346, 347, 349, 425, 433, 438, 444, 486], "stop_go_image_id": 109, "stopsign": 64, "stopsignal_contrast": 64, "stopsignal_design": 64, "stopsignal_report": 64, "stopsignal_stat": 64, "stopsignal_statmap": 64, "stopsuccess": [64, 470], "stopsuccessminusgo": 64, "stopsuccessminusgo_design": 64, "stopsuccessminusgo_stat": 64, "storag": [185, 274, 276], "store": [2, 3, 7, 10, 23, 24, 27, 30, 46, 51, 52, 53, 54, 56, 70, 95, 102, 110, 111, 118, 162, 164, 169, 172, 225, 246, 247, 283, 308, 310, 311, 349, 373, 382, 427, 461, 462], "store_precis": 230, "stori": [67, 69, 115, 215, 271], "str": [23, 64, 76, 101, 128, 152, 157, 172, 192, 230, 231, 232, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 315, 316, 318, 320, 321, 325, 331, 332, 333, 334, 335, 336, 347, 351, 352, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 453, 455, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469], "straightforward": [72, 171, 306], "strategi": [3, 25, 29, 47, 50, 51, 67, 89, 90, 92, 93, 100, 110, 113, 115, 125, 127, 129, 146, 150, 151, 153, 157, 162, 165, 168, 169, 171, 174, 182, 232, 262, 296, 297, 298, 299, 300, 303, 304, 321, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 378, 418, 430, 431, 438, 445, 450, 459, 469, 471, 486, 487], "stratifi": [151, 157, 164, 296, 298, 300], "stratifiedkfold": [296, 297], "stratifiedshufflesplit": [53, 100], "stream": [3, 33, 117, 179, 185, 210], "strength": [49, 146, 149, 157, 238, 353, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419, 484], "stress": 171, "striat": 53, "strict": 172, "strictli": [246, 247], "string": [4, 10, 16, 23, 24, 30, 34, 50, 57, 73, 78, 80, 89, 93, 101, 102, 110, 111, 117, 128, 140, 141, 153, 155, 157, 172, 183, 192, 194, 213, 231, 238, 240, 266, 267, 274, 276, 277, 280, 283, 295, 300, 301, 302, 303, 304, 308, 310, 311, 316, 318, 320, 325, 331, 333, 335, 336, 337, 346, 347, 350, 355, 356, 358, 368, 370, 371, 372, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 418, 419, 420, 422, 423, 424, 425, 428, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 448, 457, 459], "string_beta_seri": 101, "string_connectivity_img": 101, "string_corr": 101, "string_seed_beta_seri": 101, "strive": 3, "stroke": [115, 158, 230], "strong": [65, 67, 90, 171, 172], "stronger": 158, "strongest": 60, "strongli": [164, 172, 178], "struct": [151, 157], "structur": [3, 6, 24, 40, 41, 43, 45, 48, 51, 53, 60, 61, 65, 67, 113, 115, 158, 164, 166, 167, 168, 169, 171, 178, 183, 190, 192, 193, 194, 195, 197, 198, 201, 209, 210, 211, 216, 217, 220, 225, 226, 229, 232, 240, 242, 251, 254, 262, 263, 268, 277, 301, 302, 305, 356, 374, 375, 376, 378, 379, 430, 438, 441, 446, 452, 486, 487], "student": [95, 174, 184, 221, 306, 487], "studi": [0, 2, 6, 32, 34, 42, 44, 58, 67, 71, 76, 98, 100, 112, 113, 115, 118, 160, 165, 167, 168, 170, 171, 174, 179, 183, 192, 195, 202, 210, 211, 216, 220, 227, 242, 263, 273, 275, 277, 286, 289, 300, 341, 346, 347, 349, 353, 359, 360, 362, 368, 425, 433, 438, 486, 487], "stufflebeam": [115, 195], "style": [4, 131, 153, 157, 295], "sub": [6, 22, 49, 50, 51, 54, 55, 56, 57, 58, 60, 64, 79, 86, 92, 93, 96, 101, 102, 106, 110, 151, 157, 230, 231, 232, 246, 247, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 356, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 444, 445, 446, 447, 457], "sub001": 280, "sub_fold": 356, "sub_id": 238, "sub_label": [101, 102, 110, 125, 157, 321, 356], "subcallos": 92, "subclass": [16, 172, 412], "subcompon": 178, "subcort": [22, 115, 143, 157, 209, 212, 221, 224, 246, 247, 249, 258], "subcortex": [22, 115, 224, 258], "subdirectori": [273, 275], "subdivid": [115, 209, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410], "subfold": 181, "subgradi": [115, 171], "subgroup": 178, "subj": 4, "subj1": 183, "subj1_img": 103, "subj2": [3, 17, 19, 26, 30, 31, 33, 35, 36, 37, 95, 104, 117], "subj2_img": 103, "subject": [1, 3, 4, 8, 12, 16, 17, 18, 19, 22, 23, 24, 26, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 48, 49, 50, 51, 52, 54, 56, 58, 59, 60, 61, 62, 66, 67, 69, 72, 74, 76, 78, 79, 81, 86, 92, 95, 96, 100, 101, 102, 103, 104, 106, 107, 108, 111, 113, 115, 117, 118, 124, 125, 126, 127, 129, 134, 136, 137, 146, 149, 157, 159, 160, 161, 162, 164, 171, 173, 174, 176, 177, 180, 182, 183, 184, 186, 189, 191, 192, 194, 195, 197, 200, 209, 213, 214, 215, 217, 219, 225, 226, 230, 231, 232, 234, 238, 239, 240, 242, 248, 259, 262, 267, 268, 270, 271, 277, 279, 280, 281, 282, 292, 295, 303, 304, 318, 321, 325, 331, 332, 334, 337, 348, 351, 356, 359, 360, 362, 363, 364, 365, 367, 368, 369, 377, 379, 395, 415, 417, 419, 420, 421, 426, 430, 433, 438, 445, 456, 471, 484, 486, 487], "subject1": 183, "subject2": 183, "subject_": 183, "subject_01": 183, "subject_03": 183, "subject_data": [6, 70, 71, 173], "subject_effect": 81, "subject_id": [64, 102, 110, 279, 280], "subject_label": [34, 64, 79, 102, 318, 331, 332, 333, 470], "subject_time_seri": 55, "subjects_label": [79, 332], "submit": [178, 181], "submodul": [153, 155, 157, 172], "subobject": [230, 231, 232, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 444, 445, 446, 447], "subpart": [153, 157], "subpeak": [318, 331, 456, 457], "subplot": [12, 13, 25, 31, 39, 40, 42, 43, 45, 46, 51, 53, 59, 65, 66, 67, 68, 70, 76, 79, 80, 81, 95, 101, 102, 107, 111, 124, 157, 424, 434, 435, 436, 437], "subplot_kw": [111, 434, 435, 436, 437], "subplots_adjust": [13, 26, 42, 46, 51, 59, 68, 184], "subsampl": 201, "subsequ": [51, 85, 185, 273, 275, 277, 359, 360], "subset": [37, 46, 95, 102, 110, 165, 169, 172, 195, 295, 296, 308, 321, 343, 359, 463, 464], "substitut": [101, 455], "subtract": [60, 67, 102, 180, 274], "succ": 109, "success": [6, 172, 174, 181, 185, 226], "successfulli": 172, "sufen": [115, 209], "suffer": 360, "suffix": 360, "suggest": [0, 6, 87, 153, 157, 161, 180, 183, 336, 374, 376, 377, 379, 459], "suit": [95, 101, 159, 165, 180, 195, 242], "suitabl": [58, 69, 143, 157, 165, 169, 185, 271, 360], "sulc": [434, 435, 436, 437, 443, 467], "sulc_left": [204, 205, 206, 207, 208, 281, 428, 441], "sulc_right": [204, 205, 206, 207, 208, 281, 428, 441, 484], "sulcal": [10, 23, 24, 38, 69, 110, 111, 115, 199, 204, 205, 206, 207, 208, 244, 281, 285, 428, 434, 436, 437, 441, 443], "sulci": [23, 115, 199, 252], "sulco": [199, 252], "sum": [3, 43, 44, 51, 60, 66, 68, 78, 80, 85, 102, 104, 107, 108, 109, 146, 157, 171, 297, 301, 302, 305, 309, 310, 342, 363, 366, 450, 460], "summar": [56, 60, 92, 164, 172, 310, 364, 366, 367, 369, 456, 471], "summari": [34, 64, 72, 92, 151, 172, 306, 471], "summary_statistics_run_1": 72, "summary_statistics_run_2": 72, "summerlin": [115, 228, 253], "sup": 471, "superimpos": 427, "superior": [92, 105, 170, 350], "supervis": [51, 115, 165, 167, 168, 178, 180], "supplement": [115, 199, 211, 244, 263, 289], "supplementari": [92, 117, 169], "suppli": [60, 300, 301, 302, 325, 359, 366, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419, 450, 459], "support": [0, 4, 10, 16, 30, 33, 34, 35, 36, 40, 46, 99, 107, 117, 122, 124, 125, 127, 129, 130, 138, 139, 140, 143, 144, 145, 146, 150, 151, 153, 154, 155, 157, 164, 165, 167, 169, 174, 178, 179, 181, 296, 297, 298, 299, 306, 358, 359, 363, 366, 434, 436, 437, 453, 469, 485], "supported_loss": [301, 302], "supported_penalti": [301, 302], "suppos": [103, 118, 171, 181, 183, 185, 310, 311], "supposedli": [71, 227], "suppress": [2, 16, 19, 31, 37, 42, 44, 45, 50, 88, 104, 108, 115, 195], "supra": 174, "supracalcarin": 92, "supramar": 471, "supramargin": 92, "suptitl": [39, 42, 44, 45, 46, 67, 73, 76, 80, 101, 102, 107], "sur": [0, 172], "suramya": [0, 127, 157], "sure": [16, 24, 95, 113, 124, 127, 128, 129, 157, 169, 172, 181, 301, 302, 485], "surf_data": [428, 434, 436, 437, 441, 443, 467, 469], "surf_img_nki": [24, 111], "surf_map": [7, 10, 23, 111, 434, 436, 437, 443], "surf_mesh": [10, 23, 24, 69, 110, 129, 157, 396, 428, 434, 435, 436, 437, 441, 443, 468, 469, 484], "surf_plot": [10, 126, 138, 157], "surfac": [1, 8, 9, 13, 28, 29, 47, 57, 62, 74, 98, 112, 113, 115, 117, 125, 126, 128, 130, 138, 140, 142, 143, 144, 146, 149, 150, 151, 153, 155, 175, 178, 179, 180, 187, 199, 204, 205, 206, 207, 208, 229, 230, 244, 252, 262, 265, 269, 281, 282, 284, 285, 292, 293, 296, 303, 304, 318, 321, 331, 343, 359, 370, 371, 372, 382, 396, 419, 425, 428, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 476, 486, 487], "surface_imag": [7, 10, 69], "surface_image_data": 7, "surface_image_data_hemi": 7, "surface_image_load": 7, "surface_image_mesh": 7, "surface_image_mesh_hemi": 7, "surface_mesh": 469, "surface_plot": 484, "surfaceimag": [7, 10, 23, 24, 38, 69, 110, 111, 129, 157, 281, 285, 292, 296, 297, 298, 299, 303, 304, 315, 318, 331, 333, 370, 371, 372, 396, 434, 435, 436, 437, 443, 445, 446, 452, 471], "surfacelabelsmask": [24, 129, 130, 157, 371, 471], "surfacemapsmask": [130, 157], "surfacemask": [111, 129, 130, 157, 296, 297, 298, 299, 315, 318, 331, 371, 445, 446, 471], "surfacemesh": [464, 465], "surfaceview": [441, 443], "surfer": [229, 254], "surpass": 174, "surrog": [37, 104], "surround": [151, 157, 469], "surviv": [52, 150, 157, 306, 447], "sustain": 172, "svc": [3, 30, 31, 32, 33, 34, 35, 36, 40, 117, 146, 157, 164, 165, 167, 296, 298, 300], "svc_coef": 99, "svc_l1": [31, 33, 40, 165, 296, 298], "svc_l2": [31, 40, 165, 296, 298], "svc_ova": 36, "svc_ovo": 36, "svd": [138, 157, 304, 342, 445, 460], "svg": [16, 64, 76, 126, 157, 358, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 431, 432, 433, 434, 435, 436, 437], "svm": [29, 35, 36, 40, 41, 44, 46, 47, 53, 100, 113, 117, 138, 157, 166, 168, 170, 178, 185, 262, 296, 343, 433, 438, 440, 486, 487], "svr": [41, 44, 46, 146, 157, 165, 297, 299, 300], "swap": [169, 184, 277, 354], "swap_img_hemispher": 184, "sweden": 0, "swiss": 185, "switch": [127, 138, 145, 157, 172, 181, 425], "switzerland": 0, "sy": [0, 43, 126, 157], "syllab": [6, 226], "sylvain": [0, 140, 143, 146, 157], "sym": [20, 195, 237, 242], "sym_matrix_to_vec": [139, 157, 237], "sym_to_vec": [131, 136, 139, 151, 157], "symbol": [172, 173, 346], "symlink": [278, 294], "symmetr": [10, 20, 49, 80, 139, 157, 171, 195, 236, 237, 242, 246, 247, 263, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419, 428, 433, 434, 437, 439, 440, 441, 443], "symmetri": [169, 171], "symmetric_cbar": [15, 70, 126, 157, 425, 428, 433, 437], "symmetric_cmap": [10, 23, 111, 126, 144, 157, 434, 439, 440, 441, 443, 484], "symmetric_split": [133, 157, 246, 247], "symposium": [50, 115, 163, 303, 304], "symptom": 193, "synchron": 354, "synonym": 174, "synthes": 171, "synthesi": [115, 118, 171, 218, 273, 275], "synthet": [23, 59, 85, 172], "system": [0, 6, 44, 45, 115, 164, 171, 172, 181, 183, 194, 199, 204, 205, 206, 207, 208, 209, 216, 226, 241, 281, 283], "systemat": [101, 115, 133, 157, 195, 268, 359, 360], "s\u00e9gonn": [115, 199, 244], "t": [3, 5, 6, 10, 17, 23, 25, 34, 38, 40, 43, 57, 58, 60, 64, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 80, 81, 84, 91, 93, 94, 95, 97, 100, 101, 104, 105, 106, 107, 109, 110, 113, 115, 118, 127, 129, 149, 157, 158, 169, 170, 171, 172, 174, 175, 177, 178, 180, 181, 183, 184, 194, 197, 209, 223, 225, 228, 229, 241, 250, 251, 253, 254, 260, 268, 273, 274, 275, 278, 296, 297, 301, 302, 306, 308, 309, 310, 311, 312, 314, 318, 331, 333, 355, 358, 359, 360, 376, 382, 428, 431, 433, 438, 449, 457, 460, 469, 484, 486], "t0": [31, 43], "t1": [46, 76, 152, 157, 192, 195, 209, 211, 240, 263, 286, 288, 289, 291, 417, 484], "t1w": 64, "t2": [211, 263, 423, 484], "t2_relax": [211, 263], "t_img": 109, "t_map": [318, 331], "t_map001": 183, "t_r": [6, 12, 34, 51, 53, 54, 55, 56, 57, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 90, 92, 93, 100, 101, 129, 143, 154, 157, 185, 259, 296, 297, 298, 299, 301, 302, 303, 304, 318, 320, 321, 322, 323, 324, 325, 328, 329, 330, 336, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 418, 445, 447, 459, 470, 471], "t_score": 109, "t_scores_original_data": [44, 104], "t_statmap": [64, 76], "t_to_z": 109, "tab": [181, 185], "tab10": 40, "tab20": [10, 435], "tabl": [6, 34, 64, 70, 92, 102, 125, 128, 154, 157, 176, 360, 456, 470], "tabular": 64, "tackl": [165, 181], "tag": [31, 33, 118, 172, 181, 356, 357], "tail": [71, 308, 310, 311, 456], "tailor": [51, 69, 161], "take": [2, 3, 4, 6, 10, 25, 30, 34, 42, 44, 45, 51, 52, 66, 67, 68, 71, 73, 78, 80, 95, 99, 101, 103, 105, 110, 117, 125, 130, 140, 143, 146, 152, 157, 158, 159, 161, 164, 167, 169, 171, 172, 173, 174, 183, 185, 224, 230, 264, 273, 286, 287, 288, 289, 290, 291, 296, 297, 298, 299, 300, 304, 318, 320, 325, 333, 347, 366, 381, 382, 386, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 445, 447, 449, 469, 482, 484], "taken": [6, 67, 101, 165, 171, 172, 321, 331, 333, 352, 363, 364, 366, 367, 369, 447], "takerkart": [0, 146, 157], "tal": [115, 118, 185, 218, 273, 275, 369], "talairach": [115, 140, 157, 177, 187, 238, 253], "tall": 43, "tamer": [0, 127, 157], "tanab": [42, 43, 115, 216, 272], "tangent": [53, 100, 139, 157, 162, 230], "tangent_matric": 53, "tangent_measur": 53, "tar": [138, 157, 181], "target": [3, 30, 34, 42, 85, 90, 95, 99, 101, 125, 143, 157, 164, 165, 169, 171, 172, 178, 181, 182, 195, 216, 262, 272, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 333, 351, 352, 362, 365, 368, 375, 378, 382, 444, 446, 447, 487], "target_affin": [34, 51, 54, 55, 58, 85, 90, 93, 105, 184, 185, 296, 297, 298, 299, 301, 302, 303, 304, 318, 321, 331, 348, 351, 365, 368, 374, 376, 377, 378, 379, 445, 470, 471], "target_affine_3x3": 85, "target_affine_4x4": 85, "target_affine_mm_space_offset_chang": 85, "target_img": [352, 375, 378], "target_shap": [34, 51, 54, 55, 58, 85, 90, 93, 184, 185, 296, 297, 298, 299, 301, 302, 303, 304, 318, 321, 331, 348, 351, 365, 368, 374, 376, 377, 379, 445, 470, 471], "target_var": 382, "targett": [132, 157], "tarun": [0, 126, 157], "task": [2, 3, 18, 30, 31, 32, 35, 41, 50, 51, 62, 64, 67, 69, 74, 78, 82, 90, 93, 98, 105, 112, 113, 115, 127, 143, 154, 157, 163, 164, 165, 168, 171, 173, 174, 178, 179, 180, 181, 185, 201, 225, 231, 234, 262, 265, 267, 268, 295, 318, 321, 337, 341, 356, 362, 368, 369, 382, 395, 410, 421, 424, 425, 433, 438, 471, 486], "task_data": 33, "task_label": [64, 101, 102, 110, 321], "task_mask": [31, 33], "tasknam": 321, "taylor": [0, 115, 124, 125, 126, 127, 150, 153, 154, 155, 157, 170], "tcontrast": [71, 308, 310, 311], "tcontrastresult": [308, 310, 311], "tcorr_2level": [198, 243], "tcorr_mean": [198, 243], "te": 118, "teach": [1, 113, 135, 146, 157, 172, 200], "teal": 70, "team": [50, 93, 172, 180, 181, 217, 248, 485], "technic": [9, 28, 72, 101, 113, 158, 170, 171, 191, 270, 277, 305, 309, 437, 469, 486], "techniqu": [6, 16, 46, 115, 162, 163, 164, 165, 166, 167, 171, 178, 180, 185, 226, 447], "technisch": 0, "technologi": 0, "tel": 0, "tell": [70, 87, 115, 171, 215, 271], "temp_file_lifetim": [127, 157, 455], "temp_lat": 471, "temp_m": 471, "temp_med_and_lingu": 471, "templat": [4, 17, 23, 40, 50, 69, 76, 84, 97, 110, 113, 115, 124, 128, 131, 136, 141, 146, 149, 152, 155, 157, 162, 174, 178, 180, 184, 185, 192, 194, 195, 240, 242, 254, 263, 264, 277, 286, 287, 288, 289, 290, 291, 293, 296, 297, 298, 299, 303, 304, 346, 351, 352, 360, 365, 368, 375, 378, 417, 431, 432, 433, 438, 440, 445, 455, 486], "template_affin": 94, "template_img": 94, "template_shap": 94, "templateflow": [172, 263, 264], "tempor": [3, 6, 17, 32, 33, 34, 39, 40, 53, 57, 67, 68, 92, 95, 99, 102, 105, 115, 117, 143, 151, 157, 163, 164, 178, 182, 198, 210, 226, 243, 262, 304, 318, 322, 323, 324, 325, 327, 328, 329, 330, 336, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 447, 459, 487], "temporal": [92, 105], "temporal_anat_combin": 359, "temporal_anat_separ": 359, "temporari": 455, "temporarili": 172, "temporooccipit": 92, "temporopariet": 60, "ten": [6, 82, 445], "tend": [80, 101, 166, 171, 183], "tensor": 115, "term": [37, 56, 67, 90, 93, 116, 154, 157, 163, 165, 171, 174, 178, 180, 183, 184, 191, 270, 273, 301, 302, 305, 325, 359, 459, 471], "term_idx": 105, "term_weight": 105, "term_weights_for_compon": 105, "termin": [41, 164, 172, 485], "terminologi": [130, 157, 176], "test": [3, 30, 32, 35, 37, 40, 42, 44, 45, 46, 53, 55, 65, 67, 71, 75, 78, 79, 83, 100, 102, 104, 107, 108, 110, 113, 115, 124, 126, 127, 129, 142, 150, 153, 157, 164, 166, 167, 169, 170, 171, 174, 175, 176, 177, 178, 181, 184, 232, 238, 239, 240, 241, 242, 243, 244, 248, 251, 252, 254, 262, 263, 267, 268, 271, 272, 277, 282, 292, 296, 297, 298, 299, 300, 301, 302, 306, 331, 333, 334, 341, 347, 351, 352, 355, 358, 382, 394, 395, 409, 421, 425, 433, 438, 440, 478, 485, 486], "test_cluster_level_parameters_smok": [124, 157], "test_contrast": 181, "test_data_gen": 181, "test_imag": 172, "test_img_plot": [153, 157], "test_latest": 181, "test_modul": 172, "test_nilearn_standard": [129, 157], "test_plot": 181, "test_scor": 99, "test_sign": [126, 157], "test_siz": [53, 100], "test_someth": 172, "test_surf_plot": 172, "tested_var": [78, 107, 108, 382], "tetrahedron": 7, "tetrel": [0, 146, 157], "teuscher": [115, 194, 241], "teve": [0, 148, 157], "texa": 0, "texliv": 181, "text": [31, 36, 53, 57, 76, 95, 99, 107, 115, 164, 172, 182, 195, 210, 216, 220, 221, 229, 254, 262, 272, 305, 309, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 487], "textquoteright": [115, 225, 251], "textur": 469, "tfce": [107, 124, 155, 157, 178, 333, 382], "tgz": [193, 239], "th": 440, "thalam": [115, 209], "thalamu": [192, 224, 258], "than": [3, 4, 6, 16, 32, 33, 36, 37, 40, 41, 42, 43, 44, 45, 49, 50, 51, 53, 54, 55, 56, 57, 58, 60, 63, 67, 69, 70, 72, 78, 80, 82, 87, 89, 90, 92, 93, 95, 99, 100, 101, 104, 105, 106, 107, 108, 116, 117, 118, 127, 133, 136, 137, 138, 139, 140, 142, 146, 151, 153, 157, 158, 161, 163, 164, 165, 166, 167, 169, 171, 172, 174, 176, 178, 181, 183, 184, 185, 195, 217, 246, 247, 273, 275, 296, 297, 298, 299, 303, 304, 318, 327, 333, 334, 335, 342, 347, 355, 356, 359, 360, 362, 364, 365, 367, 368, 382, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 413, 418, 419, 425, 428, 429, 433, 437, 438, 439, 441, 443, 447, 456, 458, 460, 469, 471], "thank": [143, 157, 172, 331, 332, 333], "tharun": [0, 129, 157], "thei": [3, 6, 7, 25, 41, 44, 46, 50, 51, 60, 66, 67, 71, 93, 95, 99, 110, 117, 118, 125, 128, 153, 155, 157, 163, 166, 167, 169, 171, 172, 174, 178, 180, 181, 183, 185, 191, 192, 195, 202, 213, 254, 262, 273, 278, 318, 321, 331, 333, 337, 351, 369, 420, 448, 459, 471, 484], "them": [2, 3, 6, 7, 10, 15, 20, 23, 24, 31, 33, 41, 44, 46, 51, 52, 56, 57, 60, 64, 66, 69, 71, 72, 73, 80, 81, 87, 90, 95, 101, 105, 106, 110, 111, 113, 117, 118, 122, 126, 128, 131, 143, 149, 150, 152, 155, 157, 158, 159, 163, 165, 167, 172, 174, 178, 179, 180, 183, 185, 192, 240, 273, 275, 321, 381, 382, 445, 465, 484], "theme": [124, 155, 157], "themselv": [67, 118, 185], "theodor": [58, 115, 359, 360], "theoret": 169, "theori": [115, 178, 215, 271, 310, 311], "therapanacea": 0, "therefor": [72, 153, 157, 163, 169, 171, 192, 195, 242], "theta": [308, 310, 311], "thithick": [7, 15, 49, 129, 151, 157, 204, 205, 206, 207, 208, 229, 254, 281, 285, 431, 432, 434, 435, 436, 437, 443, 467, 469], "thick_17": [49, 229, 254], "thick_7": [87, 229, 254], "thick_left": [204, 205, 206, 207, 208, 281], "thick_right": [204, 205, 206, 207, 208, 281], "thin": [229, 254], "thin_17": [229, 254], "thin_7": [229, 254], "thing": [2, 3, 7, 40, 58, 67, 125, 157, 161, 170, 171, 172, 181, 185, 308, 336, 459, 484], "think": [172, 174, 185], "third": [16, 67, 82, 162, 176, 327], "thirion": [0, 46, 50, 51, 53, 73, 100, 115, 119, 122, 126, 129, 131, 136, 140, 143, 144, 146, 153, 154, 157, 158, 161, 162, 163, 164, 166, 170, 180, 197, 201, 217, 230, 231, 245, 248, 268, 298, 299, 303, 304, 446, 447, 452], "this_meta": 109, "thiti": [0, 130, 157], "thoma": [0, 104, 115, 118, 146, 149, 152, 153, 157, 158, 165, 178, 180, 191, 194, 218, 223, 229, 241, 250, 254, 270, 273, 275, 333, 359, 360, 382, 460], "thomasyeolab": [223, 250], "thompsen": [115, 219, 282], "thorough": 172, "thoroughli": 172, "thorsten": [115, 169], "those": [6, 7, 24, 52, 64, 67, 71, 72, 81, 90, 110, 129, 153, 157, 163, 165, 167, 171, 172, 174, 181, 191, 225, 226, 227, 273, 355, 358, 366, 418, 441, 447, 450, 453, 454, 463, 464, 469], "though": [101, 106, 164, 309, 434, 436, 437, 458], "thousand": [51, 185, 445], "thr0": [11, 246, 247], "thr25": [11, 58, 92, 159, 246, 247], "thr50": [246, 247], "thread": 37, "three": [6, 15, 20, 25, 33, 42, 51, 65, 66, 67, 76, 90, 95, 115, 144, 152, 157, 171, 172, 178, 181, 183, 192, 200, 224, 259, 318, 331, 351, 353, 393, 395, 398, 412, 417, 419, 423, 424, 425, 426, 429, 431, 432, 433, 457, 469], "threshold": [2, 3, 10, 14, 15, 17, 18, 24, 31, 34, 37, 38, 40, 41, 42, 44, 50, 51, 52, 56, 57, 58, 63, 66, 67, 69, 70, 71, 72, 76, 77, 78, 80, 81, 82, 88, 89, 90, 91, 94, 95, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 115, 118, 126, 127, 128, 131, 144, 146, 150, 153, 155, 157, 159, 162, 171, 174, 175, 178, 184, 264, 286, 287, 290, 303, 313, 317, 318, 331, 333, 334, 335, 355, 358, 359, 360, 375, 376, 377, 378, 379, 380, 382, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 416, 417, 419, 425, 426, 428, 431, 432, 433, 434, 436, 437, 439, 440, 441, 443, 446, 447, 452, 456, 457, 470, 484, 487], "threshold1": 82, "threshold2": 82, "threshold3": 82, "threshold_img": [42, 82, 89, 125, 131, 153, 157, 334, 335], "threshold_percentile_img": 89, "threshold_stats_img": [6, 76, 78, 82, 177, 355], "threshold_value_img": 89, "thresholded_map": 334, "thresholded_map1": 82, "thresholded_map2": 82, "thresholded_map3": 82, "thresholded_score_map_img": 42, "thresholding_strategi": [52, 88, 162, 447], "threw": [153, 157], "through": [15, 32, 41, 44, 50, 53, 58, 72, 76, 92, 101, 124, 125, 150, 151, 153, 157, 158, 164, 165, 166, 169, 172, 178, 180, 191, 195, 273, 277, 298, 299, 318, 331, 333, 359, 360, 363, 366, 370, 378, 383, 385, 386, 388, 389, 390, 391, 392, 399, 401, 403, 405, 407, 409, 444, 450, 455, 469], "throughout": 487, "throw": [126, 128, 129, 157, 369], "thu": [16, 32, 35, 41, 104, 106, 159, 164, 165, 166, 169, 170, 171, 176, 178, 184, 185, 298, 299, 300, 301, 302, 306, 340, 360, 382], "thual": [0, 124, 125, 151, 153, 155, 157], "thumb": [164, 172], "tianzi": [115, 158, 230], "tibshirani": [115, 158], "tick": [124, 127, 157, 172, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 423, 425, 426, 428, 432, 433, 434, 436, 437, 439, 441, 443], "tick_17": 254, "tick_7": 254, "tick_posit": [31, 33], "ticker": [50, 51], "ticklabel": [146, 157], "tight": [35, 171], "tighter": [139, 157, 171], "tile": [16, 144, 157, 398, 412, 417, 423, 426, 431, 432, 433, 457, 484], "tiledslic": [16, 393, 395, 412], "time": [0, 2, 3, 4, 5, 6, 7, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 58, 59, 62, 64, 65, 66, 68, 69, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117, 118, 124, 125, 126, 129, 133, 142, 143, 149, 150, 151, 153, 155, 157, 158, 160, 161, 162, 163, 164, 167, 169, 172, 174, 175, 178, 179, 181, 182, 183, 184, 195, 213, 225, 226, 230, 232, 234, 259, 279, 281, 282, 284, 285, 292, 296, 297, 298, 299, 301, 302, 303, 304, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 333, 336, 348, 351, 353, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 376, 382, 410, 418, 431, 433, 438, 440, 441, 445, 447, 449, 450, 451, 456, 458, 459, 460, 469, 471, 476, 484, 487], "time_length": [68, 322, 323, 324, 328, 329, 330], "time_seri": [49, 53, 54, 56, 58, 60, 158, 159], "time_series_1": 158, "time_series_2": 158, "time_stamp": 68, "timecours": [173, 359], "timepoint": [26, 184, 321], "timeseri": [24, 27, 50, 52, 60, 90, 106, 137, 150, 157, 158, 162, 191, 193, 201, 245, 270, 336, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 459, 460], "timeseries_each_subject": [52, 162], "timon": 0, "timothi": [60, 115, 191, 222, 223, 250, 257, 270, 359], "ting": [0, 124, 125, 126, 127, 129, 150, 151, 153, 155, 157], "tini": 306, "tinput": 103, "tip": [46, 180], "tissu": [22, 178, 253], "titl": [0, 3, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 27, 30, 31, 32, 33, 36, 37, 38, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 63, 64, 66, 67, 68, 69, 70, 71, 72, 76, 77, 78, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 99, 101, 102, 104, 105, 107, 108, 109, 110, 111, 117, 126, 146, 147, 152, 155, 157, 162, 164, 172, 181, 185, 318, 331, 358, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 418, 419, 423, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 455, 457, 484], "title_font_s": [434, 436, 437], "title_fonts": [439, 441, 442, 443], "tmap": [18, 80, 127, 157, 197, 266, 268, 484], "tmap_filenam": [2, 89], "tmap_img": 94, "tmi": [46, 115, 170], "tmp": 24, "to_csv": [6, 73], "to_filenam": [3, 4, 6, 7, 30, 50, 51, 57, 72, 87, 95, 184, 463, 464], "to_gifti": [461, 462, 466], "to_latex": 64, "to_numpi": [3, 32, 34, 40, 44, 70, 78, 99, 107], "tobe": [115, 219, 282], "todd": [115, 169, 209, 211, 263], "toffset": [58, 92, 103], "toga": [115, 228, 253], "togeth": [7, 34, 40, 50, 60, 68, 69, 70, 81, 158, 166, 167, 174, 178, 195, 256, 258, 295, 298, 299, 303, 321, 336, 447, 471], "toggl": 340, "toi": [25, 106], "tol": [231, 232, 234, 301, 302], "tol_cv": 232, "toler": [55, 93, 106, 171, 231, 232, 234, 301, 302, 340], "tolil": 38, "tolist": [80, 101], "toll": 158, "tom": [0, 115, 151, 157, 194, 241], "tomassini": [115, 191, 270], "toml": [125, 157, 172, 181, 485], "tommaso": [115, 195], "tommi": [115, 171, 231, 234], "too": [25, 35, 39, 40, 42, 44, 54, 56, 58, 71, 87, 118, 165, 171, 273, 275, 369, 484], "took": [6, 50, 93, 103, 226], "tool": [4, 9, 12, 21, 24, 28, 33, 37, 50, 80, 87, 88, 95, 101, 106, 113, 117, 136, 155, 157, 160, 165, 172, 173, 176, 177, 179, 180, 182, 183, 185, 186, 188, 192, 209, 240, 262, 293, 348, 393, 395, 398, 400, 402, 404, 406, 408, 410, 417, 423, 425, 432, 433, 438, 440, 475, 484, 485, 486], "toolbox": [175, 179, 485, 487], "toolkit": [0, 195], "tootel": [115, 204, 205, 206, 207, 208, 281], "top": [6, 13, 16, 18, 26, 40, 46, 58, 105, 149, 157, 172, 180, 184, 295, 419, 425, 426, 429, 431, 432, 433, 440, 484], "topic": [172, 181], "topologi": 171, "toprul": 64, "tor": [115, 118, 218, 273, 275, 336, 459], "torabi": [0, 125, 126, 127, 129, 157], "toro": [115, 225, 251], "toronto": 0, "total": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 160, 162, 164, 170, 191, 192, 209, 249, 259, 297, 302, 370, 372, 376, 377, 379, 431, 448, 471, 486, 487], "total_scor": 105, "touch": 340, "tour": 484, "toward": [95, 153, 157, 201, 230, 346, 363, 364, 365, 366, 367, 368, 369, 487], "tox": [2, 3, 4, 10, 11, 12, 15, 16, 17, 19, 21, 22, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 44, 45, 49, 50, 51, 52, 54, 56, 59, 60, 63, 65, 71, 72, 76, 78, 79, 80, 87, 88, 89, 93, 96, 99, 104, 105, 106, 107, 108, 111, 127, 157], "tpami": [51, 115, 446, 452], "tpl": 263, "tpr": 178, "tr": [12, 26, 34, 68, 103, 125, 129, 142, 154, 157, 174, 178, 184, 219, 322, 323, 324, 328, 329, 330, 347], "trace": [104, 396], "traceback": 463, "traci": [115, 220, 277], "track": [101, 105, 171, 181], "tracker": 181, "trade": [198, 298, 299], "tradition": 178, "trail": 172, "train": [3, 32, 33, 35, 41, 42, 43, 44, 45, 46, 53, 99, 100, 149, 157, 164, 165, 166, 169, 171, 178, 180, 185, 231, 296, 297, 298, 299, 301, 302, 444, 446, 452], "train_siz": [44, 45], "train_test_split": [44, 45], "trait": 165, "trajectori": 171, "tran": [51, 115, 240, 446, 452], "trans_i": 58, "trans_x": 58, "trans_z": 58, "transact": [46, 115, 170, 192, 201], "transfer": 180, "transform": [3, 24, 25, 40, 42, 43, 51, 52, 53, 55, 56, 67, 71, 85, 90, 92, 93, 95, 99, 100, 101, 105, 111, 115, 117, 129, 139, 140, 144, 146, 148, 149, 150, 151, 153, 155, 157, 161, 162, 167, 174, 178, 182, 183, 195, 209, 228, 230, 253, 271, 296, 297, 298, 299, 300, 303, 304, 315, 318, 331, 334, 338, 349, 351, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 383, 444, 445, 446, 447, 459, 469, 471, 487], "transform_img": [126, 129, 157, 363, 364, 365], "transform_single_img": [128, 157, 362, 363, 364, 365, 366, 367, 368, 369, 447], "transform_to_2d": [383, 385, 386], "transient": 185, "translat": [65, 146, 157, 184, 318, 321, 331, 334, 359, 457], "transpar": [16, 24, 126, 146, 157, 185, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 419, 425, 426, 428, 429, 431, 432, 433, 434, 437, 439, 440, 441, 442, 443], "transpos": [50, 149, 157, 171], "traor": [0, 130, 157], "treat": 118, "treatment": [178, 180], "tree": [161, 223, 250], "trei": [115, 195], "trend": [44, 45, 90, 129, 157, 185], "trended_data": 90, "trendscent": [194, 241], "tresult": 103, "tri": [25, 53, 65, 165, 273, 417, 422, 430, 444], "triag": [153, 157], "trial": [40, 65, 67, 73, 115, 126, 157, 164, 173, 178, 271], "trial_condit": 101, "trial_nam": 101, "trial_numb": 101, "trial_typ": [6, 34, 65, 66, 67, 73, 101, 102, 213, 325, 424], "trial_type_idx": 73, "trial_type_list": 101, "trial_type_seri": 101, "trials_ses1": [227, 280], "trials_ses2": [227, 280], "trialwise_condit": 101, "triangl": [25, 178, 396, 466, 469], "triangul": [25, 471], "triangular": [178, 230, 236, 237, 422, 430], "triangulari": 92, "tribhuvan": 0, "trick": [19, 180], "tricki": 171, "trigger": 181, "trilinear": 469, "trim": [367, 451], "triplet": [319, 320, 369, 442], "triplett": [115, 260, 278], "trivial": 82, "tronto": 0, "troubleshoot": 172, "true": [2, 3, 4, 6, 7, 10, 14, 15, 16, 17, 19, 22, 23, 24, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 64, 65, 67, 69, 70, 71, 72, 73, 75, 76, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 113, 117, 118, 126, 129, 138, 141, 146, 153, 157, 159, 162, 164, 167, 169, 171, 174, 177, 178, 185, 230, 231, 232, 234, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 254, 256, 257, 258, 259, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 275, 277, 282, 292, 296, 297, 298, 299, 300, 301, 302, 303, 304, 313, 318, 321, 331, 333, 334, 335, 336, 337, 340, 342, 346, 348, 350, 351, 352, 355, 356, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 417, 418, 419, 420, 421, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 450, 451, 453, 456, 458, 459, 460, 465, 471, 484, 486], "true_divid": 111, "truli": [174, 211], "truncat": [146, 157], "trust": [37, 51, 54, 55, 60, 64, 76, 78, 174], "truth": [43, 46, 59, 164], "try": [3, 4, 5, 22, 37, 41, 42, 51, 54, 55, 58, 60, 64, 66, 67, 76, 78, 90, 99, 100, 105, 118, 130, 155, 157, 158, 159, 164, 165, 170, 171, 172, 174, 181, 185, 200, 485], "ts2": 191, "ts3": 191, "tsuang": [115, 209], "tsv": [6, 49, 54, 55, 57, 58, 60, 62, 64, 74, 76, 102, 110, 113, 126, 157, 173, 200, 226, 259, 279, 318, 321, 325, 331, 358, 359, 360, 421, 424, 438, 486], "tsvfile": 73, "ttest_ind": [95, 184], "tube": 117, "tunabl": 360, "tune": [22, 32, 33, 35, 40, 41, 45, 90, 115, 137, 157, 159, 164, 165, 167, 171, 174, 303, 304, 359, 365, 368, 445, 484], "tupl": [16, 185, 241, 248, 282, 296, 297, 298, 299, 301, 302, 303, 304, 308, 310, 311, 318, 321, 331, 340, 348, 351, 353, 356, 359, 365, 368, 370, 371, 372, 374, 376, 377, 379, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 418, 419, 423, 424, 425, 426, 429, 430, 431, 432, 433, 440, 445, 450, 457, 463, 468], "turn": [49, 67, 85, 159, 161, 171, 185, 318, 331, 374, 375, 376, 378, 379, 431, 432, 433, 440, 457], "turner": [101, 115, 164, 194, 225, 241, 251], "tutori": [6, 7, 8, 30, 67, 99, 133, 143, 157, 164, 172, 176, 179, 180, 185, 210, 262, 296, 343, 348, 423, 432, 440, 486], "tv": [45, 115, 170, 296, 297, 301, 302], "tv_l1": 41, "tvl1": 170, "tweak": [60, 90, 162], "twelv": [115, 200, 259], "twine": 181, "two": [6, 7, 15, 25, 26, 35, 42, 50, 57, 58, 60, 62, 67, 74, 75, 78, 83, 87, 89, 90, 95, 99, 101, 102, 104, 110, 113, 118, 124, 129, 138, 141, 146, 149, 150, 157, 158, 161, 163, 164, 166, 168, 169, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 183, 184, 185, 191, 195, 227, 232, 236, 242, 261, 268, 280, 296, 297, 298, 299, 303, 304, 308, 310, 311, 315, 318, 325, 331, 332, 333, 337, 343, 348, 351, 359, 360, 364, 367, 369, 371, 382, 394, 421, 425, 427, 428, 433, 434, 435, 436, 437, 438, 443, 445, 447, 448, 449, 455, 456, 457, 468, 469, 470, 484, 486, 487], "two_sid": [6, 82, 127, 130, 150, 153, 157, 334, 335, 355, 447, 456, 457], "two_sided_test": [78, 80, 104, 169, 333, 382], "twpyb1pflj6vrlxgh3rohyqanxbdpelw": 224, "tx": 65, "txt": [95, 277], "ty": 65, "tyler": [115, 169], "type": [3, 6, 11, 16, 19, 22, 30, 35, 40, 44, 51, 65, 66, 67, 69, 73, 89, 95, 101, 104, 118, 124, 126, 127, 129, 130, 132, 135, 137, 140, 143, 146, 152, 153, 154, 155, 157, 166, 169, 172, 173, 174, 178, 181, 183, 191, 214, 238, 242, 246, 247, 253, 270, 300, 306, 314, 318, 331, 336, 340, 341, 343, 345, 346, 348, 349, 353, 354, 356, 357, 358, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 431, 432, 445, 447, 448, 449, 456, 457, 458, 459], "typeerror": [153, 157, 346], "typic": [6, 7, 73, 79, 80, 101, 110, 161, 163, 165, 169, 172, 174, 176, 178, 183, 184, 185, 190, 283, 298, 299, 302, 308, 358, 369, 382, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 431, 432, 433, 440, 445, 484], "typo": [128, 148, 157], "typograph": [155, 157], "tyszka": [115, 221, 249], "tz": 65, "tziona": [115, 219, 282], "tzourio": [115, 192, 240], "u": [3, 4, 16, 25, 38, 40, 42, 57, 60, 65, 67, 78, 80, 90, 95, 115, 164, 165, 167, 172, 202, 224, 256, 258, 297, 302, 310, 311, 485], "u5mzi": 196, "ubuntu": 171, "uc": 0, "ucc": 221, "uchida": [42, 43, 115, 216, 272], "ucl": [0, 226, 227, 279, 280], "ucla": [260, 278], "ucsd": 224, "uddin": 115, "ugli": 165, "ugurbil": [115, 191, 270], "uint8": [46, 58, 92, 155, 157, 349], "uk": [0, 209, 212, 225, 226, 227, 251, 279, 280], "ultim": [172, 309, 417, 423, 425, 426, 431, 432, 433], "umask": 50, "unabl": [37, 51, 54, 55, 60, 64, 70, 76, 78, 146, 157], "unavail": [172, 262], "unbalanc": 51, "unbias": [115, 164, 195, 211, 263, 289], "unc": [64, 80, 81, 102], "uncach": 183, "uncertainti": [68, 77, 80, 171, 173, 174, 178], "unchang": [18, 67, 169, 230, 231, 232, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 444, 445, 446, 447], "unclear": 99, "uncom": [10, 17, 23, 38, 54, 56, 60], "uncompress": [64, 138, 142, 157], "unconstrain": [115, 225], "uncontrol": 67, "uncorrect": [6, 64, 77, 80, 81, 82, 102], "under": [6, 40, 104, 155, 157, 164, 165, 169, 170, 171, 172, 173, 174, 178, 181, 191, 195, 218, 220, 226, 300, 340, 351, 352, 357, 375, 378, 382], "underflow": 306, "underli": [0, 90, 129, 157, 174, 178, 180, 185, 396], "underneath": [434, 436, 437, 443], "underscor": [127, 157, 172], "undershoot": 67, "understand": [3, 29, 47, 62, 74, 84, 97, 113, 129, 137, 157, 165, 167, 172, 180, 182, 217, 259, 262, 264, 266, 267, 269, 272, 296, 318, 342, 343, 346, 348, 352, 359, 362, 368, 376, 420, 421, 423, 432, 433, 438, 455, 486, 487], "understood": [67, 273], "undirect": [387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 419], "unexpectedli": 72, "unfilt": [155, 157], "unfortun": [167, 171], "uniform": 90, "uniform_averag": [297, 302], "uniformli": [135, 157, 165, 428, 434, 436, 437, 441, 443], "uninterrupt": 174, "union": [85, 377, 379, 380], "uniqu": [2, 16, 19, 30, 31, 32, 33, 34, 36, 37, 40, 42, 44, 45, 50, 51, 53, 60, 66, 87, 88, 95, 101, 104, 108, 129, 138, 157, 158, 166, 183, 192, 240, 246, 247, 325, 363, 366, 370, 447, 448, 449], "unique_condit": 36, "unique_run": 34, "unit": [0, 6, 7, 16, 40, 57, 59, 115, 162, 164, 170, 171, 172, 185, 300, 310, 311, 333, 336, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 459], "uniti": [143, 157], "univ": [115, 310, 311], "univari": [30, 34, 35, 40, 98, 112, 113, 115, 166, 168, 170, 262, 267, 268, 296, 297, 298, 299, 301, 302, 341, 343, 348, 362, 368, 382, 410, 425, 433, 438, 486, 487], "univers": [0, 178, 220], "universitair": 0, "universiteit": 0, "universit\u00e4t": 0, "universit\u00e9": [0, 172], "unix": [183, 295], "unknown": [23, 24, 58, 92, 103, 129, 157, 164, 192, 194, 195, 199, 203, 204, 205, 206, 207, 208, 210, 211, 214, 215, 216, 219, 222, 224, 225, 227, 228, 229, 240, 241, 254, 471], "unlabel": 178, "unless": [118, 171, 172, 278, 333, 382, 428, 459], "unlik": [15, 21, 169, 174, 183, 360], "unmask": [33, 34, 46, 116, 125, 138, 141, 157, 182, 184, 303, 304, 362, 365, 368, 487], "unmodul": [65, 73], "unnecessari": [3, 126, 129, 157, 311], "unpair": [75, 83, 113, 129, 157, 177, 268, 331, 394, 421, 425, 438, 486], "unpaired_design_matrix": 81, "unpen": 171, "unrealist": 171, "unrel": [172, 185], "unrestrict": [190, 193, 197, 200, 201, 217], "unscrub": 195, "unsign": [333, 382], "unstructur": 41, "unsuit": [146, 157], "unsupervis": [106, 178, 300, 303, 304, 318, 331, 444, 446], "unsurprisingli": 81, "unthreshold": [24, 82, 115, 118, 178, 194, 218, 241, 273, 275], "until": [273, 382], "unus": [128, 129, 157, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "unusu": 164, "unwant": [67, 115, 195], "unwarp": 178, "unzip": 181, "up": [0, 3, 6, 34, 37, 49, 85, 87, 90, 95, 99, 105, 115, 124, 126, 127, 129, 143, 144, 146, 151, 153, 157, 161, 167, 168, 170, 171, 173, 174, 175, 178, 181, 185, 195, 226, 278, 305, 332, 382, 418, 444, 469, 487], "updat": [42, 94, 101, 103, 124, 125, 126, 127, 128, 129, 130, 133, 137, 138, 143, 146, 152, 153, 155, 157, 181, 230, 231, 232, 250, 273, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 444, 445, 446, 447], "update_20190916_readm": 250, "update_yeo2011_schaefer2018_labelnam": [223, 250], "upgrad": [33, 36, 37, 42, 43, 44, 49, 53, 54, 55, 56, 57, 58, 60, 63, 70, 90, 92, 93, 95, 99, 100, 101, 104, 105, 106, 107, 108, 117, 124, 129, 138, 140, 146, 151, 153, 157], "upload": 118, "upon": [0, 103, 191, 193, 274, 318, 331, 417, 431, 432, 433, 440, 447, 449, 457], "upper": [15, 42, 171, 308, 310, 311, 376, 379, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 418, 423, 425, 426, 428, 429, 431, 432, 433, 434, 437, 441, 443], "upper_cutoff": [90, 129, 157, 376, 379], "upstream": [172, 181], "urgent": 181, "url": [0, 46, 50, 64, 72, 115, 129, 147, 155, 157, 158, 162, 163, 165, 170, 171, 201, 203, 231, 234, 238, 239, 240, 241, 242, 243, 244, 245, 248, 250, 251, 252, 254, 260, 262, 263, 271, 272, 277, 278, 282, 292, 295, 303, 305, 309, 447], "urls_path": 260, "ursina": [115, 194, 241], "us": [0, 1, 2, 4, 6, 7, 12, 13, 15, 17, 18, 19, 20, 21, 23, 24, 27, 30, 31, 32, 33, 34, 37, 38, 39, 40, 42, 43, 44, 45, 46, 48, 49, 51, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 90, 91, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 115, 116, 117, 124, 125, 126, 127, 128, 129, 130, 131, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 155, 157, 158, 159, 160, 163, 165, 166, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 184, 185, 191, 192, 195, 196, 197, 198, 199, 200, 202, 209, 210, 216, 217, 218, 220, 221, 226, 231, 233, 234, 235, 236, 237, 238, 240, 243, 249, 250, 253, 255, 258, 281, 282, 287, 288, 290, 291, 294, 301, 305, 306, 307, 308, 309, 310, 311, 312, 314, 316, 317, 319, 322, 323, 324, 326, 327, 328, 329, 330, 335, 339, 340, 345, 350, 354, 356, 357, 371, 374, 375, 377, 378, 379, 380, 383, 384, 385, 386, 411, 412, 413, 442, 444, 446, 450, 451, 452, 453, 454, 458, 459, 460, 467, 468, 470, 471, 472, 481, 485, 486, 487], "usa": 0, "usabl": [141, 157, 169, 171, 193, 272, 300], "usag": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 137, 146, 150, 155, 157, 158, 172, 173, 177, 180, 181, 182, 190, 193, 197, 200, 201, 217, 220, 270, 277, 281, 284, 285, 292, 360, 441, 474, 487], "usecas": [99, 161, 165, 167, 172], "useless": 67, "user": [19, 30, 35, 41, 60, 67, 68, 101, 108, 118, 124, 125, 126, 127, 128, 129, 130, 140, 143, 144, 146, 147, 151, 153, 154, 155, 157, 171, 172, 173, 174, 176, 178, 179, 181, 182, 185, 187, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 474, 476, 477, 485], "userguid": 165, "userwarn": [3, 10, 11, 12, 16, 17, 19, 21, 22, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 45, 49, 50, 51, 52, 54, 56, 59, 63, 64, 65, 71, 72, 73, 76, 78, 79, 80, 87, 88, 89, 92, 93, 95, 96, 99, 101, 102, 105, 110, 111], "usr": [246, 247], "usual": [34, 50, 78, 80, 95, 153, 157, 163, 165, 166, 167, 172, 174, 178, 180, 181, 184, 192, 240, 298, 299, 305, 376, 429, 445], "utc": [172, 485], "utf": [10, 23, 24, 111], "util": [27, 45, 46, 50, 52, 76, 88, 89, 107, 108, 127, 129, 131, 138, 142, 149, 153, 157, 162, 172, 230, 231, 232, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 277, 278, 279, 280, 281, 282, 283, 284, 285, 292, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 356, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 444, 445, 446, 447, 479], "u\u011furbil": [115, 191, 270], "v": [3, 25, 29, 33, 34, 36, 39, 40, 47, 53, 66, 67, 77, 80, 81, 90, 98, 99, 112, 113, 115, 125, 127, 157, 164, 165, 169, 171, 172, 179, 181, 192, 193, 203, 209, 210, 211, 218, 224, 228, 253, 258, 262, 263, 266, 268, 273, 275, 276, 289, 296, 297, 298, 300, 302, 341, 343, 346, 348, 349, 359, 362, 368, 382, 410, 426, 430, 433, 438, 440, 460, 486], "v0": [143, 146, 151, 153, 157, 223, 250], "v1": [124, 127, 143, 151, 153, 157], "v2": [146, 151, 157], "v3": [124, 157], "v4": [64, 127, 157], "va": 13, "val_scor": 35, "valentina": [115, 191, 270], "valid": [6, 29, 33, 34, 37, 38, 42, 44, 46, 47, 53, 100, 107, 108, 109, 113, 115, 125, 126, 133, 136, 149, 153, 154, 157, 158, 160, 165, 168, 172, 185, 195, 224, 232, 242, 245, 251, 262, 270, 296, 297, 298, 299, 300, 301, 302, 318, 319, 320, 325, 336, 340, 343, 348, 353, 354, 359, 360, 363, 366, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 443, 450, 456, 467, 468, 469, 486, 487], "valid_method": 445, "validationerror": 172, "valu": [4, 6, 10, 15, 16, 18, 24, 25, 31, 34, 40, 42, 44, 46, 49, 54, 56, 57, 60, 63, 67, 70, 73, 78, 80, 89, 90, 91, 92, 93, 95, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 118, 122, 124, 125, 127, 128, 129, 130, 131, 135, 138, 139, 143, 146, 150, 151, 153, 157, 158, 161, 162, 165, 166, 168, 169, 170, 172, 174, 177, 178, 180, 183, 185, 192, 223, 228, 230, 231, 232, 234, 236, 238, 240, 242, 243, 244, 246, 247, 249, 250, 251, 253, 254, 264, 268, 273, 277, 281, 284, 285, 286, 287, 290, 292, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 314, 318, 319, 321, 327, 331, 333, 334, 335, 336, 337, 340, 342, 347, 351, 352, 353, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 414, 416, 417, 418, 419, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 440, 441, 443, 444, 445, 446, 447, 449, 450, 451, 455, 456, 457, 458, 459, 460, 461, 465, 469, 471, 484], "valuabl": [67, 172], "value_count": 102, "valueerror": [124, 127, 157, 346, 350, 363, 364, 366, 367, 463, 469], "vamsi": [115, 209], "van": [115, 118, 191, 199, 218, 244, 270, 273, 275, 359, 360], "vanass": [0, 151, 157], "vanessa": [115, 218, 273, 275], "var": 359, "vari": [15, 35, 67, 72, 95, 96, 103, 152, 157, 161, 167, 171, 180, 223, 231, 232, 234, 337], "variabl": [4, 6, 15, 41, 44, 45, 46, 58, 76, 78, 95, 101, 102, 115, 126, 135, 153, 155, 157, 159, 164, 165, 166, 168, 169, 171, 172, 174, 178, 183, 185, 193, 212, 239, 283, 296, 297, 298, 299, 300, 301, 302, 305, 309, 318, 331, 347, 359], "varianc": [6, 34, 40, 42, 44, 50, 57, 58, 59, 60, 67, 70, 81, 146, 149, 150, 157, 164, 169, 171, 178, 185, 230, 234, 296, 297, 298, 299, 303, 304, 306, 308, 310, 311, 314, 315, 318, 327, 331, 336, 342, 358, 359, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 418, 445, 447, 450, 459, 460], "variance_img": [72, 315], "variance_statmap": [64, 76, 358], "variance_threshold": 44, "variancethreshold": 44, "variant": [165, 189, 191, 217], "variat": [46, 55, 78, 102, 107, 108, 115, 125, 157, 169, 170, 178, 277, 317, 333, 382], "varieti": [65, 101, 163, 164, 165, 166, 167, 172, 178], "variou": [3, 21, 31, 32, 41, 50, 107, 108, 146, 149, 153, 157, 164, 166, 167, 172, 174, 178, 184, 242, 298, 299, 360, 445, 469], "varoquaux": [0, 46, 50, 51, 53, 58, 100, 115, 118, 119, 120, 122, 123, 131, 133, 136, 140, 143, 144, 145, 146, 148, 157, 158, 159, 161, 162, 163, 164, 166, 170, 201, 217, 218, 230, 231, 245, 248, 273, 275, 298, 299, 303, 304, 446, 447, 452], "varoquaux2012": 180, "vasco": [0, 155, 157], "vastli": 101, "vaudois": 0, "vbm": [164, 178, 180], "vc": 181, "vcov": [308, 310, 311], "vec": 237, "vec_to_sym_matrix": [139, 157], "vector": [30, 33, 34, 35, 36, 40, 42, 46, 53, 72, 85, 99, 100, 107, 108, 117, 139, 157, 164, 165, 167, 178, 230, 296, 297, 298, 299, 305, 308, 309, 310, 311, 314, 316, 429, 469], "vectorize_word": [118, 273, 275], "vega10": 13, "vega20": 13, "vega20b": 13, "vega20c": 13, "ventral": [3, 17, 23, 32, 33, 34, 38, 39, 40, 95, 99, 111, 115, 117, 164, 179, 185, 210, 262, 434, 436, 437, 471], "ventralattent": 258, "ventricl": 195, "venv": [172, 485], "verbos": [34, 36, 37, 38, 44, 46, 50, 51, 54, 55, 56, 57, 58, 59, 60, 63, 90, 92, 93, 99, 100, 101, 104, 107, 143, 157, 185, 231, 232, 234, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 292, 296, 297, 298, 299, 300, 301, 302, 303, 304, 313, 318, 321, 327, 331, 333, 337, 348, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 382, 444, 445, 446, 447, 452, 471], "veri": [4, 31, 32, 33, 36, 37, 41, 42, 44, 46, 51, 56, 67, 76, 77, 78, 80, 87, 95, 105, 117, 146, 157, 158, 159, 161, 164, 165, 166, 167, 170, 171, 172, 174, 178, 181, 185, 298, 299, 364, 367, 369, 413, 431, 458], "verifi": [67, 102, 172, 185], "vern": [115, 199, 209, 244], "versatil": [167, 179, 485], "version": [2, 10, 16, 19, 20, 21, 23, 31, 33, 36, 37, 42, 43, 44, 45, 49, 50, 53, 54, 55, 56, 57, 58, 60, 63, 70, 71, 72, 88, 90, 92, 93, 95, 99, 100, 101, 104, 105, 106, 107, 108, 117, 122, 124, 127, 128, 129, 131, 133, 136, 137, 138, 139, 140, 141, 143, 145, 146, 149, 151, 152, 153, 154, 155, 157, 170, 171, 172, 181, 183, 185, 190, 192, 195, 200, 210, 215, 223, 229, 230, 231, 232, 236, 237, 238, 240, 242, 243, 245, 247, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 262, 264, 265, 273, 275, 277, 278, 279, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 314, 315, 318, 321, 322, 323, 324, 327, 328, 329, 330, 331, 333, 335, 336, 340, 345, 346, 347, 348, 349, 350, 351, 352, 355, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 378, 382, 418, 422, 430, 431, 434, 435, 436, 437, 443, 444, 445, 446, 447, 449, 450, 451, 453, 455, 456, 459, 461, 462, 463, 464, 465, 466, 469, 471, 484], "versionad": [172, 181, 471], "versionchang": [172, 181], "versiontag": 181, "versu": [6, 67, 69, 80, 81, 95, 99, 164, 165, 178, 210], "vertex": [7, 10, 25, 178, 252, 371, 396, 434, 435, 436, 437, 461, 466, 469], "vertex_sign": 371, "vertic": [7, 23, 24, 38, 43, 67, 73, 81, 126, 138, 157, 158, 178, 268, 370, 372, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 434, 435, 436, 437, 443, 461, 462, 464, 466, 471], "vertical_checkerboard": [66, 67, 214], "vetor": 230, "vfonov": 263, "vhtf6": 268, "vi": 53, "via": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 117, 120, 129, 130, 157, 159, 160, 164, 167, 170, 172, 173, 176, 183, 198, 224, 243, 301, 302, 318, 327, 371, 374, 375, 376, 378, 379, 417, 423, 425, 426, 431, 432, 433], "victoria": [0, 129, 157], "vidaurr": [115, 191, 270], "video": [66, 172, 178], "vienna": 0, "viergev": [115, 158, 230], "view": [0, 6, 14, 15, 17, 34, 38, 44, 54, 56, 60, 63, 64, 67, 71, 72, 76, 85, 104, 111, 125, 126, 128, 129, 140, 149, 151, 155, 157, 164, 169, 171, 180, 181, 185, 227, 296, 297, 298, 299, 303, 304, 351, 365, 368, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 419, 423, 425, 426, 428, 429, 431, 432, 433, 434, 436, 437, 439, 440, 442, 445, 484, 487], "view_connectom": [23, 54, 56, 60, 143, 144, 146, 151, 157, 440, 442, 484], "view_img": [3, 30, 128, 129, 143, 144, 152, 155, 157, 164, 484], "view_img_on_surf": [10, 143, 144, 146, 151, 157, 439, 440, 442, 443, 487], "view_init": 25, "view_mark": [143, 144, 146, 151, 157, 439, 440, 484], "view_stat_map": [143, 157], "view_surf": [7, 10, 23, 129, 143, 146, 157, 439, 440, 441, 442, 487], "view_typ": [11, 52, 88, 89, 149, 157, 162, 431, 432], "viewabl": [146, 157], "viewer": [30, 143, 157, 164, 184, 440, 484], "viginia": 0, "vijayan": [0, 126, 157], "vinc": [115, 194, 241], "vincent": [0, 46, 51, 115, 119, 157, 170, 180, 194, 197, 217, 219, 241, 248, 268, 282, 360], "vine": [115, 310, 311], "virgil": [0, 119, 157], "virginia": 0, "viridi": [15, 151, 157], "viridis_r": 429, "virtual": [172, 181, 485], "visibl": [53, 80, 152, 157, 163, 351, 428, 434, 436, 437, 441, 443, 484], "vision": [6, 226], "visual": [1, 6, 8, 13, 15, 28, 29, 33, 34, 40, 41, 47, 49, 50, 52, 58, 67, 69, 71, 72, 73, 80, 81, 84, 87, 88, 89, 90, 92, 93, 95, 97, 102, 104, 106, 107, 108, 115, 116, 125, 126, 138, 140, 143, 149, 151, 157, 158, 159, 160, 168, 172, 173, 177, 180, 182, 184, 193, 197, 210, 213, 216, 229, 239, 241, 242, 248, 251, 258, 262, 263, 267, 268, 270, 272, 276, 283, 337, 338, 341, 343, 344, 346, 348, 349, 351, 355, 362, 365, 368, 373, 376, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 418, 421, 423, 424, 430, 431, 432, 433, 436, 437, 438, 471, 486, 487], "visual_comput": [66, 67, 69, 214], "visual_left_hand_button_press": [66, 67, 69, 214], "visual_right_hand_button_press": [66, 67, 69, 214], "vittorio": [115, 195], "vivo": [115, 221, 249], "vladimir": [115, 195, 211, 263, 289], "vmax": [15, 42, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 77, 80, 81, 85, 91, 101, 104, 107, 109, 111, 122, 124, 146, 157, 162, 417, 418, 423, 425, 426, 428, 431, 432, 433, 434, 436, 437, 439, 440, 441, 443, 484], "vmhc": 238, "vmin": [10, 15, 32, 37, 42, 46, 51, 52, 53, 54, 55, 56, 58, 59, 60, 70, 81, 85, 111, 122, 126, 127, 144, 146, 157, 162, 417, 418, 423, 425, 426, 428, 431, 432, 433, 434, 436, 437, 440, 441, 443], "vocabulari": [105, 118, 178, 180, 218, 273, 275], "vogel": [0, 60, 115, 146, 157, 202, 222, 256, 257], "voic": 67, "vol": 300, "vol_img": 465, "vol_to_surf": [10, 140, 149, 151, 157, 173, 428, 434, 435, 436, 437, 441, 465, 484], "vol_to_surf_kwarg": [10, 151, 157, 441, 465], "volum": [9, 17, 28, 37, 40, 45, 50, 56, 58, 63, 69, 80, 88, 92, 101, 111, 115, 117, 124, 126, 127, 129, 140, 143, 151, 157, 163, 169, 170, 178, 179, 180, 183, 187, 192, 195, 209, 216, 240, 242, 245, 262, 272, 277, 296, 297, 298, 299, 301, 302, 303, 304, 318, 340, 348, 351, 352, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 376, 383, 385, 386, 418, 423, 428, 432, 437, 438, 440, 447, 448, 449, 453, 459, 465, 469, 471, 484, 485, 486, 487], "volume_img": [10, 38, 69, 110, 465], "volumetr": [7, 10, 24, 129, 157, 173, 183, 382], "volumn": [58, 359], "volunt": 169, "vote": 165, "vox_offset": [58, 92, 103], "voxel": [3, 7, 16, 26, 29, 34, 37, 38, 40, 41, 42, 43, 46, 47, 48, 51, 52, 60, 61, 67, 70, 75, 80, 82, 83, 85, 88, 90, 91, 93, 99, 101, 103, 104, 107, 113, 115, 117, 125, 133, 136, 137, 138, 144, 153, 155, 157, 161, 162, 164, 166, 167, 168, 170, 173, 174, 175, 178, 179, 180, 183, 185, 192, 195, 212, 213, 216, 223, 226, 229, 238, 246, 247, 254, 259, 263, 264, 277, 297, 300, 301, 302, 303, 304, 306, 313, 314, 318, 327, 331, 333, 334, 335, 336, 338, 340, 341, 342, 351, 352, 355, 358, 359, 362, 363, 364, 365, 366, 367, 368, 369, 371, 373, 374, 377, 379, 382, 395, 410, 413, 418, 421, 427, 433, 438, 444, 445, 446, 447, 448, 449, 453, 454, 455, 456, 457, 469, 470, 471, 484, 486, 487], "voxel_ratio": 51, "voxel_sign": [364, 367, 369, 447], "voxel_wis": 17, "voxelwis": [318, 331], "vrije": 0, "vscode": [146, 157], "vstack": [42, 43, 60, 71, 76, 81, 105], "vt": [3, 19, 95], "vu": 0, "vulner": [115, 152, 157, 209], "vv": 118, "vxxx": 216, "w": [38, 46, 60, 108, 115, 158, 191, 202, 223, 228, 229, 230, 232, 250, 253, 254, 256, 260, 270, 278, 296, 297, 301, 302], "w_": [301, 302], "wa": [0, 3, 6, 42, 56, 65, 69, 72, 73, 90, 92, 93, 107, 108, 117, 118, 124, 126, 143, 150, 151, 152, 153, 154, 157, 164, 166, 169, 171, 174, 181, 193, 195, 226, 230, 249, 250, 300, 301, 302, 303, 304, 318, 325, 331, 333, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 418, 428, 434, 436, 437, 441, 443, 444, 445, 446, 447, 450, 471], "wager": [115, 118, 218, 273, 275, 336, 459], "wagstyl": [0, 126, 157], "wai": [3, 6, 7, 40, 63, 64, 67, 72, 73, 76, 77, 85, 99, 115, 117, 118, 150, 151, 153, 157, 158, 160, 163, 164, 165, 167, 170, 171, 172, 173, 174, 178, 183, 185, 275, 298, 299, 308, 310, 311, 356, 418, 444, 484, 485], "wait": [118, 171], "wald": [308, 310, 311], "walk": 180, "walker": [162, 447, 449], "wall": [24, 171], "wang": [0, 115, 124, 125, 126, 127, 129, 150, 151, 153, 155, 157, 220, 277], "want": [0, 2, 6, 10, 15, 16, 38, 44, 51, 56, 67, 71, 72, 73, 79, 87, 95, 99, 101, 105, 113, 117, 118, 158, 165, 167, 171, 172, 174, 184, 185, 273, 275, 301, 302, 321, 351, 360, 422, 436, 443, 484, 485], "ward": [92, 161, 178, 179, 195, 366, 445, 471], "ward_labels_img": 51, "ward_parcel": 51, "ward_tre": 51, "warn": [2, 3, 6, 16, 17, 19, 21, 30, 31, 37, 42, 44, 45, 50, 52, 71, 88, 104, 108, 124, 125, 126, 127, 128, 129, 143, 144, 146, 151, 153, 155, 157, 164, 172, 240, 242, 243, 251, 315, 321, 325, 362, 363, 364, 365, 366, 367, 368, 369, 396, 438, 447], "warrington": [0, 126, 157], "washington": [0, 220], "waskom": [0, 119, 157], "wasn": 171, "wassermann": [0, 115, 122, 143, 157, 201, 245], "wast": 171, "watch": [50, 51, 52, 54, 56, 57, 86, 90, 93, 106, 146, 157, 160, 179, 180, 185, 200, 259, 487], "watkin": [115, 225, 251], "wdesign": [155, 157], "we": [0, 2, 3, 4, 6, 7, 10, 12, 15, 19, 20, 21, 23, 24, 25, 26, 30, 31, 32, 34, 35, 37, 38, 39, 40, 41, 42, 44, 45, 46, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 116, 117, 118, 124, 126, 129, 136, 144, 145, 146, 151, 153, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 169, 171, 173, 178, 180, 181, 182, 183, 184, 185, 201, 221, 224, 237, 246, 247, 264, 273, 275, 301, 302, 303, 308, 310, 311, 331, 335, 343, 347, 355, 356, 357, 374, 376, 377, 379, 386, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 421, 447, 449, 471, 484, 485], "weaker": [53, 67, 80], "weakli": 171, "web": [17, 115, 118, 143, 146, 157, 172, 218, 273, 275, 318, 331, 439, 441, 442, 443, 457, 484], "webpag": 118, "websit": [3, 44, 76, 131, 143, 157, 172, 191, 238, 251, 272], "webster": [104, 115, 158, 382], "wednesdai": [172, 485], "weeda": [77, 115, 313], "week": [172, 181], "weekli": [172, 180], "wegrzyn": [0, 150, 157], "weigh": 172, "weight": [6, 30, 41, 44, 45, 46, 117, 118, 146, 157, 158, 165, 167, 168, 171, 172, 174, 185, 209, 211, 218, 238, 263, 273, 275, 296, 297, 298, 299, 301, 302, 315, 358, 439, 451, 487], "weight_img": [30, 44, 99, 164, 185], "weighted_connectivity_graph": [124, 157], "weird": 118, "welcom": [172, 181, 485], "well": [3, 6, 16, 40, 46, 50, 53, 60, 67, 68, 70, 80, 90, 101, 130, 136, 143, 150, 152, 157, 158, 159, 161, 162, 164, 165, 167, 170, 172, 174, 178, 180, 195, 198, 201, 211, 224, 225, 230, 231, 232, 245, 251, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 337, 351, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 444, 445, 446, 447, 471], "wellcom": [0, 6, 178, 226], "went": 118, "were": [0, 6, 11, 16, 19, 22, 40, 42, 50, 51, 52, 60, 64, 67, 72, 80, 88, 89, 92, 95, 99, 102, 109, 110, 117, 122, 124, 146, 149, 153, 154, 155, 157, 164, 171, 172, 174, 191, 195, 202, 209, 211, 213, 216, 225, 226, 273, 275, 336, 366, 369, 459, 471], "weren": 171, "western": 0, "wget": 181, "wgreen": [115, 305, 309], "what": [16, 58, 67, 72, 154, 165, 171, 175, 181, 183, 185, 231, 305, 309, 342, 356, 460, 484, 487], "whatev": [150, 157], "whats_new": 181, "whatsnew": [124, 157], "whatsoev": 171, "wheel": 181, "when": [2, 3, 4, 9, 10, 17, 25, 28, 56, 60, 65, 67, 68, 69, 73, 76, 90, 92, 93, 95, 101, 103, 107, 108, 110, 113, 117, 118, 124, 125, 126, 127, 128, 129, 130, 131, 133, 137, 138, 139, 141, 144, 146, 149, 150, 153, 154, 155, 157, 158, 159, 161, 163, 164, 165, 166, 167, 169, 171, 172, 173, 174, 177, 178, 181, 184, 192, 197, 198, 230, 238, 240, 243, 249, 250, 266, 268, 273, 275, 296, 297, 298, 299, 300, 301, 302, 306, 307, 311, 312, 315, 318, 331, 333, 351, 353, 358, 359, 360, 363, 364, 365, 366, 367, 368, 369, 373, 382, 383, 385, 386, 396, 414, 425, 426, 431, 432, 433, 434, 436, 437, 438, 440, 441, 443, 445, 450, 457, 458, 459, 469, 471, 484, 486], "whenev": [68, 165, 334], "where": [2, 6, 10, 16, 17, 25, 40, 42, 46, 52, 70, 78, 85, 88, 95, 101, 107, 113, 126, 136, 150, 157, 158, 162, 164, 169, 170, 172, 174, 178, 181, 184, 185, 213, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 277, 278, 279, 280, 281, 282, 283, 284, 285, 292, 296, 297, 298, 299, 301, 302, 305, 308, 309, 310, 311, 314, 318, 331, 333, 373, 393, 395, 398, 400, 402, 404, 406, 408, 410, 414, 417, 420, 423, 426, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 443, 447, 449, 456, 457, 469, 484], "wherea": [16, 51, 152, 157, 161, 165, 184, 377, 379, 380, 445], "wherein": 65, "whether": [6, 10, 70, 90, 95, 104, 128, 144, 157, 164, 172, 174, 181, 185, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 254, 259, 262, 263, 264, 268, 270, 271, 272, 273, 275, 277, 282, 292, 303, 304, 315, 333, 334, 335, 340, 348, 350, 351, 352, 355, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 378, 379, 382, 383, 385, 386, 425, 428, 433, 434, 435, 437, 445, 447, 456, 457, 459, 460], "which": [0, 3, 6, 7, 10, 13, 15, 16, 22, 24, 26, 30, 31, 33, 34, 35, 37, 38, 40, 42, 44, 46, 49, 51, 53, 60, 63, 67, 68, 69, 70, 76, 77, 80, 85, 90, 92, 95, 99, 101, 110, 115, 117, 118, 123, 124, 125, 127, 129, 131, 136, 137, 140, 141, 142, 143, 144, 146, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 176, 178, 180, 181, 183, 184, 185, 191, 192, 195, 237, 244, 246, 247, 249, 250, 253, 254, 259, 273, 274, 275, 276, 279, 280, 281, 283, 284, 285, 292, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 317, 318, 325, 326, 331, 333, 335, 340, 346, 351, 355, 357, 358, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 430, 431, 432, 433, 434, 435, 436, 437, 440, 445, 447, 448, 449, 457, 463, 464, 469, 484, 485], "whichev": 172, "while": [3, 4, 6, 7, 40, 50, 57, 58, 67, 85, 95, 99, 101, 102, 105, 110, 117, 124, 126, 131, 141, 143, 157, 163, 164, 169, 171, 172, 173, 180, 184, 185, 195, 242, 296, 297, 298, 299, 325, 382], "white": [12, 25, 40, 42, 44, 58, 67, 76, 90, 134, 149, 151, 152, 157, 171, 184, 185, 195, 204, 205, 206, 207, 208, 211, 220, 259, 263, 277, 281, 284, 288, 289, 290, 291, 296, 297, 298, 299, 303, 304, 321, 359, 365, 368, 375, 378, 434, 435, 436, 437, 440, 441, 443, 445, 468, 469], "white_left": [204, 205, 206, 207, 208, 281, 469], "white_matt": [58, 284, 285, 292, 465], "white_matter_map": [44, 76, 220, 277], "white_right": [204, 205, 206, 207, 208, 281], "whiten": [305, 309, 310, 311], "whitened_design": 309, "whitened_i": 310, "whitened_residu": 310, "whitened_x": [305, 309], "whitening_": 230, "whitespac": [142, 157], "whl": 181, "who": [0, 118, 185, 191, 200, 360], "whole": [4, 6, 15, 44, 50, 52, 70, 90, 95, 115, 118, 126, 152, 157, 169, 170, 172, 173, 179, 184, 185, 198, 211, 212, 226, 243, 263, 273, 275, 286, 289, 296, 297, 298, 299, 303, 304, 365, 368, 375, 378, 382, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 431, 445, 447, 484], "whose": [10, 69, 171, 178, 231, 232, 234, 309, 343, 422, 463, 464, 469], "why": [3, 7, 95, 171, 185], "wide": [57, 71, 107, 115, 164, 165, 167, 171, 172, 210, 260, 278, 300], "width": [10, 15, 33, 53, 67, 76, 95, 129, 157, 178, 185, 296, 297, 298, 299, 303, 304, 318, 331, 333, 353, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 418, 419, 423, 425, 426, 429, 430, 431, 432, 433, 439, 440, 445, 447, 449, 455, 457], "width_ratio": [81, 101], "width_tf": 43, "width_tf_i": 43, "width_view": [129, 157, 440], "wiesner": [0, 146, 157], "wig": [60, 115, 202, 222, 256, 257], "wiki": 174, "wikipedia": 174, "wildcard": [4, 183, 184, 295, 346], "wilei": [115, 310, 311], "william": [115, 191, 194, 219, 241, 270, 282, 305, 309], "williamson": [0, 124, 125, 157], "wim": [115, 211, 263], "window": [172, 318, 331, 457, 485], "winkler": [104, 115, 191, 270, 382], "winner": 224, "wip": 172, "wisconsin": 0, "wise": [6, 16, 42, 49, 57, 82, 95, 101, 104, 124, 129, 155, 157, 169, 173, 178, 185, 296, 297, 298, 299, 333, 382], "wish": [6, 67, 80, 107, 153, 157, 172, 178, 181, 226, 263, 264, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 419, 423, 425, 426, 429, 431, 432, 433], "within": [7, 11, 16, 19, 22, 38, 49, 50, 52, 57, 67, 68, 80, 88, 89, 101, 104, 146, 149, 155, 157, 161, 163, 169, 173, 176, 177, 195, 296, 297, 300, 315, 318, 320, 321, 325, 331, 335, 336, 355, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 380, 387, 388, 389, 390, 391, 392, 394, 397, 399, 401, 403, 405, 407, 409, 418, 419, 445, 448, 457, 459], "without": [3, 6, 15, 24, 50, 52, 67, 79, 82, 85, 95, 103, 118, 125, 126, 137, 146, 155, 157, 159, 162, 168, 170, 171, 174, 178, 183, 185, 243, 334, 340, 360, 362, 365, 368, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 418, 426, 431, 484, 487], "wjtyq": [200, 259], "wjvd5": [201, 245], "wlsmodel": 309, "wm": [12, 22, 58, 90, 152, 157, 185, 211, 263, 296, 297, 298, 299, 303, 304, 360, 365, 368, 375, 378, 445], "wm_csf": [58, 321, 359, 360], "wm_mask_img": 290, "wm_mni152_templ": 291, "wn": [155, 157], "woldorff": [115, 228, 253], "wolf": [58, 60, 115, 171, 359, 360], "wolfgang": [115, 221, 249], "women": 0, "wood": [115, 219, 282], "woolrich": [115, 158, 191, 270], "wor": 172, "word": [6, 15, 78, 95, 105, 107, 118, 164, 165, 172, 213, 218, 226, 273, 275, 465], "word_frequ": [105, 118, 218, 273, 275], "work": [0, 1, 2, 3, 8, 21, 31, 32, 33, 35, 41, 50, 57, 63, 72, 85, 90, 93, 99, 103, 110, 111, 113, 126, 129, 130, 138, 139, 146, 153, 154, 157, 158, 163, 164, 165, 167, 171, 172, 173, 174, 181, 183, 184, 185, 191, 195, 230, 231, 232, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 331, 358, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 413, 419, 425, 443, 444, 445, 446, 447, 456, 462, 464, 465, 466, 471, 473, 475, 486], "workaround": [139, 157], "workbench": 13, "worker": [36, 37, 38, 44, 45, 46, 50, 55, 59, 60, 99, 104, 107, 382], "workflow": [63, 172, 176, 181], "workshop": [115, 170, 195, 242], "workspac": 181, "world": [42, 183, 185, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 416, 419, 429], "worri": [6, 25, 117], "wors": [67, 297, 302], "worslei": [115, 336, 459], "worst": 164, "worth": 78, "would": [6, 10, 15, 44, 52, 60, 67, 76, 79, 105, 110, 118, 126, 128, 129, 151, 155, 157, 164, 171, 172, 173, 174, 181, 295, 296, 297, 298, 299, 301, 302, 304, 318, 320, 321, 325, 331, 333, 356, 370, 373, 378, 418], "wouter": [77, 115, 313], "wrap": [12, 50, 51, 54, 55, 56, 58, 60, 93, 105, 164, 455], "wrapper": [296, 297, 333, 463, 464], "wresid": [155, 157], "write": [6, 43, 72, 113, 118, 124, 153, 155, 157, 171, 172, 181, 358, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 455, 461, 462, 466], "write_imgs_to_path": [127, 157], "write_tmp_img": [127, 157], "written": [6, 171, 226, 455], "wrong": [136, 154, 157, 174], "wrt": 238, "wspace": [42, 46], "wustl": [220, 224, 277], "www": [0, 118, 192, 193, 194, 198, 210, 211, 218, 225, 226, 227, 239, 240, 243, 251, 262, 263, 264, 279, 280], "wy": [155, 157], "x": [3, 6, 10, 14, 15, 16, 23, 24, 25, 32, 34, 36, 38, 40, 42, 43, 46, 49, 54, 56, 60, 64, 67, 70, 72, 76, 85, 92, 93, 95, 102, 105, 111, 115, 126, 127, 130, 133, 138, 140, 146, 151, 153, 155, 157, 164, 169, 172, 178, 181, 184, 185, 191, 195, 203, 226, 230, 242, 248, 270, 271, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 318, 327, 331, 338, 359, 362, 363, 365, 366, 368, 369, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 417, 419, 423, 425, 426, 429, 431, 432, 433, 434, 435, 436, 437, 440, 443, 444, 446, 447, 448, 452, 456, 457, 458, 461, 470, 482, 484], "x1": [65, 95, 469], "x1_post": 340, "x1_pre": 340, "x2": [65, 95], "x20": 469, "x27": [51, 64, 90, 92, 471], "x2_post": 340, "x2_pre": 340, "x3": 65, "x4": 65, "x_figure_filenam": 43, "x_inv": [444, 446], "x_new": [300, 303, 304, 318, 331, 362, 365, 368, 444, 446], "x_random_filenam": 43, "x_red": [444, 446], "x_test": [32, 40, 43, 46, 296, 297, 298, 299, 300], "x_train": [32, 40, 43, 46], "xavier": 115, "xaxi": [50, 51], "xerr": [53, 100], "xi": [46, 115, 223, 250], "xiaop": [115, 198, 243], "xlabel": [6, 26, 31, 33, 35, 44, 50, 51, 53, 57, 60, 68, 100, 184], "xlim": [26, 31, 184], "xmean_": [301, 302], "xmin": [31, 417, 418, 419, 423, 425, 426, 429, 431, 432, 433], "xn_post": 340, "xn_pre": 340, "xor": 118, "xprojector": [15, 403, 409, 411], "xslicer": [10, 16, 404, 410, 412], "xstd_": [301, 302], "xtick": [33, 35, 36, 46, 95], "xu": [115, 191, 270], "xx": 46, "xxxx": 172, "xy_indices_of_special_voxel": 42, "xyz": [16, 350, 393, 398, 400, 404, 410], "xyzt_unit": [58, 92, 103], "xz": [14, 15, 16, 51, 318, 331, 401, 402, 411, 412, 417, 419, 423, 425, 426, 429, 431, 432, 433, 457, 484], "xzprojector": [14, 15, 405, 407, 411], "xzslicer": [16, 51, 406, 408, 412], "y": [6, 15, 16, 24, 25, 32, 34, 35, 36, 37, 38, 40, 42, 43, 46, 49, 54, 56, 60, 64, 70, 71, 85, 93, 95, 102, 107, 108, 111, 115, 118, 138, 140, 143, 155, 157, 164, 165, 169, 172, 178, 181, 184, 185, 215, 230, 231, 232, 248, 271, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 318, 326, 327, 331, 333, 338, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 416, 417, 419, 423, 425, 426, 429, 431, 432, 433, 434, 435, 436, 437, 440, 443, 444, 445, 446, 447, 448, 456, 457, 461, 470, 484], "y_binari": 40, "y_binary_": 40, "y_col": 43, "y_figure_filenam": 43, "y_multi": 40, "y_pred": [30, 32, 35, 43, 45, 164, 296, 297, 298, 299, 301, 302], "y_pred_big": 43, "y_pred_larg": 43, "y_pred_ova": 36, "y_pred_ovo": 36, "y_pred_tal": 43, "y_random_filenam": 43, "y_row": 43, "y_shape": 43, "y_test": [32, 35, 40, 43, 46, 296, 297, 298, 299, 300], "y_train": [32, 35, 40, 43, 46], "y_true": [297, 302], "yamashita": [42, 43, 115, 216, 272], "yan": [115, 219, 282], "yannick": [115, 119, 157, 164, 166, 197, 218, 268, 273, 275, 298, 299], "yarkoni": [115, 118, 218, 273, 275], "yaroslav": [0, 140, 143, 157], "yashar": [115, 359, 360, 460], "yasmin": [0, 124, 125, 126, 127, 129, 155, 157, 180], "yaxi": 51, "ye": [181, 296, 297, 298, 299], "year": [44, 45, 115, 171, 181, 200, 259, 277], "yellow": 16, "yeo": [115, 129, 157, 187, 223, 250, 254, 414], "yeo2011_17networks_mni152_freesurferconformed1mm_liberalmask": [49, 471], "yeo_2011": [49, 87, 471], "yeo_jneurophysiol11_mni152": [49, 471], "yeo_network": 250, "yet": [66, 81, 106, 115, 153, 157, 164, 172, 180, 370, 371, 372, 431], "yh": 43, "yi": [38, 115], "yichun": [0, 129, 157], "yield": [24, 32, 41, 51, 78, 80, 85, 118, 146, 149, 153, 157, 163, 164, 165, 166, 169, 170, 173, 174, 190, 273, 300, 304, 314, 318, 320, 325, 334, 355, 444, 447], "ylabel": [26, 31, 33, 44, 50, 51, 57, 59, 60, 66, 67, 184], "ylim": 33, "ylorrd": 60, "ymean_": [301, 302], "ymin": [417, 418, 419, 423, 425, 426, 429, 431, 432, 433], "yml": 181, "yoichi": [42, 43, 115, 216, 272], "york": [0, 115, 310, 311], "you": [0, 2, 4, 6, 7, 10, 15, 16, 23, 24, 25, 33, 36, 37, 38, 41, 42, 43, 44, 45, 46, 49, 50, 51, 53, 54, 55, 56, 57, 58, 60, 63, 67, 70, 72, 76, 80, 87, 90, 92, 93, 95, 99, 100, 101, 104, 105, 106, 107, 108, 110, 113, 115, 117, 118, 129, 138, 139, 143, 146, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 169, 170, 172, 176, 177, 178, 180, 181, 183, 184, 185, 191, 192, 197, 218, 230, 231, 232, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 254, 259, 262, 263, 264, 268, 271, 272, 273, 277, 278, 282, 292, 296, 297, 298, 299, 300, 301, 302, 303, 304, 318, 320, 321, 325, 331, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 419, 422, 423, 425, 426, 429, 431, 432, 433, 434, 436, 437, 440, 441, 443, 444, 445, 446, 447, 469, 484, 485, 487], "young": [50, 115, 179, 191, 195, 200, 220, 242, 270, 277], "your": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 116, 118, 159, 163, 164, 165, 167, 169, 181, 183, 185, 191, 246, 247, 259, 264, 296, 297, 298, 299, 303, 304, 309, 365, 368, 445, 484, 487], "your_branch": 172, "your_fork": 172, "your_usernam": 172, "yprojector": [15, 399, 409, 411], "yslicer": [16, 93, 400, 410, 412], "yt_big": 43, "yt_larg": 43, "yt_tall": 43, "ytick": [31, 46, 50, 53, 100], "yukiyasu": [42, 43, 115, 216, 272], "yuko": [115, 194, 241], "yusuk": [42, 43, 115, 216, 272], "yvett": [0, 172], "yw": 43, "yx": [15, 16, 117, 318, 331, 405, 406, 411, 412, 417, 419, 423, 425, 426, 429, 431, 432, 433, 457, 484], "yxprojector": [15, 401, 407, 411], "yxslicer": [16, 402, 408], "yz": [15, 16, 32, 41, 318, 331, 407, 408, 411, 412, 417, 419, 423, 425, 426, 429, 431, 432, 433, 457, 484], "yzprojector": [15, 401, 405, 411], "yzslicer": [16, 41, 402, 406, 412], "y\u00fccel": [58, 115, 360], "z": [2, 14, 15, 16, 19, 25, 31, 34, 37, 40, 42, 44, 45, 49, 50, 54, 56, 60, 63, 64, 66, 67, 70, 71, 76, 77, 80, 81, 82, 85, 88, 89, 95, 102, 104, 107, 108, 115, 128, 138, 140, 144, 155, 157, 172, 174, 178, 181, 184, 185, 195, 248, 273, 306, 313, 315, 317, 318, 331, 334, 338, 358, 359, 360, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 382, 383, 385, 386, 390, 391, 392, 393, 394, 401, 402, 407, 408, 409, 410, 411, 412, 413, 416, 417, 418, 419, 423, 425, 426, 429, 431, 432, 433, 434, 435, 436, 437, 440, 443, 447, 448, 456, 457, 459, 461, 470, 484], "z_image_path": 72, "z_img": 109, "z_map": [6, 34, 63, 64, 66, 67, 70, 71, 72, 76, 77, 78, 80, 82, 102, 318, 331], "z_map_ftest": 70, "z_score": [6, 63, 66, 67, 69, 70, 71, 72, 76, 77, 78, 80, 81, 82, 110, 306, 318, 331], "z_scores_left": 110, "z_scores_right": 110, "z_slice": [19, 44, 107], "z_statmap": [64, 76], "z_val": 317, "z_valu": 109, "zack": [115, 169], "zaleski": [115, 159], "zarrar": 115, "zavitz": [115, 219, 282], "zealand": [104, 115, 382], "zenodo": 0, "zero": [6, 10, 15, 21, 23, 24, 37, 38, 40, 41, 46, 49, 55, 56, 72, 76, 78, 80, 95, 122, 127, 146, 150, 154, 157, 158, 162, 164, 165, 169, 170, 171, 174, 178, 184, 185, 230, 231, 232, 234, 277, 296, 297, 298, 299, 301, 302, 303, 305, 310, 311, 331, 333, 336, 340, 353, 355, 359, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 376, 379, 382, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 417, 432, 433, 435, 436, 445, 446, 447, 450, 451, 453, 454, 459, 471], "zero_divis": 43, "zeros_lik": [42, 68, 85, 104], "zielinski": [115, 190, 238], "zijdenbo": [115, 192, 211, 263], "zill": 115, "zip": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 162, 181, 217, 248, 263], "zmap": [41, 102, 215, 271], "zmap_filenam": 41, "zone": [115, 191, 270], "zoom": [151, 157], "zprojector": [15, 399, 403, 411], "zscore": [6, 125, 126, 146, 157, 230, 303, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 418, 459], "zscore_sampl": [3, 12, 30, 31, 32, 33, 35, 36, 37, 40, 41, 42, 44, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 92, 93, 99, 100, 101, 106, 125, 157, 162, 164, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 459, 471], "zslicer": [16, 37, 70, 89, 400, 404, 412], "zstat12": 64, "zuckerberg": 0, "zuo": [115, 223, 250], "zurich": 0, "zvi": [0, 148, 157], "zwalli": [0, 127, 157], "z\u00f6llei": [115, 223, 229, 250, 254], "\u00e1": [115, 211, 263], "\u00e2": [115, 191, 270], "\u00e9": [73, 115, 164, 197, 209, 211, 263, 268], "\u00eb": [46, 115, 164, 170], "\u00eele": 0, "\u00f3scar": [0, 119, 122, 131, 133, 157], "\u00fc": [115, 170], "\u0161": [115, 211, 263], "\u03b1": [34, 470], "\u03b54": [115, 191, 270]}, "titles": ["Team", "Basic tutorials", "3D and 4D niimgs: handling and visualizing", "A introduction tutorial to fMRI decoding", "Basic nilearn example: manipulating and looking at data", "Basic numerics and plotting with Python", "Intro to GLM Analysis: a single-run, single-subject fMRI dataset", "Working with Surface images", "Computation times", "Visualization of brain images", "Making a surface plot of a 3D statistical map", "Basic Atlas plotting", "Visualizing global patterns with a carpet plot", "Matplotlib colormaps in Nilearn", "Glass brain plotting in nilearn", "Glass brain plotting in nilearn (all options)", "More plotting tools from nilearn", "Plotting tools in nilearn", "Controlling the contrast of the background when plotting", "Plot Haxby masks", "Visualizing multiscale functional brain parcellations", "Visualizing a probabilistic atlas: the default mode in the MSDL atlas", "Visualizing 4D probabilistic atlas maps", "Loading and plotting of a cortical surface atlas", "Seed-based connectivity on the surface", "Technical point: Illustration of the volume to surface sampling schemes", "NeuroImaging volumes visualization", "Visualizing Megatrawls Network Matrices from Human Connectome Project", "Computation times", "Decoding and predicting from brain images", "Decoding with ANOVA + SVM: face vs house in the Haxby dataset", "Different classifiers in decoding the Haxby dataset", "Decoding with FREM: face vs house vs chair object recognition", "ROI-based decoding analysis in Haxby et al. dataset", "Decoding of a dataset after GLM fit for signal extraction", "Setting a parameter by cross-validation", "The haxby dataset: different multi-class strategies", "Searchlight analysis of face vs house recognition", "Cortical surface-based searchlight decoding", "Show stimuli of Haxby et al. dataset", "Understanding <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Decoder</span></code>", "FREM on Jimura et al \u201cmixed gambles\u201d dataset", "Encoding models for visual stimuli from Miyawaki et al. 2008", "Reconstruction of visual stimuli from Miyawaki et al. 2008", "Voxel-Based Morphometry on Oasis dataset", "Voxel-Based Morphometry on Oasis dataset with Space-Net prior", "Example of pattern recognition on simulated data", "Computation times", "Functional connectivity", "Comparing connectomes on different reference atlases", "Deriving spatial maps from group fMRI data using ICA and Dictionary Learning", "Clustering methods to learn a brain parcellation from fMRI", "Regions extraction using dictionary learning and functional connectomes", "Classification of age groups using functional connectivity", "Computing a connectome with sparse inverse covariance", "Group Sparse inverse covariance for multi-subject connectome", "Extracting signals of a probabilistic atlas of functional regions", "Producing single subject maps of seed-to-voxel correlation", "Extracting signals from a brain parcellation", "Connectivity structure estimation on simulated data", "Extract signals on spheres and plot a connectome", "Computation times", "GLM: First level analysis", "Default Mode Network extraction of ADHD dataset", "First level analysis of a complete BIDS dataset from openneuro", "Examples of design matrices", "Analysis of an fMRI dataset with a Finite Impule Response (FIR) model", "Understanding parameters of the first-level model", "Example of MRI response functions", "Example of surface-based first-level analysis", "Predicted time series and residuals", "Single-subject data (two runs) in native space", "Simple example of two-runs fMRI model fitting", "Generate an events.tsv file for the NeuroSpin localizer task", "Computation times", "GLM: Second level analysis", "Voxel-Based Morphometry on OASIS dataset", "Second-level fMRI model: true positive proportion in clusters", "Example of generic design in second-level models", "Example of second level design matrix", "Second-level fMRI model: one sample test", "Second-level fMRI model: two-sample test, unpaired and paired", "Statistical testing of a second-level analysis", "Computation times", "Manipulating brain image volumes", "Visualization of affine resamplings", "Comparing the means of 2 images", "Breaking an atlas of labels in separated regions", "Regions Extraction of Default Mode Networks using Smith Atlas", "Region Extraction using a t-statistical map (3D)", "Understanding NiftiMasker and mask computation", "Negating an image with math_img", "Extracting signals from brain regions using the NiftiLabelsMasker", "Simple example of NiftiMasker use", "Resample an image to a template", "Computing a Region of Interest (ROI) mask manually", "Smoothing an image", "Computation times", "Advanced statistical analysis of brain images", "Advanced decoding using scikit learn", "Functional connectivity predicts age group", "Beta-Series Modeling for Task-Based Functional Connectivity and Decoding", "BIDS dataset first and second level analysis", "Copying headers from input images with <code class=\"docutils literal notranslate\"><span class=\"pre\">math_img</span></code>", "Massively univariate analysis of face vs house recognition", "NeuroVault cross-study ICA maps", "Multivariate decompositions: Independent component analysis of fMRI", "Massively univariate analysis of a motor task from the Localizer dataset", "Massively univariate analysis of a calculation task from the Localizer dataset", "NeuroVault meta-analysis of stop-go paradigm studies", "Surface-based dataset first and second level analysis of a dataset", "A short demo of the surface images &amp; maskers", "Computation times", "Examples", "Computation times", "General bibliography", "<span class=\"section-number\">10. </span>Advanced usage: manual pipelines and scaling up", "<span class=\"section-number\">10.1. </span>Building your own neuroimaging machine-learning pipeline", "<span class=\"section-number\">10.2. </span>Downloading statistical maps from the Neurovault repository", "0.1.0", "0.1.1", "0.1.2", "0.1.3", "0.1.4", "0.10.0", "0.10.1", "0.10.2", "0.10.3", "0.10.4", "0.11.0", "0.11.1", "0.2.0", "0.2.1", "0.2.2", "0.2.3", "0.2.4", "0.2.5.1", "0.2.6", "0.3.0", "0.3.1", "0.4.0", "0.4.1", "0.4.2", "0.5.0", "0.5.1", "0.5.2", "0.6.0", "0.6.1", "0.6.2", "0.7.0", "0.7.1", "0.8.0", "0.8.1", "0.9.0", "0.9.1", "0.9.2", "&lt;no title&gt;", "What\u2019s new", "<span class=\"section-number\">6.2. </span>Connectome extraction: inverse covariance for direct connections", "<span class=\"section-number\">6.1. </span>Extracting times series to build a functional connectome", "<span class=\"section-number\">6. </span>Functional connectivity and resting state", "<span class=\"section-number\">6.5. </span>Clustering to parcellate the brain in regions", "<span class=\"section-number\">6.4. </span>Region Extraction for better brain parcellations", "<span class=\"section-number\">6.3. </span>Extracting functional brain networks: ICA and related", "<span class=\"section-number\">5.1. </span>An introduction to decoding", "<span class=\"section-number\">5.2. </span>Choosing the right predictive model for neuroimaging", "<span class=\"section-number\">5.3. </span>FREM: fast ensembling of regularized models for robust decoding", "<span class=\"section-number\">5.6. </span>Running scikit-learn functions for more control on the analysis", "<span class=\"section-number\">5. </span>Decoding and MVPA: predicting from brain images", "<span class=\"section-number\">5.5. </span>Searchlight : finding voxels containing information", "<span class=\"section-number\">5.4. </span>SpaceNet: decoding with spatial structure for better maps", "<span class=\"section-number\">6.2.3.1. </span>Group-sparse covariance estimation", "Contributing", "<span class=\"section-number\">8.2. </span>First level models", "<span class=\"section-number\">8.1. </span>An introduction to GLMs in fMRI statistical analysis", "<span class=\"section-number\">8. </span>Analyzing fMRI using GLMs", "<span class=\"section-number\">8.4. </span>Difference in meanings between different toolboxes", "<span class=\"section-number\">8.3. </span>Second level models", "Glossary", "Nilearn", "<span class=\"section-number\">1. </span>Introduction", "Maintenance", "<span class=\"section-number\">9. </span>Manipulation brain volumes with nilearn", "<span class=\"section-number\">9.1. </span>Input and output: neuroimaging data representation", "<span class=\"section-number\">9.2. </span>Manipulating images: resampling, smoothing, masking, ROIs\u2026", "<span class=\"section-number\">9.3. </span>From neuroimaging volumes to data matrices: the masker objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.connectome</span></code>: Functional Connectivity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.datasets</span></code>: Automatic Dataset Fetching", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.decoding</span></code>: Decoding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.decomposition</span></code>: Multivariate Decompositions", "ABIDE PCP dataset", "MegaTrawls Network Matrices HCP", "AAL atlas", "ADHD dataset", "Allen 2011 atlas", "BASC multiscale atlas", "BIDS language localizer", "Brainomics Localizer", "Craddock 2012 atlas", "Destrieux atlas", "development fMRI dataset", "DiFuMo atlas", "Dosenbach 2010 atlas", "fiac first level dataset", "fsaverage template", "fsaverage3 template", "fsaverage4 template", "fsaverage5 template", "fsaverage6 template", "Harvard Oxford atlas", "Haxby dataset", "ICBM 152 template", "Juelich atlas", "language localizer demo dataset", "localizer first level dataset", "Mixed gambles statistical maps", "Miyawaki 2008 dataset", "MSDL atlas", "Neurovault statistical maps", "NKI enhanced surface dataset", "OASIS volume based morphometry maps", "Pauli 2007 atlas", "Power 2011 atlas", "Schaefer 2018 atlas", "Seitzman 2018 atlas", "Smith 2009 atlas", "SPM auditory dataset", "SPM multimodal dataset", "Talairach atlas", "Yeo 2011 atlas", "nilearn.connectome.ConnectivityMeasure", "nilearn.connectome.GroupSparseCovariance", "nilearn.connectome.GroupSparseCovarianceCV", "nilearn.connectome.cov_to_corr", "nilearn.connectome.group_sparse_covariance", "nilearn.connectome.prec_to_partial", "nilearn.connectome.sym_matrix_to_vec", "nilearn.connectome.vec_to_sym_matrix", "nilearn.datasets.fetch_abide_pcp", "nilearn.datasets.fetch_adhd", "nilearn.datasets.fetch_atlas_aal", "nilearn.datasets.fetch_atlas_allen_2011", "nilearn.datasets.fetch_atlas_basc_multiscale_2015", "nilearn.datasets.fetch_atlas_craddock_2012", "nilearn.datasets.fetch_atlas_destrieux_2009", "nilearn.datasets.fetch_atlas_difumo", "nilearn.datasets.fetch_atlas_harvard_oxford", "nilearn.datasets.fetch_atlas_juelich", "nilearn.datasets.fetch_atlas_msdl", "nilearn.datasets.fetch_atlas_pauli_2017", "nilearn.datasets.fetch_atlas_schaefer_2018", "nilearn.datasets.fetch_atlas_smith_2009", "nilearn.datasets.fetch_atlas_surf_destrieux", "nilearn.datasets.fetch_atlas_talairach", "nilearn.datasets.fetch_atlas_yeo_2011", "nilearn.datasets.fetch_bids_langloc_dataset", "nilearn.datasets.fetch_coords_dosenbach_2010", "nilearn.datasets.fetch_coords_power_2011", "nilearn.datasets.fetch_coords_seitzman_2018", "nilearn.datasets.fetch_development_fmri", "nilearn.datasets.fetch_ds000030_urls", "nilearn.datasets.fetch_fiac_first_level", "nilearn.datasets.fetch_haxby", "nilearn.datasets.fetch_icbm152_2009", "nilearn.datasets.fetch_icbm152_brain_gm_mask", "nilearn.datasets.fetch_language_localizer_demo_dataset", "nilearn.datasets.fetch_localizer_button_task", "nilearn.datasets.fetch_localizer_calculation_task", "nilearn.datasets.fetch_localizer_contrasts", "nilearn.datasets.fetch_localizer_first_level", "nilearn.datasets.fetch_megatrawls_netmats", "nilearn.datasets.fetch_mixed_gambles", "nilearn.datasets.fetch_miyawaki2008", "nilearn.datasets.fetch_neurovault", "nilearn.datasets.fetch_neurovault_auditory_computation_task", "nilearn.datasets.fetch_neurovault_ids", "nilearn.datasets.fetch_neurovault_motor_task", "nilearn.datasets.fetch_oasis_vbm", "nilearn.datasets.fetch_openneuro_dataset", "nilearn.datasets.fetch_spm_auditory", "nilearn.datasets.fetch_spm_multimodal_fmri", "nilearn.datasets.fetch_surf_fsaverage", "nilearn.datasets.fetch_surf_nki_enhanced", "nilearn.datasets.get_data_dirs", "nilearn.datasets.load_fsaverage", "nilearn.datasets.load_fsaverage_data", "nilearn.datasets.load_mni152_brain_mask", "nilearn.datasets.load_mni152_gm_mask", "nilearn.datasets.load_mni152_gm_template", "nilearn.datasets.load_mni152_template", "nilearn.datasets.load_mni152_wm_mask", "nilearn.datasets.load_mni152_wm_template", "nilearn.datasets.load_nki", "nilearn.datasets.load_sample_motor_activation_image", "nilearn.datasets.patch_openneuro_dataset", "nilearn.datasets.select_from_index", "nilearn.decoding.Decoder", "nilearn.decoding.DecoderRegressor", "nilearn.decoding.FREMClassifier", "nilearn.decoding.FREMRegressor", "nilearn.decoding.SearchLight", "nilearn.decoding.SpaceNetClassifier", "nilearn.decoding.SpaceNetRegressor", "nilearn.decomposition.CanICA", "nilearn.decomposition.DictLearning", "nilearn.glm.ARModel", "nilearn.glm.Contrast", "nilearn.glm.FContrastResults", "nilearn.glm.LikelihoodModelResults", "nilearn.glm.OLSModel", "nilearn.glm.RegressionResults", "nilearn.glm.SimpleRegressionResults", "nilearn.glm.TContrastResults", "nilearn.glm.cluster_level_inference", "nilearn.glm.compute_contrast", "nilearn.glm.compute_fixed_effects", "nilearn.glm.expression_to_contrast_vector", "nilearn.glm.fdr_threshold", "nilearn.glm.first_level.FirstLevelModel", "nilearn.glm.first_level.check_design_matrix", "nilearn.glm.first_level.compute_regressor", "nilearn.glm.first_level.first_level_from_bids", "nilearn.glm.first_level.glover_dispersion_derivative", "nilearn.glm.first_level.glover_hrf", "nilearn.glm.first_level.glover_time_derivative", "nilearn.glm.first_level.make_first_level_design_matrix", "nilearn.glm.first_level.mean_scaling", "nilearn.glm.first_level.run_glm", "nilearn.glm.first_level.spm_dispersion_derivative", "nilearn.glm.first_level.spm_hrf", "nilearn.glm.first_level.spm_time_derivative", "nilearn.glm.second_level.SecondLevelModel", "nilearn.glm.second_level.make_second_level_design_matrix", "nilearn.glm.second_level.non_parametric_inference", "nilearn.glm.threshold_stats_img", "nilearn.image.binarize_img", "nilearn.image.clean_img", "nilearn.image.concat_imgs", "nilearn.image.coord_transform", "nilearn.image.copy_img", "nilearn.image.crop_img", "nilearn.image.get_data", "nilearn.image.high_variance_confounds", "nilearn.image.index_img", "nilearn.image.iter_img", "nilearn.image.largest_connected_component_img", "nilearn.image.load_img", "nilearn.image.math_img", "nilearn.image.mean_img", "nilearn.image.new_img_like", "nilearn.image.reorder_img", "nilearn.image.resample_img", "nilearn.image.resample_to_img", "nilearn.image.smooth_img", "nilearn.image.swap_img_hemispheres", "nilearn.image.threshold_img", "nilearn.interfaces.bids.get_bids_files", "nilearn.interfaces.bids.parse_bids_filename", "nilearn.interfaces.bids.save_glm_to_bids", "nilearn.interfaces.fmriprep.load_confounds", "nilearn.interfaces.fmriprep.load_confounds_strategy", "nilearn.interfaces.fsl.get_design_from_fslmat", "nilearn.maskers.BaseMasker", "nilearn.maskers.MultiNiftiLabelsMasker", "nilearn.maskers.MultiNiftiMapsMasker", "nilearn.maskers.MultiNiftiMasker", "nilearn.maskers.NiftiLabelsMasker", "nilearn.maskers.NiftiMapsMasker", "nilearn.maskers.NiftiMasker", "nilearn.maskers.NiftiSpheresMasker", "nilearn.maskers.SurfaceLabelsMasker", "nilearn.maskers.SurfaceMapsMasker", "nilearn.maskers.SurfaceMasker", "nilearn.masking.apply_mask", "nilearn.masking.compute_background_mask", "nilearn.masking.compute_brain_mask", "nilearn.masking.compute_epi_mask", "nilearn.masking.compute_multi_background_mask", "nilearn.masking.compute_multi_brain_mask", "nilearn.masking.compute_multi_epi_mask", "nilearn.masking.intersect_masks", "nilearn.masking.unmask", "nilearn.mass_univariate.permuted_ols", "nilearn.plotting.displays.BaseAxes", "nilearn.plotting.displays.BaseSlicer", "nilearn.plotting.displays.CutAxes", "nilearn.plotting.displays.GlassBrainAxes", "nilearn.plotting.displays.LProjector", "nilearn.plotting.displays.LRProjector", "nilearn.plotting.displays.LYRProjector", "nilearn.plotting.displays.LYRZProjector", "nilearn.plotting.displays.LZRProjector", "nilearn.plotting.displays.LZRYProjector", "nilearn.plotting.displays.MosaicSlicer", "nilearn.plotting.displays.OrthoProjector", "nilearn.plotting.displays.OrthoSlicer", "nilearn.plotting.displays.PlotlySurfaceFigure", "nilearn.plotting.displays.RProjector", "nilearn.plotting.displays.TiledSlicer", "nilearn.plotting.displays.XProjector", "nilearn.plotting.displays.XSlicer", "nilearn.plotting.displays.XZProjector", "nilearn.plotting.displays.XZSlicer", "nilearn.plotting.displays.YProjector", "nilearn.plotting.displays.YSlicer", "nilearn.plotting.displays.YXProjector", "nilearn.plotting.displays.YXSlicer", "nilearn.plotting.displays.YZProjector", "nilearn.plotting.displays.YZSlicer", "nilearn.plotting.displays.ZProjector", "nilearn.plotting.displays.ZSlicer", "nilearn.plotting.displays.get_projector", "nilearn.plotting.displays.get_slicer", "nilearn.plotting.find_cut_slices", "nilearn.plotting.find_parcellation_cut_coords", "nilearn.plotting.find_probabilistic_atlas_cut_coords", "nilearn.plotting.find_xyz_cut_coords", "nilearn.plotting.plot_anat", "nilearn.plotting.plot_carpet", "nilearn.plotting.plot_connectome", "nilearn.plotting.plot_contrast_matrix", "nilearn.plotting.plot_design_matrix", "nilearn.plotting.plot_design_matrix_correlation", "nilearn.plotting.plot_epi", "nilearn.plotting.plot_event", "nilearn.plotting.plot_glass_brain", "nilearn.plotting.plot_img", "nilearn.plotting.plot_img_comparison", "nilearn.plotting.plot_img_on_surf", "nilearn.plotting.plot_markers", "nilearn.plotting.plot_matrix", "nilearn.plotting.plot_prob_atlas", "nilearn.plotting.plot_roi", "nilearn.plotting.plot_stat_map", "nilearn.plotting.plot_surf", "nilearn.plotting.plot_surf_contours", "nilearn.plotting.plot_surf_roi", "nilearn.plotting.plot_surf_stat_map", "nilearn.plotting.show", "nilearn.plotting.view_connectome", "nilearn.plotting.view_img", "nilearn.plotting.view_img_on_surf", "nilearn.plotting.view_markers", "nilearn.plotting.view_surf", "nilearn.regions.HierarchicalKMeans", "nilearn.regions.Parcellations", "nilearn.regions.ReNA", "nilearn.regions.RegionExtractor", "nilearn.regions.connected_label_regions", "nilearn.regions.connected_regions", "nilearn.regions.img_to_signals_labels", "nilearn.regions.img_to_signals_maps", "nilearn.regions.recursive_neighbor_agglomeration", "nilearn.regions.signals_to_img_labels", "nilearn.regions.signals_to_img_maps", "nilearn.reporting.HTMLReport", "nilearn.reporting.get_clusters_table", "nilearn.reporting.make_glm_report", "nilearn.signal.butterworth", "nilearn.signal.clean", "nilearn.signal.high_variance_confounds", "nilearn.surface.FileMesh", "nilearn.surface.InMemoryMesh", "nilearn.surface.PolyData", "nilearn.surface.PolyMesh", "nilearn.surface.SurfaceImage", "nilearn.surface.SurfaceMesh", "nilearn.surface.load_surf_data", "nilearn.surface.load_surf_mesh", "nilearn.surface.vol_to_surf", "Examples of GLM reports", "Examples masker reports", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.glm</span></code>: Generalized Linear Models", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.image</span></code>: Image Processing and Resampling Utilities", "API References", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.interfaces</span></code>: Loading components from interfaces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.maskers</span></code>: Extracting Signals from Brain Images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.masking</span></code>: Data Masking Utilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.mass_univariate</span></code>: Mass-Univariate Analysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.plotting</span></code>: Plotting Brain Data", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.regions</span></code>: Operating on Regions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.reporting</span></code>: Reporting Functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.signal</span></code>: Preprocessing Time Series", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nilearn.surface</span></code>: Manipulating Surface Data", "<span class=\"section-number\">7. </span>Plotting brain images", "Quickstart", "Computation times", "User guide"], "titleterms": {"": [60, 63, 99, 157, 164], "0": [18, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157], "0a0": [146, 157], "0b0": [146, 157], "0rc": [146, 157], "1": [18, 67, 119, 120, 121, 122, 123, 125, 130, 132, 136, 139, 141, 144, 147, 150, 152, 154, 157], "10": [124, 125, 126, 127, 128, 157], "100": 185, "11": [129, 130, 157], "152": 211, "1rc1": [125, 157], "2": [86, 121, 126, 131, 132, 133, 134, 135, 136, 137, 142, 145, 148, 155, 157], "2001": 164, "2007": 221, "2008": [42, 43, 216], "2009": 225, "2010": 202, "2011": [194, 222, 229], "2012": 198, "2018": [223, 224], "2d": [117, 184], "2x2": 16, "3": [122, 127, 134, 138, 139, 157], "3d": [2, 4, 10, 23, 54, 56, 60, 89, 183, 484], "4": [123, 128, 135, 140, 141, 142, 157], "4d": [2, 22, 117, 183, 184], "5": [16, 18, 136, 143, 144, 145, 157], "6": [70, 137, 146, 147, 148, 157], "7": [149, 150, 157], "8": [151, 152, 157], "9": [153, 154, 155, 157], "A": [3, 4, 46, 67, 111, 159, 164, 174], "And": [54, 56], "The": [36, 58, 67, 87, 164, 170, 185], "Then": 43, "aal": 192, "abid": 190, "access": [22, 184, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229], "accuraci": [3, 164], "across": 72, "actual": 70, "ad": [67, 172, 484], "add_contour": 16, "add_edg": 16, "add_mark": 16, "add_overlai": 21, "addit": 172, "adhd": [12, 63, 193, 470], "adjust": 25, "advanc": [98, 99, 113, 116, 185], "affin": [85, 183, 184], "after": [34, 90], "ag": [44, 53, 76, 100], "aggreg": 101, "al": [33, 39, 41, 42, 43], "algorithm": 171, "all": [2, 15, 164], "allen": 194, "along": 16, "alpha": [143, 157, 171], "also": [3, 51, 60], "altern": 163, "an": [6, 10, 40, 46, 60, 66, 73, 87, 91, 94, 96, 163, 164, 172, 174, 484], "analys": 176, "analysi": [3, 6, 33, 37, 44, 57, 62, 63, 64, 66, 69, 75, 76, 82, 98, 101, 102, 104, 106, 107, 108, 109, 110, 113, 164, 167, 169, 173, 174, 195, 478], "analyz": [76, 175, 183], "anatom": 17, "angl": 23, "ani": 167, "annot": [16, 118], "anoth": [16, 184], "anova": [30, 35, 99, 164, 167], "answer": 172, "api": [129, 131, 157, 172, 180, 474], "appli": [26, 50, 117, 161, 184, 185], "applic": [101, 180], "apply_mask": 373, "approach": [101, 158], "ar": [16, 67], "argument": [64, 102, 185], "armodel": 305, "around": [10, 53, 60], "arrai": [117, 184], "asymmetr": 49, "atla": [10, 11, 21, 22, 23, 49, 53, 54, 56, 58, 60, 87, 88, 100, 111, 159, 172, 192, 194, 195, 198, 199, 201, 202, 209, 212, 217, 221, 222, 223, 224, 225, 228, 229], "atlas": [22, 49, 159, 172, 187, 484], "attribut": 172, "auditori": 226, "automat": [64, 102, 117, 187], "avail": 484, "averag": 60, "ax": 479, "axial": 16, "background": [14, 18, 90], "bag": 165, "bar": [33, 484], "barplot": 36, "basc": 195, "base": [12, 24, 33, 38, 44, 45, 58, 69, 76, 101, 110, 162, 173, 177, 220], "baseax": 383, "basemask": 362, "baseslic": 384, "basic": [1, 4, 5, 11, 67, 113], "behavior": [3, 30, 34, 183], "beta": [101, 138, 143, 157, 164], "better": [162, 170, 185], "between": [65, 176], "bibliographi": 115, "bid": [64, 102, 110, 196, 356, 357, 358, 470, 475], "binari": 40, "binarize_img": 335, "bio": 44, "black": 14, "bold": [38, 174], "bootstrap": 195, "both": [15, 72], "bound": 171, "brain": [9, 14, 15, 17, 20, 26, 29, 42, 44, 49, 50, 51, 52, 53, 58, 60, 84, 92, 98, 100, 113, 159, 161, 162, 163, 168, 182, 184, 476, 479, 484], "brainom": 197, "break": 87, "browser": [10, 23, 54, 56, 60], "bug": [131, 134, 141, 157, 172], "build": [25, 34, 36, 42, 56, 95, 117, 159, 172, 181], "butterworth": 458, "calcul": [24, 70, 108], "canica": [50, 163, 303], "carpet": 12, "case": [172, 184], "cat": 3, "censor": 67, "chair": 32, "chanc": [3, 99, 164, 167], "chang": [16, 18, 67, 99, 124, 125, 126, 127, 128, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 149, 151, 152, 153, 154, 155, 157, 185], "changelog": [119, 120, 121, 122, 131, 132, 134, 157, 172], "check": [102, 485], "check_design_matrix": 319, "children": 53, "choic": 164, "choos": [10, 101, 164, 165], "cite": 0, "class": [36, 40, 165, 186, 188, 189, 472, 476, 479, 480, 481, 483], "classif": [53, 100, 165], "classifi": [31, 169], "clean": 459, "clean_img": 336, "close": 181, "cluster": [51, 70, 77, 161, 195], "cluster_level_infer": 313, "code": [129, 157, 161, 164, 166, 169, 172, 181, 184, 484], "coeffici": 52, "collect": 118, "color": 13, "colorbar": 16, "colormap": [13, 484], "column": 16, "combin": 109, "commit": 172, "common": 185, "compar": [40, 49, 50, 51, 72, 86, 101, 158, 169], "comparison": [10, 166, 174, 177], "complet": 64, "compon": [105, 106, 163, 475], "compress": [51, 161], "comput": [8, 28, 35, 36, 37, 38, 47, 52, 54, 55, 58, 60, 61, 72, 74, 83, 90, 95, 97, 109, 112, 114, 117, 158, 159, 162, 173, 184, 185, 486], "compute_background_mask": 374, "compute_brain_mask": 375, "compute_contrast": 314, "compute_epi_mask": 376, "compute_fixed_effect": 315, "compute_multi_background_mask": 377, "compute_multi_brain_mask": 378, "compute_multi_epi_mask": 379, "compute_regressor": 320, "concat_img": 337, "concept": 185, "conclus": 67, "condit": 101, "conduct": 172, "confound": [58, 67, 185], "confus": [32, 36], "connect": [24, 48, 49, 53, 58, 59, 87, 100, 101, 111, 113, 158, 160, 162, 186], "connected_label_region": 448, "connected_region": 449, "connectivitymeasur": 230, "connectom": [23, 27, 49, 52, 54, 55, 60, 158, 159, 186, 230, 231, 232, 233, 234, 235, 236, 237, 484], "contain": 169, "content": [190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 487], "continu": 172, "contour": [11, 15, 484], "contrast": [18, 63, 64, 67, 69, 70, 72, 173, 306], "contribut": 172, "contributor": [0, 131, 133, 136, 140, 143, 144, 145, 146, 147, 148, 157], "control": [18, 167, 185], "convert": 40, "coord_transform": 338, "coordin": [16, 49, 60, 159], "copi": 103, "copy_img": 339, "core": 0, "coron": 16, "correct": 177, "correl": [52, 53, 56, 57, 58, 60, 65, 158, 159], "correspond": [26, 54, 56], "cortic": [23, 38, 484], "cours": 63, "cov_to_corr": 233, "covari": [54, 55, 158, 171], "craddock": 198, "creat": [7, 46, 65, 79, 184], "criteria": 171, "criterion": 171, "crop_img": 340, "cross": [3, 30, 35, 36, 40, 99, 105, 164, 167, 169, 171], "css": 172, "csv": 183, "custom": [23, 185], "cut": [14, 16], "cutax": 385, "cutoff": 185, "cylind": 25, "data": [3, 4, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 23, 24, 26, 30, 31, 33, 34, 36, 41, 42, 43, 44, 46, 49, 50, 51, 54, 56, 57, 58, 59, 63, 67, 69, 71, 76, 90, 95, 99, 101, 105, 109, 117, 158, 161, 163, 164, 167, 169, 174, 183, 184, 185, 477, 479, 483], "dataset": [2, 6, 12, 16, 17, 18, 19, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 50, 51, 52, 53, 55, 60, 63, 64, 66, 76, 77, 80, 81, 100, 102, 107, 108, 110, 162, 166, 171, 172, 183, 187, 190, 193, 200, 203, 210, 213, 214, 216, 219, 226, 227, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295], "decid": 172, "decis": 172, "decod": [3, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 43, 45, 99, 101, 111, 113, 164, 166, 167, 168, 170, 188, 296, 297, 298, 299, 300, 301, 302], "decoderregressor": 297, "decomposit": [106, 189, 303, 304], "decreas": [18, 183], "default": [21, 60, 63, 88], "defin": [43, 58, 65, 68, 101], "definit": [164, 185], "demo": [15, 111, 213], "demonstr": 16, "depend": 485, "deploi": 181, "deriv": [12, 50, 67, 187], "descript": [117, 171, 187], "design": [65, 67, 78, 79, 101, 173, 185], "destrieux": [23, 199], "detect": 6, "determinist": 187, "develop": [0, 50, 51, 52, 53, 60, 100, 200, 485], "dictionari": [50, 52, 162, 163], "dictlearn": 304, "differ": [15, 23, 31, 33, 35, 36, 46, 49, 87, 158, 165, 176, 185, 484], "difumo": 201, "dim": 18, "dimens": [103, 164], "direct": [49, 158], "disclaim": 191, "discrimin": 99, "discuss": 172, "disk": [64, 76], "displai": [10, 15, 16, 23, 24, 54, 55, 56, 58, 60, 80, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 479, 484], "distribut": [70, 181], "dmn": 60, "do": [172, 174], "doc": 181, "document": [172, 181], "dosenbach": [60, 202], "download": [2, 3, 51, 99, 117, 118, 183], "draw": 25, "drift": 67, "drop": 485, "dtype": 185, "dualiti": 171, "dummi": 99, "each": [10, 34], "easi": 164, "edg": 484, "effect": [6, 72, 176], "empir": 166, "encod": 42, "engin": 99, "enhanc": [18, 124, 125, 126, 127, 128, 129, 130, 131, 133, 137, 138, 139, 140, 141, 143, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 172, 219], "ensembl": 166, "environ": 172, "epi": [17, 90], "error": 43, "estim": [42, 46, 59, 60, 63, 64, 67, 69, 77, 78, 80, 81, 99, 102, 164, 165, 167, 171, 172], "et": [33, 39, 41, 42, 43], "event": [34, 73, 173], "exampl": [4, 34, 41, 46, 65, 68, 69, 72, 78, 79, 93, 102, 110, 113, 118, 129, 157, 158, 159, 161, 163, 164, 169, 170, 179, 180, 184, 185, 230, 232, 239, 241, 242, 244, 245, 246, 247, 248, 251, 252, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 283, 284, 285, 286, 289, 292, 293, 295, 296, 297, 298, 299, 300, 302, 303, 304, 313, 315, 318, 320, 321, 325, 331, 332, 333, 334, 336, 337, 338, 341, 342, 343, 344, 346, 347, 348, 349, 351, 352, 353, 355, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 376, 381, 382, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 445, 447, 448, 449, 455, 456, 457, 461, 462, 463, 464, 465, 466, 469, 470, 471, 484], "execut": 171, "exercis": [46, 158, 159, 185], "expans": 183, "experi": [41, 117, 164], "experiment": [6, 79], "explicitli": 23, "expression_to_contrast_vector": 316, "extra": 185, "extract": [3, 24, 26, 34, 49, 52, 53, 54, 55, 56, 57, 58, 60, 63, 70, 88, 89, 90, 92, 158, 159, 162, 163, 173, 184, 185, 476], "f": [6, 37, 70], "f_score": 169, "face": [3, 30, 31, 32, 37, 38, 104], "fashion": 16, "fast": 166, "fcontrastresult": 307, "fdr_threshold": 317, "featur": [3, 16, 40, 99, 131, 134, 157, 164, 179, 470], "fetch": [12, 21, 26, 27, 34, 49, 52, 55, 64, 77, 80, 81, 102, 109, 110, 162, 183, 187], "fetch_abide_pcp": 238, "fetch_adhd": 239, "fetch_atlas_a": 240, "fetch_atlas_allen_2011": 241, "fetch_atlas_basc_multiscale_2015": 242, "fetch_atlas_craddock_2012": 243, "fetch_atlas_destrieux_2009": 244, "fetch_atlas_difumo": 245, "fetch_atlas_harvard_oxford": 246, "fetch_atlas_juelich": 247, "fetch_atlas_msdl": 248, "fetch_atlas_pauli_2017": 249, "fetch_atlas_schaefer_2018": 250, "fetch_atlas_smith_2009": 251, "fetch_atlas_surf_destrieux": 252, "fetch_atlas_talairach": 253, "fetch_atlas_yeo_2011": 254, "fetch_bids_langloc_dataset": 255, "fetch_coords_dosenbach_2010": 256, "fetch_coords_power_2011": 257, "fetch_coords_seitzman_2018": 258, "fetch_development_fmri": 259, "fetch_ds000030_url": 260, "fetch_fiac_first_level": 261, "fetch_haxbi": 262, "fetch_icbm152_2009": 263, "fetch_icbm152_brain_gm_mask": 264, "fetch_language_localizer_demo_dataset": 265, "fetch_localizer_button_task": 266, "fetch_localizer_calculation_task": 267, "fetch_localizer_contrast": 268, "fetch_localizer_first_level": 269, "fetch_megatrawls_netmat": 270, "fetch_mixed_gambl": 271, "fetch_miyawaki2008": 272, "fetch_neurovault": 273, "fetch_neurovault_auditory_computation_task": 274, "fetch_neurovault_id": 275, "fetch_neurovault_motor_task": 276, "fetch_oasis_vbm": 277, "fetch_openneuro_dataset": 278, "fetch_spm_auditori": 279, "fetch_spm_multimodal_fmri": 280, "fetch_surf_fsaverag": 281, "fetch_surf_nki_enhanc": 282, "fetcher": [23, 172], "few": [101, 164], "fiac": [203, 470], "field": 42, "figur": [105, 479], "file": [2, 4, 16, 30, 58, 73, 183, 484], "filemesh": 461, "fill": [15, 484], "filter": [118, 185], "final": 164, "find": [95, 169, 180], "find_cut_slic": 413, "find_parcellation_cut_coord": 414, "find_probabilistic_atlas_cut_coord": 415, "find_xyz_cut_coord": 416, "finit": 66, "fir": 66, "first": [3, 4, 16, 43, 62, 63, 64, 67, 69, 99, 101, 102, 110, 113, 164, 173, 180, 185, 203, 214, 470], "first_level": [318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 472], "first_level_from_bid": 321, "firstlevelmodel": [34, 64, 102, 318], "fisher": 57, "fit": [30, 32, 34, 35, 41, 45, 64, 70, 72, 102, 163, 173, 177], "fix": [72, 122, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 176], "fixtur": 172, "flexibl": 58, "fmri": [3, 6, 36, 50, 51, 53, 60, 66, 69, 72, 77, 80, 81, 99, 100, 106, 158, 159, 164, 174, 175, 200], "fmrib": 176, "fmriprep": [58, 359, 360, 475], "format": [7, 183], "formula": 103, "frem": [32, 41, 166], "fremclassifi": 298, "fremregressor": 299, "from": [2, 3, 12, 16, 17, 23, 25, 27, 29, 34, 41, 42, 43, 50, 51, 52, 58, 60, 64, 90, 92, 95, 99, 101, 103, 107, 108, 113, 117, 118, 159, 168, 183, 184, 185, 475, 476], "fsaverag": 204, "fsaverage3": 205, "fsaverage4": 206, "fsaverage5": 207, "fsaverage6": 208, "fsl": [176, 361, 475], "full": [158, 159, 164], "function": [17, 20, 24, 43, 46, 48, 49, 52, 53, 56, 68, 100, 101, 113, 158, 159, 160, 162, 163, 167, 169, 172, 184, 186, 187, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484], "fund": 0, "further": [7, 46, 99, 117, 167, 169], "gambl": [41, 166, 215], "gap": 171, "gener": [16, 17, 34, 46, 63, 64, 72, 73, 76, 78, 105, 115, 187, 472], "get": [25, 57, 70, 105, 172], "get_bids_fil": 356, "get_clusters_t": 456, "get_data": 341, "get_data_dir": 283, "get_design_from_fslmat": 361, "get_projector": 411, "get_slic": 412, "github": 181, "given": [16, 184], "glass": [14, 15, 17], "glassbrainax": 386, "glm": [6, 34, 62, 72, 75, 113, 174, 175, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 470, 472], "glob": [4, 183], "global": [12, 58], "glossari": 178, "glover_dispersion_deriv": 322, "glover_hrf": 323, "glover_time_deriv": 324, "go": [46, 99, 109, 117, 167], "goe": 172, "good": 164, "graph": [54, 56, 60, 159], "grid": 171, "group": [20, 50, 53, 55, 100, 110, 158, 171], "group_sparse_covari": 234, "groupsparsecovari": 231, "groupsparsecovariancecv": 232, "guid": 487, "guidelin": 172, "handl": 2, "harvard": [11, 209], "haxbi": [3, 19, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 99, 164, 166, 210], "hcp": 191, "header": 103, "help": [172, 180], "hemispher": [14, 15], "hemodynam": 67, "here": [17, 43], "hierarch": 51, "hierarchicalkmean": 444, "high_variance_confound": [342, 460], "higher": [10, 67], "highlight": [123, 124, 126, 127, 128, 129, 130, 138, 139, 140, 143, 146, 149, 150, 151, 152, 153, 155, 157], "hour": 485, "hous": [30, 31, 32, 37, 38, 104], "how": [16, 172, 181, 185], "hrf": 173, "html": [64, 172], "htmlreport": 455, "human": 27, "hyperparamet": 40, "i": [3, 7, 53, 100, 174, 180, 183, 185], "ica": [50, 105, 163], "icbm": 211, "idea": 172, "illustr": 25, "imag": [3, 4, 7, 9, 10, 17, 18, 29, 69, 82, 84, 86, 91, 94, 96, 98, 103, 105, 109, 111, 113, 117, 118, 168, 183, 184, 185, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 473, 476, 484], "img_to_signals_label": 450, "img_to_signals_map": 451, "impact": [10, 58], "implement": 3, "import": [70, 485], "improv": 95, "impul": 66, "increas": 166, "independ": 106, "index_img": 343, "individu": 184, "infer": 44, "inflat": 23, "inform": 169, "initi": [72, 171], "inmemorymesh": 462, "input": [103, 183], "inspect": [3, 6], "instal": [172, 485], "instanti": 34, "integr": 172, "interact": [17, 158, 159, 479, 484], "interest": [10, 95], "interfac": [58, 356, 357, 358, 359, 360, 361, 475], "internet": [2, 183], "interpret": 163, "intersect_mask": 380, "intro": 6, "introduct": [3, 164, 174, 180], "invers": [54, 55, 158, 185], "inverse_transform": 117, "issu": [144, 157, 181], "iter": [49, 171], "iter_img": 344, "its": 25, "itself": 43, "jimura": 41, "juelich": [11, 212], "kfold": 3, "kind": [53, 100], "kmean": 51, "known": [144, 157], "l1": 41, "label": [3, 12, 40, 58, 87, 181, 471], "languag": [196, 213], "largest": 70, "largest_connected_component_img": 345, "latest": 485, "lean": 99, "learn": [0, 36, 40, 50, 51, 52, 99, 111, 117, 162, 163, 167, 180, 185], "leav": 3, "left": 15, "let": 43, "level": [3, 62, 63, 64, 67, 69, 75, 77, 78, 79, 80, 81, 82, 99, 102, 110, 113, 158, 164, 167, 173, 177, 203, 214, 470], "librari": 176, "licens": [190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229], "like": [109, 183], "likelihoodmodelresult": 308, "limit": 16, "linear": [165, 472], "link": [158, 485], "load": [3, 7, 14, 15, 19, 23, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 49, 50, 53, 58, 76, 95, 99, 100, 117, 161, 164, 183, 185, 475], "load_confound": 359, "load_confounds_strategi": 360, "load_fsaverag": 284, "load_fsaverage_data": 285, "load_img": 346, "load_mni152_brain_mask": 286, "load_mni152_gm_mask": 287, "load_mni152_gm_templ": 288, "load_mni152_templ": 289, "load_mni152_wm_mask": 290, "load_mni152_wm_templ": 291, "load_nki": 292, "load_sample_motor_activation_imag": 293, "load_surf_data": 467, "load_surf_mesh": 468, "local": [18, 73, 107, 108, 196, 197, 213, 214], "locat": 25, "look": 4, "loop": [2, 3], "lprojector": 387, "lrprojector": 388, "lsa": 101, "lss": 101, "lyrprojector": 389, "lyrzprojector": 390, "lzrprojector": 391, "lzryprojector": 392, "machin": [3, 117, 180], "made": 164, "mainten": [172, 181], "make": [10, 17, 33, 172, 181], "make_first_level_design_matrix": 325, "make_glm_report": 457, "make_second_level_design_matrix": 332, "manipul": [4, 84, 113, 182, 184, 483], "manual": [3, 95, 116, 181, 184], "map": [6, 10, 13, 17, 18, 22, 31, 42, 44, 45, 49, 50, 57, 89, 95, 101, 105, 109, 118, 162, 164, 166, 170, 176, 177, 187, 215, 218, 220, 471, 484], "marker": [44, 484], "mask": [12, 17, 19, 26, 33, 37, 43, 67, 90, 95, 99, 105, 111, 117, 164, 167, 169, 184, 185, 373, 374, 375, 376, 377, 378, 379, 380, 381, 477], "masker": [24, 111, 185, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 471, 476], "mass": [44, 478], "mass_univari": [382, 478], "massiv": [44, 104, 107, 108, 169], "match": [183, 184], "math_img": [91, 103, 347], "matplotlib": [13, 35], "matric": [27, 55, 65, 101, 162, 185, 191], "matrix": [3, 32, 36, 51, 54, 56, 58, 60, 79, 158, 159, 173], "maximum": 171, "maxprob": 159, "mean": [86, 174, 176], "mean_img": 348, "mean_scal": 326, "measur": [3, 49, 99, 164, 167], "megatrawl": [27, 191], "memori": 183, "mesh": [7, 10, 25, 484], "meta": 109, "method": [51, 117], "min_siz": 87, "minu": 109, "mix": [41, 166, 215], "miyawaki": [42, 43, 216], "mni": 90, "mode": [21, 60, 63, 87, 88, 484], "model": [3, 42, 44, 64, 66, 67, 68, 70, 72, 76, 77, 78, 80, 81, 101, 102, 110, 163, 165, 166, 167, 173, 174, 177, 472], "modifi": [103, 171], "modul": [65, 70, 73], "more": [16, 18, 167], "morphometri": [44, 45, 76, 177, 220], "mosaicslic": 393, "most": [53, 70, 100], "motion": 58, "motor": 107, "movi": [161, 162], "mri": 68, "msdl": [21, 53, 100, 217], "multi": [36, 40, 55, 163, 165], "multimod": 227, "multiniftilabelsmask": [185, 363], "multiniftimapsmask": [185, 364], "multiniftimask": [185, 365], "multipl": [4, 10, 16, 158, 174, 177, 185], "multiscal": [20, 195], "multivari": [106, 189], "mvpa": 168, "name": 183, "nativ": 71, "negat": 91, "nest": 35, "net": 45, "network": [27, 52, 60, 63, 88, 163, 191], "neuroimag": [26, 117, 165, 180, 183, 185], "neurospin": 73, "neurosynth": 118, "neurovault": [105, 109, 118, 218], "new": [124, 125, 126, 127, 131, 133, 134, 135, 136, 143, 144, 145, 146, 149, 150, 151, 152, 153, 155, 157], "new_img_lik": 349, "nifti": [3, 57, 183, 184, 471], "niftilabelsmask": [92, 185, 366], "niftimapsmask": [185, 367], "niftimask": [90, 93, 185, 368], "niftispheresmask": [185, 369], "niimg": [2, 183], "nilearn": [0, 4, 13, 14, 15, 16, 17, 22, 163, 164, 172, 179, 180, 182, 186, 187, 188, 189, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485], "nilearn_data": 183, "nki": 219, "node": 10, "nois": 67, "non": 117, "non_parametric_infer": 333, "norm": 171, "note": [190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229], "now": [16, 36, 54, 56], "number": [16, 171], "numer": [5, 171], "oasi": [44, 45, 76, 220], "object": [21, 30, 32, 35, 64, 102, 163, 172, 183, 185], "obtain": [30, 64, 102], "ol": 67, "olsmodel": 309, "one": [2, 52, 64, 80, 184], "onli": [16, 52, 64, 185], "open": [183, 185], "openneuro": 64, "oper": [184, 480], "optim": 40, "option": 15, "order": 67, "organ": 181, "origin": 87, "orthoprojector": 394, "orthoslic": 395, "other": [0, 22, 167], "our": [4, 43], "out": 3, "outlin": 10, "output": [64, 76, 118, 183], "over": [4, 12, 49], "overlai": 484, "own": 117, "oxford": [11, 209], "page": [158, 159, 162, 163, 173, 176, 177], "pair": 81, "panda": 183, "paradigm": [6, 79, 109], "paramet": [10, 35, 63, 65, 67, 68, 69, 87, 99, 101, 158, 165, 167, 185], "parametr": [65, 73, 176], "parcel": [20, 23, 49, 51, 58, 159, 161, 162, 445], "parse_bids_filenam": 357, "partial": [53, 60], "patch_openneuro_dataset": 294, "path": 183, "pattern": [12, 46], "pauli": 221, "pcp": 190, "percentil": 35, "perform": [6, 57, 63, 69, 82, 99, 164, 166, 167], "permut": 99, "permuted_ol": 382, "phenotyp": 183, "philosophi": 185, "pial": 23, "pipelin": [30, 34, 35, 40, 111, 116, 117, 166, 167, 185], "plot": [3, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 25, 32, 33, 35, 36, 46, 49, 52, 57, 60, 67, 68, 70, 81, 109, 111, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 479, 484], "plot_anat": [17, 417], "plot_carpet": 418, "plot_connectom": 419, "plot_contrast_matrix": 420, "plot_design_matrix": 421, "plot_design_matrix_correl": 422, "plot_epi": [17, 423], "plot_ev": 424, "plot_glass_brain": [17, 425], "plot_img": 426, "plot_img_comparison": 427, "plot_img_on_surf": 428, "plot_mark": 429, "plot_matrix": 430, "plot_prob_atla": [21, 431], "plot_roi": [17, 432], "plot_stat_map": [17, 21, 433], "plot_surf": 434, "plot_surf_contour": 435, "plot_surf_roi": 436, "plot_surf_stat_map": [437, 484], "plotlysurfacefigur": 396, "point": [25, 185], "polici": 181, "polydata": 463, "polymesh": 464, "posit": 77, "post": 181, "power": [53, 100, 222], "pr": 172, "pre": 172, "prec_to_parti": 235, "precis": 55, "predefin": 58, "predict": [3, 29, 30, 35, 36, 43, 44, 45, 70, 99, 100, 113, 164, 165, 168, 173], "prepar": [33, 36, 37, 43, 63, 69, 82, 101, 164, 169, 181, 184, 185], "preprocess": [40, 44, 117, 187, 195, 482], "primer": 174, "principl": [169, 171], "prior": 45, "privat": 172, "probabilist": [21, 22, 49, 56, 159, 187], "process": 473, "produc": 57, "project": [15, 27, 69, 172, 181], "projector": 479, "proper": 34, "proport": 77, "protocol": 109, "provid": [16, 17], "pull": [172, 181], "purpos": [16, 17], "put": 164, "pypi": 181, "python": [5, 183], "qualiti": [44, 45, 95], "quantifi": 43, "question": 172, "quick": 102, "quickstart": 485, "r": 70, "radiu": 169, "rang": 72, "raw": 90, "rc": [143, 157], "read": [7, 169, 183], "recept": 42, "recognit": [32, 37, 46, 104], "recommend": 172, "reconstruct": 43, "recursive_neighbor_agglomer": 452, "reduct": 164, "refer": [3, 23, 24, 32, 33, 38, 39, 42, 43, 46, 49, 50, 51, 53, 58, 60, 71, 72, 73, 77, 99, 100, 101, 104, 118, 158, 159, 161, 162, 163, 164, 165, 166, 169, 170, 171, 178, 180, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 474], "region": [10, 52, 53, 55, 56, 63, 87, 88, 89, 92, 95, 159, 161, 162, 185, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 480], "regionextractor": 447, "regress": 165, "regressionresult": 310, "regressor": 65, "regular": 166, "relabel": 87, "relat": [163, 170], "releas": [181, 485], "remov": [58, 67, 185], "rena": [51, 446], "reorder_img": 350, "report": [34, 60, 63, 64, 72, 76, 172, 455, 456, 457, 470, 471, 481], "repositori": 118, "represent": [51, 161, 183], "request": [172, 181], "resampl": [85, 90, 94, 184, 185, 473], "resample_img": 351, "resample_to_img": 352, "reshap": 105, "residu": [70, 173], "resiz": 185, "resolut": [10, 184, 185], "respons": [35, 38, 66, 67, 68], "rest": [158, 159, 160], "restart": 171, "restrict": [3, 37, 38], "result": [4, 24, 30, 33, 40, 52, 55, 81, 82, 117, 161, 162, 163, 164], "retriev": [3, 6, 11, 16, 17, 18, 20, 24, 30, 54, 56, 58, 60, 67, 99], "review": 172, "right": [15, 16, 101, 165], "robust": 166, "roi": [17, 24, 33, 53, 95, 184], "row": 16, "rprojector": 397, "run": [6, 34, 43, 46, 67, 71, 72, 105, 167, 174], "run_glm": 327, "sagitt": [14, 16], "sampl": [10, 25, 68, 80, 81], "saniti": 102, "save": [4, 7, 16, 57, 64, 76, 484], "save_glm_to_bid": 358, "scale": [116, 484], "schaefer": 223, "scheme": 25, "scikit": [0, 36, 40, 99, 111, 117, 167, 185], "scope": 172, "score": [3, 6, 30, 35, 36, 37, 42, 169], "screen": 35, "script": 164, "scrub": 58, "search": 171, "searchlight": [37, 38, 169, 300], "second": [75, 77, 78, 79, 80, 81, 82, 102, 110, 113, 177, 470], "second_level": [331, 332, 333, 472], "secondlevelmodel": 331, "see": [3, 51, 60], "seed": [16, 24, 57, 60, 63, 172, 185], "seitzman": 224, "select": [2, 40, 99, 118, 158, 164], "select_from_index": 295, "separ": [12, 87], "seri": [24, 26, 54, 56, 57, 60, 70, 90, 101, 159, 173, 185, 482], "set": [23, 35, 72, 165, 167, 169, 172], "sever": 165, "shape": [183, 184], "short": 111, "show": [16, 39, 101, 438], "side": 16, "signal": [34, 53, 55, 56, 58, 60, 92, 159, 185, 458, 459, 460, 476, 482], "signals_to_img_label": 453, "signals_to_img_map": 454, "signific": [6, 70], "simpl": [4, 33, 46, 64, 72, 79, 82, 93, 164], "simpleregressionresult": 311, "simul": [46, 59, 158, 167], "singl": [6, 16, 57, 71], "size": 184, "slice": [16, 46, 484], "slicer": 479, "smith": [88, 225], "smooth": [4, 67, 96, 184, 185], "smooth_img": 353, "softwar": 176, "some": 82, "space": [45, 71, 158], "spacenet": [41, 45, 170], "spacenetclassifi": 301, "spacenetregressor": 302, "spars": [54, 55, 158, 171], "spatial": [50, 166, 170, 184], "special": 184, "specif": [52, 72, 118, 184], "specifi": 6, "sphere": [60, 169, 471], "spm": [169, 176, 226, 227], "spm_dispersion_deriv": 328, "spm_hrf": 329, "spm_time_deriv": 330, "squar": 70, "stabil": 171, "stabl": [181, 195], "standard": 101, "state": 160, "statist": [6, 10, 17, 64, 82, 89, 95, 98, 109, 113, 118, 174, 176, 177, 187, 215, 218, 484], "step": [4, 180, 185], "stimuli": [39, 42, 43], "stimulu": 68, "stop": [109, 171], "store": 183, "strategi": [36, 58, 164, 185], "strength": 60, "structur": [34, 59, 170, 172], "studi": [3, 53, 99, 105, 109, 166], "style": 172, "subject": [6, 53, 55, 57, 64, 71, 80, 110, 158, 163, 185], "success": 109, "summar": 33, "summari": [60, 131, 157, 158, 159, 162, 163, 173, 176, 177], "support": 3, "surfac": [7, 10, 23, 24, 25, 38, 69, 110, 111, 129, 157, 173, 219, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 483, 484], "surfaceimag": 465, "surfacelabelsmask": [111, 370], "surfacemapsmask": 371, "surfacemask": 372, "surfacemesh": 466, "svc": 99, "svm": [3, 30, 99, 164, 167], "swap_img_hemispher": 354, "sym_matrix_to_vec": 236, "synthet": 171, "t": [82, 89], "t_map": 80, "tabl": 487, "talairach": 228, "tangent": 158, "target": 184, "task": [73, 101, 107, 108], "tcontrastresult": 312, "team": 0, "technic": 25, "templat": [90, 94, 187, 204, 205, 206, 207, 208, 211], "tempor": 185, "term": 105, "test": [6, 70, 80, 81, 82, 95, 99, 172], "text": 183, "them": 181, "thi": 95, "those": 51, "three": [16, 101], "threshold": [6, 64, 177], "threshold_img": 355, "threshold_stats_img": 334, "through": 2, "tiledslic": 398, "time": [8, 12, 24, 26, 28, 47, 54, 56, 57, 60, 61, 63, 67, 70, 74, 83, 90, 97, 112, 114, 159, 171, 173, 180, 185, 482, 486], "tissu": 12, "togeth": 164, "tool": [16, 17], "toolbox": 176, "top": 10, "total": 158, "tox": 181, "train": [31, 40], "transform": [57, 184, 185], "trial": 101, "true": 77, "tsv": 73, "tune": 99, "turn": [3, 51], "tutori": [1, 2, 3, 113], "tv": 41, "two": [16, 71, 72, 81, 165], "type": 12, "u": 43, "understand": [40, 67, 90, 183, 185], "univari": [44, 104, 107, 108, 169, 478], "unmask": [117, 185, 381], "unpair": 81, "up": [72, 116, 169, 172], "upload": 181, "us": [3, 10, 16, 35, 36, 41, 50, 52, 53, 58, 88, 89, 92, 93, 99, 111, 118, 161, 162, 164, 167, 175, 180, 181, 183, 230, 232, 239, 241, 242, 244, 245, 246, 247, 248, 251, 252, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 283, 284, 285, 286, 289, 292, 293, 295, 296, 297, 298, 299, 300, 302, 303, 304, 313, 315, 318, 320, 321, 325, 331, 332, 333, 334, 336, 337, 338, 341, 342, 343, 344, 346, 347, 348, 349, 351, 352, 353, 355, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 376, 381, 382, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 445, 447, 448, 449, 455, 456, 457, 461, 462, 463, 464, 465, 466, 469, 484], "usag": [116, 185], "user": [183, 487], "util": [473, 477], "v": [30, 31, 32, 37, 104], "valid": [3, 30, 35, 36, 40, 99, 162, 164, 167, 169, 171], "valu": [35, 171], "variabl": 53, "variat": 171, "variou": 16, "vbm": [44, 45, 76], "vec_to_sym_matrix": 237, "vector": 3, "version": 485, "via": [30, 40], "view": [10, 16, 23, 24], "view_connectom": 439, "view_img": [17, 440], "view_img_on_surf": [441, 484], "view_mark": 442, "view_surf": [443, 484], "visual": [2, 3, 9, 10, 11, 12, 16, 17, 20, 21, 22, 23, 26, 27, 30, 31, 32, 37, 38, 42, 43, 44, 45, 51, 54, 56, 60, 82, 85, 99, 109, 110, 113, 117, 161, 162, 163, 164, 169, 185, 484], "vol_to_surf": [25, 469], "volum": [2, 3, 4, 10, 25, 26, 67, 84, 113, 182, 184, 185, 220], "voxel": [6, 44, 45, 57, 76, 95, 169, 177, 184], "wai": 16, "ward": 51, "warm": 171, "watch": [161, 162], "we": [16, 33, 36, 43, 172, 174], "web": [10, 23, 54, 56, 60], "weight": [3, 32, 99, 164], "what": [3, 7, 53, 100, 157, 172, 174, 180], "when": [18, 183], "where": 183, "which": [25, 161], "who": 172, "whole": 14, "within": 60, "without": [16, 58, 99, 164, 167], "work": 7, "would": 25, "xprojector": 399, "xslicer": 400, "xzprojector": 401, "xzslicer": 402, "yeo": [49, 87, 229], "your": [101, 117, 172], "yprojector": 403, "yslicer": 404, "yxprojector": 405, "yxslicer": 406, "yzprojector": 407, "yzslicer": 408, "z": [6, 57, 109], "zprojector": 409, "zslicer": 410}})
