.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_01_plotting_plot_haxby_masks.py>`     to download the full example code or to run this example in your browser via Binder
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_01_plotting_plot_haxby_masks.py:


Plot Haxby masks
=================

Small script to plot the masks of the Haxby dataset.



.. image:: /auto_examples/01_plotting/images/sphx_glr_plot_haxby_masks_001.png
    :alt: plot haxby masks
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    First subject anatomical nifti image (3D) is at: /home/nicolas/nilearn_data/haxby2001/subj2/anat.nii.gz
    First subject functional nifti image (4D) is at: /home/nicolas/nilearn_data/haxby2001/subj2/bold.nii.gz
    /home/nicolas/GitRepos/nilearn-fork/nilearn/plotting/displays.py:1750: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
      ax = fh.add_axes([fraction * index * (x1 - x0) + x0, y0,
    /home/nicolas/GitRepos/nilearn-fork/nilearn/plotting/displays.py:101: UserWarning: No contour levels were found within the data range.
      im = getattr(ax, type)(data_2d.copy(),
    /home/nicolas/GitRepos/nilearn-fork/nilearn/plotting/displays.py:101: UserWarning: The following kwargs were not used by contour: 'contours'
      im = getattr(ax, type)(data_2d.copy(),






|


.. code-block:: default

    import matplotlib.pyplot as plt

    from nilearn import datasets
    haxby_dataset = datasets.fetch_haxby()

    # print basic information on the dataset
    print('First subject anatomical nifti image (3D) is at: %s' %
          haxby_dataset.anat[0])
    print('First subject functional nifti image (4D) is at: %s' %
          haxby_dataset.func[0])  # 4D data

    # Build the mean image because we have no anatomic data
    from nilearn import image
    func_filename = haxby_dataset.func[0]
    mean_img = image.mean_img(func_filename)

    z_slice = -14

    fig = plt.figure(figsize=(4, 5.4), facecolor='k')

    from nilearn.plotting import plot_anat, show
    display = plot_anat(mean_img, display_mode='z', cut_coords=[z_slice],
                        figure=fig)
    mask_vt_filename = haxby_dataset.mask_vt[0]
    mask_house_filename = haxby_dataset.mask_house[0]
    mask_face_filename = haxby_dataset.mask_face[0]
    display.add_contours(mask_vt_filename, contours=1, antialiased=False,
                         linewidths=4., levels=[0], colors=['red'])
    display.add_contours(mask_house_filename, contours=1, antialiased=False,
                         linewidths=4., levels=[0], colors=['blue'])
    display.add_contours(mask_face_filename, contours=1, antialiased=False,
                         linewidths=4., levels=[0], colors=['limegreen'])

    # We generate a legend using the trick described on
    # http://matplotlib.sourceforge.net/users/legend_guide.httpml#using-proxy-artist
    from matplotlib.patches import Rectangle
    p_v = Rectangle((0, 0), 1, 1, fc="red")
    p_h = Rectangle((0, 0), 1, 1, fc="blue")
    p_f = Rectangle((0, 0), 1, 1, fc="limegreen")
    plt.legend([p_v, p_h, p_f], ["vt", "house", "face"])

    show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  6.245 seconds)


.. _sphx_glr_download_auto_examples_01_plotting_plot_haxby_masks.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/nilearn/nilearn.github.io/main?filepath=examples/auto_examples/01_plotting/plot_haxby_masks.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_haxby_masks.py <plot_haxby_masks.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_haxby_masks.ipynb <plot_haxby_masks.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
